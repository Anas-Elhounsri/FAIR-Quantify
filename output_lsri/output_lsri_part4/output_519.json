{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/dodomorandi/hatspil"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-11-19T13:25:56Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-10-19T18:35:33Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "High-throughput sequencing pipeline software"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9172606902056073,
      "result": {
        "original_header": "Welcome to HaTSPiL!",
        "type": "Text_excerpt",
        "value": "HaTSPiL is a a Python pipeline for High-Throughput Sequencing analysis. It has been designed to be used inside our laboratory, the Salvatore Oliviero lab within the HuGef institute, TO (IT). Whoever find it useful or a good starting point to develop his own pipeline is encouraged to use and hack the code. \nOne of the most important file is the config.ini. It can be obtained passing only '--configout config.ini' to the program, and it is recommended to modify the resulting file. The program will scan for a file with this name in the current directory, otherwise it must be specified explicitly with the \"-c\" parameter. \n \n"
      },
      "source": "https://raw.githubusercontent.com/dodomorandi/hatspil/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9494578766782248,
      "result": {
        "original_header": "Required software",
        "type": "Text_excerpt",
        "value": "* JVM >= 6\n* JVM 7 (yes, some software needs this version to work correctly)\n* Perl 5\n* Samtools\n* FastQC\n* SeqTK \n* Picard\n* Varscan\n* Genome Analysis ToolKit (GATK)\n* Mutext\n* Bam2TDF\n* NovoAlign or BWA\n* STAR for RNA-Seq analaysis (partial support)\n* Xenome or Disambiguate for xenograft classification\n \n"
      },
      "source": "https://raw.githubusercontent.com/dodomorandi/hatspil/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9409888057098534,
      "result": {
        "original_header": "Create your configuration",
        "type": "Text_excerpt",
        "value": "This creates a configuration that can (and should) be edited to set the correct parameters. \nThe second section needs the path of the _.jar_ files. Generally they are in specific folders, therefore it is necessary to set the correct path for all of them. \nThe third section includes the path of the files used in the analysis. Some of them are mandatory, but others can be omitted. For instance, if you only need _hg38_ and _mm10_ annotations, you can remove the fields related to _hg19_ and _mm9_. Here a brief explanation of what is expected for each parameter: \n* target\\_list: the list of the target genes, in case it is meaninful for the analysis. It is used by Picard.\n* bait\\_list: the list of baits, in case it is meaninful for the analysis. It is used by Picard.\n* indels\\_{genome}: a comma delimited list of VCF files used during indel realignment. Used by GATK.\n* amplicons: a BED file containing the amplicons. Used during the variant calling.\n* name: the name representing the current kit.\n* cancer\\_site: the cancer site to filter for during variant calling. Possible values are: 'esophageal', 'head\\_and\\_neck', 'leukemia', 'adrenocortical\\_carcinoma', 'bladder', 'breast', 'prostate', 'soft\\_tissue\\_sarcoma', 'colorectal', 'chondroblastoma', 'angiosarcoma', 'melanoma', 'oligodendroglioma', 'pancreas', 'craniopharyngioma', 'Ewing\\_sarcoma', 'glioma', 'kidney', 'glioblastoma', 'thyroid', 'ovarian', 'lung', 'endometrial', 'gastric', 'adrenocortical\\_adenoma', 'cholangiocarcinoma', 'myeloma', 'meningioma', 'neuroblastoma', 'astrocytoma', 'small\\_intestine', 'liver', 'multiple', 'myelodysplasia', 'lymphoma', 'medulloblastoma', 'myeloproliferative\\_neoplasm', 'rhabdomyosarcoma', 'rhabdoid', 'nasopharyngeal', 'gallbladder', 'leiomyoma', 'chondromyxoid\\_fibroma', 'cervix', 'thymus', 'adrenocortical\\_carcinoma ', 'renal\\_cell\\_carcinoma', 'ameloblastoma', 'chondrosarcoma', 'intracranial\\_germ\\_cell', 'polymorphous\\_low-grade\\_adenocarcinoma'.\n* adapter\\_r[1|2]: the forward and reverse adapters of the analysis. Used by Cutadapt.\n* [mean|sd]\\_len\\_library: the mean and the standard deviation of the len of the library. Used by NovoAlign. \nModify the configuration file according to your needs. When this step is done, you are almost ready to use HaTSPiL!\n \n"
      },
      "source": "https://raw.githubusercontent.com/dodomorandi/hatspil/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9427154946628804,
      "result": {
        "original_header": "The results",
        "type": "Text_excerpt",
        "value": "Inside the root directory the directory 'reports' is created, containing HTML reports for the current analysis and a global report for all the analysis stored in the database.\nIf specific information are needed, there are many 'REPORTS' directories placed inside the fastq, the `BAM` and the `Variants` folders, which contain many different type of fine-grained information of the whole analysis.\n \n"
      },
      "source": "https://raw.githubusercontent.com/dodomorandi/hatspil/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.993816911325585,
      "result": {
        "original_header": "Customization of HaTSPiL",
        "type": "Text_excerpt",
        "value": "The modular structure of HaTSPiL provides a high level of customizability, but different parts of the software have different complexities. The introduction of new workflow steps is the most appealing and easy customization point, and we briefly describe some small examples. A minimum knowledge of the Python programming language is necessary to extend the features of HaTSPiL. \nSuppose that a tool called\u00a0*parse_bam* has to be integrated in the workflow. This tool expects a BAM\u00a0file and outputs a\u00a0SAM file, and it performs a filtering of the data in order to improve the information of the alignment in some way. First of all, it is necessary to understand in which phase\u00a0*parse_bam* must be run, because of the input filename format. Looking at the\u00a0*runner.py* module it is possible to see the following at some point:\n```python\nmapping = Mapping(analysis, self.fastq_dir)\nmapping.run()\n\nif (\n    not self.parameters[\"use_normals\"]\n    and not self.parameters[\"only_mapping\"]\n    and barcoded_filename.analyte != Analyte.RNASEQ\n):\n    self._run_mutation_analysis(analysis, False)\n```\nWithout worrying too much about details, it is possible to notice that, intuitively, a\u00a0`Mapping` object is created and the mapping is run. After that, when certain conditions are met, the\u00a0`_run_mutation_analysis` is called. *parse_bam* execution has to be handled after the mapping process (because it produces\u00a0BAM\u00a0files from\u00a0FastQ files) and before the mutation analysis (the analysis has to be performed on files filtered with the custom tool). To follow the structure of HaTSPiL, it is a good practice to create a different module named\u00a0*parse_bam.py* that contains the class\u00a0`ParseBam`, can be initialized passing the\u00a0`Analysis` object (as for the other used in the\u00a0runner module) and that can be used through the\u00a0`run()` method. With this idea, the code of\u00a0runner can already be changed:\n```python\n# Start of the running.py file, with lots of imports\n# ...\n\nfrom parse_bam import ParseBam  # In order to import the new class\n\n# ...\n\nmapping = Mapping(analysis, self.fastq_dir)\nmapping.run()\n\nparse_bam = ParseBam(analysis)  # A new instance of `ParseBam` is created\nparse_bam.run()                 # The `.run` method is called \n\nif (\n    not self.parameters[\"use_normals\"]\n    and not self.parameters[\"only_mapping\"]\n    and barcoded_filename.analyte != Analyte.RNASEQ\n):\n    self._run_mutation_analysis(analysis, False)\n```\nThe new module has to be written, in order to correctly perform the execution of the\u00a0*parse_bam*\u00a0tool. A new\u00a0*parse_bam.py* is created inside the hatspil directory.\n```python\nfrom .analysis import Analysis\n\n\nclass ParseBam:\n    def __init__(self, analysis: Analysis) -> None:  # This is the constructor of the class\n        self.analysis = analysis                     # The analysis is stored inside the object\n\n    def parse_bam(self) -> None:                     # The parse_bam method, we need to write it\n        #  TODO\n\n    def run(self) -> None:                           # The `run` helper function, in this case a\n        self.parse_bam()                             # simple wrapper for `parse_bam`\n```\nThis is the basic structure of the new module. It is worth noting that the `run` method, in this case, simply calls the `parse_bam` method. The reason behind this is consistency with respect to the other modules.\nNow it is shown how the `parse_bam` method can be written using the Executor.\n```python\nfrom .analysis import Analysis\nfrom .executor import Executor\n\n\nclass ParseBam:\n    # ...\n    def parse_bam(self) -> None:\n        bam_dir = self.analysis.get_bam_dir()  # We get the BAM files directory thanks to a helper function\n        executor = Executor(self.analysis)     # A new `Executor` is instantiated using the current `analysis`\n        executor(\n            \"/usr/bin/parse_bam -i {input_filename} \"\n            \"-o {output_filename}\",  # This is the command line for the `parse_bam` tool. `{input_filename}`\n                                     # and `{output_filename}` are placeholder for the `Executor`, which\n                                     # replaces them with the correct filenames using all the information\n                                     # it has got\n            output_format=self.analysis.sample + \n            \"parse_bam{organism_str}.sam\",  # This is the format for the output filename. Even in this case,\n                                            # the `Executor` is able to replace placeholders with the\n                                            # appropriate values\n            output_path=bam_dir,  # It is possible to specify where to place the output files, in this case\n                                  # the BAM files directory\n            unlink_inputs=True,  # We do not need the input files, they can be removed\n            only_human=False,  # If supplied, this module can also handle BAM files from organisms that are\n                               # not human\n        )\n    # ...\n```\nThe code shows that it is pretty easy to set an\u00a0Executor in order to run the desired command. It is worth noting that it is possible to use special parameters surrounded by curly braces. These are replaced internally by the\u00a0Executor depending on all the arguments that are set and the input filenames. There are many parameters that can be passed to `executor`, see the documentation for further details. A critical point of this example is the fact that the\u00a0*parse_bam* executable is run using a hard coded path. This can be improved customizing the\u00a0config module in order to let other users specify the location of the program for their needs. The following is the code of the modified\u00a0*config.py* module.\n```python\n# ...\nclass Config:\n    executables = (\"java\", \"java7\", \"perl\", \"seqtk\", \"fastqc\", \"samtools\", \"parse_bam\")\n\n# ...\n    def __init__(self, filename: Optional[str] = None) -> None:\n        # ....\n        self.parse_bam = \"parse_bam\"\n```\nWith this small addition, *parse_bam* becomes a mandatory executable for HaTSPiL, and its availability is checked during the initialization phase of the software. Inside the `__init__` function the default name for the executable is specified, and the path can be omitted as soon as the tool can be `run` using the PATH environment variable.\nThanks to this improvement, the *parse_bam.py* module has to be changed in order to use the new feature:\n```python\n# ...\n        config = self.analysis.config\n        executor(\n            f\"{config.parse_bam} -i {{input_filename}} \"\n            \"-o {output_filename}\",\n        # ...\n```\nIn this case, the Python string formatter is used in order to place the value of `config.parse_bam` inside the command. The `input_filename` now needs a double pair of curly braces, in order to avoid an immediate substitution of a local variable (which does not exist in this case) and to obtain the same behavior as before.\nA small improvement that can be done is providing logging facilities. This is pretty easy, because a Python standard Logger is stored inside the analysis instance and it is already configured. With the following, the module includes a simple information for the user:\n```python\n# ...\n    def parse_bam(self) -> None:\n    self.analysis.logger.info(\"Starting parse_bam\")\n    # ...\n    self.analysis.logger.info(\"Ended parse_bam\")\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/dodomorandi/hatspil/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/dodomorandi/hatspil/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/dodomorandi/hatspil/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "dodomorandi/hatspil"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Welcome to HaTSPiL!"
      },
      "source": "https://raw.githubusercontent.com/dodomorandi/hatspil/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "Welcome to HaTSPiL!"
        ],
        "type": "Text_excerpt",
        "value": "Download from Git repo:\n```bash\ngit clone https://github.com/dodomorandi/hatspil.git\ncd hatspil\n```\n\nInstall for the current user (recommended)...\n\n```bash\npython3 ./setup.py install --user\n```\n\n... or for anyone.\n\n```bash\nsudo python3 ./setup.py install\n```\n"
      },
      "source": "https://raw.githubusercontent.com/dodomorandi/hatspil/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Prepare your fastq files",
        "parent_header": [
          "Welcome to HaTSPiL!"
        ],
        "type": "Text_excerpt",
        "value": "HaTSPiL uses a barcode system to understand what a file represents and how to handle it. In order to run the software, it is necessary to give an appropriate name to the fastq files that are going to be analysed.\n"
      },
      "source": "https://raw.githubusercontent.com/dodomorandi/hatspil/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "How barcoding works",
        "parent_header": [
          "Welcome to HaTSPiL!",
          "Prepare your fastq files"
        ],
        "type": "Text_excerpt",
        "value": "First of all, let's see how a barcoded filename is composed using an example:\n```\nlung-lg003-06-021-201\n```\nIn order to understand the meaning of the barcode, it is necessary to split it into pieces:\n```\n+-------++------+-------+----+---+---+---+---+---+---+\n| part  || lung | lg003 | 06 | 0 | 2 | 1 | 2 | 0 | 1 |\n+-------++------+-------+----+---+---+---+---+---+---+\n| index ||   1  |   2   | 3  | 4 | 5 | 6 | 7 | 8 | 9 |\n+-------++------+-------+----+---+---+---+---+---+---+\n```\n* Part 1 (lung): the name of the project\n* Part 2 (lg003): the pseudo-identifier for the patient/sample\n* Part 3 (06): the tissue\n* Part 4 (0): The molecule\n* Part 5 (1): The experiment type (analyte)\n* Part 6 (2): The kit\n* Part 7 (2): The biopsy\n* Part 8 (0): The sample\n* Part 9 (1): The sequencing\n\nThe project and the patient/sample pseudo-identifier are alphanumeric identifier chosen by the user. They are mainly useful to organize the experiments.\nThe tissue value is a identifier, taken from [TCGA](https://gdc.cancer.gov/resources-tcga-users/tcga-code-tables/sample-type-codes). In this example, a \"recurrent solid tumor\" is used. Common values are _01_ for primary solid tumor, _10_ for blood derived normal and _11_ for solid tissue normal. More information can be found inside the `core.barcoded_filename` module.\nThe molecule identifies whether the library preparation was performed from DNA (0) or RNA (1). \nThe kit, the biopsy, the sample and the sequencing are 0-based indices to identify a tree of characteristics for the sample. For instance, in this case it is the third biopsy from the same patient, it is the first sample taken from that biopsy, and it is the second sequencing (maybe the first one had a problem during the library preparation?).\nThe experiment type (analyte) identifies which type of analysis was performed on the sample. Possible values for now are whole exome sequencing (0), gene panel sequencing (1), fusion panel sequencing (2, unsupported for now) and RNA-seq sequencing (3, partially supported). Keep in mind that the analyte is very related to the index of the kit, because for each combination of analyte and kit it is possible to specify different behaviours using the configuration file.\n"
      },
      "source": "https://raw.githubusercontent.com/dodomorandi/hatspil/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Barcode your fastq files",
        "parent_header": [
          "Welcome to HaTSPiL!",
          "Prepare your fastq files"
        ],
        "type": "Text_excerpt",
        "value": "Let's suppose you are working on a project in which you study different types of carcinoma. This time you collected a biopsy of a lung carcinoma from a new patient. Internally your group uses a random sequence of letters to identify a patient. Moreover, this is the first biopsy from the patient. The biopsy looked quite dishomogeneous, and you decided to divide it in three samples. After some preliminary analysis, you decide to sequence only the third sample. You go for a whole exome sequencing, but unfortunately the first time you sequenced something strange happened with the indices, so you needed to sequence the sample a second time.\n\nHere a brief overview:\n\n* Your project is called 'carc', it stands for _carcinoma_.\n* The patient is lgHRTPAF, 'lg' stands for _lung carcinoma_ and the rest is the random sequence of letters that identify the patient.\n* The tissue is a primary solid tumor, coded as _01_.\n* The molecule is DNA, coded as _0_.\n* You have a kit to perform whole exome sequencing, it is always the same. _0_ is perfect.\n* It is the first biopsy from the patient, coded as _0_ because indices are 0-based.\n* The sample is the third, coded as _2_.\n* It is the second sequencing, coded as _1_.\n\nIt is now possible to compose the barcode for the current analysis:\n```\ncarc-lgHRTPAF-01-000-021\n```\nThe sequencing was performed using paired-end technology, therefore you have got two files, one for the forward reads, on for the reverse reads. The name of the two files will be:\n```\ncarc-lgHRTPAF-01-000-021.R1.fastq\ncarc-lgHRTPAF-01-000-021.R2.fastq\n```\n\nThese two files can be analysed by HaTSPiL. If you have many fastq files to analyse, you can name all of them in order to perform one single run.\n"
      },
      "source": "https://raw.githubusercontent.com/dodomorandi/hatspil/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9935407182272278,
      "result": {
        "original_header": "Welcome to HaTSPiL!",
        "type": "Text_excerpt",
        "value": "As for any Python package, use the *setup.py* script to build and install the package inside your system. Python >= 3.5 is required.  \nOne of the most important file is the config.ini. It can be obtained passing only '--configout config.ini' to the program, and it is recommended to modify the resulting file. The program will scan for a file with this name in the current directory, otherwise it must be specified explicitly with the \"-c\" parameter. \n \n"
      },
      "source": "https://raw.githubusercontent.com/dodomorandi/hatspil/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.845715477582746,
      "result": {
        "original_header": "Required software",
        "type": "Text_excerpt",
        "value": "* JVM >= 6\n* JVM 7 (yes, some software needs this version to work correctly)\n* Perl 5\n* Samtools\n* FastQC\n* SeqTK \n* Picard\n* Varscan\n* Genome Analysis ToolKit (GATK)\n* Mutext\n* Bam2TDF\n* NovoAlign or BWA\n* STAR for RNA-Seq analaysis (partial support)\n* Xenome or Disambiguate for xenograft classification\n \n"
      },
      "source": "https://raw.githubusercontent.com/dodomorandi/hatspil/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9595974095824451,
      "result": {
        "original_header": "Create your configuration",
        "type": "Text_excerpt",
        "value": "HaTSPiL requires a configuration file to know how to work.\nTo start with a clean template you can use the following:\n```bash\nhatspil --configout hatspil.ini\n```\n \nThis creates a configuration that can (and should) be edited to set the correct parameters. \nThe first section requires the path to the executables. If these are available from the current PATH environment variable, you can leave them with the default values. \nModify the configuration file according to your needs. When this step is done, you are almost ready to use HaTSPiL!\n \n"
      },
      "source": "https://raw.githubusercontent.com/dodomorandi/hatspil/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/dodomorandi/hatspil/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2016-2018 Edoardo Morandi\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/dodomorandi/hatspil/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "hatspil"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "dodomorandi"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 375259,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/dodomorandi/hatspil/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Additional dependencies",
        "parent_header": [
          "Welcome to HaTSPiL!"
        ],
        "type": "Text_excerpt",
        "value": "In order to use a MongoDB to store the results of the analyses, it is necessary to install the software and then install the python module:\n\n```bash\npip3 install --user pymongo\n```\n"
      },
      "source": "https://raw.githubusercontent.com/dodomorandi/hatspil/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running HaTSPiL",
        "parent_header": [
          "Welcome to HaTSPiL!"
        ],
        "type": "Text_excerpt",
        "value": "First of all, it is necessary to create a workspace directory for HaTSPiL. For this example, the workspace will be in `/data/hatspil_workspace`. The directory containing the fastq files can be anywhere, but it is good to place it inside the hatspil workspace (other fastq files can be generated during the process). In this case, a `fastq` directory can be created inside `/data/hatspil_workspace`.\n\nNow it is possible to run HaTSPiL in a very simple way:\n```bash\nhatspil --root-dir /data/hatspil_workspace --fastq-dir /data/hatspil_workspace/fastq --config hatspil.ini --scan-samples\n```\n\nIf everything is fine, HaTSPiL with start analysing all the fastq files that have a valid barcode inside the fastq directory.\n\nIt is also possible to create a file with a list of partial barcodes that are intended to be analysed. For instance, it is possible to create the file 'hatspil\\_carc.txt' with the following content:\n```\ncarc\n```\nThen hatspil can be run using `--list-file hatspil_carc.txt` instead of `--scan-samples`.\n\nIt is possible to specify a set of whitelisted barcodes, one per line, and it is possible to use the placeholder `*` to consider valid any possible value for a specific field of the barcode. For instance:\n```\ncarc-*-01-*21\nlymp-*-10-***-**3\n```\nWith this list, HaTSPiL only analyse the solid tumor from the project _carc_ obtained from a gene panel analysis with the third kit, and all the blood normal samples from the project _lymp_ coming from the fourth sequencing.\n\nFor more command line options, it is suggested to run `hatspil --help`.\n"
      },
      "source": "https://raw.githubusercontent.com/dodomorandi/hatspil/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 03:45:01",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ]
}