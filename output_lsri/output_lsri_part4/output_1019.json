{
  "application_domain": [
    {
      "confidence": 0.8818654995960541,
      "result": {
        "type": "String",
        "value": "Semantic web"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/bioinfomaticsCSU/MultiGuideScan"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-04-23T07:16:24Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-11-04T14:52:08Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "a multi-processing tool for designing CRISPR guide RNA library"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.8862655248193939,
      "result": {
        "original_header": "MultiGuideScan",
        "type": "Text_excerpt",
        "value": "A multi-processing tool for designing CRISPR guide RNA library.\nMultiGuideScan parallelizes the workflow of GuideScan ([https://bitbucket.org/arp2012/guidescan_public](https://bitbucket.org/arp2012/guidescan_public)) with the multi-processing mechanism and uses the preprocessing optimization method to improve the computational efficiency. \nin your python session to import all modules of the package, or use \nto import a particular module and then use functions from the module \nand then make sure that the local directory with binaries (such as `$HOME/Library/Python/2.7/bin/`) is available in your PATH. \n\nFor more info on full pipeline of guideRNA database construction from genomic sequences run \nFor more info on computing cutting efficiency scores for Cas9 20mer gRNAs \nFor more info on computing cutting specificity scores for Cas9 20mer gRNAs \n"
      },
      "source": "https://raw.githubusercontent.com/bioinfomaticsCSU/MultiGuideScan/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/bioinfomaticsCSU/MultiGuideScan/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/bioinfomaticsCSU/MultiGuideScan/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bioinfomaticsCSU/MultiGuideScan"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MultiGuideScan"
      },
      "source": "https://raw.githubusercontent.com/bioinfomaticsCSU/MultiGuideScan/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bioinfomaticsCSU/MultiGuideScan/master/MultiGuideScan-source_code/guidescan/example/guidescan-example-ebola-multiprocessing.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bioinfomaticsCSU/MultiGuideScan/master/MultiGuideScan-source_code/guidescan/example/guidescan-example-yeast-multiprocessing.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bioinfomaticsCSU/MultiGuideScan/master/MultiGuideScan-source_code/guidescan/GuideScan_gRNA_Query/GuideScan_db_target_sequence_parse.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bioinfomaticsCSU/MultiGuideScan/master/MultiGuideScan-source_code/guidescan/ces_parallel/ces_tss_parallel_processer.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 0.9745036214110494,
      "result": {
        "original_header": "MultiGuideScan",
        "type": "Text_excerpt",
        "value": "\nEnsure the following dependencies are present \n    :::system\n        samtools 1.3.1\n        easy_install\n        coreutils (shuf)\n        rename\n        python 2.7\n        biopython>=1.66\n        pysam==0.8.3\n        pyfaidx==0.4.7.1\n        bx-python==0.7.3\n        \n        for Rule Set 2 on-target cutting efficiency scores (this must be installed by user: https://pypi.python.org/pypi/scikit-learn/0.16.1)\n        sklearn==0.16.1 \nTo install, run  \n    :::system\n        python setup.py install \nThis will install binaries `guidescan_processer`, `guidescan_bamdata`, `guidescan_guidequery`, `guidescan_cutting_efficiency_processer`, `guidescan_cutting_efficiency_processer`. \nAfter installation, use \nin your python session to import all modules of the package, or use \nFor local installation, run something like \n    :::system\n        python setup.py install --user \nand then make sure that the local directory with binaries (such as `$HOME/Library/Python/2.7/bin/`) is available in your PATH. \n"
      },
      "source": "https://raw.githubusercontent.com/bioinfomaticsCSU/MultiGuideScan/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8969745008397675,
      "result": {
        "original_header": "MultiGuideScan",
        "type": "Text_excerpt",
        "value": "    :::python\n        from guidescan import * \n    :::python\n        from guidescan import guidequery \n"
      },
      "source": "https://raw.githubusercontent.com/bioinfomaticsCSU/MultiGuideScan/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/bioinfomaticsCSU/MultiGuideScan/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "                 Biopython License Agreement\n\nPermission to use, copy, modify, and distribute this software and its\ndocumentation with or without modifications and for any purpose and\nwithout fee is hereby granted, provided that any copyright notices\nappear in all copies and that both those copyright notices and this\npermission notice appear in supporting documentation, and that the\nnames of the contributors or copyright holders not be used in\nadvertising or publicity pertaining to distribution of the software\nwithout specific prior permission.\n\nTHE CONTRIBUTORS AND COPYRIGHT HOLDERS OF THIS SOFTWARE DISCLAIM ALL\nWARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL THE\nCONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY SPECIAL, INDIRECT\nOR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS\nOF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE\nOR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE\nOR PERFORMANCE OF THIS SOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/bioinfomaticsCSU/MultiGuideScan/master/MultiGuideScan-source_code/trie/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MultiGuideScan"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "bioinfomaticsCSU"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 503191,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 54457,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 15735,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bioinfomaticsCSU/MultiGuideScan/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 05:38:57",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ]
}