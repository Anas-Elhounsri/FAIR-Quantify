{
  "application_domain": [
    {
      "confidence": 17.33,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/hammerlab/cytokit"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-04-17T10:27:53Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-08-04T00:48:50Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Microscopy Image Cytometry Toolkit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9144713037542515,
      "result": {
        "original_header": "Cytokit",
        "type": "Text_excerpt",
        "value": "Cytokit is a collection of tools for quantifying and analyzing properties of individual cells in large fluorescent microscopy\ndatasets with a focus on those generated from multiplexed staining protocols.  This includes a GPU-accelerated image processing pipeline (via TensorFlow), \nCLI tools for batch processing of experimental replicates (often requiring conditional configuration, as things tend go \nwrong when capturing hundreds of thousands of microscope images over a period of hours or days), \nand visualization UIs (either Cytokit Explorer or CellProfiler Analyst). \nCytokit runs in a Python 3 environment but also comes (via Docker) with CellProfiler (Python 2) and Ilastik installations. \n"
      },
      "source": "https://raw.githubusercontent.com/hammerlab/cytokit/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9692744966737146,
      "result": {
        "original_header": "Cytokit Explorer UI",
        "type": "Text_excerpt",
        "value": "After processing an experiment, the Explorer UI application can be run within the same docker container\nfor fast visualization of the relationship between spatial features of cells and fluorescent signal \nintensities: \n"
      },
      "source": "https://raw.githubusercontent.com/hammerlab/cytokit/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9834432544974189,
      "result": {
        "original_header": "CellProfiler Analyst",
        "type": "Text_excerpt",
        "value": "In addition to Cytokit Explorer, exports can also be generated using CellProfiler (CP) directly.  This makes it possible\nto ammend a configuration with a line like this to generate both CP spreadhseets and a SQLite DB compatible with\nCellProfiler Analyst (see [pub/config/codex-spleen/experiment.yaml](pub/config/codex-spleen/experiment.yaml)):\n```YAML\nanalysis:\n  - cellprofiler_quantification: \n    - export_csv: true\n    - export_db: true\n    - export_db_objects_separately: true\n```\n \nThese screenshots from CellProfiler Analyst 2.2.1 show a reconstruction of plots used in the CODEX publication\nbased on data generated by dynamic construction and execution of a CP 3.1.8 pipeline (see\n [pub/analysis/codex-spleen/pipeline_execution.sh](pub/analysis/codex-spleen/pipeline_execution.sh)): \n"
      },
      "source": "https://raw.githubusercontent.com/hammerlab/cytokit/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9967108556108883,
      "result": {
        "original_header": "CellProfiler Integration",
        "type": "Text_excerpt",
        "value": "CellProfiler is not easy to use programmatically as it is used here.  There is no official Python API \nand direct access to the internals has to be informed largely based on tests and other source code, but\nfor any interested power-users, here are some parts of this project that may be useful resources: \n"
      },
      "source": "https://raw.githubusercontent.com/hammerlab/cytokit/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9675405324327377,
      "result": {
        "original_header": "Custom Segmentation",
        "type": "Text_excerpt",
        "value": "While the purpose of this pipeline is to perform image preprocessing and segmentation, the semantics of that \nsegmentation often change.  Depending on the experimental context, the provided cell nucleus segmentation may not \nbe adequate and if a different segmentation methodology is required then any custom logic can be added to the \npipeline as in the [mc38-spheroid](pub/analysis/mc38-spheroid) example.  Specifically, a [custom segmentation\nimplementation](pub/analysis/mc38-spheroid/spheroid_cytometer.py) is used here to identify spheroids rather \nthan cells.\n \n"
      },
      "source": "https://raw.githubusercontent.com/hammerlab/cytokit/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9800328710602013,
      "result": {
        "original_header": "Messaging Caveats",
        "type": "Text_excerpt",
        "value": "- **tornado.iostream.StreamClosedError: Stream is closed**: These often follow the completion of successful\npipeline runs.  These can hopefully be eliminated in the future with a dask upgrade but for now they can simply\nbe ignored.\n  \n"
      },
      "source": "https://raw.githubusercontent.com/hammerlab/cytokit/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8011405306816792,
      "result": {
        "original_header": "CODEX Backport",
        "type": "Text_excerpt",
        "value": "As a small piece of standalone functionality, instructions can be found here for how to\nrun deconvolution on CODEX samples: [Standalone Deconvolution Instructions](python/external/deconvolution)\n \n"
      },
      "source": "https://raw.githubusercontent.com/hammerlab/cytokit/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/hammerlab/cytokit/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hammerlab/cytokit/master/python/notebooks/simulation/experiment_generator_01.ipynb"
      },
      "source": "https://raw.githubusercontent.com/hammerlab/cytokit/master/python/notebooks/simulation/experiment_generator_01.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hammerlab/cytokit/master/python/notebooks/simulation/experiment_generator_02.ipynb"
      },
      "source": "https://raw.githubusercontent.com/hammerlab/cytokit/master/python/notebooks/simulation/experiment_generator_02.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hammerlab/cytokit/master/python/notebooks/analysis/processor_data_analysis.ipynb"
      },
      "source": "https://raw.githubusercontent.com/hammerlab/cytokit/master/python/notebooks/analysis/processor_data_analysis.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hammerlab/cytokit/master/python/notebooks/benchmarks/cross_correlation.ipynb"
      },
      "source": "https://raw.githubusercontent.com/hammerlab/cytokit/master/python/notebooks/benchmarks/cross_correlation.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hammerlab/cytokit/master/python/notebooks/examples/marker_profiling_example.ipynb"
      },
      "source": "https://raw.githubusercontent.com/hammerlab/cytokit/master/python/notebooks/examples/marker_profiling_example.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hammerlab/cytokit/master/pub/analysis/cellular-marker/segmentation_debug.ipynb"
      },
      "source": "https://raw.githubusercontent.com/hammerlab/cytokit/master/pub/analysis/cellular-marker/segmentation_debug.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hammerlab/cytokit/master/pub/analysis/cell-size/cell_counter_results.ipynb"
      },
      "source": "https://raw.githubusercontent.com/hammerlab/cytokit/master/pub/analysis/cell-size/cell_counter_results.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hammerlab/cytokit/master/pub/analysis/cell-size/analysis.ipynb"
      },
      "source": "https://raw.githubusercontent.com/hammerlab/cytokit/master/pub/analysis/cell-size/analysis.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hammerlab/cytokit/master/pub/analysis/mc38-spheroid/profile.ipynb"
      },
      "source": "https://raw.githubusercontent.com/hammerlab/cytokit/master/pub/analysis/mc38-spheroid/profile.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hammerlab/cytokit/master/pub/analysis/mc38-spheroid/eda.ipynb"
      },
      "source": "https://raw.githubusercontent.com/hammerlab/cytokit/master/pub/analysis/mc38-spheroid/eda.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hammerlab/cytokit/master/pub/analysis/mc38-spheroid/analysis.ipynb"
      },
      "source": "https://raw.githubusercontent.com/hammerlab/cytokit/master/pub/analysis/mc38-spheroid/analysis.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 18
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/hammerlab/cytokit/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "hammerlab/cytokit"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/hammerlab/cytokit/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hammerlab/cytokit/master/python/pipeline/.lint.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hammerlab/cytokit/master/pub/analysis/cellular-marker/explorer_config.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hammerlab/cytokit/master/pub/analysis/cellular-marker/pipeline_execution.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hammerlab/cytokit/master/pub/analysis/cell-size/explorer_config.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hammerlab/cytokit/master/pub/analysis/cell-size/pipeline_execution.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hammerlab/cytokit/master/pub/analysis/mc38-spheroid/explorer_config.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hammerlab/cytokit/master/pub/analysis/mc38-spheroid/pipeline_execution.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hammerlab/cytokit/master/pub/analysis/codex-spleen/explorer_config.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hammerlab/cytokit/master/pub/analysis/codex-spleen/pipeline_execution.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://storage.googleapis.com/cytokit/docs/images/explorer_screencast.gif"
      },
      "source": "https://raw.githubusercontent.com/hammerlab/cytokit/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hammerlab/cytokit/master/docs/images/cpa_codex_spleen_figs.png"
      },
      "source": "https://raw.githubusercontent.com/hammerlab/cytokit/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9220004062032362,
      "result": {
        "original_header": "Cytokit",
        "type": "Text_excerpt",
        "value": "Cytokit runs in a Python 3 environment but also comes (via Docker) with CellProfiler (Python 2) and Ilastik installations. \n"
      },
      "source": "https://raw.githubusercontent.com/hammerlab/cytokit/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9788587035091565,
      "result": {
        "original_header": "Cytokit Explorer UI",
        "type": "Text_excerpt",
        "value": "<img src=\"https://storage.googleapis.com/cytokit/docs/images/explorer_screencast.gif\" width=\"100%\"/> \n"
      },
      "source": "https://raw.githubusercontent.com/hammerlab/cytokit/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9029770595073113,
      "result": {
        "original_header": "CODEX Backport",
        "type": "Text_excerpt",
        "value": "As a small piece of standalone functionality, instructions can be found here for how to\nrun deconvolution on CODEX samples: [Standalone Deconvolution Instructions](python/external/deconvolution)\n \n"
      },
      "source": "https://raw.githubusercontent.com/hammerlab/cytokit/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8624040676678846,
      "result": {
        "original_header": "CellProfiler Analyst",
        "type": "Text_excerpt",
        "value": "<img src=\"docs/images/cpa_codex_spleen_figs.png\"/>\n \n"
      },
      "source": "https://raw.githubusercontent.com/hammerlab/cytokit/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/hammerlab/cytokit/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Apache License 2.0",
        "spdx_id": "Apache-2.0",
        "type": "License",
        "url": "https://api.github.com/licenses/apache-2.0",
        "value": "https://api.github.com/licenses/apache-2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
      },
      "source": "https://raw.githubusercontent.com/hammerlab/cytokit/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hammerlab/cytokit/master/docs/images/cytokit_tcell_example_5.jpg"
      },
      "source": "https://raw.githubusercontent.com/hammerlab/cytokit/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "cytokit"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "hammerlab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 16659606,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 426360,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 10646,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 9112,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hammerlab/cytokit/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "eric-czech",
          "type": "User"
        },
        "date_created": "2019-04-10T11:26:35Z",
        "date_published": "2019-04-11T15:49:37Z",
        "description": "Initial release revision for publication",
        "html_url": "https://github.com/hammerlab/cytokit/releases/tag/v0.1.1",
        "name": "0.1.1",
        "release_id": 16705664,
        "tag": "v0.1.1",
        "tarball_url": "https://api.github.com/repos/hammerlab/cytokit/tarball/v0.1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/hammerlab/cytokit/releases/16705664",
        "value": "https://api.github.com/repos/hammerlab/cytokit/releases/16705664",
        "zipball_url": "https://api.github.com/repos/hammerlab/cytokit/zipball/v0.1.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "eric-czech",
          "type": "User"
        },
        "date_created": "2019-01-07T14:20:55Z",
        "date_published": "2019-01-07T15:10:52Z",
        "description": "Initial release for publication",
        "html_url": "https://github.com/hammerlab/cytokit/releases/tag/v0.1.0",
        "name": "0.1.0",
        "release_id": 14835352,
        "tag": "v0.1.0",
        "tarball_url": "https://api.github.com/repos/hammerlab/cytokit/tarball/v0.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/hammerlab/cytokit/releases/14835352",
        "value": "https://api.github.com/repos/hammerlab/cytokit/releases/14835352",
        "zipball_url": "https://api.github.com/repos/hammerlab/cytokit/zipball/v0.1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-11-04 02:38:55",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 115
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick Start",
        "parent_header": [
          "Cytokit"
        ],
        "type": "Text_excerpt",
        "value": "Installing and configuring Cytokit currently involves little more than installing [nvidia-docker](https://github.com/nvidia/nvidia-docker/wiki/Installation-(version-2.0)) \nand building or downloading the Cytokit container image, but this inherently limits support to Linux operating \nsystems for GPU-acceleration.  Additional limitations include:\n\n- There is currently no CPU-only docker image \n- Generating and running pipelines requires working knowledge of JupyterLab and a little tolerance for yaml/json files as well as command lines\n- Only tiff files are supported as a raw input image format\n- Deconvolution requires manual configuration of microscope attributes like filter wavelengths, immersion media, and numerical aperture (though support to infer much of this based on the imaging platform may be added in the future)\n- 3 dimensional images are supported but cell segmentation and related outputs are currently 2 dimensional \n- General system requirements include at least 24G RAM and 8G of GPU memory (per GPU)\n\nOnce nvidia-docker is installed, the container can be launched and used as follows:\n\n```bash\nnvidia-docker pull eczech/cytokit:latest\n\n# Set LOCAL_IMAGE_DATA_DIR variable to a host directory for data sharing\n# and persistent storage between container runs\nexport LOCAL_IMAGE_DATA_DIR=/tmp \n\n# Run the container with an attached volume to contain raw images and results  \nnvidia-docker run --rm -ti -p 8888:8888 -p 8787:8787 -p 8050:8050 \\\n-v $LOCAL_IMAGE_DATA_DIR:/lab/data \\\neczech/cytokit\n```\n\nThis will launch JupyterLab on port 8888.  After navigating to localhost:8888 and entering the access token \nprinted on the command line following ```nvidia-docker run```, you can then run an example notebook \nlike [cellular_marker_profiling_example](python/notebooks/examples/marker_profiling_example.ipynb), which can be found \nat ```/lab/repos/cytokit/python/notebooks/examples``` in the JupyterLab file navigator. \n"
      },
      "source": "https://raw.githubusercontent.com/hammerlab/cytokit/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Using a Specific Release",
        "parent_header": [
          "Cytokit",
          "Quick Start"
        ],
        "type": "Text_excerpt",
        "value": "To use a release-specific container, the instructions above can be modified as such where the below \nexample shows how to launch the ```0.1.1``` container:\n\n```bash\nnvidia-docker pull eczech/cytokit:0.1.1\nexport LOCAL_IMAGE_DATA_DIR=/tmp   \nnvidia-docker run --rm -ti -p 8888:8888 -p 8787:8787 -p 8050:8050 \\\n-v $LOCAL_IMAGE_DATA_DIR:/lab/data \\\neczech/cytokit:0.1.1\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/hammerlab/cytokit/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example",
        "parent_header": [
          "Cytokit"
        ],
        "type": "Text_excerpt",
        "value": "One of the goals of Cytokit is to make it as easy as possible to reproduce complicated workflows on big image datasets and to that end, the majority of the logic that drives how Cytokit functions is determined by json/yaml configurations.  \nStarting from template configurations like this sample [Test Experiment](python/pipeline/tests/data/experiment/cellular-marker-small/config/experiment.yaml) and more realistically, this [CODEX BALBc1](pub/config/codex-spleen/experiment.yaml) configuration, pipelines are meant to work as bash scripts executing small variants on these parameterizations for evaluation against one another.  Here is a bash script demonstrating how this often works:\n\n```bash\nEXPERIMENT_DATA_DIR=/lab/data/201801-codex-lung\n\nfor REPLICATE in \"201801-codex-lung-01\" \"201801-codex-lung-02\"; do\n    DATA_DIR=$EXPERIMENT_DATA_DIR/$REPLICATE\n    \n    # This command will generate 3 processing variants to run:\n    # v01 - Cell object determined as fixed radius from nuclei\n    # v02 - Cell object determined by membrane stain\n    # v03 - 5x5 grid subset with deconvolution applied and before/after channels extracted\n    cytokit config editor --base-config-path=template_config.yaml --output-dir=$DATA_DIR/output \\\n      set processor.cytometry.segmentation_params.nucleus_dilation 10 \\\n    save_variant v01/config reset \\\n      set processor.cytometry.membrane_channel_name CD45 \\\n    save_variant v02/config reset \\\n      set acquisition.region_height 5 \\\n      set acquisition.region_width 5 \\\n      set processor.args.run_deconvolution True \\\n      add operator '{extract: {name:deconvolution, channels:[raw_DAPI,proc_DAPI]}}' \\\n    save_variant v03/config exit \n    \n    # Run everything for each variant of this experiment\n    for VARIANT in v01 v02 v03; do\n        OUTPUT_DIR=$DATA_DIR/output/$VARIANT\n        CONFIG_DIR=$OUTPUT_DIR/config\n        cytokit processor run_all --config-path=$CONFIG_DIR --data-dir=$OUTPUT_DIR --output-dir=$OUTPUT_DIR\n        cytokit operator run_all  --config-path=$CONFIG_DIR --data-dir=$OUTPUT_DIR \n        cytokit analysis run_all  --config-path=$CONFIG_DIR --data-dir=$OUTPUT_DIR \n    done\ndone\n```\n\nThe above, when executed, would produce several things:\n\n1. 5D tiles with processed image data (which can be reused without having to restart from raw data) \n2. 5D tile extracts corresponding to user-defined slices (e.g. raw vs processed DAPI images above) as well as montages of these tiles (e.g. stitchings of 16 2048x2048 images on 4x4 grid into single 8192x8192 images)\n3. CSV/FCS files with single-cell data\n4. Final yaml configuration files representing how each variant was defined\n\nFor example, an ad-hoc extraction like this (which could also be defined in the configuration files):\n\n```bash\ncytokit operator extract --name='primary_markers' --z='best' \\\n  --channels=['proc_dapi','proc_cd3','proc_cd4','proc_cd8','cyto_cell_boundary','cyto_nucleus_boundary']\n```\n\nWould produce 5D hyperstack images that could be loaded into ImageJ and blended together:\n\n<img src=\"docs/images/cytokit_tcell_example_5.jpg\" width=\"872\" height=\"509\"/>\n\n*Human T Cells stained for DAPI (gray), CD3 (blue), CD4 (red), CD8 (green) and with nucleus outline (light green), cell outline (light red)*\n"
      },
      "source": "https://raw.githubusercontent.com/hammerlab/cytokit/master/README.md",
      "technique": "header_analysis"
    }
  ]
}