{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/lh3/psmc"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2011-01-23T01:57:31Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-21T03:44:13Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Implementation of the Pairwise Sequentially Markovian Coalescent (PSMC) model"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9429844434528724,
      "result": {
        "original_header": "APPENDIX I: Scaling the PSMC output",
        "type": "Text_excerpt",
        "value": "The PSMC output is scaled to the 2N_0. There are two ways of rescaling the time\nand the popuation size more meaningfully. \nwhere \\theta_0 is given at the 2nd column of \"TR\" lines, and s is the bin size\nwe use for generating the PSMC input. Knowing N_0, we can scale time to\ngenerations and relative population size to effective size by \nwhere t_k and \\lambda_k are given at the 3rd and 4th columns of \"RS\" lines,\nrespectively. \nA problem with the above strategy is that we do not know a definite answer of\n\\mu and in fact it various with regions and mutation types. An alternative way\nis to use per-site pairwise sequence divergence to represent time: \nand use scaled mutation rate to represent population size: \nwhere, again, t_k and \\lambda_k are given at the \"RS\" line, \\theta_0 at the\n\"TR\" line and s is the bin size, which defaults to 100 in fq2psmcfa. \n"
      },
      "source": "https://raw.githubusercontent.com/lh3/psmc/master/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9533510727386016,
      "result": {
        "original_header": "APPENDIX II: Correcting for low coverage",
        "type": "Text_excerpt",
        "value": "For diploid genomes sequenced to low coverage, heterozygotes will be randomly\nlost due to the lack of coverage of both alleles. This has the same effect as\nsmaller mutation rate and can be corrected. If you know the fraction of hets\nmissed due to low coverage, you can generate the PSMC plot with: \nThis says that sample1 has 10% false negative rate (FNR) on hets and sample2\nhas 20%. The plotting script does not correct FNR for bootstrapping. If you\nwant to plot the result with your own scripts, you can increase \\theta_0 to\n\\theta_0/(1-FNR). \nUnfortunately, I haven't found a reliable way to estimate the background FNR\nrelevant to PSMC. The simple and unscientific approach is to align the PSMC\ncurves by eye. Probably a better solution is to downsample a high-coverage\nsample to a certain coverage and measures FNR. I have not done this. \nNot correcting for low coverage is the most common pitfall when using PSMC.\n \n"
      },
      "source": "https://raw.githubusercontent.com/lh3/psmc/master/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8950755054265581,
      "result": {
        "type": "Text_excerpt",
        "value": "This software package infers population size history from a diploid sequence\nusing the Pairwise Sequentially Markovian Coalescent (PSMC) model. The\ndetailed model is described in file `psmc.tex'. \nwhere `diploid.fq.gz' is typically the whole-genome diploid consensus sequence\nof one human individual, which can be generated by, for example: \nHere option -d sets and minimum read depth and -D sets the maximum. It is\nrecommended to set -d to a third of the average depth and -D to twice.  Program\n`fq2psmcfa' transforms the consensus sequence into a fasta-like format where\nthe i-th character in the output sequence indicates whether there is at least\none heterozygote in the bin [100i, 100i+100). \nProgram `psmc' infers the population size history. In particular, the `-p'\noption specifies that there are 64 atomic time intervals and 28 (=1+25+1+1)\nfree interval parameters. The first parameter spans the first 4 atomic time\nintervals, each of the next 25 parameters spans 2 intervals, the 27th spans 4\nintervals and the last parameter spans the last 6 time intervals. The `-p' and\n`-t' options are manually chosen such that after 20 rounds of iterations, at\nleast ~10 recombinations are inferred to occur in the intervals each parameter\nspans. Impropriate settings may lead to overfitting. The command line in the\nexample above has been shown to be suitable for modern humans. \nIf you have questions about PSMC, please ask at .\nYou do not need to register unless you also want to modify your own questions.\nYou may also post comments at github (if you have a github account). I want to\nmake the question and the answer public such that others can see them and I do\nnot need to answer the same question multiple times. Thank you for using PSMC. \n"
      },
      "source": "https://raw.githubusercontent.com/lh3/psmc/master/README",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/lh3/psmc/wiki"
      },
      "source": "https://raw.githubusercontent.com/lh3/psmc/master/README",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/lh3/psmc/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 60
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/lh3/psmc/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "lh3/psmc"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "APPENDIX I: Scaling the PSMC output"
      },
      "source": "https://raw.githubusercontent.com/lh3/psmc/master/README",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.90283775065794,
      "result": {
        "original_header": "APPENDIX II: Correcting for low coverage",
        "type": "Text_excerpt",
        "value": "  psmc_plot.pl -M \"sample1=0.1,sample2=0.2\" prefix sample1.psmc sample2.psmc \n"
      },
      "source": "https://raw.githubusercontent.com/lh3/psmc/master/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9609688634751451,
      "result": {
        "type": "Text_excerpt",
        "value": "To compile the binaries, you may run \n    make; (cd utils; make) \nAfter that, you may try \nFor dipcall output, you may use the following to generate psmcfa: \n    seqtk mutfa ref.fa <(gzip -dc prefix.dip.vcf.gz|utils/vcf2snp.pl -) \\\n      | seqtk seq -cM prefix.dip.bed -l80 | utils/fq2psmcfa - > prefix.psmcfa \nOne probably wants to modify the \"xargs\" command-line to parallelize PSMC. \nIf you have questions about PSMC, please ask at .\nYou do not need to register unless you also want to modify your own questions.\nYou may also post comments at github (if you have a github account). I want to\nmake the question and the answer public such that others can see them and I do\nnot need to answer the same question multiple times. Thank you for using PSMC. \n"
      },
      "source": "https://raw.githubusercontent.com/lh3/psmc/master/README",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8996346388600527,
      "result": {
        "type": "Text_excerpt",
        "value": "    utils/fq2psmcfa -q20 diploid.fq.gz > diploid.psmcfa\n    psmc -N25 -t15 -r5 -p \"4+25*2+4+6\" -o diploid.psmc diploid.psmcfa\n    utils/psmc2history.pl diploid.psmc | utils/history2ms.pl > ms-cmd.sh\n    utils/psmc_plot.pl diploid diploid.psmc \n"
      },
      "source": "https://raw.githubusercontent.com/lh3/psmc/master/README",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/lh3/psmc/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bioinformatics, genomics, population-genetics"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "psmc"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "lh3"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 99237,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "TeX",
        "size": 33133,
        "type": "Programming_language",
        "value": "TeX"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 20886,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Lua",
        "size": 4702,
        "type": "Programming_language",
        "value": "Lua"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "JavaScript",
        "size": 4386,
        "type": "Programming_language",
        "value": "JavaScript"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 1018,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lh3/psmc/master/README"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 06:43:38",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 155
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ]
}