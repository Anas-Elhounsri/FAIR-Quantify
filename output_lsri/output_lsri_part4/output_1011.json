{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Reference Manual</h2>",
        "type": "Text_excerpt",
        "value": "<pre>\n1 C/C++ Provisions\n        1.1 Variables\n                1.1.1 <a href=\"#param\">param</a> \n                1.1.2 <a href=\"#param_summary\">param_summary</a>\n                1.1.3 <a href=\"#S\">S</a>\n                1.1.4 <a href=\"#O\">O</a>\n                1.1.5 <a href=\"#N\">N</a>\n                1.1.6 <a href=\"#D\">D</a>\n                1.1.7 <a href=\"#d\">d</a>\n                1.1.8 <a href=\"#w\">w</a>\n        1.2 Functions\n                1.2.1 <a href=\"#u01\">u01</a>\n                1.2.2 <a href=\"#exec_cmd\">exec_cmd</a>\n2 <span id=\"cpp_req\">C/C++ Requirements</span> (<a href=\"https://github.com/ahstram/al3c/blob/master/macs/macs.so.cpp\">sample</a>)\n        2.1 Parameter & Parameter Summary Statistic Data Types\n                2.1.1 <a href=\"#param_t\">param_t</a>\n                2.1.2 <a href=\"#param_summary_t\">param_summary_t</a>\n        2.2 Printing Parameter Data Type & Summarizing Acceptances\n                2.2.1 <a href=\"#print\">user_t::print</a>\n                2.2.2 <a href=\"#summarize\">user_summary_t::summarize</a>\n        2.3 Generating the Prior Distribution\n                2.3.1 <a href=\"#prior\">user_t::prior</a> \n                2.3.2 <a href=\"#prior_density\">user_t::prior_density</a>\n        2.4 Perturbing Parameters\n                2.4.1 <a href=\"#perturb\">user_t::perturb</a>\n                2.4.2 <a href=\"#perturb_density\">user_t::perturb_density</a>\n        2.5 Simulating Data & Measuring Goodness of Fit\n                2.5.1 <a href=\"#simulate\">user_t::simulate</a>\n                2.5.2 <a href=\"#distance\">user_t::distance</a>\n3 <span id=\"xmlreq\">XML Requirements</span> (<a href=\"https://github.com/ahstram/al3c/blob/master/config/macs.xml\">sample</a>)\n        3.1 <a href=\"#lib\">lib</a> - Shared library\n        3.2 MPI\n                3.2.1 <a href=\"#NP\">NP</a> - Number of Processors\n        3.3 ABC\n                3.3.1 <a href=\"#xmlG\">G</a> - Generations\n                3.3.5 <a href=\"#xmlR\">R</a> - Rank\n                3.3.4 <a href=\"#xmlE\">E</a> - Epsilon\n                3.3.3 <a href=\"#xmlA\">A</a> - Acceptances\n                3.3.2 <a href=\"#xmlT\">T</a> - Trials\n        3.4 <a href=\"#xmlO\">O</a> - Observed data\n</pre>\n"
      },
      "source": "https://raw.githubusercontent.com/ahstram/al3c/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "<span id=\"u01\">u01</span>",
        "parent_header": [
          "Reference Manual</h2>",
          "C/C++ Provisions"
        ],
        "type": "Text_excerpt",
        "value": "```c++\nfloat u01();\n```\n\n<i>Uniform random number generator</i>\n\n<b>Example</b>\n\n```c++\nseed=u01();\nseed_rng(seed);\n\nwhile (1) {\n        x=rng();\n        ...\n}\n```"
      },
      "source": "https://raw.githubusercontent.com/ahstram/al3c/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "<span id=\"exec_cmd\">exec_cmd</span>",
        "parent_header": [
          "Reference Manual</h2>",
          "C/C++ Provisions"
        ],
        "type": "Text_excerpt",
        "value": "```cpp\nuint exec_cmd(const char *cmd);\n```\n\n<i>Run command via system call</i>\n\n<b>Example</b>\n\nSee <a href=\"#simulate\">simulate()</a>\n"
      },
      "source": "https://raw.githubusercontent.com/ahstram/al3c/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "<span id=\"param_t\">param_t</span>",
        "parent_header": [
          "Reference Manual</h2>",
          "C/C++: Parameter &amp; Parameter Summary Statistics"
        ],
        "type": "Text_excerpt",
        "value": "```cpp\nstruct param_t;\n```\n\n<i>A user defined struct with the parameters we are investigating</i>\n\n<b>Example</b>\n\n```c++\nstruct param_t {\n\n        float MigrationRate_EurToAfr,\n              MigrationRate_AsnToAfr,\n              MigrationRate_AsnToEur,\n              EffectivePopulationSize_Afr,\n              GrowthRate_Eur,\n              GrowthRate_Asn,\n              PastEvent_EurToAfrMigration;\n};\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ahstram/al3c/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "<span id=\"print\">print</span>",
        "parent_header": [
          "Reference Manual</h2>",
          "C/C++: Parameter &amp; Parameter Summary Statistics"
        ],
        "type": "Text_excerpt",
        "value": "\n```c++\nconst char *framework_t::print();\n```\n\n<i>Format parameter for printing</i>\n\n<b>Relevant Variables</b>\n\n```c++\nparam_t *param // parameter to format \nfloat *d //  the distance of param's simulation\nfloat *w // // the weight of param\nbool header // printing header or not\n```\n\n<b>Return Value</b>\n\n```c++\nconst char *d <return value>;\n```\n\n<b>Example</b>\n\n```cpp\nuser_t::print(bool header) {\n\n        ofstringstream output;\n\n        if (header)\n                output<<\"#distance        weight        MigrationRate_EurToAfr        MigrationRate_AsnToAfr        MigrationRate_AsnToEur        EffectivePopulationSize_Afr        GrowthRate_Eur        GrowthRate_Asn        PastEvent_EurToAfrMigration\"<<endl;\n        else\n                output<<*d<<*w<<param->MigrationRate_EurToAfr<<param->MigrationRate_AsnToAfr<<param->MigrationRate_AsnToEur<<param->EffectivePopulationSize_Afr<<param->GrowthRate_Eur<<param->GrowthRate_Asn<<param->PastEvent_EurToAfrMigration<<endl;\n                \n        return output.str().c_str();\n}\n````\n"
      },
      "source": "https://raw.githubusercontent.com/ahstram/al3c/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "<span id=\"param_summary_t\">param_summary_t</span>",
        "parent_header": [
          "Reference Manual</h2>",
          "C/C++: Parameter &amp; Parameter Summary Statistics"
        ],
        "type": "Text_excerpt",
        "value": "```cpp\nstruct param_summary_t;\n```\n<i>A user defined struct giving summary statistics necessary for a dynamic perturbation kernel</i>\n\n\n<b>Example</b>\n```cpp\nstruct param_summary_t {\n\n        float MigrationRate_EurToAfr_Variance,\n              MigrationRate_AsnToAfr_Variance,\n              MigrationRate_AsnToEur_Variance,\n              EffectivePopulationSize_Afr_Variance,\n              GrowthRate_Eur_Variance,\n              GrowthRate_Asn_Variance,\n              PastEvent_EurToAfrMigration_Variance;\n\n};\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ahstram/al3c/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "<span id=\"summarize\">summarize</span>",
        "parent_header": [
          "Reference Manual</h2>",
          "C/C++: Parameter &amp; Parameter Summary Statistics"
        ],
        "type": "Text_excerpt",
        "value": "```cpp\nframework_t::summarize();\n```\n\n<i>Write to param_summary_t based on an array of param_t's</i>\n\n<b>Relevant Variables</b>\n\n```cpp\nparam_t **params; // parameter to format \nuint A; // number of parameters \n```\n\n<b>Return Value</b>\n\n```cpp\nparam_summary_t *param_summary; // Desired statistics of accepted parameters\n```\n\n<b>Example</b>\n```cpp\nuser_summary_t::summarize() {\n\n        float m1=0,m2=0;\n\n        for (uint a=0;a<A;a++) {\n                m1+=params[a]->MigrationRate_EurToAfr;\n                m2+=params[a]->MigrationRate_EurToAfr*params[a]->MigrationRate_EurToAfr;\n        }\n        m1/=(float)A;\n        m2/=(float)A;\n\n        param_summary->MigrationRate_EurToAfr_Variance=m2-m1*m1;\n\n/*\n        ...\n        \n        (repeat for other parameters)\n\n        ...\n*/\n\n        m1=0, m2=0;\n\n        for (uint a=0;a<A;a++) {\n                m1+=params[a]->PastEvent_EurToAfrMigration;\n                m2+=params[a]->PastEvent_EurToAfrMigration*params[a]->MigrationRate_PastEvent_EurToAfrMigration;\n        } \n        m1/=(float)A;\n        m2/=(float)A;\n\n        param_summary->PastEvent_EurToAfrMigration_Variance=m2-m1*m1;\n\n\n}\n```"
      },
      "source": "https://raw.githubusercontent.com/ahstram/al3c/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "<span id=\"prior\">prior</span>",
        "parent_header": [
          "Reference Manual</h2>",
          "C/C++: Generating the Prior Distribution"
        ],
        "type": "Text_excerpt",
        "value": "```cpp\nvoid framework_t::prior();\n```\n<i>Generate random parameters from the prior distribution</i>\n\n\n<b>Return Variables</b>\n\n```cpp\nparam_t *param; // Parameter to write to according to the desired prior distribution\n```\n\n<b>Example</b>\n```cpp\nvoid user_t::prior() {\n\n        param->MigrationRate_EurToAfr=u01()*0.4+0.84; // Unif[0.84,1.24]\n        param->MigrationRate_AsnToAfr=u01()*0.32+0.16; // Unif[0.16,0.48]\n        param->MigrationRate_AsnToEur=u01()*0.84+0.72; // Unif[0.72,1.56]\n        param->EffectivePopulationSize_Afr=u01()*0.2994+1.319; // Unif[1.319, 1.6184]\n        param->GrowthRate_Eur=u01()*0.31+0.28; // Unif[0.28, 0.59]\n        param->GrowthRate_Asn=u01()*0.45+0.30; // Unif[0.30, 0.75]\n        param->PastEvent_EurToAfrMigration=u01()*2.8+4.8; // Unif[4.8,7.6]\n}\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/ahstram/al3c/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "<span id=\"prior_density\">prior_density<span>",
        "parent_header": [
          "Reference Manual</h2>",
          "C/C++: Generating the Prior Distribution"
        ],
        "type": "Text_excerpt",
        "value": "```cpp\nframework_t::prior_density();\n```\n\n<i>Give the probability density of a parameter generated by prior()</i>\n\n<b>Relevant Variables</b>\n\n```cpp\nparam_t *param; // A parameter for which we want the pdf of according to the prior distribution\n```\n\n<b>Return Variables</b>\n\n```cpp\nfloat <return value>; // The density of param according to the prior distribution\n```\n\n<b>Example</b>\n\n```cpp\nvoid user_t::prior_density() {\n\n        if (0.84<=param->MigrationRate_EurToAfr && param->MigrationRate_EurToAfr<=1.24\n                 && 0.16<=param->MigrationRate_AsnToAfr && param->MigrationRate_AsnToAfr<=0.48\n                 && 0.72<=param->MigrationRate_AsnToEur && param->MigrationRate_AsnToEur<=1.56\n                 && 1.319<=param->EffectivePopulationSize_Afr && param->EffectivePopulationSize_Afr<=1.6184\n                && 0.28<=param->GrowthRate_Eur && param->GrowthRate_Eur<=0.59\n                 && 0.3<=param->GrowthRate_Asn && param->GrowthRate_Asn<=0.75\n                && 4.8<=param->PastEvent_EurToAfrMigration && param->PastEvent_EurToAfrMigration<=7.6)\n                return 1;\n        else\n                return 0;\n}\n\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ahstram/al3c/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "<span id=\"perturb\">perturb</span>",
        "parent_header": [
          "Reference Manual</h2>",
          "C/C++: Perturbing Variables"
        ],
        "type": "Text_excerpt",
        "value": "```cpp\nvoid framework_t::perturb();\n```\n<i>Perturb parameters according to a desired perturbation kernel</i>\n\n<b>Relevant Variables</b>\n\n```cpp\nparam_summary_t *param_summary; // A user defined struct giving summary statistics of the last generation's accepted parameters\nparam_t *param; // The parameter to be perturbed\n```\n\n<b>Return Variables</b>\n\nparam_t *param; // The perturbed parameter\n\n<b>Example</b>\n\n```cpp\nvoid user_t::perturb() {\n\n        param->MigrationRate_EurToAfr+=(u01()-0.5f)*sqrt(2*param_summary->MigrationRate_EurToAfr_Variance*12);\n\n        /* ... repeat for other parameters ... */\n\n        param->PastEvent_EurToAfrMigration+=(u01()-0.5f)*sqrt(2*param_summary->PastEvent_EurToAfrMigration*12);\n}\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/ahstram/al3c/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "<span id=\"perturb_density\">perturb_density</span>",
        "parent_header": [
          "Reference Manual</h2>",
          "C/C++: Perturbing Variables"
        ],
        "type": "Text_excerpt",
        "value": "```cpp\nfloat framework_t::perturb_density(param_t *old_param);\n```\n\n<i>Give the probability density of a parameter perturbation</i>\n\n<b>Relevant Variables</b>\n```cpp\nparam_t *old_param; // A parameter from last generation's acceptances\nparam_t *param; // The perturbed parameter\nparam_summary_t *summary; // A user defined struct giving summary statistics of the last generation's accepted parameters\n```\n\n<b>Return Variables</b>\n```cpp\nfloat <return value> // The probability density of param being perturbed from old_param, according to the perturbation kernel specified in perturb()\n```\n<b>Example</b>\n\n```cpp\nfloat user_t::perturb_density() {\n\n        if ( fabs(param->MigrationRate_EurToAfr - old_param->MigrationRate_EurToAfr) > sqrt(2*param_summary->MigrationRate_EurToAfr_Variance*12)/2.f ) \n                return 0.f;\n\n        /* ... repeat for other parameters ... */\n\n        if ( fabs(param->PastEvent_EurToAfrMigration - old_param->PastEvent_EurToAfrMigration) > sqrt(2*param_summary->PastEvent_EurToAfrMigration_Variance*12)/2.f ) \n                return 0.f;\n\n        return 1.f;        \n}\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ahstram/al3c/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "<span id=\"simulate\">simulate</span>",
        "parent_header": [
          "Reference Manual</h2>",
          "C/C++: Data simulation"
        ],
        "type": "Text_excerpt",
        "value": "```cpp\nframework_t::simulate();\n```\n<i>Simulate data according to given parameters</i>\n\n<b>Revelant Variables</b>\n```cpp\nparam_t *param; // The parameter to simulate with\nuint N; // The number of rows of simulated/observed data\nuint D; // The number of columns (<b>D</b>imensions) of simulated/observed data\n```\n\n<b>Return Variables</b>\n\n```cpp\nfloat **S; // An N*D array of floating points containing simulated data\n```\n\n<b>Example</b>\n\n```cpp\nuser_t::simulate() {\n\n        ostringstream cmd;\n\n        uint seed=(uint)u01()*UINT_MAX;\n\n        cmd<<\"macs.sh 718 100000 -s \"<<seed<<\" -t .001 -I 3 176 170 372 0 -m 2 1 \"<<param->MigrationRate_EurToAfr<<\" -m 3 1 \"<<param->MigrationRate_AsnToAfr<<\" -m 3 2 \"<<param->MigrationRate_AsnToEur<<\" -n 1 \"<<param->EffectivePopulationSize_Afr<<\" -g 2 \"<<param->GrowthRate_Eur<<\" -g 3 \"<<param->GrowthRate_Asn<<\" -eg .0230000 2 0 -eg .0230001 3 0 -ej .0230002 3 2 -em .0230003 2 1 \"<<param->PastEvent_EurToAfrMigration<<\" -en .0230004 2 0.1861 -ej .051 2 1 -en .148 1 0.731 -r 0.0006\"<<endl;\n\n        //this is a helper function that will write to **S\n        exec_cmd(cmd.str().c_str());\n}\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ahstram/al3c/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "<span id=\"distance\">distance</span>",
        "parent_header": [
          "Reference Manual</h2>",
          "C/C++: Data simulation"
        ],
        "type": "Text_excerpt",
        "value": "```cpp\nfloat framework_t::distance();\n```\n<i>Give the distance between simulated & observed data</i>\n\n\n<b>Relevant Variables</b>\n\n```cpp\nuint N; // The number of rows of simulated/observed data\nuint D; // The number of columns (\"D\"imensions) of simulated/observed data\nfloat **S; // An N*D matrix of floating points containing simulated data\nfloat **O; // An N*D matrix of floating points containing observed data\n```\n\n<b>Return Variables</b>\n\n```cpp\nfloat <return value>; // The distance between observed & simulated data\n```\n \n<b>Example</b>\n```cpp\nuser_t::distance() {\n\n        float r=0;\n\n        for (uint n=0;n<N;n++)\n                for (uint d=0;d<D;d++)\n                        r+=pow(S[n][d]-O[n][d],2);\n\n        return sqrt(r);\n}\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ahstram/al3c/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "<span id=\"lib\">lib</span>",
        "parent_header": [
          "Reference Manual</h2>",
          "XML: lib"
        ],
        "type": "Text_excerpt",
        "value": "<i>C++ library to load</i>\n\n<b>Notes</b>\n\n<b>Example</b>\n```xml\n<lib>lib/libmacs.so</lib>\n```\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/ahstram/al3c/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "<span id=\"NP\">NP</span>",
        "parent_header": [
          "Reference Manual</h2>",
          "XML: MPI"
        ],
        "type": "Text_excerpt",
        "value": "<i>Number of processors to use</i>\n\n<b>Notes</b>\n\nThis should be the total number of processors <i>al3c</i> will be run with. If there are 8 nodes, each with 8 processors, we specify NP as \"64\" and let the MPI system do the rest.\n\n<b>Example</b>\n```xml\n<MPI>\n        <NP>64</NP>  \n</MPI>\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/ahstram/al3c/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "<span id=\"xmlG\">G</span>",
        "parent_header": [
          "Reference Manual</h2>",
          "XML: ABC"
        ],
        "type": "Text_excerpt",
        "value": "<i>Minimum number of generations of ABC-SMC to run before al3c quits</i>\n\n<b>Acceptable values</b>\n\nintegers in {0,1,...}\n\n<b>Notes</b>\n\nThis is the minimum number of generations of ABC-SMC to run. \n\n<i>al3c</i> will not quit until both \"G\" and \"<a href=\"#xmlE\">E</a>\" are satisfied. If you'd like to quit strictly based on \"G\", set \"E\" to be \"0\".\n\n<b>Example</b>\n```xml\n<ABC>\n        <G>15</G>  \n</ABC>\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ahstram/al3c/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "<span id=\"xmlR\">R</span>",
        "parent_header": [
          "Reference Manual</h2>",
          "XML: ABC"
        ],
        "type": "Text_excerpt",
        "value": "<i>Rank of accepted parameter to set next generation's epsilon to</i>\n\n<b>Acceptable values</b>\n\nintegers in {1,2,...,A}\n\nintegers in {1,2,...,A}<sup>G</sup>\n\n<b>Notes</b>\n\nAfter each generation, the distances for each accepted parameter are sorted, least to greatest. If we would like to set the next generation's epsilon (\"acceptance threshold\") according to the present generation's accepted parameter distances, we do so here. This allows us to adaptively set our epsilon schedule according to quantiles, rather than having to set it explicitly beforehand.\n\nIf \"A\" is set to \"1000\", and we want to set our epsilon to the simulation with the 250th best rank, we set \"250\" here. All accepted simulations in the next generation will have a distance less than or equal to this generation's 250th best simulation.\n\nIf we would like to change the quantile used for each generation, we can specify R as a tab/space delimited vector.\n\n0 means \"ignore\". al3c will fall back on an \"E\" vector to set its epsilon schedule. If \"E\" is a scalar, acceptances will be made according to \"A\" and \"T\" only.\n\n\n<b>Example</b>\n```xml\n<ABC>\n        <R>250</R>  \n</ABC>\n\n\n\n<ABC>\n        <R>750 500 400 300 250 250 250 250 250 250 250 250 250 300 400</R>\n</ABC>\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/ahstram/al3c/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "<span id=\"xmlE\">E</span>",
        "parent_header": [
          "Reference Manual</h2>",
          "XML: ABC"
        ],
        "type": "Text_excerpt",
        "value": "<i>Maximum distance to observed data all accepted simulations in a generation must have before al3c quits</i>\n\n<b>Acceptable values</b>\n\nreals in [0,&infin;)\nstrictly decreasing reals in [0,&infin;)<sup>G</sup>\n\n<b>Notes</b>\n\nWhen all accepted parameters in the most recent generation have simulated datasets with a distance from observed data less than or equal to \"E\", we quit.\n\nIf you desire to explicitly set a rejection threshold schedule  (\"epsilon schedule\"), you can do so by letting this value be a vector of G strictly decreasing values, delimited by spaces or tabs. In that case, \"<a href=\"#xmlR\">R</a>\" must be set to \"0\". Otherwise, use \"R\" for dynamic rank-based epsilon schedules. \n\n<i>al3c</i> will not quit until both \"<a href=\"#xmlG\">G</a>\" and \"E\" are satisfied. If you'd like to quit strictly based on \"E\", set \"G\" to be \"0\".\n\n<b>Example</b>\n```xml\n<ABC>\n        <E>1.4</E>  \n</ABC>\n\n\n\n<ABC>\n        <E>100 90 80 70 60 50 40 30 20 10 5 4 3 2 1</E>  \n</ABC>\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/ahstram/al3c/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "<span id=\"xmlA\">A</span>",
        "parent_header": [
          "Reference Manual</h2>",
          "XML: ABC"
        ],
        "type": "Text_excerpt",
        "value": "<i>Number of accepted trials (\"acceptances\") per generation</i>\n\n<b>Acceptable values</b>\n\nintegers in {1,2,...,T}\n\n<b>Notes</b>\n\nThis is the number of accepted parameters we desire per generation.\n\nThe actual value used may be slightly higher than specified here, so that \"<a href=\"#NP\">NP</a>\" divides \"A\", allowing for even allocation of computation across processors.\n\n\n<b>Example</b>\n```xml\n<ABC>\n        <A>1000</A>  \n</ABC>\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ahstram/al3c/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "<span id=\"xmlT\">T</span>",
        "parent_header": [
          "Reference Manual</h2>",
          "XML: ABC"
        ],
        "type": "Text_excerpt",
        "value": "<i>Minimum number of trials per generation</i>\n\n<b>Acceptable values</b>\n\nintegers in {1,2,...}\n\n<b>Notes</b>\n\nThis is the minimum number of trials we must have per generation. Each trial is either accepted or rejected. There may be more trials than specified here depending on the values of \"<a href=\"#xmlE\">E</a>\" and \"<a href=\"#xmlR\">R</a>\" are set.\n\nThe actual value used may be slightly higher than specified here, so that \"<a href=\"#NP\">NP</a>\" divides \"T\", allowing for even allocation of computation across processors.\n\n\n<b>Example</b>\n```xml\n<ABC>\n        <T>10000</T>  \n</ABC>\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/ahstram/al3c/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "<span id=\"xmlO\">O</span>",
        "parent_header": [
          "Reference Manual</h2>",
          "XML: O"
        ],
        "type": "Text_excerpt",
        "value": "<i>Observed data to simulate</i>\n\n<b>Notes</b>\n\nThis can be a 2-dimensional matrix, rows delimited by newlines, columns delimited by tabs/spaces/columns. The number of rows and columns will be counted, and the values of \"N\" and \"D\" will be inferred accordingly.\n\n<b>Example</b>\n```xml\n<O>259        108        103        147\n119        53        66        132\n100        46        61        128</O>\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/ahstram/al3c/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ahstram/al3c"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2015-04-22T16:36:44Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-08-05T06:51:00Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "al3c"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "<span id=\"param_t\">param_t</span>",
        "parent_header": [
          "Reference Manual</h2>",
          "C/C++: Parameter &amp; Parameter Summary Statistics"
        ],
        "type": "Text_excerpt",
        "value": "```cpp\nstruct param_t;\n```\n\n<i>A user defined struct with the parameters we are investigating</i>\n\n<b>Example</b>\n\n```c++\nstruct param_t {\n\n        float MigrationRate_EurToAfr,\n              MigrationRate_AsnToAfr,\n              MigrationRate_AsnToEur,\n              EffectivePopulationSize_Afr,\n              GrowthRate_Eur,\n              GrowthRate_Asn,\n              PastEvent_EurToAfrMigration;\n};\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ahstram/al3c/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "<span id=\"print\">print</span>",
        "parent_header": [
          "Reference Manual</h2>",
          "C/C++: Parameter &amp; Parameter Summary Statistics"
        ],
        "type": "Text_excerpt",
        "value": "\n```c++\nconst char *framework_t::print();\n```\n\n<i>Format parameter for printing</i>\n\n<b>Relevant Variables</b>\n\n```c++\nparam_t *param // parameter to format \nfloat *d //  the distance of param's simulation\nfloat *w // // the weight of param\nbool header // printing header or not\n```\n\n<b>Return Value</b>\n\n```c++\nconst char *d <return value>;\n```\n\n<b>Example</b>\n\n```cpp\nuser_t::print(bool header) {\n\n        ofstringstream output;\n\n        if (header)\n                output<<\"#distance        weight        MigrationRate_EurToAfr        MigrationRate_AsnToAfr        MigrationRate_AsnToEur        EffectivePopulationSize_Afr        GrowthRate_Eur        GrowthRate_Asn        PastEvent_EurToAfrMigration\"<<endl;\n        else\n                output<<*d<<*w<<param->MigrationRate_EurToAfr<<param->MigrationRate_AsnToAfr<<param->MigrationRate_AsnToEur<<param->EffectivePopulationSize_Afr<<param->GrowthRate_Eur<<param->GrowthRate_Asn<<param->PastEvent_EurToAfrMigration<<endl;\n                \n        return output.str().c_str();\n}\n````\n"
      },
      "source": "https://raw.githubusercontent.com/ahstram/al3c/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "<span id=\"param_summary_t\">param_summary_t</span>",
        "parent_header": [
          "Reference Manual</h2>",
          "C/C++: Parameter &amp; Parameter Summary Statistics"
        ],
        "type": "Text_excerpt",
        "value": "```cpp\nstruct param_summary_t;\n```\n<i>A user defined struct giving summary statistics necessary for a dynamic perturbation kernel</i>\n\n\n<b>Example</b>\n```cpp\nstruct param_summary_t {\n\n        float MigrationRate_EurToAfr_Variance,\n              MigrationRate_AsnToAfr_Variance,\n              MigrationRate_AsnToEur_Variance,\n              EffectivePopulationSize_Afr_Variance,\n              GrowthRate_Eur_Variance,\n              GrowthRate_Asn_Variance,\n              PastEvent_EurToAfrMigration_Variance;\n\n};\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ahstram/al3c/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "<span id=\"summarize\">summarize</span>",
        "parent_header": [
          "Reference Manual</h2>",
          "C/C++: Parameter &amp; Parameter Summary Statistics"
        ],
        "type": "Text_excerpt",
        "value": "```cpp\nframework_t::summarize();\n```\n\n<i>Write to param_summary_t based on an array of param_t's</i>\n\n<b>Relevant Variables</b>\n\n```cpp\nparam_t **params; // parameter to format \nuint A; // number of parameters \n```\n\n<b>Return Value</b>\n\n```cpp\nparam_summary_t *param_summary; // Desired statistics of accepted parameters\n```\n\n<b>Example</b>\n```cpp\nuser_summary_t::summarize() {\n\n        float m1=0,m2=0;\n\n        for (uint a=0;a<A;a++) {\n                m1+=params[a]->MigrationRate_EurToAfr;\n                m2+=params[a]->MigrationRate_EurToAfr*params[a]->MigrationRate_EurToAfr;\n        }\n        m1/=(float)A;\n        m2/=(float)A;\n\n        param_summary->MigrationRate_EurToAfr_Variance=m2-m1*m1;\n\n/*\n        ...\n        \n        (repeat for other parameters)\n\n        ...\n*/\n\n        m1=0, m2=0;\n\n        for (uint a=0;a<A;a++) {\n                m1+=params[a]->PastEvent_EurToAfrMigration;\n                m2+=params[a]->PastEvent_EurToAfrMigration*params[a]->MigrationRate_PastEvent_EurToAfrMigration;\n        } \n        m1/=(float)A;\n        m2/=(float)A;\n\n        param_summary->PastEvent_EurToAfrMigration_Variance=m2-m1*m1;\n\n\n}\n```"
      },
      "source": "https://raw.githubusercontent.com/ahstram/al3c/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.8963406769210019,
      "result": {
        "original_header": "Publication",
        "type": "Text_excerpt",
        "value": "<a href=\"http://bioinformatics.oxfordjournals.org/content/early/2015/07/02/bioinformatics.btv393.abstract\">al3c: High-performance software for parameter inference using Approximate Bayesian Computation</a> in <i>Bioinformatics</i>\n \n"
      },
      "source": "https://raw.githubusercontent.com/ahstram/al3c/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9470846898531103,
      "result": {
        "type": "Text_excerpt",
        "value": "_______     \n  ____ _/ /__  /_____  a software framework for numerical approximations\n / __ `/ / /_ >/ ___/  of posterior distributions by Approximate\n/ /_/ / /___/ / /__    Bayesian Computation Sequential Monte Carlo\n\\__,_/_//____/\\___/    in parallel  \n\nal3c is written for two types of users: \n1) Those who have written their own software to address niche scientific questions, and would like to speed things up by using ABC in parallel without too much parallel programming or effort.   \n\nTo accomodate the latter users, we provide a number of examples using \nal3c with MaCS, a  Markovian coalescent theory simulator, which can\neasily be modified for the user's specific case. \n"
      },
      "source": "https://raw.githubusercontent.com/ahstram/al3c/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/ahstram/al3c/wiki"
      },
      "source": "https://raw.githubusercontent.com/ahstram/al3c/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ahstram/al3c/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ahstram/al3c/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ahstram/al3c"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/ahstram/al3c/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ahstram/al3c/master/bin/mpivars.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ahstram/al3c/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "al3c"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "ahstram"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 185920,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 113504,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 29422,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 28199,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 3043,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Assembly",
        "size": 169,
        "type": "Programming_language",
        "value": "Assembly"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ahstram/al3c/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running al3c",
        "parent_header": [
          "Tutorial"
        ],
        "type": "Text_excerpt",
        "value": "al3c is run with the XML files to load as its sole argument, for example:\n\nbin/al3c config/macs.xml\n"
      },
      "source": "https://raw.githubusercontent.com/ahstram/al3c/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "installation",
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "license",
    "faq",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 05:36:56",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 6
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Support",
        "type": "Text_excerpt",
        "value": "For help with using al3c, please email Alexander Stram at astram@usc.edu\n"
      },
      "source": "https://raw.githubusercontent.com/ahstram/al3c/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "al3c+MaCS Example",
        "type": "Text_excerpt",
        "value": "We provide an al3c example for parallelized ABC-SMC using the coalescent simulator MaCS, available at https://github.com/gchen98/macs\n\nHere are some quick examples that can get you running al3c without much thought:\n\n**_Warning!_** *If you have MPI libraries already installed, please skip to the \"From source\" example. Existing MPI libraries will likely interfere with the Linux and OS-X binaries we provide below.*\n"
      },
      "source": "https://raw.githubusercontent.com/ahstram/al3c/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Linux 64-bit",
        "parent_header": [
          "al3c+MaCS Example"
        ],
        "type": "Text_excerpt",
        "value": "```bash\ngit clone https://github.com/ahstram/al3c.git  \ncd al3c/  \nbin/al3c_linux_x86-64 config/macs_linux-x86-64.xml  \n```\n"
      },
      "source": "https://raw.githubusercontent.com/ahstram/al3c/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Mac OS-X",
        "parent_header": [
          "al3c+MaCS Example"
        ],
        "type": "Text_excerpt",
        "value": "\n```bash\ngit clone https://github.com/ahstram/al3c.git  \ncd al3c/  \nbin/al3c_darwin_x86-64 config/macs_darwin-x86-64.xml  \n```\n"
      },
      "source": "https://raw.githubusercontent.com/ahstram/al3c/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "From source",
        "parent_header": [
          "al3c+MaCS Example"
        ],
        "type": "Text_excerpt",
        "value": "To compile the example from source, you will need to ensure that an MPI library such as Intel MPI Library, OpenMPI or MPICH2 is installed, then follow:\n\n```bash\ngit clone https://github.com/ahstram/al3c.git  \ncd al3c/  \n## The following command makes the al3c binary\nmake  \n## The following command compiles the MaCS binary, which requires C++ Boost libraries \ngit clone https://github.com/gchen98/macs.git macs-binary && cd macs-binary && make && ln -s ../macs-binary/macs ../macs/macs && cd .. \n## This makes the MaCS plugin, which uses the above MaCS binary\ncd macs/ && make && cd ../  \n## This initiates al3c, using the \"config/macs.xml\" configuration, which loads the MaCS plugin, which in turn calls the MaCS binary\nbin/al3c config/macs.xml  \n```\n\nModifications to the make.inc files in the al3c/ and al3c/macs/ directory may be necessary for your environment."
      },
      "source": "https://raw.githubusercontent.com/ahstram/al3c/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Tutorial",
        "type": "Text_excerpt",
        "value": "al3c consists of three components: the al3c binary, a user-defined shared library (.so file), and an XML file, which specifies parameters to be used with the user-defined shared library (.so file).\n<pre>\n\n ___________\n|           |\n| XML file  |                      ________________        \n|___________|                     |                |\n             \\  _________         |                |\n              \\|         |        |                |\n               |   al3c  | -----> | desired output |\n              /|_________|        |                |\n ___________ /                    |                |\n|           |                     |________________|\n| .so file  |\n|___________|\n\n</pre>\nNo modification is necessary to the al3c binary-- it is readily available in the git repository. \n\nWe must create a shared library which will specify the:\n\n- parameter space\n- prior distribution\n- parameter perturbation kernel\n- simulation model\n- distance function to compare observed & simulated data\n\nand an XML configuration file, which will specify\n\n- the location of the shared library (.so file)\n- the observed data\n- number of processors to use\n- basic ABC-SMC parameters\n\nA rough diagram of the relation between functions in our shared library follows:\n\n<pre>\nvoid user_t::prior();\n        |               +-----------------------+\n        |               |                       |\n        |               V                       |\n        |        user_t::perturb();<-----+      |\n        |               |                |      |\n        |               |                |      |\n        |               V                |      |\n        +-----> user_t::simulate();      |      |\n                        |                |      |\n                        |                |      |\n                        V                |      |\n                user_t::distance();------+      |\n                        |                       |\n                        |   prior_density();    |        \n                     (weight)                   |\n                        |   perturb_density();  |\n                        |                       |\n                        V                       |\n                user_summary_t::summarize();    |\n                        |                       |\n                        |                       |\n                        V                       |\n                user_t::print(); ---------------+\n                        |\n                        |\n                        V\n                  (output file)\n</pre>\n"
      },
      "source": "https://raw.githubusercontent.com/ahstram/al3c/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Compiling the al3c binary",
        "parent_header": [
          "Tutorial"
        ],
        "type": "Text_excerpt",
        "value": "Note that compiling al3c requires MPI libraries be installed. To avoid installing MPI libraries on a Linux 64-bit or OS X system, you may instead use the static binary \"bin/al3c_linux_x86-64\" (Linux) or \"bin/al3c_darwin_x86-64\" (OS X) and skip this step.\n\nThe following commands will obtain the al3c source code and and compile the al3c binary\n\n```bash\ngit clone http://github.com/ahstram/al3c.git\ncd al3c\nmake\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ahstram/al3c/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Coding the shared library",
        "parent_header": [
          "Tutorial"
        ],
        "type": "Text_excerpt",
        "value": "Shared libraries for use with al3c should be written in C++, and include the \"al3c.hpp\" file which is found in the \"include\" directory. \n\nal3c.hpp defines two functions: \n\n<a href=\"#u01\">u01</a>, which must be used as the shared library's random number generator, or used to seed any external random number generator, in order to ensure that different processors do not use the same random number seed. \n\n<a href=\"#exec_cmd\">exec_cmd</a>, an optional function call external programs to simulate data\n\nal3c.hpp declares two templates:\n\nuser_t, the users' parameters of interest\n\nuser_summary_t, a summary statistic for user_t\n\nThe user must then define all functions listed in <a href=\"#cpp_req\">C/C++ Requirements</a>, in order to complete the definition of these two templates.\n\nFor a sample shared library's source code, please see this <a href=\"https://github.com/ahstram/al3c/blob/master/macs/macs.so.cpp\">sample</a>."
      },
      "source": "https://raw.githubusercontent.com/ahstram/al3c/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Compiling the shared library",
        "parent_header": [
          "Tutorial"
        ],
        "type": "Text_excerpt",
        "value": "We may compile our source file as a shared library using the \"-shared\" and \"-fPIC\" compilers flags, like such:\n\n```bash\n        gcc -shared -o macs.so -fPIC macs.so.cpp\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ahstram/al3c/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "XML configuration",
        "parent_header": [
          "Tutorial"
        ],
        "type": "Text_excerpt",
        "value": "The XML configuration must define all nodes listed in <a href=\"#xmlreq\">XML Requirements</a>. \n\nA sample XML file is available <a href=\"https://github.com/ahstram/al3c/blob/master/config/macs.xml\">here</a>.\n"
      },
      "source": "https://raw.githubusercontent.com/ahstram/al3c/master/README.md",
      "technique": "header_analysis"
    }
  ]
}