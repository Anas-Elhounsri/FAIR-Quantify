{
  "application_domain": [
    {
      "confidence": 20.46,
      "result": {
        "type": "String",
        "value": "Natural Language Processing"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/jjin49/DeepAttentionPan"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-10-25T20:40:04Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-05-28T22:49:14Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "parent_header": [
          "DeepAttentionPan:"
        ],
        "type": "Text_excerpt",
        "value": "- Usage: the codes can be used to train our models, output results on the testing set, output positional attention weights for chosen group of peptides.  And  they also can be used to test on single hla-peptide pair input from the command line.\n\n- Please download the full folder of \"DeepAttentionPan_Code\" to run the programs, or you may need to configure some directory paths.\n\n- Platform: Python 3.6, this version of code needs to use GPU to train,test and ouput attention weights.\nHowever, a CPU version prediction code will be provided upon reasonable request.\nPytorch is required to be installed before running our code. https://pytorch.org/get-started/locally/\n\n\n ### Predict binding affinity of a single hla-peptide pair input from the command line\n To use our pre-trained pan-specific model for predicting binding affinity:\n suppose you want to predict binding affinity of HLA-A*02:01 with peptide QIDVEKKIV, then:\n \n 1) In the folder \"codes\", run in the command line:<br>\n        python single_test.py  HLA-A*02:01 QIDVEKKIV\n  the program will directly output the binding affinity of the hla-peptide pair\n \n"
      },
      "source": "https://raw.githubusercontent.com/jjin49/DeepAttentionPan/master/readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9116737464951812,
      "result": {
        "original_header": "Deep learning prediction of MHC-I peptide binding with attention mechanism",
        "type": "Text_excerpt",
        "value": "By Jing Jin at Machine Learning and Evolution Laboratory<br>\nUniversity of South Carolina \nCite our work: <br>\nJin, J., Liu, Z., Nasiri, A., Cui, Y., Louis, S., Zhang, A., ... & Hu, J. (2021). Deep learning pan\u2010specific model for interpretable MHC\u2010I peptide binding prediction with improved attention mechanism. Proteins: Structure, Function, and Bioinformatics.\n \n"
      },
      "source": "https://raw.githubusercontent.com/jjin49/DeepAttentionPan/master/readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9565336846832183,
      "result": {
        "original_header": "Testing:",
        "type": "Text_excerpt",
        "value": "our final ensemble prediction model is stored in the \"dup_0\" folder, suppose now we want to output testing results of the final model in \"dup_0\". \n"
      },
      "source": "https://raw.githubusercontent.com/jjin49/DeepAttentionPan/master/readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8625543406783638,
      "result": {
        "original_header": "Binding position importance investigation using attention mechanism",
        "type": "Text_excerpt",
        "value": "To output the attention weights of certain group of peptides,  you can also use the \"att_weight.py\" from the trained model(e.g. the model stored in the \"dup_0\"). \n1) In the \"dup_0\", change the \"test_file\" to the name of the file containing the group of the samples that you want to output the average positional attention weights. In the folder \"dataset\", \"testing_9length.txt\" contains all the samples with peptides of 9 length in the testing set. And \"testing_10length.txt\" and \"testing_11length.txt\" refer to the samples with peptides of 10 length and 11 length correspondently.  <br>\n2) Back to the directory \"codes\". Run in command line:<br>\n     \"python att_weight.py dup_0/config.json\". The average attention weights of the group will be output to \"dup_0\".\n  \n"
      },
      "source": "https://raw.githubusercontent.com/jjin49/DeepAttentionPan/master/readme.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/jjin49/DeepAttentionPan/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/jjin49/DeepAttentionPan/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "jjin49/DeepAttentionPan"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DeepAttentionPan:"
      },
      "source": "https://raw.githubusercontent.com/jjin49/DeepAttentionPan/master/readme.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jjin49/DeepAttentionPan/master/deepattentpan.jpg"
      },
      "source": "https://raw.githubusercontent.com/jjin49/DeepAttentionPan/master/readme.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9999764256117784,
      "result": {
        "original_header": "Testing:",
        "type": "Text_excerpt",
        "value": "1) In the file \"dup_0/config.json\", the \"test_file\" refers to the file name of the testing set. All the testing files also need to be stored in the folder \"dataset\". In the folder \"dataset\", the \"testing_set.txt\" is the testing set we used to compare our results with other IEDB benchmark algorithms. <br>\n2) Back to the directory \"codes\". Run in the command line:<br>\n   \"python test.py dup_0/config.json\". After the testing process finishing, the testing results will be output to \"dup_0\", which are \"weekly_result.txt\" in detail and \"weekly_result_METRICS.txt\" for final comparison results.\n      \n"
      },
      "source": "https://raw.githubusercontent.com/jjin49/DeepAttentionPan/master/readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9411313284097331,
      "result": {
        "original_header": "Training:",
        "type": "Text_excerpt",
        "value": "1) Build a new folder \"dup_1\" inside the folder 'codes'. \"dup_1\" will be the folder where the algorithm reads the file storing parameters and outputs the trained models. <br>\n2) Copy the \"config.json\" in \"codes/dup_0\" to \"dup_1\". \"config.json\" is the file storing useful parameters and the source paths of input data.<br>\n3) In the file \"config.json\", change the content of attribute \"working_dir\" to be \"dup_1\". You are free to change other parameters to test the effects. The \"data_file\" refers to the file name of the training set, e.g, \"training_set.txt\". All the data files should be stored in the folder \"dataset\".<br>\n4) Back to the directory \"codes\". Run in the command line: <br>\n   \"python train.py dup_1/config.json\". After the training process finishing, the networks will be output to \"dup_1\".\n \n"
      },
      "source": "https://raw.githubusercontent.com/jjin49/DeepAttentionPan/master/readme.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8617216725216607,
      "result": {
        "original_header": "Deep learning prediction of MHC-I peptide binding with attention mechanism",
        "type": "Text_excerpt",
        "value": "<img src=\"deepattentpan.jpg\" height=\"300px\"> \n"
      },
      "source": "https://raw.githubusercontent.com/jjin49/DeepAttentionPan/master/readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8242836760502179,
      "result": {
        "original_header": "Testing:",
        "type": "Text_excerpt",
        "value": "1) In the file \"dup_0/config.json\", the \"test_file\" refers to the file name of the testing set. All the testing files also need to be stored in the folder \"dataset\". In the folder \"dataset\", the \"testing_set.txt\" is the testing set we used to compare our results with other IEDB benchmark algorithms. <br>\n2) Back to the directory \"codes\". Run in the command line:<br>\n   \"python test.py dup_0/config.json\". After the testing process finishing, the testing results will be output to \"dup_0\", which are \"weekly_result.txt\" in detail and \"weekly_result_METRICS.txt\" for final comparison results.\n      \n"
      },
      "source": "https://raw.githubusercontent.com/jjin49/DeepAttentionPan/master/readme.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/jjin49/DeepAttentionPan/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DeepAttentionPan"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "jjin49"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 60038,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jjin49/DeepAttentionPan/master/readme.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 02:35:23",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 13
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ]
}