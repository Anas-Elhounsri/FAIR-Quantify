{
  "application_domain": [
    {
      "confidence": 0.8911424334332784,
      "result": {
        "type": "String",
        "value": "Semantic web"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/iracooke/protk"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2014-03-06T03:03:12Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-07-24T12:23:19Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Proteomics Toolkit in Ruby"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9807747144706515,
      "result": {
        "original_header": "What is it?",
        "type": "Text_excerpt",
        "value": "Protk is a suite of tools for proteomics. It aims to present a simple and consistent command-line interface across otherwise disparate third party tools.  The following analysis tasks are currently supported;  \n- Tandem MS search with X!Tandem, Mascot, OMSSA and MS-GF+\n- Peptide and Protein inference with Peptide Prophet, iProphet and Protein Prophet\n- Conversion of pepXML or protXML to tabulular format\n- Proteogenomics (mapping peptides to genomic coordinates)\n \n"
      },
      "source": "https://raw.githubusercontent.com/iracooke/protk/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9909551106020318,
      "result": {
        "original_header": "Ruby Compatibility",
        "type": "Text_excerpt",
        "value": "In general Protk requires ruby with a version >=2.0.\nDo not use ruby 2.1.5 as this has a bug that causes a deadlock related to open4 and child processes writing to stderr.\n \n"
      },
      "source": "https://raw.githubusercontent.com/iracooke/protk/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9384244701610571,
      "result": {
        "original_header": "Galaxy Integration",
        "type": "Text_excerpt",
        "value": "Many protk tools have equivalent galaxy wrappers available on the [galaxy toolshed](http://toolshed.g2.bx.psu.edu/) with source code and development occuring in the [protk-galaxytools](github.com/iracooke/protk-galaxytools) repository on github.  In order for these tools to work you will also need to make sure that protk, as well as the necessary third party dependencies are available to galaxy during tool execution.  \nBy far the easiest way to do this is to set up your Galaxy instance to run tools in Docker containers.  All the tools in the [protk-galaxytools](github.com/iracooke/protk-galaxytools) repository are designed to work with [this](https://github.com/iracooke/protk-dockerfile) docker image, and will download and use the image automatically on apprioriately configured Galaxy instances. \nAn installation recipe of `protk` is available from the [Galaxy Tool Shed](https://testtoolshed.g2.bx.psu.edu/view/iuc/package_protk_1_4_2/). If you want to depend on protk for your own Galaxy wrapper create a `tool_dependencies.xml` file with the following content.\n```xml\n<tool_dependency>\n    <package name=\"protk\" version=\"1.4.2\">\n        <repository name=\"package_protk_1_4_2\" owner=\"iuc\"/>\n    </package>\n</tool_dependency>\n```\n \nOne way to install protk would be to just do `gem install protk` using the default system ruby (without rvm). This will probably just work, however you will lose the ability to run specific versions of tools against specific versions of protk.  The recommended method of installing protk for use with galaxy is as follows; \n\tThis sets up an isolated environment where only a specific version of protk is available.  We name the environment according to the protk version number (1.4.2 in this example).  \n\tCreate a directory for galaxy tool dependencies. This must be outside the galaxy-dist directory. I usually create a directory called tool_dependencies alongside galaxy-dist.\n\tOpen the file `universe_wsgi.ini` in the galaxy-dist directory and set the configuration option `tool_dependency_dir` to point to the directory you just created, eg; \n\tIn this example we create the environment for protk `1.4` as this was the version installed in step 4 above. \n\tWhen new versions of galaxy tools are released they may change the version of protk that is required.  Check the release notes on the tool to see what is needed.  For example, if upgrading to version 1.5 you would do the following; \n"
      },
      "source": "https://raw.githubusercontent.com/iracooke/protk/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9755900972988382,
      "result": {
        "original_header": "Sequence databases",
        "type": "Text_excerpt",
        "value": "All `protk` tools are designed to work with sequence databases provided as simple fasta formatted flat files. For most use cases it is simplest to just manage these manually. \n"
      },
      "source": "https://raw.githubusercontent.com/iracooke/protk/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/iracooke/protk/tree/master/docs"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/iracooke/protk/wiki"
      },
      "source": "https://raw.githubusercontent.com/iracooke/protk/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/iracooke/protk/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/iracooke/protk/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "iracooke/protk"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "protk ( Proteomics toolkit )"
      },
      "source": "https://raw.githubusercontent.com/iracooke/protk/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/iracooke/protk/master/lib/protk/data/galaxyenv.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "protk ( Proteomics toolkit )"
        ],
        "type": "Text_excerpt",
        "value": " \nProtk is a ruby gem and requires ruby 2.0 or higher with support for libxml2. To avoid installation problems we recommend using [rvm](https://rvm.io) to install ruby.\n\n```shell\n    gem install protk\n```\n\nOn macOS you may need to install libxml2 with homebrew first\n\n```bash\n\tbrew install libxml2\n\tbrew install coreutils\n\tgem install libxml-ruby -v '2.9.0' -- --with-xml2-include=/usr/local/opt/libxml2/include/libxml2/ --with-xml2-lib=/usr/local/opt/libxml2/lib/\n```\n"
      },
      "source": "https://raw.githubusercontent.com/iracooke/protk/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1.0,
      "result": {
        "original_header": "Configuration",
        "type": "Text_excerpt",
        "value": "Protk includes a setup tool to install various third party proteomics tools such as the TPP, OMSSA, MS-GF+, Proteowizard.  If this tool is used it installs everything under `.protk/tools`.  To perform such an installation use;\n```shell\n    protk_setup.rb tpp omssa blast msgfplus pwiz\n```\nBy default protk will install tools and databases into `.protk` in your home directory.  If this is not desirable you can change the protk root default by setting the environment variable `PROTK_INSTALL_DIR`. If you prefer to install the tools yourself protk will find them, provided they are included in your `$PATH`. Those executables will be used as a fallback if nothing is available under the `.protk` installation directory.  A common source of errors when running the protk_setup script is missing dependencies. The setup script has been tested on ubuntu 12 with the following dependencies installed;\n```\n\tapt-get install build-essential autoconf automake git-core mercurial subversion pkg-config libc6-dev curl libxml2-dev openjdk-6-jre libbz2-dev libgd2-noxpm-dev unzip\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/iracooke/protk/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9915706265374024,
      "result": {
        "original_header": "Galaxy Integration",
        "type": "Text_excerpt",
        "value": "Many protk tools have equivalent galaxy wrappers available on the [galaxy toolshed](http://toolshed.g2.bx.psu.edu/) with source code and development occuring in the [protk-galaxytools](github.com/iracooke/protk-galaxytools) repository on github.  In order for these tools to work you will also need to make sure that protk, as well as the necessary third party dependencies are available to galaxy during tool execution.  \nAn installation recipe of `protk` is available from the [Galaxy Tool Shed](https://testtoolshed.g2.bx.psu.edu/view/iuc/package_protk_1_4_2/). If you want to depend on protk for your own Galaxy wrapper create a `tool_dependencies.xml` file with the following content.\n```xml\n<tool_dependency>\n    <package name=\"protk\" version=\"1.4.2\">\n        <repository name=\"package_protk_1_4_2\" owner=\"iuc\"/>\n    </package>\n</tool_dependency>\n```\n \n**Installation via Conda** \nprotk can be install via the Conda package manager and is part of the [Bioconda channel](https://anaconda.org/bioconda/protk). Simply run the following command to\ninstall the latest protk version:\n```bash\nconda create --name protk -c conda-forge -c bioconda protk \n```\n \n\n**Manual Install** \nIf your galaxy instance is unable to use Docker or the Tool Shed for some reason you will need to install `protk` and its dependencies manually.  \nOne way to install protk would be to just do `gem install protk` using the default system ruby (without rvm). This will probably just work, however you will lose the ability to run specific versions of tools against specific versions of protk.  The recommended method of installing protk for use with galaxy is as follows; \n1. Ensure you have a working install of galaxy.  \n\t[Full instructions](https://wiki.galaxyproject.org/Admin/GetGalaxy) are available on the official Galaxy project wiki page.  We assume you have galaxy installed in a directory called galaxy-dist. \n2. Install rvm if you haven't already.  See [here](https://rvm.io/) for more information. \n\t```bash\n\t\tcurl -sSL https://get.rvm.io | bash -s stable\n\t``` \n3. Install a compatible version of ruby using rvm. Ruby 2.0 or higher is required \n\t```bash\n\t\trvm install 2.1\n\t``` \n4.  Install protk in an isolated gemset using rvm. \n\tThis sets up an isolated environment where only a specific version of protk is available.  We name the environment according to the protk version number (1.4.2 in this example).  \n\t```bash\n\t\trvm 2.1\n\t\trvm gemset create protk1.4.2\n\t\trvm use 2.1@protk1.4.2\n\t\tgem install protk -v '~>1.4.2'\n\t``` \n5. Configure Galaxy's tool dependency directory. \n\tCreate a directory for galaxy tool dependencies. This must be outside the galaxy-dist directory. I usually create a directory called tool_dependencies alongside galaxy-dist.\n\tOpen the file `universe_wsgi.ini` in the galaxy-dist directory and set the configuration option `tool_dependency_dir` to point to the directory you just created, eg; \n6.  Create a tool dependency that sets up protk in the environment created by rvm \n\tIn this example we create the environment for protk `1.4` as this was the version installed in step 4 above. \n\t```bash\n\t\tcd <tool_dependency_dir>\n\t\tmkdir protk\n\t\tcd protk\n\t\tmkdir 1.4.2\n\t\tln -s 1.4.2 default\n\t\trvm use 2.1@protk1.4.2\n\t\trvmenv=`rvm env --path 2.1@protk1.4.2`\n\t\techo \". $rvmenv\" > 1.4.2/env.sh\n\t``` \n\tWhen new versions of galaxy tools are released they may change the version of protk that is required.  Check the release notes on the tool to see what is needed.  For example, if upgrading to version 1.5 you would do the following; \n\t```bash\n\t\trvm 2.1\n\t\trvm gemset create protk1.5.0\n\t\trvm use 2.1@protk1.5.0\n\t\tgem install protk -v '~>1.5.0'\n\t\tcd <tool_dependency_dir>/protk/\n\t\tmkdir 1.5.0\n\t\trvmenv=`rvm env --path 2.1@protk1.5.0`\n\t\techo \". $rvmenv\" > 1.5.0/env.sh\n\t\tln -s 1.5.0 default\n\t```\n \n"
      },
      "source": "https://raw.githubusercontent.com/iracooke/protk/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 1.0,
      "result": {
        "original_header": "Sequence databases",
        "type": "Text_excerpt",
        "value": "Protk includes a script called `manage_db.rb` to install certain sequence databases in a central repository. Databases installed via `manage_db.rb` can be invoked using a shorthand name rather than a full path to a fasta file. Protk comes with several predefined database configurations. For example, to install a database consisting of human entries from Swissprot plus known contaminants use the following commands;\n```sh\nmanage_db.rb add --predefined crap\nmanage_db.rb add --predefined sphuman\nmanage_db.rb update crap\nmanage_db.rb update sphuman\n```\nYou should now be able to run database searches, specifying this database by using the -d sphuman flag.  Every month or so swissprot will release a new database version. You can keep your database up to date using the manage_db.rb update command. This will update the database only if any of its source files (or ftp release notes) have changed. The manage_db.rb tool also allows completely custom databases to be configured. Setup requires adding quite a few command-line options but once setup, databases can easily be updated without further config. The example below shows the commandline arguments required to manually configure the sphuman database.\n```sh\nmanage_db.rb add --ftp-source 'ftp://ftp.uniprot.org/pub/databases/uniprot/current_release/knowledgebase/complete/uniprot_sprot.fasta.gz ftp://ftp.uniprot.org/pub/databases/uniprot/current_release/knowledgebase/complete/reldate.txt' --include-filters '/OS=Homo\\ssapiens/' --id-regex 'sp\\|.*\\|(.*?)\\s' --add-decoys --make-blast-index --archive-old sphuman\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/iracooke/protk/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8227992266816824,
      "result": {
        "original_header": "Galaxy Integration",
        "type": "Text_excerpt",
        "value": "\tCreate a directory for galaxy tool dependencies. This must be outside the galaxy-dist directory. I usually create a directory called tool_dependencies alongside galaxy-dist.\n\tOpen the file `universe_wsgi.ini` in the galaxy-dist directory and set the configuration option `tool_dependency_dir` to point to the directory you just created, eg; \n"
      },
      "source": "https://raw.githubusercontent.com/iracooke/protk/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/iracooke/protk/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "protk"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "iracooke"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Ruby",
        "size": 380450,
        "type": "Programming_language",
        "value": "Ruby"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "XSLT",
        "size": 9026,
        "type": "Programming_language",
        "value": "XSLT"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 8168,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CSS",
        "size": 6288,
        "type": "Programming_language",
        "value": "CSS"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 249,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/iracooke/protk/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 06:47:13",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 12
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "protk ( Proteomics toolkit )"
        ],
        "type": "Text_excerpt",
        "value": "Protk consists of a suite of small ruby programs.  After installing the protk rubygem the following should be available for running in your shell.  Help can be obtained on using any program by typing its name without any arguments.  Note than many protk programs require third party tools to be installed, see [Configuration](#user-content-configuration) below for instructions on installing these.\n\n- `tandem_search.rb` Run an X!Tandem search. Requires [X!Tandem](http://www.thegpm.org/TANDEM/)\n- `mascot_search.rb` Run a Mascot search. Requires a [Mascot](http://www.matrixscience.com/server.html) server\n- `msgfplus_search.rb` Run an MS-GF+ search. Requires [MS-GF+](https://bix-lab.ucsd.edu/pages/viewpage.action?pageId=13533355)\n- `omssa_search.rb` Run an OMSSA search. Requires [OMSSA](ftp://ftp.ncbi.nih.gov/pub/lewisg/omssa/CURRENT/)\n- `peptide_prophet.rb` Perform peptide inference based on search engine scores. Requires the [TPP](http://sourceforge.net/projects/sashimi/files/Trans-Proteomic%20Pipeline%20%28TPP%29/)\n- `interprophet.rb` Perform peptide inference across multiple search engines. Requires the [TPP](http://sourceforge.net/projects/sashimi/files/Trans-Proteomic%20Pipeline%20%28TPP%29/)\n- `protein_prophet.rb` Perform protein inference. Requires the [TPP](http://sourceforge.net/projects/sashimi/files/Trans-Proteomic%20Pipeline%20%28TPP%29/)\n- `mascot_to_pepxml.rb` Convert raw mascot dat files to pepXML. Requires the [TPP](http://sourceforge.net/projects/sashimi/files/Trans-Proteomic%20Pipeline%20%28TPP%29/)\n- `tandem_to_pepxml.rb` Convert raw X!Tandem outputs to pepXML. Requires the [TPP](http://sourceforge.net/projects/sashimi/files/Trans-Proteomic%20Pipeline%20%28TPP%29/)\n- `pepxml_to_table.rb` Convert pepXML to tabular format\n- `protxml_to_table.rb` Convert protXML to tabular format\n- `make_decoy.rb` Generate semi-random decoy sequences\n- `sixframe.rb` Generate six-frame translations of DNA sequences\n- `protxml_to_gff.rb` Map peptides to genomic coordinates\n- `protk_setup.rb` Install third party dependencies\n- `manage_db.rb` Manage protein databases\n"
      },
      "source": "https://raw.githubusercontent.com/iracooke/protk/master/README.md",
      "technique": "header_analysis"
    }
  ]
}