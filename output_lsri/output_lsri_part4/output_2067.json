{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "References",
        "parent_header": [
          "MetaDisorder"
        ],
        "type": "Text_excerpt",
        "value": "Schlessinger, A., Punta, M., Yachdav, G., Kajan, L., and Rost, B.\n(2009). Improved disorder prediction by combination of orthogonal\napproaches. PLoS ONE, 4(2), e4433.\n"
      },
      "source": "https://raw.githubusercontent.com/Rostlab/MetaDisorder/develop/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Rostlab/MetaDisorder"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2015-10-29T10:22:51Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-04-09T20:05:49Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Protein sequenced-based Disorder Predictor"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "How To Run, Basics",
        "parent_header": [
          "MetaDisorder"
        ],
        "type": "Text_excerpt",
        "value": "* **Usage:** metadisorder [OPTION]\n    * In case of getting the error: \"Can't locate Config/IniFiles.pm in @INC (you may need to install the Config::IniFiles module)\", you can resolve it by executing the following command: ```sudo cpan install Config::IniFiles```\n\n* **Obtaining Input Files:**  https://rostlab.org/owiki/index.php/How_to_generate_an_HSSP_file_from_alignment\n\n* **Example of How to Run without Profcon Input:**\n\n   ```\nmetadisorder fasta=/usr/share/metadisorder/example/tmdfast.fasta hssp=/usr/share/metadisorder/example/tmdfast.hsspPsiFil prof=/usr/share/metadisorder/example/tmdfast.rdbProf profbval_raw=/usr/share/metadisorder/example/tmdfast.profbval\n    norsnet=/usr/share/metadisorder/example/tmdfast.norsnet chk=/usr/share/metadisorder/example/tmdfast.chk out=tmdfast.noprofcon_mdisorder out_mode=1\n```\n* **Example of How to Run with Profcon Input:** (please note: profcon is really slow and is known not to improve predictions significantly):\n\n  ```\nmetadisorder fasta=/usr/share/metadisorder/example/tmdfast.fasta hssp=/usr/share/metadisorder/example/tmdfast.hsspPsiFil prof=/usr/share/metadisorder/example/tmdfast.rdbProf profbval_raw=/usr/share/metadisorder/example/tmdfast.profbval norsnet=/usr/share/metadisorder/example/tmdfast.norsnet chk=/usr/share/metadisorder/example/tmdfast.chk profcon=/usr/share/metadisorder/example/tmdfast.profcon out=tmdfast.profcon_mdisorder out_mode=1\n  ```\n\n* **Output** is specified by out='outputFileName'\n\n* **Expected Results:** The output file is self-annotating. It contains a table with the following information:\n\n    * Number - *residue number*\n    * Residue - *amino-acid type*\n    * NORSnet - *raw score by NORSnet (prediction of unstructured loops)*\n    * NORS2st - *two-state prediction by NORSnet; D=disordered*\n    * PROFbval - *raw score by PROFbval (prediction of residue flexibility from sequence)*\n    * Bval2st - *two-state prediction by PROFbval*\n    * Ucon - *raw score by Ucon (prediction of protein disorder using predicted internal contacts)*\n    * Ucon2st - *two-state prediction by Ucon*\n    * MD - *raw score by MD (prediction of protein disorder using orthogonal sources)*\n    * MD_rel - *reliability of the prediction by MD; values range from 0-9. 9=strong prediction*\n    * MD2st - *two-state prediction by MD*\n\nYou can also see example outputs in **/usr/share/metadisorder/example**.\n"
      },
      "source": "https://raw.githubusercontent.com/Rostlab/MetaDisorder/develop/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Method Description",
        "parent_header": [
          "MetaDisorder"
        ],
        "type": "Text_excerpt",
        "value": "* **Authors:** Avner Schlessinger, Marco Punta, Guy Yachdav, Laszlo Kajan, and Burkhard Rost\n* **Publications:** http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0004433\n* **Year:** 2009\n* **Languages:** Perl\n* **Description:** Disordered proteins are highly abundant in regulatory processes such as transcription and cell-signaling. Different methods have been developed to predict protein disorder often focusing on different types of disordered regions. Here, we present MD, a novel META-Disorder prediction method that molds various sources of information predominantly obtained  from orthogonal prediction methods. MD significantly outperformed its constituents, and compared favorably to other top prediction methods. In sustained cross-validation, MD not only outperforms its origins, but it also compares favorably to other state-of-the-art prediction methods in a variety of tests that we applied. MD is capable of predicting disordered regions of all \"flavors\", and identifying new ones that are not captured by other predictors.\n"
      },
      "source": "https://raw.githubusercontent.com/Rostlab/MetaDisorder/develop/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9686283403558392,
      "result": {
        "original_header": "MetaDisorder",
        "type": "Text_excerpt",
        "value": "MD, a novel META-Disorder prediction method that molds various sources of information predominantly obtained from orthogonal prediction methods which focus on different types of disordered regions.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Rostlab/MetaDisorder/develop/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9411926641069484,
      "result": {
        "original_header": "Training",
        "type": "Text_excerpt",
        "value": "MetaDisorder uses DisProt 3.4, which contains:\n460 IDPs (intrinsically disordered proteins)\n1103 disordered regions, encompassing 35 functional categories (all based on published experimental data) \n60 proteins with >780 residues were discarded as these could not be handled by all of the methods tested. From the remaining set, 17 more proteins crashed when applying at least one of the predictors in this study, and were also discarded.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Rostlab/MetaDisorder/develop/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9775643373853002,
      "result": {
        "original_header": "Restrictions",
        "type": "Text_excerpt",
        "value": "Right now all input files must be given on the command line as you see in the examples. Automatical generation of input files is not supported at present.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Rostlab/MetaDisorder/develop/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/Rostlab/MetaDisorder/wiki"
      },
      "source": "https://raw.githubusercontent.com/Rostlab/MetaDisorder/develop/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Rostlab/MetaDisorder/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Rostlab/MetaDisorder/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Rostlab/MetaDisorder"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MetaDisorder"
      },
      "source": "https://raw.githubusercontent.com/Rostlab/MetaDisorder/develop/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Rostlab/MetaDisorder/develop/run_md.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Rostlab/MetaDisorder/develop/run_many_md.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://cloud.githubusercontent.com/assets/13695363/13203314/aa2cafe0-d8b5-11e5-9670-cabc664b4289.png"
      },
      "source": "https://raw.githubusercontent.com/Rostlab/MetaDisorder/develop/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "How to Install the Package",
        "parent_header": [
          "MetaDisorder"
        ],
        "type": "Text_excerpt",
        "value": "```shell\nsudo apt-get install python-software-properties\nsudo apt-add-repository \"deb http://rostlab.org/debian/ stable main contrib non-free\"\nsudo apt-get update # ignore GPG error\nsudo apt-get install rostlab-debian-keyring # without verification\nsudo apt-get update\nsudo apt-get install metadisorder\n```\nor\n\n```shell\ncd\ngit clone https://github.com/Rostlab/MetaDisorder\ncd MetaDisorder\nperl runMD.pl fasta=tmdfast.fasta\n```\n\n[Warning] the source code includes many dependency and local directory, some of which might require installation/alteration. For the convenience, clone it to the \"home directory\".\n- Blast, individual compilation of Psipred and the executable of Disopred are required for the package.\n- Blast installers and source code can be found \"ftp://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/LATEST/\".\n- Compilation of Psipred (There is a README file in the psipred folder):\n\n```shell\n\ncd Metadisorder\ncd Psipred\nmake\nmake install\n```\n"
      },
      "source": "https://raw.githubusercontent.com/Rostlab/MetaDisorder/develop/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Rostlab/MetaDisorder/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "PLEASE READ THE FOLLOWING LICENSE AGREEMENT. BY USING THE PROGRAM YOU ARE\nACKNOWLEDGING THE FACT THAT YOU AGREE TO THE TERMS OUTLINED IN THIS\nAGREEMENT. USERS WISHING TO USE THE SOFTWARE FOR COMMERCIAL ACTIVITIES\nNOT COVERED BY THIS AGREEMENT SHOULD SEND E-MAIL TO: dtj@cs.ucl.ac.uk\n\n* NOTE RECENT CHANGES TO PARAGRAPH 8 *\n\n\n\n PSIPRED2 - PROTEIN SECONDARY STRUCTURE PREDICTION PROGRAM BY D.T.JONES\n ----------------------------------------------------------------------\n\n                          GENERAL LICENSE &\n                          -----------------\n\n\t\t     CONFIDENTIALITY AGREEMENT\n\t\t     -------------------------\n\n\n\nIn regard to the protein structure prediction program (PSIPRED2)\nherewith (the Software) the copyright and other intellectual property\nrights to which belong to the Author(s).\n\nAny user (the User) of the program undertakes to the Copyright holder that he\nor she shall be bound by the following terms and conditions:-\n\n1. The User will receive the Software and any related documentation in\nconfidence and will not use the same except for the purpose of their own \nresearch. The Software will be used only by such of the User's officers or\nemployees to whom it must reasonably be communicated to enable them to\nundertake their research and who agree to be bound by the same confidence.\nThe User shall procure and enforce such agreement from his or her staff for\nthe benefit of the Copyright holder.\n\n2. The publication of research using the Software must include an\nappropriate citation to the method:\n\nJones, D.T. (1999) Protein secondary structure prediction based on\nposition-specific scoring matrices. J. Mol. Biol. 292:195-202.\n\n3. All forms of the Software will be kept in a reasonably secure place to\nprevent unauthorised access.\n\n4. Each copy of the Software or, if not practicable then, any package\nassociated therewith shall be suitably marked (and such marking maintained) \nwith the following copyright notice: \"Copyright 2000 D.T.Jones. All Rights\nReserved.\".\n\n5. The Software may be modified, but any changes made shall be communicated\nto the Author(s) and made freely available.\n\n6. The Software may not be sold as a standalone package, or incorporated into\na commercial software package without the written permission of the Copyright\nholder. The Software may be used freely for individual academic or commercial\nresearch. The Software may also be made freely available for training or\nteaching purposes.\n\n7. The results produced by the Software may not be incorporated into any\ndata banks or databases which are subject to the payment of access or\nlicense fees without the written permission of the Copyright holder.\n\n8. The Software may be made available to users over a local network or\nwide area network (including the Internet), but only if access is granted\nfree of charge to all authorised users. Incorporation of the Software into\na commercial Web site or other fee paying service is not allowed without\nthe written permission of the Copyright holder. If PSIPRED results are\nreturned to the user via such a network service, then a suitable\nacknowledgement of the PSIPRED method must be returned somewhere in the\noutput text.\n\n9. The confidentiality obligation in paragraph one shall not apply:\n\n   (i)  to information and data known to the User at the time of\n\treceipt hereunder (as evidenced by its written records);\n\n  (ii)\tto information and data which was at the time of receipt in the \n\tpublic domain or thereafter becomes so through no wrongful act of\n\tthe User;\n\n (iii)\tto information and data which the User receives from a third\n\tparty not in breach of any obligation of confidentiality owed to\n\tthe Author(s).\n\n10. The User understands that the Software is supplied \"as is\". No warranty\n   as to its fitness or suitability for any purpose whatsoever is made or\n   implied. In no event shall the Author(s) or Copyright holder be held\n   responsible for any direct or indirect damages arising through the use\n   of the Software.\n"
      },
      "source": "https://raw.githubusercontent.com/Rostlab/MetaDisorder/develop/psipred/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MetaDisorder"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "Rostlab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 384554,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 255508,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 29266,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 816,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 370,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Rostlab/MetaDisorder/develop/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "How To Run, Basics",
        "parent_header": [
          "MetaDisorder"
        ],
        "type": "Text_excerpt",
        "value": "* **Usage:** metadisorder [OPTION]\n    * In case of getting the error: \"Can't locate Config/IniFiles.pm in @INC (you may need to install the Config::IniFiles module)\", you can resolve it by executing the following command: ```sudo cpan install Config::IniFiles```\n\n* **Obtaining Input Files:**  https://rostlab.org/owiki/index.php/How_to_generate_an_HSSP_file_from_alignment\n\n* **Example of How to Run without Profcon Input:**\n\n   ```\nmetadisorder fasta=/usr/share/metadisorder/example/tmdfast.fasta hssp=/usr/share/metadisorder/example/tmdfast.hsspPsiFil prof=/usr/share/metadisorder/example/tmdfast.rdbProf profbval_raw=/usr/share/metadisorder/example/tmdfast.profbval\n    norsnet=/usr/share/metadisorder/example/tmdfast.norsnet chk=/usr/share/metadisorder/example/tmdfast.chk out=tmdfast.noprofcon_mdisorder out_mode=1\n```\n* **Example of How to Run with Profcon Input:** (please note: profcon is really slow and is known not to improve predictions significantly):\n\n  ```\nmetadisorder fasta=/usr/share/metadisorder/example/tmdfast.fasta hssp=/usr/share/metadisorder/example/tmdfast.hsspPsiFil prof=/usr/share/metadisorder/example/tmdfast.rdbProf profbval_raw=/usr/share/metadisorder/example/tmdfast.profbval norsnet=/usr/share/metadisorder/example/tmdfast.norsnet chk=/usr/share/metadisorder/example/tmdfast.chk profcon=/usr/share/metadisorder/example/tmdfast.profcon out=tmdfast.profcon_mdisorder out_mode=1\n  ```\n\n* **Output** is specified by out='outputFileName'\n\n* **Expected Results:** The output file is self-annotating. It contains a table with the following information:\n\n    * Number - *residue number*\n    * Residue - *amino-acid type*\n    * NORSnet - *raw score by NORSnet (prediction of unstructured loops)*\n    * NORS2st - *two-state prediction by NORSnet; D=disordered*\n    * PROFbval - *raw score by PROFbval (prediction of residue flexibility from sequence)*\n    * Bval2st - *two-state prediction by PROFbval*\n    * Ucon - *raw score by Ucon (prediction of protein disorder using predicted internal contacts)*\n    * Ucon2st - *two-state prediction by Ucon*\n    * MD - *raw score by MD (prediction of protein disorder using orthogonal sources)*\n    * MD_rel - *reliability of the prediction by MD; values range from 0-9. 9=strong prediction*\n    * MD2st - *two-state prediction by MD*\n\nYou can also see example outputs in **/usr/share/metadisorder/example**.\n"
      },
      "source": "https://raw.githubusercontent.com/Rostlab/MetaDisorder/develop/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Options",
        "parent_header": [
          "MetaDisorder",
          "How To Run Extended"
        ],
        "type": "Text_excerpt",
        "value": "       chk\n         Path to psiblast checkpoint file for fasta input. Required.\n\n       debug\n         Debugging mode: [0|1]. Default: 0.\n\n       fasta\n         Path to fasta input\n\n        -h, --help\n\n       hssp\n         Path to hssp file for fasta input. Required.\n\n       norsnet\n         Path to norsnet prediction for fasta input\n\n       prof\n         Path to prof prediction for fasta input\n\n       profbval_raw\n         Path to profbval prediction for fasta input. Use mode 5 of profbval.\n\n        profcon\n          Path to profcon prediction for fasta input\n\n        out\n         Path to output file\n\n        out_mode\n          Output format: [0|1] DESCRIBE FORMATS HERE\n\n        --version\n         Print version\n\n        workdir\n         Work directory, optional. If not defined a temporary directory is used.\n"
      },
      "source": "https://raw.githubusercontent.com/Rostlab/MetaDisorder/develop/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Environment",
        "parent_header": [
          "MetaDisorder",
          "How To Run Extended"
        ],
        "type": "Text_excerpt",
        "value": "* **METADISORDERCONF** - location of metadisorderrc configuration file to use overriding other configuration files\n* **FILES**\n    * **/usr/share/metadisorder/metadisorderrc.default** - default configuration file. See this file for a description of the parameters.\n    * **/etc/metadisorderrc** -system configuration file overriding values in **/usr/share/metadisorder/metadisorderrc.default**\n    * **~/.metadisorderrc** - user configuration file overriding values in **/etc/metadisorderrc**\n    * **$METADISORDERCONF** - if this environment variable is set **~/.metadisorderrc** is disregarded and the value of the variable is read for configuration options overriding **/etc/metadisorderrc**.\n"
      },
      "source": "https://raw.githubusercontent.com/Rostlab/MetaDisorder/develop/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 09:13:58",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ]
}