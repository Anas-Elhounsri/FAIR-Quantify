{
  "application_domain": [
    {
      "confidence": 23.32,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/LinjieWu/CNV-BAC"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-05-05T08:50:53Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-10-24T06:03:07Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CNV-BAC: Copy Number Variation Detection in Bacterial Circular Genome"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9620701424336108,
      "result": {
        "original_header": "Requirments",
        "type": "Text_excerpt",
        "value": "R package 'mgcv' and 'graph' \n"
      },
      "source": "https://raw.githubusercontent.com/LinjieWu/CNV-BAC/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9390172225886442,
      "result": {
        "original_header": "Output files",
        "type": "Text_excerpt",
        "value": "*_mappability: Regions of reference with mappability 1 (calculated by gemtools). \n*_GR.txt: spearman correlation, pearson correlation between log2 copy number ratio and distance to origin of replication. \n"
      },
      "source": "https://raw.githubusercontent.com/LinjieWu/CNV-BAC/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Download",
        "type": "Text_excerpt",
        "value": "git clone https://github.com/LinjieWu/CNV-BAC.git\n"
      },
      "source": "https://raw.githubusercontent.com/LinjieWu/CNV-BAC/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/LinjieWu/CNV-BAC/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/LinjieWu/CNV-BAC/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "LinjieWu/CNV-BAC"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CNV-BAC"
      },
      "source": "https://raw.githubusercontent.com/LinjieWu/CNV-BAC/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Set up",
        "type": "Text_excerpt",
        "value": "cd /PATH/TO/CNV-BAC\n\npython setup.py\n\n"
      },
      "source": "https://raw.githubusercontent.com/LinjieWu/CNV-BAC/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.8800243862940971,
      "result": {
        "original_header": "Requirments",
        "type": "Text_excerpt",
        "value": "R version >= 2.6 \nPython2\n \n"
      },
      "source": "https://raw.githubusercontent.com/LinjieWu/CNV-BAC/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/LinjieWu/CNV-BAC/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CNV-BAC"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "LinjieWu"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 208912,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 64492,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Roff",
        "size": 23597,
        "type": "Programming_language",
        "value": "Roff"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 9171,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 8271,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/LinjieWu/CNV-BAC/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 02:50:05",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "type": "Text_excerpt",
        "value": "Usage: python CNV-BAC.py [options]\n\n      -h  display help info.\n      \n      -i  bam file generate by BWA. (required)\n      \n      -s  Location of origin of replications seperated by comma (required), one can get this information from DoriC database http://tubic.org/doric/public/index.php/index.\n      \n      -r  fasta file of reference file. (required)\n      \n      -m  Mappability file (required)\n      \n      -l  penalty for BIC-seq2 (Default 1.5)\n      \n      -o  prefix of output file (Default CNV-BAC_tmp).\n      \n      -b  length of bin. (Defaut 1000)\n      \n      -p  subsample percentage for normalization. (Default 0.5)\n      \n      -d  the directory for output files. (Default /home/ruibinxi_pkuhpc/lustre1/ljwu/software/CNV-BAC/tmp)\n      \n      --norm method for correction of normalization either Gaussian or Poisson (Default Gaussian)\n      \n      --SV SV regions file (Default FALSE)\n      \n      --PT Pvalue cutoff for CNVs detection (Default 0.001)\n      \n      --RT log 2 copy number ratio cutoff for CNVs detection (Default 0.2)\n"
      },
      "source": "https://raw.githubusercontent.com/LinjieWu/CNV-BAC/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example for detection of copy number varations",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Step 1: Generate mappability file\n\nSee https://github.com/LinjieWu/GenerateMappability\n\nStep 2: Extract SV regions from Breakdancer or Delly results (optional)\n\n/Path/to/CNV-BAC/ExtractSVRegions.py -i BreakDancer.out -o SV.out -s breakdancer\n\nStep 3: Filter CNVs\n\npython CNV-BAC.py -i input.bam -r reference.fa -s start_of_Oric_region,end_of_Oric_region -m example_mappability -l 2 -SV SV.out\n"
      },
      "source": "https://raw.githubusercontent.com/LinjieWu/CNV-BAC/master/README.md",
      "technique": "header_analysis"
    }
  ]
}