{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/xwBio/RRBSsim"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2017-06-03T04:07:07Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-08-12T06:49:36Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "RRBSsim: reduced representation bisulfite sequencing simulator for next-generation sequencing"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9993315567994382,
      "result": {
        "original_header": "1.Introduction",
        "type": "Text_excerpt",
        "value": "RRBSsim can produce paired-end RRBS reads, with significant attributes of real data, such as<br> \nRRBS library construction, distribution of CpGs methylation level, sequencing error(substitution,<br>\ninsertion, deletion), quality score. Including four steps below:<br>\n(i) Simulation of reference genome with sequencing variation: it can be achived by software,<br> \npIRS(ftp://ftp.genomics.org.cn/pub/pIRS/.).<br>\n(ii) Simulation of reference genome with methylated CpGs:we generate methylation values of CpG<br> \nin the genome using a Beta model. Methylation levels of CpGs within a read are generated to account<br>\nfor the strong dependence of methylation among CpG sites within a genomic region in real data.<br>\n(iii) Generate simulated RRBS reads: the above modified reference genome is digested by a restriction<br> \nenzyme (e.g., MspI) in silico and the position of generated fragments is marked.<br>\n(iiii) Sequencing error profile: we produce an empirical error profile from enough large training datasets<br>\nthat it can be used to generate simulated Illumina reads.<br>\n \n"
      },
      "source": "https://raw.githubusercontent.com/xwBio/RRBSsim/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9884386013213649,
      "result": {
        "original_header": "3.Usage :",
        "type": "Text_excerpt",
        "value": "\t\t$python RRBSsim.py -h\n\t\tUsage: RRBSsim.py [options]\n\t\n\t\tGeneral:\t\t\t\n\t\t-h/--help\t\tOutput help information.\n\t\t-v/--version\t\tOutput version information.\n\t\t--seed <int>        \tSimulated seed. Default is function of system time and varing among different simulations.\n\t\t-f/--fasta\t        Input single reference sequence in the fasta format(usually having extension .fa).\n\t\t\t\t\tSpecifying either -f or --genome_folder is mandatory.\n\t\t--genome_folder </../../> Input the path to the genome folder including multiple reference sequences\n\t\t\t\t\tin the fasta format (usually having extension .fa). It may be an absolute or relative\n\t\t\t\t\tpath. Specifying either -f or --genome_folder is mandatory.\n\t\t-d <int>\t        Expectation of sequencing depth (>0),exponential distribution are supposed here. Default: 30.\n\t\t-l/--length <int>   \tRead length (>0), read1 and read2 are the same length. Default: 100 bp.                         \n\t\t-s/--single_end\tSimulated single-end read pattern.\n\t\t-p/--paired_end\tSimulated paired-end read pattern (default).\n\t\t--non_directional   \tDirectional: reads1 is the same direction with reference sequencing (Watson strand) and read\n\t\t\t\t\tis from Crick strand.\n\t\t\t\t\tNon-directional: reads1 and reads2 can be of all four bisulfite strands.\n\t\t\t\t\tDefault: directional.\n\t\t--adapter1          \tThe ligated adapter sequence of the  first end of RRBS fragments. Default: Illumina universal\n                        \t\tadapter 'ACACTCTTTCCCTACACGACGCTCTTCCGATCT'.\n\t\t--adapter2          \tThe ligated adapter sequence of the  second end of RRBS fragments. Default: Illumina universal\n                        \ta\tdapter 'GATCGGAAGAGCACACGTCTGAACTCCAGTCAC'.\n\t\t--non_meth_adapter  \tThe cytosines of adapters is unmethylated. Default is methylated.\n\t\t--non_meth_end_repair_bases The cytosines of end-repair bases is unmethylated. Default is methylated.\n\t\t--min <int>\t        The minimum size-selected fragment length of RRBS library (library size) (>0). Default: 40 bp.\n\t\t--max <int>         \tThe maximum size-selected fragment length of RRBS library (library size) (>0). Default: 220 bp.\n\t\t--cut_site          \tThe cutting site of restricted enzyme is separated by '-'. For example, cutting site of MspI\n\t\t\t\t\t'C-CGG';here,at most two cutting sites are supported and they must separated by comma (,);\n\t\t\t\t\tDefault is 'C-CGG'.\n\t\t-o/--output\t        Prefix of output file. Default is set by name of input file.\n\t\t--nPosInfo\t    \tOutput position information into the output file. Default is True.\n\t\t--SAM\t            \tOutput alignment results in SAM format. Default is not.\n\t\t-R/--ref_methInfo\tOutput the reference methylation information. Default is not.\n\t\t\n\t\t\n\t\tDNA methylation:\n\t\tnote: All the default values below are estimated from real RRBS data of lung cancer.\n\t\t--CG_level  <float>\tCG methylation level (0~1). Default: 0.44.\n\t\t--CHG_level <float>\tCHG methylation level (0~1). Default: 0.03.\n\t\t--CHH_level <float>\tCHH methylation level (0~1). Default: 0.03.\n\t\t\n\t\t--CG_rate  <float>\tmCG/CG rate (0~1). Default: 0.67.\n\t\t--CHG_rate <float>\tmCHG/CHG rate (0~1). Default: 0.375.\n\t\t--CHH_rate <float>\tmCHH/CHH rate (0~1). Default: 0.375.\n\t\t\n\t\t--mCG_level <float>\tmCG methylation level (0~1). Default: 0.65.\n\t\t--mCHG_level <float>\tmCHG methylation level (0~1). Default: 0.08.\n\t\t--mCHH_level <float>\tmCHH methylation level (0~1). Default: 0.08.\n\t\t--mCGS  <float>\t\tStandard deviation of mCG_level (0~(1-mCG_level)*mCG_level).\n\t\t\t\t\tDefault: (1-mCG_level)*mCG_level/2.0.\n\t\t--mCHGS <float>\t\tStandard deviation of mCHG_level (0~(1-mCHG_level)*mCHG_level).\n\t\t\t\t\tDefault: (1-mCHG_level)*mCHG_level/2.0.\n\t\t--mCHHS <float>\t\tStandard deviation of mCHH_level(0~(1-mCHH_level)*mCHH_level).\n\t\t\t\t\tDefault: (1-mCHH_level)*mCHH_level/2.0.\n\t\t--cr  <float>\t    \tCytosines conversion rate [0~1]. Default: 0.998.\n\t\t\n\t\t\n\t\tSNP:\n\t\t-S\t                File with SNP information, specifying location and frequency of SNPs.format is:\n                        \t\tChromosome position\tstrand\tfrequency_of_A frequency_of_T frequency_of_C frequency_of_G\n                        \t\tchr10\t1\t+\t0\t0.4\t0\t0.6\n                        \t\tchr10\t2\t+\t0.3\t0.2\t0.1\t0.4\n\t\t--non_SNP\t        Do not add SNP. Default is add (based on prior probability).\n\t\t--homo_freq <float>\tThe frequency of homozygous SNPs [0~(1-Z)]. Default: 0.0005.\n\t\t--heter_freq <float>\tThe frequency of heterozygous SNPs [0~(1-Y)]. Default: 0.001.\n\t\t\n\t\t\n\t\tReads quality profiles:\n\t\t-q/--quality <float>\tQuality score (mean value of quality score). Default: 0.95 (95% of highest score).\n\t\t--qs <float>\t    \tStandard deviation of -q (0~(1-q)*q). Default: (1-q)*q/2.\n\t\t--rand_quals\t    \tRandomly introduce quality value. Default: uniform quality score.\n\t\t--rand_error\t    \tRandomly introduce sequencing errors by sequencing quality value(Q =-10*log10(e), Q is the \n\t\t\t\t\tsequencing quality value (Phred score),e is the error rate ). Default is not.\n\t\t\n\t\t--input_quals       \tIntroduce quality value empirically obtained from real data. Default: on.\n\t\t--matrix_qual_R1    \tInput the file including the probability matrix of  quality value counts at each position for reads1.\n\t\t--matrix_qual_R2    \tInput the file including the probability matrix of  quality value counts at each position for reads2.\n\t\t--phred33_quals     \tFastQ qualities are ASCII transformation of that Phred quality plus 33. Default: on.\n\t\t--phred64_quals     \tFastQ qualities are ASCII transformation of that Phred quality plus 64. Default: off.\n                        \t\t\n \n"
      },
      "source": "https://raw.githubusercontent.com/xwBio/RRBSsim/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.918479487267259,
      "result": {
        "original_header": "4.Example :",
        "type": "Text_excerpt",
        "value": "\t\tposition        !       \"       #       $       %       &       '       (       )\n\t\t0       0       0       34344   0       0       0       0       0       0\n\t\t1       0       0       819     0       0       0       0       0       0\n\t\t2       0       0       1148    0       0       0       4       0       47060\n\t\t3       0       0       1407    0       0       416     889     0       29268\n\t\n\tFormat descriptions:\n\t\n\t\t(1) position of base\n\t\t(2)- number of base related to each ASCII shift of quality value \n\t\n(2) Generate the diploid genome sequence with variation \n\tFormat descriptions(3):\n\t\n\t\t(1) chromosome \n\t\t(2) position \n\t\t(3) base of origin reference genome\n\t\t(4) base of reference genome with variation\n\t\t(5) context (CG/CHG/CHH)\n\t\t(6) methylation level\n\t\t(7) mutation rate\n\t\t\t \n"
      },
      "source": "https://raw.githubusercontent.com/xwBio/RRBSsim/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/xwBio/RRBSsim/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 7
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/xwBio/RRBSsim/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "xwBio/RRBSsim"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "RRBSsim"
      },
      "source": "https://raw.githubusercontent.com/xwBio/RRBSsim/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/xwBio/RRBSsim/master/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/xwBio/RRBSsim/master/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 0.9345219297431526,
      "result": {
        "original_header": "4.Example :",
        "type": "Text_excerpt",
        "value": " (1) Base quality profiles Generator\n\t\t\t\t\t\t\n\t\tpython base_quality_profile_R1.py -i rrbs.R1.fastq\n\t\tpython base_quality_profile_R2.py -i rrbs.R2.fastq \n"
      },
      "source": "https://raw.githubusercontent.com/xwBio/RRBSsim/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8964640616816134,
      "result": {
        "original_header": "4.Example :",
        "type": "Text_excerpt",
        "value": " (1) Base quality profiles Generator\n\t\t\t\t\t\t\n\t\tpython base_quality_profile_R1.py -i rrbs.R1.fastq\n\t\tpython base_quality_profile_R2.py -i rrbs.R2.fastq \n\tOutput file: \n\t\tbase_quality_profile.R1 , base_quality_profile.R2\n\tfile format: \n\t\tpirs diploid -i hg19.fa -c 0\n\tOutput file:\n\t\t\n\t\thg19.snp.indel.invertion.fa\n\t\t\n(3) Generate simulated RRBS with reads \n\t\tpython RRBSsim.py -f hg19.snp.indel.invertion.fa --CG_level 0.6 -R --cut_site C-CGG\n\t\t\n\tOutput file (1):\n\t\n\t\trrbssim.1.fq, rrbssim.2.fq \n\tfile format (1):\n\t\t\n\t\t@HWUSI-EAS100R:6:73:3307:22982#0/1\n\t\tCGGGAGTTCGTAGAGGCGGCGGTTCGGGGAGAAATTTTAGGTACGGTTGAAGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGTAGATCTCGGTGGTCGCC\n\t\t+\n\t\tB?@DA8DFHDCGDHGEIIBGDH?HH1FEFIIIB?FDICJJHGI;GJJH@GHFAGIJGFHBD>I>:D>A7ADA#7@EDCBD29D#D=DDDC4C;CC>#A:#\n\t\t@HWUSI-EAS100R:6:73:47639:49782#0/1\n\t\tCGGGAGTTCGTAGAGGCGGCGGTTCGGGGAGAAATTTTAGGTACGGTTGAAGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGTAGATCTCGGTGGTCGCC\n\t\t+\n\t\t@B@FFADFFHFH@HCFH)H)JBGJCDJJJIJIEDBD#HIFHBJFIHIJJHFDH>JBIAIHIDH?##CD3BF=DC#:>?ACD##<>C@D#BD4<C9##?D: \n\n\tOutput file (2):\n\t\n\t\trrbssim.Crick.sam, rrbssim.Crick.sam\n\t\t\n\tOutput file (3): \n\t\trrbssim.ref\n\t\t\n\tFile format (3):\n\t\n\t\tchr1      1       G       G               0.002   0\n\t\tchr1      2       A       A               1       0\n\t\tchr1      3       T       T               1       0\n\t\tchr1      4       C       C       CHH     0.002   0\n\t\tchr1      5       C       C       CHG     0.002   0\n\t\tchr1      6       C       C       CG      0.002   0\n\t\tchr1      7       G       G       CG      0.805144911452  0\n\t\tchr1      8       C       C       CG      0.953731797262  0\n\t\t \n"
      },
      "source": "https://raw.githubusercontent.com/xwBio/RRBSsim/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/xwBio/RRBSsim/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2017 xwBio\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/xwBio/RRBSsim/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "RRBSsim"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "xwBio"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 109457,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Rebol",
        "size": 42479,
        "type": "Programming_language",
        "value": "Rebol"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 1119,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/xwBio/RRBSsim/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "2.System requirements",
        "type": "Text_excerpt",
        "value": "* Linux/Unix or Mac OS platform\n\n* pIRS from: ftp://ftp.genomics.org.cn/pub/pIRS/<br>\n   \t1. Dependencies<br>\n   \t===========<br>\n   \t  pIRS requires the following libraries(with *-devel packages) to compile:<br>\n            zlib (http://www.zlib.net/)<br>\n            Boost Libraries (http://www.boost.org/)<br>\n   \n          pIRS requires the following tools to generate and analyse profiles:<br>\n     \t    Perl 5 (http://www.perl.org/)<br>\n            Gzip (http://www.gnu.org/software/gzip/)<br>\n            Gnuplot 4.4 (http://www.gnuplot.info/)<br>\n            GNU Core Utilities (http://www.gnu.org/software/coreutils/)<br>\n            SAM Tools (http://samtools.sourceforge.net/)<br>\n \t 2. Building<br>\n         ===========<br>\n           The GNU Compiler Collection version 4.1 and above are needed. (http://gcc.gnu.org/)<br>\n   \t\n              make<br>\n           All tools will be linked to top path after make.<br>\n           You are free to use the following command to install them to /TARGET/PATH/ :<br>\n   \n              PREFIX=/TARGET/PATH/ make instal<br>\n\n* [Python](http://www.python.org/download/) (Version 2.7 +)<br>\n\n  Type \" python -V\" to see the installed version.<br>\n  \n* [pyfasta](http://pypi.python.org/pypi/pyfasta/) package (Version 0.5.2)<br>\n                                                                   \n        tar -zxvf pyfasta-0.5.2.tar.gz\n        cd pyfasta-0.5.2\n        python setup.py install\n \u00a0\n     To test pyfasta, type below commond in the console :<br>\n        \n\t \t$python\n          \t>>>import pyfasta\n        \t>>>quit()\n"
      },
      "source": "https://raw.githubusercontent.com/xwBio/RRBSsim/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "identifier",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 05:36:13",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "5.update &amp; support",
        "type": "Text_excerpt",
        "value": "please refer to https://github.com/xwBio/RRBSsim or email to xwsun@zju.edu.cn\n\n\n\n\n\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/xwBio/RRBSsim/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "type": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "non-software"
      },
      "technique": "software_type_heuristics"
    }
  ]
}