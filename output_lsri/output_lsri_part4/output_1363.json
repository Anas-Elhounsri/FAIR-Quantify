{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/frallain/pymsfilereader"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2015-09-30T13:32:08Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-07-28T05:52:50Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Thermo MSFileReader Python bindings "
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.8450054699195158,
      "result": {
        "original_header": "DEPRECATION NOTICE : These bindings and the underlying library are deprecated",
        "type": "Text_excerpt",
        "value": "\r\nMSFileReader, the underlying library used by these bindings, is outdated and buggy. \r\nThermo now recommends to use RawFileReader (https://planetorbitrap.com/rawfilereader) to read Thermo RAW files.\r\nSome opensource Python bindings have been developed and are available @ https://github.com/kevinkovalchik/RawQuant / https://pypi.org/project/RawQuant/ .\r\n\r \n"
      },
      "source": "https://raw.githubusercontent.com/frallain/MSFileReader_Python_bindings/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/frallain/MSFileReader_Python_bindings/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 25
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/frallain/pymsfilereader/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "frallain/pymsfilereader"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DEPRECATION NOTICE : These bindings and the underlying library are deprecated"
      },
      "source": "https://raw.githubusercontent.com/frallain/MSFileReader_Python_bindings/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "How to install",
        "parent_header": [
          "Thermo MSFileReader Python bindings"
        ],
        "type": "Text_excerpt",
        "value": "\r\n`pip install pymsfilereader`\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/frallain/MSFileReader_Python_bindings/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9999997778225767,
      "result": {
        "original_header": "DEPRECATION NOTICE : These bindings and the underlying library are deprecated",
        "type": "Text_excerpt",
        "value": "\r\nMSFileReader, the underlying library used by these bindings, is outdated and buggy. \r\nThermo now recommends to use RawFileReader (https://planetorbitrap.com/rawfilereader) to read Thermo RAW files.\r\nSome opensource Python bindings have been developed and are available @ https://github.com/kevinkovalchik/RawQuant / https://pypi.org/project/RawQuant/ .\r\n\r \n"
      },
      "source": "https://raw.githubusercontent.com/frallain/MSFileReader_Python_bindings/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999999999906777,
      "result": {
        "original_header": "Thermo MSFileReader Python bindings",
        "type": "Text_excerpt",
        "value": "\r\nThermo MSFileReader is a C++ dynamic-link library (.dll) made available by ThermoFisher Scientific (on https://thermo.flexnetoperations.com/control/thmo/product?plneID=632401) to interact with .raw files generated by their range of tandem mass spectrometers.\r\n\r\nHere I make available some Python bindings that make the Thermo MSFileReader C++ dynamic-link library usable in Python.\r\n\r\ntested on versions 3.0SP2 (August 2014) and 3.0SP3 (April 2015).\r\n150 / 171 functions have been binded, 21 / 171 have been considered redundant with already binded functions (cf. REDUNDANT flag).\r\n\r\nNOTE: The 3.1 SP4 installer does not register properly the `XRawfile2_x64.dll`. As a consequence, to make it work:\r\n\r\n1. Install MSFileReader 3.1 SP4,\r\n2. backup the 3.1 SP4 `XRawfile2_x64.dll` file at `C:\\Program Files\\Thermo\\MSFileReader\\` somewhere,\r\n3. uninstall MSFileReader 3.1 SP4, then install MSFileReader 3.1 SP2,\r\n4. override the 3.1 SP2 `XRawfile2_x64.dll` file at `C:\\Program Files\\Thermo\\MSFileReader\\` with the 3.1 SP4 `XRawfile2_x64.dll` backed up previously.\r\n\r\nNOTE: The function IsQExactive only works in version 3.0SP3 and upwards.\r\n\r\nNOTE: The official documentation seems more up-to-date in the 3.0SP2 version than in the 3.0SP3 version...\r\n\r \n"
      },
      "source": "https://raw.githubusercontent.com/frallain/MSFileReader_Python_bindings/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9990253480521508,
      "result": {
        "original_header": "Unit tests",
        "type": "Text_excerpt",
        "value": "\r\nUnit tests are done with pytest. Just `pip install pytest` and run `pytest` at the root of the project.\r\n\r \n"
      },
      "source": "https://raw.githubusercontent.com/frallain/MSFileReader_Python_bindings/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/frallain/pymsfilereader/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bioinformatics, comtypes-library, mass-spectrometry, python, python-bindings"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "The MIT License (MIT)\n\nCopyright (c) 2019 Fran\u00e7ois ALLAIN\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/frallain/MSFileReader_Python_bindings/master/LICENSE.md",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "pymsfilereader"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "frallain"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 154237,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Batchfile",
        "size": 1086,
        "type": "Programming_language",
        "value": "Batchfile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/frallain/MSFileReader_Python_bindings/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "frallain",
          "type": "User"
        },
        "date_created": "2019-07-23T14:10:23Z",
        "date_published": "2019-07-23T14:24:18Z",
        "description": "This release makes the importing more relevant:\r\n```\r\nfrom pymsfilereader import MSFileReader\r\nrawfile = MSFileReader(\"myfile.raw\")\r\n```\r\ninstead of\r\n```\r\nfrom pymsfilereader import ThermoRawfile\r\nrawfile = ThermoRawfile(\"myfile.raw\")\r\n```",
        "html_url": "https://github.com/frallain/pymsfilereader/releases/tag/1.0.1",
        "name": "More relevant main class name",
        "release_id": 18806054,
        "tag": "1.0.1",
        "tarball_url": "https://api.github.com/repos/frallain/pymsfilereader/tarball/1.0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/frallain/pymsfilereader/releases/18806054",
        "value": "https://api.github.com/repos/frallain/pymsfilereader/releases/18806054",
        "zipball_url": "https://api.github.com/repos/frallain/pymsfilereader/zipball/1.0.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "frallain",
          "type": "User"
        },
        "date_created": "2019-07-22T20:30:47Z",
        "date_published": "2019-07-23T14:04:08Z",
        "description": "Code and unit tests have been cleaned and best practices applied for a first release on Pypi.\r\n",
        "html_url": "https://github.com/frallain/pymsfilereader/releases/tag/1.0.0",
        "name": "First version on Pypi",
        "release_id": 18805410,
        "tag": "1.0.0",
        "tarball_url": "https://api.github.com/repos/frallain/pymsfilereader/tarball/1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/frallain/pymsfilereader/releases/18805410",
        "value": "https://api.github.com/repos/frallain/pymsfilereader/releases/18805410",
        "zipball_url": "https://api.github.com/repos/frallain/pymsfilereader/zipball/1.0.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirements",
        "parent_header": [
          "Thermo MSFileReader Python bindings"
        ],
        "type": "Text_excerpt",
        "value": "\r\n* Python 2.7 or 3.x, MSFileReader 3.1 is 64-bits only, MSFileReader 3.0 is 32 and 64-bits.\r\n* The comtypes library\r\n  * `pip install comtypes`\r\n  * or available at http://www.lfd.uci.edu/~gohlke/pythonlibs/ and then `pip install comtype-package.whl`\r\n* Thermo MSFileReader from https://thermo.flexnetoperations.com/control/thmo/product?plneID=632401 or from https://github.com/frallain/pymsfilereader/tree/master/MSFileReader.\r\n\r\nNote that these bindings require that you have installed the appropriate Thermo MSFileReader version depending on your Python architecture (32bits or 64bits) so that the .dll is registered with the right Windows COM server (32bits or 64bits).\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/frallain/MSFileReader_Python_bindings/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 06:53:43",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 67
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Example",
        "parent_header": [
          "Thermo MSFileReader Python bindings"
        ],
        "type": "Text_excerpt",
        "value": "\r\nFor convenience, the example below can be run on any rawfile by running `python MSFileReader.py myfile.raw`.\r\n\r\n```python\r\nfrom pymsfilereader import MSFileReader\r\n\r\nrawfile = MSFileReader(\"myfile.raw\")\r\n\r\nprint('Version', rawfile.Version())\r\nprint('GetFileName', rawfile.GetFileName())\r\nprint('GetCreatorID', rawfile.GetCreatorID())\r\nprint('GetVersionNumber', rawfile.GetVersionNumber())\r\nprint('GetCreationDate', rawfile.GetCreationDate())\r\nprint('IsError', rawfile.IsError())\r\nprint('IsNewFile', rawfile.IsNewFile())\r\nprint('IsThereMSData', rawfile.IsThereMSData())\r\nprint('HasExpMethod', rawfile.HasExpMethod())\r\nprint('InAcquisition', rawfile.InAcquisition())\r\nprint('GetErrorCode', rawfile.GetErrorCode())\r\nprint('GetErrorMessage', rawfile.GetErrorMessage())\r\nprint('GetWarningMessage', rawfile.GetWarningMessage())\r\nprint('RefreshViewOfFile', rawfile.RefreshViewOfFile())\r\nprint('GetNumberOfControllers', rawfile.GetNumberOfControllers())\r\n\r\nprint(\"GetNumberOfControllersOfType('No device')\", rawfile.GetNumberOfControllersOfType('No device'))\r\nprint(\"GetNumberOfControllersOfType('MS')\", rawfile.GetNumberOfControllersOfType('MS'))\r\nprint(\"GetNumberOfControllersOfType('Analog')\", rawfile.GetNumberOfControllersOfType('Analog'))\r\nprint(\"GetNumberOfControllersOfType('A/D card')\", rawfile.GetNumberOfControllersOfType('A/D card'))\r\nprint(\"GetNumberOfControllersOfType('PDA')\", rawfile.GetNumberOfControllersOfType('PDA'))\r\nprint(\"GetNumberOfControllersOfType('UV')\", rawfile.GetNumberOfControllersOfType('UV'))\r\nprint(\"GetControllerType('MS')\", rawfile.GetControllerType('MS'))\r\n# print( 'GetControllerType(1)',  rawfile.GetControllerType(1) )\r\n\r\n# print( 'GetControllerType(2)',  rawfile.GetControllerType(2) )\r\n# print( 'GetControllerType(3)',  rawfile.GetControllerType(3) )\r\n# print( 'GetControllerType(4)',  rawfile.GetControllerType(4) )\r\nprint('GetCurrentController()', rawfile.GetCurrentController())\r\n# print( 'SetCurrentController(4,1)',  rawfile.SetCurrentController(4,1) )\r\n\r\nprint('GetCurrentController()', rawfile.GetCurrentController())\r\n# print( 'SetCurrentController(0,1)',  rawfile.SetCurrentController(0,1) )\r\n\r\nprint('GetCurrentController()', rawfile.GetCurrentController())\r\nprint('GetExpectedRunTime()', rawfile.GetExpectedRunTime())\r\nprint('GetMaxIntegratedIntensity()', rawfile.GetMaxIntegratedIntensity())\r\nprint('GetMaxIntensity()', rawfile.GetMaxIntensity())\r\nprint('GetInletID()', rawfile.GetInletID())\r\nprint('GetErrorFlag()', rawfile.GetErrorFlag())\r\nprint('GetFlags()', rawfile.GetFlags())\r\nprint('GetAcquisitionFileName()', rawfile.GetAcquisitionFileName())\r\nprint('GetOperator()', rawfile.GetOperator())\r\nprint('GetComment1()', rawfile.GetComment1())\r\nprint('GetComment2()', rawfile.GetComment2())\r\nprint('GetFilters()', rawfile.GetFilters())\r\nprint('GetMassTolerance()', rawfile.GetMassTolerance())\r\n\r\nprint('rawfile.SetMassTolerance(userDefined=True, massTolerance=555.0, units=2)',\r\n        rawfile.SetMassTolerance(userDefined=True, massTolerance=555.0, units=2))\r\nprint('GetMassTolerance()', rawfile.GetMassTolerance())\r\nprint('rawfile.SetMassTolerance(userDefined=False, massTolerance=500.0, units=0)',\r\n        rawfile.SetMassTolerance(userDefined=False, massTolerance=500.0, units=0))\r\nprint('GetMassResolution', rawfile.GetMassResolution())\r\nprint('GetNumTrailerExtra', rawfile.GetNumTrailerExtra())\r\nprint('GetLowMass', rawfile.GetLowMass())\r\nprint('GetHighMass', rawfile.GetHighMass())\r\nprint('GetStartTime', rawfile.GetStartTime())\r\nprint('GetEndTime', rawfile.GetEndTime())\r\nprint('GetNumSpectra', rawfile.GetNumSpectra())\r\nprint('GetFirstSpectrumNumber', rawfile.GetFirstSpectrumNumber())\r\nprint('GetLastSpectrumNumber', rawfile.GetLastSpectrumNumber())\r\nprint('GetAcquisitionDate', rawfile.GetAcquisitionDate())\r\nprint('GetUniqueCompoundNames', rawfile.GetUniqueCompoundNames())\r\n\r\nprint('############################################## INSTRUMENT BEGIN')\r\nprint('GetInstrumentDescription', rawfile.GetInstrumentDescription())\r\nprint('GetInstrumentID', rawfile.GetInstrumentID())\r\nprint('GetInstSerialNumber', rawfile.GetInstSerialNumber())\r\nprint('GetInstName', rawfile.GetInstName())\r\nprint('GetInstModel', rawfile.GetInstModel())\r\nprint('GetInstSoftwareVersion', rawfile.GetInstSoftwareVersion())\r\nprint('GetInstHardwareVersion', rawfile.GetInstHardwareVersion())\r\nprint('GetInstFlags', rawfile.GetInstFlags())\r\nprint('GetInstNumChannelLabels', rawfile.GetInstNumChannelLabels())\r\n# print( 'GetInstChannelLabel(0)', rawfile.GetInstChannelLabel(0) )\r\nprint('IsQExactive', rawfile.IsQExactive())  # Not implemented in MSFileReader 3.0.29.0\r\nprint('############################################## INSTRUMENT END')\r\n\r\nscan_number = 1\r\nprint('############################################## XCALIBUR INTERFACE BEGIN')\r\nprint('GetScanHeaderInfoForScanNum',\r\n        rawfile.GetScanHeaderInfoForScanNum(scan_number))  # \"View/Scan header\", upper part\r\nprint('GetTrailerExtraForScanNum', rawfile.GetTrailerExtraForScanNum(scan_number))  # \"View/Scan header\", lower part\r\nprint('GetNumTuneData', rawfile.GetNumTuneData())\r\nprint('GetTuneData(0)', rawfile.GetTuneData(0))  # \"View/Report/Tune Method\"\r\nprint('GetNumInstMethods', rawfile.GetNumInstMethods())\r\nprint('GetInstMethodNames', rawfile.GetInstMethodNames())\r\nfor i in range(rawfile.GetNumInstMethods()):\r\n    print('-------------------------------------------------------------------------------')\r\n    print(rawfile.GetInstMethod(i))  # \"View/Report/Instrument Method\"\r\n    print('-------------------------------------------------------------------------------')\r\nprint('rawfile.ExtractInstMethodFromRaw', rawfile.ExtractInstMethodFromRaw(rawfile.filename + '.meth'))\r\n\r\n# # # # # # \"View/Report/Sample Information\" BEGIN\r\nprint('GetVialNumber', rawfile.GetVialNumber())\r\nprint('GetInjectionVolume', rawfile.GetInjectionVolume())\r\nprint('GetInjectionAmountUnits', rawfile.GetInjectionAmountUnits())\r\nprint('GetSampleVolume', rawfile.GetSampleVolume())\r\nprint('GetSampleVolumeUnits', rawfile.GetSampleVolumeUnits())\r\nprint('GetSampleWeight', rawfile.GetSampleWeight())\r\nprint('GetSampleAmountUnits', rawfile.GetSampleAmountUnits())\r\nprint('GetSeqRowNumber', rawfile.GetSeqRowNumber())\r\nprint('GetSeqRowSampleType', rawfile.GetSeqRowSampleType())\r\nprint('GetSeqRowDataPath', rawfile.GetSeqRowDataPath())\r\nprint('GetSeqRowRawFileName', rawfile.GetSeqRowRawFileName())\r\nprint('GetSeqRowSampleName', rawfile.GetSeqRowSampleName())\r\nprint('GetSeqRowSampleID', rawfile.GetSeqRowSampleID())\r\nprint('GetSeqRowComment', rawfile.GetSeqRowComment())\r\nprint('GetSeqRowLevelName', rawfile.GetSeqRowLevelName())\r\nprint('GetSeqRowUserText', rawfile.GetSeqRowUserText(index=0))\r\nprint('GetSeqRowUserText', rawfile.GetSeqRowUserText(index=1))\r\nprint('GetSeqRowUserText', rawfile.GetSeqRowUserText(index=2))\r\nprint('GetSeqRowUserText', rawfile.GetSeqRowUserText(index=3))\r\nprint('GetSeqRowUserText', rawfile.GetSeqRowUserText(index=4))\r\nprint('GetSeqRowInstrumentMethod', rawfile.GetSeqRowInstrumentMethod())\r\nprint('GetSeqRowProcessingMethod', rawfile.GetSeqRowProcessingMethod())\r\nprint('GetSeqRowCalibrationFile', rawfile.GetSeqRowCalibrationFile())\r\nprint('GetSeqRowVial', rawfile.GetSeqRowVial())\r\nprint('GetSeqRowInjectionVolume', rawfile.GetSeqRowInjectionVolume())\r\nprint('GetSeqRowSampleWeight', rawfile.GetSeqRowSampleWeight())\r\nprint('GetSeqRowSampleVolume', rawfile.GetSeqRowSampleVolume())\r\nprint('GetSeqRowISTDAmount', rawfile.GetSeqRowISTDAmount())\r\nprint('GetSeqRowDilutionFactor', rawfile.GetSeqRowDilutionFactor())\r\nprint('GetSeqRowUserLabel', rawfile.GetSeqRowUserLabel(index=0))\r\nprint('GetSeqRowUserLabel', rawfile.GetSeqRowUserLabel(index=1))\r\nprint('GetSeqRowUserLabel', rawfile.GetSeqRowUserLabel(index=2))\r\nprint('GetSeqRowUserLabel', rawfile.GetSeqRowUserLabel(index=3))\r\nprint('GetSeqRowUserLabel', rawfile.GetSeqRowUserLabel(index=4))\r\nprint('GetSeqRowUserTextEx', rawfile.GetSeqRowUserTextEx(index=0))\r\nprint('GetSeqRowUserTextEx', rawfile.GetSeqRowUserTextEx(index=1))\r\nprint('GetSeqRowUserTextEx', rawfile.GetSeqRowUserTextEx(index=2))\r\nprint('GetSeqRowUserTextEx', rawfile.GetSeqRowUserTextEx(index=3))\r\nprint('GetSeqRowUserTextEx', rawfile.GetSeqRowUserTextEx(index=4))\r\nprint('GetSeqRowBarcode', rawfile.GetSeqRowBarcode())\r\nprint('GetSeqRowBarcodeStatus', rawfile.GetSeqRowBarcodeStatus())\r\n# # # # # # # \"View/Report/Sample Information\" END\r\nprint('GetNumStatusLog', rawfile.GetNumStatusLog())\r\nprint('GetStatusLogForScanNum')  # \"View/Report/Status Log\"\r\npprint(rawfile.GetStatusLogForScanNum(scan_number))\r\nprint('GetStatusLogForPos(position=0)', rawfile.GetStatusLogForPos(position=0))\r\nprint('GetStatusLogForPos(position=1)', rawfile.GetStatusLogForPos(position=1))\r\nprint('GetStatusLogPlottableIndex()', rawfile.GetStatusLogPlottableIndex())\r\n\r\nprint('GetNumErrorLog', rawfile.GetNumErrorLog())\r\nfor i in range(rawfile.GetNumErrorLog()):\r\n    print('GetErrorLogItem', i, rawfile.GetErrorLogItem(i))  # \"View/Report/Error Log\"\r\nprint('############################################## XCALIBUR INTERFACE END')\r\n\r\nprint('GetMassListFromScanNum', rawfile.GetMassListFromScanNum(scan_number))\r\nprint('GetMassListRangeFromScanNum', rawfile.GetMassListRangeFromScanNum(scan_number))\r\nprint('GetSegmentedMassListFromScanNum', rawfile.GetSegmentedMassListFromScanNum(scan_number))\r\nprint('GetAverageMassList', rawfile.GetAverageMassList(scan_number, scan_number + 10))\r\nprint('GetAveragedMassSpectrum', rawfile.GetAveragedMassSpectrum([scan_number, scan_number + 5, scan_number + 10]))\r\nprint('GetSummedMassSpectrum', rawfile.GetSummedMassSpectrum([scan_number, scan_number + 5, scan_number + 10]))\r\nprint('GetLabelData', rawfile.GetLabelData(scan_number))\r\nprint('GetAveragedLabelData', rawfile.GetAveragedLabelData([scan_number, scan_number + 5, scan_number + 10]))\r\nprint('GetAllMSOrderData', rawfile.GetAllMSOrderData(scan_number))\r\nprint('GetChroData', rawfile.GetChroData(startTime=rawfile.StartTime,\r\n                                            endTime=rawfile.EndTime,\r\n                                            massRange1=\"{}-{}\".format(rawfile.LowMass, rawfile.HighMass),\r\n                                            scanFilter=\"Full ms \"))\r\n# print( 'GetChroByCompoundName', rawfile.GetChroByCompoundName([\"methyltestosterone\"]) )\r\n\r\n# print( 'GetMassPrecisionEstimate', rawfile.GetMassPrecisionEstimate(scan_number) )\r\n\r\nprint('GetFullMSOrderPrecursorDataFromScanNum(scan_number,0)',\r\n        rawfile.GetFullMSOrderPrecursorDataFromScanNum(scan_number, 0))\r\nprint('GetFullMSOrderPrecursorDataFromScanNum(scan_number,1)',\r\n        rawfile.GetFullMSOrderPrecursorDataFromScanNum(scan_number, 1))\r\n\r\nprint('GetPrecursorInfoFromScanNum(scan_number,1)', rawfile.GetPrecursorInfoFromScanNum(scan_number))\r\n\r\nwith open('test.tsv', 'wt') as f:\r\n    print('\\t'.join(map(str, ('scan_number',\r\n                                'RetentionTime',\r\n                                'scan_number',\r\n                                'GetFilterForScanNum(i)',\r\n                                'GetMSOrderForScanNum(i)',\r\n                                'GetNumberOfMSOrdersFromScanNum(i)',\r\n                                'GetScanTypeForScanNum(i)',\r\n                                'GetDetectorTypeForScanNum(i)',\r\n                                'GetMassAnalyzerTypeForScanNum(i)',\r\n                                'GetActivationTypeForScanNum(i,MSOrder=2)',\r\n                                'IsProfileScanForScanNum(i)',\r\n                                'IsCentroidScanForScanNum(i)',\r\n                                'GetIsolationWidthForScanNum(i,MSOrder=1)',\r\n                                'GetCollisionEnergyForScanNum(i,MSOrder=1)',\r\n                                'GetPrecursorInfoFromScanNum(i)',\r\n                                'GetMassCalibrationValueFromScanNum(i,massCalibrationIndex=0)',\r\n                                'GetScanEventForScanNum(i)',\r\n                                'GetSegmentAndEventForScanNum(i)',\r\n                                'GetCycleNumberFromScanNumber(i)',\r\n                                'GetAValueFromScanNum(i)',\r\n                                'GetBValueFromScanNum(i)',\r\n                                'GetKValueFromScanNum(i)',\r\n                                'GetRValueFromScanNum(i)',\r\n                                'GetVValueFromScanNum(i)',\r\n                                'GetMSXMultiplexValueFromScanNum(i)',\r\n                                'GetCompoundNameFromScanNum(i)',\r\n                                'GetNumberOfMassRangesFromScanNum(i)',\r\n                                'GetMassRangeFromScanNum(i,0)',\r\n                                'GetMassRangeFromScanNum(i,1)',\r\n                                'GetNumberOfSourceFragmentsFromScanNum(i)',\r\n                                'GetSourceFragmentValueFromScanNum(i,0)',\r\n                                'GetNumberOfSourceFragmentationMassRangesFromScanNum(i)'\r\n                                ))), file=f)\r\n\r\n    for i in range(rawfile.FirstSpectrumNumber, rawfile.LastSpectrumNumber + 1):\r\n        print('\\t'.join(map(str, (i,\r\n                                    rawfile.RTFromScanNum(i),\r\n                                    rawfile.ScanNumFromRT(rawfile.RTFromScanNum(i)),\r\n                                    rawfile.GetFilterForScanNum(i),\r\n                                    rawfile.GetMSOrderForScanNum(i),\r\n                                    rawfile.GetNumberOfMSOrdersFromScanNum(i),\r\n                                    rawfile.GetScanTypeForScanNum(i),\r\n                                    rawfile.GetDetectorTypeForScanNum(i),\r\n                                    rawfile.GetMassAnalyzerTypeForScanNum(i),\r\n                                    rawfile.GetActivationTypeForScanNum(i, MSOrder=2),\r\n                                    rawfile.IsProfileScanForScanNum(i),\r\n                                    rawfile.IsCentroidScanForScanNum(i),\r\n                                    rawfile.GetIsolationWidthForScanNum(i, MSOrder=1),\r\n                                    rawfile.GetCollisionEnergyForScanNum(i, MSOrder=1),\r\n                                    rawfile.GetPrecursorInfoFromScanNum(i),\r\n                                    rawfile.GetMassCalibrationValueFromScanNum(i, massCalibrationIndex=0),\r\n                                    rawfile.GetScanEventForScanNum(i),\r\n                                    rawfile.GetSegmentAndEventForScanNum(i),\r\n                                    rawfile.GetCycleNumberFromScanNumber(i),\r\n                                    rawfile.GetAValueFromScanNum(i),\r\n                                    rawfile.GetBValueFromScanNum(i),\r\n                                    rawfile.GetKValueFromScanNum(i),\r\n                                    rawfile.GetRValueFromScanNum(i),\r\n                                    rawfile.GetVValueFromScanNum(i),\r\n                                    rawfile.GetMSXMultiplexValueFromScanNum(i),\r\n                                    rawfile.GetCompoundNameFromScanNum(i),\r\n                                    rawfile.GetNumberOfMassRangesFromScanNum(i),\r\n                                    rawfile.GetMassRangeFromScanNum(i, 0),\r\n                                    rawfile.GetMassRangeFromScanNum(i, 1),\r\n                                    rawfile.GetNumberOfSourceFragmentsFromScanNum(i),\r\n                                    rawfile.GetSourceFragmentValueFromScanNum(i, 0),\r\n                                    rawfile.GetNumberOfSourceFragmentationMassRangesFromScanNum(i)\r\n                                    ))), file=f)\r\n\r\nrawfile.Close()\r\n```\r\n"
      },
      "source": "https://raw.githubusercontent.com/frallain/MSFileReader_Python_bindings/master/README.md",
      "technique": "header_analysis"
    }
  ]
}