{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "RecoverY"
        ],
        "type": "Text_excerpt",
        "value": "If you use RecoverY in your research, please cite \n\n[RecoverY : k-mer-based read classification for Y-chromosome-specific sequencing and assembly](https://academic.oup.com/bioinformatics/advance-article/doi/10.1093/bioinformatics/btx771/4670683), \n\nSamarth Rangavittal, Robert S. Harris, Monika Cechova, Marta Tomaszkiewicz, Rayan Chikhi, Kateryna Makova, Paul Medvedev\n\nBioinformatics 2017 https://doi.org/10.1093/bioinformatics/btx771.\n"
      },
      "source": "https://raw.githubusercontent.com/makovalab-psu/RecoverY/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/makovalab-psu/RecoverY"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2017-05-30T14:39:44Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-07-19T21:42:42Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "K-mer based read classification for Y-chromosome specific sequencing and assembly"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.8750072637213374,
      "result": {
        "original_header": "Generating BASH10*",
        "type": "Text_excerpt",
        "value": "RecoverY is a tool for shortlisting enriched reads from a sequencing dataset, based on k-mer abundance. Specifically, it can be used for isolating Y-specific reads from a Y flow-sorted dataset. \n"
      },
      "source": "https://raw.githubusercontent.com/makovalab-psu/RecoverY/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9346536719547889,
      "result": {
        "original_header": "Usage",
        "type": "Text_excerpt",
        "value": "Before running RecoverY, the following input files are required in ./data folder. \nNote that currently the names of the \"data\" folder and of the files are hardcoded into RecoverY. \n\n- --kmer\\_size (default: 25): kmer size used for classifying reads. This must be the same as DSK's k-mer-size. We recommend a value between 25 and 31 for Illumina 150x150 bp reads. This value is used for calculating Ymer\\_match\\_threshold below \n- --read\\_length (default:150) : The length of longest un-trimmed read input to RecoverY. This value is used for calculating Ymer\\_match\\_threshold below\n\t\n- --Ymer\\_match\\_threshold : the number of k-mers a read must match to the Ymer table in order to be classified as coming from the Y. The default value is calculated by the formula : 0.4 * (read_len - kmer_size + 1 - (2\\*kmer\\_size\\*read\\_len/100)). User may change this, but we recommend a value between 20 and 50 for Illumina 150x150 bp reads. \n- --abundance\\_threshold : the abundance threshold beyond which all k-mers are assumed to be Ymers. Specify this only if user does not have access to a trusted k-mers file and would like to manually set an abundance threshold.   \n\t\n- --threads (default: 2): The number of threads that RecoverY should use.  \n- --plots: generates a k-mer abundance plot in ```output/kmerplot.png``` (requires Matplotlib and Seaborn python packages to be installed, see below). This plot visualizes the abundance threshold selected by RecoverY, by plotting the abundance of raw read k-mers as well as trusted k-mers. See [here](/img/kmerplot.png) for an example.  \n"
      },
      "source": "https://raw.githubusercontent.com/makovalab-psu/RecoverY/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9682868198446288,
      "result": {
        "original_header": "Generating BASH10*",
        "type": "Text_excerpt",
        "value": "The output of RecoverY are two files: ```output/op_r1.fastq``` and BASH3*. \nThis is a subset of the read pairs in BASH4* and BASH5* that are deemed to have originated on the Y chromosome.  \nRecoverY also uses the k-mer counter DSK. The latest DSK binaries (v2.2.0 for Linux 64 bit and v2.2.0 for Mac OSX) are provided in the dependency folder. Thus, if you are using either of these operating systems, DSK need not be installed, and you may use the binaries as provided. For other operating systems, or if alternate versions or functionality of DSK is desired, see https://gatb.inria.fr/software/dsk/. \n"
      },
      "source": "https://raw.githubusercontent.com/makovalab-psu/RecoverY/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8987859799661314,
      "result": {
        "original_header": "Example",
        "type": "Text_excerpt",
        "value": "To test if RecoverY works properly, the ```data``` folder comes with an example dataset.\nThe example read data is a random subsample of 100,000 reads from a larger simulated data set in which reads from hg38 autosomes are sampled at 6x depth, X chromosome at 3x depth, and Y chromosome at 300x depth (see Section 3.1 in the paper).  \nThe reads in this example contain their chromosome of origin as part of their FASTQ header.\nWe can therefore check the number of correctly retrieved Y-reads by RecoverY: \n\tgrep \"@chrY\" data/r1.fastq | wc -l\n\tgrep \"@chrY\" output/op_r1.fastq | wc -l \n"
      },
      "source": "https://raw.githubusercontent.com/makovalab-psu/RecoverY/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9111668429092927,
      "result": {
        "original_header": "Generating BASH10*",
        "type": "Text_excerpt",
        "value": "The result should be ```32116``` and BASH9*, respectively.\nThis indicates that RecoverY correctly identified most of the Y chromosome reads from the sample. \n\n### Generating ```kmers_from_reads```\nThe ```kmers_from_reads``` is a file which includes a line for every distinct kmer in BASH12*, and \neach line contains the kmer sequence followed by whitespace followed by the number of times it occurs in BASH12*. \nFor example, the first three lines could look like this. \nThe ```kmers_from_reads``` file can be generated by the k-mer counter DSK. The ./dependency folder contains DSK binaries for Linux 64 bit and Mac OSX. Usage is as follows (example shown below is for a Linux system) : \n\nRecoverY ignored any k-mer in ```kmers_from_reads``` that has a count less than 3. \nIf using DSK to generate the file, k-mers with counts less than 3 are discarded by default, \nthereby saving space (i.e. --abundance-min is set to 3 by default in DSK) . \n\t\n**kmers.py** \n\t\n\ta set of general purpose functions to work with kmers \n**kmerPaint.py**\n\t\n\tinput : trusted_kmers and reads_from_kmers \n\toutput : Ymer_table with new abundance threshold \n"
      },
      "source": "https://raw.githubusercontent.com/makovalab-psu/RecoverY/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8637551182556858,
      "result": {
        "original_header": "Miscellaneous",
        "type": "Text_excerpt",
        "value": "\tinput : all raw reads (second in pair) and Y-specific reads accoding to RecoverY algorithm (first in pair)\n\toutput : Y-specific reads according to RecoverY algorithm (second in pair)\n\t\n\t\n \n"
      },
      "source": "https://raw.githubusercontent.com/makovalab-psu/RecoverY/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9209009770665451,
      "result": {
        "original_header": "Generating BASH10*",
        "type": "Text_excerpt",
        "value": "## License\nThis program is released under the MIT License. Please see LICENSE.md for details \n"
      },
      "source": "https://raw.githubusercontent.com/makovalab-psu/RecoverY/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/makovalab-psu/RecoverY/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/makovalab-psu/RecoverY/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "makovalab-psu/RecoverY"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "RecoverY"
      },
      "source": "https://raw.githubusercontent.com/makovalab-psu/RecoverY/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/makovalab-psu/RecoverY/master/dependency/run_dsk_Linux.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/makovalab-psu/RecoverY/master/dependency/run_dsk_OSX.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/makovalab-psu/RecoverY/master/dependency/dsk-v2.2.0-bin-Darwin/simple_test.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/makovalab-psu/RecoverY/master/dependency/dsk-v2.2.0-bin-Linux/simple_test.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "RecoverY"
        ],
        "type": "Text_excerpt",
        "value": "To download, \n\n\tgit clone https://github.com/makovalab-psu/RecoverY\n\t\nRecoverY also requires the numpy and biopython python packages in order to run.\nAdditionally, if you use the ```--plot``` option, RecoverY needs the matplotlib and seaborn packages for python.\nHowever, RecoverY can be run without the matplotlib or seaborn packages, as long as the ```--plot``` option is not used.\nThese packages can be installed on many  systems as follows:\n\n    pip install numpy\n    pip install biopython\n    pip install matplotlib\n    pip install seaborn\n\nRecoverY also uses the k-mer counter DSK. The latest DSK binaries (v2.2.0 for Linux 64 bit and v2.2.0 for Mac OSX) are provided in the dependency folder. Thus, if you are using either of these operating systems, DSK need not be installed, and you may use the binaries as provided. For other operating systems, or if alternate versions or functionality of DSK is desired, see https://gatb.inria.fr/software/dsk/.\n"
      },
      "source": "https://raw.githubusercontent.com/makovalab-psu/RecoverY/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.8350747526179403,
      "result": {
        "original_header": "Usage",
        "type": "Text_excerpt",
        "value": "\tpython recoverY.py [--help] [--read_length READ_LENGTH] [--kmer_size KMER_SIZE]\n                   [--Ymer_match_threshold YMER_MATCH_THRESHOLD]\n\t\t       [--abundance_threshold ABUNDANCE_THRESHOLD]\n                   [--threads THREADS] [--plots] \n"
      },
      "source": "https://raw.githubusercontent.com/makovalab-psu/RecoverY/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9253141517407325,
      "result": {
        "original_header": "Generating BASH10*",
        "type": "Text_excerpt",
        "value": "## Installation  \n"
      },
      "source": "https://raw.githubusercontent.com/makovalab-psu/RecoverY/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999999999972147,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "\tgit clone https://github.com/makovalab-psu/RecoverY\n\t\nRecoverY also requires the numpy and biopython python packages in order to run.\nAdditionally, if you use the ```--plot``` option, RecoverY needs the matplotlib and seaborn packages for python.\nHowever, RecoverY can be run without the matplotlib or seaborn packages, as long as the ```--plot``` option is not used.\nThese packages can be installed on many  systems as follows: \n    pip install numpy\n    pip install biopython\n    pip install matplotlib\n    pip install seaborn \n"
      },
      "source": "https://raw.githubusercontent.com/makovalab-psu/RecoverY/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999999999925535,
      "result": {
        "original_header": "Generating BASH10*",
        "type": "Text_excerpt",
        "value": "RecoverY also uses the k-mer counter DSK. The latest DSK binaries (v2.2.0 for Linux 64 bit and v2.2.0 for Mac OSX) are provided in the dependency folder. Thus, if you are using either of these operating systems, DSK need not be installed, and you may use the binaries as provided. For other operating systems, or if alternate versions or functionality of DSK is desired, see https://gatb.inria.fr/software/dsk/. \n"
      },
      "source": "https://raw.githubusercontent.com/makovalab-psu/RecoverY/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9683316496165328,
      "result": {
        "original_header": "Example",
        "type": "Text_excerpt",
        "value": "To test the example, you must first untar it and then run RecoverY, as follows: \n\tcd data/\n\ttar xf kmers_from_reads.tar.xz\n\tcd ../\n\tpython recoverY.py \n"
      },
      "source": "https://raw.githubusercontent.com/makovalab-psu/RecoverY/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9841259064710354,
      "result": {
        "original_header": "Generating BASH10*",
        "type": "Text_excerpt",
        "value": "The ```kmers_from_reads``` file can be generated by the k-mer counter DSK. The ./dependency folder contains DSK binaries for Linux 64 bit and Mac OSX. Usage is as follows (example shown below is for a Linux system) : \n    cd dependency\n    ./run_dsk_Linux.sh <FASTQ_file> <kmer_size> \n\nIf the k-mer counts file for raw reads (r1.fastq) is not already provided, the user may need to generate k-mer counts manually using DSK. To generate k-mer counts with DSK, the following steps are needed :  \n    cd dependency \n    ln -s ../data/r1.fastq   # make sure the correct reads file is provided to DSK\n    ./run_dsk_Linux.sh r1.fastq 25   \n    dependency/dsk_output/kmers_from_reads \n    cd ../data\n    ln -s ../dependency/kmers_from_reads  \nThe following scripts are included with this distribution of RecoverY, and are automatically run by recovery.py as part of the pipeline. Users may consider them separately for custom needs if required.  \n"
      },
      "source": "https://raw.githubusercontent.com/makovalab-psu/RecoverY/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8570197016172434,
      "result": {
        "original_header": "Usage",
        "type": "Text_excerpt",
        "value": "\tpython recoverY.py [--help] [--read_length READ_LENGTH] [--kmer_size KMER_SIZE]\n                   [--Ymer_match_threshold YMER_MATCH_THRESHOLD]\n\t\t       [--abundance_threshold ABUNDANCE_THRESHOLD]\n                   [--threads THREADS] [--plots] \n"
      },
      "source": "https://raw.githubusercontent.com/makovalab-psu/RecoverY/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8677982509526866,
      "result": {
        "original_header": "Generating BASH10*",
        "type": "Text_excerpt",
        "value": "## Example \n"
      },
      "source": "https://raw.githubusercontent.com/makovalab-psu/RecoverY/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8341995967670739,
      "result": {
        "original_header": "Example",
        "type": "Text_excerpt",
        "value": "To test the example, you must first untar it and then run RecoverY, as follows: \n\tcd data/\n\ttar xf kmers_from_reads.tar.xz\n\tcd ../\n\tpython recoverY.py \n\tgrep \"@chrY\" data/r1.fastq | wc -l\n\tgrep \"@chrY\" output/op_r1.fastq | wc -l \n"
      },
      "source": "https://raw.githubusercontent.com/makovalab-psu/RecoverY/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8598484911931511,
      "result": {
        "original_header": "Generating BASH10*",
        "type": "Text_excerpt",
        "value": "    cd dependency \n    ln -s ../data/r1.fastq   # make sure the correct reads file is provided to DSK\n    ./run_dsk_Linux.sh r1.fastq 25   \n**find_mates.py**  \n"
      },
      "source": "https://raw.githubusercontent.com/makovalab-psu/RecoverY/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/makovalab-psu/RecoverY/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2017 Samarth Rangavittal\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/makovalab-psu/RecoverY/master/LICENSE.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "parent_header": [
          "RecoverY"
        ],
        "type": "Text_excerpt",
        "value": "This program is released under the MIT License. Please see LICENSE.md for details\n\n"
      },
      "source": "https://raw.githubusercontent.com/makovalab-psu/RecoverY/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "RecoverY"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "makovalab-psu"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 23176,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 18298,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/makovalab-psu/RecoverY/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 08:28:21",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 9
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "RecoverY"
        ],
        "type": "Text_excerpt",
        "value": "Before running RecoverY, the following input files are required in ./data folder. \nNote that currently the names of the \"data\" folder and of the files are hardcoded into RecoverY.\n\n\tr1.fastq : Enriched raw reads (first in pair) \n\tr2.fastq : Enriched raw reads (second in pair) \n\tkmers_from_reads : kmer counts for r1.fastq\n\ttrusted_kmers : kmers occuring in one copy on the Y chromosome. \n\n[See below for more info on generating these files.](https://github.com/makovalab-psu/RecoverY/blob/master/README.md#input-files) \n\nA typical run of RecoverY looks like this. \n\n\tpython recoverY.py --read_length 250 --kmer_size 31 --Ymer_match_threshold 50 --threads 8\n\t\n\nRecoverY accepts the following parameters. \n\n\tpython recoverY.py [--help] [--read_length READ_LENGTH] [--kmer_size KMER_SIZE]\n                   [--Ymer_match_threshold YMER_MATCH_THRESHOLD]\n\t\t       [--abundance_threshold ABUNDANCE_THRESHOLD]\n                   [--threads THREADS] [--plots]\n\n\n- --kmer\\_size (default: 25): kmer size used for classifying reads. This must be the same as DSK's k-mer-size. We recommend a value between 25 and 31 for Illumina 150x150 bp reads. This value is used for calculating Ymer\\_match\\_threshold below\n\n- --read\\_length (default:150) : The length of longest un-trimmed read input to RecoverY. This value is used for calculating Ymer\\_match\\_threshold below\n\t\n- --Ymer\\_match\\_threshold : the number of k-mers a read must match to the Ymer table in order to be classified as coming from the Y. The default value is calculated by the formula : 0.4 * (read_len - kmer_size + 1 - (2\\*kmer\\_size\\*read\\_len/100)). User may change this, but we recommend a value between 20 and 50 for Illumina 150x150 bp reads.\n\n- --abundance\\_threshold : the abundance threshold beyond which all k-mers are assumed to be Ymers. Specify this only if user does not have access to a trusted k-mers file and would like to manually set an abundance threshold.   \n\t\n- --threads (default: 2): The number of threads that RecoverY should use. \n\n- --help: print usage information.\n\n- --plots: generates a k-mer abundance plot in ```output/kmerplot.png``` (requires Matplotlib and Seaborn python packages to be installed, see below). This plot visualizes the abundance threshold selected by RecoverY, by plotting the abundance of raw read k-mers as well as trusted k-mers. See [here](/img/kmerplot.png) for an example. \n\nThe output of RecoverY are two files: ```output/op_r1.fastq``` and ```output/op_r2.fastq```. \nThis is a subset of the read pairs in ```data/r1.fastq``` and ```data/r2.fastq``` that are deemed to have originated on the Y chromosome. \n"
      },
      "source": "https://raw.githubusercontent.com/makovalab-psu/RecoverY/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example",
        "parent_header": [
          "RecoverY"
        ],
        "type": "Text_excerpt",
        "value": "To test if RecoverY works properly, the ```data``` folder comes with an example dataset.\nThe example read data is a random subsample of 100,000 reads from a larger simulated data set in which reads from hg38 autosomes are sampled at 6x depth, X chromosome at 3x depth, and Y chromosome at 300x depth (see Section 3.1 in the paper). \n\nTo test the example, you must first untar it and then run RecoverY, as follows:\n\n\tcd data/\n\ttar xf kmers_from_reads.tar.xz\n\tcd ../\n\tpython recoverY.py\n\nThe reads in this example contain their chromosome of origin as part of their FASTQ header.\nWe can therefore check the number of correctly retrieved Y-reads by RecoverY:\n\n\tgrep \"@chrY\" data/r1.fastq | wc -l\n\tgrep \"@chrY\" output/op_r1.fastq | wc -l\n\nThe result should be ```32116``` and ```31468```, respectively.\nThis indicates that RecoverY correctly identified most of the Y chromosome reads from the sample.\n\n"
      },
      "source": "https://raw.githubusercontent.com/makovalab-psu/RecoverY/master/README.md",
      "technique": "header_analysis"
    }
  ]
}