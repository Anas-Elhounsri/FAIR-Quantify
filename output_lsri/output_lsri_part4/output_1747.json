{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/jarny/biopyramid"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2017-12-19T23:25:29Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-01-29T10:13:28Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Framework for developing an online genomics application"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9991772278270181,
      "result": {
        "original_header": "BioPyramid",
        "type": "Text_excerpt",
        "value": "**BioPyramid** is a python and javascript based framework for developing an online gene expression data portal. It can be used as a starting scaffold or a template. BioPyramid contains a number of components designed to reduce the time and effort in building such an application from scratch, including gene annotation, dataset models and visualisation tools. \nAnother way to think about BioPyramid is as a scalable, pythonic version of [Shiny](https://shiny.rstudio.com/). Shiny is great for creating quick prototypes, but many of the functions often used in database web servers are beyond its scope, such as authentication and user management. BioPyramid is based on python [pyramid](http://trypyramid.com) - an enterprise level software for developing complex web applications.\n \n"
      },
      "source": "https://raw.githubusercontent.com/jarny/biopyramid/master/Readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.948876329372381,
      "result": {
        "original_header": "Key Components",
        "type": "Text_excerpt",
        "value": "- Dataset models which can be used to store and query a dataset, such as expression values of a selected gene in selected samples. \n- Geneset models which contain data about commonly used gene annotations, such as Ensembl and Entrez IDs, synonyms and orthologues. \n- Javascript based visualisation tools, including principle components plot and expression profile plot. \nBioPyramid uses minimal set of very transparent code with clear documentation that you can start modifying without being an expert in python pyramid framework. It comes with an example dataset so you can see how it works.\n \n"
      },
      "source": "https://raw.githubusercontent.com/jarny/biopyramid/master/Readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9211582500722247,
      "result": {
        "original_header": "How to add a dataset",
        "type": "Text_excerpt",
        "value": "Here is a step by step description of how the example dataset file included with BioPyramid, \"haemopedia.2.7.h5\", was created, so that it can be used as a template for additional dataset creation.\n```python\nimport pandas\nfrom biopyramid.models import bpdataset\n\n\n# Read sample table\nsamples = pandas.read_csv(\"samples.txt\", sep=\"\\t\", index_col=0)\n\n# We can define which columns of the sample table should be \"selectable\" within BioPyramid.\n# Selectable columns can be used to group samples in a plot, for example, while the other columns are ignored.\nsampleGroupsDisplayed = [\"celltype\", \"cell_lineage\", \"tissue\"]\n\n# For each sample group (=column of sample table), we can choose how the items should be ordered\nsampleGroupOrdering = {'cell_lineage': ['Multi Potential Progenitor', 'Restricted Potential Progenitor', \n                                        'Erythrocyte Lineage', 'Megakaryocyte Lineage', 'Mast Cell Lineage', \n                                        'Basophil Lineage', 'Eosinophil Lineage', 'Neutrophil Lineage', \n                                        'Macrophage Lineage', 'Dendritic Cell Lineage', 'B Cell Lineage', \n                                        'T Cell Lineage', 'NK Cell Lineage'], \n                       'celltype': ['LTHSC', 'STHSC', 'MPP', 'CMP', 'PreGM1', 'PreGM2', 'GMP', 'FcgRBP', \n                                    'CD9Hi', 'BEMP', 'CLP', 'PreCFUE', 'MEP', 'CFUE', 'EryBlPB', 'EryBlPO', \n                                    'Retic', 'Meg8N', 'Meg16N', 'Meg32N', 'Mast', 'Baso', 'EoP', 'Eo', 'NeutLN', \n                                    'NeutPt', 'MonoPB', 'MonoLN', 'Mac', 'CDP', 'cDC1', 'cDC2', 'MigDC', 'ProB', \n                                    'PreB', 'ImmB', 'B1', 'B2', 'MatB', 'CD4TThy1lo', 'TN1', 'TN2', 'TN3', 'TN4', \n                                    'DblPosT', 'NveCD4T', 'NveCD8T', 'EffCD4T', 'EffCD8T', 'CD4TLN', 'CD8TLN', \n                                    'RegT', 'MemCD8T', 'NK']\n                      }\n\n# Also we can choose colours for each sample group item if we choose to. The colours can be rgb or hex values.\nsampleGroupColours = {'cell_lineage': \n                          {'Multi Potential Progenitor': 'rgb(190,190,190)', \n                           'Erythrocyte Lineage': 'rgb(139,0,0)', \n                           'NK Cell Lineage': 'rgb(34,139,34)', \n                           'Mast Cell Lineage': 'rgb(255,20,147)', \n                           'Eosinophil Lineage': 'rgb(255,140,105)', \n                           'Macrophage Lineage': 'rgb(171,130,255)', \n                           'Dendritic Cell Lineage': 'rgb(30,144,255)', \n                           'Basophil Lineage': 'rgb(205,55,0)', \n                           'T Cell Lineage': 'rgb(0,255,0)', \n                           'Neutrophil Lineage': 'rgb(104,34,139)', \n                           'Megakaryocyte Lineage': 'rgb(238,180,34)', \n                           'B Cell Lineage': 'rgb(0,0,255)', \n                           'Restricted Potential Progenitor': 'rgb(127,127,127)'}\n                     }\n\n\n# Read expression matrix - this ia a quantile normalised matrix which have been mapped to gene ids, then aggregated for multiple probes\nexpression = pandas.read_csv(\"normalised_expression.txt\", sep=\"\\t\", index_col=0)\n\n# Check that all columns of expression matrix are found in the sample table\nassert set(expression.columns).issubset(set(samples.index))\n\n# Create coordinates of PCA, used to plot this quickly\nfrom sklearn.decomposition import PCA\nimport numpy\nfit = PCA(n_components=2).fit_transform(expression.transpose()) # PCA function works on rows so transpose\npca = pandas.DataFrame(fit, index=expression.columns, columns=['x','y'])\n\n# Dataset metadata\nattributes = {'name': 'haemopedia',\n              'fullname': 'Haemopedia',\n              'description': 'Microarray gene expression profiles from a comprehensive range of wildtype murine blood cells, all generated by Hilton Lab (Walter and Eliza Hall Institute) over a number of years.', \n              'expression_data_keys': ['normalised'],\n              'pubmed_id': '27499199', \n              'species': 'MusMusculus', \n              'version': '2.7'}\n\n# Finally ready to create the file\nbpdataset.createDatasetFile(\".\", \n                            attributes=attributes,\n                            samples=samples,\n                            expressions=[expression],\n                            sampleGroupsDisplayed=sampleGroupsDisplayed,\n                            sampleGroupOrdering=sampleGroupOrdering,\n                            sampleGroupColours=sampleGroupColours,\n                            pca=pca,\n                            )\n# This would create \"haemopedia.2.7.h5\" file in the current directory.\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/jarny/biopyramid/master/Readme.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/jarny/biopyramid/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/jarny/biopyramid/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "jarny/biopyramid"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "BioPyramid"
      },
      "source": "https://raw.githubusercontent.com/jarny/biopyramid/master/Readme.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "How to install it",
        "parent_header": [
          "BioPyramid"
        ],
        "type": "Text_excerpt",
        "value": "1. Install python if you don't already have it. [Conda](https://www.anaconda.com/download) is the recommended way of installing python. BioPython is designed for python3, tested on python 3.6.3. It does work on python2, but you won't be able to use the example dataset provided with python2, as that was created using python3 (you should delete the .h5 file in data/datasets and create your own).\n2. Clone this repo.\n3. Install BioPyramid and dependent packages by running (from within the repository directory):\n```bash\npip install -e .\n```\n4. Start the pyramid server:\n```bash\npserve development.ini\n```\n\nIf you're using conda or virtualenv to install BioPyramid in a separate environment, do that before step 3.\nenvironment.yml has been provided so that conda can be used to install the packages instead of pip, if desired (\"conda env create -f environment.yml\" instead of step 3).\n\nIf successful, you will be able to go to the URL shown by the pserve command on your browser (default is http://localhost:6545).\n\nNote that this repo contains a 33Mb example dataset.\n"
      },
      "source": "https://raw.githubusercontent.com/jarny/biopyramid/master/Readme.md",
      "technique": "header_analysis"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8053224278141818,
      "result": {
        "original_header": "How to add a dataset",
        "type": "Text_excerpt",
        "value": "Here is a step by step description of how the example dataset file included with BioPyramid, \"haemopedia.2.7.h5\", was created, so that it can be used as a template for additional dataset creation.\n```python\nimport pandas\nfrom biopyramid.models import bpdataset\n\n\n# Read sample table\nsamples = pandas.read_csv(\"samples.txt\", sep=\"\\t\", index_col=0)\n\n# We can define which columns of the sample table should be \"selectable\" within BioPyramid.\n# Selectable columns can be used to group samples in a plot, for example, while the other columns are ignored.\nsampleGroupsDisplayed = [\"celltype\", \"cell_lineage\", \"tissue\"]\n\n# For each sample group (=column of sample table), we can choose how the items should be ordered\nsampleGroupOrdering = {'cell_lineage': ['Multi Potential Progenitor', 'Restricted Potential Progenitor', \n                                        'Erythrocyte Lineage', 'Megakaryocyte Lineage', 'Mast Cell Lineage', \n                                        'Basophil Lineage', 'Eosinophil Lineage', 'Neutrophil Lineage', \n                                        'Macrophage Lineage', 'Dendritic Cell Lineage', 'B Cell Lineage', \n                                        'T Cell Lineage', 'NK Cell Lineage'], \n                       'celltype': ['LTHSC', 'STHSC', 'MPP', 'CMP', 'PreGM1', 'PreGM2', 'GMP', 'FcgRBP', \n                                    'CD9Hi', 'BEMP', 'CLP', 'PreCFUE', 'MEP', 'CFUE', 'EryBlPB', 'EryBlPO', \n                                    'Retic', 'Meg8N', 'Meg16N', 'Meg32N', 'Mast', 'Baso', 'EoP', 'Eo', 'NeutLN', \n                                    'NeutPt', 'MonoPB', 'MonoLN', 'Mac', 'CDP', 'cDC1', 'cDC2', 'MigDC', 'ProB', \n                                    'PreB', 'ImmB', 'B1', 'B2', 'MatB', 'CD4TThy1lo', 'TN1', 'TN2', 'TN3', 'TN4', \n                                    'DblPosT', 'NveCD4T', 'NveCD8T', 'EffCD4T', 'EffCD8T', 'CD4TLN', 'CD8TLN', \n                                    'RegT', 'MemCD8T', 'NK']\n                      }\n\n# Also we can choose colours for each sample group item if we choose to. The colours can be rgb or hex values.\nsampleGroupColours = {'cell_lineage': \n                          {'Multi Potential Progenitor': 'rgb(190,190,190)', \n                           'Erythrocyte Lineage': 'rgb(139,0,0)', \n                           'NK Cell Lineage': 'rgb(34,139,34)', \n                           'Mast Cell Lineage': 'rgb(255,20,147)', \n                           'Eosinophil Lineage': 'rgb(255,140,105)', \n                           'Macrophage Lineage': 'rgb(171,130,255)', \n                           'Dendritic Cell Lineage': 'rgb(30,144,255)', \n                           'Basophil Lineage': 'rgb(205,55,0)', \n                           'T Cell Lineage': 'rgb(0,255,0)', \n                           'Neutrophil Lineage': 'rgb(104,34,139)', \n                           'Megakaryocyte Lineage': 'rgb(238,180,34)', \n                           'B Cell Lineage': 'rgb(0,0,255)', \n                           'Restricted Potential Progenitor': 'rgb(127,127,127)'}\n                     }\n\n\n# Read expression matrix - this ia a quantile normalised matrix which have been mapped to gene ids, then aggregated for multiple probes\nexpression = pandas.read_csv(\"normalised_expression.txt\", sep=\"\\t\", index_col=0)\n\n# Check that all columns of expression matrix are found in the sample table\nassert set(expression.columns).issubset(set(samples.index))\n\n# Create coordinates of PCA, used to plot this quickly\nfrom sklearn.decomposition import PCA\nimport numpy\nfit = PCA(n_components=2).fit_transform(expression.transpose()) # PCA function works on rows so transpose\npca = pandas.DataFrame(fit, index=expression.columns, columns=['x','y'])\n\n# Dataset metadata\nattributes = {'name': 'haemopedia',\n              'fullname': 'Haemopedia',\n              'description': 'Microarray gene expression profiles from a comprehensive range of wildtype murine blood cells, all generated by Hilton Lab (Walter and Eliza Hall Institute) over a number of years.', \n              'expression_data_keys': ['normalised'],\n              'pubmed_id': '27499199', \n              'species': 'MusMusculus', \n              'version': '2.7'}\n\n# Finally ready to create the file\nbpdataset.createDatasetFile(\".\", \n                            attributes=attributes,\n                            samples=samples,\n                            expressions=[expression],\n                            sampleGroupsDisplayed=sampleGroupsDisplayed,\n                            sampleGroupOrdering=sampleGroupOrdering,\n                            sampleGroupColours=sampleGroupColours,\n                            pca=pca,\n                            )\n# This would create \"haemopedia.2.7.h5\" file in the current directory.\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/jarny/biopyramid/master/Readme.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/jarny/biopyramid/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2017 jarny\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/jarny/biopyramid/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jarny/biopyramid/master//biopyramid/static/images/Schematic.png"
      },
      "source": "https://raw.githubusercontent.com/jarny/biopyramid/master/Readme.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "biopyramid"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "jarny"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 20977,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Mako",
        "size": 20747,
        "type": "Programming_language",
        "value": "Mako"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CSS",
        "size": 3521,
        "type": "Programming_language",
        "value": "CSS"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jarny/biopyramid/master/Readme.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 08:09:25",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 9
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Example Use Cases",
        "parent_header": [
          "BioPyramid"
        ],
        "type": "Text_excerpt",
        "value": "- Development of a medium to large scale online data portal, which makes a set of related datasets and custom analysis functions available. Examples of such portals include [haemosphere.org](http://haemosphere.org), [stemformatics.org](http://stemformatics.org), and [R2 Genomics](http://r2.amc.nl/). All these portals offer many features and functions beyond the scope of a Shiny server.\n- Hosting datasets where access functions may be not analysis driven, such as downloading files or looking up gene expression profiles, or updating data. These functions are more easily implemented in python than in R.\n- Hosting private datasets which require access by collaborators, but too sensitive to upload to existing online tools for analysis.\n- To make available a set of analysis tools written in python by also providing a server with applicable datasets included.\n- To create a data portal with heavily javascript driven visualisations, where full control of every element of the html pages is required.\n\nAn example data portal which uses the BioPyramid as its base is [haemosphere.org](http://haemosphere.org), which is a fully featured web application with many components, and illustrates how BioPyramid can be scaled up to a much larger project from its prototype stage.\n"
      },
      "source": "https://raw.githubusercontent.com/jarny/biopyramid/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "How to use it",
        "parent_header": [
          "BioPyramid"
        ],
        "type": "Text_excerpt",
        "value": "After that, you can modify the code to customise it to your own application. For those not familiar with the code structure of python pyramid, here is a schematic of the components which make up biopyramid and some description of each part to get started.\n\n![Schematic](/biopyramid/static/images/Schematic.png)\n\n- biopyramid/models/ contains data models which should exist independently of the pyramid application. This is also a suitable place to create extensions of the existing classes such as genedataset, and an example is provided by bpdataset.py, which has BPDataset class that inherits from genedataset.Dataset class. \n- biopyramid/static/ contains static resources, including images, styles sheets, javascript packages and static html.\n- biopyramid/templates/ contains Mako templates used to render pages or parts of pages. Each page is injected with variables from the python controller and these can be used to dynamically render the page appropriately.\n- biopyramid/views/ contains controllers whose functions are read by pyramid at start-up. The functions with @view_config decorators should map to URLs as specified in biopyramid/__init__.py. The grouping of the functions into individual scripts is for convenience.\n"
      },
      "source": "https://raw.githubusercontent.com/jarny/biopyramid/master/Readme.md",
      "technique": "header_analysis"
    }
  ]
}