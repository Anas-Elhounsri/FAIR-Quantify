{
  "application_domain": [
    {
      "confidence": 0.8464932236984264,
      "result": {
        "type": "String",
        "value": "Semantic web"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/lh3/bgt"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2015-05-02T04:38:40Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-05-28T01:08:24Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Flexible genotype query among 30,000+ samples whole-genome"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9946877350888927,
      "result": {
        "original_header": "<a name=\"others\"></a>Other genotype formats",
        "type": "Text_excerpt",
        "value": "* BGT vs [PBWT][pbwt]. BGT uses the same data structure as PBWT and is inspired\n  by PBWT. PBWT supports advanced query such as haplotype matching, phasing\n  and imputation, while BGT puts more emphasis on fast random access and data\n  retrieval. \n* BGT vs [BCF2][vcf]. BCF is more versatile. It is able to keep per-genotype\n  meta information (e.g. per-genotype read depth and genotype likelihood). BGT\n  is generally more efficient and times smaller. It scales better to many\n  samples. BGT also supports more flexible queries, although technically,\n  nothing prevents us from implementing similar functionalities on top of BCF. \n* BGT vs [GQT][gqt]. GQT should be much faster on traversing sites across whole\n  chromosomes without considering LD. It is however inefficient to retrieve\n  data in small regions or to get haplotype information due to its design.\n  For this reason, GQT is regarded as a complement to BCF or BGT, not a\n  replacement. On file size, GQT is usually larger than genotype-only BCF and\n  is thus larger than BGT.\n \n"
      },
      "source": "https://raw.githubusercontent.com/lh3/bgt/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9932302068986587,
      "result": {
        "original_header": "<a name=\"perf\"></a>Performance evaluation",
        "type": "Text_excerpt",
        "value": "On file sizes, the BGT database for HRC-r1 is 7.4GB (1GB=1024\\*1024\\*1024 bytes). In comparison,\nBCFv2 for the same data takes 65GB, GQT 93GB and PBWT 4.4GB. BGT and PBWT,\nwhich are based on the same data structure, are much more compact. BGT is\nlarger than PBWT primarily because BGT keeps an extra bit per haplotype to\ndistinguish reference and multi allele, and stores markers to enable fast\nrandom access. \n"
      },
      "source": "https://raw.githubusercontent.com/lh3/bgt/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/lh3/bgt/wiki"
      },
      "source": "https://raw.githubusercontent.com/lh3/bgt/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/lh3/bgt/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 10
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/lh3/bgt/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "lh3/bgt"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/lh3/bgt/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lh3/bgt/master/test.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Set up your web server",
        "parent_header": [
          "<a name=\"started\"></a>Getting Started"
        ],
        "type": "Text_excerpt",
        "value": "```sh\n# Compile the server; Go compiler required\nmake bgt-server\nGOMAXPROCS=4 ./bgt-server -d anno11-1M.fmf.gz 1kg11-1M.bgt 2> server.log &\ncurl -s '0.0.0.0:8000' | less -S  # help\ncurl -s '0.0.0.0:8000/?a=(impact==\"HIGH\")&s=(population==\"FIN\")&f=(AC>0)'\n```\n"
      },
      "source": "https://raw.githubusercontent.com/lh3/bgt/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "<a name=\"guide\"></a>Users' Guide",
        "type": "Text_excerpt",
        "value": "BGT is a compact file format for efficiently storing and querying whole-genome\ngenotypes of tens to hundreds of thousands of samples. It can be considered as\nan alternative to genotype-only BCFv2. BGT is more compact in size, more\nefficient to process, and more flexible on query.\n\nBGT comes with a command line tool and a web application which largely mirrors\nthe command line uses. The tool supports expressive and powerful query syntax.\nThe \"Getting Started\" section shows a few examples.\n"
      },
      "source": "https://raw.githubusercontent.com/lh3/bgt/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "<a name=\"model\"></a>1. Data model overview",
        "parent_header": [
          "<a name=\"guide\"></a>Users' Guide"
        ],
        "type": "Text_excerpt",
        "value": "BGT models a genotype data set as a matrix of genotypes with rows indexed by\nsite and columns by sample. Each BGT database keeps a genetype matrix and a\nsample annotation file. Site annotations are kept in a separate file which is\nintended to be shared across multiple BGT databases. This model is different\nfrom VCF in that VCF 1) keeps sample information in the header and 2) stores\nsite annotations in INFO along with genotypes which are not meant to be shared\nacross VCFs.\n"
      },
      "source": "https://raw.githubusercontent.com/lh3/bgt/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "<a name=\"import\"></a>2. Import",
        "parent_header": [
          "<a name=\"guide\"></a>Users' Guide"
        ],
        "type": "Text_excerpt",
        "value": "A BGT database always has a genotype matrix and sample names, which are\nacquired from VCF/BCF. Site annotations and sample phenotypes are optional but \nare recommended. Flexible meta data query is a distinguishing feature of BGT.\n"
      },
      "source": "https://raw.githubusercontent.com/lh3/bgt/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "<a name=\"igenotype\"></a>2.1 Import genotypes",
        "parent_header": [
          "<a name=\"guide\"></a>Users' Guide",
          "<a name=\"import\"></a>2. Import"
        ],
        "type": "Text_excerpt",
        "value": "```sh\n# Import BCFv2\nbgt import prefix.bgt in.bcf\n# Import VCF with \"##contig\" header lines\nbgt import -S prefix.bgt in.vcf.gz\n# Import VCF without \"##contig\" header lines\nbgt import -St ref.fa.fai prefix.bgt in.vcf.gz\n```\nDuring import, BGT separates multiple alleles on one VCF line. It discards all\nINFO fields and FORMAT fields except GT. See section 2.3 about how to use\nvariant annotations with BGT.\n"
      },
      "source": "https://raw.githubusercontent.com/lh3/bgt/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "<a name=\"iphenotype\"></a>2.2 Import sample phenotypes",
        "parent_header": [
          "<a name=\"guide\"></a>Users' Guide",
          "<a name=\"import\"></a>2. Import"
        ],
        "type": "Text_excerpt",
        "value": "After importing VCF/BCF, BGT generates `prefix.bgt.spl` text file, which for\nnow only has one column of sample names. You can add pheotype data to this file\nin a format like (fields TAB-delimited):\n```\nsample1   gender:Z:M    height:f:1.73     region:Z:WestEurasia     foo:i:10\nsample2   gender:Z:F    height:f:1.64     region:Z:WestEurasia     bar:i:20\n```\nwhere each meta annotation takes a format `key:type:value` with `type` being\n`Z` for a string, `f` for a real number and `i` for an integer. We call this\nformat Flat Metadata Format or FMF in brief. You can get samples matching\ncertain conditions with:\n```sh\nbgt fmf prefix.bgt.spl 'height>1.7&&region==\"WestEurasia\"'\nbgt fmf prefix.bgt.spl 'mass/height**2>25&&region==\"WestEurasia\"'\n```\nYou can most common arithmetic and logical operators in the condition.\n"
      },
      "source": "https://raw.githubusercontent.com/lh3/bgt/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "<a name=\"isite\"></a>2.3 Import site annotations",
        "parent_header": [
          "<a name=\"guide\"></a>Users' Guide",
          "<a name=\"import\"></a>2. Import"
        ],
        "type": "Text_excerpt",
        "value": "Site annotations are also kept in a FMF file like:\n```\n11:209621:1:T  effect:Z:missense_variant   gene:Z:RIC8A  CCDS:Z:CCDS7690.1  CDSpos:i:347\n11:209706:1:T  effect:Z:synonymous_variant gene:Z:RIC8A  CCDS:Z:CCDS7690.1  CDSpos:i:432\n```\nWe provide a script `misc/vep2fmf.pl` to convert the VEP output with the\n`--pick` option to FMF.\n\nNote that due to an implementation limitation, we recommend to use a subset of\n\"important\" variants with BGT, for example:\n```sh\ngzip -dc vep-all.fmf.gz | grep -v \"effect:Z:MODIFIER\" | gzip > vep-important.fmf.gz\n```\nUsing the full set of variants is fine, but is much slower with the current\nimplementation.\n"
      },
      "source": "https://raw.githubusercontent.com/lh3/bgt/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "<a name=\"query\"></a>3. Query",
        "parent_header": [
          "<a name=\"guide\"></a>Users' Guide"
        ],
        "type": "Text_excerpt",
        "value": "A BGT query is composed of output and conditions. The output is VCF by default\nor can be a TAB-delimited table if requsted. Conditions include\ngenotype-independent site selection with option `-r` and `-a` (e.g. variants in\na region), genotype-independent sample selection with option `-s` (e.g. a list\nof samples), and genotype-dependent site selection with option `-f` (e.g.\nallele frequency among selected samples above a threshold). BGT has limited\nsupport of genotype-dependent sample selection (e.g. samples having an allele).\n\nBGT has an important concept \"sample group\". On the command line, each option\n`-s` creates a sample group. The #-th option `-s` populates a pair of `AC#` and\n`AN#` aggregate variables. These variables can be used in output or\ngenotype-dependent site selection.\n"
      },
      "source": "https://raw.githubusercontent.com/lh3/bgt/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "<a name=\"givs\"></a>3.1 Genotype-independent site selection",
        "parent_header": [
          "<a name=\"guide\"></a>Users' Guide",
          "<a name=\"query\"></a>3. Query"
        ],
        "type": "Text_excerpt",
        "value": "```sh\n# Select by a region\nbgt view -r 11:100,000-200,000 1kg11-1M.bgt > out.vcf\n# Select by regions in a BED (BGT will read through the entire BGT)\nbgt view -B regions.bed 1kg11-1M.bgt > out.vcf\n# Select a list of alleles (if on same chr, use random access)\nbgt view -a,11:151344:1:G,11:110992:AACTT:A,11:160513::G 1kg11-1M.bgt\n# Select by annotations (-d specifies the site annotation database)\nbgt view -d anno11-1M.fmf.gz -a'impact==\"HIGH\"' -CG 1kg11-1M.bgt\n```\nIt should be noted that in the last command line, BGT will read through the\nentire annotation file to find the list of matching alleles. It may take\nseveral minutes if the site annotation files contains 100 million lines.\nThat is why we recommend to use a subset of important alleles (section 2.3).\n"
      },
      "source": "https://raw.githubusercontent.com/lh3/bgt/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "<a name=\"giss\"></a>3.2 Genotype-independent sample selection",
        "parent_header": [
          "<a name=\"guide\"></a>Users' Guide",
          "<a name=\"query\"></a>3. Query"
        ],
        "type": "Text_excerpt",
        "value": "```sh\n# Select a list of samples\nbgt view -s,HG00171,HG00173 1kg11-1M.bgt\n# Select by phenotypes (see also section 2.2)\nbgt view -s'population==\"CEU\"' 1kg11-1M.bgt\n# Create sample groups (there will be AC1/AN1 and AC2/AN2 in VCF INFO)\nbgt view -s'population==\"CEU\"' -s'population==\"YRI\"' -G 1kg11-1M.bgt\n```\n"
      },
      "source": "https://raw.githubusercontent.com/lh3/bgt/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "<a name=\"gdvs\"></a>3.3 Genotype-dependent site selection",
        "parent_header": [
          "<a name=\"guide\"></a>Users' Guide",
          "<a name=\"query\"></a>3. Query"
        ],
        "type": "Text_excerpt",
        "value": "```sh\n# Select by allele frequency\nbgt view -f'AN>0&&AC/AN>.05' 1kg11-1M.bgt\n# Select by group frequnecy\nbgt view -s'population==\"CEU\"' -s'population==\"YRI\"' -f'AC1>10&&AC2==0' -G 1kg11-1M.bgt\n```\nOf course, we can mix all the three types of conditions in one command line:\n```sh\nbgt view -G -s'population==\"CEU\"' -s'population==\"YRI\"' -f'AC1/AN1>.1&&AC2==0' \\\n         -r 11:100,000-500,000 -d anno11-1M.fmf.gz -a'CDSpos>0' 1kg11-1M.bgt\n```\n"
      },
      "source": "https://raw.githubusercontent.com/lh3/bgt/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "<a name=\"tabout\"></a>3.4 Tabular output",
        "parent_header": [
          "<a name=\"guide\"></a>Users' Guide",
          "<a name=\"query\"></a>3. Query"
        ],
        "type": "Text_excerpt",
        "value": "```sh\n# Output position, sequence and allele counts\nbgt view -t CHROM,POS,REF,ALT,AC1,AC2 -s'population==\"CEU\"' -s'population==\"YRI\"' 1kg11-1M.bgt\n```\n"
      },
      "source": "https://raw.githubusercontent.com/lh3/bgt/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "<a name=\"miscout\"></a>3.5 Miscellaneous output",
        "parent_header": [
          "<a name=\"guide\"></a>Users' Guide",
          "<a name=\"query\"></a>3. Query"
        ],
        "type": "Text_excerpt",
        "value": "```sh\n# Get samples having a set of alleles (option -S)\nbgt view -S -a,11:151344:1:G,11:110992:AACTT:A,11:160513::G -s'population==\"CEU\"' 1kg11-1M.bgt\n# Count haplotypes\nbgt view -Hd anno11-1M.fmf.gz -a'gene==\"SIRT3\"' -f 'AC/AN>.01' 1kg11-1M.bgt\n# Count haplotypes in multiple populations\nbgt view -Hd anno11-1M.fmf.gz -a'gene==\"SIRT3\"' -f 'AC/AN>.01' \\\n         -s'region==\"Africa\"' -s'region==\"EastAsia\"' 1kg11-1M.bgt\n```\n"
      },
      "source": "https://raw.githubusercontent.com/lh3/bgt/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "<a name=\"server\"></a>4. BGT server",
        "parent_header": [
          "<a name=\"guide\"></a>Users' Guide"
        ],
        "type": "Text_excerpt",
        "value": "In addition to a command line tool, we also provide a prototype web application\nfor genotype query. The query syntax is similar to `bgt view` as is shown in\n\"Getting Started\", but with some notable differences:\n\n1. The server uses `.and.` for the logical AND operator `&&` (as `&` is a special character to HTML).\n2. The server can't load a list of samples from a local file (for security).\n3. The server doesn't support BCF output for now (can be implemented on request).\n4. The server doesn't output genotypes by default (option `g` required for server).\n5. The server loads site annotations into RAM (for real-time response but requiring more memory).\n6. By default (tunable), the server processes up to 10 million genotypes and then truncates the result.\n7. The server may forbid the output of genotypes of some samples (see below).\n"
      },
      "source": "https://raw.githubusercontent.com/lh3/bgt/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "<a name=\"privacy\"></a>4.1 Privacy",
        "parent_header": [
          "<a name=\"guide\"></a>Users' Guide",
          "<a name=\"server\"></a>4. BGT server"
        ],
        "type": "Text_excerpt",
        "value": "The BGT server implements a simple mechanism to keep the privacy of samples or\na subset of samples. It is controlled by a single parameter: minimal sample\ngroup size or MGS.  The server refuses to create a sample group if the size of\nthe group is smaller than the MGS of one of the samples in the group. In\nparticular, if MGS is above one, the server doesn't report sample name or\nsample genotypes.  Each sample may have a different MGS as is marked by the\n`_mgs` integer tag in `prefix.bgt.spl`. For samples without this tag, a\ndefault MGS is applied.\n"
      },
      "source": "https://raw.githubusercontent.com/lh3/bgt/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9999999998165237,
      "result": {
        "original_header": "<a name=\"perf\"></a>Performance evaluation",
        "type": "Text_excerpt",
        "value": "[hrc]: http://www.haplotype-reference-consortium.org\n[gqt]: https://github.com/ryanlayer/gqt\n[pbwt]: https://github.com/richarddurbin/pbwt\n[vcf]: https://samtools.github.io/hts-specs/\n \n"
      },
      "source": "https://raw.githubusercontent.com/lh3/bgt/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/lh3/bgt/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bioinformatics, genomics"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bgt"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "lh3"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 251443,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "TeX",
        "size": 78386,
        "type": "Programming_language",
        "value": "TeX"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Go",
        "size": 12956,
        "type": "Programming_language",
        "value": "Go"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "JavaScript",
        "size": 8444,
        "type": "Programming_language",
        "value": "JavaScript"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 1931,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "TSQL",
        "size": 1808,
        "type": "Programming_language",
        "value": "TSQL"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 1179,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 968,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lh3/bgt/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "lh3",
          "type": "User"
        },
        "date_created": "2015-06-28T20:04:49Z",
        "date_published": "2015-06-28T20:10:05Z",
        "description": "First public release\r\n",
        "html_url": "https://github.com/lh3/bgt/releases/tag/v1.0",
        "name": "BGT-1.0",
        "release_id": 1470745,
        "tag": "v1.0",
        "tarball_url": "https://api.github.com/repos/lh3/bgt/tarball/v1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/lh3/bgt/releases/1470745",
        "value": "https://api.github.com/repos/lh3/bgt/releases/1470745",
        "zipball_url": "https://api.github.com/repos/lh3/bgt/zipball/v1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Run BGT locally",
        "parent_header": [
          "<a name=\"started\"></a>Getting Started"
        ],
        "type": "Text_excerpt",
        "value": "```sh\n# Installation\ngit clone https://github.com/lh3/bgt.git\ncd bgt; make\n# Download demo BCF (1st 1Mbp of chr11 from 1000g), and convert to BGT\nwget -O- http://bit.ly/BGTdemo | tar xf -\n./bgt import 1kg11-1M.bgt 1kg11-1M.raw.bcf\ngzip -dc 1kg11-1M.raw.samples.gz > 1kg11-1M.bgt.spl  # sample meta data\n# Get all sample genotypes\n./bgt view -C 1kg11-1M.bgt | less -S\n# Get genotypes of HG00171 and HG00173 in region 11:100,000-200,000\n./bgt view -s,HG00171,HG00173 -f'AC>0' -r 11:100000-200000 1kg11-1M.bgt\n# Get alleles high-frequency in CEU but absent from YRI\n./bgt view -s'population==\"CEU\"' -s'population==\"YRI\"' -f'AC1/AN1>=0.1&&AC2==0' -G 1kg11-1M.bgt\n# Select high-impact sites (var annotation provided with -d)\n./bgt view -d anno11-1M.fmf.gz -a'impact==\"HIGH\"' -CG 1kg11-1M.bgt\n```\n"
      },
      "source": "https://raw.githubusercontent.com/lh3/bgt/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 09:46:43",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 96
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Connect to a public BGT server",
        "parent_header": [
          "<a name=\"started\"></a>Getting Started"
        ],
        "type": "Text_excerpt",
        "value": "```sh\ncurl -s 'http://bgtdemo.herokuapp.com/'\ncurl -s 'http://bgtdemo.herokuapp.com/?a=(impact==\"HIGH\")&s=(population==\"FIN\")&f=(AC>0)'\ncurl -s 'http://bgtdemo.herokuapp.com/?t=CHROM,POS,END,REF,ALT,AC/AN&f=(AC>1)&r=20'\n```\nFor the last query, the last line is \"*\", indicating the result is incomplete.\nNote that this web app is using Heroku's free tier. It is restricted to one CPU\nonly and put to sleep when the app is idle. There is an overhead of wakeup.\nHeroku also forces free apps to sleep for \"6 hours in a 24 hour period\". I\ndon't know how exactly this works.\n"
      },
      "source": "https://raw.githubusercontent.com/lh3/bgt/master/README.md",
      "technique": "header_analysis"
    }
  ]
}