{
  "application_domain": [
    {
      "confidence": 0.8021407635043397,
      "result": {
        "type": "String",
        "value": "Semantic web"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/PapenfussLab/bionix"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-08-31T06:07:46Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-11-01T03:09:23Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Functional highly reproducible bioinformatics pipelines"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9971960581616687,
      "result": {
        "original_header": "<img src=\"https://github.com/PapenfussLab/bionix/blob/assets/logo.png?raw=true\" width=\"350\" title=\"BioNix\">",
        "type": "Text_excerpt",
        "value": "BioNix is a tool for reproducible bioinformatics that unifies workflow\nengines, package managers, and containers. It is implemented as a\nlightweight library on top of the [Nix](https://nixos.org/nix/)\ndeployment system. \n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/bionix/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9976599979352758,
      "result": {
        "type": "Text_excerpt",
        "value": "BioNix is currently a work in progress, so documentation is sparse.\nPlease get in contact with us for more information, help, and\ncontributing (see bottom of this page). \n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/bionix/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9482054415404841,
      "result": {
        "original_header": "Examples",
        "type": "Text_excerpt",
        "value": "Several examples are available in `./examples/`. The main example is\npresented in `./examples/default.nix` and can be built using `nix build`\nin `./examples/`. This sample pipeline performs variant calling using\n[`platypus`](https://github.com/andyrimmer/Platypus), alignment using\n[`bwa mem`](https://github.com/lh3/bwa), and preprocessing using\n[`samtools`](http://www.htslib.org/). \nSee the documentation in `./examples/README.md` for more detail about\nthis pipeline and the other examples. \n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/bionix/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9538643856880786,
      "result": {
        "type": "Text_excerpt",
        "value": "- The pipeline itself is specified in `examples/call.nix` and\n  `examples/default.nix`.\n- The BioNix wrapper to run `platypus` is in\n  `tools/platypus-callVariants.nix`.\n- The Nix expression for the `platypus` software itself can be found in\n  [nixpkgs](https://github.com/NixOS/nixpkgs/blob/master/pkgs/applications/science/biology/platypus/default.nix). \n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/bionix/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8640135029145299,
      "result": {
        "original_header": "Constructing workflows",
        "type": "Text_excerpt",
        "value": "Writing workflows requires some familiarity with the Nix\nprogramming language and deployment system. Good introductions can be\nfound [here](https://learnxinyminutes.com/docs/nix/) and\n[here](https://github.com/tazjin/nix-1p). \nTo understand how to construct workflows it is recommended to study the\nexamples provided. Thanks to the flexibility of Nix, the workflows can\nbe constructed in different ways to suit the intended purposes and the\nexamples illustrate some of the ways one might approach various\nproblems. \n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/bionix/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9252621365038982,
      "result": {
        "original_header": "HPC execution",
        "type": "Text_excerpt",
        "value": "BioNix supports submission of jobs to computing queues rather than\ndirectly building them using the Nix build engine. The two supported\nengines are Slurm and PBS represented by the `slurm` and `qsub` entries\nin the root BioNix tree, which take an attribute set of default\nparameters to a new tree of tools. Simply use tools out of these trees\nto submit jobs, and specify resource requirements as ordinary\nconfiguration options to the tools. \n- *ppn*: The number of cores to request;\n- *mem*: The amount of memory to request (GB);\n- *walltime*: A string defining the maximum walltime. \n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/bionix/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8211261666266213,
      "result": {
        "type": "Text_excerpt",
        "value": "As we rely on side effects to submit jobs sandbox builds cannot be used\nand must be disabled (`--option sandbox false` with `nix-build` or\n`--no-sandbox` with `nix build`). \n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/bionix/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9054166189989956,
      "result": {
        "original_header": "Slurm specifics",
        "type": "Text_excerpt",
        "value": "Slurm jobs are submitted by executing the `salloc` binary on the\ncluster. By default this is assumed to be `/usr/bin/salloc`; if this is\nnot the case on your cluster then you need to additionally specify the\npath to salloc via the `salloc` parameter. \n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/bionix/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9532299216679518,
      "result": {
        "type": "Text_excerpt",
        "value": "When launching the build, it is important that the `TMPDIR`\nenvironment variable points to a location which is on shared storage\n(i.e., available from all nodes). This will be the location used for\ntemporary files during the execution of stages. \n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/bionix/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9682787859100246,
      "result": {
        "original_header": "PBS specifics",
        "type": "Text_excerpt",
        "value": "The PBS wrapper is considerably more complicated as initiating\ninteractive processes is not as reliable as Slurm's `salloc`.\nConsequently, jobs are submitted via non-interactive queue submissions\nand the queue polled to determine when the submitted job has completed. \n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/bionix/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9112508790157613,
      "result": {
        "type": "Text_excerpt",
        "value": "The path to the PBS executables (i.e., `qsub` and `qstat`) has to be\ngiven in the `qsubPath` attribute. Furthermore, a temporary directory\nthat's shared across all nodes must be specified in `tmpDir`. \nNix has support for distributing jobs amongst a collection of\ndistributed machines. See the\n[manual](https://nixos.org/nix/manual/#chap-distributed-builds) and\n[wiki](https://nixos.wiki/wiki/Distributed_build) for more information. \n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/bionix/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9503602392878295,
      "result": {
        "original_header": "Getting help and contributing",
        "type": "Text_excerpt",
        "value": "For general questions and reporting problem please open an issue. For real-time\nhelp there is a chat room at\n[#bionix:nixos.org](https://matrix.to/#/#bionix:nixos.org).\n \n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/bionix/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://nixos.wiki/wiki/Distributed_build"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/bionix/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/PapenfussLab/bionix/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 7
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/PapenfussLab/bionix/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PapenfussLab/bionix"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/bionix/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9361925497476193,
      "result": {
        "type": "Text_excerpt",
        "value": "<h1 align=\"center\"><img src=\"https://github.com/PapenfussLab/bionix/blob/assets/logo.png?raw=true\" width=\"350\" title=\"BioNix\"></h1> \n## Installation \n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/bionix/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999999999999432,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "BioNix requires no dependencies beyond [Nix](http://nixos.org/nix),\nwhich may be installed by:\n```{sh}\ncurl -L https://nixos.org/nix/install | sh\n```\nIf you do not have root access a variety of [rootless\ninstall](https://nixos.wiki/wiki/Nix_Installation_Guide#Installing_without_root_permissions)\noptions are available. \n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/bionix/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9225696917459296,
      "result": {
        "type": "Text_excerpt",
        "value": "API docs can be generated by executing `nix build` in the `doc`\ndirectory and viewing `result/OEBPS/index.html`. \n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/bionix/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.980061886211794,
      "result": {
        "original_header": "Examples",
        "type": "Text_excerpt",
        "value": "Several examples are available in `./examples/`. The main example is\npresented in `./examples/default.nix` and can be built using `nix build`\nin `./examples/`. This sample pipeline performs variant calling using\n[`platypus`](https://github.com/andyrimmer/Platypus), alignment using\n[`bwa mem`](https://github.com/lh3/bwa), and preprocessing using\n[`samtools`](http://www.htslib.org/). \n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/bionix/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9937821172169785,
      "result": {
        "type": "Text_excerpt",
        "value": "As we rely on side effects to submit jobs sandbox builds cannot be used\nand must be disabled (`--option sandbox false` with `nix-build` or\n`--no-sandbox` with `nix build`). \n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/bionix/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9998269134848983,
      "result": {
        "original_header": "Slurm specifics",
        "type": "Text_excerpt",
        "value": "Slurm jobs are submitted by executing the `salloc` binary on the\ncluster. By default this is assumed to be `/usr/bin/salloc`; if this is\nnot the case on your cluster then you need to additionally specify the\npath to salloc via the `salloc` parameter. \n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/bionix/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.999424549018833,
      "result": {
        "type": "Text_excerpt",
        "value": "When launching the build, it is important that the `TMPDIR`\nenvironment variable points to a location which is on shared storage\n(i.e., available from all nodes). This will be the location used for\ntemporary files during the execution of stages. \n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/bionix/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8565317517320893,
      "result": {
        "type": "Text_excerpt",
        "value": "## Examples \n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/bionix/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/PapenfussLab/bionix/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "BSD 3-Clause \"New\" or \"Revised\" License",
        "spdx_id": "BSD-3-Clause",
        "type": "License",
        "url": "https://api.github.com/licenses/bsd-3-clause",
        "value": "https://api.github.com/licenses/bsd-3-clause"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Copyright 2018-2022 Justin Bed\u0151, Leon Di Stefano, Tony Papenfuss\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/bionix/master/LICENCE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/PapenfussLab/bionix/assets/logo.png?raw=true"
      },
      "source": "https://raw.githubusercontent.com/PapenfussLab/bionix/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bionix"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "PapenfussLab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Nix",
        "size": 138054,
        "type": "Programming_language",
        "value": "Nix"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Zig",
        "size": 1790,
        "type": "Programming_language",
        "value": "Zig"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/PapenfussLab/bionix/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 06:39:21",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 78
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "non-software"
      },
      "technique": "software_type_heuristics"
    }
  ]
}