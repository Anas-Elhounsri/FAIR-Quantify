{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/gersteinlab/LESSeq"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2014-01-18T00:15:54Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-09-15T03:04:40Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Local Event-based analysis of alternative Splicing using RNA-Seq"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9894780755914493,
      "result": {
        "original_header": "LESSeq",
        "type": "Text_excerpt",
        "value": "Local event-based analysis of alternative splicing using RNA-Seq data\n \n"
      },
      "source": "https://raw.githubusercontent.com/gersteinlab/LESSeq/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9975479835760597,
      "result": {
        "original_header": "Overview",
        "type": "Text_excerpt",
        "value": "The Local Event-based analysis of alternative Splicing using RNA-Seq (or LESSeq) is a Linux-based processing pipeline for analyzing alternative splicing events from RNA-Seq data.\n \n"
      },
      "source": "https://raw.githubusercontent.com/gersteinlab/LESSeq/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/gersteinlab/LESSeq/wiki"
      },
      "source": "https://raw.githubusercontent.com/gersteinlab/LESSeq/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/gersteinlab/LESSeq/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/gersteinlab/LESSeq/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "gersteinlab/LESSeq"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "LESSeq"
      },
      "source": "https://raw.githubusercontent.com/gersteinlab/LESSeq/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation guide",
        "parent_header": [
          "LESSeq"
        ],
        "type": "Text_excerpt",
        "value": "Either download the package by clicking the \"Clone or download\" button, unzipping file in desired location, and renaming the directory \"LESSeq\" OR use the command line ``` git clone https://github.com/gersteinlab/LESSeq ```.\n\nAdd the following lines to your ~/.bashrc (without quotations):\n\n1. \"export LD_LIBRARY_PATH=PATH_TO_PACKAGE/gsl/lib/:PATH_TO_PACKAGE/cppunit/lib/\"\n2. \"export PATH=PATH_TO_PACKAGE/bin/:$PATH\"\n     \nWhere PATH_TO_PACKAGE is the absolute path to the LESSeq/ folder.\n"
      },
      "source": "https://raw.githubusercontent.com/gersteinlab/LESSeq/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "From pre-compiled executables",
        "parent_header": [
          "LESSeq",
          "Installation guide"
        ],
        "type": "Text_excerpt",
        "value": "All C++ executables and R scripts required to run the LESSeq pipeline are found within LESSeq/bin/ folder.\n"
      },
      "source": "https://raw.githubusercontent.com/gersteinlab/LESSeq/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Compile from source",
        "parent_header": [
          "LESSeq",
          "Installation guide"
        ],
        "type": "Text_excerpt",
        "value": "From the command line, enter the following commands:\n\n1. ``` cd LESSeq/classify/ ```\n2. ``` make ```\n\nRepeat for LESSeq/count/ (steps 3-4) and LESSeq/solve/ (5-6) folders. Then move all executables to the LESSeq/bin folder:\n\n7. ``` cd LESSeq/ ```\n8. ``` mv classify/bin/* bin/ ``` \n\nRepeat for LESSeq/count/bin/ (steps 9-10) and LESSeq/solve/bin/ (11-12) folders.\n"
      },
      "source": "https://raw.githubusercontent.com/gersteinlab/LESSeq/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "C++ Boost library",
        "parent_header": [
          "LESSeq",
          "Installation guide"
        ],
        "type": "Text_excerpt",
        "value": "Download and unpackaged the library in the LESSeq/ folder:\n\n1. ``` cd LESSeq/ ```\n2. ``` wget http://archive.gersteinlab.org/boost/boost_1_34_1.zip ```\n3. ``` unzip boost_1_34_1.zip ```\n\nFinally in your ~/.bashrc file, add the following lines (without quotations):\n\n1. \"export LD_LIBRARY_PATH= PATH_TO_PACKAGE/gsl/lib/:PATH_TO_PACKAGE/cppunit/lib/:PATH_TO_PACKAGE/boost_1_34_1/boost/\"\n2. \"export PATH=PATH_TO_PACKAGE/bin/:$PATH\"\n\nWhere PATH_TO_PACKAGE is the absolute path to the LESSeq/ folder.\n\nThen re-login or source your ~./bashrc file: ``` source ~/.bashrc ```\n"
      },
      "source": "https://raw.githubusercontent.com/gersteinlab/LESSeq/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/gersteinlab/LESSeq/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "The MIT License\n\nCopyright (c) 2019 Gerstein Lab, Mark B. Gerstein\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
      },
      "source": "https://raw.githubusercontent.com/gersteinlab/LESSeq/master/LICENSE.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License:",
        "parent_header": [
          "LESSeq"
        ],
        "type": "Text_excerpt",
        "value": "The MIT License\n\nCopyright (c) 2019 Gerstein Lab, Mark B. Gerstein\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/gersteinlab/LESSeq/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "LESSeq"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "gersteinlab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 796300,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 473464,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 16315,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "M4",
        "size": 8268,
        "type": "Programming_language",
        "value": "M4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Roff",
        "size": 8104,
        "type": "Programming_language",
        "value": "Roff"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 6612,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 2959,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/gersteinlab/LESSeq/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Software requirements",
        "parent_header": [
          "LESSeq"
        ],
        "type": "Text_excerpt",
        "value": "1. Linux with g++ compiler\n2. C++ Boost library: http://archive.gersteinlab.org/boost/\n3. R: [http://cran.us.r-project.org/](http://cran.us.r-project.org/)\n"
      },
      "source": "https://raw.githubusercontent.com/gersteinlab/LESSeq/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 01:57:23",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 7
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick start",
        "parent_header": [
          "LESSeq"
        ],
        "type": "Text_excerpt",
        "value": "Below are instructions to run the four major steps described in the LESSeq manuscript.\n"
      },
      "source": "https://raw.githubusercontent.com/gersteinlab/LESSeq/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 1 --- Refining gene models using RNA-Seq data",
        "parent_header": [
          "LESSeq",
          "Quick start"
        ],
        "type": "Text_excerpt",
        "value": "The computational pipeline `Cufflinks' is used in this step of LESSeq. The Cufflinks executable is included within the LESSeq/ folder, but can be replaced with other tools should the user prefer.\n\n   Cufflinks GitHub repo: [https://github.com/cole-trapnell-lab/cufflinks](https://github.com/cole-trapnell-lab/cufflinks)\n   \nCufflinks manual: [http://cufflinks.cbcb.umd.edu/](http://cufflinks.cbcb.umd.edu/)\n\nTo run Cufflinks, type the following in the terminal: \n``` cufflinks```\n\t "
      },
      "source": "https://raw.githubusercontent.com/gersteinlab/LESSeq/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 2 --- Identifying local events",
        "parent_header": [
          "LESSeq",
          "Quick start"
        ],
        "type": "Text_excerpt",
        "value": "To identify local alternative splicing events, type the following in the terminal:\n```\nclassify log_level proj_name out_prefix isoform_format g2i_format g2i_path gene_begin_idx gene_end_idx\npositional arguments:\n\t\tlog_level\t\t\tdetermines how much information to send to stdout while running\n\t\tproj_name\t\t\tthe name of the project given by the user\n\t\tout_prefix\t\t\tdirectory name for output files\n\t\tisoform_format\t\tfile format for each form of the local events\n\t\tisoforms_path\t\tpath to the isoform_format file\n\t\tg2i_format\t\t\tfile format for grouping local event forms\n\t\tg2i_path\t\t\tpath to the g2i_format file\n\t\tgene_begin_idx\t\tindex of the first local event to be quantified\n\t\tgene_end_idx \t\tindex of the last local event to be analyzed\n```\nNotes on positional arguments:\n1. ``` log_level ``` should be an integer (e.g., 0, 1, 2)\n2. ```out_prefix``` should already exist and string must include '/' at the end\n, and the current choice is LH_GENE_TXT (which is the same as \n3. ``` isoform_format ``` is used to specify the coordinates of different forms of local events (default value--- LH_GENE_TXT). LH_GENE_TXT is equivalent to the `interval' format define [here](http://info.gersteinlab.org/RSEQtools#Interval).\n4. ``` g2i_format ``` indicates which local event forms belong to the same local event (default value --- UCSC_GENE2ISOFORM). UCSC_GENE2ISOFORM is equivalent to the `knownIsoforms.txt' files [here](http://info.gersteinlab.org/RSEQtools#mergeTranscripts).\n read_format is the format of aligned reads, the current choice is MRF_SINGLE (single-end reads in MRF format [http://info.gersteinlab.org/RSEQtools#Mapped_Read_Format_.28MRF.29](http://info.gersteinlab.org/RSEQtools#Mapped_Read_Format_.28MRF.29))\n\n``` classify ``` generates splicing graphs for each gene.  \"Events.r\" can then be used to generate local events from the splicing graphs.\n\nThe output from this step are eight sets of annotation files for the eight local event types specified in the LESSeq manuscript:\n1. Skipped Exon (SE)\n2. Retained Intron (RI)\n3. Alternative 5' Splice Site (A5SS)\n4. Alternative 3' Splice Site (A3SS)\n5. Mutually eXclusive Exon (MXE) \n6. Alternative First Exon (AFE)\n7. Alternative Last Exon (ALE)\n8. Tandem 3' UTRs (T3)\n\nFor each local event type, two files are generated:\n1. LH_GENE_TXT (or `interval') formatted file containing the annotation information of local event forms\n2. UCSC_GENE2ISOFORM formatted file containing the grouping information of local event forms\n\nTwo executables are provided in the LESSeq/bin/ folder for generating the above two file formats from GTF/GFF files.\n1. ``` parseGencode``` converts a GTF/GFF file generated by ``` cufflinks ``` into the LH_GENE_TXT (or 'interval') annotation file format. Its usage is as follows:\n``` cat GTF/GFF_INPUT_FILE_NAME | parseGencode > OUTPUT_FILE_NAME.interval ``` \n2. ``` gencodeIsoformMap ``` converts the LH_GENE_TXT file to UCSC_GENE2ISOFORM grouping file format. Its usage is as follows:\n``` cut -f1 OUTPUT_FILE_NAME.interval | gencodeIsoformMap > OUTPUT_FILE_NAME.map``` \n "
      },
      "source": "https://raw.githubusercontent.com/gersteinlab/LESSeq/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 3 --- Counting reads compatible with alternative forms of local events and estimating their relative expression levels",
        "parent_header": [
          "LESSeq",
          "Quick start"
        ],
        "type": "Text_excerpt",
        "value": "The ``` count ``` command will associate raw read counts of reads compatible with alternative forms of local event.\n``` \ncount\npositional arguments:\n\tlog_level\t\t\t\tdetermines how much information to send to stdout while running\n\tproj_name\t\t\t\tthe name of the project given by the user\n\tout_prefix\t\t\t\tdirectory name for output files\n\tisoform_format\t\t\tfile format for each form of the local events\n\tisoforms_path\t\t\tpath to the isoform_format file\n\tg2i_format\t\t\t\tfile format for grouping local event forms\n\tg2i_path\t\t\t\tpath to the g2i_format file\n\tgene_begin_idx\t\t\tindex of the first local event to be quantified\n\tgene_end_idx \t\t\tindex of the last local event to be analyzed\n\tread_formats\t\t\tformat of aligned reads\n\tread_type\t\t\t\tthe type of reads\n\treads_paths\t\t\t\tpath to the read alignment file\n\texpected_read_lengths\tthe average read length\n```\nNotes on positional arguments:\n1. ``` read_format ``` default value --- MRF_SINGLE, which is the single-end reads in MRF format described [here](http://info.gersteinlab.org/RSEQtools#Mapped_Read_Format_.28MRF.29)\n2. ``` read_type ``` default value --- SHORT_READ\n\nThe output of ``` count ``` is a four column table, where columns are as follows:\n1. grouping ID of local events\n2. total number of reads mapped to a local event column\n3. ID of a specific form of a local event column\n4. number of reads compatible with the specific form of local event\n\nUsing the ``` solve ``` command will estimate the relative expression levels.\n```\nsolve\npositional arguments:\n\tlog_level\t\t\t\tdetermines how much information to send to stdout while running\n\tproj_name\t\t\t\tthe name of the project given by the user\n\tout_prefix\t\t\t\tdirectory name for output files\n\tisoform_format\t\t\tfile format for each form of the local events\n\tisoforms_path\t\t\tpath to the isoform_format file\n\tg2i_format\t\t\t\tfile format for grouping local event forms\n\tg2i_path\t\t\t\tpath to the g2i_format file\n\tgene_begin_idx\t\t\tindex of the first local event to be quantified\n\tgene_end_idx \t\t\tindex of the last local event to be analyzed\n\tread_formats\t\t\tformat of aligned reads\n\tread_type\t\t\t\tthe type of reads\n\treads_paths\t\t\t\tpath to the read alignment file\n\texpected_read_lengths\tthe average read length\n\ttotal_read_bases\t\tthe total number of bases in the alignment file\n```\n\nThe output of ```solve``` is a six column table, where columns are as follows:\n1. grouping ID of local events\n2. total number of reads mapped to a local event\n3. ID for a specific form of a local event\n4. relative expression level for the specific form of a local event\n5. Reads Per Kilobase Million (RPKM) value for the specific form of a local event\n6. log likelihood statistic of estimation method\n\n\nFor both ```count``` and ```solve``` commands, output will be printed to standard output (stdout), but can be directed to a file using '>':\n```count arguments > count_output.txt```\n"
      },
      "source": "https://raw.githubusercontent.com/gersteinlab/LESSeq/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 4 --- Test differential alternative splicing events",
        "parent_header": [
          "LESSeq",
          "Quick start"
        ],
        "type": "Text_excerpt",
        "value": "Multiple R packages are required to run the log-linear model method found in the LESSeq/bin/Test_AS.r R script:\n\n1. [epicalc](https://cran.r-project.org/src/contrib/Archive/epicalc/)\n2. [lmtest](https://cran.r-project.org/web/packages/lmtest/index.html)\n3. [MASS](https://cran.r-project.org/web/packages/MASS/MASS.pdf)\n4. [multtest](https://www.bioconductor.org/packages/release/bioc/html/multtest.html)\n5. [xtable](https://cran.r-project.org/web/packages/xtable/xtable.pdf)\n\nTo run LESSeq/bin/Test_AS.r:\n\n``` Rscript LESSeq/bin/Test_AS.r ```\n"
      },
      "source": "https://raw.githubusercontent.com/gersteinlab/LESSeq/master/README.md",
      "technique": "header_analysis"
    }
  ]
}