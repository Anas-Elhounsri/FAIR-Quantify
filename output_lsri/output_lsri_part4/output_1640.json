{
  "application_domain": [
    {
      "confidence": 33.91,
      "result": {
        "type": "String",
        "value": "Natural Language Processing"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "References",
        "type": "Text_excerpt",
        "value": "[1] Shuicheng Yan, Dong Xu, Qiang Yang, Lei Zhang, Xiaoou Tang and Hong-Jiang Zhang, \"Discriminant analysis with tensor representation,\" 2005 IEEE Computer Society Conference on Computer Vision and Pattern Recognition (CVPR'05), 2005, pp. 526-532 vol. 1.\ndoi: 10.1109/CVPR.2005.131\n\n[2] Q. Li and D. Schonfeld, \"Multilinear Discriminant Analysis for Higher-Order Tensor Data Classification,\" in IEEE Transactions on Pattern Analysis and Machine Intelligence, vol. 36, no. 12, pp. 2524-2537, Dec. 1 2014.\ndoi: 10.1109/TPAMI.2014.2342214\n\n[3] Fr\u00f8lich, L., Andersen, T. & M\u00f8rup, M. Rigorous optimisation of multilinear discriminant analysis with Tucker and PARAFAC structures. BMC Bioinformatics 19, 197 (2018) doi:10.1186/s12859-018-2188-0 (https://rdcu.be/bWwIL)\n\n[4] Phan A. H, Cichocki A. Tensor decompositions for feature extraction and classification of high dimensional datasets. Nonlinear Theory Appl IEICE. 2010; 1(1):37\u201368\n\n[5] Decomposition and classification of electroencephalography data. / Fr\u00f8lich, Laura.\nKgs. Lyngby : Technical University of Denmark, 2016. 208 p. (DTU Compute PHD-2016; No. 408). (https://orbit.dtu.dk/en/publications/decomposition-and-classification-of-electroencephalography-data(35de6ca8-d5a6-467b-88d9-a0d97bbe4685)/export.html)\n\n[6] M. Dyrholm, C. Christoforou, and L. C. Parra, \u201cBilinear discriminant component analysis,\u201d The Journal of Machine Learning Research, vol. 8, pp. 1097\u20131111, 2007."
      },
      "source": "https://raw.githubusercontent.com/laurafroelich/tensor_classification/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/laurafroelich/tensor_classification"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-02-24T08:36:49Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-08-02T06:44:45Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Code for tensor classification."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9938313274968683,
      "result": {
        "original_header": "Purpose",
        "type": "Text_excerpt",
        "value": "This repository contains code for classifying tensors using different tensor projection and classification methods. Most of the implementations support tensors with arbitrarily many modes. \nIn particular, implementations of four novel methods, described in \"Rigorous optimisation of multilinear discriminant analysis with Tucker and PARAFAC structures\" [3], are included. \nCurrently, the implementations are in Matlab code. The long term plan is to translate the code to other languages such as Python, R, Scala, and possibly others, and also to support tensors with arbitrarily many modes for all methods. I would be more than happy to review pull requests towards this goal. \n"
      },
      "source": "https://raw.githubusercontent.com/laurafroelich/tensor_classification/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.943317166076882,
      "result": {
        "original_header": "Methods",
        "type": "Text_excerpt",
        "value": "\nThe projection methods find optimal projections that separate observations from different classes maximally. Hence the projection matrices found by the projection methods can be used to project each higher-order observation into a smaller space, and its values in that space can be used for classification. \nThe direct classification methods perform projection and classification in one step, by evaluating an expression similar to that in logistic regression, but using tensor multiplication to arrive at a scalar value in the exponents. For the direct classification methods, we have only implemented versions that work for matrix observations.\n \n"
      },
      "source": "https://raw.githubusercontent.com/laurafroelich/tensor_classification/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9715586732494248,
      "result": {
        "original_header": "Projection methods that optimise all modes at once by leveraging manifold optimisation",
        "type": "Text_excerpt",
        "value": "We propose four ways to optimise a projection over a manifold in [3]. Two of the methods assume the Tucker structure and two of the methods assume the PARAFAC structure for interactions between modes. Furthermore, two of the methods optimise a ratio of two traces whereas the other two methods optimise the trace of the ratio of two matrices. For further details see [3] or [5].\n \n"
      },
      "source": "https://raw.githubusercontent.com/laurafroelich/tensor_classification/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.984520499564508,
      "result": {
        "original_header": "Direct classification methods",
        "type": "Text_excerpt",
        "value": "* Bilinear discriminant component analysis [6] (BDCA, PARAFAC structure)\n* BDCA with Tucker structure, as described in [3] and [5]\n \n"
      },
      "source": "https://raw.githubusercontent.com/laurafroelich/tensor_classification/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9159206382303421,
      "result": {
        "original_header": "Implementations",
        "type": "Text_excerpt",
        "value": "For more details on implementation in different languages, please see the README.md file located in each language folder.\n \n"
      },
      "source": "https://raw.githubusercontent.com/laurafroelich/tensor_classification/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/laurafroelich/tensor_classification/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/laurafroelich/tensor_classification/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "laurafroelich/tensor_classification"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Purpose"
      },
      "source": "https://raw.githubusercontent.com/laurafroelich/tensor_classification/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/laurafroelich/tensor_classification/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "classification, cmda, dater, dgtda, tensor"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2018 Laura Froelich\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/laurafroelich/tensor_classification/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "tensor_classification"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "laurafroelich"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "MATLAB",
        "size": 143112,
        "type": "Programming_language",
        "value": "MATLAB"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 12953,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/laurafroelich/tensor_classification/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "laurafroelich",
          "type": "User"
        },
        "date_created": "2019-08-10T15:58:21Z",
        "date_published": "2019-08-20T06:23:28Z",
        "html_url": "https://github.com/laurafroelich/tensor_classification/releases/tag/0.0.1",
        "name": "Preliminary generalisation of most methods",
        "release_id": 19395498,
        "tag": "0.0.1",
        "tarball_url": "https://api.github.com/repos/laurafroelich/tensor_classification/tarball/0.0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/laurafroelich/tensor_classification/releases/19395498",
        "value": "https://api.github.com/repos/laurafroelich/tensor_classification/releases/19395498",
        "zipball_url": "https://api.github.com/repos/laurafroelich/tensor_classification/zipball/0.0.1"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "installation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 07:48:00",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 13
      },
      "technique": "GitHub_API"
    }
  ]
}