{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/OrensteinLab/DeCoDe"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-06-11T17:26:58Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-09-19T22:04:25Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Degenerate Codon Design"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9830862941153378,
      "result": {
        "original_header": "Interpreting output:",
        "type": "Text_excerpt",
        "value": "- `solution_optimal` - Whether the found solution is optimal.\n- `fixed_positions` - All positions and residue identities fixed across the set of target sequences.\n- `variable_positions` - All positions that vary across the target set.\n- `sequences` - All of the target sequences.\n- `coverage` - Whether the corresponding target in `sequences` is covered by the produced library.\n- `n_var_pos` - Total number of variable positions in the aligned sequences.\n- `n_covered` - Total number of full length target sequences covered by the library (= `sum(coverage)`).\n- `total_lib_size` - Total produced library size.\n- `on_target_p` - Fraction of the produced library that covers a target sequence (= `n_covered / total_lib_size`)\n- `parsed_lib` - A list of the individual sublibraries. Each list contains the one letter code of the amino acid at that position if the position is fixed in the designed library. If the position is variable and DeCoDe has allocated a degenerate codon for the given position, the output key will include a `/`-separated list of the covered amino acids and a list of all equivalent degenerate codons from which the user can choose a codon to employ in the finished library.\n- `construct_time` - The total time (in seconds) for CVXPY to construct the problem and hand it off to the Gurobi solver.\n- `solve_time` - Total time for Gurobi to solve the design problem.\n- `total_time` - Total time = `construct_time` + `solve_time`.\n \n"
      },
      "source": "https://raw.githubusercontent.com/OrensteinLab/DeCoDe/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/OrensteinLab/DeCoDe/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OrensteinLab/DeCoDe/master/ILP_formulation.ipynb"
      },
      "source": "https://raw.githubusercontent.com/OrensteinLab/DeCoDe/master/ILP_formulation.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/OrensteinLab/DeCoDe/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "OrensteinLab/DeCoDe"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DeCoDe: degenerate codon design for complete protein-coding DNA libraries"
      },
      "source": "https://raw.githubusercontent.com/OrensteinLab/DeCoDe/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Setup",
        "parent_header": [
          "DeCoDe: degenerate codon design for complete protein-coding DNA libraries"
        ],
        "type": "Text_excerpt",
        "value": "1. Follow the directions to install Gurobi outlined [here](https://www.gurobi.com/documentation/8.1/quickstart_mac/the_gurobi_python_interfac.html). If appropriate, [request an academic license](https://www.gurobi.com/documentation/8.1/quickstart_linux/obtaining_a_gurobi_license.html).\n2. Clone this directory: `git clone https://github.com/OrensteinLab/DeCoDe.git`\n3. Change into the cloned directory: `cd DeCoDe`\n4. If you would like to run DeCoDe under a time constraint, install the local version of `CVXPY` found in this directory:\n```bash\ncd cvxpy\npip install .\n```\n5. Change back into the parent directory: `cd ..`\n6. Run `pip install -r requirements.txt` to install all remaining requirements.\n"
      },
      "source": "https://raw.githubusercontent.com/OrensteinLab/DeCoDe/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Testing your setup",
        "parent_header": [
          "DeCoDe: degenerate codon design for complete protein-coding DNA libraries"
        ],
        "type": "Text_excerpt",
        "value": "To test your setup, you can run the following command which will optimize the small example library found in Figure 1B of the paper describing DeCoDe:\n\n```\npython decode.py --limit 6 \\\n    --sublib 1 \\\n    --threads 10 \\\n    examples/fig1/6o_test-3.aln \\\n    test.json\n```\n\nProper output will look something like this:\n\n```\nReading MSA file...\nRemoving fixed positions...\n\nLibrary size limit:\t\t6\nSublibrary count limit:\t\t1\nNumber of targets:\t\t6\nNumber of variable positions:\t5\n\nUsing exact library size.\n\nAcademic license - for non-commercial use only\nParameter OutputFlag unchanged\n   Value: 1  Min: 0  Max: 1  Default: 1\nChanged value of parameter QCPDual to 1\n   Prev: 0  Min: 0  Max: 1  Default: 0\nChanged value of parameter Threads to 10\n   Prev: 0  Min: 0  Max: 1024  Default: 0\nOptimize a model with 30 rows, 4217 columns and 25398 nonzeros\nVariable types: 0 continuous, 4217 integer (4217 binary)\nCoefficient statistics:\n  Matrix range     [7e-01, 5e+00]\n  Objective range  [1e+00, 1e+00]\n  Bounds range     [1e+00, 1e+00]\n  RHS range        [1e+00, 5e+00]\nFound heuristic solution: objective 0.0000000\nPresolve removed 18 rows and 4194 columns\nPresolve time: 0.01s\nPresolved: 12 rows, 23 columns, 86 nonzeros\nVariable types: 0 continuous, 23 integer (23 binary)\n\nRoot relaxation: objective -4.600000e+00, 21 iterations, 0.00 seconds\n\n    Nodes    |    Current Node    |     Objective Bounds      |     Work\n Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time\n\n     0     0   -4.60000    0    3    0.00000   -4.60000      -     -    0s\nH    0     0                      -3.0000000   -4.60000  53.3%     -    0s\n     0     0     cutoff    0        -3.00000   -3.00000  0.00%     -    0s\n\nCutting planes:\n  Gomory: 2\n  StrongCG: 1\n  GUB cover: 3\n\nExplored 1 nodes (32 simplex iterations) in 0.01 seconds\nThread count was 10 (of 40 available processors)\n\nSolution count 2: -3 0\n\nOptimal solution found (tolerance 1.00e-04)\nBest objective -3.000000000000e+00, best bound -3.000000000000e+00, gap 0.0000%\n\nNumber of covered targets:\t3\nTotal library size:\t\t6\nProbability on target:\t\t0.50000\n\nWriting output...\n```\n"
      },
      "source": "https://raw.githubusercontent.com/OrensteinLab/DeCoDe/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9996932007781733,
      "result": {
        "original_header": "Interpreting output:",
        "type": "Text_excerpt",
        "value": "Below is the output file (`test.json`) from the following command:\n```\npython decode.py --limit 6 \\\n    --sublib 1 \\\n    --threads 10 \\\n    examples/fig1/6o_test-3.aln \\\n    test.json\n```\nOutput:\n```\n{\n    \"solution_optimal\": true,\n    \"fixed_positions\": {\n        \"0\": \"D\",\n        \"1\": \"G\",\n        \"2\": \"D\",\n        \"4\": \"N\",\n        \"6\": \"H\",\n        \"8\": \"F\",\n        \"10\": \"V\",\n        \"12\": \"G\",\n        \"13\": \"E\"\n    },\n    \"variable_positions\": [\n        3,\n        5,\n        7,\n        9,\n        11\n    ],\n    \"sequences\": [\n        \"VGKSS\",\n        \"VVKSS\",\n        \"VARSS\",\n        \"AGKSS\",\n        \"AV-TT\",\n        \"AA-TT\"\n    ],\n    \"coverage\": [\n        1.0,\n        1.0,\n        0.0,\n        1.0,\n        0.0,\n        0.0\n    ],\n    \"n_var_pos\": 5,\n    \"n_covered\": 3,\n    \"total_lib_size\": 6,\n    \"on_target_p\": 0.5,\n    \"parsed_lib\": [\n        [\n            \"D\",\n            \"G\",\n            \"D\",\n            {\n                \"A/V\": [\n                    \"GYA\",\n                    \"GYC\",\n                    \"GYG\",\n                    \"GYT\"\n                ]\n            },\n            \"N\",\n            {\n                \"A/G/V\": [\n                    \"GBA\",\n                    \"GBC\",\n                    \"GBG\",\n                    \"GBT\"\n                ]\n            },\n            \"H\",\n            \"K\",\n            \"F\",\n            \"S\",\n            \"V\",\n            \"S\",\n            \"G\",\n            \"E\"\n        ]\n    ],\n    \"construct_time\": 0.16756463050842285,\n    \"solve_time\": 0.011950969696044922,\n    \"total_time\": 0.17951560020446777\n}\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/OrensteinLab/DeCoDe/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.9291430237863828,
      "result": {
        "original_header": "Interpreting output:",
        "type": "Text_excerpt",
        "value": "Below is the output file (`test.json`) from the following command:\n```\npython decode.py --limit 6 \\\n    --sublib 1 \\\n    --threads 10 \\\n    examples/fig1/6o_test-3.aln \\\n    test.json\n```\nOutput:\n```\n{\n    \"solution_optimal\": true,\n    \"fixed_positions\": {\n        \"0\": \"D\",\n        \"1\": \"G\",\n        \"2\": \"D\",\n        \"4\": \"N\",\n        \"6\": \"H\",\n        \"8\": \"F\",\n        \"10\": \"V\",\n        \"12\": \"G\",\n        \"13\": \"E\"\n    },\n    \"variable_positions\": [\n        3,\n        5,\n        7,\n        9,\n        11\n    ],\n    \"sequences\": [\n        \"VGKSS\",\n        \"VVKSS\",\n        \"VARSS\",\n        \"AGKSS\",\n        \"AV-TT\",\n        \"AA-TT\"\n    ],\n    \"coverage\": [\n        1.0,\n        1.0,\n        0.0,\n        1.0,\n        0.0,\n        0.0\n    ],\n    \"n_var_pos\": 5,\n    \"n_covered\": 3,\n    \"total_lib_size\": 6,\n    \"on_target_p\": 0.5,\n    \"parsed_lib\": [\n        [\n            \"D\",\n            \"G\",\n            \"D\",\n            {\n                \"A/V\": [\n                    \"GYA\",\n                    \"GYC\",\n                    \"GYG\",\n                    \"GYT\"\n                ]\n            },\n            \"N\",\n            {\n                \"A/G/V\": [\n                    \"GBA\",\n                    \"GBC\",\n                    \"GBG\",\n                    \"GBT\"\n                ]\n            },\n            \"H\",\n            \"K\",\n            \"F\",\n            \"S\",\n            \"V\",\n            \"S\",\n            \"G\",\n            \"E\"\n        ]\n    ],\n    \"construct_time\": 0.16756463050842285,\n    \"solve_time\": 0.011950969696044922,\n    \"total_time\": 0.17951560020446777\n}\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/OrensteinLab/DeCoDe/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/OrensteinLab/DeCoDe/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2019 Orenstein Lab\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/OrensteinLab/DeCoDe/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DeCoDe"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "OrensteinLab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 43156,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 36478,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 11259,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OrensteinLab/DeCoDe/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirements",
        "parent_header": [
          "DeCoDe: degenerate codon design for complete protein-coding DNA libraries"
        ],
        "type": "Text_excerpt",
        "value": "DeCoDe requires Python 3.7 or higher.\n\nTo run DeCoDe, you will need a local installation of [Gurobi](http://www.gurobi.com/downloads/download-center) with an appropriate lisence (academic licenses are provided for free direct from Gurobi). You will also need to install [`gurobipy`](https://www.gurobi.com/documentation/8.1/quickstart_mac/the_gurobi_python_interfac.html) and make sure that you are able to import it from within your local environment.\n\nFinally, you will need the custom version of CVXPY included in this repository. Due to a [known issue](https://github.com/cvxgrp/cvxpy/issues/735), CVXPY does not currently directly support the use of time limits with the Gurobi solver. The custom CVXPY provided here patches this issue and can be installed by running `pip install .` from inside the subdirectory.\n"
      },
      "source": "https://raw.githubusercontent.com/OrensteinLab/DeCoDe/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running library designs in parallel",
        "parent_header": [
          "Interpreting output:"
        ],
        "type": "Text_excerpt",
        "value": "We can use [GNU `parallel`](https://www.gnu.org/software/parallel/) to design several libraries in parallel. These examples will generate all of the libraries for the demonstrations present in the manuscript.\n"
      },
      "source": "https://raw.githubusercontent.com/OrensteinLab/DeCoDe/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Run DeCoDe on the 200 1xbi Resetta-designed sequences",
        "parent_header": [
          "Interpreting output:",
          "Running library designs in parallel"
        ],
        "type": "Text_excerpt",
        "value": "```bash\nparallel --will-cite --lb \\\n    \"/usr/bin/time -v --output results/sl_comparison/ilp/1xbi_{1}_{2}.time \\\n    python decode.py --limit {1} --sublib {2} --time-limit 172800 \\\n    --threads 12 examples/rosetta/1xbi.aln results/sl_comparison/ilp/1xbi_{1}_{2}.json | \\\n    tee results/sl_comparison/ilp/1xbi_{1}_{2}.log\" \\\n    ::: 320000000 ::: 1 2\n```\n"
      },
      "source": "https://raw.githubusercontent.com/OrensteinLab/DeCoDe/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Run SwiftLib on the 200 1xbi Resetta-designed sequences",
        "parent_header": [
          "Interpreting output:",
          "Running library designs in parallel"
        ],
        "type": "Text_excerpt",
        "value": "```bash\nparallel --will-cite --lb \\\n    \"/usr/bin/time -v --output results/sl_comparison/sl/1xbi_{1}_{2}.time \\\n    python run_SwiftLib.py --limit {1} --sublib {2}\" \\\n    ::: 320000000 ::: 1 2\n```\n"
      },
      "source": "https://raw.githubusercontent.com/OrensteinLab/DeCoDe/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Run DeCoDe on the 239 amino acid-long GFP subset",
        "parent_header": [
          "Interpreting output:",
          "Running library designs in parallel"
        ],
        "type": "Text_excerpt",
        "value": "```bash\nparallel --will-cite --lb -j 3 \\\n    \"/usr/bin/time -v --output results/sl_comparison/ilp/gfp_239_{1}_{2}.time \\\n    python decode.py --limit {1} --sublib {2} --bins 100 --time-limit 172800 \\\n    --threads 12 examples/gfp/gfp_239.aln results/sl_comparison/ilp/gfp_239_{1}_{2}.json | \\\n    tee results/sl_comparison/ilp/gfp_239_{1}_{2}.log\" \\\n    ::: 100000 1000000 10000000 100000000 1000000000 ::: 1 2\n```\n"
      },
      "source": "https://raw.githubusercontent.com/OrensteinLab/DeCoDe/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Run SwiftLib on the 239 amino acid-long GFP subset",
        "parent_header": [
          "Interpreting output:",
          "Running library designs in parallel"
        ],
        "type": "Text_excerpt",
        "value": "```bash\nparallel --will-cite --lb \\\n    \"/usr/bin/time -v --output results/sl_comparison/sl/gfp_239_{1}_{2}.time \\\n    python run_SwiftLib.py --limit {1} --sublib {2}\" \\\n    ::: 100000 1000000 10000000 100000000 1000000000 ::: 1 2\n```\n"
      },
      "source": "https://raw.githubusercontent.com/OrensteinLab/DeCoDe/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Run DeCoDe on the full GFP with 10^7 library size limit",
        "parent_header": [
          "Interpreting output:",
          "Running library designs in parallel"
        ],
        "type": "Text_excerpt",
        "value": "```bash\nparallel --will-cite --lb -j 3 \\\n    \"/usr/bin/time -v --output results/multi_sublib/gfp_exclude_long_10000000_{1}.time \\\n    python decode.py --limit 10000000 --sublib {1} --bins 100 --time-limit 172800 \\\n    --threads 12 examples/gfp/gfp_exclude_long.aln \\\n    results/multi_sublib/gfp_exclude_long_10000000_{1}.json | \\\n    tee results/multi_sublib/gfp_exclude_long_10000000_{1}.log\" ::: 1 2 3 4 8 12\n```\n"
      },
      "source": "https://raw.githubusercontent.com/OrensteinLab/DeCoDe/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-11-04 02:36:23",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 12
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "type": "Text_excerpt",
        "value": "DeCoDe requires input sequences to be pre-aligned in the ClustalW format. To generate the the alignment file (`.aln`), you can use the Clustal Omega server found [here](https://www.ebi.ac.uk/Tools/msa/clustalo/) or through any other program that supports output to the ClustalW file format.\n\nChange into the DeCoDe directory and run the algorithm using a variant of the command below, replacing placeholders with your desired files where appropriate:\n\n```\npython decode.py \\\n\t--limit <library limit> \\\n\t--sublib <number of sublibraries> \\\n\t--bins <number of bins, if applicable> \\\n\t--time-limit <time limit, in seconds> \\\n\t--threads <number of threads for ILP solver parallelization> \\\n\t<input file>.aln \\\n\t<output file>.json\n```\n\nA full help page is available through the `python decode.py --help` command, the output of which is reproduced below:\n\n```\nUsage: decode.py [OPTIONS] ALIGNMENT_FILE OUTPUT_FILE\n\n  Optimize a degenerate codon library given a set of target sequences, a\n  total size limit, and a sublibrary count limit.\n\nOptions:\n  --limit INTEGER       Total library size limit.  [required]\n  --sublib INTEGER      Total sublibrary limit  [required]\n  --bins INTEGER        Specify the number of bins for approximation of multi-\n                        sublibrary optimizations.  [default: 100]\n  --time-limit INTEGER  Time limit in seconds for the ILP solver.  [default:\n                        0]\n  --threads INTEGER     Time limit in seconds for the ILP solver.  [default:\n                        0]\n  -q, --quiet           Run quietly.  [default: False]\n  --help                Show this message and exit.\n```\n"
      },
      "source": "https://raw.githubusercontent.com/OrensteinLab/DeCoDe/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Examples and results from the manuscript",
        "parent_header": [
          "Interpreting output:"
        ],
        "type": "Text_excerpt",
        "value": "All of the protein sequences used in the examples shown in the mauscript are available in the `examples` subdirectory of this repository. Additionally, the JSON files output by DeCoDe and SwiftLib that serve as the raw input for the manuscript's figures can be found in the `results` subdirectory. Finally the `.R` and Jupyter notebook scripts used to generate the majority of the main text and SI figures can be found in the `figures` subdirectory. \n"
      },
      "source": "https://raw.githubusercontent.com/OrensteinLab/DeCoDe/master/README.md",
      "technique": "header_analysis"
    }
  ]
}