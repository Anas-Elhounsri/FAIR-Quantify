{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/compomics/moFF"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2014-09-24T14:37:50Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-03T12:21:29Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": " A modest Feature Finder (moFF) to extract  MS1 intensities from Thermo raw file"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "parent_header": [
          "moFF"
        ],
        "type": "Text_excerpt",
        "value": "moFF is an OS independent tool designed to extract apex MS1 intensity using a set of identified MS2 peptides. It currently uses a Thermo library to directly extract data from Thermo Raw spectrum files, eliminating the need for conversions from other formats. Moreover, moFF also allows to work directly with mzML files.\n\nmoFF is built up from two  modules :\n- *moff_mbr.py* : match between run (mbr)\n- *moff.py*: apex intensity\n\nNOTE : Please use *moff_all.py* script to run the entire pipeline with both MBR and apex strategies.\n\nThe version presented here is a commandline tool that can easily be adapted to a cluster environment. A graphical user interface can be found [here](https://github.com/compomics/moff-gui). The latter is designed to be able to use [PeptideShaker](https://github.com/compomics/peptide-shaker) results as an input format. Please refer to the [moff-GUI](https://github.com/compomics/moff-gui) manual for more information on how to do this.\n\n[![install with bioconda](https://img.shields.io/badge/install%20with-bioconda-brightgreen.svg?style=flat-square)](http://bioconda.github.io/recipes/moff/README.html) \n\nmoFF is also available on bioconda. To install with conda, use the following command:\n```\nconda install -c bioconda moff\n```\nThis automatically installs all dependencies. Note that bioconda only supports 64-bit macOS and Linux.\n\n\n\n[Top of page](#moff)\n\n----\n"
      },
      "source": "https://raw.githubusercontent.com/compomics/moFF/master/README.txt",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9891653633536542,
      "result": {
        "original_header": "moFF Publication:",
        "type": "Text_excerpt",
        "value": "  * [Argentini et al. Nature Methods. 2016 12(13):964\u2013966](http://www.nature.com/nmeth/journal/v13/n12/full/nmeth.4075.html).\n  * If you use moFF as part of a publication, please include this reference. \n"
      },
      "source": "https://raw.githubusercontent.com/compomics/moFF/master/README.txt",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8118176215893501,
      "result": {
        "original_header": "Input Data",
        "type": "Text_excerpt",
        "value": "(a) The tab-delimited file must contain the following information for all the peptides:\n  - 'peptide' : peptide-spectrum-match  sequence\n  - 'prot' : protein ID \n  - 'mod_peptide' :  peptide-spectrum-match  sequence that contains also possible modification (i.e `NH2-M<Mox>LTKFESK-COOH` )\n  - 'rt': peptide-spectrum-match retention time  (i.e the retention time contained in the mgf file; The retention time must be specified in second)\n  - 'mz' : mass over charge\n  - 'mass' : mass of the peptide\n  - 'charge' : charge of the ionized peptide\n \nNOTE 1 : In case the tab-delimited file provided by the user contains fields that are not mentioned here (i.e petides length, search engines score) the algorithm will retain these in the final output. The peptide-spectrum-match sequence with its modications  and the protein id  and  informations are used only in the match-between-run module. \n"
      },
      "source": "https://raw.githubusercontent.com/compomics/moFF/master/README.txt",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9684431098686948,
      "result": {
        "original_header": "Sample data",
        "type": "Text_excerpt",
        "value": "The  *sample_folder* contains a result set for 3 runs of the CPTAC study 6 (Paulovich, MCP Proteomics, 2010).\nThese MS2 peptides are identified by X!Tandem and MSGF+ using SearchGUI and then processed by PeptidesShaker. The [raw files]( https://goo.gl/ukbpCI) for this study are required to apply moFF to the sample data. \n"
      },
      "source": "https://raw.githubusercontent.com/compomics/moFF/master/README.txt",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9663881693818497,
      "result": {
        "original_header": "Absence of Peak Sample Data",
        "type": "Text_excerpt",
        "value": "To evaluate the filtering of the matched peak, we provide a data set composed by 4 runs : \n"
      },
      "source": "https://raw.githubusercontent.com/compomics/moFF/master/README.txt",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.896187577609416,
      "result": {
        "original_header": "Apex intensity",
        "type": "Text_excerpt",
        "value": "use `python moff_all.py -mbr off `\n```\n  --loc_in                      the folder containing all input files\n  --raw_repo                    the folder containing all the raw files\n  --tsv_list                    the input file with for MS2 peptides\n  --raw_list                    pecify directly the  raw file\n  --tol                         mass tollerance (ppm)\n  --xic_length                  rt windows for xic (minutes). Default value is 3  min\n  --rt_peak_win                 time windows used to get the apex for the ms2 peptide/feature  (minutes). Default value is 1\n  --rt_peak_win_match           time windows used to get the apex for machted features (minutes). Default value is 1.2\n  --peptide_summary             flag that allows have as output the peptided summary intensity file. Default is disable(0)\n  --tag_pepsum                  tag string that will be part of the  peptided summary intensity file name. Default is moFF_run\n  --loc_out                     output folder\n  --tag_pepsum                  a tag that is used in the peptide summary file name\n\n  --match_filter                If set, filtering on the matched peak is activated. Default value: False\n  --ptm_file                    modification json ptm file. Default file ptm_setting.json\n  --quantile_thr_filtering      quantile value used to computed the filtering threshold for the matched peak . Default is 0.75\n  --sample_size                 percentage of MS2 identified peptides used to estimated the threshold\n``` \nIn case you want to run the apex module  on all the files in a folder (all so the raw files shold located in a foder) \nYou can activate the filtering of the matching peptides setting `--match_filter`. In order to do the filtering:\n- `--ptm_file` MUST be specified and input files MUST contain a matched field. \nThis option is useful in the case you have run the mbr module alone and later you want to run the apex module separately. \nWARNING :  in case of  --loc_in  and  --raw_repo  raw file names MUST be the same of the input file otherwise the script gives you an error ! \nWARNING 1  :  you can not mixed the two input ways ( --loc_in / --raw_repo and --tsv_list / --raw_list  ) otherwise the script gives you an error ! \nWARNING 2: mzML raw file MUST be only specified using `--tsv_list | --raw_list`. The `--raw_repo` option is not available for mzML files. \nNOTE: all the parameters related to the the time windows (xic_lentgh,rt_peak_win, rt_peak_win_match) are basicaly the half of the entire time windows where the apex peak is searched or the XiC is retrieved. For a correct rt windows, we suggest to set the **rt_peak_win** value equal or slighly greater to the __dynamic exclusion duration set in your machine.__\nWe suggest also to set the rt_peak_win_match  always slightly bigger than tha values used for rt_peak_win \n"
      },
      "source": "https://raw.githubusercontent.com/compomics/moFF/master/README.txt",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9016217302104084,
      "result": {
        "original_header": "Entire workflow",
        "type": "Text_excerpt",
        "value": "use `python moff_all.py -mbr on`\n```\n  --config_file                 specify a moFF parameter file\n  --loc_in                      the folder containing all input files\n  --raw_repo                    the folder containing all the raw files\n  --tsv_list                    the input file with for MS2 peptides\n  --raw_list                    pecify directly the  raw file\n\n  --sample                      reg exp to filter the input file names (only with --loc_in input option-\n  --ext                         file extention of the input file. Default .txt)\n  --log_label                   filename for the mbr log file. Default moFF_mbr\n  --w_filt                      width value for outlier filtering. Default 3\n  --out_flag                    if set, outliers for rt time allignment are filtered. Default value: True\n  --w_comb                      if set, RT model combination is weighted using traing model errors: Default value: False\n\n  --tol                        mass tollerance (ppm)\n  --xic_length                  rt windows for xic (minutes). Default value is 3  min\n  --rt_peak_win                 time windows used to get the apex for the ms2 peptide/feature  (minutes). Default value is 1\n  --rt_peak_win_match           time windows used to get the apex for machted features (minutes). Default value is 1.2\n  --peptide_summary             if set, export a peptide intesity summary tab-delited file. Default value: False\n  --tag_pepsum                  tag string that will be part of the  peptided summary intensity file name. Default value is moFF_run\n  --loc_out                     output folder  default is the input folder, raw_repo)\n   --tag_pepsum                  a tag that is used in the peptide summary file name\n\n  --match_filter                If set, filtering on the matched peak is activated. Default value: False\n  --ptm_file                    modification json ptm file. Default file ptm_setting.json\n  --quantile_thr_filtering      quantile value used to computed the filtering threshold for the matched peak . Default is 0.75\n  --sample_size                 percentage of MS2 identified peptides used to estimated the threshold\n``` \nLike for the apex module, you input  you input data specifing the folder : \nOR, specifing a list of input and raw files using: \nThe options are identical for both apex and MBR modules. The output for the latter (MBR) is stored in the folder sample_folder/mbr_output, while the former (apex) generates files in the specified output_moff folder.Log files for both algorithms are generated in the respective folders. \nIn case you activate the filtering of the mached peptides  you have to specify with `--ptm_file` a valid json file that describes the modificatiuon used in your experiment. See section \nYou can set all the parameters values in a file and load them using `--config_file`. For an example see `example_parameter_file.ini` \nWARNING: **mzML raw file  MUST be specified  using `--tsv_list | --raw_list`. The `--raw_repo` option is not available for mzML files. \nNOTE: The consideration of retention time window parameters (xic_length,rt_peak_win,rt_peak_win_match) mentioned for apex module are stil valid also for the entire workflow \n"
      },
      "source": "https://raw.githubusercontent.com/compomics/moFF/master/README.txt",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9370504094977053,
      "result": {
        "original_header": "Post Translation Modification file",
        "type": "Text_excerpt",
        "value": "- `\"tagModification\"` : the tag used in modified sequence for the modification\n- `\"deltaChem\":[H atom, C atom, N atom ,O atom]` : the delta of chemical composition if the modification. The order of the elements is fixed, so pay attention when you add your modification\n- `desc` : name of the modification and its unimod id. \nFor example a ptm file (ptm_setting_ps.json) with Carboxyamidomethylation of Cysteine and Oxidation for PeptideShaker output looks like:\n```\n{\n\"<cmm>\": {\"deltaChem\":[3,2,1,1],\"desc\":\"Carboxyamidomethylation C unimod:4\"},\n\"<ox>\": {\"deltaChem\":[0,0,0,1],\"desc\":\"oxidation oxidation unimod:35\" }\n}\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/compomics/moFF/master/README.txt",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9564522814128764,
      "result": {
        "original_header": "Output data",
        "type": "Text_excerpt",
        "value": "Parameter | Meaning\n--- | -------------- | \n*rt_peak* | retention time (in seconds) for the discovered apex peak\n*SNR*     | signal-to-noise ratio of the peak intensity.\n*log_L_R*'| peak shape. 0 indicates that the peak is centered. Positive or negative values are an indicator for respectively right or left skewness \n*intensity* |  MS1 intensity\n*log_int* | log2 transformed MS1 intensity \n*lwhm* | first rt value where the intensity is at least the 50% of the apex peak intensity on the left side\n*rwhm* | first rt value where the intensity is at least the 50% of the apex peak intensity on the right side\n*5p_noise* | 5th percentile of the intensity values contained in the XiC. This value is used for the *SNR* computation\n*10p_noise* |  10th percentile of the intensity values contained in the XiC.\n*code_unique* | this field is concatenation of the peptide sequence and mass values. It is used by moFF during the match-between-runs.\n*matched* | this value indicated if the featured has been added by the match-between-run (1) or is a ms2 identified features (0)  \n(d) The peptide summary intensity is a tab delimited file where for each peptide sequence MS1 intensities are summed for all the occurences in each run (aggregated by charge states and modification). \nIn case you run the entire workflow on an a settings that contains N runs, the size of the file (rows and columns) will be **M x (N+2)**, where M is number of peptides (across all the runs) and N are summed intensity columns plus the peptide sequence and the protein ids. In case of running only the apex module, the size of the file  will be on M x 3 (only one replicate is considered). \nIf a peptide is shared across several proteins, the protein column will also contains all the shared protein ids usually separed by _;_ or _,_.\nIn case a peptide is not quantified it has 0 as intensities. The peptide summary intensity could be used for downstream statistical analysis such as in MsQRob \n"
      },
      "source": "https://raw.githubusercontent.com/compomics/moFF/master/README.txt",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/compomics/moFF/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 11
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/compomics/moFF/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "compomics/moFF"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "moFF"
      },
      "source": "https://raw.githubusercontent.com/compomics/moFF/master/README.txt",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/compomics/moFF/master/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/compomics/moFF/master/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 0.9987883771437026,
      "result": {
        "original_header": "Input Data",
        "type": "Text_excerpt",
        "value": "NOTE 2 : Users can also provide the default PSM export provided by PeptideShaker as source material for moFF. \n"
      },
      "source": "https://raw.githubusercontent.com/compomics/moFF/master/README.txt",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9320701929326116,
      "result": {
        "original_header": "Absence of Peak Sample Data",
        "type": "Text_excerpt",
        "value": "To test the filter of the matched peak, you can follow the steps:\n- clone the moFF repository\n- download the .zip file that contains all Thermo raw file from [here](http://genesis.ugent.be/uvpublicdata//moFF_absence_of_peak_dataset/)\n- unzip it inside  the folder *absence_peak_data*\n- check the input/output paths in the *coinfiguration_iRT.ini* \nthen you an run moFF using: \n"
      },
      "source": "https://raw.githubusercontent.com/compomics/moFF/master/README.txt",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9073675550752881,
      "result": {
        "original_header": "Apex intensity",
        "type": "Text_excerpt",
        "value": "`python moff_all.py  --mbr off --tsv_list sample_folder/20080311_CPTAC6_07_6A005.txt  --raw_list sample_folder/20080311_CPTAC6_07_6A005.RAW --tol 1O --loc_out output_moff --peptide_summary  `\nin this case you specify more than a file separated by a blanck space \nIn case you want to run the apex module  on all the files in a folder (all so the raw files shold located in a foder) \n`python moff_all.py  --mbr on  --loc_in sample_folder/sample_data/  --raw_repo sample_folder/sample_data/your_raw_folder   --tol 1O --loc_out output_moff --peptide_summary  ` \nThis option is useful in the case you have run the mbr module alone and later you want to run the apex module separately. \nWARNING 2: mzML raw file MUST be only specified using `--tsv_list | --raw_list`. The `--raw_repo` option is not available for mzML files. \nNOTE: all the parameters related to the the time windows (xic_lentgh,rt_peak_win, rt_peak_win_match) are basicaly the half of the entire time windows where the apex peak is searched or the XiC is retrieved. For a correct rt windows, we suggest to set the **rt_peak_win** value equal or slighly greater to the __dynamic exclusion duration set in your machine.__\nWe suggest also to set the rt_peak_win_match  always slightly bigger than tha values used for rt_peak_win \n"
      },
      "source": "https://raw.githubusercontent.com/compomics/moFF/master/README.txt",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9833612087619699,
      "result": {
        "original_header": "Entire workflow",
        "type": "Text_excerpt",
        "value": "`python moff_all.py  --mbr all --tsv_list  sample_folder/input_file1.txt sample_folder/input_file2.txt  --raw_list sample_folder/input_file1.raw sample_folder/input_file2.raw --tol 10 --loc_out output_moff --peptide_summary ` \nIn case you activate the filtering of the mached peptides  you have to specify with `--ptm_file` a valid json file that describes the modificatiuon used in your experiment. See section \nWARNING: **mzML raw file  MUST be specified  using `--tsv_list | --raw_list`. The `--raw_repo` option is not available for mzML files. \n"
      },
      "source": "https://raw.githubusercontent.com/compomics/moFF/master/README.txt",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9152478864238262,
      "result": {
        "original_header": "Post Translation Modification file",
        "type": "Text_excerpt",
        "value": "The Post Translation Modificatio must be indicated in json file with the following structure :\n```\n{\n\"tagModification\": {\"deltaChem\":[H atom, C atom, N atom ,O atom],\"desc\":\"name unimod : unimod_id\"},\n}\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/compomics/moFF/master/README.txt",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9993735159743775,
      "result": {
        "original_header": "Docker",
        "type": "Text_excerpt",
        "value": "\nOne you have cloned or downloaded moFF repository, inside the moFF folder you can build  docker with the the command\n```\ndocker build . -t moff\n``` \nInside the docker you can run moFF with all commands showed above. Run example with the apex module:\n```\ndocker run -v /home/user/data:/data_input -i -t moff python moff_all.py --tsv_list /data_input/input_file.tab --raw_list /data_input/input_file.raw --tol 10 --rt_peak_win 1 --xic_length 3 --loc_out /data_input/output folder --mbr off\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/compomics/moFF/master/README.txt",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8836434501163459,
      "result": {
        "original_header": "Absence of Peak Sample Data",
        "type": "Text_excerpt",
        "value": "| File name  | iRT | yeast |\n| ------------- | ------------- | ------------- |\n| B002413_Ap_22cm_Yeast_171215184201 |    | x |\n| B002417_Ap_22cm_iRT_PRC-Hans_equimolar_100fmol |  x  |  |\n| B002419_Ap_22cm_iRT_PRC-Hans_equimolar_100fmol_inYeast   |  x  | x |\n| B002421_Ap_22cm_iRT_PRC-Hans_equimolar_100fmoll  |  x  |  | \n`python moff_all.py  --config_file  absense_peak_data/config_iRT.ini `\nto run  mbr + apex and filtering function \n"
      },
      "source": "https://raw.githubusercontent.com/compomics/moFF/master/README.txt",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8474450527782008,
      "result": {
        "original_header": "Apex intensity",
        "type": "Text_excerpt",
        "value": "`python moff_all.py  --mbr on  --loc_in sample_folder/sample_data/  --raw_repo sample_folder/sample_data/your_raw_folder   --tol 1O --loc_out output_moff --peptide_summary  ` \n"
      },
      "source": "https://raw.githubusercontent.com/compomics/moFF/master/README.txt",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8818455346074854,
      "result": {
        "original_header": "Entire workflow",
        "type": "Text_excerpt",
        "value": "`python moff_all.py --mbr all  --loc_in  sample_folder/   --raw_repo sample_folder/ --tol 10  --loc_out output_moff --peptide_summary` \n`python moff_all.py  --mbr all --tsv_list  sample_folder/input_file1.txt sample_folder/input_file2.txt  --raw_list sample_folder/input_file1.raw sample_folder/input_file2.raw --tol 10 --loc_out output_moff --peptide_summary ` \n"
      },
      "source": "https://raw.githubusercontent.com/compomics/moFF/master/README.txt",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9436195274309835,
      "result": {
        "original_header": "Docker",
        "type": "Text_excerpt",
        "value": "Inside the docker you can run moFF with all commands showed above. Run example with the apex module:\n```\ndocker run -v /home/user/data:/data_input -i -t moff python moff_all.py --tsv_list /data_input/input_file.tab --raw_list /data_input/input_file.raw --tol 10 --rt_peak_win 1 --xic_length 3 --loc_out /data_input/output folder --mbr off\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/compomics/moFF/master/README.txt",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.818883726549836,
      "result": {
        "original_header": "Output data",
        "type": "Text_excerpt",
        "value": "(b) A log file is also provided containing the process output.  \n"
      },
      "source": "https://raw.githubusercontent.com/compomics/moFF/master/README.txt",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/compomics/moFF/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "apex-intensity-ms1, mass-spectrometry, proteomics"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Apache License 2.0",
        "spdx_id": "Apache-2.0",
        "type": "License",
        "url": "https://api.github.com/licenses/apache-2.0",
        "value": "https://api.github.com/licenses/apache-2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
      },
      "source": "https://raw.githubusercontent.com/compomics/moFF/master/license",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "moFF"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "compomics"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 95882,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 339,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/compomics/moFF/master/README.txt"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/compomics/moFF/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "Maux82",
          "type": "User"
        },
        "date_created": "2019-05-21T12:31:19Z",
        "date_published": "2019-05-21T13:33:38Z",
        "description": "fixed decimal point problem in Thermo library",
        "html_url": "https://github.com/compomics/moFF/releases/tag/2.0.3",
        "release_id": 17488661,
        "tag": "2.0.3",
        "tarball_url": "https://api.github.com/repos/compomics/moFF/tarball/2.0.3",
        "type": "Release",
        "url": "https://api.github.com/repos/compomics/moFF/releases/17488661",
        "value": "https://api.github.com/repos/compomics/moFF/releases/17488661",
        "zipball_url": "https://api.github.com/repos/compomics/moFF/zipball/2.0.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "Maux82",
          "type": "User"
        },
        "date_created": "2018-11-21T10:15:18Z",
        "date_published": "2018-12-07T18:34:51Z",
        "html_url": "https://github.com/compomics/moFF/releases/tag/2.0.2",
        "name": "moFF",
        "release_id": 14414954,
        "tag": "2.0.2",
        "tarball_url": "https://api.github.com/repos/compomics/moFF/tarball/2.0.2",
        "type": "Release",
        "url": "https://api.github.com/repos/compomics/moFF/releases/14414954",
        "value": "https://api.github.com/repos/compomics/moFF/releases/14414954",
        "zipball_url": "https://api.github.com/repos/compomics/moFF/zipball/2.0.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "Maux82",
          "type": "User"
        },
        "date_created": "2018-10-23T13:44:44Z",
        "date_published": "2018-10-23T15:01:38Z",
        "description": "-  improved CLI \r\n-  use of confiuration file\r\n-  support only py3.6 or above \r\n-  detection of absence  matched peak: Advance filtering of the matched peak based on the theoretical  isotopic envelope of each peptide.\r\n- Support for the most used ptm usign a custom .json file (PTM are needed only is the MBR filter is active)\r\n- General speed up\r\n- peptdide summary intensity export to use moFF result in downstream analysis\r\n- possibility to run the apex model for a list input file\r\n- improved Galaxy integration.  Now you can run moFF, just providing the full PSM report from PeptdeShaker and the list of the raw file. moFF internally will split the the input file for each raw file  \r\n- fully multi-process both for mzML and Thermo Raw file",
        "html_url": "https://github.com/compomics/moFF/releases/tag/2.0.0",
        "name": "Kessel_Run",
        "release_id": 13610173,
        "tag": "2.0.0",
        "tarball_url": "https://api.github.com/repos/compomics/moFF/tarball/2.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/compomics/moFF/releases/13610173",
        "value": "https://api.github.com/repos/compomics/moFF/releases/13610173",
        "zipball_url": "https://api.github.com/repos/compomics/moFF/zipball/2.0.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "Maux82",
          "type": "User"
        },
        "date_created": "2018-01-10T08:38:23Z",
        "date_published": "2018-01-10T08:48:40Z",
        "description": "fix missing mono in big JSON request on Linux",
        "html_url": "https://github.com/compomics/moFF/releases/tag/1.2.1",
        "name": "v.1.2.1",
        "release_id": 9175212,
        "tag": "1.2.1",
        "tarball_url": "https://api.github.com/repos/compomics/moFF/tarball/1.2.1",
        "type": "Release",
        "url": "https://api.github.com/repos/compomics/moFF/releases/9175212",
        "value": "https://api.github.com/repos/compomics/moFF/releases/9175212",
        "zipball_url": "https://api.github.com/repos/compomics/moFF/zipball/1.2.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "Maux82",
          "type": "User"
        },
        "date_created": "2017-11-29T13:25:45Z",
        "date_published": "2017-12-13T11:15:27Z",
        "description": "main inprovements :\r\n- speed increased on Themo raw file mulplexing several XiC   into a single json object\r\n-  speed increased also to access mzML file\r\n\r\n- summary peptide intensity export ",
        "html_url": "https://github.com/compomics/moFF/releases/tag/v1.2",
        "release_id": 8886415,
        "tag": "v1.2",
        "tarball_url": "https://api.github.com/repos/compomics/moFF/tarball/v1.2",
        "type": "Release",
        "url": "https://api.github.com/repos/compomics/moFF/releases/8886415",
        "value": "https://api.github.com/repos/compomics/moFF/releases/8886415",
        "zipball_url": "https://api.github.com/repos/compomics/moFF/zipball/v1.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "Maux82",
          "type": "User"
        },
        "date_created": "2017-02-28T12:29:28Z",
        "date_published": "2017-02-28T13:46:33Z",
        "description": "Apex module works in multi-process improving a lot of the speed up. This has been well tested on thermo raw file using our txic program based on our unthermo library. The testing using mzML file is still undergoing.\n\nSeamless integration with the report produced by _PeptideShaker_. \n- Now exporting your result in PeptideShaker using the **default PSM export**  is possible to use directly the  exported csv file into moFF.\n\nA new way to input your data : \n- for the _entire workflow_ (mbr+apex moff_all.py) you can use --inputtsv along with --inputraw to specify the list input and raw files. (e.g --inputtsv file1.txt file2.txt --rawlist file1.raw file2.raw). \n  _For the *apex module_ you can also using --inputtsv along with --inputraw but it takes only pair of files and not a list.\n- The old input  commands using --inputF  and  --raw_repo is stil working for _entire workflow_\n\nA docker file for moFF has been also added to the repository and tested\n",
        "html_url": "https://github.com/compomics/moFF/releases/tag/v1.0",
        "name": "moFF  Release 1.0  'Alderaan'",
        "release_id": 5594209,
        "tag": "v1.0",
        "tarball_url": "https://api.github.com/repos/compomics/moFF/tarball/v1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/compomics/moFF/releases/5594209",
        "value": "https://api.github.com/repos/compomics/moFF/releases/5594209",
        "zipball_url": "https://api.github.com/repos/compomics/moFF/zipball/v1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Minimum Requirements",
        "parent_header": [
          "moFF"
        ],
        "type": "Text_excerpt",
        "value": "Required python libraries :\n- Python 3.6+\n- pandas  >  0.23\n- numpy > 1.15.0\n- argparse > 1.2.1\n- scipy 1.1.0\n- scikit-learn > 0.19\n- pymzML > 2.0.3\n- brain-isotopic-distribution > 1.3.2\n- pyteomics >  3.5\n\n\nRequired linux library:\n- Mono version 4.2.1\n\nRequired windows library:\n- .NET Framework 4.6.2\n\n\nOptional requirements :\n-when using PeptideShaker results as a source, a PeptideShaker installation (<http://compomics.github.io/projects/peptide-shaker.html>) needs to be availabe.\n \n\nDuring processing, moFF makes use of a third party algorithm (txic_json.exe) which allows for the parsing of the Thermo RAW data.\n\n\n[Top of page](#moff)\n\n---\n\n"
      },
      "source": "https://raw.githubusercontent.com/compomics/moFF/master/README.txt",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Match between runs",
        "parent_header": [
          "moFF"
        ],
        "type": "Text_excerpt",
        "value": "use :  `python moff_all.py -mbr only `\n```\n  --loc_in                      the folder where the input files are located\n  --sample                      reg exp to filter the input file names (only with --loc_in input option-\n  --ext                         file extention of the input file. Default .txt)\n  --log_label                   filename for the mbr log file. Default moFF_mbr\n  --w_filt                      width value for outlier filtering. Default 3\n  --out_flag                    if set, outliers for rt time allignment are filtered. Default value: True\n  --w_comb                      if set, RT model combination is weighted using traing model errors: Default value: False\n```\n\n`python moff_mbr.py --loc_in sample_folder/ --mbr only `\n\nThis command runs the MBR modules. The output will be stored in a subfolder ('mbr_output') inside the specified input folder.\nThe MBR module will consider all the .txt files present in the specified input folder as replicates (to select specific files or different extension, please refer to the example below).\nThe files in *sample_folder/mbr_output* will be identical to the input files, but they will have an additional field ('matched') that specifies which peptides have match (1) or not (0). The MBR algorithm also produces a log file in the provided input directory.\n\n"
      },
      "source": "https://raw.githubusercontent.com/compomics/moFF/master/README.txt",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Customizing Match between runs",
        "parent_header": [
          "moFF",
          "Match between runs"
        ],
        "type": "Text_excerpt",
        "value": "In case of a different extension (.list, etc), please use :\n\n`python moff_mbr.py  --loc_in  sample_folder/ --ext list ` (Provide the extension without the period ('.'))\n\nIn case of using only specific input files within the provided directory, please use a regular expression:\n\n`python moff_mbr.py --loc_in sample_folder/  --sample *_6A` (This can be combined with the aforementioned syntax)\n\nYou can set all the parameters values in a file and load them using  `--config_file`. For an example see `example_parameter_file.ini`\n\n\n\n[Top of page](#moff)\n\n---\n"
      },
      "source": "https://raw.githubusercontent.com/compomics/moFF/master/README.txt",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 04:21:21",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 33
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ]
}