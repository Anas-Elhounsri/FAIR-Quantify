{
  "acknowledgement": [
    {
      "confidence": 1,
      "result": {
        "original_header": "acknowledgements",
        "parent_header": [
          "hastaLaVista"
        ],
        "type": "Text_excerpt",
        "value": "The author of this package wishes to thank Luc Patiny and Elaine Holmes for their invaluable inputs during years of collaborations, Jia Li and Hutan Ashrafian for provision of the urine spectra, Norman Pellet for his great contribution to our research group as an original contributor to the visualizer project (https://github.com/npellet/visualizer), Michael Zasso and Daniel Kostro as current contributors to the visualizer, Torben Kimhoffer for his advice on multivariate analysis, Andr\u00e9s Mauricio Castillo and Alejandro Bola\u00f1os for their help with my first steps using javaScript.\n"
      },
      "source": "https://raw.githubusercontent.com/jwist/hastaLaVista/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/jwist/hastaLaVista"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "## Contributing to Flot ##\n\nWe welcome all contributions, but following these guidelines results in less\nwork for us, and a faster and better response.\n\n### Issues ###\n\nIssues are not a way to ask general questions about Flot. If you see unexpected\nbehavior but are not 100% certain that it is a bug, please try posting to the\n[forum](http://groups.google.com/group/flot-graphs) first, and confirm that\nwhat you see is really a Flot problem before creating a new issue for it.  When\nreporting a bug, please include a working demonstration of the problem, if\npossible, or at least a clear description of the options you're using and the\nenvironment (browser and version, jQuery version, other libraries) that you're\nrunning under.\n\nIf you have suggestions for new features, or changes to existing ones, we'd\nlove to hear them! Please submit each suggestion as a separate new issue.\n\nIf you would like to work on an existing issue, please make sure it is not\nalready assigned to someone else. If an issue is assigned to someone, that\nperson has already started working on it. So, pick unassigned issues to prevent\nduplicated effort.\n\n### Pull Requests ###\n\nTo make merging as easy as possible, please keep these rules in mind:\n\n 1. Submit new features or architectural changes to the *&lt;version&gt;-work*\n    branch for the next major release.  Submit bug fixes to the master branch.\n\n 2. Divide larger changes into a series of small, logical commits with\n    descriptive messages.\n\n 3. Rebase, if necessary, before submitting your pull request, to reduce the\n    work we need to do to merge it.\n\n 4. Format your code according to the style guidelines below.\n\n### Flot Style Guidelines ###\n\nFlot follows the [jQuery Core Style Guidelines](http://docs.jquery.com/JQuery_Core_Style_Guidelines),\nwith the following updates and exceptions:\n\n#### Spacing ####\n\nUse four-space indents, no tabs.  Do not add horizontal space around parameter\nlists, loop definitions, or array/object indices. For example:\n\n```js\n    for ( var i = 0; i < data.length; i++ ) {  // This block is wrong!\n        if ( data[ i ] > 1 ) {\n            data[ i ] = 2;\n        }\n    }\n\n    for (var i = 0; i < data.length; i++) {  // This block is correct!\n        if (data[i] > 1) {\n            data[i] = 2;\n        }\n    }\n```\n\n#### Comments ####\n\nUse [jsDoc](http://usejsdoc.org) comments for all file and function headers.\nUse // for all inline and block comments, regardless of length.\n\nAll // comment blocks should have an empty line above *and* below them. For\nexample:\n\n```js\n    var a = 5;\n\n    // We're going to loop here\n    // TODO: Make this loop faster, better, stronger!\n\n    for (var x = 0; x < 10; x++) {}\n```\n\n#### Wrapping ####\n\nBlock comments should be wrapped at 80 characters.\n\nCode should attempt to wrap at 80 characters, but may run longer if wrapping\nwould hurt readability more than having to scroll horizontally.  This is a\njudgement call made on a situational basis.\n\nStatements containing complex logic should not be wrapped arbitrarily if they\ndo not exceed 80 characters. For example:\n\n```js\n    if (a == 1 &&    // This block is wrong!\n        b == 2 &&\n        c == 3) {}\n\n    if (a == 1 && b == 2 && c == 3) {}  // This block is correct!\n```\n"
      },
      "source": "https://raw.githubusercontent.com/jwist/hastaLaVista/master/inst/visu/lib/flot/CONTRIBUTING.md",
      "technique": "file_exploration"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-05-12T10:23:36Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-04-11T09:57:41Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "R package that provide interactive graphical interface for metabolic profiling"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "introduction",
        "parent_header": [
          "hastaLaVista"
        ],
        "type": "Text_excerpt",
        "value": "This package allows \n1. to convert R variables into a JSON object and save it as a file \n1. to select a view (vista) file for the visualization of the data\n1. to start a webserver with both data and view files\n\nVistas (views) are files that contains the description of how to visualize data or results. This can be regarded as a notebook (jupyter) that transforms and displays information. Notebooks, and vistas, can read data from an external file. So if data is updated, the analysis can easily be computed again. It also allows to readily share a data analysis pipeline with others. \n\nSome analysis are very common and performed by many researchers. Thus, generic vistas could be used by many to process and visualize their own results.\n\nNotebooks already offer this possibility, however notebooks only provide basic features for visualizing results, usually as plain static figures. Unlike notebooks, vistas are complex web applications that can provide a much enhanced interactivity to display and play with results.\n\n**hastaLaVista is developed and tested using Chrome, although it is known to work with other browser. In the case that a feature is not working as expected please try using Chrome before filling an issue**\n"
      },
      "source": "https://raw.githubusercontent.com/jwist/hastaLaVista/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9009325243201024,
      "result": {
        "original_header": "hastaLaVista",
        "type": "Text_excerpt",
        "value": "R package that provide interactive graphical interface for metabolic profiling \n"
      },
      "source": "https://raw.githubusercontent.com/jwist/hastaLaVista/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8833410486629905,
      "result": {
        "original_header": "post-installation",
        "type": "Text_excerpt",
        "value": "*hastaLaVista* will convert the results of the analysis into a JSON object and store it into a file. Both data and the vista files are served by the webserver and are therefore stored in the folder where the package is installed, usually within the home folder of the user. If data are large it may be necessary to clean the old datasets periodically. To find out where the data are being stored use the following command (make sure that the library is loaded): \n**Because the files are stored, it is later possible to visualize the data in the browser even without having an active R session (See next section to use an alternative webserver**\n \n"
      },
      "source": "https://raw.githubusercontent.com/jwist/hastaLaVista/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8790961272262545,
      "result": {
        "original_header": "alternative webserver",
        "type": "Text_excerpt",
        "value": "Some users may feel happier by using the webserver of their choice. Once the visualization object is ready in R, the print() function will output the URL of for the visualization. To use an alternative webserver, just serve the /visu folder. For example, go into the visu folder and type the following command: \nif you prefer to use python build in webserver. This is particularly useful to visualize old results without having to fire up an R session.\n \n"
      },
      "source": "https://raw.githubusercontent.com/jwist/hastaLaVista/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9646403333686973,
      "result": {
        "original_header": "large files",
        "type": "Text_excerpt",
        "value": "To avoid loading very large datasets into the browser it is possible to individually store original files (spectra) within the /visu/data/json folder. This way the vista will be able to access the original data on the fly using their URL. To do so it is mandatory that the files are stored within the reach of the webserver, in this case within its root folder /visu\n \n"
      },
      "source": "https://raw.githubusercontent.com/jwist/hastaLaVista/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9405660401397993,
      "result": {
        "original_header": "configure visualization and write the data.json",
        "type": "Text_excerpt",
        "value": "It is time now to setup the visualization. Therefore an object `v` is created of class visualization. The `v@view` allows to define the vista (view) that will be served. `v@data` allows to give a name to the data.json file that will be used to serve the data. The `push()` function takes the list `d` and write the json file into the pathToRootDirectory/visu/data folder (see previous section to find out where this folder is https://github.com/jwist/hastaLaVista#post-installation). Finally the function `visualize()` will start a webserver and point your default browser to the correct local URL. The function `print(v)` will display the URL if an alternate webserver is used.\n```r\nv <- new(\"visualization\")\nv@view <- \"spectraExplorer3.1.view.json\"\nv@data <- \"spectraExplorer3.data.json\"\npush(v, type=\"data\", d)\nvisualize(v)\n```\n**Since both the view and data files are stored on the disk, this URL can be later used again to visualize the results without running the analysis again. Just make sure that a webserver is started.**\nTo run again the visualization from R without re-running the analysis, just use the following command instead:\n```r\nv <- new(\"visualization\")\nv@view <- \"spectraExplorer3.1.view.json\"\nv@data <- \"spectraExplorer3.data.json\"\nvisualize(v)\n```\nWe just remove the `push()` command to avoid overwriting the data json file.\n \n"
      },
      "source": "https://raw.githubusercontent.com/jwist/hastaLaVista/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8097248429259695,
      "result": {
        "type": "Text_excerpt",
        "value": "If you find it useful, please cite this work  \n"
      },
      "source": "https://raw.githubusercontent.com/jwist/hastaLaVista/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/jwist/hastaLaVista/tree/master/docs"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/jwist/hastaLaVista/tree/master/inst/visu/lib/ckeditor_onchange/docs"
      },
      "technique": "file_exploration"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/jwist/hastaLaVista/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/jwist/hastaLaVista/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "jwist/hastaLaVista"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "hastaLaVista"
      },
      "source": "https://raw.githubusercontent.com/jwist/hastaLaVista/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "identifier": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://zenodo.org/badge/latestdoi/186240224"
      },
      "source": "https://raw.githubusercontent.com/jwist/hastaLaVista/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://doi.org/10.1186/s13321-019-0399-7"
      },
      "source": "https://raw.githubusercontent.com/jwist/hastaLaVista/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jwist/hastaLaVista/master//inst/visu/bin/help/demoView.png"
      },
      "source": "https://raw.githubusercontent.com/jwist/hastaLaVista/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jwist/hastaLaVista/master//inst/visu/bin/help/dataExplorer_1_1.gif"
      },
      "source": "https://raw.githubusercontent.com/jwist/hastaLaVista/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "installation",
        "parent_header": [
          "hastaLaVista"
        ],
        "type": "Text_excerpt",
        "value": "Make sure that *devtools* package is installed and run the following command in the R console. \n\n    options(timeout=1000)\n    devtools::install_github(\"jwist/hastaLaVista\")\n"
      },
      "source": "https://raw.githubusercontent.com/jwist/hastaLaVista/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "preparing results for visualization",
        "parent_header": [
          "hastaLaVista"
        ],
        "type": "Text_excerpt",
        "value": "The results of the analysis must be reshaped to be used in the `visualizeR` pipeline. For the first example presented in the previous section at least the following information must be available.\n\n* a vector `ID` of **unique** IDs that is used to identify each entry or sample\n* a vector `group` that describes to which class each sample belong\n* a table `metadata` of information that belong to each sample and that will be displayed \n* a matrix `x` that contains the data. Each row represents a sample, each columns a variable\n* a vector `x_axis` that contains the names or values of each variable\n\nA demo dataset is available with *hastaLaVista*. A complete description of the dataset can be found here: https://www.frontiersin.org/articles/10.3389/fmicb.2011.00183\n"
      },
      "source": "https://raw.githubusercontent.com/jwist/hastaLaVista/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "load a dataset",
        "parent_header": [
          "hastaLaVista",
          "preparing results for visualization"
        ],
        "type": "Text_excerpt",
        "value": "As a starter we recommend to use the demo dataset provided with *hastaLaVista* package. This dataset `bariatric` contains a matrix `bariatricRat$X` with the original data (the spectra) and a vector `bariatricRat$ppm` that contains information about the x-axis. Finally, it contains a data.frame `bariatricRat$metadata` with metadata that can be used to explore and colour the data.\n\n```r\ndata(\"bariatricRat\")\nX <- bariatricRat$X\nppm <- bariatricRat$ppm\nmetadata <- bariatricRat$metadata\n```"
      },
      "source": "https://raw.githubusercontent.com/jwist/hastaLaVista/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "label the information",
        "parent_header": [
          "hastaLaVista",
          "preparing results for visualization"
        ],
        "type": "Text_excerpt",
        "value": "Here we just make sure that we have all the information that is needed by the vista. The name of the variable are self-explanatory. ID, group, metadata, x and color have the same number of rows, one row for each sample (observation). x and x_axis have the same number of columns, one for each measured variables. The metadata has an arbitrary number of columns.\n\n```r\nID <- metadata$Sample.Label\ngroup <- metadata$Class\nmetadata <- data.frame(metadata)\nx <- matrix(X, dim(X)[1], dim(X)[2])\nx_axis <- as.numeric( ppm )\ncolor = sapply(group, function(x) getColor2(as.character(x)))\n```\nOnce the information is correctly labelled we create a data.frame. **The name of the variables within the data.frame must NOT be changed, since the vista is expecting these latter under those pre-defined names (ID, group, color, _highlight, dataMatrix, metadata). \n\n```r\nbariatric <- data.frame(ID = ID,\n                group = group,\n                color = color,\n                \"_highlight\" = seq_along(group) - 1,\n                dataMatrix = I(matrix( c(rbind(repRow(x_axis, nrow(x)), x)), nrow(x), ncol(x)*2)),\n                metadata = I(metadata),\n                check.names = FALSE)\n```\nThe _highlight variable contains unique identifiers for each samples, here a simple number is given. **Make sure that values in this vector are unique**\n"
      },
      "source": "https://raw.githubusercontent.com/jwist/hastaLaVista/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "append the data for export",
        "parent_header": [
          "hastaLaVista",
          "preparing results for visualization"
        ],
        "type": "Text_excerpt",
        "value": "Once the variable that must be converted to JSON objects are ready we will add them to a list. This list will be exported as a single JSON object containing all the variables, i.e., all the items of the list. **Make sure that the list is empty, otherwise the `appendData()` function will just add another item to the end of the existing list**\n\n```r\nd <- list()\nd <- appendData(data = d, variableName = \"data\", variable = bariatric, type = \"table\")\n```\nThis command will add an item `bariatric` (arbitrary name) to the list that will be named \"data\" (mandatory name). Again it is important to note that the vista is expecting an object `data` that contains objects `ID`, `group`, `color`, `_highlight`, `dataMatrix` and `metadata`.\n"
      },
      "source": "https://raw.githubusercontent.com/jwist/hastaLaVista/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9693893697716168,
      "result": {
        "original_header": "post-installation",
        "type": "Text_excerpt",
        "value": "    path.package(\"hastaLaVista\") \n"
      },
      "source": "https://raw.githubusercontent.com/jwist/hastaLaVista/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9601222173042181,
      "result": {
        "original_header": "alternative webserver",
        "type": "Text_excerpt",
        "value": "    python3 -m http.server 5474 --bind localhost \n"
      },
      "source": "https://raw.githubusercontent.com/jwist/hastaLaVista/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9876827052310365,
      "result": {
        "type": "Text_excerpt",
        "value": "A blog with a more detailed tutorial can be found here: https://jwist.github.io/hastaLaVista/ \n"
      },
      "source": "https://raw.githubusercontent.com/jwist/hastaLaVista/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/jwist/hastaLaVista/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "data-visualization, interactive-visualizations, metabolic-profiling, metabolomics, metabolomics-pipeline, metabonomics, nmr-spectroscopy, opls, pca, pls, r, r-package, visualisation"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "YEAR: 2018\nCOPYRIGHT HOLDER: Julien Wist\n"
      },
      "source": "https://raw.githubusercontent.com/jwist/hastaLaVista/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jwist/hastaLaVista/master//inst/visu/bin/logo/hlvLogo.png"
      },
      "source": "https://raw.githubusercontent.com/jwist/hastaLaVista/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "hastaLaVista"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "jwist"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "JavaScript",
        "size": 41851690,
        "type": "Programming_language",
        "value": "JavaScript"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CSS",
        "size": 1123628,
        "type": "Programming_language",
        "value": "CSS"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 499014,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 44775,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "PHP",
        "size": 6573,
        "type": "Programming_language",
        "value": "PHP"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "PowerShell",
        "size": 2730,
        "type": "Programming_language",
        "value": "PowerShell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Java",
        "size": 901,
        "type": "Programming_language",
        "value": "Java"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Smarty",
        "size": 596,
        "type": "Programming_language",
        "value": "Smarty"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 285,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 110,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "SCSS",
        "size": 85,
        "type": "Programming_language",
        "value": "SCSS"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Sass",
        "size": 79,
        "type": "Programming_language",
        "value": "Sass"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jwist/hastaLaVista/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jwist",
          "type": "User"
        },
        "date_created": "2019-11-17T13:49:26Z",
        "date_published": "2019-11-17T14:27:00Z",
        "description": "This is a first release of a project under development. This release correspond to the state of the project as it is being published.",
        "html_url": "https://github.com/jwist/hastaLaVista/releases/tag/v0.9",
        "name": "Release of hastaLaVista for Zenodo",
        "release_id": 21535300,
        "tag": "v0.9",
        "tarball_url": "https://api.github.com/repos/jwist/hastaLaVista/tarball/v0.9",
        "type": "Release",
        "url": "https://api.github.com/repos/jwist/hastaLaVista/releases/21535300",
        "value": "https://api.github.com/repos/jwist/hastaLaVista/releases/21535300",
        "zipball_url": "https://api.github.com/repos/jwist/hastaLaVista/zipball/v0.9"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "support",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 03:45:13",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 6
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "use local folder",
        "parent_header": [
          "hastaLaVista",
          "post-installation"
        ],
        "type": "Text_excerpt",
        "value": "Maybe you are using a folder to store the inputs and outputs of your analysis. In this case, you may prefer to have the data (and the view, if you modify it) stored locally instead of filling the package folder with data.\nThe method `useThisFolder()` allows the user to create a symbolic link within the webserver root directory (pathToPackage/visu/) that points to the current folder.\n\n    v <- new(\"visualization\")\n    useThisFolder(v)\n    v@data <- \"test.data.json\"\n    v@view <- \"test.view.json\"\n    visualize(v)\n\n** The command will create a symbolic link to current working directory ** Use `getwd()` to check in what directory you are currently working\n"
      },
      "source": "https://raw.githubusercontent.com/jwist/hastaLaVista/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "quick start",
        "parent_header": [
          "hastaLaVista"
        ],
        "type": "Text_excerpt",
        "value": "To quickly test the package a very simple test demo is available. Just type the following commands in the R console.\n\n    library(hastaLaVista)\n    v <- new(\"visualization\")\n    v@data <- \"test.data.json\"\n    v@view <- \"test.view.json\"\n    visualize(v)\n\nif you are using an alternative webserver, use the following url to test the demo view\n\n    http://127.0.0.1:5474/?viewURL=http://127.0.0.1:5474/view/test.view.json&dataURL=http://127.0.0.1:5474/data/test.data.json\n\nIf your installation is working you should be able to see this:\n\n![HLV test demo](/inst/visu/bin/help/demoView.png)\n"
      },
      "source": "https://raw.githubusercontent.com/jwist/hastaLaVista/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "bariatric rat demo",
        "parent_header": [
          "hastaLaVista",
          "quick start"
        ],
        "type": "Text_excerpt",
        "value": "To get a feeling of the interface, use the following lines to explore a demo analysis performed on 59 urine samples of rats.\n\n    v4 <- new(\"visualization\")\n    v4@data <- \"rat_bariatric_dataExplorer.data.json\"\n    v4@view <- \"dataExplorer_1_1.view.json\"\n    visualize(v4)\n\nif you are using an alternative webserver, use the following url to test the demo view\n    \n    http://127.0.0.1:5474/?viewURL=http://127.0.0.1:5474/view/dataExplorer_1_1.view.json&dataURL=http://127.0.0.1:5474/data/rat_bariatric_dataExplorer.data.json\n\nThe result should look like this:\n\n![HLV test demo](/inst/visu/bin/help/dataExplorer_1_1.gif)\n"
      },
      "source": "https://raw.githubusercontent.com/jwist/hastaLaVista/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "real start",
        "parent_header": [
          "hastaLaVista",
          "quick start"
        ],
        "type": "Text_excerpt",
        "value": "The previous demo illustrated the last two points mentioned in the introduction, i.e., the visualization of existing results (data.json). The examples in this section illustrate how to run the analysis in R and then push the outcome into a data.json file for visualization. \n\nFour examples are provided for untargeted analysis of metabolic profiles. \n\n**Multivariate statistics is performed using the *MetaboMate* R package. Please refer to its repository for installation at https::/github.com/kimsche/MetaboMate. *Metabomate* itself requires the installation of 3 packages from Bioconductor (https://bioconductor.org). The 3 packages have to be installed using the bioductor package manager before *MetaboMate* could be installed.**\n\nThe following command should work once BiocManager has been installed (https://bioconductor.org/install/)\n\n    BiocManager::install(c(\"MassSpecWavelet\", \"impute\", \"pcaMethods\"))\n\nFour examples to explore spectra according to metadata, to explores data from scores, to help with identification of reference compounds and to check univariate statistics after multivariate analysis.\n\n1. https://gist.githubusercontent.com/jwist/289f1fa14f8583cf7a062bc9c9b34df5/raw/27400cda47546c4c9df4a2650c9a96d5d72bc550/BariatricRats_dataExplorer.r\n1. https://gist.githubusercontent.com/jwist/517323d9e3176c9f9509e0f2293cba3c/raw/67f9e1305879c8712d99a483dcccbe7556bfe7f3/BariatricRats_scoresExplorer.r\n1. https://gist.githubusercontent.com/jwist/43854bfe60c0b245c8df794502b88f6c/raw/d9133642645be3efbd65845eb7a55cdd1cbff937/BariatricRats_metaboscope.r\n1. https://gist.githubusercontent.com/jwist/88eef3bdc73f2991b18396a533ca96c5/raw/0a4505e4907519fec7243eed4eeac0a21003488f/BariatricRats_univariate.r\n"
      },
      "source": "https://raw.githubusercontent.com/jwist/hastaLaVista/master/README.md",
      "technique": "header_analysis"
    }
  ]
}