{
  "application_domain": [
    {
      "confidence": 21.49,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    },
    {
      "confidence": 9.54,
      "result": {
        "type": "String",
        "value": "Audio"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "type": "Text_excerpt",
        "value": "**Liu Q**, Lv H, Jiang R. hicGAN infers super resolution Hi-C data with generative adversarial networks[J]. Bioinformatics, 2019, 35(14): i99-i107.\n```\n@article{liu2019hicgan,\n  title={hicGAN infers super resolution Hi-C data with generative adversarial networks},\n  author={Liu, Qiao and Lv, Hairong and Jiang, Rui},\n  journal={Bioinformatics},\n  volume={35},\n  number={14},\n  pages={i99--i107},\n  year={2019},\n  publisher={Oxford University Press}\n}\n```\n"
      },
      "source": "https://raw.githubusercontent.com/kimmo1019/hicGAN/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Liu, Qiao and Lv, Hairong and Jiang, Rui",
        "format": "bibtex",
        "title": "hicGAN infers super resolution Hi-C data with generative adversarial networks",
        "type": "Text_excerpt",
        "value": "@article{liu2019hicgan,\n    publisher = {Oxford University Press},\n    year = {2019},\n    pages = {i99--i107},\n    number = {14},\n    volume = {35},\n    journal = {Bioinformatics},\n    author = {Liu, Qiao and Lv, Hairong and Jiang, Rui},\n    title = {hicGAN infers super resolution Hi-C data with generative adversarial networks},\n}"
      },
      "source": "https://raw.githubusercontent.com/kimmo1019/hicGAN/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/kimmo1019/hicGAN"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-11-18T08:17:31Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-03-07T14:52:21Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Hi-C data super-resolution with generative adversarial networks"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9562899978961727,
      "result": {
        "original_header": "hicGAN",
        "type": "Text_excerpt",
        "value": "We proposed hicGAN, an open-sourced framework, for inferring high resolution Hi-C data from low resolution Hi-C data with generative adversarial networks (GANs) \nhicGAN consists of two networks that compete with each other. G tries to generate super resolution samples that are highly similar to real high resolution samples while D tries to discriminate generated super resolution samples from real high resolution Hi-C samples.\n \n"
      },
      "source": "https://raw.githubusercontent.com/kimmo1019/hicGAN/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.909937898485758,
      "result": {
        "original_header": "Instructions",
        "type": "Text_excerpt",
        "value": "We provide detailed step-by-step instructions for running hicGAN model for reproducing the results in the original paper and inferring high resolution Hi-C data of your own interst. \n**Step 2**: Generate Hi-C raw contacts for both high resolutio Hi-C data and down-sampled low resolution Hi-C data given a \nresolution \nWe use Juicer toolbox for preprocessing the raw Hi-C data. Ensure that `Java` and `Juicer toolbox` are installed in your system. One can generate Hi-C raw contacts for both high resolutio Hi-C data and down-sampled low resolution Hi-C data by running `preprocess.sh` script in the `preprocess` folder. Note that one can speed up the preprocessing using `slurm` by modify one line of `preprocess.sh`. See annotation in `preprocess.sh`.\n```shell\nbash preprocess.sh <CELL> <Resolution> <path/to/juicer_tools.jar>\n```\nFor example, one can directly run `bash preprocess.sh GM12878 10000 path/to/juicer_tools.jar` to extract Hi-C raw contacts of GM12878 cell line with resolution 10k. \n\n**Step 3**: Preprate the training and test data \nTypically, Hi-C samples from chromosomes 1-17 will be kept for training and chromosomes 18-22 will be kept for testing in each cell type.\n```shell\npython data_split.py  <CELL>\n```\nFor example, one can directly run `python data_split.py GM12878` to generate `train_data.hkl` and `test_data.hkl` under the `data/GM12878 data folder`. \n \nWe finally provide a `demo.ipynb` to illustrate the above steps with a demo of Hi-C model. \nWe also provide a `Results_reproduce` to show how the results in our paper were produced. \nNote that we also provide a pre-trained model of hicGAN which was trained in GM12878 cell line.\n \n"
      },
      "source": "https://raw.githubusercontent.com/kimmo1019/hicGAN/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/kimmo1019/hicGAN/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kimmo1019/hicGAN/master/demo.ipynb"
      },
      "source": "https://raw.githubusercontent.com/kimmo1019/hicGAN/master/demo.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kimmo1019/hicGAN/master/Results_reproduce.ipynb"
      },
      "source": "https://raw.githubusercontent.com/kimmo1019/hicGAN/master/Results_reproduce.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 9
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/kimmo1019/hicGAN/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "kimmo1019/hicGAN"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "hicGAN"
      },
      "source": "https://raw.githubusercontent.com/kimmo1019/hicGAN/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kimmo1019/hicGAN/master/preprocess/raw_data_download_script.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kimmo1019/hicGAN/master/preprocess/preprocess.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kimmo1019/hicGAN/master/preprocess/sbatch_juicer_script.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kimmo1019/hicGAN/master/model.png"
      },
      "source": "https://raw.githubusercontent.com/kimmo1019/hicGAN/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "hicGAN can be downloaded by\n```shell\ngit clone https://github.com/kimmo1019/hicGAN\n```\nInstallation has been tested in a Linux/MacOS platform with python2.7.\n"
      },
      "source": "https://raw.githubusercontent.com/kimmo1019/hicGAN/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9894614391517699,
      "result": {
        "original_header": "Instructions",
        "type": "Text_excerpt",
        "value": "**Step 1**: Download raw aligned sequencing reads from Hi-C experiments \nWe preprocess Hi-C data from alighed sequencing reads (e.g. ```GSM1551550_HIC001_merged_nodups.txt.gz``` from Rao *et al*. 2014). One can directly download raw Hi-C data from GEO database or refer to our `raw_data_download_script.sh` script in the `preprocess` folder. You will generate raw Hi-C data under a `PATH-to-hicGAN/data/CELL` folder. Please note that the download may take long time. \nWe use Juicer toolbox for preprocessing the raw Hi-C data. Ensure that `Java` and `Juicer toolbox` are installed in your system. One can generate Hi-C raw contacts for both high resolutio Hi-C data and down-sampled low resolution Hi-C data by running `preprocess.sh` script in the `preprocess` folder. Note that one can speed up the preprocessing using `slurm` by modify one line of `preprocess.sh`. See annotation in `preprocess.sh`.\n```shell\nbash preprocess.sh <CELL> <Resolution> <path/to/juicer_tools.jar>\n```\nFor example, one can directly run `bash preprocess.sh GM12878 10000 path/to/juicer_tools.jar` to extract Hi-C raw contacts of GM12878 cell line with resolution 10k. \n"
      },
      "source": "https://raw.githubusercontent.com/kimmo1019/hicGAN/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8781061864676243,
      "result": {
        "original_header": "Instructions",
        "type": "Text_excerpt",
        "value": "We preprocess Hi-C data from alighed sequencing reads (e.g. ```GSM1551550_HIC001_merged_nodups.txt.gz``` from Rao *et al*. 2014). One can directly download raw Hi-C data from GEO database or refer to our `raw_data_download_script.sh` script in the `preprocess` folder. You will generate raw Hi-C data under a `PATH-to-hicGAN/data/CELL` folder. Please note that the download may take long time. \nTypically, Hi-C samples from chromosomes 1-17 will be kept for training and chromosomes 18-22 will be kept for testing in each cell type.\n```shell\npython data_split.py  <CELL>\n```\nFor example, one can directly run `python data_split.py GM12878` to generate `train_data.hkl` and `test_data.hkl` under the `data/GM12878 data folder`. \n \nAfter preparing the training and test data, one can run the following commond to run hicGAN\n```shell\npython run_hicGAN.py <GPU_ID> <checkpoint> <graph> <CELL>\n```\nFor example, one can run `python run_hicGAN.py 0 checkpoint/GM12878 graph/GM12878 GM12878` \nNote that `checkpoint` is the folder to save model and `graph` is the folder for visualization with `TensorBoard`. The three folders will be created if not exist. \nAfter model training, one can evaluate the hicGAN by calculating MSR, PSNR and SSIM measurements, just run the following commond\n```shell\npython hicGAN_evaluate.py <GPU_ID> <MODEL_PATH> <CELL>\n```\nFor example, one can run `python hicGAN_evaluate.py 0 checkpoint GM12878` for model evaluation. The predicted data will be saved in `data/<CELL>` folder. \n"
      },
      "source": "https://raw.githubusercontent.com/kimmo1019/hicGAN/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/kimmo1019/hicGAN/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2018 Qiao Liu\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/kimmo1019/hicGAN/master/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "type": "Text_excerpt",
        "value": "This project is licensed under the MIT License - see the LICENSE.md file for details\n"
      },
      "source": "https://raw.githubusercontent.com/kimmo1019/hicGAN/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "hicGAN"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "kimmo1019"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 71742,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 29322,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 3701,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kimmo1019/hicGAN/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirements",
        "type": "Text_excerpt",
        "value": "- TensorFlow == 1.13.1\n- TensorLayer == 1.9.1\n- hickle == 2.1.0\n- Java JDK == 1.8.0\n- Juicer Tool\n"
      },
      "source": "https://raw.githubusercontent.com/kimmo1019/hicGAN/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Run hicGAN on your own data",
        "type": "Text_excerpt",
        "value": "We provided instructions on implementing hicGAN model from raw aligned sequencing reads. One could directly run hicGAN model with custom data by constructing low resolution data and corresponding high resolution data in `run_hicGAN.py` with custom data by the following instructions. \n\n**Step 1**: Modify one line in `run_hicGAN.py`\n\nYou can find `lr_mats_train_full, hr_mats_train_full = hkl.load(...)` in `run_hicGAN.py`. All you need to do is to generate `lr_mats_train_full` and `hr_mats_train_full` by yourself. \n\nNote that `hr_mats_train_full` and `lr_mats_train_full` are high resolution Hi-C training samples and low resolution Hi-C training samples, respectively. The size of `hr_mats_train_full` and `lr_mats_train_full` are (nb_train,40,40,1) and (nb_train,40,40,1). \n\nWe extracted training examples in the original Hi-C matrices by cropping non-overlaping 40 by 40 squares (resolution: 10k bp) within 2M bp. See details in `data_split.py` if necessary. \n\n**Step 2**: Modify one line in  `hicGAN_evaluate.py`\n\nYou can find `lr_mats_test,hr_mats_test, _ = hkl.load(...)` in `hicGAN_evaluate.py`. All you need to do is to generate `lr_mats_test` and `hr_mats_test` by youself.\n\nThen run the following command:\n```shell\npython hicGAN_evaluate.py <GPU_ID> <MODEL_PATH> <CELL>\n```\nThe predicted data will be saved in `data/<CELL>` folder.\n\nWe also provided a script `hicGAN_predict.py` for which the ground truth of test data is unknown. One can run the following commond:\n\n```shell\npython hicGAN_predict.py <GPU_ID> <MODEL_PATH> <DATA_PATH> <SAVE_DIR>\n\n[GPU_ID] : GPU ID (e.g. 0)\n\n[MODEL_PATH]:  path for weights file for hicGAN_g(e.g. checkpoint/g_hicgan_best.npz)\n\n[DATA_PATH]: data path for enhancing (e.g. lr_mat_test.npy)\n\n[SAVE_DIR]: save directory for predicted data \n```\n\nYou need to generate your own test data in `npy` format and use `DATA_PATH` to load it. The predcited data will be saved in `SAVE_DIR` folder.\n\n\nFeel free to contact `liuqiao@stanford.edu` if you have any problem in implementing your own hicGAN model.\n"
      },
      "source": "https://raw.githubusercontent.com/kimmo1019/hicGAN/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-11-04 03:40:00",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 15
      },
      "technique": "GitHub_API"
    }
  ]
}