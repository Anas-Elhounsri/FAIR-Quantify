{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "<a href=\"https://www.biorxiv.org/content/10.1101/748624v1\">SeqBreed: A python tool to evaluate genomic prediction in complex scenarios</a>"
        ],
        "type": "Text_excerpt",
        "value": "[M. Perez-Enciso, L.C. Ramirez-Ayala,  L.M. Zingaretti. 2020](https://gsejournal.biomedcentral.com/articles/10.1186/s12711-020-0530-2). SeqBreed: a python tool to evaluate genomic prediction in complex scenarios. Genetics Selection Evolution. 52, Article number: 7. \n\n---\n\nSeqBreed.py is a python3 software to simulate populations under (genomic) selection. \nIt inherits most of funcionality from SBVB ([Perez-Enciso et al., 2017](http://www.genetics.org/content/205/2/939.long), \nhttps://github.com/miguelperezenciso/sbvb1) and pSBVB ([Zingaretti et al. 2018](http://www.g3journal.org/content/9/2/327.long),\n https://github.com/lauzingaretti/pSBVB) softwares but code has been completely rewritten. It is now much more user friendly and adds numerous new features such as easy selection implementation (BLUP, GBLUP, SSTEP), plots (PCA, GWAS)... \n\nIts main target is to simulate genomic selection experiments but can be used as well to study the performance of GWAS or,\nin general, study the dynamics of complex traits under numerous selection criteria: drift, mass selection, \nBLUP, GBLUP and single step GBLUP are currently implemented. \n\nIt can accommodate any number of complex phenotypes controlled by an arbitrary number of loci \n(epistasis is not currently implemented though). Autopolyploid genomes can be simulated, as well as sex and mitochondrial chromosomes.\n\n**NOTE:** SeqBreed is designed for use in short term breeding experiments only, as no new mutations are generated. We recommend to use real sequence data or high density SNP data as startup to realistically mimic variability and disequilibrium.  \n"
      },
      "source": "https://raw.githubusercontent.com/miguelperezenciso/SeqBreed/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/miguelperezenciso/SeqBreed"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Disclaimer",
        "parent_header": [
          "<a href=\"https://www.biorxiv.org/content/10.1101/748624v1\">SeqBreed: A python tool to evaluate genomic prediction in complex scenarios</a>",
          "How to contribute"
        ],
        "type": "Text_excerpt",
        "value": "please see https://github.com/miguelperezenciso/SeqBreed#disclaimer below\n"
      },
      "source": "https://raw.githubusercontent.com/miguelperezenciso/SeqBreed/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "How to contribute",
        "parent_header": [
          "<a href=\"https://www.biorxiv.org/content/10.1101/748624v1\">SeqBreed: A python tool to evaluate genomic prediction in complex scenarios</a>"
        ],
        "type": "Text_excerpt",
        "value": "Please send comments, suggestions or report bugs to miguel.perez@uab.es. \n\n#### Disclaimer\nCopyright (C) 2019  Miguel Perez-Enciso\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n"
      },
      "source": "https://raw.githubusercontent.com/miguelperezenciso/SeqBreed/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-04-25T19:23:26Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-09T14:31:31Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A python tool to evaluate genomic prediction in complex scenarios"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9540854736352294,
      "result": {
        "original_header": "<a href=\"https://publons.com/researcher/1438761/miguel-perez-enciso/\">Miguel P\u00e9rez-Enciso</a>",
        "type": "Text_excerpt",
        "value": "\nWith contributions from [Laura M Zingaretti](https://www.linkedin.com/in/laura-m-zingaretti/) and [Lino C. Ramirez-Ayala](https://www.linkedin.com/in/lino-cesar-ramirez-ayala/?originalSubdomain=es)\n \n"
      },
      "source": "https://raw.githubusercontent.com/miguelperezenciso/SeqBreed/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8345855873696653,
      "result": {
        "original_header": "Last changes",
        "type": "Text_excerpt",
        "value": "* `addRandomInd` function sintaxis changed slightly. It allows now to select the intervening subset of base individuals. See example in [main.py](https://github.com/miguelperezenciso/SeqBreed/blob/master/main.py) \n"
      },
      "source": "https://raw.githubusercontent.com/miguelperezenciso/SeqBreed/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9781681051896853,
      "result": {
        "original_header": "Quick startup",
        "type": "Text_excerpt",
        "value": "The basic phylosophy of **SeqBreed** is to have a file with SNP data from the founder population (in vcf or plink - like format), specify causal SNPs (QTNs) and their effects for every phenotype (either in a file or can be simulated by the program) and, optionally, a pedigree that is used for gene-dropping. In addition to sequence data, the user can specify a subset of SNPs (a chip) that can be used to implement genomic selection, do a PCA or a GWAS. Next, new individuals can be manually added to the extant population or a selection scheme can be automatically implemented. At any stage, data can be inspected, exported or plotted via a Principal Component Analysis (PCA).  \nThe minimum input for **SeqBreed** is the file with SNP genotypes and positions from the founder population. Addiitonal files mentioned add extra control but can be simulated (eg, QTN positions and effects or recombination rates).  \n"
      },
      "source": "https://raw.githubusercontent.com/miguelperezenciso/SeqBreed/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9500024709216094,
      "result": {
        "original_header": "Main classes",
        "type": "Text_excerpt",
        "value": "**SeqBreed** allows storing and accessing genomic and population information easily.  \n"
      },
      "source": "https://raw.githubusercontent.com/miguelperezenciso/SeqBreed/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9323858450322504,
      "result": {
        "original_header": "Input",
        "type": "Text_excerpt",
        "value": "**SeqBreed** minimally only requires a genotype file in vcf or 'gen' formats, either compressed or uncompressed.\nFor vcf format specifications, check https://en.wikipedia.org/wiki/Variant_Call_Format. The 'gen' format is \nsimply  \none row for each SNP, where alleles are coded as ```0, 1``` for diploids and BASH2* for polyploids. \nFor example, the following gen file contains information for 3 markers and 2 diploid individuals: \n**IMPORTANT: No missing genotypes are allowed and SeqBreed assumes genotypes to be phased.** This is simply because **SeqBreed** must know which are the parental haplotypes. Since this is unlikely, phasing and imputation with some standard algorithm will do. Errors in imputation and phasing should have virtually no effect on the conclusions to be drawn from **SeqBreed** simulations. \nIf no QTN file is provided, a predetermined number of randomly chosen QTNs can be generated by **SeqBreed**,\nwhere additive qtn effects are sampled from a gamma. For more control, a qtn file is needed.   \nOptional Files (see more details below and examples in the repository):\n \n- **QTN file** specifying the genetic architecture: any number of loci and any number of traits are allowed. \nThe format of this file is, per row, QTN position (chromosome and base pair) followed by additive and \ndominant effect for each trait. If a QTN does not affect the given trait, 0's must be employed.\n- **File with (sex) specific recombination maps**: Sex and mitochondrial chromosomes can be specified. \nAuto polyploid genomes can also be specified. \n- **A starting pedigree**: If not provided, a new one is automatically generated where base individuals are unrelated. \n \n"
      },
      "source": "https://raw.githubusercontent.com/miguelperezenciso/SeqBreed/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/miguelperezenciso/SeqBreed/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/miguelperezenciso/SeqBreed/master/SeqBreed_tutorial.ipynb"
      },
      "source": "https://raw.githubusercontent.com/miguelperezenciso/SeqBreed/master/SeqBreed_tutorial.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/miguelperezenciso/SeqBreed/master/POTATO/potato.ipynb"
      },
      "source": "https://raw.githubusercontent.com/miguelperezenciso/SeqBreed/master/POTATO/potato.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/miguelperezenciso/SeqBreed/master/DGRP/DGRP.ipynb"
      },
      "source": "https://raw.githubusercontent.com/miguelperezenciso/SeqBreed/master/DGRP/DGRP.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 11
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/miguelperezenciso/SeqBreed/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "miguelperezenciso/SeqBreed"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/miguelperezenciso/SeqBreed/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "<a href=\"https://www.biorxiv.org/content/10.1101/748624v1\">SeqBreed: A python tool to evaluate genomic prediction in complex scenarios</a>"
        ],
        "type": "Text_excerpt",
        "value": "Clone the repository and run:\n\n`sudo python3 -m pip install SeqBreed-0.1-py3-none-any.whl`\n\nAlternatively, you can install locally without sudo permits as:\n\n`pip3 install --user SeqBreed-0.1-py3-none-any.whl`\n\nTo access the module, include the following in the program: \n\n    from SeqBreed import genome as gg\n    from SeqBreed.selection import selection as sel\n    \nSource code is also provided in src folder. To access them whtin the program instead of using pip installation:\n\n    from src import genome as gg\n    from src import selection as sel\n\nProgram has been tested in mac and linux only, although it should run as any regular python script in windows. For windows, we recommend the [wsl](https://learn.microsoft.com/en-us/windows/wsl/about) tool\n\nAs in any python project, it is recommended to use a separate environment to avoid conflicts between package versions. You can do that with **conda** as follows:\n\n```\nconda create -n seqbreed_environment\nconda activate seqbreed_environment\n   # do all instalation of required packages, eg,\n   python3 -m pip install --user SeqBreed-XXX.whl\n   # run python\n   ....\n# to finish\nconda deactivate\n```"
      },
      "source": "https://raw.githubusercontent.com/miguelperezenciso/SeqBreed/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9999607003271141,
      "result": {
        "original_header": "Last changes",
        "type": "Text_excerpt",
        "value": "* Dihaploid offspring can be generated now (https://github.com/miguelperezenciso/SeqBreed/blob/master/README.md#5-breeding-population). See example in [main.py](https://github.com/miguelperezenciso/SeqBreed/blob/master/main.py)\n \n"
      },
      "source": "https://raw.githubusercontent.com/miguelperezenciso/SeqBreed/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9886785434870964,
      "result": {
        "original_header": "Input",
        "type": "Text_excerpt",
        "value": "**SeqBreed** minimally only requires a genotype file in vcf or 'gen' formats, either compressed or uncompressed.\nFor vcf format specifications, check https://en.wikipedia.org/wiki/Variant_Call_Format. The 'gen' format is \nsimply  \n**NOTE:** **SeqBreed** recognizes vcf format if file name ends with 'vcf' or 'vcf.gz', everything else is\ntreated as 'gen' format. **SeqBreed** automatically recognizes whether the files are gz compressed. \n**NOTE:** **SeqBreed** automatically recognizes ploidy from vcf files. Ploidy must be specified for gen files (see below). \n"
      },
      "source": "https://raw.githubusercontent.com/miguelperezenciso/SeqBreed/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/miguelperezenciso/SeqBreed/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SeqBreed"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "miguelperezenciso"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 419914,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 95077,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/miguelperezenciso/SeqBreed/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirements",
        "parent_header": [
          "<a href=\"https://www.biorxiv.org/content/10.1101/748624v1\">SeqBreed: A python tool to evaluate genomic prediction in complex scenarios</a>"
        ],
        "type": "Text_excerpt",
        "value": "See [requirements.txt](https://github.com/miguelperezenciso/SeqBreed/blob/master/requirements.txt).\n"
      },
      "source": "https://raw.githubusercontent.com/miguelperezenciso/SeqBreed/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-11-04 02:30:48",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 35
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Examples",
        "parent_header": [
          "<a href=\"https://www.biorxiv.org/content/10.1101/748624v1\">SeqBreed: A python tool to evaluate genomic prediction in complex scenarios</a>"
        ],
        "type": "Text_excerpt",
        "value": "The best option to use the program is to follow the examples.\n* [`main.py`](https://github.com/miguelperezenciso/SeqBreed/blob/master/main.py) and [`SeqBreed_tutorial.ipynb`](https://github.com/miguelperezenciso/SeqBreed/blob/master/SeqBreed_tutorial.ipynb) illustrates main functionalities.\n* [`POTATO`](https://github.com/miguelperezenciso/SeqBreed/tree/master/POTATO) folder contains data from tetraploid potato and illustrates how to generate an F2, how to do a GWAS, \nPCA-corrected GWAS, how to simulate additional phenotypes...\n* [`DGRP`](https://github.com/miguelperezenciso/SeqBreed/tree/master/DGRP) folder contains data from the Drosphila Genome Reference Panel (http://dgrp2.gnets.ncsu.edu/)\nproject and illustrates genomic selection, how to save and reuse big files with ```pickle```, etc. \n\n"
      },
      "source": "https://raw.githubusercontent.com/miguelperezenciso/SeqBreed/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "<a href=\"https://www.biorxiv.org/content/10.1101/748624v1\">SeqBreed: A python tool to evaluate genomic prediction in complex scenarios</a>"
        ],
        "type": "Text_excerpt",
        "value": "A typical SeqBreed run consists of at least the following steps:\n\n1-\tUpload founder sequence genotypes and a `GFounder` object is created. A file with all SNP positions in sequence is generated.\n\n2-\tInitialize `Genome` class. Optionally, sex or mitochondrial chromosomes are specified as well as local recombination maps.\n\n3-\tGenetic architectures for every trait are specified via a `QTNs` object. Environmental variances are also inferred.\n\n4-\tA `Population` object is generated, optionally via gene-dropping along a predetermined pedigree.\n\nOnce `Population` is initialized, SeqBreed allows a number of operations to be performed, such as implementing selection, plotting or exporting phenotype and molecular data.\n"
      },
      "source": "https://raw.githubusercontent.com/miguelperezenciso/SeqBreed/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1. Base population",
        "parent_header": [
          "<a href=\"https://www.biorxiv.org/content/10.1101/748624v1\">SeqBreed: A python tool to evaluate genomic prediction in complex scenarios</a>",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "`GFounder` class constructor simply needs vcf file, name of output file with snp positions and minimimum frequency (MAF) for a snp to be considered.\n\n```gbase = gg.GFounder(vcfFile, snpFile, minMaf=0)```\n\nIt automatically determines no. of base individuals, ploidy (in vcf files), genotypes and allele frequencies.\nFor gen files, say 'test.gen', ploidy (say octoploid) must be specified:\n\n```gbase = GFounder(vcfFile='test.gen', snpFile, minMaf=0, ploidy=8)```\n\nIn this case, 8 alleles by individual and SNP must be present.\n\n**NOTE:** If unspecified, default ploidy is two. \n"
      },
      "source": "https://raw.githubusercontent.com/miguelperezenciso/SeqBreed/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2. Genome features",
        "parent_header": [
          "<a href=\"https://www.biorxiv.org/content/10.1101/748624v1\">SeqBreed: A python tool to evaluate genomic prediction in complex scenarios</a>",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "```Genome``` class allows specifying genome features\n\n```gfeatures = gg.Genome(snpFile, mapFile=None, XChr=None, YChr=None, MTChr=None, ploidy=gbase.ploidy)```\n\ninternally, it holds info on snp positions for each chromosome, among other variables. Ploidy is automatically\ninferred in previous step (```gbase = GFounder(.)```). The mapfile has the following format:\n\n```chr base_pair rec_rate_males rec_rate_females```\n\nwhere recombination rate is in cM / Mb, and refers to the genome region up to ```base_pair```. Rec rate is set to default\n(1 cM/Mb) in missing regions from the map file. this value can be modified in the code (check ```Chromosome``` class \nconstructor cM2Mb = 1).\n"
      },
      "source": "https://raw.githubusercontent.com/miguelperezenciso/SeqBreed/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3. Specifying genetic architecture",
        "parent_header": [
          "<a href=\"https://www.biorxiv.org/content/10.1101/748624v1\">SeqBreed: A python tool to evaluate genomic prediction in complex scenarios</a>",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "QTN class allows specifying causative SNPs and their effects on an unlimited number of phenotypes. ```h2``` is an\narray with dimension the number of traits that specify heritability for each trait.\n\n```qtn = QTN(h2=[h2, ...], genome=gfeatures, qtnFile=None, se=None, nqtn=0, name=None)```\n\nQTNS can be specified in three ways:\n\n**OPTION 1:** A random number of ```nqtn``` additive qtls genome wide distributed, additive effects are sampled \nfrom a gamma, valid only for one phenotype.\n\n```qtn = gg.QTNs(h2=[0.7], genome=gfeatures, nqtn=10)```\n\n**OPTION 2:** qtnFile contains only QTN positions. add effects are sampled form a gamma, only one phenotype\n\n```qtn = gg.QTNs(h2=[0.5], genome=gfeatures, qtnFile=qtnfile1)```\n\nqtnFile format is:\n\n```chr base_pair```\n\nOne line for each QTN\n\n**OPTION 3:** qtn positions and effects are read from qtnFile, any number of phenotypes and additive /\ndominance action can be specified.\n\n```qtn = gg.QTNs(h2=[0.9, 0.3], genome=gfeatures, qtnFile=qtnfile2)```\n\nqtnFile format is:\n\n```chr base_pair add_eff_trait1 dom_eff_trait1 add_eff_trait2 dom_eff_trait2 ... ```\n\nOne line for each QTN.\n"
      },
      "source": "https://raw.githubusercontent.com/miguelperezenciso/SeqBreed/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "4. Genotyping Chips",
        "parent_header": [
          "<a href=\"https://www.biorxiv.org/content/10.1101/748624v1\">SeqBreed: A python tool to evaluate genomic prediction in complex scenarios</a>",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "The ```Chip``` class allows efficient manipulation and storing of a genotyping array. Chips can be defined either by\nreading SNP positions from a file (```chipFile```) or can be generated from a random or uniform set of SNPs. In the \nlatter case, the number of SNPs in the chip must be specified and a minimum MAF can also be set.\n\n    chip = gg.Chip(gfeatures, chipFile=None, nsnp=0, unif=False, minMaf=0, name='chip_') \n    \nwhere:\n\n- ```gfeatures``` is a Genome object\n- ```gbase``` is a GFounders object\n- ```chipFile```(str) is the name of pos file containing chip snp posiitons\n- ```nsnp```(int) no. of snps to be generated randomly or uniformly\n- ```unif```(bool) if True, snps chosen are uniformly distributed; randomly otherwise\n- ```minMaf```(float) minimum MAF\n- ```name```(str) chip name\n\nIf chipFile is specified, it overrides the generation option. `Chip` objects can be generated from a file containing SNP positions (`chipfile`):\n\n`chip = gg.Chip(genome=gfeatures, chipFile=chipfile) `\n\nor randomly generated. The following generates a chip with N equally spaced SNPs with MAF>maf\n\n`chip = gg.Chip(gfeatures, gbase, nsnp=N, unif=True, minMaf=maf)`\n\nThe following generates a chip with N randomly chosen SNPs without any restriction on MAF:\n\n`chip = gg.Chip(gfeatures, gbase, nsnp=N, unif=False)`\n\n"
      },
      "source": "https://raw.githubusercontent.com/miguelperezenciso/SeqBreed/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "5. Breeding population",
        "parent_header": [
          "<a href=\"https://www.biorxiv.org/content/10.1101/748624v1\">SeqBreed: A python tool to evaluate genomic prediction in complex scenarios</a>",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Most of information needed is in ```Population``` class, which is basically a collection of individuals plus\nsome little extra information.\n\n```pop = Population(genome=gfeatures, pedFile=None, t=[], label=None, qtns=qtn, gfounders=gbase)```\n\npedFile contains pedigree information, ie,\n\n```id id_father id_mother```\n\nwhere ids **MUST** be integer consecutive numbers from 1 onwards; id_father and id_mother **MUST** be 0 for\nall base individuals, ie, the number of individuals in the vcf file. If pedFile is not specified, \na dummy pedigree for all base individuals is generated (```id 0 0``` for id=1:nbase).\n\nIndividuals can be accessed by \n\n```Pop.inds[i]```\n\nwhere ```Pop.inds[i]``` contains information of individual ```id=i+1``` (python array indices start at 0). Phenotypes can\nbe accessed by \n\n```Pop.inds[i].y```\n\nPop and ind info can be printed with:\n\n```\n# prints generic info\npop.print()\n# prints detailed indiv info\npop.inds[i].print(gfeatures)\n# boxplots average phenotype values per generation for phenotype itrait (= 0:ntrait)\npop.plot(trait=itrait) \n```\n\nIt is usually difficult to find real sequence data to obtain a reasonably sized founder (base) population. \nAn interesting feature of **SeqBreed** is the possibility of generating \u2018dummy\u2019 founder individuals \nby randomly combining recombinant founder haplotypes. The following function adds a randomly generated individual:\n\n```pop.addRandomInd(gfeatures, gbase, k=5, mode='pedigree', qtns=qtn, gfounders=gbase)```\n\nwhere ```mode``` can be 'pedigree' or 'random', and ```k``` specifies the number of recombination generations. If \n```mode``` is 'pedigree', a random pedigree consisting of 2^k founder individuals and k generations is simulated, and\ngenedropping is performed along this pedigree. The resulting individual is added to the ```pop``` object.\nIf ```mode``` is 'random', a recombinant chromosome with x ~ Poisson(0.5 k L), L being genetic lenth, recombinant breaks\nis simulated, and each non-recombinant stretch is assigned a random founder haplotype.\n\nIt is possible to select the list of intervening founder individuals with key 'idsbase'.\nThis can be useful if base population is madeup of several breeds and one is interested, e.g., in augmenting the offspring number of one breed only.\n\n    # list of founder inds. Inds index start at 1 (ie, first individual)\n    ids_list = [1, 3, 5, 13]  \n    pop.addRandomInd(gfeatures, gbase, idsbase=ids_list, k=5, mode='pedigree', qtns=qtn)\n\n\n**Adding extra individuals** manually is also possible. The following adds a male offspring (sex=0) from 24th and first individual:\n\n    parents = [pop.inds[23], pop.inds[0] ]\n    pop.addInd(parents, genome=gfeatures, gfounders=gbase, qtns=qtn, sex=0)\n\nThe following generates a **dihaploid** offspring of last individual in population:\n\n    parents = [pop.inds[-1], pop.inds[-1]]\n    pop.addInd(parents, dihap=True, genome=gfeatures, gfounders=gbase, qtns=qtn, sex=0)\n\nThe following adds a set of new individuals structured as a pedigree:\n\n    pop.addPed(ped, genome=gfeatures, qtns=qtn, gfounders=gbase)\n\nwhere `ped` is an n x 3 or n x 4 array containing `id, father, mother, sex` per row. The last column (`sex`) is optional. In this case, `sex` is randomly sampled.\n"
      },
      "source": "https://raw.githubusercontent.com/miguelperezenciso/SeqBreed/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "6. Retrieving genotype data",
        "parent_header": [
          "<a href=\"https://www.biorxiv.org/content/10.1101/748624v1\">SeqBreed: A python tool to evaluate genomic prediction in complex scenarios</a>",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "**SeqBreed** internally keeps individual genomes only as a collection of recombination blocks and founder origins of\nthose blocks ([Perez-Enciso et al. 2000](https://gsejournal.biomedcentral.com/articles/10.1186/1297-9686-32-5-467)), therefore enormoulsy saving cpu time and memory in all operations on Individual objects. \nActual genotypes must be retrieved though for GBLUP, GWAS or PCA analyses. This is achieved with ```do_X``` function\n\n```X = do_X(inds, gfeatures, gbase, chip, minMaf=1e-6)```\n\nwhere:\n\n- ```X``` is an integer p x n np.array, p = n. markers, n = n inds.\n- ```inds``` is an array of Individual objects (say ```pop.inds```)\n- ```gfeatures``` is a ```Genome``` object\n- ```gbase``` is a ```GFounders``` object\n- ```chip``` is a ```Chip``` object\n- ```minMaf``` is the minimum allele frequency for a SNP to be considered [1e-6]\n\n**WARNING!!!!:** ```do_X``` has been parallelized with ```cython.parallel``` module but still can be expensive and memory\n demanding. Beware with large SNP datasets.\n"
      },
      "source": "https://raw.githubusercontent.com/miguelperezenciso/SeqBreed/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "7. Implementing selection",
        "parent_header": [
          "<a href=\"https://www.biorxiv.org/content/10.1101/748624v1\">SeqBreed: A python tool to evaluate genomic prediction in complex scenarios</a>",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Selection proceeds in three steps (see code above):\n* First, estimated breeding values (EBVs) are obtained for the current\npopulation. If molecular data are needed (GBLUP, ssGBLUP), an X matrix containing genotypes must be \ngenerated with ```do_X``` function. \n* Second, the best individuals are mated and offspring are generated. \nComputationally, this is done by extending the current pedigree. \n* Third, new genomes and phenotypes are generated for the new offspring (but not their EBVs). \n\nEstimated Breeding Values are obtained with function\n\n```sel.doEbv(pop, criterion='random', h2=None, X=None, mkrIds=None, yIds=[], nh=2, itrait=0)```\n\nwhere:\n\n- ```criterion``` (str) is one of: 'random', 'phenotype', 'blup', 'gblup' or 'sstep' (single step).\n- ```h2``` is heritability used for genetic evaluation (needed for blup, gblup and sstep).\n- ```X``` is an array with genotypes (needed for gblup and sstep), and can be obtained with ```do_X``` function\n- ```mkrIds``` (integer numpy array) indices of genotyped individuals (indexed starting with 0) [required for sstep]\n- ```yIds``` (numpy int array): integer array specifying individuals with data (indexed starting with 0) [all]\n- ```trait```(int): trait index for which evaluation is performed [0]\n\n**In sstep, marker files should contain only information for genotyped individuals and in the same order.**\n\nFunction ```doEBV``` assigns EBVs to ```pop.inds[:].ebv```. Users can replace the function by any of their\nchoice such that selection is based on the custom defined criterion. For instance, if vector ```ebvs``` contains the custom values,\nthen\n\n    nind = len(pop.inds)\n    for i in range(nind): pop.inds[i].ebv = ebvs[i]\n\nassigns new EBVs to ```pop``` object. The next step is to generate offspring from selected parents. \nThis is performed with function \n\n```\nnewPed = sel.ReturnNewPed(pop, nsel, famsize, mating='random', generation=0)\n```\n\nwhere:\n\n- ```nsel``` (int numpy two element array) contains the number of males and females to be selected as parents.\n- ```famsize```(int): number of offspring per female\n- ```mating```(str): 'random' (=='r') or 'assortative' (=='a'). 'random' means males and females are mated at random; 'assortative' means that best males are mated to best females.\n- ```generation```(int): only individuals from generation onwards are considered as potential parents [all = 0] ,\nthis can be used to specify discrete or continuous generations.\n\n`ReturnNewPed` method returns offspring of selected parents (```newPed``` is an array with this pedigree), and `pop` object is extended with ```Population``` method `addPed` as follows:\n\n    pop.addPed(newPed, gfeatures, qtn, gbase, t=None)\n    \nwhere:\n\n- ```gfeatures``` is a ```Genome``` object\n- ```qtn``` is a ```QTNs``` object\n- ```gbase``` is a ```GFounders``` object\n- ```t``` is an integer with generation, and stored in vector ```pop.t``` , by default, t is increased by one and all\nnew individuals are assigned ```t = max(current pop.t) + 1```.\n\nThis method actually generates the genomes and phenotypes of new offspring and adds it to `pop` object. Generation counter `t` is automatically increased by 1.\n\nSee accompanying script ```main.py``` for examples. \n  "
      },
      "source": "https://raw.githubusercontent.com/miguelperezenciso/SeqBreed/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "8. PCA and GWAS",
        "parent_header": [
          "<a href=\"https://www.biorxiv.org/content/10.1101/748624v1\">SeqBreed: A python tool to evaluate genomic prediction in complex scenarios</a>",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Both PCA and GWAS plots can be obtained, GWAS simply performs a regression SNP by SNP. In either case, you must first \ngenerate the genotypic data X (This has been parallelized but can be expensive though).\n\n```\nX = gg.do_X(pop.inds, gfeatures, gbase, chip=chip1)\n```\n\n```\n# Returns 2D PCA\npca = sel.Pca(X)\npca.fit()\npca.plot(labels=labels) # labels is an integer class vector of dimension # of inds to plot in colors\n```\n\n```\nitrait = 0    # first trait is analyzed\ngwas = sel.Gwas(X, chip1)  # WARNING: chip1 must match that used to get X\ngwas.fit(inds=pop.inds, trait=itrait)\n\n# alternatively, you can pass the phenotypes directly\ny = np.array(list(pop.inds[i].y[itrait] for i in range(pop.n)))\ngwas.fit(y=y, trait=itrait)\n\ngwas.plot(fdr=True)        # plots FDR\ngwas.plot()                # plots pvalue\ngwas.print(gfeatures)      # prints gwas results\n```\nBy default, `gwas` uses raw phenotypes. Example in [potato.py](https://github.com/miguelperezenciso/SeqBreed/blob/master/POTATO/potato.py) illustrates how to correct for PC components:\n\n```\npca = sel.Pca(X)\npca.fit()\n# get phenotype vector for given trait\nitrait=0\ny = np.array(list(ind.y[itrait] for ind in pop.inds))\n# correct phenotypes using first two PCs\ny = y - pca.p[:,0] - pca.p[:,1] \ngwas.fit(y=y, trait=itrait)\ngwas.plot()\n```\n\n### Citation\nPlease cite this if you use or reuse the code:\n\n[M. Perez-Enciso, L.C. Ramirez-Ayala,  L.M. Zingaretti. 2020](https://gsejournal.biomedcentral.com/articles/10.1186/s12711-020-0530-2). SeqBreed: a python tool to evaluate genomic prediction in complex scenarios. Genetics Selection Evolution. 52, Article number: 7. \n"
      },
      "source": "https://raw.githubusercontent.com/miguelperezenciso/SeqBreed/master/README.md",
      "technique": "header_analysis"
    }
  ]
}