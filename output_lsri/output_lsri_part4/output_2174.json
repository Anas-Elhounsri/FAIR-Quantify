{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/aquaskyline/MICA-aligner"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2015-03-18T05:36:06Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-11-08T21:00:16Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MICA-aligner is a new short-read aligner that is optimized in view of MIC's limitation and the extra parallelism inside each MIC core."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "parent_header": [
          "mica - README"
        ],
        "type": "Text_excerpt",
        "value": "mica - is a pair-end short read alignment software based on the SOAP3/2BWT index.\nThe mica contains majority of the features in SOAP3-DP.\n* Backward compatiblity with SOAP3-dp index.\n* Bi-directional BWT aided alignment to achieve high speed alignment.\n* Dynamics Programming Enhancement to enhance sensitivity.\n* Pipelining of I/O process\n* Multiple input supported\nFurthermore, multi-MIC is also supported in mica to make full use of the \nmultiple MIC processor available to speed up the alignment process.\n\nThe alignment software in this package handles reference sequences in the commonly \nknown FASTA format and short reads in FASTA/FASTQ format (in uncompressed or GZIP format).\n\nThe alignment output is in SAM/BAM format.\n\nmica normally operates with 32 GB main memory for a single MIC setting. \nMemory requirement could go up in case of multiple-MIC settings. For example,\nmica could use up to 64 GB for 3 MIC settings.\n\n\nCitation:\n\"\"MICA: A fast short-read aligner that takes full advantage of Intel\u00ae Many Integrated Core Architecture (MIC)\", (in press)\n"
      },
      "source": "https://raw.githubusercontent.com/aquaskyline/MICA-aligner/master/README",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9783232666000237,
      "result": {
        "original_header": "Upgrade Instruction",
        "type": "Text_excerpt",
        "value": "Upgrading into this version of software requires the following actions:\n - 22/12/2013 Though MICA and SOAP3/3-dp in theory supports the same set of index,\n    it's recommended the index to be re-built for MICA as various bug fixes in translation\n    table has been implemented since September 2012. If your index was built with SOAP3-DP \n    revision earlier than 218, to take advantage of the correct chromosome\n    lengths in SAM output, the translation index needs to be re-built. To do that,\n    one may set all construction step to N, except ParseFASTA remains as Y, in\n    soap2-dp-builder.ini and re-run soap2-dp-builder against the reference sequence.\n \n"
      },
      "source": "https://raw.githubusercontent.com/aquaskyline/MICA-aligner/master/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9948655676227135,
      "result": {
        "original_header": "SAM v1.4 by SAM-tools",
        "type": "Text_excerpt",
        "value": "SAM-tools v0.1.19 is included in mica package to faciliate outputting alignment result \ninto SAM output format. We have slightly modified the original code of SAM-tools to make it \ncompilable under icc. Please see http://samtools.sourceforge.net/ for more detail of this package.\nAlso read Multi-threading section for detail of the output files. \n"
      },
      "source": "https://raw.githubusercontent.com/aquaskyline/MICA-aligner/master/README",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/aquaskyline/MICA-aligner/wiki"
      },
      "source": "https://raw.githubusercontent.com/aquaskyline/MICA-aligner/master/README",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/aquaskyline/MICA-aligner/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/aquaskyline/MICA-aligner/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "aquaskyline/MICA-aligner"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "mica - README"
      },
      "source": "https://raw.githubusercontent.com/aquaskyline/MICA-aligner/master/README",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/aquaskyline/MICA-aligner/master/devTools/stripSAM.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/aquaskyline/MICA-aligner/master/2bwt-flex/pair-end/make.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation and Configuration",
        "parent_header": [
          "mica - README"
        ],
        "type": "Text_excerpt",
        "value": "mica can be downloaded from this website : http://www.cs.hku.hk/2bwt-tools/\n\nFollow the following steps to install the software after you have \nobtained the software archive.\n\n1. Move the archive to the directory you wish to install it.\n\n2. Unzip the archive with gunzip and tar\n    % tar -xvvf mica-<version>-x86-64.tar.gz\n    % cd mica-<version>\n\n3. Inside the archive you should find 6 files extracted.\n   They are:\n   Index building software:                     build-index.sh\n                                                index-builder-step1\n                                                index-builder-tep1.ini\n                                                index-builder-step2\n                                                index-builder-step2.ini\n   Alignment software:                          mica\n   Aligner:                                     mica-pe mica-pe.ini\n\n4. For the usages of these software please refer to the next section.\n"
      },
      "source": "https://raw.githubusercontent.com/aquaskyline/MICA-aligner/master/README",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Software Usage Guide - Index Builder",
        "parent_header": [
          "mica - README"
        ],
        "type": "Text_excerpt",
        "value": "Index builder is the essential first step to preprocess a reference\nsequence (FASTA format) for the alignment software. It\ngenerates a 2BWT Index.\n\n    > Limitations\n    -------------\n    Please take note of the following restriction on the index builder\n    1.  Builder assumes the input is a well formatted FASTA file.\n    2.  There can be multiple sequences within the FASTA file; however,\n        the total length of the reference sequences cannot exceed 2^32 - 1.\n    3.  No more than 254 sequences in the FASTA file.\n    4.  Characters other than A, C, G and T will be considered invalid characters.\n        Any segment of more than 10 consecutive invalid characters will be removed.\n        All the rest of the invalid characters will be replaced by \"G\".\n\nTo invoke the builder, follow the step:\n\n    % ./soap2-dp-builder <FASTA sequence file>\n\nE.g.,\n    % ./soap2-dp-builder hg19.fa\n\nIn this example, mica-index-builder-step1 will build up a 2BWT index for the sequence \n\"hg19.fa\". The output index will be \"hg19.fa.index.*\". mica-index-builder-step2 will\nin addition build up a 1/8 sampled suffix array (SA) for MIC, suffixing \".sa8\".\nThere should be 17 files with the same prefix created.\n"
      },
      "source": "https://raw.githubusercontent.com/aquaskyline/MICA-aligner/master/README",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Software Usage Guide - Pair-End Alignment",
        "parent_header": [
          "mica - README"
        ],
        "type": "Text_excerpt",
        "value": "The alignment software takes in the 2BWT index and two FASTA/FASTQ\nfile contains equal number of short reads for pair-end alignment.\nThere are several options to control the alignment process.\n\n    > Limitations\n    -------------\n    1.  It finds alignment with up to 5 mismatches single character.\n    2.  It supports reads of any length between 20-200.\n    3.  It supports reads contains only A, C, G, T.\n\nPlease invoke the alignment software as follows:\n\n    % ./mica pair <index>.index <FASTA/FASTQ read file 1> <FASTA/FASTQ read file 2>  -v <insert size lower limit> -u <insert size upper limit> [option] ...\n    OR\n    % ./mica pair <index>.index -i <Input List File> [option] ...\n\n<index> is the filename of the FASTA reference sequence file you built the index on\n<FASTA/FASTQ read file 1/2> is the filenames of the short reads in FASTA/FASTQ format\n\n    [Mandatory]\n        -v: Lower bound;\n        -u: Upper bound of the insertion size between a pair.\n        A pair will be reported if the insertion size falls\n        between [v,u] and their strands match.\n\n    [Options]\n        -i: Input List File is a plain text file that contains a list of input for the aligner.\n            Following format is expected:\n            <FASTA/FASTQ read file 1> <FASTA/FASTQ read file 2> <insert size lower limit> <insert size upper limit>\n            <FASTA/FASTQ read file 1> <FASTA/FASTQ read file 2> <insert size lower limit> <insert size upper limit>\n            ...\n            Fields are expected to be delimited by space or tab.\n        -m: Maximum #mismatch allowed. [1-5;Default=2]\n        -h: Alignment type. [Default=2]\n            1 : All Valid Pair-end Alignment\n            2 : All Best Pair-end Alignment\n        -b: Output format. [Default=2]\n            2 : SAM 1.4 (Plain)\n            3 : BAM 1.4 (Binary)\n\n\nExamples:\n\n    % ./mica pair ncbi.genome.fa.index reads_A.fa reads_B.fa -m 4 -h 1 -v 0 -u 1000\nIn this example, it will report all-valid pair-end alignment of reads_A.fa \nnd reads_B.fa with at most 4-mismatch; tolerating insertion size of [0,1000].\n\n    > Multi-MIC Support\n    -------------------------\n    mica supports utilising multiple MIC co-processor to speed up the \n    alignment process. Inside the source code of MICA-PE.c, a compile-time\n    configurable items controls the maximum number of MIC cards equipped on the target\n    machine. This can be updated to reflect the number of MIC coprocessors on the systems.\n        \n        // -----------------------------\n        // Compile-time Configurable #2\n        // -----------------------------\n        // Number of MIC card equipped in the machine.\n        // User may set the numOfMICThread to 0 in mica-pe.ini to disable\n        // a particular MIC card.\n        #define NUM_MIC_EQUIPPED            3\n    \n    NOTE: RECOMPILATION OF THE BINARY IS REQUIRED AFTER THE ABOVE CHANGE.\n\n    Apart from the number of MIC hardware equiped, mica allows user to control\n    how many thread to be spawn within each MIC cards. It's controlled by the runtime ini\n    configuration. Inside mica-pe.ini, \n    the parameter NumOfMICThreads_x controls the number MIC threads to be spawn on MIC#x.\n\n        [MultipleThreading]\n        # Number of MIC threads to be used by the MICA\n        NumOfMICThreads   = 224;\n        NumOfMICThreads_1 = 224;\n        NumOfMICThreads_2 = 224;\n        ...\n        NumOfMICThreads_n = 224;\n\n    By setting this value to k, MICA will configure OpenMP to spawn k threads on the MIC co-processor\n    to perform alignment. If k = 0, the corresponding MIC co-processor will be\n    disabled and not used.\n\n"
      },
      "source": "https://raw.githubusercontent.com/aquaskyline/MICA-aligner/master/README",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/aquaskyline/MICA-aligner/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "aligner, alignments, bioinformatics, computational-biology, intel-mic"
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MICA-aligner"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "aquaskyline"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 3716149,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 223602,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 36916,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 35305,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Objective-C",
        "size": 31720,
        "type": "Programming_language",
        "value": "Objective-C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Groff",
        "size": 29318,
        "type": "Programming_language",
        "value": "Groff"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Lua",
        "size": 24490,
        "type": "Programming_language",
        "value": "Lua"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 11976,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Tcl",
        "size": 11347,
        "type": "Programming_language",
        "value": "Tcl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Java",
        "size": 6893,
        "type": "Programming_language",
        "value": "Java"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "TeX",
        "size": 4217,
        "type": "Programming_language",
        "value": "TeX"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 2561,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/aquaskyline/MICA-aligner/master/README"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Hardware Requirement",
        "parent_header": [
          "mica - README"
        ],
        "type": "Text_excerpt",
        "value": "Recommended system requirement\n- A quad core CPU\n- 1+ Co-Processor Intel\u00ae Many Integrated Core Architecture\n- Necessary dynamic libraries searchable in environment setting: \"LD_LIBRARY_PATH\"\n- 32GB main memory\n- 64-bit environment\n\n"
      },
      "source": "https://raw.githubusercontent.com/aquaskyline/MICA-aligner/master/README",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 09:36:17",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Software Usage Guide - Index Builder",
        "parent_header": [
          "mica - README"
        ],
        "type": "Text_excerpt",
        "value": "Index builder is the essential first step to preprocess a reference\nsequence (FASTA format) for the alignment software. It\ngenerates a 2BWT Index.\n\n    > Limitations\n    -------------\n    Please take note of the following restriction on the index builder\n    1.  Builder assumes the input is a well formatted FASTA file.\n    2.  There can be multiple sequences within the FASTA file; however,\n        the total length of the reference sequences cannot exceed 2^32 - 1.\n    3.  No more than 254 sequences in the FASTA file.\n    4.  Characters other than A, C, G and T will be considered invalid characters.\n        Any segment of more than 10 consecutive invalid characters will be removed.\n        All the rest of the invalid characters will be replaced by \"G\".\n\nTo invoke the builder, follow the step:\n\n    % ./soap2-dp-builder <FASTA sequence file>\n\nE.g.,\n    % ./soap2-dp-builder hg19.fa\n\nIn this example, mica-index-builder-step1 will build up a 2BWT index for the sequence \n\"hg19.fa\". The output index will be \"hg19.fa.index.*\". mica-index-builder-step2 will\nin addition build up a 1/8 sampled suffix array (SA) for MIC, suffixing \".sa8\".\nThere should be 17 files with the same prefix created.\n"
      },
      "source": "https://raw.githubusercontent.com/aquaskyline/MICA-aligner/master/README",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Software Usage Guide - Pair-End Alignment",
        "parent_header": [
          "mica - README"
        ],
        "type": "Text_excerpt",
        "value": "The alignment software takes in the 2BWT index and two FASTA/FASTQ\nfile contains equal number of short reads for pair-end alignment.\nThere are several options to control the alignment process.\n\n    > Limitations\n    -------------\n    1.  It finds alignment with up to 5 mismatches single character.\n    2.  It supports reads of any length between 20-200.\n    3.  It supports reads contains only A, C, G, T.\n\nPlease invoke the alignment software as follows:\n\n    % ./mica pair <index>.index <FASTA/FASTQ read file 1> <FASTA/FASTQ read file 2>  -v <insert size lower limit> -u <insert size upper limit> [option] ...\n    OR\n    % ./mica pair <index>.index -i <Input List File> [option] ...\n\n<index> is the filename of the FASTA reference sequence file you built the index on\n<FASTA/FASTQ read file 1/2> is the filenames of the short reads in FASTA/FASTQ format\n\n    [Mandatory]\n        -v: Lower bound;\n        -u: Upper bound of the insertion size between a pair.\n        A pair will be reported if the insertion size falls\n        between [v,u] and their strands match.\n\n    [Options]\n        -i: Input List File is a plain text file that contains a list of input for the aligner.\n            Following format is expected:\n            <FASTA/FASTQ read file 1> <FASTA/FASTQ read file 2> <insert size lower limit> <insert size upper limit>\n            <FASTA/FASTQ read file 1> <FASTA/FASTQ read file 2> <insert size lower limit> <insert size upper limit>\n            ...\n            Fields are expected to be delimited by space or tab.\n        -m: Maximum #mismatch allowed. [1-5;Default=2]\n        -h: Alignment type. [Default=2]\n            1 : All Valid Pair-end Alignment\n            2 : All Best Pair-end Alignment\n        -b: Output format. [Default=2]\n            2 : SAM 1.4 (Plain)\n            3 : BAM 1.4 (Binary)\n\n\nExamples:\n\n    % ./mica pair ncbi.genome.fa.index reads_A.fa reads_B.fa -m 4 -h 1 -v 0 -u 1000\nIn this example, it will report all-valid pair-end alignment of reads_A.fa \nnd reads_B.fa with at most 4-mismatch; tolerating insertion size of [0,1000].\n\n    > Multi-MIC Support\n    -------------------------\n    mica supports utilising multiple MIC co-processor to speed up the \n    alignment process. Inside the source code of MICA-PE.c, a compile-time\n    configurable items controls the maximum number of MIC cards equipped on the target\n    machine. This can be updated to reflect the number of MIC coprocessors on the systems.\n        \n        // -----------------------------\n        // Compile-time Configurable #2\n        // -----------------------------\n        // Number of MIC card equipped in the machine.\n        // User may set the numOfMICThread to 0 in mica-pe.ini to disable\n        // a particular MIC card.\n        #define NUM_MIC_EQUIPPED            3\n    \n    NOTE: RECOMPILATION OF THE BINARY IS REQUIRED AFTER THE ABOVE CHANGE.\n\n    Apart from the number of MIC hardware equiped, mica allows user to control\n    how many thread to be spawn within each MIC cards. It's controlled by the runtime ini\n    configuration. Inside mica-pe.ini, \n    the parameter NumOfMICThreads_x controls the number MIC threads to be spawn on MIC#x.\n\n        [MultipleThreading]\n        # Number of MIC threads to be used by the MICA\n        NumOfMICThreads   = 224;\n        NumOfMICThreads_1 = 224;\n        NumOfMICThreads_2 = 224;\n        ...\n        NumOfMICThreads_n = 224;\n\n    By setting this value to k, MICA will configure OpenMP to spawn k threads on the MIC co-processor\n    to perform alignment. If k = 0, the corresponding MIC co-processor will be\n    disabled and not used.\n\n"
      },
      "source": "https://raw.githubusercontent.com/aquaskyline/MICA-aligner/master/README",
      "technique": "header_analysis"
    }
  ]
}