{
  "application_domain": [
    {
      "confidence": 24.81,
      "result": {
        "type": "String",
        "value": "Natural Language Processing"
      },
      "technique": "supervised_classification"
    },
    {
      "confidence": 10.31,
      "result": {
        "type": "String",
        "value": "Audio"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Reference",
        "type": "Text_excerpt",
        "value": "Owen Kaser and Daniel Lemire, Strongly universal string hashing is fast, Computer Journal (2014) 57 (11): 1624-1638. http://arxiv.org/abs/1202.4961\n\nDaniel Lemire, Owen Kaser: Recursive n-gram hashing is pairwise independent, at best, Computer Speech & Language, Volume 24, Issue 4, October 2010, Pages 698-710 http://arxiv.org/abs/0705.4676\n\nDaniel Lemire, The universality of iterated hashing over variable-length strings, Discrete Applied Mathematics 160 (4-5), 2012. http://arxiv.org/abs/1008.1715\n\nMu\u0142a, Wojciech, Nathan Kurz, and Daniel Lemire. \"Faster population counts using AVX2 instructions.\" The Computer Journal 61, no. 1 (2018): 111-120. https://academic.oup.com/comjnl/article-abstract/61/1/111/3852071 \n\nAnshumali Shrivastava, Optimal Densification for Fast and Accurate Minwise Hashing. Proceedings of the 34th International Conference on Machine Learning, PMLR 70:3154-3163, 2017. http://proceedings.mlr.press/v70/shrivastava17a.html \n\nTung Mai et.al., On Densification for Minwise Hashing, Uncertainty in Artificial Intelligence, 2020. http://proceedings.mlr.press/v115/mai20a.html \n\nPing Li et.al., Re-randomized Densification for One Permutation Hashing and Bin-wise Consistent Weighted Sampling, 33rd Conference on Neural Information Processing Systems (NIPS), 2019. https://proceedings.neurips.cc/paper/2019/hash/9f067d8d6df2d4b8c64fb4c084d6c208-Abstract.html\n\nXiaoFei Zhao; BinDash, software for fast genome distance estimation on a typical personal laptop. Bioinformatics, 2018. bty651, https://doi.org/10.1093/bioinformatics/bty651\n"
      },
      "source": "https://raw.githubusercontent.com/zhaoxiaofei/BinDash/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/zhaoxiaofei/bindash"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-04-19T15:50:38Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-22T20:12:48Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Fast and precise comparison of genomes and metagenomes (in the order of terabytes) on a typical personal laptop"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.951662789120048,
      "result": {
        "original_header": "How BinDash works:",
        "type": "Text_excerpt",
        "value": "By default, BinDash uses the optimally densified MinHash proposed by Shrivastava. This MinHash technique allows for efficient compression and fast comparison.  \nBasically, compression of a genome is done as follows.\n 1. All k-mers of each genome are selected and then transformed into hash values.\n 2. The range of all possible hash values are partitioned into some bins.\n 3. The smallest hash value in each bin is selected.\n 4. If a bin is empty (i.e., has no hash values), then the smallest hash value from the next non-empty bin is picked (--dens=1). The definition of the next bin is proposed by Shrivastava 2017 (or called optimal densification). Another densification strategy is to map reversely from non-empty bins to empty bins and choose the smallest hash value from non-empty bin to fill the empty bin, as proposed by Mai et.al. 2020 (--dens=2). This new densification strategy has a worse case O(k*log(k)) complexity  while Shrivastava 2017 has a O(k^2) worse case complexity. The last densification strategy is called Re-randomized densification (--dens=3), which rans an additional MinHash step within each previously empty bin after being filled via the optimal densification, see Li et.al. 2019. \n 5. The lowest (i.e., least significant) b-bits of each hash value are picked to form the signature of the genome.\n 6. Two genomes are compared by simply performing b XOR opeations for b bit positions, followed by (b-1) AND operations for these b bit positions. \n 7. By default, BinDash automatically picks the fastest POPCOUNT algorithm for the given array or sketch size based on your machine instructions (e.g. AVX2 or AVX512). \n"
      },
      "source": "https://raw.githubusercontent.com/zhaoxiaofei/BinDash/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9731922964567379,
      "result": {
        "original_header": "Limitations:",
        "type": "Text_excerpt",
        "value": "- The k-mer size has to increase as the corresponding genome size increases. A natural solution is to use k-mer frequency instead of k-mer presence/abasence. However, this natural solution relies on a probabilistic model for k-mer frequency. Such model may be heavily genome-dependent.\n- Some large-scale genome rearrangement (e.g., chromosome duplication) brings very little change to Jaccard Index and mutation distance. Weighted Jaccard index estimation via BagMinHash or DartMinHash can be very useful chromosome duplication (no positional information) while Order MinHash (assume linear, non-fragmented genomes) can be used for kmer positional information.\n \n"
      },
      "source": "https://raw.githubusercontent.com/zhaoxiaofei/BinDash/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9719094130399684,
      "result": {
        "type": "Text_excerpt",
        "value": "BinDash is a command-line software for comparing genomes (including metagenomes and pangenomes) on a typical personal laptop. BinDash is based on **Bin**wise **D**ensified minh**ash** for estimation of mutation rate between genomes. We implemented ***b-bit one-permutation rolling MinHash with optimal/faster/re-randomized densification***.  It is extremely fast and memory efficient. It can handle sequences consisting of terabytes of input data (gzipped or not, in fasta or fastq format).  \nThe basic idea is: the Jaccard index as an accurate proxy of Average Nucleotide Identity(ANI) or mutation rate (1-ANI) according to equation: \n"
      },
      "source": "https://raw.githubusercontent.com/zhaoxiaofei/BinDash/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/zhaoxiaofei/BinDash/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 7
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/zhaoxiaofei/bindash/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "zhaoxiaofei/bindash"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "How to install (simple):"
      },
      "source": "https://raw.githubusercontent.com/zhaoxiaofei/BinDash/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "How to install (simple):",
        "type": "Text_excerpt",
        "value": "Precompiled binaries on modern Linux can be found [here](https://github.com/jianshu93/bindash/releases/tag/v2.1). On MacOS, GNU GCC has to be installed first, we recommend the homebrew install (see below).\n\n```bash\nwget https://github.com/jianshu93/bindash/releases/download/v2.1/BinDash_Linux_x86-64_v2.0.tar.gz\ntar -xzvf BinDash_Linux_x86-64_v2.0.tar.gz\n./bindash --help\n```\n"
      },
      "source": "https://raw.githubusercontent.com/zhaoxiaofei/BinDash/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "If you have conda installed on linux",
        "parent_header": [
          "How to install (simple):"
        ],
        "type": "Text_excerpt",
        "value": "[![install with bioconda](https://img.shields.io/badge/install%20with-bioconda-brightgreen.svg?style=flat)](http://bioconda.github.io/recipes/gsearch/README.html)\n\n```bash\nconda install bindash -c bioconda\n\n```"
      },
      "source": "https://raw.githubusercontent.com/zhaoxiaofei/BinDash/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "if you have homebrew insalled on MacOS",
        "parent_header": [
          "How to install (simple):"
        ],
        "type": "Text_excerpt",
        "value": "```bash\nbrew tap jianshu93/bindash\nbrew update\nbrew install --cc=gcc-13 bindash\n```\n"
      },
      "source": "https://raw.githubusercontent.com/zhaoxiaofei/BinDash/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "How to install from source:",
        "type": "Text_excerpt",
        "value": "```sh\ncd ${PROJECT_ROOT_DIRECTORY}  \nmkdir release && cd release\ncmake -DCMAKE_BUILD_TYPE=Release ..  \nmake # For Windows with MSYS Makefiles, the command might be \"cd ../ && make\" because out-of-source build may or may not be supported on this platform. \n./bindash --help # to see a general help message   \n```\nFor MacOS, the native clang compiler cannot compile without compiling error. It is recommended to install gcc first as follows.\n\n```\n# install homebrew if not already done\nbrew update\nbrew install gcc@13\n\ncd ${PROJECT_ROOT_DIRECTORY}  \nmkdir release && cd release\n\n# Then run cmake as above (a GUI for cmake may also be available for MacOS)\nCC=\"$(brew --prefix)/bin/gcc-13\" CXX=\"$(brew --prefix)/bin/g++-13\" cmake -DCMAKE_INSTALL_PREFIX=. ..\nmake\n```"
      },
      "source": "https://raw.githubusercontent.com/zhaoxiaofei/BinDash/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/zhaoxiaofei/bindash/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "big-data, bioinformatics, dimensionality-reduction, genomic-data-analysis, locality-sensitive-hashing"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Copyright [2018] [XiaoFei Zhao]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n"
      },
      "source": "https://raw.githubusercontent.com/zhaoxiaofei/BinDash/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jianshu93/bindash/master/BinDash_logo.jpg?raw=true"
      },
      "source": "https://raw.githubusercontent.com/zhaoxiaofei/BinDash/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bindash"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "zhaoxiaofei"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 453756,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 30679,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 2263,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 938,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 896,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/zhaoxiaofei/BinDash/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "zhaoxiaofei",
          "type": "User"
        },
        "date_created": "2018-07-18T11:22:17Z",
        "date_published": "2018-07-18T14:41:54Z",
        "description": "Accepts the --version command\r\n\r\nbindash-v1.0.exe.zip is the compiled binary for Windows X64 platform.\r\nbindash-v1.0.mac.zip is the compiled binary for MacOS X64 platform.\r\n",
        "html_url": "https://github.com/zhaoxiaofei/bindash/releases/tag/v1.0",
        "name": "Version 1.0",
        "release_id": 11984483,
        "tag": "v1.0",
        "tarball_url": "https://api.github.com/repos/zhaoxiaofei/bindash/tarball/v1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/zhaoxiaofei/bindash/releases/11984483",
        "value": "https://api.github.com/repos/zhaoxiaofei/bindash/releases/11984483",
        "zipball_url": "https://api.github.com/repos/zhaoxiaofei/bindash/zipball/v1.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "zhaoxiaofei",
          "type": "User"
        },
        "date_created": "2018-06-18T08:15:26Z",
        "date_published": "2018-06-18T08:21:29Z",
        "description": "Integrated only a small parts of libpopcnt into this project instead of using the entire libpopcnt library.\r\nFixed a few bugs (about numerical stability and clustering mode).",
        "html_url": "https://github.com/zhaoxiaofei/bindash/releases/tag/v0.3",
        "name": "Version 0.3",
        "release_id": 11522751,
        "tag": "v0.3",
        "tarball_url": "https://api.github.com/repos/zhaoxiaofei/bindash/tarball/v0.3",
        "type": "Release",
        "url": "https://api.github.com/repos/zhaoxiaofei/bindash/releases/11522751",
        "value": "https://api.github.com/repos/zhaoxiaofei/bindash/releases/11522751",
        "zipball_url": "https://api.github.com/repos/zhaoxiaofei/bindash/zipball/v0.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "zhaoxiaofei",
          "type": "User"
        },
        "date_created": "2018-04-19T16:58:12Z",
        "date_published": "2018-04-23T00:37:01Z",
        "description": "Initial release. \r\n\r\nTODO: refactoring of hpp headers into cpp files.\r\nTODO: implement or use a library for parsing the full POSIX-style command-line parameters.",
        "html_url": "https://github.com/zhaoxiaofei/bindash/releases/tag/v0.2",
        "name": "Version 0.2",
        "release_id": 10665328,
        "tag": "v0.2",
        "tarball_url": "https://api.github.com/repos/zhaoxiaofei/bindash/tarball/v0.2",
        "type": "Release",
        "url": "https://api.github.com/repos/zhaoxiaofei/bindash/releases/10665328",
        "value": "https://api.github.com/repos/zhaoxiaofei/bindash/releases/10665328",
        "zipball_url": "https://api.github.com/repos/zhaoxiaofei/bindash/zipball/v0.2"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependencies:",
        "type": "Text_excerpt",
        "value": " - any C++ compiler supporting the C++11 standard\n - CMake version 2.6 or plus\n - zlib \n"
      },
      "source": "https://raw.githubusercontent.com/zhaoxiaofei/BinDash/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "How to run:",
        "type": "Text_excerpt",
        "value": "The folowing three commands show how to run BinDash:\n```sh\nbindash sketch --outfname=genomeA.sketch genomeA.fasta\nbindash sketch --outfname=genomeB.sketch genomeB.fasta\nbindash dist genomeA.sketch genomeB.sketch # print to stdout\n\n### or if you have a list of genomes, one genome per line in a list file. All versus all\nls *.fasta > name.txt\nbindash sketch --listfname=name.txt --outfname=genome_sketch\nbindash dist --outfname=dist.txt genome_sketch\n\n### query against database genomes\nls *_query.fasta > query.txt\nls *_db.fasta > db.txt\nbindash sketch --listfname=query.txt --outfname=genome_query_sketch\nbindash sketch --listfname=db.txt --outfname=genome_db_sketch\nbindash dist --outfname=dist.txt genome_query_sketch genome_db_sketch\n```\n\nThe output of \"bindash dist\" consists of several lines. \nEach line has these five tab-separated fields: \n - query genome (Q)\n - target genome (T) \n - mutation distance between Q and T\n - p-value for the mutation distance\n - Jaccard Index between Q and T\n\nAccording to our experiments and theoretical analysis, sketch size (the skethchsize64 option) shoule be larger than 188 (that is actual sketch size is larger than ~12,000) to be accurate for genome pairs with ANI above 99.5%\n"
      },
      "source": "https://raw.githubusercontent.com/zhaoxiaofei/BinDash/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 05:36:04",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 57
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ]
}