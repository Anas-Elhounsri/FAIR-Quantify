{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "scATAC-pro"
        ],
        "type": "Text_excerpt",
        "value": "Yu W, Uzun Y, Zhu Q, Chen C, Tan K. [*scATAC-pro: a comprehensive workbench for single-cell chromatin accessibility sequencing data.*](https://genomebiology.biomedcentral.com/articles/10.1186/s13059-020-02008-0) Genome Biology; 2020 \n"
      },
      "source": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/tanlabcode/scATAC-pro"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-03-09T13:03:56Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-23T23:52:53Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A comprehensive tool for processing, analyzing and visulizing single cell chromatin accessibility sequencing data"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9970412145038869,
      "result": {
        "original_header": "scATAC-pro",
        "type": "Text_excerpt",
        "value": "A comprehensive workbench for single cell ATAC-seq data processing, analysis and visualization \n"
      },
      "source": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9945266150927453,
      "result": {
        "original_header": "Workflow",
        "type": "Text_excerpt",
        "value": "scATAC-pro consists of two units, the data processing unit and the downstream analysis unit. The data processing unit takes raw fastq files as input and outputs peak-by-cell count matrix, QC report and genome track files. It consists of the following modules: demultiplexing, adaptor trimming, read mapping, peak calling, cell calling, genome track file generation and quality control assessment. The downstream analysis unit consists of the following modules: dimension reduction, cell clustering, differential accessibility analysis, gene ontology analysis, TF motif enrichment analysis, TF footprinting analysis, linking regulatory DNA sequences with gene promoters, and integration of multiple datasets. We provide flexible options for most of analysis modules. \n"
      },
      "source": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9995007216392963,
      "result": {
        "original_header": "Updates",
        "type": "Text_excerpt",
        "value": "- Now provide [scATAC-pro tutorial in R](https://scatacpro-in-r.netlify.app/index.html) for access QC metrics and perform downstream analysis\n- Current version: 1.5.2\n- Highlighted updates\n    * Be compatible with Seurat v5 (v1.5.2)\n    * **integrate** module takes input as a [SampleSheet](SampleSheet.csv) file, in which sample names, paths of peaks, fragments and cell barcodes files for each sample can be specified. Other parameters for integration are specified in the [configure_user](configure_user.txt) file (v1.5.1)\n    * New module **reprocess_cellranger_output** added, to reprocess 10x scATAC-seq data (including atac in 10x multiome assay) originally processed by cellranger, taking cellranger processed .bam and .fragments.tsv.gz files as input (v1.4.3)\n    * More friendly to single-end sequencing data (v1.4.2)\n    * New module *labelTransfer* added, to do label trasfer (for cell annotation) from cell annotation of scRNA-seq data. First construct a gene by cell activity matrix, then use *FindTransferAnchors* and *TransferData* function from Seurat R package to predicted cell type annotation from the cell annotaiton in scRNA-seq data (v1.4.0)\n    * New module *rmDoublets* added,to remove potential doublets using [DoubletFinder](https://github.com/chris-mcginnis-ucsf/DoubletFinder) algorithm (v1.3.1)\n    * *footprint* module: support comparison of any two sets of cell clusters (v1.3.0)\n    * *integrate*: add VFACS (Variable Features Across ClusterS) option for the integration module,\n      **which reselect highly variable features across cell clusters after an initial clustering, followed by \n        another round of dimension reduction and clustering**, specify *Integrate_By = VFACS* in configure file,\n        rare peaks (accessible in less than 1% of cells) were also removed from the highly variable features list (v1.1.2).\n- Complete update history can be viewd [here](complete_update_history.md) \n"
      },
      "source": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9309016798562181,
      "result": {
        "original_header": "One command for many",
        "type": "Text_excerpt",
        "value": "-   **Input**: \n    -   fastq files for pair-end1 reads(pe1_fastq.gz), pair-end2 reads(pe2_fastq_gz) and cell barcords (index_fastq.gz)  \n    -   **for data generated by 10x, you can just speficy the path to each FASTQ files folder per sample** \n-   **IMPORTANT**: The parameters and options should be specified in a configurartion file in plain text format. Copy and edit the *configure\\_user.txt* file in this repository and then in your terminal run the following commands:\n```\n    $ scATAC-pro -s process \n                 -i pe1.fastq.gz,pe2.fastq.gz,index.fastq.gz(,other_index_fastq.gz) \n                 -c configure_user.txt \n\n    $ scATAC-pro -s downstream \n                 -i output/filtered_matrix/PEAK_CALLER/CELL_CALLER/matrix.mtx (or matrix.rds) \n                 -c configure_user.txt\n\n    ## PEAK_CALLER and CELL_CALLER is specified in your configure_user.txt file\n\n```\n-   If fastq files are generated using 10x genomics platform, you can just specify the path to fastq folder for a sample:\n```\n    $ scATAC-pro -s process \n                 -i PATH_TO_10x_fastqs_directory \n                 -c configure_user.txt \n```\n-   For data processing, if fastq files have been demultiplexed as the required format with the barcode recorded in the name of each read as @barcode:ORIGIN\\_READ\\_NAME , you can skip the demultiplexing step by running the following command:\n```\n    $ scATAC-pro -s process_no_dex \n                 -i pe1_fastq,pe2_fastq\n                 -c configure_user.txt \n```\n-   To reprocess data originally processed by cellranger:\n```\n    $ scATAC-pro -s reprocess_cellranger_output\n                 -i cellranger_generated.bam_file,cellranger_generated_fragments.tsv.gz_file\n                 -c configure_user.txt\n\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/tanlabcode/scATAC-pro/wiki"
      },
      "source": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/tanlabcode/scATAC-pro/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "faq": [
    {
      "confidence": 1,
      "result": {
        "original_header": "FAQs",
        "parent_header": [
          "scATAC-pro"
        ],
        "type": "Text_excerpt",
        "value": "- [How to proceed using 10x cellranger-atac output?](https://github.com/wbaopaul/scATAC-pro/wiki/FAQs)\n- [How to merge different peaks called from different data sets?](https://github.com/wbaopaul/scATAC-pro/wiki/FAQs)\n- [How to reconstruct peak-by-cell matrix after updating peak file?](https://github.com/wbaopaul/scATAC-pro/wiki/FAQs)\n- [How to access QC results in R?](https://scatacpro-in-r.netlify.app/qc_in_r)\n- [How to access or redo downstream analysis in R?](https://scatacpro-in-r.netlify.app/downstream_in_r)\n\n"
      },
      "source": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 8
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/tanlabcode/scATAC-pro/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "tanlabcode/scATAC-pro"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "scATAC-pro"
      },
      "source": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/scripts/process_no_dex.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/scripts/cell_mapping_qc.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/scripts/reConstMtx.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/scripts/rmDoublets.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/scripts/report.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/scripts/downstream.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/scripts/runGO.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/scripts/trimming.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/scripts/qc_per_barcode.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/scripts/integrate.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/scripts/integrate_csv.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/scripts/dex_fastq_single.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/scripts/mergePeaks.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/scripts/read_conf.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/scripts/bam2qc.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/scripts/dex_fastq.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/scripts/process.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/scripts/visualize.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/scripts/mapping_qc.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/scripts/process_with_bam.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/scripts/convert10xbam.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/scripts/runCicero.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/scripts/mapping_bwa.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/scripts/all.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/scripts/split_bam2clusters.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/scripts/process_from_align.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/scripts/report_dynamic.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/scripts/motif_analysis.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/scripts/mapping_bowtie2.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/scripts/get_mtx.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/scripts/footprint.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/scripts/integrate_peak.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/scripts/iter_peak.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/scripts/convert10xbam_short.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/scripts/runDA.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/scripts/labelTransfer.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/scripts/call_cell.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/scripts/clustering.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/scripts/generate_signal.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/scripts/footprint_by_cluster.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/scripts/integrate_mtx.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/scripts/reprocess_cellranger_output.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/scripts/addCB2bam.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/scripts/call_peak.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/scripts/mapping_bowtie.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/scripts/mapping.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/scripts/get_bam4Cells.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/scripts/install/install_dependencies.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "identifier": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://zenodo.org/badge/latestdoi/187909420"
      },
      "source": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/doc/fig1.png"
      },
      "source": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "scATAC-pro"
        ],
        "type": "Text_excerpt",
        "value": "-   Note: It is not necessary to install scATAC-pro from scratch. You can use the docker or singularity version if your system support (see [Run scATAC-pro through docker or singularity](#run-scATAC-pro-through-docker-or-singularity) )\n-   Run the following command in your terminal, scATAC-pro will be installed in YOUR\\_INSTALL\\_PATH/scATAC-pro\\_1.5.2\n\n\n\n    $ git clone https://github.com/wbaopaul/scATAC-pro.git\n    $ cd scATAC-pro\n    $ make configure prefix=YOUR_INSTALL_PATH\n    $ make install\n     "
      },
      "source": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Programming language users should install",
        "parent_header": [
          "scATAC-pro",
          "Dependencies"
        ],
        "type": "Text_excerpt",
        "value": "-   R (&gt;=3.6.1)\n-   Python (&gt;=3.6.0)\n-   Perl (pre-installed in most unix systems)\n"
      },
      "source": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step by step guide to running scATAC-pro",
        "parent_header": [
          "scATAC-pro"
        ],
        "type": "Text_excerpt",
        "value": "-   **IMPORTANT**: you can run scATAC-pro sequentially. The input of a later analysis module is the output of the previous analysis modules. The following tutorial uses fastq files downloaded from [PBMC10k 10X Genomics](https://support.10xgenomics.com/single-cell-atac/datasets/1.1.0/atac_v1_pbmc_10k?) \n    \n-   <u>Run scATAC-pro sequentially (specify PEAK_CALLER = MACS2 and CELL_CALLER = FILTER or other values in the configure_user.txt file) </u>\n\n```\n    $ scATAC-pro -s demplx_fastq \n                 -i pe1_fastq.gz,pe2_fastq.gz,index_fastq.gz(,other_index_fastq.gz, ...) \n                 -c configure_user.txt \n    # or for 10x data\n    $ scATAC-pro -s demplx_fastq \n                 -i pbmc_10x_fastqs/ \n                 -c configure_user.txt \n\n    $ scATAC-pro -s trimming \n                 -i output/demplxed_fastq/pbmc10k.demplxed.PE1.fastq.gz,\n                    output/demplxed_fastq/pbmc10k.demplxed.PE2.fastq.gz\n                 -c configure_user.txt \n\n    $ scATAC-pro -s mapping \n                  -i output/trimmed_fastq/pbmc10k.trimmed.demplxed.PE1.fastq.gz,\n                     output/trimmed_fastq/pbmc10k.trimmed.demplxed.PE2.fastq.gz,\n                  -c configure_user.txt \n\n    $ scATAC-pro -s call_peak \n                 -i output/mapping_result/pbmc10k.positionsort.MAPQ30.bam\n                 -c configure_user.txt \n\n    $ scATAC-pro -s aggr_signal \n                 -i output/mapping_result/pbmc10k.positionsort.MAPQ30.bam \n                 -c configure_user.txt \n                 \n    $ scATAC-pro -s get_mtx \n                 -i output/summary/pbmc10k.fragments.tsv.gz,output/peaks/PEAK_CALLER/pbmc10k_features_BlacklistRemoved.bed \n                 -c configure_user.txt \n\n    $ scATAC-pro -s qc_per_barcode \n                 -i output/summary/pbmc10k.fragments.tsv.gz,output/peaks/PEAK_CALLER/pbmc10k_features_BlacklistRemoved.bed \n                 -c configure_user.txt\n\n    $ scATAC-pro -s call_cell\n                 -i output/raw_matrix/PEAK_CALLER/matrix.mtx (or matrix.rds)\n                 -c configure_user.txt\n                 \n    $ scATAC-pro -s get_bam4Cells\n                 -i output/mapping_result/pbmc10k.positionsort.bam,\n                    output/filtered_matrix/PEAK_CALLER/CELL_CALLER/barcodes.txt\n                 -c configure_user.txt\n    \n    ## after running the above module, you can run module report (list below)\n    ## to generate first page of the summary report\n    $ scATAC-pro -s rmDoublets\n                 -i output/filtered_matrix/PEAK_CALLER/CELL_CALLER/matrix.rds,0.03 (0.03 is the default expected fraction of doublets ) \n                 -c configure_user.txt\n\n    $ scATAC-pro -s clustering\n                 -i output/filtered_matrix/PEAK_CALLER/CELL_CALLER/matrix.rds (or a seurat_obj.rds file ) \n                 -c configure_user.txt\n\n    $ scATAC-pro -s motif_analysis\n                 -i output/filtered_matrix/PEAK_CALLER/CELL_CALLER/matrix.rds (or matrix.mtx, or seurat_obj.rds file) \n                 -c configure_user.txt\n                 \n    $ scATAC-pro -s split_bam\n                 -i output/downstream_analysis/PEAK_CALLER/CELL_CALLER/cell_cluster_table.tsv\n                 -c configure_user.txt\n\n    $ scATAC-pro -s footprint ## supporting comparison two groups of cell clusters, and one-vs-rest\n                 -i 0,1  ## or '0:3,1:2' (group1 consist of cluster0,3, and group2 for cluster1,2)) or 'one,rest' (all one-vs-rest comparison)\n                 -c configure_user.txt\n                 \n    $ scATAC-pro -s runCicero\n                 -i output/downstream_analysis/PEAK_CALLER/CELL_CALLER/seurat_obj.rds\n                 -c configure_user.txt\n\n    $ scATAC-pro -s runDA\n                 -i output/downstream_analysis/PEAK_CALLER/CELL_CALLER/seurat_obj.rds,0:1:3,2  ## group1 consist of cluster 0,1,and 3; group2 cluster2 \n                 -c configure_user.txt\n                 \n    $ scATAC-pro -s runGO\n                 -i output/filtered_matrix/PEAK_CALLER/CELL_CALLER/differential_accessible_features_0:1:3_vs_2.tsv,  \n                 -c configure_user.txt\n                 \n    $ scATAC-pro -s report\n                 -i output/summary\n                 -c configure_user.txt\n                 \n    $ scATAC-pro -s report_dynamic\n                 -i output/summary\n                 -c configure_user.txt\n    ##report_dynamic regnerates dynamic report which can explore chromatin interactions and coverage plots (still in testing), requiring access to a internet browser.\n\n    ## merge peaks with qvlue < 0.01 (be able to filtering by qvalue since v1.5.0) and within 500bp distance of each other            \n    $ scATAC-pro -s mergePeaks\n                 -i peak_file1,peak_file2,...,peak_fileN,500,0.01\n                 -c configure_user.txt\n\n    ## reconstruct matrix using given new peak file\n    $ scATAC-pro -s reConstMtx\n                 -i peakFilePath,fragmentFilePath,barcodesPath,reconstructedMatrixPath(optional)\n                 -c configure_user.txt\n\n\n    ## perform integrated analysis, assuming all data sets are processed by scATAC-pro\n    ## which means each fragments.txt and barcodes.txt files can be found correspondingly            \n    ## the integration methods includes 'VFACS', 'pool', 'seurat', 'cca', 'rpca', 'rlsi' and 'harmony', for instance, \n    ## you can specify the integration method with 'Integrate_By = VFACS' in the configure file\n    $ scATAC-pro -s integrate\n                 -i peak_file1,peak_file2,...,peak_fileN,500,0.01 \n                 -c configure_user.txt\n    \n    or (since v1.5.2)\n    $ scATAC-pro -s integrate\n                 -i SampleSheet.cvs \n                 -c configure_user.txt\n    \n    \n    ## if you have the reconstructed matrix for data set (meaning using the merged peaks)\n    ## you can run the *integrate_mtx* whtich is second part of the module *integrate*            \n\n    $ scATAC-pro -s integrate_mtx\n                 -i reconstructed_mtx_file1,reconstructed_mtx_file2,(reconstructed_mtx_file3...)   \n                 -c configure_user.txt\n\n\n    ## label transfer (cell annotation) from scRNA-seq\n    ## cell annotated with metadata 'Cell_Type' in seurat obj of scRNA-seq data\n    ## the gtf_file is optional\n    $ scATAC-pro -s labelTransfer\n                 -i seurat_obj_atac.rds,seurat_obj_rna.rds(,gtf_file)   \n                 -c configure_user.txt\n```\n\n\n- After clustering, user can interactively visualize and analyze the data with module *visualize* \n\n```\nscATAC-pro -s visualize -i output/downstream_analysis/PEAK_CALLER/CELL_CALLER/VisCello_obj -c configure_user.txt\n\n```\n- Note that the visualization can also be done through R/Rstudio:\n\n```\ndevtools::install_github(\"qinzhu/VisCello\", ref=\"VisCello-atac\") ## install the package \n\nlibrary(VisCello.atac)\n\ncello('output/downstream_analysis/PEAK_CALLER/CELL_CALLER/VisCello_obj') ## launch VisCello in your web browser with prepared data\n```\n\n- More details about the visualization module can be found at [VisCello](https://github.com/qinzhu/VisCello/tree/VisCello-atac)\n"
      },
      "source": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9983025142581903,
      "result": {
        "original_header": "One command for many",
        "type": "Text_excerpt",
        "value": "-   **IMPORTANT**: The parameters and options should be specified in a configurartion file in plain text format. Copy and edit the *configure\\_user.txt* file in this repository and then in your terminal run the following commands:\n```\n    $ scATAC-pro -s process \n                 -i pe1.fastq.gz,pe2.fastq.gz,index.fastq.gz(,other_index_fastq.gz) \n                 -c configure_user.txt \n\n    $ scATAC-pro -s downstream \n                 -i output/filtered_matrix/PEAK_CALLER/CELL_CALLER/matrix.mtx (or matrix.rds) \n                 -c configure_user.txt\n\n    ## PEAK_CALLER and CELL_CALLER is specified in your configure_user.txt file\n\n```\n-   If fastq files are generated using 10x genomics platform, you can just specify the path to fastq folder for a sample:\n```\n    $ scATAC-pro -s process \n                 -i PATH_TO_10x_fastqs_directory \n                 -c configure_user.txt \n```\n-   For data processing, if fastq files have been demultiplexed as the required format with the barcode recorded in the name of each read as @barcode:ORIGIN\\_READ\\_NAME , you can skip the demultiplexing step by running the following command:\n```\n    $ scATAC-pro -s process_no_dex \n                 -i pe1_fastq,pe2_fastq\n                 -c configure_user.txt \n```\n-   To reprocess data originally processed by cellranger:\n```\n    $ scATAC-pro -s reprocess_cellranger_output\n                 -i cellranger_generated.bam_file,cellranger_generated_fragments.tsv.gz_file\n                 -c configure_user.txt\n\n```\n \n- **NOTE**: \n  - Some large mapping index and genome annotation files can be downloaded [here](https://chopri.box.com/s/dlqybg6agug46obiu3mhevofnq4vit4t)\n  - The **output** will be saved under ./output as default\n  - --verbose (or -b) will print the running message on screen, otherwise the message will only be saved under output/logs/MODULE.txt\n  - To access QC metrics and perform downstream analysis in R, see [scATAC-pro tutorial in R](https://scatacpro-in-r.netlify.app/index.html)  \n"
      },
      "source": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/tanlabcode/scATAC-pro/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "scATAC-pro"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "tanlabcode"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 198486,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 118809,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 18651,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 14090,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 7039,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Software packages required",
        "parent_header": [
          "scATAC-pro",
          "Dependencies"
        ],
        "type": "Text_excerpt",
        "value": "**The following packages will be automatically installed if NOT detected by the installation script.**\n\n-   BWA (&gt;=0.7.17), bowtie, bowtie2\n-   MACS2 (&gt;=2.2.5)\n-   samtools (&gt;=1.9)\n-   bedtools (&gt;=2.27.1), bedops, tabix\n-   deepTools (&gt;=3.2.1)\n-   trim\\_galore (&gt;=0.6.3), Trimmomatic (&gt;=0.6.3)\n-   Regulratory Genomics Toolbox (RGT, for footprinting analysis)\n-   g++ compiler, bzip2, ncurses-devel\n-   R packaages: devtools, flexdashboard, png, data.table, Matirx, Rcpp, ggplot2, flexmix, optparse, magrittr, readr, Seurat, bedr, gridExtra, ggrepel, kableExtra, viridis, xlsx, RColorBrewer,pheatmap,motifmatchr, chromVAR, chromVARmotifs, SummarizedExperiment, BiocParallel, DESeq2, clusterProfiler, BSgenome.Hsapiens.UCSC.hg38, BSgenome.Mmusculus.UCSC.mm10, EnsDb.Hsapiens.v86, EnsDb.Mmusculus.v79, VisCello.atac\n"
      },
      "source": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Step by step guide to running scATAC-pro",
        "parent_header": [
          "scATAC-pro"
        ],
        "type": "Text_excerpt",
        "value": "-   **IMPORTANT**: you can run scATAC-pro sequentially. The input of a later analysis module is the output of the previous analysis modules. The following tutorial uses fastq files downloaded from [PBMC10k 10X Genomics](https://support.10xgenomics.com/single-cell-atac/datasets/1.1.0/atac_v1_pbmc_10k?) \n    \n-   <u>Run scATAC-pro sequentially (specify PEAK_CALLER = MACS2 and CELL_CALLER = FILTER or other values in the configure_user.txt file) </u>\n\n```\n    $ scATAC-pro -s demplx_fastq \n                 -i pe1_fastq.gz,pe2_fastq.gz,index_fastq.gz(,other_index_fastq.gz, ...) \n                 -c configure_user.txt \n    # or for 10x data\n    $ scATAC-pro -s demplx_fastq \n                 -i pbmc_10x_fastqs/ \n                 -c configure_user.txt \n\n    $ scATAC-pro -s trimming \n                 -i output/demplxed_fastq/pbmc10k.demplxed.PE1.fastq.gz,\n                    output/demplxed_fastq/pbmc10k.demplxed.PE2.fastq.gz\n                 -c configure_user.txt \n\n    $ scATAC-pro -s mapping \n                  -i output/trimmed_fastq/pbmc10k.trimmed.demplxed.PE1.fastq.gz,\n                     output/trimmed_fastq/pbmc10k.trimmed.demplxed.PE2.fastq.gz,\n                  -c configure_user.txt \n\n    $ scATAC-pro -s call_peak \n                 -i output/mapping_result/pbmc10k.positionsort.MAPQ30.bam\n                 -c configure_user.txt \n\n    $ scATAC-pro -s aggr_signal \n                 -i output/mapping_result/pbmc10k.positionsort.MAPQ30.bam \n                 -c configure_user.txt \n                 \n    $ scATAC-pro -s get_mtx \n                 -i output/summary/pbmc10k.fragments.tsv.gz,output/peaks/PEAK_CALLER/pbmc10k_features_BlacklistRemoved.bed \n                 -c configure_user.txt \n\n    $ scATAC-pro -s qc_per_barcode \n                 -i output/summary/pbmc10k.fragments.tsv.gz,output/peaks/PEAK_CALLER/pbmc10k_features_BlacklistRemoved.bed \n                 -c configure_user.txt\n\n    $ scATAC-pro -s call_cell\n                 -i output/raw_matrix/PEAK_CALLER/matrix.mtx (or matrix.rds)\n                 -c configure_user.txt\n                 \n    $ scATAC-pro -s get_bam4Cells\n                 -i output/mapping_result/pbmc10k.positionsort.bam,\n                    output/filtered_matrix/PEAK_CALLER/CELL_CALLER/barcodes.txt\n                 -c configure_user.txt\n    \n    ## after running the above module, you can run module report (list below)\n    ## to generate first page of the summary report\n    $ scATAC-pro -s rmDoublets\n                 -i output/filtered_matrix/PEAK_CALLER/CELL_CALLER/matrix.rds,0.03 (0.03 is the default expected fraction of doublets ) \n                 -c configure_user.txt\n\n    $ scATAC-pro -s clustering\n                 -i output/filtered_matrix/PEAK_CALLER/CELL_CALLER/matrix.rds (or a seurat_obj.rds file ) \n                 -c configure_user.txt\n\n    $ scATAC-pro -s motif_analysis\n                 -i output/filtered_matrix/PEAK_CALLER/CELL_CALLER/matrix.rds (or matrix.mtx, or seurat_obj.rds file) \n                 -c configure_user.txt\n                 \n    $ scATAC-pro -s split_bam\n                 -i output/downstream_analysis/PEAK_CALLER/CELL_CALLER/cell_cluster_table.tsv\n                 -c configure_user.txt\n\n    $ scATAC-pro -s footprint ## supporting comparison two groups of cell clusters, and one-vs-rest\n                 -i 0,1  ## or '0:3,1:2' (group1 consist of cluster0,3, and group2 for cluster1,2)) or 'one,rest' (all one-vs-rest comparison)\n                 -c configure_user.txt\n                 \n    $ scATAC-pro -s runCicero\n                 -i output/downstream_analysis/PEAK_CALLER/CELL_CALLER/seurat_obj.rds\n                 -c configure_user.txt\n\n    $ scATAC-pro -s runDA\n                 -i output/downstream_analysis/PEAK_CALLER/CELL_CALLER/seurat_obj.rds,0:1:3,2  ## group1 consist of cluster 0,1,and 3; group2 cluster2 \n                 -c configure_user.txt\n                 \n    $ scATAC-pro -s runGO\n                 -i output/filtered_matrix/PEAK_CALLER/CELL_CALLER/differential_accessible_features_0:1:3_vs_2.tsv,  \n                 -c configure_user.txt\n                 \n    $ scATAC-pro -s report\n                 -i output/summary\n                 -c configure_user.txt\n                 \n    $ scATAC-pro -s report_dynamic\n                 -i output/summary\n                 -c configure_user.txt\n    ##report_dynamic regnerates dynamic report which can explore chromatin interactions and coverage plots (still in testing), requiring access to a internet browser.\n\n    ## merge peaks with qvlue < 0.01 (be able to filtering by qvalue since v1.5.0) and within 500bp distance of each other            \n    $ scATAC-pro -s mergePeaks\n                 -i peak_file1,peak_file2,...,peak_fileN,500,0.01\n                 -c configure_user.txt\n\n    ## reconstruct matrix using given new peak file\n    $ scATAC-pro -s reConstMtx\n                 -i peakFilePath,fragmentFilePath,barcodesPath,reconstructedMatrixPath(optional)\n                 -c configure_user.txt\n\n\n    ## perform integrated analysis, assuming all data sets are processed by scATAC-pro\n    ## which means each fragments.txt and barcodes.txt files can be found correspondingly            \n    ## the integration methods includes 'VFACS', 'pool', 'seurat', 'cca', 'rpca', 'rlsi' and 'harmony', for instance, \n    ## you can specify the integration method with 'Integrate_By = VFACS' in the configure file\n    $ scATAC-pro -s integrate\n                 -i peak_file1,peak_file2,...,peak_fileN,500,0.01 \n                 -c configure_user.txt\n    \n    or (since v1.5.2)\n    $ scATAC-pro -s integrate\n                 -i SampleSheet.cvs \n                 -c configure_user.txt\n    \n    \n    ## if you have the reconstructed matrix for data set (meaning using the merged peaks)\n    ## you can run the *integrate_mtx* whtich is second part of the module *integrate*            \n\n    $ scATAC-pro -s integrate_mtx\n                 -i reconstructed_mtx_file1,reconstructed_mtx_file2,(reconstructed_mtx_file3...)   \n                 -c configure_user.txt\n\n\n    ## label transfer (cell annotation) from scRNA-seq\n    ## cell annotated with metadata 'Cell_Type' in seurat obj of scRNA-seq data\n    ## the gtf_file is optional\n    $ scATAC-pro -s labelTransfer\n                 -i seurat_obj_atac.rds,seurat_obj_rna.rds(,gtf_file)   \n                 -c configure_user.txt\n```\n\n\n- After clustering, user can interactively visualize and analyze the data with module *visualize* \n\n```\nscATAC-pro -s visualize -i output/downstream_analysis/PEAK_CALLER/CELL_CALLER/VisCello_obj -c configure_user.txt\n\n```\n- Note that the visualization can also be done through R/Rstudio:\n\n```\ndevtools::install_github(\"qinzhu/VisCello\", ref=\"VisCello-atac\") ## install the package \n\nlibrary(VisCello.atac)\n\ncello('output/downstream_analysis/PEAK_CALLER/CELL_CALLER/VisCello_obj') ## launch VisCello in your web browser with prepared data\n```\n\n- More details about the visualization module can be found at [VisCello](https://github.com/qinzhu/VisCello/tree/VisCello-atac)\n"
      },
      "source": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Run scATAC-pro through docker or singularity",
        "parent_header": [
          "scATAC-pro"
        ],
        "type": "Text_excerpt",
        "value": "In case you have problem in installing dependencies, you can run scATAC-pro without installing dependencies as following:\n\n1. Pull the docker image [here](https://hub.docker.com/r/wbaopaul/scatac-pro), and run it through singularity (which is more friendly with high performance cluster or HPC, and linux server) by running the following commands:\n\n```\n$ singularity pull -F docker://wbaopaul/scatac-pro:latest \n## will generate scatac-pro_latest.sif in current directory\n\n$ singularity exec --bind YOUR_BIND_PATH -H YOUR_WORK_PATH --cleanenv scatac-pro_latest.sif scATAC-pro -s XXX -i XXX -c XXX\n\n```\n\n2. More commonly, use it on a HPC cluster, here is an example script for running mapping step in my case (please change the file paths to yours): \n  - write a script mapping.sh with something essially like this:\n\n```\n#!/bin/bash\nmodule load singularity ## load singularity in your system\n\n## pull the docker image\n## generating scatac-pro_latest.sif in your current directory\nsingularity pull -F docker://wbaopaul/scatac-pro:latest  ## just need run this line once\n\nsingularity exec --bind /mnt/isilon/ --cleanenv -H /mnt/isilon/tan_lab/yuw1/run_scATAC-pro/PBMC10k scatac-pro_latest.sif \\ \nscATAC-pro -s mapping -i fastq_PE1_file,fastq_PE2_file -c configure_user.txt\n\n```\n  - then sumbit your job on your HPC (e.g. qsub or sbatch mapping.sh)\n\n  - **NOTE**: \n    - YOUR_WORK_PATH is your working directory, where the outputs will be saved \n\n    - All inputs including data paths specified in configure_user.txt should be accessible under YOUR_BIND_PATH\n\n    - NOTE: if running the *footprint* module, remember to download the reference data [rgtdata](https://chopri.box.com/s/dlqybg6agug46obiu3mhevofnq4vit4t) folder into YOUR_WROK_PATH\n"
      },
      "source": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "contact",
    "contributors",
    "support",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 02:43:11",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 22
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Detailed Usage",
        "parent_header": [
          "scATAC-pro"
        ],
        "type": "Text_excerpt",
        "value": "See [here](https://scatacpro-in-r.netlify.app/note_module) or in your terminal:\n\n    $ scATAC-pro --help\n    usage : scATAC-pro -s STEP -i INPUT -c CONFIG [-o] [-h] [-v]\n    Use option -h|--help for more information\n\n    scATAC-pro 1.5.2\n    ---------------\n    OPTIONS\n\n       [-s|--step ANALYSIS_STEP] : run an analysis module (or some combination of several modules) of the scATAC-pro workflow, supported modules include:\n          demplx_fastq: perform demultiplexing\n                               input: either fastq files for both reads and index, separated by comma or path to folder of \n                                      10x fastq files like:\n                                      PE1_fastq,PE2_fastq,index1_fastq,inde2_fastq,index3_fastq...or\n                                      PATH_TO_10xfastqs_folder\n                               output: Demultiplexed fastq1 and fastq2 files with index information embedded\n                                       in the read name as:  @index3_index2_index1:original_read_name, saved in\n                                       output/demplxed_fastq/ \n          trimming: trim read adapter\n                               input: demultiplexed fastq1 and fastq2 files\n                               output: trimmed demultiplexed fastq1 and fastq2 files, saved in output/trimmed_fastq/\n          mapping: perform reads alignment\n                             input: fastq files, separated by comma for each paired end\n                             output: position sorted bam file saved in output/mapping_result, mapping qc stat and \n                                     fragment.txt files saved in output/summary\n          call_peak: call peaks using aggregated data\n                               input: BAM file, outputted from the mapping module\n                               output: peaks in plain text format, saved as output/peaks/PEAK_CALLER/\n                                       OUTPUT_PREFIX_features_Blacklist_Removed.bed\n          get_mtx: build raw peak-by-cell matrix\n                             input: fragments.tsv.gz file, outputted from the mapping module, and features/peak file, \n                                    outputted from the call_peak module, separated by a comma\n                             output: sparse peak-by-cell count matrix in Matrix Market format, barcodes and feature files\n                                     in plain text format, saved in output/raw_matrix/PEAK_CALLER/\n          aggr_signal: generate aggregated signal, which can be uploaded to and viewed\n                                 in genome browser\n                                 input: BAM file, outputted from the mapping module\n                                 output: Aggregated data in .bw and .bedgraph file, saved in output/signal/\n          qc_per_barcode: generate quality control metrics for each barcode\n                                    input: fragments.tsv.gz file (outputted from module mapping) and peak/feature file, \n                                           (outputted from module call_peak), separated by comma\n                                     output: qc_per_barcode.txt file, saved in output/summary/\n          call_cell: perform cell calling\n                               input: raw peak-by-barcode matrix file, outputted from the get_mtx module\n                               output: filtered peak-by-cell matrix in Market Matrix format, barcodes and features,\n                                       saved in output/filtered_matrix/PEAK_CALLER/CELL_CALLER/\n          get_bam4Cells: extract bam file for cell barcodes and calculate mapping stats correspondingly\n                               input: A bam file for aggregated data outputted from mapping module and a barcodes.txt file\n                                      outputted from module call_cell, separated by comma\n                               output: A bam file saved in output/mapping_results and mapping stats (optional) saved\n                                         in output/summary for cell barcodes                          \n          process: processing data - including demplx_fastq, mapping, call_peak, get_mtx,\n                                aggr_signal, qc_per_barcode, call_cell and get_bam4Cells\n                                input: either fastq files for both reads and index, separated by comma, or path to folder\n                                       of 10x fastq files like:\n                                       fastq1,fastq2,index_fastq1,index_fastq2, index_fastq3..., or\n                                       PATH_TO_10xfastqs_folder\n                                output: peak-by-cell matrix and all intermediate results \n          process_no_dex: processing data without demultiplexing\n                                input: demultiplexed fastq files for both reads, separated by a comma like:\n                                       fastq1,fastq2; \n                                output: peak-by-cell matrix and all intermediate results \n          process_from_align: processing data from the alignment step (including alignment step)\n                                input: demultiplexed and adapter trimmed fastq files for both reads, separated by a comma like:\n                                       fastq1,fastq2; \n                                output: peak-by-cell matrix and all intermediate results \n          process_with_bam: processing from bam file\n                                input: bam file for aggregated data, outputted from the mapping module \n                                output: filtered peak-by-cell matrix and all intermediate results \n          rmDoublets: remove potential doublets\n                         input: a peak-by-cell matrix file or a seurat object file in .rds format\n                         output: doublets removed  matrix.rds and barcodes.txt file and seurat objects w/ and w/o doublets saved in the input directory (and a umap plot colored by singlet/doubet) \n          clustering: cell clustering\n                               input: filtered peak-by-cell matrix file, outputted from the call_cell module (or a seurat.rds file)\n                               output: seurat objects with clustering label in the metadata (.rds file) and \n                                       barcodes with cluster labels (cell_cluster_table.tsv file), and umap plot colorred\n                                       clustering label, saved in output/downstream_analysiss/PEAK_CALLER/CELL_CALLER/\n          motif_analysis: perform TF motif analysis\n                               input: filtered peak-by-cell matrix file, outputted from the call_cell module, or the seurat_obj.rds file\n                                         outputted from clustering module\n                               output: TF-by-cell enrichment matrix in chromVAR object, a table and heatmap indicating \n                                       TF enrichment for each cell cluster, saved in output/downstream_analysiss/\n                                        PEAK_CALLER/CELL_CALLER/\n          runDA: preform differential accessibility analysis\n                           input: path_to_seurat_object with two groups of clusters to compare, could be like:\n                                  seurat_obj.rds,0:1,2 (will compare cells in cluster 0 or cluster 1 with cells in cluster2 \n                                  for the given seurat object) or\n                                  seurat_obj.rds,0,rest (will compare cells in cluster 0 with the rest of cells) or\n                                  seurat_obj.rds,one,rest (will compare cells in any one of the clusters with the rest of the cells)\n                           output: differential accessibility peaks in a tsv file saved in the same in \n                                   the same folder of the input seurat object\n          runGO: preform GO term enrichment analysis\n                           input: differential accessible features file, outputted from runDA module (.tsv file)\n                           output: enriched GO terms in .xlsx format saved in the same directory as the input file\n          runCicero: run cicero for calculating gene activity score and predicting cis chromatin interactions\n                           input: seurat_obj.rds file outputted from the clustering module\n                           output: cicero gene activity in .rds format and predicted interactions in .txt format, saved\n                                   in output/downstream_analysiss/PEAK_CALLER/CELL_CALLER/\n          split_bam: split bam file into different clusters\n                               input: barcodes with cluster label (cell_cluster_table.tsv file, outputted from \n                                      clustering module\n                               output: .bam file (saved in output/downstream/PEAK_CALLER/CELL_CALLER/data_by_cluster), \n                                       .bw, .bedgraph (saved in output/signal/) file for each cluster\n          footprint: perform TF footprinting analysis, supports comparison between two sets of cell clusters and one cluster vs\n                     the rest of cell clusters (one-vs-rest)\n                               input: 0:1,2  ## cluster0,1 vs cluster2 or 'one,rest' (all one-vs-rest)\n                               output: footprinting summary statistics in tables and heatmap,\n                                       saved in output/downstream/PEAK_CALLER/CELL_CALLER/\n          downstream: perform all downstream analyses, including clustering, motif_analysis, \n                                split_bam (optional) and footprinting analysis (optional)\n                                input: filtered peak-by-cell matrix file, outputted from call_cell module\n                                output: all outputs from each module\n          report: generate summary report in html file\n                            input: directory to QC files, output/summary as default\n                            output: summary report in html format, saved in output/summary and .eps figures for each panel\n                                    saved in output/summary/Figures\n          convert10xbam: convert bam file in 10x genomics format to bam file in scATAC-pro format \n                         input: bam file (position sorted) in 10x format\n                         output: position sorted bam file in scATAC-pro format saved in output/mapping_result,\n                                 mapping qc stat and fragment.txt files saved in output/summary/\n          mergePeaks: merge peaks (called from different data sets) within a given distance (say 200bp), \n                      filtering each peak by qvalue, 0.01 for instance \n                         input: peak files and a distance parameter separated by comma: \n                                peakFile1,peakFile2,...,peakFileN,200,0.01\n                         output: merged peaks saved in file output/peaks/merged.bed\n          reconstMtx: reconstruct peak-by-cell matrix given peak file, fragments.tsv.gz file, barcodes.txt and \n                      an optional path for reconstructed matrix \n                         input: different files separated by comma:\n                                peakFilePath,fragmentFilePath,barcodesPath,reconstructMatrixPath\n                         output: reconstructed peak-by-cell matrix saved in reconstructMatrixPath, \n                                 if reconstructMatrixPath not specified, a sub-folder reConstruct_matrix will be created\n                                 under the same path as the input barcodes.txt file\n          integrate: perform integration of two ore more data sets\n                           input: peak/feature files, a distance parameter and a qvalue cutoff separated by comma: peak_file1,peak_file2,...,peak_fileN,200,0.01\n                           Note: input can be just a SampleSheet.csv file since v1.5.2\n                           output: merged peaks, reconstructed matrix, integrated seurat obj and umap plot, saved in\n                                   output/integrated/\n          integrate_mtx: perform integration of two ore more data matrices given the reconstructed peak-by-cell matrix\n                           input: mtx1,mtx2, separated by comma like, mtx1_path,mtx2_path\n                           output: integrated seurat obj and umap plot, saved in output/integrated/\n          visualize: interactively visualize the data through VisCello\n                         input: VisCello_obj directory, outputted from the clustering module\n                         output: launch VisCello through web browser for interactively visualization\"\n\n          addCB2bam: add cell barcode tag to bam file\n                         input: a bam file generated by scATAC-pro\n                         output: the bam file with column 'CB:Z:cellbarcode' added (saved in the same directory as\n                                 the input bam file)\n      \n          labelTransfer: label transfer (cell annotation) from scRNA-seq data\n                         input: paths for a seurat object for scATAC-seq, a seurat object for scRNA-seq data in .rds format,\n                                and an optional .gtf file for gene annotation, separated by a comma. \n                         output: a updated seurat object for atac with the Predicted_Cell_Type as a metadata variable and\n                                 an umap plot colored by Predicted_Cell_Type, saved in the same directory as the input atac\n                                 seurat object.\n                         NOTE: the cell annotation should be given as a metadata of the seurat object of\n                               scRNA-seq. Both seurat objects should have pca and umap dimemsion reduction \n                               done.\n          reprocess_cellreanger_output: re-process cellranger results \n                         input: cellranger_bam_file,cellranger_fragments.tsv.gz\n                         output: all outputs of in data processing steps\n        \n       -i|--input INPUT : input data, different types of input data are required for different analysis\n       -c|--conf CONFIG : configuration file for parameters (if exist) for each analysis module\n       [-o|--output_dir : folder to save results, default output/ under the current directory; sub-folder will be created automatically for each analysis\n       [-h|--help]: print help infromation on screen\n       [-v|--version]: display current version numbe of scATAC-pro on screen\n       [-b|--verbose]: print running message on screen\n\n"
      },
      "source": "https://raw.githubusercontent.com/tanlabcode/scATAC-pro/master/README.md",
      "technique": "header_analysis"
    }
  ]
}