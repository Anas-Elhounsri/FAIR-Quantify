{
  "application_domain": [
    {
      "confidence": 16.64,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ls-cwi/xheinz"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2014-01-10T17:06:37Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-06-03T21:28:38Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Cross-species module discovery"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Software description",
        "type": "Text_excerpt",
        "value": "**xHeinz** is a software solver that searches for *active subnetwork modules* that are conserved between two species.\nIt uses a branch-and-cut algorithm that finds provably optimal or near-optimal solutions.\n\n*Active subnetwork modules* are sets of genes, one for each species, which:\n- induce a connected subnetwork in a species-specific interaction network,\n- show overall differential behavior, and\n- contain a large number of orthologous genes.\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/ls-cwi/xheinz/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ls-cwi/xheinz/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ls-cwi/xheinz/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ls-cwi/xheinz"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Software description"
      },
      "source": "https://raw.githubusercontent.com/ls-cwi/xheinz/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation instruction for MacOS X 10.9 and 10.8.5",
        "parent_header": [
          "Compilation instructions"
        ],
        "type": "Text_excerpt",
        "value": "In Mavericks the default C\\+\\+ standard library is libc\\+\\+ instead of\nlibstdc\\+\\+. Since the CPLEX library is using libstdc\\+\\+, we are forced to use\nthis as well. However, the provided Clang compiler is not able to compile\nC\\+\\+11 code when using libstdc\\+\\+. That is why we resort to gcc 4.8.\n\nTo install gcc-4.8 via homebrew:\n\n    brew tap homebrew/versions\n    brew install gcc48\n\nIf an outdated version of brew is installed, this step will fail with the\nfollowing error\n\n     Error: undefined method `cxxstdlib_check' for gcc48:Gcc48\n\nIn which case the latest version of brew have to be installed :\n\n    brew update \n\nNote that `brew update` might fail with the following error\n\n    Error: undefined method `to_sym' for nil:NilClas\n\nIn which case it's enough to re-run `brew update`.\n\n\n\nNow LEMON 1.3 can be installed via:\n\n    wget http://lemon.cs.elte.hu/pub/sources/lemon-1.3.tar.gz\n    tar xzvf lemon-1.3.tar.gz\n    cd lemon-1.3\n    cmake -DCMAKE_INSTALL_PREFIX=~/lemon -DCMAKE_CXX_COMPILER=/usr/local/bin/g++-4.8 -DCMAKE_C_COMPILER=/usr/local/bin/gcc-4.8\n    make install\n\nNext step is to install boost:\n\n    brew install boost\n\nNow compile xHeinz from the root of the git repository as follows. Note that\nCPLEX will be auto-detected if it's installed in ~/ILOG.\n\n    mkdir build\n    cd build\n    cmake -DCMAKE_CXX_COMPILER=/usr/local/bin/g++-4.8 -DCMAKE_C_COMPILER=/usr/local/bin/gcc-4.8 ..\n\n\nOn os 10.8.5, the auto-detection of the ILOG install directory failed, and the\ninstall dir must be specified explicitly, e.g. by running the following cmake\ncommand\n\n    cmake \\\n    -DCMAKE_CXX_COMPILER=/usr/local/bin/g++-4.8 \\\n    -DCMAKE_C_COMPILER=/usr/local/bin/gcc-4.8 \\\n    -DCPLEX_INC_DIR=~/ILOG/cplex/include/ \\\n    -DCPLEX_LIB_DIR=~/ILOG/cplex/lib/x86-64_osx/static_pic \\\n    -DCONCERT_LIB_DIR=~/ILOG/concert/lib/x86-64_osx/static_pic \\\n    -DCONCERT_INC_DIR=~/ILOG/concert/include/ ..\n\nNext step is to compile the binary,\n\n     make\n"
      },
      "source": "https://raw.githubusercontent.com/ls-cwi/xheinz/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ls-cwi/xheinz/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "The MIT License (MIT)\n\nCopyright (c) 2014 Thomas Hume, Mohammed El-Kebir, Hayssam Soueidan, Gunnar Klau\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/ls-cwi/xheinz/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "xheinz"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "ls-cwi"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 263580,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 12042,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 5203,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ls-cwi/xheinz/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependencies",
        "parent_header": [
          "Compilation instructions"
        ],
        "type": "Text_excerpt",
        "value": "* Boost (>= 1.49)\n* LEMON 1.3\n* ILOG CPLEX (>= 12.0)\n* Compiler that supports C++11\n"
      },
      "source": "https://raw.githubusercontent.com/ls-cwi/xheinz/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 07:01:46",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ]
}