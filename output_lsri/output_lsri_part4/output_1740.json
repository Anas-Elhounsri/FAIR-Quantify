{
  "acknowledgement": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Acknowledgement",
        "type": "Text_excerpt",
        "value": "ORNA uses the [GATB library](https://github.com/GATB) for graph building and k-mer counting. We are thankful for their support.\n"
      },
      "source": "https://raw.githubusercontent.com/SchulzLab/ORNA/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "application_domain": [
    {
      "confidence": 25.76,
      "result": {
        "type": "String",
        "value": "Natural Language Processing"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "type": "Text_excerpt",
        "value": "**If you use ORNA in the normal mode (without quality of kmer abundance based sorting) in your work please cite:**\n\nDurai DA, Schulz MH. In-silico read normalization with set multicover optimization. Bioinformatics 2018 [full text](https://doi.org/10.1093/bioinformatics/bty307)\n\n**If you use ORNA-Q/S (with quality or kmer abundance based sorting), please cite:**\n\nDurai DA, Schulz MH. Improving in-silico normalization using read weights. Scientific Reports 2019 [full text](https://www.nature.com/articles/s41598-019-41502-9)\n"
      },
      "source": "https://raw.githubusercontent.com/SchulzLab/ORNA/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/SchulzLab/ORNA"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contact",
        "type": "Text_excerpt",
        "value": "For questions or suggestions regarding ORNA contact\n\n* Dilip A Durai (ddurai_at_mmci.uni-saarland.de)\n* Marcel H Schulz (marcel.schulz_at_em.uni-frankfurt.de)\n"
      },
      "source": "https://raw.githubusercontent.com/SchulzLab/ORNA/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2016-11-25T08:52:34Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-01-05T07:31:33Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Fast in-silico normalization algorithm for NGS data "
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9990323728576144,
      "result": {
        "original_header": "About",
        "type": "Text_excerpt",
        "value": "The de bruijn graph (DBG) is one of the most commonly used data structures for assembly of sequencing data. Reads from the sequencer are chopped into small words of size k (k-mers) which form the nodes of the DBG. Two nodes are connected by an edge if they have a k-1 overlap. Each edge can be labelled with a k+1-mer formed by merging the kmers of the two nodes. For instance, if an edge connects two nodes of kmers ATCG and TCGT, the edge can be labelled as ATCGT. Assembly is generated by traversing paths in this graph. With the advances in deep sequencing technologies, assembling high coverage datasets has become a challenge in terms of memory and runtime requirements. Hence, read normalization, a lossy read filtering approach is gaining a lot of attention. Although current normalization algorithms are efficient, they provide no guarantee to preserve important k-mers that form connections between different genomic regions in the graph. There is a possibility that the resultant assembly is fragmented. In this work, normalization is phrased as a set multicover problem on reads and a linear time heuristic algorithm is proposed, named ORNA (Optimized Read Normalization Algorithm). ORNA normalizes to the minimum number of reads required to retain all labels (k+1-mers) and inturn all kmers and relative label abundances from the original dataset. Hence, no connections from the original graph are lost and coverage information is preserved. \n \n"
      },
      "source": "https://raw.githubusercontent.com/SchulzLab/ORNA/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9423604221023615,
      "result": {
        "original_header": "Enhancements to ORNA",
        "type": "Text_excerpt",
        "value": "We have implemented two additional options in ORNA to improve the reduction performance using either abundance values of kmers in reads or base quality scores.   \n"
      },
      "source": "https://raw.githubusercontent.com/SchulzLab/ORNA/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9451015799855514,
      "result": {
        "original_header": "ORNA-Q (parameter: -sorting 1):",
        "type": "Text_excerpt",
        "value": "In this mode, ORNA apart from preserving all the labels from the original dataset, also maximizes the total read quality score for the normalized dataset. The read quality score of a read is defined as the sum of phred qualities of bases in the read. ORNA-Q sorts the input dataset using read quality scores using a counting sort procedure before reduction.      \n"
      },
      "source": "https://raw.githubusercontent.com/SchulzLab/ORNA/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9532441767801986,
      "result": {
        "original_header": "ORNA-K (parameter: -ksorting 1)",
        "type": "Text_excerpt",
        "value": "In this mode, the normalization algorithm maximizes the total read abundance score of the normalized dataset (apart from preserving all labels from the original dataset). The read abundance score of a read is defined as the median of abundances of kmers present in the read. ORNA-K sorts the input dataset using the median kmer abundances of the reads in the dataset and then uses ORNA for reduction. \n \n"
      },
      "source": "https://raw.githubusercontent.com/SchulzLab/ORNA/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9824095376114658,
      "result": {
        "original_header": "ORNA Algorithm",
        "type": "Text_excerpt",
        "value": "*\tORNA uses the GATB version 1.2.2 to store the kmer information\n*\tIt reduces the abundance of a kmer to a value which is equal to the logarithmic transformation of the abundance. The base b of the logarithm is provided by the user.\n*\tORNA was tested on two de bruijn graph based assemblers namely Oases and TransABySS and also worked for the assembly of metagenomics data.\t\t\n \n"
      },
      "source": "https://raw.githubusercontent.com/SchulzLab/ORNA/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9991884613006475,
      "result": {
        "original_header": "Points to be noted",
        "type": "Text_excerpt",
        "value": "*\tCurrently, as ORNA retains all the kmers from the original dataset, it would also retain erroneous kmers. Thus ORNA reduces more reads, like any other tool for read reduction, when the data is error corrected. In case of RNA-seq or other non-uniform data we suggest to use the [SEECER](http://sb.cs.cmu.edu/seecer/) algorithm that proved to work well with ORNA.\n*\tORNA-Q, ORNA-K and ORNA's paired-end mode currently does not support multithreading. Work is in progress for this and will be included in the future versions of ORNA.\n \n"
      },
      "source": "https://raw.githubusercontent.com/SchulzLab/ORNA/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9581846557888777,
      "result": {
        "original_header": "ORNA parameters",
        "type": "Text_excerpt",
        "value": "short | explanation | note\n-----------|------------|--------\n-help | shows the help message |\n-sorting | (0 or 1) quality based sorting of input data| Default 0\n-ksorting | (0 or 1) kmer abundance based sorting of input data| Default 0\n-base | Base value for the logarithmic function| Default 1.7\n-kmer | the value of k for kmer size | Default 21\n-input | Input fasta file (for single end mode)| \n-pair1 | First mate of the pair (for paired-end mode) |\n-pair2 | Second mate of the pair (for paired-end mode) |\n-output | Prefix of the output file| Default \"Normalized\"\n-nb-cores | number of cores (does not work for paired end mode)| Default 1\n-type | type of the output file (fasta/fastq)| Default fasta \nkmer value: <br />\nThis parameter represents the kmer size to be used for reduction. As we aim at preserving all the edge lables ((k+1)-mers) from the original dataset, internally the kmer size given by the user would be incremented by 1. For instance, if the user provides a kmer size of 21, then ORNA would increment the kmer size to 22 for all its calculations. All the analysis in the paper were done using a kmer size of 21 for reads having length of 50bps and 76bps. If you are running an DBG assembly afterwards, we recommend to use the smallest k-mer used in the assembler. Depending on the dataset memory and runtime requirements will change depending on k. \nbase: <br />\nThis parameter represents the base of the logarithm function used to decide the new abundance of kmer. For instance if the original abundance of a kmer is 1000 and a base of 10 is selected as a parameter then the new abundance is set to log<sub>10</sub>1000 = 3. The higher the base parameter the more reduction of the reads. According to the analysis done in ORNA paper, a base of 1.7 seems to be a good compromise between data reduction and little loss in assembly quality.\nMore examples can be found in this [answer](https://github.com/SchulzLab/ORNA/issues/2).\n \n"
      },
      "source": "https://raw.githubusercontent.com/SchulzLab/ORNA/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Download",
        "type": "Text_excerpt",
        "value": "There are two ways how you can access and use ORNA. Either download from github or through bioconda.\n\nIf you use bioconda then installation is as easy as:\n```\n  conda install ORNA\n```\n\nAlternatively, the software can be downloaded by using the following command\n```\n\tgit clone https://github.com/SchulzLab/ORNA\n```\n\nThe downloaded folder should contain the following files and folders:\n* install.sh\n* gatb-core (it will be empty. Files would be copied in once the install script is run)\n* src(folder) (contains the source code for ORNA)\n"
      },
      "source": "https://raw.githubusercontent.com/SchulzLab/ORNA/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/SchulzLab/ORNA/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/SchulzLab/ORNA/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SchulzLab/ORNA"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/SchulzLab/ORNA/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/SchulzLab/ORNA/master/install.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "* Run the following command for installation if you downloaded it from github. \n```\n  bash install.sh\n```\n* The above command should create a build folder. The executable of ORNA will be in build/bin \n\n\n"
      },
      "source": "https://raw.githubusercontent.com/SchulzLab/ORNA/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.8990398058845578,
      "result": {
        "original_header": "Version",
        "type": "Text_excerpt",
        "value": "Version 0.4\n \n"
      },
      "source": "https://raw.githubusercontent.com/SchulzLab/ORNA/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.864625254169794,
      "result": {
        "original_header": "ORNA parameters",
        "type": "Text_excerpt",
        "value": "`./bin/ORNA -help` \n"
      },
      "source": "https://raw.githubusercontent.com/SchulzLab/ORNA/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/SchulzLab/ORNA/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "metagenomic-analysis, metagenomics, ngstools, normalization, rna-seq, rna-seq-analysis"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2016 \n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/SchulzLab/ORNA/master/License.md",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ORNA"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "SchulzLab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 29053,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 3743,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 302,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/SchulzLab/ORNA/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "ddurai",
          "type": "User"
        },
        "date_created": "2019-02-04T12:49:40Z",
        "date_published": "2019-02-04T13:08:43Z",
        "description": "The latest version of ORNA included two new modes namely ORNA-Q and ORNA-K. ORNA-Q ensures that reads having high quality bases .i.e bases having a high Phred score are given high priority during the process of selection. Similarly, ORNA-K ensures that reads having high abundant k-mers are given priority over other reads during the process of selection",
        "html_url": "https://github.com/SchulzLab/ORNA/releases/tag/v2.0",
        "name": "ORNA-Q and ORNA-K ",
        "release_id": 15349816,
        "tag": "v2.0",
        "tarball_url": "https://api.github.com/repos/SchulzLab/ORNA/tarball/v2.0",
        "type": "Release",
        "url": "https://api.github.com/repos/SchulzLab/ORNA/releases/15349816",
        "value": "https://api.github.com/repos/SchulzLab/ORNA/releases/15349816",
        "zipball_url": "https://api.github.com/repos/SchulzLab/ORNA/zipball/v2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "ddurai",
          "type": "User"
        },
        "date_created": "2017-08-23T14:12:32Z",
        "date_published": "2018-01-01T21:57:31Z",
        "description": "This is the first release of ORNA and can be used to reproduce results from the paper ",
        "html_url": "https://github.com/SchulzLab/ORNA/releases/tag/v1.0",
        "name": "ORNA: In silico read normalization using set-multicover optimization",
        "release_id": 9074208,
        "tag": "v1.0",
        "tarball_url": "https://api.github.com/repos/SchulzLab/ORNA/tarball/v1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/SchulzLab/ORNA/releases/9074208",
        "value": "https://api.github.com/repos/SchulzLab/ORNA/releases/9074208",
        "zipball_url": "https://api.github.com/repos/SchulzLab/ORNA/zipball/v1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Pre-requisite",
        "type": "Text_excerpt",
        "value": "Linux operating system with gcc version >=4.7<br/>\nAll the analysis for the manuscript was performed on Debain 8 operating system\n"
      },
      "source": "https://raw.githubusercontent.com/SchulzLab/ORNA/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running ORNA",
        "type": "Text_excerpt",
        "value": "* To run ORNA, execute the following command from the installation directory\n```\n  ./build/bin/ORNA -input Dataset_name -output Output -base LogBase -kmer kmerSize -nb-cores NumberOfThreads -type fasta\n```\n* Run ORNA in paired-end mode from the installation directory \n```\n  ./build/bin/ORNA -pair1 first_pair -pair2 second_pair -output Output -base LogBase -kmer kmerSize -type fasta\n```\n* For instance, if the dataset to be normalized is named as input.fa, the following command would normalize the dataset using a log base of 1.7 and a kmer size of 21\n```\n  ./build/bin/ORNA -input input.fa -output output.fa -base 1.7 -kmer 21 -nb-cores 1\n```\n"
      },
      "source": "https://raw.githubusercontent.com/SchulzLab/ORNA/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 08:08:15",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 22
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "When to use ORNA",
        "type": "Text_excerpt",
        "value": "ORNA is a read normalization software developed in spirit of [Diginorm](https://github.com/dib-lab/2012-paper-diginorm). ORNA is computationally inexpensive and it guarantees the preservation of all kmers from the original dataset. It can be used if the user has a high coverage dataset but does not have enough computational power (in particular memory but also limited time) in order to conduct a *de novo* assembly, because it removes the redundancy in your data. It can also be used to merge many sequencing datasets. The user must be aware that using ORNA (or in that case any normalization software) might have a significant impact on the assemblies produced as it is highly dependent on the dataset.\n"
      },
      "source": "https://raw.githubusercontent.com/SchulzLab/ORNA/master/README.md",
      "technique": "header_analysis"
    }
  ]
}