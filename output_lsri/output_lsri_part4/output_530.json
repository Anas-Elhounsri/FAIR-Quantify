{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "References",
        "parent_header": [
          "GTA_Hunter"
        ],
        "type": "Text_excerpt",
        "value": "- Altschul SF, et al. 1997. Gapped BLAST and PSI-BLAST: a new generation of protein database search programs. Nucleic Acids Res 25: 3389-3402\n- Chou KC. 2001. Prediction of protein cellular attributes using pseudo\u2010amino acid composition. Proteins 43: 246-255.\n- Ester M, Kriegel H-P, Sander J, Xu X. 1996. A density-based algorithm for discovering clusters a density-based algorithm for discovering clusters in large spatial databases with noise. In Simoudis E, Han J, Fayyad U editors. Proceedings of the Second International Conference on Knowledge Discovery and Data Mining: AAAI Press. p. 226-231.\n- Kogay, R., Neely, T. B., Birnbaum, D. P., Hankel, C. R., Shakya, M., & Zhaxybayeva, O. (2019). Machine-learning classification suggests that many alphaproteobacterial prophages may instead be gene transfer agents. Genome biology and evolution, 11(10), 2941-2953.\n"
      },
      "source": "https://raw.githubusercontent.com/ecg-lab/GTA-Hunter-v1/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ecg-lab/GTA-Hunter-v1"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-07-03T20:16:26Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-08T21:08:11Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.945366972971952,
      "result": {
        "original_header": "GTA_Hunter",
        "type": "Text_excerpt",
        "value": "  GTA_Hunter is a 'support-vector machine' (SVM) classifier that distinguishes gene transfer agent (GTA) genes from their viral homologs. \n  \n  The classifier was developed to detect GTA genes that are homologous to 11 of the genes that encode the GTA in *Rhodobacter capsulatus* (RcGTA) (see Kogay et al, 2019). However, the classifier can be trained to detect other RcGTA genes, other GTAs, or even other virus-like elements, as long as there is training data available and the two classes have distinct amino acid composition. \n \n"
      },
      "source": "https://raw.githubusercontent.com/ecg-lab/GTA-Hunter-v1/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ecg-lab/GTA-Hunter-v1/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ecg-lab/GTA-Hunter-v1/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ecg-lab/GTA-Hunter-v1"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "GTA_Hunter"
      },
      "source": "https://raw.githubusercontent.com/ecg-lab/GTA-Hunter-v1/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9845649355590819,
      "result": {
        "original_header": "Python packages",
        "type": "Text_excerpt",
        "value": "- NumPy v. 1.13.1\n- CVXOPT v. 1.1.8\n- matplotlib v. 2.1.0\n- pandas v. 0.21.0\n- Biopython v. 1.69\n \n"
      },
      "source": "https://raw.githubusercontent.com/ecg-lab/GTA-Hunter-v1/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ecg-lab/GTA-Hunter-v1/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2019 ecg-lab\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/ecg-lab/GTA-Hunter-v1/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "GTA-Hunter-v1"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "ecg-lab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 63987,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ecg-lab/GTA-Hunter-v1/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "System Requirements",
        "parent_header": [
          "GTA_Hunter"
        ],
        "type": "Text_excerpt",
        "value": " `Python v3.5.1` \n"
      },
      "source": "https://raw.githubusercontent.com/ecg-lab/GTA-Hunter-v1/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Third party requirements",
        "parent_header": [
          "GTA_Hunter"
        ],
        "type": "Text_excerpt",
        "value": "- BLAST v. 2.2.31+\n\n**GTA_Hunter.py is a command-line program with the following options:**\n\n```\nusage: GTA_Hunter_blast.py [-h] [-b] [-g GTA] [-v VIRUS] [-q QUERIES]\n                           [-o OUTDIR] [-k [KMER]] [-p [PSEAAC]] [-y] [-m]\n                           [-O] [-f FOLDER] [-W] [-w WEIGHT WEIGHT]\n                           [-t CLUSTER_TYPE] [-d DIST] [-c C] [-x [XVAL]]\n                           [-e KERNEL KERNEL] [-s]\n\nGene Classification Using SVM.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -b, --blast           Run BLASTP search to first identify GTA homologs for\n                        the classification.\n  -g GTA, --GTA GTA     The FASTA-formatted (.faa) \"true GTA\" sequences\n                        used for training.\n  -v VIRUS, --virus VIRUS\n                        The FASTA-formatted (.faa) \"true viruses\"\n                        sequences used for training.\n  -q QUERIES, --queries QUERIES\n                        The FASTA-formatted (.faa) sequences to be\n                        classified.\n  -o OUTDIR, --outdir OUTDIR\n                        The folder path in which to store output.\n  -k [KMER], --kmer [KMER]\n                        The size of k-mer (default=4).\n  -p [PSEAAC], --pseaac [PSEAAC]\n                        Expand feature set to include pseudo amino acid\n                        composition (default=3). As the parameter, specify\n                        value of lambda. Weight = 0.05 (after Chou 2001).\n  -y, --physico         Expand feature set to include physicochemical\n                        properties of amino acids.\n  -m, --min             Print bare minimum results.\n  -O, --optimal         Use the optimal parameters for the RcGTA gene homolog\n                        classification as listed in Table 2 in Kogay et al\n                        2019.\n  -f FOLDER, --folder FOLDER\n                        Provide a folder with one or multiple proteomes (*.faa\n                        files).\n  -W                    Weight training datasets. Pre-calculated distances \n  \t\t\twill be used automatically.\n  -w WEIGHT WEIGHT, --weight WEIGHT WEIGHT\n                        Weight training datasets. Specify the two pairwise\n                        distance files needed for weighting (first file for\n                        GTAs, second file for viruses).\n  -z CLUSTER_TYPE, --cluster_type CLUSTER_TYPE\n                        Specify 'farthest' or 'nearest' neighbors clustering\n                        (default='farthest').\n  -t DIST, --dist DIST  Specify the cutoff distance for clustering in the\n                        weighting scheme (default=0.01).\n  -c C, --soft_margin C\n                        The soft margin for the SVM (default=1.0).\n  -x [XVAL], --xval [XVAL]\n                        Performs cross validation of training set. Specify\n                        folds over 10 repetitions (default=5).\n  -e KERNEL KERNEL, --kernel KERNEL KERNEL\n                        (for advanced users) Specify kernel to be used and sigma for the gaussian kernel.\n                        (options: 'linear', 'gaussian') (default='linear', 0).\n  -s, --svs             Show support vectors.\n  \n```\n"
      },
      "source": "https://raw.githubusercontent.com/ecg-lab/GTA-Hunter-v1/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 03:47:11",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "How to use it - Example 1: Classify homologs of RcGTA-like gene using the provided training data",
        "parent_header": [
          "GTA_Hunter"
        ],
        "type": "Text_excerpt",
        "value": "In this example, we will classify five homologs of the RcGTA portal protein (g3) using k-mer of size 3 as a feature and setting raw softness of the SVM margin to 100. The sequences to classify are in FASTA format in one file, and are located in the \"example_run\" folder; the training data is in \"data/training\" folder. \n\n```\npython GTA_Hunter.py -g data/training/gta/3_gta.faa -v data/training/viral/3_viral.faa -c 10000 -w data/training/gta/3_gta.dist data/training/viral/3_viral.dist -t 0.02 -k 3 -q example_run/g3_example.faa\n```\n\nIn the output, the first two sequences are classified as a \"GTA\" and the remaining three are classified as a \"virus\":\n\n```\nGene                                                                                           Score          Classification    GTA Gene\n>WP_100283140.1 phage portal protein [Sphingomonas sp. Cra20]                                   -0.824313      GTA               3\n>WP_100367008.1 phage portal protein [Yoonia maricola]                                          -0.947548      GTA               3\n>WP_102855116.1 phage portal protein [Phaeobacter inhibens]                                     0.873095       virus             3\n>WP_121219731.1 phage portal protein [Oceanibaculum indicum]                                    0.965013       virus             3\n>WP_128262196.1 phage portal protein [Bradyrhizobium yuanmingense]                              0.702121       virus             3\ntime to run: 10.004424810409546\n```\n\nThe obtained scores in the \"Score\" column are derived as described at Figure 2 in Kogay et al. 2019.\n\nThe output is in the file \"example_output/example_1.txt\".\n"
      },
      "source": "https://raw.githubusercontent.com/ecg-lab/GTA-Hunter-v1/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "How to use it - Example 2: Cross-validate classifier's performance for a gene",
        "parent_header": [
          "GTA_Hunter"
        ],
        "type": "Text_excerpt",
        "value": "In this example, we will use five-fold cross-validation to examine the accuracy of the classifier to separate viral and GTA homologs of gene g4 with a specific set of parameters.\n```\npython GTA_Hunter.py -g data/training/gta/4_gta.faa -v data/training/viral/4_viral.faa -c 10000 -w data/training/gta/4_gta.dist data/training/viral/4_viral.dist -t 0.02 -k 3 -p -x 5\n```\nIn the output, we found that on average all sequences in the training dataset are correctly classified, indicating that classifer has 100% of accuracy for the gene g4.\n\n```\nWe correctly classified (on average) 62.00/62 GTA and 465.00/465 Viral genes.\ntime to run: 61.76529502868652\n```\n\nThe output is in the file \"example_output/example_2.txt\".\n"
      },
      "source": "https://raw.githubusercontent.com/ecg-lab/GTA-Hunter-v1/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "How to use it - Example 3: Find homologs of RcGTA-like gene in a genome and classify them using the provided training data and the most optimal SVM parameters",
        "parent_header": [
          "GTA_Hunter"
        ],
        "type": "Text_excerpt",
        "value": "In this example, we will first identify homologs of the RcGTA genes among the encoded proteins in a *Rhodobacter sphaeroides* strain HJ genome using a BLASTP search (Altschul et al. 1997), and then classify them using training data provided in data/taining folder and the optimal parameters that were detected via cross validation (see Table 2 in Kogay et al. 2019). The input file is FASTA-formatted file with amino acid sequences of encoded proteins (*.faa format provided by GenBank@NCBI) and is located in the \"example_blast\" folder. \n\nNote: please create 'example_outdir' folder before running the program.\n\n```\npython GTA_Hunter.py -b -f example_blast/ -o example_outdir/ -O\n```\nThe results will be written to the file 'result_(file_name).out' in the output directory.\nThis exampe search identified 27 RcGTA homologs and 17 of were classified as RcGTA-like genes.\n\n```\nGene                                                                                           Score          Classification    GTA Gene\n>WP_137457497.1 hypothetical protein [Rhodobacter sphaeroides]                                  -0.797741      GTA              15\n>WP_137457888.1 host specificity protein [Rhodobacter sphaeroides]                              -1.700612      GTA              15\nGene                                                                                           Score          Classification    GTA Gene\n>WP_137457108.1 phage portal protein [Rhodobacter sphaeroides]                                  0.766007       virus             3\n>WP_137457895.1 phage portal protein [Rhodobacter sphaeroides]                                  -0.980008      GTA               3\n>WP_137459338.1 phage portal protein [Rhodobacter sphaeroides]                                  0.740713       virus             3\nGene                                                                                           Score          Classification    GTA Gene\n>WP_137457892.1 DUF3168 domain-containing protein [Rhodobacter sphaeroides]                     -1.814797      GTA               8\n>WP_137458772.1 DUF3168 domain-containing protein [Rhodobacter sphaeroides]                     0.071541       virus             8\n>WP_137459210.1 DUF3168 domain-containing protein [Rhodobacter sphaeroides]                     0.243832       virus             8\nGene                                                                                           Score          Classification    GTA Gene\n>WP_137457496.1 peptidase [Rhodobacter sphaeroides]                                             -0.412156      GTA              14\n>WP_137457889.1 peptidase [Rhodobacter sphaeroides]                                             -1.302067      GTA              14\nGene                                                                                           Score          Classification    GTA Gene\n>WP_009564481.1 MULTISPECIES: phage major tail protein, TP901-1 family [Rhodobacter]            -1.020971      GTA               9\nGene                                                                                           Score          Classification    GTA Gene\n>WP_101328016.1 MULTISPECIES: phage major capsid protein [Rhodobacter]                          -0.948470      GTA               5\n>WP_137457105.1 phage major capsid protein [Rhodobacter sphaeroides]                            0.511603       virus             5\n>WP_137459300.1 phage major capsid protein [Rhodobacter sphaeroides]                            0.706092       virus             5\nGene                                                                                           Score          Classification    GTA Gene\n>WP_115474016.1 HK97 family phage prohead protease [Rhodobacter sphaeroides]                    -1.040761      GTA               4\n>WP_137458228.1 HK97 family phage prohead protease [Rhodobacter sphaeroides]                    -0.244565      GTA               4\n>WP_137458765.1 HK97 family phage prohead protease [Rhodobacter sphaeroides]                    -0.759410      GTA               4\n>WP_137459215.1 HK97 family phage prohead protease [Rhodobacter sphaeroides]                    0.017206       virus             4\nGene                                                                                           Score          Classification    GTA Gene\n>WP_137457103.1 hypothetical protein [Rhodobacter sphaeroides]                                  0.037486       virus             6\n>WP_137457893.1 hypothetical protein [Rhodobacter sphaeroides]                                  -0.952592      GTA               6\n>WP_137458770.1 phage gp6-like head-tail connector protein [Rhodobacter sphaeroides]            0.344344       virus             6\n>WP_137459212.1 phage gp6-like head-tail connector protein [Rhodobacter sphaeroides]            0.085210       virus             6\nGene                                                                                           Score          Classification    GTA Gene\n>WP_137457495.1 DUF2163 domain-containing protein [Rhodobacter sphaeroides]                     -1.427688      GTA              13\n>WP_137457890.1 DUF2163 domain-containing protein [Rhodobacter sphaeroides]                     -1.316051      GTA              13\nGene                                                                                           Score          Classification    GTA Gene\n>WP_115474024.1 TIGR02217 family protein [Rhodobacter sphaeroides]                              -1.328590      GTA              12\n>WP_137457494.1 TIGR02217 family protein [Rhodobacter sphaeroides]                              -0.455782      GTA              12\nGene                                                                                           Score          Classification    GTA Gene\n>WP_137457896.1 ATP-binding protein [Rhodobacter sphaeroides]                                   -1.470279      GTA               2\n```\n\nThe output is in the file \"example_output/example_3.txt\".\n"
      },
      "source": "https://raw.githubusercontent.com/ecg-lab/GTA-Hunter-v1/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "How to use it - Example 4: Are the detected GTA-like genes located in the same neighborhood in a genome?",
        "parent_header": [
          "GTA_Hunter"
        ],
        "type": "Text_excerpt",
        "value": "`GTA_Hunter.py` only evaluates one gene at a time, even if queries come from the same genome or even when the whole genome was scanned. To see if the detected \"GTA\" genes are found in the same neighborhood in a genome, one can run an additional script (`Clustering_genes.py`; located in the \"Clustering genes\" folder). The script uses the DBSCAN algorithm (Ester et al. 1996).\n\n**Clustering_genes.py is a command-line program with the following options:**  \n\n```  \nusage: Clustering_genes.py [-h] --data DATA --feature FEATURE [-s SIZE]\n                           [-e DIST]\n\nClustering of genes via DBSCAN to get RcGTA-like clusters\n\noptional arguments:\n  -h, --help            Show this help message and exit\n  --data DATA           File that containes one line with space or tab-separated entries. First entry is the genome or contig ID, \n\t\t\tthe rest are RefSeq IDs of the encoded proteins to cluster\n  \n  --feature FEATURE     Genome feature table in the NCBI feature table file format.\n  -s SIZE, --Cluster SIZE\n                        The minimum cluster size to consider as RcGTA-like\n                        cluster (default=6).\n  -e DIST, --Max DIST   The maximum spatial distance to cluster genes\n                        (default=8000)\n\n```\n\n  For example, let's examine 17 RcGTA-like homologs detected in the *Rhodobacter sphaeroides* strain HJ genome from the example 3 above. To call a region an \"RcGTA-like cluster\", we will require that at least 6 of the inputted genes have no more than 8,000 base pairs between the adjacent genes. \n  \n```\npython Clustering_genes.py --data example_cl/data.txt --feature example_cl/Rhodobacter_sphaeroides_HJ.txt -s 6 -e 8000\n```\n  The program found that 11 out of the 17 inputted RcGTA-like genes are in the same neighborhood in the genome, and therefore can be designated as an \"RcGTA-like cluster\":\n\n```\nNZ_CP036419.1 has RcGTA-like cluster; The cluster size is 11 genes\nWP_137457888.1  WP_137457889.1  WP_137457890.1  WP_115474024.1  WP_009564481.1  WP_137457892.1  WP_137457893.1  WP_101328016.1  WP_115474016.1  WP_137457895.1  WP_137457896.1\n```\nThe RefSeq IDs of the 11 genes in the cluster are listed. The output is in the file \"example_output/example_4.txt\".\n"
      },
      "source": "https://raw.githubusercontent.com/ecg-lab/GTA-Hunter-v1/master/README.md",
      "technique": "header_analysis"
    }
  ]
}