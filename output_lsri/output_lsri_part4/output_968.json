{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "References",
        "type": "Text_excerpt",
        "value": "1.  Barabasi A-L, Albert R (1999) Emergence of Scaling in Random Networks. Science 286: 509-512. doi: 10.1126/science.286.5439.509\n\n2.  Le D-H, Kwon Y-K (2011) NetDS: A Cytoscape plugin to analyze the robustness of dynamics and feedforward/feedback loop structures of biological networks. Bioinformatics.\n\n3.  Trinh H-C, Le D-H, Kwon Y-K (2014) PANET: A GPU-Based Tool for Fast Parallel Analysis of Robustness Dynamics and Feed-Forward/Feedback Loop Structures in Large-Scale Biological Networks. PLoS ONE 9: e103010.\n\n4.  Koschutzki D, Schwobbermeyer H, Schreiber F (2007) Ranking of network elements based on functional substructures. Journal of Theoretical Biology 248: 471-479.\n"
      },
      "source": "https://raw.githubusercontent.com/csclab/RMut/master/Readme.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/csclab/RMut"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2017-01-17T14:35:38Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-06-26T14:28:34Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "RMut: R package for Boolean sensitivity analysis about various types of mutations"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9276541104480582,
      "result": {
        "original_header": "*loadNetwork* function",
        "type": "Text_excerpt",
        "value": "-   *source* and *target*: are gene/protein identifiers that are used to define nodes\n-   *interaction type*: labels the edges connecting each pair of nodes \n-   The network name\n-   Three data frames used for storing attributes of the nodes/edges and the network itself, respectively \n-   *name*: a string variable represents the network identifier, *AMRN.sif* in this case.\n-   *nodes*: a data frame which initially contains one column for node identifiers. \n    In this example network, there exists 10 nodes. Additional columns for other node-based attributes would be inserted later. \n-   *edges*: a data frame which initially contains one column for edge identifiers. \n    In this example, there exists 22 edges. Additional columns for other edge-based attributes would be inserted later. \n-   *network*: a data frame which initially contains one column for the network identifier (*AMRN.sif* in this case). \n    Additional columns for other network-based attributes would be inserted later, such as total number of feedback/feed-forward loops. \n-   *transitionNetwork*: a Boolean variable denotes whether the network is a transition network or not, in this case the value is *FALSE*. \n"
      },
      "source": "https://raw.githubusercontent.com/csclab/RMut/master/Readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9202697093160874,
      "result": {
        "original_header": "*data* function",
        "type": "Text_excerpt",
        "value": "In addition, the package provides some example networks that could be simply loaded by *data* command. For ex.,\n``` r\ndata(amrn)\n```\n \n    The cell cycle pathway of the species Homo sapiens (CCHS) with 161 nodes and 223 links.\n-   *ccsn* \n    The canonical cell signaling network (CCSN) with 771 nodes and 1633 links.\n-   *hsn* \n    The large-scale human signaling network (HSN) with 1192 nodes and 3102 links. \n"
      },
      "source": "https://raw.githubusercontent.com/csclab/RMut/master/Readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9180130105290859,
      "result": {
        "original_header": "WikiPathways network files conversion",
        "type": "Text_excerpt",
        "value": "A user could retrieve pathways in WikiPathways database [(https://www.wikipathways.org)](https://www.wikipathways.org/index.php/WikiPathways) as a SIF file by the [wikiPathways plugin](http://apps.cytoscape.org/apps/wikipathways) of the [Cytoscape software](https://cytoscape.org/). The version of Cytoscape should be greater than or equal 3.6.1. \nAfter that, we select the \"Edge Table\" tab and detach it for easy modification (Figure 3). \nThere does not exist relationship types in the attribute or column *interaction* (activation, inhibition, or neutral), thus we must update them based on some existing columns as follows: \n-   *activation* interaction (value is *1*) \n-   *inhibition* interaction (value is *-1*) \n-   *neutral* interaction (value is *0*) \n    In case both the corresponding columns *WP.type* and *Source Arrow Shape* has the value \"Line\", or the corresponding column *WP.type* is empty. \nFor each type of interaction, we select the rows or interactions that satisfy the above conditions, and then modify the values of the column *interaction* as a way like Figure 4. \nTo repeat this step for other types, we deselect edges by clicking in the empty space of the network visualization panel. Finally, we export the pathway to SIF file format by the following menu: *File | Export | Network...* . We might need to remove wrong rows of interactions (missing the interaction type) in the SIF file by a spreadsheet software like Microsoft Excel (Figure 5). \n"
      },
      "source": "https://raw.githubusercontent.com/csclab/RMut/master/Readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9955893835834458,
      "result": {
        "original_header": "Dynamics analyses",
        "type": "Text_excerpt",
        "value": "The package utilizes a Boolean network model with synchronous updating scheme, and provides two types of useful analyses of Boolean dynamics in real biological networks or random networks:\n \n"
      },
      "source": "https://raw.githubusercontent.com/csclab/RMut/master/Readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9747476370794498,
      "result": {
        "original_header": "Sensitivity analyses",
        "type": "Text_excerpt",
        "value": "Via *calSensitivity* function, this package computes nodal/edgetic sensitivity against many types of mutations in terms of Boolean dynamics. We classified ten well-known mutations into two types (refer to RMut paper for more details): \n-   *Node-based* mutations: state-flip, rule-flip, outcome-shuffle, knockout and overexpression \nTwo kinds of sensitivity measures are computed: macro-distance and bitwise-distance sensitivity measures. In addition, we note that multiple sets of random Nested Canalyzing rules could be specified, and thus resulted in multiple sensitivity values for each node/edge. Here, we show an example of some sensitivity types:\n``` r\ndata(amrn)\n\n# generate all possible initial-states each containing 10 Boolean nodes\nset1 <- generateStates(10, \"all\")\n\n# generate all possible groups each containing a single node in the AMRN network\namrn <- generateGroups(amrn, \"all\", 1, 0)\n```\n    ## [1] \"Number of possibly mutated groups:10\"\n``` r\namrn <- calSensitivity(amrn, set1, \"rule flip\", numRuleSets = 2)\nprint(amrn$Group_1)\n```\n    ##    GroupID ruleflip_t1000_r1_macro ruleflip_t1000_r1_bitws\n    ## 1     TFL1               0.4687500              0.05335286\n    ## 2       PI               0.7988281              0.10511068\n    ## 3      SUP               0.0000000              0.00000000\n    ## 4     EMF1               0.0000000              0.00000000\n    ## 5      LFY               0.9062500              0.16064453\n    ## 6      AP1               0.9687500              0.13518880\n    ## 7      LUG               0.0000000              0.00000000\n    ## 8      UFO               0.0000000              0.00000000\n    ## 9      AP3               0.7617188              0.08886719\n    ## 10      AG               1.0000000              0.12262370\n    ##    ruleflip_t1000_r2_macro ruleflip_t1000_r2_bitws\n    ## 1                0.4687500              0.05458984\n    ## 2                0.9707031              0.10488281\n    ## 3                0.0000000              0.00000000\n    ## 4                0.0000000              0.00000000\n    ## 5                0.9062500              0.14690755\n    ## 6                0.9687500              0.12900391\n    ## 7                0.0000000              0.00000000\n    ## 8                0.0000000              0.00000000\n    ## 9                0.9707031              0.10488281\n    ## 10               1.0000000              0.12177734\n``` r\n# generate all possible groups each containing a single edge in the AMRN network\namrn <- generateGroups(amrn, \"all\", 0, 1)\n```\n    ## [1] \"Number of possibly mutated groups:22\"\n``` r\namrn <- calSensitivity(amrn, set1, \"edge removal\")\nprint(amrn$Group_2)\n```\n    ##          GroupID edgeremoval_t1000_r1_macro edgeremoval_t1000_r1_bitws\n    ## 1     LFY (1) AG                 0.14062500                0.014062500\n    ## 2    LFY (1) AP1                 0.42187500                0.074804688\n    ## 3     LFY (1) PI                 0.18164062                0.034375000\n    ## 4  TFL1 (-1) LFY                 0.12500000                0.015755208\n    ## 5     PI (1) AP3                 0.18945312                0.026269531\n    ## 6  LFY (-1) TFL1                 0.00000000                0.000000000\n    ## 7    SUP (-1) PI                 0.01757812                0.003222656\n    ## 8      PI (1) PI                 0.00390625                0.000390625\n    ## 9    LUG (-1) AG                 0.09375000                0.010188802\n    ## 10  TFL1 (-1) AG                 0.01269531                0.003808594\n    ## 11    UFO (1) PI                 0.01757812                0.003222656\n    ## 12    AP3 (1) PI                 0.02539062                0.006152344\n    ## 13   AP1 (-1) AG                 0.03125000                0.005794271\n    ## 14 EMF1 (-1) LFY                 0.00000000                0.000000000\n    ## 15   UFO (1) AP3                 0.01562500                0.003710938\n    ## 16   AG (-1) AP1                 0.12500000                0.016178385\n    ## 17  SUP (-1) AP3                 0.01562500                0.003710938\n    ## 18 EMF1 (1) TFL1                 0.46875000                0.053352865\n    ## 19   LFY (1) AP3                 0.00390625                0.000390625\n    ## 20 EMF1 (-1) AP1                 0.00000000                0.000000000\n    ## 21   AP3 (1) AP3                 0.00000000                0.000000000\n    ## 22   AP1 (1) LFY                 0.46875000                0.075358073\n``` r\n# generate all possible groups each containing a new edge (not exist in the AMRN network)\namrn <- generateGroups(amrn, \"all\", 0, 1, TRUE)\n```\n    ## [1] \"Number of possibly mutated groups:178\"\n``` r\namrn <- calSensitivity(amrn, set1, \"edge addition\")\nprint(amrn$Group_3)\n```\n \nAs shown above, we firstly need to generate a set of initial-states by the function *generateStates*. Then by the function *generateGroups*, we continue to generate three sets of node/edge groups whose their sensitivity would be calculated. Finally, the sensitivity values are stored in the same data frame of node/edge groups. The data frame has one column for group identifiers (lists of nodes/edges), and some next columns containing their sensitivity values according to each set of random update-rules. For example, the mutation *rule-flip* used two sets of Nested Canalyzing rules, thus resulted in two corresponding sets of sensitivity values. RMut automatically generates a file of Boolean logics for each set, or uses existing files in the working directory of RMut. Here, two rule files \"*AMRN\\_rules\\_0*\" and \"*AMRN\\_rules\\_1*\" are generated. A user can manually create or modify these rule files before the calculation. In addition, the column names which contain the sequence \"*macro*\" or \"*bitws*\" denote the macro-distance and bitwise-distance sensitivity measures, respectively.\n \n"
      },
      "source": "https://raw.githubusercontent.com/csclab/RMut/master/Readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9378775767758112,
      "result": {
        "original_header": "Attractor cycles identification",
        "type": "Text_excerpt",
        "value": "Via *findAttractors* function, the landscape of the network state transitions along with attractor cycles would be identified. The returned transition network object has same structures with the normal network object resulted from *loadNetwork* function (see section \"*loadNetwork* function\"). An example is demonstrated as follows:\n``` r\ndata(amrn)\n\n# generate all possible initial-states each containing 10 Boolean nodes\nset1 <- generateStates(10, \"all\")\n\n# generate a set of only conjunction rules\ngenerateRule(amrn)\n```\n \n    ## [1] \"Generate a default set of update-rules successfully!\" \nAs shown in the example, there exists some different points inside two nodes/edges's data frames of the *transNet* object compared to those of normal network objects: \n    The first column is also used for node identifiers, but in this case they represent *states* of the analyzed network *amrn*. There exists 1024 nodes which are equivalent to 1024 network states of *amrn*. \n    Additional columns are described as follows:\n    -   *Attractor*: value *1* denotes the network state belongs to an attractor, otherwises *0*.\n    -   *NetworkState*: specifies the network state of the node. \n    The first column is also used for edge identifiers, but in this case they represent *transition links* of the analyzed network *amrn*. Each edge identifier has a string *(1)* which denotes a directed link between two node identifiers. There exists 1024 edges which are equivalent to 1024 transition links of *amrn*. \n    Additional columns are described as follows:\n    -   *Attractor*: value *1* means that the transition link connects two network states of an attractor, otherwises *0*. \nWe take the node *N6* as an example. Its corresponding network state is *0000000101* which represents Boolean values of all nodes in alphabetical order of the analyzed network *amrn*: \nMoreover, the *Attractor* value *1* means that *N6* belongs to an attractor. And the data frame *edges* also shows a transition link *N6 (1) N6* with *Attractor* value 1. It means that *N6 (1) N6* is a fixed point attractor. \nFinally, the resulted transition network could be exported by the function *output* (see section \"*Export results*\"). Three CSV files were outputed for the transition network itself and nodes/edges attributes with the following names: *AMRN\\_trans.sif*, *AMRN\\_trans\\_out\\_nodes.csv* and *AMRN\\_trans\\_out\\_edges.csv*, respectively. Then, those resulted files could be further loaded and analyzed by other softwares with powerful visualization functions like Cytoscape. For more information on Cytoscape, please refer to <http://www.cytoscape.org/>. In this tutorial, we used Cytoscape version 3.4.0. \nIn next steps, we import two CSV files of nodes/edges attributes via *File | Import | Table | File...* menu (*Figure 6(b)*). For the nodes attributes file, we should select *String* data type for the column *NetworkState* (*Figure 7*). For the edges attributes file, we must select *Edge Table Columns* in the drop-down list beside the text *Import Data as:* (*Figure 8*). \nAfter importing, we select *Style* panel and modify the node and edge styles a little to highlight all attractor cycles. For node style, select *Red* color in *Fill Color* property for the nodes that belong to an attractor (*Figure 9(a)*). Regards to edge style, select *Red* color in *Stroke Color* property and change *Width* property to a larger value (optional) for the edges that connect two states of an attractor (*Figure 9(b)*). \nAs a result, *Figure 10* shows the modified transition network with clearer indication of attractor cycles. \n"
      },
      "source": "https://raw.githubusercontent.com/csclab/RMut/master/Readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9391406185938429,
      "result": {
        "original_header": "Feedback/Feed-forward loops search",
        "type": "Text_excerpt",
        "value": "Via *findFBLs* and *findFFLs*, the package supports methods of searching feedback/feed-forward loops (FBLs/FFLs), respectively, for all nodes/edges in a network. The following is an example R code for the search:\n``` r\ndata(amrn)\n\n# search feedback/feed-forward loops\namrn <- findFBLs(amrn, maxLength = 10)\n```\n    ## [1] \"Number of found FBLs:6\"\n    ## [1] \"Number of found positive FBLs:4\"\n    ## [1] \"Number of found negative FBLs:2\"\n``` r\namrn <- findFFLs(amrn)\n```\n    ## [1] \"Number of found FFLs:15\"\n    ## [1] \"Number of found coherent FFLs:10\"\n    ## [1] \"Number of found incoherent FFLs:5\"\n``` r\nprint(amrn$nodes)\n```\n    ##    NodeID NuFBL NuPosFBL NuNegFBL NuFFL NuFFL_A NuFFL_B NuFFL_C\n    ## 1      AG     3        1        2     5       0       1       4\n    ## 2     AP1     4        2        2     5       1       2       2\n    ## 3     AP3     1        1        0     6       0       3       3\n    ## 4    EMF1     0        0        0     4       4       0       0\n    ## 5     LFY     4        2        2    11       5       4       2\n    ## 6     LUG     0        0        0     0       0       0       0\n    ## 7      PI     1        1        0     6       0       3       3\n    ## 8     SUP     0        0        0     2       2       0       0\n    ## 9    TFL1     2        1        1     4       1       2       1\n    ## 10    UFO     0        0        0     2       2       0       0\n``` r\nprint(amrn$edges)\n```\n    ##           EdgeID NuFBL NuPosFBL NuNegFBL NuFFL NuFFL_AB NuFFL_BC NuFFL_AC\n    ## 1    AG (-1) AP1     3        1        2     1        0        1        0\n    ## 2    AP1 (-1) AG     1        1        0     2        0        1        1\n    ## 3    AP1 (1) LFY     3        1        2     2        1        1        0\n    ## 4    AP3 (1) AP3     0        0        0     0        0        0        0\n    ## 5     AP3 (1) PI     1        1        0     3        0        3        0\n    ## 6  EMF1 (-1) AP1     0        0        0     2        1        0        1\n    ## 7  EMF1 (-1) LFY     0        0        0     3        2        0        1\n    ## 8  EMF1 (1) TFL1     0        0        0     2        1        0        1\n    ## 9  LFY (-1) TFL1     2        1        1     2        1        1        0\n    ## 10    LFY (1) AG     1        0        1     4        1        2        1\n    ## 11   LFY (1) AP1     1        1        0     3        1        1        1\n    ## 12   LFY (1) AP3     0        0        0     2        1        0        1\n    ## 13    LFY (1) PI     0        0        0     2        1        0        1\n    ## 14   LUG (-1) AG     0        0        0     0        0        0        0\n    ## 15    PI (1) AP3     1        1        0     3        0        3        0\n    ## 16     PI (1) PI     0        0        0     0        0        0        0\n    ## 17  SUP (-1) AP3     0        0        0     2        1        0        1\n    ## 18   SUP (-1) PI     0        0        0     2        1        0        1\n    ## 19  TFL1 (-1) AG     1        0        1     2        0        1        1\n    ## 20 TFL1 (-1) LFY     1        1        0     2        1        1        0\n    ## 21   UFO (1) AP3     0        0        0     2        1        0        1\n    ## 22    UFO (1) PI     0        0        0     2        1        0        1\n``` r\nprint(amrn$network)\n```\n \nIn the above output, some abbreviations in the two nodes/edges data frames are explained as follows (refer to the literature \\[3-4\\] in the References section for more details): \n-   *NuPosFBL*, *NuNegFBL*: number of positive and negative feedback loops, respectively, involving the node/edge \n-   *NuFFL\\_A*, *NuFFL\\_B* and *NuFFL\\_C*: number of feed-forward loops with role A, B and C, respectively, involving the node \n-   *NuFFL\\_AB*, *NuFFL\\_BC* and *NuFFL\\_AC*: number of feed-forward loops with role AB, BC and AC, respectively, involving the edge \nIn the *network* data frame, *NuFBL*, *NuPosFBL*, *NuNegFBL*, *NuFFL*, *NuCoFFL* and *NuInCoFFL* denote total numbers of FBLs, positive/negative FBLs, FFLs and coherent/incoherent FFLs in the network, respectively.\n \n"
      },
      "source": "https://raw.githubusercontent.com/csclab/RMut/master/Readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9275449907407812,
      "result": {
        "original_header": "Centrality measures computation",
        "type": "Text_excerpt",
        "value": "The *calCentrality* function calculates node-/edge-based centralities of a network such as Degree, In-/Out-Degree, Closeness, Betweenness, Stress, Eigenvector, Edge Degree and Edge Betweenness. An example is demonstrated as follows:\n``` r\ndata(amrn)\n\n# calculate node-/edge-based centralities\namrn <- calCentrality(amrn)\nprint(amrn$nodes)\n```\n    ##    NodeID Degree In_Degree Out_Degree  Closeness Betweenness Stress\n    ## 1      AG      5         4          1 0.01923077   5.5000000      6\n    ## 2     AP1      5         3          2 0.02083333   8.3333333      9\n    ## 3     AP3      7         5          2 0.01234568   0.0000000      0\n    ## 4    EMF1      3         0          3 0.02564103   0.0000000      0\n    ## 5     LFY      8         3          5 0.02222222  13.8333333     15\n    ## 6     LUG      1         0          1 0.02083333   0.0000000      0\n    ## 7      PI      7         5          2 0.01234568   0.0000000      0\n    ## 8     SUP      2         0          2 0.01388889   0.0000000      0\n    ## 9    TFL1      4         2          2 0.02083333   0.3333333      1\n    ## 10    UFO      2         0          2 0.01388889   0.0000000      0\n    ##     Eigenvector\n    ## 1  1.962552e-01\n    ## 2  3.688391e-01\n    ## 3  8.780781e-49\n    ## 4  6.569244e-01\n    ## 5  4.969356e-01\n    ## 6  1.044252e-01\n    ## 7  8.780781e-49\n    ## 8  1.756156e-48\n    ## 9  3.688391e-01\n    ## 10 1.756156e-48\n``` r\nprint(amrn$edges)\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/csclab/RMut/master/Readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.955480168636072,
      "result": {
        "original_header": "Export results",
        "type": "Text_excerpt",
        "value": "Via *output* function, all examined attributes of the networks and their nodes/edges will be exported to CSV files. The structure of these networks are also exported as Tab-separated values text files (.SIF extension). The following is an example R code for the output:\n``` r\ndata(amrn)\n\n# generate all possible initial-states each containing 10 Boolean nodes\nset1 <- generateStates(10, \"all\")\n\n# generate all possible groups each containing a single node in the AMRN network\namrn <- generateGroups(amrn, \"all\", 1, 0)\n```\n    ## [1] \"Number of possibly mutated groups:10\"\n``` r\namrn <- calSensitivity(amrn, set1, \"knockout\")\n\n# search feedback/feed-forward loops\namrn <- findFBLs(amrn, maxLength = 10)\n```\n    ## [1] \"Number of found FBLs:6\"\n    ## [1] \"Number of found positive FBLs:4\"\n    ## [1] \"Number of found negative FBLs:2\"\n``` r\namrn <- findFFLs(amrn)\n```\n    ## [1] \"Number of found FFLs:15\"\n    ## [1] \"Number of found coherent FFLs:10\"\n    ## [1] \"Number of found incoherent FFLs:5\"\n``` r\n# calculate node-/edge-based centralities\namrn <- calCentrality(amrn)\n\n# export all results to CSV files\noutput(amrn)\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/csclab/RMut/master/Readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9651378935942204,
      "result": {
        "original_header": "Batch-mode analysis",
        "type": "Text_excerpt",
        "value": "The methods of dynamics and structure analysis described in the above sections (except the *findAttractors* function due to memory limitation) could also be applied to a set of networks, not limited to a single network. The RMut package provides the *createRBNs* function to generate a set of random networks using a generation model from among four models (refer to the literature in the References section for more details): \n-   Two shuffling models (Shuffle 1 and Shuffle 2) \\[3\\] \nHere, we show two examples of generating a set of random networks and analyzing dynamics-related sensitivity and structural characteristic of those networks: \n"
      },
      "source": "https://raw.githubusercontent.com/csclab/RMut/master/Readme.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://www.wikipathways.org/index.php/WikiPathways"
      },
      "source": "https://raw.githubusercontent.com/csclab/RMut/master/Readme.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "http://apps.cytoscape.org/apps/wikipathways"
      },
      "source": "https://raw.githubusercontent.com/csclab/RMut/master/Readme.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/csclab/RMut/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/csclab/RMut/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "csclab/RMut"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Setup guide"
      },
      "source": "https://raw.githubusercontent.com/csclab/RMut/master/Readme.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/csclab/RMut/master/vignettes/wikiPath2SIF_1.png"
      },
      "source": "https://raw.githubusercontent.com/csclab/RMut/master/Readme.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/csclab/RMut/master/vignettes/wikiPath2SIF_2.png"
      },
      "source": "https://raw.githubusercontent.com/csclab/RMut/master/Readme.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/csclab/RMut/master/vignettes/wikiPath2SIF_3.png"
      },
      "source": "https://raw.githubusercontent.com/csclab/RMut/master/Readme.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/csclab/RMut/master/vignettes/wikiPath2SIF_4_5.png"
      },
      "source": "https://raw.githubusercontent.com/csclab/RMut/master/Readme.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/csclab/RMut/master/vignettes/wikiPath2SIF_6.png"
      },
      "source": "https://raw.githubusercontent.com/csclab/RMut/master/Readme.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/csclab/RMut/master/vignettes/transition_menu.png"
      },
      "source": "https://raw.githubusercontent.com/csclab/RMut/master/Readme.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/csclab/RMut/master/vignettes/transition_menu_attr_node.png"
      },
      "source": "https://raw.githubusercontent.com/csclab/RMut/master/Readme.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/csclab/RMut/master/vignettes/transition_menu_attr_edge.png"
      },
      "source": "https://raw.githubusercontent.com/csclab/RMut/master/Readme.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/csclab/RMut/master/vignettes/style_node_edge.png"
      },
      "source": "https://raw.githubusercontent.com/csclab/RMut/master/Readme.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/csclab/RMut/master/vignettes/amrn_attractors.png"
      },
      "source": "https://raw.githubusercontent.com/csclab/RMut/master/Readme.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Setup guide",
        "type": "Text_excerpt",
        "value": "To run and utilize all functions of *RMut* package, three following installations should be conducted in sequence:\n"
      },
      "source": "https://raw.githubusercontent.com/csclab/RMut/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Java SE Development Kit",
        "parent_header": [
          "Setup guide"
        ],
        "type": "Text_excerpt",
        "value": "Core algorithms of *RMut* package were written in Java, thus a Java SE Development Kit (JDK) is required to run the package. The JDK is available at:\n\n<http://www.oracle.com/technetwork/java/javase/downloads/index.html>.\n\nTwo following kinds of JDK can be used alternatively:\n\n-   Old series\n\n    Java SE 8u201 / Java SE 8u202 or higher version\n\n-   New series\n\n    Java SE 11.0.2(LTS) or higher version\n"
      },
      "source": "https://raw.githubusercontent.com/csclab/RMut/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "RMut package",
        "parent_header": [
          "Setup guide"
        ],
        "type": "Text_excerpt",
        "value": "Firstly, the *devtools* package must be installed by typing the following commands into the R console:\n\n*&gt; install.packages(\"devtools\")*\n\nMore details about the *devtools* package could be found in the website <https://github.com/r-lib/devtools>.\n\nMake sure you have Java Development Kit installed and correctly registered in R. If in doubt, run the command *R CMD javareconf* as root or administrator permission.\n\nNext, the *RMut* package should be properly installed into the R environment by typing the following commands:\n\n*&gt; install.packages(\"rJava\")*\n\n*&gt; devtools::install\\_github(\"csclab/RMut\", INSTALL\\_opts=\"--no-multiarch\")*\n\nWe note that the new version of *devtools* package uses the keyword *INSTALL\\_opts* to specify additional installation options instead of the old keyword *args*. Though all of core algorithms written in Java, the *rJava* package must be installed in the R environment before the *RMut* installation. After installation, the RMut package can be loaded via\n\n*&gt; library(RMut)*\n\nIn addition, we must initialize the Java Virtual Machine (JVM) with a *Maximum Java heap size* via the function *initJVM*. This function must be called before any RMut functions can be used. The following command will initialize the JVM with the maximum Java heap size of 8GB (in case of large-scale networks analysis, we could set the Java heap size to a larger value):\n\n*&gt; initJVM(\"8G\")*\n"
      },
      "source": "https://raw.githubusercontent.com/csclab/RMut/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "OpenCL library",
        "parent_header": [
          "Setup guide"
        ],
        "type": "Text_excerpt",
        "value": "In order to utilize the full computing power of multi-core central processing units (CPUs) and graphics processing units (GPUs), OpenCL drivers should be installed into your system. Here are necessary steps for a system with:\n\n-   NVIDIA graphics cards\n\n    OpenCL support is included in the latest drivers, in the driver CD or available at\n\n    <https://www.nvidia.com/Download/index.aspx?lang=en-us>\n\n-   AMD graphics cards\n\n    The OpenCL GPU runtime library is included in the drivers of your AMD cards. The drivers could be in the driver CD or available at\n\n    <https://www.amd.com/en/support>\n\n-   CPU devices only (No graphics cards)\n\n    At the time of developing this R package, CPU devices from AMD are no longer supported as OpenCL device. For Intel CPU devices, the OpenCL runtime library is available at:\n\n    <https://software.intel.com/en-us/articles/opencl-drivers>\n\nAfter installation, OpenCL information can be outputed via the function *showOpencl*. Then we can enable OpenCL computation on a CPU/GPU device via the function *setOpencl*:\n\n``` r\nlibrary(RMut)\n```\n\n    ## Loading required package: rJava\n\n    ## [1] \"Please firstly initialize the Java Virtual Machine by using the function 'initJVM(maxHeapSize)'.\"\n\n``` r\ninitJVM(\"8G\")\n```\n\n    ## [1] \"The Java Virtual Machine is successfully initialized!\"\n\n    ## [1] TRUE\n\n``` r\nshowOpencl()\n```\n\n    ## Your system has 1 installed OpenCL platform(s):\n    ## 1. Intel(R) OpenCL\n    ##   PROFILE = FULL_PROFILE\n    ##   VERSION = OpenCL 2.1 \n    ##   VENDOR = Intel(R) Corporation\n    ##   EXTENSIONS = cl_intel_dx9_media_sharing cl_khr_3d_image_writes cl_khr_byte_addressable_store cl_khr_d3d11_sharing cl_khr_depth_images cl_khr_dx9_media_sharing cl_khr_fp64 cl_khr_gl_sharing cl_khr_global_int32_base_atomics cl_khr_global_int32_extended_atomics cl_khr_icd cl_khr_local_int32_base_atomics cl_khr_local_int32_extended_atomics cl_khr_spir\n    ##  1 CPU device(s) found on the platform:\n    ##  1. Intel(R) Core(TM) i3-6006U CPU @ 2.00GHz\n    ##  DEVICE_VENDOR = Intel(R) Corporation\n    ##  DEVICE_VERSION = OpenCL 1.2 (Build 611)\n    ##  CL_DEVICE_MAX_COMPUTE_UNITS: 4\n    ##  1 GPU device(s) found on the platform:\n    ##  1. Intel(R) HD Graphics 520\n    ##  DEVICE_VENDOR = Intel(R) Corporation\n    ##  DEVICE_VERSION = OpenCL 2.1 NEO \n    ##  CL_DEVICE_MAX_COMPUTE_UNITS: 23\n\n``` r\nsetOpencl(\"gpu\")\n```\n\n    ## Enabled OpenCL computation based on the device: Intel(R) HD Graphics 520.\n\nThe above functions show installed OpenCL platforms with their corresponding CPU/GPU devices, and try to select an graphics card for OpenCL computing.\n"
      },
      "source": "https://raw.githubusercontent.com/csclab/RMut/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.8229409795725793,
      "result": {
        "original_header": "*data* function",
        "type": "Text_excerpt",
        "value": "All original network files (Tab-separated values text files) could be downloaded in the folder *vignettes/networks* of the RMut website <https://github.com/csclab/RMut>.\n \n"
      },
      "source": "https://raw.githubusercontent.com/csclab/RMut/master/Readme.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8016902041412879,
      "result": {
        "original_header": "*loadNetwork* function",
        "type": "Text_excerpt",
        "value": "The *loadNetwork* function creates a network from a Tab-separated values text file. The file format contains three columns: \n"
      },
      "source": "https://raw.githubusercontent.com/csclab/RMut/master/Readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8578922794498254,
      "result": {
        "original_header": "Attractor cycles identification",
        "type": "Text_excerpt",
        "value": "*File | Import | Network | File...* or using the shortcut keys *Ctrl/Cmd + L* (*Figure 6(a)*) \nIn next steps, we import two CSV files of nodes/edges attributes via *File | Import | Table | File...* menu (*Figure 6(b)*). For the nodes attributes file, we should select *String* data type for the column *NetworkState* (*Figure 7*). For the edges attributes file, we must select *Edge Table Columns* in the drop-down list beside the text *Import Data as:* (*Figure 8*). \n"
      },
      "source": "https://raw.githubusercontent.com/csclab/RMut/master/Readme.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/csclab/RMut/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Apache License 2.0",
        "spdx_id": "Apache-2.0",
        "type": "License",
        "url": "https://api.github.com/licenses/apache-2.0",
        "value": "https://api.github.com/licenses/apache-2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
      },
      "source": "https://raw.githubusercontent.com/csclab/RMut/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "RMut"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "csclab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 68360,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/csclab/RMut/master/Readme.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 05:27:22",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ]
}