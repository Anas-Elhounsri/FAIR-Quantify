{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/CompSynBioLab-KoreaUniv/FunGAP"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contact",
        "parent_header": [
          "FunGAP: Fungal Genome Annotation Pipeline v1.1.1"
        ],
        "type": "Text_excerpt",
        "value": "* Project principal investigator: Prof. In-Geol Choi, CSBL at Korea University\n* Contact (email-address): igchoi at korea.ac.kr or mbnmbn00 at korea.ac.kr (or mbnmbn00 at gmail.com)\n\nIf you have any problem to install or run, please don't hesistate to contact us. We will help you as much as we can. Any input from users will help to build more robust pipeline.\n"
      },
      "source": "https://raw.githubusercontent.com/CompSynBioLab-KoreaUniv/FunGAP/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "original_header": "FunGAP performs gene prediction on given genome assembly and RNA-seq reads. See <a href=\"INSTALL.md\">INSTALL.md</a> and <a href=\"USAGE.md\">USAGE.md</a> for installation and usage instruction, or you can go to <a href=\"../wiki\">wiki</a> tab for the same.",
        "parent_header": [
          "FunGAP: Fungal Genome Annotation Pipeline v1.1.1"
        ],
        "type": "Text_excerpt",
        "value": "* [FunGAP INPUT & OUTPUT](#inputoutput)\n* [Pipeline description](#pipedesc)\n  * [Step1: Preprocessing of input data](#step1)\n  * [Step2: Gene prediction](#step2)\n  * [Step3: Gene model evaluation and filtration](#step3)\n* [Contact](#contact)\n\n<a name=\"inputoutput\"></a>"
      },
      "source": "https://raw.githubusercontent.com/CompSynBioLab-KoreaUniv/FunGAP/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2016-12-06T10:06:02Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-22T12:00:27Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "FunGAP: fungal Genome Annotation Pipeline"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Pipeline description",
        "parent_header": [
          "FunGAP: Fungal Genome Annotation Pipeline v1.1.1"
        ],
        "type": "Text_excerpt",
        "value": "![](http://compbio.korea.ac.kr/bnmin/fungap/scheme_fungap_ver2.png)\n\n<a name=\"step1\"></a>"
      },
      "source": "https://raw.githubusercontent.com/CompSynBioLab-KoreaUniv/FunGAP/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step1: Preprocessing of input data",
        "parent_header": [
          "FunGAP: Fungal Genome Annotation Pipeline v1.1.1",
          "Pipeline description"
        ],
        "type": "Text_excerpt",
        "value": "In preprocessing step, FunGAP masks repeat regions in genome assembly (input data 1) and assembles mRNA reads into transcript contigs (input data 2). \n\n**Repeat masking**\n\nRepeat masking is a crucial step in eukaryotic gene prediction because genomic regions, such as transposon repeats, often make false alignments and interfere with gene prediction. FunGAP employs a repeat masking procedure embedded in the Maker pipeline along with a genome-specific repeat library built by RepeatModeler (http://www.repeatmasker.org/RepeatModeler.html).\n\n**Assembly of mRNA reads**\n\nUser-provided mRNA reads are assembled by the Trinity program. A BAM-format file for genome-guided assembly is generated by a Hisat2 read aligner and Samtools format converter (SAM file to sorted BAM file). An optional parameter ```--jaccard_clip``` in Trinity is used for fungal transcript assembly because high gene density leads to UTR overlap in the assembly. This option helps avoid fusion of neighbor transcripts. The maximum intron length is set to 2000 bp with the ```--max-intronlen``` option in Hisat2.\n\n<a name=\"step2\"></a>"
      },
      "source": "https://raw.githubusercontent.com/CompSynBioLab-KoreaUniv/FunGAP/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step2: Gene prediction",
        "parent_header": [
          "FunGAP: Fungal Genome Annotation Pipeline v1.1.1",
          "Pipeline description"
        ],
        "type": "Text_excerpt",
        "value": "FunGAP uses three gene prediction tools: Augustus, Braker, and Maker. The outcomes of predictions are stored in GFF3 and FASTA files for the next set of evidence score calculations.\n\n**Maker and default parameters used by FunGAP**\n\nFunGAP runs Maker four times with iterative SNAP gene model training, as previously described. FunGAP uses the correct_est_fusion option to correct fusion of neighbor transcripts in mRNA assembly due to the above-mentioned high gene density of fungal genomes. Maximum intron length is set to 5000 bp with the ```split_hit``` option. Single-exon genes longer than 50 amino acids are predicted by setting the single_exon and single_length options.\n\n**Augustus and default parameters used by FunGAP**\n\nFunGAP runs Augustus with the augustus_species parameter specified by a user. The option ```--softmasking``` is turned on as repeat-masking generates soft-masked assembly. To allow overlapping CDS predictions, FunGAP turns on the ```--singlestrand``` option. The output is GFF3, and translated protein sequences are generated in FASTA by a simple parsing script.\n\n**Braker and default parameters used by FunGAP**\n\nBraker performs unsupervised RNA sequencing-based genome annotation using GeneMark-ET and Augustus. The option ```--softmasking``` is turned on as repeat-masking generates soft-masked assembly. The input file for Braker is the mRNA reads alignment formatted in a BAM file produced in the preprocessing step.\n\n<a name=\"step3\"></a>"
      },
      "source": "https://raw.githubusercontent.com/CompSynBioLab-KoreaUniv/FunGAP/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step3: Gene model evaluation and filtration",
        "parent_header": [
          "FunGAP: Fungal Genome Annotation Pipeline v1.1.1",
          "Pipeline description"
        ],
        "type": "Text_excerpt",
        "value": "In the previous step, three gene predictors generated a set of predicted genes (designate as \u201cgene models\u201d hereafter). FunGAP produces \u201cnon-overlapping\u201d coding sequences by evaluating all gene models and retaining only best-scored models. The evaluation is performed by three tools: BLASTp, Benchmarking Universal Single-Copy Orthologs (BUSCO), and InterProScan. Bit scores from alignments are multiplied by length coverage because longer gene models have more chances to get higher alignment scores. The sum of three scaled bit scores becomes the evidence score for each gene model. Finally, the filtration produces a final set of gene models.\n\n**BLASTp**\n\nSequence similarity with genes in phylogenetically close genomes can be an evidence for predicted genes being actual genes. Users provide the proteome of phylogenetically related organisms with the ```--sister_proteome``` argument. For convenience, FunGAP provides a script, download_sister_orgs.py, which downloads protein sequences from NCBI for a given taxon. To reduce computing time, FunGAP integrates the gene models from three gene predictions, and removes identical gene models to make nonredundant gene models.\n\n**BUSCO**\n\nBUSCO provides hidden Markov models for single-copy orthologs conserved in all fungal genomes. Evidence scores for BUSCO are calculated by multiplying \u201cfull sequence scores\u201d in hmmer output and length coverage [min (query length, target length)/max (query length, target length)].\n\n**InterProScan (Pfam domain prediction)**\n\nPfam provides a database of manually curated protein families. We assume that gene models annotated with a Pfam domain are more likely to be an actual gene. Evidence scores for Pfam are directly provided by the hmmer3-match score in the XML output of InterProScan (-f XML option). For multiple domains in one gene model, the sum of the scores is used.\n\n**BLASTn**\n\nSequence similarity with assembled transcriptome can give the direct evidence for reliability of predicted genes. FunGAP runs BLASTn for each predicted gene against Trinity-assembled transcripts. Length coverage is also considered.\n\n****\n\n**Scoring function**\n\nThree bit scores gained from the above four sources are summed to provide evidence scores for each gene model. The equation of this scoring function is as follows:\n\nEvidence score (gene model) = BLASTp_score*cov(query)*cov(target) + BUSCO_score + Pfam_scores + BLASTn_score\\*cov(query)\\*cov(target)\n\n**Filtration**\n\nIn the filtration process, FunGAP finds \u201cgene blocks\u201d defined as a set of gene models that overlap with at least one base pair. FunGAP gets all combinations of gene models in a gene block and calculates the sum of the evidence scores. Gene models in the block with the highest evidence score are selected as final genes of that region. Short coding sequence overlap (less than 10% of coding sequence length) is allowed.\n\n![](http://compbio.korea.ac.kr/bnmin/fungap/filtering.png)\n\n<a name=\"contact\"></a>"
      },
      "source": "https://raw.githubusercontent.com/CompSynBioLab-KoreaUniv/FunGAP/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9807078584506413,
      "result": {
        "original_header": "FunGAP: Fungal Genome Annotation Pipeline v1.1.1",
        "type": "Text_excerpt",
        "value": "**FunGAP is freely available for academic use. For the commerical use or licensing of FunGAP, please contact In-Geol Choi (igchoi (at) korea.ac.kr). Please, cite the following reference** \n"
      },
      "source": "https://raw.githubusercontent.com/CompSynBioLab-KoreaUniv/FunGAP/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/CompSynBioLab-KoreaUniv/FunGAP/wiki"
      },
      "source": "https://raw.githubusercontent.com/CompSynBioLab-KoreaUniv/FunGAP/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/CompSynBioLab-KoreaUniv/FunGAP/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 33
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/CompSynBioLab-KoreaUniv/FunGAP/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CompSynBioLab-KoreaUniv/FunGAP"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "FunGAP: Fungal Genome Annotation Pipeline v1.1.1"
      },
      "source": "https://raw.githubusercontent.com/CompSynBioLab-KoreaUniv/FunGAP/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/CompSynBioLab-KoreaUniv/FunGAP/master/docker/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/CompSynBioLab-KoreaUniv/FunGAP/master/docker/Dockerfile",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/CompSynBioLab-KoreaUniv/FunGAP/master/docker/base/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/CompSynBioLab-KoreaUniv/FunGAP/master/docker/base/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "http://compbio.korea.ac.kr/bnmin/fungap/scheme_fungap_ver2.png"
      },
      "source": "https://raw.githubusercontent.com/CompSynBioLab-KoreaUniv/FunGAP/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "http://compbio.korea.ac.kr/bnmin/fungap/filtering.png"
      },
      "source": "https://raw.githubusercontent.com/CompSynBioLab-KoreaUniv/FunGAP/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Installation of FunGAP v1.1.1\n\n** Last updated: May 18, 2021*\n\n**FunGAP is freely available for academic use. For the commerical use or license of FunGAP, please contact In-Geol Choi (email: igchoi (at) korea.ac.kr). Please, cite the following reference**\n\nReference: Byoungnam Min  Igor V Grigoriev  In-Geol Choi, FunGAP: Fungal Genome Annotation Pipeline using evidence-based gene model evaluation (2017), Bioinformatics, Volume 33, Issue 18, Pages 2936\u20132937, https://doi.org/10.1093/bioinformatics/btx353\n\n<hr>\n\nPlease don't hesitate to post on *Issues* or contact me (mbnmbn00@gmail.com) for help.\nThese steps were tested in the freshly installed Ubuntu 20.04.2 LTS.\n\n<br />\n\n# Install FunGAP using Docker\n\nUsing Docker is the most reliable and robust way to install FunGAP. [Please follow the instruction](docker/README.md).\n\n<br />\n\n# Install FunGAP using conda\n\nAlthough we recommend using Docker, some workspaces are not available for Docker (e.g., HPC). Please use the following instruction for conda-based FunGAP installation.\n\n## 0. FunGAP requirements\n\n### 0.1. Required softwares (and tested versions)\n\n1. [Hisat2](https://ccb.jhu.edu/software/hisat2/index.shtml) v2.2.1\n1. [Trinity](https://github.com/trinityrnaseq/trinityrnaseq) v2.12.0\n1. [RepeatModeler](http://www.repeatmasker.org/RepeatModeler/) v2.0.1\n1. [Maker](http://www.yandell-lab.org/software/maker.html) v3.01.03\n1. [GeneMark-ES/ET](http://topaz.gatech.edu/GeneMark/license_download.cgi) v4.65_lic\n1. [Augustus](https://github.com/Gaius-Augustus/Augustus) v3.4.0\n1. [Braker](http://exon.gatech.edu/braker1.html) v2.1.5\n1. [BUSCO](https://busco.ezlab.org/) v5.1.2\n1. [Pfam_scan](https://www.ebi.ac.uk/seqdb/confluence/display/THD/PfamScan) v1.6\n1. [BLAST](https://blast.ncbi.nlm.nih.gov/Blast.cgi?CMD=Web&PAGE_TYPE=BlastDocs&DOC_TYPE=Download) v2.11.0\n1. [Samtools](http://www.htslib.org/download/) v1.10\n1. [Bamtools](https://github.com/pezmaster31/bamtools) v2.5.1\n\n### 0.2. Required database\n\n1. [Pfam](https://pfam.xfam.org/) release 34.0\n\n<br/>\n\n## 1. Setup Anaconda environment\n\n### 1.1. Install Anaconda3 (v4.10.1 tested)\n\nDownload and install Anaconda3 (We assume that you install it in `$HOME/anaconda3`)\n\n```bash\n# Download and install conda\ncd $HOME\nwget https://repo.anaconda.com/archive/Anaconda3-2021.05-Linux-x86_64.sh\nbash Anaconda3-2021.05-Linux-x86_64.sh\n\n# Set environment if you select \"no\" to \"Do you wish the installer to initialize Anaconda3?\"\necho \". $HOME/anaconda3/etc/profile.d/conda.sh\" >> ~/.bashrc\nsource $HOME/.bashrc\nwhich conda  # It should be $HOME/anaconda3/condabin/conda\n\n# Get up-to-date conda\nconda update conda\n```\n\n### 1.2. Install dependencies\n\n```bash\n# Install Mamba package manager (faster!)\nconda install mamba -n base -c conda-forge\n\n# Create FunGAP environment and install dependencies using Mamba\nconda create -y -n fungap\nconda activate fungap\nmamba install \\\n  braker2=2.1.5 trinity=2.12.0 repeatmodeler=2.0.1 hisat2=2.2.1 pfam_scan=1.6 busco=5.1.2 \\\n  -c bioconda -c conda-forge\n\n# Install Python and Perl modules (within fungap environment)\npip install biopython bcbio-gff markdown2 matplotlib\ncpanm YAML Hash::Merge Logger::Simple Parallel::ForkManager MCE::Mutex Thread::Queue threads\n\n# Install Maker using Mamba (Maker installation is conflict with Busco)\nconda deactivate\nconda create -y -n maker\nconda activate maker\nmamba install maker=3.01.03 -c bioconda -c conda-forge\n```\n\n<br />\n\n## 2. Download and install FunGAP\n\n### 2.1. Download FunGAP\n\nDownload FunGAP using GitHub clone. Suppose we are installing FunGAP in your `$HOME` directory, but you are free to change the location. `$FUNGAP_DIR` is going to be your FunGAP installation directory.\n\n```bash\ncd $HOME  # or wherever you want\ngit clone https://github.com/CompSynBioLab-KoreaUniv/FunGAP.git\nexport FUNGAP_DIR=$(realpath FunGAP/)\n# You can put this export command in the your .bashrc file\n# so that you don't need to type every time you run the FunGAP\n```\n\n<br />\n\n## 3. Download Pfam\n\nDownload Pfam databases in your `$FUNGAP_DIR/db` directory.\n\n### 3.1. Pfam DB download \n\nftp://ftp.ebi.ac.uk/pub/databases/Pfam/current_release\n\n```bash\nmkdir -p $FUNGAP_DIR/db/pfam\ncd $FUNGAP_DIR/db/pfam\nwget ftp://ftp.ebi.ac.uk/pub/databases/Pfam/current_release/Pfam-A.hmm.gz\nwget ftp://ftp.ebi.ac.uk/pub/databases/Pfam/current_release/Pfam-A.hmm.dat.gz\ngunzip Pfam-A.hmm.gz Pfam-A.hmm.dat.gz\nconda activate fungap\nhmmpress Pfam-A.hmm  # HMMER package (would be automatically installed in the above Anaconda step)\n```\n\n<br />\n\n## 4. Install GeneMark\n\nGo to the below site and download GeneMark-ES/ET.\nhttp://topaz.gatech.edu/GeneMark/license_download.cgi\nDon't forget to download the key, too.\n\n### 4.1. Uncompress downloaded files\n\n```bash\nmkdir $FUNGAP_DIR/external/\nmv gmes_linux_64_4.tar.gz gm_key_64.gz $FUNGAP_DIR/external/  # Move your downloaded files to this directory\ncd $FUNGAP_DIR/external/\ntar -zxvf gmes_linux_64_4.tar.gz\ngunzip gm_key_64.gz\ncp gm_key_64 ${HOME}/.gm_key\n```\n\n### 4.2. Change the perl path\n\nGeneMark forces to use `/usr/bin/perl` instead of conda-installed perl. You can change this by running `change_path_in_perl_scripts.pl` script.\n\n```bash\ncd $FUNGAP_DIR/external/gmes_linux_64_4/\nperl change_path_in_perl_scripts.pl \"/usr/bin/env perl\"\n```\n\n### 4.3 Check GeneMark and its dependencies are correctly installed.\n\n```bash\ncd $FUNGAP_DIR/external/gmes_linux_64_4/\n./gmes_petap.pl\n```\n\n<br />\n\n## 5. Download RepeatMasker databases\n\n```bash\nconda activate fungap\ncd $(dirname $(which RepeatMasker))/../share/RepeatMasker\n# ./configure command will download required databases\necho -e \"\\n2\\n$(dirname $(which rmblastn))\\n\\n5\\n\" > tmp && ./configure < tmp\n\n# It should look like this\nls $(dirname $(which RepeatMasker))/../share/RepeatMasker/Libraries\n# Artefacts.embl  Dfam.hmm       RepeatAnnotationData.pm  RepeatMasker.lib.nin  RepeatPeps.lib      RepeatPeps.lib.psq\n# CONS-Dfam_3.0   README.meta    RepeatMasker.lib         RepeatMasker.lib.nsq  RepeatPeps.lib.phr  RepeatPeps.readme\n# Dfam.embl       RMRBMeta.embl  RepeatMasker.lib.nhr     RepeatMaskerLib.embl  RepeatPeps.lib.pin  taxonomy.dat\n```\n\n<br />\n\n## 6. Configure FunGAP\n\nThis script allows users to set and test (by --help command) all the dependencies. If this script runs without any issue, you are ready to run FunGAP!\n\n```bash\ncd $FUNGAP_DIR\nconda activate maker\nexport MAKER_DIR=$(dirname $(which maker))\necho $MAKER_DIR  # /home/ubuntu/anaconda3/envs/maker/bin\nconda activate fungap\n./set_dependencies.py \\\n  --pfam_db_path db/pfam/ \\\n  --genemark_path external/gmes_linux_64_4/ \\\n  --maker_path ${MAKER_DIR}\n```\n\n<br />\n\n# Test run\n\n<a name=\"testdata\"></a>\n\n### 1. Download test dataset\n\nYou can download yeast (*Saccharomyces cerevisiae*) genome assembly (FASTA) and RNA-seq reads (two FASTQs) from NCBI for testing FunGAP.\n\n```bash\n# Download RNA-seq reads using SRA toolkit (https://github.com/ncbi/sra-tools/wiki/01.-Downloading-SRA-Toolkit)\n# Parameter -X indicates the number of read pairs you want to download\nfastq-dump -X 1000000 -I --split-files SRR1198667\n\n# Download assembly\nwget ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/146/045/GCF_000146045.2_R64/GCF_000146045.2_R64_genomic.fna.gz\ngunzip GCF_000146045.2_R64_genomic.fna.gz\n```\n\n### 2. Download protein sequences of related species\n\n```bash\nconda activate fungap  # if you didn't do it already\n$FUNGAP_DIR/download_sister_orgs.py \\\n  --taxon \"Saccharomyces cerevisiae\" \\\n  --email_address <YOUR_EMAIL_ADDRESS> \\\n  --num_sisters 1\nzcat sister_orgs/*faa.gz > prot_db.faa\n```\n\n### 3. Get Augustus species\n\n```bash\nconda activate fungap  # if you didn't do it already\n$FUNGAP_DIR/get_augustus_species.py \\\n  --genus_name \"Saccharomyces\" \\\n  --email_address <YOUR_EMAIL_ADDRESS>\n```\n\n - saccharomyces_cerevisiae_S288C\n \n### 4. Run FunGAP\n\n```bash\nconda activate fungap  # if you didn't do it already\n$FUNGAP_DIR/fungap.py \\\n  --genome_assembly GCF_000146045.2_R64_genomic.fna \\\n  --trans_read_1 SRR1198667_1.fastq \\\n  --trans_read_2 SRR1198667_2.fastq \\\n  --augustus_species saccharomyces_cerevisiae_S288C \\\n  --busco_dataset ascomycota_odb10 \\\n  --sister_proteome prot_db.faa \\\n  --num_cores 8\n  ```\n  \nThe FunGAP predicted ~5500 genes in my test run (`fungap_out/fungap_out` output directory). It took about 8 hours by Intel(R) Xeon(R) CPU E5-2676 v3 @ 2.40GHz with 8 CPU cores.\n"
      },
      "source": "https://raw.githubusercontent.com/CompSynBioLab-KoreaUniv/FunGAP/master/INSTALL.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "FunGAP performs gene prediction on given genome assembly and RNA-seq reads. See <a href=\"INSTALL.md\">INSTALL.md</a> and <a href=\"USAGE.md\">USAGE.md</a> for installation and usage instruction, or you can go to <a href=\"../wiki\">wiki</a> tab for the same.",
        "parent_header": [
          "FunGAP: Fungal Genome Annotation Pipeline v1.1.1"
        ],
        "type": "Text_excerpt",
        "value": "* [FunGAP INPUT & OUTPUT](#inputoutput)\n* [Pipeline description](#pipedesc)\n  * [Step1: Preprocessing of input data](#step1)\n  * [Step2: Gene prediction](#step2)\n  * [Step3: Gene model evaluation and filtration](#step3)\n* [Contact](#contact)\n\n<a name=\"inputoutput\"></a>"
      },
      "source": "https://raw.githubusercontent.com/CompSynBioLab-KoreaUniv/FunGAP/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/CompSynBioLab-KoreaUniv/FunGAP/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "FunGAP"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "CompSynBioLab-KoreaUniv"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 223366,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 1833,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/CompSynBioLab-KoreaUniv/FunGAP/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "mbnmbn00",
          "type": "User"
        },
        "date_created": "2020-09-12T17:48:08Z",
        "date_published": "2020-09-12T17:51:32Z",
        "description": "FunGAP v1.1.1\r\n\r\n - Python2 -> Python3\r\n - Busco v3 -> Busco v4\r\n - Braker v1 -> Braker v2\r\n - `translation_table` option added",
        "html_url": "https://github.com/CompSynBioLab-KoreaUniv/FunGAP/releases/tag/v1.1.1",
        "name": "FunGAP v1.1.0",
        "release_id": 31182958,
        "tag": "v1.1.1",
        "tarball_url": "https://api.github.com/repos/CompSynBioLab-KoreaUniv/FunGAP/tarball/v1.1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/CompSynBioLab-KoreaUniv/FunGAP/releases/31182958",
        "value": "https://api.github.com/repos/CompSynBioLab-KoreaUniv/FunGAP/releases/31182958",
        "zipball_url": "https://api.github.com/repos/CompSynBioLab-KoreaUniv/FunGAP/zipball/v1.1.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "mbnmbn00",
          "type": "User"
        },
        "date_created": "2020-07-25T18:07:39Z",
        "date_published": "2020-09-09T23:55:56Z",
        "description": "This is the last version of FunGAP v1.0.x.\r\n - BRAKER v1\r\n - BUSCO v3",
        "html_url": "https://github.com/CompSynBioLab-KoreaUniv/FunGAP/releases/tag/v1.0.3",
        "name": "FunGAP v1.0.3",
        "release_id": 31014998,
        "tag": "v1.0.3",
        "tarball_url": "https://api.github.com/repos/CompSynBioLab-KoreaUniv/FunGAP/tarball/v1.0.3",
        "type": "Release",
        "url": "https://api.github.com/repos/CompSynBioLab-KoreaUniv/FunGAP/releases/31014998",
        "value": "https://api.github.com/repos/CompSynBioLab-KoreaUniv/FunGAP/releases/31014998",
        "zipball_url": "https://api.github.com/repos/CompSynBioLab-KoreaUniv/FunGAP/zipball/v1.0.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "mbnmbn00",
          "type": "User"
        },
        "date_created": "2020-07-25T18:07:39Z",
        "date_published": "2019-02-26T03:45:24Z",
        "description": "**This version may not work**\r\nFunGAP v1.0.2\r\n - Install dependenciees using Anaconda\r\n - Fix bugs",
        "html_url": "https://github.com/CompSynBioLab-KoreaUniv/FunGAP/releases/tag/v1.0.2",
        "name": "FunGAP v1.0.2",
        "release_id": 15770577,
        "tag": "v1.0.2",
        "tarball_url": "https://api.github.com/repos/CompSynBioLab-KoreaUniv/FunGAP/tarball/v1.0.2",
        "type": "Release",
        "url": "https://api.github.com/repos/CompSynBioLab-KoreaUniv/FunGAP/releases/15770577",
        "value": "https://api.github.com/repos/CompSynBioLab-KoreaUniv/FunGAP/releases/15770577",
        "zipball_url": "https://api.github.com/repos/CompSynBioLab-KoreaUniv/FunGAP/zipball/v1.0.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "mbnmbn00",
          "type": "User"
        },
        "date_created": "2019-02-26T03:31:59Z",
        "date_published": "2019-02-26T04:37:35Z",
        "description": "- Improve scoring function to include transcript alignment score",
        "html_url": "https://github.com/CompSynBioLab-KoreaUniv/FunGAP/releases/tag/v1.0.1",
        "name": "FunGAP v1.0.1",
        "release_id": 15771023,
        "tag": "v1.0.1",
        "tarball_url": "https://api.github.com/repos/CompSynBioLab-KoreaUniv/FunGAP/tarball/v1.0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/CompSynBioLab-KoreaUniv/FunGAP/releases/15771023",
        "value": "https://api.github.com/repos/CompSynBioLab-KoreaUniv/FunGAP/releases/15771023",
        "zipball_url": "https://api.github.com/repos/CompSynBioLab-KoreaUniv/FunGAP/zipball/v1.0.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "mbnmbn00",
          "type": "User"
        },
        "date_created": "2017-04-25T09:38:59Z",
        "date_published": "2017-08-01T01:58:18Z",
        "description": "Beta version of FunGAP",
        "html_url": "https://github.com/CompSynBioLab-KoreaUniv/FunGAP/releases/tag/v1.0",
        "name": "FunGAP v1.0.0",
        "release_id": 7235983,
        "tag": "v1.0",
        "tarball_url": "https://api.github.com/repos/CompSynBioLab-KoreaUniv/FunGAP/tarball/v1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/CompSynBioLab-KoreaUniv/FunGAP/releases/7235983",
        "value": "https://api.github.com/repos/CompSynBioLab-KoreaUniv/FunGAP/releases/7235983",
        "zipball_url": "https://api.github.com/repos/CompSynBioLab-KoreaUniv/FunGAP/zipball/v1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contributors",
    "license",
    "faq",
    "support",
    "identifier",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 08:18:03",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 109
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "FunGAP performs gene prediction on given genome assembly and RNA-seq reads. See <a href=\"INSTALL.md\">INSTALL.md</a> and <a href=\"USAGE.md\">USAGE.md</a> for installation and usage instruction, or you can go to <a href=\"../wiki\">wiki</a> tab for the same.",
        "parent_header": [
          "FunGAP: Fungal Genome Annotation Pipeline v1.1.1"
        ],
        "type": "Text_excerpt",
        "value": "* [FunGAP INPUT & OUTPUT](#inputoutput)\n* [Pipeline description](#pipedesc)\n  * [Step1: Preprocessing of input data](#step1)\n  * [Step2: Gene prediction](#step2)\n  * [Step3: Gene model evaluation and filtration](#step3)\n* [Contact](#contact)\n\n<a name=\"inputoutput\"></a>"
      },
      "source": "https://raw.githubusercontent.com/CompSynBioLab-KoreaUniv/FunGAP/master/README.md",
      "technique": "header_analysis"
    }
  ]
}