{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/AlistairNWard/vcfPytools"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2010-12-14T18:37:51Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-03-25T11:27:27Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "vcf file manipulation"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9959075421097789,
      "result": {
        "original_header": "README: vcfPytools",
        "type": "Text_excerpt",
        "value": "vcfPytools is a set of tools in python for manipulation vcf v4.0 files. \n"
      },
      "source": "https://raw.githubusercontent.com/AlistairNWard/vcfPytools/master/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9287614784969538,
      "result": {
        "original_header": "General information:",
        "type": "Text_excerpt",
        "value": "  The tools in vcfPytools are written to try and minimise the memroy\nusage.  As a result, they are not necessarily as quick or as efficient\nas they could be. \n  All of the tools can accept a piped vcf as input.  This means that\nthe filter tool could be used, for example, and the output piped into\nanother instance of vcfPytools.  If the input is coming from a pipe, the\ninput vcf file must be listed as \"stdin\" and must be the first of the\ndefined input files. \n"
      },
      "source": "https://raw.githubusercontent.com/AlistairNWard/vcfPytools/master/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.964500172376648,
      "result": {
        "original_header": "annotate:",
        "type": "Text_excerpt",
        "value": "  Currently, either a hapmap or a dbsnp file should be provided, not both.  It\nis simple to pipe the result of dbsnp annotation back into the annotation tool\nto provide annotation of both. \n"
      },
      "source": "https://raw.githubusercontent.com/AlistairNWard/vcfPytools/master/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8372354379913243,
      "result": {
        "original_header": "extract:",
        "type": "Text_excerpt",
        "value": "  Option --discard-info (-d) ensures that all records containing this value in\nthe info field will not be included in the output file.  This cannot be used\nin conjunction with --keep-info to avoid conflict. \n  Option --keep-quality (-q) allows only records with specified quality values\nto be retained.  This requires two arguments: the quality value and a logical\noperator (eq - equals, le - less than or equal to, lt - less than, ge - greater\nthan or equal to , gt - greater than) to determine which records to keep.  For\nexample: \n"
      },
      "source": "https://raw.githubusercontent.com/AlistairNWard/vcfPytools/master/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8466606642259187,
      "result": {
        "original_header": "filter:",
        "type": "Text_excerpt",
        "value": "  Any value in the info string can be used for filtering by using the\n--info (-n) command line option.  This option takes three values: the\ninfo string tag, the cutoff value and whether to filter out those records\nwith less than (lt) or greater than (gt) this value.  For example: \n"
      },
      "source": "https://raw.githubusercontent.com/AlistairNWard/vcfPytools/master/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9485674705113532,
      "result": {
        "original_header": "intersect:",
        "type": "Text_excerpt",
        "value": "  Two input files are required as input and the intersection of\nthese two files is generated and sent to the output.  These files must\nbe sorted by genomic coordinate to function correctly, although the\nreference sequence order is no important. \n  If the --priority-file (-f) argument is set (this must be equal to one\nof the input vcf files), then the record written to the output will come\nfrom this file.  If this argument is not set, the record with the\nhighest quality is written out. \n  If the --priority-file (-f) argument is set to \"merge\", the data from both\nfiles will be included in the resulting file seperated by a \"/\".  If using this\nfunction, other tools may, currently, no longer function as they cannot all\nhandle the multiple sets of data. \n"
      },
      "source": "https://raw.githubusercontent.com/AlistairNWard/vcfPytools/master/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.904227500601125,
      "result": {
        "original_header": "merge:",
        "type": "Text_excerpt",
        "value": "  Any number of input vcf files are merged into a single file.  This is\nachieved by appending all the files to a single output and so if the\ninput files contain records for the same reference sequence, the\nresulting output file will not be sorted. \n"
      },
      "source": "https://raw.githubusercontent.com/AlistairNWard/vcfPytools/master/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9331310630697176,
      "result": {
        "original_header": "multi:",
        "type": "Text_excerpt",
        "value": "options:\n\t--in (-i):\tlist of input files and identifiers \n  Given a list of input files and identifiers, multi will generate and execute\ncommand lines to calculate the intersections and unique fractions of a set of\nvcf files.  The identifiers are used to construct the output file names. For\nexample, the command line: \nwould generate a set of vcf files representing all of the elements of a Wenn\ndiagram.  The files that would result (the names being constructed from the\nidentifiers, A, B and C) would be: \n  variantsFrom.A.B.C.vcf:\tinterection of all three files\n  variantsFrom.A.B.vcf:\t\tthose records in A and B, but not C\n  variantsFrom.B.C.vcf:\t\tthose records in B and C, but not A\n  variantsFrom.A.C.vcf:\t\tthose records in A and C, but not B\n  variantsFrom.A.vcf:\t\tthose records unique to A\n  variantsFrom.B.vcf:\t\tthose records unique to B\n  variantsFrom.C.vcf:\t\tthose records unique to C \n  The number of input files must be at least two. \n"
      },
      "source": "https://raw.githubusercontent.com/AlistairNWard/vcfPytools/master/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8089282456790909,
      "result": {
        "original_header": "sort:",
        "type": "Text_excerpt",
        "value": "  The input vcf file is sorted by genomic coordinates. \n"
      },
      "source": "https://raw.githubusercontent.com/AlistairNWard/vcfPytools/master/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9374866144784566,
      "result": {
        "original_header": "stats:",
        "type": "Text_excerpt",
        "value": "  Generate statistics from the vcf file.  If only the input file is\nspecified, the stats tool calculates statistics relating to the ts/tv\nratio and dbSNP membership for all reference sequences, filters and\ntotals.  The dbSNP percentage is only calculated if the vcf file is\nannotated with dbSNP rsid values.  The dbsnp tool can be used to perform\nthis annotation.  The outputted distributions keep track of dbSNP\nmembership and transitions/transversions. \n"
      },
      "source": "https://raw.githubusercontent.com/AlistairNWard/vcfPytools/master/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8474460678530188,
      "result": {
        "original_header": "union:",
        "type": "Text_excerpt",
        "value": "  Generate the union of the two input vcf files.  The comments included\nin the explanation of the intersection tool are applicable to this tool. \n"
      },
      "source": "https://raw.githubusercontent.com/AlistairNWard/vcfPytools/master/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9225412253693758,
      "result": {
        "original_header": "validate:",
        "type": "Text_excerpt",
        "value": "1. Check that the vcf file is sorted.  The order of the reference\nsequences is not important, but all entries for a reference sequence\nmust appear together and be sorted by genomic coordinate within this\nblock. \n2. All info string entries are checked with the information in the\nheader to ensure that there are the correct number and type of values. \n3. Genotype fields are checked to ensure that each listed sample has a\ngenotype and that the data is consistent with the format string for that\nrecord.  All of the genotype entries are also checked to ensure that\nthey are consistent with the description in the header.\n \n"
      },
      "source": "https://raw.githubusercontent.com/AlistairNWard/vcfPytools/master/README",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/AlistairNWard/vcfPytools/wiki"
      },
      "source": "https://raw.githubusercontent.com/AlistairNWard/vcfPytools/master/README",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/AlistairNWard/vcfPytools/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/AlistairNWard/vcfPytools/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "AlistairNWard/vcfPytools"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/AlistairNWard/vcfPytools/master/README",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.8470446785934056,
      "result": {
        "original_header": "annotate:",
        "type": "Text_excerpt",
        "value": "python vcfPytools.py annotate [options] \n  --hapmap (-m) annotates the vcf file info string to include HM3 if the record\nis included hapmap.  If the ref/alt values do not match the hapmap file, the\ninfo string will be populated with HM3A. \n"
      },
      "source": "https://raw.githubusercontent.com/AlistairNWard/vcfPytools/master/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9026208704733324,
      "result": {
        "original_header": "extract:",
        "type": "Text_excerpt",
        "value": "python vcfPytools.py extract [options] \n  Option --pass-filter (-p) will only output records that have the filter field\npopulated with PASS.  All filtered records or records that haven't undergone\nfiltering (filter=.) will be discarded. \n"
      },
      "source": "https://raw.githubusercontent.com/AlistairNWard/vcfPytools/master/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9101261421929695,
      "result": {
        "original_header": "filter:",
        "type": "Text_excerpt",
        "value": "python vcfPytools.py filter [options] \n"
      },
      "source": "https://raw.githubusercontent.com/AlistairNWard/vcfPytools/master/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8675142833042283,
      "result": {
        "original_header": "intersect:",
        "type": "Text_excerpt",
        "value": "python vcfPytools.py intersect [options] \n"
      },
      "source": "https://raw.githubusercontent.com/AlistairNWard/vcfPytools/master/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8675142833042283,
      "result": {
        "original_header": "merge:",
        "type": "Text_excerpt",
        "value": "python vcfPytools.py merge [options] \n"
      },
      "source": "https://raw.githubusercontent.com/AlistairNWard/vcfPytools/master/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8675142833042283,
      "result": {
        "original_header": "sort:",
        "type": "Text_excerpt",
        "value": "python vcfPytools.py sort [options] \n"
      },
      "source": "https://raw.githubusercontent.com/AlistairNWard/vcfPytools/master/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8675142833042283,
      "result": {
        "original_header": "stats:",
        "type": "Text_excerpt",
        "value": "python vcfPytools.py stats [options] \n"
      },
      "source": "https://raw.githubusercontent.com/AlistairNWard/vcfPytools/master/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8675142833042283,
      "result": {
        "original_header": "union:",
        "type": "Text_excerpt",
        "value": "python vcfPytools.py union [options] \n"
      },
      "source": "https://raw.githubusercontent.com/AlistairNWard/vcfPytools/master/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8675142833042283,
      "result": {
        "original_header": "validate:",
        "type": "Text_excerpt",
        "value": "python vcfPytools.py validate [options] \n"
      },
      "source": "https://raw.githubusercontent.com/AlistairNWard/vcfPytools/master/README",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8043413800832387,
      "result": {
        "original_header": "Available tools:",
        "type": "Text_excerpt",
        "value": "\tannotate - annotate a vcf file. (dbsnp, hapmap)\n\textract - extract reads from a specified region.\n\tfilter - filter the vcf file.\n\tintersect - generate the intersection of two vcf files.\n\tmerge - merge any number of vcf files.\n\tmulti - calculate Wenn diagram sections from vcf files.\n\tsort - sort a vcf file\n\tstats - generate statistics on defined parameters.\n\tunion - generate the union of two vcf files.\n\tunique - generate a vcf file of the unique records in a vcf file.\n\tvalidate - validate a vcf file. \n"
      },
      "source": "https://raw.githubusercontent.com/AlistairNWard/vcfPytools/master/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8909642797980484,
      "result": {
        "original_header": "annotate:",
        "type": "Text_excerpt",
        "value": "python vcfPytools.py annotate [options] \noptions:\n\t--in (-i): \tinput vcf file\n\t--out (-o):\toutput vcf file\n\t--hapmap (-m):\tinput hapmap vcf file\n\t--dbsnp (-d):\tinput dbSNP vcf file \n"
      },
      "source": "https://raw.githubusercontent.com/AlistairNWard/vcfPytools/master/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8683913856240264,
      "result": {
        "original_header": "extract:",
        "type": "Text_excerpt",
        "value": "python vcfPytools.py extract [options] \n  python vcfPytools.py extract --in <VCF> --keep-quality 90 ge \n"
      },
      "source": "https://raw.githubusercontent.com/AlistairNWard/vcfPytools/master/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8792483721389717,
      "result": {
        "original_header": "filter:",
        "type": "Text_excerpt",
        "value": "python vcfPytools.py filter [options] \n"
      },
      "source": "https://raw.githubusercontent.com/AlistairNWard/vcfPytools/master/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.90369557230084,
      "result": {
        "original_header": "intersect:",
        "type": "Text_excerpt",
        "value": "python vcfPytools.py intersect [options] \noptions:\n\t--in (-i):\t\tinput vcf files\n        --bed (-b):\t\tinput bed file\n\t--out (-o):\t\toutput vcf file\n        --priority-file (-f):\toutput record from this file \n"
      },
      "source": "https://raw.githubusercontent.com/AlistairNWard/vcfPytools/master/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8800607530832419,
      "result": {
        "original_header": "merge:",
        "type": "Text_excerpt",
        "value": "python vcfPytools.py merge [options] \noptions:\n\t--in (-i):\tinput vcf files\n\t--out (-o):\toutput vcf file \n"
      },
      "source": "https://raw.githubusercontent.com/AlistairNWard/vcfPytools/master/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8562734925467295,
      "result": {
        "original_header": "multi:",
        "type": "Text_excerpt",
        "value": "python vcfPytools.py multi [options] \n"
      },
      "source": "https://raw.githubusercontent.com/AlistairNWard/vcfPytools/master/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8949721869259925,
      "result": {
        "original_header": "sort:",
        "type": "Text_excerpt",
        "value": "python vcfPytools.py sort [options] \noptions:\n\t--in (-i):\tinput vcf file\n\t--out (-o):\toutput vcf file \n"
      },
      "source": "https://raw.githubusercontent.com/AlistairNWard/vcfPytools/master/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9203328255019785,
      "result": {
        "original_header": "stats:",
        "type": "Text_excerpt",
        "value": "python vcfPytools.py stats [options] \n"
      },
      "source": "https://raw.githubusercontent.com/AlistairNWard/vcfPytools/master/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8835154630181681,
      "result": {
        "original_header": "union:",
        "type": "Text_excerpt",
        "value": "python vcfPytools.py union [options] \noptions:\n\t--in (-i):\t\tinput vcf files\n\t--out (-o):\t\toutput vcf file\n        --priority-file (-f):\toutput record from this file\n\t--pass-filter (-p):\tonly output records that pass filters \n"
      },
      "source": "https://raw.githubusercontent.com/AlistairNWard/vcfPytools/master/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8865796884679139,
      "result": {
        "original_header": "unique:",
        "type": "Text_excerpt",
        "value": "python vcfPytools.py unique [options] \n"
      },
      "source": "https://raw.githubusercontent.com/AlistairNWard/vcfPytools/master/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9203328255019785,
      "result": {
        "original_header": "validate:",
        "type": "Text_excerpt",
        "value": "python vcfPytools.py validate [options] \n"
      },
      "source": "https://raw.githubusercontent.com/AlistairNWard/vcfPytools/master/README",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/AlistairNWard/vcfPytools/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "vcfPytools"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "AlistairNWard"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 114552,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/AlistairNWard/vcfPytools/master/README"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 05:25:13",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 20
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ]
}