{
  "application_domain": [
    {
      "confidence": 6.57,
      "result": {
        "type": "String",
        "value": "Audio"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/oscarlr/MsPAC"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-12-12T02:26:42Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-05-10T11:35:30Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Phase reads, assemble haplotypes and detect SVs"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "parent_header": [
          "MsPAC"
        ],
        "type": "Text_excerpt",
        "value": "MsPAC takes in long reads and phased SNVs to separate the reads into two haplotypes, and assembles both haplotypes and detects structural variants. The output is a fasta file containing both haplotypes and VCF file with SVs. The SVs are annotated with their type, size, genotype and reference, haplotype 1 and haplotype 2 sequence.\n"
      },
      "source": "https://raw.githubusercontent.com/oscarlr/MsPAC/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.8882162340888505,
      "result": {
        "original_header": "MsPAC",
        "type": "Text_excerpt",
        "value": "**Phase reads, assemble haplotypes and detect SVs** \n"
      },
      "source": "https://raw.githubusercontent.com/oscarlr/MsPAC/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8327319356353029,
      "result": {
        "original_header": "Configuration File",
        "type": "Text_excerpt",
        "value": "Explanation of configuration file entries is [here](cfg_readme.md).\n```\n[Input]\ndirectory = \n\n[Phase-bam input files]\nphased vcf = \nreads aligned = \n\n[Phase-bam params]\nsample name in VCF = \noutput phased bamfile = \n\n[Prep reads params]\nBAM fofn = \nRaw reads directory =\n\n[Assembly params]\nMinimum phased block length = 1000\nComma-seperated list of haplotypes = 0_1,0_2\nAssembly directory = \nFlanking length = 1000\nPhased bedfile = None\n\n[SV calling params]\nSV calling directory =\nreference = \n\n[Other params]\ncluster = No\n\n[HIGH INTENSITY JOB]\nwalltime = 24\nthreads = 1\nmemory = 8\nqueue = private\n\n[LOW INTENSITY JOB]\nwalltime = 24\nthreads = 1\nmemory = 8\nqueue = private\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/oscarlr/MsPAC/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9762478077341602,
      "result": {
        "original_header": "Explanation of steps",
        "type": "Text_excerpt",
        "value": "MsPac is split into four steps. For each step, the input is a configuration file. A description of the configuration file is [here](cfg_readme.md). \n"
      },
      "source": "https://raw.githubusercontent.com/oscarlr/MsPAC/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9918076114325688,
      "result": {
        "original_header": "`phase-bam`",
        "type": "Text_excerpt",
        "value": "In the first step `phase-bam`, a bam file is created. This bam file is a copy of the input bam file with a read group annotation added to the reads. A read group annotation of 1 and 2 corresponds to haplotype 1 and 2. The read group annotation of 0 corresponds to unassignable reads. \n"
      },
      "source": "https://raw.githubusercontent.com/oscarlr/MsPAC/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9305487904840917,
      "result": {
        "original_header": "`prep-reads`",
        "type": "Text_excerpt",
        "value": "In the second step `prep-reads`, several bam files are created. These bam contain the raw reads seperated by chromosome and haplotype. It makes the process of searching for these reads much faster during the Quiver process, where haplotype specific reads are used to clean the haplotype-specific contigs. \n"
      },
      "source": "https://raw.githubusercontent.com/oscarlr/MsPAC/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9144284785488309,
      "result": {
        "original_header": "`sv-calling`",
        "type": "Text_excerpt",
        "value": "In the last step `sv-calling`, the haplotypes and reference are aligned and the SVs are called. In this step, new directories will be made that holds the multiple sequence alignment and a BED file with the SVs.\n \n"
      },
      "source": "https://raw.githubusercontent.com/oscarlr/MsPAC/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/oscarlr/MsPAC/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/oscarlr/MsPAC/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "oscarlr/MsPAC"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MsPAC"
      },
      "source": "https://raw.githubusercontent.com/oscarlr/MsPAC/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/oscarlr/MsPAC/master/MsPAC/bash/assemble_window_v3.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/oscarlr/MsPAC/master/MsPAC/bash/sv_calling.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/oscarlr/MsPAC/master/MsPAC/bash/assign_reads_to_haplotype.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/oscarlr/MsPAC/master/MsPAC/bash/map.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/oscarlr/MsPAC/master/MsPAC/bash/get_msa_coords.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "MsPAC"
        ],
        "type": "Text_excerpt",
        "value": "```\n### Installing MsPAC and it's dependencies\ngit clone https://github.com/oscarlr/MsPAC.git\ncd MsPAC\nconda env create -f environment.yml \nconda activate MsPAC\npython setup.py install\n\n### Installing cluster package that's needed\ncd ..\ngit clone https://github.com/oscarlr/cluster.git\ncd cluster\npython setup.py install\n```"
      },
      "source": "https://raw.githubusercontent.com/oscarlr/MsPAC/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1.0,
      "result": {
        "original_header": "Cluster configuration",
        "type": "Text_excerpt",
        "value": "If you don't want to use the cluster use this command before running MsPAC:\n```\nexport SJOB_DEFALLOC=\"\"\n```\nIf you want to use the cluster, edit the `lsf/cluster/config.py` script in `https://github.com/oscarlr/cluster.git`. The cluster package reads from this file the default configurations to run jobs in the cluster as wells as the account to use when submitting jobs. After you edit `lsf/cluster/config.py` reinstall the package using `python setup.py install` in the cluster folder.\n \n"
      },
      "source": "https://raw.githubusercontent.com/oscarlr/MsPAC/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8690071529825393,
      "result": {
        "original_header": "Configuration File",
        "type": "Text_excerpt",
        "value": "Explanation of configuration file entries is [here](cfg_readme.md).\n```\n[Input]\ndirectory = \n\n[Phase-bam input files]\nphased vcf = \nreads aligned = \n\n[Phase-bam params]\nsample name in VCF = \noutput phased bamfile = \n\n[Prep reads params]\nBAM fofn = \nRaw reads directory =\n\n[Assembly params]\nMinimum phased block length = 1000\nComma-seperated list of haplotypes = 0_1,0_2\nAssembly directory = \nFlanking length = 1000\nPhased bedfile = None\n\n[SV calling params]\nSV calling directory =\nreference = \n\n[Other params]\ncluster = No\n\n[HIGH INTENSITY JOB]\nwalltime = 24\nthreads = 1\nmemory = 8\nqueue = private\n\n[LOW INTENSITY JOB]\nwalltime = 24\nthreads = 1\nmemory = 8\nqueue = private\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/oscarlr/MsPAC/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/oscarlr/MsPAC/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MsPAC"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "oscarlr"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 53340,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 6082,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/oscarlr/MsPAC/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Tool requirements",
        "parent_header": [
          "MsPAC"
        ],
        "type": "Text_excerpt",
        "value": "1. Linux operating system\n2. [Conda package](https://conda.io/en/latest/)\n3. [cluster python package](https://github.com/oscarlr/cluster)\n"
      },
      "source": "https://raw.githubusercontent.com/oscarlr/MsPAC/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Test runs",
        "parent_header": [
          "MsPAC"
        ],
        "type": "Text_excerpt",
        "value": "```\nexport SJOB_DEFALLOC=\"\"\ncd testing\nsh run.sh\n```"
      },
      "source": "https://raw.githubusercontent.com/oscarlr/MsPAC/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 05:38:48",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 19
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick Start",
        "parent_header": [
          "MsPAC"
        ],
        "type": "Text_excerpt",
        "value": "```\nMsPAC phase-bam run.cfg\nMsPAC prep-reads run.cfg\nMsPAC assembly run.cfg\nMsPAC sv-calling run.cfg\n```\n"
      },
      "source": "https://raw.githubusercontent.com/oscarlr/MsPAC/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "BED SV output",
        "parent_header": [
          "MsPAC",
          "Example of output"
        ],
        "type": "Text_excerpt",
        "value": "```\nchr22\t16610019\t16610020\tINS\t1|0\t46\t46.6780821918\t46.84\t.\tCACTGCTGTTGGGTTCTCTTTGTTTTTCCTCACAAAGGATTCCACA\t.\t18270\t18316\t/sc/orga/work/rodrio10/software/in_github/MsPAC/testing/MsPAC/sv_calling/chr22/16595201_16611082/msa.clu\n```\nThe columns are:\n```\n1. chromosome\n2. SV start\n3. SV end\n4. SV type\n5. SV genotype\n6. SV size\n7. Haplotype 1 SV quality score \n8. Haplotype 2 SV quality score\n9. Reference sequence\n10. Haplotype 1 sequence\n11. Haplotype 2 sequence\n12. Start index position of SV in multiple sequence alignment file \n13. End index position of SV in multiple sequence alignment file \n14. Full path of multiple sequence alignment file\n```"
      },
      "source": "https://raw.githubusercontent.com/oscarlr/MsPAC/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Assembled fasta haplotype",
        "parent_header": [
          "MsPAC",
          "Example of output"
        ],
        "type": "Text_excerpt",
        "value": "```\n>22.16050007.16697745.0_1.raw.0/0/0_0\nGACCATGTGAAACTAAGGACAACTTCAGAGCTTCACACAGCTTCAACACTGGAGAGAAAA\nCAGTGAACCCACAGAAAACATCCTACAGACTGGGAGAAAATTATGGAAAACTGTGGATCT\nGGAAGGGCTTCTTATCTAACATATTCAAGAAACTAATGGTCCTAAGTGGACAAAAACCAA\nTATACAATGCTTGTCACACCTAAGTGGACAAAAACCAATACTAAAAATGCCCAAAAGACT\nGCGTAGGCATTTCTGAAAAAACCTGAAACAGCCTCTCAGGTAACAGAAGTTTCTCCACAT\nCAAGAAGAGTTTCTCCCCAGAGAACGAGTATGACCAGAAAACAGCAATAAAACTTTGGAA\nTAAGAGATAAGGGCAGTGTAGATTTGCAGACAGAGGAACTATTACATACTACCTGGTTTG\nAATGCAAATTTGTATACCCACTGGGAAACAGCTGGAGGTTTCTGAAACAATTAACAACAC\nAACCACCAGTTCCTCTAGCCATCCCACACTGGGTATACCTGCAAAGCCAAGGAAACCTAC\n```\nThe fasta header has the region that was assembled with the corresponding haplotype.\n"
      },
      "source": "https://raw.githubusercontent.com/oscarlr/MsPAC/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Phased BAM file",
        "parent_header": [
          "MsPAC",
          "Example of output"
        ],
        "type": "Text_excerpt",
        "value": "```\nm150131_015113_42163R_c100780292550000001823166508251570_s1_p0/8761/14473_27456\n16\n22\n16050008\n0\n15543H97S27=1I1=1X12=1I20=2D13=1I8=1I9=3I6=1I11=1D5=1D1=1D11=1I3=1D11=1I4=1X1=1D3=1I8=5I10=1I1=1I3=1I5=3I15=1I8=1D38=1X16=1X5=1I8=1X4=1I12=1I4=1I14=1I1=1I8=1D6=1I4=1I13=1I15=1D1=1I21=2I12=1I1=1X6=1X3=1D5=\n*\n0\n12343\nCCAATCTCCTGGCAGCCACGCAGCCGGTCGAGAAATTTCGTCACTTGTGGCGGGTTCCCAAGCCTGTTGCCATGCAGCCTCTGGAAAGAGATCTGATTAAGTCCCAGGACTTCAGAAGAGCTGTTGCGACCTTGGCCAATGTCACTTCCTCCTTCAGGAATTGCAGTGGGCCTTAAGTGCCTTCCTCTCGGGCCCACTGGTTAT\n--*%..)-.-/,.//*-/..,/.%+%\"'-)(./*./)'/\"(..%,(.,(+&)\"*.(-,+-./-\"///*/,.//+.//,/).(+)/*.//+/)//,//#/'./.,,./)/'&%///.+.////.(%/./.+.,*/+)(..$/////,+...,,/&&..((%.(/.////,$,/*'/.+//,//%-././..,'###(&(+($',,\nAS:i:-54803\nXS:i:15544\nXE:i:28527\nqs:i:15544\nqe:i:28527\nzm:i:-1\nXL:i:12884\nXT:i:1\nNM:i:0\nFI:i:14476\nXQ:i:42999\niq:Z:0/,(121/113-223+/212121/,-#'//202*12*'2#)10%0(0.),&.#*0)0--/03.#232*3-1332223.2*111,2+123,3232.32#3'120/.23)2-3&3333.1223232%313211-*3-*(01$22332--101/.2&-01)0)0)313322-$-2*'30,23-22%/121211-'###,'/,\ndq:Z:222'22*2222222222222222&2&(22+)2222222222222-2222222)2222222222222222222222222222(222222222*22222222222222222('222222222222)222222222222222222222222222222'222)'222222222222222222222222222222222(2+2)2\nsq:Z:<<<<<<<<<<<<<9<<<<<<<<<<<<<<<<<<<<<<<<<%<<<<<<<<<<<<<<<<<<<<<<<$<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<5<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<3<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\nmq:Z:03/6>0>75,834;=1280-*:3,C.-1/*:@9C3@1}>}}19}:857}:}&}:753:564:C}>9M323=62'4>1;:}94''A?=9:}5C;6}?=}=}FG6-71;B4}DI5>6-)=D<3@17}9;40'7}D:1-}95};57=8};/A9-9B}}8:346@(8283C@7}<8}}88}963=6}74;5A8>:7&%-.}9<\nst:Z:AACCGAGAAGTTACTAACATACTAATTGATCTCCCGGGATGACAGGTGTTATTTGGAAACCTAAGTGGTAACGTACTAAGAGTTCCCTCTCGAGTCGGCCTGAAACTTCAGGACTCCTCTAGTGGTATCAAGGTTAACCGTGACAGGAAGAAGGACTTCCGGTACTGTTTAAGGCCTGTAAGGAAGAGATTTAAACAGT\ndt:Z:NNNANNCNNNNNNNNNNNNNNNNANTTNNTANNNNNNNNNNNNNTNNNNNNNANNNNNNNNNNNNNNNNNNNNNNNNNNNNANNNNNNNNNANNNNNNNNNNNNNNNNNGTNNNNNNNNNNNNGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNTNNNCCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNANGN\nip:Z:S26,94,16,11,14,14,77,19,28,28,26,91,24,5,35,8,11,46,10,31,75,27,16,257,26,54,44,15,39,47,16,7,37,7,17,57,50,20,26,30,23,49,63,6,636,54,12,33,33,16,15,141,360,18,14,25,42,8,17,21,51,10,17,34,19,13,12\nRG:Z:2\n```\nRG tag has the haplotype information. This read can be accessed using the `samtools view` command with the `-r` option. For example, `samtools view reads.bam 22:16050008-16050108 -r 2`."
      },
      "source": "https://raw.githubusercontent.com/oscarlr/MsPAC/master/README.md",
      "technique": "header_analysis"
    }
  ]
}