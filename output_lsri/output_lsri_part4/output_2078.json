{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/dpryan79/bison"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2014-02-18T13:43:35Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-08-05T14:53:15Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Bisulfite alignment on nodes of a cluster"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9672333930589598,
      "result": {
        "original_header": "Bison: bisulfite alignment on nodes of a cluster.",
        "type": "Text_excerpt",
        "value": "**N.B.: There is now a tutorial available [here](http://sourceforge.net/projects/dna-bison/files/bison_tutorial.tar.gz/download). This tutorial largely replaces this README file and users are encouraged to read it.** \n"
      },
      "source": "https://raw.githubusercontent.com/dpryan79/bison/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9971094860413007,
      "result": {
        "original_header": "bedGraph2BSseq.py",
        "type": "Text_excerpt",
        "value": "This python script can accept a filename prefix and the names of at least 2\nbedGraph files and output 3 files for input into BSseq. A single chromosome can\nbe processed at a time, if desired, by using the -chr option. The output files\nwill be named $prefix.M, $prefix.Cov, and $prefix.gr. $prefix.M is a matrix with\na header line that lists the number of reads supporting methylation at each site\nin the bedGraph files. If there is no coverage in a given sample, the value is\nset to 0. $prefix.Cov is the analogous file listing coverage in each sample\n(again, 0 denotes no coverage). $prefix.gr lists the coordinates for each line\nin the .Cov and .M files. Loading these files into R would be performed as\nfollows (in this example \"Chr17\" was the prefix):\n```R\nM <- as.matrix(read.delim(\"Chr17.M\", header=T))\nCov <- as.matrix(read.delim(\"Chr17.Cov\", header=T))\nbed <- read.delim(\"Chr17.bed\", header=F)\n#Remember that BED and bedGraph files are 0-based!\ngr <- GRanges(seqnames=Rle(bed$V1),ranges=IRanges(start=bed$V2+1, end=bed$V3), strand=Rle(\"*\", nrow(bed)))\ngroups <- data.frame(row.names=colnames(M),\n    var1 <- c(1,1,1,1,2,2,2,2)) #A very simple experiment with 2 groups of 4 samples\nBS1 <- BSseq(M=M, Cov=Cov, gr=gr, pData=groups, sampleNames=colnames(M)) #You'll want to set some of the additional options!\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/dpryan79/bison/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.986214555641907,
      "result": {
        "original_header": "`bedGraph2MethylSeekR`",
        "type": "Text_excerpt",
        "value": "As above, but each bedGraph file is converted into a .MethylSeekR file. The\nbedGraphs MUST be merged before-hand with bison_merge_CpGs to create per-CpG\nmetrics, as this is what MethylSeekR is expecting. Input is performed with the\n`readMethylome()` function. Chromosome lengths can be computed with:\nsamtools faidx genome.fa\nwhere genome.fa is a multifasta file containing all of the chromosomes. The\nresulting .fai file is simply a text file and can be loaded into R with:\n```R\nfai <- read.delim(\"genome.fa.fai\", header=F)\nchromosome_lengths <- fai$V2\nnames(chromosome_lengths) <- fai$V1\nd <- readMethylome(\"file.MethylSeekR\", chromosome_lengths)\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/dpryan79/bison/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9359844805142932,
      "result": {
        "original_header": "`make_reduced_genome`",
        "type": "Text_excerpt",
        "value": "Create a reduced representation genome appropriate for reads of a given size\n($size, default is 36bp). MspI and TaqI libraries are supported. Nucleotides\ngreater than $size+10% are converted to N.\n \n"
      },
      "source": "https://raw.githubusercontent.com/dpryan79/bison/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9301910414746054,
      "result": {
        "original_header": "`merge_bedGraphs.py`",
        "type": "Text_excerpt",
        "value": "This will merge bedGraphs from technical replicates of a single sample into a\nsingle bedGraph file, summing the methylation metrics as it goes. The output,\nlike the input is coordinate sorted.\n \n"
      },
      "source": "https://raw.githubusercontent.com/dpryan79/bison/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9453984854761895,
      "result": {
        "original_header": "`bison_merge_CpGs`",
        "type": "Text_excerpt",
        "value": "Methylation is usually symmetric at CpG sites. While the output bedGraph files\nhave a single-C resolution, this will convert that to single-CpG resolution by\nsumming Cs in the same CpG from opposite strands. This saves space and will\noften speed up downstream statistics.\n \n"
      },
      "source": "https://raw.githubusercontent.com/dpryan79/bison/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9334025513770756,
      "result": {
        "original_header": "BiSeq",
        "type": "Text_excerpt",
        "value": "BiSeq requires input in an identical format as BSseq. Consequently, just use the\nbedGraph2BSseq.py helper script. The following example commands should then\nsuffice to load everything into R:\n```R\nexptData <- SimpleList(Sequencer=\"Some sequencer\", Year=\"2014\") #This is just descriptive information\nM <- as.matrix(read.delim(\"chr17.M\", header=T))\nCov <- as.matrix(read.delim(\"chr17.Cov\", header=T))\nbed <- read.delim(\"chr17.bed\", header=F)\ngr <- GRanges(seqnames=Rle(bed$V1),ranges=IRanges(start=bed$V2+1, end=bed$V3), strand=Rle(\"*\", nrow(bed)))\ngroups <- DataFrame(row.names=colnames(M),\n    group = c(1,1,1,1,2,2,2,2)) #A very simple experiment with 2 groups of 4 samples\nd <- BSraw(exptData=exptData, rowData=gr, colData=groups, totalReads=Cov, methReads=M)\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/dpryan79/bison/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9425313888177562,
      "result": {
        "original_header": "BEAT",
        "type": "Text_excerpt",
        "value": "The BEAT Bioconductor package conveniently expects per-sample position and\nmethylation information in a format already present in bedGraph files. However,\nthis information is in a slightly different format than bedGraph, so the\nfollowing awk script can be used. Note that BEAT expects files named as\nsample_name.positions.csv. \n"
      },
      "source": "https://raw.githubusercontent.com/dpryan79/bison/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9252616456373981,
      "result": {
        "original_header": "Throttling",
        "type": "Text_excerpt",
        "value": "`bison_herd` generally uses blocking, but not synchronous sends. What this means\nin practice is that many reads will be queued by the master node for sending to\nthe worker nodes. Likewise, many alignments can be queued by the worker nodes\nfor sending back to the master node. The queue that many MPI implementations use\nfor this is relatively small and immutable. While a full queue should cause\n`MPI_Send` to block until there is sufficient space, occasionally a constellation\nof events can occur that cause this queue to overflow and the master node to\nthen crash. This can be alleviated by limiting the possible number of reads that\ncould ever possibly be in the queue at any single time. As the queue is not\ndirectly pollable, the difference between the number of reads sent and written\nis used as a surrogate. The maximum number of reads in the wild is then either\n2x or 4x this difference (since a read is queued per worker node). In reality,\nthe queue should be emptier than this as there are normally reads buffered on\nthe worker nodes (being fed to bowtie2, being aligned or being sent) and\nelsewhere on the master node (being received, waiting to be processed, being\nprocessed, waiting to be written, or being written). \nThrottling is not always required, particularly as an increasing number of nodes\nare used. Throttling can be disabled altogether by compiling with -DNOTHROTTLE,\nwhich will remove all related components.\n \n"
      },
      "source": "https://raw.githubusercontent.com/dpryan79/bison/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9196287620550596,
      "result": {
        "original_header": "Debug mode",
        "type": "Text_excerpt",
        "value": "For debugging, a special debug mode is available for both bison and `bison_herd`\nby compiling with -DDEBUG. Instead of running of needing multiple nodes, both\nprograms will then run as if they were just a single node. Compiling with this\noption adds the -taskid option to both programs. The taskid is equivalent to the\nnode number in the bison (or `bison_herd`) hierarchy. Node 0 is the master node\nand performs the final file writing. For bison, nodes 1-4 are equivalent to the\nworker nodes that align reads to the original top, original bottom,\ncomplementary to original top and complementary to original bottom strands,\nrespectively. For directional libraries, only the first 2 are used. These will\nwrite alignments to a file for final processing when run as taskid 0. This is\nuseful when odd alignments are being output and the source of the error needs to\nbe tracked down. The mode for `bison_herd` is similar, except there are always 8\ntheoretical worker nodes (i.e., taskid 1-8 need to be run prior to taskid 0).\nThis allows testing multiple master processor threads with both directional and\nnon-directional reads. \nIn general, this mode should not be used unless you are running into extremely\nodd bugs.\n \n"
      },
      "source": "https://raw.githubusercontent.com/dpryan79/bison/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8114439863742128,
      "result": {
        "original_header": "Compatibility with Bismark",
        "type": "Text_excerpt",
        "value": "Bison is generally similar to bismark, however the indexes are incompatible,\ndue to bismark renaming contigs. Also, the two will not produce identical \noutput, due to algorithmic differences. Running `bison_methylation_extractor`\non the output of bismark will also produce different results, again due to\nalgorithmic differences. In addition, bison always outputs BAM files directly.\n \n"
      },
      "source": "https://raw.githubusercontent.com/dpryan79/bison/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9482485246964155,
      "result": {
        "original_header": "0.4.0",
        "type": "Text_excerpt",
        "value": "  *  Allow lower case reads in fastq files (previously, this would result in\n     corrupt BAM files. \n  *  HTSlib is now a submodule in the Github repository. This simplifies\n     compilation. Further, that is the only supported compilation method now\n     (samtools-0.1.19 is no longer supported). \n  *  CRAM files can now be produced and processed. Both bison and `bison_herd`\n     will output in CRAM format if the -C option is given. \n  *  The header @PG line is now rewritten to contain the actual command\n     executed and the bison/herd version. \n  *  Excess space allocated to hold the genome is now returned. \n  *  Output BAM/CRAM files can now be sorted on the fly. The method for this is\n     similar to that used by samtools, where temporary files are written and\n     then merged. This merge step is performed in parallel if multiple output\n     files are being written by `bison_herd`. \n"
      },
      "source": "https://raw.githubusercontent.com/dpryan79/bison/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9023129693265469,
      "result": {
        "original_header": "0.3.3",
        "type": "Text_excerpt",
        "value": "  *  Allow mixed and discordant alignments.\n \n"
      },
      "source": "https://raw.githubusercontent.com/dpryan79/bison/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9060672775960622,
      "result": {
        "original_header": "0.3.2",
        "type": "Text_excerpt",
        "value": "  *  There is now a [tutorial](http://sourceforge.net/projects/dna-bison/files/bison_tutorial.tar.gz/download). \n"
      },
      "source": "https://raw.githubusercontent.com/dpryan79/bison/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9047007874449658,
      "result": {
        "original_header": "0.3.1",
        "type": "Text_excerpt",
        "value": "  *  The various bedGraph files didn't previously have a \"track\" line. The UCSC\n     Genome Browser requires this, so bedGraph files produced will now contain \n     it. It should be noted that this is the very minimal line required. Bison\n     does not provide facilities for making these changes, users need to edit\n     things manually or use external programs for this. It should also be noted\n     that any changes to the \"track\" or other header lines should be made after\n     all processing with Bison is complete. \n  *  Add conversion scripts for import into MethylSeekR, BiSeq, and BEAT. \n  *  Revamped how `bison_markduplicates` works. The 3' coordinates are now\n     ignored, soft-clipped bases on the 5' end are now incorporated in\n     determining the 5' coordinate and methylation calls are also used in\n     determining if reads/pairs are duplicates. This should be a much more\n     robust (though more resource intensive) method than that previously used.\n     Whereas the previous version kept unmarked the read/pair with the highest\n     MAPQ, this one will do that for the read/pair with the highest summed phred\n     score (a la picard).\n \n"
      },
      "source": "https://raw.githubusercontent.com/dpryan79/bison/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9787169608264777,
      "result": {
        "original_header": "0.3.0",
        "type": "Text_excerpt",
        "value": "  *  Note: The indices produced by previous versions are not guaranteed to be\n     compatible unless you used a multi-fasta file. There was a serious\n     implementation problem with how `bison_index` worked when given multiple\n     files as input and how multiple files were read into memory in previous\n     versions. If you used a multi-fasta file, then everything will continue\n     to work correctly. However, if you used multiple fasta files in a list\n     then I strongly encourage you to delete the previous indices (just remove\n     the bisulfite_genome directory) and reindex. The technical reasons for this\n     issue are that when the bison tools previously read multiple fasta files\n     into memory, they would do so in whatever order they appeared in the\n     directory structure, which can change over time and isn't guaranteed to\n     match the order of files someone specified during indexing. While the\n     alignments wouldn't be affected by this, the methylation calls could have\n     been seriously compromised. In this version, bison_index will only accept a\n     directory, not a list of files, and it will always alphasort() the list of\n     files in that directory prior to processing. This should eliminate this\n     problem. My apologies to anyone affected by this. \n  *  Added --genome-size option to a number of the tools. Many of the bison \n     programs need to read the genome into memory. By default, 3 gigabases worth\n     of memory are allocated for that and the size increased as needed. For\n     smaller genomes, this wasted space. For larger genomes, the constant\n     reallocation of space could seriously slow things down. Consequently, this\n     option was added to any tool that reads the genome into memory. It's\n     convenient to overestimate this slightly, so if your genome is 3.8\n     gigabases, then just use 4000000000 as the genome size. \n  *  A number of small bug fixes, such as when \"genome_dir\" doesn't end in a /.\n \n"
      },
      "source": "https://raw.githubusercontent.com/dpryan79/bison/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9154238197501868,
      "result": {
        "original_header": "0.2.3",
        "type": "Text_excerpt",
        "value": "  *  Fix how hard and soft-clipped bases are dealt with (previously, soft-\n     clipped bases resulted in an error and hard-clipped bases in incorrect\n     position assignments!). \n  *  Multiple bug fixes related to local alignment, which previously didn't\n     work correctly. These issues seem to generally now be resolved. May thanks\n     to user mvijayen on seqanswers for providing a perfect usage example for\n     testing (see thread http://seqanswers.com/forums/showthread.php?t=39914). \n  *  The maximum length of a single contig is now (2^64)-1 (instead of the\n     previous 2^64). I don't think bowtie2 would even support something that\n     long, but if it did then bison wouldn't (internally, a position of 2^64\n     means a base is inserted, soft, or hard-clipped). \n  *  A note about creating methylation-bias metrics with locally aligned reads\n     is in order. If a read is soft-clipped, that portion is still included in\n     the M-bias metrics. Likewise, if you pass -OT X,X,X,X or similar\n     parameters to the methylation extractor, the soft-clipped area is also\n     included in there. \n  *  Another note regarding local alignments is that the XX auxiliary tag\n     (effectively the more verbose version of the MD tag) contains soft-clipped\n     sequences. I could probably have these removed if someone would like.\n \n"
      },
      "source": "https://raw.githubusercontent.com/dpryan79/bison/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8846621095975541,
      "result": {
        "original_header": "0.2.1",
        "type": "Text_excerpt",
        "value": "  *  Added support for file globbing in bison_herd. You may now input multiple\n     files using a combination of wild-cards (*, ?, etc.) and commas. Remember\n     to put these in quotes (e.g., \"foo/*1.fq.gz\",\"bar/*1.fq.gz\") so the shell\n     doesn't perform the expansion!). As before, specifying multiple inputs with\n     the same file name (e.g., sample1/reads.fq,sample2/reads.fq) will cause the\n     output from the first reads.fq alignment to be over-written by the second. \n  *  Fixed the text output, since \"unique alignments\" isn't really correct,\n     given that alignments with scores of 0 or 1 can be output but aren't\n     unique. \n  *  Added information in the Makefile and above about compiling with openmpi. \n  *  Fixed a bug in bison_herd wherein the -upto option wasn't being handled\n     properly. -upto now accepts an unsigned long in bison_herd. \n  *  Created an bison_mbias2pdf Rscript that will read in the output of\n     bison_mbias and plot the results, indicating the region of each read that\n     should be included in methylation extraction. This script also print these\n     suggestions in the format used by bison_methylation_extractor, for\n     convenience. \n  *  The methylation extractor can now be told to only include certain regions\n     of each read in the output methylation metrics. This is needed when there\n     is apparent bias in the methylation at one or both ends of a read.  \n  *  Fixed a bug in writing unmapped reads. \n"
      },
      "source": "https://raw.githubusercontent.com/dpryan79/bison/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9383096874257867,
      "result": {
        "original_header": "0.2.0",
        "type": "Text_excerpt",
        "value": "  *  Added a note to the methylation summary statistics output at the end of a\n     run that the numbers will include double counting of any site covered by\n     both mates in a pair. These metrics are only meant for general information\n     and not further analysis, so I don't consider that a bug (it's actually a\n     design decision for the sake of performance). \n  *  Fixed a bug in bison_merge_CpGs \n  *  Both bison and bison_herd now check to ensure that the MPI implementation\n     actually supports the level of thread support requested (previously, this\n     was just assumed).\n \n"
      },
      "source": "https://raw.githubusercontent.com/dpryan79/bison/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9202231542998559,
      "result": {
        "original_header": "0.1.1",
        "type": "Text_excerpt",
        "value": "  *  Fixed a number of minor bugs. \n  *  Added support for uncompressed fastq files, as well as bzipped files\n     (previously, only gzipped fastq files worked properly). \n  *  --score-min is now parsed by bison prior to being sent to bowtie2,\n     read MAPQ scores are recalculated accordingly by the same algorithm\n     used by bowtie2 (N.B., this only bears a vague correspondence to\n     -10*log10(probability the mapping position is wrong)!). \n  *  Added a bison_mbias function, to process the aligned BAM file and\n     create a text file containing the percentage of methylated C's as a\n     function of read position. For the utility of this, see: Hansen KD,\n     Langmead B and Irizarry RA, BSmooth: from whole genome bisulfite\n     sequencing to differentially methylated regions. Genome Biol 2012;\n     13(10):R83. \n  *  The methylation extractor now accepts the -q options, which sets the\n     MAPQ threshold for a read to be included in the methylation results.\n     The default is a minimum MAPQ of 20, which seems to be a reasonable\n     threshold from a few simulations. \n  *  In DEBUG mode, the output BAM files used to have fixed names. This was\n     a problem in cases where debugging was being performed on multiple\n     input files. Now, the OT/OB/CTOT/CTOB.bam filename is prepended with\n     an appropriate prefix (extracted from the input file name). In\n     addition, the output directory is now respected in DEBUG mode. \n  *  Included an \"auxiliary\" directory, that includes functions for making\n     an RRBS genome and other possibly useful functions. \n"
      },
      "source": "https://raw.githubusercontent.com/dpryan79/bison/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/dpryan79/bison/wiki"
      },
      "source": "https://raw.githubusercontent.com/dpryan79/bison/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/dpryan79/bison/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/dpryan79/bison/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "dpryan79/bison"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Bison: bisulfite alignment on nodes of a cluster."
      },
      "source": "https://raw.githubusercontent.com/dpryan79/bison/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9851063730893412,
      "result": {
        "original_header": "Bison: bisulfite alignment on nodes of a cluster.",
        "type": "Text_excerpt",
        "value": "If you use Bison in your work please site the following:\n[Ryan D.P. and Ehninger D. **Bison: bisulfite alignment on nodes of a cluster.** *BMC Bioinformatics* 2014, Oct 18;**15**(1):337](http://www.biomedcentral.com/1471-2105/15/337)\n \n"
      },
      "source": "https://raw.githubusercontent.com/dpryan79/bison/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9983088349171465,
      "result": {
        "original_header": "Auxiliary files",
        "type": "Text_excerpt",
        "value": "The following programs and scripts will be available if you type \"make auxiliary\":\n \n"
      },
      "source": "https://raw.githubusercontent.com/dpryan79/bison/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9973215675622621,
      "result": {
        "original_header": "Importing into other analysis packages",
        "type": "Text_excerpt",
        "value": "While there are helper scripts, mentioned above, for a number of packages, other\npackages either do not require a helper script or can use one of the\naforementioned scripts. Import instructions for such packages are mentioned\nbelow.\n \n"
      },
      "source": "https://raw.githubusercontent.com/dpryan79/bison/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9246122952498879,
      "result": {
        "original_header": "0.4.0",
        "type": "Text_excerpt",
        "value": "  *  The header @PG line is now rewritten to contain the actual command\n     executed and the bison/herd version. \n"
      },
      "source": "https://raw.githubusercontent.com/dpryan79/bison/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9691751796170596,
      "result": {
        "original_header": "0.3.2",
        "type": "Text_excerpt",
        "value": "  *  Fix the Makefile to use the static htslib library. \n"
      },
      "source": "https://raw.githubusercontent.com/dpryan79/bison/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.913734226417349,
      "result": {
        "original_header": "0.2.3",
        "type": "Text_excerpt",
        "value": "  *  Multiple bug fixes related to local alignment, which previously didn't\n     work correctly. These issues seem to generally now be resolved. May thanks\n     to user mvijayen on seqanswers for providing a perfect usage example for\n     testing (see thread http://seqanswers.com/forums/showthread.php?t=39914). \n  *  Another note regarding local alignments is that the XX auxiliary tag\n     (effectively the more verbose version of the MD tag) contains soft-clipped\n     sequences. I could probably have these removed if someone would like.\n \n"
      },
      "source": "https://raw.githubusercontent.com/dpryan79/bison/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.834250503732454,
      "result": {
        "original_header": "0.1.0",
        "type": "Text_excerpt",
        "value": "  Initial release\n \n"
      },
      "source": "https://raw.githubusercontent.com/dpryan79/bison/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/dpryan79/bison/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Permission is hereby granted, free of charge, to any non-profit \norganization, non-commercial organization or academic institute (including\nfacilites at such institutes, such as core-facilities, providing \ncommercial services to external parties) obtaining a copy of the software \nand accompanying documentation covered by this license (the \"Software\") to \nuse, reproduce, display, distribute, execute, and transmit the Software, \nand to prepare derivative works of the Software, and to permit equally\nentitled third-parties to whom the Software is furnished to do so, all\nsubject to the following:\n\nThe copyright notices in the Software and this entire statement, including\nthe above license grant, this restriction and the following disclaimer,\nmust be included in all copies of the Software, in whole or in part, and\nall derivative works of the Software, unless such copies or derivative\nworks are solely in the form of machine-executable object code generated by\na source language processor.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT\nSHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE\nFOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n\nCommercial licensing terms are available by contacting techtransfer@dzne.de\n"
      },
      "source": "https://raw.githubusercontent.com/dpryan79/bison/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bison"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "dpryan79"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 375767,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 8859,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 7871,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 3505,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/dpryan79/bison/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "dpryan79",
          "type": "User"
        },
        "date_created": "2017-05-01T21:16:53Z",
        "date_published": "2017-05-10T13:44:28Z",
        "description": "* Allow lower case reads in fastq files (previously, this would result in corrupt BAM files.\r\n* HTSlib is now a submodule in the Github repository. This simplifies compilation. Further, that is the only supported compilation method now (samtools-0.1.19 is no longer supported).\r\n* Somehow, the methylation extractor was still defaulting to a minimum phred score of 10, when the documentation said it was defaulting to 5.\r\n* CRAM files can now be produced and processed. Both bison and bison_herd will output in CRAM format if the -C option is given.\r\n* The header @PG line is now rewritten to contain the actual command executed and the bison/herd version.\r\n* Excess space allocated to hold the genome is now returned.\r\n* Output BAM/CRAM files can now be sorted on the fly. The method for this is similar to that used by samtools, where temporary files are written and then merged. This merge step is performed in parallel if multiple output files are being written by bison_herd.\r\n* Fixed a bug in bison_CpG_coverage, where previously only the first chromosome was used.\r\n",
        "html_url": "https://github.com/dpryan79/bison/releases/tag/0.4.0",
        "release_id": 6339237,
        "tag": "0.4.0",
        "tarball_url": "https://api.github.com/repos/dpryan79/bison/tarball/0.4.0",
        "type": "Release",
        "url": "https://api.github.com/repos/dpryan79/bison/releases/6339237",
        "value": "https://api.github.com/repos/dpryan79/bison/releases/6339237",
        "zipball_url": "https://api.github.com/repos/dpryan79/bison/zipball/0.4.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "dpryan79",
          "type": "User"
        },
        "date_created": "2014-10-27T08:40:23Z",
        "date_published": "2017-05-10T13:42:16Z",
        "description": " * Allow mixed and discordant alignments.",
        "html_url": "https://github.com/dpryan79/bison/releases/tag/v0.3.3",
        "name": "0.3.3",
        "release_id": 6339193,
        "tag": "v0.3.3",
        "tarball_url": "https://api.github.com/repos/dpryan79/bison/tarball/v0.3.3",
        "type": "Release",
        "url": "https://api.github.com/repos/dpryan79/bison/releases/6339193",
        "value": "https://api.github.com/repos/dpryan79/bison/releases/6339193",
        "zipball_url": "https://api.github.com/repos/dpryan79/bison/zipball/v0.3.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "dpryan79",
          "type": "User"
        },
        "date_created": "2014-08-26T14:45:47Z",
        "date_published": "2017-05-10T13:41:59Z",
        "description": " * Fix the Makefile to use the static htslib library.\r\n",
        "html_url": "https://github.com/dpryan79/bison/releases/tag/v0.3.2b",
        "release_id": 6339189,
        "tag": "v0.3.2b",
        "tarball_url": "https://api.github.com/repos/dpryan79/bison/tarball/v0.3.2b",
        "type": "Release",
        "url": "https://api.github.com/repos/dpryan79/bison/releases/6339189",
        "value": "https://api.github.com/repos/dpryan79/bison/releases/6339189",
        "zipball_url": "https://api.github.com/repos/dpryan79/bison/zipball/v0.3.2b"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "dpryan79",
          "type": "User"
        },
        "date_created": "2014-08-26T14:28:02Z",
        "date_published": "2017-05-10T13:41:42Z",
        "description": "* Added bedGraph2MOABS to convert bedGraph files for use by MOABS. See usage above.\r\n* Added support for HTSlib.\r\n* Fixed a small bug wherein --reorder wasn't being invoked when multiple output BAM files were to be used.\r\n* Fixed a small bug that only manifested in DEBUG mode.\r\n* There is now a tutorial.\r\n* The default minimum MAPQ and Phred scores used by bison_mbias have been updated to match bison_methylation_extractor.\r\n",
        "html_url": "https://github.com/dpryan79/bison/releases/tag/v0.3.2",
        "release_id": 6339187,
        "tag": "v0.3.2",
        "tarball_url": "https://api.github.com/repos/dpryan79/bison/tarball/v0.3.2",
        "type": "Release",
        "url": "https://api.github.com/repos/dpryan79/bison/releases/6339187",
        "value": "https://api.github.com/repos/dpryan79/bison/releases/6339187",
        "zipball_url": "https://api.github.com/repos/dpryan79/bison/zipball/v0.3.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "dpryan79",
          "type": "User"
        },
        "date_created": "2014-03-18T11:18:29Z",
        "date_published": "2014-03-19T14:57:18Z",
        "description": "0.3.1\n-  The various bedGraph files didn't previously have a \"track\" line. The UCSC\n   Genome Browser requires this, so bedGraph files produced will now contain \n   it. It should be noted that this is the very minimal line required. Bison\n   does not provide facilities for making these changes, users need to edit\n   things manually or use external programs for this. It should also be noted\n   that any changes to the \"track\" or other header lines should be made after\n   all processing with Bison is complete.\n-  Add conversion scripts for import into MethylSeekR, BiSeq, and BEAT.\n-  Revamped how `bison_markduplicates` works. The 3' coordinates are now\n   ignored, soft-clipped bases on the 5' end are now incorporated in\n   determining the 5' coordinate and methylation calls are also used in\n   determining if reads/pairs are duplicates. This should be a much more\n   robust (though more resource intensive) method than that previously used.\n   Whereas the previous version kept unmarked the read/pair with the highest\n   MAPQ, this one will do that for the read/pair with the highest summed phred\n   score (a la picard).\n",
        "html_url": "https://github.com/dpryan79/bison/releases/tag/v0.3.1",
        "name": "Version 0.3.1",
        "release_id": 230804,
        "tag": "v0.3.1",
        "tarball_url": "https://api.github.com/repos/dpryan79/bison/tarball/v0.3.1",
        "type": "Release",
        "url": "https://api.github.com/repos/dpryan79/bison/releases/230804",
        "value": "https://api.github.com/repos/dpryan79/bison/releases/230804",
        "zipball_url": "https://api.github.com/repos/dpryan79/bison/zipball/v0.3.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "dpryan79",
          "type": "User"
        },
        "date_created": "2014-02-27T13:10:38Z",
        "date_published": "2014-02-27T13:12:08Z",
        "description": "0.3.0\n-  Note: The indices produced by previous versions are not guaranteed to be\n   compatible unless you used a multi-fasta file. There was a serious\n   implementation problem with how bison_index worked when given multiple\n   files as input and how multiple files were read into memory in previous\n   versions. If you used a multi-fasta file, then everything will continue\n   to work correctly. However, if you used multiple fasta files in a list\n   then I strongly encourage you to delete the previous indices (just remove\n   the bisulfite_genome directory) and reindex. The technical reasons for this\n   issue are that when the bison tools previously read multiple fasta files\n   into memory, they would do so in whatever order they appeared in the\n   directory structure, which can change over time and isn't guaranteed to\n   match the order of files someone specified during indexing. While the\n   alignments wouldn't be affected by this, the methylation calls could have\n   been seriously compromised. In this version, bison_index will only accept a\n   directory, not a list of files, and it will always alphasort() the list of\n   files in that directory prior to processing. This should eliminate this\n   problem. My apologies to anyone affected by this.\n-  Added --genome-size option to a number of the tools. Many of the bison\n   programs need to read the genome into memory. By default, 3 gigabases worth\n   of memory are allocated for that and the size increased as needed. For\n   smaller genomes, this wasted space. For larger genomes, the constant\n   reallocation of space could seriously slow things down. Consequently, this\n   option was added to any tool that reads the genome into memory. It's\n   convenient to overestimate this slightly, so if your genome is 3.8\n   gigabases, then just use 4000000000 as the genome size.\n-  bison_merge_CpGs can now take multiple input files at once.\n-  A number of small bug fixes, such as when \"genome_dir\" doesn't end in a /.\n",
        "html_url": "https://github.com/dpryan79/bison/releases/tag/v0.3.0",
        "name": "Version 0.3.0",
        "release_id": 202751,
        "tag": "v0.3.0",
        "tarball_url": "https://api.github.com/repos/dpryan79/bison/tarball/v0.3.0",
        "type": "Release",
        "url": "https://api.github.com/repos/dpryan79/bison/releases/202751",
        "value": "https://api.github.com/repos/dpryan79/bison/releases/202751",
        "zipball_url": "https://api.github.com/repos/dpryan79/bison/zipball/v0.3.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 09:17:03",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 9
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "Bison: bisulfite alignment on nodes of a cluster."
        ],
        "type": "Text_excerpt",
        "value": "One can index all fasta files (files with extension .fa or .fasta) in a\ndirectory as follows:\n\n    bison_index [OPTIONS] directory/\n\nOptions that are not specific to bison are simply passed to bowtie2, which must\nbe in your PATH. The output is placed under `directory/bisulfite_genome`.\n\nAlignment can be performed as follows (`bison_herd` is the same):\n\n    mpiexec bison [OPTIONS] -g directory/ {-1 fastq_1.gz -2 fastq_2.gz | -U fastq.fq}\n\n\"directory\" is identical to that used for indexing. For further details type\n\"bison -h\". For non-directional libraries, \"mpiexec -N 5\" should be used,\notherwise \"mpiexec -N 3\". Resource managers, such as slurm, should work in\nan equivalent manner. All options not explicitly mentioned by typing\n\"bison -h\" are passed to bowtie2. Consequently, using the --very-sensitive or\n--dovetail options will work as expected. Bison already passes the following\nflags to bowtie2:\n\n    -q --reorder --no-mixed --no-discordant\n\n`bison_herd` is equivalent, except that you can specify more nodes. You may also\ninput multiple files (comma-separated, no spaces) to align, in which case\nalignments will be printed to multiples files. Furthermore, you may use\nwild-cards in your file list. For example:\n\n    mpiexec -N 17 bison_herd -o Alignments -g directory/ -1 exp1/sample*_1.fq.gz,/some/other/path/foo*_1.fq.gz -2 exp1/sample*_2.fq.gz,/some/other/path/foo*_2.fq.gz\n\nMake sure to not have multiple input files with the same name\n(e.g., `sample*/read1.fastq`), as they will all be written to the same file\n(overwriting any subsequent alignments)!\n\nIn non-targeted sequencing experiments, it is usually wise to mark likely PCR\nduplicates. These are then ignored by the methylation extractor so as to not\nincrease the error rate of any particular position. `bison_markduplicates` and\nable to process a BAM file generated by `bison`/`bison_herd` and produce an\nidentical BAM file with the 0x400 bit set in the FLAG field for reads that are\nlikely duplicates. This step is not required and should be avoided if you are\nperforming RRBS or other targeted sequencing, as the false-positive rate of will\nthen be too high.\n\nThere is also a methylation extractor that produces a bedGraph file, called \n`bison_methylation_extractor`. Note, coordinate-sorted BAM files should not \nbe used! The methylation extractor can be told to ignore certain parts of each\nread. This is particularly useful in cases where there is methylation bias\nacross the length of reads (i.e., if one plots the average methylation\npercentage summed per position over all reads, the value goes up/down toward the\n5' or 3' end). It is recommended to always run `bison_mbias` (with the -pdf option\nif you have R and ggplot2 installed) to generate the required information for\nconstructing an M-bias plot. The `bison_mbias2pdf` script can convert this to a\nPDF file (or a series of PNG files) and will also suggest what, if any, regions\nshould be ignored. These regions are strand and read number (in the case of\npaired-end reads) dependent. While the suggested regions are often good, the\nshould not be blindly accepted (just look at the graph and use your best\njudgement).\n\nSee the \"Auxiliary files\" section, below, for additional files.\n"
      },
      "source": "https://raw.githubusercontent.com/dpryan79/bison/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Advanced bison_herd usage",
        "parent_header": [
          "Bison: bisulfite alignment on nodes of a cluster."
        ],
        "type": "Text_excerpt",
        "value": "`bison_herd` has the ability to use a semi-arbitrary number of nodes. In practice,\nif bison is given N nodes, it will effectively use `2*((N-1)/2)+1` or\n`4*((N-1)/4)+1` nodes, for directional and non-directional libraries,\nrespectively. As an example, if you allot 20 nodes for a directional library,\n`bison_herd` will only use 19 of them (17 for non-directional reads). The excess\nnodes will exit properly and, unless you specify --quiet, produce an error\nmessage.\n\nThe options -mp, -queue-size, and -@ are `bison_herd`-specific and deserve further\ndescription.\n\n-mp sets the number of threads that the master node will use to process\nalignments produced by the worker nodes. Worker nodes are grouped into twos or\nfours, where each group has the a number of nodes equal to the number of\npossible bisulfite converted strands. As the number of allocated nodes\nincreases, a point is eventually reached where a single thread on the master\nnode is unable to keep up with the workers. In my experience, for directional\nlibraries, one thread can handle approximately 130 bowtie2 threads (i.e., if\nusing -p 11, -mp should be increased once ~12 worker nodes are allocated, since\nthat would equate to 132 threads in use by bowtie2). One should keep in mind\nthat there are already at least 3 other threads concurrently running on the\nmaster node (sending and storing fastq reads, receiving alignments, and writing\nalignments). Consequently, there is a practical limit to the number of nodes is\ndetermined by how many cores are available on each node.\n\n-queue-size determines the maximum difference between reads sent for alignment\nand reads processed. This option is unavailable if `bison_herd` was compiled with\n-DNOTHROTTLE. By default, the thread that sends reads for alignment will pause\nif it has sent more than ~1 million reads than have been processed. The purpose\nof this is to prevent overwhelming of the MPI unexpected message buffer, since\nthe thread on the master node that sends reads can generally process reads\nfaster than all of the worker nodes combined can align them. Setting this value\ntoo high may result in `bison_herd` crashing with otherwise cryptic messages\ninvolving `MPI_Send`. In such cases, decreasing the value used by -queue-size\nshould resolve the problem. On the other hand, setting this value too low can\nresult in a deadlocks, due to buffering at various levels. The default value\nhasn't resulted in deadlocking or crashes on our cluster, but yours may be\ndifferent! This difference is checked every 100000 reads, which can changed by\neditting the `THROTTLE_CHECK_INTERVAL` value in bison.h prior to compilation.\n\n-@ specifies the number of compression threads used for writing the output BAM\nfile. In practice, a single compression thread can write ~80 million paired-end\nreads per hour (depending on CPU speed). I routinely use -@ 4 when using more\nthan ~9 nodes as this allows writing to occur as quickly as reads are processed.\nTo determine if the number of compression threads should be increased, not the\ntime difference (especially early on) between when each master processor thread\nhas processed 100000 reads and when those reads have been written to a file.\nEven when --reorder is used, if there is >1 second between these, then you may\nbenefit from increasing the number of compression threads. For those curious,\nthis option is identical to that used in samtools.\n"
      },
      "source": "https://raw.githubusercontent.com/dpryan79/bison/master/README.md",
      "technique": "header_analysis"
    }
  ]
}