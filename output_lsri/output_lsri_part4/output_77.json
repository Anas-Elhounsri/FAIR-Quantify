{
  "acknowledgement": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Acknowledgements",
        "type": "Text_excerpt",
        "value": "and [Dr. Devon Ryan](https://github.com/dpryan79) for their help with the software.\n"
      },
      "source": "https://raw.githubusercontent.com/hsinnan75/MapCaller/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/hsinnan75/MapCaller"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-02-08T06:47:37Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-11T17:43:00Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MapCaller \u2013 An efficient and versatile approach for short-read alignment and variant detection in high-throughput sequenced genomes"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "type": "Text_excerpt",
        "value": "For more information, please refer to our manuscript (https://www.biorxiv.org/content/10.1101/783605v2)\n\nThe benchmark data sets and the performance evaluation program could be found at http://bioapp.iis.sinica.edu.tw/~arith/MapCaller/\n"
      },
      "source": "https://raw.githubusercontent.com/hsinnan75/MapCaller/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9578275806510966,
      "result": {
        "original_header": "MapCaller: An efficient and versatile approach for short-read mapping and variant identification using high-throughput sequenced data.",
        "type": "Text_excerpt",
        "value": "Developers: Dr. Hsin-Nan Lin and Dr. Wen-Lian Hsu. Institute of Information Science, Academia Sinica, Taiwan.\n \n"
      },
      "source": "https://raw.githubusercontent.com/hsinnan75/MapCaller/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8880265104628841,
      "result": {
        "original_header": "File formats",
        "type": "Text_excerpt",
        "value": "    All reference genome files should be in FASTA format. \n    MapCaller is designed for NGS short reads. All reads files should be in FASTA/FASTQ format. Input files can be compressed with gzip format.\n    Please note, if reads are stored in FASTA format, each read sequence is not allowed to be wrapped (split over multiple lines).\n    Read sequences should be capital letters. The quality scores in FASTQ are not considered in the alignments. \n    If paired-end reads are separated into two files, use -f and -f2 to indicate the two filenames. The i-th reads in the two files are paired. If paired-end reads are in the same file, use -p. The first and second reads are paired, the third and fourth reads are paired, and so on. For the latter case, use -p to indicate the input file contains paired-end reads. \n"
      },
      "source": "https://raw.githubusercontent.com/hsinnan75/MapCaller/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Download",
        "type": "Text_excerpt",
        "value": "Please use the command \n  ```\n  $ git clone https://github.com/hsinnan75/MapCaller.git\n  ```\nto download the package of MapCaller.\n"
      },
      "source": "https://raw.githubusercontent.com/hsinnan75/MapCaller/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/hsinnan75/MapCaller/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/hsinnan75/MapCaller/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "hsinnan75/MapCaller"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MapCaller: An efficient and versatile approach for short-read mapping and variant identification using high-throughput sequenced data."
      },
      "source": "https://raw.githubusercontent.com/hsinnan75/MapCaller/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hsinnan75/MapCaller/master/run_test.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Conda",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "```\n$ conda install -c conda-forge -c bioconda -c defaults mapcaller\n```\n"
      },
      "source": "https://raw.githubusercontent.com/hsinnan75/MapCaller/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Homebrew",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "```\n$ brew install brewsci/bio/mapcaller\n```\n"
      },
      "source": "https://raw.githubusercontent.com/hsinnan75/MapCaller/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Parameter setting",
        "type": "Text_excerpt",
        "value": " ```\n-t INT number of threads [16]\n\n-i STR index prefix [optional, BWT based (BWA)]\n\n-r STR reference filename [optional, fasta]\n\n-f STR read filename [required, fasta or fastq or fq.gz]\n\n-f2 STR read filename2 [optional, fasta or fastq or fq.gz], f and f2 are files with paired reads\n\n-p the input read file consists of interleaved paired-end sequences [false]\n\n-sam STR SAM output [optional, default: no mapping output]\n\n-bam STR BAM output [optional, default: no mapping output]\n\n-alg STR gapped alignment algorithm [optional, nw|ksw2, default: nw]\n\n-vcf STR VCF output [output.vcf]\n\n-dup INT Maximal PCR duplicates [optional, 1-100, default: 5]\n\n-ploidy INT number of sets of chromosomes in a cell [optional, default:2]\n\n-filter Apply variant filters (under test) [false]\n\n-no_vcf No VCF output [false]\n\n-gvcf GVCF mode [false]\n\n-size Sequencing fragment size [default: 500, MapCaller can predict the fragment size automatically]\n\n-ad INT Minimal ALT allele count [3]\n\n-somatic detect somatic mutations [false]\n\n-m output multiple alignments [false]\n\n-v version number\n\n-h help\n\n  ```"
      },
      "source": "https://raw.githubusercontent.com/hsinnan75/MapCaller/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.864625254169794,
      "result": {
        "original_header": "Instructions",
        "type": "Text_excerpt",
        "value": "  ```\n  $ bin/MapCaller [options]\n  ```\n \n"
      },
      "source": "https://raw.githubusercontent.com/hsinnan75/MapCaller/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.890524980376392,
      "result": {
        "original_header": "File formats",
        "type": "Text_excerpt",
        "value": "- Output file \n"
      },
      "source": "https://raw.githubusercontent.com/hsinnan75/MapCaller/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/hsinnan75/MapCaller/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2018 hsinnan\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/hsinnan75/MapCaller/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MapCaller"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "hsinnan75"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 1701937,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 214172,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 28829,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Roff",
        "size": 20217,
        "type": "Programming_language",
        "value": "Roff"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "M4",
        "size": 13569,
        "type": "Programming_language",
        "value": "M4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 484,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hsinnan75/MapCaller/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "hsinnan75",
          "type": "User"
        },
        "date_created": "2019-10-07T04:03:49Z",
        "date_published": "2019-10-07T04:17:26Z",
        "html_url": "https://github.com/hsinnan75/MapCaller/releases/tag/v0.9.9.d",
        "release_id": 20506404,
        "tag": "v0.9.9.d",
        "tarball_url": "https://api.github.com/repos/hsinnan75/MapCaller/tarball/v0.9.9.d",
        "type": "Release",
        "url": "https://api.github.com/repos/hsinnan75/MapCaller/releases/20506404",
        "value": "https://api.github.com/repos/hsinnan75/MapCaller/releases/20506404",
        "zipball_url": "https://api.github.com/repos/hsinnan75/MapCaller/zipball/v0.9.9.d"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "hsinnan75",
          "type": "User"
        },
        "date_created": "2019-09-27T15:57:12Z",
        "date_published": "2019-09-28T01:49:21Z",
        "html_url": "https://github.com/hsinnan75/MapCaller/releases/tag/v0.9.9.6",
        "release_id": 20322855,
        "tag": "v0.9.9.6",
        "tarball_url": "https://api.github.com/repos/hsinnan75/MapCaller/tarball/v0.9.9.6",
        "type": "Release",
        "url": "https://api.github.com/repos/hsinnan75/MapCaller/releases/20322855",
        "value": "https://api.github.com/repos/hsinnan75/MapCaller/releases/20322855",
        "zipball_url": "https://api.github.com/repos/hsinnan75/MapCaller/zipball/v0.9.9.6"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "hsinnan75",
          "type": "User"
        },
        "date_created": "2019-07-08T01:27:47Z",
        "date_published": "2019-07-11T02:51:06Z",
        "html_url": "https://github.com/hsinnan75/MapCaller/releases/tag/v0.9.9.4",
        "release_id": 18541045,
        "tag": "v0.9.9.4",
        "tarball_url": "https://api.github.com/repos/hsinnan75/MapCaller/tarball/v0.9.9.4",
        "type": "Release",
        "url": "https://api.github.com/repos/hsinnan75/MapCaller/releases/18541045",
        "value": "https://api.github.com/repos/hsinnan75/MapCaller/releases/18541045",
        "zipball_url": "https://api.github.com/repos/hsinnan75/MapCaller/zipball/v0.9.9.4"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "run",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 01:44:49",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 30
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Get updates",
        "type": "Text_excerpt",
        "value": "  $ bin/MapCaller update\n  ```\nor\n  ```\n  $ git fetch\n  $ git merge origin/master master\n  $ make\n  ```\n"
      },
      "source": "https://raw.githubusercontent.com/hsinnan75/MapCaller/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "type": "Text_excerpt",
        "value": "To index a reference genome, it requires the target genome file (in fasta format) and the prefix of the index files (including the directory path).\n\n  ```\n  $ bin/MapCaller index ref_file[ex.ecoli.fa] index_prefix[ex. Ecoli]\n  ```\nThe above command is to index the genome file and store the index files begining with $index_prefix.\n\nor\n\n  ```\n  $ bin/MapCaller -r ref_file[ex.ecoli.fa] \n  ```\nThe above command is to read a reference file and build a temporary index file\n\nTo perform variant calling, MapCaller requires the the index files of the reference genome and at least one read file (two read files for the separated paired-end reads). Users should use -i to specify the prefix of the index files (including the directory path).\n\n case 1: standard vcf output / sam output (optional) / bam output (optional)\n  ```\n $ bin/MapCaller -i ecoli -f ReadFile1.fa -f2 ReadFile2.fa -vcf out.vcf [-sam out.sam][-bam out.bam]\n  ```\n\n case 2: multiple input \n  ```\n $ bin/MapCaller -i ecoli -f ReadFileA_1.fq ReadFileB_1.fq ReadFileC_1.fq -f2 ReadFileA_2.fq ReadFileB_2.fq ReadFileC_2.fq -vcf out.vcf\n  ```\n\n case 3: given a reference genome\n  ```\n $ bin/MapCaller -r ecoli.fa -f ReadFile1.fa -f2 ReadFile2.fa -vcf out.vcf [-sam out.sam][-bam out.bam]\n  ```\n"
      },
      "source": "https://raw.githubusercontent.com/hsinnan75/MapCaller/master/README.md",
      "technique": "header_analysis"
    }
  ]
}