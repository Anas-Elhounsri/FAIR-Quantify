{
  "application_domain": [
    {
      "confidence": 0.8359026507544624,
      "result": {
        "type": "String",
        "value": "Semantic web"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "References",
        "type": "Text_excerpt",
        "value": "Margelevicius M. (2016) Bayesian nonparametrics in protein remote \nhomology search. Bioinformatics 32(18), 2744\u20132752.\n\nMargelevicius M. (2018) A low-complexity add-on score for protein \nremote homology search with COMER. Bioinformatics, \ndoi: 10.1093/bioinformatics/bty048.\n\n--\nmindaugas.margelevicius@bti.vu.lt\n\n"
      },
      "source": "https://raw.githubusercontent.com/minmarg/comer/master/README",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/minmarg/comer"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2017-09-15T12:23:26Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-01-09T12:55:43Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "COMER is a protein sequence alignment tool designed for protein remote homology detection. It accepts a multiple sequence alignment as input and converts it into the profile to search against a profile database for statistically significant similarities. COMER is licensed under the GNU GP License, version 3. Please refer to the README file for instructions on how to use the software."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9289369370149728,
      "result": {
        "original_header": "Structure of the Package",
        "type": "Text_excerpt",
        "value": "  *  binaries  --  contains the built and locally installed COMER package\n     for Linux x86 (subdirectory, linux32), and Linux x64 (linux64).\n     You can distribute the subdirectories to your prefered path and \n     consider it as the installation path. \n  *  src       --  is the main directory of the source files to be\n     compiled and linked into the executables (see Basic Installation\n     below). \n  *  optimized --  the compiled and linked source files for Linux x64.\n     It should be reconfigured and remade by make (see Basic \n     Installation below) if you want to built the sources in this\n     directory.\n \n"
      },
      "source": "https://raw.githubusercontent.com/minmarg/comer/master/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9415879995213992,
      "result": {
        "original_header": "Input Multiple Alignment",
        "type": "Text_excerpt",
        "value": "   The programs in the package, processing input multiple alignment \nfiles (`comer', `makepro', etc.) recognize the FASTA and STOCKHOLM \nformats. \n   Each sequence in the multiple alignment in FASTA begins with a\nsingle-line description, followed by lines of sequence data. The\ndescription line is distinguished from the sequence data by the\ngreater-than (`>') symbol in the first column. An example of a\nmultiple alignment in FASTA: \n>d1qhka_ d.100.1.2 (A:) N-terminal domain of RNase HI...\nGNFYAVRKGRE--T---G--------IYNTW---NECKNQVDGYG---GAIYKKFNSYEQAKSFLG\n>gi|28379120|ref|NP_786012.1|:(2-47) ribonuclease H (putative)...\n-KYYAVRKGRQ--P---G--------IYRTW---PETQKQVSGYP---QAQYKSFTSEKDAQDFMA\n>gi|84386727|ref|ZP_00989753.1|:(2-47) hypothetical ribonuclease HI...\n-KYYVVWKGRT--P---G--------IFTTW---NECKSQVDGFA---GARYKSFPTLGEAESAFG\n>gi|116492108|ref|YP_803843.1|:(2-47) RNase H with double-stranded...\n-KFYAVKKGRK--P---G--------LYLTW---DAAKQQVDGFA---GAVYKSFLTKAEAEEWMA\n>gi|6323890|ref|NP_013961.1|:(1-47) Ribonuclease H1...\nGNFYAVRKGRE--T---G--------IYNTW---NECKNQVDGYG---GAIYKKFNSYEQAKSFLG \n   If you're a BLAST user and/or want to compose input multiple\nalignment from (PSI-)BLAST output, you can do that by typing: \n   where <myblast.aln> is a BLAST output file of pairwise\nalignments, and resulting <myinput.fa> is the multiple alignment in\nFASTA ready to be converted to profile: \n"
      },
      "source": "https://raw.githubusercontent.com/minmarg/comer/master/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9366053514444356,
      "result": {
        "original_header": "Custom Databases",
        "type": "Text_excerpt",
        "value": "   If you have a set of profiles constructed by `makepro' and want to\nassemble them into the profile database to search against with `comer',\nuse the `makedb' program: \n   Alternatively, you can use wildcards to indicate a set of profiles: \n   It is IMPORTANT to note that the database will consist of several\nfiles. The files will have exactly the same names as given by\noption `-o'. Thus, the parameter names used in `makedb' and `comer'\nshould be the same. It is convenient not to use extensions in these\nnames. The `comer' search against the database may be started by typing: \n"
      },
      "source": "https://raw.githubusercontent.com/minmarg/comer/master/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9612133513510304,
      "result": {
        "type": "Text_excerpt",
        "value": "COMER software package for protein remote homology search\n(C)Mindaugas Margelevicius,VU Institute of Biotechnology,Vilnius \n"
      },
      "source": "https://raw.githubusercontent.com/minmarg/comer/master/README",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/minmarg/comer/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/minmarg/comer/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "minmarg/comer"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Available Platforms"
      },
      "source": "https://raw.githubusercontent.com/minmarg/comer/master/README",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/minmarg/comer/master/ltmain.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/minmarg/comer/master/src/mpiscaler/mpiscaler.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/minmarg/comer/master/src/makepro/makepro.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/minmarg/comer/master/src/HDPres/hdpclust.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/minmarg/comer/master/src/HDPres/hdpclust.hyd.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/minmarg/comer/master/binaries/linux64/bin/mpiscaler.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/minmarg/comer/master/binaries/linux64/bin/makepro.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/minmarg/comer/master/binaries/linux64/bin/hdpclust.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/minmarg/comer/master/binaries/linux64/bin/hdpclust.hyd.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Basic Installation",
        "type": "Text_excerpt",
        "value": "   These are generic installation instructions.\n\n   The `configure' shell script attempts to guess correct values for\nvarious system-dependent variables used during compilation.  It uses\nthose values to create a `Makefile' in each directory of the package.\nIt may also create one or more `.h' files containing system-dependent\ndefinitions.  Finally, it creates a shell script `config.status' that\nyou can run in the future to recreate the current configuration, a file\n`config.cache' that saves the results of its tests to speed up\nreconfiguring, and a file `config.log' containing compiler output\n(useful mainly for debugging `configure').\n\n   The file `configure.in' is used to create `configure' by a program\ncalled `autoconf'.  You only need `configure.in' if you want to change\nit or regenerate `configure' using a newer version of `autoconf'.\n\nThe basic way to compile this package is:\n\n  0. Optionally, you may want to regenerate `configure' and other related\n     files by running the command (requires autoconf and automake):\n\n     make -f Makefile.cvs\n\n  1. Make a new directory to keep the compiled and linked sources and\n     `cd' to that directory:\n\n     mkdir built; cd built\n\n     Configure the package for your system giving your installation\n     path where the package will be installed after compilation:\n\n     ../configure --prefix=/your/installation/path/here\n\n     The COMER package contains MPI-dependent programs for parallel \n     calculations. The programs are built optionally but requires the \n     MPI (openmpi) package installed in your system. If you have MPI and\n     want to built these programs, configure the package as follows:\n\n     ../configure --prefix=/your/installation/path/here  mpi=yes\n\n     If you're using `csh' or an old version of System V, you might\n     need to type `sh ../configure' instead to prevent `csh' from\n     trying to execute `configure' itself.\n\n     Running `configure' takes a while. While running, it prints some\n     messages telling which features it is checking for.\n\n  2. Type `make echo=echo' to compile the package.\n\n  3. Type `make echo=echo install' to install the programs and data files.\n\n   For more information, see the INSTALL file.\n"
      },
      "source": "https://raw.githubusercontent.com/minmarg/comer/master/README",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9907191967823836,
      "result": {
        "original_header": "Available Platforms",
        "type": "Text_excerpt",
        "value": "   The COMER binaries are provided for the following platforms: \n"
      },
      "source": "https://raw.githubusercontent.com/minmarg/comer/master/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9440516929739191,
      "result": {
        "original_header": "Structure of the Package",
        "type": "Text_excerpt",
        "value": "   The main directories are shortly described below: \n  *  binaries  --  contains the built and locally installed COMER package\n     for Linux x86 (subdirectory, linux32), and Linux x64 (linux64).\n     You can distribute the subdirectories to your prefered path and \n     consider it as the installation path. \n  *  src       --  is the main directory of the source files to be\n     compiled and linked into the executables (see Basic Installation\n     below). \n  *  optimized --  the compiled and linked source files for Linux x64.\n     It should be reconfigured and remade by make (see Basic \n     Installation below) if you want to built the sources in this\n     directory.\n \n"
      },
      "source": "https://raw.githubusercontent.com/minmarg/comer/master/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8573019591761512,
      "result": {
        "original_header": "Input Multiple Alignment",
        "type": "Text_excerpt",
        "value": "   If you're a BLAST user and/or want to compose input multiple\nalignment from (PSI-)BLAST output, you can do that by typing: \n     bin/blast2fa.pl -i <myblast.aln> -o <myinput.fa> \n     bin/makepro -i <myinput.fa> -o <myinput.pro>\n \n"
      },
      "source": "https://raw.githubusercontent.com/minmarg/comer/master/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8572482119089765,
      "result": {
        "original_header": "Custom Databases",
        "type": "Text_excerpt",
        "value": "     bin/makedb -o <mydb>  <profil1.pro> <profile2.pro> <profile3.pro> \n   Alternatively, you can use wildcards to indicate a set of profiles: \n     bin/makedb -o <mydb>  *.pro \n   Or, if your profies are all in one directory, you may want to\npoint out the directory the profiles should be read from: \n     bin/makedb -o <mydb> -d <mydirectory> \n     bin/comer -i <myinput.pro> -d <mydb> -o <output>\n \n"
      },
      "source": "https://raw.githubusercontent.com/minmarg/comer/master/README",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/minmarg/comer/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "The COMER software package is licensed under the GNU General Public \nLicense, version 3.\n\nCOMER is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis software is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License \nin the COPYING file along with this software. If not, \nsee <http://www.gnu.org/licenses/>.\n\n"
      },
      "source": "https://raw.githubusercontent.com/minmarg/comer/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "comer"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "minmarg"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 3830712,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Roff",
        "size": 2327652,
        "type": "Programming_language",
        "value": "Roff"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 825291,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 556876,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 159730,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 83625,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Objective-C",
        "size": 1675,
        "type": "Programming_language",
        "value": "Objective-C"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/minmarg/comer/master/README"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "minmarg",
          "type": "User"
        },
        "date_created": "2018-05-19T18:02:27Z",
        "date_published": "2018-05-19T18:46:09Z",
        "description": "Accurate estimation of statistical significance leading to a much higher rate of high-quality alignments and an increased sensitivity",
        "html_url": "https://github.com/minmarg/comer/releases/tag/v1.5.1",
        "name": "COMER v1.5.1",
        "release_id": 11081457,
        "tag": "v1.5.1",
        "tarball_url": "https://api.github.com/repos/minmarg/comer/tarball/v1.5.1",
        "type": "Release",
        "url": "https://api.github.com/repos/minmarg/comer/releases/11081457",
        "value": "https://api.github.com/repos/minmarg/comer/releases/11081457",
        "zipball_url": "https://api.github.com/repos/minmarg/comer/zipball/v1.5.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "minmarg",
          "type": "User"
        },
        "date_created": "2018-01-07T10:24:40Z",
        "date_published": "2018-01-08T19:27:14Z",
        "html_url": "https://github.com/minmarg/comer/releases/tag/v1.4.2",
        "name": "COMER v1.4.2",
        "release_id": 9150923,
        "tag": "v1.4.2",
        "tarball_url": "https://api.github.com/repos/minmarg/comer/tarball/v1.4.2",
        "type": "Release",
        "url": "https://api.github.com/repos/minmarg/comer/releases/9150923",
        "value": "https://api.github.com/repos/minmarg/comer/releases/9150923",
        "zipball_url": "https://api.github.com/repos/minmarg/comer/zipball/v1.4.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "minmarg",
          "type": "User"
        },
        "date_created": "2017-09-15T13:06:51Z",
        "date_published": "2017-09-15T13:26:41Z",
        "html_url": "https://github.com/minmarg/comer/releases/tag/v1.4.1",
        "name": "COMER v1.4.1",
        "release_id": 7769225,
        "tag": "v1.4.1",
        "tarball_url": "https://api.github.com/repos/minmarg/comer/tarball/v1.4.1",
        "type": "Release",
        "url": "https://api.github.com/repos/minmarg/comer/releases/7769225",
        "value": "https://api.github.com/repos/minmarg/comer/releases/7769225",
        "zipball_url": "https://api.github.com/repos/minmarg/comer/zipball/v1.4.1"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 08:31:29",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Getting the COMER Software",
        "type": "Text_excerpt",
        "value": "   The package is available at\n\n   https://github.com/minmarg/comer\n   http://comer.sourceforge.net\n"
      },
      "source": "https://raw.githubusercontent.com/minmarg/comer/master/README",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Getting Started",
        "type": "Text_excerpt",
        "value": "   There are three main programs sufficient for making profiles,\nprofile databases, and running of the COMER method itself. These\nprograms, `makepro', `makedb', and `comer', respectively, are in the\nbin directory in your installation path.\n\n   If you have a profile database (see Custom Databases below) and an\ninput multiple alignment file in the FASTA or STOCKHOLM format (see \nbelow), the simplest way to run `comer' is to type (names within \nbrackets <> depends on your naming choice) for example:\n\n     bin/comer -i <myinput.fa> -d <mydb> -o <output>\n\n   It is convenient, however, to have an input multiple alignment\nconverted to the profile, especially in cases when `comer' is to be run\nmany times with that multiple alignment. To make the profile from the\nmultiple alignment, type:\n\n     bin/makepro    -i <myinput.fa> -o <myinput.pro>   or\n     bin/makepro.sh -i <myinput.fa> -o <myinput.pro>\n\nThe latter command includes secondary structure predictions (you will\nneed PSIPRED installed on your system to accomplish that).\n\n   After the profile is made, it can be used as input to `comer':\n\n     bin/comer -i <myinput.pro> -d <mydb> -o <output>\n\n   If you want to mutually compare two profiles or multiple alignments,\nyou can indicate another profile or multiple alignment instead of\ndatabase name:\n\n     bin/comer -i <myinput.pro> -d <another.pro> -o <output>\n\n   The COMER search can be controlled with options read from a separate\nfile:\n\n     bin/comer -i <myinput.pro> -d <another.pro> -o <output> -p <options>\n\n   By default, the COMER options are read from file `var/options.txt'.\n"
      },
      "source": "https://raw.githubusercontent.com/minmarg/comer/master/README",
      "technique": "header_analysis"
    }
  ]
}