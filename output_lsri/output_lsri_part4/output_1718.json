{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "How to cite Pteros?",
        "parent_header": [
          "Pteros"
        ],
        "type": "Text_excerpt",
        "value": "Any work, which uses Pteros, should cite the following papers:\n\n* Semen O. Yesylevskyy, \"Pteros 2.0: Evolution of the fast parallel molecular analysis library for C++ and python\", Journal of Computational Chemistry, 2015, 36(19), 1480\u20131488, doi: 10.1002/jcc.23943. (link)\n* Semen O. Yesylevskyy, \"Pteros: Fast and easy to use open-source C++ library for molecular analysis\", Journal of Computational Chemistry, 2012, 33(19), 1632\u20131636. doi: 10.1002/jcc.22989. (link)\n"
      },
      "source": "https://raw.githubusercontent.com/yesint/pteros/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/yesint/pteros"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2017-09-16T16:55:27Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-07-01T06:21:49Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Modern and fast molecular analysis and modeling library for C++ and Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9827437276514276,
      "result": {
        "original_header": "Pteros",
        "type": "Text_excerpt",
        "value": "Modern and fast molecular analysis and modeling library for C++ and Python\n \n"
      },
      "source": "https://raw.githubusercontent.com/yesint/pteros/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9995212044908208,
      "result": {
        "original_header": "What is Pteros?",
        "type": "Text_excerpt",
        "value": "\nPteros is a C++ library for molecular modeling. It is designed to simplify the development of custom programs and scripts for molecular modeling, analysis of molecular dynamics trajectories and implementing new simulation and analysis algorithms. Pteros provides facilities, which are routinely used in all molecular analysis programs, namely input/output of popular file formats, powerful and flexible atom selections, geometry transformations, RMSD fitting and alignment, etc. Pteros also contains powerful facilities for parsing command-line arguments in custom programs and for running several analysis tasks in parallel, utilizing the power of modern multi-core processors.\nPteros supports writing analysis programs in either C++ or Python programming languages.\n \n"
      },
      "source": "https://raw.githubusercontent.com/yesint/pteros/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.99416149950091,
      "result": {
        "original_header": "Is Pteros for you?",
        "type": "Text_excerpt",
        "value": "Pteros library is for you if: \n- You want to implement custom non-standard algorithms of molecular analysis.\n- Your task is computationally expensive and potentially reusable.\n- You want to run several \"heavy\" analysis tasks in parallel.\n- You are not satisfied by the speed and memory consumption of the scripting languages embedded into popular molecular analysis programs, such as PyMol or VMD.\n- You know C++ or don't mind learning this rather hard, but very powerful language.\n- You know Python or want to learn it. Python scripts in Pteros are good for \"throw-away\" one-time scripts and serious reusable programs alike.\n \n"
      },
      "source": "https://raw.githubusercontent.com/yesint/pteros/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9998333769243829,
      "result": {
        "original_header": "Features",
        "type": "Text_excerpt",
        "value": "- Reading/writing popular molecular structure and trajectory formats (PDB, GRO, MOL2, XTC, TRR, TPR, DCD, TNG).\n- Very simple and expressive syntax for selecting groups of atoms similar to one used in VMD, but more powerfull.\n- Selections can be manipulated in many different ways from simple translation to orientation by principal axes.\n- Various properties of selections could be queried ranging from center of masses to radius of gyration.\n- RMSD fitting and alignment.\n- Full support for arbitrary periodic boxes - periodic selections and distances, wrapping/unwrapping, removing jumps over boundaries, computing closest images and shortest vectors, etc.\n- Computing non-bonded interactions with any force field available in Gromacs format (GROMOS, CHARMM, AMBER, OPLS and more).\n- Ability to work with very large trajectories, which does not fit into the memory.\n- Asynchronous processing made easy. Many different analysis tasks could be run in parallel and simulataneously with trajectory reading.\n- Very powerful and flexible syntax of the command-line options for custom analysis programs and scripts.\n- Easy to use. API is very simple and intuitive.\n- Easy to extend. Pteros is writen in high-level C++.\n- Oriented to human beings (reserachers and students), not to programming gurus. The code is very well structured and documented.\n- Bindings for the Python language.\n- Plugin architecture, which makes writing C++ or Python code for asynchronous trajectory analysis trivial. You concentrate on the analysis algorithm itself, not on the technical details of managing files and trajectories. \n"
      },
      "source": "https://raw.githubusercontent.com/yesint/pteros/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/yesint/pteros/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 8
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/yesint/pteros/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "yesint/pteros"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Pteros"
      },
      "source": "https://raw.githubusercontent.com/yesint/pteros/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9844092312884617,
      "result": {
        "original_header": "Pteros is not for you if:",
        "type": "Text_excerpt",
        "value": "- Your task requires extensive usage of molecular visualizer. Pteros doesn't have one currently.\n- You have no programming skills at all, or you don't want to learn C++ or Python.\n \n"
      },
      "source": "https://raw.githubusercontent.com/yesint/pteros/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/yesint/pteros/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "md-data-analysis, molecular-analysis, molecular-modeling"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "ACADEMIC/NON-PROFIT \nSIMONA 1.0 SOFTWARE LICENSE AGREEMENT\nIMPORTANT: This Simona license Agreement is a legal agreement between you, the end user (either an individual or an entity), and the Karlsruhe Institute of Technology. \nSIMONA Software License\nGRANT OF LICENSE. Karlsruhe Institute of Technology grants, and you hereby accept, a non-exclusive license to use the Simona software product of the version specified above (\"Software\") to the extent of its rights and in accordance with the terms of this Agreement. This licensed copy of the Software may only be used on computers at your site by you and members of your organization at your site who have read and agreed to this license. You may install the Software on computers at your site for your own use or use by members of your organization at your site. You may not distribute copies of the Software to others outside of your site. You may make only those copies of the Software which are necessary to install and use it as permitted by this Agreement, or are for purposes of backup and archival records. \nOWNERSHIP. This ownership is protected by the copyright laws of the Federal Republic of Germany and by international treaty provisions. Upon expiration or termination of this Agreement, you shall promptly return all copies of the Software and accompanying written materials to the Karlsruhe Institute of Technology. \nMODIFICATIONS AND DERIVATIVE WORKS. You may modify the software, and use it to create derivative works, for your internal use at the site covered by this license. You may not distribute such modified or derivative software to others outside of your site without written permission. You may distribute the modifications themselves (e.g. as \"patches\") under terms of your choice. We encourage users to contribute modifications back into the Software, but you are under no obligation to do so. \nREPORTS OF PUBLICATIONS. You agree to acknowledge use of the Software in any reports or publications of results obtained with the Software and cite the publications listed on the download page where you obtained the software in any report or publication in which the Software was used. If you fail to properly acknowledge the use of the software you agree to pay the industrial license fee.\nASSIGNMENT RESTRICTIONS. You shall not use the Software (or any part thereof) in connection with the provision of consultancy, modeling or other services, whether for value or otherwise, on behalf of any third party who does not hold a current valid Simona  Software License Agreement. You shall not use the Software to write other software that duplicates the functionality of the Software. You shall not rent, lease, or otherwise sublet the Software or any part thereof. You may transfer on a permanent basis the rights granted under this license provided you transfer this Agreement and all copies of the Software, including prior versions, and all accompanying written materials. The recipient must agree to the terms of this Agreement in full and register this transfer with the Karlsruhe Institute of Technology. \nLIMITED WARRANTY. LICENSEE acknowledges that LICENSORS make no warranty, expressed or implied, that the program will function without error, or in any particular hardware environment, or so as to generate any particular function or result, and further excluding any other warranty, as to the condition of the program, its merchantability, or its fitness for a particular purpose. LICENSORS shall not be liable for any direct, consequential, or other damages suffered by the LICENSEE or any others as a result of their use of the program, whether or not the same could have been foreseen by LICENSORS prior to granting this License. In no event shall LICENSORS liability for any breach of this agreement exceed the fee paid for the license. \nKARLSRUHE INSTITUTE OF TECHNOLOGY'S LIABILITY. In no event shall the Karlsruhe Institute of Technology be liable for any indirect, special, or consequential damages, such as, but not limited to, loss of anticipated profits or other economic loss in connection with or arising out of the use of the software by you or the services provided for in this Agreement, even if the Karlsruhe Institute of Technology has been advised of the possibility of such damages. The Karlsruhe Institute of Technology's entire liability and your exclusive remedy shall be, at the Karlsruhe Institute of Technology's discretion, to return the Software and proof of purchase to the Karlsruhe Institute of Technology for either (a) return of any license fee, or (b) correction or replacement of Software that does not meet the terms of this limited warranty. \nNO OTHER WARRANTIES. The Karlsruhe Institute of Technology disclaims other implied warranties, including, but not limited to, implied warranties of merchantability or fitness for any purpose, and implied warranties arising by usage of trade, course of dealing, or course of performance. Some states do not allow the limitation of the duration or liability of implied warranties, so the above restrictions might not apply to you. \nLICENSE FEE. The software is free for non-profit, government and academic organizations. For-profit and commercial organizations wishing to license SIMONA shall contact: \nsimona-support@kit.edu \nand request a quote for a commercial license.\nSupercomputer centers can license SIMONA under the same conditions and make it available to their users from non-profit organizations as executable code. However, for-profit organizations who want to use the program at supercomputer centers must have signed a separate license agreement.\n\nThese terms only apply to the files in the src include and opencl folders and only for those files, where the license is not overriden by the source file.\n\nThis license explicitly does not cover the software found in the external folder.\n\nEigen is covered by the MPL2 license http://eigen.tuxfamily.org/index.php?title=Main_Page\nFunctionParser is covered by the LGPL V3. http://warp.povusers.org/FunctionParser/\nloop_closure_c is covered by the LGPL2.1\npdsasa is covered by our license. Contact Wolfgang.Wenzel@kit.edu for details.\npowerborn is covered by the LGPL v3.\nsparsehash is covered by the New BSD license http://code.google.com/p/sparsehash/\ntclap is covered by the MIT license http://sourceforge.net/projects/tclap/\n"
      },
      "source": "https://raw.githubusercontent.com/yesint/pteros/main/thirdparty/powersasa/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "pteros"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "yesint"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 946844,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 82127,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 22727,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 6762,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Batchfile",
        "size": 6701,
        "type": "Programming_language",
        "value": "Batchfile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Tcl",
        "size": 6024,
        "type": "Programming_language",
        "value": "Tcl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 1164,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 149,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/yesint/pteros/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 08:04:34",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 35
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ]
}