{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "format": "bibtex",
        "type": "File_dump",
        "value": "year <- sub(\"-.*\", \"\", meta$Date)\nnote <- sprintf(\"R package version %s\", meta$Version)\n\nbibentry(bibtype = \"Manual\",\n         title = \"{nlme}: Linear and Nonlinear Mixed Effects Models\",\n         author = c(person(\"Jose\", \"Pinheiro\"),\n                    person(\"Douglas\", \"Bates\"),\n                    person(\"Saikat\", \"DebRoy\"),\n                    person(\"Deepayan\", \"Sarkar\"),\n                    person(\"R Core Team\")),\n         year = year,\n         note = note,\n         url = \"https://CRAN.R-project.org/package=nlme\")\n"
      },
      "source": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/source/Windows/R-Portable-Win/library/nlme/CITATION",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Credits",
        "parent_header": [
          "Cerebro"
        ],
        "type": "Text_excerpt",
        "value": "* Columbus Collaboratory laid out the basics of using Electron to create a standalone Shiny application: <https://github.com/ColumbusCollaboratory/electron-quick-start>\n* Color palettes were put together with colored from: https://flatuicolors.com/\n* The initial app icon (until v1.2) was made by [Kiranshastry](https://www.flaticon.com/authors/kiranshastry) from [https://www.flaticon.com](https://www.flaticon.com/) and is licensed by [CC 3.0 BY](http://creativecommons.org/licenses/by/3.0/)\n"
      },
      "source": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "Cerebro"
        ],
        "type": "Text_excerpt",
        "value": "If you used Cerebro for your research, please cite the following publication:\n\nRoman Hillje, Pier Giuseppe Pelicci, Lucilla Luzi, Cerebro: interactive visualization of scRNA-seq data, Bioinformatics, btz877, [https://doi.org/10.1093/bioinformatics/btz877](https://doi.org/10.1093/bioinformatics/btz877)\n"
      },
      "source": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_of_conduct": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Contributor Code of Conduct\n\nAs contributors and maintainers of this project, we pledge to respect all people who \ncontribute through reporting issues, posting feature requests, updating documentation,\nsubmitting pull requests or patches, and other activities.\n\nWe are committed to making participation in this project a harassment-free experience for\neveryone, regardless of level of experience, gender, gender identity and expression,\nsexual orientation, disability, personal appearance, body size, race, ethnicity, age, or religion.\n\nExamples of unacceptable behavior by participants include the use of sexual language or\nimagery, derogatory comments or personal attacks, trolling, public or private harassment,\ninsults, or other unprofessional conduct.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments,\ncommits, code, wiki edits, issues, and other contributions that are not aligned to this \nCode of Conduct. Project maintainers who do not follow the Code of Conduct may be removed \nfrom the project team.\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by \nopening an issue or contacting one or more of the project maintainers.\n\nThis Code of Conduct is adapted from the Contributor Covenant \n(http://contributor-covenant.org), version 1.0.0, available at \nhttp://contributor-covenant.org/version/1/0/0/\n"
      },
      "source": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/source/Windows/R-Portable-Win/library/processx/CODE_OF_CONDUCT.md",
      "technique": "file_exploration"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/romanhaa/Cerebro"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contribute",
        "parent_header": [
          "Cerebro"
        ],
        "type": "Text_excerpt",
        "value": "To report any bugs, submit patches, or request new features, please log an issue [through the issue tracker](https://github.com/romanhaa/Cerebro/issues/new). For direct inquiries, please send an email to <a href = \"mailto: roman.hillje@ieo.it\">roman.hillje@ieo.it</a>.\n"
      },
      "source": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-01-08T16:09:59Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-11T19:08:05Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Visualization of scRNA-seq data."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction to the Cerebro interface",
        "parent_header": [
          "Cerebro"
        ],
        "type": "Text_excerpt",
        "value": "Below you find a brief description of what each panel of the Cerebro interface shows.\n\n**For more detailed description, written for biologists without computational expertise, head over [here](README_for_biologists.md).**\n"
      },
      "source": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Load data",
        "parent_header": [
          "Cerebro",
          "Introduction to the Cerebro interface"
        ],
        "type": "Text_excerpt",
        "value": "Select input file (`.rds` or `.crb`).\nShows number of cells, samples, clusters, as well as experiment name and organism.\n"
      },
      "source": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Overview",
        "parent_header": [
          "Cerebro",
          "Introduction to the Cerebro interface"
        ],
        "type": "Text_excerpt",
        "value": "Shows 2D and 3D dimensional reductions.\nCells can be colored by meta data variables, automatically coloring the cells using a categorical or continuous scale.\nCells can be randomly down-sampled to improve performance.\n"
      },
      "source": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Samples",
        "parent_header": [
          "Cerebro",
          "Introduction to the Cerebro interface"
        ],
        "type": "Text_excerpt",
        "value": "Shows sample-centric perspective of data.\n\n* Composition of samples by cluster as table and plot.\n* Distribution of number of transcripts and expressed genes by sample.\n* Distribution of mitochondrial and ribosomal gene expression by sample (if it was computed with `cerebroApp`).\n* Cell cycle by sample, either determined by the Seurat function or using Cyclone (if it was computed and assigned during exporting).\n"
      },
      "source": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Clusters",
        "parent_header": [
          "Cerebro",
          "Introduction to the Cerebro interface"
        ],
        "type": "Text_excerpt",
        "value": "Shows cluster-centric perspective of data.\nSee info about `Samples` panel above for more details.\n"
      },
      "source": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Most expressed genes",
        "parent_header": [
          "Cerebro",
          "Introduction to the Cerebro interface"
        ],
        "type": "Text_excerpt",
        "value": "If computed in `cerebroApp`, provides tables of most expressed genes by sample and cluster.\n"
      },
      "source": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Marker genes",
        "parent_header": [
          "Cerebro",
          "Introduction to the Cerebro interface"
        ],
        "type": "Text_excerpt",
        "value": "If computed in `cerebroApp`, provides tables of marker genes by sample and cluster.\n"
      },
      "source": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Enriched pathways",
        "parent_header": [
          "Cerebro",
          "Introduction to the Cerebro interface"
        ],
        "type": "Text_excerpt",
        "value": "If computed in `cerebroApp`, provides tables of enriched pathways in marker gene lists of samples and clusters.\n"
      },
      "source": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Gene expression",
        "parent_header": [
          "Cerebro",
          "Introduction to the Cerebro interface"
        ],
        "type": "Text_excerpt",
        "value": "Allows to show the expression of specified genes (showing the average per cell if multiple genes) in the data set.\nCalculation is triggered after pressing `SPACE` or `ENTER`.\nMultiple genes must be submitted in separate lines or separated by either space, comma, semicolon.\nShows which genes are available or missing (or misspelled) in data set.\nExpression levels are shown in dimensional reductions and as violin plots for every sample and cluster.\nAverage expression across all cells of the 50 most expressed genes (of the ones specified by the user) are shown as well to quickly spot which genes drive the color scale.\n"
      },
      "source": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Trajectory",
        "parent_header": [
          "Cerebro",
          "Introduction to the Cerebro interface"
        ],
        "type": "Text_excerpt",
        "value": "This tab gives access to trajectory information, if data is available.\nCurrently, we support trajectories generated by [Monocle](https://cole-trapnell-lab.github.io/monocle-release/) v2 which can extracted through `cerebroApp::extractMonocleTrajectory()`.\nMultiple trajectories can be added to a single Seurat object so the user here needs to choose which of those available to visualize.\nSeveral interactive plots will be shown, including dimensional reduction, distribution of categorial variables along pseudotime, composition of transcriptional states by sample, cluster, as well as distribution of transcript counts and number of expressed genes by state.\n"
      },
      "source": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Gene ID conversion",
        "parent_header": [
          "Cerebro",
          "Introduction to the Cerebro interface"
        ],
        "type": "Text_excerpt",
        "value": "Provides table that allows to convert gene IDs and names.\nIncludes GENCODE identifier, ENSEMBL identifier, HAVANA identifier, gene symbol and gene type.\nOnly available for mouse and human.\nBased on GENCODE annotation version M16 (mouse) and version 27 (human).\n"
      },
      "source": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Analysis info",
        "parent_header": [
          "Cerebro",
          "Introduction to the Cerebro interface"
        ],
        "type": "Text_excerpt",
        "value": "Overview of parameters that were used during the analysis, as long as they were provided.\nAlso shows list of mitochondrial and ribosomal genes present in the data set if computed with `cerebroApp`.\n"
      },
      "source": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9783524361298984,
      "result": {
        "original_header": "Cerebro",
        "type": "Text_excerpt",
        "value": "**Table of Contents** \nThis is the standalone version of [Cerebro](https://github.com/romanhaa/cerebroApp), **ce**ll **re**port **bro**wser, (currently available for macOS and Windows) which allows users to **interactively** visualize various parts of single cell transcriptomics data without requiring bioinformatic expertise. \nThe core of Cerebro is the [cerebroApp](https://github.com/romanhaa/cerebroApp) [Shiny](https://shiny.rstudio.com/) application which is bottled into a standalone app using [Electron](https://electronjs.org/).\nTherefore, it can also be run on web servers and Linux machines, requiring only R and a set of dependencies. \nInput data needs to be prepared using the [cerebroApp](https://github.com/romanhaa/cerebroApp) R package which was built specifically for this purpose.\nIt offers functionality to export a [Seurat](https://satijalab.org/seurat/) object (both v2 and v3 are supported) to the correct format in a single step.\nThe file should be saved either with the `.crb` or `.rds` extension, indicating that internally it is an RDS object.\nFurthermore, the cerebroApp package also provides functions to perform a set of (optional) analyses, e.g. gene set enrichment analysis, pathway enrichment analysis based on marker gene lists of groups of cells, and more. \nKey features: \n* Interactive 2D and 3D dimensional reductions.\n* Sample and cluster overview panels.\n* Tables of most expressed genes and marker genes for samples and clusters.\n* Tables of enriched pathways for samples and clusters.\n* Query gene(s) and gene sets from [MSigDB](https://http://software.broadinstitute.org/gsea/msigdb) and show their expression in dimensional reductions.\n* **NEW** Visualize trajectories calculated with Monocle v2.\n* All plots can be exported to PNG. In addition, 2D dimensional reductions can be exported to PDF.\n* Tables can be downloaded in CSV or Excel format. \nBasic examples for [Seurat](https://satijalab.org/seurat/) v2 and v3 and [scanpy](https://scanpy.readthedocs.io) workflows and subsequent exporting can be found in the [`examples`](examples) folder.\nThere you can also find the raw data and the output file that can be loaded into Cerebro. \n"
      },
      "source": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9985695170651003,
      "result": {
        "original_header": "Motivation",
        "type": "Text_excerpt",
        "value": "Single cell RNA-sequencing data is rich and complex.\nAllowing experimental biologists to explore the results is beneficial for the iterative scientific process of performing analysis and deriving conclusions.\nCerebro provides an easy way to access the data without any bioinformatic expertise.\n \n"
      },
      "source": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9247535996757483,
      "result": {
        "original_header": "Conversion of other single cell data formats",
        "type": "Text_excerpt",
        "value": "Currently, the `cerebroApp` R package only provides a functions to export a `Seurat` (v2 or v3) object to the Cerebro input file.\nHowever, there are a few other important single cell data storage formats, e.g. `AnnData` (used by [scanpy](https://scanpy.readthedocs.io/en/stable/), `SingleCellExperiment` (used by [scran](https://bioconductor.org/packages/release/bioc/html/scran.html) and [scater](https://bioconductor.org/packages/release/bioc/html/scater.html)), and `CellDataSet` (used by [Monocle](https://cole-trapnell-lab.github.io/monocle-release/)). \nWe believe using the existing network of conversion/exporting functions is more efficient than creating a dedicated export function for scanpy data.\nTo highlight how data processed with scanpy (stored in `AnnData` format) can be prepared for loading into Cerebro, we have prepared a [scanpy-based workflow](examples/pbmc_10k_v3/scanpy) for the `pbmc_10k_v3` example data set. \nIn the figure below, we highlight how you can generate the Cerebro input file from any of the four major formats. \n<p align=\"center\"><img src=\"images/data_formats.jpeg\" alt=\"Single cell data formats\" width=\"600\"/></p>\n \n"
      },
      "source": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9939325093074112,
      "result": {
        "original_header": "Technical notes",
        "type": "Text_excerpt",
        "value": "* Cerebro is a [Shiny](https://shiny.rstudio.com/) app that is bottled into a standalone application using [Electron](https://electronjs.org/).\n* Plotting relies heavily on [`ggplot2`](https://ggplot2.tidyverse.org/) and [`plotly`](https://plot.ly/r/).\n* Tables are built with [`formattable`](https://renkun-ken.github.io/formattable/).\n* Access to MSigDB through [`msigdbr`](https://cran.r-project.org/web/packages/msigdbr/vignettes/msigdbr-intro.html).\n \n"
      },
      "source": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/romanhaa/Cerebro/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 19
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/romanhaa/Cerebro/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "romanhaa/Cerebro"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Cerebro"
      },
      "source": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/Docker/full/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/Docker/full/Dockerfile",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/Docker/light/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/Docker/light/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/source/macOS/R-Portable-Mac/library/bit/exec/prebuild.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/source/macOS/R-Portable-Mac/library/Rcpp/examples/ConvolveBenchmarks/overhead.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/source/macOS/R-Portable-Mac/library/Rcpp/examples/ConvolveBenchmarks/buildAndRun.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/source/macOS/R-Portable-Mac/library/bit64/exec/prebuild.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/source/macOS/R-Portable-Mac/share/sh/echo.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/source/Windows/R-Portable-Win/library/bit/exec/prebuild.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/source/Windows/R-Portable-Win/library/Rcpp/examples/ConvolveBenchmarks/overhead.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/source/Windows/R-Portable-Win/library/Rcpp/examples/ConvolveBenchmarks/buildAndRun.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/source/Windows/R-Portable-Win/library/bit64/exec/prebuild.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/source/Windows/R-Portable-Win/Tcl/lib/tclConfig.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/source/Windows/R-Portable-Win/Tcl/lib/tkConfig.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/source/Windows/R-Portable-Win/Tcl/lib/tclooConfig.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/source/Windows/R-Portable-Win/Tcl/lib/itcl4.0.3/itclConfig.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/source/Windows/R-Portable-Win/Tcl/lib/tdbc1.0.3/tdbcConfig.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/source/Windows/R-Portable-Win/Tcl/lib64/tclConfig.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/source/Windows/R-Portable-Win/Tcl/lib64/tkConfig.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/source/Windows/R-Portable-Win/Tcl/lib64/tclooConfig.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/source/Windows/R-Portable-Win/Tcl/lib64/itcl4.0.3/itclConfig.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/source/Windows/R-Portable-Win/Tcl/lib64/tdbc1.0.3/tdbcConfig.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/source/Windows/R-Portable-Win/bin/config.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/screenshots/cerebro_v1.0.0_pbmc_10k_v3/2019-04-02_at_13.28.42.png?raw=true"
      },
      "source": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/screenshots/cerebro_v1.0.0_pbmc_10k_v3/2019-03-18_2019-05-11_11_52_44.gif"
      },
      "source": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/images/launching_Cerebro.jpeg"
      },
      "source": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/images/data_formats.jpeg"
      },
      "source": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Gene set expression",
        "parent_header": [
          "Cerebro",
          "Introduction to the Cerebro interface"
        ],
        "type": "Text_excerpt",
        "value": "Basically the same as the gene expression panel except that it allows to select gene sets from [MSigDB](https://http://software.broadinstitute.org/gsea/msigdb) (requires internet connection).\nOnly available for human and mouse data.\n"
      },
      "source": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "Cerebro"
        ],
        "type": "Text_excerpt",
        "value": "For people without any experience in using the command line, getting access to Cerebro is probably easiest by downloading Cerebro for your OS from [here](https://github.com/romanhaa/Cerebro/releases), then unpacking and launching it.\nCurrently, Cerebro is available only for macOS and Windows.\n\nMore experienced users of all platforms can alternatively launch the app through the dedicated `cerebroApp` R package - which is the core Cerebro - or the `romanhaa/cerebro` Docker container.\n\nPlease check the image and table below for an overview of the supported operating systems and requirements of each way to start Cerebo.\n\n<p align=\"center\"><img src=\"images/launching_Cerebro.jpeg\" alt=\"Options to launch Cerebro.\" width=\"600\"/></p>\n\n| | **Standalone desktop application** | **cerebroApp R package** | **Docker container** |\n|-:|:-:|:-:|:-:|\n| **Link** | [Releases](https://github.com/romanhaa/Cerebro/releases) | [GitHub](https://github.com/romanhaa/cerebroApp) | [Docker Hub](https://cloud.docker.com/u/romanhaa/repository/docker/romanhaa/cerebro) |\n| **Supported OS** | macOS, Windows | macOS, Windows, Linux | macOS, Windows, Linux<br>(not all tested) |\n| **Requirements** | - | R (3.5.1 or higher) | Docker client |\n| **Installation** | Download current release from GitHub repository | Through BiocManager::install() | Pull container from Docker Hub |\n| **Launch Cerebro** | Double-click executable | Inside R | Start container |\n"
      },
      "source": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Details: `cerebroApp` R package",
        "parent_header": [
          "Cerebro",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "Requirements: R (version 3.5.1 or higher)\n\nA convenient IDE would be RStudio but it can be done from any R session.\nMake sure to install `cerebroApp` using `BiocManager::install()` to get the most recent version of dependencies on Bioconductor.\n\n```r\nBiocManager::install(\"romanhaa/cerebroApp\")\ncerebroApp::launchCerebro()\n```\n"
      },
      "source": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Details: `romanhaa/cerebro` Docker container",
        "parent_header": [
          "Cerebro",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "Requirements: Docker client\n\n```bash\ndocker pull romanhaa/cerebro:latest\ndocker run -p 8080:8080 -v <export_folder>:/plots romanhaa/cerebro\n# for example\ndocker run -p 8080:8080 -v ~/Desktop:/plots romanhaa/cerebro\n```\n\nThen, in your browser you navigate to the address printed in the terminal, e.g. `127.0.0.1:8080`.\n\n**Note 1**: Binding a local directory with `-v <export_folder>:/plots` is only necessary if you want to export dimensional reductions from Cerebro.\n\n**Note 2**: If you need to change the port, you can do that like this:\n\n```bash\ndocker run -p <port_of_choice>:8080 -v <export_folder>:/plots romanhaa/cerebro\n# OR\ndocker run -p <port_of_choice>:<port_of_choice> -v <export_folder>:/plots romanhaa/cerebro Rscript -e 'shiny::runApp(cerebroApp::launchCerebro(), port=<port_of_choice>, host=\"0.0.0.0\", launch.browser=FALSE)'\n```\n"
      },
      "source": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example data sets",
        "parent_header": [
          "Cerebro"
        ],
        "type": "Text_excerpt",
        "value": "We provide documentation and commands for the following example data sets:\n\n* [`pbmc_10k_v3`](examples/pbmc_10k_v3): single sample of human peripheral blood mononuclear cells\n* [`GSE108041`](examples/GSE108041): 4 samples of A549 cells before and after infection with influenza virus\n* [`GSE129845`](examples/GSE129845): 3 samples of human bladder cells from (3 patients)\n"
      },
      "source": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9727565972663618,
      "result": {
        "original_header": "Cerebro",
        "type": "Text_excerpt",
        "value": "<p align=\"center\"><img src=\"screenshots/cerebro_v1.0.0_pbmc_10k_v3/2019-03-18_2019-05-11_11_52_44.gif\"/></p> \nThis is the standalone version of [Cerebro](https://github.com/romanhaa/cerebroApp), **ce**ll **re**port **bro**wser, (currently available for macOS and Windows) which allows users to **interactively** visualize various parts of single cell transcriptomics data without requiring bioinformatic expertise. \nThe core of Cerebro is the [cerebroApp](https://github.com/romanhaa/cerebroApp) [Shiny](https://shiny.rstudio.com/) application which is bottled into a standalone app using [Electron](https://electronjs.org/).\nTherefore, it can also be run on web servers and Linux machines, requiring only R and a set of dependencies. \n"
      },
      "source": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 1.0,
      "result": {
        "original_header": "On macOS",
        "type": "Text_excerpt",
        "value": "To package Cerebro you need [Git](https://git-scm.com) and [Node.js](https://nodejs.org/en/download/) (which comes with [npm](http://npmjs.com)) installed on your computer.\nThen, from the command line, run:\n```bash\n# clone this repository\ngit clone https://gitlab.com/romanhaa/Cerebro.git\n# install Electron packager\nnpm install electron-packager --global\n# go into the repository\ncd Cerebro\n# install dependencies\nnpm install\n# run the app\nnpm start\n# build the app\nnpm run package-mac\n```\nTo build the Windows version under macOS it is necessary to install Wine.\nI experienced problems with missing libraries of the stable version (4.0) so I recommend to use the developers version (4.4) using Homebrew:\n```bash\nbrew tap caskroom/versions\nbrew update\nbrew install caskroom/versions/wine-devel\nnpm run package-win\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999959205431216,
      "result": {
        "original_header": "On Windows",
        "type": "Text_excerpt",
        "value": "If you're using Linux Bash for Windows, [see this guide](https://www.howtogeek.com/261575/how-to-run-graphical-linux-desktop-applications-from-windows-10s-bash-shell/) or use `node` from the command prompt.\n \n"
      },
      "source": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9962661878955947,
      "result": {
        "original_header": "Troubleshooting",
        "type": "Text_excerpt",
        "value": "* If the app shows a blank/white window, press CMR+R (macOS) or CTRL+R (Windows) to refresh the page. Especially on slower machines it can happen that the interface loads before the Shiny application is launched.\n \n"
      },
      "source": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8294420726199834,
      "result": {
        "original_header": "Cerebro",
        "type": "Text_excerpt",
        "value": "<img align=\"right\" width=\"35%\" height=\"auto\" src=\"logo_Cerebro.png\"> \n"
      },
      "source": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/romanhaa/Cerebro/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# The MIT License\n\nCopyright (c) 2020 Roman Hillje\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
      },
      "source": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/LICENSE.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "parent_header": [
          "Cerebro"
        ],
        "type": "Text_excerpt",
        "value": "Copyright (c) 2019 Roman Hillje\n\n[The MIT License (MIT)](LICENSE.md)\n"
      },
      "source": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/logo_Cerebro.png"
      },
      "source": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Cerebro"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "romanhaa"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 95085158,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 12893047,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 9706995,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Tcl",
        "size": 2926957,
        "type": "Programming_language",
        "value": "Tcl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "JavaScript",
        "size": 2162989,
        "type": "Programming_language",
        "value": "JavaScript"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 1782216,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CSS",
        "size": 1524273,
        "type": "Programming_language",
        "value": "CSS"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "TeX",
        "size": 629282,
        "type": "Programming_language",
        "value": "TeX"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 426899,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 64280,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Roff",
        "size": 59898,
        "type": "Programming_language",
        "value": "Roff"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Assembly",
        "size": 52979,
        "type": "Programming_language",
        "value": "Assembly"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 49792,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Lua",
        "size": 30487,
        "type": "Programming_language",
        "value": "Lua"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "q",
        "size": 30096,
        "type": "Programming_language",
        "value": "q"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "XSLT",
        "size": 5096,
        "type": "Programming_language",
        "value": "XSLT"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 4258,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 3640,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "AppleScript",
        "size": 2332,
        "type": "Programming_language",
        "value": "AppleScript"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "TypeScript",
        "size": 1100,
        "type": "Programming_language",
        "value": "TypeScript"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "MATLAB",
        "size": 759,
        "type": "Programming_language",
        "value": "MATLAB"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Scheme",
        "size": 210,
        "type": "Programming_language",
        "value": "Scheme"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://scanpy.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "romanhaa",
          "type": "User"
        },
        "date_created": "2020-09-29T13:49:19Z",
        "date_published": "2020-09-29T14:58:18Z",
        "description": "Bump to Cerebro v1.2.2.\r\n\r\nPlease refer to the [changelog on the cerebroApp website](https://romanhaa.github.io/cerebroApp/news/index.html) for an explanation of the changes to the Cerebro user interface.\r\n\r\nSpecific to the standalone version of Cerebro is the implementation of `portfinder`, which is used to host the internal Shiny app on an open port rather than a fixed port. This should avoid problem when launching Cerebro shortly after a previous instance was closed. Moreover, the Electron framework was updated to v9 to fix (in this case likely harmless) security warnings.\r\n\r\nDue to increasing incompatibilities between the old R version inside the standalone version of Cerebro and the dependencies of the cerebroApp R package, this is the most recent version of Cerebro that I can currently bottle into a standalone version.",
        "html_url": "https://github.com/romanhaa/Cerebro/releases/tag/v1.2.2",
        "name": "Cerebro v1.2.2",
        "release_id": 31936921,
        "tag": "v1.2.2",
        "tarball_url": "https://api.github.com/repos/romanhaa/Cerebro/tarball/v1.2.2",
        "type": "Release",
        "url": "https://api.github.com/repos/romanhaa/Cerebro/releases/31936921",
        "value": "https://api.github.com/repos/romanhaa/Cerebro/releases/31936921",
        "zipball_url": "https://api.github.com/repos/romanhaa/Cerebro/zipball/v1.2.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "romanhaa",
          "type": "User"
        },
        "date_created": "2019-10-16T13:58:28Z",
        "date_published": "2019-10-17T08:52:17Z",
        "description": "This release is a substantial update, including functionality to visualise trajectories calculated with Monocle 2 and perform gene set enrichment analysis for samples and clusters using the GSVA method.\r\n\r\nDue to internal modifications of the Cerebro object, Cerebro files (`.crb`) are not backwards-compatible and need to be generated using the export function of cerebroApp v1.1.0. Moreover, pathway enrichment analysis with Enrichr should be re-run to make sure the results are stored in the right format. Alternatively, Cerebro files generated with cerebroApp v1.0 can still be visualised in Cerebro v1.0. We apologise for the inconvenience but decided to proceed in this direction to make it easier to implement features in the future.",
        "html_url": "https://github.com/romanhaa/Cerebro/releases/tag/v1.1.0",
        "name": "Cerebro v1.1.0",
        "release_id": 20766950,
        "tag": "v1.1.0",
        "tarball_url": "https://api.github.com/repos/romanhaa/Cerebro/tarball/v1.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/romanhaa/Cerebro/releases/20766950",
        "value": "https://api.github.com/repos/romanhaa/Cerebro/releases/20766950",
        "zipball_url": "https://api.github.com/repos/romanhaa/Cerebro/zipball/v1.1.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "romanhaa",
          "type": "User"
        },
        "date_created": "2019-04-29T16:01:56Z",
        "date_published": "2019-05-09T10:23:06Z",
        "description": "Release that goes along the article submission on bioRxiv: https://www.biorxiv.org/content/10.1101/631705v1",
        "html_url": "https://github.com/romanhaa/Cerebro/releases/tag/v1.0",
        "name": "Cerebro v1.0",
        "release_id": 17245771,
        "tag": "v1.0",
        "tarball_url": "https://api.github.com/repos/romanhaa/Cerebro/tarball/v1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/romanhaa/Cerebro/releases/17245771",
        "value": "https://api.github.com/repos/romanhaa/Cerebro/releases/17245771",
        "zipball_url": "https://api.github.com/repos/romanhaa/Cerebro/zipball/v1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 05:02:17",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 94
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Example data sets",
        "parent_header": [
          "Cerebro"
        ],
        "type": "Text_excerpt",
        "value": "We provide documentation and commands for the following example data sets:\n\n* [`pbmc_10k_v3`](examples/pbmc_10k_v3): single sample of human peripheral blood mononuclear cells\n* [`GSE108041`](examples/GSE108041): 4 samples of A549 cells before and after infection with influenza virus\n* [`GSE129845`](examples/GSE129845): 3 samples of human bladder cells from (3 patients)\n"
      },
      "source": "https://raw.githubusercontent.com/romanhaa/Cerebro/master/README.md",
      "technique": "header_analysis"
    }
  ]
}