{
  "application_domain": [
    {
      "confidence": 13.22,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "*npScarf*: Scaffolding and Completing Assemblies in Real-time Fashion"
        ],
        "type": "Text_excerpt",
        "value": "Please cite npScarf if you find it useful for your research\n\nCao, M.D., Nguyen, H.S., et al. Scaffolding and Completing Genome Assemblies in Real-time with Nanopore Sequencing. \nNature Communications 8, Article number: 14515 (2017). doi:[10.1038/ncomms14515].\n\nData and results from npScarf presented in the paper are made available following \n[this link](http://data.genomicsresearch.org/Projects/npScarf/data).\nThe QUAST analysis of results from npScarf and competitive methods are in also \npresented for \n[K. pneumoniae ATCC BAA-2146](http://data.genomicsresearch.org/Projects/npScarf/results/QUAST/Kp2146/report.html),\n[K. pneumoniae ATCC 13883](http://data.genomicsresearch.org/Projects/npScarf/results/QUAST/Kp13883/report.html),\n[E. coli K12 MG1655] (http://data.genomicsresearch.org/Projects/npScarf/results/QUAST/EcK12S/report.html),\n[S. Typhil H58] (http://data.genomicsresearch.org/Projects/npScarf/results/QUAST/StH58/report.html)\nand \n[S. cerevisae W303] (http://data.genomicsresearch.org/Projects/npScarf/results/QUAST/W303/report.html).\n\n"
      },
      "source": "https://raw.githubusercontent.com/mdcao/npScarf/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/mdcao/npScarf"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2016-05-17T12:23:06Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-11-01T14:51:28Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9907467745908727,
      "result": {
        "original_header": "*npScarf*: Scaffolding and Completing Assemblies in Real-time Fashion",
        "type": "Text_excerpt",
        "value": "*npScarf* (jsa.np.npscarf) is a program that scaffolds and completes draft genomes assemblies \nin real-time with Oxford Nanopore sequencing. The pipeline can run on a computing cluster\nas well as on a laptop computer for microbial datasets. It also facilitates the real-time \nanalysis of positional information such as gene ordering and the detection of genes from\nmobile elements (plasmids and genomic islands). \nNote: *npScarf* is not on maintenance anymore, instead [*npGraph*](https://github.com/hsnguyen/assembly/blob/master/docs/npgraph.md) is under development and would be the replacement.\n \n"
      },
      "source": "https://raw.githubusercontent.com/mdcao/npScarf/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9578888168976338,
      "result": {
        "original_header": "Input",
        "type": "Text_excerpt",
        "value": "\tjsa.np.npscarf -seq <*draft*> -input <*input*> -format sam\n\t\n<*draft*> input is the FASTA file containing the pre-assemblies. Normally this \nis the output from running SPAdes on Illumina MiSeq paired end reads. \n<*input*> contains SAM/BAM formated alignments between <*draft*> file and <*nanopore*> \nFASTA/FASTQ file of long read data. We use BWA-MEM as the recommended aligner \nwith the fixed parameter set as follow: \n\tbwa mem -k11 -W20 -r10 -A1 -B1 -O1 -E1 -L0 -a -Y <*draft*> <*nanopore*> > <*bam*>\n\t\nStarting from our newest versions of *npScarf*, BWA-MEM is integrated into the command for convenience. Thus the input file is not limitted to SAM/BAM anymore, you can also provide long reads in FASTQ/FASTA format together with BWA-MEM arguments.\nFor example, instead of taking SAM/BAM input data from BWA-MEM explicitly like: \n\tjsa.np.npscarf -bwaExe=</path/to/BWA> -bwaThread=<#threads> -input <*nanopore*> -format fastq -seq <*draft*> > log.out 2>&1\n\t\nFor that reason, it is important to provide the format of the input file if it's in SAM/BAM (default is FASTA/FASTQ).\nYou don't have to specify BWA execution files location if they are already included in your PATH environment variable. \n \n"
      },
      "source": "https://raw.githubusercontent.com/mdcao/npScarf/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.976030544236203,
      "result": {
        "original_header": "Output",
        "type": "Text_excerpt",
        "value": "------\n*npScarf* output is specified by *-prefix* option. The default prefix is \\'out\\'.\nNormally the tool generate two files: *prefix*.fin.fasta and *prefix*.fin.japsa which \nindicate the result scaffolders in FASTA and JAPSA format. \nIn realtime mode, if any annotation analysis is enabled, a file named \n*prefix*.anno.japsa is generated instead. This file contains features detected after\nscaffolding.\n \n"
      },
      "source": "https://raw.githubusercontent.com/mdcao/npScarf/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.934434421720071,
      "result": {
        "original_header": "Real-time scaffolding",
        "type": "Text_excerpt",
        "value": "In this mode, the <*bam*> file will be processed block by block. The size of block \n(number of BAM/SAM records) can be manipulated through option *-read* and *-time*. \nThe idea of streaming mode is when the input <*nanopore*> file is retrieved in stream.\nnpReader is the module that provides such data from fast5 files returned from the real-time\nbase-calling cloud service Metrichor. Ones can run: \nor if you have the whole set of Nanopore long reads already and want to emulate the \nstreaming mode: \nNote that jsa.np.timeEmulate based on the field *timestamp* located in the read name line to\ndecide the order of streaming data. So if your input <*nanopore*> already contains the field,\nyou have to sort it: \n"
      },
      "source": "https://raw.githubusercontent.com/mdcao/npScarf/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.996606941273132,
      "result": {
        "original_header": "Real-time annotation",
        "type": "Text_excerpt",
        "value": "--------------------\nThe tool includes usecase for streaming annotation. Ones can provides database of antibiotic\nresistance genes and/or Origin of Replication in FASTA format for the analysis of gene ordering\nand/or plasmid identifying respectively: \n"
      },
      "source": "https://raw.githubusercontent.com/mdcao/npScarf/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.971338161729497,
      "result": {
        "original_header": "Assembly graph",
        "type": "Text_excerpt",
        "value": "--------------\n*npScarf* can read the assembly graph info from SPAdes for the gap-filling to make the results more precise.\nThis function is still on development and the results might be slightly deviate from the stable version in\nterm of number of final contigs: \n"
      },
      "source": "https://raw.githubusercontent.com/mdcao/npScarf/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "http://japsa.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/mdcao/npScarf/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/mdcao/npScarf/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/mdcao/npScarf/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "mdcao/npScarf"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "npScarf: Scaffolding and Completing Assemblies in Real-time Fashion"
      },
      "source": "https://raw.githubusercontent.com/mdcao/npScarf/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "*npScarf*: Scaffolding and Completing Assemblies in Real-time Fashion"
        ],
        "type": "Text_excerpt",
        "value": "Dependency: The pipeline requires the following software installed\n\n* SPAdes >= 3.5\n* bwa >= 7.11\n\nQuick installation guide:\n\n    $ git clone https://github.com/mdcao/japsa\n    $ cd japsa\n    $ make install \\\n       [INSTALL_DIR=~/.usr/local \\] \n       [MXMEM=7000m \\] \n       [SERVER=true \\] \n       [JLP=/usr/lib/jni:/usr/lib/R/site-library/rJava/jri]\n\n*npScarf* module is bundled within the [Japsa package](http://mdcao.github.io/japsa/).\nDetails of installation (including for Windows) and usage of Japsa can be found \nin its documentation hosted on [ReadTheDocs](http://japsa.readthedocs.org/en/latest/index.html) \nIn order to run the *npScarf* in real-time, [npReader]( https://github.com/mdcao/npReader)\nand particularly HDF library need to be istalled properly. Please refer to the installation \ninstructions for [npReader]( https://github.com/mdcao/npReader) repository.\n\n"
      },
      "source": "https://raw.githubusercontent.com/mdcao/npScarf/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9997524546999387,
      "result": {
        "original_header": "Input",
        "type": "Text_excerpt",
        "value": "\tjsa.np.npscarf -bwaExe=</path/to/BWA> -bwaThread=<#threads> -input <*nanopore*> -format fastq -seq <*draft*> > log.out 2>&1\n\t\nFor that reason, it is important to provide the format of the input file if it's in SAM/BAM (default is FASTA/FASTQ).\nYou don't have to specify BWA execution files location if they are already included in your PATH environment variable. \n \n"
      },
      "source": "https://raw.githubusercontent.com/mdcao/npScarf/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9220071862943703,
      "result": {
        "original_header": "Real-time scaffolding",
        "type": "Text_excerpt",
        "value": "\tjsa.np.npreader -realtime -folder c:\\Downloads\\ -fail -output - | \\ \n\tbwa mem -t 10 -k11 -W20 -r10 -A1 -B1 -O1 -E1 -L0 -a -Y -K 3000 <*draft*> - 2> /dev/null | \\  \nor if you have the whole set of Nanopore long reads already and want to emulate the \nstreaming mode: \nor if your file does not have the *timestamp* data yet, you can manually make ones. For example: \n"
      },
      "source": "https://raw.githubusercontent.com/mdcao/npScarf/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8218572769945144,
      "result": {
        "original_header": "Real-time scaffolding",
        "type": "Text_excerpt",
        "value": "   \tjsa.np.npscarf -realtime [options] \n\tjsa.np.npreader -realtime -folder c:\\Downloads\\ -fail -output - | \\ \n"
      },
      "source": "https://raw.githubusercontent.com/mdcao/npScarf/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8587573585737206,
      "result": {
        "original_header": "Assembly graph",
        "type": "Text_excerpt",
        "value": "\tjsa.np.npscarf -input <input> -format <format> -seq <*draft*> -spades <spades output folder> > log.out 2>&1\n \n"
      },
      "source": "https://raw.githubusercontent.com/mdcao/npScarf/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/mdcao/npScarf/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "parent_header": [
          "*npScarf*: Scaffolding and Completing Assemblies in Real-time Fashion"
        ],
        "type": "Text_excerpt",
        "value": "See [Japsa license](https://github.com/mdcao/japsa/blob/master/LICENSE.md)\n"
      },
      "source": "https://raw.githubusercontent.com/mdcao/npScarf/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "npScarf"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "mdcao"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/mdcao/npScarf/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 06:25:19",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 26
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "non-software"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Tutorial",
        "parent_header": [
          "*npScarf*: Scaffolding and Completing Assemblies in Real-time Fashion"
        ],
        "type": "Text_excerpt",
        "value": "This tutorial will walk through how to use *npScarf* to complete a genome assembly\nof the K. pnuemoniea ATCC BAA-2146 (Kpn2146) bacterial strain using Illumina\nand nanopore sequencing data.\n"
      },
      "source": "https://raw.githubusercontent.com/mdcao/npScarf/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Primary data sources:",
        "parent_header": [
          "*npScarf*: Scaffolding and Completing Assemblies in Real-time Fashion",
          "Tutorial"
        ],
        "type": "Text_excerpt",
        "value": "1. Illumina sequencing data: It is essential that the reads are trimmed to remove \nall adaptors. Low quality bases should also be removed. We make available the sequencing\ndata for the Kpn2146 sample, sequenced with Illumina MiSeq and are trimmed\nwith trimmomatic: [file1](http://data.genomicsresearch.org/Projects/npScarf/data/Kp2146_paired_1.fastq.gz)\nand [file 2](http://data.genomicsresearch.org/Projects/npScarf/data/Kp2146_paired_2.fastq.gz).\n\n2. Nanopore sequencing data: The raw data (before base-calling) of the Kpn2146 \ncan obtained from ENA with run accession ERR868296.\n\n\nIntermediate data are also made available as you walk through the tutorial.\n"
      },
      "source": "https://raw.githubusercontent.com/mdcao/npScarf/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Processing",
        "parent_header": [
          "*npScarf*: Scaffolding and Completing Assemblies in Real-time Fashion",
          "Tutorial"
        ],
        "type": "Text_excerpt",
        "value": "* Assemble the Illumina data with SPAdes using 16 threads in parallel. Option --careful would help to reduce the errors but the improvement is not so significant. It's safe to exclude it from the command if you want to save the running time.\n\n```\n$ spades.py --careful --pe1-1 Kp2146_paired_1.fastq.gz --pe1-2 Kp2146_paired_2.fastq.gz -o spades -t 16\n```\n\nThe result contigs file of interest is spades/contigs.fasta. The contig list is then sorted with \n\n```\n$ jsa.seq.sort -r -n --input spades/contigs.fasta --output Kp2146_spades.fasta \n```\n\nThe assembly of the Illumina data (using SPAdes 3.5) of the Kpn2146 is made available \n[here](http://data.genomicsresearch.org/Projects/npScarf/data/Kp2146_spades.fasta)\n\n* Create the bwa index for the Illumina assembly:\n\n```\n$ bwa index Kp2146_spades.fasta\n```\n\n* In batch mode where all nanopore data have been sequenced and base-called, the scaffolding can be\ndone in batch mode with the command:\n\n```  \n$ bwa mem -t 10 -k11 -W20 -r10 -A1 -B1 -O1 -E1 -L0 -a -Y Kp2146_spades.fasta Kp2146_ONT.fastq  | jsa.np.npscarf -input - -format sam -seq Kp2146_spades.fasta -prefix Kp2146-batch \n```\n\nThe nanopore sequencing data for the Kpn2164 sample in fastq format is made available\n[here](http://data.genomicsresearch.org/Projects/npScarf/data/Kp2146_ONT.fastq.gz).\n\n* In real-time mode, assuming the base-called data from Metrichor service are stored\nin folder Downloads, the pipeline can run with following command:\n\n```\n$ jsa.np.npreader  --realtime --folder Downloads --fail --stat --number --output - \\\n | bwa mem -t 10 -k11 -W20 -r10 -A1 -B1 -O1 -E1 -L0 -a -Y -K 3000 Kp2146_spades.fasta -  \\\n | jsa.np.npscarf -realtime -input - -format sam -seq Kp2146_spades.fasta -prefix Kp2146-realtime > log.out 2>&1\n```\n\nThe processing can be distributed over a network cluster by using the streaming utilities\nprovided in japsa package. Information can be found  \n[here](http://japsa.readthedocs.io/en/latest/tools/jsa.util.streamServer.html) and\n[here](http://japsa.readthedocs.io/en/latest/tools/jsa.util.streamClient.html) and \n[examples are here](http://japsa.readthedocs.io/en/latest/tools/jsa.np.npreader.html)\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/mdcao/npScarf/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Detailed Usage",
        "parent_header": [
          "*npScarf*: Scaffolding and Completing Assemblies in Real-time Fashion"
        ],
        "type": "Text_excerpt",
        "value": "A summary of *npScarf* usage can be obtained by invoking the --help option:\n\n   \tjsa.np.npscarf --help\n   \t\nNote: options with dash or dash-dash (GNU style) are all acceptable and equivalent iff no ambiguity is introduced.\nFor example ones can call instead\n\n\tjsa.np.npscarf -help \n\t\nor even\n\t\n\tjsa.np.npscarf -h\n\t\nsince h is the only prefix in this command's list of options.\n\n**WARNING** Please always check the help option first before running *npScarf* since the structure and parameters list of the command can be changed significantly from different versions.\n"
      },
      "source": "https://raw.githubusercontent.com/mdcao/npScarf/master/README.md",
      "technique": "header_analysis"
    }
  ]
}