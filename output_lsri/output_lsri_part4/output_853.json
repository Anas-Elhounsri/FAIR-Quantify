{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/GMOD/cram-js"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-07-13T22:07:52Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-14T15:07:31Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Read CRAM v3 and v2 in node or in the browser"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9564494751096966,
      "result": {
        "original_header": "@gmod/cram",
        "type": "Text_excerpt",
        "value": "Read CRAM files (indexed or unindexed) with pure JS, works in node or in the\nbrowser. \n- Reads CRAM 3.x and 2.x (3.1 added in v1.6.0)\n- Does not read CRAM 1.x\n- Can use .crai indexes out of the box, for efficient sequence fetching, but\n  also has an [index API](#craiindex) that would allow use with other index\n  types\n- Has preliminary support for bzip2 and lzma codecs. lzma requires the latest\n  @gmod/cram version, and uses webassembly. If you find you are unable to\n  compile it, you can try downgrading\n \n"
      },
      "source": "https://raw.githubusercontent.com/GMOD/cram-js/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9276260029124628,
      "result": {
        "original_header": "API (auto-generated)",
        "type": "Text_excerpt",
        "value": "- [CramRecord](#cramrecord) - format of CRAM records returned by this API\n  - [ReadFeatures](#readfeatures) - format of read features on records\n- [IndexedCramFile](#indexedcramfile) - indexed access into a CRAM file\n- [CramFile](#cramfile) - .cram API\n- [CraiIndex](#craiindex) - .crai index API\n- [Error Classes](#error-classes) - special error classes thrown by this API\n \n"
      },
      "source": "https://raw.githubusercontent.com/GMOD/cram-js/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9577115943484557,
      "result": {
        "original_header": "Table of Contents",
        "type": "Text_excerpt",
        "value": "Class of each CRAM record returned by this API.\n \n"
      },
      "source": "https://raw.githubusercontent.com/GMOD/cram-js/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9070646310844378,
      "result": {
        "original_header": "isPaired",
        "type": "Text_excerpt",
        "value": "Returns\n**[boolean](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean)**\ntrue if the read is paired, regardless of whether both segments are mapped\n \n"
      },
      "source": "https://raw.githubusercontent.com/GMOD/cram-js/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9180208155275206,
      "result": {
        "original_header": "isProperlyPaired",
        "type": "Text_excerpt",
        "value": "Returns\n**[boolean](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean)**\ntrue if the read is paired, and both segments are mapped\n \n"
      },
      "source": "https://raw.githubusercontent.com/GMOD/cram-js/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8908532832993353,
      "result": {
        "original_header": "isSegmentUnmapped",
        "type": "Text_excerpt",
        "value": "Returns\n**[boolean](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean)**\ntrue if the read itself is unmapped; conflictive with isProperlyPaired\n \n"
      },
      "source": "https://raw.githubusercontent.com/GMOD/cram-js/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8015190401702357,
      "result": {
        "original_header": "isReverseComplemented",
        "type": "Text_excerpt",
        "value": "Returns\n**[boolean](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean)**\ntrue if the read is mapped to the reverse strand\n \n"
      },
      "source": "https://raw.githubusercontent.com/GMOD/cram-js/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9657437404517162,
      "result": {
        "original_header": "isRead1",
        "type": "Text_excerpt",
        "value": "Returns\n**[boolean](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean)**\ntrue if this is read number 1 in a pair\n \n"
      },
      "source": "https://raw.githubusercontent.com/GMOD/cram-js/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9657437404517162,
      "result": {
        "original_header": "isRead2",
        "type": "Text_excerpt",
        "value": "Returns\n**[boolean](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean)**\ntrue if this is read number 2 in a pair\n \n"
      },
      "source": "https://raw.githubusercontent.com/GMOD/cram-js/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9007268707408955,
      "result": {
        "original_header": "isSecondary",
        "type": "Text_excerpt",
        "value": "Returns\n**[boolean](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean)**\ntrue if this is a secondary alignment\n \n"
      },
      "source": "https://raw.githubusercontent.com/GMOD/cram-js/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9186784374962205,
      "result": {
        "original_header": "isSupplementary",
        "type": "Text_excerpt",
        "value": "Returns\n**[boolean](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean)**\ntrue if this is a supplementary alignment\n \n"
      },
      "source": "https://raw.githubusercontent.com/GMOD/cram-js/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8159354345874837,
      "result": {
        "original_header": "isDetached",
        "type": "Text_excerpt",
        "value": "Returns\n**[boolean](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean)**\ntrue if the read is detached\n \n"
      },
      "source": "https://raw.githubusercontent.com/GMOD/cram-js/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9746424490311738,
      "result": {
        "original_header": "getReadBases",
        "type": "Text_excerpt",
        "value": "Get the original sequence of this read. \n"
      },
      "source": "https://raw.githubusercontent.com/GMOD/cram-js/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9097711011533436,
      "result": {
        "original_header": "getPairOrientation",
        "type": "Text_excerpt",
        "value": "Get the pair orientation of a paired read. Adapted from igv.js \nReturns\n**[String](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String)**\nof paired orientatin\n \n"
      },
      "source": "https://raw.githubusercontent.com/GMOD/cram-js/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9597959545775131,
      "result": {
        "original_header": "addReferenceSequence",
        "type": "Text_excerpt",
        "value": "Annotates this feature with the given reference sequence basepair information.\nThis will add a `sub` and a `ref` item to base subsitution read features given\nthe actual substituted and reference base pairs, and will make the\n`getReadSequence()` method work.\n \n"
      },
      "source": "https://raw.githubusercontent.com/GMOD/cram-js/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9105476566612205,
      "result": {
        "original_header": "ReadFeatures",
        "type": "Text_excerpt",
        "value": "The feature objects appearing in the `readFeatures` member of CramRecord objects\nthat show insertions, deletions, substitutions, etc.\n \n"
      },
      "source": "https://raw.githubusercontent.com/GMOD/cram-js/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9581236152385858,
      "result": {
        "original_header": "Static fields",
        "type": "Text_excerpt",
        "value": "- **code** (`character`): One of \"bqBXIDiQNSPH\". See page 15 of the CRAM v3 spec\n  for their meanings.\n- **data** (`any`): the data associated with the feature. The format of this\n  varies depending on the feature code.\n- **pos** (`number`): location relative to the read (1-based)\n- **refPos** (`number`): location relative to the reference (1-based)\n \n"
      },
      "source": "https://raw.githubusercontent.com/GMOD/cram-js/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.962660903060508,
      "result": {
        "original_header": "getEntriesForRange",
        "type": "Text_excerpt",
        "value": "Returns\n**[Promise](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise)**\npromise for an array of objects of the form\n`{start, span, containerStart, sliceStart, sliceBytes }`\n \n"
      },
      "source": "https://raw.githubusercontent.com/GMOD/cram-js/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8384855448952379,
      "result": {
        "original_header": "CramUnimplementedError",
        "type": "Text_excerpt",
        "value": "Error caused by encountering a part of the CRAM spec that has not yet been\nimplemented\n \n"
      },
      "source": "https://raw.githubusercontent.com/GMOD/cram-js/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9301416755335711,
      "result": {
        "original_header": "CramBufferOverrunError",
        "type": "Text_excerpt",
        "value": "An error caused by attempting to read beyond the end of the defined data.\n \n"
      },
      "source": "https://raw.githubusercontent.com/GMOD/cram-js/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/GMOD/cram-js/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 9
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/GMOD/cram-js/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "GMOD/cram-js"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "@gmod/cram"
      },
      "source": "https://raw.githubusercontent.com/GMOD/cram-js/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Install",
        "parent_header": [
          "@gmod/cram"
        ],
        "type": "Text_excerpt",
        "value": "```bash\n$ npm install --save @gmod/cram\n# or\n$ yarn add @gmod/cram\n```\n"
      },
      "source": "https://raw.githubusercontent.com/GMOD/cram-js/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/GMOD/cram-js/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "genomics"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2017 Robert Buels\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/GMOD/cram-js/master/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "parent_header": [
          "@gmod/cram"
        ],
        "type": "Text_excerpt",
        "value": "MIT \u00a9 [Robert Buels](https://github.com/rbuels)\n"
      },
      "source": "https://raw.githubusercontent.com/GMOD/cram-js/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "cram-js"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "GMOD"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "TypeScript",
        "size": 187496,
        "type": "Programming_language",
        "value": "TypeScript"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "JavaScript",
        "size": 5776,
        "type": "Programming_language",
        "value": "JavaScript"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 3024,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/GMOD/cram-js/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 05:07:12",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 18
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "non-software"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "@gmod/cram"
        ],
        "type": "Text_excerpt",
        "value": "```js\nconst { IndexedCramFile, CramFile, CraiIndex } = require('@gmod/cram')\n\n// Use indexedfasta library for seqFetch, if using local file (see below)\nconst { IndexedFasta, BgzipIndexedFasta } = require('@gmod/indexedfasta')\n\n// this uses local file paths for node.js for IndexedFasta, for usages using\n// remote URLs see indexedfasta docs for filehandles and\n// https://github.com/gmod/generic-filehandle\nconst t = new IndexedFasta({\n  path: '/filesystem/yourfile.fa',\n  faiPath: '/filesystem/yourfile.fa.fai',\n})\n\n// example of fetching records from an indexed CRAM file.\n// NOTE: only numeric IDs for the reference sequence are accepted.\n// For indexedfasta the numeric ID is the order in which the sequence names\n// appear in the header\n\n// Wrap in an async and then run\nrun = async () => {\n  const idToName = []\n  const nameToId = {}\n\n  // example opening local files on node.js\n  // can also pass `cramUrl` (for the IndexedCramFile class), and `url` (for\n  // the CraiIndex) params to open remote URLs\n  //\n  // alternatively `cramFilehandle` (for the IndexedCramFile class) and\n  // `filehandle` (for the CraiIndex) can be used,  see for examples\n  // https://github.com/gmod/generic-filehandle\n\n  const indexedFile = new IndexedCramFile({\n    cramPath: '/filesystem/yourfile.cram',\n    //or\n    //cramUrl: 'url/to/file.cram'\n    //cramFilehandle: a generic-filehandle or similar filehandle\n    index: new CraiIndex({\n      path: '/filesystem/yourfile.cram.crai',\n      // or\n      // url: 'url/to/file.cram.crai'\n      // filehandle: a generic-filehandle or similar filehandle\n    }),\n    seqFetch: async (seqId, start, end) => {\n      // note:\n      // * seqFetch should return a promise for a string, in this instance retrieved from IndexedFasta\n      // * we use start-1 because cram-js uses 1-based but IndexedFasta uses 0-based coordinates\n      // * the seqId is a numeric identifier, so we convert it back to a name with idToName\n      // * you can return an empty string from this function for testing if you want, but you may not get proper interpretation of record.readFeatures\n      return t.getSequence(idToName[seqId], start - 1, end)\n    },\n    checkSequenceMD5: false,\n  })\n  const samHeader = await indexedFile.cram.getSamHeader()\n\n  // use the @SQ lines in the header to figure out the\n  // mapping between ref ref ID numbers and names\n\n  const sqLines = samHeader.filter(l => l.tag === 'SQ')\n  sqLines.forEach((sqLine, refId) => {\n    sqLine.data.forEach(item => {\n      if (item.tag === 'SN') {\n        // this is the ref name\n        const refName = item.value\n        nameToId[refName] = refId\n        idToName[refId] = refName\n      }\n    })\n  })\n\n  const records = await indexedFile.getRecordsForRange(\n    nameToId['chr1'],\n    10000,\n    20000,\n  )\n  records.forEach(record => {\n    console.log(`got a record named ${record.readName}`)\n    if (record.readFeatures != undefined) {\n      record.readFeatures.forEach(({ code, pos, refPos, ref, sub }) => {\n        // process the read features. this can be used similar to\n        // CIGAR/MD strings in SAM. see CRAM specs for more details.\n        if (code === 'X') {\n          console.log(\n            `${record.readName} shows a base substitution of ${ref}->${sub} at ${refPos}`,\n          )\n        }\n      })\n    }\n  })\n}\n\nrun()\n\n// can also pass `cramUrl` (for the IndexedCramFile class), and `url` (for the CraiIndex) params to open remote URLs\n// alternatively `cramFilehandle` (for the IndexedCramFile class) and `filehandle` (for the CraiIndex) can be used,  see for examples https://github.com/gmod/generic-filehandle\n```\n\nYou can use cram-js without NPM also with the cram-bundle.js. See the example\ndirectory for usage with script tag\n"
      },
      "source": "https://raw.githubusercontent.com/GMOD/cram-js/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Academic Use",
        "parent_header": [
          "@gmod/cram"
        ],
        "type": "Text_excerpt",
        "value": "This package was written with funding from the [NHGRI](http://genome.gov) as\npart of the [JBrowse](http://jbrowse.org) project. If you use it in an academic\nproject that you publish, please cite the most recent JBrowse paper, which will\nbe linked from [jbrowse.org](http://jbrowse.org).\n"
      },
      "source": "https://raw.githubusercontent.com/GMOD/cram-js/master/README.md",
      "technique": "header_analysis"
    }
  ]
}