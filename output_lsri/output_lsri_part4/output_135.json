{
  "application_domain": [
    {
      "confidence": 19.33,
      "result": {
        "type": "String",
        "value": "Natural Language Processing"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/reinhardh/dna_rs_coding"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-02-16T19:22:16Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-10T14:36:19Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Error correction scheme for storing information on DNA using Reed Solomon codes"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Summary",
        "type": "Text_excerpt",
        "value": "This file gives instructions for encoding and decoding information on short DNA molecules.\n"
      },
      "source": "https://raw.githubusercontent.com/reinhardh/dna_rs_coding/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Description of the scheme",
        "type": "Text_excerpt",
        "value": "We store the information on M sequences of length L. The sequences are indexed and protected with error correcting codes. The scheme performs the following steps:\n\n- Multiply the information with a pseudorandom sequence. \n\n- Split the information into B*k information pieces of length L - log(M)-R, where R is the redundancy on a sequence level. The information of each piece will be stored on a sequence.\n\n- For each block b = 1,...,B, add extra sequences by encoding each row separately by using a Reed-Solomon code over the extension field 2^m. This results in n-k extra sequences per blocks and thus in B*(n-k) extra sequences.\n\n- Add a unique index to each sequence, and inner code each sequence.\n\n- For the inner code we decide on a symbol size mi of 6 bit, for the outer code the symbol size mo is 14 bit. These values reflect considerations on accessible DNA sequence lengths and optimal code length.\n\nWe are not avoiding homopolymers. Due to the randomization of the data, long homopolymers and corresponding errors are very unlikely, and the error-correcting code will deal with those. \n"
      },
      "source": "https://raw.githubusercontent.com/reinhardh/dna_rs_coding/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9251330864551314,
      "result": {
        "original_header": "Instructions to encode the first Biohackers episode from DNA",
        "type": "Text_excerpt",
        "value": "In August 2020, the first episode of the new Netflix series *Biohackers* was stored on DNA, see [https://de.biohackersnetflix.com/](https://de.biohackersnetflix.com/) for details. With the code in this repository, you can reconstruct the first episode yourself from DNA. Here are three steps for reconstruction: \n\n2. Install the code provided in this repository: There are a few options for installing the code that are explained below. Here is a single, simple suggestion that works for most operating systems:\n\t\n\t*i.*  Install Docker, by downloading [Docker Desktop](https://docs.docker.com/get-docker/).\n\t\n\tMake sure that at least 6GB of memory and 2GB of Swap are available, in the resource tab at [https://docs.docker.com/docker-for-mac/](https://docs.docker.com/docker-for-mac/) (recommended are 8GB of memory and 4GB of swap).  \n\t\n\t*ii.* Download a virtual machine containing the pre-installed code from this repository, by typing the following command in the Terminal or bash application on a computer with a  Mac or Linux operating system, respectively:\n\t\n\t`docker pull rheckel/dna_storage`\n\t\n\t*iii.* Start the virtual machine:\n\t\n\t`docker run -it -v ~/Downloads:/data rheckel/dna_storage bash`\n\t\n\tYou are now running a virtual machine in which the code from this repository is already installed. \n3. In the following you will decode the first episode from the DNA sequences. For this you need to type the following commands (in the bash that you just started when typing `docker run ... `):\n\t\n\t*i.* Change to the folder in which the code is located by typing:\n\t\n\t`cd dna_rs_coding/simulate/` \n\t*ii.* Type the following command to start the decoding process:\n\t\n\t`./texttodna --decode --n=16383 --k=12700 --N=35 --K=32 --nuss=12 --numblocks=237 --primer_length=20 --input=/data/encoded_withprimers.txt --output=../data/netflix_BH101_FullEP_rec.mp4`\n\t\n\tYou can now see the code running and the episode is being reconstructed. Once the code is done running, the file `netflix_BH101_FullEP_rec.mp4` appears in the folder `Downloads`, and you successfully reconstructed the video.\n\t\n\tIf you get the error message `Killed`, most likely you did not give your process enough memory or swap, or your computer does not have enough (6GB of memory and 2GB of swap are necessary).  \n"
      },
      "source": "https://raw.githubusercontent.com/reinhardh/dna_rs_coding/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9600164181490898,
      "result": {
        "original_header": "Parameters of the code",
        "type": "Text_excerpt",
        "value": "\n- l: length of the index in multiples of 6 bits (default choice is l=4)\n- n: length of a block of the outer code (default is n=16383, n must be less or equal than 16383 (max outer code length equals 2^mo-1))\n- k: number of information symbols of the outer code (default is k=10977, must obey k<=n)\n- N: length of inner codeword (default is N=34; max inner code length is 2^mi-1)\n- K: length of inner codeword symbols (default is K=32)\n- nuss: number of symbols of outer code per segment (default is nuss=12) \nThe number of bits per nucleotide is:\n2*k/n * (K-l)/N \nThe redundancy of the outer code is n-k which means that k-n of the sequences of each block can be lost and we can still recover the information. Stated differently if no more than a fraction of 1-k/n of the sequences are lost, then the information can be recovered. \nThe redundancy of the inner code is N-K which means that a sequence can have (N-K)/2 substitution error and we can still recover it. \nHere are a few concrete examples of the choices of the parameters that satisfy the constraints above.\nLet the length of the index be l = 4, then we can have at most 2^(mi * l) = 2^24 = 16777216 sequences. That means we can for example choose n = 16383 and store the data on up to 1024 = floor(2^24/16383) many blocks, each consisting of n=16383 sequences. \nSuppose we choose the redundancy of the inner code such that N-K = 3.\nThen the following are a subset of the choices that are possible due to the constraints given above: \n"
      },
      "source": "https://raw.githubusercontent.com/reinhardh/dna_rs_coding/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/reinhardh/dna_rs_coding/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 11
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/reinhardh/dna_rs_coding/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "reinhardh/dna_rs_coding"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Summary"
      },
      "source": "https://raw.githubusercontent.com/reinhardh/dna_rs_coding/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "The code is written in C++, and compilation requires installation of the boost library. The package has been tested on the following operating systems:\n\n\t- Ubuntu 16.04\n\t- Mac OS Mojave 10.14\n    \nThe installation (compile time) is less than 2 minutes. The easiest way to run the code for Windows and Mac users is to install and run the code in a Docker container. \n\n"
      },
      "source": "https://raw.githubusercontent.com/reinhardh/dna_rs_coding/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation of required software on Linux",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "    sudo apt-get install gcc\n    sudo apt-get install make\n    sudo apt-get install git\n    sudo apt-get install libboost-all-dev\n    \nFollow steps 4-5 above to run and compile the code.\n"
      },
      "source": "https://raw.githubusercontent.com/reinhardh/dna_rs_coding/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation of required software on macOS",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "\t/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n\tbrew install boost\n\tsudo make \u2013f Makefile\n\nFollow steps 4-5 above to run and compile the code.\n\t"
      },
      "source": "https://raw.githubusercontent.com/reinhardh/dna_rs_coding/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9999918562999837,
      "result": {
        "original_header": "Instructions to encode the first Biohackers episode from DNA",
        "type": "Text_excerpt",
        "value": "\n2. Install the code provided in this repository: There are a few options for installing the code that are explained below. Here is a single, simple suggestion that works for most operating systems:\n\t\n\t*i.*  Install Docker, by downloading [Docker Desktop](https://docs.docker.com/get-docker/).\n\t\n\tMake sure that at least 6GB of memory and 2GB of Swap are available, in the resource tab at [https://docs.docker.com/docker-for-mac/](https://docs.docker.com/docker-for-mac/) (recommended are 8GB of memory and 4GB of swap).  \n\t\n\t*ii.* Download a virtual machine containing the pre-installed code from this repository, by typing the following command in the Terminal or bash application on a computer with a  Mac or Linux operating system, respectively:\n\t\n\t`docker pull rheckel/dna_storage`\n\t\n\t*iii.* Start the virtual machine:\n\t\n\t`docker run -it -v ~/Downloads:/data rheckel/dna_storage bash`\n\t\n\tYou are now running a virtual machine in which the code from this repository is already installed. \n3. In the following you will decode the first episode from the DNA sequences. For this you need to type the following commands (in the bash that you just started when typing `docker run ... `):\n\t\n\t*i.* Change to the folder in which the code is located by typing:\n\t\n\t`cd dna_rs_coding/simulate/` \n"
      },
      "source": "https://raw.githubusercontent.com/reinhardh/dna_rs_coding/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/reinhardh/dna_rs_coding/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Apache License 2.0",
        "spdx_id": "Apache-2.0",
        "type": "License",
        "url": "https://api.github.com/licenses/apache-2.0",
        "value": "https://api.github.com/licenses/apache-2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "type": "Text_excerpt",
        "value": "All files are provided under the terms of the Apache License, Version 2.0, see the included file \"apache_licence_20\" for details.\n"
      },
      "source": "https://raw.githubusercontent.com/reinhardh/dna_rs_coding/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "dna_rs_coding"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "reinhardh"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 95190,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 24943,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 1237,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/reinhardh/dna_rs_coding/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running the code in a Docker container - recommendened for Windows and Mac Users",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "1. Install Docker desktop\n2. Start an Ubuntu virtual machine, by runing the following commands in a terminal:\n\t\n    For OSX:\n\t\n\t`docker run -it -v ~/Documents:/data ubuntu:16.04 bash`\n\t\n    For Windows:\n\n\t`docker run -it -v c:/Users:/data ubuntu:16.04 bash`\n\nThis generates a docker container which has access to the folder ~/Documents/data on your local machine. Make sure the docker container has sufficient memory when decoding larger files - for the example here little memory is needed.\n\n3. Install the required software in the Docker container:\n\n        apt-get update\n        apt-get install g++\n        apt-get install make\n        apt-get install git\n        apt-get install libboost-all-dev\n\n4. Download the code:\n\n\t`git clone https://github.com/reinhardh/dna_rs_coding/`\n\n5. Compile the code:\n\n        cd dna_rs_coding\n        cd simulate\n        make texttodna\n\nNow the examples above can be run.\n\nTo work with your own data in the docker image:\n\n    - copy files to an apropriate folder (e.g., cp data.zip /dna_rs_coding/data)\n    - move to the folder /dna_rs_coding/simulate (e.g., by executing the command cd /dna_rs_coding/simulate) and run the code as in the examples to encode and decode files\n    - copy results back from virtual machine to local folder on computer (e.g., with command: cp data_encoded.txt c:/Users/robert/)\n    \nPlease note that once the virtual machine is ended (by command exit), all data generated within the machine is deleted, and only the data copied to local folders remains.\n\n"
      },
      "source": "https://raw.githubusercontent.com/reinhardh/dna_rs_coding/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 02:01:45",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 31
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Demo",
        "type": "Text_excerpt",
        "value": "In the following, we describe a few examples of how information can be encoded to DNA segments, and decode it back in order to recover the information. For all examples, the first step is to compile the program texttodna. Towards this goal, change to the folder ./simulate and execute the following command which compiles the code:\n\n\t`make texttodna` \n\nThe program texttodna can be used to encode data, map it to DNA segments, and to recover the data from the DNA segments as illustrated in the following examples.\n"
      },
      "source": "https://raw.githubusercontent.com/reinhardh/dna_rs_coding/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example 1",
        "parent_header": [
          "Demo"
        ],
        "type": "Text_excerpt",
        "value": "In our first example, we encode information on one block of length n=12472 and we choose k=9000, which means the outer code can correct nse substitution errors and ner erasures provided that 2*nse + ner <= 12472-9000. The rest of the parameters are the default parameters, i.e.,  N=34, K=32, nuss=12. This results in sequences of length N*ni/2 = 43*6/2 = 102.\n \n\n1. The following command takes the text in the file *data.zip*, encodes it on DNA segments, and stores the segments in *data_encoded.txt*:\n\n\t`./texttodna --n=12472 --k=9000 --encode --input=../data/data.zip --output=../data/data_encoded.txt`\n\n2. The following command takes random lines (DNA segments) from *data_encoded.txt*, introduces errors, and saves the resulting file to *data_drawnseg.txt*:\n\n\t`./texttodna --disturb --input=../data/data_encoded.txt --output=../data/data_drawnseg.txt`\n\n3. The following command decodes the perturbed data in *data_drawnseg.txt*, and writes the result to *data_rec.zip*; this should recover the original text:\n\n\t`./texttodna --decode --n=12472 --k=9000 --numblocks=1 --input=../data/data_drawnseg.txt --output=../data/data_rec.zip`\n\nThis example runs on a standard laptop (2017 MacBook Pro) in 1-5 minutes.\n"
      },
      "source": "https://raw.githubusercontent.com/reinhardh/dna_rs_coding/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example 2",
        "parent_header": [
          "Demo"
        ],
        "type": "Text_excerpt",
        "value": "In our second example, we encode information on two blocks of maximum length n=16383, and choose k=12000. In addition we make our sequences shorter than in the previous example, by setting nuss=9. We set K = 25. Note that his satisfies the constraint K*mi = nuss*mo + l*mi, where mi=6, mo=14. Finally, we add more redundancy in the inner code by setting N = 28. This results in sequences of length N*ni/2 = 28*6/2 = 84.\n\n1. Encoding:\n\t\n\t`./texttodna --k=12000 --nuss=9 --K=25 --N=28 --encode --input=../data/DNA_channel_statistics.pdf --output=../data/paper_encoded.txt`\n\n2. Decoding:\n\n\t`./texttodna --k=12000 --nuss=9 --K=25 --N=28  --decode --numblocks=3 --input=../data/paper_encoded.txt --output=../data/paper_recovered.pdf`\n"
      },
      "source": "https://raw.githubusercontent.com/reinhardh/dna_rs_coding/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example 3",
        "parent_header": [
          "Demo"
        ],
        "type": "Text_excerpt",
        "value": "The input can be a fastq file. In that case provide a fastq file as input as follows:\n1. Decoding:\n\n\t`./texttodna --k=12000 --decode --numblocks=1 --fastq_infile=../data/reads.fastq  --output=../data/paper_recovered.pdf`\n\nUse the flag --reverse if the reads are in reverse complement form.\n"
      },
      "source": "https://raw.githubusercontent.com/reinhardh/dna_rs_coding/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example 4",
        "parent_header": [
          "Demo"
        ],
        "type": "Text_excerpt",
        "value": "This is an unusual use case, but it is possible to only use the inner code and store a tiny amount of data on a single sequence. For example, the following takes a file consisting of 21 byte and encodes it onto a single sequences. Note that for this we need num_bytes*8 = K*mi, which is satisfied for our example with 21 x 8=28 x 6.\n\n1. Encoding:\n\n\t`./texttodna --singleseq --K=28 --N=34 --encode --input=../data/original_data.txt --output=../data/data_encoded.txt`\n\t\n2. Decoding:\n\n\t`./texttodna --singleseq --K=28 --N=34 --decode --input=../data/data_encoded.txt --output=../data/data_rec.txt`\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/reinhardh/dna_rs_coding/master/README.md",
      "technique": "header_analysis"
    }
  ]
}