{
  "code_of_conduct": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Contributor Code of Conduct\n\n> Read in: [Espa\u00f1ol](http://contributor-covenant.org/version/1/3/0/es/) |\n[Fran\u00e7ais](http://contributor-covenant.org/version/1/3/0/fr/) |\n[Italiano](http://contributor-covenant.org/version/1/3/0/it/) |\n[Magyar](http://contributor-covenant.org/version/1/3/0/hu/) |\n[Polskie](http://contributor-covenant.org/version/1/3/0/pl/) |\n[Portugu\u00eas](http://contributor-covenant.org/version/1/3/0/pt/) |\n[Portugu\u00eas do Brasil](http://contributor-covenant.org/version/1/3/0/pt_br/)\n\nAs contributors and maintainers of this project, and in the interest of\nfostering an open and welcoming community, we pledge to respect all people who\ncontribute through reporting issues, posting feature requests, updating\ndocumentation, submitting pull requests or patches, and other activities.\n\nWe are committed to making participation in this project a harassment-free\nexperience for everyone, regardless of level of experience, gender, gender\nidentity and expression, sexual orientation, disability, personal appearance,\nbody size, race, ethnicity, age, religion, or nationality.\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery\n* Personal attacks\n* Trolling or insulting/derogatory comments\n* Public or private harassment\n* Publishing other's private information, such as physical or electronic\n  addresses, without explicit permission\n* Other unethical or unprofessional conduct\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\nBy adopting this Code of Conduct, project maintainers commit themselves to\nfairly and consistently applying these principles to every aspect of managing\nthis project. Project maintainers who do not follow or enforce the Code of\nConduct may be permanently removed from the project team.\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community.\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting a project maintainer at [INSERT EMAIL ADDRESS]. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. Maintainers are\nobligated to maintain confidentiality with regard to the reporter of an\nincident.\n\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 1.3.0, available at\n[http://contributor-covenant.org/version/1/3/0/][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/3/0/\n"
      },
      "source": "https://raw.githubusercontent.com/dohalloran/phylo-node/master/node_modules/chai/CODE_OF_CONDUCT.md",
      "technique": "file_exploration"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/dohalloran/phylo-node"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# How to Contribute\n\n## Pull Requests\n\nWe also accept [pull requests][pull-request]!\n\nGenerally we like to see pull requests that\n- Maintain the existing code style\n- Are focused on a single change (i.e. avoid large refactoring or style adjustments in untouched code if not the primary goal of the pull request)\n- Have [good commit messages](http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html)\n- Have tests\n- Don't decrease the current code coverage (see coverage/lcov-report/index.html)\n\n## Building\n\n```\nnpm install\ngrunt\n````\n\nThe `grunt dev` implements watching for tests within Node and `karma start` may be used for manual testing in browsers.\n\nIf you notice any problems, please report them to the GitHub issue tracker at\n[http://github.com/kpdecker/jsdiff/issues](http://github.com/kpdecker/jsdiff/issues).\n\n## Releasing\n\nJsDiff utilizes the [release yeoman generator][generator-release] to perform most release tasks.\n\nA full release may be completed with the following:\n\n```\nyo release\nnpm publish\nyo release:publish components jsdiff dist/components/\n```\n\n[generator-release]: https://github.com/walmartlabs/generator-release\n[pull-request]: https://github.com/kpdecker/jsdiff/pull/new/master\n"
      },
      "source": "https://raw.githubusercontent.com/dohalloran/phylo-node/master/node_modules/mocha/node_modules/diff/CONTRIBUTING.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Contributing",
        "parent_header": [
          "**CONTENTS**"
        ],
        "type": "Text_excerpt",
        "value": "All contributions are welcome.\n- - - - "
      },
      "source": "https://raw.githubusercontent.com/dohalloran/phylo-node/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2016-09-13T20:51:37Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-03-08T18:28:19Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "phylo-node: A Molecular Phylogenetic Toolkit using Node.js"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.882440141946279,
      "result": {
        "original_header": "Pipes",
        "type": "Text_excerpt",
        "value": "Commands can be chained in series to pipe data between applications: \n    var shell = require('./phylo-node_pipes')\n    \n`Pipes` dir contains the module for piping as well as example files. To execute example: \n"
      },
      "source": "https://raw.githubusercontent.com/dohalloran/phylo-node/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/dohalloran/phylo-node/tree/master/Server/jbrowse/JBrowse-1.12.1/docs"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Documentation",
        "parent_header": [
          "**CONTENTS**"
        ],
        "type": "Text_excerpt",
        "value": "1. Skinner M.E., Uzilov A.V., Stein L.D., Mungall C.J., Holmes I.H. (2009). JBrowse: a next-generation genome browser. Genome Research, 19(9):1630-1638\n\n2. Langmead B, Salzberg S. (2012). Fast gapped-read alignment with Bowtie 2. Nature Methods, 4;9(4):357-9\n\n3. Bolger, A. M., Lohse, M., & Usadel, B. (2014). Trimmomatic: A flexible trimmer for Illumina Sequence Data. Bioinformatics, btu170\n\n4. Guindon S., Dufayard J.F., Lefort V., Anisimova M., Hordijk W., Gascuel O. (2010). New Algorithms and Methods to Estimate Maximum-Likelihood Phylogenies: Assessing the Performance of PhyML 3.0. Systematic Biology, 59(3):307-21\n\n5. Untergasser A, Cutcutache I, Koressaar T, Ye J, Faircloth BC, Remm M and Rozen SG. (2012). Primer3 - new capabilities and interfaces. Nucleic Acids Res. 40(15):e115 \n \n6. Edgar, R.C. (2004) MUSCLE: multiple sequence alignment with high accuracy and high throughput. Nucleic Acids Res. 32(5):1792-1797 \n\n7. Edgar, R.C. (2004) MUSCLE: a multiple sequence alignment method with reduced time and space complexity. BMC Bioinformatics, (5)113 \n\n8. Sievers F, Wilm A, Dineen DG, Gibson TJ, Karplus K, Li W, Lopez R, McWilliam H, Remmert M, S\u00f6ding J, Thompson JD, Higgins DG (2011). Fast, scalable generation of high-quality protein multiple sequence alignments using Clustal Omega. Molecular Systems Biology 7:539 \n\n9. Lassmann T, Sonnhammer EL. (2005). Kalign--an accurate and fast multiple sequence alignment algorithm. BMC Bioinformatics. 12;6:298\n\n10. Suyama M, Torrents D, Bork P (2006). PAL2NAL: robust conversion of protein sequence alignment into the corresponding codon alignments. Nucleic Acids Res. 34:W609-W612\n\n11. Massingham T, Goldman N (2005) Detecting amino acid sites under positive selection and purifying selection. Genetics 169: 1853-1762    \n\n12. Yang, Z (2007) PAML 4: phylogenetic analysis by maximum likelihood. Mol Biol Evol. 24(8):1586-91. \n\n13. Yang, Z (1997) PAML: a program package for phylogenetic analysis by maximum likelihood. Comput Appl Biosci. 13(5):555-6\n\n14. Darriba D, Taboada GL, Doallo R, Posada D. (2011). ProtTest 3: fast selection of best-fit models of protein evolution. Bioinformatics, 27:1164-1165 \n\n15. Darriba D, Taboada GL, Doallo R, Posada D. (2012). jModelTest 2: more models, new heuristics and parallel computing. Nature Methods 9(8), 772\n\n- - - - "
      },
      "source": "https://raw.githubusercontent.com/dohalloran/phylo-node/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Download executables",
        "parent_header": [
          "**CONTENTS**",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Download executable files:\n    \n    var get_executable = require('./get_executable.js')\n    get_executable.software(process.argv[2])\n    \n__Basic usage:__ node app.js URL\n\n    node app.js http://www.clustal.org/omega/clustalo-1.2.2-Ubuntu-x86_64\n    \n __Note:__ objects for other tools i.e. PhyML, Clustal Omega, and MUSCLE contain their own methods for downloading binaries (see below)  \n"
      },
      "source": "https://raw.githubusercontent.com/dohalloran/phylo-node/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/dohalloran/phylo-node/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/dohalloran/phylo-node/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "dohalloran/phylo-node"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "phylo-node"
      },
      "source": "https://raw.githubusercontent.com/dohalloran/phylo-node/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/dohalloran/phylo-node/master/Server/jbrowse/JBrowse-1.12.1/setup.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/dohalloran/phylo-node/master/Server/jbrowse/JBrowse-1.12.1/docs/examples/format_tomato.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://cloud.githubusercontent.com/assets/8477977/18491220/619a5754-79d3-11e6-916e-92e189e0072b.png"
      },
      "source": "https://raw.githubusercontent.com/dohalloran/phylo-node/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9364826027190996,
      "result": {
        "original_header": "**phylo-node**",
        "type": "Text_excerpt",
        "value": "__phylo-node: A Molecular Phylogenetic Toolkit using Node.js__ \n"
      },
      "source": "https://raw.githubusercontent.com/dohalloran/phylo-node/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9811345966777917,
      "result": {
        "original_header": "Pipes",
        "type": "Text_excerpt",
        "value": "    node pipe_example.js\n    \n`pipe_example.js` pipes the output from an NCBI fetch API call into the alignment software MUSCLE and aligns the DNA using default settings \n__Note:__ must have MUSCLE in $PATH for pipe example \n- - - - \n \n"
      },
      "source": "https://raw.githubusercontent.com/dohalloran/phylo-node/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.96805876198316,
      "result": {
        "original_header": "Testing",
        "type": "Text_excerpt",
        "value": "phylo-node was successfully tested on: \n- [x] Microsoft Windows 7 Enterprise ver.6.1\n- [x] MacOSX El Capitan ver.10.11.5\n- [x] Linux Ubuntu 64-bit ver.14.04 LTS \n    npm test\n    \nTo ensure all developmental dependencies are installed: \n    npm install --dev\n    \n__Note:__ if you get a permission error when runnning tests you may have to `chmod` mocha \n"
      },
      "source": "https://raw.githubusercontent.com/dohalloran/phylo-node/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8170619047540073,
      "result": {
        "original_header": "Pipes",
        "type": "Text_excerpt",
        "value": "    var shell = require('./phylo-node_pipes')\n    \n`Pipes` dir contains the module for piping as well as example files. To execute example: \n"
      },
      "source": "https://raw.githubusercontent.com/dohalloran/phylo-node/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/dohalloran/phylo-node/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "The MIT License\n\nCopyright (c) 2016, dohalloran\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/dohalloran/phylo-node/master/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "parent_header": [
          "**CONTENTS**"
        ],
        "type": "Text_excerpt",
        "value": "The MIT License\n\nCopyright (c) 2016, dohalloran\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/dohalloran/phylo-node/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://david-dm.org/dohalloran/phylo-node.svg"
      },
      "source": "https://raw.githubusercontent.com/dohalloran/phylo-node/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "phylo-node"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "dohalloran"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "JavaScript",
        "size": 4631812,
        "type": "Programming_language",
        "value": "JavaScript"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 1841016,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 947103,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 478380,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Roff",
        "size": 119378,
        "type": "Programming_language",
        "value": "Roff"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "TSQL",
        "size": 74368,
        "type": "Programming_language",
        "value": "TSQL"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 70052,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CSS",
        "size": 63562,
        "type": "Programming_language",
        "value": "CSS"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 48727,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "PHP",
        "size": 45163,
        "type": "Programming_language",
        "value": "PHP"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 38444,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Lua",
        "size": 23713,
        "type": "Programming_language",
        "value": "Lua"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Java",
        "size": 6716,
        "type": "Programming_language",
        "value": "Java"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 5783,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "TeX",
        "size": 4217,
        "type": "Programming_language",
        "value": "TeX"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "M4",
        "size": 1316,
        "type": "Programming_language",
        "value": "M4"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/dohalloran/phylo-node/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "dohalloran",
          "type": "User"
        },
        "date_created": "2016-09-14T02:37:38Z",
        "date_published": "2016-09-14T02:45:22Z",
        "html_url": "https://github.com/dohalloran/phylo-node/releases/tag/v0.0.5",
        "release_id": 4125001,
        "tag": "v0.0.5",
        "tarball_url": "https://api.github.com/repos/dohalloran/phylo-node/tarball/v0.0.5",
        "type": "Release",
        "url": "https://api.github.com/repos/dohalloran/phylo-node/releases/4125001",
        "value": "https://api.github.com/repos/dohalloran/phylo-node/releases/4125001",
        "zipball_url": "https://api.github.com/repos/dohalloran/phylo-node/zipball/v0.0.5"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 08:43:36",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 8
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Support",
        "parent_header": [
          "**CONTENTS**"
        ],
        "type": "Text_excerpt",
        "value": "If you have any problem or suggestion please open an issue [here](https://github.com/dohalloran/Phylo-Node/issues).\n- - - - "
      },
      "source": "https://raw.githubusercontent.com/dohalloran/phylo-node/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Getting Started",
        "parent_header": [
          "**CONTENTS**"
        ],
        "type": "Text_excerpt",
        "value": "Install the module with: \n\n    npm install phylo-node\n- - - - "
      },
      "source": "https://raw.githubusercontent.com/dohalloran/phylo-node/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "**CONTENTS**"
        ],
        "type": "Text_excerpt",
        "value": "Require module, for example:\n\n    var phyml = require('./phyml')\n    \n__ensure executables are in your $PATH__\n- - - - "
      },
      "source": "https://raw.githubusercontent.com/dohalloran/phylo-node/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Get FASTA Sequences",
        "parent_header": [
          "**CONTENTS**",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Sequence Accession Numbers are collected from the commandline separated by a space (not a comma)\n \nNode uses [NCBI e-utilities](http://www.ncbi.nlm.nih.gov/books/NBK25501/) to download sequences in fastA format:\n    \n    var fetch = require('./fetch_seqs')\n    fetch.fasta(process.argv, fetch.renameFile)\n    \n__Basic usage:__ node app.js inputfile [list of space separated accession numbers]\n\n    node app.js NM_001028053.2 AF032112.1\n    "
      },
      "source": "https://raw.githubusercontent.com/dohalloran/phylo-node/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Get Sequence information in ASN.1 format",
        "parent_header": [
          "**CONTENTS**",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Sequence Accession Numbers are collected as per fastA sequences above using the `genbank_json` method:\n    \n    var fetch = require('./fetch_seqs')\n    fetch.genbank_json(process.argv)\n    \n__Basic usage:__ node app.js inputfile [list of space separated accession numbers]\n\n    node app.js NM_001028053.2 AF032112.1\n"
      },
      "source": "https://raw.githubusercontent.com/dohalloran/phylo-node/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Server",
        "parent_header": [
          "**CONTENTS**",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Create a web server:\n    \n__Basic usage:__ \n\n    node http_server.js\n    Node server listening on port 8080\n    \nPoint browser to `localhost:8080`  \n    \n __Note:__ to create a JBrowse server, it should be downloaded and configured as per the developer guidelines described [here](http://jbrowse.org/install/)  \n"
      },
      "source": "https://raw.githubusercontent.com/dohalloran/phylo-node/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Bowtie2",
        "parent_header": [
          "**CONTENTS**",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Run Bowtie2 program\n\n    var base = require('../../../Wrapper_Core/base-wrap')\n    var bowtie2 = require('./bowtie2')\n    base.call_(process.argv[2], process.argv[3], process.argv, bowtie2.run_)\n\n__Basic usage:__ \nnode app.js index-file -U fastQ-reads\n\n    node app.js ../../../Input_examples/index_elegans/c_elegans -U ../../../Input_examples/reads.fq\n"
      },
      "source": "https://raw.githubusercontent.com/dohalloran/phylo-node/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Trimmomatic",
        "parent_header": [
          "**CONTENTS**",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Run Trimmomatic program\n\n    var base = require('../../../Wrapper_Core/base-wrap')\n    var trimmomatic = require('./trimmomatic')\n    base.call_(process.argv[2], process.argv[3], process.argv, trimmomatic.run_)\n\n__Basic usage:__ \nnode app.js path-to-jar input-file [insert any flags (from flags below)] \n    \n    node app.js /usr/share/java/trimmomatic.jar ../../../Input_examples/reads.fq Output/outsy.fq -phred33 ILLUMINACLIP:TruSeq3-SE:2:30:10 LEADING:3 TRAILING:3 SLIDINGWINDOW:4:15 MINLEN:36\n\n| FLAG                  | DETAILS                                                            | \n| --------------------- |:------------------------------------------------------------------:| \n|    ILLUMINACLIP       |   Cut adapter and other illumina-specific sequences from the read  | \n|    SLIDINGWINDOW      |   Perform a sliding window trimming                                |  \n|    LEADING            |   Cut bases off the start of a read, if below a threshold quality  | \n|     TRAILING          |   Cut bases off the end of a read, if below a threshold quality    | \n|    CROP               |   Cut the read to a specified length                               | \n|    HEADCROP           |   Cut the specified number of bases from the start of the read     | \n|    MINLEN             |   Drop the read if it is below a specified length                  | \n|    TOPHRED33          |   Convert quality scores to Phred-33                               | \n|    TOPHRED64          |   Convert quality scores to Phred-64                               |     \n\n__Note:__ must have Java Runtime environment and [Trimmomatic jar](http://www.usadellab.org/cms/?page=trimmomatic)\n"
      },
      "source": "https://raw.githubusercontent.com/dohalloran/phylo-node/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "PhyML",
        "parent_header": [
          "**CONTENTS**",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Download PhyML using this command\n\n    var phyml = require('./phyml.js')\n    phyml.getphyml()\n\nRun phyml program\n \n    var base = require('../../../Wrapper_Core/base-wrap')\n    var phyml = require('./phyml.js')\n    var outFile = './Output/PhyML.txt'\n    base.call_(process.argv[2], outFile, process.argv, phyml.run_)\n\n\n__Basic usage:__ \n node app.js inputfile [insert any flags (from flags below)]\n\n    node app.js example_PhyML.phy -q -d aa -m JTT -c 4 -a e\n    \n\n| FLAG                  | FIELD                                   | \n| --------------------- |:---------------------------------------:| \n|    -d                 |   data_type                             | \n|    -q                 |                                         |  \n|    -n                 |   nb_data_sets                          | \n|    -b                 |   int                                   | \n|    -m                 |   model                                 | \n|    -f                 |   e | d | 'fA fC fG fT'                 | \n|    -t                 |   ts/tv_ratio                           | \n|    -v                 |   prop_invar                            | \n|    -c                 |   nb_subst_cat                          | \n|    -a                 |   gamma                                 | \n|    -s                 |   move                                  | \n|    -u                 |   user_tree_file                        | \n|    -o                 |   'tlr' | 'tl' | 'tr' | 'l' | 'r' | 'n' | \n|    --rand_start       |                                         | \n|    --n_rand_starts    |   num                                   | \n|    --r_seed           |   num                                   | \n|    --print_site_lnl   |                                         | \n|    --print_trace      |                                         | \n\n"
      },
      "source": "https://raw.githubusercontent.com/dohalloran/phylo-node/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Primer3",
        "parent_header": [
          "**CONTENTS**",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Run Primer3 program\n\n    var base = require('../../../Wrapper_Core/base-wrap')\n    var primer3 = require('./primer3.js')\n    var outFile = './Output/primer3.txt'\n    base.call_(process.argv[2], outFile, process.argv, primer3.run_)\n\n__Basic usage:__\n    node app.js filename [-flags (from table below)]\n\n    node app.js example_p3 -format_output\n\n\n| FLAGS                                 |\n| ------------------------------------- |\n| -format_output                        | \n| -default_version=1|-default_version=2 | \n| -io_version=4                         |  \n| -p3_settings_file= file_path          | \n| -echo_settings_file                   | \n| -strict_tags                          | \n| -output= file_path                    | \n| -error= file_path                     | \n\n\n"
      },
      "source": "https://raw.githubusercontent.com/dohalloran/phylo-node/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "MUSCLE",
        "parent_header": [
          "**CONTENTS**",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Download muscle executable\n\n    var muscle = require('./muscle.js')\n    muscle.getmuscle()\n\nRun MUSCLE program\n\n    var base = require('../../../Wrapper_Core/base-wrap')\n    var muscle = require('./muscle.js')\n    var outFile = './Output/Muscle_Result.aln'\n    base.call_(process.argv[2], outFile, process.argv, muscle.run_)\n\n\n__Basic usage:__\nnode app.js inputfile [insert any flags preceeded by '-' sign and seperated by a space (from flags below)]\n    \n    node app.js DNA.fasta -msf -html\n  \n  \n| FLAG          | FUNCTION                                       | \n| ------------- |:----------------------------------------------:| \n| -diags        | Find diagonals (faster for similar sequences)  | \n| -html         | Write output in HTML format (default FASTA)    | \n| -msf          | Write output in GCG MSF format (default FASTA) | \n| -clw          | Write output in CLUSTALW format (default FASTA)| \n| -clwstrict    | As -clw, with 'CLUSTAL W (1.81)' header        | \n| -quiet        | Do not write progress messages to stderr       | \n\n     "
      },
      "source": "https://raw.githubusercontent.com/dohalloran/phylo-node/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Clustal Omega",
        "parent_header": [
          "**CONTENTS**",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Download Clustal Omega executable\n\n    var clustal_Omega = require('./clustal_Omega.js')\n    clustal_Omega.getclustal()\n\n\nRun Clustal Omega program\n\n    var base = require('../../../Wrapper_Core/base-wrap')\n    var clustal_Omega = require('./clustal_Omega.js')\n    var outFile = './Output/Clustal_Result.aln'\n    base.call_(process.argv[2], outFile, process.argv, clustal_Omega.run_)\n\n\n__Basic usage:__\nnode app.js inputfile [insert any flags preceeded by '--' sign and seperated by a space]\n    \n    node app.js DNA.fasta --outfmt phy\n   \n   \n\n| FLAG                       | FUNCTION                                                                               | \n| -------------------------- |:--------------------------------------------------------------------------------------:| \n| --full                     | Use full distance matrix for guide-tree calculation (slow; mBed is default)            | \n| --full-iter                | Use full distance matrix for guide-tree calculation during iteration (mBed is default) | \n| --cluster-size             | Write output in GCG MSF format (default FASTA)                                         | \n| --use-kimura               | use Kimura distance correction for aligned sequences (default no)                      | \n| --percent-id               | convert distances into percent identities (default no)                                 | \n| --outfmt                   | {a2m=fa[sta],clu[stal],msf,phy[lip],selex,st[ockholm],vie[nna]}                        |\n| --resno                    | in Clustal format print residue numbers (default no)                                   | \n| --wrap                     | number of residues before line-wrap in output                                          | \n| --output-order             | {input-order,tree-order}                                                               | \n| --iter                     | Number of (combined guide tree/HMM) iterations                                         | \n| --max-guidetree-iterations |  Maximum guide tree iterations                                                         | \n| --max-hmm-iterations       | Maximum number of HMM iterations                                                       |\n\n"
      },
      "source": "https://raw.githubusercontent.com/dohalloran/phylo-node/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Kalign",
        "parent_header": [
          "**CONTENTS**",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Run Kalign program\n\n    var base = require('../../../Wrapper_Core/base-wrap')\n    var kalign = require('./kalign.js')\n    var outFile = './Output/kalign_Result.aln'\n    base.call_(process.argv[2], outFile, process.argv, kalign.run_)\n\n\n__Basic usage:__\nnode app.js inputfile [insert any flags preceeded by '-' sign and seperated by a space]\n    \n    node app.js DNA.fasta -gpo -f \n   \n| FLAG     | FUNCTION                                                                      | \n| -------- |:-----------------------------------------------------------------------------:| \n| -gpo     | Gap open penalty (default 6.0).                                               | \n| -gpe     | Gap extension penalty (default 0.9).                                          | \n| -p       | Wu-Manber algorithm used in both distance calculation and dynamic programming | \n| -w       | Wu-Manber algorithm not used at all                                           | \n| -f       |  fast heuristic alignment                                                     | \n| -q       |  'quiet' - no messages are sent to standard error                             |\n\n"
      },
      "source": "https://raw.githubusercontent.com/dohalloran/phylo-node/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "PAL2NAL",
        "parent_header": [
          "**CONTENTS**",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Run PAL2NAL program\n\n    var base = require('../../../Wrapper_Core/base-wrap')\n    var pal2nal = require('./pal2nal.js')\n    var outFile = './Output/result.codon'\n    base.call_(process.argv[2], outFile, process.argv, pal2nal.run_)\n\n\n__Basic usage:__\nnode app.js input.aln input.fasta [insert any flags from below]\n    \n    node app.js DNA.aln DNA.fasta -nomismatch \n  \n  \n| FLAG        | FUNCTION                                                                        | \n| ----------- |:-------------------------------------------------------------------------------:| \n| -h          | show help                                                                       | \n| -blockonly  | Show only user specified blocks                                                 | \n| -output     | (clustal,paml,fasta,codon) Output format, default = clustal                     | \n| -nogap      |  remove columns with gaps and inframe stop codons                               | \n| -nomismatch | remove mismatched codons (mismatch between pep and cDNA) from the output        | \n| -codontable | 1 (default),2,3,4,5,6,9,10,11,12,13,14,15,16,21,22,23   NCBI GenBank codon table  | \n| -html       | HTML output (only for the web server)                                           | \n| -nostderr   | No STDERR messages (only for the web server)                                    | \n\n\n__Note:__ must have Perl installed \n\n"
      },
      "source": "https://raw.githubusercontent.com/dohalloran/phylo-node/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Slr",
        "parent_header": [
          "**CONTENTS**",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Run Slr program\n\n    var base = require('../../../Wrapper_Core/base-wrap')\n    var Slr = require('./Slr.js')\n    var outFile = './Output/Slr_Results.txt'\n    base.call_(process.argv[2], outFile, process.argv, Slr.run_)\n\n\n__Basic usage:__\nnode app.js input.paml input.trees [insert any flags from below]\n    \n    node app.js bglobin.paml bglobin.trees timemem 1  \n    \n| FLAG            | FUNCTION                                               | \n| ----------------|:------------------------------------------------------:| \n| -reoptimise     | 0 (no), 1(yes), 2(set branch lengths to random values) | \n| -kappa          | value for kappa                                        | \n| -omega          | Value for omega (dN/dS)                                | \n| -branopt        | 0: fixed, 1: optimise, 2: proportional                 | \n| -codonf         | 0: F61/F60  1: F3x4 2: F1x4                            | \n| -freqtype       | 0, 1, 2, 3                                             | \n| -positive_only  | 0(no) or 1(yes)                                        | \n| -nucleof        | 0: none, 1: adjust by a constant N_{ab}.               | \n| -aminof         | 0(constant), 1, 2                                      | \n| -freqtype       | 0, 1, 2, 3                                             | \n| -timemem        | summary of real time and CPU time used 1:yes 0:no      | \n| -skipsitewise   | Skip sitewise estimation of omega                      | \n\n"
      },
      "source": "https://raw.githubusercontent.com/dohalloran/phylo-node/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Codeml",
        "parent_header": [
          "**CONTENTS**",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Run Codeml program\n\n    var base = require('../../../Wrapper_Core/base-wrap')\n    var codeml = require('./codeml.js')\n    var outFile = './Output/result.codeml' \n    base.call_(process.argv[2], outFile, process.argv, codeml.run_)\n\n\n__Basic usage:__\nnode app.js input.cnt [all parameters set by cnt file]\n    \n    node app.js test.cnt  \n    \n"
      },
      "source": "https://raw.githubusercontent.com/dohalloran/phylo-node/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "ProtTest3",
        "parent_header": [
          "**CONTENTS**",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Run ProtTest3 program\n\n    var base = require('../../../Wrapper_Core/base-wrap')\n    var prottest = require('./prottest')\n    base.call_(process.argv[2], process.argv[3], process.argv, prottest.run_)\n\n__Basic usage:__ \nnode app.js path-to-jar input-file [insert any flags (from flags below)] \n\n    node app.js /path-to-jar/prottest-3.4.2.jar alignment -all-matrices -all-distributions -o example.txt\n\n| FLAG                  | DETAILS                                           | \n| --------------------- |:-------------------------------------------------:| \n|    -i                 |            alignment_filename                     | \n|    -t                 |            tree_filename (optional)               |  \n|    -o                 |            output_filename (optional)             | \n|     -[matrix]         |            Include matrix (Amino-acid)            | \n|    -I                 |    models with a proportion of invariable sites   | \n|    -G                 |   rate variation among sites and categories       | \n|    -IG                |           models with both +I and +G              | \n|    -all-distributions |  rate variation among sites, categories and both  | \n|    -ncat              |           number of categories                    |     \n|    -F                 |   models with empirical frequency estimation      | \n|    -AIC               |          Akaike Information Criterion             | \n|    -BIC               |          Bayesian Information Criterion           | \n|    -AICC              |       Corrected Akaike Information Criterion      | \n|    -DT                |          Decision Theory Criterion                | \n|    -all               |          7-framework comparison table             | \n|    -S                 |       Optimization strategy mode: [default: 0]    | \n|    -s                 |          Tree search operation for ML search      | \n|    -t1                |          Display best-model's newick tree         | \n|    -t2                |          Display best-model's ASCII tree          | \n|    -tc                |  Display consensus tree with specified threshold  | \n|    -threads           |       Number of threads requested to compute      | \n|    -verbose           |       Verbose mode [default: false]               | \n\n\n__Note:__ must have Java Runtime environment and [ProtTest3 jar](https://github.com/ddarriba/prottest3)\n\n"
      },
      "source": "https://raw.githubusercontent.com/dohalloran/phylo-node/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "jModelTest2",
        "parent_header": [
          "**CONTENTS**",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Run jModelTest2 program\n\n    var base = require('../../../Wrapper_Core/base-wrap')\n    var jmodeltest2 = require('./jmodeltest2')\n    base.call_(process.argv[2], process.argv[3], process.argv, jmodeltest2.run_)\n\n__Basic usage:__ \nnode app.js path-to-jar input-file -o output-file [insert any flags (from flags below)] \n\n    node app.js /path-to-jar/jModelTest.jar aP6.fas -o Output/Results.txt -f -i -g 4 -s 11 -AIC -a\n    \n\n| FLAG              | DETAILS                                                                | \n| ------------------|:----------------------------------------------------------------------:| \n|    -a             |           Estimate model-averaged phylogeny for each active criterion  | \n|    -t             |           Base tree for likelihood calculations (e.g., -t BIONJ)       |  \n|    -o             |           outputFile                                                   | \n|    -i             |           Include models with a proportion invariable sites            | \n|    -machinesfile  |           Gets the processors per host from a machines file            | \n|    -g             |           numberOfRateCategories                                       | \n|    -getPhylip     |           Converts the input file into phylip format and exits         | \n|    -G             |           threshold                                                    |     \n|    -h             |           confidenceInterval                                           | \n|    -AIC           |           Akaike Information Criterion                                 | \n|    -BIC           |           Bayesian Information Criterion                               | \n|    -AICc          |           Corrected Akaike Information Criterion                       | \n|    -hLRT          |           Perform hierarchical likelihood ratio tests                  | \n|    -DT            |           Calculate the decision theory criterion                      | \n|    -f             |           Include models with unequals base frecuencies                | \n|    -H             |           Information criterion for clustering search                  | \n|    -n             |           logSuffix                                                    | \n|    -O             |           Sets the hypothesis order for the hLRTs                      | \n|    -p             |           Calculate the parameter importances                          | \n|    -tr            |           Number of threads requested to compute                       | \n|    -v             |           Do model averaging and parameter importances                 |\n|    -s             |           Sets the number of substitution schemes                      |\n|    -u             |           treefile                                                     | \n|    -uLNL          |           Calculate delta AIC,AICc,BIC against unconstrained likelihood| \n|    -w             |           Prints out the PAUP block                                    | \n|    -z             |           Strict consensus type for model-averaged phylogeny           |\n\n\n__Note:__ must have Java Runtime environment and [jModelTest2 jar](https://github.com/ddarriba/jmodeltest2)\n"
      },
      "source": "https://raw.githubusercontent.com/dohalloran/phylo-node/master/README.md",
      "technique": "header_analysis"
    }
  ]
}