{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/aaschaffer/vecscreen_plus_taxonomy"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2017-01-18T16:28:18Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-12-21T18:42:29Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Run vecscreen and interpret and annotate output matches taking taxonomy into account"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.8174597424631184,
      "result": {
        "original_header": "The 4 lines to add to your .cshrc file:",
        "type": "Text_excerpt",
        "value": "This command is contained in the file\n$VECPLUSDIR/scripts/sample_run.sh. In fact, it is better to just run\nthat shell script file, because it will also check that the expected\noutput is correct: \n"
      },
      "source": "https://raw.githubusercontent.com/aaschaffer/vecscreen_plus_taxonomy/master/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9029192585621989,
      "result": {
        "original_header": "Default output format: 5 columns",
        "type": "Text_excerpt",
        "value": "Column 1: Accession of query\nColumn 2: Genus of query if known, or 1 otherwise\nColumn 3: Matching vector, starting with uv|\nColumn 4: One end of the alignment in the vector\nColumn 5: The other end of the alignment in the vector \nThis 5 column format was agreed on for internal NCBI usage in JIRA\nticket SM-187. \n"
      },
      "source": "https://raw.githubusercontent.com/aaschaffer/vecscreen_plus_taxonomy/master/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9416026445645104,
      "result": {
        "original_header": "Verbose output format (enabled with --verbose option): 11 columns",
        "type": "Text_excerpt",
        "value": "Column 1:  Accession of query\nColumn 2:  Genus of query if known, or 1 otherwise\nColumn 3:  Species of query if known, or 1 otherwise\nColumn 4:  Lower end of the alignment in the query\nColumn 5:  Upper end of the alignment in the query\nColumn 6:  Matching vector, starting with uv|\nColumn 7:  One end of the alignment in the vector\nColumn 8:  The other end of the alignment in the vector\nColumn 9:  The strength of this vecscreen match \nColumn 10: The strength of the strongest vecscreen match for this query\nColumn 11: Whether there is any dangling part (called \"Suspect\" by\n           vecscreen) at either end of the query \nA dangling part is an unmatched segment of <= 25 nucleotides. \nThis alternative 11-column format has been shown to be useful for some\npurposes, such as correcting vector-contaminated sequences in GenBank.\nAnother circumstance in which the 11-column format\nis essential is if there is an input sequence that has a known species\n(not 1 in column 3) but do not have a known genus (1 in column 2). \nThe compare_vector_matches_w_taxa.pl script takes as input the\none-line per-sequence output file from\nfrom_vecscreen_to_summary.pl. That input file must be the 11-column\noutput of from_vecscreen_to_summary.pl that is created when the\n--verbose option is used for that script. \nHere is the example usage of compare_vector_matches_wtaxa.pl: \nColumn 12: the classification of the match\nColumn 13: Most pertinent taxid of the vector interval \nColumn 14: Lowest common ancestor of column 2 and column 13 \n* Please email alejandro.schaffer@nih.gov if you find any examples of\nvector sources that should be propagated to a higher level of taxonomy. \n2) Parse the vecscreen output into two tab-delimited files for\n   internal and terminal matches by calling parse_vecscreen.pl. \ncompare_vector_matches_wtaxa.pl uses the six sets of data files listed\nto classify each vecscreen match.  This program is separate because an\nin-house usage needed somewhat different I/O specifications to fit\ninto an existing software framework. \n"
      },
      "source": "https://raw.githubusercontent.com/aaschaffer/vecscreen_plus_taxonomy/master/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9347627600465511,
      "result": {
        "original_header": "SUCCESS",
        "type": "Text_excerpt",
        "value": "Several executable files are required for from_vecscreen_to_summary.pl\nand compare_vector_matches_wtaxa.pl to work. Two of these executables\nwere developed by others and must be downloaded and installed\nseparately outside of NCBI. All of these files are included in the\nvecscreen_plus_taxonomy github repository, so you do not need to\ncreate or move any files in order to get from_vecscreen_to_summary.pl\nto work. After cloning the git repository, these files will be in the\nPATH/TO/VEC/PLUS/scripts directory. \n1. vecscreen and associated UniVec database\n   Identifies vector contamination in input sequences. \n   For users outside NCBI, we provide a gzipped executable of vecscreen\n   for 64-bit Linux computers in\n   scripts/vecscreen.gz\n   Run\n   gunzip vecscreen.gz\n   chmod +x vecscreen \n   and make sure that vecscreen is on the execution path (which it should\n   be if you followed the steps above in SETTING UP ENVIRONMENT VARIABLES) \n   vecscreen requires that the BLASTable database UniVec be\n   accessible.  This means that these files must be in a directory\n   that is contained in your $BLASTDB environment variable. If you\n   followed the instructions in the SETTING UP ENVIRONMENT VARIABLES\n   section above, you have already added the appropriate directory\n   (PATH/TO/VEC/PLUS/univec-files) to $BLASTDB.  The UniVec database\n   is represented (for purposes of vecscreen) in the three files: \n2. srcchk \n   Determines the taxonomy of input sequences, with respect the NCBI\n   taxonomy tree. \n   For users outside NCBI, we provide a gzipped executable of srcchk\n   for 64-bit Linux computers in\n   scripts/srcchk.gz\n   Run\n   gunzip srcchk.gz\n   chmod +x srcchk \n   and make sure that srcchk is on the execution path (which it should\n   be if you followed the steps above in SETTING UP ENVIRONMENT VARIABLES) \n A. NO_DATA:           there is no data about the source of the vector\n                       segment in the match. \n B. TRUE_ARTIFICIAL:   the vector segment matched is an ARTIFICIAL\n                       sequence and hence the match is TRUE\n                       contamination. \n C. TRUE_ARTIFICIAL_MICROSAT: the vector segment matched is an\n                              ARTIFICIAL sequence and hence the match\n                              is TRUE contamination and the vector\n                              contains a microsatellite. \n D. FALSE_AMR:         the query sequence is bacterial; the vector\n                       segment matches a known sequence that confers\n                       anti-microbial resistance and these can often\n                       be transferred horizontally between bacteria\n                       that may be taxonomically distant. \n E. FALSE_BIOLOGICAL:  the subject's biological origin is known and\n                       its taxid is deemed close enough to that of the\n                       query, so that the match is not contamination. \n F. TRUE_BIOLOGICAL :  the query and the matching subject originate from\n                       taxa that are too far apart for the vector to occur\n                       plausibly in the query. \n G. TRUE_MICROSAT :    the query and the matching subject originate from\n                       taxa that are too far apart for the vector to\n                       occur plausibly in the query, and the vector\n                       contains a microsatellite. \n H. LIKE_FALSE_BACTERIAL: the query is from uncultured bacteria and\n                          the matching subject isfrom bacteria \nAdditionally, several sets of data files are required for\ncompare_vector_matches_wtaxa.pl to work. These were all included with\nthis software distribution. After cloning the github repository, these\nfiles will be in the PATH/TO/VEC/PLUS/info-files directory. \n1. taxonomy_tree_wlevels.txt \n   A compact form of NCBI's taxonomy tree with added fields to\n   indicate for each taxid, its level and whether it is a descendant\n   of the node Bacteria.  Descendants of Bacteria are treated\n   specially because many sequences are now assigned to the generic\n   taxid \"Uncultured bacteria\" \n2. UniVec10_vs_amr_distinct_intervals.txt\n   Intervals of vectors from UniVec version 10 that overlap with known\n   antimicrobial resistance (AMR) regions. \n3. artificial_intervals.txt, artificial_whole_sequences.txt\n   Vector intervals or whole vectors that were generated in a\n   laboratory, not from a biological source. Many of these are known\n   also as \"adaptors\". \n   The last listed file genus_level_exclusions.txt describes the\n   biological sources of vector segments at genus level. The other\n   files summarize in silico sequence analysis that shows that some\n   vector segments are conserved at seven taxonomic levels higher than\n   genus. In these files, as well as artificial_intervals.txt:\n   Column 1 is the vector segment using UniVec notation\n   Columns 2 and 3 are the start and end of the interval\n   Column 4 is the taxid\n   Column 5 is either the Latin or English name for the taxid \n5. Microsatellite_vectors.txt a list of vectors that contain\n   microsatellites; Sequences that have known microsatellites and\n   match to these vectors are classified specially as TRUE_MICROSAT or\n   TRUE_ARTIFICAL_MICROSAT \nAddtionally, the files in the 'test-files' directory created when\ncloning the github repository all used by the\nscripts/test_vector_plus_taxonomy.pl script for testing that your\ninstallation and setup is working properly. \nNCBI's taxonomy is available from directory\nftp://ftp.ncbi.nlm.nih.gov/pub/taxonomy/. \nRunning assign_levels_to_taxonomy.pl will add\n-- a fourth column which is the level in the taxonomy tree, where\n   the root has level 1 and each child taxid has a level one greater\n   than the level of its parent taxid;\n-- a fifth column that is 1 if the node is a descendant of\n   Bacteria and 0 if not. \nThe purpose of this program is to solve the following taxonomy-related problem.\nGiven as input one or more accessions, what are the taxid ancestors of those\naccessions at some specified taxonomy level, such as order or class. \nThe input has three columns: 1) accession 2) taxid of accession\ntypically, at species level 3) taxonomy name of the taxid in column 2\nThe output repeats the input columns and adds a fourth column with the\ntaxid of the ancestor at the specified level.  If there is no ancestor\nat the specified level, or if the taxid is not recognized, then the\nvalue 1 is printed instead because 1 is the root of the taxonomy tree. \nfind_taxonomy_ancestors.pl is not currently used within\nVecScreen_plus_taxonomy, but is used in a related project. \n*********************************************************\n**COMPILING vecscreen AND srcchk ON LINUX, FROM SCRATCH**\n********************************************************* \nWe provide gzipped executables of vecscreen and srcchk for 64-bit Linux.\nThese have been tested on two non-NCBI computers, but it is not possible\nto prove that they work on all 64-bit Linux computers that are sufficiently\nup to date. In this context, sufficiently up to date means that all libraries\nassociated with gcc version 4.8 or higher are installed. The executables\nprovided were compiled with gcc version 4.91 because that was the least\nrecent version of gcc available among the versions >= 4.8. \nsrcchk and vecscreen are part of the NCBI C++ toolkit, which can\nbe downloaded at the time of writing from \nThe current version is 18.0.0, but the version may increase in the future.\nModify the above address as necessary to get the current version.\nAt this time, the retrieved file will be named ncbi_cxx--18_0_0.tar.gz.\nIf the version retrieved is higher, replace all occurrences of\n18_0_0 below accordingly. \nIn case the user wants to compile vecscreen and srcchk from scratch,\nwe found that the following sets of steps works on Linux, but we\ncaution that compiling the NCBI C++ toolkit is a moving target and\ninstructions may need to change in the future. Let the token <GCC\nversion> represent the gcc version number without the decimal\npoints. For example, on the computer we used, the token would be 491. \nThe commands below will create files that collectively take about 25Gb\nof disk space (as of current version). After the build is complete,\nyou can copy only the srcchk and vecscreen binaries from GCC<GCC\nversion>-DebugMT64/bin to PATH/TO/VEC/PLUS, or anywhere else you want,\nand delete the rest of the files, if desired. \n"
      },
      "source": "https://raw.githubusercontent.com/aaschaffer/vecscreen_plus_taxonomy/master/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9369842505455653,
      "result": {
        "type": "Text_excerpt",
        "value": "There is a related repository  \nOutline of this file: \nBACKGROUND\nSETTING UP ENVIRONMENT VARIABLES\nSAMPLE RUN, USAGE AND OUTPUT OF from_vecscreen_to_summary.pl\nSAMPLE RUN, USAGE AND OUTPUT OF compare_vector_matches_w_taxa.pl\nMETHODS\nTEST SCRIPT\nRELEVANT FILES\nCREATING THE TAXONOMY FILE\nAN ADDITIONAL TAXONOMY HELPER PROGRAM\nCOMPILING vecscreen AND srcchk ON LINUX, FROM SCRATCH \nvecscreen is the established NCBI program to identify matches between\n(query) sequences and (subject) vectors in UniVec. These matches may\nrepresent (true) vector contamination, but experience has shown that\nthere can be many false positives.  A primary reason for false\npositives is that the query and the matching subject segment come from\nthe same genus or closely related genera. Therefore, knowing the genus\nof the query sequence is helpful to interpret the output.  For what\nfollows below, it is relevant that vecscreen distinguishes matches by\ntwo characteristics: \n1) Location: Internal or Terminal \nA match is Terminal if and only if it includes a nucleotide within 25\npositions of either end of the query; otherwise, the match is Internal. \n2) Strength: Strong, Moderate, or Weak\nA match is Strong if either: it is Terminal with a raw score of at\nleast 24 or it is Internal with a raw score of at least 30. \nA match is Moderate if either: it is Terminal with a raw score in the\ninterval [19,23] or Internal with a raw score in the interval [25,29]. \nA match is Weak if it is Terminal with a raw score in the interval\n[16,18] or Internal with a raw score in the interval [23,24]. \nvecscreen also reports Internal alignments with raw scores in the\nrange [16, 22] when there is also a reportable match for the same\n(query, vector) pair. The score range [16,22] is below the Weak range\nmatch for Internal matches. In the script\nfrom_vecscreen_to_summary.pl, these below-Weak Internal matches are\nassigned the level None. \nMore information about vecscreen can be found at\nhttps://www.ncbi.nlm.nih.gov/tools/vecscreen/about/\nIn this document, 'vecscreen' refers to the command-line version, not\nthe Web page version. \nThe programs and data in this vecscreen_plus_taxonomy repository are\nfor prospective analysis of nucleotide sequences, especially\nsequences that one might want to submit to GenBank. \ndoes a preprocessing step relevant to only retrospective analysis of\nsequences already in a database set up for BLAST, such as the non-redundant\n(nr) database in GenBank. In retrospective analysis, one wants to start\nby searching the database for sequences that may be expected to have vecscreen\nmatches, so as to avoid running vecscreen on the entire database.  \n"
      },
      "source": "https://raw.githubusercontent.com/aaschaffer/vecscreen_plus_taxonomy/master/README",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/aaschaffer/vecscreen_plus_taxonomy/wiki"
      },
      "source": "https://raw.githubusercontent.com/aaschaffer/vecscreen_plus_taxonomy/master/README",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/aaschaffer/vecscreen_plus_taxonomy/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/aaschaffer/vecscreen_plus_taxonomy/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "aaschaffer/vecscreen_plus_taxonomy"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/aaschaffer/vecscreen_plus_taxonomy/master/README",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/aaschaffer/vecscreen_plus_taxonomy/master/scripts/sample_run.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/aaschaffer/vecscreen_plus_taxonomy/master/scripts/sample_compare_run.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 0.965068200560178,
      "result": {
        "original_header": "The 4 lines to add to your .cshrc file:",
        "type": "Text_excerpt",
        "value": "setenv VECPLUSDIR \"PATH/TO/VEC/PLUS\"\nsetenv PERL5LIB \"$VECPLUSDIR\":\"$PERL5LIB\"\nsetenv PATH \"$VECPLUSDIR/scripts\":\"$PATH\"\nsetenv BLASTDB \"$VECPLUSDIR/univec-files\":\"$BLASTDB\"\n----------- \nThen, after adding those 4 lines, execute this command:\nsource ~/.bashrc\nOR\nsource ~/.cshrc \nIf PERL5LIB was not already defined (you will know, if you get an error\nmessage when you run the above 'source' command): \nuse instead\nexport PERL5LIB=\"$VECPLUSDIR\"\nfor .bashrc, OR\nsetenv PERL5LIB \"$VECPLUSDIR\"\nfor .cshrc.\nat line 2 out of 4.  \nSimilarly, if BLASTDB was not already defined (you will know, if you\nget an error message when you run the above 'source' command): \nuse instead\nexport BLASTDB=\"$VECPLUSDIR/univec-files\"\nfor .bashrc, OR\nsetenv BLASTDB \"$VECPLUSDIR/univec-files\"\nfor .cshrc.\nat line 4 out of 4.  \nTo check that your environment variables are properly set up do the\nfollowing four commands:\necho $VECPLUSDIR\necho $PERL5LIB\necho $PATH\necho $BLASTDB \nThe first command should return only:\nPATH/TO/VEC/PLUS \nThe second echo command should return a potentially longer\nstring that begins with the same path:\nPATH/TO/VEC/PLUS \nThe third echo command should return a (potentially longer) string\nthat begins with:\nPATH/TO/VEC/PLUS/scripts \nThe fourth echo command should return a (potentially longer) string\nthat begins with:\nPATH/TO/VEC/PLUS/univec-files \nIf that is not the case, please email Alejandro Schaffer\n(alejandro.schaffer@nih.gov). If you do see the expected output, the\nfollowing sample run should work. \nFinally, you will need to gunzip two exectuable files in\nPATH/TO/VEC/PLUS/scripts, and make the files executable (in case they\nare not already executable). Perform the following commands: \n> cd $VECPLUSDIR/scripts\n> gunzip vecscreen.gz\n> gunzip srcchk.gz\n> chmod +x vecscreen\n> chmod +x srcchk \nAfter this, you should be able to successfully complete the sample\nruns below, as well as the test script in the TEST SCRIPT section\nbelow.  \nHere is an example command that will run from_vecscreen_to_summary.pl\non the fasta file myseqs.fa using the taxonomy file included in \nPATH/TO/VEC/PLUS/info-files/taxonomy_tree_wlevels.txt.  \n> from_vecscreen_to_summary.pl --output_root mytest --input_fasta $VECPLUSDIR/test-files/test.input_sequence_file.fa --input_taxa $VECPLUSDIR/info-files/taxonomy_tree_wlevels.txt --combine_output --verbose > mytest.out \n> sh $VECPLUSDIR/scripts/sample_run.sh\n \n"
      },
      "source": "https://raw.githubusercontent.com/aaschaffer/vecscreen_plus_taxonomy/master/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9943315157131422,
      "result": {
        "original_header": "Verbose output format (enabled with --verbose option): 11 columns",
        "type": "Text_excerpt",
        "value": "compare_vector_matches_wtaxa.pl \\ \n--input_summary $VECPLUSDIR/test-files/test.sample_input_final_step.txt \\\n--input_taxa $VECPLUSDIR/info-files/taxonomy_tree_wlevels.txt \\\n--input_artificial_vectors $VECPLUSDIR/info-files/artificial_whole_sequences.txt \\\n--input_artificial_segments $VECPLUSDIR/info-files/artificial_intervals.txt \\\n--input_univec_sources $VECPLUSDIR/info-files/biological_exclusions.txt \\\n--input_amr $VECPLUSDIR/info-files/UniVec10_vs_amr_distinct_intervals.txt \\\n--input_sequences $VECPLUSDIR/test-files/test.sample_candidates.fa \\\n--outfile my_output_final_step.txt \n> sh $VECPLUSDIR/scripts/sample_compare_run.sh \nWhen you run the above 'sh' command, you should see output like this:\n--\ncomparing expected output test-files/expected.output_final_step.txt to observed output my_outputfinal_step.txt\nSUCCESS: Files are identical\n-- \nAfter running this compare_vector_matches_wtaxa.pl command, the file\n'my_output_final_step.txt' will include the output of\ncompare_vector_matches_wtaxa.pl which is the file\ntest-files/sample_input_final_step.txt with 3 additional columns: \n\nIn some cases, the classification TRUE_BIOLOGICAL may be too bold and\nthis can be seen because Column 14 is not much higher up the taxonomy\ntree than column 13.  When this happens, the conservation of the\nvector source needs to be propagated from genus_level_exclusions.txt\nto one of the higher-level files*:\n   superkingdom_level_exclusions.txt\n   kingdom_level_exclusions.txt\n   phylum_level_exclusions.txt\n   class_level_exclusions.txt\n   order_level_exclusions.txt\n   family_level_exclusions.txt\n   tribe_level_exclusions.txt \n***************\n**TEST SCRIPT**\n***************\nThere is a 'test' script included in the vecscreen_plus_taxonomy\ndistribution that you should run to make sure that everything is set\nup correctly, in addition to doing the two example sample runs above. \nTo run the test script, execute the following command:\n> $VECPLUSDIR/scripts/test_vecscreen_plus_taxonomy_scripts.pl\n \n"
      },
      "source": "https://raw.githubusercontent.com/aaschaffer/vecscreen_plus_taxonomy/master/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9982803199900246,
      "result": {
        "original_header": "You should see the following output:",
        "type": "Text_excerpt",
        "value": "Checking that required input files exist ... done.\nTesting combine_summaries.pl             ... done.\nTesting add_taxonomy.pl                  ... done.\nTesting from_vecscreen_to_summary.pl     ... done.\nTesting compare_vector_matches_wtaxa.pl  ... done. \n"
      },
      "source": "https://raw.githubusercontent.com/aaschaffer/vecscreen_plus_taxonomy/master/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.978855332645555,
      "result": {
        "original_header": "SUCCESS",
        "type": "Text_excerpt",
        "value": "If you do not see this output, make sure that you've set up your\nenvironment variable $VECPLUSDIR correctly as explained above in the\n'SETTING UP ENVIRONMENT VARIABLES' section. If you still have\nproblems, email alejandro.schaffer@nih.gov. \nSeveral executable files are required for from_vecscreen_to_summary.pl\nand compare_vector_matches_wtaxa.pl to work. Two of these executables\nwere developed by others and must be downloaded and installed\nseparately outside of NCBI. All of these files are included in the\nvecscreen_plus_taxonomy github repository, so you do not need to\ncreate or move any files in order to get from_vecscreen_to_summary.pl\nto work. After cloning the git repository, these files will be in the\nPATH/TO/VEC/PLUS/scripts directory. \n   At NCBI, to add this directory to your path execute this command: \n   > ln -s /netopt/ncbi_tools64/c++.stable/ReleaseMT/bin/vecscreen . \n   For users outside NCBI, we provide a gzipped executable of vecscreen\n   for 64-bit Linux computers in\n   scripts/vecscreen.gz\n   Run\n   gunzip vecscreen.gz\n   chmod +x vecscreen \n   and make sure that vecscreen is on the execution path (which it should\n   be if you followed the steps above in SETTING UP ENVIRONMENT VARIABLES) \n   vecscreen requires that the BLASTable database UniVec be\n   accessible.  This means that these files must be in a directory\n   that is contained in your $BLASTDB environment variable. If you\n   followed the instructions in the SETTING UP ENVIRONMENT VARIABLES\n   section above, you have already added the appropriate directory\n   (PATH/TO/VEC/PLUS/univec-files) to $BLASTDB.  The UniVec database\n   is represented (for purposes of vecscreen) in the three files: \n   See also the section COMPILING vecscreen AND srcchk ON LINUX, FROM SCRATCH \n   At NCBI, to add this directory to your path execute this command:\n   > ln -s /netopt/ncbi_tools64/bin/srcchk . \n   For users outside NCBI, we provide a gzipped executable of srcchk\n   for 64-bit Linux computers in\n   scripts/srcchk.gz\n   Run\n   gunzip srcchk.gz\n   chmod +x srcchk \n   and make sure that srcchk is on the execution path (which it should\n   be if you followed the steps above in SETTING UP ENVIRONMENT VARIABLES) \n2. UniVec10_vs_amr_distinct_intervals.txt\n   Intervals of vectors from UniVec version 10 that overlap with known\n   antimicrobial resistance (AMR) regions. \n4. biological_exclusions.txt (which lists the following files)\n   superkingdom_level_exclusions.txt\n   kingdom_level_exclusions.txt\n   phylum_level_exclusions.txt\n   class_level_exclusions.txt\n   order_level_exclusions.txt\n   family_level_exclusions.txt\n   tribe_level_exclusions.txt\n   genus_level_exclusions.txt \nAddtionally, the files in the 'test-files' directory created when\ncloning the github repository all used by the\nscripts/test_vector_plus_taxonomy.pl script for testing that your\ninstallation and setup is working properly. \nNCBI's taxonomy is available from directory\nftp://ftp.ncbi.nlm.nih.gov/pub/taxonomy/. \nWe start from any of the files: \ntaxdmp.tar.Z \ntaxdump.tar.gz \ntaxdmp.zip\nfrom which one can extract the file nodes.dmp. \nThen execute the following commands: \n> cut -f1,3,5 nodes.dmp > taxonomy_tree.txt\n> assign_levels_to_taxonomy.pl --input_taxa taxonomy_tree.txt --outfile taxonomy_tree_wlevels.txt \n*********************************************************\n**COMPILING vecscreen AND srcchk ON LINUX, FROM SCRATCH**\n********************************************************* \nWe provide gzipped executables of vecscreen and srcchk for 64-bit Linux.\nThese have been tested on two non-NCBI computers, but it is not possible\nto prove that they work on all 64-bit Linux computers that are sufficiently\nup to date. In this context, sufficiently up to date means that all libraries\nassociated with gcc version 4.8 or higher are installed. The executables\nprovided were compiled with gcc version 4.91 because that was the least\nrecent version of gcc available among the versions >= 4.8. \nftp://ftp.ncbi.nih.gov/toolbox/ncbi_tools++/CURRENT/ncbi_cxx--18_0_0.tar.gz \nThe current version is 18.0.0, but the version may increase in the future.\nModify the above address as necessary to get the current version.\nAt this time, the retrieved file will be named ncbi_cxx--18_0_0.tar.gz.\nIf the version retrieved is higher, replace all occurrences of\n18_0_0 below accordingly. \nRun\ngunzip ncbi_cxx--18_0_0.tar.gz\ntar xvf ncbi_cxx--18_0_0.tar\ncd ncbi_cxx--18_0_0 \nIn case the user wants to compile vecscreen and srcchk from scratch,\nwe found that the following sets of steps works on Linux, but we\ncaution that compiling the NCBI C++ toolkit is a moving target and\ninstructions may need to change in the future. Let the token <GCC\nversion> represent the gcc version number without the decimal\npoints. For example, on the computer we used, the token would be 491. \nAfter the following four commands are run, the executables for srcchk\nand vecscreen should be found in the subirectory (of ncbi_cxx--18_0_0)\ncalled GCC<GCC version>-DebugMT64/bin.  \nThe commands below will create files that collectively take about 25Gb\nof disk space (as of current version). After the build is complete,\nyou can copy only the srcchk and vecscreen binaries from GCC<GCC\nversion>-DebugMT64/bin to PATH/TO/VEC/PLUS, or anywhere else you want,\nand delete the rest of the files, if desired. \n1) ./configure --without-gui --without-internal --without-boost --with-bin-release --with-flat-makefile \n2) cd GCC<GCC version>-Debug \n3) make -C build -f Makefile.flat all_files \n4) make -C build -f Makefile.flat app/ \n"
      },
      "source": "https://raw.githubusercontent.com/aaschaffer/vecscreen_plus_taxonomy/master/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9707137827769206,
      "result": {
        "type": "Text_excerpt",
        "value": "github: https://github.com/aaschaffer/vecscreen_plus_taxonomy.git\nVersion: 0.17\nDecember 2020\n------------------\nREADME \ngithub: https://github.com/aaschaffer/generate_vecscreen_candidates.git \n1) Location: Internal or Terminal \nA match is Terminal if and only if it includes a nucleotide within 25\npositions of either end of the query; otherwise, the match is Internal. \nA match is Moderate if either: it is Terminal with a raw score in the\ninterval [19,23] or Internal with a raw score in the interval [25,29]. \nA match is Weak if it is Terminal with a raw score in the interval\n[16,18] or Internal with a raw score in the interval [23,24]. \nMore information about vecscreen can be found at\nhttps://www.ncbi.nlm.nih.gov/tools/vecscreen/about/\nIn this document, 'vecscreen' refers to the command-line version, not\nthe Web page version. \n************************************\n**SETTING UP ENVIRONMENT VARIABLES**\n************************************ \nBefore you can run from_vecscreen_to_summary.pl or\ncompare_vector_matches_wtaxa.pl you will need to update some of your\nenvironment variables. To do this, add the following four lines to\nyour .bashrc file (if you use bash shell) or .cshrc file (if you use C\nshell or tcsh). The .bashrc or .cshrc file will be in your home\ndirectory. To determine what shell you use type 'echo $SHELL', if it\nreturns '/bin/bash', then update your .bashrc file, if it returns\n'/bin/csh' or '/bin/tcsh' then update your .cshrc file. \nThe 4 lines to add to your .bashrc file, ***but make sure that you\nreplace PATH/TO/VEC/PLUS with the directory path to the directory\ncreated when you cloned the vecscreen_plus_taxonomy github repository. \n-----------\nexport VECPLUSDIR=\"PATH/TO/VEC/PLUS\"\nexport PERL5LIB=\"$VECPLUSDIR:$PERL5LIB\"\nexport PATH=\"$VECPLUSDIR/scripts:$PATH\"\nexport BLASTDB=\"$VECPLUSDIR/univec-files:$BLASTDB\"\n----------- \n"
      },
      "source": "https://raw.githubusercontent.com/aaschaffer/vecscreen_plus_taxonomy/master/README",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8801963219645135,
      "result": {
        "original_header": "The 4 lines to add to your .cshrc file:",
        "type": "Text_excerpt",
        "value": "Here is an example command that will run from_vecscreen_to_summary.pl\non the fasta file myseqs.fa using the taxonomy file included in \nPATH/TO/VEC/PLUS/info-files/taxonomy_tree_wlevels.txt.  \n> from_vecscreen_to_summary.pl --output_root mytest --input_fasta $VECPLUSDIR/test-files/test.input_sequence_file.fa --input_taxa $VECPLUSDIR/info-files/taxonomy_tree_wlevels.txt --combine_output --verbose > mytest.out \n"
      },
      "source": "https://raw.githubusercontent.com/aaschaffer/vecscreen_plus_taxonomy/master/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8558106879587741,
      "result": {
        "original_header": "Verbose output format (enabled with --verbose option): 11 columns",
        "type": "Text_excerpt",
        "value": "compare_vector_matches_wtaxa.pl \\ \n--input_summary $VECPLUSDIR/test-files/test.sample_input_final_step.txt \\\n--input_taxa $VECPLUSDIR/info-files/taxonomy_tree_wlevels.txt \\\n--input_artificial_vectors $VECPLUSDIR/info-files/artificial_whole_sequences.txt \\\n--input_artificial_segments $VECPLUSDIR/info-files/artificial_intervals.txt \\\n--input_univec_sources $VECPLUSDIR/info-files/biological_exclusions.txt \\\n--input_amr $VECPLUSDIR/info-files/UniVec10_vs_amr_distinct_intervals.txt \\\n--input_sequences $VECPLUSDIR/test-files/test.sample_candidates.fa \\\n--outfile my_output_final_step.txt \nWhen you run the above 'sh' command, you should see output like this:\n--\ncomparing expected output test-files/expected.output_final_step.txt to observed output my_outputfinal_step.txt\nSUCCESS: Files are identical\n-- \nAfter running this compare_vector_matches_wtaxa.pl command, the file\n'my_output_final_step.txt' will include the output of\ncompare_vector_matches_wtaxa.pl which is the file\ntest-files/sample_input_final_step.txt with 3 additional columns: \nTo run the test script, execute the following command:\n> $VECPLUSDIR/scripts/test_vecscreen_plus_taxonomy_scripts.pl\n \n"
      },
      "source": "https://raw.githubusercontent.com/aaschaffer/vecscreen_plus_taxonomy/master/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8519990828469227,
      "result": {
        "original_header": "SUCCESS",
        "type": "Text_excerpt",
        "value": "        find_taxonomy_ancestors.pl \\\n        --input_summary <input file of identifiers> \\\n        --input_taxa <input file with NCBI's taxonomy> \\\n        --input_level <desired taxonomy level> \\\n        --outfile <output file> \n"
      },
      "source": "https://raw.githubusercontent.com/aaschaffer/vecscreen_plus_taxonomy/master/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8044432799788841,
      "result": {
        "type": "Text_excerpt",
        "value": "**************\n**BACKGROUND**\n************** \n"
      },
      "source": "https://raw.githubusercontent.com/aaschaffer/vecscreen_plus_taxonomy/master/README",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/aaschaffer/vecscreen_plus_taxonomy/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "vecscreen_plus_taxonomy"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "aaschaffer"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 245613,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 1749,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/aaschaffer/vecscreen_plus_taxonomy/master/README"
      },
      "technique": "file_exploration"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "When you run the above 'sh' command, you should see output like this:",
        "type": "Text_excerpt",
        "value": "comparing expected output test-files/expected.output_combined_wtaxonomy.txt to observed output mytest.output_combined_wtaxonomy.txt\nSUCCESS: Files are identical\n--\n\nAfter running the above from_vecscreen_to_summary.pl command, the\none-line per sequence output is in the file\nmytest.output_combined_wtaxonomy.txt. This 11-column format is\ndescribed below under 'Verbose output format (enabled with --verbose\noption): 11 columns'.\n\nThe output of the script to stdout, which describes briefly what the\nscript is doing, is in the file mytest.out.\n\nThe input sequence file\n($VECPLUSDIR/test-files/test.input_sequence_file.fa) can be any\nnucleotide sequence file in FASTA format.\n\nThe taxonomy file ($VECPLUSDIR/info-files/taxonomy_tree_wlevels.txt)\nis a file in a special format that includes taxonomy information based\non NCBI's taxonomy. This can either be created by the user from the\nNCBI taxonomy file, or the user can use the provided file\ntaxonomy_tree_wlevels.txt, which was created in April 2018. If you are\nusing this in 2018, the provided file above should be fine. After\nthat, you should create a new up-to-date file. Instructions for doing\nthat are provided below in the section CREATING THE TAXONOMY FILE.\n\nThe options that can be provided to from_vecscreen_to_summary.pl are:\n  --input_fasta <s> : REQUIRED: file name <s> with sequences in fasta format \n  --input_taxa <s>  : REQUIRED: file name <s> mapping vecscreen matches to taxa\n  --output_root <s> : REQUIRED: output files will be named starting with <s>\n  --verbose         : output 11 columns instead of 5\n  --combine_output  : combine internal and terminal matches\n  --keep\t    : keep all intermediate files (e.g. vecscreen output)\n\nThe --input_fasta <s> and --input_taxa <s> and --output_root <s>\noptions are required when running from_vecscreen_to_summary.pl, while\n--verbose and --combine_output and --keep are optional.  By default\n--verbose and --combine_output and --keep are all turned off.\n\nThe --combine_output option determines whether one or two files of\noutput are produced.  Currently the names of the output files are\npartly fixed at:\n<output_root>.output_combined_wtaxonomy.txt (if --combine_output is applied) \n<output_root>.output_internal_wtaxonomy.txt (if --combine_output is not applied) \n<output_root>.output_terminal_wtaxonomy.txt (if --combine_output is not applied)\n\nThe option --verbose determines how many columns of output are\nproduced, as described in the OUTPUT section below. It does not cause\nmore diagnostic output to be printed during the execution of the\nscript. The extra columns are important for classifying some matches\nas true or false contamination.\n\nThe option --keep determines whether the output file from running\nvecscreen within the script is kept (--keep used) or deleted (--keep\nnot used, default).\n\nfrom_vecscreen_to_summary.pl will create one line of tabular output\nper vecscreen hit in the input sequence file. There are two possible\noutput formats. For both formats, columns are separated by tabs.\n\n--------------------------------"
      },
      "source": "https://raw.githubusercontent.com/aaschaffer/vecscreen_plus_taxonomy/master/README",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 08:26:18",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ]
}