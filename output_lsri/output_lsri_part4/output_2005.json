{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ketil-malde/kmx"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2016-02-17T09:12:21Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-10-26T13:01:51Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9797704785953598,
      "result": {
        "original_header": "KMX - K-Mer indeXing",
        "type": "Text_excerpt",
        "value": "This is (yet another) k-mer indexing/counting utility for use on\nbiological sequence data.  In essence, it builds an index by reading\nFastq or Fasta files, which it then can perform various analyses on.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ketil-malde/kmx/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9462246060922652,
      "result": {
        "original_header": "Why yet another one?",
        "type": "Text_excerpt",
        "value": "So, why yet another k-mer indexing tool?  Don't we have enough with\njellyfish, khmer, turtle, kmc, and so on, and so forth?  Well, kmx has\nsome features that may or may not be unique. \n1. I think it is the only tool to use Judy arrays to store the index.\nThis isn't so important in itself, but the underlying, highly tuned\nC-libarary gives decent performance and low memory consumption. \n2. It's exact, not probabilistic.  Some of the faster and more\nmemory-frugal tools out there use heuristics to get that way. This is\nprobably a worthwhile trade-off in many cases, but exact is still nice. \n3. It has a compact indexing format, using a differential coding to\nsave space.  A benchmark indexing 200GB of Fastq data gives an index\nof 20GB.  In addition, the format is easy to parse and generate\n(see src/Serialize.hs for details).  I haven't compared to many other\ntools, but at least jellyfish produces a bit larger indexes in my\ntests. \n4. It is single threaded (for now, at least), but can paritition and\ndistribute index-building over multiple processes.  This means you can\nbuild an index for almost any amount of data on almost any kind of\ncomputer.  Those 200GB were indexed using 32 separate processes in\nthree and a half hours, the biggest memory footprint of a single\nprocess was 6 gigabytes.  There's a script that will use GNU parallel,\nwhich wil let you distribute those processes to separate machines if\nyou want. \n5. It has a bunch of analyses that may or may not be unique:\ncorrelations, heatmaps, and (of course) histograms.  See '--help' for\ndetails.  All of these (so far) run in constant (and rather modest)\nspace. \n6. Analyses can downscale the k-mer size without actually doing a\nrecount.  So if you build with a k-mer size of 32 (the current\nmaximum, limited by the available Judy data structure), you get\nindexing with any k-mer size less than that included. \n7. It is written in Haskell, and is thus much more beautiful than its\ncompetitors.  In retrospect, I should have named it Galatea.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ketil-malde/kmx/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9021614321289105,
      "result": {
        "original_header": "Distributed/parallel indexing",
        "type": "Text_excerpt",
        "value": "If you are low on memory, you may want to split the indexing into,\nsay, eight sequential processes.  This is how you can do that: \n    for x in {0..7}; do\n       kmx count --filter-bits=3 --filter-value=$x input.fastq -o partial_index.$x\n    done\n\tkmx merge partial_index.* -o index \nBasically, --filter-bits lets you specify the granularity, and the\npartial indices are then numbered from zero to 2^b-1.  Of course, if\nyou have enough memory but would like to make use of more CPUs, just run\nall of these simultaneously.  I encourage you to look at the scripts\nincluded, and modify them to suit your needs.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ketil-malde/kmx/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ketil-malde/kmx/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ketil-malde/kmx/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ketil-malde/kmx"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "KMX - K-Mer indeXing"
      },
      "source": "https://raw.githubusercontent.com/ketil-malde/kmx/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ketil-malde/kmx/master/scripts/build-dist.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "KMX - K-Mer indeXing"
        ],
        "type": "Text_excerpt",
        "value": "Clone the repository, cd into the directory, and type 'cabal install'.\n\nThis presupposes that you have a fairly recent and working GHC\ninstallation, and if you just did 'apt-get install ghc' for this, you\nwill probably need to 'apt-get cabal-install' and do a 'cabal update'\nfirst.  You may also need to install the development version of\nlibjudy.  See .travis.yml for something that works.\n"
      },
      "source": "https://raw.githubusercontent.com/ketil-malde/kmx/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.833537888085336,
      "result": {
        "original_header": "Distributed/parallel indexing",
        "type": "Text_excerpt",
        "value": "If you are low on memory, you may want to split the indexing into,\nsay, eight sequential processes.  This is how you can do that: \n"
      },
      "source": "https://raw.githubusercontent.com/ketil-malde/kmx/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9979874587452179,
      "result": {
        "original_header": "More information",
        "type": "Text_excerpt",
        "value": " - [http://biohaskell.org/Applications/kmc]()\n - [http://blog.malde.org/posts/frequency-counting.html]()\n - [http://blog.malde.org/posts/k-mer-counting.html]()\n \n"
      },
      "source": "https://raw.githubusercontent.com/ketil-malde/kmx/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8973506963943669,
      "result": {
        "original_header": "Testing",
        "type": "Text_excerpt",
        "value": "There's also a test script, somewhat unsurprisingly called\n`test/test.sh`.  When run, it will perform a set of tests on the\nsupplied data file. \n \n"
      },
      "source": "https://raw.githubusercontent.com/ketil-malde/kmx/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ketil-malde/kmx/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "kmx"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "ketil-malde"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Haskell",
        "size": 67301,
        "type": "Programming_language",
        "value": "Haskell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 3607,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ketil-malde/kmx/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 09:01:52",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "KMX - K-Mer indeXing"
        ],
        "type": "Text_excerpt",
        "value": "It's pretty simple.  To build an index for k-mers of size 31, do:\n\n    kmx count -k 31 input.fastq more.fastq -o index.31\n\t\nTo get the archetypical histogram from this, you can then:\n\n    kmx hist index.31 -o index.hist\n\nNote that as of version 0.5, this will attempt to use an\nexpectation-maximization algorithm to fit a set of Poisson\ndistributions to the data, modelling the k-mer counts as a sum of errors,\nhaploid, diploid, and repeat k-mer counts.  The results are added as\ncomments to the top of the histogram, and can also be calculated from the\nhistogram file using `kmx stats`.\n\nPlotting is an optional extra, I tend to use Gnuplot, where you should\nbe able to do something like:\n\n\tset xrange [0:200]\n    plot \"index.hist\" with lines\n\t\nYou'll probably want to adjust yrange as well, but it's probably a\ngood idea to look at the data first.\n\nIn all cases, slapping on '--help' should give you more information on\nusage and options.\n"
      },
      "source": "https://raw.githubusercontent.com/ketil-malde/kmx/master/README.md",
      "technique": "header_analysis"
    }
  ]
}