{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citing",
        "parent_header": [
          "ULTRA"
        ],
        "type": "Text_excerpt",
        "value": "```\n@article {Olson2024ultra,\n  author = {Olson, Daniel R. and Wheeler, Travis J.},\n  title = {ULTRA-Effective Labeling of Repetitive Genomic Sequence},\n  elocation-id = {2024.06.03.597269},\n  year = {2024},\n  doi = {10.1101/2024.06.03.597269},\n  publisher = {Cold Spring Harbor Laboratory},\n  URL = {https://www.biorxiv.org/content/early/2024/06/04/2024.06.03.597269},\n  eprint = {https://www.biorxiv.org/content/early/2024/06/04/2024.06.03.597269.full.pdf},\n  journal = {bioRxiv}\n}\n```\n"
      },
      "source": "https://raw.githubusercontent.com/TravisWheelerLab/ULTRA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Olson, Daniel R. and Wheeler, Travis J.",
        "doi": "10.1101/2024.06.03.597269",
        "format": "bibtex",
        "title": "ULTRA-Effective Labeling of Repetitive Genomic Sequence",
        "type": "Text_excerpt",
        "url": "https://www.biorxiv.org/content/early/2024/06/04/2024.06.03.597269",
        "value": "@article{Olson2024ultra,\n    journal = {bioRxiv},\n    eprint = {https://www.biorxiv.org/content/early/2024/06/04/2024.06.03.597269.full.pdf},\n    url = {https://www.biorxiv.org/content/early/2024/06/04/2024.06.03.597269},\n    publisher = {Cold Spring Harbor Laboratory},\n    doi = {10.1101/2024.06.03.597269},\n    year = {2024},\n    elocation-id = {2024.06.03.597269},\n    title = {ULTRA-Effective Labeling of Repetitive Genomic Sequence},\n    author = {Olson, Daniel R. and Wheeler, Travis J.},\n}"
      },
      "source": "https://raw.githubusercontent.com/TravisWheelerLab/ULTRA/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/TravisWheelerLab/ULTRA"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2017-05-17T19:21:59Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-13T09:30:16Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ULTRA Locates Tandemly Repetitive Areas"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9870878259603507,
      "result": {
        "original_header": "About",
        "type": "Text_excerpt",
        "value": "ULTRA is a tool for finding and annotating tandem repeats within genomic sequence. Model details and evaluation can be found in our release paper, [ULTRA-Effective Labeling of Tandem Repeats in Genomic Sequence](https://www.biorxiv.org/content/10.1101/2024.06.03.597269v1)\n \n"
      },
      "source": "https://raw.githubusercontent.com/TravisWheelerLab/ULTRA/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/TravisWheelerLab/ULTRA/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/TravisWheelerLab/ULTRA/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "TravisWheelerLab/ULTRA"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ULTRA"
      },
      "source": "https://raw.githubusercontent.com/TravisWheelerLab/ULTRA/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/TravisWheelerLab/ULTRA/main/examples/run-all.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/TravisWheelerLab/ULTRA/main/tool/check-format.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/TravisWheelerLab/ULTRA/main/tool/push-runner-image.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/TravisWheelerLab/ULTRA/main/tool/run-format.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/TravisWheelerLab/ULTRA/main/tool/build-runner-image.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/TravisWheelerLab/ULTRA/main/tool/push-builder-image.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/TravisWheelerLab/ULTRA/main/tool/build-builder-image.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Output formats and tuning guide",
        "parent_header": [
          "ULTRA"
        ],
        "type": "Text_excerpt",
        "value": "<details>\n<summary>ULTRA TSV format</summary>\n\nULTRA's default output format is a tab-separated-values format that includes a descriptive header. Default settings will result in the following columns:\n```\nSeqID Start End Period  Score Consensus #Subrepeats SubrepeatStarts SubrepeatConsensi\n```\n`SeqID` describes the SequenceID, `Start` describes the repeat starting location (starting with 0), `End` describes the ending location (total repeat length is `End` - `Start`), `Period` describes the repetitive period, `Score` gives the ULTRA score, `Consensus` gives the repetitive consensus, `#Subrepeats` describes the number of repetitive patterns found within the region, `SubrepeatStarts` contains a comma separated list of where subrepeats begin (the first will always be 0), `SubrepeatConsensi` contains a comma separated list of subrepeat consensus patterns. \n\nUsing `--pval` will cause the `Score` column to change to \"`Score,PValue`\".\nUsing `--max_split -1` will remove the columns `#Subrepeats SubrepeatStarts SubrepeatConsensi` columns.\nUsing `--max_consensus -1` will remove the columns `Consensus SubrepeatConsensi`.\nUsing `--show_seq` will include an additional `Sequence` column containing the complete repetitive sequence.\n</details>\n<details>\n<summary>JSON format</summary>\n  \nUsing ULTRA with `--json` will result in JSON formatted output. The JSON output will contain an objects with a `Repeats` array. Each object in the `Repeats` array will contain descriptive fields such as \"Start\", \"Length\",  \"Period\", \"Score\",  \"Substitutions\" (the number of mismatches), \"Insertions\" (the number of insertions), \"Deletions\" (the number of deletions), \"Consensus\", and additional fields depending on the specific settings being used. \n\nRepeats that contain subrepeats will have a \"Subrepeats\" array, each object in the array containing a \"Start\" field (that describes the subrepeat's starting location relative to the overall repeat), and a \"Consensus\" field.\n</details>\n<details>\n<summary>BED format</summary>\n  \nUsing ULTRA with `--bed`will result in a BED file with four columns (`Sequence ID`, `Start`, `End`,  `Consensus`).\n</details>\n<details>\n<summary>Multiformat output</summary>\n  \nWhen using the `-o <file path>` option for saving output it is possible to provide ULTRA with multiple output formats. For example:\n```\nultra  --tsv --json --bed -o examples/example_1_multi examples/at_repeat.fa\n```\nRunning the above command will result in four output files: \n```\nexamples/example_1_multi.settings\nexamples/example_1_multi.tsv\nexamples/example_1_multi.json\nexamples/example_1_multi.bed\n```\nNote that when using multiple output formats ULTRA will automatically choose the extension based on the output format type.\n</details>\n\n<details>\n  <summary>Tuning guide</summary>\n  \nULTRA's automatic parameter tuning (via `--tune`) can greatly improve annotation performance by testing several parameter sets and then using the parameter set that achieved the highest coverage within some threshold of estimated false discovery rate (by default 0.05, and adjusted with `--tune_fdr <fdr threshold>`) . By default `--tune` will test 18 parameter sets, `--tune_medium` will test 40 parameter sets, and `--tune_large` will test 252 parameter sets.  Each parameter contains different emission probabilities and transition probabilities, but does not affect the repeat period. By default tuning will disable indel states in order to decrease the overall runtime. Best tuning performance will be achieved by tuning with indel states, using the `--tune_indel` flag. \n\nUsers can also specify their own parameter sets to tune ULTRA against by using the `--tune_file <tune file path>` option. Each line in the tune file should contain arguments to run ULTRA against. An example can be seen in `examples/tune_file` which contains:\n```\n-p 1\n-p 4\n-p 16\n-p 64\n-p 256\n-p 10 -m 0.5 --at 0.3\n-p 10 -m 0.55 --at 0.2\n-p 10 -m 0.5 --at 0.1 -i 2 -d 2\n```\nHere `examples/tune_file` tests different repeat periods (`-p <repeat period>`), different repeat emission probabilities (`-m <repeat emission probability>`),  different background AT frequencies (`--at <AT rate>`), and different indel states (`-i <max insertions> -d <max deletions>`).\n</details>\n"
      },
      "source": "https://raw.githubusercontent.com/TravisWheelerLab/ULTRA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9999999999997726,
      "result": {
        "original_header": "Building",
        "type": "Text_excerpt",
        "value": "ULTRA requires a compiler supporting C++11 or higher and CMake 3.12 or higher.  To download and build ULTRA run the following commands:\n```\ngit clone https://github.com/TravisWheelerLab/ULTRA\ncd ULTRA\ncmake .\nmake\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/TravisWheelerLab/ULTRA/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/TravisWheelerLab/ULTRA/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bioinformatics, tandem-repeats"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "BSD 3-Clause \"New\" or \"Revised\" License",
        "spdx_id": "BSD-3-Clause",
        "type": "License",
        "url": "https://api.github.com/licenses/bsd-3-clause",
        "value": "https://api.github.com/licenses/bsd-3-clause"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "BSD 3-Clause License\n\nCopyright (c) 2018, 2020 AUTHORS\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of the copyright holder nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
      },
      "source": "https://raw.githubusercontent.com/TravisWheelerLab/ULTRA/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ULTRA"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "TravisWheelerLab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 515900,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 1788,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 875,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/TravisWheelerLab/ULTRA/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "DanielOlson",
          "type": "User"
        },
        "date_created": "2024-09-13T02:10:06Z",
        "date_published": "2024-09-13T01:18:49Z",
        "description": "- Small improvements to automatic window sizing (reducing memory needs for large model). \r\n- The output from --mem will always show at the start of ULTRA's runtime. \r\n- If ULTRA is built without release optimizations a warning will now be displayed at the top of the `--help` page.",
        "html_url": "https://github.com/TravisWheelerLab/ULTRA/releases/tag/v1.0.2b",
        "name": "1.0.2",
        "release_id": 174869272,
        "tag": "v1.0.2b",
        "tarball_url": "https://api.github.com/repos/TravisWheelerLab/ULTRA/tarball/v1.0.2b",
        "type": "Release",
        "url": "https://api.github.com/repos/TravisWheelerLab/ULTRA/releases/174869272",
        "value": "https://api.github.com/repos/TravisWheelerLab/ULTRA/releases/174869272",
        "zipball_url": "https://api.github.com/repos/TravisWheelerLab/ULTRA/zipball/v1.0.2b"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "DanielOlson",
          "type": "User"
        },
        "date_created": "2024-09-10T20:52:12Z",
        "date_published": "2024-09-10T20:54:20Z",
        "description": "Basically no difference from version 1.0.0...",
        "html_url": "https://github.com/TravisWheelerLab/ULTRA/releases/tag/v1.0.1",
        "name": "Version 1.0.1",
        "release_id": 174425387,
        "tag": "v1.0.1",
        "tarball_url": "https://api.github.com/repos/TravisWheelerLab/ULTRA/tarball/v1.0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/TravisWheelerLab/ULTRA/releases/174425387",
        "value": "https://api.github.com/repos/TravisWheelerLab/ULTRA/releases/174425387",
        "zipball_url": "https://api.github.com/repos/TravisWheelerLab/ULTRA/zipball/v1.0.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "DanielOlson",
          "type": "User"
        },
        "date_created": "2024-09-10T20:36:32Z",
        "date_published": "2024-09-10T20:37:37Z",
        "description": "First complete version of ULTRA! Yay!",
        "html_url": "https://github.com/TravisWheelerLab/ULTRA/releases/tag/v1.0.0",
        "name": "Version 1.0.0",
        "release_id": 174422238,
        "tag": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/TravisWheelerLab/ULTRA/tarball/v1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/TravisWheelerLab/ULTRA/releases/174422238",
        "value": "https://api.github.com/repos/TravisWheelerLab/ULTRA/releases/174422238",
        "zipball_url": "https://api.github.com/repos/TravisWheelerLab/ULTRA/zipball/v1.0.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "glesica",
          "type": "User"
        },
        "date_created": "2021-11-12T18:18:42Z",
        "date_published": "2021-11-12T18:22:41Z",
        "description": "Initial GitHub release to coincide with the corresponding Docker container release. See the container on Docker Hub: https://hub.docker.com/repository/docker/traviswheelerlab/ultra.",
        "html_url": "https://github.com/TravisWheelerLab/ULTRA/releases/tag/0.99.17",
        "name": "Version 0.99.17",
        "release_id": 53263147,
        "tag": "0.99.17",
        "tarball_url": "https://api.github.com/repos/TravisWheelerLab/ULTRA/tarball/0.99.17",
        "type": "Release",
        "url": "https://api.github.com/repos/TravisWheelerLab/ULTRA/releases/53263147",
        "value": "https://api.github.com/repos/TravisWheelerLab/ULTRA/releases/53263147",
        "zipball_url": "https://api.github.com/repos/TravisWheelerLab/ULTRA/zipball/0.99.17"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 04:40:59",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 23
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Basic usage",
        "parent_header": [
          "ULTRA"
        ],
        "type": "Text_excerpt",
        "value": "A list of all flags and options can be seen with `ultra -h`. To annotate tandem repeats with ULTRA use `ultra [options] <path to FASTA file>`.  The following examples demonstrate common use cases.\n  \n<details>\n<summary>Example 1 - Default settings</summary>\n\n`examples/example_1.fa` contains randomly generated sequence with three inserted tandem repeats. We can use ULTRA to annotate the file by running:\n```\nultra examples/example_1.fa\n```\n\nThe above command will cause ULTRA to output (to stdout) the settings used by ULTRA followed by a TSV formatted annotation of the repeats found within `examples/example_1.fa`.\nULTRA annotations can be directed to an output file using the `-o <output file path>` option. For example:\n\n```\nultra -o examples/example_1_ultra.tsv examples/at_repeat.fa\n```\n\nRunning this command will result in two files, `examples/example_1_ultra.tsv` (containing the repeat annotations) and `examples/example_1_ultra.tsv.settings` (containing the ULTRA settings used). ULTRA's default TSV format consists of a header row followed by one row per annotated tandem repeat. Looking inside `examples/example_1_ultra.tsv` we find:\n```\nSeqID Start End Period  Score Consensus #Subrepeats SubrepeatStarts SubrepeatConsensi\nRand_seq_1  447 592 2 175.659958  AT  2 0,81  AT,CG\nRand_seq_1  859 920 4 49.729370 AGGC  1 0 AGGC\nRand_seq_1  1104  1167  3 71.850250 AGT 1 0 AGT\n\n```\nColumns 1-6 (`SeqID`, `Start`, `End`, `Period`, `Score`, and `Consensus`) describe the overall repetitive region. Columns 7-9 (`#Subrepeats`, `SubrepeatStarts`, and `SubrepeatConsensi`) describe changes in repetitive pattern. Running ULTRA with the `--show_seq` flag will result in an additional column, `Sequence`, that contains the complete repetitive sequence.\n\nThe second and third repeats (AGGC and AGT respectively) have no changes in repetitive pattern and so their `#Subrepeats` field is \"1\". The first repeat contains two unique repetitive patterns though, and so its `#Subrepeats` field is \"2\". The `SubrepeatStarts` field contains a comma separated list of start locations (relative to the repeat `Start` field) and the `SubrepeatConsensi` field contains a comma separated list of subrepeat consensus patterns.  When a letter cannot be resolved for a subrepeat consensus pattern the letter will be displayed as \"\\*\".\n\nULTRA can be used to mask repeats with the `--mask <masked output path>` option. For example:\n\n```\nultra --mask examples/example_1_masked.fa -o examples/example_1_ultra.tsv examples/at_repeat.fa\n```\nBy default ULTRA will use lower-case masking, although ULTRA will use N-masking if supplied with the `--nmask` flag.\n\n</details>\n\n<details>\n<summary>Example 2 - Large period repeats</summary>\n  \n`examples/example_2.fa` contains a period 1000 repeat, which is larger than ULTRA's default maximum detectable repetitive period (100). To find the large period repeat we must adjust ULTRA's maximum detectable repetitive period using the `-p <max repeat period>` option.\n\n`ultra -o examples/example_2_ultra.tsv -p 1000 examples/example_2.fa`\n\n  After running the above command `examples/example_2_ultra.tsv` will contain the following output:\n\n```\nSeqID Start End Period  Score Consensus #Subrepeats SubrepeatStarts SubrepeatConsensi\nperiod_1000_repeat  0 17999 1000  22938.433594  AAAATCCATACCGCTCATTCACCAGGCTGCGAAGCCTACACTGGTATATGAATCCGAGCTGGAGCAGGGCCCCTAAAATTCGGAGTCGTAGGTGCTCAATACTCCAATCGGTTTTCTCGTGCACCACCGCGGGTGGCTGACAGGGGTTTGACATCGAGAGGCAAGGCAGTTCCGGGCTGAAAGTAGCGCCGGGTAAGGTACGCGCCCGGTATGGCGGGGCCATGGGGCCAATACAGAGGCTGCGCCCTCACTCGGGTGGACGGAAACGCAGAACTATGGTTACTCCTTGGATACGTGAAACGTGTCCCACGGTAGCCCAAGGACTCGGGAGTCTATCACCCCTAGGGCCCATTCCCGGATATAGACGCCAGGTTGAATCCGCATTTGGAGGTACGGTGGATCAGTCTGGGTGGGGCGCGCCCCACTTATACCCTGCGCAGGCTGGACCGAGGGCCGCAAGATGCGACGGTGCACAAGTAGTTGACGACAGACCGTCGTGTTTTCATTACGGTACCAGGATCTTCGGGCCGAGTCAATCAAGCTCGGATTGCGGTGTCTACCGTTAGATCATACCCAACGCCGCAGAGGTGACACGGCGCCGATGGGTACCGGACTTTGGGTCGGCCGCAGTTCGGCAGGGGAGAGGCCCTGCGGCGCGCTTCACTCTGTATGTGCAACGTGCCCAAGTGGCGCCAGGCAGGTCTCAGCCGGTTCCTGCGTCAGCTCGAGGCTGGGCGCGGGAGCTGATCGAACATGGGCCGGGGGCCTCGAACCGTCGAGGACCCCATAGTACCCCGGGCACCAAGTAGGGCAGCCTATAGCCTGAAGCAGTACCGTTTCAGGGGGGGAGCCCTCATGGTCTCCTCTACTGATGACTCAACACGCCAGGGGCGTGAAGCCGGTTCCTTCGGTGGTTATAGATCAAAGGCTCAGAGTGCGGTCTGGAGCGCCCATCTAGCGGCACGCGTCTCGATTGCTCGGTCGCCCTTCACACTCCGCG  1 0 AAAATCCATACCGCTCATTCACCAGGCTGCGAAGCCTACACTGGTATATGAATCCGAGCTGGAGCAGGGCCCCTAAAATTCGGAGTCGTAGGTGCTCAATACTCCAATCGGTTTTCTCGTGCACCACCGCGGGTGGCTGACAGGGGTTTGACATCGAGAGGCAAGGCAGTTCCGGGCTGAAAGTAGCGCCGGGTAAGGTACGCGCCCGGTATGGCGGGGCCATGGGGCCAATACAGAGGCTGCGCCCTCACTCGGGTGGACGGAAACGCAGAACTATGGTTACTCCTTGGATACGTGAAACGTGTCCCACGGTAGCCCAAGGACTCGGGAGTCTATCACCCCTAGGGCCCATTCCCGGATATAGACGCCAGGTTGAATCCGCATTTGGAGGTACGGTGGATCAGTCTGGGTGGGGCGCGCCCCACTTATACCCTGCGCAGGCTGGACCGAGGGCCGCAAGATGCGACGGTGCACAAGTAGTTGACGACAGACCGTCGTGTTTTCATTACGGTACCAGGATCTTCGGGCCGAGTCAATCAAGCTCGGATTGCGGTGTCTACCGTTAGATCATACCCAACGCCGCAGAGGTGACACGGCGCCGATGGGTACCGGACTTTGGGTCGGCCGCAGTTCGGCAGGGGAGAGGCCCTGCGGCGCGCTTCACTCTGTATGTGCAACGTGCCCAAGTGGCGCCAGGCAGGTCTCAGCCGGTTCCTGCGTCAGCTCGAGGCTGGGCGCGGGAGCTGATCGAACATGGGCCGGGGGCCTCGAACCGTCGAGGACCCCATAGTACCCCGGGCACCAAGTAGGGCAGCCTATAGCCTGAAGCAGTACCGTTTCAGGGGGGGAGCCCTCATGGTCTCCTCTACTGATGACTCAACACGCCAGGGGCGTGAAGCCGGTTCCTTCGGTGGTTATAGATCAAAGGCTCAGAGTGCGGTCTGGAGCGCCCATCTAGCGGCACGCGTCTCGATTGCTCGGTCGCCCTTCACACTCCGCG\n```\nThe large consensus can be cumbersome and some users may prefer ULTRA's output to not include consensus patterns for large repeats. Consensus patterns can be limited to smaller period repeats using the `--max_consensus <repetitive period>` option. For example:\n\n```\nultra -o examples/example_2_ultra.tsv -p 1000 --max_consensus 10 examples/example_2.fa\n```\n\nresults in the following output:\n```\nSeqID Start End Period  Score Consensus #Subrepeats SubrepeatStarts SubrepeatConsensi\nperiod_1000_repeat  0 17999 1000  22938.433594  . 1 0 .\n```\n</details>\n<details>\n<summary>Example 3 - Tuning and FDR</summary>\n  \n`examples/example_3.fa` contains randomly generated 80% AT rich sequence along with two inserted tandem repeats (an \"AAAGC\" repeat and an \"AAAATAC\" repeat). The large AT bias is far outside ULTRA's default expectation, and as a result ULTRA will have a high false discovery rate, as seen by running:\n```\nultra --fdr -o examples/example_3_def.tsv examples/example_3.fa\n```\nAfter this command runs, ULTRA will print to standard out: `Estimated false discovery rate: 0.58`, meaning that ULTRA expects 58% of the repetitive coverage in `examples/example_3_def.tsv` to be falsely labeled. The high false discovery rate is caused by the % AT-content in `examples/example_3.fa` being much higher than ULTRA expects by default. Note that ULTRA uses random sequence shuffling to estimate false discovery rate (see the tuning section of [our paper](https://www.biorxiv.org/content/10.1101/2024.06.03.597269v1)), and so the exact estimated false discovery will be different each time the command is ran. \n\nWe can improve our results by automatically tuning ULTRA's parameters using the `--tune` flag:\n```\nultra --tune --tune_indel --fdr -o examples/example_3_tuned.tsv examples/example_3.fa\n```\n`--tune` causes ULTRA to perform a parameter search that maximizes coverage while keeping the estimated false discovery rate under some threshold (by default 0.05  and adjustable via `--tune_fdr <fdr threshold>`). By default ULTRA will tune itself using a lighter-weight repeat model (one without indel states) in an attempt to decrease tuning time. The `--tune_indel` flag will enable the full ULTRA model and result in the highest quality tuning results. ULTRA's tuned annotation, `examples/example_3_tuned.tsv`, contains only the inserted \"AAAGC\" and \"AAAATAC\" repeats:\n```\nSeqID Start End Period  Score Consensus #Subrepeats SubrepeatStarts SubrepeatConsensi\n80_AT 4404  4535  5 132.823410  AAAGC 1 0 AAAGC\n80_AT 8406  9134  7 716.489990  AAAATAC 1 0 AAAATAC\n```\n</details>\n"
      },
      "source": "https://raw.githubusercontent.com/TravisWheelerLab/ULTRA/main/README.md",
      "technique": "header_analysis"
    }
  ]
}