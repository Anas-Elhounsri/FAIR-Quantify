{
  "application_domain": [
    {
      "confidence": 0.8509710622064629,
      "result": {
        "type": "String",
        "value": "Semantic web"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ucsd-ccbb/VAPr"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2017-01-19T23:15:53Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-07-28T00:57:36Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "VAPr: A Python package for NoSQL variant data storage, annotation and prioritization"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9961367447676536,
      "result": {
        "original_header": "Variant Annotation and Prioritization package",
        "type": "Text_excerpt",
        "value": "This package is aimed at providing a way of retrieving variant information using [ANNOVAR](http://annovar.openbioinformatics.org/en/latest/) and [myvariant.info](http://myvariant.info/). In particular, it is suited for bioinformaticians interested in aggregating variant information into a single NoSQL database (MongoDB solely at the moment).  \n"
      },
      "source": "https://raw.githubusercontent.com/ucsd-ccbb/VAPr/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.975115552742524,
      "result": {
        "original_header": "Background",
        "type": "Text_excerpt",
        "value": "VAPr was developed to simplify the steps required to get mutation data from a VCF file to a downstream analysis process.\n A query system was implemented allowing users to quickly slice the genomic variant (GV) data and select variants \n according to their characteristics, allowing researchers to focus their analysis only on the subset of data that contains meaningful \n information. Further, this query system allows the user to select the format in which the data can be retrieved. \n Most notably, CSV or VCF files can be retrieved from the database, allowing any researcher to quickly filter variants \n and retrieve them in commonly used formats. \nThe package can also be installed and used without having to download ANNOVAR. In that case, variant data can be \nretrieved solely by MyVariant.info and rapidly parsed to the MongoDB instance.  \n"
      },
      "source": "https://raw.githubusercontent.com/ucsd-ccbb/VAPr/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9754417785772954,
      "result": {
        "original_header": "Data Models",
        "type": "Text_excerpt",
        "value": "The annotation process identifies every unique variant in the union of variants found for the input samples; it then submits batches (of a user-specifiable size) of variant ids to MyVariant.info and stores the resulting annotation information to the local MongoDB.  Subsequent filtering and output of the resulting annotations is done against the MongoDB rather than via additional calls to MyVariant.info, allowing the user to investigate multiple different filtering strategies on a given annotation run without additional overhead.  Note that, by design, each run of annotate() performs new annotation calls to MyVariant.info rather than attempting to find potentially relevant past annotations in the MongoDB; this is because MyVariant.info is continually updated live, and we anticipate that users will want to receive the latest annotations each time they choose to annotate, rather than potentially \u201cstale\u201d annotations from past runs. \n"
      },
      "source": "https://raw.githubusercontent.com/ucsd-ccbb/VAPr/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9672932767263482,
      "result": {
        "original_header": "Required Arguments",
        "type": "Text_excerpt",
        "value": "- `mongo_db_name`: Database used for variant storage as well as the output of annovar i.e. 'VariantDatabase'. \n- `mongo_collection_name`: Collection name for this analysis i.e. 'cancer_analysis_01012018'.\n \n- `build_ver `: Human genome build. VAPr currently supports the two human genome builds, `hg19`, `hg38`. \n"
      },
      "source": "https://raw.githubusercontent.com/ucsd-ccbb/VAPr/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9677997548571149,
      "result": {
        "original_header": "Optional Arguments",
        "type": "Text_excerpt",
        "value": "- `annovar_install_path`: Path location of annovar installtion. **NOTE**: we can't provide the ANNOVAR package as it requires registration to be downloaded. It is, however, freely available [here](http://annovar.openbioinformatics.org/en/latest/user-guide/download/). Download, unzip and place it in whatever directory you'd like. Make sure you have enough space on disk (~15 GB for the datasets used for annotation). It is required that you specify the location to which you downloaded annovar. The folder where annovar lives looks like this: \n- `design_file`: Path to design file. The purpose of an optional design file is to accommodate VCF files scattered throughout a file system. The design file must be set up as a CSV file with the first field name as \"Sample_Names\", where the column should be populated with full file paths to each VCF you wish to include in the analysis. We anticipate in the future to be able to accommodate meta-data as successive columns which would be included as sample information in each variant document. A sample design file: \n"
      },
      "source": "https://raw.githubusercontent.com/ucsd-ccbb/VAPr/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9580824765186098,
      "result": {
        "original_header": "Core Methods",
        "type": "Text_excerpt",
        "value": "The `VaprAnnotator` object has a variety of methods from it. These include:\n - Annovar method: `download_annovar_databases`\n - Annotation and storing methods: `annotate` and `annotate_lite` \nThe differences and nuances of each will be discussed next. \n"
      },
      "source": "https://raw.githubusercontent.com/ucsd-ccbb/VAPr/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9839913002493967,
      "result": {
        "original_header": "`annotate`",
        "type": "Text_excerpt",
        "value": "`annotate()`: this requires running Annovar beforehand, and will kick-start the main functionality\nof this package. Namely, it will collect all the variant data from Annovar annotations, combine it with data coming\nfrom MyVariant.info, and parse it to MongoDB, in the database and collection specified in `project_data`. \n_Optional_: \n  - `n_processes`: An integer value that specifies the number of parallel processing jobs to be used. Larger vcf files \n  will always benefit from a larger number of parallel processes, but that may not be the case for smaller vcf files. \n  As a rule of thumb, use at most `number of CPU cores - 1`, and for smaller vcf files (less than 50 thousand variants)\n  4-5 cores at most. Default: 4.\n  - `verbose`: An integer value from 0 to 3 that specifies the verbosity level. Default: 0.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ucsd-ccbb/VAPr/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9281767435884838,
      "result": {
        "original_header": "`annotate_lite` (not recommended)",
        "type": "Text_excerpt",
        "value": "`annotate_lite()`: Execution will skip annotating with Annovar. It will grab the HGVS ids from the\nvcf files and query the variant data from MyVariant.info. It is subject to the issue of potentially having completely\nempty data for some of the variants, and inability to run native VAPr queries on the data.  \n_Optional_: \n  - `n_processes`: An integer value that specifies the number of parallel processing jobs to be used. Use here \n  `number of CPU cores - 1`. \n   \n"
      },
      "source": "https://raw.githubusercontent.com/ucsd-ccbb/VAPr/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9355531547026864,
      "result": {
        "original_header": "Filtering  Methods",
        "type": "Text_excerpt",
        "value": "Four different pre-made filters that allow for the retrieval of specific variants have been implemented. Refer to the\n[README.md](link to readme/filters) file for more more information about the fields and thresholds used.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ucsd-ccbb/VAPr/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9127540583368997,
      "result": {
        "original_header": "Filter #1: Rare Deleterious Variants",
        "type": "Text_excerpt",
        "value": " - criteria 1: 1000 Genomes (ALL) allele frequency (Annovar) < 0.05 or info not available\n - criteria 2: ESP6500 allele frequency (MyVariant.info - CADD) < 0.05 or info not available\n - criteria 3: cosmic70 (MyVariant.info) information is present\n - criteria 4: Func_knownGene (Annovar) is exonic, splicing, or both\n - criteria 5: ExonicFunc_knownGene (Annovar) is not \"synonymous SNV\" \n"
      },
      "source": "https://raw.githubusercontent.com/ucsd-ccbb/VAPr/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9871699594032504,
      "result": {
        "original_header": "Filter #2: Known Disease Variants",
        "type": "Text_excerpt",
        "value": "_Optional_: \n  - `sample_names_list`: A list of strings specifying the sample names from which you'd like to extract your variants. If this is\n  not used, all variants are queried (that is, variants from all sample sin your collection). Default: `None`\n \n- criteria: cosmic70 (MyVariant.info) information is present or ClinVar data is present and clinical significance is not Benign or Likely Benign \n"
      },
      "source": "https://raw.githubusercontent.com/ucsd-ccbb/VAPr/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9011491654140826,
      "result": {
        "original_header": "Create your own filter",
        "type": "Text_excerpt",
        "value": "As long as you have a MongoDB instance running, filtering can be performed through pymongo as shown by the code below. \nIf a list is intended to be created from it, simply add: `filter2 = list(filter2)` \nIf you'd like to customize your filters, a good idea would be to look at the available fields to be filtered. Looking at \nthe myvariant.info [documentation](http://docs.myvariant.info/en/latest/doc/data.html), you can see what are all the \nfields available and can be used for filtering.\n```python\nfrom pymongo import MongoClient\n\nclient = MongoClient()\ndb = getattr(client, mongodb_name)\ncollection = getattr(db, mongo_collection_name)\n\nfiltered = collection.find({\"$and\": [\n                                   {\"$or\": [{\"func_knowngene\": \"exonic\"},\n                                            {\"func_knowngene\": \"splicing\"}]},\n                                   {\"cosmic70\": {\"$exists\": True}},\n                                   {\"1000g2015aug_all\": {\"$lt\": 0.05}}\n                         ]})\nfiltered = list(filtered)\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/ucsd-ccbb/VAPr/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9256668609135675,
      "result": {
        "original_header": "Write Options #2: Filtered Variants CSV",
        "type": "Text_excerpt",
        "value": "_Required_:\n  - `filtered_variants`: List of filtered variants retrieved by VAPr filters or custom filters. \n"
      },
      "source": "https://raw.githubusercontent.com/ucsd-ccbb/VAPr/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "http://vapr.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/ucsd-ccbb/VAPr/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Downloading ANNOVAR Databases",
        "parent_header": [
          "VAPr",
          "Supplemental Information",
          "VaprAnnotator - Tips on Usage"
        ],
        "type": "Text_excerpt",
        "value": "If you plan to use Annovar, please make sure to download the necessary Annovar databases. When Annovar is first installed, it does not install Annovar databases by default. The vapr_core has a method download_annovar_databases() that will download the necessary annovar databases. Note: this command only needs to be run the first time you use VAPr.  \n\n`annotator.download_annovar_databases()`\n\n`dataset = annotator.annotate(num_processes=8)`\n\n\n<a id='required'></a>"
      },
      "source": "https://raw.githubusercontent.com/ucsd-ccbb/VAPr/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ucsd-ccbb/VAPr/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ucsd-ccbb/VAPr/master/VAPr%20Quick-Start%20Guide.ipynb"
      },
      "source": "https://raw.githubusercontent.com/ucsd-ccbb/VAPr/master/VAPr%20Quick-Start%20Guide.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ucsd-ccbb/VAPr/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ucsd-ccbb/VAPr"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "VAPr"
      },
      "source": "https://raw.githubusercontent.com/ucsd-ccbb/VAPr/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ucsd-ccbb/VAPr/master/pipeline.png"
      },
      "source": "https://raw.githubusercontent.com/ucsd-ccbb/VAPr/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9951191203198793,
      "result": {
        "original_header": "Variant Annotation and Prioritization package",
        "type": "Text_excerpt",
        "value": "Documentation now live at: http://vapr.readthedocs.io/en/latest/ \n"
      },
      "source": "https://raw.githubusercontent.com/ucsd-ccbb/VAPr/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9971169985882867,
      "result": {
        "original_header": "Optional Arguments",
        "type": "Text_excerpt",
        "value": "- `annovar_install_path`: Path location of annovar installtion. **NOTE**: we can't provide the ANNOVAR package as it requires registration to be downloaded. It is, however, freely available [here](http://annovar.openbioinformatics.org/en/latest/user-guide/download/). Download, unzip and place it in whatever directory you'd like. Make sure you have enough space on disk (~15 GB for the datasets used for annotation). It is required that you specify the location to which you downloaded annovar. The folder where annovar lives looks like this: \n- `vcfs_gzipped`: Boolean. Only files with one vcf extension will be processed. If you are only analyzing one vcf, the file will not be bgzipped. If you are providing a directory or design file with multiple vcf files, they will be bgzipped and merged. If they are already bgzipped, please specify `vcfs_gzipped=True` and the bgzip step will be skipped. \n            Sample_Names\n            /path/to/file1.vcf\n            /path/to/file2.vcf\n            /path/to/file3.vcf \n"
      },
      "source": "https://raw.githubusercontent.com/ucsd-ccbb/VAPr/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.881922941929362,
      "result": {
        "original_header": "`download_annovar_databases`",
        "type": "Text_excerpt",
        "value": "`download_annovar_databases()`: this function downloads the databases required to run Annovar to the `.../annovar/humandb/` directory. \nIt will download the databases according to the genome version specified. If your databases are out-of-date, re-running\nthis command will download the latest version of them. If you currently have the required databases, you may get an error. \n_Required_: \n  - None \n_Optional_: \n  - None \n"
      },
      "source": "https://raw.githubusercontent.com/ucsd-ccbb/VAPr/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9105247084207205,
      "result": {
        "original_header": "Create your own filter",
        "type": "Text_excerpt",
        "value": "As long as you have a MongoDB instance running, filtering can be performed through pymongo as shown by the code below. \nIf a list is intended to be created from it, simply add: `filter2 = list(filter2)` \n"
      },
      "source": "https://raw.githubusercontent.com/ucsd-ccbb/VAPr/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8677982509526866,
      "result": {
        "original_header": "Optional Arguments",
        "type": "Text_excerpt",
        "value": "    ... /annovar/\n             annotate_variation.pl\n             coding_change.pl\n             convert2annovar.pl\n             example/    \n             humandb/\n             retrieve_seq_from_fasta.pl\n             table_annovar.pl\n             variants_reduction.pl  \n"
      },
      "source": "https://raw.githubusercontent.com/ucsd-ccbb/VAPr/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8303713510795447,
      "result": {
        "original_header": "Write Options #1: Unfiltered Variants CSV",
        "type": "Text_excerpt",
        "value": "_Required_:\n  - `output_fp`: Name of output file path\n \n"
      },
      "source": "https://raw.githubusercontent.com/ucsd-ccbb/VAPr/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8303713510795447,
      "result": {
        "original_header": "Write Options #2: Filtered Variants CSV",
        "type": "Text_excerpt",
        "value": "  - `output_fp`: Name of output file path.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ucsd-ccbb/VAPr/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8303713510795447,
      "result": {
        "original_header": "Write Options #3: Unfiltered Variants VCF",
        "type": "Text_excerpt",
        "value": "_Required_:\n  - `vcf_out_path`: Name of output file path \n"
      },
      "source": "https://raw.githubusercontent.com/ucsd-ccbb/VAPr/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8284598454699956,
      "result": {
        "original_header": "Write Options #4: Filtered Variants VCF",
        "type": "Text_excerpt",
        "value": "_Required_:\n  - `filtered_variants`: List of filtered variants retrieved by VAPr filters or custom filters.\n  \n  - `vcf_out_path`: Name of output file path.\n```python\n\n# List of rare deleterious variants\nfiltered_variants = dataset.get_rare_deleterious_variants()\n# Write variants to vcf file\ndataset.write_filtered_annotated_vcf(filtered_variants, output_dir + \u201c/myfile.csv\u201d)\n\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/ucsd-ccbb/VAPr/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ucsd-ccbb/VAPr/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2017 UC San Diego Center for Computational Biology & Bioinformatics\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/ucsd-ccbb/VAPr/master/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "parent_header": [
          "VAPr"
        ],
        "type": "Text_excerpt",
        "value": "This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details\n\n<a id='toc'></a>"
      },
      "source": "https://raw.githubusercontent.com/ucsd-ccbb/VAPr/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "VAPr"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "ucsd-ccbb"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 277901,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 170179,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ucsd-ccbb/VAPr/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "AmandaBirmingham",
          "type": "User"
        },
        "date_created": "2017-11-18T00:21:46Z",
        "date_published": "2017-11-18T00:27:20Z",
        "description": "Revised and expanded codebase including updated filters, optimized annotation and querying, and an extensive test suite",
        "html_url": "https://github.com/ucsd-ccbb/VAPr/releases/tag/v3.0",
        "name": "VAPr 3.0",
        "release_id": 8570426,
        "tag": "v3.0",
        "tarball_url": "https://api.github.com/repos/ucsd-ccbb/VAPr/tarball/v3.0",
        "type": "Release",
        "url": "https://api.github.com/repos/ucsd-ccbb/VAPr/releases/8570426",
        "value": "https://api.github.com/repos/ucsd-ccbb/VAPr/releases/8570426",
        "zipball_url": "https://api.github.com/repos/ucsd-ccbb/VAPr/zipball/v3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "carlomazzaferro",
          "type": "User"
        },
        "date_created": "2017-06-13T23:46:53Z",
        "date_published": "2017-06-16T04:37:19Z",
        "description": "- Bug fixes\r\n- New easy to use API\r\n- Order of magnitude optimization",
        "html_url": "https://github.com/ucsd-ccbb/VAPr/releases/tag/2.0",
        "name": "Optimized Parallel Processing of VAPr",
        "release_id": 6733654,
        "tag": "2.0",
        "tarball_url": "https://api.github.com/repos/ucsd-ccbb/VAPr/tarball/2.0",
        "type": "Release",
        "url": "https://api.github.com/repos/ucsd-ccbb/VAPr/releases/6733654",
        "value": "https://api.github.com/repos/ucsd-ccbb/VAPr/releases/6733654",
        "zipball_url": "https://api.github.com/repos/ucsd-ccbb/VAPr/zipball/2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "carlomazzaferro",
          "type": "User"
        },
        "date_created": "2017-01-31T19:08:03Z",
        "date_published": "2017-01-31T21:51:35Z",
        "html_url": "https://github.com/ucsd-ccbb/VAPr/releases/tag/1.0",
        "name": "First Release",
        "release_id": 5320860,
        "tag": "1.0",
        "tarball_url": "https://api.github.com/repos/ucsd-ccbb/VAPr/tarball/1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/ucsd-ccbb/VAPr/releases/5320860",
        "value": "https://api.github.com/repos/ucsd-ccbb/VAPr/releases/5320860",
        "zipball_url": "https://api.github.com/repos/ucsd-ccbb/VAPr/zipball/1.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "carlomazzaferro",
          "type": "User"
        },
        "date_created": "2017-01-27T23:23:49Z",
        "date_published": "2017-01-27T23:27:30Z",
        "description": "- Updated tests for most modules \n- More robust parsing mechanism\n",
        "html_url": "https://github.com/ucsd-ccbb/VAPr/releases/tag/0.2",
        "name": "Tested Release",
        "release_id": 5290803,
        "tag": "0.2",
        "tarball_url": "https://api.github.com/repos/ucsd-ccbb/VAPr/tarball/0.2",
        "type": "Release",
        "url": "https://api.github.com/repos/ucsd-ccbb/VAPr/releases/5290803",
        "value": "https://api.github.com/repos/ucsd-ccbb/VAPr/releases/5290803",
        "zipball_url": "https://api.github.com/repos/ucsd-ccbb/VAPr/zipball/0.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "kmfisch",
          "type": "User"
        },
        "date_created": "2017-01-19T23:47:05Z",
        "date_published": "2017-01-20T00:09:31Z",
        "html_url": "https://github.com/ucsd-ccbb/VAPr/releases/tag/0.1",
        "name": "Init",
        "release_id": 5212942,
        "tag": "0.1",
        "tarball_url": "https://api.github.com/repos/ucsd-ccbb/VAPr/tarball/0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/ucsd-ccbb/VAPr/releases/5212942",
        "value": "https://api.github.com/repos/ucsd-ccbb/VAPr/releases/5212942",
        "zipball_url": "https://api.github.com/repos/ucsd-ccbb/VAPr/zipball/0.1"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Prerequisites",
        "parent_header": [
          "VAPr",
          "Getting started"
        ],
        "type": "Text_excerpt",
        "value": "- MongoDB Community Edition. [Installation instructions](https://docs.mongodb.com/manual/administration/install-community/)\n- Python (2.7 and 3.5 currently supported and tested)\n- [BCFtools](http://www.htslib.org/download/)\n- [Tabix](http://www.htslib.org/download/)\n- [Annovar scripts](http://annovar.openbioinformatics.org/en/latest/user-guide/download/) (optional)\n"
      },
      "source": "https://raw.githubusercontent.com/ucsd-ccbb/VAPr/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-11-04 08:08:23",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 34
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "VAPr",
        "parent_header": [
          "VAPr",
          "Getting started"
        ],
        "type": "Text_excerpt",
        "value": "## Variant Annotation and Prioritization package"
      },
      "source": "https://raw.githubusercontent.com/ucsd-ccbb/VAPr/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Getting started",
        "parent_header": [
          "VAPr"
        ],
        "type": "Text_excerpt",
        "value": "These instructions will get you a copy of the package up and running on your local machine, and will enable you to run annotation jobs \n on any number of vcf files while storing the data in MongoDB. See the [workflow](#workflow) \n\n<a id='setup'></a>"
      },
      "source": "https://raw.githubusercontent.com/ucsd-ccbb/VAPr/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Python 3 and MongoDB",
        "parent_header": [
          "VAPr",
          "Getting started"
        ],
        "type": "Text_excerpt",
        "value": "VAPr is written in Python and stores variant annotations in NoSQL database, using a locally-installed instance of MongoDB. [Installation instructions](https://docs.mongodb.com/manual/administration/install-community/)\n"
      },
      "source": "https://raw.githubusercontent.com/ucsd-ccbb/VAPr/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "BCFtools",
        "parent_header": [
          "VAPr",
          "Getting started"
        ],
        "type": "Text_excerpt",
        "value": "BCFtools will be used for VCF file merging between samples. To download and install:\n    \n    wget https://github.com/samtools/bcftools/releases/download/1.6/bcftools-1.6.tar.bz2\n    tar -vxjf bcftools-1.6.tar.bz2\n    cd bcftools-1.6\n    make\n    make install\n    export PATH=/where/to/install/bin:$PATH\n\nRefer [here](https://github.com/samtools/bcftools/blob/develop/INSTALL) for installation debugging.\n"
      },
      "source": "https://raw.githubusercontent.com/ucsd-ccbb/VAPr/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Tabix",
        "parent_header": [
          "VAPr",
          "Getting started"
        ],
        "type": "Text_excerpt",
        "value": "Tabix and bgzip binaries are available through the HTSlib project: \n\n    wget https://github.com/samtools/htslib/releases/download/1.6/htslib-1.6.tar.bz2\n    tar -vxjf htslib-1.6.tar.bz2\n    cd htslib-1.6\n    make\n    make install\n    export PATH=/where/to/install/bin:$PATH\n\nRefer [here](https://github.com/samtools/htslib/blob/develop/INSTALL) for installation debugging.\n"
      },
      "source": "https://raw.githubusercontent.com/ucsd-ccbb/VAPr/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "ANNOVAR",
        "parent_header": [
          "VAPr",
          "Getting started"
        ],
        "type": "Text_excerpt",
        "value": "(It is possible to proceed without installing ANNOVAR.  Variants will only be annotated with MyVariant.info. In that case, users can skip the next steps and go straight to the section \n**Known Variant Annotation and Storage**)\n\nUsers who wish to annotate novel variants will also need to have a local installation of the popular command-line software \nANNOVAR([1](#Citations)), which VAPr wraps with a Python interface.  If you use ANNOVAR's functionality through VAPr, \nplease remember to cite the ANNOVAR publication (see #1 in [Citations](#Citations))!\n\nThe base ANNOVAR program must be installed by each user individually, since its license agreement does not permit \nredistribution.  Please visit the ANNOVAR download form [here](http://www.openbioinformatics.org/annovar/annovar_download_form.php), \nensure that you meet the requirements for a free license, and fill out the required form. You will then receive an email \nproviding a link to the latest ANNOVAR release file. Download this file (which will usually have a name like \n`annovar.latest.tar.gz`) and place it in the location on your machine in which you would like the ANNOVAR program and \nits data to be installed--the entire disk size of the databases will be around 25 GB, so make sure you have such space \navailable!  \n\n### VAPr\n\nVAPr is available from PyPi.  Once the above requirements have been installed, VAPr itself can be installed by just running:\n\n    pip install VAPr\n\n<a id='tutorial'></a>"
      },
      "source": "https://raw.githubusercontent.com/ucsd-ccbb/VAPr/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Tutorial",
        "parent_header": [
          "VAPr"
        ],
        "type": "Text_excerpt",
        "value": "See this [jupyter notebook](https://github.com/ucsd-ccbb/VAPr/blob/master/VAPr%20Quick-Start%20Guide.ipynb) to create your first annotation job\n\n[Table of contents](#toc)\n<a id='SI'></a>"
      },
      "source": "https://raw.githubusercontent.com/ucsd-ccbb/VAPr/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "VaprAnnotator - Tips on Usage",
        "parent_header": [
          "VAPr",
          "Supplemental Information"
        ],
        "type": "Text_excerpt",
        "value": "An annotation project can be started by providing the API with a small set of information and then running the \n [core methods](#core) provided to spawn annotation jobs. This is done in the following manner:\n \n ```python\n \n# Import core module\nfrom VAPr import vapr_core\nimport os\n\n# Start by specifying the project information\nIN_PATH = \"/path/to/vcf\"\nOUT_PATH = \"/path/to/out\"\nANNOVAR_PATH = \"/path/to/annovar\"\nMONGODB = 'VariantDatabase'\nCOLLECTION = 'Cancer'\n\nannotator = vapr_core.VaprAnnotator(input_dir=IN_PATH,\n                                    output_dir=OUT_PATH,\n                                    mongo_db_name=MONGODB,\n                                    mongo_collection_name=COLLECTION,\n                                    build_ver='hg19',\n                                    vcfs_gzipped=False,\n                                    annovar_install_path=ANNOVAR_PATH)\n ```\n \nThis will allow you to use any of [core methods](#core) in the package. \n"
      },
      "source": "https://raw.githubusercontent.com/ucsd-ccbb/VAPr/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "VAPr",
          "Filtering  Methods"
        ],
        "type": "Text_excerpt",
        "value": " In order to use the filters, proceed as follows:\n \n ```python\nrare_deleterious_variants = dataset.get_rare_deleterious_variants()\n```\n\nThis will return a list of dictionaries, where each dictionary is contains variant containing annotations. \n\n<a id='filts'></a>"
      },
      "source": "https://raw.githubusercontent.com/ucsd-ccbb/VAPr/master/README.md",
      "technique": "header_analysis"
    }
  ]
}