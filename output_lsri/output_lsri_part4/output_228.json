{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/tabdelaal/scRNAseq_Benchmark"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-04-28T22:36:45Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-25T07:50:12Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Bench-marking classification tools for scRNA-seq data "
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Repository description",
        "parent_header": [
          "A comparison of automatic cell identification methods for single-cell RNA-sequencing data"
        ],
        "type": "Text_excerpt",
        "value": "We provide all the scripts to run and evaluate all classifiers, and to reproduce the results introduced in the paper.\n\n\n1. 'Scripts' folder contains a wrapper function to read the data and apply certain classification method.\n2. ```Cross_Validation``` R script can be used to produce training and test indices for cross validation.\n3. ```rank_gene_dropouts``` Python script can be used to apply feature selection using the dropout method, and rank genes accordingly.\n4. ```evaluate``` R script can be used to evaluate the prediction of a certain classifier and obtain scores such as accuracy, median F1-score and % unlabeld cells.\n\nFor more details, please check function documentations.\n"
      },
      "source": "https://raw.githubusercontent.com/tabdelaal/scRNAseq_Benchmark/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9928198952697905,
      "result": {
        "original_header": "A comparison of automatic cell identification methods for single-cell RNA-sequencing data",
        "type": "Text_excerpt",
        "value": "We present a comprehensive evaluation of the performance of state-of-the-art classification methods, in addition to general-purpose classifiers, for automatic cell identification single cell RNA-sequencing datasets. Our goal is to provide the community with a fair evaluation of all available methods to facilitate the users\u2019 choice as well as direct further developments to focus on the challenging aspects of automated cell type identification. (published in genome biology Sep. 2019 https://genomebiology.biomedcentral.com/articles/10.1186/s13059-019-1795-z)\n \n"
      },
      "source": "https://raw.githubusercontent.com/tabdelaal/scRNAseq_Benchmark/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9139159401578751,
      "result": {
        "original_header": "Step 2",
        "type": "Text_excerpt",
        "value": "This command will output the true and predicted cell labels as csv files, as well as the classifier computation time.\n \n"
      },
      "source": "https://raw.githubusercontent.com/tabdelaal/scRNAseq_Benchmark/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9280603686585533,
      "result": {
        "original_header": "Evaluate Marker-based methods using DE genes",
        "type": "Text_excerpt",
        "value": "To evaluate the marker-based methods SCINA, DigitalCellSorter and Garnett using DE genes learned from the data, you may follow these steps: \nThis command will create a ```CV_folds.RData``` file used as input in Step 2 and 3. \nFor each fold use the training data to get the DE genes using the ```DEgenesMAST``` R function, and pass these DE genes to the corresponding method, for example here we use SCINA, to obtain cell prediction for the test data.\n```R\nload('CV_folds.RData')\nData <- read.csv('~/Zheng_sorted/Filtered_DownSampled_SortedPBMC_data',row.names = 1)\nLabels <- as.matrix(read.csv('~/Zheng_sorted/Labels.csv'))\nLabels <- as.vector(Labels[,col_Index])\nData <- Data[Cells_to_Keep,]\nLabels <- Labels[Cells_to_Keep]\n\nfor (i in c(1:n_folds))\n{\n    MarkerGenes <-  DEgenesMAST(t(Data[Train_Idx[[i]],]), Labels[Train_Idx[[i]]], Normalize = TRUE, LogTransform = TRUE)\n    ## write the MarkerGenes into a marker genes file format, depending on the tested method, for example for SCINA\n    write.csv(MarkerGenes, 'MarkerGenes.csv')\n    ## run the SCINA wrapper using these DE marker genes\n    run_SCINA(Data[Test_Idx[[i]],], Labels[Test_Idx[[i]]], 'MarkerGenes.csv', '~/Results/Zheng_sorted/')\n}\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/tabdelaal/scRNAseq_Benchmark/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9714940602976475,
      "result": {
        "original_header": "Snakemake",
        "type": "Text_excerpt",
        "value": "To support future extension of this benchmarking work with new classifiers and datasets, we provide a Snakemake workflow to automate the performed benchmarking analyses (https://github.com/tabdelaal/scRNAseq_Benchmark/tree/snakemake_and_docker).\n \n"
      },
      "source": "https://raw.githubusercontent.com/tabdelaal/scRNAseq_Benchmark/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/tabdelaal/scRNAseq_Benchmark/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 56
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/tabdelaal/scRNAseq_Benchmark/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "tabdelaal/scRNAseq_Benchmark"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A comparison of automatic cell identification methods for single-cell RNA-sequencing data"
      },
      "source": "https://raw.githubusercontent.com/tabdelaal/scRNAseq_Benchmark/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tabdelaal/scRNAseq_Benchmark/master/Snakemake/Dockerfiles/garnett/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/tabdelaal/scRNAseq_Benchmark/master/Snakemake/Dockerfiles/garnett/Dockerfile",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tabdelaal/scRNAseq_Benchmark/master/Snakemake/Dockerfiles/chetah/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/tabdelaal/scRNAseq_Benchmark/master/Snakemake/Dockerfiles/chetah/Dockerfile",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tabdelaal/scRNAseq_Benchmark/master/Snakemake/Dockerfiles/cross_validation/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/tabdelaal/scRNAseq_Benchmark/master/Snakemake/Dockerfiles/cross_validation/Dockerfile",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tabdelaal/scRNAseq_Benchmark/master/Snakemake/Dockerfiles/baseline/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/tabdelaal/scRNAseq_Benchmark/master/Snakemake/Dockerfiles/baseline/Dockerfile",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tabdelaal/scRNAseq_Benchmark/master/Snakemake/Dockerfiles/scvi/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/tabdelaal/scRNAseq_Benchmark/master/Snakemake/Dockerfiles/scvi/Dockerfile",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tabdelaal/scRNAseq_Benchmark/master/Snakemake/Dockerfiles/singlecellnet/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/tabdelaal/scRNAseq_Benchmark/master/Snakemake/Dockerfiles/singlecellnet/Dockerfile",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tabdelaal/scRNAseq_Benchmark/master/Snakemake/Dockerfiles/scid/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/tabdelaal/scRNAseq_Benchmark/master/Snakemake/Dockerfiles/scid/Dockerfile",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tabdelaal/scRNAseq_Benchmark/master/Snakemake/Dockerfiles/singler/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/tabdelaal/scRNAseq_Benchmark/master/Snakemake/Dockerfiles/singler/Dockerfile",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tabdelaal/scRNAseq_Benchmark/master/Snakemake/Dockerfiles/scmap/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/tabdelaal/scRNAseq_Benchmark/master/Snakemake/Dockerfiles/scmap/Dockerfile",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tabdelaal/scRNAseq_Benchmark/master/Snakemake/Dockerfiles/cell_blast/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/tabdelaal/scRNAseq_Benchmark/master/Snakemake/Dockerfiles/cell_blast/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 0.9175969868389732,
      "result": {
        "original_header": "Snakemake",
        "type": "Text_excerpt",
        "value": "To support future extension of this benchmarking work with new classifiers and datasets, we provide a Snakemake workflow to automate the performed benchmarking analyses (https://github.com/tabdelaal/scRNAseq_Benchmark/tree/snakemake_and_docker).\n \n"
      },
      "source": "https://raw.githubusercontent.com/tabdelaal/scRNAseq_Benchmark/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8424998517353579,
      "result": {
        "original_header": "Evaluate Marker-based methods using DE genes",
        "type": "Text_excerpt",
        "value": "Apply the ```Cross_Validation``` R function on the corresponding dataset to obtain fixed training and test cell indices, straitified across different cell types. For example, using the Zheng_sorted dataset\n```R\nCross_Validation('~/TM/Labels.csv', 1, '~/Zheng_sorted/')\n```\n \nFor each fold use the training data to get the DE genes using the ```DEgenesMAST``` R function, and pass these DE genes to the corresponding method, for example here we use SCINA, to obtain cell prediction for the test data.\n```R\nload('CV_folds.RData')\nData <- read.csv('~/Zheng_sorted/Filtered_DownSampled_SortedPBMC_data',row.names = 1)\nLabels <- as.matrix(read.csv('~/Zheng_sorted/Labels.csv'))\nLabels <- as.vector(Labels[,col_Index])\nData <- Data[Cells_to_Keep,]\nLabels <- Labels[Cells_to_Keep]\n\nfor (i in c(1:n_folds))\n{\n    MarkerGenes <-  DEgenesMAST(t(Data[Train_Idx[[i]],]), Labels[Train_Idx[[i]]], Normalize = TRUE, LogTransform = TRUE)\n    ## write the MarkerGenes into a marker genes file format, depending on the tested method, for example for SCINA\n    write.csv(MarkerGenes, 'MarkerGenes.csv')\n    ## run the SCINA wrapper using these DE marker genes\n    run_SCINA(Data[Test_Idx[[i]],], Labels[Test_Idx[[i]]], 'MarkerGenes.csv', '~/Results/Zheng_sorted/')\n}\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/tabdelaal/scRNAseq_Benchmark/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/tabdelaal/scRNAseq_Benchmark/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2019 tabdelaal\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/tabdelaal/scRNAseq_Benchmark/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "scRNAseq_Benchmark"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "tabdelaal"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 151093,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 121413,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 9980,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tabdelaal/scRNAseq_Benchmark/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 02:32:45",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 183
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "General Usage",
        "parent_header": [
          "A comparison of automatic cell identification methods for single-cell RNA-sequencing data"
        ],
        "type": "Text_excerpt",
        "value": "To benchmark and fairly evaluate the performance of different classifiers using benchmark-datasets (Filtered datasets can be downloaded from https://zenodo.org/record/3357167), apply the following steps:\n"
      },
      "source": "https://raw.githubusercontent.com/tabdelaal/scRNAseq_Benchmark/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 3",
        "parent_header": [
          "A comparison of automatic cell identification methods for single-cell RNA-sequencing data",
          "Usage with feature selection"
        ],
        "type": "Text_excerpt",
        "value": "Evaluate the classifier prediction by \n\n```R\nresult <- evaluate('~/Results/TM/scPred_True_Labels.csv', '~/Results/TM/scPred_Pred_Labels.csv')\n```\n\nThis command will return the corresponding accuracy, median F1-score, F1-scores for all cell populations, % unlabeled cells, and confusion matrix.\n"
      },
      "source": "https://raw.githubusercontent.com/tabdelaal/scRNAseq_Benchmark/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 4",
        "parent_header": [
          "A comparison of automatic cell identification methods for single-cell RNA-sequencing data",
          "Usage with feature selection"
        ],
        "type": "Text_excerpt",
        "value": "Evaluate the classifier prediction by \n\n```R\nresult <- evaluate('~/Results/TM/scPred_True_Labels.csv', '~/Results/TM/scPred_Pred_Labels.csv')\n```\n\nThis command will return the corresponding accuracy, median F1-score, F1-scores for all cell populations, % unlabeled cells, and confusion matrix.\n"
      },
      "source": "https://raw.githubusercontent.com/tabdelaal/scRNAseq_Benchmark/master/README.md",
      "technique": "header_analysis"
    }
  ]
}