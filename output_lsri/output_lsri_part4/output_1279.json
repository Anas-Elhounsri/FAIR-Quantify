{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "3. Citing COME",
        "parent_header": [
          "COME --- calculate COding potential from Multiple fEatures."
        ],
        "type": "Text_excerpt",
        "value": "=================\n\nHu L., Xu Z., Hu B. and Lu ZJ, COME: a robust coding potential calculation tool for lncRNA identification and characterization based on multiple features, 2016 \n\n"
      },
      "source": "https://raw.githubusercontent.com/lulab/COME/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/lulab/COME"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "4. Contact",
        "parent_header": [
          "COME --- calculate COding potential from Multiple fEatures."
        ],
        "type": "Text_excerpt",
        "value": "==========\n\nLong Hu <hulongptp@gmail.com>\n"
      },
      "source": "https://raw.githubusercontent.com/lulab/COME/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2015-12-18T08:21:23Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-01-16T23:43:25Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "calculate COding potential from Multiple fEatures"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9555779484642568,
      "result": {
        "original_header": "0. About COME",
        "type": "Text_excerpt",
        "value": "COME (coding potential calculator based on multiple features) is a computational tool that predicts the coding potential for a given transcript. It integrates multiple sequence-derived and experiment-based features using a decompose-compose method, which makes COME\u2019s performance more accurate and robust than other well-known tools. First, COME compose the feature matrix for the given transcripts using the pre-calculated features vectors. Second, COME predict the coding potential by the pre-trained models, using the feature matrix generated in the first step. \nCOME is currently pre-trained for five model species: human (hg19), mouse (mm10), fly (dm3), worm (ce10) and plant (TAIR10). The pre-trained models were avaible in the folder of [bin/models] (https://github.com/lulab/COME/tree/master/bin/models) \nCOME integreated features including GC content, DNA sequence conservation, protein conservation and RNA secondary structure conservation, expression abundance from poly(A)+, poly(A)- and small RNA sequencing, H3K36me3 and H3K4me3 modification. These input features were pre-calculated and avaiable in folder of [bin/HDF5] (https://github.com/lulab/COME/tree/master/bin/HDF5) \nFor users who are not familiar with Linux, we also provide a [webserver](http://RNAfinder.ncrnalab.org/COME), which is still in a beta version. \n"
      },
      "source": "https://raw.githubusercontent.com/lulab/COME/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Download files into sepcific folders.",
        "parent_header": [
          "COME --- calculate COding potential from Multiple fEatures.",
          "1. Installation"
        ],
        "type": "Text_excerpt",
        "value": "1. First, change directory to your working directory, download the source codes from https://github.com/lulab/COME/archive/master.zip and decompress it. Enter the subfolder \"COME-master/bin\" and define the path as the variable `Bin_dir`\n\n\t\t$ unzip\t\t./COME-master.zip;\n\t\t$ cd \t\t./COME-master/bin;\n\t\t$ Bin_dir=`pwd|awk '{print $1}'`;\n\n2. Second, download your species'(Let's say, _human_) feature vector files from onedrive or Tsinghua Cloud ( [see download links above](#pre-requisite) ). These (nine) files need to be placed in the subfolder \"COME-master/bin/HDF5\".\n\n\t\t$ unzip\t./human.feature_vector.HDF5.zip;\n\t\t$ mv\t./human/human.HDF5.*\t$Bin_dir/HDF5;\n\t\n3. Third, download your species' model file from onedrive or Tsinghua Cloud ( [see download links above](#pre-requisite) ). The (one) model file need to be placed in the subfolder \"COME-master/bin/models\".\n\n\t\t$ mv\t./human.model\t$Bin_dir/models;\n\n"
      },
      "source": "https://raw.githubusercontent.com/lulab/COME/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/lulab/COME/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/lulab/COME/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "lulab/COME"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "COME --- calculate COding potential from Multiple fEatures."
      },
      "source": "https://raw.githubusercontent.com/lulab/COME/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lulab/COME/master/bin/Index.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lulab/COME/master/bin/COME_main.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lulab/COME/master/bin/pre_process_gtf.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 0.9791376744300113,
      "result": {
        "original_header": "0. About COME",
        "type": "Text_excerpt",
        "value": "For users who are not familiar with Linux, we also provide a [webserver](http://RNAfinder.ncrnalab.org/COME), which is still in a beta version. \n"
      },
      "source": "https://raw.githubusercontent.com/lulab/COME/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/lulab/COME/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "COME"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "lulab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 17038,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 4781,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 4536,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Rebol",
        "size": 3940,
        "type": "Programming_language",
        "value": "Rebol"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lulab/COME/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Pre-requisite",
        "parent_header": [
          "COME --- calculate COding potential from Multiple fEatures.",
          "1. Installation"
        ],
        "type": "Text_excerpt",
        "value": "1. **Download HDF5 and model files** from [onedrive](https://1drv.ms/f/s!ApoJcQmK8fsKg5MS7NfEUGhahiLLFA) or [Tsinghua Cloud](https://cloud.tsinghua.edu.cn/d/dfbc9a67f9124bda93c6/)\n2. Linux\n3. R (>=2.15.2)\n4. R packages (\"randomForest\" and \"rhdf5\"); You can install these packages by entering R and typing these:\n\n\t\t## Install package \"randomForest\"\n\t\tinstall.packages(\"randomForest\"); \n\t\t## Install package \"rhdf5\"\n\t\tsource(\"http://bioconductor.org/biocLite.R\");biocLite(\"rhdf5\");\n\n"
      },
      "source": "https://raw.githubusercontent.com/lulab/COME/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 06:38:27",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "2. Usage and Examples",
        "parent_header": [
          "COME --- calculate COding potential from Multiple fEatures."
        ],
        "type": "Text_excerpt",
        "value": "\tbash /path/to/bin_subfolder/COME_main.sh /path/to/your/transcripts.gtf\t/path/to/your/output_folder/\t/path/to/bin_subfolder/\tspecies\tmodel;\n  \n_____\n* `/path/to/bin_subfolder/` is the path where you kept downloaded COME's \"bin\" subfolder, i.e., the `$Bin_dir`\n\n* `/path/to/bin_subfolder/COME_main.sh` is COME's main program script.\n\n* `/path/to/your/transcripts.gtf` is your input gtf file. The input gtf file should be as the description of ucsc's [gtf format] (http://genome.ucsc.edu/FAQ/FAQformat.html#format4). In summary, the first field should be chormosome in lower and abbreviate case (e.g., chr1, chrX); the third field should be exactly \"exon\"; the seventh field should be strand (i.e., + or -). The subsequent attribute list must begin with the two mandatory attributes: gene_id \"value\"; transcript_id \"value\". In addition, transcript length should be longer than 50 nucleotides. Any lines of your input file don't match the criteria aboved will be skipped.\n\n* `/path/to/your/output_folder/` is a folder that will be created (if the user didn't create it already) to save your output file \"result.txt\"\n\n* `species` is one of these five names: \"human\", \"mouse\", \"fly\", \"worm\" and \"plant\". It specifies which species' feature vector files should be applied to your calculation\n\n* `model` is one of these ten names: \"human.model\", \"human.NoExpHis.model\", \"mouse.model\", \"mouse.NoExpHis.model\", \"fly.model\", \"fly.NoExpHis.model\", \"worm.model\", \"worm.NoExpHis.model\", \"plant.model\" and \"plant.NoExpHis.model\". It specifies which model should be applied to your calculation. `*.model`, e.g., `human.model`, is the default model trained by multiple sequence-derived and experiment-based features. We also provided `*.NoExpHis.model`, e.g., `human.NoExpHis.model`, which is the model trained by multiple sequence-derived features only.\n\n\n\n______  \n"
      },
      "source": "https://raw.githubusercontent.com/lulab/COME/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "An example:",
        "parent_header": [
          "COME --- calculate COding potential from Multiple fEatures.",
          "2. Usage and Examples"
        ],
        "type": "Text_excerpt",
        "value": "Assuming I want to predict the human test transcripts from the [examples] (https://github.com/lulab/COME/tree/master/examples) folder, `human.test.gtf`. I would work on my home directory `~/` and I want the output of COME stored in a folder named `~/COME_out/`.\n\n1. `~/COME-master.zip` was downloaded to my working directory `~/` from [github] (https://github.com/lulab/COME/archive/master.zip) by clicking the link or wget:\n\n\t\t$ cd ~;\n\t\t$ wget -c --content-disposition   http://github.com/lulab/COME/archive/master.zip;\n\t\t\n2. `~/human.feature_vector.HDF5.zip` was downloaded to my working directory `~/` from onedrive or Tsinghua Cloud ( [see download links above](#pre-requisite) ) or wget:\n\n\t\t$ cd ~;\n\t\t$ wget -c --content-disposition http://lulab.life.tsinghua.edu.cn/RNAfinder/download_files_for_COME/HDF5/human.feature_vector.HDF5.zip\n\n3. `~/human.model` was downloaded to my working directory `~/` from onedrive or Tsinghua Cloud ( [see download links above](#pre-requisite) ) or wget:\n\t\n\t\t$ cd ~;\n\t\t$ wget -c --content-disposition   http://lulab.life.tsinghua.edu.cn/RNAfinder/download_files_for_COME/models/human.model\n\n4. Then run COME by the following commands: \n\n\t\t## Installation and preparison\n\t\t$ cd ~/;\t\t\n\t\t$ unzip\t./COME-master.zip;\n\t\t$ cd \t./COME-master/bin;\n\t\t## Save the path of \"bin\" subfolder to the variable \"$Bin_dir\"\n\t\t$ Bin_dir=`pwd|awk '{print $1}'`;\n\t\t$ cd ~/;\n\t\t$ unzip\t./human.feature_vector.HDF5.zip;\n\t\t$ mv\t./human/human.HDF5.*\t$Bin_dir/HDF5;\n\t\t$ rm -rf\t./human;\n\t\t$ mv\t./human.model\t$Bin_dir/models;\n\t\t## Running COME\n\t\t$ bash $Bin_dir/COME_main.sh\t$Bin_dir/../examples/human.test.gtf\t~/COME_out\t$Bin_dir\thuman\thuman.model;\n\n6. The final output will be stored in `~/COME_out/result.txt`. We can compare it with the example output file `~/human.test.result.txt`. (Notice: the subclass number may be different, because the K-means algorithm used random seed.)\n\n7. Users are recommended to use the absolute path (`/dir1/dir2/file1`) instead of the relative path (`../../file2`).\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/lulab/COME/master/README.md",
      "technique": "header_analysis"
    }
  ]
}