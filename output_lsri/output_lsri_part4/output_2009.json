{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/walaj/VariantBam"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2015-05-21T15:54:14Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-04-11T10:51:58Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Filtering and profiling of next-generational sequencing data using region-specific rules"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Description",
        "type": "Text_excerpt",
        "value": "VariantBam is a tool to extract/count specific sets of sequencing reads from next-generational sequencing files. To save money, \ndisk space and I/O, one may not want to store an entire BAM on disk. In many cases, it would be more efficient to store only those read-pairs or\nreads who intersect some region around the variant locations. Alternatively, if your scientific question is focused on only one aspect of the data (e.g. breakpoints), many \nreads can be removed without losing the information relevant to the problem, and enriching for the signal you are interested in.\n"
      },
      "source": "https://raw.githubusercontent.com/jwalabroad/VariantBam/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Tool comparison",
        "parent_header": [
          "Description"
        ],
        "type": "Text_excerpt",
        "value": "VariantBam packages into a single executable a number of filtering features not easily found using ``samtools`` + ``awk``:\n\n> 1. Filter specifically on read clipping, orientation and insert size (all important for structural variation)\n> 2. Support for considering only high-quality bases when determining read length or clip count\n> 3. [Interval tree][ekg] to efficiently determine if a read overlaps a region\n> 4. Ability to link reads to a genomic region if their mate intersects that region.\n> 5. Provide different rules for different arbitrarily-sized regions, and to provide these regions as common variant files (VCF, MAF, BED)\n> 6. Select reads by matching motifs against a large dictionary using [Aho-Corasick implementation][aho]\n> 7. Count reads that satisfy any number of user-defined properties\n> 8. Selectively strip alignment tags\n> 9. Support for sub-sampling to obtain a BAM file with a coverage limit\n\nVariantBam is implemented in C++ and uses [HTSlib][hlib], a highly optimized C library used as the core of [Samtools][samtools] and [BCFtools][bcf].\n\nTo get a full list of options, run ``variant --help``.\n"
      },
      "source": "https://raw.githubusercontent.com/jwalabroad/VariantBam/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9166283330782065,
      "result": {
        "original_header": "VariantBam: Filtering and profiling of next-generational sequencing data using region-specific rules",
        "type": "Text_excerpt",
        "value": "[Bioinformatics Paper][biop]\nWala, J., C. Zhang, M. Meyerson, R. Beroukhim. VariantBam: filtering and profiling of nextgenerational sequencing data using region-specific rules. 2016. Bioinformatics, doi: 10.1093/bioinformatics/btw111  \n"
      },
      "source": "https://raw.githubusercontent.com/jwalabroad/VariantBam/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9418192248534929,
      "result": {
        "original_header": "Attributions",
        "type": "Text_excerpt",
        "value": "VariantBam is developed and maintained by Jeremiah Wala (jwala@broadinstitute.org) --  Rameen Berkoukhim's lab -- Dana Farber Cancer Institute, Boston, MA.  \nThis project was developed in collaboration with the Cancer Genome Analysis team at the Broad Institute. Particular thanks to:\n* Cheng-Zhong Zhang (Matthew Meyerson Lab)\n* Marcin Imielinski\n* Gad Getz\n* Mara Rosenberg\n* Esther Rheinbay \n* Gordon Saksena \n"
      },
      "source": "https://raw.githubusercontent.com/jwalabroad/VariantBam/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/jwalabroad/VariantBam/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 10
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/walaj/VariantBam/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "walaj/VariantBam"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "VariantBam: Filtering and profiling of next-generational sequencing data using region-specific rules"
      },
      "source": "https://raw.githubusercontent.com/jwalabroad/VariantBam/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jwalabroad/VariantBam/master/autogen.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jwalabroad/VariantBam/master/examples/example.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "I have succesfully built on Unix with GCC-4.8, 4.9 and 5.1\n\n```\ngit clone --recursive https://github.com/jwalabroad/VariantBam.git\ncd VariantBam\n./configure\nmake \n```\n\nTo add support for reading BAMs, etc with HTTPS, FTP, S3, Google cloud, etc, you must compile and link with libcurl.\n```bash\n## set hts to build with libcurl links and hfile_libcurl.c\ncd VariantBam/SeqLib/htslib\n./configure --enable-libcurl \n## compile seqlib with libcurl support\ncd ../../ # back to VariantBam main directory\n./configure LDFLAGS=\"-lcurl -lcrypto\"\nmake \nmake install ## if no root or didn't configure with --prefix, binary is found at src/variant\n\n## test\nvariant gs://isb-cgc-open/ccle/LUSC/DNA-Seq/C836.NCI-H1339.2.bam | head\n```\n"
      },
      "source": "https://raw.githubusercontent.com/jwalabroad/VariantBam/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.972366435288765,
      "result": {
        "original_header": "VariantBam: Filtering and profiling of next-generational sequencing data using region-specific rules",
        "type": "Text_excerpt",
        "value": "**NOTE:** VariantBam recently was updated to use the more universal JSON syntax, and to remove all dependencies on Boost to make installation easier.\n \n"
      },
      "source": "https://raw.githubusercontent.com/jwalabroad/VariantBam/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9981441344550236,
      "result": {
        "original_header": "Attributions",
        "type": "Text_excerpt",
        "value": "[license]: https://github.com/jwalabroad/VariantBam/blob/master/LICENSE \n[hlib]: https://github.com/samtools/htslib \n[aho]: https://github.com/blockchaindev/aho_corasick \n[ekg]: https://github.com/ekg/intervaltree \n[samtools]: https://github.com/samtools/samtools \n[bcf]: https://github.com/samtools/bcftools \n"
      },
      "source": "https://raw.githubusercontent.com/jwalabroad/VariantBam/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/walaj/VariantBam/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Copyright 2016 Jeremiah A. Wala (jwala@broadinstitute.org)\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
      },
      "source": "https://raw.githubusercontent.com/jwalabroad/VariantBam/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "VariantBam"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "walaj"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 78343,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 55474,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 36647,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 6172,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "M4",
        "size": 4058,
        "type": "Programming_language",
        "value": "M4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 1702,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jwalabroad/VariantBam/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "walaj",
          "type": "User"
        },
        "date_created": "2016-10-28T14:01:26Z",
        "date_published": "2017-03-07T23:19:35Z",
        "description": "This release is for a stable version to be associated with the Docker for the PCAWG project in ICGC.",
        "html_url": "https://github.com/walaj/VariantBam/releases/tag/1.4.3",
        "name": "Release for PCAWG docker",
        "release_id": 5670509,
        "tag": "1.4.3",
        "tarball_url": "https://api.github.com/repos/walaj/VariantBam/tarball/1.4.3",
        "type": "Release",
        "url": "https://api.github.com/repos/walaj/VariantBam/releases/5670509",
        "value": "https://api.github.com/repos/walaj/VariantBam/releases/5670509",
        "zipball_url": "https://api.github.com/repos/walaj/VariantBam/zipball/1.4.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "walaj",
          "type": "User"
        },
        "date_created": "2016-09-22T17:13:28Z",
        "date_published": "2016-09-22T17:20:24Z",
        "description": "There was a bug that was recently introduced that affected the tag removal functionality. This provides a patch. This version also adds `--write-trimmed`, which will clear the qual field (to *) and the sequence will be trimmed if a minimum phred score is supplied. Note that this will cause clashes with `samtools` because of the longer CIGAR string than the trimmed sequence, but the functionality is still useful for other operations.\n",
        "html_url": "https://github.com/walaj/VariantBam/releases/tag/1.4.2",
        "name": "Patch to bug in tag removal. Added --write--trimmed",
        "release_id": 4205880,
        "tag": "1.4.2",
        "tarball_url": "https://api.github.com/repos/walaj/VariantBam/tarball/1.4.2",
        "type": "Release",
        "url": "https://api.github.com/repos/walaj/VariantBam/releases/4205880",
        "value": "https://api.github.com/repos/walaj/VariantBam/releases/4205880",
        "zipball_url": "https://api.github.com/repos/walaj/VariantBam/zipball/1.4.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "walaj",
          "type": "User"
        },
        "date_created": "2016-08-27T00:29:38Z",
        "date_published": "2016-08-27T00:59:13Z",
        "description": "Bug fix that fixes motif matching error. Adds OSX and RHEL 64-bit binaries.\n",
        "html_url": "https://github.com/walaj/VariantBam/releases/tag/1.4.1",
        "name": "Motif matching patch",
        "release_id": 3988344,
        "tag": "1.4.1",
        "tarball_url": "https://api.github.com/repos/walaj/VariantBam/tarball/1.4.1",
        "type": "Release",
        "url": "https://api.github.com/repos/walaj/VariantBam/releases/3988344",
        "value": "https://api.github.com/repos/walaj/VariantBam/releases/3988344",
        "zipball_url": "https://api.github.com/repos/walaj/VariantBam/zipball/1.4.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "walaj",
          "type": "User"
        },
        "date_created": "2016-08-24T19:47:51Z",
        "date_published": "2016-08-24T19:50:29Z",
        "description": "This release moves to the new SeqLib core library. SeqLib has more robust support for piping and reading and writing SAM/CRAM/BAM files etc.\n\nSeqLib is also Apache2, so I am making VariantBam Apache2 as well.\n\n*Note that this with this release, I adopted a more samtools-like syntax, with -b now required for writing / streaming a BAM file\n\nPre-compiled binary on RHEL2.6 and GCC-5.1\n[variant2.6.32-642.3.1.el6.x86_64.zip](https://github.com/jwalabroad/VariantBam/files/435568/variant2.6.32-642.3.1.el6.x86_64.zip)\n",
        "html_url": "https://github.com/walaj/VariantBam/releases/tag/1.4.0",
        "name": "SeqLib + Apache2 + Piping Support",
        "release_id": 3966000,
        "tag": "1.4.0",
        "tarball_url": "https://api.github.com/repos/walaj/VariantBam/tarball/1.4.0",
        "type": "Release",
        "url": "https://api.github.com/repos/walaj/VariantBam/releases/3966000",
        "value": "https://api.github.com/repos/walaj/VariantBam/releases/3966000",
        "zipball_url": "https://api.github.com/repos/walaj/VariantBam/zipball/1.4.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "walaj",
          "type": "User"
        },
        "date_created": "2016-07-11T00:23:53Z",
        "date_published": "2016-07-11T00:25:05Z",
        "description": "Major update to parsing script. VariantBam now uses JSON for scripting, rather than custom language.\n\nBoost no longer a dependency\n\nAdded more versatile command line options to reduce need for scripting in most cases\n\nFixed bug with QC report generation\n",
        "html_url": "https://github.com/walaj/VariantBam/releases/tag/1.3.0",
        "name": "VariantBam 1.3.0",
        "release_id": 3625403,
        "tag": "1.3.0",
        "tarball_url": "https://api.github.com/repos/walaj/VariantBam/tarball/1.3.0",
        "type": "Release",
        "url": "https://api.github.com/repos/walaj/VariantBam/releases/3625403",
        "value": "https://api.github.com/repos/walaj/VariantBam/releases/3625403",
        "zipball_url": "https://api.github.com/repos/walaj/VariantBam/zipball/1.3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "walaj",
          "type": "User"
        },
        "date_created": "2016-04-28T19:43:49Z",
        "date_published": "2016-04-28T19:46:34Z",
        "description": "This release contains a statically linked compiled binary for 64bit RHEL-6.7\n",
        "html_url": "https://github.com/walaj/VariantBam/releases/tag/v1.2.1",
        "name": "v1.2.1",
        "release_id": 3122026,
        "tag": "v1.2.1",
        "tarball_url": "https://api.github.com/repos/walaj/VariantBam/tarball/v1.2.1",
        "type": "Release",
        "url": "https://api.github.com/repos/walaj/VariantBam/releases/3122026",
        "value": "https://api.github.com/repos/walaj/VariantBam/releases/3122026",
        "zipball_url": "https://api.github.com/repos/walaj/VariantBam/zipball/v1.2.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "walaj",
          "type": "User"
        },
        "date_created": "2015-08-01T18:32:46Z",
        "date_published": "2015-08-01T18:41:02Z",
        "description": "Easier build with SnowTools\n",
        "html_url": "https://github.com/walaj/VariantBam/releases/tag/v1.2.0",
        "name": "v1.2.0",
        "release_id": 1616984,
        "tag": "v1.2.0",
        "tarball_url": "https://api.github.com/repos/walaj/VariantBam/tarball/v1.2.0",
        "type": "Release",
        "url": "https://api.github.com/repos/walaj/VariantBam/releases/1616984",
        "value": "https://api.github.com/repos/walaj/VariantBam/releases/1616984",
        "zipball_url": "https://api.github.com/repos/walaj/VariantBam/zipball/v1.2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "walaj",
          "type": "User"
        },
        "date_created": "2015-07-07T16:11:01Z",
        "date_published": "2015-07-07T16:12:14Z",
        "description": "Added additional support for profiling and plotting\n",
        "html_url": "https://github.com/walaj/VariantBam/releases/tag/v1.1.0",
        "name": "v1.1.0",
        "release_id": 1505967,
        "tag": "v1.1.0",
        "tarball_url": "https://api.github.com/repos/walaj/VariantBam/tarball/v1.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/walaj/VariantBam/releases/1505967",
        "value": "https://api.github.com/repos/walaj/VariantBam/releases/1505967",
        "zipball_url": "https://api.github.com/repos/walaj/VariantBam/zipball/v1.1.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "walaj",
          "type": "User"
        },
        "date_created": "2015-06-18T21:00:15Z",
        "date_published": "2015-06-18T21:04:09Z",
        "html_url": "https://github.com/walaj/VariantBam/releases/tag/v1.0.2",
        "name": "v1.0.2",
        "release_id": 1434904,
        "tag": "v1.0.2",
        "tarball_url": "https://api.github.com/repos/walaj/VariantBam/tarball/v1.0.2",
        "type": "Release",
        "url": "https://api.github.com/repos/walaj/VariantBam/releases/1434904",
        "value": "https://api.github.com/repos/walaj/VariantBam/releases/1434904",
        "zipball_url": "https://api.github.com/repos/walaj/VariantBam/zipball/v1.0.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "walaj",
          "type": "User"
        },
        "date_created": "2015-06-18T16:44:49Z",
        "date_published": "2015-06-18T16:47:02Z",
        "html_url": "https://github.com/walaj/VariantBam/releases/tag/v1.0.1",
        "name": "v1.0.1",
        "release_id": 1433830,
        "tag": "v1.0.1",
        "tarball_url": "https://api.github.com/repos/walaj/VariantBam/tarball/v1.0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/walaj/VariantBam/releases/1433830",
        "value": "https://api.github.com/repos/walaj/VariantBam/releases/1433830",
        "zipball_url": "https://api.github.com/repos/walaj/VariantBam/zipball/v1.0.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "walaj",
          "type": "User"
        },
        "date_created": "2015-05-22T15:25:06Z",
        "date_published": "2015-05-22T15:36:58Z",
        "html_url": "https://github.com/walaj/VariantBam/releases/tag/v1.0.0",
        "name": "v1.0.0",
        "release_id": 1327850,
        "tag": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/walaj/VariantBam/tarball/v1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/walaj/VariantBam/releases/1327850",
        "value": "https://api.github.com/repos/walaj/VariantBam/releases/1327850",
        "zipball_url": "https://api.github.com/repos/walaj/VariantBam/zipball/v1.0.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 09:02:35",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 74
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick Start",
        "type": "Text_excerpt",
        "value": "```\n## using the included test BAM (HCC1143)\nBAMOUTPUT='-b'\nVariantBam/src/variant test/small.bam -g 'X:1,000,000-1,100,000' --min-mapq 10 $BAMOUTPUT -o mini.bam -v\n\n## can stream in and out (out is binary stream with -b flag)\nsamtools view -h test/small.bam | variant - --min-mapq 10 -b | bamToBed > out.bed\n\n## get help\nVariantBam/src/variant --help\n\n## TL;DR examples\n\n## extract all reads and their pair-mates that overlap SNP sites within 100 bp\nrfile=<BED file, samtools-style string (e.g. \"1:1,000,000-1,000,010\"), or VCF>\nvariant <bam> -l $rfile -P 100 -b -o mini.bam -v\n\n## mask regions (exclude reads and their pair-mates that overlap)\nvariant <bam> -L $rfile -b -o mini.bam -v \n\n## extract high-quality clipped reads (where clip length account for low quality bases)\nvariant <bam> --min-phred 4 --min-clip 5 -o mini.sam -v\n\n## extract reads with high mapq that also contain a large insertion or deletion\n## pipe output\nvariant <bam> --min-mapq 20 --min-ins 10 --min-del 10 | wc -l\n\n## subsample to max-coverage. BAM must be sorted\nvariant <bam> -m 100 -o mini.bam -v -b\n```\n"
      },
      "source": "https://raw.githubusercontent.com/jwalabroad/VariantBam/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example Use 1",
        "parent_header": [
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "or reanalyzed without having to keep the entire BAM. Running VariantBam to extract only read-pairs that overlap these events will allow\nthese regions to be rapidly queried, without having to keep the full BAM record.\n```\n### Extract all read PAIRS that interset with a variant from a VCF\nvariant $bam -l myvcf.vcf -o mini.bam -b\n```\n"
      },
      "source": "https://raw.githubusercontent.com/jwalabroad/VariantBam/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example Use 2",
        "parent_header": [
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "to remove poor quality reads before starting the analysis train. VariantBam handles this by optionally taking into\naccount base-qualities when making a decision whether to keep a sequencing read. For instance, one might \nonly be interested in high quality MAPQ 0 or clipped reads. VariantBam can be \nsetup to apply unique base-quality filters to different regions or across the entire genome, all with one-pass. \n```\n### Extract only high quality reads with >= 50 bases  and MAPQ >= 1 and not duplicated/hardclip/qcfail\n### json\n{\n  \"region1\" : {\n  \"region\"  : \"WG\",\n  \"rules\" : [{\n      \"length\" : [50,1000],\n      \"mapq\" : [1, 60],\n      \"duplicate\" : false,\n      \"hardclip\" : false,\n      \"qcfail\" : false\n   }\n  ]\n   }\n}\n###\nvariant $bam -r example2.json -o mini.bam -b\n```"
      },
      "source": "https://raw.githubusercontent.com/jwalabroad/VariantBam/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example Use 3",
        "parent_header": [
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "to keep only these reads allows the tool to run much faster. This is particurlaly useful for facilitating a more rapid \"build/test\" cycle.\n```\n### Extract clipped, discordant, unmapped and indel reads\n### json\n{\n  \"global\" : { \"nbases\" : [0,0], \"hardclip\" : false, \"supplementary\" : false, \"qcfail\" : false},\n  \"region_wg\" : {\"region\" : \"WG\", \"rules\" : [ \n         { \"mapq\" : [0, 1000], \"clip\" : [5,1000] }, {\"ic\" : true}, {\"ff\" : true}, {\"rf\" : true}, {\"rr\" : true}, { \"ins\" : [1,1000], \"mapq\" : [1,100] }, { \"del\" : [1,1000], \"mapq\" : [1,1000] } \n  ]}\n}\n###\nvariant $bam -r example3.json\n```\n"
      },
      "source": "https://raw.githubusercontent.com/jwalabroad/VariantBam/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example Use 5",
        "parent_header": [
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "VariantBam to extract reads from only these genes, and sending the BAM files to compressed CRAM provides sufficient data reduction\nto allow all of the relevant data to be stored on disk.\n```\n### Grab only reads from predefined regions. Strip unneccessary tags and convert to CRAM for maximum compression\nvariant $bam -l mygenes.bed -C -o mini.cram -s BI,OQ\n```"
      },
      "source": "https://raw.githubusercontent.com/jwalabroad/VariantBam/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example Use 6",
        "parent_header": [
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "VariantBam with the ``motif`` rule will accomplish this with rapid O(n) efficiency for an arbitrarily large motif dictionary (where ``n`` is\nthe length of a read)\n```\n## example6.json\n{\n\"example6\": {\n  \"rules\": [{\"motif\": \"mymotifs.txt\",\n             \"length\": 20 }]\n}\n}\t\t\t\t\t\t\t\t\t  \n##\n\n### \nvariant $bam -r example6.json ## input as a JSON\nvariant $bam --min-length 20 --motif mymotifs.txt ## using command line shortcuts\n```\n"
      },
      "source": "https://raw.githubusercontent.com/jwalabroad/VariantBam/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example Use 7",
        "parent_header": [
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "To remove reads that intersect a region, set the region as an inverse-region. In a VariantBam script, use ``\"exclude\" : true```. For \nquick use on the command line, use ``-L`` or ``-G`` (opposites of ``-l`` and ``-g``).\n```"
      },
      "source": "https://raw.githubusercontent.com/jwalabroad/VariantBam/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "json",
        "parent_header": [
          "Examples",
          "two pass solution"
        ],
        "type": "Text_excerpt",
        "value": "  \"\" : {"
      },
      "source": "https://raw.githubusercontent.com/jwalabroad/VariantBam/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "",
        "parent_header": [
          "Examples",
          "two pass solution"
        ],
        "type": "Text_excerpt",
        "value": "  \"\" : {\n         \"region\" : \"bad.bed\",\n         \"exclude\" : true,\n\t \"matelink\" : true\n       }\n}\n###\nvariant $bam -L bad.bed -o mini.bam -b\n```\n\n##### Example Use 8\nMassive read-pileups can occur at repetitive regions. These can reduced with VariantBam by subsampling to a max-coverage.\n```"
      },
      "source": "https://raw.githubusercontent.com/jwalabroad/VariantBam/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "BAM must be sorted",
        "parent_header": [
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "```\n\n##### Example Use 9\nObtain basic QC stats from a BAM file, or profile how many reads were accepted by each rule\n```"
      },
      "source": "https://raw.githubusercontent.com/jwalabroad/VariantBam/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "use the -x flag to produce no output (profiling only)",
        "parent_header": [
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "Rscript VariantBam/R/BamQCPlot.R -i qcreport.txt -o qcreport.pdf\n```\n\n##### Example Use 10\nA user would like to extract only those reads supporting a particular allele at a variant site. This can be done by combining a small \npoint-region at the variant site with a motif dictionary. \nConsider two alleles G and A at a site (e.g. 1:143250877), along with their adjacent sequences: \nGCAGAAT and GCAAAAT. To extract variant reads supporting the A allele:\n\n```"
      },
      "source": "https://raw.githubusercontent.com/jwalabroad/VariantBam/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "make the motifs file (include reverse complements)",
        "parent_header": [
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "## just look near the variant"
      },
      "source": "https://raw.githubusercontent.com/jwalabroad/VariantBam/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "just look near the variant",
        "parent_header": [
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "r='{\"\":{\"rules\":[{\"motif\":\"motifs.txt\"}]}}'\ng=1:143250877\nvariant <bam> -k $k -g $g -r $r -b -o mini.bam ## with JSON script\nvariant <bam> -k $k -g $g --motif motifs.txt -b -o mini.bam ## using command line shortcut\n```\n\nBecause sequence information is required to match a motif, and reads do not contain the sequence information of their pair-mates, \nextracting all read pairs supporting a particular allele requires a two-pass solution:\n\n```"
      },
      "source": "https://raw.githubusercontent.com/jwalabroad/VariantBam/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "two pass solution",
        "parent_header": [
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "printf \"^@\\n\" >> q.txt ## keep the sam header too\nsamtools view <bam> $k | grep -f q.txt | samtools view - -b > mini.bam\n```\n                                             \nThis can be expanded for an arbitrary number of heterozygous sites, \nfor instance to capture reads from a single haplotype:\n\n```"
      },
      "source": "https://raw.githubusercontent.com/jwalabroad/VariantBam/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "het.json",
        "parent_header": [
          "Examples",
          "two pass solution"
        ],
        "type": "Text_excerpt",
        "value": "  \"A\" : {\n      \"region\" : \"1:132,250,677\"\n      \"rules\" : {[ \"motif\" : \"motifsA.txt\" ]\n       }\n  },\n  \"B\" : {\n      \"region\" : \"1:182,250,325\"\n      \"rules\" : {[ \"motif\" : \"motifsB.txt\" ]\n       }\n  },\n  \n}\n###\nvariant <bam> -r het.json -o mini.bam ## using JSON\nvariant <bam> -g 1:132,250,677 --motif motifsA.txt -g 1:182,250,325 --motif motifsB.txt ##using command line shortcut\n\n```\n\nNote that for the allele-specific extraction, there could be false negatives (reads not extracted) if a read has a sequencing error within the motif. \n\n\nRules Script Syntax\n===================\n\nThis section will describe the syntax used by VariantBam to specify the cascades of rules and regions \napplied to a BAM. Below is an example of a valid VariantBam JSON script:\n\n```bash\n   { \n     \"reg1\" : {\n          \"region\" : \"WG\",\n          \"rules\" : [{RULE_A, RULE_B}, {RULE_C, RULE_D, RULE_E}]\n           }\n   }\n```\n\nThis can be read as \"Accept a read that passes (RULE_A && RULE_B) OR (RULE_C && RULE_D && RULE_E)\".\n\nIf no \"rules\" is supplied, it will default to \"accept every\".\n\n### Region\n\nThe ``region`` keyword marks that what follows is a genomic region, \nwhich is either the keyword ``WG`` for whole genome, or a VCF, MAF, Callstats, BED file, or samtools-style string. If not specified, \nthe default \"WG\" is applied. Regions are \ntreated such that they will include any read who overlaps it, even partially. Optionally,\nyou can specify that your region of interest is a bit bigger than is actually in the file. You can do this by \"padding\"\nthe regions around the sites. For example:\n\n```\n### json\n{ \n\"\" : {\n       \"region\" : \"myvcf.vcf\",\n       \"pad\" : 1000,\n     }\n}"
      },
      "source": "https://raw.githubusercontent.com/jwalabroad/VariantBam/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "command line short-cut",
        "parent_header": [
          "Examples",
          "two pass solution"
        ],
        "type": "Text_excerpt",
        "value": "```\n\nAlternatively, if supplying a region directly with the -l, -L, -g or -G flag, you can specify a padding with the -P flag. Note that this padding must be supplied\nafter a region flag is provided, and will be applied to the last supplied region flag (but with multiple regions, you can provide multiple ``-P`` flags). \n\n``variant <in.bam> -g myvcf.vcf -P 100``\n\nYou can also state that the region applies to reads who don't necessarily overlap the region, but their pair-mate does (called \"mate-linking\"). \nNote that rules that involve pair-mate information not located within the view read (e.g. mate mapq) are not considered.\nMate-linking is particularly useful for extracting all read PAIRS that cover a variant site.\n\n```\n### json\n{ \n\"\" : {\n       \"region\" : \"myvcf.vcf\",\n       \"pad\" : 1000,\n       \"matelinked\" : true,\n     }\n}"
      },
      "source": "https://raw.githubusercontent.com/jwalabroad/VariantBam/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "command line shortcut",
        "parent_header": [
          "Examples",
          "two pass solution"
        ],
        "type": "Text_excerpt",
        "value": "```\n\n```"
      },
      "source": "https://raw.githubusercontent.com/jwalabroad/VariantBam/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "json to remove low (&lt;= 10) MAPQ reads in bad region",
        "parent_header": [
          "Examples",
          "two pass solution"
        ],
        "type": "Text_excerpt",
        "value": "\"\" : {\n       \"region\" : \"blacklist.bed\",\n       \"pad\" : 1000,\n       \"rules\" : [{\"mapq\" : [0, 10]}]\n       \"exclude\" : true\n     }\n}"
      },
      "source": "https://raw.githubusercontent.com/jwalabroad/VariantBam/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "command line shortcut (for pure blacklisting)",
        "parent_header": [
          "Examples",
          "two pass solution"
        ],
        "type": "Text_excerpt",
        "value": "### command line shortcut (for pure blacklisting, with mate linking)"
      },
      "source": "https://raw.githubusercontent.com/jwalabroad/VariantBam/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "command line shortcut (for pure blacklisting, with mate linking)",
        "parent_header": [
          "Examples",
          "two pass solution"
        ],
        "type": "Text_excerpt",
        "value": "```\n\n### Global region\n\nTo reduce redundancy, you can name a region-rule set \\\"global\\\" anywhere in the stack,\nand it will append that rule to everything below. For example, to exclude hardclipped, duplicate, qcfail and \nsupplementary reads in every region, you would do:\n\n```bash\n{\n  \"global\" : {\n  \t      \"rules\" : [{\"hardclip\" : false, \"duplicate\" : false, \"qcfail\" : false, \"supplementary\" : false}]\n             },\n  \"A\" : {\n        \"rules\" : [{\"isize\" : [600, 0]}, {\"clip\" : [10,101], \"mapq\" : [1,60]}]\n       },\n  \"B\" : {\n  \t\"region\" : myvcf.vcf\n   }\n}\n```\n\nwhich keeps hardclipped reads, etc out from both of the subsequent regions (A and B)\n\n### Rules\n\nRules are supplied as a list of criteria that a read must satisfy. VariantBam handles multiple rules in the following way. For each read, VariantBam \nwill cycle through the rules within a region until the read satisfies a rule. When it \ndoes, it includes the read in the output and stops checking. The logic for the entire collection of \nrules is then as follows:\n\n* On a given rule line, the read must satisfy ALL conditions (logical AND)\n\n* Across different rules, the read nead only satisfy ONE rule (logical OR)\n\nBelow is an example which uses the ability of VariantBam to interpret VCFs and BED files,\nand apply rules separately to them.\n\n```bash\n{\n   \"reg1\" : {\n              \"region\" : \"myvcf.vcf\",\n              \"pad\" : 1000,\n\t      \"matelinked\" : true\n            },\n   \"reg2\" : {\n              \"region\" : \"myexonlist.bed\",\n              \"matelinked\" : true,\n              \"rules\" : [{\"isize\" : [600,0], \"mapped\" : true, \"mate_mapped\" : false, \"rg\" : \"H01PE.2\"},\n                         {\"mapped\" : false, \"mate_mapped\" : false},\n                         {\"hardclip\" : true},\n\t\t\t {\"nm\" : [1,101], \"mapq\" : [30, 100]}]\n            }\n}\n\nThe above JSON can be interpreted as a rule-cascade that, in one-pass of the BAM:\n--Near VCF sites (to within 1000 bases)\n   Keep reads interesecting region OR reads with mate-pairs that intersect region\n--In exons:\n   keep reads with: (isize outside of 0, 600 && with readgroup H01PE.2) OR (mapepd and mate unmapped) OR hardclipped OR (NM >= 1 && MAPQ >= 30)\n\n```\n\n###### Range rules\nRange rules can be input as a two-element JSON array (``\"mapq\" : [30, 100]``) or a single value specificying the \nminimum accepted value (``\"mapq\" : 30``). To instead reject reads in this boundary, switch the order. Thus, \n``\"mapq\" : [100, 30]`` accepts only reads with MAPQ < 30 || MAPQ > 100.\n\n###### Flag rules\nFlag rules can be input using keywords like ``\"mapped\" : true`` or more versatily using the raw alginmetn flag ``\"!flag\" : 4``. Use\n``flag`` to set all of the flags that must be turned on, and ``!flag`` for that must be turned off. Thus, ``\"!flag\" : 4``\nrequires that the \"unmapped\" bit be turned off, and so accepts only mapped reads.\n\n###### Motif rules\nA set of motifs can be supplied, so that only reads with (or without) the motif are accepted. A motif file is just a list of sequences in upper case, separated by newlines.\nReverse complements are not automatically considered,\nso these must be explicitly provided. To include reads with a motif, use the ``--motif`` flag for simple rules, or in JSON specify ``\"motif\" : \"motiffile.txt\"``. To\nexclude reads with a motif, use JSON key-value pair: ``\"!motif\" : \"motiffile.txt\"``.\n\nVariant BAM can also filter based on the number of ``N`` bases in a read, with the ``nbases`` key, input as a range rule (``\"nbaes\" : [0,3]``)\n\n###### Tag rules\nFilters can be made based on the value of an alignment tag. Supported tags include \"rg\" (read-group), \"nm\" (number mismatches), and \"xp\" (number of supplementary alignments).\n\n###### Cigar rules\nFilters can be supplied to enforce a min (or max) number of insertions or deletions, or number of clipped reads. Note that this refers to the max element size. e.g. a CIGAR\nof ``10M4D20M2D20M`` will pass the filter ``\"del\" : [0,4]`` but fail the filter ``\"del\" : [5, 100]``. The number of clipped bases is consider after trimming low-quality bases (if ``--min-phred`` is supplied).\n\n###### Subsample rule\nRegion-specific subsampling rates can be applied. For example, in region A you can set ``\"subsample\" : 0.5``, which will remove half of all reads that otherwise passed the other filters. If a\nread falls into two regions, the region listed first in the JSON will apply.\n\n\"\"\n\nCommand Line Usage\n==================\n\nYou can specify simple scripts directly on the command line:\n```bash"
      },
      "source": "https://raw.githubusercontent.com/jwalabroad/VariantBam/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "keep only paired reads, but not duplicates, in mate-linked region around 100 bp window at VCF sites",
        "parent_header": [
          "Examples",
          "two pass solution"
        ],
        "type": "Text_excerpt",
        "value": "```\n\nJSON scripts can also be supplied directly, just make sure to encase in single quotes and remove spaces:\n```bash\nvariant $bam -g WG -r '{\"\":{\"rules\":[{\"motif\":\"mymotifs.txt\"}]}}' -o out.bam\n```\n\nFull list of available JSON rules\n=================================\n\n```\n    #RULE           #EXAMPLE                   #DESCRIPTION OF EXAMPLE / FLAG\n    anyflag         \"anyflag\" : 4              Set the flag bits that, if ON pass read\n    !anyflag        \"!anyflag\" : 4             Set the flag bits that, if OFF pass read\n    allflag         \"allflag\" : 4              Require that all these flag bits be ON\n    !allflag        \"!allflag\" : 4             Require that all these flag bits be OFF\n    motif           \"motif\" : seqs.txt         File containing substrings that must be present in the sequence.\n    !motif          \"!motif\" : seqs.txt        File containing substrings that must NOT be present in the sequence.\n    rg              \"rg\" : \"H01PE.2\"           Limit to just a single read-group \n    duplicate       \"duplicate\" : true         Read must be marked as optical duplicate\n    supp            \"supp\" : false             Read must be primary alignment\n    qcfail          \"qcfail\" : false           Read must note be marked as QC Fail\n    fwd_strand      \"fwd_strand\" : true        Read must be mapped to forward strand\n    rev_strand      \"rev_strand\" : true        Read must be mapped to reverse strand\n    mate_fwd_strand \"mate_fwd_strand\" : true   Mate of read must be mapped to forward strand\n    mate_rev_strand \"mate_rev_strand\" : true   Mate of read must be mapped to reverse strand\n    mapped          \"mapped\" : true            Read must be unmapped\n    mate_mapped     \"mate_mapped\" : true       Mate must be mapped\n    subsample       \"subsample\" : 0.4          Subsample this region to at a certain rate\n    ff              \"ff\" true                  Read pair must have forward-forward orientation\n    rr              \"rr\" : true                Read pair must have reverse-reverse orientation\n    fr              \"fr\" : true                Read pair must have forward-reverse orientation (proper)\n    rf              \"rf\" : true                Read pair must have reverse-forward orientation\n    ic              \"ic\" : true                Read pair must have inter-chromosomal mapping\n    ... ALL RANGE RULES FOLLOW THE 3 INPUT OPTIONS ILLUSTRATED BELOW ... \n    ins             \"ins\"  : [5,101]           Number of inserted bases on the reads (from parsed CIGAR string)\n                    \"ins\" : 5                  ... Take only reads with max insertion size of >= 5\n                    \"ins\" : [101,5]            ... Take only reads with max insertion size NOT in [5,101] (e.g. 0-4)\n    del             \"del\"  : [5,101]           Number of deleted bases relative to reference (from parsed CIGAR string). \n    nm              \"nm\" : [0,4]               NM tag from BAM (number of mismatches). e.g. must be 0-4 inclusive\n    xp              \"xp\" : [0,4]               Number of chimeric aligments, with XP or SA tag from BAM\n    isize           \"isize\" : [100,500]        Insert size, where all insert sizes are converted to positive.\n    len             \"len\" : [80,101]           Length of the read following phred trimming. If phred trimming, don't count hardclips. If not, then HC count to length\n    clip            \"clip\" : [0,5]             Number of clipped bases following phred trimming\n    nbases          \"nbases\" : [0,5]           Removed reads that have within this range of N bases.\n```\n"
      },
      "source": "https://raw.githubusercontent.com/jwalabroad/VariantBam/master/README.md",
      "technique": "header_analysis"
    }
  ]
}