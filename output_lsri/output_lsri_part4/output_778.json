{
  "application_domain": [
    {
      "confidence": 0.880477144035168,
      "result": {
        "type": "String",
        "value": "Graphs"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Illumina/paragraph"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2017-11-24T17:39:25Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-16T13:35:39Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Graph realignment tools for structural variants"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9648943146542907,
      "result": {
        "original_header": "<a name='Introduction'></a>Introduction",
        "type": "Text_excerpt",
        "value": "Accurate genotyping of known variants is a critical for the analysis of whole-genome sequencing data. Paragraph aims to facilitate this by providing an accurate genotyper for Structural Variations with short-read data. \nGenotyping data in this paper can be found at [paper-data/download-instructions.txt](paper-data/download-instructions.txt) \nFor details of population genotyping, please also refer to: \n"
      },
      "source": "https://raw.githubusercontent.com/Illumina/paragraph/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8073959207948989,
      "result": {
        "original_header": "<a name='Installation'></a>Installation",
        "type": "Text_excerpt",
        "value": "Please check [doc/Installation.md](doc/Installation.md) for system requirements and installation instructions.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Illumina/paragraph/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9309778962689306,
      "result": {
        "original_header": "<a name='RunTime'></a>Run time",
        "type": "Text_excerpt",
        "value": "- On a 30x HiSeqX sample, Paragraph typically takes 1-2 seconds to genotype a simple SV in confident regions. \n- If the SV is in a low-complexity region with abnormal read pileups, the running time could vary. \n- For efficiency, it is recommended to manually set the \"-M\" option (maximum allowed read count for a variant) to skip these high-depth regions. We recommend \"-M\" as 20 times of your mean sample depth.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Illumina/paragraph/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9597281846179264,
      "result": {
        "original_header": "<a name='PopulationScaleGenotyping'></a>Population-scale genotyping",
        "type": "Text_excerpt",
        "value": "To efficiently genotype SVs across a population, we recommend doing single-sample mode as follows:\n- Create a manifest for each single sample\n- Run `multigrmpy.py` for each manifest. Be sure to set \"-M\" option for each sample according to its depth.\n- Multithreading (option \"-t\") is highly recommended for population-scale genotyping\n- Merge all `genotypes.vcf.gz` to create a big VCF of all samples. You can use either `bcftools merge` or your custom script.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Illumina/paragraph/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9212183443308224,
      "result": {
        "original_header": "<a name='RunParagraphOnComplexVariants'></a>Run Paragraph on complex variants",
        "type": "Text_excerpt",
        "value": "For more complicated events (e.g. genotype a deletion together with its nearby SNP), you can provide a custimized JSON to paraGRAPH: \nPlease follow the pattern in [example JSON](share/test-data/paragraph/pg-het-ins/pg-het-ins.json) and make sure all required keys are provided. Here is a visualization of this [sample graph](share/test-data/paragraph/pg-het-ins/pg-het-ins.png). \n"
      },
      "source": "https://raw.githubusercontent.com/Illumina/paragraph/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9428260860146026,
      "result": {
        "original_header": "<a name='Documentation'></a>Documentation",
        "type": "Text_excerpt",
        "value": "*    More **information about all tools we provide in this package** can be found in \n    [doc/graph-tools.md](doc/graph-tools.md). \n*   In [doc/graph-models.md](doc/graph-models.md) we describe the graph and genotyping \n    models we implement. \n*    Some developer documentation about our code analysis and testing process can be found in \n    [doc/linting-and-testing.md](doc/linting-and-testing.md). \n*    Procedures for read level alignment validation \n    [doc/validation-with-simulated-reads.md](doc/validation-with-simulated-reads.md). \n*    How we count reads for variants and paths\n    [doc/graph-counting.md](doc/graph-counting.md). \n*    Documentation of genotyping model parameters\n    [doc/genotyping-parameters.md](doc/genotyping-parameters.md). \n*   [Doc/graphs-ashg-2017.pdf](doc/graphs-ashg-2017.pdf) contains the poster about this method we showed at \n    [ASHG 2017](http://www.ashg.org/2017meeting/)\n \n"
      },
      "source": "https://raw.githubusercontent.com/Illumina/paragraph/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9379582378264547,
      "result": {
        "original_header": "<a name='ExternalLinks'></a>External links",
        "type": "Text_excerpt",
        "value": "*   The [Illumina/Polaris](https://github.com/Illumina/Polaris) repository gives the\n    short-read sequencing data we used to test our method in population.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Illumina/paragraph/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9522182974988171,
      "result": {
        "original_header": "<a name='License'></a>License",
        "type": "Text_excerpt",
        "value": "The [LICENSE](LICENSE) file contains information about libraries and other tools we use, \nand license information for these.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Illumina/paragraph/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/Illumina/paragraph/wiki"
      },
      "source": "https://raw.githubusercontent.com/Illumina/paragraph/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Illumina/paragraph/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 28
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Illumina/paragraph/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Illumina/paragraph"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Paragraph: a suite of graph-based genotyping tools"
      },
      "source": "https://raw.githubusercontent.com/Illumina/paragraph/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Illumina/paragraph/master/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/Illumina/paragraph/master/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Illumina/paragraph/master/src/sh/python-tests.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Illumina/paragraph/master/src/sh/format-everything.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Illumina/paragraph/master/src/sh/valgrind-test.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Illumina/paragraph/master/src/sh/illumina-setup.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Illumina/paragraph/master/src/sh/validation/swapReference.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Installation of Paragraph\n\n* [System Requirements](#SystemRequirements)\n\t* [Hardware](#Hardware)\n\t* [Operating systems](#Operatingsystems)\n\t* [Third-party libraries](#ThirdPartyLibraries)\n* [Static Build](#StaticBuild)\n* [Installation](#Installation)\n\t* [Native build](#NativeBuild)\n\t* [From Docker image](#FromDockerImage)\n\n## <a name='SystemRequirements'></a>System Requirements\n\n### <a name='Hardware'></a>Hardware\n\nA standard workstation with at least 8GB of RAM should be sufficient for compilation and testing of the program.\n\n### <a name='Operatingsystems'></a>Operating systems\n\nParagrpah is supported on the following systems:\n\n- Ubuntu 16.04 and CentOS 5-7,\n- macOS 10.11+,\n\nPython 3.6+ is required.\n\nWe recommend using g++ (6.0+), or a recent version of Clang.\n\nWe use the C++11 standard, any Posix compliant compiler supporting this standard\nshould be usable.\n\n### <a name='ThirdPartyLibraries'></a>Third-party libraries\n\nPlease check [requirements](../requirements.txt) for required python modules.\n\nWe have included copies of other dependent libraries in external/. They are:\n- Google Test and Google Mock (v1.8.0)\n- Htslib (v1.9)\n- Spdlog\n\n## <a name='Static Build'></a>Static Build\n\nWe provide a static build that works for GCC 5.2+ under linux environment. No installation is required for the static build.\n\nDownload the static build under \"release\" tag of the github repo.\n\n## <a name='Installation'></a>Installation\n\n### <a name='NativeBuild'></a>Native buid\n\n[Boost libraries](http://www.boost.org) version >= 1.5 is required.\n- We prefer to statically link Boost libraries to Paragraph executables:\n\n  ```bash\n  cd ~\n  wget http://downloads.sourceforge.net/project/boost/boost/1.65.0/boost_1_65_0.tar.bz2\n  tar xf boost_1_65_0.tar.bz2\n  cd boost_1_65_0\n  ./bootstrap.sh\n  ./b2 --prefix=$HOME/boost_1_65_0_install link=static install\n  ```\n\n- To point Cmake to your version of Boost use the `BOOST_ROOT` environment variable:\n\n  ```bash\n  export BOOST_ROOT=$HOME/boost_1_65_0_install\n  ```\n\nOnce you have boost installed, checkout the repository like so:\n\n  ```bash\n  git clone https://github.com/Illumina/paragraph.git\n  cd paragraph-tools\n  ```\n\n  Then create a new directory for the program and compile it there:\n\n  ```bash\n  # Create a separate build folder.\n  cd ..\n  mkdir paragraph-tools-build\n  cd paragraph-tools-build\n\n  # Configure\n  # optional:\n  # export BOOST_ROOT=<path-to-boost-installation>\n  cmake ../paragraph-tools\n  # if this doesn't work, run this instead:\n  # cmake ../paragraph-tools -DCMAKE_CXX_COMPILER=`which g++` -DCMAKE_C_COMPILER=`which gcc` -DBOOST_ROOT=$BOOST_ROOT\n\n  # Make, use -j <n> to use n parallel jobs to build, e.g. make -j4\n  make\n  ```\n\n### <a name='FromDockerImage'></a>From Docker Image\nWe also provide a [Dockerfile](Dockerfile). To build a Docker image, run the following command inside the source\n  checkout folder:\n\n  ```bash\n  docker build .\n  ```\n\n  Once the image is built you can find out its ID like this:\n\n  ```bash\n  docker images\n  ```\n  ```\n  REPOSITORY                             TAG                 IMAGE ID            CREATED             VIRTUAL SIZE\n  <none>                                 <none>              54c7d4015330        16 seconds ago      1.76 GB\n  ```\n \n  Check the below section for how to run Paragraph, and execute this before running:\n\n  ```bash\n  sudo docker run -v `pwd`:/data 54c7d4015330\n  ```\n\n  The current directory can be accessed as `/data` inside the Docker container.\n  \n  The default entry point is `multigrmpy.py`.\n  \n  To override the default entrypoint and get an interactive shell, run:\n\n  ```bash\n  sudo docker run --entrypoint /bin/bash -it 54c7d4015330\n  ```"
      },
      "source": "https://raw.githubusercontent.com/Illumina/paragraph/master/doc/Installation.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 0.8370954643631604,
      "result": {
        "original_header": "<a name='Introduction'></a>Introduction",
        "type": "Text_excerpt",
        "value": "- https://www.illumina.com/science/genomics-research/accurate-genotyping-of-structural-variant.html\n \n"
      },
      "source": "https://raw.githubusercontent.com/Illumina/paragraph/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9990953914248348,
      "result": {
        "original_header": "<a name='Installation'></a>Installation",
        "type": "Text_excerpt",
        "value": "Please check [doc/Installation.md](doc/Installation.md) for system requirements and installation instructions.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Illumina/paragraph/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9367013829214813,
      "result": {
        "original_header": "<a name='RunParagraphOnComplexVariants'></a>Run Paragraph on complex variants",
        "type": "Text_excerpt",
        "value": "If you have multiple events listed in the input JSON, `multigrmpy.py` can help you to run multiple `grmpy` jobs together.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Illumina/paragraph/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Illumina/paragraph/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "genotyping, htslib, structural-variation, variant-calling, vcf"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# PolyForm Strict License 1.0.0\n\n<https://polyformproject.org/licenses/strict/1.0.0>\n\n## Acceptance\n\nIn order to get any license under these terms, you must agree\nto them as both strict obligations and conditions to all\nyour licenses.\n\n## Copyright License\n\nThe licensor grants you a copyright license for the software\nto do everything you might do with the software that would\notherwise infringe the licensor's copyright in it for any\npermitted purpose, other than distributing the software or\nmaking changes or new works based on the software.\n\n## Patent License\n\nThe licensor grants you a patent license for the software that\ncovers patent claims the licensor can license, or becomes able\nto license, that you would infringe by using the software.\n\n## Noncommercial Purposes\n\nAny noncommercial purpose is a permitted purpose.\n\n## Personal Uses\n\nPersonal use for research, experiment, and testing for\nthe benefit of public knowledge, personal study, private\nentertainment, hobby projects, amateur pursuits, or religious\nobservance, without any anticipated commercial application,\nis use for a permitted purpose.\n\n## Noncommercial Organizations\n\nUse by any charitable organization, educational institution,\npublic research organization, public safety or health\norganization, environmental protection organization,\nor government institution is use for a permitted purpose\nregardless of the source of funding or obligations resulting\nfrom the funding.\n\n## Fair Use\n\nYou may have \"fair use\" rights for the software under the\nlaw. These terms do not limit them.\n\n## No Other Rights\n\nThese terms do not allow you to sublicense or transfer any of\nyour licenses to anyone else, or prevent the licensor from\ngranting licenses to anyone else.  These terms do not imply\nany other licenses.\n\n## Patent Defense\n\nIf you make any written claim that the software infringes or\ncontributes to infringement of any patent, your patent license\nfor the software granted under these terms ends immediately. If\nyour company makes such a claim, your patent license ends\nimmediately for work on behalf of your company.\n\n## Violations\n\nThe first time you are notified in writing that you have\nviolated any of these terms, or done anything with the software\nnot covered by your licenses, your licenses can nonetheless\ncontinue if you come into full compliance with these terms,\nand take practical steps to correct past violations, within\n32 days of receiving notice.  Otherwise, all your licenses\nend immediately.\n\n## No Liability\n\n***As far as the law allows, the software comes as is, without\nany warranty or condition, and the licensor will not be liable\nto you for any damages arising out of these terms or the use\nor nature of the software, under any kind of legal claim.***\n\n## Definitions\n\nThe **licensor** is the individual or entity offering these\nterms, and the **software** is the software the licensor makes\navailable under these terms.\n\n**You** refers to the individual or entity agreeing to these\nterms.\n\n**Your company** is any legal entity, sole proprietorship,\nor other kind of organization that you work for, plus all\norganizations that have control over, are under the control of,\nor are under common control with that organization.  **Control**\nmeans ownership of substantially all the assets of an entity,\nor the power to direct its management and policies by vote,\ncontract, or otherwise.  Control can be direct or indirect.\n\n**Your licenses** are all the licenses granted to you for the\nsoftware under these terms.\n\n**Use** means anything you do with the software requiring one\nof your licenses.\n"
      },
      "source": "https://raw.githubusercontent.com/Illumina/paragraph/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "paragraph"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "Illumina"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 937547,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 212669,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 185129,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 30670,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 21254,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 1591,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 1263,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Illumina/paragraph/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "traxexx",
          "type": "User"
        },
        "date_created": "2019-09-24T22:49:09Z",
        "date_published": "2019-09-24T23:26:21Z",
        "description": "Update from our revised manuscript!\r\n\r\n- Update manuscript link and paper data\r\n- BP_DEPTH and BP_NO_GT moved from FT to VCF filter field for better precision\r\n- Interface fix for options, warning message and python tests",
        "html_url": "https://github.com/Illumina/paragraph/releases/tag/v2.4a",
        "name": "Paragraph v2.4a",
        "release_id": 20228549,
        "tag": "v2.4a",
        "tarball_url": "https://api.github.com/repos/Illumina/paragraph/tarball/v2.4a",
        "type": "Release",
        "url": "https://api.github.com/repos/Illumina/paragraph/releases/20228549",
        "value": "https://api.github.com/repos/Illumina/paragraph/releases/20228549",
        "zipball_url": "https://api.github.com/repos/Illumina/paragraph/zipball/v2.4a"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "traxexx",
          "type": "User"
        },
        "date_created": "2019-07-25T06:58:54Z",
        "date_published": "2019-07-25T07:09:28Z",
        "description": "- Add more informative warnings for malformatted VCF\r\n- Idxdepth now ignores ALT contig by default\r\n- Update README for run time and population-scale genotyping",
        "html_url": "https://github.com/Illumina/paragraph/releases/tag/v2.3",
        "name": "Paragraph v2.3",
        "release_id": 18853330,
        "tag": "v2.3",
        "tarball_url": "https://api.github.com/repos/Illumina/paragraph/tarball/v2.3",
        "type": "Release",
        "url": "https://api.github.com/repos/Illumina/paragraph/releases/18853330",
        "value": "https://api.github.com/repos/Illumina/paragraph/releases/18853330",
        "zipball_url": "https://api.github.com/repos/Illumina/paragraph/zipball/v2.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "traxexx",
          "type": "User"
        },
        "date_created": "2019-06-15T03:39:31Z",
        "date_published": "2019-06-15T03:42:45Z",
        "description": "- Add static build in release (require gcc 5.2+, linux system)\r\n- Documentation update",
        "html_url": "https://github.com/Illumina/paragraph/releases/tag/v2.2b",
        "name": "Paragraph v2.2b",
        "release_id": 18013060,
        "tag": "v2.2b",
        "tarball_url": "https://api.github.com/repos/Illumina/paragraph/tarball/v2.2b",
        "type": "Release",
        "url": "https://api.github.com/repos/Illumina/paragraph/releases/18013060",
        "value": "https://api.github.com/repos/Illumina/paragraph/releases/18013060",
        "zipball_url": "https://api.github.com/repos/Illumina/paragraph/zipball/v2.2b"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "traxexx",
          "type": "User"
        },
        "date_created": "2019-05-28T18:56:29Z",
        "date_published": "2019-05-28T18:57:37Z",
        "description": "- Update license to Apache 2.0\r\n- Fix docker entry point and version",
        "html_url": "https://github.com/Illumina/paragraph/releases/tag/v2.2a",
        "name": "Paragraph-v2.2a",
        "release_id": 17637423,
        "tag": "v2.2a",
        "tarball_url": "https://api.github.com/repos/Illumina/paragraph/tarball/v2.2a",
        "type": "Release",
        "url": "https://api.github.com/repos/Illumina/paragraph/releases/17637423",
        "value": "https://api.github.com/repos/Illumina/paragraph/releases/17637423",
        "zipball_url": "https://api.github.com/repos/Illumina/paragraph/zipball/v2.2a"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "traxexx",
          "type": "User"
        },
        "date_created": "2019-05-14T19:00:29Z",
        "date_published": "2019-05-14T19:11:30Z",
        "description": "- Rewrote README. Include our preprint and data\r\n- VCF now output genotypes for all samples in manifest\r\n- Internal htslib updated (v1.8 -> 1.9)\r\n- Fix on padding base issues in `<DEL>`\r\n- Now support `<DUP>` and `<INV>`\r\n- Better error handling in VCF-JSON conversion\r\n- Support for python 3.4 & 3.5\r\n- Temporarily removed the included Boost support from PR #9  and #10 ",
        "html_url": "https://github.com/Illumina/paragraph/releases/tag/v2.2",
        "name": "Paragraph v2.2",
        "release_id": 17350503,
        "tag": "v2.2",
        "tarball_url": "https://api.github.com/repos/Illumina/paragraph/tarball/v2.2",
        "type": "Release",
        "url": "https://api.github.com/repos/Illumina/paragraph/releases/17350503",
        "value": "https://api.github.com/repos/Illumina/paragraph/releases/17350503",
        "zipball_url": "https://api.github.com/repos/Illumina/paragraph/zipball/v2.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "traxexx",
          "type": "User"
        },
        "date_created": "2018-12-31T02:00:12Z",
        "date_published": "2018-12-31T02:03:07Z",
        "description": "Include fixes and optimizations on:\r\n\r\n- Recognition of chrX and Y.\r\n- Better filters for genotypers\r\n- Better depth test method (poisson->normal)",
        "html_url": "https://github.com/Illumina/paragraph/releases/tag/paragraph-v2.1",
        "name": "v2.1 release",
        "release_id": 14748028,
        "tag": "paragraph-v2.1",
        "tarball_url": "https://api.github.com/repos/Illumina/paragraph/tarball/paragraph-v2.1",
        "type": "Release",
        "url": "https://api.github.com/repos/Illumina/paragraph/releases/14748028",
        "value": "https://api.github.com/repos/Illumina/paragraph/releases/14748028",
        "zipball_url": "https://api.github.com/repos/Illumina/paragraph/zipball/paragraph-v2.1"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "VCF format",
        "parent_header": [
          "Paragraph: a suite of graph-based genotyping tools",
          "<a name='InputRequirements'></a>Input requirements"
        ],
        "type": "Text_excerpt",
        "value": "paraGRAPH will independently genotype each entry of the input VCF. You can use either indel-style representation (full REF and ALT allele sequence in 4th and 5th columns) or symbolic alleles, as long as they meet the format requirement of VCF 4.0+.\n\nCurrently we support 4 symbolic alleles:\n- `<DEL>` for deletion\n    - Must have END key in INFO field.\n- `<INS>` for insertion\n    - Must have a key in INFO field for insertion sequence (without padding base). The default key is SEQ.\n    - For blockwise swap, we strongly recommend using indel-style representation, other than symbolic alleles.\n- `<DUP>` for duplication\n    - Must have END key in INFO field. paraGRAPH assumes the sequence between POS and END being duplicated for one more time in the alternative allele.\n- `<INV>` for inversion\n    - Must have END key in INFO field. paraGRAPH assumes the sequence between POS and END being reverse-complemented in the alternative allele.\n"
      },
      "source": "https://raw.githubusercontent.com/Illumina/paragraph/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Sample Manifest",
        "parent_header": [
          "Paragraph: a suite of graph-based genotyping tools",
          "<a name='InputRequirements'></a>Input requirements"
        ],
        "type": "Text_excerpt",
        "value": "Must be tab-deliemited.\n\nRequired columns:\n- id: Each sample must have a unique ID. The output VCF will include genotypes for all samples in the manifest\n- path: Path to the BAM/CRAM file.\n- depth: Average depth across the genome. Can be calculated with bin/idxdepth (faster than samtools).\n- read length: Average read length (bp) across the genome.\n\nOptional columns:\n\n- depth sd: Specify standard deviation for genome depth. Used for the normal test of breakpoint read depth. Default is sqrt(5*depth).\n- depth variance: Square of depth sd.\n- sex: Affects chrX and chrY genotyping. Allow \"male\" or \"M\", \"female\" or \"F\", and \"unknown\" (quotes shouldn't be included in the manifest). If not specified, the sample will be treated as unknown.\n"
      },
      "source": "https://raw.githubusercontent.com/Illumina/paragraph/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 04:45:09",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 150
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "<a name='TestExample'></a>Test example",
        "parent_header": [
          "Paragraph: a suite of graph-based genotyping tools",
          "<a name='RunParagraphFromVCF'></a>Run Paragraph from VCF"
        ],
        "type": "Text_excerpt",
        "value": "After installation, run `multigrmpy.py` script from the build/bin directory on an example dataset as follows:\n\n```bash\npython3 bin/multigrmpy.py -i share/test-data/round-trip-genotyping/candidates.vcf \\\n                          -m share/test-data/round-trip-genotyping/samples.txt \\\n                          -r share/test-data/round-trip-genotyping/dummy.fa \\\n                          -o test \\\n```\n\nThis runs a simple genotyping example for two test samples.\n*  **candidates.vcf**: this specifies candidate SV events in a vcf format.\n*  **samples.txt**: Manifest that specifies some test BAM files. Tab or comma delimited.\n*  **dummy.fa** a short dummy reference which only contains `chr1`\n\nThe output folder `test` then contains gzipped json for final genotypes:\n\n```bash\n$ tree test\n```\n```\ntest\n\u251c\u2500\u2500 grmpy.log            #  main workflow log file\n\u251c\u2500\u2500 genotypes.vcf.gz     #  Output VCF with individual genotypes\n\u251c\u2500\u2500 genotypes.json.gz    #  More detailed output than genotypes.vcf.gz\n\u251c\u2500\u2500 variants.vcf.gz      #  The input VCF with unique ID from Paragraph\n\u2514\u2500\u2500 variants.json.gz     #  The converted graphs from input VCF (no genotypes)\n```\n\nIf successful, the last 3 lines of genotypes.vcf.gz will the same as in [expected file](share/test-data/round-trip-genotyping/expected-vcf-record.txt).\n"
      },
      "source": "https://raw.githubusercontent.com/Illumina/paragraph/master/README.md",
      "technique": "header_analysis"
    }
  ]
}