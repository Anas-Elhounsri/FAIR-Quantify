{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "format": "bibtex",
        "type": "File_dump",
        "value": "1   ***************************************************************************\nAbyzov A, Urban AE, Snyder M, Gerstein M.\n\nCNVnator: an approach to discover, genotype, and characterize typical and atypical CNVs from family and population genome sequencing.\n\nGenome Res. 2011 Jun;21(6):974-84. doi: 10.1101/gr.114876.110.\n\n\n2   ***************************************************************************\n Mills RE, Walter K, Stewart C, Handsaker RE, Chen K, Alkan C, Abyzov A, Yoon SC, Ye K, et al.\n\nMapping copy number variation by population-scale genome sequencing.\n\nNature. 2011 Feb 3;470(7332):59-65. doi: 10.1038/nature09708.\n\n\n3   ***************************************************************************\nSudmant PH, Rausch T, Gardner EJ, Handsaker RE, Abyzov A, Huddleston J, Zhang Y, Ye K, et al.\n\nAn integrated map of structural variation in 2,504 human genomes.\n\nNature. 2015 Oct 1;526(7571):75-81. doi: 10.1038/nature15394.\n"
      },
      "source": "https://raw.githubusercontent.com/abyzovlab/CNVnator/master/CITATION",
      "technique": "file_exploration"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/abyzovlab/CNVnator"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contact Us",
        "parent_header": [
          "README"
        ],
        "type": "Text_excerpt",
        "value": "Please send your comments and suggestions to abyzov.alexej@mayo.edu\n"
      },
      "source": "https://raw.githubusercontent.com/abyzovlab/CNVnator/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2014-07-02T01:46:50Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-30T15:17:23Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "a tool for CNV discovery and genotyping from depth-of-coverage by mapped reads"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9325613556215689,
      "result": {
        "original_header": "2.1 EXTRACTING READ MAPPING FROM BAM/SAM FILES",
        "type": "Text_excerpt",
        "value": "\nChromosome names must be specified the same way as they are described in the sam/bam\nheader, e.g., chrX or X. One can specify multiple chromosomes separated by\nspace. If no chromosome is specified, read mapping is extracted for all chromosomes\nin the sam/bam file. Note that this would require machines with a large physical\nmemory of at least 7Gb. Extracting read mapping for subsets of chromosomes is a way\naround this issue. Also note that the root file is not being overwritten. \nfor bam files with a header like this:  \n@HD VN:1.4    GO:none  SO:coordinate  \n@SQ SN:1      LN:249250621  \n@SQ SN:2      LN:243199373  \n@SQ SN:3      LN:198022430  \n...   \nor\n```\n./cnvnator -root NA12878.root -chrom chr1 chr2 chr3 -tree NA12878_ali.bam\n```\nfor bam files with a header like this:  \n@HD VN:1.4    GO:none  SO:coordinate  \n@SQ SN:chr1   LN:249250621  \n@SQ SN:chr2   LN:243199373  \n@SQ SN:chr3   LN:198022430  \n...  \nExample:\n```\n./cnvnator -root NA12878.root -chrom 4 5 6 -tree NA12878_ali.bam\n./cnvnator -root NA12878.root -chrom 7 8 9 -tree NA12878_ali.bam\n```\nis equivalent to\n```\n./cnvnator -root NA12878.root -chrom 4 5 6 7 8 9 -tree NA12878_ali.bam\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/abyzovlab/CNVnator/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9889656026751801,
      "result": {
        "original_header": "2.2 GENERATING A READ DEPTH HISTOGRAM",
        "type": "Text_excerpt",
        "value": "This step is not memory consuming and so can be done for all chromosomes at once. \nIt can also be carried for a subset of chromosomes. \nFiles with individual chromosome sequences (.fa) are required and should reside in the \ncurrent directory or in the directory specified by the -d option. \nFiles should be named as: chr1.fa, chr2.fa, etc. \n"
      },
      "source": "https://raw.githubusercontent.com/abyzovlab/CNVnator/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9684553691045461,
      "result": {
        "original_header": "2.3 CALCULATING STATISTICS",
        "type": "Text_excerpt",
        "value": "This step must be completed before proceeding to partitioning and CNV calling. \n"
      },
      "source": "https://raw.githubusercontent.com/abyzovlab/CNVnator/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9705431544490207,
      "result": {
        "original_header": "2.4 RD SIGNAL PARTITIONING",
        "type": "Text_excerpt",
        "value": "Option `-ngc` specifies not to use GC corrected RD signal. Partitioning is the most time consuming step.\n \n"
      },
      "source": "https://raw.githubusercontent.com/abyzovlab/CNVnator/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9940760274877392,
      "result": {
        "original_header": "2.5 CNV CALLING",
        "type": "Text_excerpt",
        "value": "normalized_RD -- read depth normalized to 1.  \ne-val1        -- is calculated using t-test statistics.  \ne-val2        -- is from the probability of RD values within the region to be in\nthe tails of a gaussian distribution describing frequencies of RD values in bins.  \ne-val3        -- same as e-val1 but for the middle of CNV  \ne-val4        -- same as e-val2 but for the middle of CNV  \nq0            -- fraction of reads mapped with q0 quality \n"
      },
      "source": "https://raw.githubusercontent.com/abyzovlab/CNVnator/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8672632109117004,
      "result": {
        "original_header": "2.7 MERGING ROOT FILES",
        "type": "Text_excerpt",
        "value": "```\n./cnvnator -root out.root [-chrom name1 ...] -merge file1.root ...\n```\nMerging can be used when combining read mappings extracted from multiple files.  \nNote: histogram generation, statistics calculation, signal partitioning, and\nCNV calling should be completed/redone after merging. \n"
      },
      "source": "https://raw.githubusercontent.com/abyzovlab/CNVnator/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.877703337681205,
      "result": {
        "original_header": "3. Importing VCF data",
        "type": "Text_excerpt",
        "value": "If chromosome names are not specified, data for all chromosomes from file.vcf.gz will be imported. If \nyou would like to add or remove the \"chr\" prefix from your chromosome names, use options `-addchr` or `-rmchr` respectively. \nIt is important that chromosome names in the vcf file and the SAM/BAM file match.  \n"
      },
      "source": "https://raw.githubusercontent.com/abyzovlab/CNVnator/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9183806241910093,
      "result": {
        "original_header": "Additional notes",
        "type": "Text_excerpt",
        "value": "For genotyping of multiple regions one can use input piping, e.g.,\n```\n./cnvnator -root NA12878.root -genotype 100 << EOF\n12:11396601-11436500\n22:20999401-21300400\nexit\nEOF\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/abyzovlab/CNVnator/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8839883653143276,
      "result": {
        "original_header": "4.2 Plotting B-allele frequency (BAF)",
        "type": "Text_excerpt",
        "value": "To plot BAF data along RD use baf option in view mode:\n```\n./cnvnator -root file.root -view bin_size\n\n>1:1-200000000 baf\n```\n \nThe resulting output plot has two panels. On the uper panel, black line corresponds to binned RD\nsignal, green to segmentation, and red to calls. On the bottom panel each dot corresponds to BAF \nvalue of the SNPs. Colors represent following:\n \n* black - homozygous (1/1 or 1|1) SNPs in P-region of the strict mask,\n* grey - homozygous (1/1 or 1|1) SNPs out of P-region of the strict mask,\n* blue - heterozygous (0/1 or 0|1) SNPs in P-region of the strict mask,\n* cyan - heterozygous (0/1 or 0|1) SNPs out of P-region of the strict mask,\n* red - heterozygous (1|0) SNPs in P-region of the strict mask,\n* orange - heterozygous (1|0) SNPs out of P-region of the strict mask.\n \n"
      },
      "source": "https://raw.githubusercontent.com/abyzovlab/CNVnator/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9672874646479537,
      "result": {
        "original_header": "plotbaf.py",
        "type": "Text_excerpt",
        "value": "* BAF value for heterozygous SNPs.\n* Likelihood function. Light dots on the imagemap represent the most likely value of BAF at each bin.\n* Red line represents a distance between maxima positions in likelihood function that is equivalent\n  to twice the absolute difference between most likely BAF value and 0.5. Blue dots represent the ratio\n  between the value of the likelihood function at 0.5 and its maximum value.\n* Green dots and blue error-bars correspond to mean MAF and standard deviation per bin,\n  respectively. Bin size is 100k base pairs.\n \n"
      },
      "source": "https://raw.githubusercontent.com/abyzovlab/CNVnator/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9711057928793418,
      "result": {
        "original_header": "plotrdbaf.py",
        "type": "Text_excerpt",
        "value": "* Read depth (RD) signal.\n* BAF value for heterozygous SNPs.\n* Likelihood function. Light dots on the imagemap represent the most likely value of BAF at each bin.\n* Red line represents a distance between maxima positions in likelihood function that is equivalent\n  to twice the absolute difference between most likely BAF value and 0.5. Blue dots represent the ratio\n  between the value of the likelihood function at 0.5 and its maximum value.\n* Green dots and blue error-bars correspond to mean MAF and standard deviation per bin,\n  respectively. Bin size is 100k base pairs.\n \n"
      },
      "source": "https://raw.githubusercontent.com/abyzovlab/CNVnator/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8846703253031227,
      "result": {
        "original_header": "5. Exporting CNV calls as VCFs",
        "type": "Text_excerpt",
        "value": "In order to export your CNV calls as a VCF file, use the script `cnvnator2VCF.pl` as\n```\ncnvnator2VCF.pl -prefix study1 -reference GRCh37 sample1.cnvnator.out /path/to/individual/fasta_files\n```\n \n-prefix specifies a prefix string you want to append to the ID field in your output VCF. For e.g., if you set your -prefix as \"study1\", then your resulting ID column will be study1_CNVnator_del_1, study1_CNVnator_del_2 etc. \n-reference stands for the name of reference genome you used, for e.g., GRCh37, hg19 etc. \ngenome_dir is the directory containing your individual reference fasta files such as 1.fa, 2.fa etc. (or chr1.fa, chr2.fa etc.)\n \n"
      },
      "source": "https://raw.githubusercontent.com/abyzovlab/CNVnator/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/abyzovlab/CNVnator/wiki"
      },
      "source": "https://raw.githubusercontent.com/abyzovlab/CNVnator/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/abyzovlab/CNVnator/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 66
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/abyzovlab/CNVnator/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "abyzovlab/CNVnator"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "README"
      },
      "source": "https://raw.githubusercontent.com/abyzovlab/CNVnator/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/abyzovlab/CNVnator/master/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/abyzovlab/CNVnator/master/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick start guide",
        "parent_header": [
          "README"
        ],
        "type": "Text_excerpt",
        "value": "```\n# Extract read mapping \n$ ./cnvnator -root file.root -tree file.bam -chrom 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\\\n17 18 19 20 21 22 X Y\n  OR\n$ ./cnvnator -root file.root -tree file.bam -chrom $(seq 1 22) X Y\n  OR\n$ ./cnvnator -root file.root -tree file.bam -chrom chr1 chr2 chr3 chr4 chr5 chr6 chr7 chr8\\\nchr9 chr10 chr11 chr12 chr13 chr14 chr15 chr16 chr17 chr18 chr19 chr20 chr21 chr22 chrX chrY\n  OR\n$ ./cnvnator -root file.root -tree file.bam -chrom $(seq -f 'chr%g' 1 22) chrX chrY\n  # If option -chrom is not used all chromosomes from bam file will be extracted.\n\n# Generate histogram\n$ ./cnvnator -root file.root -his 1000 -d dir_with_genome_fa/\n  OR\n$ ./cnvnator -root file.root -his 1000 -fasta file_genome.fa.gz\n  OR\n$ ./cnvnator -root file.root -his 1000 -chrom 1 2 3 4 -fasta file_genome.fa.gz\n\n# Calculate statistics\n$ ./cnvnator -root file.root -stat 1000 \n\n# Partition\n$ ./cnvnator -root file.root -partition 1000\n\n# Call CNVs\n$ ./cnvnator -root file.root -call 1000\n\n# Import SNP data\n$ ./cnvnator -root file.root -vcf file.vcf.gz\n  OR\n$ ./cnvnator -root file.root -vcf file.vcf.gz -addchr\n  # Options -addchr or -rmchr can be used to add or remove the \"chr\" prefix from \n  # chromosome names in vcf file to match chromosom names from bam file. \n\n# Import mask data\n$ ./cnvnator -root file.root -mask mask.fa.gz\n  OR\n$ ./cnvnator -root file.root -mask mask.fa.gz -addchr\n  \n# Generate SNP histograms\n$ ./cnvnator -root file.root -baf 10000\n\n# Ploting\n$ ./cnvnator -root file.root -view 10000\n>1:1M-50M\n>1:1M-50M baf\n\n# List root file content\n$ ./cnvnator -root file.root -ls\n\n# Copy RD and SNP data to new root file\n$ ./cnvnator -root file.root -cptrees new_file.root\n\n# Ploting RD and BAF whole genome circular plots using python tool:\n$ ./plotcircular.py file.root\n\n```\n"
      },
      "source": "https://raw.githubusercontent.com/abyzovlab/CNVnator/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation from release zip file (recommended)",
        "parent_header": [
          "README",
          "1. Compilation"
        ],
        "type": "Text_excerpt",
        "value": "See [INSTALL](INSTALL) for complete details. \n"
      },
      "source": "https://raw.githubusercontent.com/abyzovlab/CNVnator/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation from github",
        "parent_header": [
          "README",
          "1. Compilation"
        ],
        "type": "Text_excerpt",
        "value": "```\ngit clone https://github.com/abyzovlab/CNVnator.git\n\ncd CNVnator\n\nln -s /path/to/src/samtools samtools\n\nmake\n```\n\nIf make doesn't work, try `\"make OMP=no\"` which will disable parallel support.\n"
      },
      "source": "https://raw.githubusercontent.com/abyzovlab/CNVnator/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installing with Yeppp support",
        "parent_header": [
          "README",
          "1. Compilation"
        ],
        "type": "Text_excerpt",
        "value": "[Yeppp](http://www.yeppp.info/) is a library which provides high-performance implementations of math functions.\n\nTo install with Yeppp support, download Yeppp from [here](http://bitbucket.org/MDukhan/yeppp/downloads/yeppp-1.0.0.tar.bz2)\nand extract it to a location of your choice. Set `YEPPPLIBDIR` and `YEPPPINCLUDEDIR` directories appropriately. \n\nTypically, for Linux-based systems on x86-64, `YEPPPLIBDIR` will be yeppp-1.0.0/binaries/linux/x86_64/ and `YEPPPINCLUDEDIR` will be\nyeppp-1.0.0/library/headers. \n\nTo build, type  \n`make YEPPPLIBDIR=... YEPPPINCLUDEDIR=...`  \n\nTo disable OpenMP, add `OMP=no` to the make command.\n"
      },
      "source": "https://raw.githubusercontent.com/abyzovlab/CNVnator/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9446719294481699,
      "result": {
        "original_header": "2.1 EXTRACTING READ MAPPING FROM BAM/SAM FILES",
        "type": "Text_excerpt",
        "value": "\n-root out.root  -- specifies output ROOT file. See ROOT package documentation.  \n-chrom name1 ... -- specifies chromosome name(s).  \n-tree file1.bam ...  -- specifies bam file(s) names.\n-lite -- use this option to produce a \"lighter\" (smaller) root file. \n\nExample:\n```\n./cnvnator -root NA12878.root -chrom 1 2 3  -tree NA12878_ali.bam\n```\n \nor\n```\n./cnvnator -root NA12878.root -chrom chr1 chr2 chr3 -tree NA12878_ali.bam\n```\nfor bam files with a header like this:  \n@HD VN:1.4    GO:none  SO:coordinate  \n@SQ SN:chr1   LN:249250621  \n@SQ SN:chr2   LN:243199373  \n@SQ SN:chr3   LN:198022430  \n...  \nExample:\n```\n./cnvnator -root NA12878.root -chrom 4 5 6 -tree NA12878_ali.bam\n./cnvnator -root NA12878.root -chrom 7 8 9 -tree NA12878_ali.bam\n```\nis equivalent to\n```\n./cnvnator -root NA12878.root -chrom 4 5 6 7 8 9 -tree NA12878_ali.bam\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/abyzovlab/CNVnator/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8957098637152642,
      "result": {
        "original_header": "2.3 CALCULATING STATISTICS",
        "type": "Text_excerpt",
        "value": "```\n$ ./cnvnator -root file.root [-chrom name1 ...] -stat bin_size\n``` \nThis step must be completed before proceeding to partitioning and CNV calling. \n"
      },
      "source": "https://raw.githubusercontent.com/abyzovlab/CNVnator/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.818655497783225,
      "result": {
        "original_header": "2.4 RD SIGNAL PARTITIONING",
        "type": "Text_excerpt",
        "value": "```\n$ ./cnvnator -root file.root [-chrom name1 ...] -partition bin_size [-ngc]\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/abyzovlab/CNVnator/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9568147045649669,
      "result": {
        "original_header": "2.5 CNV CALLING",
        "type": "Text_excerpt",
        "value": "Calls are printed to STDOUT by default. You may redirect them to a file using the redirect operator > \n"
      },
      "source": "https://raw.githubusercontent.com/abyzovlab/CNVnator/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9584696325478188,
      "result": {
        "original_header": "3. Importing VCF data",
        "type": "Text_excerpt",
        "value": "To import variant data from VCF file use following option:\n```\n./cnvnator -root file.root [-chrom name1 ...] [-rmchr | -addchr] -vcf file.vcf.gz\n```\n \nIf chromosome names are not specified, data for all chromosomes from file.vcf.gz will be imported. If \nyou would like to add or remove the \"chr\" prefix from your chromosome names, use options `-addchr` or `-rmchr` respectively. \nIt is important that chromosome names in the vcf file and the SAM/BAM file match.  \nTo mark known SNPs from the SNP database:\n```\n./cnvnator -root file.root [-chrom name1 ...] [-rmchr | -addchr] -idvar databasefile.vcf.gz\n```\n \n\nTo mark variants based on genome accessibility using mask file from the 1000 Genomes Project:\n```\n./cnvnator -root file.root [-chrom name1 ...] [-rmchr | -addchr] -mask maskfile.fa.gz\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/abyzovlab/CNVnator/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9799380165959363,
      "result": {
        "original_header": "4.1 Visualizing specified regions",
        "type": "Text_excerpt",
        "value": "Once prompted, enter a genomic region, e.g.,\n```\n>12:11396601-11436500\n or\n>chr12:11396601-11436500\n or \n>12 11396601 11436500\n or\n>chr12 11396601 11436500\n```\nAdditionally, one can specify the length of flanking regions (default is 10 kb) to\nbe displayed as well, e.g.,\n```\n>12:11396601-11436500 100000\n or\n>chr12:11396601-11436500 100000\n or\n>12 11396601 11436500 100000\n or\n>chr12 11396601 11436500 100000\n```\nOne can also perform instant genotyping by adding the word 'genotype', e.g.,\n```\n>12:11396601-11436500 genotype\n or\n>chr12:11396601-11436500 genotype\n or\n>12 11396601 11436500 genotype\n or\n>chr12 11396601 11436500 genotype\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/abyzovlab/CNVnator/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9722737841042874,
      "result": {
        "original_header": "plotcircular.py",
        "type": "Text_excerpt",
        "value": "Required arguments:\n* root\\_file: cnvnator root file name \n"
      },
      "source": "https://raw.githubusercontent.com/abyzovlab/CNVnator/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.926370264779171,
      "result": {
        "original_header": "5. Exporting CNV calls as VCFs",
        "type": "Text_excerpt",
        "value": "In order to export your CNV calls as a VCF file, use the script `cnvnator2VCF.pl` as\n```\ncnvnator2VCF.pl -prefix study1 -reference GRCh37 sample1.cnvnator.out /path/to/individual/fasta_files\n```\n \n-prefix specifies a prefix string you want to append to the ID field in your output VCF. For e.g., if you set your -prefix as \"study1\", then your resulting ID column will be study1_CNVnator_del_1, study1_CNVnator_del_2 etc. \n-reference stands for the name of reference genome you used, for e.g., GRCh37, hg19 etc. \n"
      },
      "source": "https://raw.githubusercontent.com/abyzovlab/CNVnator/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999970528800417,
      "result": {
        "original_header": "6. Python module: Read CNVnator data from root file",
        "type": "Text_excerpt",
        "value": "Use python module pytools.io to extract CNVnator data from root file.\n```\nimport pytools.io\nio=pytools.io.IO(\"file.root\")\npositions,rd=x.get_signal(\"1\",100000,\"RD\")\npositions2,phased_baf=x.get_signal(\"1\",100000,\"SNP baf\",flag=pytools.io.FLAG_USEHAP|pytools.io.FLAG_USEMASK)\npositions,ybins,likelihood=x.get_signal_2d(\"1\",100000,\"SNP likelihood\")\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/abyzovlab/CNVnator/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.892115044456094,
      "result": {
        "original_header": "3. Importing VCF data",
        "type": "Text_excerpt",
        "value": "To import variant data from VCF file use following option:\n```\n./cnvnator -root file.root [-chrom name1 ...] [-rmchr | -addchr] -vcf file.vcf.gz\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/abyzovlab/CNVnator/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8173795405272778,
      "result": {
        "original_header": "4.2 Plotting B-allele frequency (BAF)",
        "type": "Text_excerpt",
        "value": "To plot BAF data along RD use baf option in view mode:\n```\n./cnvnator -root file.root -view bin_size\n\n>1:1-200000000 baf\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/abyzovlab/CNVnator/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8448300148841189,
      "result": {
        "original_header": "plotbaf.py",
        "type": "Text_excerpt",
        "value": "Plot BAF data with python tool plotbaf.py (requires numpy, matplotlib installed):\n```\n./plotbaf.py [-h] [-bs BINSIZE] [-res RESOLUTION] [-o SAVE_FILE] [-t TITLE]\n             [-nomask] [-useid] root_file region\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/abyzovlab/CNVnator/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8164996478561654,
      "result": {
        "original_header": "plotrdbaf.py",
        "type": "Text_excerpt",
        "value": "Plot RD and BAF data with python tool plotrdbaf.py:\n```\n./plotrdbaf.py [-h] [-bs BINSIZE] [-rdbs RDBINSIZE] [-res RESOLUTION]\n               [-o SAVE_FILE] [-t TITLE] [-nomask] [-useid]\n               root_file region\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/abyzovlab/CNVnator/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8762505356638784,
      "result": {
        "original_header": "plotcircular.py",
        "type": "Text_excerpt",
        "value": "Plot RD and BAF data with python tool plotcircular.py:\n```\n./plotcircular.py [-h] [-chrom CHROMOSOMES] [-bs BINSIZE] [-o SAVE_FILE]\n                       [-t TITLE] [-rdbs RDBINSIZE] [-pbs PLOTBINSIZE]\n                       [-nomask] [-useid]\n                       root_file\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/abyzovlab/CNVnator/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/abyzovlab/CNVnator/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CNVnator"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "abyzovlab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 296915,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 24142,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 5441,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 2399,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 1068,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/abyzovlab/CNVnator/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "suvakov",
          "type": "User"
        },
        "date_created": "2019-08-13T07:22:42Z",
        "date_published": "2019-08-13T07:33:26Z",
        "description": "New in CNVnator version 0.4.1:\r\n* Listing content of CNVnator root file (option: -ls)\r\n* Copying RD and SNP data to new root file (option: -cptrees)\r\n* Python tool for whole genome circular plot of RD and BAF (plotcircular.py)\r\n* Mask file for reference genome hg19 available in ExampleData/ (used with -mask option)\r\n* Reading CNVnator root file using python module (pytools.io)",
        "html_url": "https://github.com/abyzovlab/CNVnator/releases/tag/v0.4.1",
        "name": "v0.4.1",
        "release_id": 19245266,
        "tag": "v0.4.1",
        "tarball_url": "https://api.github.com/repos/abyzovlab/CNVnator/tarball/v0.4.1",
        "type": "Release",
        "url": "https://api.github.com/repos/abyzovlab/CNVnator/releases/19245266",
        "value": "https://api.github.com/repos/abyzovlab/CNVnator/releases/19245266",
        "zipball_url": "https://api.github.com/repos/abyzovlab/CNVnator/zipball/v0.4.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "ShobanaSekar",
          "type": "User"
        },
        "date_created": "2019-02-27T22:21:24Z",
        "date_published": "2019-02-28T04:46:17Z",
        "description": "New in CNVnator version 0.4:\r\n* Support for single fasta.gz reference file (option -fasta)\r\n* Using -lite option to create smaller root files\r\n* Importing variant data from VCF file (options -vcf -idvar -mask)\r\n* Plotting B-allele frequency (BAF) along with RD signal in -view mode\r\n* Python tool for plotting and analyzing unphased BAF signal",
        "html_url": "https://github.com/abyzovlab/CNVnator/releases/tag/v0.4",
        "name": "v0.4",
        "release_id": 15823729,
        "tag": "v0.4",
        "tarball_url": "https://api.github.com/repos/abyzovlab/CNVnator/tarball/v0.4",
        "type": "Release",
        "url": "https://api.github.com/repos/abyzovlab/CNVnator/releases/15823729",
        "value": "https://api.github.com/repos/abyzovlab/CNVnator/releases/15823729",
        "zipball_url": "https://api.github.com/repos/abyzovlab/CNVnator/zipball/v0.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "bintriz",
          "type": "User"
        },
        "date_created": "2016-08-16T23:05:05Z",
        "date_published": "2016-11-28T07:50:56Z",
        "description": "- Add CRAM support\n- Add a basic genotype format into vcf output\n- Add mouse genome mm9\n- getopt patch\n",
        "html_url": "https://github.com/abyzovlab/CNVnator/releases/tag/v0.3.3",
        "name": "v0.3.3",
        "release_id": 4770091,
        "tag": "v0.3.3",
        "tarball_url": "https://api.github.com/repos/abyzovlab/CNVnator/tarball/v0.3.3",
        "type": "Release",
        "url": "https://api.github.com/repos/abyzovlab/CNVnator/releases/4770091",
        "value": "https://api.github.com/repos/abyzovlab/CNVnator/releases/4770091",
        "zipball_url": "https://api.github.com/repos/abyzovlab/CNVnator/zipball/v0.3.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "bintriz",
          "type": "User"
        },
        "date_created": "2015-07-17T15:02:00Z",
        "date_published": "2015-07-17T15:08:18Z",
        "description": "Changing version to v0.3.2.\nUpdating Makefile to be compatible with ROOT6 and samtools(>1.0).\nAdding new class EXOnator to work with exome/panel data.\n",
        "html_url": "https://github.com/abyzovlab/CNVnator/releases/tag/v0.3.2",
        "name": "v0.3.2",
        "release_id": 1551795,
        "tag": "v0.3.2",
        "tarball_url": "https://api.github.com/repos/abyzovlab/CNVnator/tarball/v0.3.2",
        "type": "Release",
        "url": "https://api.github.com/repos/abyzovlab/CNVnator/releases/1551795",
        "value": "https://api.github.com/repos/abyzovlab/CNVnator/releases/1551795",
        "zipball_url": "https://api.github.com/repos/abyzovlab/CNVnator/zipball/v0.3.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "bintriz",
          "type": "User"
        },
        "date_created": "2015-01-15T18:17:18Z",
        "date_published": "2015-05-11T17:21:25Z",
        "html_url": "https://github.com/abyzovlab/CNVnator/releases/tag/v0.3.1",
        "name": "v0.3.1",
        "release_id": 1283305,
        "tag": "v0.3.1",
        "tarball_url": "https://api.github.com/repos/abyzovlab/CNVnator/tarball/v0.3.1",
        "type": "Release",
        "url": "https://api.github.com/repos/abyzovlab/CNVnator/releases/1283305",
        "value": "https://api.github.com/repos/abyzovlab/CNVnator/releases/1283305",
        "zipball_url": "https://api.github.com/repos/abyzovlab/CNVnator/zipball/v0.3.1"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependencies",
        "parent_header": [
          "README",
          "1. Compilation"
        ],
        "type": "Text_excerpt",
        "value": "You must install [ROOT package](http://root.cern.ch) and set up `$ROOTSYS` variable (see ROOT documentation [here](https://root.cern.ch/root/html534/guides/users-guide/GettingStarted.html)).\n\nAlso, a link to the samtools binary should be present in your CNVnator directory together with compiled `libhts.a` HTSlib library in a `htslib*` subdirectory.\n\nIf compilation is not completed but the file libbam.a has been created, you can continue.\n"
      },
      "source": "https://raw.githubusercontent.com/abyzovlab/CNVnator/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contributors",
    "faq",
    "identifier",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 07:06:05",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 210
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installing with Yeppp support",
        "parent_header": [
          "README",
          "1. Compilation"
        ],
        "type": "Text_excerpt",
        "value": "[Yeppp](http://www.yeppp.info/) is a library which provides high-performance implementations of math functions.\n\nTo install with Yeppp support, download Yeppp from [here](http://bitbucket.org/MDukhan/yeppp/downloads/yeppp-1.0.0.tar.bz2)\nand extract it to a location of your choice. Set `YEPPPLIBDIR` and `YEPPPINCLUDEDIR` directories appropriately. \n\nTypically, for Linux-based systems on x86-64, `YEPPPLIBDIR` will be yeppp-1.0.0/binaries/linux/x86_64/ and `YEPPPINCLUDEDIR` will be\nyeppp-1.0.0/library/headers. \n\nTo build, type  \n`make YEPPPLIBDIR=... YEPPPINCLUDEDIR=...`  \n\nTo disable OpenMP, add `OMP=no` to the make command.\n"
      },
      "source": "https://raw.githubusercontent.com/abyzovlab/CNVnator/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2.6 REPORTING READ SUPPORT",
        "parent_header": [
          "README",
          "2. Predicting CNV regions"
        ],
        "type": "Text_excerpt",
        "value": "To find and report read support for deletions and duplications by abnormal read pairs, use the -pe option as below:\n\n```\n./cnvnator -pe file1.bam ... -qual val(20) -over val(0.8) [-f file]\n```\n\nOnce prompted, enter a genomic region and the CNV type, e.g.,\n\n```\n>12:11396601-11436500 del\nor\n>chr12:11396601-11436500 del\n```\n\nPlease note that the bin size should be equal to a whole number of 100 bases (e.g., 2500, 3700,\u2026)\n"
      },
      "source": "https://raw.githubusercontent.com/abyzovlab/CNVnator/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick start guide",
        "parent_header": [
          "README"
        ],
        "type": "Text_excerpt",
        "value": "```\n# Extract read mapping \n$ ./cnvnator -root file.root -tree file.bam -chrom 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\\\n17 18 19 20 21 22 X Y\n  OR\n$ ./cnvnator -root file.root -tree file.bam -chrom $(seq 1 22) X Y\n  OR\n$ ./cnvnator -root file.root -tree file.bam -chrom chr1 chr2 chr3 chr4 chr5 chr6 chr7 chr8\\\nchr9 chr10 chr11 chr12 chr13 chr14 chr15 chr16 chr17 chr18 chr19 chr20 chr21 chr22 chrX chrY\n  OR\n$ ./cnvnator -root file.root -tree file.bam -chrom $(seq -f 'chr%g' 1 22) chrX chrY\n  # If option -chrom is not used all chromosomes from bam file will be extracted.\n\n# Generate histogram\n$ ./cnvnator -root file.root -his 1000 -d dir_with_genome_fa/\n  OR\n$ ./cnvnator -root file.root -his 1000 -fasta file_genome.fa.gz\n  OR\n$ ./cnvnator -root file.root -his 1000 -chrom 1 2 3 4 -fasta file_genome.fa.gz\n\n# Calculate statistics\n$ ./cnvnator -root file.root -stat 1000 \n\n# Partition\n$ ./cnvnator -root file.root -partition 1000\n\n# Call CNVs\n$ ./cnvnator -root file.root -call 1000\n\n# Import SNP data\n$ ./cnvnator -root file.root -vcf file.vcf.gz\n  OR\n$ ./cnvnator -root file.root -vcf file.vcf.gz -addchr\n  # Options -addchr or -rmchr can be used to add or remove the \"chr\" prefix from \n  # chromosome names in vcf file to match chromosom names from bam file. \n\n# Import mask data\n$ ./cnvnator -root file.root -mask mask.fa.gz\n  OR\n$ ./cnvnator -root file.root -mask mask.fa.gz -addchr\n  \n# Generate SNP histograms\n$ ./cnvnator -root file.root -baf 10000\n\n# Ploting\n$ ./cnvnator -root file.root -view 10000\n>1:1M-50M\n>1:1M-50M baf\n\n# List root file content\n$ ./cnvnator -root file.root -ls\n\n# Copy RD and SNP data to new root file\n$ ./cnvnator -root file.root -cptrees new_file.root\n\n# Ploting RD and BAF whole genome circular plots using python tool:\n$ ./plotcircular.py file.root\n\n```\n"
      },
      "source": "https://raw.githubusercontent.com/abyzovlab/CNVnator/master/README.md",
      "technique": "header_analysis"
    }
  ]
}