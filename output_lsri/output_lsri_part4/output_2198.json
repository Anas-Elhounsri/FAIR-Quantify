{
  "acknowledgement": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Acknowledgement",
        "type": "Text_excerpt",
        "value": "This work has been supported in part by Croatian Science Fundation under the project UIP-11-2013-7353.  \n"
      },
      "source": "https://raw.githubusercontent.com/kkrizanovic/NanoMark/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/kkrizanovic/NanoMark"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2015-02-03T08:53:57Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-06-05T10:58:43Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DNA Assembly Benchmark"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.8251636983029091,
      "result": {
        "original_header": "NanoMark",
        "type": "Text_excerpt",
        "value": "A system for benchmarking DNA assembly tools, based on 3rd generation sequencers.\n \n"
      },
      "source": "https://raw.githubusercontent.com/kkrizanovic/NanoMark/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/kkrizanovic/NanoMark/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/kkrizanovic/NanoMark/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "kkrizanovic/NanoMark"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/kkrizanovic/NanoMark/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Setup",
        "type": "Text_excerpt",
        "value": "```\ngit clone https://github.com/kkrizanovic/NanoMark.git\ncd NanoMark\nsrc/nanomark.py setup\n```\n\nThis will download and compile all tools necessary to run a benchmark.\n- Cgmemtime to measure runtime andmaximum memory consumption\n- Quast to estimate assembly quality\n- Everyhting needed to run each denovo assembly tool for whom a wrapper is defined in folder: \u00a8\u00a8\u00a8NanoMark/wrappers```\n\nAll tools will be downloaded to folder ```NanoMark/tools```.\n\n# Running a benchmark\nRun benchmark with a following command: NanoMark.py --benchmark <reads_file> <reference_file>\n\nBenchmark results will be stored in folder: <root folder>/intermediate\nEach benchmark will have its own folder with a randomly generated name, e.g. benchmark_129eed95-377d-4e8e-a5bf-309631e3df3d. Inside will be a folder for each assembler and a folder for Quast results (containing quast results for each assembler).\n\nSummary Quast and cgmemtime results for each assembler are stored in a benchmark folder in a .tsv file benchmark_summary.tsv. The file contains the following values for each assembler:\n- Name : Assembler name\n\nObtained from cgmemtime:\n- Real time : real execution time\n- CPU time : CPU execution time\n- Maximum RSS : maximum memory consumption\n\nObtained from Quast:\n- # contigs : number of contigs larger then 500bp generated by an assembler\n- Largest contig : largest contig generated by an assembler\n- Total length : total contig length generated by an assembler\n- GC (%) GC content of contigs generated by an assembler, can be compared to reference GC content to estimate assembly quality\n- N50 : N50 values for generated contigs\n- NG50 : NG50 value for generated contigs\n- # misassemblies : number of missasembiled generated by an assembler\n- Genome fraction (%) : genome fraction covered by generated contigs\n- Duplication ratio : how many time is each reference base covered in generated contigs\n- # N's per 100 kbp\n- # mismatches per 100 kbp\n- # indels per 100 kbp\n\nQuast generated fields present in summarized results are represented in a list \"qfields\" in function \"summarize_results\" in NanoMark.py. New field can be added by modifying that list.\n\n# Including new assemblers in the benchmark\n\nThe benchmarking tool currently includes following assembly tools:\n- Loman, Quick and Simpson assembly pipeline (http://www.nature.com/nmeth/journal/v12/n8/full/nmeth.3444.html)\n- PBcR\n- FALCON\n- SPAdes\n- ALLPATHS-LG\n\nAdditional assembly tools can be included by writting a wrapper script in Python. Each assembler that needs to be included in the benchmark must have a corresponding wrapper in folder: <root folder>/wrappers. Wrapper script filenames must start with \"wrapper_\"\n\nEach wrapper must define three varibales:\n- Installation path (ASSEMBLER_PATH)\n- Assembler name written to benchmark summary .tsv file (ASSEMBLER_NAME)\n- Results file filename (must include relative path from assembler installation path) (ASSEMBLER_RESULTS)\n\nEach wrapper must also define two functions:\n- download_and_install() : installs the assembler and makes it ready to run\n- run(reads_file, reference_file, machine_name, output_path, output_suffix='') : runs the assembler on given reads and reference files, results are stored in a given folder: output_folder. Attributes machine_name and output_suffix are currently not used, but must be included in function header for compatibility.\n\nIncluded wrappers are good examples of wrapper implementation.  \n\n# Usage of wrapper scripts\nInstalling an assembler (often requires sudo access):  \n```  \nwrapper_falcon.py install\n```  \nRunning the assembly process consists of specifying all reads files in the form: \n```\nwrapper_?.py run output_folder reads_type,<reads_path>[<reads_path_b,frag_len,frag_stddev]\n```\nMore than one dataset can be described in the same command line, simply by listing them in a space-separated manner.  \nReads_type can be one of: nanopore/pacbio/single/paired/mate. If reads_type != \"paired\" or \"mate\", last three parameters can be omitted.  \nIf reads_type == \"paired\" or \"mate\", other end of the pair needs to be in another file provided by reads_path_b.  \n\nExamples of usage:  \n```  \nwrapper_falcon.py run output_folder nanopore,reads.fa\nwrapper_allpathslg.py run output_folder paired,datasets/frag_reads.Solexa-25396.A.fastq,datasets/frag_reads.Solexa-25396.B.fastq,180,10 mate,datasets/jump_reads.Solexa-42866.A.fastq,datasets/jump_reads.Solexa-42866.B.fastq,3000,500 mate,datasets/jump_reads.Solexa-44956.A.fastq,datasets/jump_reads.Solexa-44956.B.fastq,3000,500 nanopore,datasets/reads.fastq\n```  \n"
      },
      "source": "https://raw.githubusercontent.com/kkrizanovic/NanoMark/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/kkrizanovic/NanoMark/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "The MIT License (MIT)\n\nCopyright (c) 2015 Kresimir Krizanovic\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/kkrizanovic/NanoMark/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "NanoMark"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "kkrizanovic"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 337821,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kkrizanovic/NanoMark/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 09:41:03",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 8
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ]
}