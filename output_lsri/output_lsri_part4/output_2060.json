{
  "application_domain": [
    {
      "confidence": 31.0,
      "result": {
        "type": "String",
        "value": "Natural Language Processing"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Cite",
        "parent_header": [
          "About"
        ],
        "type": "Text_excerpt",
        "value": "::\n\n    MethylCoder: Software Pipeline for Bisulfite-Treated Sequences \n    Brent Pedersen; Tzung-Fu Hsieh; Christian Ibarra; Robert L. Fischer\n    Bioinformatics 2011; doi: 10.1093/bioinformatics/btr394\n\n"
      },
      "source": "https://raw.githubusercontent.com/brentp/methylcode/master/README.rst",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/brentp/methylcode"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2010-01-28T20:18:02Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2017-11-27T08:40:54Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Alignment and Tabulation of BiSulfite Treated Reads"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9380905844405593,
      "result": {
        "original_header": "MethylCoder",
        "type": "Text_excerpt",
        "value": "MethylCoder is a single program that takes of bisulfite-treated reads and\noutputs per-base methylation data. It also includes scripts for analysis\nand visualization.\nIn addition to a binary output and a SAM alignment file, the direct output\nof methylcoder is a text file that looks like :: \nwhere columns are reference `seqid` methylation context (type) basepair\nlocation(bp) number of reads where a (c)ytosine was unconverted, number\nof reads where where a cytosine was converted to (t)hymine. Making methylation\nat every methylable basepair easily calculated as c / (c + t). \n"
      },
      "source": "https://raw.githubusercontent.com/brentp/methylcode/master/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9281954388968037,
      "result": {
        "original_header": "About",
        "type": "Text_excerpt",
        "value": "This software is developed in the `Fischer Lab`_ . At UC Berkeley.\nPlease report any requests, bugs, patches, problems, docs to bpederse@gmail.com \n"
      },
      "source": "https://raw.githubusercontent.com/brentp/methylcode/master/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8740349161750656,
      "result": {
        "original_header": "Input",
        "type": "Text_excerpt",
        "value": "The input to the pipeline is: \n* a reference fasta file with one entry per chromosome in the genome to which\n  the reads are to be mapped.\n* a fastq  or fasta reads file. If reads are not from the from Eckers/Zilberman\n  bisulfite process (with only 2 possibilities) use \"--mode=cmet-stranded\" in\n  the --extra-args to GSNAP \n* If 2 read files are specified, they are assumed to be pair ends and the aligner is called appropriately.\n \n"
      },
      "source": "https://raw.githubusercontent.com/brentp/methylcode/master/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9091853067160303,
      "result": {
        "original_header": "Output",
        "type": "Text_excerpt",
        "value": "* a textfile containing columns:\n   1) seqid (chromosome)\n   2) methylation type (1 to 6 see below)\n   3) basepair position (0-indexed)\n   4) reads with C at this position\n   5) reads with T at this position \n  methylation can be calculated as column 4 / (column 5 + column 4)\n  4 and 5 are corrected for strand (G, A respectively for - strand). \n* a set of binary files for each chromosome in the fasta file. each file\n   contains a value for each basepair in the chromosome--many of which will be\n   0 if the position is not a C or G. these files contain no headers and can be\n   read in any language by specifying the file-type (listed in [square\n   brackets] below. these include: \n   + methyltype.bin with values between 1 and 6 as described below (value of\n     0 means no methylation is possible at this basepair). [encoded as uint8]\n   + cs.bin containing the number of reads with C's at each position (same as\n     column 4 above). [encoded as uint32]\n   + ts.bin containing the number of reads with T's at each position (same as\n     column 5 above). [encoded as uint32] \n"
      },
      "source": "https://raw.githubusercontent.com/brentp/methylcode/master/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8721572980424414,
      "result": {
        "original_header": "Pipeline",
        "type": "Text_excerpt",
        "value": "Where you must adjust `/path/to/reads.fastq` to point to your BS-treated reads.\nThis will create the files specified in `Output`_ above, sending the text to\n`path/to/reads_methylcoder/methy-data-DATE.txt` where DATE is the current date.\nThe binary files will be sent to, that same directory as:\n`thaliana_v9.fasta.[CHR].methyl.bin` where [CHR] is substituted by each\nchromosome in the fasta file. Once bowtie is run once, its output is not\ndeleted, and methylcoder.py will only re-run bowtie if its input has been\nmodified since it was run last. *NOTE* if the `methylcoder` executable is\ncalled without any options, it will print help and available command-line\narguments. \nAdditional args can be sent directly to the aligner as a string to methylcoder.py's\n--extra-args parameter. This would look like. :: \nand that string will be passed directly to the bowtie invocation when it is\ncalled from methylcoder. Whenever 2 fastq files are sent, they are assumed\nto be paired-end reads. \n"
      },
      "source": "https://raw.githubusercontent.com/brentp/methylcode/master/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9737927427991036,
      "result": {
        "original_header": "Limitations",
        "type": "Text_excerpt",
        "value": "  + when using bowtie, the reference size must be less than about 2 Gigabases.\n    This limitation can be circumvented by splitting the reference into 2 smaller\n    reference sequences. For example with human, splitting into 2 fasta files,\n    one with chromosomes 1-9 and the other with chromosomes 10+ works well.\n    This limitation does not exist when GSNAP is used as the aligner.\n \n"
      },
      "source": "https://raw.githubusercontent.com/brentp/methylcode/master/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9567452534486682,
      "result": {
        "original_header": "Reading",
        "type": "Text_excerpt",
        "value": "* Bowtie Paper:\n  Langmead B, Trapnell C, Pop M, Salzberg SL. 2009. Ultrafast and memory-efficient\n  alignment of short DNA sequences to the human genome. Genome Biol 10:R25. \n* GSNAP paper:\n  Wu TD, Nacu S. 2010 Fast and SNP-tolerant detection of complex variants and splicing in short reads.\n  Bioinformatics. 26(7):873-81.\n \n"
      },
      "source": "https://raw.githubusercontent.com/brentp/methylcode/master/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9638176323660885,
      "result": {
        "original_header": "Notes",
        "type": "Text_excerpt",
        "value": "**warning**\nMethylcoder assumes that the Bisulfite converted reads are created using the Zilberman/Ecker method in which BS conversion occurs *after* conversion to solexa library--giving only 2 possibibilities. This is in contrast to the Jacobsen method which gives 4 possiblities.\nIf you have a library generated using the Jacobsen method, you can use `scripts/tagged_reads_prep.py` to convert the reads to a format that MethylCoder can map. \n"
      },
      "source": "https://raw.githubusercontent.com/brentp/methylcode/master/README.rst",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/brentp/methylcode/wiki"
      },
      "source": "https://raw.githubusercontent.com/brentp/methylcode/master/README.rst",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/brentp/methylcode/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 7
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/brentp/methylcode/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "brentp/methylcode"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MethylCoder"
      },
      "source": "https://raw.githubusercontent.com/brentp/methylcode/master/README.rst",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/brentp/methylcode/master/bench/run.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/brentp/methylcode/master/bench/params.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/brentp/methylcode/master/bench/get.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "Requirements"
        ],
        "type": "Text_excerpt",
        "value": "once the above python and c libraries are installed, download methylcoder from:\n\n    http://github.com/brentp/methylcode/tarball/master (tar ball)\n\nand untar; or clone the repository via git::\n\n    git clone git://github.com/brentp/methylcode.git\n\n\nThen, from the methylcode directory, it is still necessary to run ::\n\n    $ sudo python setup.py install\n\nto install the package into your path. After that, the executable 'methylcoder'\nwill be available on your path. Running with no arguments will print help.\n\n"
      },
      "source": "https://raw.githubusercontent.com/brentp/methylcode/master/README.rst",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.8954824571981448,
      "result": {
        "original_header": "MethylCoder",
        "type": "Text_excerpt",
        "value": ".. note:: \n    MethylCoder has been superseded by bwa-meth: https://github.com/brentp/bwa-meth/\n    That repo also contains an improved runner script for gsnap in compare/src/gsnap-meth.py\n \n    \n"
      },
      "source": "https://raw.githubusercontent.com/brentp/methylcode/master/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9876672080428881,
      "result": {
        "original_header": "About",
        "type": "Text_excerpt",
        "value": "This software is developed in the `Fischer Lab`_ . At UC Berkeley.\nPlease report any requests, bugs, patches, problems, docs to bpederse@gmail.com \n"
      },
      "source": "https://raw.githubusercontent.com/brentp/methylcode/master/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9491791604584289,
      "result": {
        "original_header": "Pipeline",
        "type": "Text_excerpt",
        "value": "You must have: \n    $ methylcoder --bowtie /usr/local/src/bowtie/ \\\n                  --extra-args \"-m 1\"\n                  --reference /path/to/thaliana_v9.fasta \\\n                  /path/to/reads.fastq \n    $ methylcoder --gsnap /usr/local/bin/ \\\n                  --reference /path/to/thaliana_v9.fasta \\\n                  /path/to/reads_1.fastq /path/to/reads_2.fastq \n    --extra-args \"--solexa-quals -k 1 -m 1 --strata\" \n"
      },
      "source": "https://raw.githubusercontent.com/brentp/methylcode/master/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.99776091046209,
      "result": {
        "original_header": "Analysis/Visualization",
        "type": "Text_excerpt",
        "value": "See: http://github.com/brentp/methylcode/wikis/using-samtools-to-view-alignments\n \n"
      },
      "source": "https://raw.githubusercontent.com/brentp/methylcode/master/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.801396057798092,
      "result": {
        "original_header": "Reading",
        "type": "Text_excerpt",
        "value": "* Eckers paper.\n  http://www.nature.com/nature/journal/v462/n7271/extref/nature08514-s1.pdf \n"
      },
      "source": "https://raw.githubusercontent.com/brentp/methylcode/master/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 1.0,
      "result": {
        "original_header": "Notes",
        "type": "Text_excerpt",
        "value": ".. _`cython`: http://cython.org\n.. _`numpy`: http://numpy.scipy.org\n.. _`pyfasta`: http://pypi.python.org/pypi/pyfasta/\n.. _`py-tcdb`: http://pypi.python.org/pypi/py-tcdb\n.. _`h5py`: http://pypi.python.org/pypi/h5py/\n.. _`bowtie`: http://bowtie-bio.sourceforge.net/index.shtml\n.. _`tokyocabinet`: http://fallabs.com/tokyocabinet/\n.. _`sam-tools`: http://samtools.sourceforge.net/\n.. _`Fischer Lab`: http://epmb.berkeley.edu/facPage/dispFP.php?I=8\n.. _`gsnap`: http://research-pub.gene.com/gmap/\n.. _`bsolana`: http://code.google.com/p/bsolana/ \n"
      },
      "source": "https://raw.githubusercontent.com/brentp/methylcode/master/README.rst",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/brentp/methylcode/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "// BSD License\nCopyright (c) 2011, Brent Pedersen, Fischer Lab at UC Berkeley.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\nNeither the name of the University of California Berkeley nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
      },
      "source": "https://raw.githubusercontent.com/brentp/methylcode/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "methylcode"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "brentp"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 258319,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 110734,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 8004,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 547,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/brentp/methylcode/master/README.rst"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Python",
        "parent_header": [
          "Requirements"
        ],
        "type": "Text_excerpt",
        "value": "Python 2.6 must be installed along with the following modules.\nall of these are available from pypi and as such are installable via\n::\n\n  $  easy_install [module]\n\n* `numpy`_ to handle arrays and binary data in python\n* `pyfasta`_ to access/index fasta files\n* (required if bsddb is unavailable) `py-tcdb`_ replace bsddb\n\nmatplotlib is required to plot the per-chromosome methylation levels.\n"
      },
      "source": "https://raw.githubusercontent.com/brentp/methylcode/master/README.rst",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "C",
        "parent_header": [
          "Requirements"
        ],
        "type": "Text_excerpt",
        "value": "* `bowtie`_ to align the reads to the genome.\n* (required if bsddb is unavailable) `tokyocabinet`_ modern implementation of DBM database.\n* (optional) `gsnap`_ (>= 2011-11-17) preferred aligner. (part of gmap).\n* (optional) `sam-tools`_ to view the alignments and processing the reads\n"
      },
      "source": "https://raw.githubusercontent.com/brentp/methylcode/master/README.rst",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 09:12:35",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 16
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ]
}