{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/krits04/cornea"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-09-22T17:42:58Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-06-26T03:35:12Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "protein interface prediction method"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9312872781177276,
      "result": {
        "original_header": "CoRNeA",
        "type": "Text_excerpt",
        "value": "protein interface prediction method\nTo calculate features for the test case, utilize the R codes provided in the repository\n1. Conditional mutual Infromation (CMI) for inter protein contacts  \n  Use cmi_processing.r to compute the CMI valus of inter protein contacts; cmi. Requires edited alignment files (a.fasta and b.fasta) as input. Calls conditional mutual information for new CMI algorithm mentioned in detail method. Output file: test_cmi.csv             Special Note: the edited alignment file should contain the first sequence as the test sequence (same sequence for all the other features). The alignment should be edited in a way that there are no gaps in the first sequence. Only then p1, p2 and p will correspond to the length of protein A, length of protein B and combined length of protein A and B. \n2. Charge compatibility(CC): Use charge_compatibility.r to compute feature cc. Requires single fasta file with both the protein sequences (test.fasta). Calls charge compatibility.csv to fill in values for residue pairs. Output file: test_cc.csv\n3. Contact Potentials (CP, CP1, CP2):\n  a. CP: Use mj_original to compute feature cp. Requires single fasta file with both the protein sequences (test.fasta). Calls       \n         mj_original.csv to fill in values for residue pairs. Output file: test_cp.csv\n  b. CP1:Use mj_exposed to compute feature cp1. Requires single fasta file with both the protein sequences (test.fasta). Calls       \n         mj_exposed.csv to fill in values for residue pairs. Output file: test_cp1.csv\n  c. CP2: Use mj_buried to compute feature cp. Requires single fasta file with both the protein sequences (test.fasta). Calls       \n         mj_buried.csv to fill in values for residue pairs. Output file: test_cp2.csv\n4. Hydropathy compatibility (HCM):Use hydropathy_compatibility.r to compute feature hc. Requires single fasta file with both the protein sequences (test.fasta). Calls hydropathy compatibility.csv to fill in values for residue pairs. Output file: test_hc.csv\n5. Relative Solvent Accessibility: Use rsa.r to compute feature rsa. Requires pdf output of RSA from SPIDER2 or SPIDER3 server for both protein sequences (test1.pdf, test2.pdf). Output file: test_rsa.csv ** SPIDER2/3 is not being maintianed. Please use WESA instead**\n6. Size compatibility (SCM): Use size_compatibility.r to compute feature scm. Requires single fasta file with both the protein sequences (test.fasta). Calls size compatibility.csv to fill in values for residue pairs. Output file: test_scm.csv\n7. Secondary structrue prediction: Use sspred.r to compute feature ssp. Requires pdf output of secondary structure prediction from PSIPRED server for both protein sequences (seq1.pdf, seq2.pdf). Output file: test_ssp.csv\n8. Environmental features : Use environmental features.r to compute the convolved environmental features. (kernel matrices: kernel_function_5.csv and kernel_function_3.csv). Call .csv of all 9 features calculated above (cmi.csv,cc.csv,cp.csv,cp1.csv,cp2.csv,hc.csv,rsa.csv,scm.rsa, ssp.csv). Output files: ecmi.csv, ecc.csv, ecp,csv, ecp1.csv, ecp2.csv, ehc.csv, ersa.csv, escm.csv, essp.csv)\n9. Compiling feature values as dataframe: use compiling features.r to create a dataframe for final model prediction using random forest. Final output: test_df.csv\n10. Computing interface prediction using random forest classifier: Use python jupiter notebook testing.ipynb to test the dataset on the trained models (with kernel 3 or kernel 5 matrix). Output file: prediction_test.csv\n11. For post processing the results obtained from random forest classifier, calculate intra contacts using the file intra_contacts.r and rsa for individual proteins using rsa_intra.r\n12. Network analysis: use the file network_analysis.r to calculate the final residual network between proteinA and proteinB. Output fle: test_final_prediction.csv\n13. For generating final scores for the residue pairs predicted by CoRNeA, use prediction matrix convolution.r \n    Output file: final_prediction_test.csv\nPS: In case of any issues with the code please leave an email at ai.cornea02@gmail.com\n \n"
      },
      "source": "https://raw.githubusercontent.com/krits04/cornea/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/krits04/cornea/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/krits04/cornea/master/testing_final.ipynb"
      },
      "source": "https://raw.githubusercontent.com/krits04/cornea/master/testing_final.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/krits04/cornea/master/new_model/with_env_features-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/krits04/cornea/master/new_model/with_env_features-checkpoint.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/krits04/cornea/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "krits04/cornea"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CoRNeA"
      },
      "source": "https://raw.githubusercontent.com/krits04/cornea/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8395605379077723,
      "result": {
        "original_header": "CoRNeA",
        "type": "Text_excerpt",
        "value": "protein interface prediction method\nTo calculate features for the test case, utilize the R codes provided in the repository\n1. Conditional mutual Infromation (CMI) for inter protein contacts  \n  Use cmi_processing.r to compute the CMI valus of inter protein contacts; cmi. Requires edited alignment files (a.fasta and b.fasta) as input. Calls conditional mutual information for new CMI algorithm mentioned in detail method. Output file: test_cmi.csv             Special Note: the edited alignment file should contain the first sequence as the test sequence (same sequence for all the other features). The alignment should be edited in a way that there are no gaps in the first sequence. Only then p1, p2 and p will correspond to the length of protein A, length of protein B and combined length of protein A and B. \n2. Charge compatibility(CC): Use charge_compatibility.r to compute feature cc. Requires single fasta file with both the protein sequences (test.fasta). Calls charge compatibility.csv to fill in values for residue pairs. Output file: test_cc.csv\n3. Contact Potentials (CP, CP1, CP2):\n  a. CP: Use mj_original to compute feature cp. Requires single fasta file with both the protein sequences (test.fasta). Calls       \n         mj_original.csv to fill in values for residue pairs. Output file: test_cp.csv\n  b. CP1:Use mj_exposed to compute feature cp1. Requires single fasta file with both the protein sequences (test.fasta). Calls       \n         mj_exposed.csv to fill in values for residue pairs. Output file: test_cp1.csv\n  c. CP2: Use mj_buried to compute feature cp. Requires single fasta file with both the protein sequences (test.fasta). Calls       \n         mj_buried.csv to fill in values for residue pairs. Output file: test_cp2.csv\n4. Hydropathy compatibility (HCM):Use hydropathy_compatibility.r to compute feature hc. Requires single fasta file with both the protein sequences (test.fasta). Calls hydropathy compatibility.csv to fill in values for residue pairs. Output file: test_hc.csv\n5. Relative Solvent Accessibility: Use rsa.r to compute feature rsa. Requires pdf output of RSA from SPIDER2 or SPIDER3 server for both protein sequences (test1.pdf, test2.pdf). Output file: test_rsa.csv ** SPIDER2/3 is not being maintianed. Please use WESA instead**\n6. Size compatibility (SCM): Use size_compatibility.r to compute feature scm. Requires single fasta file with both the protein sequences (test.fasta). Calls size compatibility.csv to fill in values for residue pairs. Output file: test_scm.csv\n7. Secondary structrue prediction: Use sspred.r to compute feature ssp. Requires pdf output of secondary structure prediction from PSIPRED server for both protein sequences (seq1.pdf, seq2.pdf). Output file: test_ssp.csv\n8. Environmental features : Use environmental features.r to compute the convolved environmental features. (kernel matrices: kernel_function_5.csv and kernel_function_3.csv). Call .csv of all 9 features calculated above (cmi.csv,cc.csv,cp.csv,cp1.csv,cp2.csv,hc.csv,rsa.csv,scm.rsa, ssp.csv). Output files: ecmi.csv, ecc.csv, ecp,csv, ecp1.csv, ecp2.csv, ehc.csv, ersa.csv, escm.csv, essp.csv)\n9. Compiling feature values as dataframe: use compiling features.r to create a dataframe for final model prediction using random forest. Final output: test_df.csv\n10. Computing interface prediction using random forest classifier: Use python jupiter notebook testing.ipynb to test the dataset on the trained models (with kernel 3 or kernel 5 matrix). Output file: prediction_test.csv\n11. For post processing the results obtained from random forest classifier, calculate intra contacts using the file intra_contacts.r and rsa for individual proteins using rsa_intra.r\n12. Network analysis: use the file network_analysis.r to calculate the final residual network between proteinA and proteinB. Output fle: test_final_prediction.csv\n13. For generating final scores for the residue pairs predicted by CoRNeA, use prediction matrix convolution.r \n    Output file: final_prediction_test.csv\nPS: In case of any issues with the code please leave an email at ai.cornea02@gmail.com\n \n"
      },
      "source": "https://raw.githubusercontent.com/krits04/cornea/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/krits04/cornea/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "cornea"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "krits04"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 39886,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 25907,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/krits04/cornea/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "installation",
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-11-04 02:47:46",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ]
}