{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/jhu99/netcoffee"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2015-03-27T04:33:36Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-03T09:07:55Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Automatically exported from code.google.com/p/netcoffee"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9534140264646105,
      "result": {
        "type": "Text_excerpt",
        "value": "This program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version. \nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details. \nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>. \n################################################################################\nDescription\nThis file is README file of the package of NetCoffee, developed by Jialu Hu.\nTo guide you quickly starting to use our alignment tool, we structured this README into four parts:\n1) PREREQUISITE\n2) COMPILING\n3) OPTION\n4) EXAMPLE \nBefore running this program, you are strongly recommended to read this file carefully. \n################################################################################\nPREREQUISITE\n1. LEMON Graph Library 1.2.3\nThe source code is freely available under Boost Software License, Version 1.0 at the website: http://lemon.cs.elte.hu/trac/lemon/wiki/Downloads\nPlease first compile the lemon graph library before compiling the code of NetCoffee.\nNote that this package should move to the directory $NETCOFFEE/include.\n2. FSST package\nThis package is necessary only if you want to use \"-analyse\" option to calculate the semantic similarities.\nIt can be download at http://gotax.bioinf.mpi-inf.mpg.de/avail.php.\n3. GoTermFinder\nThis package is necessary only if you want to use \"-analyse\" option to draw the GoTree View or calculate p-Value of each match-set.\nIt can be download at http://search.cpan.org/dist/GO-TermFinder/lib/GO/TermFinder.pm. \n################################################################################\nCOMPILING\nTo compile the source code, the latest compilers which supports the standard language C++11, also known as C++0x, is needed. Other older compiler may not support it.\n1. Compile LEMON GRAPH LIBRARY \n"
      },
      "source": "https://raw.githubusercontent.com/screamer/netcoffee/master/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9291041079575849,
      "result": {
        "original_header": "If you want to compile it in Debug mode, run command:",
        "type": "Text_excerpt",
        "value": "################################################################################\nOPTION\nYou can see the detailed option information with option \"-h\".\nIt is noted that there are two options you must specify if you want to run NetCoffee for an alignment task. They are described as follows: \n1. -profile\nThe default file is \"./profile.input\", but you can also change the filename and path by \"-profile\" option.\nThis file tells the program where to find the dataset and to create output files.\nIt is expected to be in two-column tab-delimited format.\nThese lines starting with \"#\" will be seen as comment.\nEach line has one keyword and one value, like this:\n$keyword\t$value\nUsing this file, you are allowed to set options (network,gofile,efile,alignmentfile,avefunsimfile,scorefile,logfile) here.\nHowever, you are also allowed to set these option in command line, except for these keywords: network, gofile, efile, which containing multiple files.\nNote that, the values must be strictly in order from up to down for keywords \"network, gofile, efile\".\nFor example, suppose we have\nthree PPI networ:1.tab, 2.tab, 3.tab,\ngo association file: 1.fsst, 2.fsst, 3.fsst,\nsix balst evalue (or bitscore) files: 1-1.cf, 1-2.cf,...,3-3.cf,\nthen the profile should looks like: \n\n2. -scorefile\nThe default file is \"./dataset/score_composit.model\". This file was empirically obtained from blastp scoring files for othologous model and null model based on e-value.\nIf the option \"bscore\" was enabled, this file should be \"./dataset/score_composit.bmodel\", which calculates the sequence-based score based on bitscore. \nYou can run commandline with option \"-record -task 0\" to generate this data with blastp scoring files. \n3. -network\nThis option specifies the compared PPI networks, which is formated as follows:\n--------------BEGIN OF NETWORK--------------\nINTERACTOR_A\tINTERACTOR_B\nQ6QNY1\tQ9NWB7\nQ96P48\tO00220\nQ96P48\tO14763\nO15105\tQ92905\nQ92905\tQ13485\nQ16666\tQ86WV6\nQ9NZH6\tP84022\nP26717\tO43914\nP04234\tP07766\n--------------END OF NETWORK-------------- \n4. -efile\nThis option specifies the blastp sequence similarity files for each pair of species, which includes three columns seperated by <TAB>.\nThe first column provides proteins from the first netwoks, the second column provides proteins from the second networks, the third column provides evalue or bitscore.\nHowever, the options \"-bscore\" and \"-scorefile ./dataset/score_composit.bmodel\" must be used if the third column gives bitscore;\nThe change of protein order in the same line is not allowed.\nThere are two examples: \n$NETCOFFEE/bin/netcoffee -h\nUsage:\n  ./bin/netcoffee -version|-records|-alignment|-analyse|-format\n     [--help|-h|-help] [-alignmentfile str] [-alpha num] [-avefunsimfile str]\n     [-beta num] [-bscore] [-distributionfile str] [-edgefactor num]\n     [-eta num] [-formatfile str] [-nmax int] [-numspecies int]\n     [-numthreads int] [-orthologyfile str] [-out] [-randomfile str]\n     [-recordsfile str] [-resultfolder str] [-task int]\nWhere:\n  --help|-h|-help\n     Print a short help message\n  -alignment\n     Execute the alignment algorithm.\n  -alignmentfile str\n     The filename of alignment which is required to either create or analyse.\n  -alpha num\n     Prameter controlling how much topology score contributes to the alignment score. Default is 0.5.\n  -analyse\n     Make analysis on alignmenr result.\n  -avefunsimfile str\n     The filename for functional similarity of alignment.\n  -beta num\n     Probability for randomly picking out the alignment records. Default is 1.0\n  -bscore\n     Use bitscore as the similarity of edges.\n  -distributionfile str\n     Output file for log ratio distribution.\n  -edgefactor num\n     The factor of the power law normalization. Default is 0.1.\n  -eta num\n     Threshold imfactor which is used to exclude match-sets from a single species. Default is 1.0.\n  -format\n     Process input or output file into proper format.\n  -formatfile str\n     Profile of input parameters.\n  -nmax int\n     The parameter for SA algorithm N.\n  -numspecies int\n     Number of the species compared. Default is 4.\n  -numthreads int\n     Number of threads running in parallel.\n  -orthologyfile str\n     Training data for orthology model.\n  -out\n     Print the alignment result into file.\n  -randomfile str\n     Training data for random model.\n  -records\n     Generate alignment records file.\n  -recordsfile str\n     Records file for writing and reading. It is used to store the triplet edges.\n  -resultfolder str\n     The folder which was used as active folder in the data process.\n  -task int\n     Complete different tasks. The task was determined with other options such as -alignment together. Default is 1.\n  -version\n     Show the version number. \n################################################################################\nEXAMPLE\n1. Download dataset\nOur datasets are freely available at our website: https://code.google.com/p/netcoffee/downloads/list.\nDownload it into the folder of $NETCOFFEE and uncompress it with command:\ntar -zxvf dataset.tar.gz\n2. Compile source code\nCompile the source code with command:\nmake MODE=Release\n3. Run NetCoffee on our test dataset-2 with command:\n./bin/netcoffee -alignment -task 1 -out -alpha ${ALPHA} -numspecies ${num} -numthreads ${thread num} -alignmentfile ./result/alignment_netcoffee.data -resultfolder ./result/\n${ALPHA} is the parameter you want to specify for alpha.\nThen you can find the all the involved output files in ./result/ .\nThere are many other functions which you can see with \"-help\" option. \n"
      },
      "source": "https://raw.githubusercontent.com/screamer/netcoffee/master/README",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/screamer/netcoffee/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/jhu99/netcoffee/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "jhu99/netcoffee"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/screamer/netcoffee/master/README",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/screamer/netcoffee/master/include/lemon-1.2.3/scripts/bootstrap.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/screamer/netcoffee/master/include/lemon-1.2.3/scripts/mk-release.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/screamer/netcoffee/master/include/lemon-1.2.3/scripts/valgrind-wrapper.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/screamer/netcoffee/master/include/lemon-1.2.3/scripts/unify-sources.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/screamer/netcoffee/master/include/lemon-1.2.3/tools/lemon-0.x-to-1.x.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/screamer/netcoffee/master/include/lemon-1.2.3/build-aux/ltmain.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 0.9860492357174208,
      "result": {
        "type": "Text_excerpt",
        "value": "You should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>. \n################################################################################\nDescription\nThis file is README file of the package of NetCoffee, developed by Jialu Hu.\nTo guide you quickly starting to use our alignment tool, we structured this README into four parts:\n1) PREREQUISITE\n2) COMPILING\n3) OPTION\n4) EXAMPLE \nBefore running this program, you are strongly recommended to read this file carefully. \n################################################################################\nPREREQUISITE\n1. LEMON Graph Library 1.2.3\nThe source code is freely available under Boost Software License, Version 1.0 at the website: http://lemon.cs.elte.hu/trac/lemon/wiki/Downloads\nPlease first compile the lemon graph library before compiling the code of NetCoffee.\nNote that this package should move to the directory $NETCOFFEE/include.\n2. FSST package\nThis package is necessary only if you want to use \"-analyse\" option to calculate the semantic similarities.\nIt can be download at http://gotax.bioinf.mpi-inf.mpg.de/avail.php.\n3. GoTermFinder\nThis package is necessary only if you want to use \"-analyse\" option to draw the GoTree View or calculate p-Value of each match-set.\nIt can be download at http://search.cpan.org/dist/GO-TermFinder/lib/GO/TermFinder.pm. \n################################################################################\nCOMPILING\nTo compile the source code, the latest compilers which supports the standard language C++11, also known as C++0x, is needed. Other older compiler may not support it.\n1. Compile LEMON GRAPH LIBRARY \ncd $NETCOFFEE/include/lemon-1.2.3/\n./configure\n./make \n2. Compile NetCoffee \ncd $NETCOFFEE\n./make MODE=Release \n"
      },
      "source": "https://raw.githubusercontent.com/screamer/netcoffee/master/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.999995256632369,
      "result": {
        "original_header": "COMMENT $keyword   $value",
        "type": "Text_excerpt",
        "value": "cd $NETCOFFEE\n./make MODE=Release\n#If you want to compile it in Debug mode, run command:\n./make (MODE=Debug) \n"
      },
      "source": "https://raw.githubusercontent.com/screamer/netcoffee/master/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9997056954548069,
      "result": {
        "original_header": "If you want to compile it in Debug mode, run command:",
        "type": "Text_excerpt",
        "value": "################################################################################\nOPTION\nYou can see the detailed option information with option \"-h\".\nIt is noted that there are two options you must specify if you want to run NetCoffee for an alignment task. They are described as follows: \n################################################################################\nEXAMPLE\n1. Download dataset\nOur datasets are freely available at our website: https://code.google.com/p/netcoffee/downloads/list.\nDownload it into the folder of $NETCOFFEE and uncompress it with command:\ntar -zxvf dataset.tar.gz\n2. Compile source code\nCompile the source code with command:\nmake MODE=Release\n3. Run NetCoffee on our test dataset-2 with command:\n./bin/netcoffee -alignment -task 1 -out -alpha ${ALPHA} -numspecies ${num} -numthreads ${thread num} -alignmentfile ./result/alignment_netcoffee.data -resultfolder ./result/\n${ALPHA} is the parameter you want to specify for alpha.\nThen you can find the all the involved output files in ./result/ .\nThere are many other functions which you can see with \"-help\" option. \n"
      },
      "source": "https://raw.githubusercontent.com/screamer/netcoffee/master/README",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8182459900577566,
      "result": {
        "original_header": "If you want to compile it in Debug mode, run command:",
        "type": "Text_excerpt",
        "value": "--------------BEGIN OF PROFILE--------------\n#COMMENT $keyword\t$value\nnetwork  ./dataset/1.tab\nnetwork  ./dataset/2.tab\nnetwork  ./dataset/3.tab\ngofile  ./dataset/goa/1.fsst\ngofile  ./dataset/goa/2.fsst\ngofile  ./dataset/goa/3.fsst\nefile  ./dataset/1-1.cf\nefile  ./dataset/1-2.cf\nefile  ./dataset/1-3.cf\nefile  ./dataset/2-2.cf\nefile  ./dataset/2-3.cf\nefile  ./dataset/3-3.cf\nscorefile     ./dataset/score_composit.model\nalignmentfile ./result/alignment_netcoffee.data\navefunsimfile netcoffee_fsst.result\nlogfile       ./result/measure_time.txt\n--------------END OF PROFILE-------------- \n"
      },
      "source": "https://raw.githubusercontent.com/screamer/netcoffee/master/README",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/jhu99/netcoffee/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "GNU General Public License v3.0",
        "spdx_id": "GPL-3.0",
        "type": "License",
        "url": "https://api.github.com/licenses/gpl-3.0",
        "value": "https://api.github.com/licenses/gpl-3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "LEMON code without an explicit copyright notice is covered by the following\ncopyright/license.\n\nCopyright (C) 2003-2010 Egervary Jeno Kombinatorikus Optimalizalasi\nKutatocsoport (Egervary Combinatorial Optimization Research Group,\nEGRES).\n\n===========================================================================\nBoost Software License, Version 1.0\n===========================================================================\n\nPermission is hereby granted, free of charge, to any person or organization\nobtaining a copy of the software and accompanying documentation covered by\nthis license (the \"Software\") to use, reproduce, display, distribute,\nexecute, and transmit the Software, and to prepare derivative works of the\nSoftware, and to permit third-parties to whom the Software is furnished to\ndo so, all subject to the following:\n\nThe copyright notices in the Software and this entire statement, including\nthe above license grant, this restriction and the following disclaimer,\nmust be included in all copies of the Software, in whole or in part, and\nall derivative works of the Software, unless such copies or derivative\nworks are solely in the form of machine-executable object code generated by\na source language processor.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT\nSHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE\nFOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/screamer/netcoffee/master/include/lemon-1.2.3/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "netcoffee"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "jhu99"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 2959616,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 307331,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 132207,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "PostScript",
        "size": 64059,
        "type": "Programming_language",
        "value": "PostScript"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 27519,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 25805,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 20307,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "M4",
        "size": 16257,
        "type": "Programming_language",
        "value": "M4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 5667,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/screamer/netcoffee/master/README"
      },
      "technique": "file_exploration"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "If you want to compile it in Debug mode, run command:",
        "type": "Text_excerpt",
        "value": "./make (MODE=Debug)\n\n################################################################################\nOPTION\nYou can see the detailed option information with option \"-h\".\nIt is noted that there are two options you must specify if you want to run NetCoffee for an alignment task. They are described as follows:\n\n1. -profile\nThe default file is \"./profile.input\", but you can also change the filename and path by \"-profile\" option.\nThis file tells the program where to find the dataset and to create output files.\nIt is expected to be in two-column tab-delimited format.\nThese lines starting with \"#\" will be seen as comment.\nEach line has one keyword and one value, like this:\n$keyword\t$value\nUsing this file, you are allowed to set options (network,gofile,efile,alignmentfile,avefunsimfile,scorefile,logfile) here.\nHowever, you are also allowed to set these option in command line, except for these keywords: network, gofile, efile, which containing multiple files.\nNote that, the values must be strictly in order from up to down for keywords \"network, gofile, efile\".\nFor example, suppose we have\nthree PPI networ:1.tab, 2.tab, 3.tab,\ngo association file: 1.fsst, 2.fsst, 3.fsst,\nsix balst evalue (or bitscore) files: 1-1.cf, 1-2.cf,...,3-3.cf,\nthen the profile should looks like:\n\n--------------BEGIN OF PROFILE--------------\n#COMMENT $keyword\t$value\nnetwork  ./dataset/1.tab\nnetwork  ./dataset/2.tab\nnetwork  ./dataset/3.tab\ngofile  ./dataset/goa/1.fsst\ngofile  ./dataset/goa/2.fsst\ngofile  ./dataset/goa/3.fsst\nefile  ./dataset/1-1.cf\nefile  ./dataset/1-2.cf\nefile  ./dataset/1-3.cf\nefile  ./dataset/2-2.cf\nefile  ./dataset/2-3.cf\nefile  ./dataset/3-3.cf\nscorefile     ./dataset/score_composit.model\nalignmentfile ./result/alignment_netcoffee.data\navefunsimfile netcoffee_fsst.result\nlogfile       ./result/measure_time.txt\n--------------END OF PROFILE--------------\n\n\n2. -scorefile\nThe default file is \"./dataset/score_composit.model\". This file was empirically obtained from blastp scoring files for othologous model and null model based on e-value.\nIf the option \"bscore\" was enabled, this file should be \"./dataset/score_composit.bmodel\", which calculates the sequence-based score based on bitscore. \nYou can run commandline with option \"-record -task 0\" to generate this data with blastp scoring files.\n\n3. -network\nThis option specifies the compared PPI networks, which is formated as follows:\n--------------BEGIN OF NETWORK--------------\nINTERACTOR_A\tINTERACTOR_B\nQ6QNY1\tQ9NWB7\nQ96P48\tO00220\nQ96P48\tO14763\nO15105\tQ92905\nQ92905\tQ13485\nQ16666\tQ86WV6\nQ9NZH6\tP84022\nP26717\tO43914\nP04234\tP07766\n--------------END OF NETWORK--------------\n\n4. -efile\nThis option specifies the blastp sequence similarity files for each pair of species, which includes three columns seperated by <TAB>.\nThe first column provides proteins from the first netwoks, the second column provides proteins from the second networks, the third column provides evalue or bitscore.\nHowever, the options \"-bscore\" and \"-scorefile ./dataset/score_composit.bmodel\" must be used if the third column gives bitscore;\nThe change of protein order in the same line is not allowed.\nThere are two examples:\n\n--------------BEGIN OF EVALUE FILE--------------\nP31946\tP62258\t1e-116\nP31946\tQ04917\t7e-133\nP31946\tP61981\t2e-135\nP31946\tP31947\t3e-122\nP31946\tP27348\t2e-152\nP31946\tP63104\t4e-162\nP62258\tP31946\t1e-116\nP62258\tP62258\t 0e+00\nP62258\tQ04917\t4e-110\nP62258\tP61981\t3e-112\n--------------END OF EVALUE FILE--------------\n\n--------------BEGIN OF BITSCORE FILE--------------\nP31946\tP62258\t  325.0\nP31946\tQ04917\t  367.0\nP31946\tP61981\t  373.0\nP31946\tP31947\t  340.0\nP31946\tP27348\t  416.0\nP31946\tP63104\t  441.0\nP62258\tP31946\t  325.0\nP62258\tP62258\t  524.0\nP62258\tQ04917\t  309.0\nP62258\tP61981\t  315.0\n--------------END OF BITSCORE FILE--------------\n\n5. other option in Usage\n\nYou can generate the following message by running the program with option \"-h\".\n\n$NETCOFFEE/bin/netcoffee -h\nUsage:\n  ./bin/netcoffee -version|-records|-alignment|-analyse|-format\n     [--help|-h|-help] [-alignmentfile str] [-alpha num] [-avefunsimfile str]\n     [-beta num] [-bscore] [-distributionfile str] [-edgefactor num]\n     [-eta num] [-formatfile str] [-nmax int] [-numspecies int]\n     [-numthreads int] [-orthologyfile str] [-out] [-randomfile str]\n     [-recordsfile str] [-resultfolder str] [-task int]\nWhere:\n  --help|-h|-help\n     Print a short help message\n  -alignment\n     Execute the alignment algorithm.\n  -alignmentfile str\n     The filename of alignment which is required to either create or analyse.\n  -alpha num\n     Prameter controlling how much topology score contributes to the alignment score. Default is 0.5.\n  -analyse\n     Make analysis on alignmenr result.\n  -avefunsimfile str\n     The filename for functional similarity of alignment.\n  -beta num\n     Probability for randomly picking out the alignment records. Default is 1.0\n  -bscore\n     Use bitscore as the similarity of edges.\n  -distributionfile str\n     Output file for log ratio distribution.\n  -edgefactor num\n     The factor of the power law normalization. Default is 0.1.\n  -eta num\n     Threshold imfactor which is used to exclude match-sets from a single species. Default is 1.0.\n  -format\n     Process input or output file into proper format.\n  -formatfile str\n     Profile of input parameters.\n  -nmax int\n     The parameter for SA algorithm N.\n  -numspecies int\n     Number of the species compared. Default is 4.\n  -numthreads int\n     Number of threads running in parallel.\n  -orthologyfile str\n     Training data for orthology model.\n  -out\n     Print the alignment result into file.\n  -randomfile str\n     Training data for random model.\n  -records\n     Generate alignment records file.\n  -recordsfile str\n     Records file for writing and reading. It is used to store the triplet edges.\n  -resultfolder str\n     The folder which was used as active folder in the data process.\n  -task int\n     Complete different tasks. The task was determined with other options such as -alignment together. Default is 1.\n  -version\n     Show the version number.\n\n################################################################################\nEXAMPLE\n1. Download dataset\nOur datasets are freely available at our website: https://code.google.com/p/netcoffee/downloads/list.\nDownload it into the folder of $NETCOFFEE and uncompress it with command:\ntar -zxvf dataset.tar.gz\n2. Compile source code\nCompile the source code with command:\nmake MODE=Release\n3. Run NetCoffee on our test dataset-2 with command:\n./bin/netcoffee -alignment -task 1 -out -alpha ${ALPHA} -numspecies ${num} -numthreads ${thread num} -alignmentfile ./result/alignment_netcoffee.data -resultfolder ./result/\n${ALPHA} is the parameter you want to specify for alpha.\nThen you can find the all the involved output files in ./result/ .\nThere are many other functions which you can see with \"-help\" option.\n\n################################################################################\nEND\nTHANKS FOR READING\nIf you have any questions regarding to the program, please don't hesitate to contact us through email.\n"
      },
      "source": "https://raw.githubusercontent.com/screamer/netcoffee/master/README",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 09:27:38",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ]
}