{
  "application_domain": [
    {
      "confidence": 31.92,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Choosing the numbers of SNPs and references",
        "parent_header": [
          "GenomicGPS `v1.0`",
          "Instructions"
        ],
        "type": "Text_excerpt",
        "value": "Don't worry, we've already prepared the reference dataset for you;\n`Reference.tar.gz` file contains `1000Genomes Phase 3 data` (2,504 samples and 176,504 pruned SNPs with MAF>5%) formatted for our software.\nThe user can specify how many SNPs (`N`) and how many reference individuals (`K`) to use.\nThen, our software will randomly sample `N` SNPs and `K` individuals from our prepared reference dataset\n(which will add a layer of security, because SNP sets and references will be different case by case).\n\nThe rule of thumb is that we'll need `K>10` references and the SNP/reference ratio `(N/K)` needs to be `>20`. A simple choice we recommend is `K=30` and `N=1,000`.\n\n"
      },
      "source": "https://raw.githubusercontent.com/hanlab-SNU/GenomicGPS/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "GenomicGPS `v1.0`"
        ],
        "type": "Text_excerpt",
        "value": "If you use the software `genomicGPS`, please cite [Kim, Kunhee, et al. \"Genomic GPS: using genetic distance from individuals to public data for genomic analysis without disclosing personal genomes.\" Genome biology 20.1 (2019): 175.](https://genomebiology.biomedcentral.com/articles/10.1186/s13059-019-1792-2)\n"
      },
      "source": "https://raw.githubusercontent.com/hanlab-SNU/GenomicGPS/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Reference",
        "parent_header": [
          "GenomicGPS `v1.0`"
        ],
        "type": "Text_excerpt",
        "value": "1. [PLINK v1.9](www.cog-genomics.org/plink/2.0/) | Chang CC, Chow CC, Tellier LCAM, Vattikuti S, Purcell SM, Lee JJ Second-generation PLINK: rising to the challenge of larger and richer datasets. GigaScience, 4. (2015) doi:10.1186/s13742-015-0047-8\n2. [1000 Genome Phase 3 data](https://www.cog-genomics.org/plink/2.0/resources) | A global reference for human genetic variation, The 1000 Genomes Project Consortium, Nature 526, 68-74 (2015) doi:10.1038/nature15393\n\n"
      },
      "source": "https://raw.githubusercontent.com/hanlab-SNU/GenomicGPS/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/hanlab-SNU/GenomicGPS"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-05-20T04:49:43Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-05-21T16:44:41Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "# 2019 Bioinformatics Methods / GenomicGPS"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "parent_header": [
          "GenomicGPS `v1.0`"
        ],
        "type": "Text_excerpt",
        "value": "` GenomicGPS`  is a software package for applying multilateration to genomic data. Multilateration is a technique used in the Global Positioning System (GPS). To determine the position of an aircraft, the signals from satellites are interpreted to the distances to them. Given these distances, it is possible to mathematically calculate the exact position of an aircraft. In genomic multilateration, investigators calculate genetic distances between their samples and reference samples, which are from data held in the public domain, and share this information with others. This sharing enables certain types of genomic analysis, such as identifying sample overlaps and close relatives, decomposing ancestry, and mapping of geographical origin without disclosing personal genome. Importantly, though, the shared information conceals individual genotypes, making it extremely difficult to reconstruct the personal genome. Thus, our method can be seen as a balance between open data sharing and privacy protection.\n\n![GenomicGPS](github_images/Figure1.png)\n\nWe measure the genetic distance to individuals in public data, which we call **\"distance vector\"**. The software includes modules <ins>(1) to generate distance vectors given genomic data</ins> and <ins>(2) to detect overlapping samples given distance vectors</ins>.\n"
      },
      "source": "https://raw.githubusercontent.com/hanlab-SNU/GenomicGPS/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.8492914454083266,
      "result": {
        "original_header": "Input data format",
        "type": "Text_excerpt",
        "value": "format. <br>\nPlease ensure that the `.bed/.bim/.fam` filesets or `.map/.ped` filesets are all present in the same path. When you run the code, you should give the path and prefix of the data.\n \n"
      },
      "source": "https://raw.githubusercontent.com/hanlab-SNU/GenomicGPS/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8717892883179891,
      "result": {
        "original_header": "Sample Overlap Detection (2.DV_Comp_Detct)",
        "type": "Text_excerpt",
        "value": "Researcher `B` can now run the following:\n```\n$ cd 2.DV_Comp_Detct\n$ chmod +x comp_det.sh\n$ ./comp_det.sh -d1 mydata1.out -d2 mydata2.out -p mydata1.ref.p (+ optional : -t threshold)\n```\nThis code compares two distance vectors to detect sample overlap. The reference allele frequency (`.ref.p`) is used to calculate &Sigma; (variance-covariance matrix). Then, the statistic and p-value will be calculated. \nThis will generate\n- `mydata1_mydata2.outcomp_2data.stat`: Sample overlap detection statistic for all pairwise comparison. Given `N1` samples from Researcher `A` and `N2` samples from Researcher `B`, this will be `N1xN2` matrix.\n- `mydata1_mydata2.outcomp_2data.pvalue`: P-values of all pairwise comparison. This will be `N1xN2` matrix.\n- `mydata1_mydata2.outcomp_2data.sigma`: The covariance matrix used for calculation. This will be `KxK` matrix. \n> If one hasn't decided the p-value threshold, then one can omit `-t` parameter. Then, our software will internally simulate the null hypothesis (unrelated pairs) and the alternative hypothesis (overlapping pairs) lots of times, and decide an appropriate threshold for you as the middle `log(P)` value between the null and alternative clusters. This procedure takes some time (~10 min). The determined threshold will be printed on the output screen. \n"
      },
      "source": "https://raw.githubusercontent.com/hanlab-SNU/GenomicGPS/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.884541608564325,
      "result": {
        "original_header": "Greedy Algorithm",
        "type": "Text_excerpt",
        "value": "In our paper, we described the situation that an opponent wants to recover the genome information given the distance vector and reference dataset. We implemented the opponent as a greedy algorithm. The results showed that recovery of the genome information was very difficult. For anyone who wants to replicate the results, we provide the following JAVA code:  \n \n"
      },
      "source": "https://raw.githubusercontent.com/hanlab-SNU/GenomicGPS/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Downloading the package",
        "parent_header": [
          "GenomicGPS `v1.0`",
          "Instructions"
        ],
        "type": "Text_excerpt",
        "value": "Before using 'git clone' command, please install the extension of git called [Git Large File Storage (LFS)](https://github.com/git-lfs/git-lfs/wiki/Installation) for cloning the reference file (>100MB). Since it has many different ways to install LFS for various OS, please refer to [this page](https://github.com/git-lfs/git-lfs/wiki/Installation). Then, type the following to clone our repository.\n\n\n```\n$ git clone https://github.com/hanlab-SNU/GenomicGPS.git\n$ cd GenomicGPS\n```\n> (If you couldn't install LSF, don't worry; you can still clone the software. However, the `Reference.tar.gz` file will not be properly cloned due to large size using `git clone` command. In that case, you can manually click and download this `Reference.tar.gz` file from our website, and put that into the cloned directory.)\n"
      },
      "source": "https://raw.githubusercontent.com/hanlab-SNU/GenomicGPS/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/hanlab-SNU/GenomicGPS/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/hanlab-SNU/GenomicGPS/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "hanlab-SNU/GenomicGPS"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "GenomicGPS v1.0"
      },
      "source": "https://raw.githubusercontent.com/hanlab-SNU/GenomicGPS/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hanlab-SNU/GenomicGPS/master/genomicgps.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hanlab-SNU/GenomicGPS/master/scripts/1.DV_Generator/dv_gen.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hanlab-SNU/GenomicGPS/master/scripts/Java/greedy_algorithm_package/02_compile_and_run.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hanlab-SNU/GenomicGPS/master/scripts/2.DV_Comp_Detct/comp_det.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "identifier": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://zenodo.org/badge/latestdoi/187569547"
      },
      "source": "https://raw.githubusercontent.com/hanlab-SNU/GenomicGPS/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installing required dependencies",
        "parent_header": [
          "GenomicGPS `v1.0`",
          "Instructions"
        ],
        "type": "Text_excerpt",
        "value": "First, please make sure that [PLINK](http://zzz.bwh.harvard.edu/plink/download.shtml) is installed. The installed plink path should be added to the system path. <br>\nYou can verify by\n\n```\n$ plink --version\n```\n\nAlso, you should install [python3](https://www.python.org/downloads/) and [pip](https://pip.pypa.io/en/stable/installing/) or [anaconda](https://www.anaconda.com/distribution/#download-section) for downloading the following necessary python packages :\n\n- numpy\n- pandas\n- scipy\n- [datatable](https://github.com/h2oai/datatable#Installation) (It only supports MacOS, linux)\n\nIf you are using Python, you can install the required packages with:\n\n```\n$ pip install -U numpy pandas scipy datatable\n```\n\nIf you are using Anaconda, you can install the required packages with:\n\n```\n$ conda install -c conda-forge numpy pandas scipy pip\n$ pip install datatable\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/hanlab-SNU/GenomicGPS/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.8474587868629563,
      "result": {
        "original_header": "Sample Overlap Detection (2.DV_Comp_Detct)",
        "type": "Text_excerpt",
        "value": "Researcher `B` can now run the following:\n```\n$ cd 2.DV_Comp_Detct\n$ chmod +x comp_det.sh\n$ ./comp_det.sh -d1 mydata1.out -d2 mydata2.out -p mydata1.ref.p (+ optional : -t threshold)\n```\nThis code compares two distance vectors to detect sample overlap. The reference allele frequency (`.ref.p`) is used to calculate &Sigma; (variance-covariance matrix). Then, the statistic and p-value will be calculated. \n"
      },
      "source": "https://raw.githubusercontent.com/hanlab-SNU/GenomicGPS/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/hanlab-SNU/GenomicGPS/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2019 hanlab (Seoul National University)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/hanlab-SNU/GenomicGPS/master/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "parent_header": [
          "GenomicGPS `v1.0`"
        ],
        "type": "Text_excerpt",
        "value": "This project is licensed under the terms of the MIT license.\n\n"
      },
      "source": "https://raw.githubusercontent.com/hanlab-SNU/GenomicGPS/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hanlab-SNU/GenomicGPS/master/github_images/Figure1.png"
      },
      "source": "https://raw.githubusercontent.com/hanlab-SNU/GenomicGPS/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "GenomicGPS"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "hanlab-SNU"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "OpenEdge ABL",
        "size": 28092,
        "type": "Programming_language",
        "value": "OpenEdge ABL"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Java",
        "size": 13727,
        "type": "Programming_language",
        "value": "Java"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 11834,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 8966,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 3484,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hanlab-SNU/GenomicGPS/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "hanlab-SNU",
          "type": "User"
        },
        "date_created": "2019-07-30T02:53:45Z",
        "date_published": "2019-07-30T03:00:22Z",
        "html_url": "https://github.com/hanlab-SNU/GenomicGPS/releases/tag/v1.0.0",
        "name": "First release of GenomicGPS",
        "release_id": 18944709,
        "tag": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/hanlab-SNU/GenomicGPS/tarball/v1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/hanlab-SNU/GenomicGPS/releases/18944709",
        "value": "https://api.github.com/repos/hanlab-SNU/GenomicGPS/releases/18944709",
        "zipball_url": "https://api.github.com/repos/hanlab-SNU/GenomicGPS/zipball/v1.0.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installing required dependencies",
        "parent_header": [
          "GenomicGPS `v1.0`",
          "Instructions"
        ],
        "type": "Text_excerpt",
        "value": "First, please make sure that [PLINK](http://zzz.bwh.harvard.edu/plink/download.shtml) is installed. The installed plink path should be added to the system path. <br>\nYou can verify by\n\n```\n$ plink --version\n```\n\nAlso, you should install [python3](https://www.python.org/downloads/) and [pip](https://pip.pypa.io/en/stable/installing/) or [anaconda](https://www.anaconda.com/distribution/#download-section) for downloading the following necessary python packages :\n\n- numpy\n- pandas\n- scipy\n- [datatable](https://github.com/h2oai/datatable#Installation) (It only supports MacOS, linux)\n\nIf you are using Python, you can install the required packages with:\n\n```\n$ pip install -U numpy pandas scipy datatable\n```\n\nIf you are using Anaconda, you can install the required packages with:\n\n```\n$ conda install -c conda-forge numpy pandas scipy pip\n$ pip install datatable\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/hanlab-SNU/GenomicGPS/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running the test example at one go",
        "parent_header": [
          "GenomicGPS `v1.0`",
          "Instructions"
        ],
        "type": "Text_excerpt",
        "value": "* PATH : `./sample_data/`\n\nTo run the testrun,\n```\n$ chmod +x genomicgps.sh\n$ ./genomicgps.sh -n N(#snps) -k K(#satellites) -d1 sample_data/mydata1 -d2 sample_data/mydata2\n```\nThis testrun will generate distance vectors from both datasets and perform the overlapping detection test.\n\n"
      },
      "source": "https://raw.githubusercontent.com/hanlab-SNU/GenomicGPS/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 04:04:12",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Support",
        "parent_header": [
          "GenomicGPS `v1.0`"
        ],
        "type": "Text_excerpt",
        "value": "This software was implemented by Chloe Soohyun Jang and Buhm Han. Please contact [hanlab.snu@gmail.com](mailto:hanlab.snu@gmail.com)\n"
      },
      "source": "https://raw.githubusercontent.com/hanlab-SNU/GenomicGPS/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage 1: Data sender",
        "parent_header": [
          "GenomicGPS `v1.0`",
          "Instructions",
          "Distance Vector Generation (1.DV_Generator)"
        ],
        "type": "Text_excerpt",
        "value": "Then, Researcher `A` runs the following:\n```\n$ cd 1.DV_Generator\n$ chmod +x dv_gen.sh\n\n$ ./dv_gen.sh -n N(#snps) -k K(#references) -d mydata1\n```\nThis will generate\n- `mydata1.input`: input file converted from `plink` format\n- `mydata1.out`: Distance vectors\n- `mydata1.ref`: Randomly sub-sampled reference data, which was used for distance vector calculation\n- `mydata1.ref.p`: The MAF information of the randomly sub-sampled reference data\n\nThen, Researcher `A` sends `mydata1.out`, `mydata1.ref`, and `mydata1.ref.p` to Researcher `B`.\nResearcher `A` also lets Researcher `B` know the numbers of SNPs and references used (`K` and `N`).\n> **DO NOT SEND** `mydata1.input`, because this is genotype information of the samples that we want to conceal!!\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/hanlab-SNU/GenomicGPS/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage 2: Data receiver",
        "parent_header": [
          "GenomicGPS `v1.0`",
          "Instructions",
          "Distance Vector Generation (1.DV_Generator)"
        ],
        "type": "Text_excerpt",
        "value": "```\ncd 1.DV_Generator\n$ chmod +x dv_gen.sh\n\n$ ./dv_gen.sh -n N(#snps) -k K(#references) -d mydata2 -r mydata1.ref -p mydata1.ref.p\n```\nGiven `-r` and `-p` option, our software uses the reference information from these files instead of sampling from `1000Genomes data`.\nThis will generate\n- `mydata2.input`: input file converted from `plink` format\n- `mydata2.out`: Distance vectors\n\n"
      },
      "source": "https://raw.githubusercontent.com/hanlab-SNU/GenomicGPS/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Running the test example at one go",
        "parent_header": [
          "GenomicGPS `v1.0`",
          "Instructions"
        ],
        "type": "Text_excerpt",
        "value": "* PATH : `./sample_data/`\n\nTo run the testrun,\n```\n$ chmod +x genomicgps.sh\n$ ./genomicgps.sh -n N(#snps) -k K(#satellites) -d1 sample_data/mydata1 -d2 sample_data/mydata2\n```\nThis testrun will generate distance vectors from both datasets and perform the overlapping detection test.\n\n"
      },
      "source": "https://raw.githubusercontent.com/hanlab-SNU/GenomicGPS/master/README.md",
      "technique": "header_analysis"
    }
  ]
}