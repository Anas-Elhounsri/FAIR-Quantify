{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/shubhamchandak94/LDPC_DNA_storage"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-06-01T14:58:24Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-19T08:19:41Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "LDPC codes for Illumina sequencing-based DNA storage"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9224667463922637,
      "result": {
        "original_header": "LDPC DNA storage",
        "type": "Text_excerpt",
        "value": "LDPC codes for Illumina sequencing-based DNA storage. The associated data is available at https://github.com/shubhamchandak94/LDPC_DNA_storage_data. \n"
      },
      "source": "https://raw.githubusercontent.com/shubhamchandak94/LDPC_DNA_storage/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.994917718272214,
      "result": {
        "original_header": "<a href=\"https://ieeexplore.ieee.org/document/8919890\">Allerton 2019</a>",
        "type": "Text_excerpt",
        "value": "**Update:**: This work relied on regular LDPC codes, partly because of lack of implementations of other more powerful LDPC code families such as Protograph LDPC codes. We have now released a library for working with protograph LDPC codes available [here](https://shubhamchandak94.github.io/ProtographLDPC/). \n"
      },
      "source": "https://raw.githubusercontent.com/shubhamchandak94/LDPC_DNA_storage/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.973895407025396,
      "result": {
        "original_header": "Instructions for encoding and decoding data",
        "type": "Text_excerpt",
        "value": "The code is implemented in Python3.\n```\nimport dna_storage\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/shubhamchandak94/LDPC_DNA_storage/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8429684714372632,
      "result": {
        "original_header": "Decoding",
        "type": "Text_excerpt",
        "value": "Note that the decoder expects a file with only the reads. To extract the reads from a FASTQ file, run (on the shell):\n```\nsed -n '2~4p' file.fastq > file.reads\n```\nFirst we remove the barcodes at the start and end of each reads by running\nBASH2*\nThis internally uses [Flexbar](https://github.com/seqan/flexbar) to remove the barcodes and also corrects the orientation of any reverse complemented reads. We tested our code with Flexbar 3.0.3. \n"
      },
      "source": "https://raw.githubusercontent.com/shubhamchandak94/LDPC_DNA_storage/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/shubhamchandak94/LDPC_DNA_storage/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/shubhamchandak94/LDPC_DNA_storage/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "shubhamchandak94/LDPC_DNA_storage"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "LDPC DNA storage"
      },
      "source": "https://raw.githubusercontent.com/shubhamchandak94/LDPC_DNA_storage/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/shubhamchandak94/LDPC_DNA_storage/master/util/align_compute_stats.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/shubhamchandak94/LDPC_DNA_storage/master/util/generate_LDPC_matrices.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 0.9928436096029276,
      "result": {
        "original_header": "LDPC DNA storage",
        "type": "Text_excerpt",
        "value": "LDPC codes for Illumina sequencing-based DNA storage. The associated data is available at https://github.com/shubhamchandak94/LDPC_DNA_storage_data. \n"
      },
      "source": "https://raw.githubusercontent.com/shubhamchandak94/LDPC_DNA_storage/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 1.0,
      "result": {
        "original_header": "<a href=\"https://ieeexplore.ieee.org/document/8919890\">Allerton 2019</a>",
        "type": "Text_excerpt",
        "value": "Installation instructions (tested on Ubuntu 18.04.1)\n```\n# clone repository with submodules\ngit clone --recursive https://github.com/shubhamchandak94/LDPC_DNA_storage\ncd LDPC_DNA_storage/\n# install flexbar (our code tested with Flexbar 3.0.3, source code: https://github.com/seqan/flexbar)\nsudo apt-get install flexbar\n# build LDPC codes\ncd LDPC-codes/\nmake\ncd ..\n# build Kalign MSA\ncd kalign2-current/\n./configure\nmake\ncd ..\n# install BCH codes Python library\ncd python-bchlib/\npython3 setup.py build\nsudo python3 setup.py install\n\n# install joblib for parallelization of kalign consensus\npip3 install --user joblib\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/shubhamchandak94/LDPC_DNA_storage/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8299383124222061,
      "result": {
        "original_header": "Decoding",
        "type": "Text_excerpt",
        "value": "Then we run the decoder on the trimmed reads:\n```\ndna_storage.decode_data(infile, oligo_length, outfile, bin_index_len, BCH_bits, LDPC_alpha, \\\nLDPC_prefix, file_size, eps, sync='', sync_pos=-1, attempt_indel_cor=True)\n```\nParameters:\nBASH4*\nSee [`util/decode_files.py`](https://github.com/shubhamchandak94/LDPC_DNA_storage/blob/master/util/decode_files.py) for examples.\n \n"
      },
      "source": "https://raw.githubusercontent.com/shubhamchandak94/LDPC_DNA_storage/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/shubhamchandak94/LDPC_DNA_storage/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "dna-storage, illumina-sequencing, ldpc-codes"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2020 Shubham Chandak\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/shubhamchandak94/LDPC_DNA_storage/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "LDPC_DNA_storage"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "shubhamchandak94"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 549353,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 93802,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 6277,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 1004,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "M4",
        "size": 612,
        "type": "Programming_language",
        "value": "M4"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/shubhamchandak94/LDPC_DNA_storage/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running simulations",
        "parent_header": [
          "LDPC DNA storage",
          "Instructions for encoding and decoding data"
        ],
        "type": "Text_excerpt",
        "value": "To run simulations for testing parameters, we provide a function which encodes the data and finds the minimum reading cost (in bases/bit) needed for successful decoding. The function separates simulations with independent substitution, deletion and insertion errors and also supports adding random reads (to simulate unaligned reads).\n```\ndna_storage.find_min_coverage(infile_data, oligo_length, BCH_bits, LDPC_alpha, LDPC_prefix, \\\nbin_index_len, file_size, sub_prob, eps_decode, num_experiments, ins_prob=0.0, del_prob=0.0, \\\nstart_coverage=1.0, sync='', sync_pos=-1, attempt_indel_cor=True, frac_random_reads=0.0)\n```\nParameters:\n```\ninfile:             file to be encoded in DNA\noligo_length:       same as used in encode_data\nBCH_bits:           see parameters for encode_data\nLDPC_alpha:         see parameters for encode_data\nLDPC_prefix:        see parameters for encode_data\nbin_index_len:      see parameters for encode_data\nfile_size:          size of infile in bytes\nsub_prob:           substitution error probability\neps_decode:         see parameter eps in decode_data\nnum_experiments:    number of successful trials before declaring success \n                    (e.g., if num_experiments=20, success is declared if 20/20 trials succeed)\nins_prob:           insertion error probability\ndel_prob:           deletion error probability\nstart_coverage:     reading cost (bases/bit) to start with (the function then increases it\n                    by 0.1 until it succeeds)\nsync:               see parameters for encode_data            \nsync_pos:           see parameters for encode_data            \nattempt_indel_cor:  see parameters for decode_data\nfrac_random_reads:  fraction of random reads to add while simulating \n```\nReturns:\n```\nminimum reading cost (in bases/bit)\n```\nSee [`util/run_simulations.py`](https://github.com/shubhamchandak94/LDPC_DNA_storage/blob/master/util/run_simulations.py) for examples.\n"
      },
      "source": "https://raw.githubusercontent.com/shubhamchandak94/LDPC_DNA_storage/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 01:58:28",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 7
      },
      "technique": "GitHub_API"
    }
  ]
}