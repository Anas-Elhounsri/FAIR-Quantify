{
  "code_of_conduct": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at jallen17@illinois.edu. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n"
      },
      "source": "https://raw.githubusercontent.com/zstephens/neat-genreads/master/CODE_OF_CONDUCT.md",
      "technique": "file_exploration"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/zstephens/neat-genreads"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Contributing to NEAT\n====================\n\nWe welcome contributions to the NEAT project. Before contributing, please review our [Code of Conduct](CODE_OF_CONDUCT.md).\n\nIssues\n------\n\nTo submit issues and enhancement requests, please use the [GitHub issues tracker](https://github.com/zstephens/neat-genreads/issues).\n\nContributing\n------------\n\nFuture development of the NEAT project will take place in the NCSA project space, here: https://github.com/ncsa/NEAT. We are working on bringing the code up to [PEP 8 standards](https://www.python.org/dev/peps/pep-0008/), as well as leveraging Biopython and Pandas to speed up analysis. We would like to transition the code to C++ to increase the speed and efficiency. Please direct inquiries to that repo.\n\nIn general, we follow the \"fork-and-pull\" Git workflow.\n\n 1. **Fork** the repo on GitHub\n 2. **Clone** the project to your own machine\n 3. **Commit** changes to your own branch\n 4. **Push** your work back up to your fork\n 5. Submit a **Pull request** so that we can review your changes\n \nNote: Be sure to merge the latest changes before making the pull request. You can increase your chances of a successfull pull request by indicating clearly what branch you are contributing to and making a detailed commit message. It also helps if you open an issue first to let us know you are working on this project.\n\nLicense\n-------\n\nNEAT is licensed under [BSD 3-Clause License](https://github.com/zstephens/neat-genreads/blob/master/LICENSE.md). Because we also use some of the software from Biopython, we additionally have included the Biopython License Agreement\n"
      },
      "source": "https://raw.githubusercontent.com/zstephens/neat-genreads/master/CONTRIBUTING.md",
      "technique": "file_exploration"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2016-02-01T19:00:57Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-15T13:21:27Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "NEAT read simulation tools"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.950713210078633,
      "result": {
        "original_header": "The NEAT Project v3.0",
        "type": "Text_excerpt",
        "value": "Welcome to the NEAT project, the NExt-generation sequencing Analysis Toolkit, version 3.0. NEAT has now been updated to Python 3, and is moving toward compliance with PEP8 standards. There is still lots of work to be done. See the [ChangeLog](ChangeLog.md) for notes. \nNOTE: Future development on this project will take place in the NCSA project space. The new repo can be found here: https://github.com/ncsa/NEAT. Please direct future issues and feature requests to that repository. \nStay tuned over the coming weeks for exciting updates to NEAT, and learn how to [contribute](CONTRIBUTING.md) yourself. If you'd like to use some of our code, no problem! Just review the [license](LICENSE.md), first. \nNEAT's gen_reads.py is the main program, and it is a fine-grained read simulator. It simulates real-looking data using models learned from specific datasets. There are several supporting utilities for generating models used for simulation and for comparing the outputs of alignment and variant callers to the golden BAM and golden VCF produced by NEAT. \nThis is an in-progress v3.0 of the software. Version 2.1 was coded in Python 2, and is available under releases. For an older stable release please see: [genReads1](https://github.com/zstephens/genReads1) \nTo cite this work, please use: \n"
      },
      "source": "https://raw.githubusercontent.com/zstephens/neat-genreads/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9669492160269918,
      "result": {
        "original_header": "Functionality",
        "type": "Text_excerpt",
        "value": "NEAT produces simulated sequencing datasets. It creates FASTQ files with reads sampled from a provided reference genome, using sequencing error rates and mutation rates learned from real sequencing data. The strength of NEAT lies in the ability for the user to customize many sequencing parameters, produce 'golden,' true positive datasets. We are working on expanding the functionality even further to model more species, generate larger variants, model tumor/normal data and more! \nFeatures: \n- Simulate single-end and paired-end reads \n- Custom read length\n- Can introduce random mutations and/or mutations from a VCF file\n  - Supported mutation types include SNPs, indels (of any length), inversions, translocations, duplications\n  - Can emulate multi-ploid heterozygosity for SNPs and small indels\n- Can simulate targeted sequencing via BED input specifying regions to sample from\n- Can accurately simulate large, single-end reads with high indel error rates (PacBio-like) given a model\n- Specify simple fragment length model with mean and standard deviation or an empirically learned fragment distribution using utilities/computeFraglen.py\n- Simulates quality scores using either the default model or empirically learned quality scores using utilities/fastq_to_qscoreModel.py\n- Introduces sequencing substitution errors using either the default model or empirically learned from utilities/\n- Accounts for GC% coverage bias using model learned from utilities/computeGC.py\n- Output a VCF file with the 'golden' set of true positive variants. These can be compared to bioinformatics workflow output (includes coverage and allele balance information)\n- Output a BAM file with the 'golden' set of aligned reads. These indicate where each read originated and how it should be aligned with the reference\n- Create paired tumour/normal datasets using characteristics learned from real tumour data\n- Low memory footprint. Constant (proportional to the size of the reference sequence)\n \n"
      },
      "source": "https://raw.githubusercontent.com/zstephens/neat-genreads/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8145385536833504,
      "result": {
        "original_header": "Utilities",
        "type": "Text_excerpt",
        "value": "Several scripts are distributed with gen_reads that are used to generate the models used for simulation.\n \n"
      },
      "source": "https://raw.githubusercontent.com/zstephens/neat-genreads/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9219942644287782,
      "result": {
        "original_header": "compute_gc.py",
        "type": "Text_excerpt",
        "value": "Computes GC% coverage bias distribution from sample (bedrolls genomecov) data.\nTakes .genomecov files produced by BEDtools genomeCov (with -d option).\n```\nbedtools genomecov\n        -d                          \\\n        -ibam normal.bam            \\\n        -g reference.fa\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/zstephens/neat-genreads/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9497650119579738,
      "result": {
        "original_header": "compute_fraglen.py",
        "type": "Text_excerpt",
        "value": "and creates fraglen.p model in working directory.\n \n"
      },
      "source": "https://raw.githubusercontent.com/zstephens/neat-genreads/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9247495223908127,
      "result": {
        "original_header": "gen_mut_model.py",
        "type": "Text_excerpt",
        "value": "Trinucleotides are identified in the reference genome and the variant file. Frequencies of each trinucleotide transition are calculated and output as a pickle (.p) file. \nOption           |  Description\n------           |:----------\n-r <str>         |  Reference file for organism in FASTA format. Required\n-m <str>         |  Mutation file for organism in VCF format. Required\n-o <str>         |  Path to output file and prefix. Required. \n-b <str>         |  BED file of regions to include\n--save-trinuc    |  Save trinucleotide counts for reference\n--human-sample   |  Use to skip unnumbered scaffolds in human references\n--skip-common    |  Do not save common snps or high mutation areas\n\t\n \n"
      },
      "source": "https://raw.githubusercontent.com/zstephens/neat-genreads/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.973572985108161,
      "result": {
        "original_header": "genSeqErrorModel.py",
        "type": "Text_excerpt",
        "value": "Generates sequence error model for gen_reads.py -e option.\nThis script needs revision, to improve the quality-score model eventually, and to include code to learn sequencing errors from pileup data.\n```\npython genSeqErrorModel.py                            \\\n        -i input_read1.fq (.gz) / input_read1.sam     \\\n        -o output.p                                   \\\n        -i2 input_read2.fq (.gz) / input_read2.sam    \\\n        -p input_alignment.pileup                     \\\n        -q quality score offset [33]                  \\\n        -Q maximum quality score [41]                 \\\n        -n maximum number of reads to process [all]   \\\n        -s number of simulation iterations [1000000]  \\\n        --plot perform some optional plotting\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/zstephens/neat-genreads/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8475762654292905,
      "result": {
        "original_header": "plotMutModel.py",
        "type": "Text_excerpt",
        "value": "Performs plotting and comparison of mutation models generated from genMutModel.py.\n```\npython plotMutModel.py                                        \\\n        -i model1.p [model2.p] [model3.p]...                  \\\n        -l legend_label1 [legend_label2] [legend_label3]...   \\\n        -o path/to/pdf_plot_prefix\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/zstephens/neat-genreads/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9424348093112822,
      "result": {
        "original_header": "Note on Sensitive Patient Data",
        "type": "Text_excerpt",
        "value": "ICGC's \"Access Controlled Data\" documention can be found at <a href = https://docs.icgc.org/portal/access/ target=\"_blank\">https://docs.icgc.org/portal/access/</a>. To have access to controlled germline data, a DACO must be\nsubmitted. Open tier data can be obtained without a DACO, but germline alleles that do not match the reference genome are masked and replaced with the reference\nallele. Controlled data includes unmasked germline alleles. \n"
      },
      "source": "https://raw.githubusercontent.com/zstephens/neat-genreads/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/zstephens/neat-genreads/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 27
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/zstephens/neat-genreads/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "zstephens/neat-genreads"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "The NEAT Project v3.0"
      },
      "source": "https://raw.githubusercontent.com/zstephens/neat-genreads/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/zstephens/neat-genreads/master/docs/NEATNEAT.png"
      },
      "source": "https://raw.githubusercontent.com/zstephens/neat-genreads/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9011151083961632,
      "result": {
        "original_header": "The NEAT Project v3.0",
        "type": "Text_excerpt",
        "value": "NOTE: Future development on this project will take place in the NCSA project space. The new repo can be found here: https://github.com/ncsa/NEAT. Please direct future issues and feature requests to that repository. \nThis is an in-progress v3.0 of the software. Version 2.1 was coded in Python 2, and is available under releases. For an older stable release please see: [genReads1](https://github.com/zstephens/genReads1) \n"
      },
      "source": "https://raw.githubusercontent.com/zstephens/neat-genreads/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8029026933290446,
      "result": {
        "original_header": "plotMutModel.py",
        "type": "Text_excerpt",
        "value": "Performs plotting and comparison of mutation models generated from genMutModel.py.\n```\npython plotMutModel.py                                        \\\n        -i model1.p [model2.p] [model3.p]...                  \\\n        -l legend_label1 [legend_label2] [legend_label3]...   \\\n        -o path/to/pdf_plot_prefix\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/zstephens/neat-genreads/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9122832135100664,
      "result": {
        "original_header": "vcf_compare_OLD.py",
        "type": "Text_excerpt",
        "value": "Tool for comparing VCF files. This program needs updates, as it is slow and somewhat touchy to use at the moment.\n```\npython vcf_compare_OLD.py\n        -r <ref.fa>        * Reference Fasta                           \\\n        -g <golden.vcf>    * Golden VCF                                \\\n        -w <workflow.vcf>  * Workflow VCF                              \\\n        -o <prefix>        * Output Prefix                             \\\n        -m <track.bed>     Mappability Track                           \\\n        -M <int>           Maptrack Min Len                            \\\n        -t <regions.bed>   Targetted Regions                           \\\n        -T <int>           Min Region Len                              \\\n        -c <int>           Coverage Filter Threshold [15]              \\\n        -a <float>         Allele Freq Filter Threshold [0.3]          \\\n        --vcf-out          Output Match/FN/FP variants [False]         \\\n        --no-plot          No plotting [False]                         \\\n        --incl-homs        Include homozygous ref calls [False]        \\\n        --incl-fail        Include calls that failed filters [False]   \\\n        --fast             No equivalent variant detection [False]\n```\nMappability track examples: https://github.com/zstephens/neat-repeat/tree/master/example_mappabilityTracks\n \n"
      },
      "source": "https://raw.githubusercontent.com/zstephens/neat-genreads/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8908470621470111,
      "result": {
        "original_header": "compute_gc.py",
        "type": "Text_excerpt",
        "value": "```\npython compute_gc.py                 \\\n        -r reference.fa             \\\n        -i genomecovfile            \\\n        -w [sliding window length]  \\\n        -o /path/to/model.p\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/zstephens/neat-genreads/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8945438259592702,
      "result": {
        "original_header": "compute_fraglen.py",
        "type": "Text_excerpt",
        "value": "    ./samtools view toy.bam | python compute_fraglen.py \n"
      },
      "source": "https://raw.githubusercontent.com/zstephens/neat-genreads/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8459007262439383,
      "result": {
        "original_header": "gen_mut_model.py",
        "type": "Text_excerpt",
        "value": "Takes references genome and TSV file to generate mutation models:\n```\npython gen_mut_model.py               \\\n        -r hg19.fa                  \\\n        -m inputVariants.tsv        \\\n        -o /home/me/models.p\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/zstephens/neat-genreads/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8439261110838138,
      "result": {
        "original_header": "plotMutModel.py",
        "type": "Text_excerpt",
        "value": "Performs plotting and comparison of mutation models generated from genMutModel.py.\n```\npython plotMutModel.py                                        \\\n        -i model1.p [model2.p] [model3.p]...                  \\\n        -l legend_label1 [legend_label2] [legend_label3]...   \\\n        -o path/to/pdf_plot_prefix\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/zstephens/neat-genreads/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/zstephens/neat-genreads/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "BSD 3-Clause License\n--------------------\n\nCopyright (c) 1999-2020, NEAT Contributors\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice,\n   this list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors\n   may be used to endorse or promote products derived from this software\n   without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nBiopython License Agreement\n---------------------------\n\nPermission to use, copy, modify, and distribute this software and its\ndocumentation with or without modifications and for any purpose and\nwithout fee is hereby granted, provided that any copyright notices\nappear in all copies and that both those copyright notices and this\npermission notice appear in supporting documentation, and that the\nnames of the contributors or copyright holders not be used in\nadvertising or publicity pertaining to distribution of the software\nwithout specific prior permission.\n\nTHE CONTRIBUTORS AND COPYRIGHT HOLDERS OF THIS SOFTWARE DISCLAIM ALL\nWARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL THE\nCONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY SPECIAL, INDIRECT\nOR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS\nOF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE\nOR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE\nOR PERFORMANCE OF THIS SOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/zstephens/neat-genreads/master/LICENSE.md",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "neat-genreads"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "zstephens"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 252279,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/zstephens/neat-genreads/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "joshfactorial",
          "type": "User"
        },
        "date_created": "2021-02-06T19:41:23Z",
        "date_published": "2021-02-06T19:42:27Z",
        "description": "This is the first version with Python 3 and a few other upgrades. See ChangeLog for notes. Bug fixes and pull requests welcome.",
        "html_url": "https://github.com/zstephens/neat-genreads/releases/tag/3.0",
        "name": "Version 3.0",
        "release_id": 37524596,
        "tag": "3.0",
        "tarball_url": "https://api.github.com/repos/zstephens/neat-genreads/tarball/3.0",
        "type": "Release",
        "url": "https://api.github.com/repos/zstephens/neat-genreads/releases/37524596",
        "value": "https://api.github.com/repos/zstephens/neat-genreads/releases/37524596",
        "zipball_url": "https://api.github.com/repos/zstephens/neat-genreads/zipball/3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "joshfactorial",
          "type": "User"
        },
        "date_created": "2021-01-27T00:57:48Z",
        "date_published": "2021-02-06T02:30:34Z",
        "description": "This is the final Python 2 release for this repository. This contains the most up-to-date version of the Python 2 code that exists.",
        "html_url": "https://github.com/zstephens/neat-genreads/releases/tag/2.1",
        "name": "Version 2.1",
        "release_id": 37439127,
        "tag": "2.1",
        "tarball_url": "https://api.github.com/repos/zstephens/neat-genreads/tarball/2.1",
        "type": "Release",
        "url": "https://api.github.com/repos/zstephens/neat-genreads/releases/37439127",
        "value": "https://api.github.com/repos/zstephens/neat-genreads/releases/37439127",
        "zipball_url": "https://api.github.com/repos/zstephens/neat-genreads/zipball/2.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "joshfactorial",
          "type": "User"
        },
        "date_created": "2020-08-07T16:19:11Z",
        "date_published": "2020-08-20T20:22:32Z",
        "description": "This is official version 2.0 release of NEAT, and requires Python 2 to run.",
        "html_url": "https://github.com/zstephens/neat-genreads/releases/tag/v2.0",
        "name": "Version 2.0",
        "release_id": 29948008,
        "tag": "v2.0",
        "tarball_url": "https://api.github.com/repos/zstephens/neat-genreads/tarball/v2.0",
        "type": "Release",
        "url": "https://api.github.com/repos/zstephens/neat-genreads/releases/29948008",
        "value": "https://api.github.com/repos/zstephens/neat-genreads/releases/29948008",
        "zipball_url": "https://api.github.com/repos/zstephens/neat-genreads/zipball/v2.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirements",
        "parent_header": [
          "Table of Contents"
        ],
        "type": "Text_excerpt",
        "value": "* Python >= 3.6\n* biopython >= 1.78\n* matplotlib >= 3.3.4 (optional, for plotting utilities)\n* matplotlib_venn >= 0.11.6 (optional, for plotting utilities)\n* pandas >= 1.2.1\n* numpy >= 1.19.5\n* pysam >= 0.16.0.1\n\n"
      },
      "source": "https://raw.githubusercontent.com/zstephens/neat-genreads/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 06:43:54",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 95
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "Table of Contents"
        ],
        "type": "Text_excerpt",
        "value": "Here's the simplest invocation of genReads using default parameters. This command produces a single ended fastq file with reads of length 101, ploidy 2, coverage 10X, using the default sequencing substitution, GC% bias, and mutation rate models.\n\n```\npython gen_reads.py -r ref.fa -R 101 -o simulated_data\n``` \n\nThe most commonly added options are --pe, --bam, --vcf, and -c. \n\n\nOption           |  Description\n------           |:----------\n-h, --help       |  Displays usage information\n-r <str>         |  Reference sequence file in fasta format. A reference index (.fai) will be created if one is not found in the directory of the reference as [reference filename].fai. Required. The index can be created using samtools faidx.\n-R <int>         |  Read length. Required. \n-o <str>         |  Output prefix. Use this option to specify where and what to call output files. Required\n-c <float>       |  Average coverage across the entire dataset. Default: 10\n-e <str>         |  Sequencing error model pickle file\n-E <float>       |  Average sequencing error rate. The sequencing error rate model is rescaled to make this the average value. \n-p <int>         |  Sample Ploidy, default 2\n-tr <str>        |  Bed file containing targeted regions; default coverage for targeted regions is 98% of -c option; default coverage outside targeted regions is 2% of -c option\n-dr <str>\t     |  Bed file with sample regions to discard.\n-to <float>      |  off-target coverage scalar [0.02]\n-m <str>         |  mutation model pickle file\n-M <float>       |  Average mutation rate. The mutation rate model is rescaled to make this the average value. Must be between 0 and 0.3. These random mutations are inserted in addition to the once specified in the -v option.\n-Mb <str>\t |  Bed file containing positional mutation rates\n-N <int>\t |  Below this quality score, base-call's will be replaced with N's\n-v <str>         |  Input VCF file. Variants from this VCF will be inserted into the simulated sequence with 100% certainty.\n--pe <int> <int> |  Paired-end fragment length mean and standard deviation. To produce paired end data, one of --pe or --pe-model must be specified.\n--pe-model <str> |  Empirical fragment length distribution. Can be generated using [computeFraglen.py](#computefraglenpy). To produce paired end data, one of --pe or --pe-model must be specified.\n--gc-model <str> |  Empirical GC coverage bias distribution.  Can be generated using [computeGC.py](#computegcpy)\n--bam            |  Output golden BAM file\n--vcf            |  Output golden VCF file\n--fa\t\t |  Output FASTA instead of FASTQ\n--rng <int>      |  rng seed value; identical RNG value should produce identical runs of the program, so things like read locations, variant positions, error positions, etc, should all be the same.\n--gz             |  Gzip output FQ and VCF\n--no-fastq       |  Bypass generation of FASTQ read files\n--discard-offtarget |  Discard reads outside of targeted regions\n--rescale-qual   |  Rescale Quality scores to match -E input\n-d  |   Turn on debugging mode (useful for development)\n\n"
      },
      "source": "https://raw.githubusercontent.com/zstephens/neat-genreads/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Examples",
        "parent_header": [
          "Table of Contents"
        ],
        "type": "Text_excerpt",
        "value": "The following commands are examples for common types of data to be generated. The simulation uses a reference genome in fasta format to generate reads of 126 bases with default 10X coverage. Outputs paired fastq files, a BAM file and a VCF file. The random variants inserted into the sequence will be present in the VCF and all of the reads will show their proper alignment in the BAM. Unless specified, the simulator will also insert some \"sequencing error\" -- random variants in some reads that represents false positive results from sequencing.\n"
      },
      "source": "https://raw.githubusercontent.com/zstephens/neat-genreads/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Whole genome simulation",
        "parent_header": [
          "Table of Contents",
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "Simulate whole genome dataset with random variants inserted according to the default model. \n\n```\npython gen_reads.py                  \\\n        -r hg19.fa                  \\\n        -R 126                      \\\n        -o /home/me/simulated_reads \\\n        --bam                       \\\n        --vcf                       \\\n        --pe 300 30\n```\n"
      },
      "source": "https://raw.githubusercontent.com/zstephens/neat-genreads/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Targeted region simulation",
        "parent_header": [
          "Table of Contents",
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "Simulate a targeted region of a genome, e.g. exome, with -tr.\n\n```\npython gen_reads.py                  \\\n        -r hg19.fa                  \\\n        -R 126                      \\\n        -o /home/me/simulated_reads \\\n        --bam                       \\\n        --vcf                       \\\n        --pe 300 30                 \\\n        -tr hg19_exome.bed\n```\n"
      },
      "source": "https://raw.githubusercontent.com/zstephens/neat-genreads/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Insert specific variants",
        "parent_header": [
          "Table of Contents",
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "Simulate a whole genome dataset with only the variants in the provided VCF file using -v and -M.\n\n```\npython gen_reads.py                  \\\n        -r hg19.fa                  \\\n        -R 126                      \\\n        -o /home/me/simulated_reads \\\n        --bam                       \\\n        --vcf                       \\\n        --pe 300 30                 \\\n        -v NA12878.vcf              \\\n        -M 0\n```\n"
      },
      "source": "https://raw.githubusercontent.com/zstephens/neat-genreads/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Single end reads",
        "parent_header": [
          "Table of Contents",
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "Simulate single-end reads by omitting the --pe option.\n\n```\npython gen_reads.py                  \\\n        -r hg19.fa                  \\\n        -R 126                      \\\n        -o /home/me/simulated_reads \\\n        --bam                       \\\n        --vcf                       \n```\n"
      },
      "source": "https://raw.githubusercontent.com/zstephens/neat-genreads/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Large single end reads",
        "parent_header": [
          "Table of Contents",
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "Simulate PacBio-like reads by providing an error model.\n\n```\npython gen_reads.py                         \\\n\t-r hg19.fa                         \\\n\t-R 5000                            \\\n\t-e models/errorModel_pacbio_toy.p  \\\n\t-E 0.10                            \\\n\t-o /home/me/simulated_reads        \n```\n"
      },
      "source": "https://raw.githubusercontent.com/zstephens/neat-genreads/master/README.md",
      "technique": "header_analysis"
    }
  ]
}