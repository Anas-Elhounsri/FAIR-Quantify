{
  "application_domain": [
    {
      "confidence": 0.8568171966428961,
      "result": {
        "type": "String",
        "value": "Graphs"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "format": "bibtex",
        "type": "File_dump",
        "value": "@article{gainza2020deciphering,\n  title={Deciphering interaction fingerprints from protein molecular surfaces using geometric deep learning},\n  author={Gainza, P and Sverrisson, F and Monti, F and Rodol{\\`a}, E and Boscaini, D and Bronstein, MM and Correia, BE},\n  journal={Nature Methods},\n  volume={17},\n  number={2},\n  pages={184--192},\n  year={2020},\n  publisher={Nature Publishing Group}\n}\n"
      },
      "source": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/citation.bib",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Reference",
        "type": "Text_excerpt",
        "value": "If you use this code, please use the bibtex entry in [citation.bib](citation.bib)\n"
      },
      "source": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/LPDI-EPFL/masif"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-03-14T10:30:07Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-31T08:19:13Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MaSIF- Molecular surface interaction fingerprints. Geometric deep learning to decipher patterns in molecular surfaces."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Description",
        "type": "Text_excerpt",
        "value": "MaSIF is a proof-of-concept method to decipher patterns\nin protein surfaces important for specific biomolecular interactions. \nTo achieve this, MaSIF exploits techniques from the field of geometric deep learning.\nFirst, MaSIF decomposes a surface into overlapping radial patches with a fixed geodesic radius, wherein each \npoint is assigned an array of geometric and chemical features. MaSIF then computes a descriptor \nfor each surface patch, a vector that encodes a description of the features present in the patch. \nThen, this descriptor can be processed in a set of additional layers where different interactions \ncan be classified. The features \nencoded in each descriptor and the final output depend on the application-specific training data and the \noptimization objective, meaning that the same architecture can be repurposed for various tasks.\n\nThis repository contains a protocol to prepare protein structure files into feature-rich surfaces \n(with both geometric and chemical features),\nto decompose these into patches, and tensorflow-based neural network code\nto identify patterns in these using deep geometric learning.\nTo show the potential of the approach, we showcase three proof-of-concept applications: \na) ligand prediction for protein binding pockets (MaSIF-ligand); b) protein-protein interaction \n(PPI) site prediction in protein surfaces, to predict which surface patches on a protein are more \nlikely to interact with other proteins (MaSIF-site); c) ultrafast scanning of surfaces, where we use \nsurface fingerprints from binding partners to predict the structural configuration of protein-protein complexes (MaSIF-search). \n\nThis repository should closely reproduce the experiments of: \n\nGainza, P., Sverrisson, F., Monti, F., Rodola, E., Boscaini, D Bronstein, M. M., & Correia, B. E. (2019).\nDeciphering interaction fingerprints from protein molecular surfaces using geometric deep learning.\nNat Methods 17, 184\u2013192 (2020). https://doi.org/10.1038/s41592-019-0666-6\n\n<span style=\"color:red\">Note: Since Feb 2020, we have greatly simplified the installation of MaSIF by replacing all Matlab code with Python code. However, this slightly changes the results from the paper. To reproduce the results for the paper exactly as published (with the pretrained neural networks) you can obtain it at: https://github.com/pablogainza/masif_paper </span>.\n\nMaSIF is distributed under an [Apache License](https://raw.githubusercontent.com/LPDI-EPFL/masif/master/LICENSE). This \ncode is meant to serve as a tutorial, and the basis for researchers to exploit MaSIF in protein-surface learning tasks. \n"
      },
      "source": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9910682722228205,
      "result": {
        "original_header": "Method overview",
        "type": "Text_excerpt",
        "value": "From a protein structure MaSIF computes a molecular surface discretized as a mesh according to the solvent \nexcluded surface (computed using MSMS), and assigns geometric and chemical features to every point (vertex) \nin the mesh. \nAround each vertex of the mesh, we extract a patch with geodesic radius of r=9 \u00c5 or r=12 \u00c5.\nThen, MaSIF applies a geometric deep neural network to these patches. \nThe neural network consists of one or more layers applied sequentially; a key component \nof the architecture is the geodesic convolution, generalizing the classical convolution \nto surfaces and implemented as an operation on local patches.  \nThe procedure is repeated for different patch locations \nsimilarly to a sliding window operation on images, producing the surface fingerprint descriptor\nat each point, in the form of a vector that stores information about the surface patterns \nof the center point and its neighborhood. The parameter set minimizes \na cost function on the training dataset, which is specific to each application that we \npresent here.  \n"
      },
      "source": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8976243446665494,
      "result": {
        "original_header": "MaSIF proof-of-concept applications",
        "type": "Text_excerpt",
        "value": "MaSIF was tested on three proof-of-concept applications. For each application we provide the trained neural network model that was used for the main experiments in the paper. \n"
      },
      "source": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9140745628278069,
      "result": {
        "original_header": "MaSIF-ligand",
        "type": "Text_excerpt",
        "value": "The lists of pdb ids and chains used in the training and test sets are located, in numpy format, under: \n```\ndata/masif_ligand/lists/test_pdbs_sequence.npy\ndata/masif_ligand/lists/train_pdbs_sequence.npy\ndata/masif_ligand/lists/val_pdbs_sequence.npy\n```\n \nEach of these files can be read using the numpy.load function. \nThe output of the evaluation is placed under the data/masif_ligand/test_set_predictions/ directory, with two numpy files per input protein databank structure, e.g.: \n```\n5LXM_AD_labels.npy\n5LXM_AD_logits.npy\n```\nwhere the labels file contains the ground truth, and the logits file contains the prediction logits.\n \n"
      },
      "source": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.905292069630125,
      "result": {
        "original_header": "MaSIF-site",
        "type": "Text_excerpt",
        "value": "Change to the masif-site data directory. \n```\ncd data/masif_site/\n```\nThe lists of pdb ids and chains used in the training and test sets are located under: \n```\ndata/masif_site/data/lists/full_list.txt\ndata/masif_site/data/lists/training.txt\ndata/masif_site/data/lists/testing.txt\n```\nPrecompute the datasets (see [MaSIF data preparation](#MaSIF-data-preparation)), ideally using slurm:\n```\nsbatch prepare_data.slurm\n```\n \nFor the experiments in the paper we trained MaSIF-site for 40 hours.  \nOnce a network has been trained, specific proteins can be evaluated. For example to evaluate\nthe selected subset of transient interactions: \n```\n./predict_site.sh\n```\nThe predictions for each vertex in each protein are stored in the directory data/masif_site/output/all_feat_3l/pred_data/. \nThe surfaces of the predicted sites can be colored according to the site prediction: \n```\n./color_site.sh\n```\n \nand saved to a ply file, under the directory: data/masif_site/output/all_feat_3l/pred_surfaces/ \nA jupyter notebook with code to compare the prediction on the transient interactiosn of this test set \nto the program [SPPIDER](#http://sppider.cchmc.org/) can be found at:\n```\nmasif/comparison/masif_site/masif_vs_sppider/masif_sppider_comp.ipynb\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9522631938872039,
      "result": {
        "original_header": "MaSIF-search",
        "type": "Text_excerpt",
        "value": "Change to the masif-search data directory. \n```\ncd data/masif_ppi_search/\n```\nThe lists of pdb ids and chains used in the training and test sets are located under: \n```\ndata/masif_ppi_searhc/data/lists/full_list.txt\ndata/masif_site/data/lists/training.txt\ndata/masif_site/data/lists/testing.txt\n```\nPrecompute the datasets (see [MaSIF data preparation](#MaSIF-data-preparation)), ideally using slurm:\n```\nsbatch prepare_data.slurm\n```\n \nFor speed reasons, the actual data that will be used by the neural network is cached in a separate directory. This data consists of the pairs of patches that pass a shape complementarity threshold and an equal number of random patches. This process is run by executing: \n```\n./cache_nn.sh nn_models.sc05.custom_params\n```\n \nFor the paper we trained for about 40 hours. The neural network model is saved  in the nn_models/sc05/all_feat/model_data directory whenever the validation ROC AUC improves over the previously saved model's validation ROC AUC.  \n"
      },
      "source": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9820061626191859,
      "result": {
        "original_header": "PyMOL plugin",
        "type": "Text_excerpt",
        "value": "A PyMOL plugin to visualize protein surfaces is provided in the source/pymol subdirectory. We used this plugin for all the structural figures \nshown in our paper. This plugin requires PyMOL to be installed in your local computer. \n"
      },
      "source": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/lpdi-epfl/masif/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/comparison/masif_site/masif_vs_sppider/masif_sppider_Intpred_comp.ipynb"
      },
      "source": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/comparison/masif_site/masif_vs_sppider/masif_sppider_Intpred_comp.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/comparison/masif_ligand/make_ROC.ipynb"
      },
      "source": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/comparison/masif_ligand/make_ROC.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 155
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/LPDI-EPFL/masif/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "LPDI-EPFL/masif"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/comparison/masif_ppi_search/zdock/dock_all.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/comparison/masif_ppi_search/zdock/dock_one.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/comparison/masif_ppi_search/zdock/eval_all.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/comparison/masif_ppi_search/zdock/eval_one.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/comparison/masif_ppi_search/zdock/util/compute_blocked_res_list.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/comparison/masif_ppi_search/zdock/util/mark_surfaces_benchmark_set.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/comparison/masif_ppi_search/masif_descriptors_nn/second_stage_masif.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/comparison/masif_ppi_search/zrank/run_all.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/comparison/masif_ppi_search/zrank/run_one.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/comparison/masif_ppi_search/patchdock/count_all.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/comparison/masif_ppi_search/patchdock/eval_all.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/comparison/masif_ppi_search/gif_descriptors/second_stage_gif.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/comparison/masif_ppi_search_ub/zdock/dock_all.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/comparison/masif_ppi_search_ub/zdock/dock_one.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/comparison/masif_ppi_search_ub/zdock/eval_all.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/comparison/masif_ppi_search_ub/zdock/eval_one.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/comparison/masif_ppi_search_ub/zdock/util/compute_blocked_res_list.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/comparison/masif_ppi_search_ub/zdock/util/mark_surfaces_benchmark_set.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/comparison/masif_ppi_search_ub/masif_descriptors_nn/second_stage_masif.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/comparison/masif_ppi_search_ub/zrank/run_all.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/comparison/masif_ppi_search_ub/zrank/run_one.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/comparison/masif_ppi_search_ub/patchdock/eval_all.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/comparison/masif_ppi_search_ub/gif_descriptors/second_stage_gif.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/comparison/masif_ligand/run_probis.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/comparison/masif_ligand/run_all.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/comparison/masif_ligand/data/pocket_to_pocket_align/all_test_to_all_train.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/data/masif_peptides/data_extract_helix_one.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/data/masif_peptides/compute_descriptors.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/data/masif_peptides/predict_site.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/data/masif_peptides/data_precompute_patches_one.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/data/masif_ppi_search/recompute_data_docking_benchmark.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/data/masif_ppi_search/cache_nn.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/data/masif_ppi_search/eval_gif_descriptors.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/data/masif_ppi_search/train_nn.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/data/masif_ppi_search/compute_gif_descriptors.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/data/masif_ppi_search/compute_descriptors.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/data/masif_ppi_search/data_prepare_one.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/data/masif_ppi_search/transformation_training_data/generate_all_data.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/data/masif_ppi_search/transformation_training_data/train_nn.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/data/masif_ppi_search/transformation_training_data/generate_data.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/data/masif_pdl1_benchmark/run_benchmark_nn.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/data/masif_pdl1_benchmark/data_prepare_compute_descriptors.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/data/masif_ppi_search_ub/recompute_data_docking_benchmark.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/data/masif_ppi_search_ub/compute_gif_descriptors.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/data/masif_ppi_search_ub/compute_descriptors.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/data/masif_ppi_search_ub/data_prepare_one.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/data/masif_site/reproduce_transient_benchmark.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/data/masif_site/color_site.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/data/masif_site/train_nn.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/data/masif_site/data_prepare_all.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/data/masif_site/data_prepare_one.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/data/masif_site/predict_site.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/data/masif_site/submit_all.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/data/masif_ligand/evaluate_test.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/data/masif_ligand/data_prepare_one.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "identifier": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://doi.org/10.5281/zenodo.2625420"
      },
      "source": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/LPDI-EPFL/masif/master/img/Concept-01.png"
      },
      "source": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/LPDI-EPFL/masif/master/img/Method-01.png"
      },
      "source": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/LPDI-EPFL/masif/master/img/Applications-01.png"
      },
      "source": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/LPDI-EPFL/masif/master/img/PyMOL-01.png"
      },
      "source": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Installing the masif pymol plugin. \n\n\n\n\nTo install the plugin go to the Plugin -> Plugin Manager window in PyMOL and choose the Install new plugin tab:\n\n![MaSIF Install new plugin window](https://raw.githubusercontent.com/LPDI-EPFL/masif/master/img/ImageInitial.png)\n\nThen select the masif/source/masif_pymol_plugin.zip file: \n\n![MaSIF Install new plugin window](https://raw.githubusercontent.com/LPDI-EPFL/masif/master/img/PluginSelect.png)\n\nAfter this, pymol will prompt you for an installation directory. You can select the default path. \n\nFinally, close and reopen pymol. Go again to the plugin manager window and verify that masif pymol plugin is installed: \n\n\n![MaSIF Install new plugin window](https://raw.githubusercontent.com/LPDI-EPFL/masif/master/img/ImageVerify.png)\n\n\nYou can now test the installation of the plugin. For example, you can download any of the files in this link : \n\nhttps://github.com/LPDI-EPFL/masif/tree/master/comparison/masif_site/masif_vs_sppider/masif_pred\n\nand then open them using the command (inside pymol):\n\n```\nloadply 4ETP_A.ply\n```\n\n\n## Troubleshooting the plugin installation.\n\n- Make sure that pymol can find the location where you installed the plugin. Another possibilty is to go to \"Plugin Manager\" within PyMOL and then click the \"Settings\" tab. There, click on \"Add new directory\" add the following directory:\n\n```\nmasif/source/masif_plugin_pymol/\n```\n\nThis should tell pymol to search this directory for plugins.\n\n\nIn addition, some solutions are provided in this thread to problems with the plugin, especially in windows: \n\nhttps://github.com/LPDI-EPFL/masif/issues/15\n"
      },
      "source": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/pymol_plugin_installation.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "After preinstalling dependencies, add the following environment variables to your path, changing the appropriate directories:\n\n```\nexport APBS_BIN=/path/to/apbs/APBS-1.5-linux64/bin/apbs\nexport MULTIVALUE_BIN=/path/to/apbs/APBS-1.5-linux64/share/apbs/tools/bin/multivalue\nexport PDB2PQR_BIN=/path/to/apbs/apbs/pdb2pqr-linux-bin64-2.1.1/pdb2pqr\nexport PATH=$PATH:/path/to/reduce/\nexport REDUCE_HET_DICT=/path/to/reduce/reduce_wwPDB_het_dict.txt\nexport PYMESH_PATH=/path/to/PyMesh\nexport MSMS_BIN=/path/to/msms/msms\nexport PDB2XYZRN=/path/to/msms/pdb_to_xyzrn\n```\n\nClone masif to a local directory\n\n```\ngit clone https://github.com/lpdi-epfl/masif\ncd masif/\n```\n\nSince MaSIF is written in Python, no compilation is required.\n"
      },
      "source": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "MaSIF data preparation",
        "parent_header": [
          "Method overview"
        ],
        "type": "Text_excerpt",
        "value": "For each application, MaSIF requires a preprocessing of data. This entails a running a scripted protocol, \nwhich performs the following steps: \n\n1. Download the PDB. \n2. Protonate the PDB, extract the desired chains, triangulate the surface (using MSMS), and compute chemical features. \n3. Extract all patches, with features and coordinates, for each protein.\n\nMaSIF's main speed bottleneck lie in these three steps. The main performance bottlenecks are computing the angular coordinates using MDS, computing the Poisson-Boltzmann electrostatics and regularizing the mesh after computing the MSMS surface.\n\nEach application data directory (under masif/data/masif\\*) contains a script to precompute the data.\n\nTo run this protocol for a single protein, (e.g. chain A of PDB id code 1MBN ) run: \n\n```\n./data_prepare_one.sh 1MBN_A_\n```\n\nTo run it on a pair of interacting protein domains (chains A,B, of PDB id 1AKJ form the first domain and chains D,E form the second domain): \n\n```\n./data_prepare_one.sh 1AKJ_AB_DE\n```\n\nIf you have access to a cluster (strongly recommended), then this process can be run in parallel. If your cluster supports slurm files, we provide a slurm file under each application data directory. which can be run using sbatch: \n\n```\nsbatch data_prepare.slurm\n```\n\nMost of the PDBs that were used for the paper, and their corresponding surfaces (with precomputed chemical features) are available at: https://doi.org/10.5281/zenodo.2625420 . The unbound proteins are available in this repository under [data/masif_ppi_search_ub/data_preparation/00-raw_pdbs/](https://github.com/LPDI-EPFL/masif/tree/master/data/masif_ppi_search_ub/data_preparation/00-raw_pdbs).\n\nNote that the preparation of the data can consume a large amount of space for large protein databases. This is due to the fact that the preprocessing step decomposes protein surfaces into overlapping patches, which results in a large amount of duplicated data. In upcoming versions we hope to optimize this process to perform patch-decomposition operations on-the-fly, eliminating the need for large amounts of disk space.\n"
      },
      "source": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9473353902997356,
      "result": {
        "original_header": "MaSIF-ligand",
        "type": "Text_excerpt",
        "value": "Precompute the datasets (see [MaSIF data preparation](#MaSIF-data-preparation)), ideally using slurm:\n```\nsbatch prepare_data.slurm\n```\n \nOnce the data has been precomputed, MaSIF-ligand requires the generation of Tensorflow \n[TFRecords](#https://www.tensorflow.org/tutorials/load_data/tf_records) for training.\nFor this, either run slurm or execute the command present in the make_tfrecord.slurm file:\n```\nsbatch make_tfrecord.slurm\n```\nOnce the tfrecords have been precomputed, the training for the network can start, where we strongly recommend a GPU\n(run the commands in the slurm file one by one if you do not have slurm):\n```\nsbatch train_model.slurm\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8451911940191952,
      "result": {
        "original_header": "MaSIF-search",
        "type": "Text_excerpt",
        "value": "./train.sh nn_models.sc05.custom_params \nOnce the neural network has been trained and saved, descriptors for specific proteins can be computed using the command: \n```\n./compute_descriptors.sh lists/testing.txt\n```\n \nThese descriptors are saved under the descriptors/ directory. \n"
      },
      "source": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9661221216895516,
      "result": {
        "original_header": "PyMOL plugin",
        "type": "Text_excerpt",
        "value": "A PyMOL plugin to visualize protein surfaces is provided in the source/pymol subdirectory. We used this plugin for all the structural figures \nshown in our paper. This plugin requires PyMOL to be installed in your local computer. \nPlease see the following tutorial on how to install it: \nTo load a protein surface file, run this command inside PyMOL: \n```\nloadply ABCD_E.ply\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8141808179943787,
      "result": {
        "original_header": "MaSIF-site",
        "type": "Text_excerpt",
        "value": "Change to the masif-site data directory. \n```\ncd data/masif_site/\n```\nThe lists of pdb ids and chains used in the training and test sets are located under: \n```\ndata/masif_site/data/lists/full_list.txt\ndata/masif_site/data/lists/training.txt\ndata/masif_site/data/lists/testing.txt\n```\nPrecompute the datasets (see [MaSIF data preparation](#MaSIF-data-preparation)), ideally using slurm:\n```\nsbatch prepare_data.slurm\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8400977843811978,
      "result": {
        "original_header": "MaSIF-search",
        "type": "Text_excerpt",
        "value": "Change to the masif-search data directory. \n```\ncd data/masif_ppi_search/\n```\nThe lists of pdb ids and chains used in the training and test sets are located under: \n```\ndata/masif_ppi_searhc/data/lists/full_list.txt\ndata/masif_site/data/lists/training.txt\ndata/masif_site/data/lists/testing.txt\n```\nPrecompute the datasets (see [MaSIF data preparation](#MaSIF-data-preparation)), ideally using slurm:\n```\nsbatch prepare_data.slurm\n```\n \n./train.sh nn_models.sc05.custom_params \n"
      },
      "source": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8548591384954737,
      "result": {
        "original_header": "PyMOL plugin",
        "type": "Text_excerpt",
        "value": "To load a protein surface file, run this command inside PyMOL: \n```\nloadply ABCD_E.ply\n```\n \nExample:\n![MaSIF PyMOL plugin example](https://raw.githubusercontent.com/LPDI-EPFL/masif/master/img/PyMOL-01.png)\n \n"
      },
      "source": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/LPDI-EPFL/masif/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "geometric-deep-learning, molecular-surface, protein-surface"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Apache License 2.0",
        "spdx_id": "Apache-2.0",
        "type": "License",
        "url": "https://api.github.com/licenses/apache-2.0",
        "value": "https://api.github.com/licenses/apache-2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2019 - Gainza P, Sverrisson F, Monti F, Rodola, Bronstein MM, Correia BE\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
      },
      "source": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "type": "Text_excerpt",
        "value": "MaSIF is released under an [Apache v2.0 license](LICENSE).\n"
      },
      "source": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "masif"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "LPDI-EPFL"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 440415,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 363511,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 47611,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "TeX",
        "size": 395,
        "type": "Programming_language",
        "value": "TeX"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "pablogainza",
          "type": "User"
        },
        "date_created": "2019-08-28T09:31:19Z",
        "date_published": "2019-10-27T09:58:27Z",
        "description": "This is the software version used for the experiments in the paper. This release has a wider list of requirements (e.g. matlab) than the current version.",
        "html_url": "https://github.com/LPDI-EPFL/masif/releases/tag/0.1.1",
        "name": "MaSIF Paper software release",
        "release_id": 21004489,
        "tag": "0.1.1",
        "tarball_url": "https://api.github.com/repos/LPDI-EPFL/masif/tarball/0.1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/LPDI-EPFL/masif/releases/21004489",
        "value": "https://api.github.com/repos/LPDI-EPFL/masif/releases/21004489",
        "zipball_url": "https://api.github.com/repos/LPDI-EPFL/masif/zipball/0.1.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "pablogainza",
          "type": "User"
        },
        "date_created": "2019-08-28T09:31:19Z",
        "date_published": "2019-10-27T09:54:56Z",
        "description": "Release with MaSIF experiments as provided in the paper. ",
        "html_url": "https://github.com/LPDI-EPFL/masif/releases/tag/v0.1",
        "name": "MaSIF_paper",
        "release_id": 21004467,
        "tag": "v0.1",
        "tarball_url": "https://api.github.com/repos/LPDI-EPFL/masif/tarball/v0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/LPDI-EPFL/masif/releases/21004467",
        "value": "https://api.github.com/repos/LPDI-EPFL/masif/releases/21004467",
        "zipball_url": "https://api.github.com/repos/LPDI-EPFL/masif/zipball/v0.1"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "System and hardware requirements",
        "type": "Text_excerpt",
        "value": "MaSIF has been tested on both Linux (Red Hat Enterprise Linux Server release 7.4, with a Intel(R) Xeon(R) CPU E5-2650 v2 @ 2.60GHz \nprocessesor and 16GB of memory allotment) and Mac OS environments (macOS High Sierra, processor 2.8 GHz Intel Core i7, 16GB memory). \nTo reproduce the experiments in the paper, the entire datasets for all proteins consume about 1.4 terabytes.\n\nCurrently, MaSIF takes about 2 minutes to preprocess every protein. For this reason, we recommend a distributed cluster to \npreprocess the data for large datasets of proteins. Once data has been preprocessed, we strongly recommend using a GPU to \ntrain or evaluate the trained models as it can be up to 100 times faster than a CPU. \n"
      },
      "source": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Software prerequisites",
        "type": "Text_excerpt",
        "value": "MaSIF relies on external software/libraries to handle protein databank files and surface files, \nto compute chemical/geometric features and coordinates, and to perform neural network calculations. \nThe following is the list of required libraries and programs, as well as the version on which it was tested (in parenthesis).\n* [Python](https://www.python.org/) (3.6)\n* [reduce](http://kinemage.biochem.duke.edu/software/reduce.php) (3.23). To add protons to proteins. \n* [MSMS](http://mgltools.scripps.edu/packages/MSMS/) (2.6.1). To compute the surface of proteins. \n* [BioPython](https://github.com/biopython/biopython) (1.66) . To parse PDB files. \n* [PyMesh](https://github.com/PyMesh/PyMesh) (0.1.14). To handle ply surface files, attributes, and to regularize meshes.\n* PDB2PQR (2.1.1), multivalue, and [APBS](http://www.poissonboltzmann.org/) (1.5). These programs are necessary to compute electrostatics charges.\n* [open3D](https://github.com/IntelVCL/Open3D) (0.5.0.0). Mainly used for RANSAC alignment.\n* [Tensorflow](https://www.tensorflow.org/) (1.9). Use to model, train, and evaluate the actual neural networks. Models were trained and evaluated on a NVIDIA Tesla K40 GPU.\n* [StrBioInfo](https://pypi.org/project/StrBioInfo/). Used for parsing PDB files and generate biological assembly for MaSIF-ligand.\n* [Dask](https://dask.org/) (2.2.0). Run function calls on multiple threads (Optional for reproducing some benchmarks).\n* [Pymol](https://pymol.org/2/). This optional plugin allows one to visualize surface files in PyMOL.\n \nAlternatively you can use the Docker version, which is the easiest to install (See [Docker container](#Docker-container))"
      },
      "source": "https://raw.githubusercontent.com/lpdi-epfl/masif/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-11-04 01:43:39",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 591
      },
      "technique": "GitHub_API"
    }
  ]
}