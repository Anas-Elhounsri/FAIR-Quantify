{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/tlemmin/glycosylator"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contributing",
        "parent_header": [
          "A Python framework for the rapid modeling of glycans"
        ],
        "type": "Text_excerpt",
        "value": "Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.\n"
      },
      "source": "https://raw.githubusercontent.com/tlemmin/glycosylator/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2016-08-30T20:11:22Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-08-06T03:49:25Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Framework for the rapid modeling glycans and glycoproteins."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.994396368736606,
      "result": {
        "original_header": "A Python framework for the rapid modeling of glycans",
        "type": "Text_excerpt",
        "value": "Glycosylator is a Python framework for the identification, modeling and\nmodification of glycans in protein structure. It can be used directly in a Python script\nthrough its API or through its Graphical User Interface (GUI). The GUI provides a\nstraightforward 2D rendering of a glycoprotein that allows for a quick visual inspection of\nthe gylcosylation state of all the sequons on a protein structure. Modeled glycans can\nbe further refined by a genetic algorithm for removing clashes and sampling alternative\nconformations. Glycosylator can also identify specific 3D glycans on a protein structure\nusing a library of predefined templates.\nGlycosylator has been implemented in a generic way allowing the user to expand the library to incorporate other polymers. \n"
      },
      "source": "https://raw.githubusercontent.com/tlemmin/glycosylator/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8352266546734589,
      "result": {
        "original_header": "Glycan text representation",
        "type": "Text_excerpt",
        "value": "Glycosylator uses a text representation to identify or build glycans.\nA UNIT is defined by its residue name (3 letter code from PDB), the connecting atom, and the path from the root UNIT. The root UNIT is the first glycan that is connected to the sequon.\nThe path is defined by the patches (PRES in CHARMM ff) that are applied to connect to the previous UNIT.\nExample for mannose 3:\n```\n                                         -16ab-> MAN[Z4] -13ab-> MAN[Z7]\nNAG[Z1] -14bb-> NAG[Z2] -14bb-> BMA[Z3]-|\n                                         -13ab-> MAN[Z7]    \n```    \nThe corresponding text representation (connectivity topology):\nBASH2* \n"
      },
      "source": "https://raw.githubusercontent.com/tlemmin/glycosylator/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8317152390529321,
      "result": {
        "original_header": "Adding new monosaccaride",
        "type": "Text_excerpt",
        "value": "Glycosylator uses the internal coordinates (IC) to build molecules. It requires the absence of circular dependency.\nThe easiest is to extract the coordinates from a PDB file of the optimized monomer. \nTwo scripts are available for generating the coordinates: ./support/scripts/\n - buildICs.py: will compute all values for a list of ICs.\n - XML2PDB.py: extracts the structure from RCSB XML molecule file. \n \n"
      },
      "source": "https://raw.githubusercontent.com/tlemmin/glycosylator/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/tlemmin/glycosylator/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 11
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/tlemmin/glycosylator/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "tlemmin/glycosylator"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "New implementation in python 3.0 available :)"
      },
      "source": "https://raw.githubusercontent.com/tlemmin/glycosylator/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Setting up topology for Molecular Dynamics simulations",
        "parent_header": [
          "A Python framework for the rapid modeling of glycans"
        ],
        "type": "Text_excerpt",
        "value": "Glycosylator does not build directly the topology file for MD simulations. However, the output is fully compatible with several very good tools."
      },
      "source": "https://raw.githubusercontent.com/tlemmin/glycosylator/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "VMD",
        "parent_header": [
          "A Python framework for the rapid modeling of glycans",
          "Setting up topology for Molecular Dynamics simulations"
        ],
        "type": "Text_excerpt",
        "value": "Available from Theoretical and Computational Biophysics Group at UIUC: https://www.ks.uiuc.edu/Research/vmd/\n1. autopsf: In most cases, glycans are dectected correctly and the topology file is generated automatically.\n2. psfgen: Manually build the topology for glycans and combine the topology of the protein . Glycosylator provides a list of patches for connecting glycans. (see demo D10_psfgen)\n"
      },
      "source": "https://raw.githubusercontent.com/tlemmin/glycosylator/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "CHARMM-GUI",
        "parent_header": [
          "A Python framework for the rapid modeling of glycans",
          "Setting up topology for Molecular Dynamics simulations"
        ],
        "type": "Text_excerpt",
        "value": "CHARMM-GUI requires the `CONECT` field for the glycans. @Vikasdubey0551 suggested two approaches (see issue 2):"
      },
      "source": "https://raw.githubusercontent.com/tlemmin/glycosylator/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Pymol",
        "parent_header": [
          "A Python framework for the rapid modeling of glycans",
          "Setting up topology for Molecular Dynamics simulations",
          "CHARMM-GUI"
        ],
        "type": "Text_excerpt",
        "value": "1. load glycan pdb to pymol\n2. in pymol command line, write the following :\n    > set pdb_retain_ids, on\n    > set pdb_conect_all, off\n    > save yourfile.pdb\n3. This will write `CONECT` records in the end for only `HETATMs`.\n"
      },
      "source": "https://raw.githubusercontent.com/tlemmin/glycosylator/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Chimera",
        "parent_header": [
          "A Python framework for the rapid modeling of glycans",
          "Setting up topology for Molecular Dynamics simulations",
          "CHARMM-GUI"
        ],
        "type": "Text_excerpt",
        "value": "1. Upload glycan pdb to chimera by **clicking -> file -> open**.\n2.  Go to **Select -> Chain -> choose chain containing glycans yourself**.\n3. Go to **Tools-> Structure Editing -> Renumber Residues**.\n4. Click on selected residues and renumber the glycan residues by typing a desired number.\n5. Go to **File-> Save PDB -> save the pdb**.\n6. This will write `CONECT` records in the end for only `HETATMs`.\n"
      },
      "source": "https://raw.githubusercontent.com/tlemmin/glycosylator/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9990400693213649,
      "result": {
        "original_header": "New implementation in python 3.0 available :)",
        "type": "Text_excerpt",
        "value": "https://github.com/ibmm-unibe-ch/glycosylator \nInstallation\n```\npip install glycosylator\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/tlemmin/glycosylator/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8944457510064994,
      "result": {
        "original_header": "A Python framework for the rapid modeling of glycans",
        "type": "Text_excerpt",
        "value": "Please cite:\nhttps://bmcbioinformatics.biomedcentral.com/articles/10.1186/s12859-019-3097-6\n \n"
      },
      "source": "https://raw.githubusercontent.com/tlemmin/glycosylator/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/tlemmin/glycosylator/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "charmm, glycan-analysis, glycan-structures, glycans, glycoinformatics, glycosylation, glycosylator, python"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "parent_header": [
          "A Python framework for the rapid modeling of glycans"
        ],
        "type": "Text_excerpt",
        "value": "[MIT](https://choosealicense.com/licenses/mit/)\n"
      },
      "source": "https://raw.githubusercontent.com/tlemmin/glycosylator/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tlemmin/glycosylator/master/./icons/glycosylator_logo.png"
      },
      "source": "https://raw.githubusercontent.com/tlemmin/glycosylator/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "glycosylator"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "tlemmin"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Rich Text Format",
        "size": 326114,
        "type": "Programming_language",
        "value": "Rich Text Format"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 227784,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tlemmin/glycosylator/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependencies",
        "parent_header": [
          "A Python framework for the rapid modeling of glycans"
        ],
        "type": "Text_excerpt",
        "value": "Glycosylator was developed with the following environment:\n```\nconda env create -f environment.yml\n```\nThe dependencies for python2.7 are getting very old. networkx installed a newer version of `decoretor`, which is not compatible with python2.7. The older version can be found in the `support` folder."
      },
      "source": "https://raw.githubusercontent.com/tlemmin/glycosylator/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 04:00:41",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 28
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "A Python framework for the rapid modeling of glycans"
        ],
        "type": "Text_excerpt",
        "value": "To open the GUI:\n```python glycosylator_GUI.py```\nThe GUI was developed on Linux, it seems to be a bit buggy on Mac OsX.\n\nIn Python script:\n```\nimport glycosylator as gl\nmyGlycosylator = gl.Glycosylator(os.path.join(gl.GLYCOSYLATOR_PATH, 'support/toppar_charmm/carbohydrates.rtf'), os.path.join(gl.GLYCOSYLATOR_PATH, 'support/toppar_charmm/carbohydrates.prm'))\nmyGlycosylator.builder.Topology.read_topology(os.path.join(gl.GLYCOSYLATOR_PATH, 'support/topology/DUMMY.top'))\n#Load topology information about glycans\nmyGlycosylator.read_connectivity_topology(os.path.join(gl.GLYCOSYLATOR_PATH, 'support/topology/mannose.top'))\n# 3. Automatically detect all sequons and N-linked glycans\nprint 'Loading glycoprotein'\nmyGlycosylator.load_glycoprotein(os.path.join(gl.GLYCOSYLATOR_PATH, 'support/examples/env_4tvp.pdb'))\nmyGlycosylator.build_glycan_topology(patch = 'NGLB')\n```\n"
      },
      "source": "https://raw.githubusercontent.com/tlemmin/glycosylator/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Demo",
        "parent_header": [
          "A Python framework for the rapid modeling of glycans"
        ],
        "type": "Text_excerpt",
        "value": "The demo folder contains several examples, showing how to use the different classes provided by Glycosylator.\n\n- The Molecule class is used for storing the coordinates (Prody\u2019s AtomGroup) and\nconnectivity (NetworkX graph) of a molecule\n- The MoleculeBuilder class is employed for building and editing molecules\n- Glycosylator class was designed to deal specifically with glycans/glycoprotein and model glycans\n- Sampler class implements a genetic algorithm for removing clashes between Molecules and their environment (e.g. protein)\n- Drawer class is used for generating 2D symbolic representations of glycans according to the UIPAC standard\n"
      },
      "source": "https://raw.githubusercontent.com/tlemmin/glycosylator/master/README.md",
      "technique": "header_analysis"
    }
  ]
}