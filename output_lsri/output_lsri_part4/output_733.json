{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "simuG"
        ],
        "type": "Text_excerpt",
        "value": "Jia-Xing Yue, Gianni Liti. (2019) simuG: a general-purpose genome simulator. *Bioinformatics*, btz424. [[LINK]](https://academic.oup.com/bioinformatics/advance-article/doi/10.1093/bioinformatics/btz424/5497256?guestAccessKey=70aa2de0-3519-4be5-a3e2-fe6c2724c40f)\n"
      },
      "source": "https://raw.githubusercontent.com/yjx1217/simuG/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/yjx1217/simuG"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contact",
        "parent_header": [
          "simuG"
        ],
        "type": "Text_excerpt",
        "value": "Please report any problems to the github issue tracker (at http://github.com/yjx1217/simuG). Alternatively, you can also write directly to me at yuejiaxing[at]gmail[dot]com.\n"
      },
      "source": "https://raw.githubusercontent.com/yjx1217/simuG/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-12-04T12:47:40Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-16T20:34:49Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "simuG: a general-purpose genome simulator"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Description",
        "parent_header": [
          "simuG"
        ],
        "type": "Text_excerpt",
        "value": "Simulated genomes with pre-defined or random genomic variants can be very useful for benchmarking genomic and bioinformatics analyses. Here we introduce simuG as a light-weighted tool for simulating the full spectrum of genomic variants (SNPs, INDELs, CNVs, inversions, and translocations). In addition, simuG enables a rich array of fine-tuned controls, such as simulating SNPs in different coding partitions (e.g. coding sites, noncoding sites, 4-fold degenerate sites, or 2-fold degenerate sites); simulating CNVs with different formation mechanisms (e.g. segmental deletions, dispersed duplications, and tandem duplications); and simulating inversions and translocations with specific types of breakpoints. The simplicity and versatility of simuG make it a unique general purpose genome simulator for a wide-range of simulation-based applications.\n"
      },
      "source": "https://raw.githubusercontent.com/yjx1217/simuG/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.8970741960905675,
      "result": {
        "original_header": "simuG",
        "type": "Text_excerpt",
        "value": "A simple, flexible, and powerful tool to simulate genome sequences with pre-defined or random genomic variants. \n"
      },
      "source": "https://raw.githubusercontent.com/yjx1217/simuG/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9695472263327312,
      "result": {
        "original_header": "What\u2019s Inside",
        "type": "Text_excerpt",
        "value": "Two Perl scripts (*.pl) are provided, among which simuG.pl is the main program while vcf2model.pl is an ancillary script that can extract real-data based SNP and INDEL parameters from user-supplied SNP/INDEL variant calling VCF file. The directory Testing_Example contains some sample input files for walking through the testing examples.   \n"
      },
      "source": "https://raw.githubusercontent.com/yjx1217/simuG/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9110674815994443,
      "result": {
        "original_header": "Full Option List",
        "type": "Text_excerpt",
        "value": "```\nUsage:\n    perl simuG.pl [options] [file ...]\n\nOptions:\n    -help or -h\n            Print help message. Example: -h.\n\n    -man or -m\n            Print more detailed help message. Example: -m.\n\n    -version or -v\n            Print version information. Example: -v.\n\n    -refseq or -r\n            Specify the reference genome to be used as the template (in\n            fasta or fasta.gz format). This option is mandatory. Default =\n            \"\". Example: -refseq ref.genome.fa(.gz).\n\n    -snp_vcf\n            Specify the list of exact SNP variants to be introduced (in vcf\n            or vcf.gz format). When specified, the options '-snp_count',\n            '-snp_model', and '-titv_ratio' will be ignored. If there are\n            also INDEL variants in the vcf file, they will be automatically\n            ignored. Default = \"\". Example: -snp_vcf snp.vcf(.gz).\n\n    -snp_count\n            Specify the number of SNP variants to be introduced. Default =\n            \"\". Example: -snp_count 5000.\n\n    -snp_model\n            Specify the SNP model file generated by the ancillary script\n            vcf2model.pl. When specified, the option '-titv_ratio' will be\n            ignored. Default = \"\". Example: -snp_model snp_model.txt.\n\n    -titv_ratio\n            Specify the Ti/Tv ratio (transition/transversion ratio) used for\n            simulate SNP variants. Default = 0.5. Example: -titv_ratio 2.0.\n            For transition only, set '-titv_ratio Inf'. For transversion\n            only, set '-titv_ratio 0'.\n\n    -coding_partition_for_snp_simulation\n            Specify the coding partition (e.g. 'noncoding', 'coding', '2d'\n            or '4d') used for constraining simulate SNP variants within the\n            specified sites. This option needs to be used together with the\n            option '-gene_gff'. Default = \"\". Example:\n            -coding_partition_for_snp_simulation 4d for simulating SNP only\n            in 4-fold degenerate (4d) sites.\n\n    -indel_vcf\n            Specify the list of exact INDEL variants to be introduced (in\n            vcf or vcf.gz format). When specified, the options\n            '-indel_count', '-indel_model', '-ins_del_ratio',\n            '-indel_size_powerlaw_alpha', and\n            '-indel_size_powerlaw_constant' will be ignored. If there are\n            also SNP variants in the vcf file, they will be automatically\n            ignored. Default = \"\". Example: -indel_vcf indel.vcf(.gz).\n\n    -indel_count\n            Specify the number of INDEL variants to be introduced. Default =\n            \"\". Example: -indel_count 500.\n\n    -indel_model\n            Specify the INDEL model file generated by the ancillary script\n            vcf2model.pl. When specified, the options '-ins_del_ratio',\n            '-indel_size_powerlaw_alpha', and\n            '-indel_size_powerlaw_constant' will be ignored. Default = \"\".\n            Example: -indel_model indel_model.txt.\n\n    -ins_del_ratio\n            Specify the Insertion/Deletion ratio used for simulate INDEL\n            variants. Default = 1.0. Example: -ins_del_ratio 1.0. For\n            insertion only, set '-ins_del_ratio Inf'. For deletion only, set\n            '-ins_del_ratio 0'.\n\n    -indel_size_powerlaw_alpha\n            Specify the exponent factor alpha for power-law-fitted indel\n            size distribution: p = C * (size) ** (-alpha) for size >= 1 &\n            size <= 50. Default = 2.0. Example: -indel_size_powerlaw_alpha\n            2.0.\n\n    -indel_size_powerlaw_constant\n            Specify the exponent factor constant (C) for power-law-fitted indel\n            size distribution: p = C * (size) ** (-alpha) for size >= 1 &\n            size <= 50. Default = 0.5. Example:\n            -indel_size_powerlaw_constant 0.5.\n\n    -cnv_vcf\n            Specify the list of exact CNV variants to be introduced (in vcf\n            or vcf.gz format). When specified, the options '-cnv_count',\n            '-cnv_gain_loss_ratio', '-cnv_max_copy_number', '-cnv_min_size',\n            and '-cnv_max_size' will be ignored. Default = \"\". Example:\n            -cnv_vcf cnv.vcf.\n\n    -cnv_count\n            Specify the number of CNV variants to be introduced. Default =\n            \"\". Example: -cnv_count 50.\n\n    -cnv_gain_loss_ratio\n            Specify the relative ratio of DNA again over DNA loss. Default =\n            1.0. Example: -cnv_gain_loss_ratio 1.0. For copy number gain\n            only, set '-cnv_gain_loss Inf'. For copy number loss only, set\n            '-cnv_gain_loss_ratio 0'.\n\n    -cnv_max_copy_number\n            Specify the maximal copy number for CNV. Default = 10. Example:\n            -cnv_max_copy_number 10.\n\n    -cnv_min_size\n            Specify the minimal size (in basepair) for CNV variants. Default\n            = 100. Example: -cnv_min_size 100.\n\n    -cnv_max_size\n            Specify the maximal size (in basepair) for CNV variants. Default\n            = 100000. Example: -cnv_max_size 100.\n\n    -duplication_tandem_dispersed_ratio\n            Specify the expect frequency ratio between tandem duplication\n            and dispersed duplication for CNV variants. Default = 1.\n            Example: -duplication_tandem_dispersed_ratio 1. For simulating\n            tandem duplication only, set\n            '-duplication_tandem_dispersed_ratio Inf'. For simulating\n            dispersed duplication only, set\n            '-duplication_tandem_dispersed_ratio 0'.\n\n    -inversion_vcf\n            Specify the list of exact inversions to be introduced (in vcf or\n            vcf.gz format). When specified, the options '-inversion_count',\n            '-inversion_min_size', '-inversion_max_size', and\n            '-inversion_breakpoint_gff' will be ignored. Default = \"\".\n            Example: -inversion_vcf inversion.vcf(.gz).\n\n    -inversion_count\n            Specify the number of inversions to be introduced. Default = \"\".\n            Example: -inversion_count 5.\n\n    -inversion_min_size\n            Specify the minimal size (in basepair) for inversion. Default =\n            1000. Example: -inversion_min_size 1000.\n\n    -inversion_max_size\n            Specify the maximal size (in basepair) for inversion. Default =\n            100000. Example: -inversion_max_size 100000.\n\n    -inversion_breakpoint_gff\n            Specify the list of potential breakpoints for triggering\n            inversions (in gff3 or gff3.gz format). Default = \"\". Example:\n            -inversion_breakpoint_gff inversion_breakpoint.gff(.gz).\n\n    -translocation_vcf\n            Specify the list of exact translocations to be introduced (in\n            vcf or vcf.gz format). When specified, the options\n            '-translocation_count' and '-sv_breakpoint_gff' will be ignored.\n            Default = \"\". Example: -translocation_vcf\n            transloaction.vcf(.gz).\n\n    -translocation_count\n            Specify the number of translocations to be introduced. Default =\n            \"\". Example: -translocation_count 1.\n\n    -translocation_breakpoint_gff\n            Specify the list of potential breakpoints for triggering\n            translocations (in gff3 or gff3.gz format). Default = \"\".\n            Example: -translocation_breakpoint_gff\n            translocation_breakpoint.gff(.gz).\n\n    -centromere_gff\n            Specify centromeres for constraining the random CNV, inversion,\n            and translocation simulation (in gff3 or gff3.gz format). When\n            this option applied, those potential CNVs that will induce\n            centromere deletion/duplication as well as the potential\n            inversions and translocations with breakpoints overlapped with\n            defined centromeres will be disalled. Also, potential\n            translocation that will induce dicentric rearranged chromosomes\n            will be disalled as well. Default = \"\". Example: -centromere_gff\n            centromere.gff(.gz).\n\n    -gene_gff\n            Specify genes for constraining the random SNP, CNV, inversion,\n            and translocation simulation (in gff3 or gff3.gz format). For\n            random SNP simulation, this option needs to be used together\n            with the option '-coding_partition_for_snp_simulation' to\n            constrain SNPs simulations only in noncoding regions, coding\n            regions, 2-fold degenerate (2d) sites or 4-fold degenerate (4d)\n            sites. For random CNV, inversion, and translocation simulation,\n            applied this option will disallow simulated breakpoints falling\n            on the defined genes. Default = \"\". Example: -gene_gff\n            gene.gff(.gz).\n\n    -excluded_chr_list\n            Specify the name of chromosome(s) to be excluded for introducing\n            genomic variants (a single-column list file in txt format).\n            Default = \"\". Example: -excluded_chr_list excluded_chr_list.txt.\n\n    -seed or -s\n            Specify an integer as the random seed for the simulation. It is\n            recommended to set a very big integer for ideal randomness.\n            Default = \"\". Example: -seed 201812201903.\n\n    -prefix or -p\n            Specify the prefix for output files. Default = \"output_prefix\".\n            Example: -prefix sim.\n\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/yjx1217/simuG/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9290911518926448,
      "result": {
        "original_header": "Outputs",
        "type": "Text_excerpt",
        "value": "Upon the completion of the simulation, three files will be produced: 1) a simulated genome bearing introduced variants in FASTA format, 2) a tabular file showing the genomic locations of all introduced variants relative to both reference genome and simulated genome, 3) a VCF file showing the genomic locations of all introduced variants relative to the reference genome. \n**!!! IMPORTANT** Please note that in order to keep records on the exact genomic locations of introduced variants, simuG does not perform variant normalization for the generated VCF files. Depending on the immediate neighboring bases of the introduced genomic variants, this might have an impact if you directly compare simuG\u2019s VCF outputs with those from other tools. Therefore, it is highly recommended to first normalize simuG\u2019s VCF outputs as well as the VCF outputs from other tools using a VCF normalization tool such as vt (https://github.com/atks/vt) before making such comparison. You can read more about variant normalization here (https://genome.sph.umich.edu/wiki/Variant_Normalization). \n"
      },
      "source": "https://raw.githubusercontent.com/yjx1217/simuG/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9743142794763094,
      "result": {
        "original_header": "Visualization",
        "type": "Text_excerpt",
        "value": "For visualizing simulated gross chromosomal rearrangements such as inversions and translocations, we recommend using D-Genies (http://dgenies.toulouse.inra.fr/) to produce interactive dotplots between your input reference genome and simuG's simulated genome. D-Genies comes with a native online web interface (http://dgenies.toulouse.inra.fr/run) to handle user-submitted jobs, which is very convenient for the end users. Alternatively, you can also install D-Genies locally for batch job processing. Alternative tools such as Mummer (https://github.com/mummer4) and Gepard (http://cube.univie.ac.at/gepard) can also make nice dotplots for such pairwise genome comparison. \n"
      },
      "source": "https://raw.githubusercontent.com/yjx1217/simuG/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9017323139192878,
      "result": {
        "original_header": "Limitations",
        "type": "Text_excerpt",
        "value": "1) While simuG can simulate SNP and INDEL in a single run, other variants such as CNVs, inversions, and translocations need to be simulated via separated runs. To simulate genomes with multiple types of variants, one can run simuG in multiple successive rounds to introduce different types of variants sequentially. \n2) The current implementation of simuG only permit one translocation per pairs of chromosomes in a single simulation run. To simulate cases of multiple translocations occurred in the same chromosome, one can run simuG in multiple successive rounds to introduce multiple translocations into the same chromosome sequentially.   \n"
      },
      "source": "https://raw.githubusercontent.com/yjx1217/simuG/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/yjx1217/simuG/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "faq": [
    {
      "confidence": 1,
      "result": {
        "original_header": "FAQs",
        "parent_header": [
          "simuG"
        ],
        "type": "Text_excerpt",
        "value": "1) *How does simuG handle heterozygous SNPs in input VCF files?*\n\nIn the current implementation, simuG will ignore all heterozygous SNPs in the input VCF files. Warning messages will be given to notify the users when this occurred.\n\n2) *How does simuG handle overlapping genes in input GFF files?*\n\nIn the cases of multiple genes overlapped in the same genomic locus in the input GFF files, simuG will automatically detect and use the longest one while ignoring the others. Warning messages will be given to notify the users when this occurred.\n\n3) *When using simuG to simulate tandem duplication using an pre-defined input VCF file, how should the desired tandem duplication(s) be described in the VCF file.*\n\nTo our knowledge, there is no standard way to describe tandem_duplication in the VCF file using the break end notation (BND notation). To specify tandem duplication for simuG, you can just use the BND notation to denote the cases of single copy insertion of the duplicated region with the custom tags 'duplication_type=tandem_duplication;inserted_copy_number=N' (where N is the numeric number of the **extra** copies of the duplicated region that you want to introduce). For example, the VCF record below specifies a tandem duplication of the original chrII:756813-764497 region been duplicated 4 extra times (i.e. 5 copies in total in the simulated genome) and been inserted immediately after its original copy (chrII:756813-764497).  \n```\nchrII   764497  .       C       C[chrII:756813[ .       .       SVTYPE=BND;EVENT=CNV_1.1-4;duplication_type=tandem_duplication;inserted_copy_number=4\nchrII   764498  .       T       ]chrII:764497]T .       .       SVTYPE=BND;EVENT=CNV_1.1-4;duplication_type=tandem_duplication;inserted_copy_number=4\n```\n\n4) *Can simuG simulate sequencing reads in fastq or bam format with introduced genomic variants? *\n\nIn its current implementation, simuG is for simulating the genome rather than the reads. But based on the simulated genome generated by simuG, it should be vary straightforward to further simulate the corresponding reads using various read simulators (e.g. ART for Illumina reads). You can check the supplementary note of our simuG paper for the detailed commands. After generating the simulated reads, you can map them back to the reference genome to call variants that were introduced by simuG. The supplementary note should also guide you to this point.\n"
      },
      "source": "https://raw.githubusercontent.com/yjx1217/simuG/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 12
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/yjx1217/simuG/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "yjx1217/simuG"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "simuG"
      },
      "source": "https://raw.githubusercontent.com/yjx1217/simuG/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "simuG"
        ],
        "type": "Text_excerpt",
        "value": "simuG is implemented in Perl5 and does not have any extra dependency. So as long as Perl5 has been installed on your system, whether it is Linux, Mac OSX or Windows, you should be able to directly run simuG via the command-line interface on your system after downloading it from GitHub:\n```sh\ngit clone https://github.com/yjx1217/simuG.git\ncd simuG\nperl simuG.pl -h\nperl vcf2model.pl -h\n```\n\nPlease note that GNU Gzip (https://www.gnu.org/software/gzip/) needs to be pre-installed in your system if you want to run simuG.pl and vcf2model.pl with compressed input files (*.gz).\n\n"
      },
      "source": "https://raw.githubusercontent.com/yjx1217/simuG/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9970621268768715,
      "result": {
        "original_header": "simuG",
        "type": "Text_excerpt",
        "value": "<p align=\"center\">\n  <img src=\"https://github.com/yjx1217/simuG/blob/master/simuG.logo.png\" alt=\"simuG logo\" width=\"361\" height=\"286\"/>\n</p> \n"
      },
      "source": "https://raw.githubusercontent.com/yjx1217/simuG/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999998390981221,
      "result": {
        "original_header": "What\u2019s Inside",
        "type": "Text_excerpt",
        "value": "Inside the downloaded simuG directory, you should see the following file structure:\n```\n.\n\u251c\u2500\u2500 LICENSE.md\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 Manual.pdf\n\u251c\u2500\u2500 simuG.pl\n\u251c\u2500\u2500 Testing_Example\n\u2502   \u251c\u2500\u2500 excluded_chr_list.yeast.txt\n\u2502   \u251c\u2500\u2500 sample.input.CNV.vcf.gz\n\u2502   \u251c\u2500\u2500 sample.input.INDEL.vcf.gz\n\u2502   \u251c\u2500\u2500 sample.input.inversion.vcf.gz\n\u2502   \u251c\u2500\u2500 sample.input.SNP.vcf.gz\n\u2502   \u251c\u2500\u2500 sample.input.translocation.vcf.gz\n\u2502   \u251c\u2500\u2500 SGDref.R64-2-1.centromere.gff3\n\u2502   \u251c\u2500\u2500 SGDref.R64-2-1.fa.gz\n\u2502   \u251c\u2500\u2500 SGDref.R64-2-1.gff3.gz\n\u2502   \u251c\u2500\u2500 sample.input.SNP.model.txt\n\u2502   \u251c\u2500\u2500 sample.input.INDEL.model.txt\n\u2502   \u2514\u2500\u2500 Ty1_Ty3.breakpoint.gff3\n\u2514\u2500\u2500 vcf2model.pl\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/yjx1217/simuG/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 1.0,
      "result": {
        "original_header": "Full Option List",
        "type": "Text_excerpt",
        "value": "```\nUsage:\n    perl simuG.pl [options] [file ...]\n\nOptions:\n    -help or -h\n            Print help message. Example: -h.\n\n    -man or -m\n            Print more detailed help message. Example: -m.\n\n    -version or -v\n            Print version information. Example: -v.\n\n    -refseq or -r\n            Specify the reference genome to be used as the template (in\n            fasta or fasta.gz format). This option is mandatory. Default =\n            \"\". Example: -refseq ref.genome.fa(.gz).\n\n    -snp_vcf\n            Specify the list of exact SNP variants to be introduced (in vcf\n            or vcf.gz format). When specified, the options '-snp_count',\n            '-snp_model', and '-titv_ratio' will be ignored. If there are\n            also INDEL variants in the vcf file, they will be automatically\n            ignored. Default = \"\". Example: -snp_vcf snp.vcf(.gz).\n\n    -snp_count\n            Specify the number of SNP variants to be introduced. Default =\n            \"\". Example: -snp_count 5000.\n\n    -snp_model\n            Specify the SNP model file generated by the ancillary script\n            vcf2model.pl. When specified, the option '-titv_ratio' will be\n            ignored. Default = \"\". Example: -snp_model snp_model.txt.\n\n    -titv_ratio\n            Specify the Ti/Tv ratio (transition/transversion ratio) used for\n            simulate SNP variants. Default = 0.5. Example: -titv_ratio 2.0.\n            For transition only, set '-titv_ratio Inf'. For transversion\n            only, set '-titv_ratio 0'.\n\n    -coding_partition_for_snp_simulation\n            Specify the coding partition (e.g. 'noncoding', 'coding', '2d'\n            or '4d') used for constraining simulate SNP variants within the\n            specified sites. This option needs to be used together with the\n            option '-gene_gff'. Default = \"\". Example:\n            -coding_partition_for_snp_simulation 4d for simulating SNP only\n            in 4-fold degenerate (4d) sites.\n\n    -indel_vcf\n            Specify the list of exact INDEL variants to be introduced (in\n            vcf or vcf.gz format). When specified, the options\n            '-indel_count', '-indel_model', '-ins_del_ratio',\n            '-indel_size_powerlaw_alpha', and\n            '-indel_size_powerlaw_constant' will be ignored. If there are\n            also SNP variants in the vcf file, they will be automatically\n            ignored. Default = \"\". Example: -indel_vcf indel.vcf(.gz).\n\n    -indel_count\n            Specify the number of INDEL variants to be introduced. Default =\n            \"\". Example: -indel_count 500.\n\n    -indel_model\n            Specify the INDEL model file generated by the ancillary script\n            vcf2model.pl. When specified, the options '-ins_del_ratio',\n            '-indel_size_powerlaw_alpha', and\n            '-indel_size_powerlaw_constant' will be ignored. Default = \"\".\n            Example: -indel_model indel_model.txt.\n\n    -ins_del_ratio\n            Specify the Insertion/Deletion ratio used for simulate INDEL\n            variants. Default = 1.0. Example: -ins_del_ratio 1.0. For\n            insertion only, set '-ins_del_ratio Inf'. For deletion only, set\n            '-ins_del_ratio 0'.\n\n    -indel_size_powerlaw_alpha\n            Specify the exponent factor alpha for power-law-fitted indel\n            size distribution: p = C * (size) ** (-alpha) for size >= 1 &\n            size <= 50. Default = 2.0. Example: -indel_size_powerlaw_alpha\n            2.0.\n\n    -indel_size_powerlaw_constant\n            Specify the exponent factor constant (C) for power-law-fitted indel\n            size distribution: p = C * (size) ** (-alpha) for size >= 1 &\n            size <= 50. Default = 0.5. Example:\n            -indel_size_powerlaw_constant 0.5.\n\n    -cnv_vcf\n            Specify the list of exact CNV variants to be introduced (in vcf\n            or vcf.gz format). When specified, the options '-cnv_count',\n            '-cnv_gain_loss_ratio', '-cnv_max_copy_number', '-cnv_min_size',\n            and '-cnv_max_size' will be ignored. Default = \"\". Example:\n            -cnv_vcf cnv.vcf.\n\n    -cnv_count\n            Specify the number of CNV variants to be introduced. Default =\n            \"\". Example: -cnv_count 50.\n\n    -cnv_gain_loss_ratio\n            Specify the relative ratio of DNA again over DNA loss. Default =\n            1.0. Example: -cnv_gain_loss_ratio 1.0. For copy number gain\n            only, set '-cnv_gain_loss Inf'. For copy number loss only, set\n            '-cnv_gain_loss_ratio 0'.\n\n    -cnv_max_copy_number\n            Specify the maximal copy number for CNV. Default = 10. Example:\n            -cnv_max_copy_number 10.\n\n    -cnv_min_size\n            Specify the minimal size (in basepair) for CNV variants. Default\n            = 100. Example: -cnv_min_size 100.\n\n    -cnv_max_size\n            Specify the maximal size (in basepair) for CNV variants. Default\n            = 100000. Example: -cnv_max_size 100.\n\n    -duplication_tandem_dispersed_ratio\n            Specify the expect frequency ratio between tandem duplication\n            and dispersed duplication for CNV variants. Default = 1.\n            Example: -duplication_tandem_dispersed_ratio 1. For simulating\n            tandem duplication only, set\n            '-duplication_tandem_dispersed_ratio Inf'. For simulating\n            dispersed duplication only, set\n            '-duplication_tandem_dispersed_ratio 0'.\n\n    -inversion_vcf\n            Specify the list of exact inversions to be introduced (in vcf or\n            vcf.gz format). When specified, the options '-inversion_count',\n            '-inversion_min_size', '-inversion_max_size', and\n            '-inversion_breakpoint_gff' will be ignored. Default = \"\".\n            Example: -inversion_vcf inversion.vcf(.gz).\n\n    -inversion_count\n            Specify the number of inversions to be introduced. Default = \"\".\n            Example: -inversion_count 5.\n\n    -inversion_min_size\n            Specify the minimal size (in basepair) for inversion. Default =\n            1000. Example: -inversion_min_size 1000.\n\n    -inversion_max_size\n            Specify the maximal size (in basepair) for inversion. Default =\n            100000. Example: -inversion_max_size 100000.\n\n    -inversion_breakpoint_gff\n            Specify the list of potential breakpoints for triggering\n            inversions (in gff3 or gff3.gz format). Default = \"\". Example:\n            -inversion_breakpoint_gff inversion_breakpoint.gff(.gz).\n\n    -translocation_vcf\n            Specify the list of exact translocations to be introduced (in\n            vcf or vcf.gz format). When specified, the options\n            '-translocation_count' and '-sv_breakpoint_gff' will be ignored.\n            Default = \"\". Example: -translocation_vcf\n            transloaction.vcf(.gz).\n\n    -translocation_count\n            Specify the number of translocations to be introduced. Default =\n            \"\". Example: -translocation_count 1.\n\n    -translocation_breakpoint_gff\n            Specify the list of potential breakpoints for triggering\n            translocations (in gff3 or gff3.gz format). Default = \"\".\n            Example: -translocation_breakpoint_gff\n            translocation_breakpoint.gff(.gz).\n\n    -centromere_gff\n            Specify centromeres for constraining the random CNV, inversion,\n            and translocation simulation (in gff3 or gff3.gz format). When\n            this option applied, those potential CNVs that will induce\n            centromere deletion/duplication as well as the potential\n            inversions and translocations with breakpoints overlapped with\n            defined centromeres will be disalled. Also, potential\n            translocation that will induce dicentric rearranged chromosomes\n            will be disalled as well. Default = \"\". Example: -centromere_gff\n            centromere.gff(.gz).\n\n    -gene_gff\n            Specify genes for constraining the random SNP, CNV, inversion,\n            and translocation simulation (in gff3 or gff3.gz format). For\n            random SNP simulation, this option needs to be used together\n            with the option '-coding_partition_for_snp_simulation' to\n            constrain SNPs simulations only in noncoding regions, coding\n            regions, 2-fold degenerate (2d) sites or 4-fold degenerate (4d)\n            sites. For random CNV, inversion, and translocation simulation,\n            applied this option will disallow simulated breakpoints falling\n            on the defined genes. Default = \"\". Example: -gene_gff\n            gene.gff(.gz).\n\n    -excluded_chr_list\n            Specify the name of chromosome(s) to be excluded for introducing\n            genomic variants (a single-column list file in txt format).\n            Default = \"\". Example: -excluded_chr_list excluded_chr_list.txt.\n\n    -seed or -s\n            Specify an integer as the random seed for the simulation. It is\n            recommended to set a very big integer for ideal randomness.\n            Default = \"\". Example: -seed 201812201903.\n\n    -prefix or -p\n            Specify the prefix for output files. Default = \"output_prefix\".\n            Example: -prefix sim.\n\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/yjx1217/simuG/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999705111785687,
      "result": {
        "original_header": "Visualization",
        "type": "Text_excerpt",
        "value": "For visualizing simulated gross chromosomal rearrangements such as inversions and translocations, we recommend using D-Genies (http://dgenies.toulouse.inra.fr/) to produce interactive dotplots between your input reference genome and simuG's simulated genome. D-Genies comes with a native online web interface (http://dgenies.toulouse.inra.fr/run) to handle user-submitted jobs, which is very convenient for the end users. Alternatively, you can also install D-Genies locally for batch job processing. Alternative tools such as Mummer (https://github.com/mummer4) and Gepard (http://cube.univie.ac.at/gepard) can also make nice dotplots for such pairwise genome comparison. \n"
      },
      "source": "https://raw.githubusercontent.com/yjx1217/simuG/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8108060256021773,
      "result": {
        "original_header": "What\u2019s Inside",
        "type": "Text_excerpt",
        "value": "Inside the downloaded simuG directory, you should see the following file structure:\n```\n.\n\u251c\u2500\u2500 LICENSE.md\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 Manual.pdf\n\u251c\u2500\u2500 simuG.pl\n\u251c\u2500\u2500 Testing_Example\n\u2502   \u251c\u2500\u2500 excluded_chr_list.yeast.txt\n\u2502   \u251c\u2500\u2500 sample.input.CNV.vcf.gz\n\u2502   \u251c\u2500\u2500 sample.input.INDEL.vcf.gz\n\u2502   \u251c\u2500\u2500 sample.input.inversion.vcf.gz\n\u2502   \u251c\u2500\u2500 sample.input.SNP.vcf.gz\n\u2502   \u251c\u2500\u2500 sample.input.translocation.vcf.gz\n\u2502   \u251c\u2500\u2500 SGDref.R64-2-1.centromere.gff3\n\u2502   \u251c\u2500\u2500 SGDref.R64-2-1.fa.gz\n\u2502   \u251c\u2500\u2500 SGDref.R64-2-1.gff3.gz\n\u2502   \u251c\u2500\u2500 sample.input.SNP.model.txt\n\u2502   \u251c\u2500\u2500 sample.input.INDEL.model.txt\n\u2502   \u2514\u2500\u2500 Ty1_Ty3.breakpoint.gff3\n\u2514\u2500\u2500 vcf2model.pl\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/yjx1217/simuG/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/yjx1217/simuG/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "genomics, simulation, structural-variation, variant-analysis"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2018 Jia-Xing Yue\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/yjx1217/simuG/master/LICENSE.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "parent_header": [
          "simuG"
        ],
        "type": "Text_excerpt",
        "value": "simuG is distributed under the MIT license.\n"
      },
      "source": "https://raw.githubusercontent.com/yjx1217/simuG/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/yjx1217/simuG/master/simuG.logo.png"
      },
      "source": "https://raw.githubusercontent.com/yjx1217/simuG/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "simuG"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "yjx1217"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 247105,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/yjx1217/simuG/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "yjx1217",
          "type": "User"
        },
        "date_created": "2021-11-12T04:48:07Z",
        "date_published": "2022-01-17T11:06:14Z",
        "description": "updated version with several bug fixes",
        "html_url": "https://github.com/yjx1217/simuG/releases/tag/v1.0.1",
        "name": "simuG v1.0.1",
        "release_id": 57277662,
        "tag": "v1.0.1",
        "tarball_url": "https://api.github.com/repos/yjx1217/simuG/tarball/v1.0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/yjx1217/simuG/releases/57277662",
        "value": "https://api.github.com/repos/yjx1217/simuG/releases/57277662",
        "zipball_url": "https://api.github.com/repos/yjx1217/simuG/zipball/v1.0.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "yjx1217",
          "type": "User"
        },
        "date_created": "2019-07-12T09:07:30Z",
        "date_published": "2019-12-30T01:44:40Z",
        "description": "Release note for simuG v1.0.0 (released on 2019.07.12)\r\n\r\nThis is the first formal release version for simuG. simuG is a software designed for simulating genome sequences with pre-defined or random genomic variants. ",
        "html_url": "https://github.com/yjx1217/simuG/releases/tag/v1.0.0",
        "name": "simuG v1.0.0",
        "release_id": 22507135,
        "tag": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/yjx1217/simuG/tarball/v1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/yjx1217/simuG/releases/22507135",
        "value": "https://api.github.com/repos/yjx1217/simuG/releases/22507135",
        "zipball_url": "https://api.github.com/repos/yjx1217/simuG/zipball/v1.0.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contributors",
    "documentation",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 04:36:49",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 87
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick Start",
        "parent_header": [
          "simuG"
        ],
        "type": "Text_excerpt",
        "value": "Check the full list of available options.\n```sh\nperl simuG.pl -h\n```\n\nSimulate genome with pre-defined SNPs specified in the input VCF file.\n```sh\nperl simuG.pl \\\n     -refseq ./Testing_Example/SGDref.R64-2-1.fa.gz \\\n     -snp_vcf ./Testing_Example/sample.input.SNP.vcf.gz \\\n     -prefix output_prefix # the file name prefix for the output files\n```\n\nSimulate genome with pre-defined INDELs specified in the input VCF file.\n```sh\nperl simuG.pl \\\n     -refseq ./Testing_Example/SGDref.R64-2-1.fa.gz \\\n     -indel_vcf ./Testing_Example/sample.input.INDEL.vcf.gz \\\n     -prefix output_prefix # the file name prefix for the output files\n```\n\nSimulate genome with pre-defined CNVs specified in the input VCF file.\n```sh\nperl simuG.pl \\\n     -refseq ./Testing_Example/SGDref.R64-2-1.fa.gz \\\n     -cnv_vcf ./Testing_Example/sample.input.CNV.vcf.gz \\\n     -prefix output_prefix # the file name prefix for the output files\n```\n\nSimulate genome with pre-defined inversions specified in the input VCF file.\n```sh\nperl simuG.pl \\\n     -refseq ./Testing_Example/SGDref.R64-2-1.fa.gz \\\n     -inversion_vcf ./Testing_Example/sample.input.inversion.vcf.gz \\\n     -prefix output_prefix # the file name prefix for the output files\n```\n\nSimulate genome with pre-defined translocations specified in the input VCF file.\n```sh\nperl simuG.pl \\\n     -refseq ./Testing_Example/SGDref.R64-2-1.fa.gz \\\n     -translocation_vcf ./Testing_Example/sample.input.translocation.vcf.gz \\\n     -prefix output_prefix\n```\n\nSimulate genome with 1000 random SNPs.\n```sh\nperl simuG.pl \\\n     -refseq ./Testing_Example/SGDref.R64-2-1.fa.gz \\\n     -snp_count 1000 \\\n     -prefix output_prefix\n```\n\nSimulate genome with 100 random INDELs.\n```sh\nperl simuG.pl \\\n     -refseq ./Testing_Example/SGDref.R64-2-1.fa.gz \\\n     -indel_count 100 \\\n     -prefix output_prefix\n```\n\nSimulate genome with 10 random CNVs.\n```sh\nperl simuG.pl \\\n     -refseq ./Testing_Example/SGDref.R64-2-1.fa.gz \\\n     -cnv_count 10 \\\n     -prefix output_prefix\n```\n\nSimulate genome with 5 random inversions.\n```sh\nperl simuG.pl \\\n     -refseq ./Testing_Example/SGDref.R64-2-1.fa.gz \\\n     -inversion_count 5 \\\n     -prefix output_prefix\n```\n\nSimulate genome with 2 random translocations.\n```sh\nperl simuG.pl \\\n     -refseq ./Testing_Example/SGDref.R64-2-1.fa.gz \\\n     -translocation_count 2 \\\n     -prefix output_prefix\n```\n"
      },
      "source": "https://raw.githubusercontent.com/yjx1217/simuG/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Additional Examples",
        "parent_header": [
          "simuG"
        ],
        "type": "Text_excerpt",
        "value": "Some more advance examples are provided as follows:\n\nCheck the full list of available options of the ancillary script vcf2model.pl.\n```sh\nperl vcf2model.pl -h\n```\n\nUse vcf2model.pl to generate SNP and INDEL models based on the input SNP/INDEL variant calling VCF file derived from real data.\n```sh\nperl vcf2model.pl \\\n     -vcf input.real_data.SNP_INDEL.vcf.gz \\\n     -prefix output_prefix\n```\n\nUse vcf2model.pl to generate SNP and INDEL models based on the input SNP/INDEL variant calling VCF file derived from real data while excluding variants called on the mitochondrial genome \u201cchrMT\u201d (defined in the excluded_chr_list.yeast.txt file) as well as variants with quality scores lower than 30 (if calculated).\n```sh\nperl vcf2model.pl \\\n     -vcf input.real_data.SNP_INDEL.vcf.gz \\\n     -qual 30 \\\n     -excluded_chr_list ./Testing_Example/excluded_chr_list.yeast.txt\n     -prefix output_prefix\n```\n\nSimulate genome with 1000 random SNPs and 100 random INDEL with titv_ratio = 2.0 and chrMT excluded (defined in the excluded_chr_list.yeast.txt file) for SNP simulation.\n```sh\nperl simuG.pl \\\n     -refseq ./Testing_Example/SGDref.R64-2-1.fa.gz \\\n     -snp_count 1000 \\\n     -titv_ratio 2.0 \\\n     -indel_count 100 \\\n     -excluded_chr_list ./Testing_Example/excluded_chr_list.yeast.txt \\\n     -prefix output_prefix\n```\n\nSimulate genome with 1000 random SNPs only at noncoding sites and chrMT excluded (defined in the excluded_chr_list.yeast.txt file) for SNP simulation.\n```sh\nperl simuG.pl \\\n     -refseq ./Testing_Example/SGDref.R64-2-1.fa.gz \\\n     -snp_count 1000 \\\n     -coding_partition_for_snp_simulation noncoding \\\n     -gene_gff ./Testing_Example/SGDref.R64-2-1.gff3.gz \\\n     -excluded_chr_list ./Testing_Example/excluded_chr_list.yeast.txt \\\n     -prefix output_prefix\n```\n\nSimulate genome with 1000 random SNPs only at coding sites and chrMT excluded (defined in the excluded_chr_list.yeast.txt file) for SNP simulation.\n```sh\nperl simuG.pl \\\n     -refseq ./Testing_Example/SGDref.R64-2-1.fa.gz \\\n     -snp_count 1000 \\\n     -coding_partition_for_snp_simulation coding \\\n     -gene_gff ./Testing_Example/SGDref.R64-2-1.gff3.gz \\\n     -excluded_chr_list ./Testing_Example/excluded_chr_list.yeast.txt \\\n     -prefix output_prefix\n```\n\nSimulate genome with 1000 random SNPs only at 4-fold degenerate (4d) sites and chrMT excluded (defined in the excluded_chr_list.yeast.txt file) for SNP simulation.\n```sh\nperl simuG.pl \\\n     -refseq ./Testing_Example/SGDref.R64-2-1.fa.gz \\\n     -snp_count 1000 \\\n     -coding_partition_for_snp_simulation 4d \\\n     -gene_gff ./Testing_Example/SGDref.R64-2-1.gff3.gz \\\n     -excluded_chr_list ./Testing_Example/excluded_chr_list.yeast.txt \\\n     -prefix output_prefix\n```\n\nSimulate genome with 100 random CNVs with a biased copy number gain/loss ratio of 2.0 and chrMT excluded (defined in the excluded_chr_list.yeast.txt file). Also, the gene annotation of the reference genome has been specified, so the breakpoints of simulated CNVs will all fall outside the genic regions. Finally, centromeres of the reference genome has been specified, so the simulated CNVs will not disrupt these specified centromeres.\n```sh\nperl simuG.pl \\\n     -refseq ./Testing_Example/SGDref.R64-2-1.fa.gz \\\n     -cnv_count 100 \\\n     -cnv_gain_loss_ratio 2.0 \\\n     -gene_gff ./Testing_Example/SGDref.R64-2-1.gff3.gz \\\n     -centromere_gff ./Testing_Example/SGDref.R64-2-1.centromere.gff3 \\\n     -prefix output_prefix\n```\n\nSimulate genome with 100 random tandem duplications and chrMT excluded (defined in the excluded_chr_list.yeast.txt file). Also, centromeres of the reference genome has been specified, so the simulated CNVs will not disrupt these specified centromeres.\n```sh\nperl simuG.pl \\\n     -refseq ./Testing_Example/SGDref.R64-2-1.fa.gz \\\n     -cnv_count 100 \\\n     -cnv_gain_loss_ratio Inf \\\n     -duplication_tandem_dispersed_ratio Inf \\\n     -centromere_gff ./Testing_Example/SGDref.R64-2-1.centromere.gff3 \\\n     -prefix output_prefix\n```\n\nSimulate genome with 5 random inversions using only specified genomic features (i.e. full-length Ty1 and Ty3 transposable elements in this example) as the potential breakpoints. The mitochondrial genome chrMT (defined in the excluded_chr_list.yeast.txt file) has been excluded for this simulation. Also, the centromere and gene annotations of the reference genome have been specified, so the simulated inversion breakpoints will not disrupt these specified genomic features.\n```sh\nperl simuG.pl \\\n     -refseq ./Testing_Example/SGDref.R64-2-1.fa.gz \\\n     -inversion_count 5 \\\n     -inversion_breakpoint_gff ./Testing_Example/Ty1_Ty3.breakpoint.gff3 \\\n     -gene_gff ./Testing_Example/SGDref.R64-2-1.gff3.gz \\\n     -centromere_gff ./Testing_Example/SGDref.R64-2-1.centromere.gff3 \\\n     -prefix output_prefix\n```\n\nSimulate genome with 2 random translocations using only specified genomic features (i.e. full-length Ty1 and Ty3 transposable elements in this example) as the potential breakpoints. The mitochondrial genome chrMT (defined in the excluded_chr_list.yeast.txt file) has been excluded for this simulation. Also, the centromere and gene annotations of the reference genome have been specified, so the simulated translocations will not disrupt these specified genomic features.\n```sh\nperl simuG.pl \\\n     -refseq ./Testing_Example/SGDref.R64-2-1.fa.gz \\\n     -translocation_count 2 \\\n     -translocation_breakpoint_gff ./Testing_Example/Ty1_Ty3.breakpoint.gff3 \\\n     -centromere_gff ./Testing_Example/SGDref.R64-2-1.centromere.gff3 \\\n     -prefix output_prefix\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/yjx1217/simuG/master/README.md",
      "technique": "header_analysis"
    }
  ]
}