{
  "acknowledgement": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Acknowledgements",
        "parent_header": [
          "<img align=\"center\" src=\"https://github.com/carlosborca/CrystaLattE/blob/master/media/logo/Logo.png\" height=260>",
          "General Information",
          "How to run CrystaLattE"
        ],
        "type": "Text_excerpt",
        "value": " \nProject based on the \n[Computational Molecular Science Python Cookiecutter](https://github.com/molssi/cookiecutter-cms) version 1.0.\n"
      },
      "source": "https://raw.githubusercontent.com/carlosborca/CrystaLattE/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_of_conduct": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age,\nbody size, disability, ethnicity, gender identity and expression, level of\nexperience, nationality, personal appearance, race, religion, or sexual\nidentity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\nMoreover, project maintainers will strive to offer feedback and advice to\nensure quality and consistency of contributions to the code.  Contributions\nfrom outside the group of project maintainers are strongly welcomed but the\nfinal decision as to whether commits are merged into the codebase rests with\nthe team of project maintainers.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an\nappointed representative at an online or offline event. Representation of a\nproject may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at 'carlosborca@gmail.com'. The project team will\nreview and investigate all complaints, and will respond in a way that it deems\nappropriate to the circumstances. The project team is obligated to maintain\nconfidentiality with regard to the reporter of an incident. Further details of\nspecific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 1.4, available at\n[http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n"
      },
      "source": "https://raw.githubusercontent.com/carlosborca/CrystaLattE/master/CODE_OF_CONDUCT.md",
      "technique": "file_exploration"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/carlosborca/CrystaLattE"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# How to contribute\n\nWe welcome contributions from external contributors, and this document\ndescribes how to merge code changes into this crystalatte. \n\n## Getting Started\n\n* Make sure you have a [GitHub account](https://github.com/signup/free).\n* [Fork](https://help.github.com/articles/fork-a-repo/) this repository on GitHub.\n* On your local machine,\n  [clone](https://help.github.com/articles/cloning-a-repository/) your fork of\n  the repository.\n\n## Making Changes\n\n* Add some really awesome code to your local fork.  It's usually a [good\n  idea](http://blog.jasonmeridth.com/posts/do-not-issue-pull-requests-from-your-master-branch/)\n  to make changes on a\n  [branch](https://help.github.com/articles/creating-and-deleting-branches-within-your-repository/)\n  with the branch name relating to the feature you are going to add.\n* When you are ready for others to examine and comment on your new feature,\n  navigate to your fork of crystalatte on GitHub and open a [pull\n  request](https://help.github.com/articles/using-pull-requests/) (PR). Note that\n  after you launch a PR from one of your fork's branches, all\n  subsequent commits to that branch will be added to the open pull request\n  automatically.  Each commit added to the PR will be validated for\n  mergability, compilation and test suite compliance; the results of these tests\n  will be visible on the PR page.\n* If you're providing a new feature, you must add test cases and documentation.\n* When the code is ready to go, make sure you run the test suite using pytest.\n* When you're ready to be considered for merging, check the \"Ready to go\"\n  box on the PR page to let the crystalatte devs know that the changes are complete.\n  The code will not be merged until this box is checked, the continuous\n  integration returns checkmarks,\n  and multiple core developers give \"Approved\" reviews.\n\n# Additional Resources\n\n* [General GitHub documentation](https://help.github.com/)\n* [PR best practices](http://codeinthehole.com/writing/pull-requests-and-other-good-practices-for-teams-using-github/)\n* [A guide to contributing to software packages](http://www.contribution-guide.org)\n* [Thinkful PR example](http://www.thinkful.com/learn/github-pull-request-tutorial/#Time-to-Submit-Your-First-PR)\n"
      },
      "source": "https://raw.githubusercontent.com/carlosborca/CrystaLattE/master/.github/CONTRIBUTING.md",
      "technique": "file_exploration"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2017-12-01T22:17:44Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-17T21:45:15Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Set of scripts to automate the calculation of crystal lattice energies."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9514542072868591,
      "result": {
        "original_header": "<img align=\"center\" src=\"https://github.com/carlosborca/CrystaLattE/blob/master/media/logo/Logo.png\" height=260>",
        "type": "Text_excerpt",
        "value": "Automated calculation of crystal lattice energies with the many-body expansion. \n"
      },
      "source": "https://raw.githubusercontent.com/carlosborca/CrystaLattE/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9446918903257656,
      "result": {
        "original_header": "Overview",
        "type": "Text_excerpt",
        "value": "CrystaLattE is a software that automates the computation of crystal lattice energies using the many-body cluster expansion. The required computations on dimers, trimers, etc., within the crystal are independent of each other, leading to a naturally parallel approach. The algorithm exploits the long-range three-dimensional periodic order of crystals to automatically detect and avoid redundant or unnecessary computations.\n \n"
      },
      "source": "https://raw.githubusercontent.com/carlosborca/CrystaLattE/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8778667737869169,
      "result": {
        "original_header": "General Information",
        "type": "Text_excerpt",
        "value": "CrystaLattE has an interface with the quantum chemistry package Psi4. To run, the code requires a crystallographic information file containing structural information of the crystal and an input file specifying execution details. Work continues in the creation of a CrystaLattE `pip` package. So, for the moment, the instructions to download and install CrystaLattE and to create a _conda environment_ that includes Psi4 are presented below. \n \n"
      },
      "source": "https://raw.githubusercontent.com/carlosborca/CrystaLattE/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/carlosborca/CrystaLattE/tree/master/docs"
      },
      "technique": "file_exploration"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/carlosborca/CrystaLattE/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 11
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/carlosborca/CrystaLattE/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "carlosborca/CrystaLattE"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/carlosborca/CrystaLattE/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "<img align=\"center\" src=\"https://github.com/carlosborca/CrystaLattE/blob/master/media/logo/Logo.png\" height=260>",
          "General Information"
        ],
        "type": "Text_excerpt",
        "value": "Minimal set of commands to install CrystaLattE on Linux, MacOS, or Windows (with the Windows Subsystem for Linux). Last tested on 4 October 2019:\n"
      },
      "source": "https://raw.githubusercontent.com/carlosborca/CrystaLattE/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1. Install Miniconda:",
        "parent_header": [
          "<img align=\"center\" src=\"https://github.com/carlosborca/CrystaLattE/blob/master/media/logo/Logo.png\" height=260>",
          "General Information",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "If you have an installation of _Conda_ in your system, please skip to step 2. Otherwise, _Miniconda_ is required and the installer is available from the the Anaconda website. To download the installer from the terminal (in Linux or the Windows Subsystem for Linux): \n\n```\nwget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh\n```\n\n(_Note_) If you use MacOS, replace `Linux` by `MacOSX` on the previous command.\n\nRun the installer following the on-screen instructions:\n\n```\nbash Miniconda3-latest-Linux-x86_64.sh\n```\n\nAfter the installation is complete, close the terminal and start a new shell.\n\n(_Optional_) Disable automatic activation of the _base_ conda environment:\n\n```\nconda config --set auto_activate_base false\n```\n"
      },
      "source": "https://raw.githubusercontent.com/carlosborca/CrystaLattE/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2. Create a *Conda Environment* for CrystaLattE",
        "parent_header": [
          "<img align=\"center\" src=\"https://github.com/carlosborca/CrystaLattE/blob/master/media/logo/Logo.png\" height=260>",
          "General Information",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "CrystaLattE requires Psi4 and PyCIFRW. Conda offers the possibility of creating an _environment_ that contains all the dependencies required by CrystaLattE. To download and install PSI4 and other related software tools in a new _cle_ environment execute the command below and follow the on-screen instructions:\n\n```\nconda create -n cle python psi4 pycifrw -c conda-forge\n```\n"
      },
      "source": "https://raw.githubusercontent.com/carlosborca/CrystaLattE/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3. Activate the *cle* environment",
        "parent_header": [
          "<img align=\"center\" src=\"https://github.com/carlosborca/CrystaLattE/blob/master/media/logo/Logo.png\" height=260>",
          "General Information",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "To use the recently created _cle_ environment, activate it:\n\n```\nconda activate cle\n```\n"
      },
      "source": "https://raw.githubusercontent.com/carlosborca/CrystaLattE/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "4. Clone CrystaLattE from its GitHub repository:",
        "parent_header": [
          "<img align=\"center\" src=\"https://github.com/carlosborca/CrystaLattE/blob/master/media/logo/Logo.png\" height=260>",
          "General Information",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "In you file system navigate to the location where you would like to place the root directory of CrystaLattE and clone it from its corresponding GitHub repository:\n\n```\ngit clone https://github.com/carlosborca/CrystaLattE.git\n```\n"
      },
      "source": "https://raw.githubusercontent.com/carlosborca/CrystaLattE/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "5. Test CrystaLattE",
        "parent_header": [
          "<img align=\"center\" src=\"https://github.com/carlosborca/CrystaLattE/blob/master/media/logo/Logo.png\" height=260>",
          "General Information",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "Go to the root directory of the CrystaLatte repository in the file system and run the test suite:\n\n```\npytest\n```\n\n(_Note_) It is known that the `v2rdm_casscf` plugin of PSI4 may cause execution errors when trying to import PSI4 from CrystaLattE. If such error is encountered during testing, remove it.\n\n```\nconda remove v2rdm_casscf\n```\n"
      },
      "source": "https://raw.githubusercontent.com/carlosborca/CrystaLattE/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Preparing the options input",
        "parent_header": [
          "<img align=\"center\" src=\"https://github.com/carlosborca/CrystaLattE/blob/master/media/logo/Logo.png\" height=260>",
          "General Information",
          "How to run CrystaLattE"
        ],
        "type": "Text_excerpt",
        "value": "Example of an options input file for CrystaLattE.\n\n```\n# This is a typical CrystaLattE input template: input.cle\n\n# Blank lines and lines starting with the hash character are omitted.\n# Padding blank spaces are also ignored.\n\n# The format is:"
      },
      "source": "https://raw.githubusercontent.com/carlosborca/CrystaLattE/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/carlosborca/CrystaLattE/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "GNU Lesser General Public License v3.0",
        "spdx_id": "LGPL-3.0",
        "type": "License",
        "url": "https://api.github.com/licenses/lgpl-3.0",
        "value": "https://api.github.com/licenses/lgpl-3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "\nGNU LESSER GENERAL PUBLIC LICENSE\nVersion 3, 29 June 2007\n\nCopyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n\nEveryone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.\n\nThis version of the GNU Lesser General Public License incorporates the terms and conditions of version 3 of the GNU General Public License, supplemented by the additional permissions listed below.\n\n0. Additional Definitions.\nAs used herein, \u201cthis License\u201d refers to version 3 of the GNU Lesser General Public License, and the \u201cGNU GPL\u201d refers to version 3 of the GNU General Public License.\n\n\u201cThe Library\u201d refers to a covered work governed by this License, other than an Application or a Combined Work as defined below.\n\nAn \u201cApplication\u201d is any work that makes use of an interface provided by the Library, but which is not otherwise based on the Library. Defining a subclass of a class defined by the Library is deemed a mode of using an interface provided by the Library.\n\nA \u201cCombined Work\u201d is a work produced by combining or linking an Application with the Library. The particular version of the Library with which the Combined Work was made is also called the \u201cLinked Version\u201d.\n\nThe \u201cMinimal Corresponding Source\u201d for a Combined Work means the Corresponding Source for the Combined Work, excluding any source code for portions of the Combined Work that, considered in isolation, are based on the Application, and not on the Linked Version.\n\nThe \u201cCorresponding Application Code\u201d for a Combined Work means the object code and/or source code for the Application, including any data and utility programs needed for reproducing the Combined Work from the Application, but excluding the System Libraries of the Combined Work.\n\n1. Exception to Section 3 of the GNU GPL.\nYou may convey a covered work under sections 3 and 4 of this License without being bound by section 3 of the GNU GPL.\n\n2. Conveying Modified Versions.\nIf you modify a copy of the Library, and, in your modifications, a facility refers to a function or data to be supplied by an Application that uses the facility (other than as an argument passed when the facility is invoked), then you may convey a copy of the modified version:\n\na) under this License, provided that you make a good faith effort to ensure that, in the event an Application does not supply the function or data, the facility still operates, and performs whatever part of its purpose remains meaningful, or\nb) under the GNU GPL, with none of the additional permissions of this License applicable to that copy.\n3. Object Code Incorporating Material from Library Header Files.\nThe object code form of an Application may incorporate material from a header file that is part of the Library. You may convey such object code under terms of your choice, provided that, if the incorporated material is not limited to numerical parameters, data structure layouts and accessors, or small macros, inline functions and templates (ten or fewer lines in length), you do both of the following:\n\na) Give prominent notice with each copy of the object code that the Library is used in it and that the Library and its use are covered by this License.\nb) Accompany the object code with a copy of the GNU GPL and this license document.\n4. Combined Works.\nYou may convey a Combined Work under terms of your choice that, taken together, effectively do not restrict modification of the portions of the Library contained in the Combined Work and reverse engineering for debugging such modifications, if you also do each of the following:\n\na) Give prominent notice with each copy of the Combined Work that the Library is used in it and that the Library and its use are covered by this License.\nb) Accompany the Combined Work with a copy of the GNU GPL and this license document.\nc) For a Combined Work that displays copyright notices during execution, include the copyright notice for the Library among these notices, as well as a reference directing the user to the copies of the GNU GPL and this license document.\nd) Do one of the following:\n0) Convey the Minimal Corresponding Source under the terms of this License, and the Corresponding Application Code in a form suitable for, and under terms that permit, the user to recombine or relink the Application with a modified version of the Linked Version to produce a modified Combined Work, in the manner specified by section 6 of the GNU GPL for conveying Corresponding Source.\n1) Use a suitable shared library mechanism for linking with the Library. A suitable mechanism is one that (a) uses at run time a copy of the Library already present on the user's computer system, and (b) will operate properly with a modified version of the Library that is interface-compatible with the Linked Version.\ne) Provide Installation Information, but only if you would otherwise be required to provide such information under section 6 of the GNU GPL, and only to the extent that such information is necessary to install and execute a modified version of the Combined Work produced by recombining or relinking the Application with a modified version of the Linked Version. (If you use option 4d0, the Installation Information must accompany the Minimal Corresponding Source and Corresponding Application Code. If you use option 4d1, you must provide the Installation Information in the manner specified by section 6 of the GNU GPL for conveying Corresponding Source.)\n5. Combined Libraries.\nYou may place library facilities that are a work based on the Library side by side in a single library together with other library facilities that are not Applications and are not covered by this License, and convey such a combined library under terms of your choice, if you do both of the following:\n\na) Accompany the combined library with a copy of the same work based on the Library, uncombined with any other library facilities, conveyed under the terms of this License.\nb) Give prominent notice with the combined library that part of it is a work based on the Library, and explaining where to find the accompanying uncombined form of the same work.\n6. Revised Versions of the GNU Lesser General Public License.\nThe Free Software Foundation may publish revised and/or new versions of the GNU Lesser General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.\n\nEach version is given a distinguishing version number. If the Library as you received it specifies that a certain numbered version of the GNU Lesser General Public License \u201cor any later version\u201d applies to it, you have the option of following the terms and conditions either of that published version or of any later version published by the Free Software Foundation. If the Library as you received it does not specify a version number of the GNU Lesser General Public License, you may choose any version of the GNU Lesser General Public License ever published by the Free Software Foundation.\n\nIf the Library as you received it specifies that a proxy can decide whether future versions of the GNU Lesser General Public License shall apply, that proxy's public statement of acceptance of any version is permanent authorization for you to choose that version for the Library.\n"
      },
      "source": "https://raw.githubusercontent.com/carlosborca/CrystaLattE/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/carlosborca/CrystaLattE/master/media/logo/Logo.png"
      },
      "source": "https://raw.githubusercontent.com/carlosborca/CrystaLattE/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CrystaLattE"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "carlosborca"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 195638,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/carlosborca/CrystaLattE/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "How to run CrystaLattE",
        "parent_header": [
          "<img align=\"center\" src=\"https://github.com/carlosborca/CrystaLattE/blob/master/media/logo/Logo.png\" height=260>",
          "General Information"
        ],
        "type": "Text_excerpt",
        "value": "CrystaLattE requires a crystallographic information file (.cif) and an options input file (.cle). CIF files can be obtained from multiple sources. For example, from the Cambridge Crystallographic Data Centre (CCDC) website. The options file must be generated by the user. A template is presented below:\n"
      },
      "source": "https://raw.githubusercontent.com/carlosborca/CrystaLattE/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Keywords",
        "parent_header": [
          "<img align=\"center\" src=\"https://github.com/carlosborca/CrystaLattE/blob/master/media/logo/Logo.png\" height=260>",
          "General Information",
          "How to run CrystaLattE"
        ],
        "type": "Text_excerpt",
        "value": "cif_input       =  ../MyCrystals/OneCrystal.cif\ncif_output      =  ../MyCrystals/SuperCell.xyz\nbfs_thresh      =  1.2\nuniq_filter     =  ChSEV\nnmers_up_to     =  3\nr_cut_com       =  12.0\nr_cut_monomer   =  15.0\nr_cut_dimer     =  9.0\nr_cut_trimer    =  12.0\nr_cut_tetramer  =  6.0\nr_cut_pentamer  =  4.0\ncle_run_type    =  psi4api + quiet\npsi4_method     =  MP2/aug-cc-pV[TQ]Z + D:FNO-CCSD(T)/aug-cc-pVDZ\npsi4_bsse       =  cp\npsi4_memory     =  8 GB\nverbose         =  2\n```\n\n#### Keywords\n\nDescription of keywords and their acceptable values.\n\n| Keyword          | Acceptable Values                              | Default      | Example      | Notes                |\n|------------------|------------------------------------------------|--------------|--------------|----------------------|\n| `cif_input`      | \\<RelativePath\\>\\/\\<FileName\\>.cif             | *No default* | Benzene.cif  | Must be a .cif       |\n| `cif_output`     | \\<RelativePath\\>\\/\\<FileName\\>.xyz             | sc.xyz       | Benzene.xyz  | Must be a .xyz       |\n| `cif_a`          | Odd positive integer                           | 5            | 9            |                      |\n| `cif_b`          | Odd positive integer                           | 5            | 7            |                      |\n| `cif_c`          | Odd positive integer                           | 5            | 11           |                      |\n| `bfs_thresh`     | Positive float                                 | 1.2          | 1.3          | vdW radii multiplier |\n| `uniq_filter`    | ChSEV, Dreamaligner                            | ChSEV        | Dreamaligner |                      |\n| `nmers_up_to`    | 2, 3, 4, 5                                     | 2            | 3            | Dimers, Trimers...   |\n| `r_cut_com`      | Positive float                                 | 10.0         | 12.0         | Angstroms            |\n| `r_cut_monomer`  | Positive float                                 | 12.0         | 15.0         | Angstroms            |\n| `r_cut_dimer`    | Positive float                                 | 10.0         | 8.0          | Angstroms            |\n| `r_cut_trimer`   | Positive float                                 | 8.0          | 10.0         | Angstroms            |\n| `r_cut_tetramer` | Positive float                                 | 6.0          | 5.0          | Angstroms            |\n| `r_cut_pentamer` | Positive float                                 | 4.0          | 3.0          | Angstroms            |\n| `cle_run_type`   | psi4api, psithon, makefp, test, quiet, timings | psi4api      | test + quiet | Separate with +      |\n| `psi4_method`    | String                                         | HF/STO-3G    | HF-3c        | See PSI4 manual      |\n| `psi4_bsse`      | vmfc, cp, nocp                                 | cp           | nocp         |                      |\n| `psi4_memory`    | String                                         | 500 MB       | 2 GB         |                      |\n| `verbose`        | 0, 1, 2                                        | 1            | 2            |                      |\n"
      },
      "source": "https://raw.githubusercontent.com/carlosborca/CrystaLattE/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Running CrystaLattE",
        "parent_header": [
          "<img align=\"center\" src=\"https://github.com/carlosborca/CrystaLattE/blob/master/media/logo/Logo.png\" height=260>",
          "General Information",
          "How to run CrystaLattE"
        ],
        "type": "Text_excerpt",
        "value": "Finally, to execute the code:\n\n```\n./crystalatte.py input.cle\n```\n"
      },
      "source": "https://raw.githubusercontent.com/carlosborca/CrystaLattE/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Known Issues",
        "parent_header": [
          "<img align=\"center\" src=\"https://github.com/carlosborca/CrystaLattE/blob/master/media/logo/Logo.png\" height=260>",
          "General Information",
          "How to run CrystaLattE"
        ],
        "type": "Text_excerpt",
        "value": "Precision issues may arise when computing a large number of structures at default energy and density convergence criteria if using Psi4 1.3.2 and newer versions. Although the default energy and density convergence criteria for Psi4 calculations has been increased in CrystaLattE, the user should be careful.\n"
      },
      "source": "https://raw.githubusercontent.com/carlosborca/CrystaLattE/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Copyright",
        "parent_header": [
          "<img align=\"center\" src=\"https://github.com/carlosborca/CrystaLattE/blob/master/media/logo/Logo.png\" height=260>",
          "General Information",
          "How to run CrystaLattE"
        ],
        "type": "Text_excerpt",
        "value": "Copyright (c) 2020, Carlos H. Borca\n\n"
      },
      "source": "https://raw.githubusercontent.com/carlosborca/CrystaLattE/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "download",
    "requirements",
    "contact",
    "contributors",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 02:28:06",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 12
      },
      "technique": "GitHub_API"
    }
  ]
}