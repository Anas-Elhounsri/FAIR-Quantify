{
  "application_domain": [
    {
      "confidence": 24.4,
      "result": {
        "type": "String",
        "value": "Natural Language Processing"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/lh3/ropebwt2"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2013-08-02T20:17:48Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-22T12:20:03Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Incremental construction of FM-index for DNA sequences"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "type": "Text_excerpt",
        "value": "RopeBWT2 is an tool for constructing the FM-index for a collection of DNA\nsequences. It works by incrementally inserting one or multiple sequences into an\nexisting pseudo-BWT position by position, starting from the end of the\nsequences. This algorithm can be largely considered a mixture of [BCR][2] and\n[dynamic FM-index][3]. Nonetheless, ropeBWT2 is unique in that it may\n*implicitly* sort the input into reverse lexicographical order (RLO) or\nreverse-complement lexicographical order (RCLO) while building the index.\nSuppose we have file `seq.txt` in the one-sequence-per-line format. RLO can be\nachieved with Unix commands:\n\n    rev seq.txt | sort | rev\n\nRopeBWT2 is able to perform sorting together with the construction of the\nFM-index. As such, the following command lines give the same output:\n\n    shuf seq.txt | ropebwt2 -LRs | md5sum\n\trev seq.txt | sort | rev | ropebwt2 -LR | md5sum\n\nHere option `-s` enables the RLO mode. Similarly, the following command lines\ngive the same output (option `-r` enables RCLO):\n\n    shuf seq.txt | ropebwt2 -LRr\n\trev seq.txt | tr \"ACGT\" \"TGCA\" | sort | tr \"ACGT\" \"TGCA\" | rev | ropebwt2 -LR\n\nRLO/RCLO has two benefits. Firstly, such ordering clusters sequences with\nsimilar suffixes and helps to improve the compressibility especially for short\nreads ([Cox et al, 2012][4]). Secondly, when we put both forward and reverse\ncomplement sequences in RCLO, the resulting index has a nice feature: the\nreverse complement of the *k*-th sequence in the FM-index is the *k*-th\nsmallest sequence. This would eliminate an array to map the rank of a sequence\nto its index in the input. This array is usually not compressible unless the\ninput is sorted.\n\nRopeBWT2 is developed for indexing hundreds of billions of symbols. It has been\ncarefully optimized for both speed and memory usage. On a new machine with [Xeon\nE5-2697v2 CPUs at 2.70GHz][cpu], ropeBWT2 is able to the index for 1.2 billion\n101bp reads in five wall-clock hours with 34G peak memory.\n\nIf you use RopeBWT2 or its predecessor [RopeBWT][1] in your work, please cite:\n\n> Li H (2014) Fast construction of FM-index for long sequence reads,\n> *Bioinformatics*, **30**:3274-5. [PMID: 25107872]\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/lh3/ropebwt2/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9815166844301845,
      "result": {
        "original_header": "Methods Overview",
        "type": "Text_excerpt",
        "value": "RopeBWT2 keeps the entire BWT in six B+ trees with the *i*-th tree storing the\nsubstring B[C(i)+1..C(i+1)], where C(i) equals the number of\nsymbols lexicographically smaller than *i*. In each B+ tree, an internal node\nkeeps the count of symbols in the subtree descending from it; an external node\nkeeps a BWT substring in the run-length encoding. The B+ tree achieve a similar\npurpose to the [rope data structure][7], which enables efficient query and\ninsertion. RopeBWT2 uses this rope-like data structure to achieve incremental\nconstruction. This is where word 'rope' in ropeBWT2 comes from. \nThe original BCR implementation uses static encoding to keep BWT. Although it is\npossible to insert strings to an existing BWT, we have to read through the old\nBWT. Reading the entire BWT may be much slower than the actual insertion. With\nthe rope data structure, we can insert one or many sequences of length *m* in\nO(mlogn) time without reading all the BWT. We can thus achieve efficient\nincremental construction. \nTo achieve RLO for one-string insertion, we insert the symbol that is ahead of\na suffix at the position based on the rank of the suffix computed from backward\nsearch. Inserting multiple strings in RLO is essentially a combination of radix\nsort, BCR and single-string insertion. RopeBWT2 uses radix sort to group\nsymbols with an identical suffix, compute the rank of the suffix with backward\nsearch and insert the group of symbols based on the BCR theory. For RCLO, we\nfind the insertion points with the complemented sequence but insert with the\noriginal string. \n"
      },
      "source": "https://raw.githubusercontent.com/lh3/ropebwt2/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9890896345002402,
      "result": {
        "original_header": "RopeBWT2 vs. ropeBWT",
        "type": "Text_excerpt",
        "value": "RopeBWT is the predecessor of ropeBWT2. The old version implements three\nseparate algorithms: in-memory BCR, single-string incremental FM-index on top\nof a B+ tree and single-string incremental FM-index on top of a red-black tree.\nBCR is later extended to support RLO and RCLO as well. \nThe BCR implementation in ropeBWT is the fastest so far for short reads, faster\nthan ropeBWT2. The legacy BCR implementation is still the preferred choice for\nconstructing the FM-index of short reads for the assembly purpose. However,\nwith parallelized incremental multi-string insertion, ropeBWT2 is faster than\nropeBWT for incremental index construction and works much better with long\nstrings. RopeBWT2 also uses more advanced run-length encoding, which will be\nmore space efficient for highly repetitive inputs and opens the possibility for\ninserting a run in addition individual symbols.\n \n"
      },
      "source": "https://raw.githubusercontent.com/lh3/ropebwt2/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9872857184982522,
      "result": {
        "original_header": "RopeBWT2 vs. BEETL",
        "type": "Text_excerpt",
        "value": "[BEETL][5] is the original implementation of the BCR algorithm. It uses disk to\nalleviate the memory requirement for constructing large FM-index and therefore\nheavily relies on fast linear disk access. BEETL supports the SAP order for\ninserting sequences but not RLO or RCLO.\n \n"
      },
      "source": "https://raw.githubusercontent.com/lh3/ropebwt2/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9953994096327987,
      "result": {
        "original_header": "RopeBWT2 vs. dynamic FM-index",
        "type": "Text_excerpt",
        "value": "RopeBWT was conceived in 2012, but the algorithm has been invented several\nyears earlier for multiple times. [Dynamic FM-index][3] is a notable\nimplementation that uses a [wavelet tree][6] for generic text and supports the\ndeletion operation. As it is not specifically designed for DNA sequences, it is\napparently ten times slower and uses more memory on the index construction. \n"
      },
      "source": "https://raw.githubusercontent.com/lh3/ropebwt2/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9119160234288418,
      "result": {
        "original_header": "Results",
        "type": "Text_excerpt",
        "value": "* For [ropebwt][rb] and ropebwt2, outputting the BWT to a plain text string\n  takes significant time. We let them dump the BWT in their internal binary\n  encoding. [BEETL][bcr] automatically chooses the RLE encoding in our\n  evaluation. Changing the BEETL encoding may also affect its performance. \n"
      },
      "source": "https://raw.githubusercontent.com/lh3/ropebwt2/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8769884908867804,
      "result": {
        "type": "Text_excerpt",
        "value": "introduces a faster algorithm for\nlong sequences and retains the same ropebwt2 algorithm as an alternative\n(invoked with `ropebwt3 build -2`). It also has additional functionality. \n"
      },
      "source": "https://raw.githubusercontent.com/lh3/ropebwt2/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/lh3/ropebwt2/wiki"
      },
      "source": "https://raw.githubusercontent.com/lh3/ropebwt2/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/lh3/ropebwt2/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/lh3/ropebwt2/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "lh3/ropebwt2"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/lh3/ropebwt2/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Data sets",
        "parent_header": [
          "Performance Evaluation"
        ],
        "type": "Text_excerpt",
        "value": "1. [**worm**] 66,764,080 100bp *C. elegans* reads from [SRR065390][ce] with pairs\n   containing any ambiguous bases filtered out. The total coverage is about 66X.\n\n2. [**Venter**] 31,861,134 [Craig Venter reads][venter] totalled in 27,899,994,048bp.\n   Reads containing ambiguous bases have been dropped.\n\n3. [**NA12878**] 1,206,555,986 101bp human reads for sample NA12878, used in my fermi paper.\n   Pairs containing ambiguous bases are filtered out. The data is at [1000g FTP][12878].\n   Only read groups matching \"20FUK\" are used.\n\n4. [**Moleculo**] 22,721,139 [Moleculo reads][mol] totalled in 91,476,572,938bp.\n   This data set contains a few hundred ambiguous bases which are not filtered.\n"
      },
      "source": "https://raw.githubusercontent.com/lh3/ropebwt2/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9999523907308532,
      "result": {
        "original_header": "Hardware and OS",
        "type": "Text_excerpt",
        "value": "CPU: 48 cores of [Xeon E5-2697 v2 at 2.70GHz][cpu]. GPU: one [Nvidia Tesla\nK40][gpu]. RAM: 128GB. OS: Red Hat Enterprise Linux 6. CUDA: 5.5. File system:\nIsilon OneFS network file system.\n \n"
      },
      "source": "https://raw.githubusercontent.com/lh3/ropebwt2/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9992310845902644,
      "result": {
        "original_header": "Results",
        "type": "Text_excerpt",
        "value": "|Dataset|w/ rev|Algorithm        |Sorted|CPU   |Real  |RSS  |Comment|\n|-------|:-----|:----------------|:-----|:-----|:-----|:----|:------|\n|worm   |No    |[BEETL-BCR][bcr] |-     |2574s |2092s |1.8G |network disk|\n|worm   |No    |[BEETL-BCR][bcr] |-     |2497s |965s  |1.8G |RAM disk|\n|worm   |No    |[BEETL-BCRext][bcr]|-   |2839s |5900s |12.6M|network disk|\n|worm   |No    |[nvSetBWT][nvb]  |-     |484s  |416s  |10.9G|mem: 2g/4g|\n|worm   |No    |[nvSetBWT][nvb]  |-     |435s  |316s  |12.9G|mem: 4g/4g|\n|worm   |No    |[nvSetBWT][nvb]  |-     |434s  |309s  |24.9G|mem: 16g/4g|\n|worm   |No    |[nvSetBWT][nvb]  |-     |499s  |480s  |21.5G|mem: 16g/2g|\n|worm   |No    |[ropebwt-BCR][rb]|No    |1070s |480s  |2.2G |-bORtf -abcr|\n|worm   |No    |[ropebwt-bpr][rb]|-     |4279s |4296s |2.3G |-bOR|\n|worm   |No    |[ropebwt-rbr][rb]|-     |8895s |8915s |2.3G |-bOR -arbr|\n|worm   |No    |ropebwt2-single  |No    |5105s |5125s |2.5G |-bRm0|\n|worm   |No    |ropebwt2    |No    |1611s |647s  |11.8G|-bRm10g|\n|worm   |No    |ropebwt2    |Yes   |1268s |506s  |10.5G|-brRm10g|\n|worm   |Yes   |ropebwt2    |No    |3566s |1384s |18.0G|-bm10g|\n|worm   |Yes   |ropebwt2    |Yes   |3116s |1182s |15.9G|-brm10g|\n|NA12878|No    |[BEETL-BCR][bcr] |-     |14.66h|11.18h|31.6G|network disk|\n|NA12878|No    |[nvSetBWT][nvb]  |-     |19.33h|4.10h |63.8G|mem: 48g/4g|\n|NA12878|No    |[ropebwt-BCR][rb]|No    |6.92h |3.29h |39.3G|-bORtf -abcr|\n|NA12878|No    |ropebwt2    |No    |12.54h|5.06h |60.9G|-bRm10g|\n|NA12878|No    |ropebwt2    |Yes   |12.94h|4.96h |34.0G|-brRm10g|\n|Venter |No    |ropebwt2    |No    |3.98h |1.45h |22.8G|-bRm10g|\n|Venter |No    |ropebwt2    |Yes   |3.95h |1.44h |22.2G|-brRm10g|\n|Moleculo|No   |ropebwt2    |No    |19.46h|6.82h |20.0G|-bRm10g| \n* nvSetBWT from NVBio aborted when '-gpu-mem 6144' or higher is specified. It\n  seems that nvSetBWT uses more GPU memory than -gpu-mem according to the\n  nvidia-smi report. nvSetBWT failed to build the index for Venter apparently\n  due to insufficient RAM. \n[1]: https://github.com/lh3/ropebwt\n[2]: http://dx.doi.org/10.1007/978-3-642-21458-5_20\n[3]: http://dfmi.sourceforge.net/\n[4]: https://www.ncbi.nlm.nih.gov/pubmed/22556365\n[5]: https://github.com/BEETL/BEETL\n[6]: https://en.wikipedia.org/wiki/Wavelet_Tree\n[7]: https://en.wikipedia.org/wiki/Rope_%28data_structure%29 \n[ce]: http://www.ncbi.nlm.nih.gov/sra/?term=SRR065390\n[cpu]: http://ark.intel.com/products/75283/Intel-Xeon-Processor-E5-2697-v2-30M-Cache-2_70-GHz\n[gpu]: http://www.nvidia.com/object/tesla-servers.html\n[bcr]: https://github.com/BEETL/BEETL\n[rb]: https://github.com/lh3/ropebwt\n[sga]: https://github.com/jts/sga\n[nvb]: https://github.com/NVlabs/nvbio\n[mol]: http://bit.ly/mol12878\n[12878]: ftp://ftp.ncbi.nih.gov/1000genomes/ftp/technical/working/20130103_high_cov_trio_bams/NA12878/alignment/\n[venter]: http://bit.ly/levy2007\n \n"
      },
      "source": "https://raw.githubusercontent.com/lh3/ropebwt2/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/lh3/ropebwt2/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bioinformatics, fm-index"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ropebwt2"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "lh3"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "TeX",
        "size": 80348,
        "type": "Programming_language",
        "value": "TeX"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 73127,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 1066,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lh3/ropebwt2/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 09:45:51",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 68
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Examples",
        "type": "Text_excerpt",
        "value": "1. Construct the BWT for sequences in the input order:\n\n        ropebwt2 -o out.bwt in.fa\n\n2. Construct the BWT for sequences in RLO and output the BWT in the ropebwt2\n   binary format:\n\n        ropebwt2 -bso out.fmr in.fa\n\n3. Construct the BWT for sequences in RLO, processing 4GB symbols at a time\n   with multithreading:\n\n        ropebwt2 -brm4g in.fa > out.fmr\n\n   Note that for sequence reads, processing multiple sequences together is\n   faster due to possible multi-threading and fewer cache misses. The peak\n   memory is about *B*+*m*\\*(1+48/*l*), where *B* is the size of the final BWT\n   encoded in a B+-tree, *m* is the parameter value of '-m' and *l* is the\n   average read length.\n\n4. Add sequences to an existing index with the sorting order defined by the\n   existing index (incremental construction):\n\n        ropebwt2 -bi in.fmr in.fa > out.fmr\n\n"
      },
      "source": "https://raw.githubusercontent.com/lh3/ropebwt2/master/README.md",
      "technique": "header_analysis"
    }
  ]
}