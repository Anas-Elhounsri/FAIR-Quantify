{
  "application_domain": [
    {
      "confidence": 22.94,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Reference",
        "parent_header": [
          "ECMarker"
        ],
        "type": "Text_excerpt",
        "value": "[1] Osindero, S. & G. Hinton. 2007a. Modeling image patches with a directed hierarchy of Markov random fields.\\\n[2]Larochelle, H. & Y. Bengio. 2008. Classification using discriminative restricted Boltzmann machines. In Proceedings of the 25th international conference on Machine learning, 536\u2013543. Helsinki, Finland: Association for Computing Machinery.\\\n[3] Gentles, A. J., S. V. Bratman, L. J. Lee, J. P. Harris, W. Feng, R. V. Nair, D. B. Shultz, V. S. Nair, C. D. Hoang, R. B. West, S. K. Plevritis, A. A. Alizadeh & M. Diehn (2015) Integrating Tumor and Stromal Gene Expression Signatures With Clinical Indices for Survival Stratification of Early-Stage Non\u2013Small Cell Lung Cancer. JNCI: Journal of the National Cancer Institute, 107.\n"
      },
      "source": "https://raw.githubusercontent.com/daifengwanglab/ECMarker/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/daifengwanglab/ECMarker"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-05-12T00:33:28Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-11-29T17:51:31Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "parent_header": [
          "ECMarker"
        ],
        "type": "Text_excerpt",
        "value": "ECMarker is an interpretable and scalable machine learning model to predict gene expression biomarkers for disease phenotypes and simultaneously reveal underlying gene regulatory mechanisms. It is built on the integration of semi- and discriminative- restricted Boltzmann machines [1][2], a neural network model for classification allowing lateral connections at the input gene layer. This interpretable model is scalable without needing any prior feature selection and enables directly modeling and prioritizing genes and revealing potential gene networks (from lateral connections) for the phenotypes. This model allows one to directly model and prioritize gene interactions for the classification of clinical phenotypes, revealing potential gene regulatory networks (GRNs) for different disease phenotypes (e.g., early and late cancer stages as a demo below). \n<p align=\"center\">\n  <img width=\"300\" height=\"300\" src=\"Framework.png\">\n</p>\n"
      },
      "source": "https://raw.githubusercontent.com/daifengwanglab/ECMarker/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9679483936153839,
      "result": {
        "original_header": "ECMarker",
        "type": "Text_excerpt",
        "value": "An interpretable machine learning model identifies gene expression biomarkers predicting clinical phenotypes and outcomes and reveals molecular mechanisms in the human disease\n \n"
      },
      "source": "https://raw.githubusercontent.com/daifengwanglab/ECMarker/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/daifengwanglab/ECMarker/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/daifengwanglab/ECMarker/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "daifengwanglab/ECMarker"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ECMarker"
      },
      "source": "https://raw.githubusercontent.com/daifengwanglab/ECMarker/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/daifengwanglab/ECMarker/master/Framework.png"
      },
      "source": "https://raw.githubusercontent.com/daifengwanglab/ECMarker/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "ECMarker"
        ],
        "type": "Text_excerpt",
        "value": "This script need no installation, but has the following requirements:\n* PyTorch 0.4.1 or above\n* Python 3.6.5 or above\n* Captum\n\n"
      },
      "source": "https://raw.githubusercontent.com/daifengwanglab/ECMarker/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 2: Train the ECMarker with training set, then test on the testing set.",
        "parent_header": [
          "ECMarker",
          "Usage",
          "Run ECMarker"
        ],
        "type": "Text_excerpt",
        "value": "```python\nX_train, y_train, X_test, y_test = map(\n    torch.tensor, (X_train, y_train, X_test, y_test)\n)\ntrain_ds = TensorDataset(X_train, y_train)\ntest_ds = TensorDataset(X_test, y_test)\n\ntrain_dl = DataLoader(dataset=train_ds, \n                          sampler = ImbalancedDatasetSampler(train_ds), \n                          batch_size=batch_size)\ntest_dl = DataLoader(dataset=test_ds, \n                        batch_size=batch_size*2)\n\nmodel = train(model, train_dl, opt=opt, n_epochs=n_epochs, lr=lr, \n              L1REG=L1REG, L2REG=L2REG, moment=moment, device=device)\n\nfrom sklearn.metrics import accuracy_score\nwith torch.no_grad():\n    X_test, y_test = next(iter(test_dl))\n    model.eval()\n    y_hat = model(X_test)\n    y_hat_class = np.where(y_hat.cpu().numpy()<0.5, 0, 1)\n    test_accuracy = accuracy_score(y_test, y_hat_class)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/daifengwanglab/ECMarker/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/daifengwanglab/ECMarker/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ECMarker"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "daifengwanglab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 11617,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/daifengwanglab/ECMarker/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 1: Define ECMarker model",
        "parent_header": [
          "ECMarker",
          "Usage",
          "Run ECMarker"
        ],
        "type": "Text_excerpt",
        "value": "```python\nimport torch\nfrom torch.utils.data import Dataset, TensorDataset, DataLoader\nimport torch.autograd as autograd\nfrom model import GRBM\nfrom utils import *\ndevice = 'cuda' if torch.cuda.is_available() else 'cpu' # training with cuda if available\n\nbatch_size = 50 # batch size\nn_epochs = 1 # number of epochs\nlr = 0.01 # learning rate\nL1REG = 0.1\nL2REG = 0.9\nmoment = None\nn_hid = 9 # number of neurons in the hidden layer\nn_target = 2\nn_vis = X.shape[1] # input size\nopt = torch.optim.SGD\n\nmodel = GRBM(n_vis=n_vis, n_target=n_target, n_hid=n_hid, k=5).to(device)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/daifengwanglab/ECMarker/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 3: Extract biomarkers and gene network from the well-trained ECMarker",
        "parent_header": [
          "ECMarker",
          "Usage",
          "Run ECMarker"
        ],
        "type": "Text_excerpt",
        "value": "```python\n# Gene Network\ngene_network = model.L\n\n# Biomarkers\nfrom captum.attr import IntegratedGradients\n\nfeature_names = Test.index.tolist()\nig = IntegratedGradients(model.cpu())\ndevice = 'cpu'\n\n# Biomarkers for early stage (set target=0)\nattr, delta = ig.attribute(X_test.cpu(), target=0, return_convergence_delta=True)\nearly_biomarkers = dict(zip(feature_names, np.mean(attr.detach().numpy(), axis=0)))\n\n# Biomarkers for late stage (set target=1)\nattr, delta = ig.attribute(X_test.cpu(), target=1, return_convergence_delta=True)\nlate_biomarkers = dict(zip(feature_names, np.mean(attr.detach().numpy(), axis=0)))\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/daifengwanglab/ECMarker/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 01:34:12",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 8
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Input data formats",
        "parent_header": [
          "ECMarker",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "* gene expression data matrix (genes by patients): a csv file with n rows and m columns. n is the number of paitents and m is the number of genes. \n\n* disease stage data: an csv file includes the cancer stages of patients. \n"
      },
      "source": "https://raw.githubusercontent.com/daifengwanglab/ECMarker/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Load example data",
        "parent_header": [
          "ECMarker",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "The example data is downloaded from the publicly accessible dataset[3] which is including gene expression data and clinical information of non-small cell lung cancer (NSCLC) patients. We grouped patients based on their tumor/node/metastasis (TMN) stages, with (I+IA+IB) as the early stage  and II, III, and IV as the late stage, then divided the dataset into training and testing datasets.  \n\n```python\nimport pandas as pd\nimport numpy as np\n\nTrain = pd.read_csv('Data/Train.csv')\nTrainLabel = pd.read_csv('Data/TrainLabel.csv')\nTest = pd.read_csv('Data/Test.csv')\nTestLabel = pd.read_csv('Data/TestLabel.csv')\n\nX_train = Train.values\ny_train = TrainLabel.values\nX_test = Test.values\ny_test = TestLabel.values\n```\nIn the Label file, 0 indicates early stage patients, 1 indicates late stage paitents. \n"
      },
      "source": "https://raw.githubusercontent.com/daifengwanglab/ECMarker/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 1: Define ECMarker model",
        "parent_header": [
          "ECMarker",
          "Usage",
          "Run ECMarker"
        ],
        "type": "Text_excerpt",
        "value": "```python\nimport torch\nfrom torch.utils.data import Dataset, TensorDataset, DataLoader\nimport torch.autograd as autograd\nfrom model import GRBM\nfrom utils import *\ndevice = 'cuda' if torch.cuda.is_available() else 'cpu' # training with cuda if available\n\nbatch_size = 50 # batch size\nn_epochs = 1 # number of epochs\nlr = 0.01 # learning rate\nL1REG = 0.1\nL2REG = 0.9\nmoment = None\nn_hid = 9 # number of neurons in the hidden layer\nn_target = 2\nn_vis = X.shape[1] # input size\nopt = torch.optim.SGD\n\nmodel = GRBM(n_vis=n_vis, n_target=n_target, n_hid=n_hid, k=5).to(device)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/daifengwanglab/ECMarker/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 3: Extract biomarkers and gene network from the well-trained ECMarker",
        "parent_header": [
          "ECMarker",
          "Usage",
          "Run ECMarker"
        ],
        "type": "Text_excerpt",
        "value": "```python\n# Gene Network\ngene_network = model.L\n\n# Biomarkers\nfrom captum.attr import IntegratedGradients\n\nfeature_names = Test.index.tolist()\nig = IntegratedGradients(model.cpu())\ndevice = 'cpu'\n\n# Biomarkers for early stage (set target=0)\nattr, delta = ig.attribute(X_test.cpu(), target=0, return_convergence_delta=True)\nearly_biomarkers = dict(zip(feature_names, np.mean(attr.detach().numpy(), axis=0)))\n\n# Biomarkers for late stage (set target=1)\nattr, delta = ig.attribute(X_test.cpu(), target=1, return_convergence_delta=True)\nlate_biomarkers = dict(zip(feature_names, np.mean(attr.detach().numpy(), axis=0)))\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/daifengwanglab/ECMarker/master/README.md",
      "technique": "header_analysis"
    }
  ]
}