{
  "application_domain": [
    {
      "confidence": 0.9209864977711293,
      "result": {
        "type": "String",
        "value": "Semantic web"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ryanlayer/giggle"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2015-12-04T19:48:08Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-21T00:33:34Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Interval data structure"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9087717557566026,
      "result": {
        "original_header": "Web server (optional)",
        "type": "Text_excerpt",
        "value": "This is based on [libmicrohttpd](http://www.gnu.org/software/libmicrohttpd/) \n    cd $GIGGLE_ROOT\n    make\n    make server\n    cd ..\n    \nTo host the site shown in Supplemental Figure 3, you will need host web servers for both \nthe Roadmap Epigenomics data and the UCSC data. Here we will run both servers on the same\nhost from ports `8080` and `8081` and access the web services using `localhost`, but these \nare general steps and apply to many other configurations including hosting the data sets \non different servers.\n     \n    wget https://s3.amazonaws.com/layerlab/giggle/roadmap/roadmap_sort.tar.gz\n    tar -zxvf roadmap_sort.tar.gz\n    \n    # NOTE, if the following command gives \"Too many open files\" try:\n    ulimit -Sn 16384\n    $GIGGLE_ROOT/bin/giggle index -s -f \\\n        -i \"roadmap_sort/*gz\" \\\n        -o roadmap_sort_b \n        \n    wget https://s3.amazonaws.com/layerlab/giggle/ucsc/ucscweb_sort.tar.gz\n    tar -zxvf ucscweb_sort.tar.gz\n    \n    $GIGGLE_ROOT/bin/giggle index -s -f \\\n        -i \"ucscweb_sort/*gz\" \\\n        -o ucscweb_sort_b\n    \nStart a web server for each index.  \n"
      },
      "source": "https://raw.githubusercontent.com/ryanlayer/giggle/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9470342243273238,
      "result": {
        "type": "Text_excerpt",
        "value": "GIGGLE is a genomics search engine that identifies and ranks the\nsignificance of shared genomic loci between query features and thousands of\ngenome interval files. \nFor questions and discussion about GIGGLE please visit/join the mailing list:\nhttps://groups.google.com/d/forum/giggle-discuss \n"
      },
      "source": "https://raw.githubusercontent.com/ryanlayer/giggle/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ryanlayer/giggle/tree/master/docs"
      },
      "technique": "file_exploration"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ryanlayer/giggle/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 29
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ryanlayer/giggle/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ryanlayer/giggle"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/ryanlayer/giggle/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ryanlayer/giggle/master/docs/update_doxygen.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ryanlayer/giggle/master/examples/cistrome/get_top.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ryanlayer/giggle/master/examples/cistrome/get_qc.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ryanlayer/giggle/master/examples/ucsc/get_data.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ryanlayer/giggle/master/examples/segway/get_data.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ryanlayer/giggle/master/examples/rme/get_data.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://img.youtube.com/vi/yw8H7PhtZoA/0.jpg"
      },
      "source": "https://raw.githubusercontent.com/ryanlayer/giggle/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://godoc.org/raw.githubusercontent.com/brentp/go-giggle?status.png"
      },
      "source": "https://raw.githubusercontent.com/ryanlayer/giggle/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "APIs",
          "<a href=\"https://github.com/brentp/python-giggle\">Python</a> by Brent Pedersen"
        ],
        "type": "Text_excerpt",
        "value": "make sure you have `liz`, `libcurl`, `libcrypto`, `libbz2` and `liblzma` installed in the appropriate\nplace on your system.\n```\ngit clone --recursive https://github.com/brentp/python-giggle\ncd python-giggle\npython setup.py test\npython setup.py install\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ryanlayer/giggle/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9999999999910187,
      "result": {
        "original_header": "Giggle command line interface",
        "type": "Text_excerpt",
        "value": "    git clone https://github.com/ryanlayer/giggle.git\n    cd giggle\n    make\n    export GIGGLE_ROOT=`pwd`\n    cd ..\n \n"
      },
      "source": "https://raw.githubusercontent.com/ryanlayer/giggle/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9998243055905812,
      "result": {
        "original_header": "Data",
        "type": "Text_excerpt",
        "value": "Roadmap Epigenomics:  https://s3.amazonaws.com/layerlab/giggle/roadmap/roadmap_sort.tar.gz \nUCSC Genome browser:  https://s3.amazonaws.com/layerlab/giggle/ucsc/ucscweb_sort.tar.gz \nFantom5:  https://s3.amazonaws.com/layerlab/giggle/fantom/fantom_sort.tar.gz\n \n"
      },
      "source": "https://raw.githubusercontent.com/ryanlayer/giggle/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9980307630101237,
      "result": {
        "original_header": "Interactive heatmap",
        "type": "Text_excerpt",
        "value": "http://ryanlayer.github.io/giggle/index.html?primary_index=stix.colorado.edu/rme&ucsc_index=stix.colorado.edu/ucsc\n \n"
      },
      "source": "https://raw.githubusercontent.com/ryanlayer/giggle/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9891180763650563,
      "result": {
        "original_header": "Web server (optional)",
        "type": "Text_excerpt",
        "value": "    mkdir -p $HOME/usr/local/\n    wget http://ftpmirror.gnu.org/libmicrohttpd/libmicrohttpd-0.9.46.tar.gz\n    tar zxvf libmicrohttpd-0.9.46.tar.gz\n    cd libmicrohttpd-0.9.46\n    ./configure --prefix=$HOME/usr/local/\n    make\n    make install \n    export LD_LIBRARY_PATH=$HOME/usr/local/lib/ \n    cd .. \n    sudo apt install libtool \n    wget https://github.com/json-c/json-c/archive/json-c-0.12.1-20160607.tar.gz\n    tar xvf json-c-0.12.1-20160607.tar.gz  \n    cd json-c-json-c-0.12.1-20160607\n    ./configure --prefix=$HOME/usr/local/\n    make\n    make install \n    cd $GIGGLE_ROOT\n    make\n    make server\n    cd ..\n    \nTo host the site shown in Supplemental Figure 3, you will need host web servers for both \nthe Roadmap Epigenomics data and the UCSC data. Here we will run both servers on the same\nhost from ports `8080` and `8081` and access the web services using `localhost`, but these \nare general steps and apply to many other configurations including hosting the data sets \non different servers.\n     \n    wget https://s3.amazonaws.com/layerlab/giggle/roadmap/roadmap_sort.tar.gz\n    tar -zxvf roadmap_sort.tar.gz\n    \n    # NOTE, if the following command gives \"Too many open files\" try:\n    ulimit -Sn 16384\n    $GIGGLE_ROOT/bin/giggle index -s -f \\\n        -i \"roadmap_sort/*gz\" \\\n        -o roadmap_sort_b \n        \n    wget https://s3.amazonaws.com/layerlab/giggle/ucsc/ucscweb_sort.tar.gz\n    tar -zxvf ucscweb_sort.tar.gz\n    \n    $GIGGLE_ROOT/bin/giggle index -s -f \\\n        -i \"ucscweb_sort/*gz\" \\\n        -o ucscweb_sort_b\n    \nStart a web server for each index.  \n    $GIGGLE_ROOT/bin/server_enrichment -i roadmap_sort_b/ -u /tmp/ -d $GIGGLE_ROOT/examples/rme/data_def.json -p 8080 &\n    $GIGGLE_ROOT/bin/server_enrichment -i ucscweb_sort_b/ -u /tmp/ -d $GIGGLE_ROOT/examples/ucsc/data_def.json -p 8081 & \n    If you get Access-Control-Allow-Origin errors, then pass the `-a` option to `server_enrichment` \n    http://ryanlayer.github.io/giggle/index.html?primary_index=localhost:8080&ucsc_index=localhost:8081\n   \nThese data are also being served here: \nhttp://ryanlayer.github.io/giggle/index.html?primary_index=ec2-54-227-176-15.compute-1.amazonaws.com/rme&ucsc_index=ec2-54-227-176-15.compute-1.amazonaws.com/ucsc\n \n"
      },
      "source": "https://raw.githubusercontent.com/ryanlayer/giggle/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9080012921395868,
      "result": {
        "original_header": "<a href=\"https://github.com/kubor/giggle-docker\">giggle-docker</a> by Ryuichi Kubo",
        "type": "Text_excerpt",
        "value": "```\ndocker run kubor/giggle-docker giggle -h\n```\n```\nUnknown command\ngiggle, v0.6.3\nusage:   giggle <command> [options]\n         index     Create an index\n                  search    Search an index\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/ryanlayer/giggle/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8951859591773744,
      "result": {
        "original_header": "<a href=\"https://github.com/HugoGuillen/giggle-singularity\">giggle-singularity</a> by Hugo Guillen",
        "type": "Text_excerpt",
        "value": "`giggle-singularity` provides the tools to create and access a Singularity container with GIGGLE.\n```bash\ngiggle.sh -h\n\nusage:\n  giggle.sh <command> [options]\n  index   Create an index.\n  search  Search an index.\n  check   Verifies configuration.\n  pull    Creates a singularity container from giggle-docker image.\n  shell   Opens the shell to the giggle-singularity container.\n  NOTE: first run 'check' to verify all configuration parameters are correct.\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/ryanlayer/giggle/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8884302002519425,
      "result": {
        "original_header": "Web server (optional)",
        "type": "Text_excerpt",
        "value": "    $GIGGLE_ROOT/bin/server_enrichment -i roadmap_sort_b/ -u /tmp/ -d $GIGGLE_ROOT/examples/rme/data_def.json -p 8080 &\n    $GIGGLE_ROOT/bin/server_enrichment -i ucscweb_sort_b/ -u /tmp/ -d $GIGGLE_ROOT/examples/ucsc/data_def.json -p 8081 & \n"
      },
      "source": "https://raw.githubusercontent.com/ryanlayer/giggle/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8717797434525619,
      "result": {
        "original_header": "<a href=\"https://github.com/brentp/python-giggle\">Python</a> by Brent Pedersen",
        "type": "Text_excerpt",
        "value": "```\nfrom giggle import Giggle\nindex = Giggle('existing-index-dir') # or Giggle.create('new-index-dir', 'files/*.bed')\nprint(index.files)\n\nresult = index.query('chr1', 9999, 20000)\nprint(result.n_files)\nprint(result.n_total_hits) # integer number sum of hits across all files\n\nprint(result.n_hits(0)) # integer number of hits for the 0th file...\n\nfor hit in result[0]:\n    print(hit) # hit is a string\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/ryanlayer/giggle/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ryanlayer/giggle/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2021 Ryan Layer\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/ryanlayer/giggle/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ryanlayer/giggle/master/img/logo.png"
      },
      "source": "https://raw.githubusercontent.com/ryanlayer/giggle/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "giggle"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "ryanlayer"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 2807706,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 58709,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "JavaScript",
        "size": 39682,
        "type": "Programming_language",
        "value": "JavaScript"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 34120,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 32734,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 22920,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Roff",
        "size": 20219,
        "type": "Programming_language",
        "value": "Roff"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Ruby",
        "size": 17951,
        "type": "Programming_language",
        "value": "Ruby"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 13700,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "M4",
        "size": 12757,
        "type": "Programming_language",
        "value": "M4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CSS",
        "size": 7158,
        "type": "Programming_language",
        "value": "CSS"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Scilab",
        "size": 2872,
        "type": "Programming_language",
        "value": "Scilab"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ryanlayer/giggle/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependencies",
        "parent_header": [
          "Building"
        ],
        "type": "Text_excerpt",
        "value": "From a fresh install of Ubuntu, the following steps should provide all the\nrequired dependencies.\n\n    sudo apt install gcc make autoconf zlib1g-dev libbz2-dev libcurl4-openssl-dev libssl-dev ruby\n    "
      },
      "source": "https://raw.githubusercontent.com/ryanlayer/giggle/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Run tests",
        "parent_header": [
          "Building"
        ],
        "type": "Text_excerpt",
        "value": "The first set of tests require bedtools to be in your path.\n\n    sudo apt install g++ python\n\n    git clone https://github.com/arq5x/bedtools2.git\n    cd bedtools2\n    make\n    cd bin\n    export PATH=$PATH:`pwd`\n    cd ../..\n    \nNow run the tests\n\n    cd $GIGGLE_ROOT/test/func\n    ./giggle_tests.sh\n    cd ../unit\n    make\n    cd ../../..\n    "
      },
      "source": "https://raw.githubusercontent.com/ryanlayer/giggle/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 06:38:15",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 224
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "type": "Text_excerpt",
        "value": "GIGGLE has two high-level functions:\n* `index` creates an index from a directory of bgzipped annotations (BED files\n  or VCF files)\n* `search` takes a region or a file of regions and searches them against an\n  index\n\n```\ngiggle, v0.6.3\nusage:   giggle <command> [options]\n     index     Create an index\n     search    Search an index\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ryanlayer/giggle/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Indexing",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "    giggle, v0.6.3\n    usage:   giggle index -i <input files> -o <output dir> -f\n         options:\n             -s  Files are sorted\n             -i  Files to index (e.g. data/*.gz)\n             -o  Index output directory\n             -m  Metadata config file\n             -f  For reindex if output directory exists\n\nLearn more about the [Metadata config file here](experiments/metadata_index_query_filter)\n"
      },
      "source": "https://raw.githubusercontent.com/ryanlayer/giggle/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Searching",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "    giggle, v0.6.3\n    usage:   giggle search -i <index directory> [options]\n         options:\n             -i giggle index directory\n             -r <regions (CSV)>\n             -q <query file>\n             -o give results per record in the query file (omits empty results)\n             -c give counts by indexed file\n             -s give significance by indexed file (requires query file)\n             -v give full record results\n             -f print results for files that match a pattern (regex CSV)\n             -g genome size for significance testing (default 3095677412)\n             -l list the files in the index\n             -m load metadata index\n             -u query filter\n"
      },
      "source": "https://raw.githubusercontent.com/ryanlayer/giggle/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "To demonstrate GIGGLE indexing and searching, we will curate and query a genome\nrepeat reference dataset. \n\nThis example will use `gargs` from `https://github.com/brentp/gargs`\n\n    wget -O gargs https://github.com/brentp/gargs/releases/download/v0.3.8/gargs_linux\n    chmod +x gargs\n\nor if you are on a Mac\n\n    wget -O gargs https://github.com/brentp/gargs/releases/download/v0.3.8/gargs_darwin\n    chmod +x gargs\n\nThis reference will be based on the following annotation from the UCSC genome\nbrowser:\n* Repeat Masker\n* Segmental Duplications \n* Microsatellites \n* Simple Repeats\n\nUCSC stores data as tables, and the relevant columns vary between files, so we\nmust take some care in curating the data.\n    \n    mkdir repeat\n    url=\"http://hgdownload.soe.ucsc.edu/goldenPath/hg19/database/rmsk.txt.gz\"\n    curl -s $url | gunzip -c | cut -f 6,7,8,11,12,13 > repeat/rmsk.bed\n\n    url=\"http://hgdownload.soe.ucsc.edu/goldenPath/hg19/database/simpleRepeat.txt.gz\"\n    curl -s $url | gunzip -c | cut -f 2,3,4,17 > repeat/simpleRepeat.bed\n\n    url=\"http://hgdownload.soe.ucsc.edu/goldenPath/hg19/database/microsat.txt.gz\"\n    curl -s $url | gunzip -c | cut -f 2,3,4 > repeat/microsat.bed\n\n    url=\"http://hgdownload.soe.ucsc.edu/goldenPath/hg19/database/genomicSuperDups.txt.gz\"\n    curl -s $url | gunzip -c | cut -f 2,3,4,5 > repeat/genomicSuperDups.bed\n\n    url=\"http://hgdownload.soe.ucsc.edu/goldenPath/hg19/database/chainSelf.txt.gz\"\n    curl -s $url | gunzip -c  | cut -f 3,5,6,7,10,11 > repeat/chainSelf.bed\n \nOnce all of the data are in bed files in the `repeat` directory, we sort and bgzip the\nfiles then index.\n\n    mkdir repeat_sort\n    giggle/scripts/sort_bed \"repeat/*.bed\" repeat_sort 4\n    giggle index -i \"repeat_sort/*gz\" -o repeat_sort_b -f -s\n\nA GIGGLE index can be queried and the output formatted in a variety of ways.\nThe most basic is to search a single interval and get the number of overlaps for \neach database file.\n\n\n    giggle search -i repeat_sort_b -r 1:200457776-200457776\n\n    #repeat_sort/chainSelf.bed.gz   size:1058543    overlaps:0\n    #repeat_sort/genomicSuperDups.bed.gz    size:51599  overlaps:0\n    #repeat_sort/microsat.bed.gz    size:41572  overlaps:0\n    #repeat_sort/rmsk.bed.gz    size:5298130    overlaps:1\n    #repeat_sort/simpleRepeat.bed.gz    size:962714 overlaps:0\n\nTo search only a subset of database files use the `-f` option, which takes a \ncomma separated list of regular expressions. Only those database files that\nmatch one of the regular expressions will be considered.\n\n    giggle search -i repeat_sort_b -r 1:200457776-200457776 -f rmsk,simple\n\n    #repeat_sort/rmsk.bed.gz    size:5298130    overlaps:1\n    #repeat_sort/simpleRepeat.bed.gz    size:962714 overlaps:0\n\nTo retrieve the original records for each overlap, use the `-v` option.  This\nis useful for detailed filtering and summaries.\n\n    giggle search -i repeat_sort_b -r 1:200457776-200457776 -f rmsk,simple -v\n\n    chr1    200457488   200457811   L2a LINE    L2  repeat_sort/rmsk.bed.gz\n\nGIGGLE also accepts query files in either `bed.gz` or `vcf.gz` formats. When a \nquery file is given all of the above options are valid. In addition, GIGGLE can\nperform statistical tests between the query file and each database file using the \n`-s` option. These tests include the:\n* odds ratio that estimates the enrichment of observed v. expected\n* the Fisher's two tailed, left tailed, and right tailed tests that estimate p-values\n* the GIGGLE combo score that combines the odds ratio and Fisher's two tailed tests\n\n```\ngiggle search -i repeat_sort_b -q bed.bed.gz -s\n#file                             file_size   overlaps              odds_ratio         fishers_two_tail       fishers_left_tail   fishers_rigth_tail       combo_score\nrepeat_sort/chainSelf.bed.gz        1058543     410556  1.4753028915472957e-10  9.9350208733579337e-201 9.9350208733579337e-201   1                        0\nrepeat_sort/genomicSuperDups.bed.gz   51599      31434  1.2707669134541957      7.63990775297919e-91    1                         3.8346413983550421e-91  31.153365312726858\nrepeat_sort/microsat.bed.gz           41572      12320  1.0772570268110226      3.7685521408880773e-10  0.99999999982079036       1.9339512340673677e-10   1.0117655469639908\nrepeat_sort/rmsk.bed.gz             5298130    1599051  1.0068476528982573e-10  3.9822462776218267e-200 2.2545997326354446e-200   1                        0\nrepeat_sort/simpleRepeat.bed.gz      962714     308460  1.0977857352008243e-10  4.4719559780220419e-201 4.4719559780220419e-201   1                        0\n```\n\nOriginal records can also be retrieved and grouped by query interval with the `-v -o` options.\n\n    giggle search -i repeat_sort_b -q ALL.wgs.integrated_sv_map_v2.20130502.svs.genotypes.vcf.gz -v -o | head\n\n    ####1     645710  ALU_umary_ALU_2 A       <INS:ME:ALU>    .       .       TSD=null;SVTYPE=ALU;MEINFO=AluYa4_5,1,223,-;SVLEN=222;CS=ALU_umary;AC=35;AF=0.00698882;NS=2504;AN=5008;EAS_AF=0.0069;EUR_AF=0.0189;AFR_AF=0;AMR_AF=0.0072;SAS_AF=0.0041;SITEPOST=0.9998\n    chr1    18392   804926  chr19   60000   244029  repeat_sort/chainSelf.bed.gz\n    chr1    70007   667633  chr6    60000   147635  repeat_sort/chainSelf.bed.gz\n    chr1    114546  672699  chr1    260861  676115  repeat_sort/chainSelf.bed.gz\n    chr1    126221  713929  chr7    56425213        56942114        repeat_sort/chainSelf.bed.gz\n    chr1    130987  703609  chr7    55804351        56479927        repeat_sort/chainSelf.bed.gz\n    chr1    131111  751608  chr1    222641449       224228809       repeat_sort/chainSelf.bed.gz\n    chr1    227417  706973  chr5    14937   199599  repeat_sort/chainSelf.bed.gz\n    chr1    228316  648877  chr6    60000   193267  repeat_sort/chainSelf.bed.gz\n    chr1    230805  804926  chr16   60000   164433  repeat_sort/chainSelf.bed.gz\n"
      },
      "source": "https://raw.githubusercontent.com/ryanlayer/giggle/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example analysis",
        "type": "Text_excerpt",
        "value": "**NOTE:** Index files and query files MUST be bgzipped (https://github.com/samtools/htslib, https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3042176/).\n"
      },
      "source": "https://raw.githubusercontent.com/ryanlayer/giggle/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Roadmap Epigenomics",
        "parent_header": [
          "Example analysis"
        ],
        "type": "Text_excerpt",
        "value": "    # details of how to recreate the data at \n    # https://github.com/ryanlayer/giggle/blob/master/examples/rme/README.md\n    wget https://s3.amazonaws.com/layerlab/giggle/roadmap/roadmap_sort.tar.gz\n    tar -zxvf roadmap_sort.tar.gz\n    \n    # NOTE, if the following command gives \"Too many open files\" try:\n    # ulimit -Sn 16384\n    $GIGGLE_ROOT/bin/giggle index -s -f \\\n        -i \"roadmap_sort/*gz\" \\\n        -o roadmap_sort_b \n\n    wget ftp://ftp.ncbi.nlm.nih.gov/geo/samples/GSM1218nnn/GSM1218850/suppl/GSM1218850_MB135DMMD.peak.txt.gz\n    # take the just the top peaks\n    zcat GSM1218850_MB135DMMD.peak.txt.gz \\\n    | awk '$8>100' \\\n    | cut -f1,2,3 \\\n    | $GIGGLE_ROOT/lib/htslib/bgzip -c \\\n    > GSM1218850_MB135DMMD.peak.q100.bed.gz\n\n    # List files in the index\n    $GIGGLE_ROOT/bin/giggle search -l \\\n        -i roadmap_sort_b/ \n\n    # Search\n    $GIGGLE_ROOT/bin/giggle search -s \\\n        -i roadmap_sort_b/ \\\n        -q GSM1218850_MB135DMMD.peak.q100.bed.gz \\\n    > GSM1218850_MB135DMMD.peak.q100.bed.gz.result\n\n    \n    # Plot\n    sudo apt install python python-pip python-tk\n    pip install matplotlib\n    $GIGGLE_ROOT/scripts/giggle_heat_map.py \\\n        -s $GIGGLE_ROOT/examples/rme/states.txt \\\n        -c $GIGGLE_ROOT/examples/rme/EDACC_NAME.txt \\\n        -i GSM1218850_MB135DMMD.peak.q100.bed.gz.result \\\n        -o GSM1218850_MB135DMMD.peak.q100.bed.gz.result.3x11.pdf \\\n        -n $GIGGLE_ROOT/examples/rme/new_groups.txt \\\n        --x_size 3 \\\n        --y_size 11 \\\n        --stat combo \\\n        --ablines 15,26,31,43,52,60,72,82,87,89,93,101,103,116,120,122,127 \\\n        --state_names $GIGGLE_ROOT/examples/rme/short_states.txt \\\n        --group_names $GIGGLE_ROOT/examples/rme/new_groups_names.txt\n\n"
      },
      "source": "https://raw.githubusercontent.com/ryanlayer/giggle/master/README.md",
      "technique": "header_analysis"
    }
  ]
}