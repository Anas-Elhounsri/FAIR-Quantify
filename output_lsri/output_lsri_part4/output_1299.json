{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/brentp/pyfasta"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2010-07-14T22:45:27Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-05T05:35:09Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "fast, memory-efficient, pythonic (and command-line) access to fasta sequence files"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9908459630198931,
      "result": {
        "original_header": "Implementation",
        "type": "Text_excerpt",
        "value": "Requires Python >= 2.6. Stores a flattened version of the fasta file without\nspaces or headers and uses either a mmap of numpy binary format or fseek/fread so the\n*sequence data is never read into memory*. Saves a pickle (.gdx) of the start, stop \n(for fseek/mmap) locations of each header in the fasta file for internal use.\n \n"
      },
      "source": "https://raw.githubusercontent.com/brentp/pyfasta/master/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8692176398939272,
      "result": {
        "original_header": "Numpy",
        "type": "Text_excerpt",
        "value": "The default is to use a memmaped numpy array as the backend. In which case it's possible to\nget back an array directly...\n:: \n"
      },
      "source": "https://raw.githubusercontent.com/brentp/pyfasta/master/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9029422456530996,
      "result": {
        "original_header": "Backends (Record class)",
        "type": "Text_excerpt",
        "value": "It's also possible to specify another record class as the underlying work-horse\nfor slicing and reading. Currently, there's just the default:  \n  * NpyFastaRecord which uses numpy memmap\n  * FastaRecord, which uses using fseek/fread\n  * MemoryRecord which reads everything into memory and must reparse the original\n    fasta every time.\n  * TCRecord which is identical to NpyFastaRecord except that it saves the index\n    in a TokyoCabinet hash database, for cases when there are enough records that\n    loading the entire index from a pickle into memory is unwise. (NOTE: that the\n    sequence is not loaded into memory in either case). \n    >>> from pyfasta import FastaRecord # default is NpyFastaRecord\n    >>> f = Fasta('tests/data/three_chrs.fasta', record_class=FastaRecord)\n    >>> f['chr1']\n    FastaRecord('tests/data/three_chrs.fasta.flat', 0..80) \nit's possible to create your own using a sub-class of FastaRecord. see the source \nin pyfasta/records.py for details.\n \n"
      },
      "source": "https://raw.githubusercontent.com/brentp/pyfasta/master/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9529317927768788,
      "result": {
        "original_header": "Flattening",
        "type": "Text_excerpt",
        "value": "In order to efficiently access the sequence content, pyfasta saves a separate, flattened file with all newlines and headers removed from the sequence. In the case of large fasta files, one may not wish to save 2 copies of a 5GG+ file. In that case, it's possible to flatten the file \"inplace\", keeping all the headers, and retaining the validity of the fasta file -- with the only change being that the new-lines are removed from each sequence. This can be specified via `flatten_inplace` = True\n::\n    \n    >>> import os\n    >>> os.unlink('tests/data/three_chrs.fasta.gdx') # cleanup non-inplace idx\n    >>> f = Fasta('tests/data/three_chrs.fasta', flatten_inplace=True)\n    >>> f['chr1']  # note the difference in the output from above.\n    NpyFastaRecord(6..86) \n    # the flattened file is kept as a place holder without the sequence data.\n    >>> open('tests/data/three_chrs.fasta.flat').read()\n    '@flattened@' \n"
      },
      "source": "https://raw.githubusercontent.com/brentp/pyfasta/master/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8577557735117702,
      "result": {
        "original_header": "Command Line Interface",
        "type": "Text_excerpt",
        "value": "2 new fasta files with the sequence split into 10K-mers with 2K overlap: \n**extract** sequence from a fasta file with complex keys where we only want to lookup based on the part before the space. \n"
      },
      "source": "https://raw.githubusercontent.com/brentp/pyfasta/master/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8519196485274689,
      "result": {
        "original_header": "Testing",
        "type": "Text_excerpt",
        "value": "there is currently > 99% test coverage for the 2 modules and all included \nrecord classes. to run the tests:\n:: \n"
      },
      "source": "https://raw.githubusercontent.com/brentp/pyfasta/master/README.rst",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/brentp/pyfasta/wiki"
      },
      "source": "https://raw.githubusercontent.com/brentp/pyfasta/master/README.rst",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/brentp/pyfasta/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 26
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/brentp/pyfasta/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "brentp/pyfasta"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Implementation"
      },
      "source": "https://raw.githubusercontent.com/brentp/pyfasta/master/README.rst",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/brentp/pyfasta/master/tests.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/brentp/pyfasta/master/upload.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 0.9650196802018794,
      "result": {
        "original_header": "Command Line Interface",
        "type": "Text_excerpt",
        "value": "there's also a command line interface to manipulate / view fasta files.\nthe `pyfasta` executable is installed via setuptools, running it will show\nhelp text. \n"
      },
      "source": "https://raw.githubusercontent.com/brentp/pyfasta/master/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9931060934631074,
      "result": {
        "original_header": "Testing",
        "type": "Text_excerpt",
        "value": "  $ python setup.py nosetests\n \n"
      },
      "source": "https://raw.githubusercontent.com/brentp/pyfasta/master/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9928072675642301,
      "result": {
        "type": "Text_excerpt",
        "value": "**NOTE** : unless you have specific reason to use pyfasta, I suggest to use `pyfaidx `_  \n"
      },
      "source": "https://raw.githubusercontent.com/brentp/pyfasta/master/README.rst",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.9225686820127813,
      "result": {
        "original_header": "Numpy",
        "type": "Text_excerpt",
        "value": "    >>> import numpy as np\n    >>> a = np.array(f['chr2'])\n    >>> a.shape[0] == len(f['chr2'])\n    True \n"
      },
      "source": "https://raw.githubusercontent.com/brentp/pyfasta/master/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8376629789730073,
      "result": {
        "original_header": "Backends (Record class)",
        "type": "Text_excerpt",
        "value": "    >>> from pyfasta import FastaRecord # default is NpyFastaRecord\n    >>> f = Fasta('tests/data/three_chrs.fasta', record_class=FastaRecord)\n    >>> f['chr1']\n    FastaRecord('tests/data/three_chrs.fasta.flat', 0..80) \n"
      },
      "source": "https://raw.githubusercontent.com/brentp/pyfasta/master/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8519177069821395,
      "result": {
        "original_header": "Command Line Interface",
        "type": "Text_excerpt",
        "value": "  $ pyfasta **info** --gc test/data/three_chrs.fasta \n  $ pyfasta **extract** --header --fasta test/data/three_chrs.fasta seqa seqb seqc \n**extract** sequence from a file using a file containing the headers *not* wanted in the new file: \n  $ pyfasta extract --header --fasta input.fasta --exclude --file seqids_to_exclude.txt \n"
      },
      "source": "https://raw.githubusercontent.com/brentp/pyfasta/master/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8471007599817788,
      "result": {
        "original_header": "Testing",
        "type": "Text_excerpt",
        "value": "  $ python setup.py nosetests\n \n"
      },
      "source": "https://raw.githubusercontent.com/brentp/pyfasta/master/README.rst",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/brentp/pyfasta/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "pyfasta"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "brentp"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 49123,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 1643,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/brentp/pyfasta/master/README.rst"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-11-04 06:41:48",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 86
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "type": "Text_excerpt",
        "value": "::\n  \n    >>> from pyfasta import Fasta\n\n    >>> f = Fasta('tests/data/three_chrs.fasta')\n    >>> sorted(f.keys())\n    ['chr1', 'chr2', 'chr3']\n\n    >>> f['chr1']\n    NpyFastaRecord(0..80)\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/brentp/pyfasta/master/README.rst",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Slicing",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "::\n\n    # get full the sequence:\n    >>> a = str(f['chr1'])\n    >>> b = f['chr1'][:]\n    >>> a == b\n    True\n\n    >>> f['chr1'][:10]\n    'ACTGACTGAC'\n\n    # get the 1st basepair in every codon (it's python yo)\n    >>> f['chr1'][::3]\n    'AGTCAGTCAGTCAGTCAGTCAGTCAGT'\n\n    # can query by a 'feature' dictionary (note this is one based coordinates)\n    >>> f.sequence({'chr': 'chr1', 'start': 2, 'stop': 9})\n    'CTGACTGA'\n\n    # same as:\n    >>> f['chr1'][1:9]\n    'CTGACTGA'\n\n    # use python, zero based coords\n    >>> f.sequence({'chr': 'chr1', 'start': 2, 'stop': 9}, one_based=False)\n    'TGACTGA'\n\n    # with reverse complement (automatic for - strand)\n    >>> f.sequence({'chr': 'chr1', 'start': 2, 'stop': 9, 'strand': '-'})\n    'TCAGTCAG'\n"
      },
      "source": "https://raw.githubusercontent.com/brentp/pyfasta/master/README.rst",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Key Function",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Sometimes your fasta will have a long header like: \"AT1G51370.2 | Symbols:  | F-box family protein | chr1:19045615-19046748 FORWARD\" when you only want to key off: \"AT1G51370.2\". In this case, specify the key_fn argument to the constructor:\n\n::\n\n    >>> fkey = Fasta('tests/data/key.fasta', key_fn=lambda key: key.split()[0])\n    >>> sorted(fkey.keys())\n    ['a', 'b', 'c']\n"
      },
      "source": "https://raw.githubusercontent.com/brentp/pyfasta/master/README.rst",
      "technique": "header_analysis"
    }
  ]
}