{
  "application_domain": [
    {
      "confidence": 50.43,
      "result": {
        "type": "String",
        "value": "Natural Language Processing"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Cite",
        "type": "Text_excerpt",
        "value": "Please cite our papers, code, and dataset if you use them in your work.\n\n[deepSimDEF](https://academic.oup.com/bioinformatics/advance-article/doi/10.1093/bioinformatics/btac304/6583182) paper, and aforementioned code, and dataset:\n```\n@article{pesaranghader2022deepsimdef,\n  title = {deepSimDEF: deep neural embeddings of gene products and Gene Ontology terms for functional analysis of genes},\n  author = {Pesaranghader, Ahmad and Matwin, Stan and Sokolova, Marina and Grenier, Jean-Christophe and Beiko, Robert G and Hussin, Julie},\n  journal = {Bioinformatics},\n  year = {2022},\n  publisher={Oxford University Press}\n}\n```\n\n[simDEF](https://academic.oup.com/bioinformatics/article/32/9/1380/1743954) paper:\n```\n@article{pesaranghader2016simdef,\n  title={simDEF: definition-based semantic similarity measure of gene ontology terms for functional similarity analysis of genes},\n  author={Pesaranghader, Ahmad and Matwin, Stan and Sokolova, Marina and Beiko, Robert G},\n  journal={Bioinformatics}, volume={32}, number={9},\n  pages={1380--1387}, year={2016}, publisher={Oxford University Press}\n}\n```\n<sub>Ahmad Pesaranghader \u00a9 2022</sub>\n"
      },
      "source": "https://raw.githubusercontent.com/ahmadpgh/deepSimDEF/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Pesaranghader, Ahmad and Matwin, Stan and Sokolova, Marina and Grenier, Jean-Christophe and Beiko, Robert G and Hussin, Julie",
        "format": "bibtex",
        "title": "deepSimDEF: deep neural embeddings of gene products and Gene Ontology terms for functional analysis of genes",
        "type": "Text_excerpt",
        "value": "@article{pesaranghader2022deepsimdef,\n    publisher = {Oxford University Press},\n    year = {2022},\n    journal = {Bioinformatics},\n    author = {Pesaranghader, Ahmad and Matwin, Stan and Sokolova, Marina and Grenier, Jean-Christophe and Beiko, Robert G and Hussin, Julie},\n    title = {deepSimDEF: deep neural embeddings of gene products and Gene Ontology terms for functional analysis of genes},\n}"
      },
      "source": "https://raw.githubusercontent.com/ahmadpgh/deepSimDEF/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Pesaranghader, Ahmad and Matwin, Stan and Sokolova, Marina and Beiko, Robert G",
        "format": "bibtex",
        "title": "simDEF: definition-based semantic similarity measure of gene ontology terms for functional similarity analysis of genes",
        "type": "Text_excerpt",
        "value": "@article{pesaranghader2016simdef,\n    publisher = {Oxford University Press},\n    year = {2016},\n    pages = {1380--1387},\n    number = {9},\n    volume = {32},\n    journal = {Bioinformatics},\n    author = {Pesaranghader, Ahmad and Matwin, Stan and Sokolova, Marina and Beiko, Robert G},\n    title = {simDEF: definition-based semantic similarity measure of gene ontology terms for functional similarity analysis of genes},\n}"
      },
      "source": "https://raw.githubusercontent.com/ahmadpgh/deepSimDEF/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ahmadpgh/deepSimDEF"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2017-10-02T14:13:07Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-11-16T03:16:01Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "deepSimDEF offers single- and multi-channel deep learning models for functional analysis of genes using Gene Ontology annotations of gene products (RNAs, proteins, etc)."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9987661091292123,
      "result": {
        "original_header": "Motivation",
        "type": "Text_excerpt",
        "value": "The [Gene Ontology](http://www.geneontology.org/) ([GO](http://www.geneontology.org/)) is the _de facto_ standard for the functional description of gene products, providing a consistent, information-rich terminology applicable across species and information repositories. Due to the fast increase of biomedical data annotated by GO vocabulary, an intelligent method for functional similarities of genes based on their GO annotations is of the greatest importance. This similarity measurement is highly critical since compared with sequence and structure similarity, the functional similarity is more informative for the understanding of the biological roles and cellular functions of genes. Many important applications in computational molecular biology such as gene clustering, protein function prediction, protein interaction evaluation and disease gene prioritization require functional similarity. Also, to expedite the selection of candidate genes for gene-disease research, genetic association studies, biomarker, and drug target selection, biomedical search engines can retrieve genes based on their functions from proteome databases.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ahmadpgh/deepSimDEF/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9143094125474422,
      "result": {
        "original_header": "Contribution",
        "type": "Text_excerpt",
        "value": "In this project, by relying on the expressive power of deep neural networks, we introduce and develop deepSimDEF, an efficient method for measuring functional similarity of proteins and other gene products (e.g. microRNA and mRNA) using - natural language definitions of - GO terms annotating those genes. For this purpose, deepSimDEF neural network(s) (single-channel, and multi-channel depicted in Fig. 1) learn low-dimensional vectors of GO terms and gene products and then learn how to calculate the functional similarity of protein pairs using these learned vectors (aka embeddings). Relative to existing similarity measures, validation of deepSimDEF on yeast and human reference datasets yielded increases in [protein-protein interactions (PPIs)](https://en.wikipedia.org/wiki/Protein%E2%80%93protein_interaction) predictability by >4.5% and ~5%, respectively; a correlation improvement of ~9% and ~6% with yeast and human [gene co-expression](https://en.wikipedia.org/wiki/Gene_expression) values; and improved correlation with [sequence homology](https://en.wikipedia.org/wiki/Sequence_homology) by up to 6% for both organisms studied. \nFor a picturial view of a single-channel deepSimDEF see: [deepSimDEF_single_channel_BP](https://github.com/ahmadpgh/deepSimDEF/blob/master/imgs/deepSimDEF_single_channel_BP.jpg) \n"
      },
      "source": "https://raw.githubusercontent.com/ahmadpgh/deepSimDEF/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8998615382748523,
      "result": {
        "original_header": "Datasets for deepSimDEF Evaluation",
        "type": "Text_excerpt",
        "value": "The table below provides an overview of the prepared datasets for the evaluation tasks in the study (for more details refer to the paper).  \n\n<div align=\"center\">\n<table>\n  <tr>\n   <td>\n   </td>\n   <td colspan=\"2\" ><strong><sub>Yeast Dataset</sub></strong>\n   </td>\n   <td colspan=\"2\" ><strong><sub>Human Dataset</sub></strong>\n   </td>\n   <td rowspan=\"2\" colspan=\"2\" ><strong><sub>Task</sub></strong>\n   </td>\n  </tr>\n  <tr>\n   <td>\n   </td>\n   <td><sub>Number of\n<p>\ngene pairs</sub>\n   </td>\n   <td><sub>Number of\n<p>\ngenes</sub>\n   </td>\n   <td><sub>Number of\n<p>\ngene pairs</sub>\n   </td>\n   <td><sub>Number of\n<p>\ngenes</sub>\n   </td>\n  </tr>\n  <tr>\n   <td><strong><sub>Protein-Protein Interaction</sub></strong>\n   </td>\n   <td><sub>50,154</sub>\n   </td>\n   <td><sub>4,591</sub>\n   </td>\n   <td><sub>65,542</sub>\n   </td>\n   <td><sub>14,096</sub>\n   </td>\n   <td colspan=\"2\" ><sub>Classification of protein interactions</sub>\n   </td>\n  </tr>\n  <tr>\n   <td><strong><sub>Sequence Homology</sub></strong>\n   </td>\n   <td><sub>26,757</sub>\n   </td>\n   <td><sub>3,972</sub>\n   </td>\n   <td><sub>381,379</sub>\n   </td>\n   <td><sub>13,626</sub>\n   </td>\n   <td colspan=\"2\" ><sub>Prediction of sequence similarity score</sub>\n   </td>\n  </tr>\n  <tr>\n   <td><strong><sub>Gene Expresion</sub></strong>\n   </td>\n   <td><sub>37,405</sub>\n   </td>\n   <td><sub>2,239</sub>\n   </td>\n   <td><sub>62,470</sub>\n   </td>\n   <td><sub>2,361</sub>\n   </td>\n   <td colspan=\"2\" ><sub>Prediction of co-expression value</sub>\n   </td>\n  </tr>\n</table>\n</div> \n"
      },
      "source": "https://raw.githubusercontent.com/ahmadpgh/deepSimDEF/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8962468764062226,
      "result": {
        "original_header": "Code Instruction",
        "type": "Text_excerpt",
        "value": "The deepSimDEF networks were natively implemented and tested using deep learning API [tensorflow](https://www.tensorflow.org/) 2.4.0. Even though manual installation of python packages is an option, for ease of use and also to avoid any platform misconfiguration and package incompatibility we recommend you have [Anaconda](https://www.anaconda.com/products/individual) downloaded and installed and then create a conda virtual environment with the `environment.yml` provided with the project using the command:\n```\nconda env create -f environment.yml\n```\nThe first line of the yml file sets the new environment's name. <br> \nTo activate the environment with the current name use:\n```\nconda activate deepSimDEF_env\n```\nYou should be able to run the project code from this point forward. Also, for further familiarity with conda commands, please refer to [managing environments page](https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html).\n \n"
      },
      "source": "https://raw.githubusercontent.com/ahmadpgh/deepSimDEF/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9711241236414009,
      "result": {
        "original_header": "Datasets",
        "type": "Text_excerpt",
        "value": "The datasets prepared and used in the experiments of the study (see table above) are provided in the `data` folder of the project under `data/species/[human|yeast]/` subdirectories. Since these datasets are generated based on the latest available resources at the time (e.g., annotations of genes from Gene Ontology, or PPI interactions from [STRING database](https://string-db.org/cgi/download?sessionId=bScolWa04rvN), etc) three jupyter notebooks which were responsible to create these datasets from the available data resources are shared in the `data` directory as well. For the generation of the same or more recent version of the datasets, follow the instruction provided in the jupyter notebooks. Typically the latest releases of the data resources would be downloaded by default unless otherwise is indicated or set by the user. The three jupyter notebooks, namely are:\n* `protein_protein_interaction_data_prepration.ipynb`\n* `sequence_homology_data_prepration.ipynb`\n* `gene_expression_data_prepration.ipynb` \nNotice: Since the gene expression dataset is built from the protected [GTEx database](https://gtexportal.org/home/) with restricted access, the generated data is password protected in its directory. Please contact us to see if we can help you with granting access.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ahmadpgh/deepSimDEF/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9771263447604233,
      "result": {
        "original_header": "Gene Ontology Term Embedding",
        "type": "Text_excerpt",
        "value": "Ideally, the first layer of a deepSimDEF network gets initialized by pre-trained GO-term embeddings while they get fine-tuned during training. This scheme facilitates network optimization and improves model accuracy. The precomputed GO-term embeddings based on Fig. 2 are provided in `data/gene_ontology/definition_embedding/[50|100|150|200|300]_dimensional` directory (GO release version: 2021-07-02). Regarding deepSimDEF networks and our experiments GO-term embedding size of 100 yielded the best results (see the paper). \n<br>\n<p align=\"center\">\n<img src=\"imgs/deepSimDEF_GO_term_embedding.jpg\" width=\"650\"> <br>\n<br>\n<b>Figure 2</b>: deepSimDEF definition-based GO-term embedding approach.\n</p>\nSince Gene Ontology gets constantly updated by having new terms added and a few old ones marked as obsolete (if needed), the jupyter notebook <code>gene_ontology_term_embedding.ipynb</code> allows you to create GO-term embeddings of the latest release of GO in the future (follow the instruction in the jupyter notebook and make certain you have enough physical memory). In case not enough resources are available, for the new GO term, the avarage of all the current GO-terms embeddings (or their immediate neighbor GO-terms embeddings) could also represent the embeddings and most probabely help with your application. Additionally, the jupyter networks <code>embeddings_similarity_evaluation.ipynb</code> allows to evaluate the quality of the generated embeddings based on their \"semantic\" similarity.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ahmadpgh/deepSimDEF/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9958660477015558,
      "result": {
        "original_header": "Gene-GO term Associations",
        "type": "Text_excerpt",
        "value": "The Gene Ontology Consortium stores annotation data, the representation of gene product attributes using GO terms, in [standardized tab-delimited text files named GAF files](http://current.geneontology.org/products/pages/downloads.html). Each line in the file represents a single association between a gene product and a GO term, with an evidence code and the reference to support the link. These annotations from the latest GAF files for Yeast and Human are processed and the results annotations for the genes of interest are saved in `data/species/[human|yeast]/association_file/processed/` directories (IEA+ and IEA-). Additionally, the jupyter notebook of this process is included in the `data` directory for future use; it is named: `gene_association_and_annotations_preprocessing.ipynb`.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ahmadpgh/deepSimDEF/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8959698796033516,
      "result": {
        "original_header": "deepSimDEF Model and Networks",
        "type": "Text_excerpt",
        "value": "We recommend running these scripts on GPUs with a command similar to:\n```\nCUDA_VISIBLE_DEVICES=gpu-number python deepSimDEF_for_protein_protein_interaction.py arguments\n```\nA sample of such run for human species and BP sub-ontology (hence single-channel deepSimDEF) would be:\nBASH2*\n \nAll these scripts make use of the deepSimDEF network implementation provided in `networks.py` script. We strictly advise you to read the description of the arguments in these main files as they provide ample information regarding how to set a run of your interest properly. Briefly, though, these scripts\u00a0could be run on one of the three `--deepsimdef_mode`: `training` (default), `evaluation`, or `production`.\n* In **training mode**, as the name suggests, the model(s) would be trained and evaluated on the fly (number of models would be equal to the number of training folds). During this process, the statistical results would be logged and the network(s) would be checkpointed according to the provided setting in the arguments. For training and evaluation, by default, the model(s) use data provided with this project unless you provide another set of data with `--inpute_file` (ideally prepared by the preparation `.ipynb` files).\n* In **evaluation mode**, after providing checkpointed model(s), the statistical results of interests for the test split(s) would be printed out (should obtain\u00a0similar results from the same epoch in the training mode). These statistical results are F1-score for the PPI experiment, and Pearson's and Spearman's correlation values for the sequence homology and gene expression experiments.\n* In **production mode**, after providing a checkpointed model (typically \"trained\" on all existing data by setting `--nb_fold 1`) as well as a file of (typically new) gene-product pairs, the estimated scores of them would be saved or printed out. For this purpose, in the `--production_input_file` each gene-product pair should be shown on one line while gene names are separated by a tab or space). NOTICE: In this mode, if a gene in the gene pair is not present in the given processed association files or it has GO annotations not seen before during training, their pairs would be eliminated in the output. To deal with this matter, before training a model, you need to make sure the association files are up-to-date, and also relax our restriction in the study (i.e., modify the main `.py` and data and association `.ipynb` files as we consider only genes that are annotated by all three GO sub-ontologies). \nDepending also on the GO sub-ontology of your choice using the argument `--sub_ontology`, if you provide `bp`, `cc`, or `mf`, automatically single-channel deepSimDEF would be set. However, if `--sub_ontology all` (default) multi-channel deepSimDEF would be triggered. These types of settings should be consistent across the deepSimDEF modes described above.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ahmadpgh/deepSimDEF/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ahmadpgh/deepSimDEF/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ahmadpgh/deepSimDEF/master/data/gene_association_and_annotations_preprocessing.ipynb"
      },
      "source": "https://raw.githubusercontent.com/ahmadpgh/deepSimDEF/master/data/gene_association_and_annotations_preprocessing.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ahmadpgh/deepSimDEF/master/data/embeddings_similarity_evaluation.ipynb"
      },
      "source": "https://raw.githubusercontent.com/ahmadpgh/deepSimDEF/master/data/embeddings_similarity_evaluation.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ahmadpgh/deepSimDEF/master/data/sequence_homology_data_prepration.ipynb"
      },
      "source": "https://raw.githubusercontent.com/ahmadpgh/deepSimDEF/master/data/sequence_homology_data_prepration.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ahmadpgh/deepSimDEF/master/data/protein_protein_interaction_data_prepration.ipynb"
      },
      "source": "https://raw.githubusercontent.com/ahmadpgh/deepSimDEF/master/data/protein_protein_interaction_data_prepration.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ahmadpgh/deepSimDEF/master/data/gene_ontology_term_embedding.ipynb"
      },
      "source": "https://raw.githubusercontent.com/ahmadpgh/deepSimDEF/master/data/gene_ontology_term_embedding.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ahmadpgh/deepSimDEF/master/data/gene_expression_data_prepration.ipynb"
      },
      "source": "https://raw.githubusercontent.com/ahmadpgh/deepSimDEF/master/data/gene_expression_data_prepration.ipynb",
      "technique": "file_exploration"
    }
  ],
  "faq": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Problem",
        "parent_header": [
          "deepSimDEF: deep neural embeddings of gene products and Gene Ontology terms for functional analysis of genes"
        ],
        "type": "Text_excerpt",
        "value": "Existing GO-based gene functional similarity measures combine semantic similarity scores of single GO-term pairs to estimate genes' functional similarity. However, these measures are strictly dependent on the ever-changing topological structure of GO; they are very slow and task-dependent leaving no room for generalization. Our previous model, [simDEF](https://academic.oup.com/bioinformatics/article/32/9/1380/1743954), avoided these drawbacks by taking into account the significant advantage of distributed (vector-based) representation of GO terms using their textual definitions. simDEF, however, suffers from some unaddressed yet important shortcomings, many of which are still shared with the previous models. Manual feature engineering, relatively large dimensions of distributed GO-term vectors, the use of traditional metrics to aggregate GO-term similarity scores prior to computation of genes functional similarity, and, resorting to separate evaluation of each sub-ontology in GO ([_biological process_ or _BP_](http://geneontology.org/page/biological-process-ontology-guidelines), [_cellular component_ or _CC_](http://geneontology.org/page/cellular-component-ontology-guidelines), or [_molecular function_ or _MF_](http://geneontology.org/page/molecular-function-ontology-guidelines)) in a biological task, are some of these inadequacies.\n"
      },
      "source": "https://raw.githubusercontent.com/ahmadpgh/deepSimDEF/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ahmadpgh/deepSimDEF/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ahmadpgh/deepSimDEF"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/ahmadpgh/deepSimDEF/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ahmadpgh/deepSimDEF/master/imgs/deepSimDEF_multi_channel_network.jpg"
      },
      "source": "https://raw.githubusercontent.com/ahmadpgh/deepSimDEF/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ahmadpgh/deepSimDEF/master/imgs/deepSimDEF_GO_term_embedding.jpg"
      },
      "source": "https://raw.githubusercontent.com/ahmadpgh/deepSimDEF/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9999998300235124,
      "result": {
        "original_header": "Code Instruction",
        "type": "Text_excerpt",
        "value": "The deepSimDEF networks were natively implemented and tested using deep learning API [tensorflow](https://www.tensorflow.org/) 2.4.0. Even though manual installation of python packages is an option, for ease of use and also to avoid any platform misconfiguration and package incompatibility we recommend you have [Anaconda](https://www.anaconda.com/products/individual) downloaded and installed and then create a conda virtual environment with the `environment.yml` provided with the project using the command:\n```\nconda env create -f environment.yml\n```\nThe first line of the yml file sets the new environment's name. <br> \nTo activate the environment with the current name use:\n```\nconda activate deepSimDEF_env\n```\nYou should be able to run the project code from this point forward. Also, for further familiarity with conda commands, please refer to [managing environments page](https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html).\n \n"
      },
      "source": "https://raw.githubusercontent.com/ahmadpgh/deepSimDEF/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9406768382933836,
      "result": {
        "original_header": "deepSimDEF Model and Networks",
        "type": "Text_excerpt",
        "value": "We recommend running these scripts on GPUs with a command similar to:\n```\nCUDA_VISIBLE_DEVICES=gpu-number python deepSimDEF_for_protein_protein_interaction.py arguments\n```\nA sample of such run for human species and BP sub-ontology (hence single-channel deepSimDEF) would be:\nBASH2*\n \nDepending also on the GO sub-ontology of your choice using the argument `--sub_ontology`, if you provide `bp`, `cc`, or `mf`, automatically single-channel deepSimDEF would be set. However, if `--sub_ontology all` (default) multi-channel deepSimDEF would be triggered. These types of settings should be consistent across the deepSimDEF modes described above.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ahmadpgh/deepSimDEF/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8182802227161184,
      "result": {
        "original_header": "deepSimDEF Model and Networks",
        "type": "Text_excerpt",
        "value": "With respect to the three experiments described above three different main python scripts are provided:\n* `deepSimDEF_for_protein_protein_interaction.py`\n* `deepSimDEF_for_sequence_homology.py`\n* `deepSimDEF_for_gene_expression.py` \n"
      },
      "source": "https://raw.githubusercontent.com/ahmadpgh/deepSimDEF/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ahmadpgh/deepSimDEF/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ahmadpgh/deepSimDEF/master/imgs/dna_logo.png"
      },
      "source": "https://raw.githubusercontent.com/ahmadpgh/deepSimDEF/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "deepSimDEF"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "ahmadpgh"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 2307487,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 132336,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 113584,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ahmadpgh/deepSimDEF/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-05 23:38:45",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 12
      },
      "technique": "GitHub_API"
    }
  ]
}