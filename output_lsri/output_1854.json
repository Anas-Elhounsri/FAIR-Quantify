{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/parklab/xTea"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-07-12T14:26:48Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-27T08:55:17Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Comprehensive TE insertion identification with WGS/WES data from multiple sequencing technics"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.989144761496289,
      "result": {
        "original_header": "xTea",
        "type": "Text_excerpt",
        "value": "xTea (comprehensive transposable element analyzer) is designed to identify TE insertions from paired-end Illumina reads, barcode linked-reads, long reads (PacBio or Nanopore), or hybrid data from different sequencing platforms and takes whole-exome sequencing (WES) or whole-genome sequencing (WGS) data as input.  \n"
      },
      "source": "https://raw.githubusercontent.com/parklab/xTea/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Download",
        "type": "Text_excerpt",
        "value": "1. short reads (Illumina and Linked-Reads)\n\n\t+ 1.1 latest version\n\n\t```\n\tgit clone https://github.com/parklab/xTea.git\n\t```\n\n\t+ 1.2 cloud binary version\n\n\t```\n\tgit clone --single-branch --branch release_xTea_cloud_1.0.0-beta  https://github.com/parklab/xTea.git\n\t```\n\n2. long reads (PacBio or Nanopore)\n\n\t```\n\tgit clone --single-branch --branch xTea_long_release_v0.1.0 https://github.com/parklab/xTea.git\n\t```\n3. pre-processed repeat library used by xTea (this library is used for both short and long reads)  \n\t\n\t```\n\twget https://github.com/parklab/xTea/raw/master/rep_lib_annotation.tar.gz\n\t```\n\t\n4. gene annotation files are downloaded from GENCODE. Decompressed gff3 files are required.\n\t+ For GRCh38 (or hg38), gff3 files are downloaded and decompressed from https://www.gencodegenes.org/human/release_33.html ;\n\t+ For GRCh37 (or hg19), gff3 files are downloaded and decompressed from https://www.gencodegenes.org/human/release_33lift37.html ;\n\t+ For CHM13v2, gff3 files are downloaded from https://s3-us-west-2.amazonaws.com/human-pangenomics/T2T/CHM13/assemblies/annotation/chm13.draft_v2.0.gene_annotation.gff3;\n\t+ Or use the latest version\n"
      },
      "source": "https://raw.githubusercontent.com/parklab/xTea/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/parklab/xTea/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 23
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/parklab/xTea/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "parklab/xTea"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/parklab/xTea/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/parklab/xTea/master/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/parklab/xTea/master/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/parklab/xTea/master/recipes/xtea/build.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/parklab/xTea/master/Demo/run_gnrt_pipeline.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Install",
        "type": "Text_excerpt",
        "value": "+ **Use Conda**\n\n\txtea is a bioconda package, to install first make sure the bioconda channel has been added:\n\t```\n\tconda config --add channels defaults\n\tconda config --add channels bioconda\n\tconda config --add channels conda-forge\n\t```\n\n\tThen, install xtea (while creating a new enviroment):\n\t```\n\tconda create -n your_env xtea=0.1.6\n\t```\n\n\tOr install directly via: `conda install -y xtea=0.1.6`\n\n+ **Install-free**\n\t\n\tIf the dependencies have already been installed, then install-free mode is recommended. One can directly run the downloaded python scripts.\n\n"
      },
      "source": "https://raw.githubusercontent.com/parklab/xTea/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/parklab/xTea/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "illumina, linked-reads, mobile-element-insertion, nanopore, pacbio, transposable-elements"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Academic and Non-Commercial Research Use Software License and Terms of Use\n\nx-Transposable element analyzer (xTea) (the \u201cSoftware,\u201d) is a transposable element insertion identification tool developed for WES/WGS of multiple sequencing platforms.  \nUsing the Software indicates your agreement to be bound by the terms of this Software Use Agreement (\u201cAgreement\u201d). Absent your agreement to the terms below, you (the \u201cEnd User\u201d) have no rights to hold or use the Software whatsoever. \nPresident and Fellows of Harvard College (\u201cHarvard\u201d) agrees to grant hereunder the limited non-exclusive license to End User for the use of the Software in the performance of End User\u2019s internal, non-commercial research and academic use at End User\u2019s academic or not-for-profit research institution (\u201cInstitution\u201d) on the following terms and conditions: \n1.\tNO COMMERCIAL USE. End User shall not use the Software for commercial purposes, including for any internal research purposes for or on behalf of any for-profit entity, and any such use of the Software is expressly prohibited.  This prohibition includes, but is not limited to, use of the Software in fee-for-service arrangements, core facilities or laboratories or to provide research services to (or in collaboration with) third parties for a fee, and in industry-sponsored collaborative research projects where any commercial rights are granted to the sponsor.  If End User wishes to use the Software for commercial purposes or for any other restricted purpose, End User must execute a separate license agreement with Harvard.  \n\nRequests for use of the Software for or on behalf of for-profit entities or for any commercial purposes, please contact: \n\nOffice of Technology Development\nHarvard University\nSmith Campus Center, Suite 727E\n1350 Massachusetts Avenue\nCambridge, MA 02138 USA\nTelephone: (617) 495-3067\nE-mail: otd@harvard.edu\n\n2.\tOWNERSHIP AND COPYRIGHT NOTICE. Harvard owns all intellectual property in the Software. End User shall gain no ownership to the Software. End User shall not remove or delete and shall retain in the Software, in any modifications to Software and in any Derivative Works, the copyright, trademark, or other notices pertaining to Software as provided with the Software.\n\n3.\tDERIVATIVE WORKS. End User may create and use Derivative Works, as such term is defined under U.S. copyright laws, provided that any such Derivative Works shall be restricted to non-commercial, internal research and academic use at End User\u2019s Institution.  End User shall not distribute Derivative Works to any third party without the express written consent of Harvard.\n\n4.\tFEEDBACK. In order to improve the Software, comments from End Users may be useful. End User agrees to provide Harvard with feedback on the End User\u2019s use of the Software (e.g., any bugs in the Software, the user experience, etc.).  Harvard is permitted to use such information provided by End User in making changes and improvements to the Software without compensation or an accounting to End User. \n\n5.\tNON ASSERT. End User acknowledges that Harvard may develop modifications to the Software that may be based on the feedback provided by End User under Section 5 above. Harvard shall not be restricted in any way by End User regarding the use of such information.  End User acknowledges the right of Harvard to prepare, publish, display, reproduce, transmit and or use modifications to the Software that may be substantially similar or functionally equivalent to End User\u2019s modifications and/or improvements if any.  In the event that End User obtains patent protection for any modification or improvement to Software, End User agrees not to allege or enjoin infringement of End User\u2019s patent against Harvard or any of its researchers, medical or research staff, officers, directors and employees.\n\n6.\tPUBLICATION & ATTRIBUTION. End User has the right to publish, present, or share results from the use of the Software.  In accordance with customary academic practice, End User will acknowledge Harvard as the provider of the Software and may cite the relevant reference(s) from the following list of publications: \n\nComprehensive identification of transposable element insertions using multiple sequencing technologies\nChong Chu, Rebeca Borges Monroy, Vinay Viswanadham, Soohyun Lee, Heng Li, Eunjung Alice Lee & Peter J. Park \nUnder review\n\n7.\tNO WARRANTIES. THE SOFTWARE IS PROVIDED \"AS IS.\" TO THE FULLEST EXTENT PERMITTED BY LAW, HARVARD HEREBY DISCLAIMS ALL WARRANTIES OF ANY KIND (EXPRESS, IMPLIED OR OTHERWISE) REGARDING THE SOFTWARE, INCLUDING BUT NOT LIMITED TO ANY IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OWNERSHIP, AND NON-INFRINGEMENT.  HARVARD MAKES NO WARRANTY ABOUT THE ACCURACY, RELIABILITY, COMPLETENESS, TIMELINESS, SUFFICIENCY OR QUALITY OF THE SOFTWARE.  HARVARD DOES NOT WARRANT THAT THE SOFTWARE WILL OPERATE WITHOUT ERROR OR INTERRUPTION.\n\n8.\tLIMITATIONS OF LIABILITY AND REMEDIES. USE OF THE SOFTWARE IS AT END USER\u2019S OWN RISK. IF END USER IS DISSATISFIED WITH THE SOFTWARE, ITS EXCLUSIVE REMEDY IS TO STOP USING IT.  IN NO EVENT SHALL HARVARD BE LIABLE TO END USER OR ITS INSTITUTION, IN CONTRACT, TORT OR OTHERWISE, FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL, CONSEQUENTIAL, PUNITIVE OR OTHER DAMAGES OF ANY KIND WHATSOEVER ARISING OUT OF OR IN CONNECTION WITH THE SOFTWARE, EVEN IF HARVARD IS NEGLIGENT OR OTHERWISE AT FAULT, AND REGARDLESS OF WHETHER HARVARD IS ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n\n9.\tINDEMNIFICATION. To the extent permitted by law, End User shall indemnify, defend and hold harmless Harvard and its current or future directors, trustees, officers, faculty, medical and professional staff, employees, students and agents and their respective successors, heirs and assigns (the \"Indemnitees\"), against any liability, damage, loss or expense (including reasonable attorney's fees and expenses of litigation) incurred by or imposed upon the Indemnitees or any one of them in connection with any claims, suits, actions, demands or judgments arising from End User\u2019s breach of this Agreement or its Institution\u2019s use of the Software except to the extent caused by the gross negligence or willful misconduct of Harvard. This indemnification provision shall survive expiration or termination of this Agreement.\n\n10.\tGOVERNING LAW. This Agreement shall be construed and governed by the laws of the Commonwealth of Massachusetts regardless of otherwise applicable choice of law standards.\n\n11.\tNON-USE OF NAME.  Nothing in this License and Terms of Use shall be construed as granting End Users or their Institutions any rights or licenses to use any trademarks, service marks or logos associated with the Software.  You may not use the terms \u201cHarvard\u201d (or a substantially similar term) in any way that is inconsistent with the permitted uses described herein. You agree not to use any name or emblem of Harvard or any of its subdivisions for any purpose, or to falsely suggest any relationship between End User (or its Institution) and Harvard, or in any manner that would infringe or violate any of Harvard\u2019s rights.\n\n12.\tEnd User represents and warrants that it has the legal authority to enter into this License and Terms of Use on behalf of itself and its Institution.\n"
      },
      "source": "https://raw.githubusercontent.com/parklab/xTea/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/parklab/xTea/master/./xTea_workflow.png"
      },
      "source": "https://raw.githubusercontent.com/parklab/xTea/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "xTea"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "parklab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 1678992,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 2240,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Common Workflow Language",
        "size": 1434,
        "type": "Programming_language",
        "value": "Common Workflow Language"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 127,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/parklab/xTea/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "simoncchu",
          "type": "User"
        },
        "date_created": "2022-06-13T21:37:40Z",
        "date_published": "2022-06-15T18:48:13Z",
        "description": "Release v0.1.9",
        "html_url": "https://github.com/parklab/xTea/releases/tag/v0.1.9",
        "name": "Release v0.1.9",
        "release_id": 69552068,
        "tag": "v0.1.9",
        "tarball_url": "https://api.github.com/repos/parklab/xTea/tarball/v0.1.9",
        "type": "Release",
        "url": "https://api.github.com/repos/parklab/xTea/releases/69552068",
        "value": "https://api.github.com/repos/parklab/xTea/releases/69552068",
        "zipball_url": "https://api.github.com/repos/parklab/xTea/zipball/v0.1.9"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "simoncchu",
          "type": "User"
        },
        "date_created": "2022-06-09T19:01:56Z",
        "date_published": "2022-06-15T18:46:51Z",
        "description": "Release v0.1.8",
        "html_url": "https://github.com/parklab/xTea/releases/tag/v0.1.8",
        "name": "Release v0.1.8",
        "release_id": 69551954,
        "tag": "v0.1.8",
        "tarball_url": "https://api.github.com/repos/parklab/xTea/tarball/v0.1.8",
        "type": "Release",
        "url": "https://api.github.com/repos/parklab/xTea/releases/69551954",
        "value": "https://api.github.com/repos/parklab/xTea/releases/69551954",
        "zipball_url": "https://api.github.com/repos/parklab/xTea/zipball/v0.1.8"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "simoncchu",
          "type": "User"
        },
        "date_created": "2021-04-04T13:33:06Z",
        "date_published": "2021-05-08T16:43:02Z",
        "description": "## Release v0.1.7",
        "html_url": "https://github.com/parklab/xTea/releases/tag/v0.1.7",
        "name": "Release v0.1.7",
        "release_id": 42648655,
        "tag": "v0.1.7",
        "tarball_url": "https://api.github.com/repos/parklab/xTea/tarball/v0.1.7",
        "type": "Release",
        "url": "https://api.github.com/repos/parklab/xTea/releases/42648655",
        "value": "https://api.github.com/repos/parklab/xTea/releases/42648655",
        "zipball_url": "https://api.github.com/repos/parklab/xTea/zipball/v0.1.7"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "simoncchu",
          "type": "User"
        },
        "date_created": "2021-03-21T15:14:39Z",
        "date_published": "2021-03-29T15:30:20Z",
        "description": "# Release v0.1.6",
        "html_url": "https://github.com/parklab/xTea/releases/tag/v0.1.6",
        "name": "Release v0.1.6",
        "release_id": 40642628,
        "tag": "v0.1.6",
        "tarball_url": "https://api.github.com/repos/parklab/xTea/tarball/v0.1.6",
        "type": "Release",
        "url": "https://api.github.com/repos/parklab/xTea/releases/40642628",
        "value": "https://api.github.com/repos/parklab/xTea/releases/40642628",
        "zipball_url": "https://api.github.com/repos/parklab/xTea/zipball/v0.1.6"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "simoncchu",
          "type": "User"
        },
        "date_created": "2021-03-21T15:14:39Z",
        "date_published": "2021-03-27T07:33:53Z",
        "description": "# Release v0.1.5",
        "html_url": "https://github.com/parklab/xTea/releases/tag/v0.1.5",
        "name": "Release v0.1.5",
        "release_id": 40574372,
        "tag": "v0.1.5",
        "tarball_url": "https://api.github.com/repos/parklab/xTea/tarball/v0.1.5",
        "type": "Release",
        "url": "https://api.github.com/repos/parklab/xTea/releases/40574372",
        "value": "https://api.github.com/repos/parklab/xTea/releases/40574372",
        "zipball_url": "https://api.github.com/repos/parklab/xTea/zipball/v0.1.5"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "simoncchu",
          "type": "User"
        },
        "date_created": "2021-03-19T06:15:16Z",
        "date_published": "2021-03-19T06:17:41Z",
        "description": "# Release xTea_v0.1.4",
        "html_url": "https://github.com/parklab/xTea/releases/tag/v0.1.4",
        "name": "Release v0.1.4",
        "release_id": 40046090,
        "tag": "v0.1.4",
        "tarball_url": "https://api.github.com/repos/parklab/xTea/tarball/v0.1.4",
        "type": "Release",
        "url": "https://api.github.com/repos/parklab/xTea/releases/40046090",
        "value": "https://api.github.com/repos/parklab/xTea/releases/40046090",
        "zipball_url": "https://api.github.com/repos/parklab/xTea/zipball/v0.1.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "simoncchu",
          "type": "User"
        },
        "date_created": "2021-01-22T06:42:15Z",
        "date_published": "2021-01-22T06:50:33Z",
        "description": "## Release xTea_v0.1.3",
        "html_url": "https://github.com/parklab/xTea/releases/tag/v0.1.3",
        "name": "Release v0.1.3",
        "release_id": 36752446,
        "tag": "v0.1.3",
        "tarball_url": "https://api.github.com/repos/parklab/xTea/tarball/v0.1.3",
        "type": "Release",
        "url": "https://api.github.com/repos/parklab/xTea/releases/36752446",
        "value": "https://api.github.com/repos/parklab/xTea/releases/36752446",
        "zipball_url": "https://api.github.com/repos/parklab/xTea/zipball/v0.1.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "simoncchu",
          "type": "User"
        },
        "date_created": "2021-01-04T14:34:23Z",
        "date_published": "2021-01-04T14:38:13Z",
        "description": "## Release v0.1.2",
        "html_url": "https://github.com/parklab/xTea/releases/tag/v0.1.2",
        "name": "Release v0.1.2",
        "release_id": 35953278,
        "tag": "v0.1.2",
        "tarball_url": "https://api.github.com/repos/parklab/xTea/tarball/v0.1.2",
        "type": "Release",
        "url": "https://api.github.com/repos/parklab/xTea/releases/35953278",
        "value": "https://api.github.com/repos/parklab/xTea/releases/35953278",
        "zipball_url": "https://api.github.com/repos/parklab/xTea/zipball/v0.1.2"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependencies",
        "type": "Text_excerpt",
        "value": "1. bwa (version **0.7.17** or later, which requires the **-o** option), which can be downloaded from https://github.com/lh3/bwa.\n2. samtools (version 1.0 or later), which can be downloaded from https://github.com/samtools.\n3. minimap2 (for long reads only), which can be downloaded from https://github.com/lh3/minimap2.\n4. wtdbg2 (for long reads only), which can be downloaded from https://github.com/ruanjue/wtdbg2.\n5. Python 2.7+/3.6+\n\t+ For the following packages, only a conda-based installation in shown. You may also install these in other ways, such as pip. \n\t+ pysam (https://github.com/pysam-developers/pysam, version 0.12 or later) is required.\n\t\t+ Install pysam:\n\t\t\t```\n\t\t\tconda config --add channels r\n\t\t\tconda config --add channels bioconda\n\t\t\tconda install pysam -y\n\t\t\t```\n\t+ sortedcontainers\n\t\t+ Install sortedcontainers\n\t\t`conda install sortedcontainers -y`\n\n\t+ numpy, scikit-learn, and pandas\n\t\t+ Install numpy, scikit-learn and pandas\n\t\t`conda install numpy scikit-learn=0.18.1 pandas -y`\n\n\t+ DF21 (this is used to replease scikit-learn, which is complained by several users for version incompatible)\n\t\t+ Install DF21\n\t\t`pip install deep-forest`\n\n6. Note: bwa and samtools need to be added to the $PATH.\n\n"
      },
      "source": "https://raw.githubusercontent.com/parklab/xTea/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Run xTea",
        "type": "Text_excerpt",
        "value": "1. **Input**\n\t+ A sample id file list, e.g. a file named `sample_id.txt` with content as follows (each line represents one unique sample id):\n\t\n\t\t```\n\t\tNA12878\n\t\tNA12877\n\t\t```\n\t\n\t+ A file of listed alignments:\n\n\t\t+ An Illumina bam/cram file (sorted and indexed) list, e.g. a file named `illumina_bam_list.txt` with content as follows (two columns separated by a space or tab: sample-id bam-path):\n\n\t\t\t```\n\t\t\tNA12878 /path/na12878_illumina_1_sorted.bam\n\t\t\tNA12877 /path/na12877_illumina_1_sorted.bam\n\t\t\t```\n\t\t\n\t\t+  A 10X bam/cram file (sorted and indexed, see [BarcodeMate](https://github.com/simoncchu/BarcodeMate) regarding barcode-based indicies) list, e.g. a file named `10X_bam_list.txt` with content as follows (three columns separated by a space or tab: sample-id bam-path barcode-index-bam-path):\n\t\t\n\t\t\t```\n\t\t\tNA12878 /path/na12878_10X_1_sorted.bam /path/na12878_10X_1_barcode_indexed.bam\n\t\t\tNA12877 /path/na12877_10X_1_sorted.bam /path/na12877_10X_1_barcode_indexed.bam\n\t\t\t```\n\t\t\n\t\t+  A case-ctrl bam/cram file list (three columns separated by a space or tab: sample-id case-bam-path ctrl-bam-path\n\t\t\t```\n\t\t\tDO0001 /path/DO001_case_sorted.bam /path/DO001_ctrl_sorted.bam\n\t\t\tDO0002 /path/DO002_case_sorted.bam /path/DO002_ctrl_sorted.bam\n\t\t\t```\n\n\n2. **Run the pipeline from local cluster or machine**\n\t\n\n\t2.1 Generate the running script (if it is install-free, then use the full path of the downloaded `bin/xtea` instead.)\n\t\t\t\n\t+ Run on a cluster or a single node (by default `xtea` assumes the reference genome is **GRCh38** or **hg38**. For `hg19` or `GRCh37`, please use `xtea_hg19`; for `CHM13`, please use `gnrt_pipeline_local_chm13.py`)\n\t\t+ Here, the slurm system is used as an example. If using LSF, replace `--slurm` with `--lsf`. For those using clusters other than slurm or LSF, users must adjust the generated shell script header accordingly. Users also must adjust the number of cores (`-n`) and memory (`-m`) accordingly. In general, each core will require 2-3G memory to run. For very high depth bam files, runtime (denoted by `-t`) may take longer.\n\t\t+ **Note that `--xtea` is a required option that points to the *exact folder* containing python scripts.**\n\n\t\t+ Using only Illumina data\n\t\t\t```\n\t\t\txtea -i sample_id.txt -b illumina_bam_list.txt -x null -p ./path_work_folder/ -o submit_jobs.sh -l /home/rep_lib_annotation/ -r /home/reference/genome.fa -g /home/gene_annotation_file.gff3 --xtea /home/ec2-user/xTea/xtea/ -f 5907 -y 7\u2028 --slurm -t 0-12:00 -q short -n 8 -m 25\n\t\t\t```\n\n\t\t+ Using only 10X data\n\t\t\t```\n\t\t\txtea -i sample_id.txt -b null -x 10X_bam_list.txt -p ./path_work_folder/ -o submit_jobs.sh -l /home/ec2-user/rep_lib_annotation/ -r /home/ec2-user/reference/genome.fa -g /home/gene_annotation_file.gff3 --xtea /home/ec2-user/xTea/xtea/ -y 7 -f 5907 --slurm -t 0-12:00 -q short -n 8 -m 25\t\t\n\t\t\t```\n\t\t\n\t\t+ Using hybrid data of 10X and Illumina \n\t\t\t```\n\t\t\txtea -i sample_id.txt -b illumina_bam_list.txt -x 10X_bam_list.txt -p ./path_work_folder/ -o submit_jobs.sh -l /home/ec2-user/rep_lib_annotation/ -r /home/ec2-user/reference/genome.fa -g /home/gene_annotation_file.gff3 --xtea /home/ec2-user/xTea/xtea/ -y 7 -f 5907 --slurm -t 0-12:00 -q short -n 8 -m 25\n\t\t\t```\n\t\t+ Using case-ctrl mode\n\t\t\t```\n\t\t\txtea --case_ctrl --tumor -i sample_id.txt -b case_ctrl_bam_list.txt -p ./path_work_folder/ -o submit_jobs.sh -l /home/ec2-user/rep_lib_annotation/ -r /home/ec2-user/reference/genome.fa -g /home/gene_annotation_file.gff3 --xtea /home/ec2-user/xTea/xtea/ -y 7 -f 5907 --slurm -t 0-12:00 -q short -n 8 -m 25\n\t\t\t```\n\t\t+ Working with long reads (non case-ctrl; more detailed steps please check the \"xTea_long_release_v0.1.0\" branch)\n\t\t\t```\n\t\t\txtea_long -i sample_id.txt -b long_read_bam_list.txt -p ./path_work_folder/ -o submit_jobs.sh --rmsk ./rep_lib_annotation/LINE/hg38/hg38_L1_larger_500_with_all_L1HS.out -r /home/ec2-user/reference/genome.fa --cns ./rep_lib_annotation/consensus/LINE1.fa --rep /home/ec2-user/rep_lib_annotation/ --xtea /home/ec2-user/xTea_long/xtea_long/ -f 31 -y 15 -n 8 -m 32 --slurm -q long -t 2-0:0:0\n\t\t\t```\n\n\t\t+ Parameters:\n\t\t\t\n\t\t\t```\n\t\t\tRequired:\n\t\t\t\t-i: samples id list (one sample id per line);\n\t\t\t\t-b: Illumina bam/cram file list (sorted and indexed \u2014 one file per line);\n\t\t\t\t-x: 10X bam file list (sorted and indexed \u2014 one file per line);\n\t\t\t\t-p: working directory, where the results and temporary files will be saved;\n\t\t\t\t-l: repeat library directory (directory which contains decompressed files from \"rep_lib_annotation.tar.gz\");\n\t\t\t\t-r: reference genome fasta/fa file;\n\t\t\t\t-y: type of repeats to process (1-L1, 2-Alu, 4-SVA, 8-HERV; sum the number corresponding to the repeat type to process multiple repeats. \n\t\t\t\t    For example, to run L1 and SVA only, use `-y 5`. \n\t\t\t\t    Each repeat type will be processed separately, however some of the early processing steps are common to multiple repeat types.\n\t\t\t\t    Thus, when analyzing a large cohort, to improve the efficiency (and save money on the cloud), \n\t\t\t\t    it is highly recommended to run the tool on one repeat type first, and subsequently on the rest. \n\t\t\t\t    For example, first use '-y 1', and for then use '-y 6' in a second run);\n\t\t\t\t-f: steps to run. (5907 means run all the steps);\n\t\t\t\t--xtea: this is the full path of the xTea/xtea folder (or the xTea_long_release_v0.1.0 folder for long reads module), \n\t\t\t\t        where the python scripts reside in;\n\t\t\t\t-g: gene annotation file in gff3 format;\n\t\t\t\t-o: generated running scripts under the working folder;\n\t\t\tOptional:\n\t\t\t\t-n: number of cores (default: 8, should be an integer);\n\t\t\t\t-m: maximum memory in GB (default: 25, should be an integer);\n\t\t\t\t-q: cluster partition name;\n\t\t\t\t-t: job runtime;\n\t\t\t\t--flklen: flanking region length;\n\t\t\t\t--lsf: add this option if using an LSF cluster (by default, use of the slurm scheduler is assumed);\n\t\t\t\t--tumor: indicates the tumor sample in a case-ctrl pair;\n\t\t\t\t--purity: tumor purity (by default 0.45);\n\t\t\t\t--blacklist: blacklist file in bed format. Listed regions will be filtered out;\n\t\t\t\t--slurm: runs using the slurm scheduler. Generates a script header fit for this scheduler;\n\t\t\t\n\t\t\tThe following cutoffs will be automatically set based on read depth (and also purity in the case of a tumor sample); \n\t\t\tThese parameters have been thoroughly tuned based on the use of benchmark data and also on a large cohort analysis. \n\t\t\tFor advanced users (optional major cutoffs):\n\t\t\t\t--user: by default, this is turned off. If this option is set, then a user-specific cutoff will be used;\n\t\t\t\t--nclip: minimum number of clipped reads;\n\t\t\t\t--cr: minimum number of clipped reads whose mates map to repetitive regions;\n\t\t\t\t--nd: minimum number of discordant pairs;\n\n\t\t\tSpecific parameters for long reads module:\n\t\t\t    --rmsk: this is a reference full-length L1 annotation file from RepeatMasker only for the \"ghost\" L1 detection module. \n\t\t\t            One file named \"hg38_L1_larger2K_with_all_L1HS.out\" within the downloaded library could be directly used;\n\t\t\t    --cns: this is the L1 concensus sequence needed only by the \"ghost\" L1 detection module. \n\t\t\t           One file named \"LINE1.fa\" within the downloaded library could be directly used;\n\t\t\t    --rep: repeat library folder (folder contain files decompressed from the downloaded \"rep_lib_annotation.tar.gz\");\n\t\t\t    --clean: clean the intermediate files;\n\n\t\t\t```\n\t\t\n\t2.2 The previous step will generate a shell script called `run_xTea_pipeline.sh` under `WFOLDER/sample_id/L1(or other types of repeats)`, where `WFOLDER` is specified by `-p` option.\n\t\t\n\t+ To run on the script: `sh run_xTea_pipeline.sh` or users can submit the jobs (where each line corresponds to one job) to a cluster.\n\t\n\t\n3. **Run from the Cloud**\n\t\n\t+ A docker file and a cwl file are provided for running the tool on AWS/GCP/FireCloud.\n\n\t\t\t\n4. **Output**\n\n\tA gVCF file will be generated for each sample.\n\t+ For germline TE insertion calling on short reads, the `orphan transduction` module usually has a higher false positive rate. Users can filter out false positive events with a command such as `grep -v \"orphan\" out.vcf > new_out.vcf` to retrieve higher confidence events.\n\n\n5. **Citation and accompany scripts**\n\tIf you are using xTea for your project, please cite:\n\t\n\t```\n\tChu, C., Borges-Monroy, R., Viswanadham, V.V. et al. Comprehensive identification of transposable element insertions using multiple sequencing technologies. Nat Commun 12, 3836 (2021). https://doi.org/10.1038/s41467-021-24041-8\n\t```\n\n\tThe accompany scripts for re-produce the results in the paper could be found here: `https://github.com/parklab/xTea_paper`\n\n6. **Update log**\n\n\t+ 06/11/23 Add `gnrt_pipeline_local_chm13.py` for CHM13_v2.0 reference genome .\n\n\t+ 06/09/22 Update the Dockerfile and cwl for germline module (hg38).\n\n\t+ 04/20/22 A fatal error was noticed at the genotyping step. The machine learing model was trained with features extracted with a old version of xTea, and this will introduce bias to predict the features extracted with the latest version of xTea. A new model is uploaded for non-conda version.\n\t\n\t+ 04/20/22 The scikit-learn version issue is complained by several users. To solve this issue, the new genotype classification model is trained with DF21 (https://github.com/LAMDA-NJU/Deep-Forest). Users need to install with command `pip install deep-forest`. For now, this is only for the non-conda version. I'll update the conda version soon."
      },
      "source": "https://raw.githubusercontent.com/parklab/xTea/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 06:33:34",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 99
      },
      "technique": "GitHub_API"
    }
  ]
}