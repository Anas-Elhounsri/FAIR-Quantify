{
  "acknowledgement": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Acknowledgements",
        "parent_header": [
          "MetaWRAP - a flexible pipeline for genome-resolved metagenomic data analysis",
          "USAGE"
        ],
        "type": "Text_excerpt",
        "value": "Author of pipeline: [Gherman Uritskiy](https://github.com/ursky).\n\nPrincipal Investigators: [James Taylor](http://bio.jhu.edu/directory/james-taylor/) and [Jocelyne DiRuggiero](http://bio.jhu.edu/directory/jocelyne-diruggiero/)\n\nInstitution: Johns Hopkins, [Department of Cell, Molecular, Developmental Biology, and Biophysics](http://cmdb.jhu.edu/) \n"
      },
      "source": "https://raw.githubusercontent.com/bxlab/metaWRAP/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citing metaWRAP",
        "parent_header": [
          "MetaWRAP - a flexible pipeline for genome-resolved metagenomic data analysis",
          "USAGE"
        ],
        "type": "Text_excerpt",
        "value": "If you found metaWRAP usefull in your research, please cite the publication: [MetaWRAP - a flexible pipeline for genome-resolved metagenomic data analysis](https://microbiomejournal.biomedcentral.com/articles/10.1186/s40168-018-0541-1). If certain software wrapped into metaWRAP were integral to your investigation (e.g. Salmon, MaxBin2, SPAdes, Kraken, etc.) please give them credit as well.\n"
      },
      "source": "https://raw.githubusercontent.com/bxlab/metaWRAP/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/bxlab/metaWRAP"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2017-06-06T18:17:29Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-01T00:17:43Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MetaWRAP - a flexible pipeline for genome-resolved metagenomic data analysis"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9997278263248088,
      "result": {
        "original_header": "MetaWRAP - a flexible pipeline for genome-resolved metagenomic data analysis",
        "type": "Text_excerpt",
        "value": " MetaWRAP aims to be an **easy-to-use metagenomic wrapper suite** that accomplishes the core tasks of metagenomic analysis from start to finish: read quality control, assembly, visualization, taxonomic profiling, extracting draft genomes (binning), and functional annotation. Additionally, metaWRAP takes bin extraction and analysis to the next level (see module overview below). While there is no single best approach for processing metagenomic data, metaWRAP is meant to be a fast and simple approach before you delve deeper into parameterization of your analysis. MetaWRAP can be applied to a variety of environments, including gut, water, and soil microbiomes (see metaWRAP paper for benchmarks). Each individual module of metaWRAP is a standalone program, which means you can use only the modules you are interested in for your data.\n \n ![General walkthrough of metaWRAP modules](https://i.imgur.com/6GqRsm3.png)\n \n"
      },
      "source": "https://raw.githubusercontent.com/bxlab/metaWRAP/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9823572761919694,
      "result": {
        "original_header": "Metagenomic bin recovery improvements",
        "type": "Text_excerpt",
        "value": " In addition to being a tool wrapper, MetaWRAP offers a **powerful hybrid approach** for extracting high-quality draft genomes (bins) from metagenomic data by using a variety of software (metaBAT2, CONCOCT, and MaxBin2, for example, since they are already wrapped into the Binning module) and utilizing their individual strengths and minimizing their weaknesses. MetaWRAP's [bin refinement module](https://i.imgur.com/JL665Qo.png) outperforms not only individual binning approaches, but also other bin consolidation programs (Binning_refiner, DAS_Tool) in both synthetic and real datasets. I emphasize that because this module is a standalone component, I encourage you to use your favorite binning softwares for the 3 intitial predictions (they do not have to come from metaBAT2, CONCOCT and MaxBin2). These predictions can also come from different parameters of the same software. \n\n MetaWRAP also includes a novel [bin reassembly module](https://i.imgur.com/GUSMXl8.png), which allows to drastically improve the quality of a set of bins by extracting the reads belonging to each bin, and **reassembling the bins** with a more permissive, non-metagenomic assembler. In addition to improving the N50 of the bins, this modestly increases the completion of the bins, and drastically reduces contamination. I recommend you run the reassembly on the final bins set from the Bin_refinement module, but this can be any bin set.\n \n \n"
      },
      "source": "https://raw.githubusercontent.com/bxlab/metaWRAP/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9741497268862497,
      "result": {
        "original_header": "Metagemonic data pre-processing modules:",
        "type": "Text_excerpt",
        "value": "\t1) Read_QC: read trimming and host (e.g. human) read removal\n\t2) Assembly: metagenomic assembly and QC with metaSPAdes or MegaHit\n\t3) Kraken/Kraken2: taxonomy profiling and visualization or reads or contigs\n\t \n"
      },
      "source": "https://raw.githubusercontent.com/bxlab/metaWRAP/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9924023031794325,
      "result": {
        "original_header": "Bin processing modules:",
        "type": "Text_excerpt",
        "value": "\t1) Binning: initial bin extraction with MaxBin2, metaBAT2, and/or CONCOCT\n\t2) Bin_refinement: consolidate of multiple binning predicitons into a superior bin set\n\t3) Reassemble_bins: reassemble bins to improve completion and N50, and reduce contamination\n\t4) Quant_bins: estimate bin abundance across samples\n\t5) Blobology: visualize the community and extracted bins with blobplots\n\t6) Classify_bins: conservative but accurate taxonomy prediction for bins\n\t7) Annotate_bins: functionally annotate genes in a set of bins \n"
      },
      "source": "https://raw.githubusercontent.com/bxlab/metaWRAP/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9466536148360843,
      "result": {
        "original_header": "DATABASES",
        "type": "Text_excerpt",
        "value": "This is very important if you want to use any functions requiring databases, but depending on what you plan to do, the databases are not mandatory for metaWRAP (see Database section below). [Follow this guide for download and configuration instructions](https://github.com/bxlab/metaWRAP/blob/master/installation/database_installation.md). \n"
      },
      "source": "https://raw.githubusercontent.com/bxlab/metaWRAP/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9833182612662431,
      "result": {
        "original_header": "DETAILED PIPELINE WALKTHROUGH",
        "type": "Text_excerpt",
        "value": "  ![Detailed pipeline walkthrough](https://i.imgur.com/HDUPeXC.png)\n  Note: some features of this walkthrough are depricated since v0.7. To understand specific steps of each module, you can glance at the bash code in each script. \n"
      },
      "source": "https://raw.githubusercontent.com/bxlab/metaWRAP/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/bxlab/metaWRAP/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "faq": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Error reporting",
        "parent_header": [
          "MetaWRAP - a flexible pipeline for genome-resolved metagenomic data analysis",
          "USAGE"
        ],
        "type": "Text_excerpt",
        "value": "The massive scale of the metaWRAP project unfortunately means that there are lots of opportunities for different components to fail depending on the exact environments it is installed on. Note that metaWRAP is simply a bash wrapper around other popular bioinformatics programs. If one of these other programs fails, the first thing to do is to troubleshoot the installation of that software, and not worry about metaWRAP itself until that component is fixed. If one of the components refuses to work on you environment, there may not be much I can do. Also remember that if you know a bit of bash/shell you can always see how metaWRAP calls these programs by investigating and possibly changing/tweaking the script files in `bin/metawrap-modules/`.\n\nFor errors and bugs relating to the actual metaWRAP software, please open a new Issue thread on this github page, however note that I no longer actively support metaWRAP due to moving on to other jobs. If you do report an error, please include the full output (stdout and stderr) from metaWRAP, and the version of you are using (run `metawrap -v`).\n"
      },
      "source": "https://raw.githubusercontent.com/bxlab/metaWRAP/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 191
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/bxlab/metaWRAP/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bxlab/metaWRAP"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MetaWRAP - a flexible pipeline for genome-resolved metagenomic data analysis"
      },
      "source": "https://raw.githubusercontent.com/bxlab/metaWRAP/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bxlab/metaWRAP/master/conda_pkg/build.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bxlab/metaWRAP/master/bin/metawrap-scripts/checkm.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bxlab/metaWRAP/master/bin/metawrap-scripts/checkm-shared.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bxlab/metaWRAP/master/bin/metawrap-scripts/run_checkm.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bxlab/metaWRAP/master/bin/metawrap-scripts/deinterleave_fastq.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bxlab/metaWRAP/master/bin/metawrap-scripts/blobology/run_blobology.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bxlab/metaWRAP/master/bin/metawrap-modules/blobology.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bxlab/metaWRAP/master/bin/metawrap-modules/reassemble_bins.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bxlab/metaWRAP/master/bin/metawrap-modules/annotate_bins.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bxlab/metaWRAP/master/bin/metawrap-modules/bin_refinement.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bxlab/metaWRAP/master/bin/metawrap-modules/read_qc.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bxlab/metaWRAP/master/bin/metawrap-modules/classify_bins.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bxlab/metaWRAP/master/bin/metawrap-modules/binning.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bxlab/metaWRAP/master/bin/metawrap-modules/assembly.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bxlab/metaWRAP/master/bin/metawrap-modules/kraken.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bxlab/metaWRAP/master/bin/metawrap-modules/kraken2.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bxlab/metaWRAP/master/bin/metawrap-modules/quant_bins.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://i.imgur.com/6GqRsm3.png"
      },
      "source": "https://raw.githubusercontent.com/bxlab/metaWRAP/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://i.imgur.com/KSk3l2B.jpg"
      },
      "source": "https://raw.githubusercontent.com/bxlab/metaWRAP/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://i.imgur.com/HDUPeXC.png"
      },
      "source": "https://raw.githubusercontent.com/bxlab/metaWRAP/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "#### To update to the latest version:\nMetaWRAP is being constantly improved week to week as more bugs and issues pop up. Because of the scale of the project it is almost impossible to get a perfect working version as the dependancy software are constantly changing. I recommend to update to the newest version of metaWRAP on a monthly basis.\n\nBefore updating, back up your `config-metawrap` file so you do not have to re-do the database configurations. Then update with conda:\n```\nconda update -y -c ursky metawrap-mg\n\n# or for a specific version:\nconda install -y -c ursky metawrap-mg=1.2.2\n```\n\nIf you are using the (recommended) manual instalation of metaWRAP, simply run `git pull` inside the metaWRAP directory.\nIt should also be noted that it is possible for th eupdates to produce strange behavior in complex conda environments, so if you experience issues the safest way is to just delete the old metawrap-env environment (`rm -r miniconda/envs/metawrap-env`) and re-install from scratch.  \n\n\n#### Best (manual) installation:\n This is how I usually use metaWRAP. By manually installing metaWRAP you will have better control over your environment and be able to change any programs and their versions as you see fit. You can also easily get the lastest updates throught `git pull`. If you are installing on a system other than Linux64, this may be your best bet. The hardest part is to install the [relevant prerequisite programs](https://github.com/bxlab/metaWRAP/blob/master/conda_pkg/meta.yaml), but this is much easier than you would think with the use of conda. Once you have these installed in your environment, download or clone this ripository, carefully configure the `metaWRAP/bin/config-metawrap` file, and add the `metaWRAP/bin/` directory to to the `$PATH` (likely by editing the `~/.bash_profile`). Alternatively, just copy over the `metaWRAP/bin/` contents into any location with excecutbale permission such as `/usr/bin/` or `/miniconda2/bin/` (depending on your permissions). Thats it!\n \n Easiest way to quickly install the dependancies:\n ```\n # Note: ordering is important\nconda config --add channels defaults\nconda config --add channels conda-forge\nconda config --add channels bioconda\nconda config --add channels ursky\n\n# Unix/Linux only\nconda install --only-deps -c ursky metawrap-mg\n\n# OR\nconda install biopython blas=2.5 blast=2.6.0 bmtagger bowtie2 bwa checkm-genome fastqc kraken=1.1 krona=2.7 matplotlib maxbin2 megahit metabat2 pandas prokka quast r-ggplot2 r-recommended salmon samtools=1.9 seaborn spades trim-galore\n# Note: this last solution is universal, but you may need to manually install concoct=1.0 and pplacer.\n```\n\n#### Basic installation:\n To start, download [miniconda2](https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh) and install it:\n ``` bash\n wget https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh\n bash Miniconda2-latest-Linux-x86_64.sh\n ```\n \n Then add channels to your conda environment, and install metaWRAP (supports Linux64):\n ``` bash\n # Note: ordering is important\n conda config --add channels defaults\n conda config --add channels conda-forge\n conda config --add channels bioconda\n conda config --add channels ursky\n\n conda install -y -c ursky metawrap-mg\n # Note: may take a while\n \n # To fix the CONCOCT endless warning messages in metaWRAP=1.2, run\n conda install -y blas=2.5=mkl\n ```\n \n #### Better installation:\n The conda installation of metaWRAP will install over 140 software dependancies, which may cause some conflicts with your currenly installed packages. If you already use conda, it is strongly recommended to [set up a conda custom environment](https://conda.io/docs/user-guide/tasks/manage-environments.html) and install metaWRAP only in there. That way your current conda environment and metaWRAP's environment do not not conflict.\n``` bash\nconda create -y -n metawrap-env python=2.7\nsource activate metawrap-env\n\n# Note: ordering is important\nconda config --add channels defaults\nconda config --add channels conda-forge\nconda config --add channels bioconda\nconda config --add channels ursky\n\nconda install -y -c ursky metawrap-mg\n# Note: may take a while\n\n # To fix the CONCOCT endless warning messages in metaWRAP=1.2, run\n conda install -y blas=2.5=mkl\n```\n \n\n#### Bioconda installation:\nMetaWRAP is also available through the Bioconda channel. **However**, this distribution is not recommended for most users, as I will only push major releases to Bioconda (i.e. `v1.1`, `v1.2`). This source is meant for specific applications that require a Bioconda distribution. To get the latest version of metaWRAP with the newest patches and bug fixes, please install through the `-c ursky` channel, as seen above. \n\n```\n# Bioconda installation (not recommended):\nconda install -y -c bioconda metawrap\n```\n\n#### Docker installation:\nIf you are running on OSX and dont want to install manually, or prefer to work in containerized environments, then [Docker](https://quay.io/repository/biocontainers/metawrap?tab=info) could be the way to go. **However**, as with the Bioconda distribution, I will only push major releases to Bioconda (i.e. `v1.1`, `v1.2`). To get the latest version of metaWRAP with the newest patches and bug fixes, please install through the `-c ursky` channel, as seen above. If you still need to use Docker but run into bugs that have been fixed in the latest versions, you can manually update your scripts from this repository to apply the most recent patches. To install with Docker, run:\n```\n# Docker installation (not recommended)\ndocker pull quay.io/biocontainers/metawrap:1.2--0\n```\n"
      },
      "source": "https://raw.githubusercontent.com/bxlab/metaWRAP/master/installation/metawrap_installation.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "## Downloading the CheckM database:\n``` bash\nmkdir MY_CHECKM_FOLDER\n\n# Now manually download the database:\ncd MY_CHECKM_FOLDER\nwget https://data.ace.uq.edu.au/public/CheckM_databases/checkm_data_2015_01_16.tar.gz\ntar -xvf *.tar.gz\nrm *.gz\ncd ../\n\n# Now you need to tell CheckM where to find this data before running anything:\ncheckm data setRoot     # CheckM will prompt to to chose your storage location\n# On newer versions of CheckM, you would run:\ncheckm data setRoot /path/to/your/dir/MY_CHECKM_FOLDER\n```\nThats it! CheckM should now use that folder and its contents as its database.\n\n\n\n## Downloading the KRAKEN1 standard database:\nNote: As of metaWRAP v1.3.2, we recomend you use Kraken2 instead of the original Kraken1 (see below).\nNote: this will download the entire RefSeq database and index it, which takes a lot of computational power, storage space, and RAM. During database building, you will need >450GB of space and >250GB of RAM. With 24 cores, this will take >5 hours. Note that this is only needed if you intend on running the KRAKEN module.\n``` bash\nkraken-build --standard --threads 24 --db MY_KRAKEN_DATABASE\nkraken-build --db MY_KRAKEN_DATABASE --clean\n```\nDo not forget to set the KRAKEN_DB variable in the config-metawrap file! Run `which config-metawrap` to find it.\n``` bash\nKRAKEN_DB=/path/to/my/database/MY_KRAKEN_DATABASE\n```\n\n## Downloading the KRAKEN2 standard database:\nNote: Compared to Kraken1, the Kraken2 database is considerably more compact, making the download and indexing process much faster and less taxing on the system. You will need an estimated 120GB of RAM and ~128GB of space. Note that this is only needed if you intend on running the KRAKEN2 module.\n``` bash\nkraken2-build --standard --threads 24 --db MY_KRAKEN2_DB\n```\nDo not forget to set the KRAKEN_DB variable in the config-metawrap file! Run `which config-metawrap` to find it.\n``` bash\nKRAKEN2_DB=/path/to/my/database/MY_KRAKEN2_DATABASE\n```\n\n## Downloading the NCBI_nt BLAST database:\n``` bash\nmkdir NCBI_nt\ncd  NCBI_nt\nwget \"ftp://ftp.ncbi.nlm.nih.gov/blast/db/nt.*.tar.gz\"\nfor a in nt.*.tar.gz; do tar xzf $a; done\n```\nNote: if you are using a more recent blast verions (beyond v2.6) you will need a the newer database format: `wget \"ftp://ftp.ncbi.nlm.nih.gov/blast/db/v4/nt_v4.*.tar.gz\"`\n\nDo not forget to set the BLASTDB variable in the config-metawrap file!\n``` bash\nBLASTDB=/your/location/of/database/NCBI_nt\n```\n\n\n## Downloading the NCBI taxonomy:\n``` bash\nmkdir NCBI_tax\ncd NCBI_tax\nwget ftp://ftp.ncbi.nlm.nih.gov/pub/taxonomy/taxdump.tar.gz\ntar -xvf taxdump.tar.gz\n```\nDo not forget to set the TAXDUMP variable in the config-metawrap file! Run `which config-metawrap` to find it.\n``` bash\nTAXDUMP=/your/location/of/database/NCBI_tax\n```\n\n\n## Making host genome index for bmtagger\nIf you want to remove human (see end of instrutions for non-human hosts) reads from tour sequencing in the READ_QC module, you will need to dowlnoad and index the human genome. See the official bmtagger manual for detailed instructions: https://www.hmpdacc.org/hmp/doc/HumanSequenceRemoval_SOP.pdf\n\nFirst, lets download and merge the human genome hg38:\n``` bash \nmkdir BMTAGGER_INDEX\ncd BMTAGGER_INDEX\nwget ftp://hgdownload.soe.ucsc.edu/goldenPath/hg38/chromosomes/*fa.gz\ngunzip *fa.gz\ncat *fa > hg38.fa\nrm chr*.fa\n```\nNow lets index the human genome. Note that the file names of the indeces must be exactly as specified for metaWRAP to recognize them! Also note that indexing will take considerable memory and time (here I pass 100GB of RAM as a -M parameter).\n``` bash\nbmtool -d hg38.fa -o hg38.bitmask\nsrprism mkindex -i hg38.fa -o hg38.srprism -M 100000\n```\nNote: metaWRAP looks for files hg38.bitmask and hg38.srprism - make sure they are names exactly like this.\nDone! Now dont forget to specify the BMTAGGER_DB variable in the config-metawrap file! Run `which config-metawrap` to find it.\n``` bash\nBMTAGGER_DB=/path/to/your/index/BMTAGGER_INDEX\n```\n\n### Instructions for non-human hosts: \nFor non-human hosts, the protocol for building and using the bmtagger index should be the same. In the end, you need to have th `.srprism` and `.bitmask` index files in the `BMTAGGER_INDEX` directory that you will link to in the `config-metawrap` file. When you run `metawrap read_qc`, you need to use the `-x` option to specify the prefix of your host. For example, if your `BMTAGGER_INDEX` directory has files `pig.srprism` and `pig.bitmask`, use `-x pig` as the option. \n\n"
      },
      "source": "https://raw.githubusercontent.com/bxlab/metaWRAP/master/installation/database_installation.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Manual installation (this is best, if you are comfortable):",
        "parent_header": [
          "MetaWRAP - a flexible pipeline for genome-resolved metagenomic data analysis",
          "INSTALLATION"
        ],
        "type": "Text_excerpt",
        "value": " The best way to install and manage metaWRAP is to install it directly from github, and then install all of its dependancies through conda. This is how I usually use metaWRAP, as it allows to easily update the versions of metawrap and other packages. This also works on MacOS as well as Unix.  \n \n 0. Install mamba: `conda install -y mamba`. Mamba will effectively replace conda and do exactly the same thing, but _much_ faster.\n 1. Download or clone this ripository: `git clone https://github.com/bxlab/metaWRAP.git`\n 2. Carefully configure the `yourpath/metaWRAP/bin/config-metawrap` file to it points to your desired database locations (you can modify this later). Follow the [database configuration guide](https://github.com/bxlab/metaWRAP/blob/master/installation/database_installation.md) for details.\n 3. Make metaWRAP executable by adding `yourpath/metaWRAP/bin/` directory to to your `$PATH`. Either add the line `PATH=yourpath/metaWRAP/bin/:$PATH` to your `~/.bash_profile` script, or copy over the contents of `yourpath/metaWRAP/bin/` into a location already in your `$PATH` (such as `/usr/bin/` or `/miniconda2/bin/`). \n 4. (Optional but recommended) Make a new conda environment to install and manage all dependancies:\n```\nmamba create -y -n metawrap-env python=2.7\nconda activate metawrap-env\n```\n5. Install all [metaWRAP dependancies](https://github.com/bxlab/metaWRAP/blob/master/conda_pkg/meta.yaml) with conda:\n ```\nconda config --add channels defaults\nconda config --add channels conda-forge\nconda config --add channels bioconda\nconda config --add channels ursky\n\n# Unix/Linux only\nmamba install --only-deps -c ursky metawrap-mg\n# `conda install --only-deps -c ursky metawrap-mg` also works, but much slower\n\n# OR\nmamba install biopython blas=2.5 blast=2.6.0 bmtagger bowtie2 bwa checkm-genome fastqc kraken=1.1 kraken=2.0 krona=2.7 matplotlib maxbin2 megahit metabat2 pandas prokka quast r-ggplot2 r-recommended salmon samtools=1.9 seaborn spades trim-galore\n# Note: this last solution is more universal, but you may need to manually install concoct=1.0 and pplacer.\n```\n"
      },
      "source": "https://raw.githubusercontent.com/bxlab/metaWRAP/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Express Conda/Mamba installation (the quickest but least configurable):",
        "parent_header": [
          "MetaWRAP - a flexible pipeline for genome-resolved metagenomic data analysis",
          "INSTALLATION"
        ],
        "type": "Text_excerpt",
        "value": "Directly create a metawrap-specific environment and install metawrap.\n```\n# install mamba (replaces conda, but much faster):\n conda install -y mamba \n \n# install metawrap:\n mamba create -y --name metawrap-env --channel ursky metawrap-mg=1.3.2\n conda activate metawrap-env\n\n# To fix the CONCOCT endless warning messages in metaWRAP=1.2+, run\n conda install -y blas=2.5=mkl\n```\n"
      },
      "source": "https://raw.githubusercontent.com/bxlab/metaWRAP/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Bioconda installation (avoid):",
        "parent_header": [
          "MetaWRAP - a flexible pipeline for genome-resolved metagenomic data analysis",
          "INSTALLATION"
        ],
        "type": "Text_excerpt",
        "value": "MetaWRAP is also available through the Bioconda channel. **However**, this distribution is not recommended for most users, as I will only push major releases to Bioconda (i.e. `v1.1`, `v1.2`). This source is meant for specific applications that require a Bioconda distribution. To get the latest version of metaWRAP with the newest patches and bug fixes, please install through the `-c ursky` channel, as seen above. \n\n```\n# Bioconda installation (not recommended):\nconda install -y mamba\nmamba install -y -c bioconda metawrap\n\n# or `conda install -y -c bioconda metawrap`\n```\n"
      },
      "source": "https://raw.githubusercontent.com/bxlab/metaWRAP/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Docker installation (avoid):",
        "parent_header": [
          "MetaWRAP - a flexible pipeline for genome-resolved metagenomic data analysis",
          "INSTALLATION"
        ],
        "type": "Text_excerpt",
        "value": "If you are running on OSX and dont want to install manually, or prefer to work in containerized environments, then [Docker](https://quay.io/repository/biocontainers/metawrap?tab=info) could be the way to go. **However**, as with the Bioconda distribution, I will only push major releases to Bioconda (i.e. `v1.1`, `v1.2`). To get the latest version of metaWRAP with the newest patches and bug fixes, please install through the `-c ursky` channel, as seen above. If you still need to use Docker but run into bugs that have been fixed in the latest versions, you can manually update your scripts from this repository to apply the most recent patches. To install with Docker, run:\n```\n# Docker installation (not recommended and not fully supported)\ndocker pull quay.io/biocontainers/metawrap:1.2--0\n```\n\n "
      },
      "source": "https://raw.githubusercontent.com/bxlab/metaWRAP/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9993193697486784,
      "result": {
        "original_header": "DATABASES",
        "type": "Text_excerpt",
        "value": " In addition to the Conda installation, you will need to configure the paths to some databases that you downloaded onto your system. Use your favorite text editor to configure these paths in /some/path/miniconda2/bin/config-metawrap and make sure everything looks correct. If you are unsure where this config file is, run:\n ``` bash\n which config-metawrap\n ``` \nThis is very important if you want to use any functions requiring databases, but depending on what you plan to do, the databases are not mandatory for metaWRAP (see Database section below). [Follow this guide for download and configuration instructions](https://github.com/bxlab/metaWRAP/blob/master/installation/database_installation.md). \n"
      },
      "source": "https://raw.githubusercontent.com/bxlab/metaWRAP/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/bxlab/metaWRAP/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Copyright 2018 Gherman Uritskiy\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/bxlab/metaWRAP/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "metaWRAP"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "bxlab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 160885,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 77554,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 35602,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 14928,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bxlab/metaWRAP/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "ursky",
          "type": "User"
        },
        "date_created": "2020-08-01T14:37:50Z",
        "date_published": "2020-08-04T17:42:59Z",
        "description": "1. Database updates\r\n2. New NCBI database support\r\n3. Restored hybrid assembly functionality\r\n4. Bug fixes in several modules",
        "html_url": "https://github.com/bxlab/metaWRAP/releases/tag/v1.3",
        "name": "metaWRAP v1.3",
        "release_id": 29283355,
        "tag": "v1.3",
        "tarball_url": "https://api.github.com/repos/bxlab/metaWRAP/tarball/v1.3",
        "type": "Release",
        "url": "https://api.github.com/repos/bxlab/metaWRAP/releases/29283355",
        "value": "https://api.github.com/repos/bxlab/metaWRAP/releases/29283355",
        "zipball_url": "https://api.github.com/repos/bxlab/metaWRAP/zipball/v1.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "ursky",
          "type": "User"
        },
        "date_created": "2019-04-22T14:22:28Z",
        "date_published": "2019-04-22T14:55:20Z",
        "description": "1. Minor bug fixes throughout all modules\r\n2. Improved performance through updated CONCOCT, Salmon, Samtools, and other key programs\r\n3. Simplified installation requirements for fewer library conflicts",
        "html_url": "https://github.com/bxlab/metaWRAP/releases/tag/v1.2",
        "name": "metaWRAP v1.2",
        "release_id": 16898963,
        "tag": "v1.2",
        "tarball_url": "https://api.github.com/repos/bxlab/metaWRAP/tarball/v1.2",
        "type": "Release",
        "url": "https://api.github.com/repos/bxlab/metaWRAP/releases/16898963",
        "value": "https://api.github.com/repos/bxlab/metaWRAP/releases/16898963",
        "zipball_url": "https://api.github.com/repos/bxlab/metaWRAP/zipball/v1.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "ursky",
          "type": "User"
        },
        "date_created": "2019-01-14T16:13:01Z",
        "date_published": "2019-01-16T14:28:02Z",
        "description": "1. Major and minor bug fixes across all modules\r\n2. Incorporated user-submitted fixes and suggestions from the first four months since publicaiton\r\n3. Major fixes in binning and bin_refinement modules",
        "html_url": "https://github.com/bxlab/metaWRAP/releases/tag/v1.1",
        "name": "metaWRAP v1.1",
        "release_id": 15008081,
        "tag": "v1.1",
        "tarball_url": "https://api.github.com/repos/bxlab/metaWRAP/tarball/v1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/bxlab/metaWRAP/releases/15008081",
        "value": "https://api.github.com/repos/bxlab/metaWRAP/releases/15008081",
        "zipball_url": "https://api.github.com/repos/bxlab/metaWRAP/zipball/v1.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "ursky",
          "type": "User"
        },
        "date_created": "2018-09-17T19:08:15Z",
        "date_published": "2018-09-17T19:20:53Z",
        "description": "1. Publication of metaWRAP in Microbiome \r\n2. Official release of metaWRAP v=1.0\r\n3. Major bug fixes in the Classify_bins module\r\n4. Memory usage bug fixes\r\n5. Minor misc. bug fixes in all modules ",
        "html_url": "https://github.com/bxlab/metaWRAP/releases/tag/v1.0",
        "name": "metaWRAP v1.0",
        "release_id": 12942730,
        "tag": "v1.0",
        "tarball_url": "https://api.github.com/repos/bxlab/metaWRAP/tarball/v1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/bxlab/metaWRAP/releases/12942730",
        "value": "https://api.github.com/repos/bxlab/metaWRAP/releases/12942730",
        "zipball_url": "https://api.github.com/repos/bxlab/metaWRAP/zipball/v1.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "ursky",
          "type": "User"
        },
        "date_created": "2018-06-15T14:55:40Z",
        "date_published": "2018-06-15T21:50:54Z",
        "description": "1. Extensive bug fixes in all modules. Please consult the `CHANGELOG` for details.\r\n2. Speed improvements to `bin_refinement` and `reassemble_bins` modules\r\n3. Fixed conflicts with local perl5 libraries\r\n4. Major rework of the read-splitting algorithm in `reassemble_bins` module for better speed, accuracy, and memory usage\r\n5. `Binning` module now supports single-end reads as input",
        "html_url": "https://github.com/bxlab/metaWRAP/releases/tag/v0.9",
        "name": "metaWRAP v0.9",
        "release_id": 11508975,
        "tag": "v0.9",
        "tarball_url": "https://api.github.com/repos/bxlab/metaWRAP/tarball/v0.9",
        "type": "Release",
        "url": "https://api.github.com/repos/bxlab/metaWRAP/releases/11508975",
        "value": "https://api.github.com/repos/bxlab/metaWRAP/releases/11508975",
        "zipball_url": "https://api.github.com/repos/bxlab/metaWRAP/zipball/v0.9"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "ursky",
          "type": "User"
        },
        "date_created": "2018-03-07T21:08:52Z",
        "date_published": "2018-03-07T21:14:51Z",
        "description": "1. MetaWRAP publication is now available at bioRxiv\r\n2. *Extensive* bug fixes and feature improvements in all modules. Please consult the changelog for details.",
        "html_url": "https://github.com/bxlab/metaWRAP/releases/tag/v0.8",
        "name": "metaWRAP v0.8",
        "release_id": 9987574,
        "tag": "v0.8",
        "tarball_url": "https://api.github.com/repos/bxlab/metaWRAP/tarball/v0.8",
        "type": "Release",
        "url": "https://api.github.com/repos/bxlab/metaWRAP/releases/9987574",
        "value": "https://api.github.com/repos/bxlab/metaWRAP/releases/9987574",
        "zipball_url": "https://api.github.com/repos/bxlab/metaWRAP/zipball/v0.8"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "ursky",
          "type": "User"
        },
        "date_created": "2018-01-24T15:40:13Z",
        "date_published": "2018-01-24T15:43:22Z",
        "description": "1. Fixed issues with Conda installation\r\n2. Major bug fixes in Quant_bins and Classify_bins\r\n2. Minor fixes and improved error handling throughout most modules\r\n3. New module Annotate_bins - functionally annotate a set of bins\r\n",
        "html_url": "https://github.com/bxlab/metaWRAP/releases/tag/v0.7",
        "name": "metaWRAP v0.7",
        "release_id": 9369136,
        "tag": "v0.7",
        "tarball_url": "https://api.github.com/repos/bxlab/metaWRAP/tarball/v0.7",
        "type": "Release",
        "url": "https://api.github.com/repos/bxlab/metaWRAP/releases/9369136",
        "value": "https://api.github.com/repos/bxlab/metaWRAP/releases/9369136",
        "zipball_url": "https://api.github.com/repos/bxlab/metaWRAP/zipball/v0.7"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "ursky",
          "type": "User"
        },
        "date_created": "2017-12-30T05:36:02Z",
        "date_published": "2017-12-30T05:40:57Z",
        "description": "Major updates:\r\n1. Added metaWRAP and ALL dependencies to conda\r\n2. MetaWRAP is now installed exclusively through conda \r\n3. Significant speed improvements in the Reassemble_bins module\r\n4. Major bug fixes in Krakem and Assembly modules",
        "html_url": "https://github.com/bxlab/metaWRAP/releases/tag/v0.6",
        "name": "metaWRAP v0.6",
        "release_id": 9064388,
        "tag": "v0.6",
        "tarball_url": "https://api.github.com/repos/bxlab/metaWRAP/tarball/v0.6",
        "type": "Release",
        "url": "https://api.github.com/repos/bxlab/metaWRAP/releases/9064388",
        "value": "https://api.github.com/repos/bxlab/metaWRAP/releases/9064388",
        "zipball_url": "https://api.github.com/repos/bxlab/metaWRAP/zipball/v0.6"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "ursky",
          "type": "User"
        },
        "date_created": "2017-12-18T01:16:24Z",
        "date_published": "2017-12-18T01:22:46Z",
        "description": "Major updates:\r\n\r\n1. Bug fixes and speed improvements in all modules\r\n2. Improved speed of Binning_refiner by 4X through parallelization of refinement iterations\r\n3. Added plotting functions to summarize success of reassemble_bins module \r\n4. New module classify_bins - assigns taxonomy to bins using taxator-kt \r\n",
        "html_url": "https://github.com/bxlab/metaWRAP/releases/tag/v0.5",
        "name": "metaWRAP v0.5",
        "release_id": 8939795,
        "tag": "v0.5",
        "tarball_url": "https://api.github.com/repos/bxlab/metaWRAP/tarball/v0.5",
        "type": "Release",
        "url": "https://api.github.com/repos/bxlab/metaWRAP/releases/8939795",
        "value": "https://api.github.com/repos/bxlab/metaWRAP/releases/8939795",
        "zipball_url": "https://api.github.com/repos/bxlab/metaWRAP/zipball/v0.5"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "ursky",
          "type": "User"
        },
        "date_created": "2017-12-04T21:57:28Z",
        "date_published": "2017-12-04T22:31:47Z",
        "description": "Major updates:\r\n1. Most metaWRAP dependencies  can now be installed from a Conda environment file\r\n2. Bin_refiner now properly handles ambiguous contigs that end up in multiple bins\r\n3. Added completion and contamination rank plots to compare metaWRAP bins to inputs\r\n4. Major bug fixes throughout resulting from testing metaWRAP on multiple data sets ",
        "html_url": "https://github.com/bxlab/metaWRAP/releases/tag/v0.4",
        "name": "metaWRAP v0.4",
        "release_id": 8768453,
        "tag": "v0.4",
        "tarball_url": "https://api.github.com/repos/bxlab/metaWRAP/tarball/v0.4",
        "type": "Release",
        "url": "https://api.github.com/repos/bxlab/metaWRAP/releases/8768453",
        "value": "https://api.github.com/repos/bxlab/metaWRAP/releases/8768453",
        "zipball_url": "https://api.github.com/repos/bxlab/metaWRAP/zipball/v0.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "ursky",
          "type": "User"
        },
        "date_created": "2017-11-21T22:16:18Z",
        "date_published": "2017-11-21T22:20:25Z",
        "description": "Major updates:\r\n1. Improved modularity of binning module - now consists of four sub-modules\r\n2. Use of multiple binning software (CONCOCT, metaBAT2, MaxBin2)\r\n3. Bin refinement module to consolidate results of multiple binners\r\n4. Parallelized bin reassembly module\r\n5. Parallelized Blobology module",
        "html_url": "https://github.com/bxlab/metaWRAP/releases/tag/v0.3",
        "name": "metaWRAP v0.3",
        "release_id": 8611088,
        "tag": "v0.3",
        "tarball_url": "https://api.github.com/repos/bxlab/metaWRAP/tarball/v0.3",
        "type": "Release",
        "url": "https://api.github.com/repos/bxlab/metaWRAP/releases/8611088",
        "value": "https://api.github.com/repos/bxlab/metaWRAP/releases/8611088",
        "zipball_url": "https://api.github.com/repos/bxlab/metaWRAP/zipball/v0.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "ursky",
          "type": "User"
        },
        "date_created": "2017-08-02T16:24:35Z",
        "date_published": "2017-08-02T16:38:11Z",
        "description": "Major updates:\r\n1. Improved modularity - metaWRAP as a whole now feels like a complete wrapper program, while maintaining the ability to run its individual modules separately for better control.\r\n2. Parameterization - added numerous options to all modules, allowing for better control of each module\r\n3. Added options that significantly speed up the pipeline. Depending on which options are chosen the pipeline may take a few hours or few days (but producing nicer results).\r\n\r\n(see changelog for details)",
        "html_url": "https://github.com/bxlab/metaWRAP/releases/tag/v0.2",
        "name": "metaWRAP v0.2",
        "release_id": 7259343,
        "tag": "v0.2",
        "tarball_url": "https://api.github.com/repos/bxlab/metaWRAP/tarball/v0.2",
        "type": "Release",
        "url": "https://api.github.com/repos/bxlab/metaWRAP/releases/7259343",
        "value": "https://api.github.com/repos/bxlab/metaWRAP/releases/7259343",
        "zipball_url": "https://api.github.com/repos/bxlab/metaWRAP/zipball/v0.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "ursky",
          "type": "User"
        },
        "date_created": "2017-07-21T23:09:14Z",
        "date_published": "2017-07-21T23:11:46Z",
        "description": "This is the first user-friendly version of metaWRAP.",
        "html_url": "https://github.com/bxlab/metaWRAP/releases/tag/v0.1",
        "name": "metaWRAP v0.1",
        "release_id": 7130080,
        "tag": "v0.1",
        "tarball_url": "https://api.github.com/repos/bxlab/metaWRAP/tarball/v0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/bxlab/metaWRAP/releases/7130080",
        "value": "https://api.github.com/repos/bxlab/metaWRAP/releases/7130080",
        "zipball_url": "https://api.github.com/repos/bxlab/metaWRAP/zipball/v0.1"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "SYSTEM REQUIREMENTS",
        "parent_header": [
          "MetaWRAP - a flexible pipeline for genome-resolved metagenomic data analysis"
        ],
        "type": "Text_excerpt",
        "value": " The resource requirements for this pipeline will vary greatly based on the amount of data being processed, but due to large memory requirements of many software used (KRAKEN and metaSPAdes to name a few), I recommend at 8+ cores and 64GB+ RAM. MetaWRAP officially supports only Linux x64 systems, but may be installed on OSX manually or with docker (see below).\n"
      },
      "source": "https://raw.githubusercontent.com/bxlab/metaWRAP/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 07:56:37",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 391
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "USAGE",
        "parent_header": [
          "MetaWRAP - a flexible pipeline for genome-resolved metagenomic data analysis"
        ],
        "type": "Text_excerpt",
        "value": "Please look at the [MetaWRAP usage tutorial](https://github.com/bxlab/metaWRAP/blob/master/Usage_tutorial.md) for detailed run instructions and examples.\n\nOnce all the dependencies are in place, running metaWRAP is relatively simple. The main metaWRAP script wraps around all of its individual modules, which you can call independently.\n```\nmetaWRAP -h\n\tUsage: metawrap [module] --help\n\tOptions:\n\n\tread_qc\t\tRaw read QC module\n\tassembly\tAssembly module\n\tbinning\t\tBinning module\n\tbin_refinement\tRefinement of bins from binning module\n\treassemble_bins Reassemble bins using metagenomic reads\n\tquant_bins\tQuantify the abundance of each bin across samples\n\tblobology\tBlobology module\n\tkraken\t\tKRAKEN module\n\tkraken2\t\tKRAKEN2 module\n```\n\nEach module is run separately. For example, to run the assembly module:\n```\nmetawrap assembly -h\n\nUsage: metawrap assembly [options] -1 reads_1.fastq -2 reads_2.fastq -o output_dir\nOptions:\n\n\t-1 STR          forward fastq reads\n\t-2 STR          reverse fastq reads\n\t-o STR          output directory\n\t-m INT          memory in GB (default=10)\n\t-t INT          number of threads (defualt=1)\n\n\t--use-megahit\t\tassemble with megahit (default)\n\t--use-metaspades\tassemble with metaspades instead of megahit\n```\n"
      },
      "source": "https://raw.githubusercontent.com/bxlab/metaWRAP/master/README.md",
      "technique": "header_analysis"
    }
  ]
}