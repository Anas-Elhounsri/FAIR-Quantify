{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/KIT-MBS/coconet"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-06-23T09:44:02Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-09-08T08:31:13Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "RNA Contact Prediction Using Coevolution and Convolutional Neural Network"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "type": "Text_excerpt",
        "value": "coconet or CoCoNet is a short name  for RNA contact prediction using **Co**evolution and **Co**nvolutional Neural **Net**work.\nIt combines state-of-the-art DCA algorithms and a shallow convolutional neural network co enhance RNA contact prediction from multiple sequence \nalignments of homologous RNAs. \nIt is implemented in Python and requires Python version 3.5 or later versions.\n"
      },
      "source": "https://raw.githubusercontent.com/KIT-MBS/coconet/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/KIT-MBS/coconet/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/KIT-MBS/coconet/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "KIT-MBS/coconet"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Introduction"
      },
      "source": "https://raw.githubusercontent.com/KIT-MBS/coconet/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/KIT-MBS/coconet/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2020 Multiscale Biomolecular Simulation\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/KIT-MBS/coconet/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "coconet"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "KIT-MBS"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 145418,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KIT-MBS/coconet/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependencies",
        "type": "Text_excerpt",
        "value": "**coconet** uses [pydca](https://github.com/KIT-MBS/pydca) to perform computations on the coevolutionary layer.\nYou need to install the most recent version (i.e., version 1.23 ) of [pydca](https://github.com/KIT-MBS/pydca). \nBy default the command \n```\npip install pydca\n```\ninstalls the required version. "
      },
      "source": "https://raw.githubusercontent.com/KIT-MBS/coconet/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "installation",
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 13:45:13",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 7
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "type": "Text_excerpt",
        "value": "The package can be manually downloaded or cloned using the command  \n```bash\ngit clone  https://github.com/KIT-MBS/coconet\n```"
      },
      "source": "https://raw.githubusercontent.com/KIT-MBS/coconet/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Computing weighted scores",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Once  **coconet** is downloaded change to the directory containing file \n`setup.py`  and execute on the command line\n\n```bash\npython -m coconet.main <msa_file> --verbose \n```\nwhere `<msa_file>` denotes FASTA formatted multiple sequence alignment (MSA) file of an \nRNA. Note that the first sequence in the MSA file should be the target/reference sequence. \nThe optional argument `--verbose` allows logging \nmessages printed on the screen. \n\nBy default **coconet** uses a single 3x3 matrix. However, its possible to specify\nthe matrix size on the command line using the optional argument `msize` as follows.\n```bash\npython -m coconet.main <msa_file> --msize 5 --verbose \n```\n\nThe allowed values of `msize` are 3, 5, and 7.  \n\nIn addition, **coconet**  can use two matrices: one for Watson-Crick nucleotide \npairs and the other for non-Watson-Crick ones. This can be achieved using the \noptional argument `--wc_and_nwc`. For example. \n\n```bash\npython -m coconet.main <msa_file>  --msize 7 --wc_and_nwc --verbose\n```\nThe above command executes  **coconet** using two 7x7 matrices.\n\nIn addition, convolution can be performed on top of plmDCA. To enable this feature, use the `--on_plm` optional argument.\nExample:\n```\npython -m coconet.main <msa_file>  --on_plm --num_threads 2 --max_iterations 5000 --verbose\n```\nThe optional arguments `--num_threads` and `--max_iterations` control the numbers of threads used (if OpenMP is supported) and \ngradient decent iterations, respectively. \n\nFinally, help messages can be prited out on the screen when the command \n```bash\npython -m coconet.main\n```\nis executed, i.e., by running the `coconet.main` module without any additional input from \nthe command line.\n"
      },
      "source": "https://raw.githubusercontent.com/KIT-MBS/coconet/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Training coconet",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Also, the network can be trained on the dataset using a five-fold cross validation procedure. For example, the command\n```bash\npython -m coconet.train run  --msize 5 --verbose \n```\ntrains the network using a 5x5 weight matrix using mean-field DCA as a coevolutionary layer. If plmDCA is desired, the `--on_plm` \noptional argument can be provided, for instance as\n```bash\npython -m coconet.train run --msize 7 --on_plm --num_threads 4 --verbose\n```\n\nTo see the available arguments to train the network, run the command\n```bash\npython -m coconet.train\n```\n"
      },
      "source": "https://raw.githubusercontent.com/KIT-MBS/coconet/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Precomputed co-evolutionary data",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Also, a precomputed co-evolutionary data for the RNA dataset and testset using CoCoNet and DCA-based algorithms is available in the directory `RAW_COEV_DATA_ALL`.  The average positive predictive values (PPV) from this data, e.g., for the RNA dataset \n`CoCoNet` cross-validation and DCA-based methods, can be computed using \n```bash\npython -m coconet.ppv compute --verbose \n```\nThis command computes average PPV at rank `L` (length of RNAs sequence). More information about computing PPV from \nraw co-evolutionary data can be obtained by running the help command as \n```bash\npython -m coconet.ppv  --help \n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/KIT-MBS/coconet/master/README.md",
      "technique": "header_analysis"
    }
  ]
}