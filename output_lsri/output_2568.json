{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation &amp; References",
        "parent_header": [
          "scAIDE"
        ],
        "type": "Text_excerpt",
        "value": "scAIDE: clustering of large-scale single-cell RNA-seq data reveals putative and rare cell types. NAR Genomics and Bioinformatics 2020.\r\n\r\nReferences:\r"
      },
      "source": "https://raw.githubusercontent.com/tinglabs/scAIDE/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/tinglabs/scAIDE"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-04-03T06:46:35Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-05-06T09:43:29Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "parent_header": [
          "scAIDE"
        ],
        "type": "Text_excerpt",
        "value": "\r\n- **AIDE**: autoencoder-imputed distance-preserved embedding (a novel deep learning architecture that learns a good representation of single-cell data accounting for biological noise)\r\n- **RPH-kmeans**: Random projection hashing based k-means algorithm (a novel algorithm which improves the detection of rare cell types)\r\n- **biological analysis**: Biological analytics code are packed into an R package, scAIDE.\r\n\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/tinglabs/scAIDE/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9877196216194574,
      "result": {
        "original_header": "scAIDE",
        "type": "Text_excerpt",
        "value": "> scAIDE is an unsupervised clustering framework for single-cell RNA-seq data. We revealed both putative and rare cell types in the 1.3 million neural cell dataset by global clustering. We obtained 64 clusters within 30 minutes, which were then mapped to 19 putative cell types. Three different subpopulations of neural stem/pregenitor cells were identified, each primed for different developmental stages. \r\n\r \n"
      },
      "source": "https://raw.githubusercontent.com/tinglabs/scAIDE/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/tinglabs/scAIDE/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/tinglabs/scAIDE/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "tinglabs/scAIDE"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "scAIDE"
      },
      "source": "https://raw.githubusercontent.com/tinglabs/scAIDE/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tinglabs/scAIDE/master/baseline/script/ZIFA_/sbatch.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tinglabs/scAIDE/master/baseline/script/scDeepCluster_/run_pretrained.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tinglabs/scAIDE/master/baseline/script/scDeepCluster_/run_default.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tinglabs/scAIDE/master/baseline/script/MAGIC_/sbatch.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tinglabs/scAIDE/master/sc_cluster/src/sbatch.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tinglabs/scAIDE/master/figures/Overview.png"
      },
      "source": "https://raw.githubusercontent.com/tinglabs/scAIDE/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tinglabs/scAIDE/master/scAIDE</h1>\n<blockquote>\n<p>scAIDE is an unsupervised clustering framework for single-cell RNA-seq data. We revealed both putative and rare cell types in the 1.3 million neural cell dataset by global clustering. We obtained 64 clusters within 30 minutes, which were then mapped to 19 putative cell types. Three different subpopulations of neural stem/pregenitor cells were identified, each primed for different developmental stages. </p>\n</blockquote>\n<h2>Overview</h2>\n<p><img alt="
      },
      "source": "https://raw.githubusercontent.com/tinglabs/scAIDE/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tinglabs/scAIDE/master/scAIDE</h1>\n<blockquote>\n<p>scAIDE is an unsupervised clustering framework for single-cell RNA-seq data. We revealed both putative and rare cell types in the 1.3 million neural cell dataset by global clustering. We obtained 64 clusters within 30 minutes, which were then mapped to 19 putative cell types. Three different subpopulations of neural stem/pregenitor cells were identified, each primed for different developmental stages. </p>\n</blockquote>\n<h2>Overview</h2>\n<p><img alt="
      },
      "source": "https://raw.githubusercontent.com/tinglabs/scAIDE/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "- Required Installations",
        "parent_header": [
          "scAIDE",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "\r\n- Python3: tensorflow 1.14, numpy, scipy, scikit_learn, tqdm, seaborn\r\n- R: parallel, gmp, ggplot2\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/tinglabs/scAIDE/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "- Install",
        "parent_header": [
          "scAIDE",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "- RPH-kmeans: please refer to [https://github.com/tinglabs/rph_kmeans](https://github.com/tinglabs/rph_kmeans) for details.\r\n- scAIDE (R package):\r\n\r\n\t```r\r\n\trequire(devtools)\r\n\tsetwd(\"where scAIDE folder is located\")\r\n\tinstall(\"scAIDE\")\r\n\t```\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/tinglabs/scAIDE/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/tinglabs/scAIDE/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "scAIDE"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "tinglabs"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 158094,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 20646,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 5665,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tinglabs/scAIDE/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 09:23:32",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 8
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Example Usage:",
        "parent_header": [
          "scAIDE"
        ],
        "type": "Text_excerpt",
        "value": "\r"
      },
      "source": "https://raw.githubusercontent.com/tinglabs/scAIDE/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "- Preprocessing",
        "parent_header": [
          "scAIDE",
          "Example Usage:"
        ],
        "type": "Text_excerpt",
        "value": "In Python, the input is configured as n cells (rows) by m genes (columns).\r\n\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/tinglabs/scAIDE/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "- AIDE",
        "parent_header": [
          "scAIDE",
          "Example Usage:"
        ],
        "type": "Text_excerpt",
        "value": "# Load data:\r\n# For small to medium size datasets (up to few hundred thousands of cells)\r\nimport pandas as pd\r\nimport numpy as np\r\n\r\n# Make sure that the final input is n cells (rows) by m genes (cols)\r\nsc_data = pd.read_csv(\"single_cell_dataset.csv\", index_col=0)\r\nsc_data = sc_data.values.astype('float32') # type = np.ndarray\r\n\r\n# Configuring AIDE parameters:\r\nfrom aide import AIDE, AIDEConfig\r\nconfig = AIDEConfig()\r\n# We may tune the following 4 parameters, but default values are usually sufficient.\r\nconfig.pretrain_step_num = 1000 # Pretrain step\r\nconfig.ae_drop_out_rate = 0.4 # Dropout rate\r\nconfig.alpha = 12.0 # A parameter that determines the portion of AE loss vs MDS encoder loss\r\nconfig.early_stop = True # Early stop (maximum step number = 20000, minimum step number = 4000)\r\n\r\n# Running AIDE:\r\nencoder = AIDE(name = \"sc_test\", save_folder = \"sc_test_folder\")\r\nsc_embedding = encoder.fit_transform(sc_data, config=config)\r\n\r\n# save embedding\r\nnp.savetxt(\"~/sc_embedding.txt\", sc_embedding)\r\n```\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/tinglabs/scAIDE/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "- RPH-kmeans",
        "parent_header": [
          "scAIDE",
          "Example Usage:"
        ],
        "type": "Text_excerpt",
        "value": "```python\r\nfrom rph_kmeans import RPHKMeans\r\n# In the case that n_clusters is already known:\r\nclt = RPHKMeans(n_init=10, n_clusters=10)\r\nclt_labels = clt.fit_predict(sc_embedding)\r\n\r\n# In the case that n_clusters is unknown: In order to automatically detect the number of clusters, \r\n# we implemented a weighted BIC value that determines the optimal k based on 'kneedle' point.\r\n\r\n# Important Note: Please set the parameter max_point to a smaller number for small datasets (i.e. less than 2000 cells). \r\n# The max_point defaults to 2000 cells, and the RPH algorithm stops when the reduced number of cells is below max_point.\r\n# In other words, RPH is not performed if the dataset is smaller than max_point.\r\n\r\nmax_point = 50 # Defaults to 2000\r\n\r\nfrom rph_kmeans import select_k_with_bic\r\nkmax = 30 # set the maximum number of k to explore\r\noptimal_k, _, _ = select_k_with_bic(sc_embedding, kmax=kmax, point_reducer_kwargs={'max_point':max_point})\r\n\r\nclt = RPHKmeans(n_init=10, n_clusters=optimal_k, max_point = max_point) # run RPH-kmeans with optimal_k to get the clustering results\r\n\r\nclt_labels = clt.fit_predict(sc_embedding)\r\n\r\n# Output results\r\nnp.savetxt(\"~/clt_labels.txt\", clt_labels)\r\n```\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/tinglabs/scAIDE/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "- Biological Analysis",
        "parent_header": [
          "scAIDE",
          "Example Usage:"
        ],
        "type": "Text_excerpt",
        "value": "```r\r\nlibrary(scAIDE)\r\n\r\n# load original data and clustering results:\r\nsc_data <- read.csv(\"single_cell_dataset.csv\", header = T, row.names = 1) # rows = genes, cols = cells\r\nsc_clusters <- read.table(\"clt_labels.txt\")$V1\r\n# Evaluate wilcox rank sum test and log fold change values\r\neval_gene_markers <- store_markers(gene_expression_data, sc_clusters, threads = 8)\r\ngene_names <- rownames(gene_expression_data)\r\n# returns the list of markers for each cluster, with your specified threshold\r\ncluster_markers_list <- curate_markers(eval_gene_markers, gene_names, wilcox_threshold=0.001, logfc_threshold=1.5)\r\n\r\n# Cell type assignment probability according to the markers in the database\r\n# panglao_marker_list: pre-processed list of markers for neural and immune cell types.\r\n# returns a cluster (rows) by cell types (cols) matrix\r\ncelltype_prob <- calculate_celltype_prob(cluster_markers_list, panglao_marker_list, type = \"jacc\")\r\ncelltype_id <- rowMaxs(celltype_prob)\r\n\r\n# Enrichment probability (based on hypergeometric distribution), this is to be compared with celltype_id to ensure that the number of marker genes detected is of statistical significance.\r\nn_genes <- nrow(gene_expression_data)\r\n# returns a cluster (rows) by cell types (cols) matrix, with p-value entries\r\nenrichment_prob <- calculate_enrichment_prob(cluster_markers_list, panglao_marker_list, n_genes, type = \"jacc\")\r\n\r\n######################################################################\r\n# Visualizing marker genes:\r\n# example marker list:\r\nselected_marker_genes <- c(\"SOX2\", \"ALDOC\", \"CCND2\", \"OLIG1\", \"OLIG2\")\r\ngene_expression_subset <- gene_expression_data[match(tolower(selected_marker_genes), tolower(rownmaes(gene_expression_data))), ]\r\n# Process the data for plots\r\nprocessed_markers <- process_marker_expression(gene_expression_subset, sc_clusters)\r\n# Specify the cell type order, and the gene order that you wish to plot\r\ncell_levels <- unique(sc_clusters)\r\ngene_levels <- selected_marker_genes\r\nmarker_plot <- plot_marker_expression(processed_markers, gene_levels=gene_levels, cell_levels=cell_levels)\r\n```\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/tinglabs/scAIDE/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "- Example results",
        "parent_header": [
          "scAIDE",
          "Example Usage:"
        ],
        "type": "Text_excerpt",
        "value": "</br>\r\nThe following figures show the results for the PBMC 68k dataset and the 1.3 million neural dataset. \r\n\r\n<p align=\"center\">\r\n  <img src=figures/pbmc.png alt=\"pbmc\" title=\"pbmc\" align=\"center\" height=\"300\">\r\n  <img src= figures/neural.png alt=\"neural\" title=\"neural\" align=\"center\" height=\"300\">\r\n</p>\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/tinglabs/scAIDE/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "- Scalability",
        "parent_header": [
          "scAIDE",
          "Example Usage:"
        ],
        "type": "Text_excerpt",
        "value": "\r"
      },
      "source": "https://raw.githubusercontent.com/tinglabs/scAIDE/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "File Illustration",
        "parent_header": [
          "scAIDE"
        ],
        "type": "Text_excerpt",
        "value": "- `baseline`: Codes and results of clustering experiments using baseline tools (e.g. DCA, MAGIC, scScope, scDeepCluster, ...).\r\n- `demo`: A demo of data preprocessing, embedding with AIDE and clustering with RPH-kmeans.\r\n- `scAIDE`: The R package of biological analysis.\r\n- `figures`: Figures of README\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/tinglabs/scAIDE/master/README.md",
      "technique": "header_analysis"
    }
  ]
}