{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/smetam/pylae"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-04-17T09:56:54Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-01-06T18:50:02Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Local ancestry estimation"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9967779838227544,
      "result": {
        "original_header": "Algorithm explanation",
        "type": "Text_excerpt",
        "value": "Using PyLAE with different genomes and/or sets of markers\nA different set of putative ancestral populations or a different set of markers require \nadditional processing. First, we need to collect a database of putatively un-admixed individuals. \nIf there is an existing validated set of ancestry informative features, these markers should run the \nadmixture in supervised mode. For each self-reported ancestry, samples should be clustered \nbased on their admixture profiles to identify subgroups within each self-reported ancestry. These \nsubgroups are then examined using information about the studied population's history, and the \nmost representative subset is retained. Then, putative ancestral populations (from 15 to 20 \nindividuals per group) are generated for every ancestry. The validity and stability of the ancestral \npopulations are evaluated using 1) PCA, 2) leave-one-out supervised admixture, and 3) by \napplication of supervised admixture to the original datase \nAlgorithm can be split into 4 stages:  \n* Data preparation \n* Calculating probabilities of assigning each SNP to populations using naive bayes algorithm.  \n* Choosing best population for each window with selected length (in SNPs).  \nIn this slog (p). Then this information (I) is summed in each window and the window \nis assigned to population with max I. Pop = argmax(I)\n* Calculating fraction of windows assigned to each population. \n"
      },
      "source": "https://raw.githubusercontent.com/smetam/pylae/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/smetam/pylae/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/smetam/pylae/master/notebooks/distances2probabilities.ipynb"
      },
      "source": "https://raw.githubusercontent.com/smetam/pylae/master/notebooks/distances2probabilities.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/smetam/pylae/master/notebooks/results_analysis.ipynb"
      },
      "source": "https://raw.githubusercontent.com/smetam/pylae/master/notebooks/results_analysis.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/smetam/pylae/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "smetam/pylae"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PyLAE"
      },
      "source": "https://raw.githubusercontent.com/smetam/pylae/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirements and installation:",
        "parent_header": [
          "PyLAE"
        ],
        "type": "Text_excerpt",
        "value": "* Python 3.5+ is required\n* bcftools\n* (optionally) plink / plink2\n\nInstalling python requirements:\n```bash\npip3 install -r requirements.txt\n```\n"
      },
      "source": "https://raw.githubusercontent.com/smetam/pylae/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Data preparation stage:",
        "parent_header": [
          "PyLAE",
          "Usage:"
        ],
        "type": "Text_excerpt",
        "value": "(will be performed by script itself in future)\n\n1. In case we have .bed .bim .fam files, we need to convert to vcf using plink:\n```bash\nplink2 --bfile <bfile_prefix> --recode vcf --out <vcf_file>\n```\n\n2. Calculate snp frequencies for population groups using bcftools. \nUser groups defined in file `configs/vcf_groups.txt`:\n\n```bash\ncat <vcf_file> | bcftools view -c 1 -Ou | bcftools +fill-tags -Ou -- -S configs/vcf_groups.txt -t AF | bcftools query -H -f \"%CHROM %POS %ID %AF_<group> %AF_Mediterranean %AF_NativeAmerican %AF_NorthEastAsian %AF_NorthernEuropean %AF_Oceanian %AF_SouthAfrican %AF_SouthEastAsian %AF_SouthWestAsian %AF_SubsaharanAfrican\\n\" > <group>.<sample>.txt\n```\n\nIn case vcf file is (b)gzipped use samtools tabix.\n"
      },
      "source": "https://raw.githubusercontent.com/smetam/pylae/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.993096992963713,
      "result": {
        "original_header": "Preprint about the method",
        "type": "Text_excerpt",
        "value": "https://www.biorxiv.org/content/10.1101/2020.11.13.380105v1\n \n"
      },
      "source": "https://raw.githubusercontent.com/smetam/pylae/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/smetam/pylae/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2021 Nikita Moshkov, Aleksandr Smetanin, Tatiana Tatarinova\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/smetam/pylae/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "pylae"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "smetam"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 36036,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 9008,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/smetam/pylae/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirements and installation:",
        "parent_header": [
          "PyLAE"
        ],
        "type": "Text_excerpt",
        "value": "* Python 3.5+ is required\n* bcftools\n* (optionally) plink / plink2\n\nInstalling python requirements:\n```bash\npip3 install -r requirements.txt\n```\n"
      },
      "source": "https://raw.githubusercontent.com/smetam/pylae/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "System requirements",
        "parent_header": [
          "PyLAE"
        ],
        "type": "Text_excerpt",
        "value": "Approximate runtime on a modern PC \\ server is 1 minute for 9 ancestral populations, 120,000 SNPs and a window size of 50. \nThe memory usage (resident) is about 100-110 megabytes (1 process for 1 sample at a time).\n"
      },
      "source": "https://raw.githubusercontent.com/smetam/pylae/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-06 15:33:07",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Script usage:",
        "parent_header": [
          "PyLAE",
          "Usage:"
        ],
        "type": "Text_excerpt",
        "value": "Currently supported modes: "
      },
      "source": "https://raw.githubusercontent.com/smetam/pylae/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Bayes:",
        "parent_header": [
          "PyLAE",
          "Usage:",
          "Script usage:"
        ],
        "type": "Text_excerpt",
        "value": "```bash\npython3 src/bayesian_pipeline.py --sample <sample_name> --admixtures <admixture_vectors_file> --window-len 50 <group>.<sample>.txt\n```"
      },
      "source": "https://raw.githubusercontent.com/smetam/pylae/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Bayes viterbi (used in the paper):",
        "parent_header": [
          "PyLAE",
          "Usage:",
          "Script usage:"
        ],
        "type": "Text_excerpt",
        "value": "```\npython3 src/bayes_viterbi.py --sample <sample_name> --admixtures <admixture_vectors_file> --window-len 50 <group>.<sample>.txt -m --viterbi-alpha 1\n\n```\n\n`-m` option is used to switch \"merged\" window mode (windows will overlap by 1 SNP)\n`--viterbi-alpha` is a regularization parameter, according to our tests with 1kG and generated data we recommend `10000` as a starting value for experiments.  \n"
      },
      "source": "https://raw.githubusercontent.com/smetam/pylae/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example pipeline:",
        "parent_header": [
          "PyLAE",
          "Usage:"
        ],
        "type": "Text_excerpt",
        "value": "```bash\nplink2 --bfile sample.txt_GENO --recode vcf --out sample\n\ncat sample.vcf | bcftools view -c 1 -Ou | bcftools +fill-tags -Ou -- -S vcf_groups.txt -t AF | bcftools query -H -f \"%CHROM %POS %ID %AF_QuechuaCandelaria_3 %AF_Mediterranean %AF_NativeAmerican %AF_NorthEastAsian %AF_NorthernEuropean %AF_Oceanian %AF_SouthAfrican %AF_SouthEastAsian %AF_SouthWestAsian %AF_SubsaharanAfrican\\n\" > \"population.sample.txt\"\n\npython3 src/bayesian_pipeline.py --window-len 50  \"population.sample.txt\"\n```\nAlso, you can find and run the example pipeline from the archive `example_pipeline.tar.gz`\n"
      },
      "source": "https://raw.githubusercontent.com/smetam/pylae/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Files explanation",
        "parent_header": [
          "PyLAE",
          "Usage:"
        ],
        "type": "Text_excerpt",
        "value": "As a result of the pipeline we get 3 files:\n1. `<group>_<mode>_<window-len>_predictions.csv`   \nCsv file with a list of most probable population in each window.\n\n2. `<group>_<mode>_<window-len>_snp_prob.tsv`   \nTsv (tab-separated) file with a list of all SNPs and probabilities that it came from each population.\n\n3. `<group>_<mode>_<window-len>_stats.csv`  \nCsv file with statistics that shows the fraction of windows assigned to each population.\n\nDepending on your needs you might need only one file or all of them.\n"
      },
      "source": "https://raw.githubusercontent.com/smetam/pylae/master/README.md",
      "technique": "header_analysis"
    }
  ]
}