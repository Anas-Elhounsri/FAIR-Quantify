{
  "acknowledgement": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Acknowledgements",
        "parent_header": [
          "Code"
        ],
        "type": "Text_excerpt",
        "value": "This work was supported by the CELL-MET Engineering Research Center NSF ECC-1647837.\n"
      },
      "source": "https://raw.githubusercontent.com/elejeune11/Sarc-Graph/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "application_domain": [
    {
      "confidence": 21.54,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/elejeune11/Sarc-Graph"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contact",
        "parent_header": [
          "Code"
        ],
        "type": "Text_excerpt",
        "value": "Don't hesitate to get in touch for additional information \n"
      },
      "source": "https://raw.githubusercontent.com/elejeune11/Sarc-Graph/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-12-29T06:55:00Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-02-27T22:01:36Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "segmentation, tracking, and analysis of sarcomeres in hiPSC-CMs"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.994266229840174,
      "result": {
        "original_header": "Sarc-Graph",
        "type": "Text_excerpt",
        "value": "Segmentation, tracking, and analysis of sarcomeres in hiPSC-CMs \n"
      },
      "source": "https://raw.githubusercontent.com/elejeune11/Sarc-Graph/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8803824427957437,
      "result": {
        "original_header": "Synthetic data",
        "type": "Text_excerpt",
        "value": "`geom_fcns.py`- Functions to define a baseline geometry of sarcomere chains.  \nThis figure explains schematically how the synthetic data is generated:\nhttps://github.com/elejeune11/Sarc-Graph/blob/main/explanatory_figures/render_synthetic_data.png \nThis figure shows the results of analyzing the synthetic data with SarcGraph:\nhttps://github.com/elejeune11/Sarc-Graph/blob/main/explanatory_figures/validate_synth.pdf\n \n"
      },
      "source": "https://raw.githubusercontent.com/elejeune11/Sarc-Graph/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8987488892165875,
      "result": {
        "original_header": "Real data",
        "type": "Text_excerpt",
        "value": "The real data (real_data_E1 and real_data_E2) was originally published with the paper ``An Adaptable Software Tool for Efficient Large-Scale Analysis of Sarcomere Function in hiPSC-Cardiomyocytes'' found at https://www.ahajournals.org/doi/full/10.1161/CIRCRESAHA.118.314505 .  \nThis figure shows example results of analyzing the real data with SarcGraph:\nhttps://github.com/elejeune11/Sarc-Graph/blob/main/explanatory_figures/Expt_res.pdf \n"
      },
      "source": "https://raw.githubusercontent.com/elejeune11/Sarc-Graph/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9504974464224318,
      "result": {
        "original_header": "Scripts",
        "type": "Text_excerpt",
        "value": "`run_code.py` - this file calls all other functions. To set up a movie `filename.avi` do the following:\n* create a directory named `filename` in the folder `ALL_MOVIES_RAW`\n* place `filename.avi`in the `ALL_MOVIES_RAW/filename` folder \n* add `filename` to the list `folder_name_list` in `run_code.py`\nNote: for .mov files, .mov must be specified in the call to `file_pre_processing()`, for arbitrary file types, alternative functions can be added to the `file_pre_processing()` script -- an example template is included in the code.  \nCore image and time series data processing steps:  \n`create_spatial_graph()` - create a spatial graph of the sarcomere chains in the field of view.  \n`timeseries_all()` - use the results of tracking to make a timeseries plot for each tracked sarcomere.  \n`compute_metrics()` - compute functional metrics for each movie, defined in our forthcoming paper. \nFunctions for data visualization and analysis: \n"
      },
      "source": "https://raw.githubusercontent.com/elejeune11/Sarc-Graph/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/elejeune11/Sarc-Graph/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/elejeune11/Sarc-Graph/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "elejeune11/Sarc-Graph"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "THIS REPOSITORY IS FOR LEGACY SARC-GRAPH"
      },
      "source": "https://raw.githubusercontent.com/elejeune11/Sarc-Graph/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9992349244948981,
      "result": {
        "original_header": "THIS REPOSITORY IS FOR LEGACY SARC-GRAPH",
        "type": "Text_excerpt",
        "value": "Please use the updated version: https://github.com/Sarc-Graph/sarcgraph \n"
      },
      "source": "https://raw.githubusercontent.com/elejeune11/Sarc-Graph/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9581529712094792,
      "result": {
        "original_header": "Sarc-Graph",
        "type": "Text_excerpt",
        "value": "presentation slides:\nhttps://docs.google.com/presentation/d/1GwJxtIdyIpoed4Asnn68aFbQIn92cGqY_fT7-BPT2GI/edit?usp=sharing \n**create a virtual environment with Anaconda and install all packages:** \nconda create -n sarc_graph_env python=3.6.10 \nconda activate sarc_graph_env \npip install -r requirements.txt \nthen, as a demo, you can try: \npython -i run_code.py \n(note: on Windows, \"conda activate sarc_graph_env\" may need to be replaced with \"CALL conda.bat activate sarc_graph_env\") \n(note: to create a virtual environment you will first need to install Anaconda https://docs.anaconda.com/anaconda/install/, and, on Windows, it may also be necessary to install visual studio https://visualstudio.microsoft.com/downloads/)\n \n"
      },
      "source": "https://raw.githubusercontent.com/elejeune11/Sarc-Graph/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8682681657523922,
      "result": {
        "original_header": "Synthetic data",
        "type": "Text_excerpt",
        "value": "This figure explains schematically how the synthetic data is generated:\nhttps://github.com/elejeune11/Sarc-Graph/blob/main/explanatory_figures/render_synthetic_data.png \n"
      },
      "source": "https://raw.githubusercontent.com/elejeune11/Sarc-Graph/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8279279664606602,
      "result": {
        "original_header": "Real data",
        "type": "Text_excerpt",
        "value": "The supplementary movies to the paper are also included here:\nhttps://github.com/elejeune11/Sarc-Graph/tree/main/Supplementary_Information \n"
      },
      "source": "https://raw.githubusercontent.com/elejeune11/Sarc-Graph/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9815285841622701,
      "result": {
        "original_header": "Python packages",
        "type": "Text_excerpt",
        "value": "All code is written in python -- the following packages are required: \n* av:\nhttps://pypi.org/project/av/\n* collections:\nhttps://docs.python.org/3/library/collections.html\n* csv:\nhttps://docs.python.org/3.6/library/csv.html\n* cv2:\nhttps://pypi.org/project/opencv-python/\n* glob:\nhttps://docs.python.org/3.6/library/glob.html\n* imageio:\nhttps://pypi.org/project/imageio/\n* matplotlib:\nhttps://matplotlib.org/3.1.1/users/installing.html\n* networkx:\nhttps://networkx.org/documentation/stable/install.html\n* numpy:\nhttps://numpy.org/install/\n* os:\nhttps://docs.python.org/3.6/library/os.path.html\n* pandas:\nhttps://pandas.pydata.org/pandas-docs/stable/getting_started/install.html\n* perlin-noise:\nhttps://pypi.org/project/perlin-noise/\n* pickle:\nhttps://docs.python.org/3.6/library/pickle.html\n* PIL:\nhttps://pypi.org/project/Pillow/\n* scipy:\nhttps://www.scipy.org/install.html\n* skimage:\nhttps://scikit-image.org/docs/dev/install.html\n* sklearn.gaussian_process:\nhttps://scikit-learn.org/stable/modules/generated/sklearn.gaussian_process.GaussianProcessRegressor.html\n* sys:\nhttps://docs.python.org/3/library/sys.html\n* trackpy:\nhttp://soft-matter.github.io/trackpy/v0.4.2/\n \n"
      },
      "source": "https://raw.githubusercontent.com/elejeune11/Sarc-Graph/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9868942167610909,
      "result": {
        "original_header": "Scripts",
        "type": "Text_excerpt",
        "value": "`run_all_tracking()` - track both z-disks and sarcomeres using the trackpy package:\nhttp://soft-matter.github.io/trackpy/v0.4.2/ \nSchematic of computing the approximate deformation gradient F:\nhttps://github.com/elejeune11/Sarc-Graph/blob/main/explanatory_figures/process_data.png \nExample output:\nhttps://github.com/elejeune11/Sarc-Graph/blob/main/explanatory_figures/overview_outputs.png\n  \n `visualize_segmentation()`: \n https://github.com/elejeune11/Sarc-Graph/blob/main/real_data_E1_results/visualize_segmentation_0001.png\n    \n `visualize_contract_anim_movie()`:\n https://github.com/elejeune11/Sarc-Graph/blob/main/real_data_E1_results/contract_anim.gif\n    \n `cluster_timeseries_plot_dendrogram()`:\n https://github.com/elejeune11/Sarc-Graph/blob/main/real_data_E1_results/dendrogram_DTW.pdf\n    \n `plot_normalized_tracked_timeseries()`:\n https://github.com/elejeune11/Sarc-Graph/blob/main/real_data_E1_results/timeseries_tracked_normalized.png\n  \n `plot_untracked_absolute_timeseries()`:\n https://github.com/elejeune11/Sarc-Graph/blob/main/real_data_E1_results/absolute_sarc_length_untracked.png\n    \n `compute_timeseries_individual_parameters()`:\n https://github.com/elejeune11/Sarc-Graph/blob/main/real_data_E1_results/histogram_time_constants.png\n    \n `compare_tracked_untracked()`:\n https://github.com/elejeune11/Sarc-Graph/blob/main/real_data_E1_results/length_compare_box_plots.png\n    \n `preliminary_spatial_temporal_correlation_info()`:\n https://github.com/elejeune11/Sarc-Graph/blob/main/real_data_E1_results/preliminary_spatial_analysis.png\n    \n `compute_F_whole_movie()`:\n https://github.com/elejeune11/Sarc-Graph/blob/main/real_data_E1_results/recovered_F_plot.png\n \n `analyze_J_full_movie()`: \n https://github.com/elejeune11/Sarc-Graph/blob/main/real_data_E1_results/recovered_F_plot_timeseries.png\n \n `visualize_F_full_movie()`: \n https://github.com/elejeune11/Sarc-Graph/blob/main/real_data_E1_results/F_anim.gif \n"
      },
      "source": "https://raw.githubusercontent.com/elejeune11/Sarc-Graph/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.9169068710902528,
      "result": {
        "original_header": "Sarc-Graph",
        "type": "Text_excerpt",
        "value": "python -i run_code.py \n"
      },
      "source": "https://raw.githubusercontent.com/elejeune11/Sarc-Graph/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8389080954131105,
      "result": {
        "original_header": "Scripts",
        "type": "Text_excerpt",
        "value": "`run_code.py` - this file calls all other functions. To set up a movie `filename.avi` do the following:\n* create a directory named `filename` in the folder `ALL_MOVIES_RAW`\n* place `filename.avi`in the `ALL_MOVIES_RAW/filename` folder \n* add `filename` to the list `folder_name_list` in `run_code.py`\nNote: for .mov files, .mov must be specified in the call to `file_pre_processing()`, for arbitrary file types, alternative functions can be added to the `file_pre_processing()` script -- an example template is included in the code.  \n"
      },
      "source": "https://raw.githubusercontent.com/elejeune11/Sarc-Graph/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/elejeune11/Sarc-Graph/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2020 elejeune11\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/elejeune11/Sarc-Graph/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Sarc-Graph"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "elejeune11"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 203695,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/elejeune11/Sarc-Graph/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "run",
    "download",
    "requirements",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 02:19:23",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ]
}