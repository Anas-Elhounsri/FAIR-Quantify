{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "sickle - A windowed adaptive trimming tool for FASTQ files using quality"
        ],
        "type": "Text_excerpt",
        "value": "Sickle doesn't have a paper, but you can cite it like this:\n\n    Joshi NA, Fass JN. (2011). Sickle: A sliding-window, adaptive, quality-based trimming tool for FastQ files \n    (Version 1.33) [Software].  Available at https://github.com/najoshi/sickle.\n"
      },
      "source": "https://raw.githubusercontent.com/najoshi/sickle/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/najoshi/sickle"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2011-02-09T01:18:45Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-03T20:19:29Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Windowed Adaptive Trimming for fastq files using quality"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9314699557824865,
      "result": {
        "original_header": "About",
        "type": "Text_excerpt",
        "value": "Most modern sequencing technologies produce reads that have\ndeteriorating quality towards the 3'-end and some towards the 5'-end\nas well. Incorrectly called bases in both regions negatively impact\nassembles, mapping, and downstream bioinformatics analyses. \nSickle is a tool that uses sliding windows along with quality and\nlength thresholds to determine when quality is sufficiently low to\ntrim the 3'-end of reads and also determines when the quality is\nsufficiently high enough to trim the 5'-end of reads.  It will also\ndiscard reads based upon the length threshold.  It takes the quality\nvalues and slides a window across them whose length is 0.1 times the\nlength of the read.  If this length is less than 1, then the window is\nset to be equal to the length of the read.  Otherwise, the window\nslides along the quality values until the average quality in the\nwindow rises above the threshold, at which point the algorithm\ndetermines where within the window the rise occurs and cuts the read\nand quality there for the 5'-end cut.  Then when the average quality\nin the window drops below the threshold, the algorithm determines\nwhere in the window the drop occurs and cuts both the read and quality\nstrings there for the 3'-end cut.  However, if the length of the\nremaining sequence is less than the minimum length threshold, then the\nread is discarded entirely (or replaced with an \"N\" record). 5'-end \ntrimming can be disabled. \nSickle supports three types of quality values: Illumina, Solexa, and\nSanger. Note that the Solexa quality setting is an approximation (the\nactual conversion is a non-linear transformation). The end\napproximation is close. Illumina quality refers to qualities encoded\nwith the CASAVA pipeline between versions 1.3 and 1.7.  Illumina\nquality using CASAVA >= 1.8 is Sanger encoded. \nNote that Sickle will remove the 2nd fastq record header (on the \"+\"\nline) and replace it with simply a \"+\". This is the default format for\nCASAVA >= 1.8. \nSickle also supports gzipped file inputs and optional gzipped outputs. By default,\nSickle will produce regular (i.e. not gzipped) output, regardless of the input.\nSickle also has an option to truncate reads with Ns at the first N position. \nThere is also a sickle.xml file included in the package that can be used to add sickle to your\nlocal [Galaxy](http://galaxy.psu.edu/) server.\n \n"
      },
      "source": "https://raw.githubusercontent.com/najoshi/sickle/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/najoshi/sickle/wiki"
      },
      "source": "https://raw.githubusercontent.com/najoshi/sickle/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/najoshi/sickle/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 95
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/najoshi/sickle/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "najoshi/sickle"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "sickle - A windowed adaptive trimming tool for FASTQ files using quality"
      },
      "source": "https://raw.githubusercontent.com/najoshi/sickle/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Building and Installing Sickle",
        "parent_header": [
          "sickle - A windowed adaptive trimming tool for FASTQ files using quality"
        ],
        "type": "Text_excerpt",
        "value": "To build Sickle, enter:\n\n    make\n\nThen, copy or move \"sickle\" to a directory in your $PATH.\n"
      },
      "source": "https://raw.githubusercontent.com/najoshi/sickle/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/najoshi/sickle/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Permission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use, copy,\nmodify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\nBE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\nACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/najoshi/sickle/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "sickle"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "najoshi"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 49127,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 1098,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/najoshi/sickle/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "najoshi",
          "type": "User"
        },
        "date_created": "2014-07-23T02:03:28Z",
        "date_published": "2014-07-23T22:16:11Z",
        "description": "Added -M option to have interleaved output file with \"N\" records for reads that did not pass filter.\nChanged -n option so that reads are truncated at the first N in the read, rather than discarded entirely.\nRefactored code.\nUpdated galaxy wrapper to reflect new options.\n",
        "html_url": "https://github.com/najoshi/sickle/releases/tag/v1.33",
        "name": "Version 1.33",
        "release_id": 447369,
        "tag": "v1.33",
        "tarball_url": "https://api.github.com/repos/najoshi/sickle/tarball/v1.33",
        "type": "Release",
        "url": "https://api.github.com/repos/najoshi/sickle/releases/447369",
        "value": "https://api.github.com/repos/najoshi/sickle/releases/447369",
        "zipball_url": "https://api.github.com/repos/najoshi/sickle/zipball/v1.33"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "najoshi",
          "type": "User"
        },
        "date_created": "2014-07-18T09:28:55Z",
        "date_published": "2014-07-18T22:55:37Z",
        "description": "Added gzipped output file capability, also added paired-end interleaved input file capability for galaxy wrapper\n",
        "html_url": "https://github.com/najoshi/sickle/releases/tag/v1.31",
        "name": "version 1.31",
        "release_id": 438842,
        "tag": "v1.31",
        "tarball_url": "https://api.github.com/repos/najoshi/sickle/tarball/v1.31",
        "type": "Release",
        "url": "https://api.github.com/repos/najoshi/sickle/releases/438842",
        "value": "https://api.github.com/repos/najoshi/sickle/releases/438842",
        "zipball_url": "https://api.github.com/repos/najoshi/sickle/zipball/v1.31"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "najoshi",
          "type": "User"
        },
        "date_created": "2014-05-08T00:02:44Z",
        "date_published": "2014-05-08T00:27:28Z",
        "description": "Bug fixes, documentation fixes\n",
        "html_url": "https://github.com/najoshi/sickle/releases/tag/v.1.29",
        "name": "version 1.29",
        "release_id": 309195,
        "tag": "v.1.29",
        "tarball_url": "https://api.github.com/repos/najoshi/sickle/tarball/v.1.29",
        "type": "Release",
        "url": "https://api.github.com/repos/najoshi/sickle/releases/309195",
        "value": "https://api.github.com/repos/najoshi/sickle/releases/309195",
        "zipball_url": "https://api.github.com/repos/najoshi/sickle/zipball/v.1.29"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirements",
        "parent_header": [
          "sickle - A windowed adaptive trimming tool for FASTQ files using quality"
        ],
        "type": "Text_excerpt",
        "value": "Sickle requires a C compiler; GCC or clang are recommended. Sickle\nrelies on Heng Li's kseq.h, which is bundled with the source.\n\nSickle also requires Zlib, which can be obtained at\n<http://www.zlib.net/>.\n"
      },
      "source": "https://raw.githubusercontent.com/najoshi/sickle/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 08:23:56",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 218
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "sickle - A windowed adaptive trimming tool for FASTQ files using quality"
        ],
        "type": "Text_excerpt",
        "value": "Sickle has two modes to work with both paired-end and single-end\nreads: `sickle se` and `sickle pe`.\n\nRunning sickle by itself will print the help:\n\n    sickle\n\nRunning sickle with either the \"se\" or \"pe\" commands will give help\nspecific to those commands:\n\n    sickle se\n    sickle pe\n"
      },
      "source": "https://raw.githubusercontent.com/najoshi/sickle/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Sickle Single End (`sickle se`)",
        "parent_header": [
          "sickle - A windowed adaptive trimming tool for FASTQ files using quality",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "`sickle se` takes an input fastq file and outputs a trimmed version of\nthat file.  It also has options to change the length and quality\nthresholds for trimming, as well as disabling 5'-trimming and enabling\ntruncation of sequences with Ns.\n"
      },
      "source": "https://raw.githubusercontent.com/najoshi/sickle/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Examples",
        "parent_header": [
          "sickle - A windowed adaptive trimming tool for FASTQ files using quality",
          "Usage",
          "Sickle Paired End (`sickle pe`)"
        ],
        "type": "Text_excerpt",
        "value": "    sickle se -f input_file.fastq -t illumina -o trimmed_output_file.fastq\n    sickle se -f input_file.fastq -t illumina -o trimmed_output_file.fastq -q 33 -l 40\n    sickle se -f input_file.fastq -t illumina -o trimmed_output_file.fastq -x -n\n    sickle se -t sanger -g -f input_file.fastq -o trimmed_output_file.fastq.gz\n    sickle se --fastq-file input_file.fastq --qual-type sanger --output-file trimmed_output_file.fastq\n"
      },
      "source": "https://raw.githubusercontent.com/najoshi/sickle/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Sickle Paired End (`sickle pe`)",
        "parent_header": [
          "sickle - A windowed adaptive trimming tool for FASTQ files using quality",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "`sickle pe` can operate with two types of input.  First, it can take\ntwo paired-end files as input and outputs two trimmed paired-end files\nas well as a \"singles\" file.  The second form starts with a single\ncombined input file of reads where you have already interleaved the\nreads from the sequencer.  In this form, you also supply a single\noutput file name as well as a \"singles\" file.  The \"singles\" file\ncontains reads that passed filter in either the forward or reverse\ndirection, but not the other.  Finally, there is an option (-M) to only \nproduce one interleaved output file where any reads that did not pass \nfilter will be output as a FastQ record with a single \"N\" (whose quality \nvalue is the lowest possible based upon the quality type), thus \npreserving the paired nature of the data.  You can also change the length \nand quality thresholds for trimming, as well as disable 5'-trimming and \nenable truncation of sequences with Ns.\n\n#### Examples\n\n    sickle pe -f input_file1.fastq -r input_file2.fastq -t sanger \\\n    -o trimmed_output_file1.fastq -p trimmed_output_file2.fastq \\\n    -s trimmed_singles_file.fastq\n\n    sickle pe -f input_file1.fastq -r input_file2.fastq -t sanger \\\n    -o trimmed_output_file1.fastq -p trimmed_output_file2.fastq \\\n    -s trimmed_singles_file.fastq -q 12 -l 15\n\n    sickle pe -f input_file1.fastq -r input_file2.fastq -t sanger \\\n    -o trimmed_output_file1.fastq -p trimmed_output_file2.fastq \\\n    -s trimmed_singles_file.fastq -n\n\n    sickle pe -c combo.fastq -t sanger -m combo_trimmed.fastq \\\n    -s trimmed_singles_file.fastq -n\n\n    sickle pe -t sanger -g -f input_file1.fastq -r input_file2.fastq \\\n    -o trimmed_output_file1.fastq.gz -p trimmed_output_file2.fastq.gz \\\n    -s trimmed_singles_file.fastq.gz\n\n    sickle pe -c combo.fastq -t sanger -M combo_trimmed_all.fastq\n\n    sickle pe --pe-file1 input_file1.fastq --pe-file2 input_file2.fastq --qual-type sanger \\\n    --output-pe1 trimmed_output_file1.fastq --output-pe2 trimmed_output_file2.fastq \\\n    --output-single trimmed_singles_file.fastq\n"
      },
      "source": "https://raw.githubusercontent.com/najoshi/sickle/master/README.md",
      "technique": "header_analysis"
    }
  ]
}