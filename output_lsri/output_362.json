{
  "acknowledgement": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Acknowledgements",
        "type": "Text_excerpt",
        "value": "<details>\n<summary>Acknowledgements</summary>\n<br>\n\nThis project has been developed by Guy Coleman and William Salter at the University of Sydney, Precision Weed Control\nLab. It was supported and funded by the Grains Research and Development Corporation (GRDC) and Landcare Australia as\npart of the University of Sydney's Digifarm project in Narrabri, NSW, Australia. We would like to thank all the farmers\nthat assisted in data collection, validation and feedback on the initial design.\n\n</details>\n"
      },
      "source": "https://raw.githubusercontent.com/geezacoleman/OpenWeedLocator/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "application_domain": [
    {
      "confidence": 12.1,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "format": "cff",
        "type": "File_dump",
        "value": "cff-version: 1.2.0\nmessage: \"If you use this software, please cite it as below.\"\nauthors:\n- family-names: \"Coleman\"\n  given-names: \"Guy\"\n  orcid: \"https://orcid.org/0000-0002-8808-2965\"\n- family-names: \"Salter\"\n  given-names: \"William\"\n  orcid: \"https://orcid.org/0000-0003-1653-5192\"\n- family-names: \"Walsh\"\n  given-names: \"Michael\"\ntitle: \"OpenWeedLocator (OWL)\"\nversion: 1.0.0\ndoi: 10.5281/zenodo.1234\ndate-released: 2021-08-24\nurl: \"https://github.com/geezacoleman/OpenWeedLocator\"\npreferred-citation:\n  type: article\n  authors:\n  - family-names: \"Coleman\"\n    given-names: \"Guy\"\n    orcid: \"https://orcid.org/0000-0002-8808-2965\"\n  - family-names: \"Salter\"\n    given-names: \"William\"\n    orcid: \"https://orcid.org/0000-0003-1653-5192\"\n  - family-names: \"Walsh\"\n    given-names: \"Michael\"\n  doi: \"10.1038/s41598-021-03858-9\"\n  journal: \"Scientific Reports\"\n  month: 9\n  start: 1 # First page number\n  end: 12 # Last page number\n  title: \"OpenWeedLocator (OWL): an open-source, low-cost device for fallow weed detection\"\n  issue: 170\n  volume: 12\n  year: 2022\n"
      },
      "source": "https://raw.githubusercontent.com/geezacoleman/OpenWeedLocator/main/CITATION.cff",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Citing OWL",
        "type": "Text_excerpt",
        "value": "<details>\n<summary>Citing OWL</summary>\n<br>\n\nOpenWeedLocator has been published in [Scientific Reports](https://www.nature.com/articles/s41598-021-03858-9). Please\nconsider citing the published article using the details below.\n\n```\n@article{Coleman2022,\nauthor = {Coleman, Guy and Salter, William and Walsh, Michael},\ndoi = {10.1038/s41598-021-03858-9},\nissn = {2045-2322},\njournal = {Scientific Reports},\nnumber = {1},\npages = {170},\ntitle = {{OpenWeedLocator (OWL): an open-source, low-cost device for fallow weed detection}},\nurl = {https://doi.org/10.1038/s41598-021-03858-9},\nvolume = {12},\nyear = {2022}\n}\n\n```\n\n</details>\n"
      },
      "source": "https://raw.githubusercontent.com/geezacoleman/OpenWeedLocator/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "References",
        "type": "Text_excerpt",
        "value": "<details>\n<summary>References</summary>\n<br>\n\n**Journal Papers**\nWoebbecke, D. M., Meyer, G. E., Von Bargen, K., Mortensen, D. A., Bargen, K. Von, and Mortensen, D. A. (1995). Color\nIndices for Weed Identification Under Various Soil, Residue, and Lighting Conditions. Trans. ASAE 38, 259\u2013269.\ndoi:https://doi.org/10.13031/2013.27838.\n\n**Blog Posts**\n[How to run a Raspberry Pi script at startup](https://www.makeuseof.com/how-to-run-a-raspberry-pi-program-script-at-startup/)\n\n[How to Run a Script at Boot on Raspberry Pi (with cron)](https://www.tomshardware.com/how-to/run-script-at-boot-raspberry-pi)\n\n[Install OpenCV 4 on Raspberry Pi 4 and Raspbian Buster](https://www.pyimagesearch.com/2019/09/16/install-opencv-4-on-raspberry-pi-4-and-raspbian-buster/)\n\n[How to solder](https://www.makerspaces.com/how-to-solder/)\n\n</details>\n"
      },
      "source": "https://raw.githubusercontent.com/geezacoleman/OpenWeedLocator/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Coleman, Guy and Salter, William and Walsh, Michael",
        "doi": "10.1038/s41598-021-03858-9",
        "format": "bibtex",
        "title": "{OpenWeedLocator (OWL): an open-source, low-cost device for fallow weed detection}",
        "type": "Text_excerpt",
        "url": "https://doi.org/10.1038/s41598-021-03858-9",
        "value": "@article{Coleman2022,\n    year = {2022},\n    volume = {12},\n    url = {https://doi.org/10.1038/s41598-021-03858-9},\n    title = {{OpenWeedLocator (OWL): an open-source, low-cost device for fallow weed detection}},\n    pages = {170},\n    number = {1},\n    journal = {Scientific Reports},\n    issn = {2045-2322},\n    doi = {10.1038/s41598-021-03858-9},\n    author = {Coleman, Guy and Salter, William and Walsh, Michael},\n}"
      },
      "source": "https://raw.githubusercontent.com/geezacoleman/OpenWeedLocator/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_of_conduct": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, religion, or sexual identity\nand orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the\n  overall community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or\n  advances of any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email\n  address, without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\nguy.coleman@sydney.edu.au.\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series\nof actions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.0, available at\nhttps://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct\nenforcement ladder](https://github.com/mozilla/diversity).\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at\nhttps://www.contributor-covenant.org/translations.\n"
      },
      "source": "https://raw.githubusercontent.com/geezacoleman/OpenWeedLocator/main/CODE_OF_CONDUCT.md",
      "technique": "file_exploration"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/geezacoleman/OpenWeedLocator"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Contributing to OWL\nFirstly, thank you for taking the time to contribute to the OWL project!\n\nTo make sure everyone is on the same page, has clarity in how to contribute and does so in a respectful and consistent manner we have put together the following set of guidelines. They are mostly just guidelines and if you feel changes are needed, identify them in a pull request to this document.\n\n## Table of Contents\n* [Code of conduct](#code-of-conduct)\n* [How to contribute](#how-to-contribute)\n\n## Code of Conduct\nThis project and everyone involved is governed by the [OWL Code of Conduct](CODE_OF_CONDUCT.md). By participating in the project you are expected to uphold this code. Please report any unacceptable behaviour to project admins.  \n\n## How to contribute\nThe best way to start contributing is to build an OWL for yourself! As you find opportunities for improvement, start logging them as issues here.\n\nThere are also a list of active projects that you can take on as whole projects or individual items within each project. These are summarised below. This is not a definitive list though, so if you have other ideas or suggestions just let us know.\n\n## Project List\n### [Project 1](https://github.com/geezacoleman/OpenWeedLocator/projects/1): Integrating position information (GPS, GLONASS etc.) information\nThis project seeks to incorporate position information from either a per-unit and low cost [GPS/GLONASS/Beidou sensor](https://uk.rs-online.com/web/p/gnss-gps-modules/9054630?cm_mmc=UK-PLA-DS3A-_-google-_-CSS_UK_EN_Semiconductors_Whoop-_-GNSS+%26+GPS+Modules_Whoop_OMNISerpNov-_-9054630&matchtype=&pla-532120398712&gclid=CjwKCAiAz--OBhBIEiwAG1rIOtxRjYlN5e7eCDyFBnrZ0RgSKc8NUHGi27VLPxOhBYGM_iqA3I6PkhoCOsUQAvD_BwE&gclsrc=aw.ds) or interpreting NMEA strings from tractor-mounted GPS sensors. Fortunately both seem to return the same standard of data, so supporting the variations should be straightforward.\n\nA substantial portion of the code is now complete but untested in [`gps-string-reading`](https://github.com/geezacoleman/OpenWeedLocator/tree/gps-string-reading)\n\n#### Benefits\n- on/off delay based on speed to reduce wastage and ensure weeds aren't missed\n- recording weed locations for weed mapping and density estimates\n- turn compensation\n\n### [Project 2](https://github.com/geezacoleman/OpenWeedLocator/projects/2): Optimising OWL enclosure design\nThe current enclosure has served a good job of supporting the initial OWL testing, but could be improved for efficiency in printing, camera mounting strength and dust/water resistance. This is a great project to start with if you have a background in design.\n\n**Benefits:**\n- reduced print area and cost\n- better dust and water resistance by covering the current camera hole\n- strong camera mounts\n\n### [Project 3](https://github.com/geezacoleman/OpenWeedLocator/projects/3): Upgrading OWL to Green-on-Green (in-crop) Weed Detection\nA highly sought after upgrade to the owl, this is the most complex project listed. It involves hardware, software and algorithm development but is quite an achievable set of tasks with significant benefits. The main areas of work include incorporating the Jetson Nano hardware, developing software to run and interpret object detection/image classification models and training initial algorithms on existing data.\n\n**Benefits:**\n- in-crop weed recognition\n- more computing power\n\n### [Project 4](https://github.com/geezacoleman/OpenWeedLocator/projects/4): Reducing image blur to improve forward travel speed\nThe highest priority project. Reducing image blur on the Raspberry Pi camera is likely a software issue, but requires dedicated testing of the current camera and developing settings that will ensure reduced image blur in a range of conditions. Reduced blur means higher forward travel speeds with fewer missed weeds.\n\n**Benefits:**\n- greater sensitivity to small weeds\n- higher forward travel speeds without missing weeds\n- better overall performance\n\n**If you have any other project ideas, please raise an issue and let us know**\n\n"
      },
      "source": "https://raw.githubusercontent.com/geezacoleman/OpenWeedLocator/main/CONTRIBUTING.md",
      "technique": "file_exploration"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-08-23T17:36:25Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-04T05:03:43Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "An open-source, low-cost, image-based weed detection device for in-crop and fallow scenarios."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9967372385377704,
      "result": {
        "original_header": "OpenWeedLocator",
        "type": "Text_excerpt",
        "value": "Welcome to the OpenWeedLocator (OWL) project, an opensource hardware and software weed detector that uses\nentirely off-the-shelf componentry, very simple green-detection algorithms (with capacity to upgrade to\nin-crop detection) and 3D printable parts. OWL integrates weed detection on a Raspberry Pi with a relay\ncontrol board or custom driver board, in a custom designed case so you can attach any 12V solenoid, relay, lightbulb or \ndevice for low-cost, simple and open-source site-specific weed control. Projects to date have seen OWL mounted on robots,\nvehicles and bicycles for spot spraying. For the latest ideas and news, check out the [Discussion](https://github.com/geezacoleman/OpenWeedLocator/discussions) tab.\n \n"
      },
      "source": "https://raw.githubusercontent.com/geezacoleman/OpenWeedLocator/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9183164614916524,
      "result": {
        "original_header": "News",
        "type": "Text_excerpt",
        "value": "**13-04-2024** - OpenWeedLocator now supports Raspberry Pi 5 and picamera2! Improvements include:\n* support for both picamera and picamera2\n* implementation of a `config/config.ini` approach to setting detection parameters\n* cleaner, more consistent code \n**10-04-2024** - v2.1 of the [OWL driver board released](https://github.com/geezacoleman/owl-driver-board).\n* simplifies assembly\n* more robust and improved performance\n \n"
      },
      "source": "https://raw.githubusercontent.com/geezacoleman/OpenWeedLocator/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9941907412451948,
      "result": {
        "original_header": "OpenWeedLocator (OWL): An open-source, low-cost device for fallow weed detection",
        "type": "Text_excerpt",
        "value": "This is the original OWL publication, released\nin [Scientific Reports (open access)](https://www.nature.com/articles/s41598-021-03858-9). A range of green detection\nalgorithms were tested including ExG (excess green 2g - r - b, developed by Woebbecke et al. 1995), a hue, saturation\nand value (HSV) threshold and a combined ExG + HSV algorithm. If you use the OWL in your research please consider citing\nthis publication.\n \n"
      },
      "source": "https://raw.githubusercontent.com/geezacoleman/OpenWeedLocator/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9614363305642808,
      "result": {
        "original_header": "Investigating image-based fallow weed detection performance on Raphanus sativus and Avena sativa at speeds up to 30 km/h",
        "type": "Text_excerpt",
        "value": "The performance of the OWL from 5 - 30 km/h with different cameras and on broadleaf and grass 'weeds' was tested and\npublished\nin [Computers and Electronics in Agriculture](https://www.sciencedirect.com/science/article/pii/S0168169923008074). The\ncurrent Raspberry Pi HQ Camera + latest software combination provided a recall of 74.8% at 5 km/h and 50.5 % at 30 km/h.\nRecall of up to 95.7% at 5 km/h was achieved by the global shutter Arducam AR0234. \n"
      },
      "source": "https://raw.githubusercontent.com/geezacoleman/OpenWeedLocator/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9166735918227301,
      "result": {
        "original_header": "Software",
        "type": "Text_excerpt",
        "value": "The project will eventually support the use of the two major embedded computing devices, the Raspberry Pi (models 3B+, 4 and 5)\nand the Jetson Nano/Jetson Xavier NX for possible green-on-green detection with deep learning algorithms. At\npresent, just the details on setting up the Raspberry Pi 3B+/4/5 are provided below. There are two options for\ninstallation.  \nFor the first, all you'll need to do is download the disk image file (vX.X.X-owl.img) and flash it to an\nSD card. The second method is more in depth, but takes you through the entire process from beginning to end. If you're\nlooking to learn about how everything works, take some time to work through this process. \n>\u26a0\ufe0f**NOTE**\u26a0\ufe0f 08/05/2024 - OWL transitioned from `picamera` to `picamera2` support. The v1.0.0 disk image below (Buster) does not\nsupport `picamera2` and will not work on the Raspberry Pi 5 nor with the recent camera releases. We strongly recommend\nusing the most up to date version of Raspbian with the latest OWL software. \n>\u26a0\ufe0f**NOTE**\u26a0\ufe0f 17/03/2023 - running of the OWL changed from using `greenonbrown.py` to `owl.py`. This\nensures better cross compatibility with GoG algorithms. It improves the modularity of the system.\n \n"
      },
      "source": "https://raw.githubusercontent.com/geezacoleman/OpenWeedLocator/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9147861185398763,
      "result": {
        "original_header": "Quick Method",
        "type": "Text_excerpt",
        "value": "For this method you'll need access to: \n* Desktop/laptop computer\n* Micro SD card reader\n* Internet with large data capacity and high speed (WARNING: the image file is large, and downloading will take time and\n  use up a substantial quantity of your data allowance if you have are on a limited plan) \n<details>\n<summary><b>Quick method for software installation</b></summary>\n<br> \n>\u26a0\ufe0f**NOTE**\u26a0\ufe0f The v1.0.0-owl.img file contains the original software and we strongly recommend updating using the process\nbelow. It also includes the deprecated naming of `greenonbrown.py` instead of `owl.py`. If you do not update the\nsoftware, be aware that you will need to run `greenonbrown.py` instead. \nOnce the SD card is inserted into the slot of the Raspberry Pi, power everything up and wait for the beep. If you hear\nthe beep, you're ready to go and start focusing the camera. \nThe disk image that you downloaded is likely to be a few versions behind the most recent. We only provide images of the\nmost major updates. So to update the OWL software, just run the follow these steps. \n1. Have the OWL powered on with screen, keyboard and mouse connected. You should see a desktop with the OWL logo.\n2. Press CTRL + ALT + T to open a Terminal window or click the black icon with blue line and >_ symbol.\n3. Once the Terminal window is open, make sure you are working in the `owl` virtual environment by running:\n```\nowl@raspberrypi:~ $ workon owl\n(owl) owl@raspberrypi:~ $\n```\n \nOnce this is complete your software will be up to date and you can move on to focusing the camera. \nThe final step in the process is to make sure the camera is correctly focused for the mounting height. With the latest\nsoftware, when you run `owl.py --focus` a sharpness (i.e. least blurry) estimation is provided on the video feed. The\nalgorithm determines how sharp an image is, so the higher the value the better. A single script is provided to make\nfocusing as easy as possible. Simply run: \nThe PID is the important part, it's the ID number for the `owl.py` program. In this case it is `515`, but it is likely\nto be different on your OWL. \nNow you'll need to launch `owl.py` manually with the video feed visible. To do this use the Terminal window and type the\nfollowing commands:\n```\n(owl) owl@raspberrypi:~ $ ~/owl/./owl.py --show-display\n```\n \nThis will bring up a video feed you can use to visualise the OWL detector and also use it to focus the camera. Once\nyou're happy with the focus, press Esc to exit. \n### OPTIONAL Step 6 - enabling UART for status LED \nThis is just the cherry on top and non-essential to correct operation of the OWL but to make sure the status LED you\nconnected earlier blinks correctly the GPIO UART needs to be enabled. \nIn the `greenonbrown.py` file there is a parameter `headless` which determines if a video is shown. If set to `True` a\nvideo feed is NOT displayed and the system will operate whenever it is powered on. If it is set to `False` a video feed\nwill be displayed. To change this parameter, scroll to the bottom of `greenonbrown.py` and find the\nline `headless=True`. Change as desired. \n>\u26a0\ufe0f**NOTE**\u26a0\ufe0f `headless` must be set to `True` for operation without a screen. If a screen is not attached\nbut `headless=False` the Raspberry Pi will not boot correctly and the OWL software will not run. \n>\u26a0\ufe0f**BUG ALERT**\u26a0\ufe0f There is a known bug with this version where the script will not run if you are running it outside of\nthe `owl` directory. If you enocunter this error, `cd` into the `owl` directory and run the code again. \n"
      },
      "source": "https://raw.githubusercontent.com/geezacoleman/OpenWeedLocator/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9121391682742347,
      "result": {
        "original_header": "Detailed Method",
        "type": "Text_excerpt",
        "value": "**IMPORTANT**: *Suitable for the Raspberry Pi 5 and Bookworm Raspberry Pi OS.* \nThis setup approach may take a little longer (aproximately 1 hour total) than the quick method, but you'll be much better\ntrained in the ways of OWL and more prepared for any problem solving, upgrades or changes in the future. You'll also\ndownload and use the latest software that hasn't been saved in the .img file yet. In the process you'll learn about\nPython environments, install Python packages and set it all up to run on startup. To get this working you'll need access\nto: \n#### Step 1a - Rasperry Pi OS\nBefore powering up the Raspberry Pi, you'll need to install the Raspian operating system (just like Windows/MacOSX for\nlaptops) on the new SD card. This is done using the same process as the quick method used to flash the premade owl.img\nfile, except you'll be doing it with a completely new and untouched version of Raspbian.  \nFrom your own computer, download and flash the latest **64-bit** version of Raspian from the official \n[Raspberry Pi website](https://www.raspberrypi.com/software/operating-systems/#raspberry-pi-os-64-bit) to the empty SD card. \nThe official [Raspberry Pi Imager](https://www.raspberrypi.com/software/) is a good piece of software to use. \nLeave the hostname as default. To simplify setup, you can specify the wifi network settings. Set the username to 'owl'\nand choose a password. \nAlternatively, you can SSH into your OWL from a separate device and install it remotely. A good guide on how to do that is \navailable [here](https://www.makeuseof.com/how-to-ssh-into-raspberry-pi-remote/).  \n##### First boot\nOn the first boot you may be asked to set country, timezone, keyboard, connect to wifi and look for updates among other\nthings. If you haven't already set the username, set it to 'owl' and choose a password. Uninstall the unused browser - \nthis will save space on the Pi. Finally, you will be asked to restart the pi. \n##### Opening terminal\nAfter the restart, open up Terminal. You can press CTRL + ALT + T, or click the icon in the top left with the `>_` \nsymbol. The instructions that follow are a blend of those available from \n[PyImageSearch](https://pyimagesearch.com/2019/09/16/install-opencv-4-on-raspberry-pi-4-and-raspbian-buster/) \nand [QEngineering](https://qengineering.eu/bookworm.html) \n>\u26a0\ufe0f**NOTE**\u26a0\ufe0f All commands below are provided for easy copy/paste. When using terminal you should see `owl@raspberrypi:~ $`\n> at the start of each line and `(owl) owl@raspberrypi:~ $` when operating within the `owl` virtual environment. Pay very close\n> attention to the presence/absence of `(owl)` in front of each line, as this can make/break installation. \n>\u26a0\ufe0f**NOTE**\u26a0\ufe0f If you use this method, you can finish the installation here. The following steps just go through what is \n> in the `owl_setup.sh` script step-by-step. We recommend the step-by-step approach if you want to become more familiar\n> with how the OWL works. \n>\u26a0\ufe0f**WARNING**\u26a0\ufe0f using `rpi-update` will update to the latest kernel and drivers. This is to fix an issue with image component\norder. The problem should eventually be merged into normal `apt-get update && upgrade`. This notice will be removed then. \n>\u26a0\ufe0f**WARNING**\u26a0\ufe0f It is ESSENTIAL that `(owl)` is present at the start of each line in terminal for this section. The `(owl)`\n> indicates that you are within the `owl` virtual environment and that these Python packages will be installed and accessible\n> within this environment. Run `workon owl` to ensure you are in the `owl` environment.\n```commandline\nworkon owl\n```\nNow that you are in the `owl` virtual environment we can begin installing packages.\nBASH18*\nThis should have successfully installed OpenCV into the `owl` virtual environment. You can double check by quickly starting a\nPython session at the command line:\nBASH19*\nThis will open up an interactive Python session (indicated by >>>) from which you should type:\n \nIf both of these complete without error, then you've successfully set up the virtual environment and installed OpenCV. \n### Step 4 - Installing the OWL Python dependencies\nDependencies are Python packages on which the code relies to function correctly. With a range of versions and possible\ncomptibility issues, this is the step where issues might come up. There aren't too many packages, but please make sure\neach and every module in the requirements.txt file has been installed correctly. These include: \n```commandline\npython\n```\nPython should start up an interactive session; type each of these in and make sure you don't get any errors.\n```commandline\n>>> import cv2\n>>> import numpy\n>>> import gpiozero\n>>> import pandas\n```\nVersion numbers can be checked with:\n```commandline\n>>> print(package_name_here.__version__) ## this is a generic example - add the package where it says package_name_here\n>>> print(cv2.__version__)\n>>> exit()\n```\nIf any errors appear, you'll need to go back and check that the modules above have (1) been installed into the owl\nvirtual environment, (2) that Python was started in the owl environment, and/or (3) they all installed correctly. Once\nthat is complete, exit Python and continue with the installation process.\n \nAfter they have been made executable, the `owl.py` needs to be launched on startup so each time the Raspberry Pi is\npowered on, the detection systems starts. The easiest way to do this is by using cron, a scheduler for starting code. \nWe need to add the `owl_boot.sh` file to the schedule so that it launches on boot. The `owl_boot.sh` file is \nfairly straightforward. It's what's known as a [bash script](https://ryanstutorials.net/bash-scripting-tutorial/bash-script.php) which is just a text file that\ncontains commands we would normally enter on the command line in Terminal. \nTo add this to the list of cron jobs, you'll need to edit it as a root user:\n```commandline\nsudo crontab -e\n```\nSelect `1. /bin/nano editor`, which should bring up the crontab file. At the base of the file add this text:\n```\n@reboot /usr/local/bin/owl_boot_wrapper.sh > /home/launch.log 2>&1 \n```\n \nOnce you've added that line, you'll just need to save the file and exit. In the nano editor just press Ctrl + X, then Y\nand finally press Enter to agree to save and exit. \n>\u26a0\ufe0f**NOTE**\u26a0\ufe0f *Cameras with automatic focus such as the Raspberry Pi Camera Module 3 will be automatically focused to 1.2m \ndistance. The following guide is useful for the HQ and Global Shutter cameras which require manual focusing.* \nThe final step in the process is to make sure the camera is correctly focused for the mounting height. With the latest\nsoftware, when you run `owl.py --focus` a sharpness (i.e. least blurry) estimation is provided on the video feed. The\nalgorithm determines how sharp an image is, so the higher the value the better. A single script is provided to make\nfocusing as easy as possible. Simply run:\n```commandline\ncd ~/owl\n```\nBASH35*\n \nThe moment of truth. Shut the Raspberry Pi down and unplug the power. This is where you'll need to reconnect the camera\nand all the GPIO pins/power in the OWL unit if they have been disconnected. Once everything is connected again (double\ncheck the camera cable is inserted or this won't work), reconnect the power and wait for a beep! \nIf you hear a beep, grab something green and move it under the camera. If the relays start clicking (the Official OWL \nHAT uses transistors and will not click - look for the lights) and lights come on, congratulations, you've successfully \nset the OWL up! If not, check the troubleshooting chart below and see if you can get it fixed. Raise an issue and get in touch\nif you're not sure how to proceed. \n<details>\n<summary><b>Optional Step - installing RTC and setting the time</b></summary>\n<br>\nThe optional real time clock module can be set up by following the [detailed instructions](https://learn.adafruit.com/adding-a-real-time-clock-to-raspberry-pi/set-up-and-test-i2c) provided by Adafruit. This is a quick process that should take less than 10 minutes. Note that an internet connection is required to set the time initially, however after this the time will be held on the clock module.\n</details>\n \n"
      },
      "source": "https://raw.githubusercontent.com/geezacoleman/OpenWeedLocator/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8937137751289888,
      "result": {
        "original_header": "Changing detection settings",
        "type": "Text_excerpt",
        "value": "<details>\n<summary>Instructions for changing detection settings</summary>\n<br>\nChanging detection settings is now easier by using a specific config file.  \nWhile we recommend tuning detection parameters to your specific environment, we have provided three sensitivity levels to \nget you started. \n\n### Command line flags\nCommand line flags are let you specify options on the command line within the Terminal window. It means you don't have\nto open up the code and make changes directly. OWL now supports the use of flags for some parameters. To read a\ndescription of all flags available type `--help`:\n```commandline\nusage: owl.py [-h] [--input] [--show-display] [--focus]\n  --input               path to image directory, single image or video file\n  --show-display        show display windows\n  --focus               focus the camera\n```\n \nThese are the various system, data collection and detection settings that can be changed. They are defined further below.\n```ini\n[System]\nalgorithm = exhsv\n# operate on a directory, single image or video\ninput_file_or_directory =\nrelay_num = 4\nactuation_duration = 0.15\ndelay = 0\n\n[Visualisation]\nshow_display = False\nfocus = False\nimage_loop_time = 5\n\n[Camera]\nresolution_width = 416\nresolution_height = 320\nexp_compensation = -2\n\n[GreenOnGreen]\n# parameters related to green-on-green detection\nmodel_path = models\nconfidence = 0.5\nclass_filter_id = None\n\n[GreenOnBrown]\n# parameters related to green-on-brown detection\nexgMin = 25\nexgMax = 200\nhueMin = 39\nhueMax = 83\nsaturationMin = 50\nsaturationMax = 220\nbrightnessMin = 60\nbrightnessMax = 190\nmin_detection_area = 10\ninvert_hue = False\n\n[DataCollection]\n# all data collection related parameters\n# image collection, sample method include: 'bbox' | 'square' | 'whole'. Set sample_method=None\nsample_images = False\nsample_method = whole\nsample_frequency = 30\n# toggle saving to the device or external drives only\nenable_device_save = False\nsave_directory = output\n# set to True to disable weed detection for data collection only\ndisable_detection = False\n# enable video recording\nrecording = False\nlog_fps = False\ncamera_name = cam1\n\n[Relays]\n# defines the relay ID (left) that matches to a boardpin (right) on the Pi.\n# Only change if you rewire/change the relay connections.\n0 = 13\n1 = 15\n2 = 16\n3 = 18\n``` \n|       **Parameter**       |                  **Options**                   |                                                                                                                                                                 **Description**                                                                                                                                                                  |\n|:-------------------------:|:----------------------------------------------:|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------:|\n|        **System**         |                                                |                                                                                                                                                                                                                                                                                                                                                  |\n|        `algorithm`        | Any of: `gog`,`exg`,`exgr`,`exgs`,`exhu`,`hsv` | Changes the selected algorithm. Most sensitive: 'exg', least sensitive/most precise (least false positives): 'exgr', 'exhu', 'hsv'. `gog` will activate a provided Green-on-Green detection algorithm, a .tflite model in the models folder. Ensure you have connected and installed a Google Coral using the procedure [here](#green-on-green). |\n|   `actuation_duration`    |              Any float (decimal)               |                                                                                                                                           Changes the length of time for which the relay is activated.                                                                                                                                           |\n| `input_file_or_directory` |  path to a image, video or directory of media  |                                                                                                                            Will iterate over each image at a default 5 FPS, or over a directory of images or videos.                                                                                                                             |\n|        `relay_num`        |                    integer                     |                                         Change the number of activation 'lanes' and therefore the number of relays activated. Set to 1 for a single relay. If <4, then the first boardpins will be used by default. More than four will require additional hardware and changes to the [Relays] mapping.                                         |\n|          `delay`          |                   Any float                    |                                                                                                                                              Delay between detection and actuation. Defaults to 0.                                                                                                                                               |\n|     **Visualisation**     |                                                |                                                                                                                                                                                                                                                                                                                                                  |\n|     `image_loop_time`     |                    Integer                     |                                                                                                              How long (ms) to wait on each image when looping over the same image if a single image file or directory is provided.                                                                                                               |\n|        **Camera**         |                                                |                                                                                                                                                                                                                                                                                                                                                  |\n|    `resolution_width`     |                    Integer                     |                                                                                                                                                                                                                                                                                                                                                  |\n|    `resolution_height`    |                    Integer                     |                                                                                                                                                                                                                                                                                                                                                  |\n|    `exp_compensation`     |            Integer between -8 and 8            |                                                                                                      Change the target exposure setting for the exposure algorithm. Defaults to -2, preferencing darker settings for faster shutter speeds.                                                                                                      |\n|     **GreenOnGreen**      |                                                |                                                                                                                                                                                                                                                                                                                                                  |\n|       `model_path`        |                      Path                      |                                                                                                                                                             A path to the model file                                                                                                                                                             |\n|       `confidence`        |                                                |                                                                                                                                       The cutoff confidence value for a detection. Defaults to 0.5 or 50%.                                                                                                                                       |\n|     `class_filter_id`     |                    Integer                     |                                                                                      Which classes to filter and target. For example, using a out-the-box COCO model, you may want to only detect a specific class. Enter that specific class integer here.                                                                                      |\n|     **GreenOnBrown**      |                                                |                                                                                                                                                                                                                                                                                                                                                  |\n|         `exgMin`          |         Any integer between 0 and 255          |                                                                                                           Provides the minimum threshold value for the exg algorithm. Usually leave between 10 (very sensitive) and 25 (not sensitive)                                                                                                           |\n|         `exgMax`          |         Any integer between 0 and 255          |                                                                                                                                       Provides a maximum threshold for the exg algorithm. Leave above 180.                                                                                                                                       |\n|         `hueMin`          |         Any integer between 0 and 128          |                                                                                                Provides a minimum threshold for the hue channel when using hsv or exhsv algorithms. Typically between 28 and 45. Increase to reduce sensitivity.                                                                                                 |\n|         `hueMax`          |         Any integer between 0 and 128          |                                                                                          Provides a maximum threshold for the hue (colour hue) channel when using hsv or exhsv algorithms. Typically between 80 and 95. Decrease to reduce sensitivity.                                                                                          |\n|      `saturationMin`      |         Any integer between 0 and 255          |                                                                                    Provides a minimum threshold for the saturation (colour intensity) channel when using hsv or exhsv algorithms. Typically between 4 and 20. Increase to reduce sensitivity.                                                                                    |\n|      `saturationMax`      |         Any integer between 0 and 255          |                                                                                  Provides a maximum threshold for the saturation (colour intensity) channel when using hsv or exhsv algorithms. Typically between 200 and 250. Decrease to reduce sensitivity.                                                                                   |\n|      `brightnessMin`      |         Any integer between 0 and 255          |                                                                   Provides a minimum threshold for the value (brightness) channel when using hsv or exhsv algorithms. Typically between 10 and 60. Increase to reduce sensitivity particularly if false positives in shadows.                                                                    |\n|      `brightnessMax`      |         Any integer between 0 and 255          |                                                                 Provides a maximum threshold for the value (brightness) channel when using hsv or exhsv algorithms. Typically between 190 and 250. Decrease to reduce sensitivity particularly if false positives in bright sun.                                                                 |\n|   `min_detection_area`    |                    Integer                     |                                                                                                                                                   The minimum area for which to detect a weed.                                                                                                                                                   |\n|       `invert_hue`        |                    Boolean                     |                                                                                                                 True/False, inverts the detected hue from everything within the thresholds to everything outside the thresholds.                                                                                                                 |\n|    **DataCollection**     |                                                |                                                                                                                                                                                                                                                                                                                                                  |\n|      `sample_images`      |             Boolean: True or False             |                                                                                                                      Enables or disables image data collection. Defaults to False. Set to True to start collecting images.                                                                                                                       |\n|      `sample_method`      |     Choose from 'bbox', 'square', 'whole'      |                                                                                                            If sample_method=None, sampling is deactivated. Do not leave on for long periods or SD card will fill up and stop working.                                                                                                            |\n|    `sample_frequency`     |              Any positive integer              |                                                                                                          Changes how often (after how many frames) image sampling will occur. If sampleFreq=60, images will be sampled every 60 frames.                                                                                                          |\n|    `disable_detection`    |             Boolean: True or False             |                                                                                  Disable detection when running data collection. This will reduce the workload on the Pi and increase frame rate. Useful if using the OWL for dedicated image data collection.                                                                                   |\n|     `save_directory`      |             Path to save directory             |                                                                                                            Set where you want the images saved. If you insert a USB and would like to save images to it, put the path for that here.                                                                                                             |\n|   `enable_device_save`    |               Boolean: True or False               |                                                                                                  Enable saving to the device itself. This is to avoid accidentally filling the device with collected data when it was intended for a USB drive.                                                                                                  |\n|        `recording`        |             Boolean: True or False             |                                                                                                                                                   True/False - turn video recording on or off.                                                                                                                                                   |\n|         `log_fps`         |             Boolean: True or False             |                                                                                                                                                               Save FPS to a file.                                                                                                                                                                |\n|       `camera_name`       |                   Any string                   |                                                                                                                          Changes the save name if recording videos of the camera. Ignore - only used if recording data.                                                                                                                          |\n|        **Relays**         |             Integer/GPIO Boardpin              |                                                                                                                                               Maps a relay number to a boardpin on the GPIO header                                                                                                                                               | \n"
      },
      "source": "https://raw.githubusercontent.com/geezacoleman/OpenWeedLocator/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9540920780891858,
      "result": {
        "original_header": "Legacy detection settings",
        "type": "Text_excerpt",
        "value": "Command line flags are let you specify options on the command line within the Terminal window. It means you don't have\nto open up the code and make changes directly. OWL now supports the use of flags for some parameters. To read a\ndescription of all flags available type:\n```\n(owl) owl@raspberrypi:~ $./owl.py --help\nusage: owl.py [-h] [--input] [--show-display] [--focus] [--recording] [--algorithm {exg,nexg,exgr,maxg,exhsv,hsv}] [--framerate [10-120]]\n                       [--exposure-mode {off,auto,nightpreview,backlight,spotlight,sports,snow,beach,verylong,fixedfps,antishake,fireworks}]\n                       [--awb-mode {off,auto,sunlight,cloudy,shade,tungsten,fluorescent,incandescent,flash,horizon}] [--sensor-mode [0-3]]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --input               path to image directory, single image or video file\n  --show-display        show display windows\n  --focus               focus the camera\n  --recording           record video\n  --algorithm {exg,nexg,exgr,maxg,exhsv,hsv}\n  --framerate [10-120]  set camera framerate between 10 and 120 FPS. Framerate will depend on sensor mode, though setting framerate takes precedence over sensor_mode, For example sensor_mode=0 and framerate=120 will reset the\n                        sensor_mode to 3.\n  --exp-mode {off,auto,nightpreview,backlight,spotlight,sports,snow,beach,verylong,fixedfps,antishake,fireworks}\n                        set exposure mode of camera\n  --awb-mode {off,auto,sunlight,cloudy,shade,tungsten,fluorescent,incandescent,flash,horizon}\n                        set the auto white balance mode of the camera\n  --sensor-mode [0-3]   set the sensor mode for the camera between 0 and 3. Check Raspberry Pi camera documentation for specifics of each mode\n  --exp-compensation [-24 to 24]\n                        set the exposure compensation (EV) for the camera between -24 and 24. Raspberry Pi cameras seem to overexpose images preferentially.\n```\n \nFlag | Usage | Description\n:-------------: | :-------------: | :-------------:\n--input | Specify the path to an image directory, single image or video file. | Use this if you want to run the software on images or videos. Useful when testing new algorithms or setting up the software without a camera connection.\n*legacy* --video-file | NOTE: this has been replaced by `--input` fag. Specify the path to the video file. | This is used when a video file is run instead of the live feed from a camera. It is mostly used in testing new algorithms. If this is not included, a connected camera will be used instead.\n--show-display | If flag is present, this will return True | When this flag is included, video feeds and threshold adjustments will appear. Without the flag, the OWL will run `headless` with no display. This flag replaces the `Headless=True` variable in the `owl.py` file.\n--focus | If the flag is present, focusing mode is activated. | WHen the flag is included, a Fast Fourier Transform is used to estimate image blurriness. The mean of this value is displayed on the video feed. High values mean it is in focus, low values mean it is blurry. \n--algorithm | gog, exg, nexg, exgr, maxg, exhsv, hsv | Select from the list of algorithms to use. Defaults to `exhsv`. GoG will enable the Google Coral and import 'pycoral' and related libraries. Only use if you have followed the instructions under the [Green-on-Green](#green-on-green) section.\n--recording | If flag is present, this will return True | Record video to a file\n--framerate | between 10 and 120 FPS, default=40 | sets the framerate for the camera.\n--exp-mode | off, auto, nightpreview, backlight, spotlight, sports, snow, beach, verylong, fixedfps, antishake, fireworks | Select from the list of exposure modes available on the [Picamera](https://picamera.readthedocs.io/en/release-1.13/api_camera.html#picamera.PiCamera.exposure_mode). Defaults to 'sports' for faster shutter speed.\n--awb-mode | off, auto, sunlight, cloudy, shade, tungsten, fluorescent, incandescent, flash, horizon | set the automatic white balance mode from [Picamera options](https://picamera.readthedocs.io/en/release-1.13/api_camera.html#picamera.PiCamera.awb_mode).\n--sensor-mode | 0: default - automatic; modes 1, 2 and 3 are defined in the picamera documentation. | the sensor mode is specific to the camera. The Raspberry Pi v2 camera has 7 modes, whereas the HQ camera has only 4. Framerate is prioritised over sensor mode. WARNING: high framerates and larger resolutions may 'brick' the SD card. Always backup your SD card before testing new settings, or update from this repository if settings are lost.\n--exp-compensation | Default: -4, use even values between between -24 and 24. | This sets the target brightness level for the camera. Typically it defaults to being overexposed in bright sun conditions so lower values will improve performance. \nTo edit this file, connect a screen, keyboard and mouse and boot up the OWL. Navigate to the `owl` directory and open\nup `greenonbrown.py` in an editor. If it's an executable file, it will ask you if you want to \"Execute\", \"Execute in\nTerminal\" or \"Open\" (see image below). Make sure to select the `Open` option. \nOnce you have opened the file in an editor (this can be a text editor, Thonny, Geany or other code editors), scroll down\nto the very bottom and you should come across values you can change, such as in the image or written out below. \n>\u26a0\ufe0f**NOTE**\u26a0\ufe0f In older versions ONLY, ff you change the now defunct parameter of `headless` to `False`, you'll be able to see\na real time feed of what the algorithm is doing and where the detections are occurring. This will need to be switched\nback to `headless=True` if you decide to run it without the screen connected. Note that the owl program will not run on\nstartup if `headless=False`. \n**Parameter**  | **Options** | **Description** \n:-------------: | :-------------: | :-------------: \n**Owl()** | | All options when the sprayer class is instantiated\n`exgMin`|Any integer between 0 and 255| Provides the minimum threshold value for the exg algorithm. Usually leave between 10 (very sensitive) and 25 (not sensitive)\n`exgMax`|Any integer between 0 and 255| Provides a maximum threshold for the exg algorithm. Leave above 180. \n`hueMin`|Any integer between 0 and 128| Provides a minimum threshold for the hue channel when using hsv or exhsv algorithms. Typically between 28 and 45. Increase to reduce sensitivity.\n`hueMax`|Any integer between 0 and 128| Provides a maximum threshold for the hue (colour hue) channel when using hsv or exhsv algorithms. Typically between 80 and 95. Decrease to reduce sensitivity.\n`saturationMin`|Any integer between 0 and 255| Provides a minimum threshold for the saturation (colour intensity) channel when using hsv or exhsv algorithms. Typically between 4 and 20. Increase to reduce sensitivity.\n`saturationMax`|Any integer between 0 and 255| Provides a maximum threshold for the saturation (colour intensity) channel when using hsv or exhsv algorithms. Typically between 200 and 250. Decrease to reduce sensitivity.\n`brightnessMin`|Any integer between 0 and 255| Provides a minimum threshold for the value (brightness) channel when using hsv or exhsv algorithms. Typically between 10 and 60. Increase to reduce sensitivity particularly if false positives in shadows.\n`brightnessMax`|Any integer between 0 and 255| Provides a maximum threshold for the value (brightness) channel when using hsv or exhsv algorithms. Typically between 190 and 250. Decrease to reduce sensitivity particularly if false positives in bright sun.\n`resolution`|Tuple of (w, h) resolution| Changes output resolution from camera. Increasing rapidly decreased framerate but improves detection of small weeds.\n**hoot()** | | All options when the sprayer.start() function is called\n`sprayDur`|Any float (decimal)|Changes the length of time for which the relay is activated.|\n`sampleMethod`|Choose from None, 'bbox', 'square', 'whole' | If sampleMethod=None, sampling is deactivated. Do not leave on for long periods or SD card will fill up and stop working.|\n`sampleFreq` | Any positive integer | Changes how often (after how many frames) image sampling will occur. If sampleFreq=60, images will be sampled every 60 frames. |\n`saveDir` | Path to save directory | Set where you want the images saved. If you insert a USB and would like to save images to it, put the path for that here. |\n`algorithm`|Any of: `gog`,`exg`,`exgr`,`exgs`,`exhu`,`hsv`| Changes the selected algorithm. Most sensitive: 'exg', least sensitive/most precise (least false positives): 'exgr', 'exhu', 'hsv'. `gog` will activate a provided Green-on-Green detection algorithm, a .tflite model in the models folder. Ensure you have connected and installed a Google Coral using the procedure [here](#green-on-green). |\n`selectorEnabled`|`True` or `False`| Enables algorithm selection based on a rotary switch. Only enable if switch is connected.|\n`cameraName` | Any string | Changes the save name if recording videos of the camera. Ignore - only used if recording data.|\n`minArea`| Any integer  | Changes the minimum size of the detection. Leave low for more sensitivity of small weeds and increase to reduce false positives.| \n"
      },
      "source": "https://raw.githubusercontent.com/geezacoleman/OpenWeedLocator/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9398382110217892,
      "result": {
        "original_header": "Green-on-Green",
        "type": "Text_excerpt",
        "value": "<details>\n<summary>How to detect in-crop weeds with the OWL</summary>\n<br> \nGreen-on-Green capability is here! \nDeep learning object detection algorithms for in-crop or 'Green-on-Green' (GoG) require much more processing power than\nthe green detection algorithms we have used previously. If we ran these GoG algorithms directly on the Raspberry Pi, the\nframe rate would be prohibitively slow. To overcome this, you can use more powerful computers with GPUs (i.e. any of\nNVIDIA's Jetson series), alternatively you can connect a third party processor such as Google Coral's TPU through the\nUSB3.0 ports of the Raspberry Pi 4. This means increased performance without needing to purchase another embedded\ncomputer. \nThe [Google Coral USB accelerator](https://coral.ai/products/accelerator) is only $59.99, so it provides performance\nupgrades without substantial cost increases. With the added hardware, there are some additional software installation\ndetails that you should follow. And you will need to connect the Google Coral to the Raspberry Pi USB3.0 port too. At\nthe moment, this won't fit neatly in the case, but we are continuing to work on improving this. \nEffective models need training data, so if you're interested in using the Green-on-Green functionality, you will need to\nstart collecting and annotating images of relevant weeds for training. Alternatively, head over\nto [Weed-AI](https://weed-ai.sydney.edu.au/explore?is_head_filter=%5B%22latest+version%22%5D) to see if any image data\nmay be relevant for your purposes. \n>\u26a0\ufe0f**NOTE**\u26a0\ufe0fThere do appear to be some issues with the exporting functionality of YOLOv5/v8 to .tflite models for use with\nthe Coral. The issue has been raised on the Ultralytics repository and should hopefully be resolved soon. You can follow\nthe updates [here](https://github.com/ultralytics/ultralytics/issues/1312). \n[YOLOv8](https://github.com/ultralytics/ultralytics) and [YOLOv5](https://github.com/ultralytics/yolov5) currently\nprovide the most user friendly methods of training, optimisation and exporting as `.tflite` files for use with the\nGoogle Coral. There is also a Weed-AI Google Colab\nNotebook <a target=\"_blank\" href=\"https://colab.research.google.com/github/Weed-AI/Weed-AI/blob/master/weed_ai_yolov5.ipynb\">\n<img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/>\n</a>\nwhich can be used to train models from Weed-AI data directly. \n"
      },
      "source": "https://raw.githubusercontent.com/geezacoleman/OpenWeedLocator/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9150627713894129,
      "result": {
        "original_header": "Image Processing",
        "type": "Text_excerpt",
        "value": "<details>\n<summary>Image processing details and in-field results</summary>\n<br>\nSo how does OWL actually detect the weeds and trigger the relay control board? It all starts by taking in the colour image from the camera using OpenCV and splitting it into its component channels: Red (R), Green (G) and Blue (B) (RGB) or loading and converting into the hue, saturation and value (HSV) colourspace. Following that, computer vision algorithms such as Excess Green `ExG = 2 * G - R - B` or thresholding type approaches on the HSV colourspace can be used to differentiate green locations from the background.  \nOnce the green locations are identified and a binary (purely black/white) mask generated, a contouring process is run to\noutline each detection. If the detection pixel area is greater than the minimum area set in `minArea=10`, the central\npixel coordinates of that area are related to an activation zone. That zone is connected to a specific GPIO pin on the\nRaspberry Pi, itself connected to a specific channel on the relay (one of IN1-4). When the GPIO pin is driven high (\nactivated) the relay switches and connects the solenoid for example to 12V and activates the solenoid. It's all\nsummarised below. \nThe performance of each algorithm on 7 different day/night fields is outlined below. The boxplot shows the range,\ninterquartile range and median performance for each algorithm. Whilst there were no significant differences (P > 0.05)\nfor the recall (how many weeds were detected of all weeds present) and precision (how many detections were actually\nweeds), trends indicated the ExHSV algorithm was less sensitive (fewer false detections) and more precise, but did miss\nmore smaller/discoloured weeds compared to ExG. \nThe image below gives a better indication of the types of weeds that were detected/missed by the ExHSV algorithm. Large,\ngreen weeds were consistently found, but small discoloured or grasses with thin leaves that blurred into the background\nwere missed. Faster shutter speed would help improve this performance. \n"
      },
      "source": "https://raw.githubusercontent.com/geezacoleman/OpenWeedLocator/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9034153706322717,
      "result": {
        "original_header": "3D Printing",
        "type": "Text_excerpt",
        "value": "<details>\n<summary>3D printing instructions and files</summary>\n<br> \n1. Single connector (Bulgin) panel mount\n    - Pros: of this method are easy/quick attach/detach from whatever you have connected, more water resistant.\n    - Cons: more connections to make, more expensive\n2. Cable gland\n    - Pros: fewer connections to make, cheaper, faster to build.\n    - Cons: more difficult to remove, less water resistant. \nWe also provide a link to the [3D models on TinkerCAD](https://www.tinkercad.com/things/fhfUCsPEn5q), an online and free\n3D modelling software package, allowing for further customisation to cater for individual user needs. \n|                                                     Description                                                     |                                                                                                               Image (click for link)                                                                                                                |\n|:-------------------------------------------------------------------------------------------------------------------:|:---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------:|\n|                                                  **Original OWL**                                                   |                                                                                                                                                                                                                                                     |\n| OWL base, onto which all components are mounted. The unit can be fitted using the M6 bolt holes on the rear panel.  | [![screenshot](https://user-images.githubusercontent.com/51358498/166176068-989cc69b-43c1-48ef-942d-b273fc2f4d98.png)](https://github.com/geezacoleman/OpenWeedLocator/blob/main/3D%20Models/Original%20OWL/Enclosure%20-%20single%20connector.stl) |\n|                      OPTIONAL: OWL base with cable glands instead of single Bulgin connector.                       |   [![screenshot](https://user-images.githubusercontent.com/51358498/166175980-e1fcc526-c835-4ea1-88b5-d28a1ab747b7.png)](https://github.com/geezacoleman/OpenWeedLocator/blob/main/3D%20Models/Original%20OWL/Enclosure%20-%20cable%20gland.stl)    |\n|       OWL cover, slides over the base and is fitted with 4 x M3 bolts/nuts. Provides basic splash protection.       |      [![OWL Cover](https://user-images.githubusercontent.com/51358498/132754464-8bfe62aa-4487-42ea-a507-71e0b4a4d1a2.png)](https://github.com/geezacoleman/OpenWeedLocator/blob/main/3D%20Models/Original%20OWL/Tall%20enclosure%20cover.stl)       |\n|                            OWL base port cover, covers the cable port on the rear panel.                            |         [![OWL base port cover](https://media.github.sydney.edu.au/user/3859/files/12b7f000-cb87-11eb-980b-564e7b4324f6)](https://github.com/geezacoleman/OpenWeedLocator/blob/main/3D%20Models/Original%20OWL/Tall%20enclosure%20plug.stl)         |\n|                   Raspberry Pi mount, fixes to the Raspberry Pi for easy attachment to OWL base.                    |          [![Raspberry Pi mount](https://media.github.sydney.edu.au/user/3859/files/5d396c80-cb87-11eb-948c-d60efe433ac8)](https://github.com/geezacoleman/OpenWeedLocator/blob/main/3D%20Models/Original%20OWL/Raspberry%20Pi%20mount.stl)          |\n|             Raspberry Pi Camera mount, fixes to the HQ or V2 Camera for simple attachment to the base.              |  [![Screenshot 2022-03-04 180036](https://user-images.githubusercontent.com/40649348/156715282-bea91301-ac6d-4421-b071-4a4304eb02b0.png)](https://github.com/geezacoleman/OpenWeedLocator/blob/main/3D%20Models/Original%20OWL/Camera%20mount.stl)  |\n|                   Relay board mount, fixes to the relay board for simple attachment to the base.                    |      [![Relay board mount](https://media.github.sydney.edu.au/user/5402/files/d421aa00-d04c-11eb-9191-bcad7b51c1a4)](https://github.com/geezacoleman/OpenWeedLocator/blob/main/3D%20Models/Original%20OWL/Relay%20control%20board%20mount.stl)      |\n| Voltage regulator mount, fixes to the voltage regulator and onto the relay board for simple attachment to the base. |     [![Voltage regulator mount](https://media.github.sydney.edu.au/user/5402/files/8147f280-d04c-11eb-89ec-4af125a8f232)](https://github.com/geezacoleman/OpenWeedLocator/blob/main/3D%20Models/Original%20OWL/Voltage%20regulator%20mount.stl)     | \nIdeally supports should be used for the base, and were tested at 0.2mm layer heights with 25% infill on a Prusa MK3S. \n* improved camera mounts\n* space for 40mm lens cover\n* more compact design\n* version tracking\n* \n## Compact OWL\nThe Compact OWL has fewer parts to print than the Original OWL and is both more durable and water resistant. A complete\nunit requires printing of only 5 parts. \nAll 3D model files are availabe on to edit and download on [TinkerCAD](https://www.tinkercad.com/things/id1FMJrWtJp-compact-owl) or [Printables](https://www.printables.com/model/875853-raspberry-pi-rugged-imaging-enclosure). \nThe 3D printing .stl files are provided under the 3D Models and through the links in the table below. \nPick one of these backplates when printing. \n|                                                     Description                                                     |                                                                                                               Image (click for link)                                                                                                             |\n|:-------------------------------------------------------------------------------------------------------------------:|:---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------:|\n|                                                   **Compact OWL**                                                   |                                                                                                                                                                                                                                                     |\n|                                    Enclosure body: houses all components on tray                                    |                                                                 [![image](https://github.com/geezacoleman/OpenWeedLocator/assets/51358498/dc5d4a38-3a76-42b6-bb2b-96e6cae29a8e)]()                                                                  |\n|        Frontplate: covers the front of the enclosure. Incorporates a 37 mm lens cover to seal the enclosure.        |                                                                                                                        [![image](https://github.com/geezacoleman/OpenWeedLocator/assets/51358498/54113656-8688-4c58-a6b6-dfd3b35736b9)]()                                                                                                                         |\n|                       Lens mount: Securely mounts the 37 mm UV lens filter to the frontplate.                       |                                                                                                                        [![image](https://github.com/geezacoleman/OpenWeedLocator/assets/51358498/b5c9e4a7-5bd9-4c22-8d42-8134f0f96f6f)]()                                                                                                                         |\n|                                 Backplate: 1 x Amphenol EcoMate Aquarius Receptacle                                 |                                                                 [![image](https://github.com/geezacoleman/OpenWeedLocator/assets/51358498/a80eb501-f681-4298-a6e1-2fb1595a859a)]()                                                                  |\n|                Backplate: 1 x Amphenol EcoMate Aquarius Receptacle, 1 x Adafruit Ethernet Connector                 |                                                                 [![image](https://github.com/geezacoleman/OpenWeedLocator/assets/51358498/4424e47e-f92c-4db2-b20f-26daec9babe0)]()                                                                  |\n|                Backplate: blank                 |                                                                 [![image](https://github.com/geezacoleman/OpenWeedLocator/assets/51358498/f724822e-be85-47ee-9ab8-968efd161124)]()                                                                  |\n|                                           Backplate: 1 x 16mm Cable Gland                                           |                                                                 [![image](https://github.com/geezacoleman/OpenWeedLocator/assets/51358498/1f318499-fe28-4b97-9e7f-57c53fac8173)]()                                                                  |\n|               Tray: Mounts all required hardware and fits into the enclosure body on the second rail. Use M2 heat-set threaded inserts for the lens holder.               |                                                                 [![image](https://github.com/geezacoleman/OpenWeedLocator/assets/51358498/83c7d31d-1b93-4d04-8cff-349998394b2a)]()                                                                  |\n|               Lens holder: Secures the lens with two M2 x 6mm screws.               |                                                                 [![image](https://github.com/geezacoleman/OpenWeedLocator/assets/51358498/25a44e01-18cc-44de-a36b-b396d1216653)]()                                                                  |\n|                                 OPTIONAL: Camera Module 3/V2 Camera mounting plate                                  |                                                                 [![image](https://github.com/geezacoleman/OpenWeedLocator/assets/51358498/38baf7e4-b05a-48e7-958e-9e8374bc8990)]()                                                                  | \nAll .stl files for the 3D printed components of this build are available in the 3D Models directory.\nSupports are not required but do improve print quality. All parts were printed with a Bambu Labs P1S at 0.16mm layer height\nat 25% infill. \n"
      },
      "source": "https://raw.githubusercontent.com/geezacoleman/OpenWeedLocator/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9411302542518574,
      "result": {
        "original_header": "Updating OWL",
        "type": "Text_excerpt",
        "value": "We and others will be continually contributing to and improving OWL as we become aware of issues or opportunities to\nincrease detection performance. Once you have a functioning setup the process to update is simple. First, you'll need to\nconnect a screen, keyboard and mouse to the OWL unit and boot it up. Navigate to the existing owl directory\nin `/home/owl/` and either delete or rename that folder. Remember if you've made any of your own changes to the\nparameters/code, write them down. Then open up a Terminal window (Ctrl + T) and follow these steps: \nAnd that's it! You're good to go with the latest software. \nIf you have multiple units running, the most efficient method is to update one and then copy the SD card disk image to\nevery other unit. Follow these instructions here. ADD INSTRUCTIONS \nAll versions of OWL can be found here. Only major changes will be recorded as separate disk images for use. \n"
      },
      "source": "https://raw.githubusercontent.com/geezacoleman/OpenWeedLocator/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9733640657082927,
      "result": {
        "original_header": "Troubleshooting",
        "type": "Text_excerpt",
        "value": "\nHere's a table of some of the common symptoms and possible explanations for errors we've come across. This is by no\nmeans exhaustive, but hopefully helps in diagnosing any issues you might have. If you come across any others please\ncontact us so we can improve the software, hardware and guide. \n|                           Symptom                           |                                             Explanation                                              |                                                                                                                                                     Possible solution                                                                                                                                                        |\n|:-----------------------------------------------------------:|:----------------------------------------------------------------------------------------------------:|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------:|\n|   Raspberry Pi won't start (no green/red lights)            |                                  No power getting to the computer                                    |                                                     Check the power source, and all downstream components. Such as Bulgin panel/plug connections fuse connections and fuse, connections to Wago 2-way block, voltage regulator connections, cable into the Raspberry Pi.                                                     |\n|   Raspberry Pi starts (green light flashing) but no beep    |                                     OWL software has not started                                     |                      This is likely a configuration/camera connection error with many possible causes. To get more information, boot the Raspberry Pi with a screen connected, open up a Terminal window (Ctrl + T) and type `~/owl/./owl.py`. This will run the program. Check any errors that emerge.                      |\n| Beep heard, but no relays activating when tested with green | Relays are not receiving (1) 12V power, (2) a signal from the Pi, (3) the Pi is not sending a signal | Check all your connections with a multimeter if necessary for the presence of 12V. Make sure everything is connected as per the wiring diagram. If you're confident there are no connection issues, open up a Terminal window (Ctrl + T) and type `~/owl/./owl.py`. This will run the program. Check any errors that emerge. | \n"
      },
      "source": "https://raw.githubusercontent.com/geezacoleman/OpenWeedLocator/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/geezacoleman/OpenWeedLocator/tree/main/docs"
      },
      "technique": "file_exploration"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/geezacoleman/OpenWeedLocator/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 61
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/geezacoleman/OpenWeedLocator/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "geezacoleman/OpenWeedLocator"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "OpenWeedLocator"
      },
      "source": "https://raw.githubusercontent.com/geezacoleman/OpenWeedLocator/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/geezacoleman/OpenWeedLocator/main/owl_boot.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/geezacoleman/OpenWeedLocator/main/owl_setup.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/geezacoleman/OpenWeedLocator/main/owl_boot_wrapper.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/geezacoleman/OpenWeedLocator/main/update_owl.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/geezacoleman/OpenWeedLocator/main/focus_owl.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/geezacoleman/OpenWeedLocator/main/models/install_coral.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/geezacoleman/OpenWeedLocator/main/dev/clean.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "identifier": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://zenodo.org/badge/latestdoi/399194159"
      },
      "source": "https://raw.githubusercontent.com/geezacoleman/OpenWeedLocator/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Manuals",
        "parent_header": [
          "Overview"
        ],
        "type": "Text_excerpt",
        "value": "If you prefer a hardcopy version of these instructions, you can view and download the PDF using one of the links below.\nThese will be updated as major changes are made. All older versions will be retained within the `docs` folder.\n\n**Current**\n\n* [2024-05-28 - Download OWL manual](docs/20240528_owl_readme.pdf)\n\n[View all versions](docs)\n"
      },
      "source": "https://raw.githubusercontent.com/geezacoleman/OpenWeedLocator/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Non-Raspberry Pi Installation",
        "parent_header": [
          "Software"
        ],
        "type": "Text_excerpt",
        "value": "<details>\n<summary>Installing OWL software on a non-Raspberry Pi system</summary>\n<br>\nUsing OWL software on your laptop/desktop or other non-Raspberry Pi system is a great way to test, develop and learn more about how it works. To start using the software, just follow the steps below. You will need access to virtual environments and your IDE/editor of choice. This method has been successfully tested on PyCharm with Anaconda environments.\n\n```\n> git clone https://github.com/geezacoleman/OpenWeedLocator\n> cd OpenWeedLocator\n```\n\nFor the next part, make sure you are in the virtual environment you will be working from. If you're unsure about virtual\nenvironments, read\nthrough [this PyImageSearch blog](https://pyimagesearch.com/2017/09/25/configuring-ubuntu-for-deep-learning-with-python/)\non configuring an Ubuntu environment for deep learning - just skip to the virtual environment\nstep. [FreeCodeCamp](https://www.freecodecamp.org/news/how-to-setup-virtual-environments-in-python/) has a great blog\ndescribing them too.\n\nAssuming the virtual environment is working and is activated, run through these next couple of steps:\n\n```\n> pip install -r non_rpi_requirements.txt     # this will install all the necessary packages, without including the Raspberry Pi specific ones.\n```\n\nIt may take a minute or two for those to complete installing. But once they are done you are free to run the `owl.py`\nsoftware.\n\n```\n> python owl.py --show-display\n```\n\nFrom there you can change the command line flags (as described above) or play around with the settings to see how it\nworks.\n</details>\n"
      },
      "source": "https://raw.githubusercontent.com/geezacoleman/OpenWeedLocator/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9998683614942195,
      "result": {
        "original_header": "Software",
        "type": "Text_excerpt",
        "value": ">\u26a0\ufe0f**NOTE**\u26a0\ufe0f 08/05/2024 - OWL transitioned from `picamera` to `picamera2` support. The v1.0.0 disk image below (Buster) does not\nsupport `picamera2` and will not work on the Raspberry Pi 5 nor with the recent camera releases. We strongly recommend\nusing the most up to date version of Raspbian with the latest OWL software. \n"
      },
      "source": "https://raw.githubusercontent.com/geezacoleman/OpenWeedLocator/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9730763206264222,
      "result": {
        "original_header": "Quick Method",
        "type": "Text_excerpt",
        "value": ">\u26a0\ufe0f**IMPORTANT**\u26a0\ufe0f v1.0.0-owl.img DOES NOT WORK WITH RASPBERRY PI 5. \n>\u26a0\ufe0f**NOTE**\u26a0\ufe0f The v1.0.0-owl.img file contains the original software and we strongly recommend updating using the process\nbelow. It also includes the deprecated naming of `greenonbrown.py` instead of `owl.py`. If you do not update the\nsoftware, be aware that you will need to run `greenonbrown.py` instead. \nThe latest, stable version will be linked above, however, all other older versions or versions with features being\ntested are available [here](#version-history). \nThe easiest way to flash (add the vX.X.X-owl.img file to the SD card so it can boot) the SD card is to use Balena Etcher\nor any other card flashing software. Instructions for Balena Etcher are provided here. Navigate to\nthe [website](https://www.balena.io/etcher/) and download the relevant version/operating system. Install Balena Etcher\nand fire it up. \n* Insert the SD card using your SD card reader.\n* Select `Flash from file` on the Balena Etcher window and navigate to where you downloaded the vXX-XX-XX-owl.dmg file.\n  This can be a zip file (compressed) too.\n* Select the target, the SD card you just inserted.\n* Click `Flash` \nIf this completes successfully, you're ready to move to the next step. If it fails, use Balena Etcher documentation to\ndiagnose the issue. \nThe disk image that you downloaded is likely to be a few versions behind the most recent. We only provide images of the\nmost major updates. So to update the OWL software, just run the follow these steps. \n1. Have the OWL powered on with screen, keyboard and mouse connected. You should see a desktop with the OWL logo.\n2. Press CTRL + ALT + T to open a Terminal window or click the black icon with blue line and >_ symbol.\n3. Once the Terminal window is open, make sure you are working in the `owl` virtual environment by running:\n```\nowl@raspberrypi:~ $ workon owl\n(owl) owl@raspberrypi:~ $\n```\n \nNotice that (owl) now appears before the line in the Terminal window. This indicates you are in the `owl` virtual\nenvironment. This is **critical** to make sure you install everything in the `requirements.txt` file into the right\nspot. \n4. Once you are in the `owl` environment, enter these commands on each new line:\n```\n(owl) owl@raspberrypi:~ $ cd ~\n(owl) owl@raspberrypi:~ $ mv owl owl-old      # this renames the old 'owl' folder to 'owl-old'\n(owl) owl@raspberrypi:~ $ git clone https://github.com/geezacoleman/OpenWeedLocator        # download the new software\n(owl) owl@raspberrypi:~ $ mv OpenWeedLocator owl      # rename the download to 'owl'\n(owl) owl@raspberrypi:~ $ cd ~/owl\n(owl) owl@raspberrypi:~/owl $ pip install -r requirements.txt                # installs the necessary software into the (owl) environment \n(owl) owl@raspberrypi:~/owl $ chmod a+x owl.py                  # changes owl.py to be executable\n(owl) owl@raspberrypi:~/owl $ chmod a+x owl_boot.sh                     # changes owl_boot.sh to be executable\n```\n \nOnce this is complete your software will be up to date and you can move on to focusing the camera. \n ```\n(owl) owl@raspberrypi:~ $ cd ~/owl\n(owl) owl@raspberrypi:~/owl $ bash focus_owl.sh \n ``` \nThis will automate all the steps below. If this doesn't work, follow the steps below. If you would like to focus the OWL\nagain, you can always run `./owl.py --focus`. \nWith the older versions of the software, you need to stop all `owl.py` or `greenonbrown.py` background processes before\nyou can restart the software with the video feed viewable on the screen. Enter the following into the terminal:\n```\n(owl) owl@raspberrypi:~ $ ps -C owl.py # or ps -C greenonbrown.py if you still have the older version.\n```\nAfter pressing ENTER, you should receive the following output:\n```\n(owl) owl@raspberrypi:~ $ ps -C owl.py\nPID TTY              TIME CMD\n515 ?            00:00:00 owl.py\n```\n \nIf a PID appears, you'll need to stop it operating. To stop the program, enter the following command:\n```\n(owl) owl@raspberrypi:~ $ sudo kill enter_your_PID_number_here\n```\n \nNow you'll need to launch `owl.py` manually with the video feed visible. To do this use the Terminal window and type the\nfollowing commands:\n```\n(owl) owl@raspberrypi:~ $ ~/owl/./owl.py --show-display\n```\n \nThis will bring up a video feed you can use to visualise the OWL detector and also use it to focus the camera. Once\nyou're happy with the focus, press Esc to exit. \n### OPTIONAL Step 6 - enabling UART for status LED \nOpen up a terminal console by pressing `Ctrl + T`. Type:\n```\n(owl) owl@raspberrypi :-$ sudo nano /boot/config.txt\n```\nThis will open up the config.txt file. Scroll down to the bottom by holding the down arrow key and add the following\nline to the very last line of the file:\n```\nenable_uart=1\n```\n \nPress `ctrl + x` to exit, then type `y` to save and then `enter`. \nYou're now ready to run! \n### OPTIONAL Step 7 - running original `greenonbrown.py` \nIf you are using the v1.0.0-owl.img file and don't update the OWL software as above, you will be using the\noriginal `greenonbrown.py` Python script. Running it from the command line will require slightly different commands.\nPlease follow this guide if this is you. \nTo run the software from the command line (assuming it is not currently running), follow these steps:\n```\nowl@raspberrypi:~ $ workon owl\n(owl) owl@raspberrypi:~ $ cd owl \n(owl) owl@raspberrypi:~ /owl $ ./greenonbrown.py  \n```\n \n>\u26a0\ufe0f**BUG ALERT**\u26a0\ufe0f There is a known bug with this version where the script will not run if you are running it outside of\nthe `owl` directory. If you enocunter this error, `cd` into the `owl` directory and run the code again. \n"
      },
      "source": "https://raw.githubusercontent.com/geezacoleman/OpenWeedLocator/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9859836512890396,
      "result": {
        "original_header": "Detailed Method",
        "type": "Text_excerpt",
        "value": "**IMPORTANT**: *Suitable for the Raspberry Pi 5 and Bookworm Raspberry Pi OS.* \nThis setup approach may take a little longer (aproximately 1 hour total) than the quick method, but you'll be much better\ntrained in the ways of OWL and more prepared for any problem solving, upgrades or changes in the future. You'll also\ndownload and use the latest software that hasn't been saved in the .img file yet. In the process you'll learn about\nPython environments, install Python packages and set it all up to run on startup. To get this working you'll need access\nto: \n<details>\n<summary><b>Detailed OWL installation procedure</b></summary>\n<br> \n### Step 1 - Raspberry Pi setup \n#### Step 1a - Rasperry Pi OS\nBefore powering up the Raspberry Pi, you'll need to install the Raspian operating system (just like Windows/MacOSX for\nlaptops) on the new SD card. This is done using the same process as the quick method used to flash the premade owl.img\nfile, except you'll be doing it with a completely new and untouched version of Raspbian.  \nLeave the hostname as default. To simplify setup, you can specify the wifi network settings. Set the username to 'owl'\nand choose a password. \nAlternatively, you can SSH into your OWL from a separate device and install it remotely. A good guide on how to do that is \navailable [here](https://www.makeuseof.com/how-to-ssh-into-raspberry-pi-remote/).  \n##### First boot\nOn the first boot you may be asked to set country, timezone, keyboard, connect to wifi and look for updates among other\nthings. If you haven't already set the username, set it to 'owl' and choose a password. Uninstall the unused browser - \nthis will save space on the Pi. Finally, you will be asked to restart the pi. \n##### Opening terminal\nAfter the restart, open up Terminal. You can press CTRL + ALT + T, or click the icon in the top left with the `>_` \nsymbol. The instructions that follow are a blend of those available from \n[PyImageSearch](https://pyimagesearch.com/2019/09/16/install-opencv-4-on-raspberry-pi-4-and-raspbian-buster/) \nand [QEngineering](https://qengineering.eu/bookworm.html) \n>\u26a0\ufe0f**NOTE**\u26a0\ufe0f All commands below are provided for easy copy/paste. When using terminal you should see `owl@raspberrypi:~ $`\n> at the start of each line and `(owl) owl@raspberrypi:~ $` when operating within the `owl` virtual environment. Pay very close\n> attention to the presence/absence of `(owl)` in front of each line, as this can make/break installation. \n>\u26a0\ufe0f**NOTE**\u26a0\ufe0f We recommend naming the device `owl` when asked if you didn't set it during the flashing process.  \n#### Two-line Install\nIf you prefer a faster and simpler installation, try the following two-line install. You'll first need to clone the owl repository\nbefore running `owl_setup.sh`.  \nTo start, clone the Github repository:\n```commandline\ngit clone https://github.com/geezacoleman/OpenWeedLocator owl\n```\nWith the repository cloned into the 'owl' folder, we can now run the bash script `owl_setup.sh`. This will take some time\nto complete\n```commandline\nbash owl/setup_owl.sh\n```\nOnce completed successfully, your OWL is ready to go.\n \n>\u26a0\ufe0f**NOTE**\u26a0\ufe0f If you use this method, you can finish the installation here. The following steps just go through what is \n> in the `owl_setup.sh` script step-by-step. We recommend the step-by-step approach if you want to become more familiar\n> with how the OWL works. \n#### Step-by-step install\nInstead of the two-line installation, the following procedure details all steps required. \n##### Free up space\nThe Raspberry Pi comes pre-installed with a range of software. To free up space it can be removed from the OWL. \nDepending on your install, these may or may not be present. At the command line (it should look like `owl@raspberrypi:~ $`), \nrun the following:\n```commandline\nsudo apt-get purge wolfram-engine\n```\nBASH4*\nBASH5*\nBASH6*\n##### Set up the virtual environment\nA virtual environment contains all the necessary packages in one neat spot. We'll be using `virtualenv` and \n`virtualenvwrapper` on the Pi to create a virtual environment called `owl`. \nTo start with, update the system. The update may take a few minutes depending on your internet connection and how many\npackages need updating. It's good practice to do this regularly. Then you'll add the following two lines to the `bashrc`\nfile. \n>\u26a0\ufe0f**WARNING**\u26a0\ufe0f using `rpi-update` will update to the latest kernel and drivers. This is to fix an issue with image component\norder. The problem should eventually be merged into normal `apt-get update && upgrade`. This notice will be removed then. \nBegin by updating the system:\n```commandline\nsudo apt-get update && sudo apt-get upgrade\n```\nNow, update to the latest firmware version to fix the issue between RGB and BGR channel ordering.\nBASH8*\nThen add the following lines to the `.bashrc` file to prepare for the creation of virtual environments.\nBASH9*\nBASH10*\nFinally, reload the `.bashrc` file.\nBASH11*\nOnce that is complete, you can install `virtualenv` and `virtualenvwrapper` and add a few more lines to the same `bashrc`\nfile.\nBASH12*\nBASH13*\nFollowing the installation of these packages, add the following lines to the `.bashrc` file.\nBASH14*\nBASH15*\nAs above, reload the file to update the changes.\nBASH11*\nWith the virtual environment software successfully installed, it's now time to create the `owl` environment. Importantly,\nwe need to inherit the site-packages (i.e. everything currently on the Pi) because they contain `picamera2` pre-installed. \nTo make the `owl` environment, run the following:\n```commandline\nmkvirtualenv --system-site-packages -p python owl\n```\nThe command line should now look like `(owl) owl@raspberrypi:~ $`. The '(owl)' at the start of the line means you're currently within\nthat virtual environment. To turn it off you can run `deactivate` and to turn it run `workon owl`. \n**IMPORTANT**: The next steps must be run within the `owl` virtual environment. We're installing packages specific to the OWL. \n### Step 2 - Installing packages\nWe now need to install the Python libraries that let the OWL work. The most import is OpenCV, which we'll do first before\ndownloading the OWL repository and installing the remainder from the `requirements.txt` file. Begin by ensuring the `owl`\nenvironment is active. \n>\u26a0\ufe0f**WARNING**\u26a0\ufe0f It is ESSENTIAL that `(owl)` is present at the start of each line in terminal for this section. The `(owl)`\n> indicates that you are within the `owl` virtual environment and that these Python packages will be installed and accessible\n> within this environment. Run `workon owl` to ensure you are in the `owl` environment.\n```commandline\nworkon owl\n```\nNow that you are in the `owl` virtual environment we can begin installing packages.\nBASH18*\nThis should have successfully installed OpenCV into the `owl` virtual environment. You can double check by quickly starting a\nPython session at the command line:\nBASH19*\nThis will open up an interactive Python session (indicated by >>>) from which you should type:\n \n```commandline\n>>> import cv2\n>>> import picamera2\n>>> exit()\n```\nThis should then exit you from the Python session. The command line should look like this:\n```commandline\n(owl) owl@raspberrypi:~ $\n```\n \nIf both of these complete without error, then you've successfully set up the virtual environment and installed OpenCV. \nNow you should have: \n* A virtual environment called 'owl'\n* A working version of OpenCV installed into that environment\n* a Terminal window open with the 'owl' environment activated. \nThe next step is to download the entire OpenWeedLocator repository into your *home* directory on the Raspberry Pi. First\nchange into the home directory:\n```commandline\ncd ~\n```\nthen clone the repository 'https://github.com/geezacoleman/OpenWeedLocator' into a new folder called 'owl'\nBASH1*\nThis will download the repository into a folder called `owl`. Double check it is there by typing `(owl) owl@raspberrypi:~ $ ls` \nand reading through the results, alternatively open up the Home folder using a mouse. If that was successful, you can \nnow move on to Step 4.\n \n### Step 4 - Installing the OWL Python dependencies\nDependencies are Python packages on which the code relies to function correctly. With a range of versions and possible\ncomptibility issues, this is the step where issues might come up. There aren't too many packages, but please make sure\neach and every module in the requirements.txt file has been installed correctly. These include: \n* OpenCV (should already be in 'owl' virtual environment from Step 1)\n* numpy\n* imutils\n* gpiozero\n* pandas\n* RPi.GPIO\n* tqdm\n* blessed (for command line visualisation)\n* threading, multiprocessing, collections, queue, time, os (though these are included as standard Python modules). \n>\u26a0\ufe0f**IMPORTANT**\u26a0\ufe0f Before continuing make sure you are in the `owl` virtual environment. Check that `(owl)` appears at the start\nof each command line, e.g. `(owl) owl@raspberrypi:~ $`. Run `workon owl` if you are unsure. If you are not in the `owl`\nenvironment, you will run into errors when starting `owl.py`. \nTo install all the requirements.txt, change into the owl directory:\n```commandline\ncd ~/owl\n```\nthen run:\n```commandline\npip install -r requirements.txt\n```\nNow to double-check this has worked, we can open up another Python session and try importing the packages. Begin by typing:\n \n```commandline\npython\n```\nPython should start up an interactive session; type each of these in and make sure you don't get any errors.\n```commandline\n>>> import cv2\n>>> import numpy\n>>> import gpiozero\n>>> import pandas\n```\nVersion numbers can be checked with:\n```commandline\n>>> print(package_name_here.__version__) ## this is a generic example - add the package where it says package_name_here\n>>> print(cv2.__version__)\n>>> exit()\n```\nIf any errors appear, you'll need to go back and check that the modules above have (1) been installed into the owl\nvirtual environment, (2) that Python was started in the owl environment, and/or (3) they all installed correctly. Once\nthat is complete, exit Python and continue with the installation process.\n \n### Step 5 - starting OWL on boot \nNow that these dependencies have been installed into the owl virtual environment, it's time to make sure the software \nruns on startup. The first step is to make both the Python file `owl.py` and the boot files `owl_boot.sh` and `owl_boot_wrapper.sh`\nexecutable. Then move both `owl_boot.sh` and `owl_boot_wrapper.sh` into the `/usr/local/bin` directory.\n```commandline\nchmod a+x owl.py\n```\nBASH28*\nBASH29*\nBASH30*\nBASH31*\n \nThis is the `owl_boot.sh` file:\n```commandline\n#!/bin/bash\n\n# automatically determine the home directory, to avoid issues with username\nsource $HOME/.bashrc\n\n# activate the 'owl' virtual environment\nsource $HOME/.virtualenvs/owl/bin/activate\n\n# change directory to the owl folder\ncd $HOME/owl\n\n# run owl.py in the background and save the log output\nLOG_DATE=$(date -u +\"%Y-%m-%dT%H-%M-%SZ\")\n./owl.py > $HOME_DIR/owl/logs/owl_$LOG_DATE.log 2>&1 &\n``` \nIn the file, the first two commands launch our `owl` virtual environment, then we change directory `cd` into the owl \nfolder and run the python program. The `owl_boot_wrapper.sh` file figures out which user is running the file, and then\nuses that user to run `owl_boot.sh`. This makes the system more resilient to changes in Pi username. \nTo add this to the list of cron jobs, you'll need to edit it as a root user:\n```commandline\nsudo crontab -e\n```\nSelect `1. /bin/nano editor`, which should bring up the crontab file. At the base of the file add this text:\n```\n@reboot /usr/local/bin/owl_boot_wrapper.sh > /home/launch.log 2>&1 \n```\n \nOnce you've added that line, you'll just need to save the file and exit. In the nano editor just press Ctrl + X, then Y\nand finally press Enter to agree to save and exit. \nNow you'll just need to reboot the system. Once it reboots, `owl.py` will launch and run in the background. \n>\u26a0\ufe0f**NOTE**\u26a0\ufe0f *Cameras with automatic focus such as the Raspberry Pi Camera Module 3 will be automatically focused to 1.2m \ndistance. The following guide is useful for the HQ and Global Shutter cameras which require manual focusing.* \nIf you hear a beep, grab something green and move it under the camera. If the relays start clicking (the Official OWL \nHAT uses transistors and will not click - look for the lights) and lights come on, congratulations, you've successfully \nset the OWL up! If not, check the troubleshooting chart below and see if you can get it fixed. Raise an issue and get in touch\nif you're not sure how to proceed. \n<details>\n<summary><b>Optional Step - installing RTC and setting the time</b></summary>\n<br>\nThe optional real time clock module can be set up by following the [detailed instructions](https://learn.adafruit.com/adding-a-real-time-clock-to-raspberry-pi/set-up-and-test-i2c) provided by Adafruit. This is a quick process that should take less than 10 minutes. Note that an internet connection is required to set the time initially, however after this the time will be held on the clock module.\n</details>\n \n"
      },
      "source": "https://raw.githubusercontent.com/geezacoleman/OpenWeedLocator/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9733168156543487,
      "result": {
        "original_header": "Changing detection settings",
        "type": "Text_excerpt",
        "value": "You can use command line flags to toggle display, data source and setting focus. Use the `config.ini` file in the \nconfig folder to set other parameters as described below. \nThe default config file is `DAY_SENSITIVITY_2.ini` (details provided below). If you change any settings here, make sure\nto save the file before restarting `owl.py`.  \n\n### Command line flags\nCommand line flags are let you specify options on the command line within the Terminal window. It means you don't have\nto open up the code and make changes directly. OWL now supports the use of flags for some parameters. To read a\ndescription of all flags available type `--help`:\n```commandline\nusage: owl.py [-h] [--input] [--show-display] [--focus]\n  --input               path to image directory, single image or video file\n  --show-display        show display windows\n  --focus               focus the camera\n```\n \n### Creating your own config files\nFeel free to create your own config files to meet your specific conditions. In `owl.py` just update the path to the\nconfig file. Follow the same layout and format as the default. \nTo open `owl.py`, you'll need to open it and not execute the file.  \nThen scroll down to the very bottom until you find the line below. Update the `config_file=` path to your own config file path.\n```python\nowl = Owl(config_file='config/ENTER_YOUR_CONFIG_FILE_HERE.ini')\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/geezacoleman/OpenWeedLocator/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9368544956502154,
      "result": {
        "original_header": "Legacy detection settings",
        "type": "Text_excerpt",
        "value": "<details>\n<summary>Legacy instructions to change detection settings</summary>\n<br>\nPrior to the `config.ini` file, all settings were controlled using command line flags. These have been replaced, however\nare listed below for reference. \n### Command line flags \nTo edit this file, connect a screen, keyboard and mouse and boot up the OWL. Navigate to the `owl` directory and open\nup `greenonbrown.py` in an editor. If it's an executable file, it will ask you if you want to \"Execute\", \"Execute in\nTerminal\" or \"Open\" (see image below). Make sure to select the `Open` option. \n"
      },
      "source": "https://raw.githubusercontent.com/geezacoleman/OpenWeedLocator/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9500249117312212,
      "result": {
        "original_header": "Green-on-Green",
        "type": "Text_excerpt",
        "value": "For all the details on how to install the Google Coral, please head over to the `models` directory. We have provided an\ninstallation script to make it as straightforward as possible. \n>\u26a0\ufe0f**NOTE**\u26a0\ufe0fThere do appear to be some issues with the exporting functionality of YOLOv5/v8 to .tflite models for use with\nthe Coral. The issue has been raised on the Ultralytics repository and should hopefully be resolved soon. You can follow\nthe updates [here](https://github.com/ultralytics/ultralytics/issues/1312). \n"
      },
      "source": "https://raw.githubusercontent.com/geezacoleman/OpenWeedLocator/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9742021118971845,
      "result": {
        "original_header": "Updating OWL",
        "type": "Text_excerpt",
        "value": "We and others will be continually contributing to and improving OWL as we become aware of issues or opportunities to\nincrease detection performance. Once you have a functioning setup the process to update is simple. First, you'll need to\nconnect a screen, keyboard and mouse to the OWL unit and boot it up. Navigate to the existing owl directory\nin `/home/owl/` and either delete or rename that folder. Remember if you've made any of your own changes to the\nparameters/code, write them down. Then open up a Terminal window (Ctrl + T) and follow these steps: \n>\u26a0\ufe0f**IMPORTANT**\u26a0\ufe0f Before continuing make sure you are in the `owl` virtual environment. Check that `(owl)` appears at the\nstart of each command line, e.g. `(owl) owl@raspberrypi:~ $`. Run `workon owl` if you are unsure. If you are not in\nthe `owl` environment, you will run into errors when starting `owl.py`.\n```\n(owl) owl@raspberrypi:~ $ cd ~\n(owl) owl@raspberrypi:~ $ mv owl owl-old      # this renames the old 'owl' folder to 'owl-old'\n(owl) owl@raspberrypi:~ $ git clone https://github.com/geezacoleman/OpenWeedLocator        # download the new software\n(owl) owl@raspberrypi:~ $ mv OpenWeedLocator owl      # rename the download to 'owl'\n(owl) owl@raspberrypi:~ $ cd ~/owl\n(owl) owl@raspberrypi:~/owl $ pip install -r requirements.txt\n(owl) owl@raspberrypi:~/owl $ chmod a+x owl.py\n(owl) owl@raspberrypi:~/owl $ chmod a+x owl_boot.sh\n```\n \nIf you have multiple units running, the most efficient method is to update one and then copy the SD card disk image to\nevery other unit. Follow these instructions here. ADD INSTRUCTIONS \n## Version History \n|     Version     |                                  File                                  |       Raspbian       |\n|:---------------:|:----------------------------------------------------------------------:|:--------------------:|\n| v1.0.0-owl.img  | [Download](https://www.dropbox.com/s/ad6uieyk3awav9k/owl.img.zip?dl=0) |  Buster (picamera)   |\n| v2.0.0-owl.img  |                              [Download]()                              | Bookworm (picamera2) | \n"
      },
      "source": "https://raw.githubusercontent.com/geezacoleman/OpenWeedLocator/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9210128688959457,
      "result": {
        "original_header": "Troubleshooting",
        "type": "Text_excerpt",
        "value": ">\u26a0\ufe0f**NOTE**\u26a0\ufe0f If you are using the original disk image without updating, there are a number of issues that will appear. We\nrecommend updating to the latest software by following the procedure detailed in the [Updating OWL](#updating-owl)\nsection above. \n"
      },
      "source": "https://raw.githubusercontent.com/geezacoleman/OpenWeedLocator/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8302502681330163,
      "result": {
        "original_header": "Quick Method",
        "type": "Text_excerpt",
        "value": "Download the entire disk image file (v1.0.0-owl.img)\nhere: [OWL disk image](https://www.dropbox.com/s/ad6uieyk3awav9k/owl.img.zip?dl=0) (NOT COMPATIBLE WITH RASPBERRY PI 5) \n ```\n(owl) owl@raspberrypi:~ $ cd ~/owl\n(owl) owl@raspberrypi:~/owl $ bash focus_owl.sh \n ``` \n### OPTIONAL Step 7 - running original `greenonbrown.py` \n"
      },
      "source": "https://raw.githubusercontent.com/geezacoleman/OpenWeedLocator/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8177469721934645,
      "result": {
        "original_header": "Detailed Method",
        "type": "Text_excerpt",
        "value": "```commandline\n>>> import cv2\n>>> import picamera2\n>>> exit()\n```\nThis should then exit you from the Python session. The command line should look like this:\n```commandline\n(owl) owl@raspberrypi:~ $\n```\n \nThis is the `owl_boot.sh` file:\n```commandline\n#!/bin/bash\n\n# automatically determine the home directory, to avoid issues with username\nsource $HOME/.bashrc\n\n# activate the 'owl' virtual environment\nsource $HOME/.virtualenvs/owl/bin/activate\n\n# change directory to the owl folder\ncd $HOME/owl\n\n# run owl.py in the background and save the log output\nLOG_DATE=$(date -u +\"%Y-%m-%dT%H-%M-%SZ\")\n./owl.py > $HOME_DIR/owl/logs/owl_$LOG_DATE.log 2>&1 &\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/geezacoleman/OpenWeedLocator/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8624577324158587,
      "result": {
        "original_header": "Changing detection settings",
        "type": "Text_excerpt",
        "value": "The default config file is `DAY_SENSITIVITY_2.ini` (details provided below). If you change any settings here, make sure\nto save the file before restarting `owl.py`.  \nNavigate to the `owl` directory  | Open the `owl.py` file\n:-------------------------:|:-------------------------:\n![owl_dir](https://user-images.githubusercontent.com/51358498/221152779-46c78fe2-92e6-4e65-9ebd-234ae02c33f6.png) | ![open_greenonbrown_py](https://user-images.githubusercontent.com/51358498/221153072-922d9ed6-8120-4c2d-9bd2-a999030b4723.png) \n"
      },
      "source": "https://raw.githubusercontent.com/geezacoleman/OpenWeedLocator/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8111740009521102,
      "result": {
        "original_header": "Legacy detection settings",
        "type": "Text_excerpt",
        "value": "### Command line flags \n"
      },
      "source": "https://raw.githubusercontent.com/geezacoleman/OpenWeedLocator/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8370852547559466,
      "result": {
        "original_header": "Green-on-Green",
        "type": "Text_excerpt",
        "value": "### Model Training \n"
      },
      "source": "https://raw.githubusercontent.com/geezacoleman/OpenWeedLocator/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8222948189594621,
      "result": {
        "original_header": "Updating OWL",
        "type": "Text_excerpt",
        "value": "|     Version     |                                  File                                  |       Raspbian       |\n|:---------------:|:----------------------------------------------------------------------:|:--------------------:|\n| v1.0.0-owl.img  | [Download](https://www.dropbox.com/s/ad6uieyk3awav9k/owl.img.zip?dl=0) |  Buster (picamera)   |\n| v2.0.0-owl.img  |                              [Download]()                              | Bookworm (picamera2) | \n"
      },
      "source": "https://raw.githubusercontent.com/geezacoleman/OpenWeedLocator/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/geezacoleman/OpenWeedLocator/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "agriculture, diy"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2020 Guy Coleman\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/geezacoleman/OpenWeedLocator/main/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Disclaimer and License",
        "type": "Text_excerpt",
        "value": "<details>\n<summary>Disclaimer and License</summary>\n<br>\n\nWhile every effort has been made in the development of this guide to cover critical details, it is not an exhaustive nor\nperfectly complete set of instructions. It is important that people using this guide take all due care in assembly to\navoid damage, loss of components and personal injury, and are supervised by someone experienced if necessary. Assembly\nand use of OWL is entirely at your own risk and the license expressly states there is no warranty.\n\n```\nMIT License\n\nCopyright (c) 2020 Guy Coleman\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n```\n\n</details>\n"
      },
      "source": "https://raw.githubusercontent.com/geezacoleman/OpenWeedLocator/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "OpenWeedLocator"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "geezacoleman"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 103336,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 9325,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/geezacoleman/OpenWeedLocator/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://picamera.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/geezacoleman/OpenWeedLocator/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "geezacoleman",
          "type": "User"
        },
        "date_created": "2021-08-23T17:35:34Z",
        "date_published": "2021-08-23T17:57:11Z",
        "description": "Welcome to OpenWeedLocator! This is the first (v1.0.0) release of this entirely open-source software and hardware device for green-on-brown image-based weed detection.\r\n\r\nFor full details of OWL, please read through the main page and look through license documents carefully before continuing.\r\n\r\nAs improvements are made and bugs fixed, further releases will be published here. As the community of OWL, you have the opportunity to help shape its future by contributing to the code base and design through GitHub. Please let us know of any issues, recommendations or new opportunities to develop by raising issues and pull requests.\r\n\r\nA DOI for this first release has been developed by Zenodo. If you use this in your research, please consider citing this repository.",
        "html_url": "https://github.com/geezacoleman/OpenWeedLocator/releases/tag/v1.0.0",
        "name": "OpenWeedLocator First Release",
        "release_id": 48299603,
        "tag": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/geezacoleman/OpenWeedLocator/tarball/v1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/geezacoleman/OpenWeedLocator/releases/48299603",
        "value": "https://api.github.com/repos/geezacoleman/OpenWeedLocator/releases/48299603",
        "zipball_url": "https://api.github.com/repos/geezacoleman/OpenWeedLocator/zipball/v1.0.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Hardware Requirements",
        "type": "Text_excerpt",
        "value": "The specific hardware requirements and details for each OWL format are provided below. There are two designs developed \nto ensure improved performance without compromising on the original simplicity of the OWL:\n1. Education layout (original OWL)\n2. Compact OWL\n   * extruded aluminium enclosure\n   * 3D printed enclosure\n\n| Original OWL | Compact OWL - Extruded Aluminium Enclosure                                                                            | Compact OWL - 3D Printed Enclosure                                                                                    |\n|--------------|-----------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------|\n|        ![Finished OWL - small](https://github.com/geezacoleman/OpenWeedLocator/assets/51358498/accae1b1-b00d-40f9-ab95-743b732df2a0)      | ![3D Printed OWL](https://github.com/geezacoleman/OpenWeedLocator/assets/51358498/a9771aa2-355d-40db-ac15-f6da037b63ed) | ![Extruded OWL](https://github.com/geezacoleman/OpenWeedLocator/assets/51358498/d153db2d-624b-427e-832e-599a3a841623) |\n\nAll 3D models and hardware assembly guides are provided in subsequent sections. The quantities of each item below are for \none OWL detection unit for each respective design.\n\n*Please note links provided in tables below to an example online retailer of each component for convenience only. There are\ncertainly many other retailers that may be better suited and priced to your purposes and we encourage you to find local\nsuppliers. Other types of connector, layout and design are also possible, which may change the parts required.*\n"
      },
      "source": "https://raw.githubusercontent.com/geezacoleman/OpenWeedLocator/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Official OWL Hardware",
        "parent_header": [
          "Hardware Requirements"
        ],
        "type": "Text_excerpt",
        "value": "We now have a range of official OWL hardware available to build or purchase.\n"
      },
      "source": "https://raw.githubusercontent.com/geezacoleman/OpenWeedLocator/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "OWL Enclosure",
        "parent_header": [
          "Hardware Requirements",
          "Official OWL Hardware"
        ],
        "type": "Text_excerpt",
        "value": "The Official OWL Enclosure is an extruded aluminium enclosure with rubber seals and a glued with 2mm thick glass lens.\nIt provides a more production friendly, durable and water/chemical resisant option over 3D printed plastic.\n"
      },
      "source": "https://raw.githubusercontent.com/geezacoleman/OpenWeedLocator/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "OWL Driver Board",
        "parent_header": [
          "Hardware Requirements",
          "Official OWL Hardware"
        ],
        "type": "Text_excerpt",
        "value": "The [Official OWL driver board](https://github.com/geezacoleman/owl-driver-board) combines the relay control board, power supply and wiring. It will be available for\npurchase soon, or you can use the files provided to order/make your own.\n"
      },
      "source": "https://raw.githubusercontent.com/geezacoleman/OpenWeedLocator/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Hardware Lists",
        "parent_header": [
          "Hardware Requirements"
        ],
        "type": "Text_excerpt",
        "value": "<details>\n<summary>Original OWL - Hardware List</summary>\n<br>\n\n### Original OWL\nThe original OWL lays out all components in a flat design. It makes the connections and interactions within the system\nclear. It's a great educational tool to learn the parts required for a weed detection system and has served in the field \nas a functional weed detection system for a number of years.\n\n| **Component**                                                                 | **Quantity**      | **Link**                                                                                                                                                                                                                                                                                                                                                                                                          |\n|-------------------------------------------------------------------------------|-------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **Enclosure**                                                                 |                   |                                                                                                                                                                                                                                                                                                                                                                                                                   |\n| Main Case (single Bulgin connector)                                           | 1                 | [STL File](https://github.com/geezacoleman/OpenWeedLocator/blob/main/3D%20Models/Original%20OWL/Enclosure%20-%20single%20connector.stl)                                                                                                                                                                                                                                                                           |\n| *Main Case (cable glands)*                                                    | 1                 | [STL File](https://github.com/geezacoleman/OpenWeedLocator/blob/main/3D%20Models/Original%20OWL/Enclosure%20-%20cable%20gland.stl)                                                                                                                                                                                                                                                                                |\n| Main Cover                                                                    | 1                 | [STL File](https://github.com/geezacoleman/OpenWeedLocator/blob/main/3D%20Models/Original%20OWL/Enclosure%20-%20cover.stl)                                                                                                                                                                                                                                                                                        |\n| Raspberry Pi Mount                                                            | 1                 | [STL File](https://github.com/geezacoleman/OpenWeedLocator/blob/main/3D%20Models/Original%20OWL/Raspberry%20Pi%20mount.stl)                                                                                                                                                                                                                                                                                       |\n| Relay Control Board Mount                                                     | 1                 | [STL File](https://github.com/geezacoleman/OpenWeedLocator/blob/main/3D%20Models/Original%20OWL/Relay%20control%20board%20mount.stl)                                                                                                                                                                                                                                                                              |\n| Voltage Regulator Mount                                                       | 1                 | [STL File](https://github.com/geezacoleman/OpenWeedLocator/blob/main/3D%20Models/Original%20OWL/Voltage%20regulator%20mount.stl)                                                                                                                                                                                                                                                                                  |\n| Camera Mount                                                                  | 1                 | [STL File](https://github.com/geezacoleman/OpenWeedLocator/blob/main/3D%20Models/Original%20OWL/Camera%20mount.stl)                                                                                                                                                                                                                                                                                               |\n| Enclosure Plug                                                                | 1                 | [STL File](https://github.com/geezacoleman/OpenWeedLocator/blob/main/3D%20Models/Original%20OWL/Enclosure%20plug.stl)                                                                                                                                                                                                                                                                                             |\n| **Computing**                                                                 |                   |                                                                                                                                                                                                                                                                                                                                                                                                                   |\n| Raspberry Pi 5 4GB (or Pi 4 or 3B+)                                           | 1                 | [Link](https://core-electronics.com.au/raspberry-pi-5-model-b-4gb.html)                                                                                                                                                                                                                                                                                                                                           |\n| *Green-on-Green ONLY - Google Coral USB Accelerator                           | 1                 | [Link](https://coral.ai/products/accelerator)                                                                                                                                                                                                                                                                                                                                                                     |\n| 64GB SD Card (min. 16 GB)                                                     | 1                 | [Link](https://core-electronics.com.au/extreme-sd-microsd-memory-card-64gb-class-10-adapter-included.html)                                                                                                                                                                                                                                                                                                        |\n| **Camera** (choose one)                                                       |                   |                                                                                                                                                                                                                                                                                                                                                                                                                   |\n| RECOMMENDED: Raspberry Pi Global Shutter Camera                               | 1                 | [Link](https://core-electronics.com.au/raspberry-pi-global-shutter-camera.html)                                                                                                                                                                                                                                                                                                                                   |\n| CCTV 6mm Wide Angle Lens                                                      | 1 (GS or HQ only) | [Link](https://core-electronics.com.au/raspberry-pi-6mm-wide-angle-lens.html)                                                                                                                                                                                                                                                                                                                                     |\n| SUPPORTED: Raspberry Pi 12MP HQ Camera                                        | 1                 | [Link](https://core-electronics.com.au/raspberry-pi-hq-camera.html)                                                                                                                                                                                                                                                                                                                                               |\n| SUPPORTED: Raspberry Pi Camera Module 3                                       | 1                 | [Link](https://core-electronics.com.au/raspberry-pi-camera-3.html)                                                                                                                                                                                                                                                                                                                                                |\n| SUPPORTED: Raspberry Pi V2 Camera (NOT RECOMMENDED)                           | 1                 | [Link](https://core-electronics.com.au/raspberry-pi-camera-board-v2-8-megapixels-38552.html)                                                                                                                                                                                                                                                                                                                      |\n| \u26a0\ufe0fNOTE\u26a0\ufe0f If you use the RPi 5, make sure you have the right camera cable | 1                 | [Link](https://core-electronics.com.au/raspberry-pi-camera-fpc-adapter-cable-200mm.html)                                                                                                                                                                                                                                                                                                                          |\n| **Power**                                                                     |                   |                                                                                                                                                                                                                                                                                                                                                                                                                   |\n| 5V 5A Step Down Voltage Regulator                                             | 1                 | [Link](https://core-electronics.com.au/pololu-5v-5a-step-down-voltage-regulator-d24v50f5.html)                                                                                                                                                                                                                                                                                                                    |\n| 4 Channel, 12V Relay Control Board                                            | 1                 | [Link](https://www.jaycar.com.au/arduino-compatible-4-channel-12v-relay-module/p/XC4440?gclid=Cj0KCQjwvYSEBhDjARIsAJMn0ljQf_l5tRY0D4UyDRlaNBFV6-XAj_UGQzC029d-wiwoCyD6Rzy7x2MaAinhEALw_wcB)                                                                                                                                                                                                                       |\n| M205 Panel Mount Fuse Holder                                                  | 1                 | [Link](https://www.jaycar.com.au/round-10a-240v-m205-panel-mount-fuse-holder/p/SZ2028?pos=17&queryId=11c21fd77c75a11725bd0f093a0fc862&sort=relevance)                                                                                                                                                                                                                                                             |\n| Jumper Wire                                                                   | 1                 | [Link](https://core-electronics.com.au/solderless-breadboard-jumper-cable-wires-female-female-40-pieces.html)                                                                                                                                                                                                                                                                                                     |\n| WAGO 2-way Terminal Block                                                     | 2                 | [Link](https://au.rs-online.com/web/p/splice-connectors/8837544/)                                                                                                                                                                                                                                                                                                                                                 |\n| Bulgin Connector - Panel Mount                                                | 1                 | [Link](https://au.rs-online.com/web/p/industrial-circular-connectors/8068625/)                                                                                                                                                                                                                                                                                                                                    |\n| Bulgin Connector - Plug                                                       | 1                 | [Link](https://au.rs-online.com/web/p/industrial-circular-connectors/8068565/)                                                                                                                                                                                                                                                                                                                                    |\n| Micro USB to USB-C adaptor                                                    | 1                 | [Link](https://core-electronics.com.au/usb-micro-b-to-usb-c-adapter-black.html)                                                                                                                                                                                                                                                                                                                                   |\n| Micro USB Cable                                                               | 1                 | [Link](https://core-electronics.com.au/micro-usb-cable.html)                                                                                                                                                                                                                                                                                                                                                      |\n| **Miscellaneous**                                                             |                   |                                                                                                                                                                                                                                                                                                                                                                                                                   |\n| 12V Chrome LED                                                                | 2                 | [Link](https://www.jaycar.com.au/12v-mini-chrome-bezel-red/p/SL2644)                                                                                                                                                                                                                                                                                                                                              |\n| 3 - 16V Piezo Buzzer                                                          | 1                 | [Link](https://www.jaycar.com.au/mini-piezo-buzzer-3-16v/p/AB3462?pos=8&queryId=404751ef55b1d6b8adef8b031d16576f&sort=relevance)                                                                                                                                                                                                                                                                                  |\n| Brass Standoffs - M2/3/4                                                      | Kit               | [Link](https://www.amazon.com/Hilitchi-360pcs-Female-Standoff-Assortment/dp/B013ZWM1F6/ref=sr_1_5?dchild=1&keywords=standoff+kit&qid=1623697572&sr=8-5)                                                                                                                                                                                                                                                           |\n| M3 Bolts/Nuts                                                                 | 4 each or Kit     | [Link](https://www.amazon.com/DYWISHKEY-Pieces-Stainless-Socket-Assortment/dp/B07VNDFYNQ/ref=sr_1_4?crid=2X7QROKBF9F4D&dchild=1&keywords=m3+hex+bolt&qid=1623697718&sprefix=M3+hex%2Caps%2C193&sr=8-4)                                                                                                                                                                                                            |\n| Wire - 20AWG (red/black/green/blue/yellow/white)                              | 1 roll each       | [Link](https://www.amazon.com/Electronics-different-Insulated-Temperature-Resistance/dp/B07G2GLKMP/ref=sr_1_1_sspa?dchild=1&keywords=20+awg+wire&qid=1623697639&sr=8-1-spons&psc=1&spLa=ZW5jcnlwdGVkUXVhbGlmaWVyPUEyMUNVM1BBQUNKSFNBJmVuY3J5cHRlZElkPUEwNjQ4MTQ5M0dRTE9ZR0MzUFE5VyZlbmNyeXB0ZWRBZElkPUExMDMwNTIwODM5OVVBOTFNRjdSJndpZGdldE5hbWU9c3BfYXRmJmFjdGlvbj1jbGlja1JlZGlyZWN0JmRvTm90TG9nQ2xpY2s9dHJ1ZQ==) |\n| *Optional*                                                                    |                   |                                                                                                                                                                                                                                                                                                                                                                                                                   |\n| Real-time clock module                                                        | 1                 | [Link](https://core-electronics.com.au/adafruit-pirtc-pcf8523-real-time-clock-for-raspberry-pi.html)                                                                                                                                                                                                                                                                                                              |\n\n</details>\n\n<details>\n<summary> Compact OWL - Hardware List</summary>\n<br>\n\n### Compact OWL\nThe new OWL design is more compact, inside either an extruded aluminium enclosure or 3D printed housing. It offers\nimproved water and dust resistance, plus ease of assembly and longevity. This design is recommended for production use.\n\nThe parts list is substantially reduced:\n\n| **Component**                                                        | **Quantity**      | **Link**                                                                                                                                                                                                                                                                                                                                                                                                          |\n|----------------------------------------------------------------------|-------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **Enclosure**                                                        |                   |                                                                                                                                                                                                                                                                                                                                                                                                                   |\n| **OFFICIAL OWL ENCLOSURE** - aluminium                               | 1                 | TBD                                                                                                                                                                                                                                                                                                                                                                                                               |\n| Extrusion - 3D printed                                               | 1                 | [STL File](https://github.com/geezacoleman/OpenWeedLocator/blob/main/3D%20Models/Compact%20OWL/Main%20Body.stl)                                                                                                                                                                                                                                                                                                   |\n| Front plate                                                          | 1                 | [STL File](https://github.com/geezacoleman/OpenWeedLocator/blob/main/3D%20Models/Compact%20OWL/Frontplate.stl)                                                                                                                                                                                                                                                                                                    |\n| Tray                                                                 | 1                 | [STL File](https://github.com/geezacoleman/OpenWeedLocator/blob/picamera2/3D%20Models/Compact%20OWL/Tray.stl)                                                                                                                                                                                                                                                                                                     |\n| Back plate - Amphenol, Adafruit RJ45                                 | 1*                | [STL File](https://github.com/geezacoleman/OpenWeedLocator/blob/main/3D%20Models/Compact%20OWL/Backplate%20-%20Receptacle%20and%20Ethernet.stl)                                                                                                                                                                                                                                                                   |\n| Back plate - Amphenol only                                           | 1*                | [STL File](https://github.com/geezacoleman/OpenWeedLocator/blob/main/3D%20Models/Compact%20OWL/Backplate%20-%20Receptacle%20Only.stl)                                                                                                                                                                                                                                                                             |\n| Back plate - 16 mm cable gland                                       | 1*                | [STL File](https://github.com/geezacoleman/OpenWeedLocator/blob/main/3D%20Models/Compact%20OWL/Backplate%20-%20Gland.stl)                                                                                                                                                                                                                                                                                         |\n| Lens mount                                                           | 1                 | [STL File](https://github.com/geezacoleman/OpenWeedLocator/blob/main/3D%20Models/Compact%20OWL/Lens%20Mount.stl)                                                                                                                                                                                                                                                                                                  |\n| Camera mount                                                         | 1*                | [STL File](https://github.com/geezacoleman/OpenWeedLocator/blob/picamera2/3D%20Models/Compact%20OWL/Camera%20Mount.stl)                                                                                                                                                                                                                                                                                           |\n| **Computing**                                                        |                   |                                                                                                                                                                                                                                                                                                                                                                                                                   |\n| Raspberry Pi 5 4GB (or Pi 4 or 3B+)                                  | 1                 | [Link](https://core-electronics.com.au/raspberry-pi-5-model-b-4gb.html)                                                                                                                                                                                                                                                                                                                                           |\n| *Green-on-Green ONLY - Google Coral USB Accelerator                  | 1                 | [Link](https://coral.ai/products/accelerator)                                                                                                                                                                                                                                                                                                                                                                     |\n| 64GB SD Card (min. 16 GB)                                            | 1                 | [Link](https://core-electronics.com.au/extreme-sd-microsd-memory-card-64gb-class-10-adapter-included.html)                                                                                                                                                                                                                                                                                                        |\n| **Camera** (choose one)                                              |                   |                                                                                                                                                                                                                                                                                                                                                                                                                   |\n| RECOMMENDED: Raspberry Pi Global Shutter Camera                      | 1                 | [Link](https://core-electronics.com.au/raspberry-pi-global-shutter-camera.html)                                                                                                                                                                                                                                                                                                                                   |\n| CCTV 6mm Wide Angle Lens                                             | 1 (GS or HQ only) | [Link](https://core-electronics.com.au/raspberry-pi-6mm-wide-angle-lens.html)                                                                                                                                                                                                                                                                                                                                     |\n| SUPPORTED: Raspberry Pi 12MP HQ Camera                               | 1                 | [Link](https://core-electronics.com.au/raspberry-pi-hq-camera.html)                                                                                                                                                                                                                                                                                                                                               |\n| SUPPORTED: Raspberry Pi Camera Module 3                              | 1                 | [Link](https://core-electronics.com.au/raspberry-pi-camera-3.html)                                                                                                                                                                                                                                                                                                                                                |\n| SUPPORTED: Raspberry Pi V2 Camera (NOT RECOMMENDED)                  | 1                 | [Link](https://core-electronics.com.au/raspberry-pi-camera-board-v2-8-megapixels-38552.html)                                                                                                                                                                                                                                                                                                                      |\n| \u26a0\ufe0fNOTE\u26a0\ufe0f If you use the RPi 5, make sure you have the right camera cable | 1                 | [Link](https://core-electronics.com.au/raspberry-pi-camera-fpc-adapter-cable-200mm.html)                                                                                                                                                                                                                                                                                                                          |\n| **Power Management** * items only needed in place of OWL driver board | 1                 |                                                                                                                                                                                                                                                                                                                                                                                                                   |\n| **OFFICIAL OWL DRIVER BOARD** (incl. power mgmt, relay control)      | 1                 | TBD                                                                                                                                                                                                                                                                                                                                                                                                               |\n| * 5V 5A Step Down Voltage Regulator                                  | 1                 | [Link](https://core-electronics.com.au/pololu-5v-5a-step-down-voltage-regulator-d24v50f5.html)                                                                                                                                                                                                                                                                                                                    |\n| * 4 Channel, Relay Control Board HAT                                 | 1                 | [Link](https://core-electronics.com.au/pirelay-v2-relay-board-for-raspberry-pi-1.html?gad_source=1&gclid=Cj0KCQjw_qexBhCoARIsAFgBlev42xD_VLsmZHCLmIPB-NCCMRCGtKRPbH7WV2ddw4oucobn-XOUpLkaArl5EALw_wcB)                                                                                                                                                                                                            |\n| * Jumper Wire                                                        | 1                 | [Link](https://core-electronics.com.au/solderless-breadboard-jumper-cable-wires-female-female-40-pieces.html)                                                                                                                                                                                                                                                                                                     |\n| Amphenol Fathomlock Connector - 6 pin connector (FLS6BS10N3W3P03)    | 1                 | [Link](https://au.mouser.com/ProductDetail/Amphenol-SINE-Systems/FLS6BS10N3W3P03?qs=ulEaXIWI0c%2FMtNeYzYmViA%3D%3D)                                                                                                                                                                                                                                                                                               |\n| Amphenol Fathomlock Connector - 6 pin plug (FLS710N3W3S03)           | 1                 | [Link](https://au.mouser.com/ProductDetail/Amphenol-SINE-Systems/FLS710N3W3S03?qs=ulEaXIWI0c8tWp%252BkBCr3Ag%3D%3D)                                                                                                                                                                                                                                                                                               |\n| Adafruit RJ45 Cable Gland                                            | 1                 | [Link](https://au.mouser.com/ProductDetail/Adafruit/827?qs=GURawfaeGuA%2FhbkGNTwr3g%3D%3D)                                                                                                                                                                                                                                                                                                                        |\n| 16mm Cable Gland                                                     | 1                 | [Link](https://au.mouser.com/ProductDetail/Davies-Molding/GC1000-B?qs=xhbEVWpZdWd7C8HYv4mDiQ%3D%3D)                                                                                                                                                                                                                                                                                                               |\n| **Miscellaneous**                                                    |                   |                                                                                                                                                                                                                                                                                                                                                                                                                   |\n| 3 - 16V Piezo Buzzer (optional)                                      | 1                 | [Link](https://www.jaycar.com.au/mini-piezo-buzzer-3-16v/p/AB3462?pos=8&queryId=404751ef55b1d6b8adef8b031d16576f&sort=relevance)                                                                                                                                                                                                                                                                                  |\n| Brass Standoffs - M2/3/4 (required for HAT/driver board)             | Kit               | [Link](https://www.amazon.com/Hilitchi-360pcs-Female-Standoff-Assortment/dp/B013ZWM1F6/ref=sr_1_5?dchild=1&keywords=standoff+kit&qid=1623697572&sr=8-5)                                                                                                                                                                                                                                                           |\n| Wire - 20AWG (red/black/green/blue/yellow/white)                     | 1 roll each       | [Link](https://www.amazon.com/Electronics-different-Insulated-Temperature-Resistance/dp/B07G2GLKMP/ref=sr_1_1_sspa?dchild=1&keywords=20+awg+wire&qid=1623697639&sr=8-1-spons&psc=1&spLa=ZW5jcnlwdGVkUXVhbGlmaWVyPUEyMUNVM1BBQUNKSFNBJmVuY3J5cHRlZElkPUEwNjQ4MTQ5M0dRTE9ZR0MzUFE5VyZlbmNyeXB0ZWRBZElkPUExMDMwNTIwODM5OVVBOTFNRjdSJndpZGdldE5hbWU9c3BfYXRmJmFjdGlvbj1jbGlja1JlZGlyZWN0JmRvTm90TG9nQ2xpY2s9dHJ1ZQ==) |\n\n</details>\n"
      },
      "source": "https://raw.githubusercontent.com/geezacoleman/OpenWeedLocator/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Hardware Assembly",
        "parent_header": [
          "Hardware Requirements"
        ],
        "type": "Text_excerpt",
        "value": "Separate guides are provided for the Original OWL assembly and the Compact OWL.\n"
      },
      "source": "https://raw.githubusercontent.com/geezacoleman/OpenWeedLocator/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Required tools",
        "parent_header": [
          "Hardware Requirements",
          "Hardware Assembly"
        ],
        "type": "Text_excerpt",
        "value": "* Wire strippers\n* Wire cutters\n* Pliers\n* Soldering iron/solder (only for Original OWL)\n\n<details>\n<summary> Original OWL - Hardware Assembly</summary>\n<br>\n\n>\u26a0\ufe0f**NOTE**\u26a0\ufe0f All components listed above are relatively \"plug and play\" with minimal soldering or complex electronics required.\nFollow these instructions carefully and triple check your connections before powering anything on to avoid losing\nthe [magic smoke](https://en.wikipedia.org/wiki/Magic_smoke) and potentially a few hundred dollars. Never make changes\nto the wiring on the detection unit while it is connected to 12V and always remain within the safe operating voltages of\nany component.\n\n## Original OWL - Hardware Assembly\n\nA [video guide](https://www.youtube.com/watch?v=vZqNKogzz8k) is available for the Original OWL assembly.\n\nBefore starting, have a look at the complete wiring diagram below to see how everything fits together. The LEDs, fuse and Bulgin connector are all mounted on the rear of the OWL unit, rather than where they are located in the diagram. If you prefer not to use or can't access a Bulgin connector, there is a separate 3D model design that uses cable glands instead.\n\n![wiring diagram-01](https://user-images.githubusercontent.com/40649348/156698009-a58ed01b-258f-462a-9524-ba3f8d7ec246.png)\n\n### Step 1 - enclosure and mounts\n\nAssembling the components for an OWL unit requires the enclosure and mounts as a minimum. These can be 3D printed on\nyour own printer or printed and delivered from one of the many online stores that offer a 3D printing service.\nAlternatively, you could create your own enclosure using a plastic electrical box and cutting holes in it, if that's\neasier. We'll be assuming you have printed out the enclosure and associated parts for the rest of the guide, but please\nshare your finished designs however they turn out!\n\nThe first few steps don't require the enclosure so you can make a start right away, but while you're working on getting\nthat assembled, make sure you have the pieces printing, they'll be used from Step 4. For a complete device, you'll need:\n1 x base, 1 x cover, 1 x RPi mount, 1 x relay mount, 1 x regulator mount, 1 x camera mount and 1 x plug.\n\n### Step 2 - soldering\n\nThere are only a few components that need soldering, including the fuse and voltage regulator:\n\n* Soldering of voltage regulator pins\n* Soldering of 12V input wires to voltage regulator pins\n* Soldering of 5V output wires to voltage regulator pins (micro USB cable)\n* Soldering of red wire to both fuse terminals\n\nCarefully check which pins on the voltage regulator correspond to 12V in, GND in, 5V out and GND out prior to soldering.\n\nTo solder the Micro USB cable to the voltage regulator output, you'll need to cut off the USB A end so you are left with\napproximately 10cm of cable. Using the wire strippers or a sharp box cutter/knife, remove the rubber sheath around the\nwires. If you have a data + charging cable you should see red, green, white and black wires. The charging only cables\nwill likely only have the red and black wires. Isolate the red (+5V) and black (GND) wires and strip approximately 5mm\noff the end. Solder the red wire to the positive output on the voltage regulator and black wire to the GND pin. Once you\nhave finished, it should look like the first panel in the figure below.\n\n>\u26a0\ufe0f**NOTE**\u26a0\ufe0f Soldering can burn you and generates potentially hazardous smoke! Use appropriate care, fume extractors and\nPPE to avoid any injury. If you're new to soldering, read\nthrough [this guide](https://www.makerspaces.com/how-to-solder/), which explains in more detail how to perfect your\nskills and solder safely.\n\n>\u26a0\ufe0f**NOTE**\u26a0\ufe0f When soldering, it's best to cover the exposed terminals with glue lined heat shrink to reduce the risk of\nelectrical short circuits.\n\nVoltage regulator | Voltage regulator pins | Fuse\n:-------------: | :-------------: | :-------------: \n![Vreg](https://media.github.sydney.edu.au/user/5402/files/12c53200-ce9e-11eb-812b-52c51a0c6263) | ![Vregpins](https://media.github.sydney.edu.au/user/5402/files/85abe580-d023-11eb-87ee-c3cad42406fe)| ![Fuse](https://media.github.sydney.edu.au/user/5402/files/240e3e80-ce9e-11eb-8c0f-25e296720072)\n\nOnce the two red wires are soldered to the fuse, the fuse can be mounted on the rear panel of the OWL base. One wire\nwill be connected to the Bulgin plug (next step) and the other to the Wago 2-way block.\n\nFor neater wiring you can also solder jumpers between all the normally open (NO) pins on the base of the relay board,\nbut this is optional. If you don't solder these connections, make sure you connect wire using the screw terminals\ninstead. Photos of both are provided below.\n\nSoldered | Screw terminals\n:-------------: | :-------------: \n![Relayboardunderside](https://media.github.sydney.edu.au/user/5402/files/e5938500-cf6c-11eb-91a2-75685a6d948d) | ![Relayboardalternative](https://media.github.sydney.edu.au/user/5402/files/e88e7580-cf6c-11eb-8e26-7bbce2fb3f71)\n\nThe other wires requiring soldering are joins between the buzzer and jumper wires for easy connection to the GPIO pins\nand from the LEDs to the power in/jumper wires.\n\n### Step 3 - wiring up Bulgin connector\n\nNext we'll need to wire the output relay control and input 12V wires to the Bulgin panel mount connector. Fortunately\nall pins are labelled, so follow the wire number table below. This will need to be repeated for the Bulgin plug as well,\nwhich will connect your solenoids or other devices to the relay control board.\n\nThe process is:\n\n1. Connect all wires to Bulgin connector using the screw terminals\n2. Mount the connector to the rear panel\n3. Leave at least 10cm of wire so it can be connected to the relay board and other connections later.\n\nBulgin terminal number | Wire connection\n:-------------: | :-------------: \n1 | Blue wire - connects to centre terminal (common) on relay 1\n2 | Green wire - connects to centre terminal (common) on relay 2\n3 | Orange wire - connects to centre terminal (common) on relay 3\n4 | White wire - connects to centre terminal (common) on relay 4\n5 | Red 12VDC - connects to fuse wire already soldered. Make sure wire is the right length when mounted. \n6 | Black GND - connects to Wago 2-way terminal\n\n>\u26a0\ufe0f**NOTE**\u26a0\ufe0f Skip this step if you're using cable glands.\n\nOnce all the wires have been connected you can now mount the Bulgin connector to the OWL base.\n\n### Step 4 - mounting the relay control board and voltage regulator\n\nAttach the relay control board to the 3D printed relay control board mount using 2.5 mm standoffs. Attach the voltage\nregulator to the 3D printed voltage regulator mount with 2 mm standoffs. The mounted voltage regulator can then be\nmounted to one corner of the relay control board. The relay board and voltage regulator can then be installed in the\nraised slots in the OWL base.\n\n>\u26a0\ufe0f**NOTE**\u26a0\ufe0f Use **2.5 mm** standoffs for mounting the relay control board to its base. Use **2 mm** standoffs to mount the\nvoltage regulator to its base.\n\n![Relaymount](https://media.github.sydney.edu.au/user/5402/files/964c5500-cf6a-11eb-8d2f-e1282b6411c3)\n\n### Step 5 - wiring the relay control board, voltage regulator, Wago 2-way blocks and Bulgin connector\n\nConnect the relay control board to the Bulgin connector using the table in step 3 as a guide.\n\n>\u26a0\ufe0f**NOTE**\u26a0\ufe0f Some relay control boards such\nas [this](https://www.amazon.com/ELEGOO-Channel-Optocoupler-Arduino-Raspberry/dp/B01HEQF5HU/ref=asc_df_B01HEQF5HU/?tag=hyprod-20&linkCode=df0&hvadid=198076677096&hvpos=&hvnetw=g&hvrand=5997956897740931812&hvpone=&hvptwo=&hvqmt=&hvdev=c&hvdvcmdl=&hvlocint=&hvlocphy=9027902&hvtargid=pla-350609711896&psc=1)\non Amazon are ACTIVE on LOW. This means that the signal provided by the Raspberry Pi (a higher voltage) to activate a\nrelay will instead turn the relay off. While this can be changed in the code, please consider purchasing HIGH level\ntrigger (\ne.g [the board specified in the parts list](https://www.jaycar.com.au/arduino-compatible-4-channel-12v-relay-module/p/XC4440))\nor adjustable trigger (\ne.g. [this board](https://www.amazon.com/DZS-Elec-Optocoupler-Isolation-Triggered/dp/B07BDJJTLZ/ref=asc_df_B07BDJJTLZ/?tag=hyprod-20&linkCode=df0&hvadid=241912880102&hvpos=&hvnetw=g&hvrand=5997956897740931812&hvpone=&hvptwo=&hvqmt=&hvdev=c&hvdvcmdl=&hvlocint=&hvlocphy=9027902&hvtargid=pla-438273746158&psc=1)).\n\nNext, connect red and black jumper wires to the VCC and GND header pins on the relay control board. Now choose one Wago\nblock to be a 12V positive block and the second to be the negative or ground. To the positive block, connect the 12 V\nwire from the fuse (12V input from source), the 12 V input to the voltage regulator, the 12 V solenoid line from the\nrelay board and the VCC line from the relay board to one of the two WAGO terminal blocks, twisting the wires together if\nnecessary. Repeat with the second, negative WAGO terminal block, connecting the input ground line from the Bulgin\nconnector, ground line from the voltage regulator and the GND black wire from the relay board.\n\nInstalled relay board | Relay board wiring diagram | Relay board wiring\n:-------------: | :-------------: | :-------------: \n![Relayboardinstalled](https://media.github.sydney.edu.au/user/5402/files/54c7a400-cf82-11eb-9fb3-250199227384) | ![OWL - relay board diagram](https://media.github.sydney.edu.au/user/3859/files/431ed600-cf5b-11eb-94df-87f01e0a41a4) | ![relayinputs](https://media.github.sydney.edu.au/user/5402/files/cad01780-d023-11eb-98e0-bfcc1c2c03e0) |\n\n### Step 6 - mounting Raspberry Pi and connecting power\n\nAttach the Raspberry Pi to the 3D printed mount using 2.5 mm standoffs. Install in the raised slots in the OWL base.\nConnect to micro USB power from the voltage regulator, using a micro USB to USB-C adaptor. Alternatively, the Raspberry\nPi can be powered over the GPIO, however, this has not yet been implemented.\n\n|                                          Raspberry Pi mount                                          |                                              Raspberry Pi in OWL base                                               |\n|:----------------------------------------------------------------------------------------------------:|:-------------------------------------------------------------------------------------------------------------------:|\n| ![RPimount](https://media.github.sydney.edu.au/user/5402/files/263dcf00-cf6a-11eb-9781-1c2d79c9b96d) | ![1T7A9540](https://user-images.githubusercontent.com/40649348/156697656-df60257b-773a-425c-9c56-33f6e48013b5.jpeg) |\n\n### Step 7 - connecting GPIO pins\n\nConnect the Raspberry Pi GPIO to the relay control board header pins, using the table below and the wiring diagram above\nas a guide:\n\nThe GPIO pins on the Raspberry Pi are not clearly labelled, so use this guide to help. Be careful when connecting these\npins as incorrect wiring can shortcircuit/damage your Pi.\n![image](https://user-images.githubusercontent.com/51358498/152514046-37d5bcf5-348b-4e39-8810-c877acfed852.png)\n\n| RPi GPIO pin | Relay header pin |\n|:------------:|:----------------:|\n|      13      |       IN1        |\n|      14      |       COM        |\n|      15      |       IN2        |\n|      16      |       IN3        |\n|      18      |       IN4        |\n\n|                                         Raspberry Pi GPIO pins                                          |                                       Relay control board header pins                                       |\n|:-------------------------------------------------------------------------------------------------------:|:-----------------------------------------------------------------------------------------------------------:|\n| ![GPIOtorelay](https://media.github.sydney.edu.au/user/5402/files/6adb7000-d027-11eb-81b9-5fecfe0c2c4e) | ![relayheaderpins](https://media.github.sydney.edu.au/user/5402/files/2bf8ea80-d026-11eb-8c5c-685563db7691) |\n\n![1T7A9541](https://user-images.githubusercontent.com/40649348/156697725-9a99ba10-b79c-4963-ab15-b07bb95c7d3a.jpeg)\n\n### Step 8 - mounting and connecting camera\n\nConnect one end of the CSI ribbon cable to the camera. We provide a mounting plate that can be used with both the HQ, Global Shutter or\nV2 cameras, however, we recommend the use of the HQ camera for improved image clarity. Attach the HQ camera to the 3D\nprinted mount using 2.5 mm standoffs (or 2 mm standoffs if using the V2 camera). Ensuring that the CSI cable port on the\ncamera is directed towards the Raspberry Pi, mount the camera inside the OWL case using four M3 standoffs (50 mm long\nfor HQ camera; 20 mm long for V2 camera). Connect the other end of the CSI cable to the Raspberry Pi CSI camera port.\n\nBefore connecting the lens, please be aware the HQ camera comes with fitted a C-CS mount adapter which needs to be\nremoved before fitting the 6mm lens. The image won't focus unless the adapter is removed. More information is available\nbelow and in the [HQ Camera Datasheet](https://datasheets.raspberrypi.com/hq-camera/cs-mount-lens-guide.pdf)\n\nHow to remove the C-CS mount adapter:\n\nHQ camera C-CS mount adapter | Camera and adapter separated | Lens fitted without adapter\n:-------------: | :-------------: | :-------------:\n![adapter1](https://github.com/geezacoleman/OpenWeedLocator/assets/51358498/3ab35c57-77c1-4ce0-b627-410a3598db93)|![adapter2](https://github.com/geezacoleman/OpenWeedLocator/assets/51358498/7f50e5c8-9dd7-4e29-94d7-8bf8e907e011)|![adapter3](https://github.com/geezacoleman/OpenWeedLocator/assets/51358498/322d6409-8509-4895-8896-5959a5f529bc)\n\nMounting the HQ camera to the 3D printed mount:\nHQ camera and mount | HQ camera mounted in case\n:-------------: | :-------------:\n![1T7A9544](https://user-images.githubusercontent.com/40649348/156695569-ded4679b-f94f-433a-a81f-08a5c409e61c.jpeg) | ![1T7A9545](https://user-images.githubusercontent.com/40649348/156695635-9fd58bb7-303c-4aa8-b5c7-c16b818a51f0.jpeg)\n\nMounting the V2 camera to the 3D printed mount:\nV2 camera and mount | V2 camera mounted in case | Raspberry Pi camera port\n:-------------: | :-------------: | :-------------:\n![1T7A9558](https://user-images.githubusercontent.com/40649348/156695701-49598e62-fdba-4416-88d1-fbf158fe99ef.jpeg) | ![1T7A9559](https://user-images.githubusercontent.com/40649348/156695786-c34f84e3-26db-4198-80e3-96a5da4b52d3.jpeg) | ![Cameracable](https://media.github.sydney.edu.au/user/5402/files/7ed2a200-d026-11eb-93cb-26a91d727094)\n\nThe HQ lens will need to be focused, details below, once the software is correctly set up.\n\n### Step 9 - adding buzzer and LEDs\n\nMount the buzzer inside the OWL base using double sided mounting tape and connect the 5 V and ground wires to Raspberry\nPi GPIO pins 7 and 9, respectively.\n\nFor simplicity we have used two 12V LEDs (which are just normal LEDs with a current limiting resistor included) for both\nthe 5V TX/GND connection for Raspberry Pi status indication and also the 12V power connection. While 12 V will work fine\non both, the 5 V connection will be dimmer. If you want to use a non-prepackaged, 3 mm LED for the 5V connection, you\nshould solder a current limiting resistor to the LED to prevent damage to either the LED or the Rasperry Pi as\ndescribed [here](https://howchoo.com/g/ytzjyzy4m2e/build-a-simple-raspberry-pi-led-power-status-indicator). Install the\n5 V LED inside the OWL base and connect the 5V and ground wire to GPIO pins 8 (TX pin) and 20 (GND pin), respectively.\nInstall the 12 V LED inside the OWL base and connect the 12 V and GND wires to their respective WAGO terminal blocks.\n\nBuzzer location | LEDs in OWL base | GPIO pins\n:-------------: | :-------------: | :-------------:\n![1T7A9546](https://user-images.githubusercontent.com/40649348/156696065-177d675e-a0c1-45f8-8e17-acf90ef13314.jpeg) | ![LEDs](https://media.github.sydney.edu.au/user/5402/files/79bc1700-cf82-11eb-80b2-646f2c74fcc9) | ![GPIOpins](https://media.github.sydney.edu.au/user/5402/files/e0474080-d027-11eb-93fd-8c7b7c783eea)\n\n### OPTIONAL STEP - adding real time clock module\n\nAlthough optional, we recommend that you use a real time clock (RTC) module with the OWL system. This will enable the\nRaspberry Pi to hold the correct time when disconnected from power and the internet, and will be useful for debugging\nerrors if they arise. The RTC uses a CR1220 button cell battery and sits on top of the Raspberry Pi using GPIO pins 1-6.\n\nPiRTC module | RTC installed on Raspberry Pi\n:-------------: | :-------------: \n![RTC](https://media.github.sydney.edu.au/user/5402/files/a59bd300-d03c-11eb-847a-d0813f44fcb2) | ![1T7A9550](https://user-images.githubusercontent.com/40649348/156696142-8dd8aaa7-756a-4ff2-a638-7ebfb68165e6.jpeg)\n\n### Step 10 - connecting mounting hardware and OWL cover\n\nThere are four 6.5 mm holes on the OWL base for mounting to a boom. Prior to installing the OWL cover, decide on a\nmounting solution suitable to your needs. In the photo below, we used 4 x M6 bolts. The cover of the OWL unit is secured\nwith 4 x M3 nuts and bolts. Place M3 nuts into the slots in the OWL base. This can be fiddly and we suggest using\ntweezers, as shown below. Place the cover onto the base and secure using M3 bolts.\n\nMounting hardware | Cover nuts | Completed OWL unit\n:-------------: | :-------------: | :-------------:\n![1T7A9551](https://user-images.githubusercontent.com/40649348/156698150-f23571cd-867e-42c7-96ea-125304551d8a.jpeg) | ![1T7A9553](https://user-images.githubusercontent.com/40649348/156698184-464bbded-8e53-4ebc-b6aa-242d8c96ae6e.jpeg) | ![1T7A9554](https://user-images.githubusercontent.com/40649348/156698342-4b3ebba5-337e-469c-bd0e-c34985d57b83.jpeg)\n\n</details>\n\n<details>\n<summary> Compact OWL - Hardware Assembly</summary>\n<br>\n\nOne major benefit of the Compact OWL (with the OWL driver board) is that no soldering is required. The design removes \nmuch of the wiring, improving ease of assembly and reliability. If you choose a Raspberry Pi Relay HAT instead of the \nOWL driver board, you'll just need to add a voltage regulator and solder that in to provide the 5V @ 5A required for \nthe Raspberry Pi 5 or up to 3A required for the older models.\n\nThere are two options for the enclosure. The 3D printed enclosure and the official OWL extruded aluminium enclosure. Both share\na 3D printed tray and the same components. The 3D printed version allows you to make a start without needing to buy bespoke\ncomponents if you have access to a 3D printer.\n\nThe 3D model files for the printed enclosure can be downloaded [here]().\n\nThe Official OWL Enclosure will be available for purchase through the OWL store soon.\n\n| Compact OWL - Extruded Aluminium Enclosure                                                                            | Compact OWL - 3D Printed Enclosure                                                                                    |\n|-----------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------|\n| ![3D Printed OWL](https://github.com/geezacoleman/OpenWeedLocator/assets/51358498/a9771aa2-355d-40db-ac15-f6da037b63ed) | ![Extruded OWL](https://github.com/geezacoleman/OpenWeedLocator/assets/51358498/d153db2d-624b-427e-832e-599a3a841623) |\n\n>\u26a0\ufe0f**NOTE**\u26a0\ufe0f The 3D printed version requires the additional purchase of:\n1. [1.6mm](https://au.rs-online.com/web/p/o-ring-cords/1591478) and [3mm](https://au.rs-online.com/web/p/o-ring-cords/1591490) nitrile rubber o-ring cord\n2. [M2, M3 and M4 threaded inserts](https://www.amazon.com.au/WEZCHUGHAOL-Threaded-Embedment-Printing-Components/dp/B0CN39ZSC2/ref=sr_1_21_sspa?crid=2R258Z1R9XYJQ&dib=eyJ2IjoiMSJ9.YV_8e4yZB5Up2sxjc6yADA7Nnr7U_kpewviCOxQiUAiT6HPGv5rLlXY1PVeDUBAfmO5LAuekzE8VmOU_0V6pDgL1lOmLjEqU8cGrC2bBxPeu3bDe1ZAScHdT6FLAoWi8i-J9F7nz0hj0S_zyow4N92_ZBdySI1CdG651qgCoF7hC5Av5xYcZBqJ41agRh0WjTmNiIGDV9LRODEPy9hAwFm7tM8XzQpL7jXGtycJNoqOVEEck64araKnzphdkqWC0wKWFVRQOyTKw7LM3TBAsXJPsq83qrBvGJ0vNIgayg2Y.gVKTvrTwcC1PdIZc9g_UckOD3B8z063oPKo9M3o9-Sg&dib_tag=se&keywords=embedded+nuts+threaded&qid=1715135215&sprefix=embedded+nuts+threadd%2Caps%2C385&sr=8-21-spons&sp_csd=d2lkZ2V0TmFtZT1zcF9tdGY&psc=1) + M2, M3 and M4 hex head screws\n3. [K&F Concept 37 mm UV lens filter](https://www.amazon.com.au/Concept-18-Layer-Protection-Nanotech-Ultra-Slim/dp/B07NYPCPD5/ref=sr_1_4_sspa?crid=7B57R6GYCCC3&dib=eyJ2IjoiMSJ9.WLMO784g_HVvxPY8RxBi3DdjOJlAw_RRc543yR2qlin4vGGdFusrTxn-OxNr4IQHY_EKtKFwLx9ti6e-ALuUeVuEPGkmCZS7yYe_uisRUN6iDpCOagXAL06Q0aOmh6lWsjS1evk7QMSITdwViuI32n7Ow8KUD6r4Lwm8aun0tsPdBgr3D5Mzo02aGihHL0BmXnmzfR2qbmxQlxaYH-v-IKB2FeQFeMQWt8vFQSe__lSOo3g9ZlSra5mTliSksZh7TLDxBywpR6vOkLD8b1Lxf7ZO__iZLLj9-fmmRJeWQ38.RnnA1gpAajKrN8o4tZgGclc3GRE1tvm50y234Ah4mVE&dib_tag=se&keywords=37mm%2Buv%2Blens%2Bfilter&qid=1715135313&sprefix=37%2Bmm%2BUV%2Bl%2Caps%2C316&sr=8-4-spons&sp_csd=d2lkZ2V0TmFtZT1zcF9hdGY&th=1)\n\n### Step 1 - enclosure, camera and mounts\nThe internal tray is the same for both the extruded aluminium or 3D printed enclosures. The 3D printed tray suits the\nRaspberry Pi HQ Camera and the Global Shutter Camera. A separate mount is available for the Camera Module 3. Details are\nprovided below.\n\nBegin camera installation by removing the adapter ring and fitting the lens. The camera will not focus with this \nring.\n\n| Global Shutter camera with adapter ring atached                                                                                 | Adapter ring removed                                                                                                    |\n|---------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------|\n| ![camera_adapter_removal](https://github.com/geezacoleman/OpenWeedLocator/assets/51358498/8bd43460-e3de-4978-9eb7-641602024ab9) | ![camera_install](https://github.com/geezacoleman/OpenWeedLocator/assets/51358498/f3972dbc-c41a-4d86-83a4-ea237f0fa267) |\n\n\nMount the camera to the front of the tray using M2.5 standoffs. The Global Shutter camera requires slightly longer\nstandoffs to get past the plastic backing cover. Run the ribbon cable over the top of the tray (as pictured)\n\n| Internal tray                                                                                                                 | Mounting the camera                                                                                                           | Mounting the camera                                                                                                           |\n|-------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------|\n| ![20240502_125849_crop](https://github.com/geezacoleman/OpenWeedLocator/assets/51358498/ba347b54-3e51-402a-a9c6-91eb178ac642) | ![20240502_125728_crop](https://github.com/geezacoleman/OpenWeedLocator/assets/51358498/7298fc98-96b9-4bf0-8a27-7d74a925298f) | ![20240502_125716_crop](https://github.com/geezacoleman/OpenWeedLocator/assets/51358498/730ef3dc-40b8-403a-8045-7b8600478413) |\n\nOnce the camera is secured, mount the Raspberry Pi using 4 x M2.5 x 5mm long standoffs. To secure the Pi, use 4 x 15mm \nstandoffs. These will be used to mount the HAT.\n\n| Raspberry Pi 4B mounted on tray                                                                                               |\n|-------------------------------------------------------------------------------------------------------------------------------|\n| ![20240502_125635_crop](https://github.com/geezacoleman/OpenWeedLocator/assets/51358498/6605aeaf-174b-4120-beeb-ad40ec189f3f) |\n\n#### 3D printed enclosure\nThe 37 mm UV lens filter is installed on the faceplate with 8 M2 heat-set threaded inserts and M2 hex head screws. Add\nthe 1.6mm nitrile rubber o-ring cord to the internal channel on the lens mount. Firmly press the 37 mm UV lens filter into the \nchannel on the faceplate.\n\nTighten down the 8 M2 screws in a cross pattern (similar to how a car tyre is installed), to avoid cracking the 3D printed\nmount.\n\n| Faceplate                                                                                                                     | Lens mount                                                                                                              | Lens fitted with o-ring                                                                                                     |\n|-------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------|\n| ![faceplate_clean_crop](https://github.com/geezacoleman/OpenWeedLocator/assets/51358498/43e4d33f-5649-48d7-bdcd-cb4fe766fbe0) | ![lens_cover_crop](https://github.com/geezacoleman/OpenWeedLocator/assets/51358498/e32c8b5a-5c4f-4b3d-8206-9665de723f81) | ![faceplate_lens](https://github.com/geezacoleman/OpenWeedLocator/assets/51358498/e355db9b-1bdb-4009-afe2-2a6f7ce35461) |\n\nThe 3D printed enclosure also supports the mounting of the Camera Module 3 with an extra 3D printed part. Using M2 threaded \ninserts in the faceplate, mount the plate with approx. 5mm long M2 standoffs. Route the camera ribbon cable over the top.\n\n| Camera mounted on backplate                                                                                                   | Faceplate with standoffs and backplate                                                                                        | Assembled                                                                                                                     |\n|-------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------|\n| ![20240507_095647_crop](https://github.com/geezacoleman/OpenWeedLocator/assets/51358498/13deaca2-0e49-4296-a52f-d3de9e280630) | ![20240507_095748_crop](https://github.com/geezacoleman/OpenWeedLocator/assets/51358498/828289af-f351-4be2-90f9-46fa3341ffbb) | ![20240507_100004_crop](https://github.com/geezacoleman/OpenWeedLocator/assets/51358498/d1852882-f98a-4a28-8431-22f9bcb09bd1) |\n\n\n### Step 2 - connecting the Official OWL HAT\nThe OWL Hat simply fits over the GPIO pins and is mounted using the 4 x 15 mm standoffs installed in the previous step.\nSecure the HAT with 4 x 2.5mm screws and tighten down.\n\nPWM or GPIO control is selected with four jumper pins (in blue below). \n\n| Fitted Official OWL HAT                                                                                                  | OWL Hat jumpers                                                                                                               | GPIO pin assignment                                                                                                           |\n|--------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------|\n| ![mounted owl hat](https://github.com/geezacoleman/OpenWeedLocator/assets/51358498/d080805a-507f-4d9a-a363-25124c52c101) | ![20240502_123112_crop](https://github.com/geezacoleman/OpenWeedLocator/assets/51358498/ad1e522f-316b-4bc3-90c7-4415e5608205) | ![20240502_123121_crop](https://github.com/geezacoleman/OpenWeedLocator/assets/51358498/8a567873-0c5e-4c46-ba97-c6dbc0a2d352) |\n\nThe default option is for GPIO control as pictured. By default the OWL HAT is wired as shown above:\n\n```ini\n[Relays]\n# defines the relay ID (left) that matches to a boardpin (right) on the Pi.\n# Only change if you rewire/change the relay connections.\n0 = 13\n1 = 15\n2 = 16\n3 = 18\n```\nThe final jumper pin `Pi Power Supply Enable` connects the Raspberry Pi to the 5V provided by the HAT. Only connect this jumper once you want the \nPi to start.\n\n#### Step 2a - connecting a generic relay HAT\n\nInstead of the Official OWL HAT, a relay control HAT (such as [this from PiHut](https://core-electronics.com.au/pirelay-v2-relay-board-for-raspberry-pi-1.html?))\ncan be used, with some minor changes to the OWL software. There are many different relay HATs available, so check which\nis most suitable for your purposes. Be sure to choose one with accessible GPIO pins.\n\nFit the HAT as recommended by the manufacturer, similar to the below images (source: The PiHut).\n\n| HAT | Installed HAT |\n|-----|---------------|\n| ![image](https://github.com/geezacoleman/OpenWeedLocator/assets/51358498/bf16cf89-0955-4822-8a8a-c3bd7c295c7f)   |    ![image](https://github.com/geezacoleman/OpenWeedLocator/assets/51358498/4c0987a7-936f-4338-ac72-6ee352bc2636)           |\n\nIn its default configuration, this specific relay HAT assigns GPIO boardpins 29, 31, 33, and 35 to relays 4 - 1\nrespectively. This differs to the default OWL configuration, so the `[Relays]` section of the config file would need to\nbe updated. Using this board as the example:\n\n```ini\n[Relays]\n# defines the relay ID (left) that matches to a boardpin (right) on the Pi.\n# Only change if you rewire/change the relay connections.\n0 = 35\n1 = 33\n2 = 31\n3 = 29\n```\n However, if you use another relay HAT check the assignment/configuration of relays to boardpins. For reference, use this\n GPIO guide to help.\n\n<p align=\"center\">\n<img src=\"https://user-images.githubusercontent.com/51358498/152514046-37d5bcf5-348b-4e39-8810-c877acfed852.png\" width=\"400\">\n</p>\n\n#### Step 2b - connecting the voltage regulator\nWithout the OWL HAT, 5V power to Pi needs to be supplied separately. We recommend the [Pololu 5V 5.5A step down voltage\nregulator](https://core-electronics.com.au/pololu-5v-5-5a-step-down-voltage-regulator-d36v50f5.html), however, \nthere are many options available.\n\nSolder wires to the input and output of the voltage regulator. Using WAGO connector blocks, connect the input to the 12V\nfrom the Amphenol connector. Mount the regulator to the underside of the internal tray using M2 standoffs.\n\n<p align=\"center\">\n<img src=\"https://github.com/geezacoleman/OpenWeedLocator/assets/51358498/b939e26f-1785-4d4e-8476-ec5721526724\" width=\"400\">\n</p>\n\n##### Raspberry Pi 3B+ or 4B\nThe earlier models of the Raspberry Pi consumer less power (3A @ 5V) than the Raspberry Pi 5 and can be powered over single 5V and GND\npins on the GPIO. Use high quality connectors here or consider soldering directly to the GPIO pins on the HAT. A good\nconnection without risk of coming loose, is critical.\n\nYou'll need to solder to pins 2 (5V) and 6 (GND) on the relay HAT. More details provided \n[here](https://thepihut.com/blogs/raspberry-pi-tutorials/how-do-i-power-my-raspberry-pi) from The PiHut (image source).\n\n<p align=\"center\">\n<img src=\"https://github.com/geezacoleman/OpenWeedLocator/assets/51358498/c8eeacde-0e6c-4de2-8120-a343cdcbc756\" width=\"400\">\n</p>\n\n##### Raspberry Pi 5\nThe Raspberry Pi 5 consumes up to 5A @ 5V, so it's suggested to use 2 x 5V and 2 x GND pins on the Raspberry Pi.\nSome good information on the topic is provided [here](https://forums.raspberrypi.com/viewtopic.php?t=367896).\n\nUsing the two 5V outputs from the voltage regulator, solder one +5V wire to pin 2 and another to pin 4 on the GPIO on \nthe HAT relay. Similarly, connect two GND wires from the voltage regulator output to pins 30 and 34. Ensure there is a \ngood solder connection, without any short circuits to neighbouring pins.\n\nThe images below are from a Raspberry Pi 5, however, the setup is the same for the 4B and 3B+ models just with one 5V/GND\nwire.\n\n| HAT installation - GPIO                                                                                                      | HAT installation - soldering the 2 x 5V, 2x GND                                                                           | HAT Installation - voltage regulator                                                                                              |\n|---------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------|\n| ![relay_hat_1_crop](https://github.com/geezacoleman/OpenWeedLocator/assets/51358498/dc678435-e59a-44ae-a2d8-4eab43c7797c) | ![relay_hat_2_crop](https://github.com/geezacoleman/OpenWeedLocator/assets/51358498/a87a34c6-148e-41c7-b092-e429aa5cb3fd) | ![relay_hat_3_crop](https://github.com/geezacoleman/OpenWeedLocator/assets/51358498/e3bb13fa-26f3-42d6-ac21-3862ccfcd701) |\n\n### Step 3 - wiring the connector and HAT\nBegin by wiring the [Amphenol EcoMate Aquarius receptacle](https://au.mouser.com/ProductDetail/Amphenol-SINE-Systems/FLS710N3W3S03?qs=ulEaXIWI0c8tWp%252BkBCr3Ag%3D%3D). The connector has 3 x 16 guage connections rated to 13A and 3 x 20 \nguage rated up to 7.5A (machined) or 5A (stamped). Use the appropriate crimp connections for the 16 and 20 guage connections. \n\n<p align=\"center\">\n<img src=\"https://github.com/geezacoleman/OpenWeedLocator/assets/51358498/e6ae15b0-cec5-4295-aa66-dbe5f731cc4b\" height=\"300\">\n</p>\n\nConnections are labeled A - F on the receptacle and should be made in the following order:\n\n1. +12V (red) - A\n2. GND (black) - E\n3. relay 1 (blue) - B\n4. relay 2 (green) - C\n5. relay 3 (orange) - D\n6. relay 4 (white) - F\n\nUnlike the relay HATs and relay board in the Original OWL, the common ground for the OWL driver board is routed through \nthe board itself, reducing the wiring required. Connect the wires from the back of the connector to each relay, \nusing the above list as a guide. The finished result should appear similar to the images below. Add heat shrink at \nthe end of each wire for neater and more reliable connections.\n\n| Connector with wires                                                                                                          | Completed HAT                                                                                                                     | Completed HAT mounted on the Pi                                                                                        |\n|-------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------|\n| ![20240507_160726_crop](https://github.com/geezacoleman/OpenWeedLocator/assets/51358498/e225496d-f08b-4304-8239-bcee196a5524) | ![owl_driver_board_install](https://github.com/geezacoleman/OpenWeedLocator/assets/51358498/8735a833-f157-456a-a6cd-3dd037ed6e5d) | ![finished_tray](https://github.com/geezacoleman/OpenWeedLocator/assets/51358498/50ea79c5-ee7c-4e95-9a46-5f57d773de1b) |\n\n>**OPTIONAL** Add a 5V buzzer inside the OWL by mounting it to the corner of the HAT with a screw. Connect the 5 V and ground wires \nto Raspberry Pi GPIO pins 7 and 9, respectively. The buzzer is useful for identifying when the OWL has started successfully.\nIt isn't essential to operation.\n\n>**OPTIONAL** Add Kapton tape to the camera cable and internal wiring. Kapton tape is a god insulator and resistant to high\ntemperatures, improving the robustness of the device.\n\n| Tray with Kapton tape                                                                                                         |\n|-------------------------------------------------------------------------------------------------------------------------------|\n| ![finished_tray_kapton](https://github.com/geezacoleman/OpenWeedLocator/assets/51358498/3c206482-1d8a-4a78-9963-11f1e4401bf7) |\n\n\n### Step 4 - inserting the tray and closing the device\n>\u26a0\ufe0f**NOTE**\u26a0\ufe0f For software installation, you'll need access to the Raspberry Pi display, and USB ports. We recommend you\nset up the software prior to completing the build and inserting the tray. Alternatively, flash the SD card with one of \nthe provided owl disk images.\n\nTo improve the resistance to dust and water ingression on the 3D printed version, you'll need to add a 3mm nitrile rubber \no-ring around the face- and backplates of the enclosure.\n\n| Faceplate with o-ring                                                                                                    | Backplate with o-ring                                                                                                   |\n|--------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------|\n| ![frontplate_crop](https://github.com/geezacoleman/OpenWeedLocator/assets/51358498/512e020e-0482-4542-a3a4-25ea811a988d) | ![backplate_crop](https://github.com/geezacoleman/OpenWeedLocator/assets/51358498/879c68b3-d379-44b0-8254-3137922bfb5c) |\n\nFix the faceplate to the enclosure with the 4 x M4 screws. The 3D printed enclosure will need 4 x M4 threaded inserts set\ninto the plastic on the back and front of the enclosure body. Carefully push the tray into the enclosure on the second row,\nmaking sure wires are not caught up on the side.\n\n<p align=\"center\">\n<img src=\"https://github.com/geezacoleman/OpenWeedLocator/assets/51358498/ddf1d660-feac-4e7c-b4d5-f3a36d464192\" width=\"400\">\n</p>\n\nFor the single Amphenol EcoMate Aquarius receptacle, push it through the backplate and tighten down. Fix the backplate\nto the enclosure.\n\n| Front                                                                                                                   | Back                                                                                                                    |\n|-------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------|\n| ![fron_enclosure](https://github.com/geezacoleman/OpenWeedLocator/assets/51358498/c5d8c4d7-21d0-4987-9691-cd9a8615b65a) | ![enclosure_back](https://github.com/geezacoleman/OpenWeedLocator/assets/51358498/4ddf0538-265e-4e6b-aebd-040336d1562b) |\n\n\nThere is a choice of three different backplates, depending on your hardware requirements. They include:\n1. 1 x hole for the Amphenol EcoMate Aquarius\n2. 2 x holes for the Amphenol EcoMate Aquarius and Adafruit waterproof RJ45 (ethernet) connector\n3. 1 x 16mm hole for a 16mm cable gland.\n\nIf you would prefer a different arrangement, just get in touch or raise an issue and we can sort it out for you!\n\n| Backplate options (aluminium)                                                                                                 | Backplate options (3D printed)                                                                                                |\n|-------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------|\n| ![20240502_122757_crop](https://github.com/geezacoleman/OpenWeedLocator/assets/51358498/07ff7316-0af2-413c-b7ff-a94f678fe8e6) | ![20240503_123813_crop](https://github.com/geezacoleman/OpenWeedLocator/assets/51358498/189d9ad1-7734-429e-9ce5-f1c4fdb74ef5) |\n\nAnd you're all done! Congratulations on building your OWL.\n\n</details>\n\n<details>\n<summary> Connecting Solenoids for Spot Spraying</summary>\n<br>\n\n### Optional Step - connecting 12V solenoids\n\nOnce you have completed the setup, you now have the opportunity to wire up your own solenoids for spot spraying,\ntargeted tillage, spot flaming or any other targeted weed control you can dream up. To do this, wire the GND wire of\nyour device (it can be any wire if it's a solenoid) to the ground pin on the Bulgin plug (the same wire used for the GND\nfrom the 12V power source) and wire the other to one of the blue, green, orange or white wires on pins 1 - 4. A wiring\ndiagram is provided below. The easiest way to wire them together to the same GND wire is to create a six-way harness,\nwhere one end is connected to the plug, one of the five other wires to the source power GND and the remaining four to\nthe solenoids or whatever devices you are driving.\n\n![solenoid wiring-01](https://user-images.githubusercontent.com/40649348/156698481-3d4fec4e-567a-4a18-b72e-b26d35c8d1c7.png)\n\nBulgin plug | Ground wiring harness\n:-------------: | :-------------:\n![Bulginplug](https://media.github.sydney.edu.au/user/5402/files/7f753380-d03a-11eb-8d9b-658db73d3408) | ![Groundharness](https://media.github.sydney.edu.au/user/5402/files/7e440680-d03a-11eb-9af1-67132f4cc36f)\n\n</details>\n"
      },
      "source": "https://raw.githubusercontent.com/geezacoleman/OpenWeedLocator/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "SBC Options",
        "parent_header": [
          "Hardware Requirements",
          "Hardware Assembly"
        ],
        "type": "Text_excerpt",
        "value": "A single board computer or SBC is the brains behind the OWL. It can do all the image processing and logic within a\nsingle, roughly credit card sized board without moving parts. These SBCs are the backbone of embedded computing or 'edge\ncomputing'. While the Raspberry Pi is arguably one of the most widely used and well supported SBCs there are many\ndifferent options out there. Each has their strengths and weaknesses and may or may not be good fits with the OWL. We've\nproviding a summary of some SBCs below, but this isn't an exhaustive list.\n\nCurrently, only Raspberry Pi 5, 4 and 3B+ work with the OWL and have been tested in full. Early tests (alpha) have been\nmade with the LibreComputer LePotato. We will update the 'Works with OWL' column as more boards are tested in the\ncommunity.\n\n<details>\n<summary> A summary of possible single board computers (SBCs) to use with the OWL</summary>\n<br>\n\n| Name                                                                                                      | CPU                                                            | RAM   | MIPI | USB          | GPU               | Pros                                                                                                         | Cons                                         | Dimensions        | OWL?                                                                                                 | Image                                                                    |\n|-----------------------------------------------------------------------------------------------------------|----------------------------------------------------------------|-------|------|--------------|-------------------|--------------------------------------------------------------------------------------------------------------|----------------------------------------------|-------------------|------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------|\n| [Raspberry Pi 5](https://datasheets.raspberrypi.com/rpi5/raspberry-pi-5-product-brief.pdf)                | Broadcom BCM2712, quad-core 64-bit ARM Cortex-A76              | 1-8GB | 2    | 2x3.0, 2x2.0 | VideoCore VII     | Large community, affordable, PCIe 2.0 lane for externals (including Google Coral and solid state harddrives) | Limited GPU performance, no eMMC storage     | 88 x 58 x 19.5mm  | :heavy_check_mark:                                                                                   | Manual install only (disk image coming soon)                             |\n| [Raspberry Pi 4B](https://www.raspberrypi.com/products/raspberry-pi-4-model-b/specifications/)            | Broadcom BCM2711, quad-core Cortex-A72                         | 1-8GB | 2    | 2x3.0, 2x2.0 | VideoCore VI      | Large community, affordable                                                                                  | Limited GPU performance, no eMMC storage     | 88 x 58 x 19.5mm  | :heavy_check_mark:                                                                                   | [OWL v1.0.0](https://www.dropbox.com/s/ad6uieyk3awav9k/owl.img.zip?dl=0) |\n| [Raspberry Pi 3B+](https://www.raspberrypi.com/products/raspberry-pi-3-model-b-plus/)                     | Broadcom BCM2837B0, quad-core Cortex-A53                       | 1GB   | 1    | 4x2.0        | VideoCore IV      | Large community, affordable                                                                                  | Limited GPU performance, no eMMC storage     | 85 x 56 x 17mm    | :heavy_check_mark:                                                                                   | [OWL v1.0.0](https://www.dropbox.com/s/ad6uieyk3awav9k/owl.img.zip?dl=0) |\n| [Raspberry Pi CM4](https://www.raspberrypi.com/products/compute-module-4/?variant=raspberry-pi-cm4001000) | Broadcom BCM2711 quad-core Cortex-A72                          | 1-8GB | 0    | 0            | VideoCore IV      | Integration into custom carrier boards, EMMC                                                                 | Needs carrier board                          | 55 x 40 x 4.7mm   | -                                                                                                    | -                                                                        |\n| [Libre Computer LePotato](https://libre.computer/products/aml-s905x-cc/)                                  | Amlogic S905X                                                  | 1/2GB | 0    | 4x2.0        | Mali-450 @ 750MHz | Affordable                                                                                                   | Limited community support, no onboard Wi-Fi  | 85 x 56mm         | :warning: alpha ([full report here](https://github.com/geezacoleman/OpenWeedLocator/discussions/70)) | TBA                                                                      |\n| [Libre Computer Renegade](https://libre.computer/products/roc-rk3328-cc/)                                 | Rockchip RK3328, 4 Core Cortex-A53                             | 1-4GB | 0    | 1x3.0, 2x2.0 | Mali-450 @ 500MHz | 4K HDR support                                                                                               | Limited community support, no onboard Wi-Fi  | 85 x 56mm         | -                                                                                                    | -                                                                        |\n| [Libre Computer Renegade Elite](https://libre.computer/products/roc-rk3399-pc/)                           | Rockchip RK3399, 2 Core Cortex-A72 + 4 Core Cortex-A53         | 4GB   | 2    | 4x3.0        | 4 Core Mali-T860  | PCIe, highest performance Libre Computer                                                                     | Higher cost compared to other options        | 128 x 64mm        | -                                                                                                    | -                                                                        |\n| [Rock Pi 4B](https://rockpi.org/rockpi4)                                                                  | Rockchip RK3399, 2 Core Cortex-A72 + 4 Core Cortex-A53         | 4GB   | 1    | 2x2.0 2x3.0  | 4 Core Mali-T860  | PCIe, M.2 slot                                                                                               | Limited community support, no onboard Wi-Fi  | 85 x 54mm         | -                                                                                                    | -                                                                        |\n| [ODROID-XU4](https://wiki.odroid.com/odroid-xu4/odroid-xu4)                                               | Samsung Exynos5422 ARM Cortex-A15 Quad 2Ghz and Cortex-A7 Octa | 2GB   | 0    | 2x3.0, 1x2.0 | Mali-T628 MP6     | eMMC module support                                                                                          | Higher cost compared to Raspberry Pi options | 83 x 58 x 20mm    | -                                                                                                    | -                                                                        |\n| [NVIDIA Jetson Nano](https://developer.nvidia.com/embedded/jetson-nano-developer-kit)                     | 4 Core ARM Cortex-A57                                          | 2/4GB | 2    | 4x3.0        | 128-core Maxwell  | Powerful GPU, CSI camera                                                                                     | Higher cost compared to Raspberry Pi options | 100 x 79 x 30.2mm | -                                                                                                    | -                                                                        |\n\nOnly the Raspberry Pi 5 is currently capable of operating on larger image sizes. Frame rates of up to 120 FPS were recorded at the\ndefault 416 x 320 resolution. We recommend increasing resolution to 640 x 480 for the Raspberry Pi 5.\n\nWant to help fill in this table? Find one of the untested platforms and give the OWL a go!\n\nNVIDIA has released numerous powerful, [embedded computers](https://www.nvidia.com/en-us/autonomous-machines/) such as\nthe Jetson Orin series (and previously the Jetson Xavier NX). These would likely be good options for the OWL, but are\nsubstantially more expensive than the options listed above.\n\n</details>\n"
      },
      "source": "https://raw.githubusercontent.com/geezacoleman/OpenWeedLocator/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "run",
    "download",
    "contact",
    "contributors",
    "faq",
    "support",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 00:38:25",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 342
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Vehicle-mounted spot spraying",
        "parent_header": [
          "OWL Use Cases"
        ],
        "type": "Text_excerpt",
        "value": "The first, and most clear use case for the OWL is for the site-specific application of herbicide in fallow. As part of\nthe development and testing of the unit, the OWL team designed and assembled a 2 m spot spraying boom, using two OWLs to\ncontrol four 12 V solenoids each. The boom was mounted on the back of a ute/utility vehicle with the spray tank located\nin the tray and powered by a 12V car battery. Indicator lights for each nozzle were used to highlight more clearly when\neach solenoid had been activated for demonstration and testing purposes.\n\n<p align=\"center\">\n<img src=\"https://user-images.githubusercontent.com/51358498/152991630-fe343f37-5a45-43b0-900c-bb3cad4f1b80.JPG\" width=\"600\">\n</p>\n\nParameter | Details | Notes \n:-------------------------:|:-------------------------: |:-------------------------:\nMounting gap | 0 cm | Mounted directly to same bar as nozzles, just 32cm higher.\nForward Speed | 6 - 8 km/h | Image blur/activation time limiting forward speed. Moving the OWL unit forward would be a quick improvement for travel speed and large green weeds.\nSolenoids | Goyen solenoid 3QH/3662 with Teejet body | Many alternatives exist as outlined in [#2](https://github.com/geezacoleman/OpenWeedLocator/issues/2)\nSpray tips | Teejet TP4003E-SS | 40 degree, flat fan nozzles, stainless steel\nStrainer | TeeJet 50 mesh strainer | Protect spray tip from clogging/damage\nPump/tank | Northstar 12V 60L ATV Sprayer | 8.3 LPM 12V pump, 60L capacity, tray mounted\n"
      },
      "source": "https://raw.githubusercontent.com/geezacoleman/OpenWeedLocator/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Robot-mounted spot spraying",
        "parent_header": [
          "OWL Use Cases"
        ],
        "type": "Text_excerpt",
        "value": "A second system, identical to the first, was developed for the University of Sydney's Digifarm robot, the Agerris\nDigital Farm Hand. The system is in frequent use for the site-specific control of weeds in trial areas. It is powered by\nthe 24V system on the robot, using a 24 - 12V DC/DC converter.\n\n<p align=\"center\">\n<img src=\"https://user-images.githubusercontent.com/51358498/152990627-0f89bf92-87bc-4808-a748-33f0742068e4.jpg\" width=\"500\">\n</p>\n"
      },
      "source": "https://raw.githubusercontent.com/geezacoleman/OpenWeedLocator/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Image data collection",
        "parent_header": [
          "OWL Use Cases"
        ],
        "type": "Text_excerpt",
        "value": "The OWL can act as a high quality image data collection tool for developing image data training sets in realistic \nagricultural environments, attached to agricultural equipment. The approach allows whole-image, cropped-to-bounding-box \nand square images saved on a set frequency to a thumb drive.\n\nSettings are updated in the `config.ini` file.\n\n| **Method**  | **Code** | **Example** |\n| ------------- | ------------- | ------------- |\n| Whole image  | 'whole' | ![20220714-145951__frame_420](https://user-images.githubusercontent.com/51358498/178902742-45952737-ee3e-4a36-b9b3-216a19e78eb7.png) |\n| Crop to bounding box  | 'bbox'  | ![20220714-145757__frame_420_n_4](https://user-images.githubusercontent.com/51358498/178902795-96bb8068-cf58-4f5a-8819-8ca538add384.png) |\n| Crop to square around weed centre | 'square' | ![20220714-150328__frame_420_n_4](https://user-images.githubusercontent.com/51358498/178903171-af7f8f1b-9caf-435e-96d0-4f01e76c53fb.png) |\n| Deactivated (DEFAULT)  | None |  |\n"
      },
      "source": "https://raw.githubusercontent.com/geezacoleman/OpenWeedLocator/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Community development and contribution",
        "parent_header": [
          "OWL Use Cases"
        ],
        "type": "Text_excerpt",
        "value": "As more OWLs are built and fallow weed control systems developed, we would love to share the end results here. Please\nget in contact and we can upload images of the finished systems on this page.\n\nCheck out the OWL [Discussion](https://github.com/geezacoleman/OpenWeedLocator/discussions) page for any questions, suggestions ideas or feedback. If there's a bug or improvement,\nplease raise an issue.\n\nPlease review the [contribution page](CONTRIBUTING.md) for all the details on how to contribute and follow community\nguidelines.\n"
      },
      "source": "https://raw.githubusercontent.com/geezacoleman/OpenWeedLocator/main/README.md",
      "technique": "header_analysis"
    }
  ]
}