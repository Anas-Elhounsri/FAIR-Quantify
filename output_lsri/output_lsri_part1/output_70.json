{
  "acknowledgement": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Acknowledgements",
        "parent_header": [
          "TREE-QMC"
        ],
        "type": "Text_excerpt",
        "value": "TREE-QMC is based on the Quartet Max Cut (QMC) framework introduced by Sagi Snir and Satish Rao; see [Snir & Rao, *IEEE/ACM TCBB*, 2010](http:doi.org/10.1109/TCBB.2008.133) and [Avni, Cohen & Snir, *Syst Biol*, 2015](http:doi.org/10.1093/sysbio/syu087). TREE-QMC contributes fast algorithms for constructing the quartet graph directly from the input trees, rather than explicitly enumerating all quartets or sampling quartets.\n\nTREE-QMC now implements efficient (and brute force) algorithms for the **quartet weighting schemes** introduced by Chao Zhang and Siavash Mirarab; see [Zhang & Mirarab, *Mol Biol Evol*, 2022](https://doi.org/10.1093/molbev/msac215). It also implements quartet support with the approach of [Sayyari & Mirarab, *Mol Biol Evol*, 2016](https://doi.org/10.1093/molbev/msw079).\n\nTREE-QMC uses [MQLib](https://github.com/MQLib/MQLib) for its max cut heuristic; see [Dunning, Gupta, & Silberholz, *INFORMS Journal on Computing*, 2018](https://doi.org/10.1287/ijoc.2017.0798).\n\nTREE-QMC uses [toms743](https://people.sc.fsu.edu/~jburkardt/cpp_src/toms743/toms743.html) for its Lambert's W approximation; see [Fritsch, Shafer & Crowley, *Communications of the ACM*, 1973](https://doi.org/10.1145/361952.361970) and [Barry, Barry & Culligan-Hensley, *ACM Transactions on Mathematical Software*, 1995](https://doi.org/10.1145/203082.203088).\n"
      },
      "source": "https://raw.githubusercontent.com/molloy-lab/TREE-QMC/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/molloy-lab/TREE-QMC"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-12-25T04:59:48Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-01T02:17:47Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Species tree estimation from gene trees via weighted quartets"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9758267105598375,
      "result": {
        "original_header": "TREE-QMC",
        "type": "Text_excerpt",
        "value": "TREE-QMC is a quartet-based method for estimating species trees directly from gene trees or characters, like the popular methods [ASTRAL](https://doi.org/10.1186/s12859-018-2129-y) and [Weighted ASTRAL/ASTER](https://doi.org/10.1093/molbev/msac215). However, TREE-QMC uses a different algorithmic approach than ASTRAL/ASTER, based on the Quartet Max Cut (QMC) framework of Snir and Rao. \nTo learn more about the TREE-QMC and weighted TREE-QMC, check out [Han & Molloy, *Genome Res*, 2023](http:doi.org/10.1101/gr.277629.122) and [Han & Molloy, *bioRxiv*, 2024](https://doi.org/10.1101/2024.09.27.615467), respectively.  \n"
      },
      "source": "https://raw.githubusercontent.com/molloy-lab/TREE-QMC/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9716888779618449,
      "result": {
        "original_header": "1. For convenience, add the directory containing the `tree-qmc` binary to your `PATH` variable so that you can type `tree-qmc` instead of `&lt;path to tree-qmc binary&gt;tree-qmc`. For bash, this can be done by adding",
        "type": "Text_excerpt",
        "value": "TREE-QMC also implements some convenient features:\n+ TREE-QMC allows multi-labeled trees (i.e., MUL-trees) as input.\n+ TREE-QMC allows character data as input; in particular, it can be used to estimate species trees under the neutral Wright-Fisher model with MLE branch lengths, referred to as `bp` mode in [Springer et al., *J Heredity*, 2020](https://doi.org/10.1093/jhered/esz076) and [Molloy, Gatesy & Springer, *Syst Biol*, 2022](https://doi.org/10.1093/sysbio/syab086). Although species trees can also be constructed from multi-state characters we do not make guarantees about performance.\n+ TREE-QMC computes **Partitioned Coalescence Support (PCS)**, specifically Quartet Quadrapartition Support (QQS) values, around a focal branch, as described by [Gatesy et al., *Mol Phy Evol*, 2019](https://doi.org/10.1016/j.ympev.2019.106539). \nAcknowledgements\n----------------\nTREE-QMC is based on the Quartet Max Cut (QMC) framework introduced by Sagi Snir and Satish Rao; see [Snir & Rao, *IEEE/ACM TCBB*, 2010](http:doi.org/10.1109/TCBB.2008.133) and [Avni, Cohen & Snir, *Syst Biol*, 2015](http:doi.org/10.1093/sysbio/syu087). TREE-QMC contributes fast algorithms for constructing the quartet graph directly from the input trees, rather than explicitly enumerating all quartets or sampling quartets. \n"
      },
      "source": "https://raw.githubusercontent.com/molloy-lab/TREE-QMC/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.95864430937204,
      "result": {
        "original_header": "Acknowledgements",
        "type": "Text_excerpt",
        "value": "TREE-QMC now implements efficient (and brute force) algorithms for the **quartet weighting schemes** introduced by Chao Zhang and Siavash Mirarab; see [Zhang & Mirarab, *Mol Biol Evol*, 2022](https://doi.org/10.1093/molbev/msac215). It also implements quartet support with the approach of [Sayyari & Mirarab, *Mol Biol Evol*, 2016](https://doi.org/10.1093/molbev/msw079). \n"
      },
      "source": "https://raw.githubusercontent.com/molloy-lab/TREE-QMC/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/molloy-lab/TREE-QMC/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "faq": [
    {
      "confidence": 1,
      "result": {
        "original_header": "2. If you are having strange problems, try removing the `\\r` characters from the input files and trying again:",
        "type": "Text_excerpt",
        "value": "cat file.txt | tr -d '\\r' > newfile.txt\n```\n"
      },
      "source": "https://raw.githubusercontent.com/molloy-lab/TREE-QMC/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Options",
        "parent_header": [
          "2. If you are having strange problems, try removing the `\\r` characters from the input files and trying again:"
        ],
        "type": "Text_excerpt",
        "value": "To see the TREE-QMC usage options, use command:\n```\n./tree-qmc -h\n```\n\nThe output help message should be\n```\n=================================== TREE-QMC ===================================\nBASIC USAGE:\ntree-qmc (-i|--input) <input file>\n\n**If the directory containing the tree-qmc binary is not part of $PATH, replace\neplace tree-qmc with <path to tree-qmc binary>/tree-qmc in the command above**\n\nHelp Options:\n[-h|--help]\n        Prints this help message.\n\nInput Options:\n(-i|--input) <input file>\n        File with gene trees in newick format (required)\n[(--chars)]\n        Input are characters rather than trees\n        Missing states are N, -, and ?\n[(--bp)]\n        Input are binary characters i.e. bipartitions\n        Missing states are N, -, and ?\n[(-a|-mapping) <mapping file>]\n        File with individual/leaf names (1st col) mapped to species (2nd col)\n[(--root) <list of species separated by commas>]\n        Root species tree at given species if possible\n[(--rootonly) <species tree file>]\n        Root species tree in file and then exit\n[(--supportonly) <species tree file>]\n        Compute quartet support for species tree in file and then exit\n\n[(--pcsonly) <species tree file>]\n        Compute partitioned coalescent support (PCS) for specified branch in\n        species tree in file (anotate branch with PCS) and then exit\n\nOutput Options:\n[(-o|--output) <output file>]\n        File for writing output species tree (default: stdout)\n[(--support)]\n        Compute quartet support for output species tree\n[(--writetable) <table file>]\n        Write branch and quartet support information to CSV\n[(--char2tree)]\n        Write character matrix as trees (newick strings) to output and exit\n\nAlgorithm Options:\n[(--hybrid)]\n        Use hybrid weighting scheme (-w h)\n[(--fast)]\n        Use fast algorithm that does not support weights or polytomies (-w f)\n[(-B|--bayes)]\n       Use presets for bayesian support (-n 0.333 -x 1.0 -d 0.333)\n[(-L|--lrt)]\n       Use presets for likelihood support (-n 0.0 -x 1.0 -d 0.0)\n[(-S|--bootstrap)]\n       Use presets for boostrap support (-n 0 -x 100 -d 0)\n[(-c|--contract) <float>]\n       Contract internal branches with support less than specified threshold\n       after mapping suport to the interval 0 to 1\n\nAdvanced Options:\n[(-w|--weight) <character>]\n        Weighting scheme for quartets; see paper for details\n        -w n: none (default)\n        -w h: hybrid of support and length (recommended)\n        -w s: support only\n        -w l: length only\n        -w f: none fast\n              Refines polytomies arbitrarily so faster algorithm can be used\n[(-n|--min) <float>]\n        Minimum value of input branch support\n[(-x|--max) <float>]\n        Maximum value of input branch support\n[(-d|--default) <float>]\n        Default branch support to use if branch input tree is missing support\n        Default branch length is 0.0\n[(--norm_atax) <integer>]\n        Normalization scheme for artificial taxa; see paper for details\n        --norm_atax 0: none\n        --norm_atax 1: uniform\n        --norm_atax 2: non-uniform (default)\n[(-e|--execution) <execution mode>]\n        -e 0: run efficient algorithm (default)\n        -e 1: run brute force algorithm for testing\n        -e 2: compute weighted quartets, then exit\n        -e 3: compute good and bad edges, then exit\n[(-v|--verbose) <verbose mode>]\n        -v 0: write no subproblem information (default)\n        -v 1: write CSV with subproblem information (subproblem ID, parent\n              problem ID, depth of recursion, total # of taxa, # of artifical\n              taxa, species names)\n        -v 2: write CSV with subproblem information (info from v1 plus # of\n              of elements in f, # of pruned elements in f, # of zeroes in f)\n[(--polyseed) <integer>]\n        Seeds random number generator with prior to arbitrarily resolving\n        polytomies. If seed is set to -1, system time is used;\n        otherwise, seed should be positive (default: 12345).\n[(--maxcutseed) <integer>]\n        Seeds random number generator prior to calling the max cut heuristic\n        but after the preprocessing phase. If seed is set to -1, system time\n        is used; otherwise, seed should be positive (default: 1).\n[--shared <use shared taxon data structure to normalize quartet weights>]\n        Do NOT use unless there are NO missing data!!!\n\nContact: Post issue to Github (https://github.com/molloy-lab/TREE-QMC/)\n        or email Yunheng Han (yhhan@umd.edu) & Erin Molloy (ekmolloy@umd.edu)\n\nIf you use TREE-QMC or weighted TREE-QMC in your work, please cite:\n\n  Han and Molloy, 2023, Improving quartet graph construction for scalable\n  and accurate species tree estimation from gene trees, Genome Research,\n  http:doi.org/10.1101/gr.277629.122.\n\n  Han and Molloy, 2024, Improved robustness to gene tree incompleteness, \n  estimation errors, and systematic homology errors with weighted TREE-QMC, \n  bioRxiv, https://doi.org/10.1101/2024.09.27.615467.\n================================================================================\n"
      },
      "source": "https://raw.githubusercontent.com/molloy-lab/TREE-QMC/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/molloy-lab/TREE-QMC/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "molloy-lab/TREE-QMC"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "TREE-QMC"
      },
      "source": "https://raw.githubusercontent.com/molloy-lab/TREE-QMC/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/molloy-lab/TREE-QMC/main/external/toms743/test.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/molloy-lab/TREE-QMC/main/external/MQLib/Cloud/INSTALL.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1.0,
      "result": {
        "original_header": "Build",
        "type": "Text_excerpt",
        "value": "To build TREE-QMC, use commands:\n```\ngit clone https://github.com/molloy-lab/TREE-QMC.git\ncd TREE-QMC/external/MQLib\nmake\ncd ../..\ng++ -std=c++11 -O2 \\\n    -I external/MQLib/include -I external/toms743 \\\n    -o tree-qmc \\\n    src/*.cpp external/toms743/toms743.cpp \\\n    external/MQLib/bin/MQLib.a -lm \\\n    -DVERSION=\\\"$(cat version.txt)\\\"\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/molloy-lab/TREE-QMC/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999999228979906,
      "result": {
        "original_header": "1. For convenience, add the directory containing the `tree-qmc` binary to your `PATH` variable so that you can type `tree-qmc` instead of `&lt;path to tree-qmc binary&gt;tree-qmc`. For bash, this can be done by adding",
        "type": "Text_excerpt",
        "value": "Build\n-----\nTo build TREE-QMC, use commands:\n```\ngit clone https://github.com/molloy-lab/TREE-QMC.git\ncd TREE-QMC/external/MQLib\nmake\ncd ../..\ng++ -std=c++11 -O2 \\\n    -I external/MQLib/include -I external/toms743 \\\n    -o tree-qmc \\\n    src/*.cpp external/toms743/toms743.cpp \\\n    external/MQLib/bin/MQLib.a -lm \\\n    -DVERSION=\\\"$(cat version.txt)\\\"\n``` \n#1. For convenience, add the directory containing the `tree-qmc` binary to your `PATH` variable so that you can type `tree-qmc` instead of `<path to tree-qmc binary>tree-qmc`. For bash, this can be done by adding\n```\nexport PATH=$PATH:\"path to tree-qmc binary\"\n```\nto `~/.bash_profile` file (or `~/.bashrc` file).\n \n"
      },
      "source": "https://raw.githubusercontent.com/molloy-lab/TREE-QMC/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8790937862721383,
      "result": {
        "original_header": "1. For convenience, add the directory containing the `tree-qmc` binary to your `PATH` variable so that you can type `tree-qmc` instead of `&lt;path to tree-qmc binary&gt;tree-qmc`. For bash, this can be done by adding",
        "type": "Text_excerpt",
        "value": "Usage\n-----\nTo run TREE-QMC, use command:\n```\n./tree-qmc -i <input file>\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/molloy-lab/TREE-QMC/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/molloy-lab/TREE-QMC/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "gene-trees, phylogenetics, quartets, species-trees, weighted-quartets"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2024 Yunheng Han and Erin Molloy\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
      },
      "source": "https://raw.githubusercontent.com/molloy-lab/TREE-QMC/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "TREE-QMC"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "molloy-lab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 215812,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/molloy-lab/TREE-QMC/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "ekmolloy",
          "type": "User"
        },
        "date_created": "2024-03-24T16:06:49Z",
        "date_published": "2024-03-26T17:19:36Z",
        "description": "This release contains binaries for TREE-QMC version 3.0.4. The Linux x86_64 binary was built on a machine running Red Hat Enterprise Linux version 8.9. The Mac OS binary was built on 2023 Apple M2 Pro running Sonoma 14.2.1 (23C71).",
        "html_url": "https://github.com/molloy-lab/TREE-QMC/releases/tag/v3.0.4",
        "name": "v3.0.4",
        "release_id": 148529484,
        "tag": "v3.0.4",
        "tarball_url": "https://api.github.com/repos/molloy-lab/TREE-QMC/tarball/v3.0.4",
        "type": "Release",
        "url": "https://api.github.com/repos/molloy-lab/TREE-QMC/releases/148529484",
        "value": "https://api.github.com/repos/molloy-lab/TREE-QMC/releases/148529484",
        "zipball_url": "https://api.github.com/repos/molloy-lab/TREE-QMC/zipball/v3.0.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "ekmolloy",
          "type": "User"
        },
        "date_created": "2024-03-22T16:04:25Z",
        "date_published": "2024-03-22T16:22:55Z",
        "description": "This release contains binaries for TREE-QMC version 3.0.1. The Linux x86_64 binary was built on a machine running Red Hat Enterprise Linux version 8.9. The Mac OS binary was built on 2023 Apple M2 Pro running Sonoma 14.2.1 (23C71).",
        "html_url": "https://github.com/molloy-lab/TREE-QMC/releases/tag/v3.0.1",
        "name": "v3.0.1",
        "release_id": 147945334,
        "tag": "v3.0.1",
        "tarball_url": "https://api.github.com/repos/molloy-lab/TREE-QMC/tarball/v3.0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/molloy-lab/TREE-QMC/releases/147945334",
        "value": "https://api.github.com/repos/molloy-lab/TREE-QMC/releases/147945334",
        "zipball_url": "https://api.github.com/repos/molloy-lab/TREE-QMC/zipball/v3.0.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "ekmolloy",
          "type": "User"
        },
        "date_created": "2024-03-21T15:48:04Z",
        "date_published": "2024-03-21T16:22:21Z",
        "description": "This release contains binaries for TREE-QMC version 3 (commit: `f40cc44`). The Linux x86_64 binary was built on a machine running Red Hat Enterprise Linux version 8.9. The Mac OS binary was built on 2023 Apple M2 Pro running Sonoma 14.2.1 (23C71).",
        "html_url": "https://github.com/molloy-lab/TREE-QMC/releases/tag/v3-f40cc44",
        "name": "version 3 (commit: f40cc44)",
        "release_id": 147768487,
        "tag": "v3-f40cc44",
        "tarball_url": "https://api.github.com/repos/molloy-lab/TREE-QMC/tarball/v3-f40cc44",
        "type": "Release",
        "url": "https://api.github.com/repos/molloy-lab/TREE-QMC/releases/147768487",
        "value": "https://api.github.com/repos/molloy-lab/TREE-QMC/releases/147768487",
        "zipball_url": "https://api.github.com/repos/molloy-lab/TREE-QMC/zipball/v3-f40cc44"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-03 23:10:32",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Tutorials",
        "parent_header": [
          "TREE-QMC"
        ],
        "type": "Text_excerpt",
        "value": "Check out the [tutorial for gene trees](tutorial/gene-trees/README.md) and the [tutorial for character matrices](tutorial/characters/README.md).\n"
      },
      "source": "https://raw.githubusercontent.com/molloy-lab/TREE-QMC/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "TREE-QMC"
        ],
        "type": "Text_excerpt",
        "value": "To run TREE-QMC, use command:\n```\n./tree-qmc -i <input file>\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/molloy-lab/TREE-QMC/main/README.md",
      "technique": "header_analysis"
    }
  ]
}