{
  "acknowledgement": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Acknowledgements",
        "parent_header": [
          "plassembler"
        ],
        "type": "Text_excerpt",
        "value": "Many thanks are owed to [Ryan Wick](https://github.com/rrwick), who not only wrote Unicycler and some other code used in Plassembler, but also gave me some initial ideas about how to approach the plasmid assembly problem originally. If you are doing any bacterial genome assembly, you should read all of his work, but if you have read this far you probably already have.\n\nAlso thanks to [Vijini Mallawaarachchi](https://github.com/Vini2) who helped refactor the code - if you are interested in recovering phages (especially in the metagenome context) please give [phables](https://github.com/Vini2/phables) a go.\n"
      },
      "source": "https://raw.githubusercontent.com/gbouras13/plassembler/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "format": "bibtex",
        "type": "File_dump",
        "value": "Please cite plassembler in your paper using:\n\nBouras, G., Sheppard A.E., Mallawaarachchi, V., Vreugde S. (2023) Plassembler: an automated bacterial plasmid assembly tool, Bioinformatics, Volume 39, Issue 7, July 2023, btad409, https://doi.org/10.1093/bioinformatics/btad409"
      },
      "source": "https://raw.githubusercontent.com/gbouras13/plassembler/main/src/plassembler/utils/CITATION",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Citations",
        "parent_header": [
          "plassembler"
        ],
        "type": "Text_excerpt",
        "value": "`plassembler` has been recently published in *Bioinformatics*:\n\nGeorge Bouras, Anna E. Sheppard, Vijini Mallawaarachchi, Sarah Vreugde, Plassembler: an automated bacterial plasmid assembly tool, Bioinformatics, Volume 39, Issue 7, July 2023, btad409, https://doi.org/10.1093/bioinformatics/btad409.\n\nIf you use `plassembler`, please also consider citing where relevant:\n\n* Kolmogorov, M., Yuan, J., Lin, Y. et al. Assembly of long, error-prone reads using repeat graphs. Nat Biotechnol 37, 540\u2013546 (2019). https://doi.org/10.1038/s41587-019-0072-8\n* Li H., Minimap2: pairwise alignment for nucleotide sequences, Bioinformatics, Volume 34, Issue 18 Pages 3094\u20133100 (2018), https://doi.org/10.1093/bioinformatics/bty191\n* Wick RR, Judd LM, Gorrie CL, Holt KE Unicycler: Resolving bacterial genome assemblies from short and long sequencing reads. PLoS Comput Biol 13(6): e1005595 (2017). https://doi.org/10.1371/journal.pcbi.1005595\n* Heng Li, Bob Handsaker, Alec Wysoker, Tim Fennell, Jue Ruan, Nils Homer, Gabor Marth, Goncalo Abecasis, Richard Durbin, 1000 Genome Project Data Processing Subgroup, The Sequence Alignment/Map format and SAMtools, Bioinformatics, Volume 25, Issue 16, 15 August 2009, Pages 2078\u20132079, https://doi.org/10.1093/bioinformatics/btp352\n* Wick RR, Judd LM, Wyres KL, Holt KE. Recovery of small plasmid sequences via Oxford Nanopore sequencing. Microb Genom. 2021 Aug;7(8):000631. doi: 10.1099/mgen.0.000631. PMID: 34431763; PMCID: PMC8549360.\n* Schmartz GP, Hartung A, Hirsch P, Kern F, Fehlmann T, M\u00fcller R, Keller A, PLSDB: advancing a comprehensive database of bacterial plasmids, Nucleic Acids Research, Volume 50, Issue D1, 7 January 2022, Pages D273\u2013D278, https://doi.org/10.1093/nar/gkab1111.\n* Ondov, B.D., Treangen, T.J., Melsted, P. et al. Mash: fast genome and metagenome distance estimation using MinHash. Genome Biol 17, 132 (2016). https://doi.org/10.1186/s13059-016-0997-x.\n* De Coster,W. and Rademakers,R. (2023) NanoPack2: population-scale evaluation of long-read sequencing data. Bioinformatics, 39, btad311. https://doi.org/10.1093/bioinformatics/btad311.\n* Vaser,R. and \u0160iki\u0107,M. (2021) Time-and memory-efficient genome assembly with Raven. Nat. Comput. Sci., 1, 332\u2013336. https://doi.org/10.1038/s43588-021-00073-4.\n* Koren S, Walenz BP, Berlin K, Miller JR, Bergman NH, Phillippy AM. (2017) Canu: scalable and accurate long-read assembly via adaptive k-mer weighting and repeat separation. Genome Res. 2017 May;27(5):722-736. doi: https://doi.org/10.1101/gr.215087.116. \n* Bouras, G., Roach, M. J., Mallawaarachchi V., Grigson., S., Papudeshi., B. (2023) Dnaapler: A tool to reorient circular microbial genomes https://github.com/gbouras13/dnaapler\n"
      },
      "source": "https://raw.githubusercontent.com/gbouras13/plassembler/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/gbouras13/plassembler"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": ".. highlight:: shell\n\n============\nContributing\n============\n\nContributions are welcome, and they are greatly appreciated! Every little bit\nhelps, and credit will always be given.\n\nYou can contribute in many ways:\n\nTypes of Contributions\n----------------------\n\nReport Bugs\n~~~~~~~~~~~\n\nReport bugs at https://github.com/gbouras13/phrokka/issues.\n\nIf you are reporting a bug, please include:\n\n* Your operating system name and version.\n* Any details about your local setup that might be helpful in troubleshooting.\n* Detailed steps to reproduce the bug.\n\nFix Bugs\n~~~~~~~~\n\nLook through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help\nwanted\" is open to whoever wants to implement it.\n\nImplement Features\n~~~~~~~~~~~~~~~~~~\n\nLook through the GitHub issues for features. Anything tagged with \"enhancement\"\nand \"help wanted\" is open to whoever wants to implement it.\n\nWrite Documentation\n~~~~~~~~~~~~~~~~~~~\n\nphrokka could always use more documentation, whether as part of the\nofficial phrokka docs, in docstrings, or even on the web in blog posts,\narticles, and such.\n\nSubmit Feedback\n~~~~~~~~~~~~~~~\n\nThe best way to send feedback is to file an issue at https://github.com/gbouras13/phrokka/issues.\n\nIf you are proposing a feature:\n\n* Explain in detail how it would work.\n* Keep the scope as narrow as possible, to make it easier to implement.\n* Remember that this is a volunteer-driven project, and that contributions\n  are welcome :)\n\nGet Started!\n------------\n\nReady to contribute? Here's how to set up `phrokka` for local development.\n\n1. Fork the `phrokka` repo on GitHub.\n2. Clone your fork locally::\n\n    $ git clone git@github.com:your_name_here/phrokka.git\n\n3. Install your local copy into a virtualenv. Assuming you have virtualenvwrapper installed, this is how you set up your fork for local development::\n\n    $ mkvirtualenv phrokka\n    $ cd phrokka/\n    $ python setup.py develop\n\n4. Create a branch for local development::\n\n    $ git checkout -b name-of-your-bugfix-or-feature\n\n   Now you can make your changes locally.\n\n5. When you're done making changes, check that your changes pass flake8 and the\n   tests, including testing other Python versions with tox::\n\n    $ flake8 phrokka tests\n    $ python setup.py test or pytest\n    $ tox\n\n   To get flake8 and tox, just pip install them into your virtualenv.\n\n6. Commit your changes and push your branch to GitHub::\n\n    $ git add .\n    $ git commit -m \"Your detailed description of your changes.\"\n    $ git push origin name-of-your-bugfix-or-feature\n\n7. Submit a pull request through the GitHub website.\n\nPull Request Guidelines\n-----------------------\n\nBefore you submit a pull request, check that it meets these guidelines:\n\n1. The pull request should include tests.\n2. If the pull request adds functionality, the docs should be updated. Put\n   your new functionality into a function with a docstring, and add the\n   feature to the list in README.rst.\n3. The pull request should work for Python 3.5, 3.6, 3.7 and 3.8, and for PyPy. Check\n   https://travis-ci.com/gbouras13/phrokka/pull_requests\n   and make sure that the tests pass for all supported Python versions.\n\nTips\n----\n\nTo run a subset of tests::\n\n$ pytest tests.test_phrokka\n\n\nDeploying\n---------\n\nA reminder for the maintainers on how to deploy.\nMake sure all your changes are committed (including an entry in HISTORY.rst).\nThen run::\n\n$ bump2version patch # possible: major / minor / patch\n$ git push\n$ git push --tags\n\nTravis will then deploy to PyPI if tests pass.\n"
      },
      "source": "https://raw.githubusercontent.com/gbouras13/plassembler/main/CONTRIBUTING.md",
      "technique": "file_exploration"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-07-16T14:13:06Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-26T11:32:34Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Program to quickly and accurately assemble plasmids in hybrid and long-only sequenced bacterial isolates"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9656335841928214,
      "result": {
        "original_header": "Automated Bacterial Plasmid Assembly Program",
        "type": "Text_excerpt",
        "value": "`plassembler` is a program that is designed for automated & fast assembly of plasmids in  bacterial genomes that have been hybrid sequenced with long read & paired-end short read sequencing. It was originally designed for Oxford Nanopore Technologies long reads, but it will also work with Pacbio reads. As of v1.3.0, it also works well for long-read only assembled genomes. \nOtherwise, I recommend you _don't_ actually use Plassembler by itself. If you have more genomes or want to assemble your genomes in a more automated way, **I would recommend [Hybracter](https://github.com/gbouras13/hybracter)**. If you use Hybracter, you will not need to use Plassembler separately, as it is built in. But please still [cite](#citations) Plassembler.\n \n"
      },
      "source": "https://raw.githubusercontent.com/gbouras13/plassembler/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9733847214097401,
      "result": {
        "original_header": "Manuscript",
        "type": "Text_excerpt",
        "value": "If you use `plassembler`, please see the full [Citations](#citations) section for a list of all programs `plassembler` uses under the hood, in order to fully recognise the creators of these tools for their work.\n \n"
      },
      "source": "https://raw.githubusercontent.com/gbouras13/plassembler/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.979952066831581,
      "result": {
        "original_header": "`plassembler` v1.3.0 Updates (24 October 2023)",
        "type": "Text_excerpt",
        "value": "* `plassembler long` should yield improved results. It achieves this by treating long reads as both short reads (in the sense of creating a de Brujin graph based short read assembly to begin) and long reads (for scaffolding) in Unicycler.\n* While I'd still recommend short reads if you can get them, I am now confident that if your isolate has small plasmids in the long read set, `plassembler long` is very likely to find and recover them.\n* For more information, see the [documentation](https://plassembler.readthedocs.io/en/latest/long/).\n* The ability to specify a `--flye_assembly` and `--flye_info` if you already have a Flye assembly for your long reads instead of `--flye_directory` has been added. Thanks to @[incoherentian](https://github.com/incoherentian)'s [issue](https://github.com/gbouras13/plassembler/issues/37)\n* The ability to specify a `--no_copy_numbers` with `plassembler assembled` if you just want to run some plasmids against the PLSDB has been added. Thanks to @[gaworj](https://github.com/gaworj)'s [issue](https://github.com/gbouras13/plassembler/issues/36).\n \n"
      },
      "source": "https://raw.githubusercontent.com/gbouras13/plassembler/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9412394595597924,
      "result": {
        "original_header": "Why Does Plassembler Exist?",
        "type": "Text_excerpt",
        "value": "In long-read assembled bacterial genomes, small plasmids are difficult to assemble correctly with long read assemblers. They commonly have circularisation issues and can be duplicated or missed (see [this](https://doi.org/10.1371/journal.pcbi.1010905), [this](https://f1000research.com/articles/8-2138) and [this](https://github.com/rrwick/Trycycler/wiki/Clustering-contigs)). This recent [paper](https://www.microbiologyresearch.org/content/journal/mgen/10.1099/mgen.0.001024) in _Microbial Genomics_ by Johnson et al also suggests that long read assemblers particularly miss small plasmids. \n`plassembler` was therefore created as a fast automated tool to ensure plasmids are assembled correctly without duplicated regions for high-throughput uses - like Unicycler but a lot laster - and to provide some useful statistics as well (such as estimate plasmid copy numbers for both long and short read sets).   \nAs it turns out (though this wasn't a motivation for making it), `plassembler` also recovers more small plasmids than the existing gold standard tool Unicycler. I think this is because it throws away chromosomal reads, similar to subsampling short reads sets which can improve recovery. As there are more plasmid reads a proportion of the overall read set, there seems to be a higher chance of recovering smaller plasmids. \nYou can see this increase in accuracy and speed in the benchmarking results for [simulated](docs/benchmarking_results_sim.md) and [real](docs/benchmarking_results_real.md) datasets. \nPlassembler also uses [mash](https://github.com/marbl/Mash) as a quick way to determine whether each assembled contig has any similar hits in [PLSDB](https://doi.org/10.1093/nar/gkab1111).  \nAdditionally, due to its mapping approach, Plassembler can also be used as a quality control tool for checking whether your long and short read sets come from the same isolate. This may be particularly useful if your read sets come from different extractions, or you have multiplexed many samples (& want to avoid mislabelling).  \n \n"
      },
      "source": "https://raw.githubusercontent.com/gbouras13/plassembler/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9253953728905318,
      "result": {
        "original_header": "Other Features",
        "type": "Text_excerpt",
        "value": "* Thanks to a suggestion from [gaworj](https://github.com/gaworj), assembled mode has been added to Plassembler. This allows you to calculate the copy numbers of already assembled plasmids you may have, skipping assembly.  \nYou can use this feature with `plassembler assembled`. \n* All long reads that map to multiple contigs (mostly, reads that map to both the chromosome and plasmids, but also to multiple putative plasmids) will be extracted when using the `--keep-fastqs` options. These may be of interest if you are looking at shared mobile genetic elements. \n* Plassembler should work with bacteria with multiple chromosomes, megaplasmids or chromids. In this case, I would treat the megaplasmids etc like chromosomes and assemble them using a long-read first approach with Trycycler or Dragonflye, as they are of approximately chromosome size. \n* I'd still use Plassembler to recover small plasmids - for example, for  Plassembler v1.1.0 recovered the 77.5 kbp plasmiod along with a 5386bp contig (coresponding to phage phiX174, a common sequencing spike-in) in the _Vibrio campbellii DS40M4_  (see this [paper](https://doi.org/10.1128/MRA.01187-18) and this [bioproject](https://www.ncbi.nlm.nih.gov/bioproject/479421) ).\n* `-c` needs to be smaller than the size of the largest chromosome-like element.\n* For example, for the vibrio example, which had approximately 1.8Mbp and 3.3Mbp chromosomes , I used `-c 1500000`. \nPlease see [here](docs/multiple_chromosomes.md) for more details and an example.  \n4. Phages, Phage-Plasmids and Other Extrachromosomal Replicons \n* If you have sufficient hybrid sequencing data, Plassembler will theoretically recover assemblies of all non-chromosomal replicons, including phages and phage-plasmids\n* A good example of this is the _Vibrio campbellii DS40M4_  example, where Plassembler recovered the assembly of phage phiX174, albeit it was from sequencing spike-in contamination in that case. \n* You can also use Plassembler for plasmid-only assembly by passing `--no_chromosome`. Use this if your reads only contain plasmids that you would like to assemble.\n \n"
      },
      "source": "https://raw.githubusercontent.com/gbouras13/plassembler/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8813438167456626,
      "result": {
        "original_header": "Quality Control",
        "type": "Text_excerpt",
        "value": "Please see [here](docs/quality_control.md) for more details and some examples.\n \n"
      },
      "source": "https://raw.githubusercontent.com/gbouras13/plassembler/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9977827282304189,
      "result": {
        "original_header": "Metagenomes",
        "type": "Text_excerpt",
        "value": "* `plassembler` is not currently recommended for metagenomic datasets, because of their high diversity, leading to difficulties in recovering chromosome-length contigs for bacteria. Additionally, Unicycler is not recommended for metagenomes. However,  `plassembler` was tested on a high depth very simple mock community dataset from this [paper](https://www.nature.com/articles/s41592-022-01539-7). It worked quite nicely, recovering the 5 known plasmids, but we don't anticipate it will work as well on your data! If you try it and it works please let us know. \n"
      },
      "source": "https://raw.githubusercontent.com/gbouras13/plassembler/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9692296153241846,
      "result": {
        "original_header": "Outputs",
        "type": "Text_excerpt",
        "value": "Plassembler also outputs a `_summary.tsv` file, which gives the estimated copy number for each plasmid, for both short reads and long reads (see this [paper](https://www.microbiologyresearch.org/content/journal/mgen/10.1099/mgen.0.000631#tab2) for more details about plasmid copy numbers) and also gives each contig's top hit by mash distance in the PLSDB (if there is a hit), along with all its supporting information.  \n"
      },
      "source": "https://raw.githubusercontent.com/gbouras13/plassembler/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9765772376017299,
      "result": {
        "original_header": "Benchmarking",
        "type": "Text_excerpt",
        "value": "Tldr: Plassembler is much faster than Unicycler (3-10x usually) and is more accurate because it is more likely to recover low coverage plasmids that Unicycler might miss.\n \n"
      },
      "source": "https://raw.githubusercontent.com/gbouras13/plassembler/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9904832989500151,
      "result": {
        "original_header": "Version Log",
        "type": "Text_excerpt",
        "value": "A brief description of what is new in each update of `plassembler` can be found in the HISTORY.md file.\n \n"
      },
      "source": "https://raw.githubusercontent.com/gbouras13/plassembler/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/gbouras13/plassembler/tree/main/docs"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Documentation",
        "parent_header": [
          "plassembler"
        ],
        "type": "Text_excerpt",
        "value": "The full documentation for Plassembler can be found [here](https://plassembler.readthedocs.io/en/latest).\n"
      },
      "source": "https://raw.githubusercontent.com/gbouras13/plassembler/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://plassembler.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/gbouras13/plassembler/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/gbouras13/plassembler/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/gbouras13/plassembler/main/run_plassembler.ipynb"
      },
      "source": "https://raw.githubusercontent.com/gbouras13/plassembler/main/run_plassembler.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/gbouras13/plassembler/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "gbouras13/plassembler"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "plassembler"
      },
      "source": "https://raw.githubusercontent.com/gbouras13/plassembler/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "identifier": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://zenodo.org/doi/10.5281/zenodo.10035954"
      },
      "source": "https://raw.githubusercontent.com/gbouras13/plassembler/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://colab.research.google.com/assets/colab-badge.svg"
      },
      "source": "https://raw.githubusercontent.com/gbouras13/plassembler/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "## Installation\n\nPlassembler has been tested on Linux and MacOS machines. \n\n### Conda\n\nThe easiest way to install plassembler is via conda - Plassembler is on bioconda. \n\n```\nconda install -c bioconda plassembler\n```\n\nor mamba for quicker solving:\n\n```\nmamba install -c bioconda plassembler\n```\n\nThis will install all the dependencies along with plassembler.\n\n### Pip\n\nYou can install the Python components of `plassembler` using pip.\n\n```\npip install plassembler\n```\n\nYou will then need to install the external dependencies separately, which can be found in `build/environment.yml`\n\n* [Flye](https://github.com/fenderglass/Flye) >=2.9\n* [Unicycler](https://github.com/rrwick/Unicycler) >=0.4.8\n* [Minimap2](https://github.com/lh3/minimap2) >=2.11\n* [fastp](https://github.com/OpenGene/fastp) >=0.18.0\n* [chopper](https://github.com/wdecoster/chopper) >=0.5.0\n* [mash](https://github.com/marbl/Mash) >=2.2\n* [Raven](https://github.com/lbcb-sci/raven) >=1.8\n* [Samtools](https://github.com/samtools/samtools) >=0.15.0\n\n### Source\n\nAlternatively, the development version of plassembler can be installed manually via github.\n\n```\ngit clone https://github.com/gbouras13/plassembler.git\ncd plassembler\npip install -e .\n```\n\n## Unicycler v0.5.0 Installation Issues\n\n`plassembler` works best with Unicycler v0.5.0. With Unicycler v0.4.8, `plassembler` should still run without any issue and provide a satisfactory assembly, but you will be warned of this when you run `plassembler`. `plassembler` will not work with any older version of Unicycler.\n\n**Linux**\n\nFor Linux environments, Unicycler v0.5.0 should be installed automaticall with the plassembler bioconda installation.\n\nYou can force it as follows:\n\n`conda install -c bioconda plassembler unicycler==0.5.0`\n\nor manually install Unicycler v0.5.0 after installing plassembler:\n\n```\nconda install -c bioconda plassembler\npip3 install git+https://github.com/rrwick/Unicycler.git\n```\n\n**MacOS**\n\nFor MacOS environments, the current conda installation method will only install the latest available bioconda Unicycler version of v0.4.8. \n\nRyan Wick (the author of Unicycler) suggests that v0.5.0 should be used, as v0.4.8 is not compatible with the latest versions of spades (see [here](https://github.com/rrwick/Unicycler/releases/tag/v0.5.0) ). This will require another installation step on MacOS.\n\nTo install Unicycler v0.5.0, it is recommended that you install Unicycler from github after installing Plassembler follows:\n\n```\n# installs plassembler into an environment called 'plassemblerENV' and activates it\nconda create -n plassemblerENV plassembler\nconda activate plassemblerENV\n# installs Unicycler v0.5.0\npip3 install git+https://github.com/rrwick/Unicycler.git\n```\n\nMac M1 users may need to change some compiler settings and install from the Unicycler github repo e.g.\n\n```\n# installs plassembler into an environment called 'plassemblerENV' and activates it\nconda create -n plassemblerENV plassembler\nconda activate plassemblerENV\n# installs Unicycler v0.5.0\ngit clone https://github.com/rrwick/Unicycler.git\ncd Unicycler\npython3 setup.py install --makeargs \"CXX=g++\"\n```\n\n# Beginner Conda Installation\n\nIf you are new to using the command-line, please install conda using the following instructions.\n\n1. Install [Anaconda](https://www.anaconda.com/products/distribution). I would recommend [miniconda](https://docs.conda.io/en/latest/miniconda.html).\n2. Assuming you are using a Linux x86_64 machine (for other architectures, please replace the URL with the appropriate one on the [miniconda](https://docs.conda.io/en/latest/miniconda.html) website).\n\n`curl -O https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh`\n\nFor Mac (Intel, will also work with M1):\n\n`curl -O https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh`\n\n3. Install miniconda and follow the prompts.\n\n`sh Miniconda3-latest-Linux-x86_64.sh`\n\n4. After installation is complete, you should add the following channels to your conda configuration:\n\n```\nconda config --add channels defaults\nconda config --add channels bioconda\nconda config --add channels conda-forge\n```\n\n5. After this, conda should be installed (you may need to restart your terminal). It is recommended that mamba is also installed, as it will solve the enviroment quicker than conda:\n\n`conda install mamba`\n\n 6. Finally, I would recommend installing plassembler into a fresh environment. For example to create an environment called plassemblerENV with plassembler installed:\n\n```\nmamba create -n plassemblerENV plassembler\nconda activate plassemblerENV\nplassembler --help\n\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/gbouras13/plassembler/main/docs/install.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "plassembler"
        ],
        "type": "Text_excerpt",
        "value": "Plassembler has been tested on Linux and MacOS machines. \n"
      },
      "source": "https://raw.githubusercontent.com/gbouras13/plassembler/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Conda",
        "parent_header": [
          "plassembler",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "The easiest way to install `plassembler` is via conda - Plassembler is on bioconda. \n\n```\nconda install -c bioconda plassembler\n```\n\nor mamba for quicker solving:\n\n```\nmamba install -c bioconda plassembler\n```\n\nThis will install all the dependencies along with `plassembler`.\n"
      },
      "source": "https://raw.githubusercontent.com/gbouras13/plassembler/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Pip",
        "parent_header": [
          "plassembler",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "You can install the Python components of `plassembler` using pip.\n\n```\npip install plassembler\n```\n\nYou will then need to install the external dependencies separately, which can be found in `build/environment.yaml`\n\n* [Flye](https://github.com/fenderglass/Flye) >=2.9\n* [Unicycler](https://github.com/rrwick/Unicycler) >=0.4.8\n* [Minimap2](https://github.com/lh3/minimap2) >=2.11\n* [fastp](https://github.com/OpenGene/fastp) >=0.18.0\n* [chopper](https://github.com/wdecoster/chopper) >=0.5.0\n* [mash](https://github.com/marbl/Mash) >=2.2\n* [Raven](https://github.com/lbcb-sci/raven) >=1.8\n* [Samtools](https://github.com/samtools/samtools) >=0.15.0\n"
      },
      "source": "https://raw.githubusercontent.com/gbouras13/plassembler/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Source",
        "parent_header": [
          "plassembler",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "Alternatively, the development version of `plassembler` can be installed manually via github.\n\n```\ngit clone https://github.com/gbouras13/plassembler.git\ncd plassembler\npip install -e .\n```\n"
      },
      "source": "https://raw.githubusercontent.com/gbouras13/plassembler/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Unicycler v0.5.0 Installation Issues",
        "parent_header": [
          "plassembler"
        ],
        "type": "Text_excerpt",
        "value": "`plassembler` works best with Unicycler v0.5.0. With Unicycler v0.4.8, `plassembler` should still run without any issue and provide a satisfactory assembly, but you will be warned of this when you run `plassembler`. `plassembler` will not work with any older version of Unicycler.\n\n**Linux**\n\nFor Linux environments, Unicycler v0.5.0 should be installed automaticall with the `plassembler` bioconda installation.\n\nYou can force it as follows:\n\n`conda install -c bioconda plassembler unicycler==0.5.0`\n\nor manually install Unicycler v0.5.0 after installing `plassembler`:\n\n```\nconda install -c bioconda plassembler\npip3 install git+https://github.com/rrwick/Unicycler.git\n```\n\n**MacOS**\n\nFor MacOS environments, the current conda installation method will only install the latest available bioconda Unicycler version of v0.4.8. \n\nRyan Wick (the author of Unicycler) suggests that v0.5.0 should be used, as v0.4.8 is not compatible with the latest versions of spades (see [here](https://github.com/rrwick/Unicycler/releases/tag/v0.5.0) ). This will require another installation step on MacOS.\n\nTo install Unicycler v0.5.0, it is recommended that you install Unicycler from github after installing Plassembler follows:\n\n```\n# installs plassembler into an environment called 'plassemblerENV' and activates it\nconda create -n plassemblerENV plassembler\nconda activate plassemblerENV\n# installs Unicycler v0.5.0\npip3 install git+https://github.com/rrwick/Unicycler.git\n```\n\nMac M1 users may need to change some compiler settings and install from the Unicycler github repo e.g.\n\n```\n# installs plassembler into an environment called 'plassemblerENV' and activates it\nconda create -n plassemblerENV plassembler\nconda activate plassemblerENV\n# installs Unicycler v0.5.0\ngit clone https://github.com/rrwick/Unicycler.git\ncd Unicycler\npython3 setup.py install --makeargs \"CXX=g++\"\n```\n"
      },
      "source": "https://raw.githubusercontent.com/gbouras13/plassembler/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9999910351220329,
      "result": {
        "original_header": "Automated Bacterial Plasmid Assembly Program",
        "type": "Text_excerpt",
        "value": "Otherwise, I recommend you _don't_ actually use Plassembler by itself. If you have more genomes or want to assemble your genomes in a more automated way, **I would recommend [Hybracter](https://github.com/gbouras13/hybracter)**. If you use Hybracter, you will not need to use Plassembler separately, as it is built in. But please still [cite](#citations) Plassembler.\n \n"
      },
      "source": "https://raw.githubusercontent.com/gbouras13/plassembler/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999934044353804,
      "result": {
        "original_header": "`plassembler` v1.5.0 Update New Database (21 November 2023)",
        "type": "Text_excerpt",
        "value": "* **If you upgrade to v1.5.0, you will need to update the database using `plassembler download`** \n* Plassembler v1.5.0 incorporates a new expanded database thanks to the recent PLSDB release [2023_11_03_v2](https://ccb-microbe.cs.uni-saarland.de/plsdb/). Thanks @[biobrad](https://github.com/biobrad) for the heads up. \n"
      },
      "source": "https://raw.githubusercontent.com/gbouras13/plassembler/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9300815296289169,
      "result": {
        "original_header": "Other Features",
        "type": "Text_excerpt",
        "value": "* Thanks to a suggestion from [gaworj](https://github.com/gaworj), assembled mode has been added to Plassembler. This allows you to calculate the copy numbers of already assembled plasmids you may have, skipping assembly.  \n* You can also use Plassembler for plasmid-only assembly by passing `--no_chromosome`. Use this if your reads only contain plasmids that you would like to assemble.\n \n"
      },
      "source": "https://raw.githubusercontent.com/gbouras13/plassembler/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8344572369242805,
      "result": {
        "original_header": "Outputs",
        "type": "Text_excerpt",
        "value": "`plassembler` will also output a log file, a `flye_output` directory, which contains the output from Flye (it may be useful to decide whether you need more sequencing reads, or some strange assembly artifact occured) and a `unicycler_output` directory containing the output from Unicycler. If `--use_raven` is specified, a `raven_output` directory will be present instead.\n \n"
      },
      "source": "https://raw.githubusercontent.com/gbouras13/plassembler/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9912317121890816,
      "result": {
        "original_header": "Benchmarking",
        "type": "Text_excerpt",
        "value": "All benchmarking was conducted on a Intel\u00ae Core\u2122 i7-10700K CPU @ 3.80GHz on a machine running Ubuntu 20.04.6 LTS.  \n"
      },
      "source": "https://raw.githubusercontent.com/gbouras13/plassembler/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/gbouras13/plassembler/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2021, George Bouras\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
      },
      "source": "https://raw.githubusercontent.com/gbouras13/plassembler/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "plassembler"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "gbouras13"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 231705,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 38934,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Just",
        "size": 1068,
        "type": "Programming_language",
        "value": "Just"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/gbouras13/plassembler/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "gbouras13",
          "type": "User"
        },
        "date_created": "2024-03-08T07:03:11Z",
        "date_published": "2024-03-08T07:17:40Z",
        "description": "Bug fix with `--force` for plassembler download, which will only remove the output directory if `--force` is specified #49 ",
        "html_url": "https://github.com/gbouras13/plassembler/releases/tag/v1.6.2",
        "name": "v1.6.2",
        "release_id": 145421204,
        "tag": "v1.6.2",
        "tarball_url": "https://api.github.com/repos/gbouras13/plassembler/tarball/v1.6.2",
        "type": "Release",
        "url": "https://api.github.com/repos/gbouras13/plassembler/releases/145421204",
        "value": "https://api.github.com/repos/gbouras13/plassembler/releases/145421204",
        "zipball_url": "https://api.github.com/repos/gbouras13/plassembler/zipball/v1.6.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "gbouras13",
          "type": "User"
        },
        "date_created": "2024-03-03T03:21:47Z",
        "date_published": "2024-03-03T03:23:05Z",
        "description": "- Bug fixes and added tests for `--depth_filter` which would crash in some scenarios",
        "html_url": "https://github.com/gbouras13/plassembler/releases/tag/v1.6.1",
        "name": "v1.6.1",
        "release_id": 144522766,
        "tag": "v1.6.1",
        "tarball_url": "https://api.github.com/repos/gbouras13/plassembler/tarball/v1.6.1",
        "type": "Release",
        "url": "https://api.github.com/repos/gbouras13/plassembler/releases/144522766",
        "value": "https://api.github.com/repos/gbouras13/plassembler/releases/144522766",
        "zipball_url": "https://api.github.com/repos/gbouras13/plassembler/zipball/v1.6.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "gbouras13",
          "type": "User"
        },
        "date_created": "2024-02-28T23:45:35Z",
        "date_published": "2024-02-28T23:46:59Z",
        "description": "* Adds `--depth_filter`. This will filter out all contigs that have long- (and short-read for plassembler run) read copy numbers that are less than the specified depth filter. Defaults to 0.25x.\r\n* Adds `--unicycler_options` and `--spades_options` which allows passing extra Unicycler options (#46 )",
        "html_url": "https://github.com/gbouras13/plassembler/releases/tag/v1.6.0",
        "name": "v1.6.0",
        "release_id": 144092612,
        "tag": "v1.6.0",
        "tarball_url": "https://api.github.com/repos/gbouras13/plassembler/tarball/v1.6.0",
        "type": "Release",
        "url": "https://api.github.com/repos/gbouras13/plassembler/releases/144092612",
        "value": "https://api.github.com/repos/gbouras13/plassembler/releases/144092612",
        "zipball_url": "https://api.github.com/repos/gbouras13/plassembler/zipball/v1.6.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "gbouras13",
          "type": "User"
        },
        "date_created": "2024-02-02T00:13:01Z",
        "date_published": "2024-02-02T00:14:05Z",
        "description": "* Fixes #44, where --use_raven was not working (Flye would be used instead). Thanks @wanyuac",
        "html_url": "https://github.com/gbouras13/plassembler/releases/tag/v1.5.1",
        "name": "v1.5.1",
        "release_id": 139597610,
        "tag": "v1.5.1",
        "tarball_url": "https://api.github.com/repos/gbouras13/plassembler/tarball/v1.5.1",
        "type": "Release",
        "url": "https://api.github.com/repos/gbouras13/plassembler/releases/139597610",
        "value": "https://api.github.com/repos/gbouras13/plassembler/releases/139597610",
        "zipball_url": "https://api.github.com/repos/gbouras13/plassembler/zipball/v1.5.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "gbouras13",
          "type": "User"
        },
        "date_created": "2023-11-21T01:51:26Z",
        "date_published": "2023-11-21T01:52:20Z",
        "description": "* **If you upgrade to v1.5.0, you will need to update the database using `plassembler download`** \r\n* Plassembler v1.5.0 incorporates a new database thanks to the recent PLSDB release [2023_11_03_v2](https://ccb-microbe.cs.uni-saarland.de/plsdb/). Thanks @biobrad for the heads up.\r\n",
        "html_url": "https://github.com/gbouras13/plassembler/releases/tag/v1.5.0",
        "name": "v1.5.0",
        "release_id": 130514744,
        "tag": "v1.5.0",
        "tarball_url": "https://api.github.com/repos/gbouras13/plassembler/tarball/v1.5.0",
        "type": "Release",
        "url": "https://api.github.com/repos/gbouras13/plassembler/releases/130514744",
        "value": "https://api.github.com/repos/gbouras13/plassembler/releases/130514744",
        "zipball_url": "https://api.github.com/repos/gbouras13/plassembler/zipball/v1.5.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "gbouras13",
          "type": "User"
        },
        "date_created": "2023-10-30T04:13:10Z",
        "date_published": "2023-10-30T04:13:51Z",
        "description": "Fixes bug with `plassembler run`, which would exit ungracefully if the isolate had more than 1 chromosome, but no plasmids were recovered by Unicycler (e.g. this vibrio ATCC [17802](https://www.atcc.org/products/17802)).",
        "html_url": "https://github.com/gbouras13/plassembler/releases/tag/v1.4.1",
        "name": "v1.4.1 (30 Oct 2023)",
        "release_id": 127118902,
        "tag": "v1.4.1",
        "tarball_url": "https://api.github.com/repos/gbouras13/plassembler/tarball/v1.4.1",
        "type": "Release",
        "url": "https://api.github.com/repos/gbouras13/plassembler/releases/127118902",
        "value": "https://api.github.com/repos/gbouras13/plassembler/releases/127118902",
        "zipball_url": "https://api.github.com/repos/gbouras13/plassembler/zipball/v1.4.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "gbouras13",
          "type": "User"
        },
        "date_created": "2023-10-27T03:39:52Z",
        "date_published": "2023-10-27T03:41:19Z",
        "description": "\r\n* Adds `--no_chromosome` option to `plassembler long` and `plassembler run` after a request to allow for the assembly of read sets that have only plasmids.\r\n* Using this will skip Flye and create a dummy 3MB chromosome full of A's and will allow for the downstream completion of Plassembler to recover only the plasmids in your reads.\r\n* Fixes another bug here #37 \r\n\r\n",
        "html_url": "https://github.com/gbouras13/plassembler/releases/tag/v1.4.0",
        "name": "v1.4.0 (2023-10-27)",
        "release_id": 126882996,
        "tag": "v1.4.0",
        "tarball_url": "https://api.github.com/repos/gbouras13/plassembler/tarball/v1.4.0",
        "type": "Release",
        "url": "https://api.github.com/repos/gbouras13/plassembler/releases/126882996",
        "value": "https://api.github.com/repos/gbouras13/plassembler/releases/126882996",
        "zipball_url": "https://api.github.com/repos/gbouras13/plassembler/zipball/v1.4.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "gbouras13",
          "type": "User"
        },
        "date_created": "2023-10-24T04:07:42Z",
        "date_published": "2023-10-24T05:17:33Z",
        "description": "* `plassembler long` should yield improved results. It achieves this by treating long reads as both short reads (in the sense of creating a de Brujin graph based assembly) and long reads (for scaffolding) in Unicycler.\r\n* While I'd still recommend short reads if you can get them, I am now confident that if your isolate has small plasmids in the long read set, `plassembler long` should find them.\r\n* For more information, see the [documentation](https://plassembler.readthedocs.io/en/latest/long/).\r\n* The ability to specify a `--flye_assembly` and `--flye_info` if you already have a Flye assembly for your long reads instead of `--flye_directory` has been added. Thanks to @incoherentian 's [issue](https://github.com/gbouras13/plassembler/issues/37)\r\n* The ability to specify a `--no_copy_numbers` with `plassembler assembled` if you just want to run some plasmids against the PLSDB has been added. Thanks to @gaworj 's [issue](https://github.com/gbouras13/plassembler/issues/36).\r\n",
        "html_url": "https://github.com/gbouras13/plassembler/releases/tag/v1.3.0",
        "name": "v1.3.0 (2023-10-24)",
        "release_id": 126359057,
        "tag": "v1.3.0",
        "tarball_url": "https://api.github.com/repos/gbouras13/plassembler/tarball/v1.3.0",
        "type": "Release",
        "url": "https://api.github.com/repos/gbouras13/plassembler/releases/126359057",
        "value": "https://api.github.com/repos/gbouras13/plassembler/releases/126359057",
        "zipball_url": "https://api.github.com/repos/gbouras13/plassembler/zipball/v1.3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "gbouras13",
          "type": "User"
        },
        "date_created": "2023-09-12T08:59:10Z",
        "date_published": "2023-09-12T09:02:24Z",
        "description": "1.2.0 (2023-09-12)\r\n------------------\r\n\r\n`plassembler` v1.2.0 implements the following features:\r\n\r\n* `plassembler long` officially released and implemented using [Canu](https://github.com/marbl/canu) and [dnaapler](https://github.com/gbouras13/dnaapler) to reassemble unmapped reads in place of Unicycler for `plassembler run`. While we'd still recommend getting short reads if you really want to recover plasmids, as long as your long reads are short enough (i.e. not size selected), `plassembler long` should hopefully recover most small plasmids.\r\n* For more information, see the [documentation](https://plassembler.readthedocs.io/en/latest/long/).\r\n* Faster mapping thanks to @[fanvanf](https://github.com/fanvanf)'s [issue](https://github.com/gbouras13/plassembler/issues/29) and solution. Thanks @fanvanf.\r\n* The ability to specify a `--flye directory` if you already have a Flye assembly for your long reads, which will tell `plassembler` to skip the long read assembly step.\r\n\r\n\r\n**Full Changelog**: https://github.com/gbouras13/plassembler/compare/v1.1.0...v1.2.0",
        "html_url": "https://github.com/gbouras13/plassembler/releases/tag/v1.2.0",
        "name": "v1.2.0",
        "release_id": 120759375,
        "tag": "v1.2.0",
        "tarball_url": "https://api.github.com/repos/gbouras13/plassembler/tarball/v1.2.0",
        "type": "Release",
        "url": "https://api.github.com/repos/gbouras13/plassembler/releases/120759375",
        "value": "https://api.github.com/repos/gbouras13/plassembler/releases/120759375",
        "zipball_url": "https://api.github.com/repos/gbouras13/plassembler/zipball/v1.2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "gbouras13",
          "type": "User"
        },
        "date_created": "2023-06-02T05:52:36Z",
        "date_published": "2023-06-02T05:59:24Z",
        "description": "* Refactored codebase and release on pypi\r\n* Adds unit tests and CI\r\n* Replace `argparse` with `click`\r\n* Breaking CLI changes to be compatible with click\r\n* `plassembler.py` changed to `plassembler run`\r\n* Adds Raven long read assembly option to `plassembler run` using `--use_raven`\r\n* Adds option to skip chopper and fastq to `plassembler run` using `--skip_qc`\r\n* `install_database.py` changed to `plassembler download`\r\n* Assembled mode now `plassembler assembled`\r\n* Untested/experimental long read only mode using `plassembler long`\r\n* Removes rasusa, `-s` and `--no_subsample` from v1.1.0. If users want faster runtimes, we recommend `--use_raven` or conduct subsampling prior.\r\n",
        "html_url": "https://github.com/gbouras13/plassembler/releases/tag/v1.1.0",
        "name": "v1.1.0",
        "release_id": 105790191,
        "tag": "v1.1.0",
        "tarball_url": "https://api.github.com/repos/gbouras13/plassembler/tarball/v1.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/gbouras13/plassembler/releases/105790191",
        "value": "https://api.github.com/repos/gbouras13/plassembler/releases/105790191",
        "zipball_url": "https://api.github.com/repos/gbouras13/plassembler/zipball/v1.1.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "gbouras13",
          "type": "User"
        },
        "date_created": "2023-05-10T13:49:30Z",
        "date_published": "2023-05-10T13:50:55Z",
        "description": "* Large overhaul.\r\n* Adds `--pacbio_model` for pacbio data\r\n* Replaces nanofilt with chopper\r\n* Adds `-a` for assembled mode\r\n* Adds long read subsampling with rasusa, and `-s` to change subsampling depth, and `--no_subsample` to turn off subsampling\r\n* Adds `--keep_fastqs`\r\n* Adds `--keep_chromosome`\r\n* Refactors mapping code \r\n* Adds custom function to identify multimapped reads\r\n* Changes output format - consolidates all output into `summary.tsv`.\r\n",
        "html_url": "https://github.com/gbouras13/plassembler/releases/tag/v1.0.0",
        "name": "v1.0.0",
        "release_id": 102498046,
        "tag": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/gbouras13/plassembler/tarball/v1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/gbouras13/plassembler/releases/102498046",
        "value": "https://api.github.com/repos/gbouras13/plassembler/releases/102498046",
        "zipball_url": "https://api.github.com/repos/gbouras13/plassembler/zipball/v1.0.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "gbouras13",
          "type": "User"
        },
        "date_created": "2023-01-16T04:29:25Z",
        "date_published": "2023-01-16T04:37:47Z",
        "description": "* Adds samtools to bioconda recipe fixing #2 (thanks Jan/@gaworj).\r\n* Adds checks for all dependencies as a result to make sure this doesn't happen again.\r\n* Adds long-only kmer_mode for very high quality Nanopore reads (R10.4 and above) - experimental until I get more data especially with small plasmids. Does exactly the same (Flye -> Unicycler). Seems to work pretty well.",
        "html_url": "https://github.com/gbouras13/plassembler/releases/tag/v0.1.5",
        "name": "v0.1.5",
        "release_id": 89081758,
        "tag": "v0.1.5",
        "tarball_url": "https://api.github.com/repos/gbouras13/plassembler/tarball/v0.1.5",
        "type": "Release",
        "url": "https://api.github.com/repos/gbouras13/plassembler/releases/89081758",
        "value": "https://api.github.com/repos/gbouras13/plassembler/releases/89081758",
        "zipball_url": "https://api.github.com/repos/gbouras13/plassembler/zipball/v0.1.5"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "gbouras13",
          "type": "User"
        },
        "date_created": "2023-01-03T09:55:40Z",
        "date_published": "2023-01-03T10:24:56Z",
        "description": "* Adds install_database.py, the Plassembler database and functionality for mapping plasmid contigs to PLDSB.\r\n* Update the API to -1 and -2 for short reads, matching Unicycler.\r\n* Adds mash as dependency.\r\n* Adds plassembler_top_hits_mash_plsdb.tsv output.\r\n* Adds plasmid_copy_number_short and plasmid_copy_number_long to fasta header for each plasmid.\r\n* Checks dependencies upon initialisation, with message to install Unicycler manually if required.\r\n",
        "html_url": "https://github.com/gbouras13/plassembler/releases/tag/v0.1.4",
        "name": "v0.1.4",
        "release_id": 87761628,
        "tag": "v0.1.4",
        "tarball_url": "https://api.github.com/repos/gbouras13/plassembler/tarball/v0.1.4",
        "type": "Release",
        "url": "https://api.github.com/repos/gbouras13/plassembler/releases/87761628",
        "value": "https://api.github.com/repos/gbouras13/plassembler/releases/87761628",
        "zipball_url": "https://api.github.com/repos/gbouras13/plassembler/zipball/v0.1.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "gbouras13",
          "type": "User"
        },
        "date_created": "2022-12-27T10:38:48Z",
        "date_published": "2022-12-27T10:39:38Z",
        "description": "* Fix bugs in bioconda release - unicycler.py and flye.py conflicts",
        "html_url": "https://github.com/gbouras13/plassembler/releases/tag/v0.1.3",
        "name": "v0.1.3",
        "release_id": 87291533,
        "tag": "v0.1.3",
        "tarball_url": "https://api.github.com/repos/gbouras13/plassembler/tarball/v0.1.3",
        "type": "Release",
        "url": "https://api.github.com/repos/gbouras13/plassembler/releases/87291533",
        "value": "https://api.github.com/repos/gbouras13/plassembler/releases/87291533",
        "zipball_url": "https://api.github.com/repos/gbouras13/plassembler/zipball/v0.1.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "gbouras13",
          "type": "User"
        },
        "date_created": "2022-12-22T14:51:24Z",
        "date_published": "2022-12-22T14:57:18Z",
        "description": "* Code refactored.\r\n* Tests added.\r\n* Bioconda release.",
        "html_url": "https://github.com/gbouras13/plassembler/releases/tag/v0.1.2",
        "name": "v0.1.2",
        "release_id": 86943809,
        "tag": "v0.1.2",
        "tarball_url": "https://api.github.com/repos/gbouras13/plassembler/tarball/v0.1.2",
        "type": "Release",
        "url": "https://api.github.com/repos/gbouras13/plassembler/releases/86943809",
        "value": "https://api.github.com/repos/gbouras13/plassembler/releases/86943809",
        "zipball_url": "https://api.github.com/repos/gbouras13/plassembler/zipball/v0.1.2"
      },
      "technique": "GitHub_API"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running plassembler",
        "parent_header": [
          "plassembler"
        ],
        "type": "Text_excerpt",
        "value": "To run `plassembler`, first you need to install the database in a directory of your chosing:\n\n`plassembler download -d <database directory>`\n\nOnce this is finished, you can run plassembler as follows:\n\n`plassembler run -d <database directory> -l <long read fastq> -o <output dir> -1 < short read R1 fastq> -2 < short read R2 fastq>  -c <estimated chromosome length>`\n\n* -c will default to 1000000 if it is absent.\n\nTo specify more threads:\n\n`plassembler run -d <database directory> -l <long read fastq> -o <output dir> -1 < short read R1 fastq> -2 < short read R2 fastq>  -c <estimated chromosome length> -t <threads>`\n\nPlassembler defaults to 1 thread.\n\nTo specify a prefix for the output files:\n\n`plassembler run -d <database directory> -l <long read fastq> -o <output dir> -1 < short read R1 fastq> -2 < short read R2 fastq>  -c <estimated chromosome length> -t <threads> -p <prefix>`\n\nTo specify a minimum long read length and minimum read quality Q-score for filtering with [chopper](https://github.com/wdecoster/chopper):\n\n`plassembler run -d <database directory> -l <long read fastq> -o <output dir> -1 < short read R1 fastq> -2 < short read R2 fastq>  -c <estimated chromosome length> -t <threads> -p <prefix> -m <min length> -q <min quality>`\n\n* -m will default to 500 and -q will default to 9. Note that for some tiny plasmids, -m should be reduced or perhaps even set to 1 (see this [paper](https://www.microbiologyresearch.org/content/journal/mgen/10.1099/mgen.0.000631#tab2) ).\n\nTo overwrite an existing output directory, use -f\n\n` plassembler run -d <database directory> -l <long read fastq> -o <output dir> -1 < short read R1 fastq> -2 < short read R2 fastq>  -c <estimated chromosome length> -t <threads> -p <prefix> -m <min length> -q <min quality> -f`\n\nTo use Raven instead of Flye as a long read assembler, use `--use_raven`.\n\n`plassembler run -d <database directory> -l <long read fastq> -o <output dir> -1 < short read R1 fastq> -2 < short read R2 fastq>  -c <estimated chromosome length> -t <threads> --use_raven `\n\nPlease see the [documentation](docs/run.md) for more options.\n\n```\nUsage: plassembler run [OPTIONS]\n\n  Runs Plassembler\n\nOptions:\n  -h, --help                Show this message and exit.\n  -V, --version             Show the version and exit.\n  -d, --database PATH       Directory of PLSDB database.  [required]\n  -l, --longreads PATH      FASTQ file of long reads.  [required]\n  -1, --short_one PATH      R1 short read FASTQ file.  [required]\n  -2, --short_two PATH      R2 short read FASTQ file.  [required]\n  -c, --chromosome INTEGER  Approximate lower-bound chromosome length of\n                            bacteria (in base pairs).  [default: 1000000]\n  -o, --outdir PATH         Directory to write the output to.  [default:\n                            plassembler.output/]\n  -m, --min_length TEXT     minimum length for filtering long reads with\n                            chopper.  [default: 500]\n  -q, --min_quality TEXT    minimum quality q-score for filtering long reads\n                            with chopper.  [default: 9]\n  -t, --threads TEXT        Number of threads.  [default: 1]\n  -f, --force               Force overwrites the output directory.\n  -p, --prefix TEXT         Prefix for output files. This is not required.\n                            [default: plassembler]\n  --skip_qc                 Skips qc (chopper and fastp).\n  --pacbio_model TEXT       Pacbio model for Flye.  Must be one of pacbio-raw,\n                            pacbio-corr or pacbio-hifi.  Use pacbio-raw for\n                            PacBio regular CLR reads (<20 percent error),\n                            pacbio-corr for PacBio reads that were corrected\n                            with other methods (<3 percent error) or pacbio-\n                            hifi for PacBio HiFi reads (<1 percent error).\n  -r, --raw_flag            Use --nano-raw for Flye.  Designed for Guppy fast\n                            configuration reads.  By default, Flye will assume\n                            SUP or HAC reads and use --nano-hq.\n  --keep_fastqs             Whether you want to keep FASTQ files containing\n                            putative plasmid reads  and long reads that map to\n                            multiple contigs (plasmid and chromosome).\n  --keep_chromosome         If you want to keep the chromosome assembly.\n  --use_raven               Uses Raven instead of Flye for long read assembly.\n                            May be useful if you want to reduce runtime.\n  --flye_directory PATH     Directory containing Flye long read assembly.\n                            Needs to contain assembly_info.txt and\n                            assembly_info.fasta. Allows Plassembler to Skip\n                            Flye assembly step.\n  --flye_assembly PATH      Path to file containing Flye long read assembly\n                            FASTA. Allows Plassembler to Skip Flye assembly\n                            step in conjunction with  --flye_info.\n  --flye_info PATH          Path to file containing Flye long read assembly\n                            info text file. Allows Plassembler to Skip Flye\n                            assembly step in conjunction with\n                            --flye_assembly.\n  --no_chromosome           Run Plassembler assuming no chromosome can be\n                            assembled. Use this if your reads only contain\n                            plasmids that you would like to assemble.\n```\n"
      },
      "source": "https://raw.githubusercontent.com/gbouras13/plassembler/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "download",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "support",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-04 00:39:24",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 50
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick Start",
        "parent_header": [
          "plassembler"
        ],
        "type": "Text_excerpt",
        "value": "The easiest way to install `plassembler` is via conda:\n\n`conda install -c bioconda plassembler`\n\nFollowed by database download and installation:\n\n`plassembler download -d <databse directory>`\n\nAnd finally run `plassembler`:\n\n`plassembler run -d <database directory> -l <long read fastq> -o <output dir> -1 < short read R1 fastq> -2 < short read R2 fastq>  -c <estimated chromosome length>`\n\nPlease read the [Installation](#installation) section for more details, especially if you are an inexperienced command line user.\n"
      },
      "source": "https://raw.githubusercontent.com/gbouras13/plassembler/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Container",
        "parent_header": [
          "plassembler",
          "Quick Start"
        ],
        "type": "Text_excerpt",
        "value": "Alternatively, a Docker/Singularity Linux container image is available for Plassembler (starting from v1.6.2) [here](https://quay.io/repository/gbouras13/plassembler). This will likely be useful for running Plassembler in HPC environments.\n\nTo install and run v1.6.2 with singularity\n\n```bash\n\nIMAGE_DIR=\"<the directory you want the .sif file to be in >\"\nsingularity pull --dir $IMAGE_DIR docker://quay.io/gbouras13/plassembler:1.6.2\n\ncontainerImage=\"$IMAGE_DIR/plassembler_1.6.2.sif\"\n\n# example command with test fastqs\nsingularity exec $containerImage    plassembler download -d plassembler_db\nsingularity exec $containerImage    plassembler run -l test_data/Fastqs/test_long_reads.fastq.gz \\\n -1 test_data/Fastqs/test_short_reads_R1.fastq.gz  -2 test_data/Fastqs/test_short_reads_R2.fastq.gz d plassembler_db \\\n -o output_test_singularity -t 4 -c 50000\n```\n"
      },
      "source": "https://raw.githubusercontent.com/gbouras13/plassembler/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Google Colab Notebook",
        "parent_header": [
          "plassembler",
          "Quick Start"
        ],
        "type": "Text_excerpt",
        "value": "If you don't want to install `plassembler` locally, you can run it without any code using the colab notebook [https://colab.research.google.com/github/gbouras13/plassembler/blob/main/run_plassembler.ipynb](https://colab.research.google.com/github/gbouras13/plassembler/blob/main/run_plassembler.ipynb)\n\nThis is only recommend if you have one or a few samples to assemble (it takes a while per sample due to the limited nature of Google Colab resources - probably an hour or two a sample). If you have more than this, a local install is recommended.\n\n"
      },
      "source": "https://raw.githubusercontent.com/gbouras13/plassembler/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Why Not Just Use Unicycler?",
        "parent_header": [
          "plassembler"
        ],
        "type": "Text_excerpt",
        "value": "Unicycler is awesome and still a good way to assemble plasmids from hybrid sequencing - `plassembler` uses it! But there are a few reasons to use plassembler instead:\n\n1. Time. Plassember throws away all the chromosomal reads (i.e. most of them) before running Unicycler, so it is much faster (wall clock 3-10x faster generally). \n2. Accuracy. Benchmarking has shown `plassembler` is better than Unicycler in terms of recovering small plasmids.\n3. `plassembler` will output only the likely plasmids, and can more easily be integrated into pipelines. You shouldn't be assembling the chromosome using Unicycler [anymore](https://doi.org/10.1371/journal.pcbi.1010905) so `plassembler` can get you only what is necessary from Unicycler.\n4. `plassembler` will give you summary depth and copy number stats for both long and short reads.\n5. `plassembler` can be used as a quality control to check if your short and long reads come from the same sample - if `plassembler` results in many non-circular contigs (particularly those that have no hits in PLSDB), it is likely because your read sets do not come from the same isolate! See [Quality Control](#quality-control).\n6. You will get information whether each assembled contig has a similar entry in [PLSDB](https://doi.org/10.1093/nar/gkab1111). Especially for common pathogen species that are well represented in databases, this will likely tell you specifically what plasmid you have in your sample. \n* Note: Especially for less commonly sequenced species, I would not suggest that that absence of a PLSDB hit is necessary meaningful, especially for circular contigs - those would likely be novel plasmids uncaptured by PLSDB.\n"
      },
      "source": "https://raw.githubusercontent.com/gbouras13/plassembler/main/README.md",
      "technique": "header_analysis"
    }
  ]
}