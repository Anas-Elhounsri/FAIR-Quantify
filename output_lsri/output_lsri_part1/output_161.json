{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "format": "cff",
        "type": "File_dump",
        "value": "# This CITATION.cff file was generated with cffinit.\n# Visit https://bit.ly/cffinit to generate yours today!\n\ncff-version: 1.2.0\ntitle: >-\n  BLR: a flexible pipeline for haplotype analysis of\n  multiple linked-read technologies\nmessage: >-\n  If you use this software, please cite it using the\n  metadata from this file.\ntype: software\nauthors:\n  - given-names: Pontus\n    family-names: H\u00f6jer\n  - given-names: Tobias\n    family-names: Frick\n  - given-names: Humam\n    family-names: Siga\n  - given-names: Parham\n    family-names: Pourbozorgi\n  - given-names: Hooman\n    family-names: Aghelpasand\n  - given-names: Marcel\n    family-names: Martin\n  - given-names: Afshin\n    family-names: Ahmadian\nidentifiers:\n  - type: doi\n    value: 10.1093/nar/gkad1010\n    description: Publication describing BLR\n  - type: doi\n    value: 10.17044/scilifelab.21525945\n    description: Archived version of BLR used for publication\nrepository-code: 'https://github.com/AfshinLab/BLR'\nabstract: >-\n  An end-to-end Snakemake workflow for whole genome\n  haplotyping and structural variant calling from FASTQs\n  from multiple linked-read technologies.\nlicense: MIT\npreferred-citation:\n  type: article\n  authors:\n    - given-names: Pontus\n      family-names: H\u00f6jer\n    - given-names: Tobias\n      family-names: Frick\n    - given-names: Humam\n      family-names: Siga\n    - given-names: Parham\n      family-names: Pourbozorgi\n    - given-names: Hooman\n      family-names: Aghelpasand\n    - given-names: Marcel\n      family-names: Martin\n    - given-names: Afshin\n      family-names: Ahmadian\n  doi: \"10.1093/nar/gkad1010\"\n  journal: \"Nucleic Acids Research\"\n  title: \"BLR: a flexible pipeline for haplotype analysis of multiple linked-read technologies\"\n  pages: gkad1010\n  year: 2023\n  month: 11\n  url: \"https://doi.org/10.1093/nar/gkad1010\"\n"
      },
      "source": "https://raw.githubusercontent.com/AfshinLab/BLR/main/CITATION.cff",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "4. Reference genome setup",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "To run the pipeline you need to provide a path to a FASTA with your reference\n genome. The FASTA should be indexed depending on which mapper you whish to\n  use.\n\n - `bowtie2` uses a `bowtie2`-indexed reference\n\n\n        bowtie2-build genome.fasta genome.fasta\n\n - `bwa`, `minimap2`, `ema` and `lariat` uses a `bwa`-indexed reference\n\n\n        bwa index genome.fasta\n\nAdditionally you need to index your FASTA using `samtools faidx` to get the\n `genome.fasta.fai` file\n\n    samtools faidx genome.fasta\n\nIf using `gatk` for variant calling or doing base recalibrartion you will\n need to generate a sequence dictionary (`genome.dict` file) which can be done\n  using:\n\n    gatk CreateSequenceDictionary -R genome.fasta\n"
      },
      "source": "https://raw.githubusercontent.com/AfshinLab/BLR/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "type": "Text_excerpt",
        "value": "The BLR pipeline is outlined in:\n\n> H\u00f6jer, P., Frick, T., Siga, H. *et al.* BLR: a flexible pipeline for haplotype analysis of multiple linked-read technologies, *Nucleic Acids Research*, gkad1010 (2023). https://doi.org/10.1093/nar/gkad1010\n\nThis is the main citation for the BLR pipeline. \n\nBLR was originally developed for the prep-processing of [Droplet Barcode Sequencing (DBS)](doc/platforms.rst#dbs) data for input into the 10x LongRanger pipeline, see paper \n\n> Redin, D., Frick, T., Aghelpasand, H. *et al.* High throughput barcoding method for genome-scale phasing. *Sci Rep* 9, 18116 (2019). https://doi.org/10.1038/s41598-019-54446-x\n\nIt has since been heavily modified to run completely independant of LongRanger. To run the analysis described in [Redin et al. 2019][2] look at the [stable branch](https://github.com/AfshinLab/BLR/tree/stable) for this git repository. That version is also available at [OMICtools](https://omictools.com/blr-tool).\n\n[1]: https://doi.org/10.1093/nar/gkad1010 \"H\u00f6jer et al. 2023\"\n[2]: https://doi.org/10.1038/s41598-019-54446-x \"Redin et al. 2019\"\n"
      },
      "source": "https://raw.githubusercontent.com/AfshinLab/BLR/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/AfshinLab/BLR"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-02-04T13:35:44Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-27T12:22:52Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9470028179964609,
      "result": {
        "original_header": "About the pipeline",
        "type": "Text_excerpt",
        "value": "The BLR pipeline is end-to-end Snakemake workflow for whole genome haplotyping and structural variant calling from FASTQs, independent of LongRanger. The pipeline allow for input FASTQs from multiple linked-read technologies such as: \nThe BLR pipeline is designed to be flexible and modular, allowing for easy integration of new linked-read technologies and tools. The pipeline is also designed to be run on a cluster environment, but can also be run locally. \nOutlined below are the main processing step. Tools written in parenthesis indicate which are currently implemented for the current step with the preferred tool in *italic*. \n- **FASTQ processing** (*tool depends on technology*): This initial step normalizes input FASTQ based on the linked-read technology used. This includes demultiplexing, barcode extraction and filtering as well as adaptor trimming.\n- **Mapping** (*EMA*, BWA, minimap2, bowtie2, lariat): The reads are mapped to the reference genome using one of the available mappers. \n- **BAM processing** (*BLR/Picard MarkDuplicates*): Collapse overlapping barcodes, mark duplicates, infer molecules (MI-tag) and filter reads. \n- **Variant calling** (*DeepVariant*, GATK, FreeBayes, BCFtools): Call and filter short variants.\n- **Variant phasing** (*HapCUT2*): Phase variants using the inferred molecules.\n- **Haplotag alignments** (*WhatsHap*): Assign haplotype to reads (HP-tag).\n- **Structural variant (SV) calling** (*NAIBR*): Call large structural variants (SV). \nStatistics are collected using standards tools such as FastQC, Picard and mosdepth as well as custom scripts that are part of BLR. These are then complied using [MultiQC](https://multiqc.info/) into a final HTML report.\n \n"
      },
      "source": "https://raw.githubusercontent.com/AfshinLab/BLR/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/AfshinLab/BLR/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/AfshinLab/BLR/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "AfshinLab/BLR"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/AfshinLab/BLR/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/AfshinLab/BLR/main/misc/lariat_uppmax_install.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/AfshinLab/BLR/main/./doc/assets/pipeline.png"
      },
      "source": "https://raw.githubusercontent.com/AfshinLab/BLR/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "1. Setup an analysis folder",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Activate your generated conda environment (see [Installation](#Installation)).\n\n    conda activate blr\n\nCreate the analysis directory using `blr init`. Choose a name for the analysis, `output_folder` in this example. Specify the library type using the `-l` flag, here we choose `dbs`.\n\n    blr init --reads1=path/to/sample.R1.fastq.gz -l dbs path/to/output_folder\n\nNote that BLR expects paired-end reads. However, only the path to the R1 file needs to be provided. The R2 file will be found automatically.\n\nMove into your newly created analysis folder.\n\n    cd path/to/output_folder\n\nThen, you may need to edit the configuration file `blr.yaml`, in particular\n to enter the path to your indexed reference genome (see [Reference genome\n  setup](#4-reference-genome-setup) for more info).\n\n    blr config --set genome_reference path/to/GRCh38.fasta\n\nTo see what other configurations can be altered, read the documentation in\n the `blr.yaml` file or run `blr config` to print the current configs to the\n  terminal. Some configurations are specific to the linked\n  -read technology used for generating the library, more information can be\n   found [here](doc/platforms.rst).\n"
      },
      "source": "https://raw.githubusercontent.com/AfshinLab/BLR/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "4. Reference genome setup",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "To run the pipeline you need to provide a path to a FASTA with your reference\n genome. The FASTA should be indexed depending on which mapper you whish to\n  use.\n\n - `bowtie2` uses a `bowtie2`-indexed reference\n\n\n        bowtie2-build genome.fasta genome.fasta\n\n - `bwa`, `minimap2`, `ema` and `lariat` uses a `bwa`-indexed reference\n\n\n        bwa index genome.fasta\n\nAdditionally you need to index your FASTA using `samtools faidx` to get the\n `genome.fasta.fai` file\n\n    samtools faidx genome.fasta\n\nIf using `gatk` for variant calling or doing base recalibrartion you will\n need to generate a sequence dictionary (`genome.dict` file) which can be done\n  using:\n\n    gatk CreateSequenceDictionary -R genome.fasta\n"
      },
      "source": "https://raw.githubusercontent.com/AfshinLab/BLR/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "- [1. Setup conda](#1-setup-conda)\n- [2. Create environment and install `blr`](#2-create-environment-and-install-blr)\n- [3. Optional installations](#3-optional-installations)\n- [4. Reusing conda environments](#4-reusing-conda-environments)\n"
      },
      "source": "https://raw.githubusercontent.com/AfshinLab/BLR/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1. Setup conda",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "Install [miniconda](https://docs.conda.io/en/latest/miniconda.html) if not already installed. You could also try copy-pasting the following to your terminal. This will download miniconda, install it to you `$HOME` folder.\n\n    if [[ $OSTYPE = \"linux-gnu\" ]]; then\n        wget http://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh\n    elif [[ $OSTYPE = \"darwin\"* ]]; then\n        wget https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O miniconda.sh\n    fi\n    bash miniconda.sh -b -p $HOME/miniconda\n    source $HOME/miniconda/etc/profile.d/conda.sh\n"
      },
      "source": "https://raw.githubusercontent.com/AfshinLab/BLR/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2. Create environment and install `blr`",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "Clone the BLR repository.\n\n    git clone https://github.com/AfshinLab/BLR.git\n\nInstall [conda-lock](https://github.com/conda-incubator/conda-lock#installation).\n\n    conda install -c conda-forge conda-lock\n\nCreate a conda environment, in which all dependencies will be installed. It\n is recommended to use one of the OS locked files, i.e. `environment.linux-64\n  .lock` for linux or `environment.osx-64.lock` for mac, for reproducibility. One can also use the non-lock `environment.yml` file but this may introduce non-tested versions of software into the environment, so use with caution. For linux use the following to install and activate the environment.\n\n    conda create --name blr --file environment.linux-64.lock\n    conda activate blr\n\nInstall `blr` into the environment.\n\n    pip install .\n\nFor development it can be useful to install `blr` in editable mode in this case use `pip install -e .`. This will install blr in such a way that you can still modify the source code and get any changes immediately without re-installing.\n"
      },
      "source": "https://raw.githubusercontent.com/AfshinLab/BLR/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3. Optional installations",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "Here are some optional installs that are required if a specific software is requested.\n"
      },
      "source": "https://raw.githubusercontent.com/AfshinLab/BLR/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3.1 DeepVariant",
        "parent_header": [
          "Installation",
          "3. Optional installations"
        ],
        "type": "Text_excerpt",
        "value": "To enable [DeepVariant](https://github.com/google/deepvariant), install it separately to your environment. Note that it is currently only available for linux.\n\n    conda activate blr\n    conda install deepvariant\n\nTo use DeepVariant for variant calling in your analysis, run:\n\n    blr config --set variant_caller deepvariant\n"
      },
      "source": "https://raw.githubusercontent.com/AfshinLab/BLR/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3.2 Lariat aligner",
        "parent_header": [
          "Installation",
          "3. Optional installations"
        ],
        "type": "Text_excerpt",
        "value": "To use [lariat](https://github.com/10XGenomics/lariat) for alignment you need to manually install it within your environment. For help on installation see [the following instructions](doc/lariat_install.rst). To enable mapping using lariat, run:\n\n    blr config --set read_mapper lariat\n"
      },
      "source": "https://raw.githubusercontent.com/AfshinLab/BLR/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3.3 NAIBR (older versions)",
        "parent_header": [
          "Installation",
          "3. Optional installations"
        ],
        "type": "Text_excerpt",
        "value": "The latest version of the [NAIBR repo](https://github.com/raphael-group/NAIBR) will be downloaded and used automatically. If you want to use another version of NAIBR this can be set through:\n\n    blr config --set naibr_path /path/to/NAIBR/\n"
      },
      "source": "https://raw.githubusercontent.com/AfshinLab/BLR/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "4. Reusing conda environments",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "Snakemake will generate separate conda environments for certain tools, e.g\n. NAIBR, when needed. These are by default generated in the `.snakemake/conda\n /` folder within the analysis directory. To reuse the same\n  enviroment across different runs its possible to set the environment\n   variable `$CONDA_ENVS` with the path to a common directory where\n    environments can be reused or generated as needed. To set the environment\n     variable temporary one can use:\n\n    export CONDA_ENVS=/path/to/common/conda-envs/\n\nIt is also possible to set this variable as a part of the main conda\n environment (in this case `blr`) using the following command:\n\n    conda env config vars set CONDA_ENVS=/path/to/common/conda-envs/ -n blr\n\nDeactivate and re-activate the environment for the change to take effect. To\n remove this variable from the environment run:\n\n    conda env config vars unset CONDA_ENVS -n blr\n"
      },
      "source": "https://raw.githubusercontent.com/AfshinLab/BLR/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/AfshinLab/BLR/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2019-2022 Tobias Frick, Pontus H\u00f6jer, Marcel Martin, Humam Siga\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/AfshinLab/BLR/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/AfshinLab/BLR/main/./doc/assets/logo.png#gh-light-mode-only"
      },
      "source": "https://raw.githubusercontent.com/AfshinLab/BLR/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "BLR"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "AfshinLab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 421435,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 5746,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 1176,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/AfshinLab/BLR/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "pontushojer",
          "type": "User"
        },
        "date_created": "2023-05-10T13:23:08Z",
        "date_published": "2023-05-11T07:26:58Z",
        "html_url": "https://github.com/AfshinLab/BLR/releases/tag/v0.4",
        "name": "Version 0.4",
        "release_id": 102587318,
        "tag": "v0.4",
        "tarball_url": "https://api.github.com/repos/AfshinLab/BLR/tarball/v0.4",
        "type": "Release",
        "url": "https://api.github.com/repos/AfshinLab/BLR/releases/102587318",
        "value": "https://api.github.com/repos/AfshinLab/BLR/releases/102587318",
        "zipball_url": "https://api.github.com/repos/AfshinLab/BLR/zipball/v0.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "pontushojer",
          "type": "User"
        },
        "date_created": "2022-11-04T12:28:44Z",
        "date_published": "2022-11-11T09:37:49Z",
        "description": "Submission to NAR",
        "html_url": "https://github.com/AfshinLab/BLR/releases/tag/v0.3",
        "name": "Version 0.3",
        "release_id": 82775680,
        "tag": "v0.3",
        "tarball_url": "https://api.github.com/repos/AfshinLab/BLR/tarball/v0.3",
        "type": "Release",
        "url": "https://api.github.com/repos/AfshinLab/BLR/releases/82775680",
        "value": "https://api.github.com/repos/AfshinLab/BLR/releases/82775680",
        "zipball_url": "https://api.github.com/repos/AfshinLab/BLR/zipball/v0.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "pontushojer",
          "type": "User"
        },
        "date_created": "2021-04-12T08:26:16Z",
        "date_published": "2021-04-12T13:26:45Z",
        "html_url": "https://github.com/AfshinLab/BLR/releases/tag/v0.2",
        "name": "Version 0.2",
        "release_id": 41279364,
        "tag": "v0.2",
        "tarball_url": "https://api.github.com/repos/AfshinLab/BLR/tarball/v0.2",
        "type": "Release",
        "url": "https://api.github.com/repos/AfshinLab/BLR/releases/41279364",
        "value": "https://api.github.com/repos/AfshinLab/BLR/releases/41279364",
        "zipball_url": "https://api.github.com/repos/AfshinLab/BLR/zipball/v0.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "pontushojer",
          "type": "User"
        },
        "date_created": "2020-07-06T09:48:41Z",
        "date_published": "2020-07-06T10:25:27Z",
        "description": "Last commit prior to parallel-pipe integration",
        "html_url": "https://github.com/AfshinLab/BLR/releases/tag/v0.1.1",
        "name": "Version 0.1.1",
        "release_id": 28250055,
        "tag": "v0.1.1",
        "tarball_url": "https://api.github.com/repos/AfshinLab/BLR/tarball/v0.1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/AfshinLab/BLR/releases/28250055",
        "value": "https://api.github.com/repos/AfshinLab/BLR/releases/28250055",
        "zipball_url": "https://api.github.com/repos/AfshinLab/BLR/zipball/v0.1.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "pontushojer",
          "type": "User"
        },
        "date_created": "2020-06-17T12:55:17Z",
        "date_published": "2020-06-18T13:38:25Z",
        "html_url": "https://github.com/AfshinLab/BLR/releases/tag/v0.1",
        "name": "Initial pre-release of the BLR package.",
        "release_id": 27685179,
        "tag": "v0.1",
        "tarball_url": "https://api.github.com/repos/AfshinLab/BLR/tarball/v0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/AfshinLab/BLR/releases/27685179",
        "value": "https://api.github.com/repos/AfshinLab/BLR/releases/27685179",
        "zipball_url": "https://api.github.com/repos/AfshinLab/BLR/zipball/v0.1"
      },
      "technique": "GitHub_API"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "2. Running an analysis",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Change working directory to your analysis folder\n\n    cd path/to/output_folder\n\nThe pipeline it launched using the `blr run` command. To automatically runs all steps run:\n\n    blr run\n\nFor more options, see the documentation.\n\n    blr run -h\n"
      },
      "source": "https://raw.githubusercontent.com/AfshinLab/BLR/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "5. Merging different analysis runs",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "If you have two or more libraries run on the same sample it is possible to\n merge these inorder to increase coverage. First analysis should be run\n  separately for each library. Make sure that different `sample_nr` (set\n   using `blr config`) have been assigned to each library in order to not mix\n    overlapping barcodes. The files that will be merged from each library is\n     the filtered BAM (`final.phased.cram`, `final.phased.bam` or `final.bam`), the\n      molecule stats TSV (`final.molecule_stats.filtered.tsv`) and for DBS\n       and TELL-seq libraries the clustered barcodes (`barcodes.clstr.gz`).\n\nTo merge the different runs we initialize a new analysis folder using `blr init`. In this example we have analysed two DBS library runs called `MySample_1` and `MySample_2`. Using the command below we can initialize a new folder called `MySample_merged`.\n\n    blr init -w /path/to/MySample_1 -w /path/to/MySample_2 --library-type dbs MySample_merged\n\nConfigs can then be updated as usual using `blr config`.\n\nIn order to merge the files and run analysis on the merged files a special subscript need to be run. This is done by running:\n\n    blr run --anew\n\nUsing this the files will be merged and the workflow run from varinat calling\n and on.\n\n Note that this approach can also be used to rerun a single sample with\n  different configurations from variant calling and on.\n"
      },
      "source": "https://raw.githubusercontent.com/AfshinLab/BLR/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-03 23:35:56",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "type": "Text_excerpt",
        "value": "- [1. Setup analysis](#1-setup-an-analysis-folder)\n- [2. Run analysis](#2-running-an-analysis)\n- [3. Test files](#3-test-files)\n- [4. Reference genome setup](#4-reference-genome-setup)\n- [5. Merging different analysis runs](#5-merging-different-analysis-runs)\n- [6. MultiQC plugin](#6-multiqc-plugin)\n"
      },
      "source": "https://raw.githubusercontent.com/AfshinLab/BLR/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3. Test files",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "For unit testing we use test files for different platforms. The latest version of these can be downloaded and unpacked using the following commands:\n\n    wget -nv https://export.uppmax.uu.se/uppstore2018173/blr-testdata-0.6.tar.gz\n    tar xf blr-testdata-0.6.tar.gz\n    ln -s blr-testdata-0.6 blr-testdata\n\nNow unit testing can be run locally from within the BLR directory using:\n\n    bash tests/run.sh\n\nThis is useful if you want to test your changes localy before submitting them\n as a PR.\n"
      },
      "source": "https://raw.githubusercontent.com/AfshinLab/BLR/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "6. MultiQC plugin",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "There is a MultiQC plugin included in the BLR pipeline called MultiQC_BLR. If you wish to run MultiQC without this plugin include `--disable-blr-plugin` in your multiqc command.\n\nThe plugin allows for comparison between different runs. In this case go to the directory containing the folders for the runs you wish to compare. Then run:\n\n    multiqc -d .\n\nThe `-d` option prepends the directory name to each sample allowing differentiation between the runs.\n"
      },
      "source": "https://raw.githubusercontent.com/AfshinLab/BLR/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "workflows": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/AfshinLab/BLR/main/src/blr/run_anew.smk"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/AfshinLab/BLR/main/src/blr/rules/trim_10x.smk"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/AfshinLab/BLR/main/src/blr/rules/trim_dbs.smk"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/AfshinLab/BLR/main/src/blr/rules/trim_stlfr.smk"
      },
      "technique": "file_exploration"
    }
  ]
}