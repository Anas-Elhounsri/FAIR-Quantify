{
  "application_domain": [
    {
      "confidence": 12.95,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "References",
        "parent_header": [
          "AlexandrusPS: a user-friendly pipeline for genome-wide positive selection analysis"
        ],
        "type": "Text_excerpt",
        "value": "<a id=\"1\">[1]</a> \nYang, Z. (2007). \nPAML 4: phylogenetic analysis by maximum likelihood. \nMolecular biology and evolution, 24(8), 1586-1591.\n\n<a id=\"2\">[2]</a>\nL\u00f6ytynoja, A. (2014). Phylogeny-aware alignment with PRANK. Multiple sequence alignment methods, 155-170.\n\n<a id=\"3\">[3]</a>\nSuyama, M., Torrents, D., & Bork, P. (2006). PAL2NAL: robust conversion of protein sequence alignments into the corresponding codon alignments. Nucleic acids research, 34(suppl_2), W609-W612.\n\n<a id=\"4\">[4]</a>\nLechner, M., Findei\u00df, S., Steiner, L., Marz, M., Stadler, P. F., & Prohaska, S. J. (2011). Proteinortho: detection of (co-) orthologs in large-scale analysis. BMC bioinformatics, 12(1), 1-9.\n"
      },
      "source": "https://raw.githubusercontent.com/alejocn5/AlexandrusPS/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Cite us",
        "parent_header": [
          "AlexandrusPS: a user-friendly pipeline for genome-wide positive selection analysis"
        ],
        "type": "Text_excerpt",
        "value": "Ceron-Noriega, A., Schoonenberg, V. A., Butter, F., & Levin, M. (2023). AlexandrusPS: a user-friendly pipeline for the automated detection of orthologous gene clusters and subsequent positive selection analysis. Genome Biology and Evolution, evad187. (https://doi.org/10.1093/gbe/evad187)\n"
      },
      "source": "https://raw.githubusercontent.com/alejocn5/AlexandrusPS/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/alejocn5/AlexandrusPS"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-10-22T12:15:16Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-20T16:49:26Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "parent_header": [
          "AlexandrusPS: a user-friendly pipeline for genome-wide positive selection analysis"
        ],
        "type": "Text_excerpt",
        "value": "AlexandrusPS is a high-throughput user-friendly pipeline designed to simplify the genome-wide positive selection analysis by deploying well-established protocols of CodeML [[1]](#1). This can be especially advantageous for researchers with no evolutionary or bioinformatics experience.\nAlexandrusPS's main aim is to overcome the technical challenges of a genome-wide positive selection analysis such as i) the execution of an accurate orthology analysis as a precondition for positive selection analysis; ii) preparing and organizing configuration files for CodeML; iii) performing a positive selection analysis on large sets of sequences and iv) generate an output that is easy to interpret including all relevant maximum likelihood (ML) and log ratio test (LRT) results.\nThe only input data AlexandrusPS needs are the CDS and amino acid sequences of interest. AlexandrusPS provides a simplified output that comprises a table including all relevant results which can be easily extracted for assessment and publication. AlexandrusPS produces and provides all intermediate data such as the results of the ProteinOrtho orthology analysis and the multiple alignments [[4]](#4). Default parameters of all steps can be adjusted. \n\n"
      },
      "source": "https://raw.githubusercontent.com/alejocn5/AlexandrusPS/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "In-depth description of AlexandrusPS applications and functionalities",
        "parent_header": [
          "AlexandrusPS: a user-friendly pipeline for genome-wide positive selection analysis"
        ],
        "type": "Text_excerpt",
        "value": "The following explains all the substeps and scripts (in perl or R) that are executed sequentially once AlexandrusPS has been initialized, focusing on:\n 1) Function \n 2) Input files\n 3) Output\n                   "
      },
      "source": "https://raw.githubusercontent.com/alejocn5/AlexandrusPS/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "SUBSTEP 2: Orthology prediction by ProteinOrtho <a href=\"#4\">[4]</a>",
        "parent_header": [
          "AlexandrusPS: a user-friendly pipeline for genome-wide positive selection analysis",
          "In-depth description of AlexandrusPS applications and functionalities"
        ],
        "type": "Text_excerpt",
        "value": "**Function:** Executes ProteinOrtho.\n\n\n**Input files:** In SUBSTEP 1 AlexandrusPS.sh generates a list of the cur.pep.fasta files (list_of_pepFiles.txt) in the './Orthology_Prediction\u2019 directory. This list is the only argument for the script \u2018./Code/APS1_IndexGenerator_QualityControl.pl\u2019. \n\n\n**Output:** \u2018./Orthology_Prediction directory/ProteinOrthoTable.proteinortho\u2019 "
      },
      "source": "https://raw.githubusercontent.com/alejocn5/AlexandrusPS/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "SUBSTEP 3: Selection of the orthology clusters from ProteinOrtho that are suitable for the positive selection analysis",
        "parent_header": [
          "AlexandrusPS: a user-friendly pipeline for genome-wide positive selection analysis",
          "In-depth description of AlexandrusPS applications and functionalities"
        ],
        "type": "Text_excerpt",
        "value": "**Function:** Selects ProteinOrtho clusters (orthology groups or OGC) which are suitable for positive selection analysis by the following criteria (produced by  'APS4_OptimalProteinOrthoGroups.pl\u2019): \n* 1) OGC encompassing at least three species \n* 2) 1-to-1 orthologs (absence of paralogs in any species of the orthologous cluster). \nThe script extracts the headers of the sequences of the ProteinOrtho clusters which fulfill the requirements for the positive selection analysis, and generates a list with all the ProteinOrtho clusters that will be part of the positive selection analysis. \n\n\n**Input files:** Original output table from the ProteinOrtho analysis (ProteinOrthoTable.proteinortho)\n\n\n**Output:** Filtered table of Proteinortho table with OGCs which fulfill the requirements ('./Orthology_Prediction/ProteinOrthoTable.proteinortho.fill') (Fig. 4A), the list of orthologous gene cluster IDs (OGC_id) and files with the headers of all proteins from each orthologous gene cluster named by OGC_id located in './LIST/[_OGC_id_].list'.\n\n"
      },
      "source": "https://raw.githubusercontent.com/alejocn5/AlexandrusPS/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "SUBSTEP 4: Calculation of the correct number of cores that will be used for Alexandrus.sh",
        "parent_header": [
          "AlexandrusPS: a user-friendly pipeline for genome-wide positive selection analysis",
          "In-depth description of AlexandrusPS applications and functionalities"
        ],
        "type": "Text_excerpt",
        "value": "**Function:** Find the number of CPU cores that will be used for the AlexandrusPS positive selection analysis part considering the desired usage percentage provided by the user and leaving 2 free cores for continuing normal usage of the computer, thus avoiding a computer system collapse. The executing script is \u2018./Code/APS5_CoreCalculator.pl\u2019 and the default usage value is 100%.\n\n\n**Input files:** In the directory './Usage_core_percentage/usage_core_percentage.txt\u2019 the user can change the desired usage percent (just the number without the percent symbol - defaults to 100).\n\n\n**Output:** \u2018./Data/Number_cores.txt.calculated\u2019, the number of cores to be used results from the formula: \n(desired usage percent) * (number of CPU cores available on the computer - 2) / 100\n\n"
      },
      "source": "https://raw.githubusercontent.com/alejocn5/AlexandrusPS/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "SUBSTEP 5: For each Orthology group selected in SUBSTEP 3 extract the CDS sequences",
        "parent_header": [
          "AlexandrusPS: a user-friendly pipeline for genome-wide positive selection analysis",
          "In-depth description of AlexandrusPS applications and functionalities"
        ],
        "type": "Text_excerpt",
        "value": "**Function:** In this substep the sequences of the orthologs of all relevant orthologous gene clusters are extracted from the sequence FASTA files that were provided by the user. The resulting files are used for the subsequent alignment of the CDS sequences, a crucial step for the positive selection analysis. The executing scripts are './G0/Code/APS7_Extract_Pep_sequences.pl and\u2019 './G0/Code/APS8_Extract_Cds_sequences.pl\u2019.\n\n\n**Input files:**  './G0/Orthology_Groups/CompiledSpecies.pep.fasta\u2019, './G0/Orthology_Groups/CompiledSpecies.cds.fasta\u2019 (prepared in SUBSTEP 1) and './G0/Orthology_Groups/[_OGC_id_]/[_OGC_id_].list\u2019 (prepared in SUBSTEP 3).\n\n\n**Output:** The FASTA files that will be used for the alignments  './G0/Orthology_Groups/[_OGC_id_].list.cds.fasta\u2019 and \u2018[_OGC_id_].list.pep.fasta\u2019.\n"
      },
      "source": "https://raw.githubusercontent.com/alejocn5/AlexandrusPS/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "SUBSTEP 6: Simplification of the headers of the CDS and amino acid FASTA files",
        "parent_header": [
          "AlexandrusPS: a user-friendly pipeline for genome-wide positive selection analysis",
          "In-depth description of AlexandrusPS applications and functionalities"
        ],
        "type": "Text_excerpt",
        "value": "**Function:** The script  'APS9_HeaderDictionary_pepCDS.pl\u2019, generates new amino acid and CDS FASTA files (.dict.fa) with simplified headers leaving just the species name index (see SUBSTEP 2) followed by [_OGC_id_] and a number assigned in the OGC's alignment. It also generates a dictionary associating the new with the old headers (original headers provided by the user), for both amino acid and CDS FASTA files (.fasta.dict).\n\n\n\n**Input files:** FASTA files generated in SUBSTEP 5 ([_OGC_id_].list.cds.fasta and [_OGC_id_].list.pep.fasta )\n\n\n\n**Output:** 1) Dictionaries: \u2018./G0/Orthology_Groups/[_OGC_id_].list.pep.fasta.dict\u2019 and \u2018./G0/Orthology_Groups/[_OGC_id_].list.cds.fasta.dict\u2019 \n2) FASTA files: \u2018./G0/Orthology_Groups/[_OGC_id_].list.pep.fasta.dict.fa\u2019 and  \u2018./G0/Orthology_Groups/[_OGC_id_].list.cds.fasta.dict.fa\u2019.\n"
      },
      "source": "https://raw.githubusercontent.com/alejocn5/AlexandrusPS/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "SUBSTEP 7: Peptide alignment performed by PRANK <a href=\"#2\">[2]</a>",
        "parent_header": [
          "AlexandrusPS: a user-friendly pipeline for genome-wide positive selection analysis",
          "In-depth description of AlexandrusPS applications and functionalities"
        ],
        "type": "Text_excerpt",
        "value": "**Function:** CodeML is based on codon alignments, for that reason peptide alignment of all proteins in the respective orthologous groups is performed using PRANK.\n\n\n**Input files:** './G0/Orthology_Groups/[_OGC_id_].list.pep.fasta.dict.fa\u2019 (prepared in SUBSTEP 6)\n\n\n**Output:** Alignment files './G0/Orthology_Groups/[_OGC_id_].list.pep.fasta.dict.fa.best.fas\u2019\n"
      },
      "source": "https://raw.githubusercontent.com/alejocn5/AlexandrusPS/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "SUBSTEP 8: Peptide alignment performed by PRANK in nexus format plus phylogenetic tree in nexus format",
        "parent_header": [
          "AlexandrusPS: a user-friendly pipeline for genome-wide positive selection analysis",
          "In-depth description of AlexandrusPS applications and functionalities"
        ],
        "type": "Text_excerpt",
        "value": "**Function:** CodeML needs peptide alignment information and phylogenetic gene trees in nexus format. The executing program PRANK provides these formats.\nInput : \u2018./G0/Orthology_Groups/[_OGC_id_].list.pep.fasta.dict.fa\u2019\n\n\n**Output:** \u2018./G0/Orthology_Groups/[_OGC_id_].list.pep.fasta.dict.fa.best.nex\u2019\n"
      },
      "source": "https://raw.githubusercontent.com/alejocn5/AlexandrusPS/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "SUBSTEP 9: Rename and reformat nexus phylogenetic tree of SUBSTEP 8",
        "parent_header": [
          "AlexandrusPS: a user-friendly pipeline for genome-wide positive selection analysis",
          "In-depth description of AlexandrusPS applications and functionalities"
        ],
        "type": "Text_excerpt",
        "value": "**Function:** CODEML requires a phylogenetic tree with headers of the FASTA file. As PRANK does not provide this, the script  \u2018./G0/Code/APS10_CleanNex_nex.pl\u2019 takes the nexus alignment (\u2018.best.nex\u2019) of SUBSTEP 9, extracts the phylogenetic tree (\u2018.best.nex.cl.nex\u2019) and the numeration of each species and the association with the header from the alignment (\u2018.best.nex.dict\u2019) and replaces the automated numeration generated by PRANK with the header of the FASTA file in the phylogenetic tree (\u2018.best.nex.cl.head.nex\u2019). The script also changes nexus to dnd format making this compatible with other downstream steps (\u2018.best.nex.cl.head.dnd\u2019).\n\n\n**Input files:** nexus file of SUBSTEP 9 \u2018./G0/Orthology_Groups/[_OGC_id_].list.pep.fasta.dict.fa.best.nex\u2019\n\n\n**Output:** \n1) Phylogenetic tree from PRANK in nexus format: './G0/Orthology_Groups/[_OGC_id_].list.pep.fasta.dict.fa.best.nex.cl.nex\u2019\n2) Dictionary associating the numeration generated by PRANK with the header of the amino acid FASTA file './G0/Orthology_Groups/[_OGC_id_].list.pep.fasta.dict.fa.best.nex.dict\u2019\n3) Nexus tree with species names:  './G0/Orthology_Groups/[_OGC_id_].list.pep.fasta.dict.fa.best.nex.cl.head.nex\u2019\n4) Format change from nexus to dnd  './G0/Orthology_Groups/[_OGC_id_].list.pep.fasta.dict.fa.best.nex.cl.head.dnd\u2019"
      },
      "source": "https://raw.githubusercontent.com/alejocn5/AlexandrusPS/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "SUBSTEP 11: Tree labeling according to branches",
        "parent_header": [
          "AlexandrusPS: a user-friendly pipeline for genome-wide positive selection analysis",
          "In-depth description of AlexandrusPS applications and functionalities"
        ],
        "type": "Text_excerpt",
        "value": "**Function:** In order to enable branch analysis any tree needs to be provided with the corresponding labels.\n\n\n**Input files:** './G0/Orthology_Groups/[_OGC_id_].list.pep.fasta.dict.fa.best.nex.cl.head.dnd\u2019\n\n\n**Output:** \u2018./G0/Orthology_Groups/[_OGC_id_].list.pep.fasta.dict.fa.best.nex.cl.head.dnd.GenTree.nex\u2019"
      },
      "source": "https://raw.githubusercontent.com/alejocn5/AlexandrusPS/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "SUBSTEP 12: Generate configuration files for site-specific models",
        "parent_header": [
          "AlexandrusPS: a user-friendly pipeline for genome-wide positive selection analysis",
          "In-depth description of AlexandrusPS applications and functionalities"
        ],
        "type": "Text_excerpt",
        "value": "**Function:** Generates configuration files to run site-specific model analyses that fit seven codon substitution models: M0 (\u2018'./G0/Code/APS12_CreateCtl_ParameterDefParPG_M0.pl\u2019), M1a, M2a, M3, M7 (\u2018'./G0/Code/APS13_CreateCtl_ParameterDefParPG_SM.pl\u2019), M8 and M8a (\u2018'./G0/Code/APS14_CreateCtl_ParameterDefParPG_SM8.pl\u2019). It uses the configuration file './Data/Parameter_codeml_M0.txt\u2019 (for APS12), './Data/Parameter_codeml_SM.txt\u2019  (for APS13)  or ''./G0/Data/Parameter_codeml_SM8.txt\u2019 (for APS14) (these configuration files can be modified by the user) and a default configuration file ('./G0/Data/Default_par.txt) that fills any lacking information in the executed configuration file (./G0/Data/Parameter_codeml_M0.txt).\n\n\n**Input files:** \u2018./G0/Data/Parameter_codeml_M0.txt\u2019 (for APS12) or \u2018./G0/Data/Parameter_codeml_SM.txt\u2019 (for APS13) or \u2019./G0/Data/ Parameter_codeml_SM8.txt\u2019 (for APS13) and \u2018./G0/Data/Default_par.txt\u2019\n\n\n**Output:** Configuration files './G0/Orthology_Groups/codeml[_OGC_id_].M0.ctl\u2019, './G0/Orthology_Groups/codeml[_OGC_id_].sm8.ctl\u2019 and  './G0/Orthology_Groups/codeml[_OGC_id_].sm.ctl\u2019"
      },
      "source": "https://raw.githubusercontent.com/alejocn5/AlexandrusPS/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "SUBSTEP 14: Quality control of the CodeML output",
        "parent_header": [
          "AlexandrusPS: a user-friendly pipeline for genome-wide positive selection analysis",
          "In-depth description of AlexandrusPS applications and functionalities"
        ],
        "type": "Text_excerpt",
        "value": "**Function:** In cases when CodeML cannot perform the analysis, the output from CodeML does not contain the information necessary for LRT (log ratio tests) calculation. To exclude these instances from the global results output they are marked for exclusion.\n\n\n**Input files:** All CodeML output files\u2018./G0/Orthology_Groups/codeml[_OGC_id_].M0.mlc\u2019,\n\u2018./G0/Orthology_Groups/codeml[_OGC_id_].sm8.mlc\u2019 and  \u2018./G0/Orthology_Groups/codeml[_OGC_id_].sm.mlc\u2019\n\n\n**Output:** In case of missing data  will create a file called ErrorInTable.txt, which is used to condition SUBSTEP 15 \n"
      },
      "source": "https://raw.githubusercontent.com/alejocn5/AlexandrusPS/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "SUBSTEP 15:  Extract information for calculation of LRTs (log ratio tests) for site-specific models",
        "parent_header": [
          "AlexandrusPS: a user-friendly pipeline for genome-wide positive selection analysis",
          "In-depth description of AlexandrusPS applications and functionalities"
        ],
        "type": "Text_excerpt",
        "value": "**Function:** The output files of CodeML (.mlc files) which include the site-specific models performed in SUBSTEP 13 need parsing to extract the information needed for LRT calculation. This task is performed by the script \u2018./G0/Code/APS16_ExtractLRTandNP_positiveSelection.pl\u2019 which extracts: log likelihood (lnL), the number of parameters (np) for each model, omega for M0, M8, p0 and p1 for M1 and M8, w0 and w1 for M1 and the positive selection sites (PSS, aminoacid under selection) for all the models.\n\n\n**Input files:** All the output files of CodeML './G0/Orthology_Groups/codeml[_OGC_id_].M0.mlc\u2019,\n\u2018./G0/Orthology_Groups/codeml[_OGC_id_].sm8.mlc\u2019 and  './G0/Orthology_Groups/codeml[_OGC_id_].sm.mlc\u2019 \n\n\n**Output:** If all the models have complete information the table './Final_table_positive_selection/PositiveSelectionTable.txt\u2019 will be filled with data. If important CodeML values such as the likelihood (lnL) and/or the number of parameters (np) are missing, the table ./Failed_files/FailedPositiveSelectionTable.txt will be filled with any available information and absent data replaced with NAs. "
      },
      "source": "https://raw.githubusercontent.com/alejocn5/AlexandrusPS/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "SUBSTEP 16: LRT calculation (log ratio tests) for site-specific models",
        "parent_header": [
          "AlexandrusPS: a user-friendly pipeline for genome-wide positive selection analysis",
          "In-depth description of AlexandrusPS applications and functionalities"
        ],
        "type": "Text_excerpt",
        "value": "**Function:** LRT calculation and FDR correction based on the data in table  \u2018./Final_table_positive_selection/PositiveSelectionTable.txt\u2019 is performed by R script \u2018./G0/Code/APS18_Calculate_LTR.R'. \n\n\n**Input files:** Table './Final_table_positive_selection/PositiveSelectionTable.txt\u2019.\n\n\n**Output:** A table including only the genes under positive selection at the site-specific level './Final_table_positive_selection/GenesUnderPositiveSelection.txt\u2019. All intermediate files (from SUBSTEP 5 to 16) of all genes that do not show signals of positive selection will be compressed in \u2018./Results/[_OGC_id_].tar.gz\u2019."
      },
      "source": "https://raw.githubusercontent.com/alejocn5/AlexandrusPS/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "SUBSTEP 17:  Label single species for branch-site analysis.",
        "parent_header": [
          "AlexandrusPS: a user-friendly pipeline for genome-wide positive selection analysis",
          "In-depth description of AlexandrusPS applications and functionalities"
        ],
        "type": "Text_excerpt",
        "value": "**Function:** In order to assess positive selection for individual branches of the phylogeny, this substep generates an equal number of trees as species in the orthology group - for each a different species is labeled as the foreground branch, leaving the rest of the species as background branches. This is performed by the script \u2018./G0/Code/APS19_TreeGeneratorCombinator.pl\u2019.\n\n\n**Input files:** Table \u2018./G0/Orthology_Groups/[_OGC_id_].list.pep.fasta.dict.fa.best.nex.cl.head.dnd.GenTree.nex\u2019 from SUBSTEP 11.\n\n\n**Output:** Labeled tree for each species in the respective orthology group \u2018./G0/Orthology_Groups/[species_name_index][_OGC_id_].BranchAnalyTree\u2019 and a list of trees TreeList.txt."
      },
      "source": "https://raw.githubusercontent.com/alejocn5/AlexandrusPS/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "SUBSTEP 18: Generate configuration files for branch and branch-site models",
        "parent_header": [
          "AlexandrusPS: a user-friendly pipeline for genome-wide positive selection analysis",
          "In-depth description of AlexandrusPS applications and functionalities"
        ],
        "type": "Text_excerpt",
        "value": "**Function:** Generates configuration files to run branch-site model analyses that fit seven codon substitution models: M0  (\u2018./G0/Code/APS20_CreateCtl_ParameterDefParPG_BSM0.pl\u2019), H0 (\u2018./G0/Code/APS21_CreateCtl_ParameterDefParPG_BSM0H0.pl\u2019), and H1  (\u2018./G0/Code/APS22_CreateCtl_ParameterDefParPG_BSM0H1.pl\u2019), using the configuration file \u2018./Data/Parameter_codeml_M0BS.txt\u2019 (for APS20) or \u2018./G0/Data/Parameter_codeml_M2BSH0.txt\u2018  (for APS21)  or \u2018./G0/Data/Parameter_codeml_M2BSH1.txt\u2019 (for APS22) (these files can be modified by the user) and a default configuration file (./G0/Data/Default_par.txt) that fills any gap in the executed CodeML configuration files.\n\n\n**Input files:** './G0/Data/Parameter_codeml_M0BS.txt\u2019 (for APS20) or \u2018./G0/Data/Parameter_codeml_M2BSH0.txt\u2019 (for APS21) or\u2019./G0/Data/ Parameter_codeml_M2BSH1.txt\u2019 (for APS22) and  \u2018./G0/Data/Default_par.txt.\u2019.\n\n\n**Output:** Configuration files \u2018./G0/Orthology_Groups/codeml[species_name_index][_OGC_id_].bsm0.ctl\u2019, \u2018./G0/Orthology_Groups/codeml[species_name_index][_OGC_id_].bsm0h0.ctl\u2019 and \u2018./G0/Orthology_Groups/codeml[species_name_index][_OGC_id_].bsm0h1.ctl\u2019\n"
      },
      "source": "https://raw.githubusercontent.com/alejocn5/AlexandrusPS/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "SUBSTEP 20:  Extract information for LRT (log ratio tests) calculation for branch and branch-site models",
        "parent_header": [
          "AlexandrusPS: a user-friendly pipeline for genome-wide positive selection analysis",
          "In-depth description of AlexandrusPS applications and functionalities"
        ],
        "type": "Text_excerpt",
        "value": "**Function:**  The CodeML output files (.mlc files) of the branch and branch-site model analyses performed in SUBSTEP 19 need to be parsed for the information needed for LRT calculation. This is performed by the script './G0/Code/APS23_ExtractLRTandNP_positiveSelectionBranchSite.pl\u2019 which extracts: likelihood (lnL) and number of parameters (np) for each model.\n\n\n**Input files:** Full CodeML output \u2018./G0/Orthology_Groups/codeml[species_name_index][_OGC_id_].bsm0.mlc\u2019, \u2018./G0/Orthology_Groups/codeml[species_name_index][_OGC_id_].bsm0h0.mlc\u2019 and  \u2018./G0/Orthology_Groups/codeml[species_name_index][_OGC_id_].bsm0h1.mlc\u2019\n\n\n**Output:** Table including all relevant data for LRT calculation \u2018./Final_table_positive_selection/Branch_models_BranchSite_models_Table.txt\u2019\n"
      },
      "source": "https://raw.githubusercontent.com/alejocn5/AlexandrusPS/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "SUBSTEP 21: LRT (log ratio tests) calculation for branch and branch-site models",
        "parent_header": [
          "AlexandrusPS: a user-friendly pipeline for genome-wide positive selection analysis",
          "In-depth description of AlexandrusPS applications and functionalities"
        ],
        "type": "Text_excerpt",
        "value": "**Function:** LRT calculation and FDR correction based on the data in table  \u2018./Final_table_positive_selection/Branch_models_BranchSite_models_Table.txt\u2019 performed by the R script \u2018./G0/Code/APS23_BranchSiteAnalysis.R\u2019.\n\n\n**Input files:**  Table including all relevant data for LRT calculation from SUBSTEP 20 \u2018./Final_table_positive_selection/Branch_models_BranchSite_models_Table.txt.\n\n\n**Output:** Table including only genes under positive selection at the branch and branch-site level \u2018./Final_table_positive_selection/Branch_model.txt\u2019 and \u2018./Final_table_positive_selection/Branch_site_model.txt\u2019. The intermediate files (from SUBSTEP 5 to 21) will be compressed in (\u2018./Results_Branch/[_OGC_id_]bs.tar.gz\u2019).\n\n"
      },
      "source": "https://raw.githubusercontent.com/alejocn5/AlexandrusPS/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.982200131533011,
      "result": {
        "original_header": "AlexandrusPS: a user-friendly pipeline for genome-wide positive selection analysis",
        "type": "Text_excerpt",
        "value": "This repository contains procedures and scripts from AlexandrusPS:  \n* [Introduction](#introduction)\n* [Installation](#installation)\n    + [Deploy with Docker (recommended)](#deploy-with-docker-recommended)\n      - [How to Docker](#how-to-docker)\n      - [Singularity](#singularity)\n* [Running AlexandrusPS](#running-alexandrusps)\n    + [Input](#input)\n      - [Sequence name indexing](#sequence-name-indexing)\n      - [Nomenclature rules](#follow-binomial-nomenclature-rules)\n      - [Quality control](#quality-control-of-your-sequences)\n        - [Troubleshoot](#troubleshooting-errors-that-you-may-encounter-during-quality-control) \n    + [Example](#example)\n* [AlexandrusPS applications and functionalities](#in-depth-description-of-alexandrusps-applications-and-functionalities)\n* [References](#references)\n* [Cite us](#cite-us)\n \n"
      },
      "source": "https://raw.githubusercontent.com/alejocn5/AlexandrusPS/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/alejocn5/AlexandrusPS/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "faq": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Troubleshooting errors that you may encounter during quality control",
        "parent_header": [
          "AlexandrusPS: a user-friendly pipeline for genome-wide positive selection analysis",
          "Running AlexandrusPS",
          "Input",
          "Quality control of your sequences"
        ],
        "type": "Text_excerpt",
        "value": "In the quality control step AlexandrusPS looks for two main errors in the FASTA files: \n1. Not all amino acids sequences in the \u2018.pep.fasta\u2019 file are represented in the '.cds.fasta' file, in which case, the script ```Sequences_quality_control_AlexandrusPS.sh``` will generate an error file \u2018Error_missed_sequences.txt\u2019 containing all the peptide sequences which could not be found in the \u2018.cds.fasta\u2018 file.\n2. The FASTA file is empty or/and contains empty FASTA entries (header but no sequence) or/and the '.pep.fasta' and the '.cds.fasta' files do not contain the same amount of sequences. In case any of these errors occur it will generate an empty file \u201cError_with_Fasta_header.txt\u201d. If you encounter this error file, we recommend that you re-check the FASTA files and in particular the headers of your FASTA files ('.cds.fasta' and \u2018.pep.fasta\u2019). In general 1) avoid the use of special characters and 2) try to make your headers as short and simple as possible. \n"
      },
      "source": "https://raw.githubusercontent.com/alejocn5/AlexandrusPS/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/alejocn5/AlexandrusPS/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "alejocn5/AlexandrusPS"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "AlexandrusPS: a user-friendly pipeline for genome-wide positive selection analysis"
      },
      "source": "https://raw.githubusercontent.com/alejocn5/AlexandrusPS/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/alejocn5/AlexandrusPS/main/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/alejocn5/AlexandrusPS/main/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/alejocn5/AlexandrusPS/main/AlexandrusPS_Positive_selection_pipeline/Example_AlexandrusPS.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/alejocn5/AlexandrusPS/main/AlexandrusPS_Positive_selection_pipeline/Sequences_quality_control_AlexandrusPS.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/alejocn5/AlexandrusPS/main/AlexandrusPS_Positive_selection_pipeline/APS6_CoresGenerator.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/alejocn5/AlexandrusPS/main/AlexandrusPS_Positive_selection_pipeline/CleanAlexandrusPS.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/alejocn5/AlexandrusPS/main/AlexandrusPS_Positive_selection_pipeline/AlexandrusPS.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/alejocn5/AlexandrusPS/main/AlexandrusPS_Positive_selection_pipeline/G0/BranchSiteAnalisys.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/alejocn5/AlexandrusPS/main/AlexandrusPS_Positive_selection_pipeline/G0/Positive_selection.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/alejocn5/AlexandrusPS/main/AlexandrusPS_Positive_selection_pipeline/Code/APS6_CoresGenerator.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://user-images.githubusercontent.com/44226409/216979380-f96a7ad9-c6e5-446c-b0d5-3f0fa836e743.jpg"
      },
      "source": "https://raw.githubusercontent.com/alejocn5/AlexandrusPS/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Deploy with Docker (recommended)",
        "parent_header": [
          "AlexandrusPS: a user-friendly pipeline for genome-wide positive selection analysis",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "The easiest way to run AlexandrusPS is to use its Docker image. You can download Docker [here](https://docs.docker.com/get-docker/).\nAvailable tags can be found [here](https://hub.docker.com/repository/docker/vivienschoonenberg/alexandrusps).\n"
      },
      "source": "https://raw.githubusercontent.com/alejocn5/AlexandrusPS/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "How to Docker",
        "parent_header": [
          "AlexandrusPS: a user-friendly pipeline for genome-wide positive selection analysis",
          "Installation",
          "Deploy with Docker (recommended)"
        ],
        "type": "Text_excerpt",
        "value": "Create a directory in which you'd like to run AlexandrusPS. Make this your working directory directory, and make one folder in which you place all CDS and amino acid FASTA files (i.e. a folder called input) (instructions on specific requirements for these files are included below), and a folder for the output of AlexandrusPS (i.e. a folder called output). You will pass the paths to two folders as input parameters to AlexandrusPS.\n\nYou can now run AlexandrusPS with:\n\n```\ndocker run -v $PWD:$PWD vivienschoonenberg/alexandrusps:1.0 ./AlexandrusPS.sh -i $PWD/input -o $PWD/output\n```\nWhere ```-v $PWD:$PWD``` mounts your current working directory and ```-i $PWD/input -o $PWD/output``` specifies the paths to the in- and output folders. \n\nDon't forget to add ```--platform linux/amd64``` if you're on a Mac with new M chip. "
      },
      "source": "https://raw.githubusercontent.com/alejocn5/AlexandrusPS/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Singularity",
        "parent_header": [
          "AlexandrusPS: a user-friendly pipeline for genome-wide positive selection analysis",
          "Installation",
          "Deploy with Docker (recommended)"
        ],
        "type": "Text_excerpt",
        "value": "If you wish to run ALexandrusPS with singularity (for instance on a high performance cluster), you can simply download the docker image and build a .sif image. Alternatively, you can pull the singularity image directly from [Sylabs](https://cloud.sylabs.io/library/vivienschoonenberg/alexandrusps/alexandrusps) (might be updated less frequently):\n\n```\nsingularity pull --arch amd64 library://vivienschoonenberg/alexandrusps/alexandrusps:1.0\n```\n\nYou can then run:\n\n```\nsingularity exec --bind /home/user/mydirectory:/mnt --pwd /app/AlexandrusPS_Positive_selection_pipeline/ alexandrusps_1.0.sif ./AlexandrusPS.sh -i /mnt/input -o /mnt/output\n```\nWith ```--bind /home/user/mydirectory:/mnt``` you mount the folder ```/home/user/mydirectory``` to the ```/mnt``` location in the singularity container. In this folder you should have made the input folder (containing all fasta files), and an output folder. These again are specified with ```-i /mnt/input -o /mnt/output```. Further, for singularity use of the original docker image it is important to specify the working directory of the container with ```--pwd /app/AlexandrusPS_Positive_selection_pipeline/```.\n"
      },
      "source": "https://raw.githubusercontent.com/alejocn5/AlexandrusPS/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "SUBSTEP 1: Index generation, FASTA header and sequence modification, preparation of files for orthology prediction and quality control.",
        "parent_header": [
          "AlexandrusPS: a user-friendly pipeline for genome-wide positive selection analysis",
          "In-depth description of AlexandrusPS applications and functionalities"
        ],
        "type": "Text_excerpt",
        "value": "**Function:** Some of the downstream programs of the pipeline struggle with lengthy headers or species names. Such problems are circumvented with the script  'APS1_IndexGenerator_QualityControl.pl\u2019 which creates a species name index based on the user-provided binomial name. Using this index the script:\n* i) generates FASTA filenames (for .pep.fasta and '.cds.fasta') compatible with other downstream scripts used in AlexandrusPS \n* ii) adds the index to the headers of the sequences in each FASTA file\n* iii) generates a species name index directory enabling the user to retrace the association between the used index and the species\u2019 binomial name \n* iv) The new headers of the amino acid FASTA file (\u2018.cur.pep.fasta\u2019) will be used for orthology prediction\n* v) compiles the new headers of all species in one file (CompiledSpecies.pep.fasta and CompiledSpecies.cds.fasta)\n* vi) as described before, this SUBSTEP also executes the initial quality control of the sequence files.\n\n\n**Input files:** Species_1.pep.fasta and Species_1.cds.fasta\n\n\n**Output:** the output files of  'APS1_IndexGenerator_QualityControl.pl\u2019 will be located in two new directories created by AlexandrusPS: \n* \u2018./Curated_Sequences\u2019 which will contain the \u2018CompiledSpecies.pep.fasta\u2019 and \u2018CompiledSpecies.cds.fasta\u2019 files.\n* \u2018./Orthology_Prediction\u2019 which will contain the \u2018.cur.pep.fasta\u2019 files.\n"
      },
      "source": "https://raw.githubusercontent.com/alejocn5/AlexandrusPS/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/alejocn5/AlexandrusPS/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "AlexandrusPS is released under the GNU AFFERO license, 2023 Alejandro Ceron-Noriega.\n\n\n                    GNU AFFERO GENERAL PUBLIC LICENSE\n                       Version 3, 19 November 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU Affero General Public License is a free, copyleft license for\nsoftware and other kinds of works, specifically designed to ensure\ncooperation with the community in the case of network server software.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nour General Public Licenses are intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  Developers that use our General Public Licenses protect your rights\nwith two steps: (1) assert copyright on the software, and (2) offer\nyou this License which gives you legal permission to copy, distribute\nand/or modify the software.\n\n  A secondary benefit of defending all users' freedom is that\nimprovements made in alternate versions of the program, if they\nreceive widespread use, become available for other developers to\nincorporate.  Many developers of free software are heartened and\nencouraged by the resulting cooperation.  However, in the case of\nsoftware used on network servers, this result may fail to come about.\nThe GNU General Public License permits making a modified version and\nletting the public access it on a server without ever releasing its\nsource code to the public.\n\n  The GNU Affero General Public License is designed specifically to\nensure that, in such cases, the modified source code becomes available\nto the community.  It requires the operator of a network server to\nprovide the source code of the modified version running there to the\nusers of that server.  Therefore, public use of a modified version, on\na publicly accessible server, gives the public access to the source\ncode of the modified version.\n\n  An older license, called the Affero General Public License and\npublished by Affero, was designed to accomplish similar goals.  This is\na different license, not a version of the Affero GPL, but Affero has\nreleased a new version of the Affero GPL which permits relicensing under\nthis license.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU Affero General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Remote Network Interaction; Use with the GNU General Public License.\n\n  Notwithstanding any other provision of this License, if you modify the\nProgram, your modified version must prominently offer all users\ninteracting with it remotely through a computer network (if your version\nsupports such interaction) an opportunity to receive the Corresponding\nSource of your version by providing access to the Corresponding Source\nfrom a network server at no charge, through some standard or customary\nmeans of facilitating copying of software.  This Corresponding Source\nshall include the Corresponding Source for any work covered by version 3\nof the GNU General Public License that is incorporated pursuant to the\nfollowing paragraph.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the work with which it is combined will remain governed by version\n3 of the GNU General Public License.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU Affero General Public License from time to time.  Such new versions\nwill be similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU Affero General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU Affero General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU Affero General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If your software can interact with users remotely through a computer\nnetwork, you should also make sure that it provides a way for users to\nget its source.  For example, if your program is a web application, its\ninterface could display a \"Source\" link that leads users to an archive\nof the code.  There are many ways you could offer source, and different\nsolutions will be better for different programs; see section 13 for the\nspecific requirements.\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU AGPL, see\n<http://www.gnu.org/licenses/>.\n"
      },
      "source": "https://raw.githubusercontent.com/alejocn5/AlexandrusPS/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "AlexandrusPS"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "alejocn5"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 174714,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 24302,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 4635,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 2545,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/alejocn5/AlexandrusPS/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "vivienschoonenberg",
          "type": "User"
        },
        "date_created": "2023-09-25T15:33:19Z",
        "date_published": "2023-09-25T15:36:09Z",
        "description": "## What's Changed\r\n* Update README.md by @vivienschoonenberg and @alejocn5  in https://github.com/alejocn5/AlexandrusPS/pull/5\r\n* Update example input by @vivienschoonenberg and @alejocn5 in https://github.com/alejocn5/AlexandrusPS/pull/6\r\n* update singularity compatability by @vivienschoonenberg and @alejocn5 in https://github.com/alejocn5/AlexandrusPS/pull/7\r\n\r\n**Full Changelog**: https://github.com/alejocn5/AlexandrusPS/compare/v0.9...v1.0",
        "html_url": "https://github.com/alejocn5/AlexandrusPS/releases/tag/v1.0",
        "name": "v1.0 release",
        "release_id": 122471692,
        "tag": "v1.0",
        "tarball_url": "https://api.github.com/repos/alejocn5/AlexandrusPS/tarball/v1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/alejocn5/AlexandrusPS/releases/122471692",
        "value": "https://api.github.com/repos/alejocn5/AlexandrusPS/releases/122471692",
        "zipball_url": "https://api.github.com/repos/alejocn5/AlexandrusPS/zipball/v1.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "vivienschoonenberg",
          "type": "User"
        },
        "date_created": "2023-03-01T09:46:11Z",
        "date_published": "2023-08-02T13:04:37Z",
        "description": "Version 0.9 release of AlexandrusPS: a user-friendly pipeline for genome-wide positive selection analysis.\r\n\r\nInitial working release.\r\n\r\n",
        "html_url": "https://github.com/alejocn5/AlexandrusPS/releases/tag/v0.9",
        "name": "v0.9 release",
        "release_id": 114817214,
        "tag": "v0.9",
        "tarball_url": "https://api.github.com/repos/alejocn5/AlexandrusPS/tarball/v0.9",
        "type": "Release",
        "url": "https://api.github.com/repos/alejocn5/AlexandrusPS/releases/114817214",
        "value": "https://api.github.com/repos/alejocn5/AlexandrusPS/releases/114817214",
        "zipball_url": "https://api.github.com/repos/alejocn5/AlexandrusPS/zipball/v0.9"
      },
      "technique": "GitHub_API"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Sequence name indexing",
        "parent_header": [
          "AlexandrusPS: a user-friendly pipeline for genome-wide positive selection analysis",
          "Running AlexandrusPS",
          "Input"
        ],
        "type": "Text_excerpt",
        "value": "For each species that you want to include in the analysis two FASTA files should be generated, one with the CDS sequences and the other one with corresponding amino acid sequences.\n\n> [!WARNING]  \n> It is crucial that both files have the same number of sequences and that each amino acid sequence and the corresponding CDS sequence have the same header. \n\nFor example, if you want to analyze 6 different species, you should provide 12 FASTA files (6\n```.cds.fasta``` and 6 ```.pep.fasta``` files). Make sure to follow a similar structure as the example data set in the ```Example``` directory in this repository, see Figure 1.\n\n![Fig1](https://user-images.githubusercontent.com/44226409/216979380-f96a7ad9-c6e5-446c-b0d5-3f0fa836e743.jpg)\n\nFigure 1 - Example sequence files with correct naming. \n"
      },
      "source": "https://raw.githubusercontent.com/alejocn5/AlexandrusPS/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Follow binomial nomenclature rules",
        "parent_header": [
          "AlexandrusPS: a user-friendly pipeline for genome-wide positive selection analysis",
          "Running AlexandrusPS",
          "Input"
        ],
        "type": "Text_excerpt",
        "value": "For naming the FASTA files, follow the binomial nomenclature rules. This formating ensures the proper functioning of the pipeline. \nA step by step example for human:\n1) Find the scientific name for human in binomial nomenclature (\"two-term naming system\") in which the first term is genus or generic name (i.e., Homo) and the second term is the specific name or specific epithet (i.e., sapiens)\n2) Join the two terms by underline (_): Homo_sapiens\n3) Add the termination character '.cds.fasta' for the CDS file and \u2018.pep.fasta\u2019 for the amino acid files:  \n    - Homo_sapiens.cds.fasta (CDS FASTA file)\n    - Homo_sapiens.pep.fasta (amino acid FASTA file)\n\n> [!NOTE]  \n> Two considerations:  \n> 1) Both FASTA files need to have the same name, the only difference should be the file extension ('.cds.fasta' and \u2018.pep.fasta\u2019).  \n>\n> 2) AlexandrusPS includes the script APS1_IndexGenerator_QualityControl.pl which generates a species name index based on 6 letters from the binomial name - three from the genus (hom) and three from the specific epithet (sap) - resulting in species name index  \u2018homsap\u2019. Hence, the user should make sure that the file names include only the species name (without special characters besides the mentioned \u2018_\u2019) and that the 6 letters do not overlap with the species name index of any other species included in the analysis.\n"
      },
      "source": "https://raw.githubusercontent.com/alejocn5/AlexandrusPS/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Quality control of your sequences",
        "parent_header": [
          "AlexandrusPS: a user-friendly pipeline for genome-wide positive selection analysis",
          "Running AlexandrusPS",
          "Input"
        ],
        "type": "Text_excerpt",
        "value": "After you've prepared your input sequence FASTA files, create an input folder to store them all together. You can now opt to run a quality control check on your sequences before running AlexandrusPS (also has the QC step build in). \nTo do so you'd run:\n```\ndocker run -v $PWD:$PWD vivienschoonenberg/alexandrusps:1.0 ./Sequences_quality_control_AlexandrusPS.sh -i $PWD/input\n```\nSpecify the folder containing the FASTA files with ```-i $PWD/input```. ```$PWD``` is your working directory, you can change this to wherever you've stored your files. Make sure to also adjust the folder you mount in the container ```-v $PWD:$PWD``` if you do.\n\nThe QC step checks whether your sequence files ('.cds.fasta' and \u2018.pep.fasta\u2019) are suitable for positive selection analysis with AlexandrusPS. In case your sequences (either one or both) are not suitable for AlexandrusPS you will find one or two error files (\u2018Error_missed_sequences.txt\u2019 and/or \u2018Error_with_Fasta_header.txt\u2019) in the input directory which you passed as argument to ```Sequences_quality_control_AlexandrusPS.sh```. If after running the script none of these files appear it means your sequence files are usable for the analysis. The content of the error files is described and explained in this github repository under the section \u2018[Troubleshooting errors that you may encounter during quality control](#troubleshooting-errors-that-you-may-encounter-during-quality-control)\u2019. The quality control is performed by the Perl script  ```APS1_IndexGenerator_QualityControl.pl```.\n\n> [!NOTE]  \n> This quality control is executed by the AlexandrusPS pipeline by default. The pipeline will continue the analysis with the sequences that pass the quality control even if there are some sequences in \u2018Error_missed_sequences.txt\u2019 by excluding these from the analysis. It will however interrupt the process if it finds the file \u2018Error_with_Fasta_header.txt\u2019.\n"
      },
      "source": "https://raw.githubusercontent.com/alejocn5/AlexandrusPS/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Run AlexandrusPS",
        "parent_header": [
          "AlexandrusPS: a user-friendly pipeline for genome-wide positive selection analysis",
          "Running AlexandrusPS"
        ],
        "type": "Text_excerpt",
        "value": "After confirming that no error files were generated in step 4, AlexandrusPS can be executed from the main directory by running the docker image as described [above](#deploy-with-docker-recommended):\n\n```\ndocker run -v $PWD:$PWD vivienschoonenberg/alexandrusps:1.0 ./AlexandrusPS.sh -i $PWD/input -o $PWD/output\n```"
      },
      "source": "https://raw.githubusercontent.com/alejocn5/AlexandrusPS/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "SUBSTEP 10: Run pal2nal <a href=\"#3\">[3]</a>",
        "parent_header": [
          "AlexandrusPS: a user-friendly pipeline for genome-wide positive selection analysis",
          "In-depth description of AlexandrusPS applications and functionalities"
        ],
        "type": "Text_excerpt",
        "value": "**Function:** As CodeML is a codon\u2010based model the multiple sequence alignment of proteins (\u2018.pep.fasta.dict.fa.best.fas\u2019) and the corresponding CDS (.list.cds.fasta.dict.fa) sequences need to be converted into a codon alignment (.codonalign.fasta). This is achieved using pal2nal.\n\n\n**Input files:** \n1) Multiple sequence alignments of proteins generated in SUBSTEP 8 './G0/Orthology_Groups/[_OGC_id_].list.pep.fasta.dict.fa.best.fas\u2019\n2) CDS sequences generated in SUBSTEP 7 './G0/Orthology_Groups/[_OGC_id_].list.cds.fasta.dict.fa\u2019\n\n\n**Output:** CDS codon alignment:  './G0/Orthology_Groups/[_OGC_id_].codonalign.fasta\u2019"
      },
      "source": "https://raw.githubusercontent.com/alejocn5/AlexandrusPS/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "SUBSTEP 13: Run CodeML for site-specific models",
        "parent_header": [
          "AlexandrusPS: a user-friendly pipeline for genome-wide positive selection analysis",
          "In-depth description of AlexandrusPS applications and functionalities"
        ],
        "type": "Text_excerpt",
        "value": "**Function:** Run CodeML using the configuration files (.ctl) generated in SUBSTEP 12.\n\n\n**Input files:** Configuration files \u2018./G0/Orthology_Groups/codeml[_OGC_id_].M0.ctl\u2019, \u2018./G0/Orthology_Groups/codeml[_OGC_id_].sm8.ctl\u2019 and \u2018./G0/Orthology_Groups/codeml[_OGC_id_].sm.ctl\u2019\n\n\n**Output:** configuration files \u2018./G0/Orthology_Groups/codeml[_OGC_id_].M0.mlc\u2019,\n\u2018./G0/Orthology_Groups/codeml[_OGC_id_].sm8.mlc\u2019 and  \u2018./G0/Orthology_Groups/codeml[_OGC_id_].sm.mlc\u2019\n"
      },
      "source": "https://raw.githubusercontent.com/alejocn5/AlexandrusPS/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "SUBSTEP 19: Run CodeML for branch and branch-site models",
        "parent_header": [
          "AlexandrusPS: a user-friendly pipeline for genome-wide positive selection analysis",
          "In-depth description of AlexandrusPS applications and functionalities"
        ],
        "type": "Text_excerpt",
        "value": "**Function:** Run CodeML with the configuration files (.ctl) generated in SUBSTEP 18.\n\n\n**Input files:** Configuration files \u2018./G0/Orthology_Groups/codeml[species_name_index][_OGC_id_].bsm0.ctl\u2019, \u2018./G0/Orthology_Groups/codeml[species_name_index][_OGC_id_].bsm0h0.ctl\u2019 and \u2018./G0/Orthology_Groups/codeml[species_name_index][_OGC_id_].bsm0h1.ctl\u2019\n\n\n**Output:** CodeML output files \u2018./G0/Orthology_Groups/codeml[species_name_index][_OGC_id_].bsm0.mlc\u2019, \u2018./G0/Orthology_Groups/codeml[species_name_index][_OGC_id_].bsm0h0.mlc\u2019 and \u2018./G0/Orthology_Groups/codeml[species_name_index][_OGC_id_].bsm0h1.mlc\u2019."
      },
      "source": "https://raw.githubusercontent.com/alejocn5/AlexandrusPS/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "support",
    "identifier",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-03 23:57:07",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Example data is provided for testing the pipeline",
        "parent_header": [
          "AlexandrusPS: a user-friendly pipeline for genome-wide positive selection analysis",
          "Running AlexandrusPS"
        ],
        "type": "Text_excerpt",
        "value": "To test the functionality of the docker image by running an example analysis:\n> [!IMPORTANT]  \n> Make sure to create an empty folder (i.e. \"myfolder\" in commmand below) in a location of your choice (and make this your working directory, \"$PWD\") before executing this command.\n```\ndocker run -v $PWD:$PWD vivienschoonenberg/alexandrusps:1.0 ./Example_AlexandrusPS.sh -w $PWD/myfolder\n```\n\nThis executable mounts your current working directory in the docker (```-v $PWD:$PWD```) and will create an input and output folder in the provided directory (```-w $PWD/myfolder```). Then, the FASTA files from the example directory are transferred to the newly created \"input\" folder, and ```AlexandrusPS.sh``` gets executed with the example dataset provided together with the pipeline.\n\nThe output of this example analysis will include the following result: five of the six protein ortho groups included in the analysis are found to be under positive selection (HLA-DPA1, TLR1, NKG7, CD4, TLR8) and one without positive selection (NUP62CL). \nThe \"output\" directory is automatically generated within the folder passed with the ```-w``` flag (in this example in the 'myfolder' directory).\n\nRunnning the example in Singularity can be done with the following command:\n```\nsingularity exec --bind /home/user/mydirectory:/mnt --pwd /app/AlexandrusPS_Positive_selection_pipeline/ ./Example_AlexandrusPS.sh -w /mnt\n```\n\nWith ```--bind /home/user/mydirectory:/mnt``` you mount the folder ```/home/user/mydirectory``` to the ```/mnt``` location in the singularity container. This is passed as working directory to the example run of AlexandruPS with ```-w /mnt```. Here, an input and output folder will be created. Further, for singularity use of the original docker image it is important to specify the working directory of the container with ```--pwd /app/AlexandrusPS_Positive_selection_pipeline/```.\n"
      },
      "source": "https://raw.githubusercontent.com/alejocn5/AlexandrusPS/main/README.md",
      "technique": "header_analysis"
    }
  ]
}