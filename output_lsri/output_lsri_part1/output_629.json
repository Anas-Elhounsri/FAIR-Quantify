{
  "application_domain": [
    {
      "confidence": 29.51,
      "result": {
        "type": "String",
        "value": "Natural Language Processing"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citing sylph",
        "parent_header": [
          "sylph - fast and precise species-level metagenomic profiling with ANIs"
        ],
        "type": "Text_excerpt",
        "value": "Jim Shaw and Yun William Yu. Metagenome profiling and containment estimation through abundance-corrected k-mer sketching with sylph (2023). bioRxiv. (Accepted for publication)\n\n"
      },
      "source": "https://raw.githubusercontent.com/bluenote-1577/sylph/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/bluenote-1577/sylph"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-05-06T06:54:01Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-03T18:45:53Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ultrafast taxonomic profiling and genome querying for metagenomic samples by abundance-corrected minhash."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "parent_header": [
          "sylph - fast and precise species-level metagenomic profiling with ANIs"
        ],
        "type": "Text_excerpt",
        "value": "**sylph** is a program that performs ultrafast (1) **ANI querying** or (2) **metagenomic profiling** for metagenomic shotgun samples. \n\n**Containment ANI querying**: sylph can search a genome, e.g. E. coli, against your sample. If sylph outputs an estimate of 97% ANI, your sample contains an E. coli with 97% ANI to the queried genome.\n\n**Metagenomic profiling**: sylph can determine the species/taxa in your sample and their abundances, just like [Kraken](https://ccb.jhu.edu/software/kraken/) or [MetaPhlAn](https://github.com/biobakery/MetaPhlAn).\n\n<p align=\"center\"><img src=\"assets/sylph.gif?raw=true\"/></p>\n<p align=\"center\">\n   <i>\n   Profiling 1 Gbp of mouse gut reads against 85,205 genomes in a few seconds \n   </i>\n</p>\n\n"
      },
      "source": "https://raw.githubusercontent.com/bluenote-1577/sylph/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Why sylph?",
        "parent_header": [
          "sylph - fast and precise species-level metagenomic profiling with ANIs",
          "Introduction"
        ],
        "type": "Text_excerpt",
        "value": "1. **Precise species-level profiling**: Our tests show that sylph has less false positives than Kraken and is about as precise and sensitive as marker gene methods (MetaPhlAn, mOTUs). \n\n2. **Ultrafast, multithreaded, multi-sample**: sylph can be > 50x faster than other methods for multi-sample processing. sylph only takes ~15GB of RAM for profiling against the entire GTDB-R220 database (110k genomes).\n\n3. **Accurate (containment) ANIs down to 0.1x effective coverage**: for bacterial ANI queries of > 90% ANI, sylph can often give accurate ANI estimates down to 0.1x coverage.\n\n4. **Customizable, versatile**: sylph can profile against [metagenome-assembled genomes (MAGs), viruses, eukaryotes](https://github.com/bluenote-1577/sylph/wiki/Pre%E2%80%90built-databases), and custom databases. **Long reads work too.** Taxonomic information can be incorporated downstream for traditional profiling reports. \n"
      },
      "source": "https://raw.githubusercontent.com/bluenote-1577/sylph/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "How does sylph work?",
        "parent_header": [
          "sylph - fast and precise species-level metagenomic profiling with ANIs",
          "Introduction"
        ],
        "type": "Text_excerpt",
        "value": "sylph uses a k-mer containment method. sylph's novelty lies in **using a statistical technique to correct ANI for low coverage genomes** , giving accurate results for low abundance genomes. See [here for more information on what sylph can and can not do](https://github.com/bluenote-1577/sylph/wiki/Introduction:-what-is-sylph-and-how-does-it-work%3F). \n"
      },
      "source": "https://raw.githubusercontent.com/bluenote-1577/sylph/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/bluenote-1577/sylph/wiki"
      },
      "source": "https://raw.githubusercontent.com/bluenote-1577/sylph/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/bluenote-1577/sylph/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 6
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/bluenote-1577/sylph/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bluenote-1577/sylph"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "sylph - fast and precise species-level metagenomic profiling with ANIs"
      },
      "source": "https://raw.githubusercontent.com/bluenote-1577/sylph/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Option 1: conda install",
        "parent_header": [
          "sylph - fast and precise species-level metagenomic profiling with ANIs",
          "Install (current version v0.6.1)"
        ],
        "type": "Text_excerpt",
        "value": "[![Anaconda-Server Badge](https://anaconda.org/bioconda/sylph/badges/version.svg)](https://anaconda.org/bioconda/sylph)\n[![Anaconda-Server Badge](https://anaconda.org/bioconda/sylph/badges/latest_release_date.svg)](https://anaconda.org/bioconda/sylph)\n\n```sh\nconda install -c bioconda sylph\n```\n\n> [!WARNING]\n> conda install may break if AVX2 instructions are not available on your CPU. See the [issue here](https://github.com/bluenote-1577/sylph/issues/2). The binary and source install still work. \n"
      },
      "source": "https://raw.githubusercontent.com/bluenote-1577/sylph/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Option 2: Build from source",
        "parent_header": [
          "sylph - fast and precise species-level metagenomic profiling with ANIs",
          "Install (current version v0.6.1)"
        ],
        "type": "Text_excerpt",
        "value": "Requirements:\n1. [rust](https://www.rust-lang.org/tools/install) (version > 1.63) programming language and associated tools such as cargo are required and assumed to be in PATH.\n2. A c compiler (e.g. GCC)\n3. make\n4. cmake\n\nBuilding takes a few minutes (depending on # of cores).\n\n```sh\ngit clone https://github.com/bluenote-1577/sylph\ncd sylph\n\n# If default rust install directory is ~/.cargo\ncargo install --path . --root ~/.cargo\nsylph query test_files/*\n```"
      },
      "source": "https://raw.githubusercontent.com/bluenote-1577/sylph/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Option 3: Pre-built x86-64 linux statically compiled executable",
        "parent_header": [
          "sylph - fast and precise species-level metagenomic profiling with ANIs",
          "Install (current version v0.6.1)"
        ],
        "type": "Text_excerpt",
        "value": "If you're on an x86-64 system, you can download the binary and use it without any installation. \n\n```sh\nwget https://github.com/bluenote-1577/sylph/releases/download/latest/sylph\nchmod +x sylph\n./sylph -h\n```\n\nNote: the binary is compiled with a different set of libraries (musl instead of glibc), probably impacting performance. \n"
      },
      "source": "https://raw.githubusercontent.com/bluenote-1577/sylph/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "<a href=\"https://github.com/bluenote-1577/sylph/wiki/Pre%E2%80%90built-databases\">Pre-built databases</a>",
        "parent_header": [
          "sylph - fast and precise species-level metagenomic profiling with ANIs",
          "Tutorials, manuals, and pre-built databases"
        ],
        "type": "Text_excerpt",
        "value": "The pre-built databases [available here](https://github.com/bluenote-1577/sylph/wiki/Pre%E2%80%90built-databases) can be downloaded and used with sylph for profiling and containment querying. \n"
      },
      "source": "https://raw.githubusercontent.com/bluenote-1577/sylph/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "<a href=\"https://github.com/bluenote-1577/sylph/wiki/sylph-cookbook\">Cookbook</a>",
        "parent_header": [
          "sylph - fast and precise species-level metagenomic profiling with ANIs",
          "Tutorials, manuals, and pre-built databases"
        ],
        "type": "Text_excerpt",
        "value": "For common use cases and fast explanations, see the above [cookbook](https://github.com/bluenote-1577/sylph/wiki/sylph-cookbook).\n"
      },
      "source": "https://raw.githubusercontent.com/bluenote-1577/sylph/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "<a href=\"https://github.com/bluenote-1577/sylph/wiki/Taxonomic-profiling-with-the-GTDB%E2%80%90R214-database\">Taxonomic profiling against GTDB database with MetaPhlAn output format</a>",
        "parent_header": [
          "sylph - fast and precise species-level metagenomic profiling with ANIs",
          "Tutorials, manuals, and pre-built databases",
          "Tutorials"
        ],
        "type": "Text_excerpt",
        "value": "# sylph - fast and precise species-level metagenomic profiling with ANIs \n\n## Introduction\n\n**sylph** is a program that performs ultrafast (1) **ANI querying** or (2) **metagenomic profiling** for metagenomic shotgun samples. \n\n**Containment ANI querying**: sylph can search a genome, e.g. E. coli, against your sample. If sylph outputs an estimate of 97% ANI, your sample contains an E. coli with 97% ANI to the queried genome.\n\n**Metagenomic profiling**: sylph can determine the species/taxa in your sample and their abundances, just like [Kraken](https://ccb.jhu.edu/software/kraken/) or [MetaPhlAn](https://github.com/biobakery/MetaPhlAn).\n\n<p align=\"center\"><img src=\"assets/sylph.gif?raw=true\"/></p>\n<p align=\"center\">\n   <i>\n   Profiling 1 Gbp of mouse gut reads against 85,205 genomes in a few seconds \n   </i>\n</p>\n\n\n### Why sylph?\n\n1. **Precise species-level profiling**: Our tests show that sylph has less false positives than Kraken and is about as precise and sensitive as marker gene methods (MetaPhlAn, mOTUs). \n\n2. **Ultrafast, multithreaded, multi-sample**: sylph can be > 50x faster than other methods for multi-sample processing. sylph only takes ~15GB of RAM for profiling against the entire GTDB-R220 database (110k genomes).\n\n3. **Accurate (containment) ANIs down to 0.1x effective coverage**: for bacterial ANI queries of > 90% ANI, sylph can often give accurate ANI estimates down to 0.1x coverage.\n\n4. **Customizable, versatile**: sylph can profile against [metagenome-assembled genomes (MAGs), viruses, eukaryotes](https://github.com/bluenote-1577/sylph/wiki/Pre%E2%80%90built-databases), and custom databases. **Long reads work too.** Taxonomic information can be incorporated downstream for traditional profiling reports. \n\n### How does sylph work?\n\nsylph uses a k-mer containment method. sylph's novelty lies in **using a statistical technique to correct ANI for low coverage genomes** , giving accurate results for low abundance genomes. See [here for more information on what sylph can and can not do](https://github.com/bluenote-1577/sylph/wiki/Introduction:-what-is-sylph-and-how-does-it-work%3F). \n\n## Very quick start\n\n#### Profile metagenome sample against [GTDB-R220](https://gtdb.ecogenomic.org/) (113,104 bacterial/archaeal species representative genomes) \n\n```sh\nconda install -c bioconda sylph\n\n# download GTDB-R220 pre-built database (~13 GB)\nwget http://faust.compbio.cs.cmu.edu/sylph-stuff/gtdb-r220-c200-dbv1.syldb\n\n# multi-sample paired-end profiling (sylph version >= 0.6)\nsylph profile gtdb-r220-c200-dbv1.syldb -1 *_1.fastq.gz -2 *_2.fastq.gz -t (threads) > profiling.tsv\n\n# multi-sample single-end profiling\nsylph profile gtdb-r220-c200-dbv1.syldb *.fastq -t (threads) > profiling.tsv\n```\n\n##  Install (current version v0.6.1)\n\n#### Option 1: conda install \n[![Anaconda-Server Badge](https://anaconda.org/bioconda/sylph/badges/version.svg)](https://anaconda.org/bioconda/sylph)\n[![Anaconda-Server Badge](https://anaconda.org/bioconda/sylph/badges/latest_release_date.svg)](https://anaconda.org/bioconda/sylph)\n\n```sh\nconda install -c bioconda sylph\n```\n\n> [!WARNING]\n> conda install may break if AVX2 instructions are not available on your CPU. See the [issue here](https://github.com/bluenote-1577/sylph/issues/2). The binary and source install still work. \n\n#### Option 2: Build from source\n\nRequirements:\n1. [rust](https://www.rust-lang.org/tools/install) (version > 1.63) programming language and associated tools such as cargo are required and assumed to be in PATH.\n2. A c compiler (e.g. GCC)\n3. make\n4. cmake\n\nBuilding takes a few minutes (depending on # of cores).\n\n```sh\ngit clone https://github.com/bluenote-1577/sylph\ncd sylph\n\n# If default rust install directory is ~/.cargo\ncargo install --path . --root ~/.cargo\nsylph query test_files/*\n```\n#### Option 3: Pre-built x86-64 linux statically compiled executable\n\nIf you're on an x86-64 system, you can download the binary and use it without any installation. \n\n```sh\nwget https://github.com/bluenote-1577/sylph/releases/download/latest/sylph\nchmod +x sylph\n./sylph -h\n```\n\nNote: the binary is compiled with a different set of libraries (musl instead of glibc), probably impacting performance. \n\n## Tutorials, manuals, and pre-built databases\n\n### [Pre-built databases](https://github.com/bluenote-1577/sylph/wiki/Pre%E2%80%90built-databases)\n\nThe pre-built databases [available here](https://github.com/bluenote-1577/sylph/wiki/Pre%E2%80%90built-databases) can be downloaded and used with sylph for profiling and containment querying. \n\n### [Cookbook](https://github.com/bluenote-1577/sylph/wiki/sylph-cookbook)\n\nFor common use cases and fast explanations, see the above [cookbook](https://github.com/bluenote-1577/sylph/wiki/sylph-cookbook).\n\n### Tutorials\n1. #### [Introduction: 5-minute sylph tutorial outlining basic usage](https://github.com/bluenote-1577/sylph/wiki/5%E2%80%90minute-sylph-tutorial)\n2. #### [Taxonomic profiling against GTDB database with MetaPhlAn output format](https://github.com/bluenote-1577/sylph/wiki/Taxonomic-profiling-with-the-GTDB%E2%80%90R214-database)\n"
      },
      "source": "https://raw.githubusercontent.com/bluenote-1577/sylph/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Manuals",
        "parent_header": [
          "sylph - fast and precise species-level metagenomic profiling with ANIs",
          "Tutorials, manuals, and pre-built databases"
        ],
        "type": "Text_excerpt",
        "value": "1. #### [Output format (TSV) and containment ANI explanation](https://github.com/bluenote-1577/sylph/wiki/Output-format)\n2. #### [Incoporating custom taxonomies to get CAMI-like or MetaPhlAn-like outputs](https://github.com/bluenote-1577/sylph/wiki/Integrating-taxonomic-information-with-sylph)\n\n### [sylph-utils](https://github.com/bluenote-1577/sylph-utils) \n\nFor incorporating taxonomy and manipulating output formats, see the [sylph-utils repository](https://github.com/bluenote-1577/sylph-utils).\n\n## Changelog\n\n#### Version v0.6.1 - 2024-04-29. \n\n* Made unknown estimation (-u) more robust for low-depth short-read sequencing. \n\nSee the [CHANGELOG](https://github.com/bluenote-1577/sylph/blob/main/CHANGELOG.md) for complete details.\n\n## Citing sylph\n\nJim Shaw and Yun William Yu. Metagenome profiling and containment estimation through abundance-corrected k-mer sketching with sylph (2023). bioRxiv. (Accepted for publication)\n\n"
      },
      "source": "https://raw.githubusercontent.com/bluenote-1577/sylph/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "<a href=\"https://github.com/bluenote-1577/sylph/wiki/Output-format\">Output format (TSV) and containment ANI explanation</a>",
        "parent_header": [
          "sylph - fast and precise species-level metagenomic profiling with ANIs",
          "Tutorials, manuals, and pre-built databases",
          "Manuals"
        ],
        "type": "Text_excerpt",
        "value": "# sylph - fast and precise species-level metagenomic profiling with ANIs \n\n## Introduction\n\n**sylph** is a program that performs ultrafast (1) **ANI querying** or (2) **metagenomic profiling** for metagenomic shotgun samples. \n\n**Containment ANI querying**: sylph can search a genome, e.g. E. coli, against your sample. If sylph outputs an estimate of 97% ANI, your sample contains an E. coli with 97% ANI to the queried genome.\n\n**Metagenomic profiling**: sylph can determine the species/taxa in your sample and their abundances, just like [Kraken](https://ccb.jhu.edu/software/kraken/) or [MetaPhlAn](https://github.com/biobakery/MetaPhlAn).\n\n<p align=\"center\"><img src=\"assets/sylph.gif?raw=true\"/></p>\n<p align=\"center\">\n   <i>\n   Profiling 1 Gbp of mouse gut reads against 85,205 genomes in a few seconds \n   </i>\n</p>\n\n\n### Why sylph?\n\n1. **Precise species-level profiling**: Our tests show that sylph has less false positives than Kraken and is about as precise and sensitive as marker gene methods (MetaPhlAn, mOTUs). \n\n2. **Ultrafast, multithreaded, multi-sample**: sylph can be > 50x faster than other methods for multi-sample processing. sylph only takes ~15GB of RAM for profiling against the entire GTDB-R220 database (110k genomes).\n\n3. **Accurate (containment) ANIs down to 0.1x effective coverage**: for bacterial ANI queries of > 90% ANI, sylph can often give accurate ANI estimates down to 0.1x coverage.\n\n4. **Customizable, versatile**: sylph can profile against [metagenome-assembled genomes (MAGs), viruses, eukaryotes](https://github.com/bluenote-1577/sylph/wiki/Pre%E2%80%90built-databases), and custom databases. **Long reads work too.** Taxonomic information can be incorporated downstream for traditional profiling reports. \n\n### How does sylph work?\n\nsylph uses a k-mer containment method. sylph's novelty lies in **using a statistical technique to correct ANI for low coverage genomes** , giving accurate results for low abundance genomes. See [here for more information on what sylph can and can not do](https://github.com/bluenote-1577/sylph/wiki/Introduction:-what-is-sylph-and-how-does-it-work%3F). \n\n## Very quick start\n\n#### Profile metagenome sample against [GTDB-R220](https://gtdb.ecogenomic.org/) (113,104 bacterial/archaeal species representative genomes) \n\n```sh\nconda install -c bioconda sylph\n\n# download GTDB-R220 pre-built database (~13 GB)\nwget http://faust.compbio.cs.cmu.edu/sylph-stuff/gtdb-r220-c200-dbv1.syldb\n\n# multi-sample paired-end profiling (sylph version >= 0.6)\nsylph profile gtdb-r220-c200-dbv1.syldb -1 *_1.fastq.gz -2 *_2.fastq.gz -t (threads) > profiling.tsv\n\n# multi-sample single-end profiling\nsylph profile gtdb-r220-c200-dbv1.syldb *.fastq -t (threads) > profiling.tsv\n```\n\n##  Install (current version v0.6.1)\n\n#### Option 1: conda install \n[![Anaconda-Server Badge](https://anaconda.org/bioconda/sylph/badges/version.svg)](https://anaconda.org/bioconda/sylph)\n[![Anaconda-Server Badge](https://anaconda.org/bioconda/sylph/badges/latest_release_date.svg)](https://anaconda.org/bioconda/sylph)\n\n```sh\nconda install -c bioconda sylph\n```\n\n> [!WARNING]\n> conda install may break if AVX2 instructions are not available on your CPU. See the [issue here](https://github.com/bluenote-1577/sylph/issues/2). The binary and source install still work. \n\n#### Option 2: Build from source\n\nRequirements:\n1. [rust](https://www.rust-lang.org/tools/install) (version > 1.63) programming language and associated tools such as cargo are required and assumed to be in PATH.\n2. A c compiler (e.g. GCC)\n3. make\n4. cmake\n\nBuilding takes a few minutes (depending on # of cores).\n\n```sh\ngit clone https://github.com/bluenote-1577/sylph\ncd sylph\n\n# If default rust install directory is ~/.cargo\ncargo install --path . --root ~/.cargo\nsylph query test_files/*\n```\n#### Option 3: Pre-built x86-64 linux statically compiled executable\n\nIf you're on an x86-64 system, you can download the binary and use it without any installation. \n\n```sh\nwget https://github.com/bluenote-1577/sylph/releases/download/latest/sylph\nchmod +x sylph\n./sylph -h\n```\n\nNote: the binary is compiled with a different set of libraries (musl instead of glibc), probably impacting performance. \n\n## Tutorials, manuals, and pre-built databases\n\n### [Pre-built databases](https://github.com/bluenote-1577/sylph/wiki/Pre%E2%80%90built-databases)\n\nThe pre-built databases [available here](https://github.com/bluenote-1577/sylph/wiki/Pre%E2%80%90built-databases) can be downloaded and used with sylph for profiling and containment querying. \n\n### [Cookbook](https://github.com/bluenote-1577/sylph/wiki/sylph-cookbook)\n\nFor common use cases and fast explanations, see the above [cookbook](https://github.com/bluenote-1577/sylph/wiki/sylph-cookbook).\n\n### Tutorials\n1. #### [Introduction: 5-minute sylph tutorial outlining basic usage](https://github.com/bluenote-1577/sylph/wiki/5%E2%80%90minute-sylph-tutorial)\n2. #### [Taxonomic profiling against GTDB database with MetaPhlAn output format](https://github.com/bluenote-1577/sylph/wiki/Taxonomic-profiling-with-the-GTDB%E2%80%90R214-database)\n\n### Manuals\n1. #### [Output format (TSV) and containment ANI explanation](https://github.com/bluenote-1577/sylph/wiki/Output-format)\n2. #### [Incoporating custom taxonomies to get CAMI-like or MetaPhlAn-like outputs](https://github.com/bluenote-1577/sylph/wiki/Integrating-taxonomic-information-with-sylph)\n\n### [sylph-utils](https://github.com/bluenote-1577/sylph-utils) \n\nFor incorporating taxonomy and manipulating output formats, see the [sylph-utils repository](https://github.com/bluenote-1577/sylph-utils).\n\n## Changelog\n\n#### Version v0.6.1 - 2024-04-29. \n\n* Made unknown estimation (-u) more robust for low-depth short-read sequencing. \n\nSee the [CHANGELOG](https://github.com/bluenote-1577/sylph/blob/main/CHANGELOG.md) for complete details.\n\n## Citing sylph\n\nJim Shaw and Yun William Yu. Metagenome profiling and containment estimation through abundance-corrected k-mer sketching with sylph (2023). bioRxiv. (Accepted for publication)\n\n"
      },
      "source": "https://raw.githubusercontent.com/bluenote-1577/sylph/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "<a href=\"https://github.com/bluenote-1577/sylph-utils\">sylph-utils</a>",
        "parent_header": [
          "sylph - fast and precise species-level metagenomic profiling with ANIs",
          "Tutorials, manuals, and pre-built databases"
        ],
        "type": "Text_excerpt",
        "value": "For incorporating taxonomy and manipulating output formats, see the [sylph-utils repository](https://github.com/bluenote-1577/sylph-utils).\n"
      },
      "source": "https://raw.githubusercontent.com/bluenote-1577/sylph/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/bluenote-1577/sylph/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "average-nucleotide-identity, k-mer, metagenomics, sketching-algorithm, taxonomic-classification"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2023 Jim Shaw\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/bluenote-1577/sylph/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bluenote-1577/sylph/main/assets/sylph.gif?raw=true"
      },
      "source": "https://raw.githubusercontent.com/bluenote-1577/sylph/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "sylph"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "bluenote-1577"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Rust",
        "size": 127796,
        "type": "Programming_language",
        "value": "Rust"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bluenote-1577/sylph/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "bluenote-1577",
          "type": "User"
        },
        "date_created": "2024-04-29T14:42:49Z",
        "date_published": "2024-04-29T14:44:26Z",
        "description": "# 2024-04-09\r\n\r\n* Made -u estimation with short-reads slightly more robust. See CHANGELOG. \r\n* v0.6.0 has a conda install issue. Hopefully v0.6.1 fixes... ",
        "html_url": "https://github.com/bluenote-1577/sylph/releases/tag/v0.6.1",
        "name": "v0.6.1",
        "release_id": 153272918,
        "tag": "v0.6.1",
        "tarball_url": "https://api.github.com/repos/bluenote-1577/sylph/tarball/v0.6.1",
        "type": "Release",
        "url": "https://api.github.com/repos/bluenote-1577/sylph/releases/153272918",
        "value": "https://api.github.com/repos/bluenote-1577/sylph/releases/153272918",
        "zipball_url": "https://api.github.com/repos/bluenote-1577/sylph/zipball/v0.6.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2024-04-29T14:42:49Z",
        "date_published": "2024-04-29T14:46:14Z",
        "description": "## Commits\n- d0d44f9: Update README.md (Jim Shaw)\n- 62a32f1: Update README.md (Jim Shaw)\n- ca28402: Update README.md (Jim Shaw)\n- f57e486: Update README.md (Jim Shaw)\n- 8158e6c: v0.6.1 initial - refactored some code and added automatic diversity detection for estimating identity (bluenote-1577)\n- 5db2d41: Update README.md (Jim Shaw)\n- 14d3580: Update README.md (Jim Shaw)\n- cc39ba4: Update README.md (Jim Shaw)\n- a931df9: Update README.md (Jim Shaw)\n- 83409c2: Update README.md (Jim Shaw)\n- 02232c7: v0.6.1 fixed bug with -I. pushing now to try and fix conda... (bluenote-1577)\n- 41a4a50: Merge branch 'main' of https://github.com/bluenote-1577/sylph (bluenote-1577)\n- 2c75d89: README (bluenote-1577)",
        "html_url": "https://github.com/bluenote-1577/sylph/releases/tag/latest",
        "name": "latest",
        "release_id": 153273240,
        "tag": "latest",
        "tarball_url": "https://api.github.com/repos/bluenote-1577/sylph/tarball/latest",
        "type": "Release",
        "url": "https://api.github.com/repos/bluenote-1577/sylph/releases/153273240",
        "value": "https://api.github.com/repos/bluenote-1577/sylph/releases/153273240",
        "zipball_url": "https://api.github.com/repos/bluenote-1577/sylph/zipball/latest"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "bluenote-1577",
          "type": "User"
        },
        "date_created": "2024-04-06T21:26:39Z",
        "date_published": "2024-04-06T21:27:35Z",
        "description": "## sylph v0.6.0 release: New output column, lazy raw paired fastq profiling: 2024-04-06 \r\n\r\n### Major\r\n\r\n* A new column called `kmers_reassigned` is now in the profile output. This states how many k-mers are lost due to reassignment for that particular genome. \r\n* `-1, -2` options are now available for `sylph profile`. You can now do `sylph profile database.syldb -1 1.fq -2 2.fq ...`",
        "html_url": "https://github.com/bluenote-1577/sylph/releases/tag/v0.6.0",
        "name": "v0.6.0",
        "release_id": 150069367,
        "tag": "v0.6.0",
        "tarball_url": "https://api.github.com/repos/bluenote-1577/sylph/tarball/v0.6.0",
        "type": "Release",
        "url": "https://api.github.com/repos/bluenote-1577/sylph/releases/150069367",
        "value": "https://api.github.com/repos/bluenote-1577/sylph/releases/150069367",
        "zipball_url": "https://api.github.com/repos/bluenote-1577/sylph/zipball/v0.6.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "bluenote-1577",
          "type": "User"
        },
        "date_created": "2023-12-27T22:04:02Z",
        "date_published": "2023-12-27T22:04:59Z",
        "description": "## sylph v0.5.1 release: **Memory improvement and bug fixes** : Dec 27 2023\r\n\r\n### Major\r\n\r\n* Scalable cuckoo filters are now used for read deduplication for memory savings. \r\n* Deduplication algorithm improved. **v0.5.0 worked poorly on highly (>15%) duplicated read sets. **\r\n* Shorter reads can be sketched now. Down to 32bp instead of 63 bp before.\r\n",
        "html_url": "https://github.com/bluenote-1577/sylph/releases/tag/v0.5.1",
        "name": "v0.5.1",
        "release_id": 135223808,
        "tag": "v0.5.1",
        "tarball_url": "https://api.github.com/repos/bluenote-1577/sylph/tarball/v0.5.1",
        "type": "Release",
        "url": "https://api.github.com/repos/bluenote-1577/sylph/releases/135223808",
        "value": "https://api.github.com/repos/bluenote-1577/sylph/releases/135223808",
        "zipball_url": "https://api.github.com/repos/bluenote-1577/sylph/zipball/v0.5.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "bluenote-1577",
          "type": "User"
        },
        "date_created": "2023-12-23T22:43:58Z",
        "date_published": "2023-12-23T22:46:35Z",
        "description": "## sylph v0.5.0 release: **Big improvements on real illumina data** : Dec 23 2023 \r\n\r\n### Major\r\n\r\n**In previous versions, sylph was underperforming on real illumina data sets**. See https://github.com/bluenote-1577/sylph/issues/5 \r\n\r\nThis is because many real illumina datasets have a non-trivial number of duplicate reads. Duplicate reads mess up sylph's statistical model.\r\n\r\nFor the single and paired sketching options, a new deduplication routine has been added. This will be described in version 2 of our preprint. \r\n\r\n**This increases sketching memory by 3-4x but greatly increases performance on real datasets with > 1-2% of duplication, especially for low-abundance genomes**. \r\n\r\nFor paired-end illumina reads with non-trivial (> 1% duplication), sylph can now \r\n\r\n1. detect up to many more species low-abundance species below 0.3x coverage\r\n2. give better coverage/abundance estimates for low-abundance species \r\n\r\n### BREAKING\r\n\r\n- sequence sketches (sylsp) have changed formats. Sequences will need to be re-sketched.\r\n- `--read-length` option removed and incorporated into the sketches by default. (suggested by @fplaza)\r\n\r\n### Other changes\r\n\r\n- New warning when `-o` specified and only reads are sketched (https://github.com/bluenote-1577/sylph/issues/7)\r\n- You can now rename sylph samples by specifing a sample naming file with `--sample-names` or `--lS` (suggested by @jolespin)\r\n- Newline delimited files are available in `profile` and `query` now (suggested by @jolespin)\r\n",
        "html_url": "https://github.com/bluenote-1577/sylph/releases/tag/v0.5.0",
        "name": "v0.5.0",
        "release_id": 134992504,
        "tag": "v0.5.0",
        "tarball_url": "https://api.github.com/repos/bluenote-1577/sylph/tarball/v0.5.0",
        "type": "Release",
        "url": "https://api.github.com/repos/bluenote-1577/sylph/releases/134992504",
        "value": "https://api.github.com/repos/bluenote-1577/sylph/releases/134992504",
        "zipball_url": "https://api.github.com/repos/bluenote-1577/sylph/zipball/v0.5.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "bluenote-1577",
          "type": "User"
        },
        "date_created": "2023-11-15T13:45:30Z",
        "date_published": "2023-11-15T13:46:18Z",
        "description": "## sylph v0.4.1 - getting ready for preprinting\r\n\r\n### MINOR\r\n- A few minor changes to help texts and options. Also fixed versioning issue. ",
        "html_url": "https://github.com/bluenote-1577/sylph/releases/tag/v0.4.1",
        "name": "v0.4.1",
        "release_id": 129550798,
        "tag": "v0.4.1",
        "tarball_url": "https://api.github.com/repos/bluenote-1577/sylph/tarball/v0.4.1",
        "type": "Release",
        "url": "https://api.github.com/repos/bluenote-1577/sylph/releases/129550798",
        "value": "https://api.github.com/repos/bluenote-1577/sylph/releases/129550798",
        "zipball_url": "https://api.github.com/repos/bluenote-1577/sylph/zipball/v0.4.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "bluenote-1577",
          "type": "User"
        },
        "date_created": "2023-11-05T11:29:24Z",
        "date_published": "2023-11-05T11:31:01Z",
        "description": "## sylph v0.4.0 release: major interface changes\r\n\r\n### BREAKING\r\n\r\n- renamed `sylph contain` to `sylph query`. \r\n- methods for sketching are drastically different now. E.g. we use `-g genome1.fa genom2.fa` for specifying genomes and `-r read1.fa read2.fq` for specifying reads when sketching. \r\n\r\n### Major\r\n\r\n- `-u` or `--estimate-unknown` options are now present for estimating unknown organisms in the sample. \r\n- When using `-u`, associated options `--read-seq-id` and `--read-len` are available for calculating true coverages with sylph, i.e., coverages concordant with read mapping\r\n\r\n### Minor\r\n\r\n- Coverage calculation is slightly different now.",
        "html_url": "https://github.com/bluenote-1577/sylph/releases/tag/v0.4.0",
        "name": "v0.4.0",
        "release_id": 128024693,
        "tag": "v0.4.0",
        "tarball_url": "https://api.github.com/repos/bluenote-1577/sylph/tarball/v0.4.0",
        "type": "Release",
        "url": "https://api.github.com/repos/bluenote-1577/sylph/releases/128024693",
        "value": "https://api.github.com/repos/bluenote-1577/sylph/releases/128024693",
        "zipball_url": "https://api.github.com/repos/bluenote-1577/sylph/zipball/v0.4.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "bluenote-1577",
          "type": "User"
        },
        "date_created": "2023-10-01T08:44:29Z",
        "date_published": "2023-10-01T08:47:05Z",
        "description": "## sylph v0.3.0 release: first class support for pseudotax, now called \"profile\" - 2023-10-01\r\n\r\nContinuing development of sylph taxonomic profiling. \r\n\r\n### BREAKING\r\n\r\n- `--pseudotax` option in previous version is now a new command called `profile`.\r\n- Databases are enabled for profiling by default. \r\n- Changed file suffices to `syldb` and `sylsp`.\r\n\r\n### Major\r\n- Default parameter changes. --min-spacing is set to 30 now. \r\n- Made profiling faster with some algorithmic tweaks. \r\n- Coverage calculated slightly differently\r\n- Many small software changes with respect to threading and outputs",
        "html_url": "https://github.com/bluenote-1577/sylph/releases/tag/v0.3.0",
        "name": "v0.3.0",
        "release_id": 123242008,
        "tag": "v0.3.0",
        "tarball_url": "https://api.github.com/repos/bluenote-1577/sylph/tarball/v0.3.0",
        "type": "Release",
        "url": "https://api.github.com/repos/bluenote-1577/sylph/releases/123242008",
        "value": "https://api.github.com/repos/bluenote-1577/sylph/releases/123242008",
        "zipball_url": "https://api.github.com/repos/bluenote-1577/sylph/zipball/v0.3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "bluenote-1577",
          "type": "User"
        },
        "date_created": "2023-09-18T15:28:16Z",
        "date_published": "2023-09-18T15:30:05Z",
        "description": "## sylph v0.2.0 release: pseudotax improved - 2023-09-19\r\n\r\n### BREAKING\r\n- Sylph's *.sylqueries are no longer compatible with older versions of sylph (< v0.2). Files will need to be resketched. \r\n\r\n### Major\r\n- Fixed a major bug for the `--pseudotax` option that required redesigning file formats. Please use `--enable-pseudotax` when using using `contain --pseudotax` from now on.\r\n- `--pseudotax` option gives relative abundances now. We are gaining some confidence that this approach gives a rough, but surprisingly decent taxonomic classification.  \r\n- Changed how `Eff_cov` is calculated. We just use the median coverage now, except when we apply coverage-adjustment \r\n\r\n### Minor\r\n- Fixed command line ambiguity for sketching outputs. `-s` has been replaced with `-d` for `sylph sketch`.\r\n- Sylph outputs the results after processing every sample, instead of batching results, now\r\n",
        "html_url": "https://github.com/bluenote-1577/sylph/releases/tag/v0.2.0",
        "name": "v0.2.0",
        "release_id": 121556221,
        "tag": "v0.2.0",
        "tarball_url": "https://api.github.com/repos/bluenote-1577/sylph/tarball/v0.2.0",
        "type": "Release",
        "url": "https://api.github.com/repos/bluenote-1577/sylph/releases/121556221",
        "value": "https://api.github.com/repos/bluenote-1577/sylph/releases/121556221",
        "zipball_url": "https://api.github.com/repos/bluenote-1577/sylph/zipball/v0.2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "bluenote-1577",
          "type": "User"
        },
        "date_created": "2023-09-06T11:54:58Z",
        "date_published": "2023-09-07T03:32:04Z",
        "description": "First major release of sylph. See CHANGELOG.md for information. \r\n\r\n",
        "html_url": "https://github.com/bluenote-1577/sylph/releases/tag/v0.1.0",
        "name": "v0.1.0",
        "release_id": 120216309,
        "tag": "v0.1.0",
        "tarball_url": "https://api.github.com/repos/bluenote-1577/sylph/tarball/v0.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/bluenote-1577/sylph/releases/120216309",
        "value": "https://api.github.com/repos/bluenote-1577/sylph/releases/120216309",
        "zipball_url": "https://api.github.com/repos/bluenote-1577/sylph/zipball/v0.1.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "bluenote-1577",
          "type": "User"
        },
        "date_created": "2023-09-01T06:07:45Z",
        "date_published": "2023-09-01T06:10:38Z",
        "description": "Pre-paper release. Changed the memory consumption to be better, added quality of life things (e.g. help messages). ",
        "html_url": "https://github.com/bluenote-1577/sylph/releases/tag/v0.0.3",
        "name": "v0.0.3",
        "release_id": 119552412,
        "tag": "v0.0.3",
        "tarball_url": "https://api.github.com/repos/bluenote-1577/sylph/tarball/v0.0.3",
        "type": "Release",
        "url": "https://api.github.com/repos/bluenote-1577/sylph/releases/119552412",
        "value": "https://api.github.com/repos/bluenote-1577/sylph/releases/119552412",
        "zipball_url": "https://api.github.com/repos/bluenote-1577/sylph/zipball/v0.0.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "bluenote-1577",
          "type": "User"
        },
        "date_created": "2023-07-17T19:59:55Z",
        "date_published": "2023-07-19T18:24:09Z",
        "description": "First official release of sylph. ",
        "html_url": "https://github.com/bluenote-1577/sylph/releases/tag/v0.0.2",
        "name": "v0.0.2",
        "release_id": 112855990,
        "tag": "v0.0.2",
        "tarball_url": "https://api.github.com/repos/bluenote-1577/sylph/tarball/v0.0.2",
        "type": "Release",
        "url": "https://api.github.com/repos/bluenote-1577/sylph/releases/112855990",
        "value": "https://api.github.com/repos/bluenote-1577/sylph/releases/112855990",
        "zipball_url": "https://api.github.com/repos/bluenote-1577/sylph/zipball/v0.0.2"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 01:26:55",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 136
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Profile metagenome sample against <a href=\"https://gtdb.ecogenomic.org/\">GTDB-R220</a> (113,104 bacterial/archaeal species representative genomes)",
        "parent_header": [
          "sylph - fast and precise species-level metagenomic profiling with ANIs",
          "Very quick start"
        ],
        "type": "Text_excerpt",
        "value": "```sh\nconda install -c bioconda sylph\n\n# download GTDB-R220 pre-built database (~13 GB)\nwget http://faust.compbio.cs.cmu.edu/sylph-stuff/gtdb-r220-c200-dbv1.syldb\n\n# multi-sample paired-end profiling (sylph version >= 0.6)\nsylph profile gtdb-r220-c200-dbv1.syldb -1 *_1.fastq.gz -2 *_2.fastq.gz -t (threads) > profiling.tsv\n\n# multi-sample single-end profiling\nsylph profile gtdb-r220-c200-dbv1.syldb *.fastq -t (threads) > profiling.tsv\n```\n"
      },
      "source": "https://raw.githubusercontent.com/bluenote-1577/sylph/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "<a href=\"https://github.com/bluenote-1577/sylph/wiki/Pre%E2%80%90built-databases\">Pre-built databases</a>",
        "parent_header": [
          "sylph - fast and precise species-level metagenomic profiling with ANIs",
          "Tutorials, manuals, and pre-built databases"
        ],
        "type": "Text_excerpt",
        "value": "The pre-built databases [available here](https://github.com/bluenote-1577/sylph/wiki/Pre%E2%80%90built-databases) can be downloaded and used with sylph for profiling and containment querying. \n"
      },
      "source": "https://raw.githubusercontent.com/bluenote-1577/sylph/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "<a href=\"https://github.com/bluenote-1577/sylph/wiki/sylph-cookbook\">Cookbook</a>",
        "parent_header": [
          "sylph - fast and precise species-level metagenomic profiling with ANIs",
          "Tutorials, manuals, and pre-built databases"
        ],
        "type": "Text_excerpt",
        "value": "For common use cases and fast explanations, see the above [cookbook](https://github.com/bluenote-1577/sylph/wiki/sylph-cookbook).\n"
      },
      "source": "https://raw.githubusercontent.com/bluenote-1577/sylph/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Tutorials",
        "parent_header": [
          "sylph - fast and precise species-level metagenomic profiling with ANIs",
          "Tutorials, manuals, and pre-built databases"
        ],
        "type": "Text_excerpt",
        "value": "1. #### [Introduction: 5-minute sylph tutorial outlining basic usage](https://github.com/bluenote-1577/sylph/wiki/5%E2%80%90minute-sylph-tutorial)\n2. #### [Taxonomic profiling against GTDB database with MetaPhlAn output format](https://github.com/bluenote-1577/sylph/wiki/Taxonomic-profiling-with-the-GTDB%E2%80%90R214-database)\n\n### Manuals\n1. #### [Output format (TSV) and containment ANI explanation](https://github.com/bluenote-1577/sylph/wiki/Output-format)\n2. #### [Incoporating custom taxonomies to get CAMI-like or MetaPhlAn-like outputs](https://github.com/bluenote-1577/sylph/wiki/Integrating-taxonomic-information-with-sylph)\n\n### [sylph-utils](https://github.com/bluenote-1577/sylph-utils) \n\nFor incorporating taxonomy and manipulating output formats, see the [sylph-utils repository](https://github.com/bluenote-1577/sylph-utils).\n\n## Changelog\n\n#### Version v0.6.1 - 2024-04-29. \n\n* Made unknown estimation (-u) more robust for low-depth short-read sequencing. \n\nSee the [CHANGELOG](https://github.com/bluenote-1577/sylph/blob/main/CHANGELOG.md) for complete details.\n\n## Citing sylph\n\nJim Shaw and Yun William Yu. Metagenome profiling and containment estimation through abundance-corrected k-mer sketching with sylph (2023). bioRxiv. (Accepted for publication)\n\n"
      },
      "source": "https://raw.githubusercontent.com/bluenote-1577/sylph/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "<a href=\"https://github.com/bluenote-1577/sylph/wiki/5%E2%80%90minute-sylph-tutorial\">Introduction: 5-minute sylph tutorial outlining basic usage</a>",
        "parent_header": [
          "sylph - fast and precise species-level metagenomic profiling with ANIs",
          "Tutorials, manuals, and pre-built databases",
          "Tutorials"
        ],
        "type": "Text_excerpt",
        "value": "# sylph - fast and precise species-level metagenomic profiling with ANIs \n\n## Introduction\n\n**sylph** is a program that performs ultrafast (1) **ANI querying** or (2) **metagenomic profiling** for metagenomic shotgun samples. \n\n**Containment ANI querying**: sylph can search a genome, e.g. E. coli, against your sample. If sylph outputs an estimate of 97% ANI, your sample contains an E. coli with 97% ANI to the queried genome.\n\n**Metagenomic profiling**: sylph can determine the species/taxa in your sample and their abundances, just like [Kraken](https://ccb.jhu.edu/software/kraken/) or [MetaPhlAn](https://github.com/biobakery/MetaPhlAn).\n\n<p align=\"center\"><img src=\"assets/sylph.gif?raw=true\"/></p>\n<p align=\"center\">\n   <i>\n   Profiling 1 Gbp of mouse gut reads against 85,205 genomes in a few seconds \n   </i>\n</p>\n\n\n### Why sylph?\n\n1. **Precise species-level profiling**: Our tests show that sylph has less false positives than Kraken and is about as precise and sensitive as marker gene methods (MetaPhlAn, mOTUs). \n\n2. **Ultrafast, multithreaded, multi-sample**: sylph can be > 50x faster than other methods for multi-sample processing. sylph only takes ~15GB of RAM for profiling against the entire GTDB-R220 database (110k genomes).\n\n3. **Accurate (containment) ANIs down to 0.1x effective coverage**: for bacterial ANI queries of > 90% ANI, sylph can often give accurate ANI estimates down to 0.1x coverage.\n\n4. **Customizable, versatile**: sylph can profile against [metagenome-assembled genomes (MAGs), viruses, eukaryotes](https://github.com/bluenote-1577/sylph/wiki/Pre%E2%80%90built-databases), and custom databases. **Long reads work too.** Taxonomic information can be incorporated downstream for traditional profiling reports. \n\n### How does sylph work?\n\nsylph uses a k-mer containment method. sylph's novelty lies in **using a statistical technique to correct ANI for low coverage genomes** , giving accurate results for low abundance genomes. See [here for more information on what sylph can and can not do](https://github.com/bluenote-1577/sylph/wiki/Introduction:-what-is-sylph-and-how-does-it-work%3F). \n\n## Very quick start\n\n#### Profile metagenome sample against [GTDB-R220](https://gtdb.ecogenomic.org/) (113,104 bacterial/archaeal species representative genomes) \n\n```sh\nconda install -c bioconda sylph\n\n# download GTDB-R220 pre-built database (~13 GB)\nwget http://faust.compbio.cs.cmu.edu/sylph-stuff/gtdb-r220-c200-dbv1.syldb\n\n# multi-sample paired-end profiling (sylph version >= 0.6)\nsylph profile gtdb-r220-c200-dbv1.syldb -1 *_1.fastq.gz -2 *_2.fastq.gz -t (threads) > profiling.tsv\n\n# multi-sample single-end profiling\nsylph profile gtdb-r220-c200-dbv1.syldb *.fastq -t (threads) > profiling.tsv\n```\n\n##  Install (current version v0.6.1)\n\n#### Option 1: conda install \n[![Anaconda-Server Badge](https://anaconda.org/bioconda/sylph/badges/version.svg)](https://anaconda.org/bioconda/sylph)\n[![Anaconda-Server Badge](https://anaconda.org/bioconda/sylph/badges/latest_release_date.svg)](https://anaconda.org/bioconda/sylph)\n\n```sh\nconda install -c bioconda sylph\n```\n\n> [!WARNING]\n> conda install may break if AVX2 instructions are not available on your CPU. See the [issue here](https://github.com/bluenote-1577/sylph/issues/2). The binary and source install still work. \n\n#### Option 2: Build from source\n\nRequirements:\n1. [rust](https://www.rust-lang.org/tools/install) (version > 1.63) programming language and associated tools such as cargo are required and assumed to be in PATH.\n2. A c compiler (e.g. GCC)\n3. make\n4. cmake\n\nBuilding takes a few minutes (depending on # of cores).\n\n```sh\ngit clone https://github.com/bluenote-1577/sylph\ncd sylph\n\n# If default rust install directory is ~/.cargo\ncargo install --path . --root ~/.cargo\nsylph query test_files/*\n```\n#### Option 3: Pre-built x86-64 linux statically compiled executable\n\nIf you're on an x86-64 system, you can download the binary and use it without any installation. \n\n```sh\nwget https://github.com/bluenote-1577/sylph/releases/download/latest/sylph\nchmod +x sylph\n./sylph -h\n```\n\nNote: the binary is compiled with a different set of libraries (musl instead of glibc), probably impacting performance. \n\n## Tutorials, manuals, and pre-built databases\n\n### [Pre-built databases](https://github.com/bluenote-1577/sylph/wiki/Pre%E2%80%90built-databases)\n\nThe pre-built databases [available here](https://github.com/bluenote-1577/sylph/wiki/Pre%E2%80%90built-databases) can be downloaded and used with sylph for profiling and containment querying. \n\n### [Cookbook](https://github.com/bluenote-1577/sylph/wiki/sylph-cookbook)\n\nFor common use cases and fast explanations, see the above [cookbook](https://github.com/bluenote-1577/sylph/wiki/sylph-cookbook).\n\n### Tutorials\n1. #### [Introduction: 5-minute sylph tutorial outlining basic usage](https://github.com/bluenote-1577/sylph/wiki/5%E2%80%90minute-sylph-tutorial)\n2. #### [Taxonomic profiling against GTDB database with MetaPhlAn output format](https://github.com/bluenote-1577/sylph/wiki/Taxonomic-profiling-with-the-GTDB%E2%80%90R214-database)\n\n### Manuals\n1. #### [Output format (TSV) and containment ANI explanation](https://github.com/bluenote-1577/sylph/wiki/Output-format)\n2. #### [Incoporating custom taxonomies to get CAMI-like or MetaPhlAn-like outputs](https://github.com/bluenote-1577/sylph/wiki/Integrating-taxonomic-information-with-sylph)\n\n### [sylph-utils](https://github.com/bluenote-1577/sylph-utils) \n\nFor incorporating taxonomy and manipulating output formats, see the [sylph-utils repository](https://github.com/bluenote-1577/sylph-utils).\n\n## Changelog\n\n#### Version v0.6.1 - 2024-04-29. \n\n* Made unknown estimation (-u) more robust for low-depth short-read sequencing. \n\nSee the [CHANGELOG](https://github.com/bluenote-1577/sylph/blob/main/CHANGELOG.md) for complete details.\n\n## Citing sylph\n\nJim Shaw and Yun William Yu. Metagenome profiling and containment estimation through abundance-corrected k-mer sketching with sylph (2023). bioRxiv. (Accepted for publication)\n\n"
      },
      "source": "https://raw.githubusercontent.com/bluenote-1577/sylph/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "<a href=\"https://github.com/bluenote-1577/sylph/wiki/Taxonomic-profiling-with-the-GTDB%E2%80%90R214-database\">Taxonomic profiling against GTDB database with MetaPhlAn output format</a>",
        "parent_header": [
          "sylph - fast and precise species-level metagenomic profiling with ANIs",
          "Tutorials, manuals, and pre-built databases",
          "Tutorials"
        ],
        "type": "Text_excerpt",
        "value": "# sylph - fast and precise species-level metagenomic profiling with ANIs \n\n## Introduction\n\n**sylph** is a program that performs ultrafast (1) **ANI querying** or (2) **metagenomic profiling** for metagenomic shotgun samples. \n\n**Containment ANI querying**: sylph can search a genome, e.g. E. coli, against your sample. If sylph outputs an estimate of 97% ANI, your sample contains an E. coli with 97% ANI to the queried genome.\n\n**Metagenomic profiling**: sylph can determine the species/taxa in your sample and their abundances, just like [Kraken](https://ccb.jhu.edu/software/kraken/) or [MetaPhlAn](https://github.com/biobakery/MetaPhlAn).\n\n<p align=\"center\"><img src=\"assets/sylph.gif?raw=true\"/></p>\n<p align=\"center\">\n   <i>\n   Profiling 1 Gbp of mouse gut reads against 85,205 genomes in a few seconds \n   </i>\n</p>\n\n\n### Why sylph?\n\n1. **Precise species-level profiling**: Our tests show that sylph has less false positives than Kraken and is about as precise and sensitive as marker gene methods (MetaPhlAn, mOTUs). \n\n2. **Ultrafast, multithreaded, multi-sample**: sylph can be > 50x faster than other methods for multi-sample processing. sylph only takes ~15GB of RAM for profiling against the entire GTDB-R220 database (110k genomes).\n\n3. **Accurate (containment) ANIs down to 0.1x effective coverage**: for bacterial ANI queries of > 90% ANI, sylph can often give accurate ANI estimates down to 0.1x coverage.\n\n4. **Customizable, versatile**: sylph can profile against [metagenome-assembled genomes (MAGs), viruses, eukaryotes](https://github.com/bluenote-1577/sylph/wiki/Pre%E2%80%90built-databases), and custom databases. **Long reads work too.** Taxonomic information can be incorporated downstream for traditional profiling reports. \n\n### How does sylph work?\n\nsylph uses a k-mer containment method. sylph's novelty lies in **using a statistical technique to correct ANI for low coverage genomes** , giving accurate results for low abundance genomes. See [here for more information on what sylph can and can not do](https://github.com/bluenote-1577/sylph/wiki/Introduction:-what-is-sylph-and-how-does-it-work%3F). \n\n## Very quick start\n\n#### Profile metagenome sample against [GTDB-R220](https://gtdb.ecogenomic.org/) (113,104 bacterial/archaeal species representative genomes) \n\n```sh\nconda install -c bioconda sylph\n\n# download GTDB-R220 pre-built database (~13 GB)\nwget http://faust.compbio.cs.cmu.edu/sylph-stuff/gtdb-r220-c200-dbv1.syldb\n\n# multi-sample paired-end profiling (sylph version >= 0.6)\nsylph profile gtdb-r220-c200-dbv1.syldb -1 *_1.fastq.gz -2 *_2.fastq.gz -t (threads) > profiling.tsv\n\n# multi-sample single-end profiling\nsylph profile gtdb-r220-c200-dbv1.syldb *.fastq -t (threads) > profiling.tsv\n```\n\n##  Install (current version v0.6.1)\n\n#### Option 1: conda install \n[![Anaconda-Server Badge](https://anaconda.org/bioconda/sylph/badges/version.svg)](https://anaconda.org/bioconda/sylph)\n[![Anaconda-Server Badge](https://anaconda.org/bioconda/sylph/badges/latest_release_date.svg)](https://anaconda.org/bioconda/sylph)\n\n```sh\nconda install -c bioconda sylph\n```\n\n> [!WARNING]\n> conda install may break if AVX2 instructions are not available on your CPU. See the [issue here](https://github.com/bluenote-1577/sylph/issues/2). The binary and source install still work. \n\n#### Option 2: Build from source\n\nRequirements:\n1. [rust](https://www.rust-lang.org/tools/install) (version > 1.63) programming language and associated tools such as cargo are required and assumed to be in PATH.\n2. A c compiler (e.g. GCC)\n3. make\n4. cmake\n\nBuilding takes a few minutes (depending on # of cores).\n\n```sh\ngit clone https://github.com/bluenote-1577/sylph\ncd sylph\n\n# If default rust install directory is ~/.cargo\ncargo install --path . --root ~/.cargo\nsylph query test_files/*\n```\n#### Option 3: Pre-built x86-64 linux statically compiled executable\n\nIf you're on an x86-64 system, you can download the binary and use it without any installation. \n\n```sh\nwget https://github.com/bluenote-1577/sylph/releases/download/latest/sylph\nchmod +x sylph\n./sylph -h\n```\n\nNote: the binary is compiled with a different set of libraries (musl instead of glibc), probably impacting performance. \n\n## Tutorials, manuals, and pre-built databases\n\n### [Pre-built databases](https://github.com/bluenote-1577/sylph/wiki/Pre%E2%80%90built-databases)\n\nThe pre-built databases [available here](https://github.com/bluenote-1577/sylph/wiki/Pre%E2%80%90built-databases) can be downloaded and used with sylph for profiling and containment querying. \n\n### [Cookbook](https://github.com/bluenote-1577/sylph/wiki/sylph-cookbook)\n\nFor common use cases and fast explanations, see the above [cookbook](https://github.com/bluenote-1577/sylph/wiki/sylph-cookbook).\n\n### Tutorials\n1. #### [Introduction: 5-minute sylph tutorial outlining basic usage](https://github.com/bluenote-1577/sylph/wiki/5%E2%80%90minute-sylph-tutorial)\n2. #### [Taxonomic profiling against GTDB database with MetaPhlAn output format](https://github.com/bluenote-1577/sylph/wiki/Taxonomic-profiling-with-the-GTDB%E2%80%90R214-database)\n"
      },
      "source": "https://raw.githubusercontent.com/bluenote-1577/sylph/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "<a href=\"https://github.com/bluenote-1577/sylph/wiki/Output-format\">Output format (TSV) and containment ANI explanation</a>",
        "parent_header": [
          "sylph - fast and precise species-level metagenomic profiling with ANIs",
          "Tutorials, manuals, and pre-built databases",
          "Manuals"
        ],
        "type": "Text_excerpt",
        "value": "# sylph - fast and precise species-level metagenomic profiling with ANIs \n\n## Introduction\n\n**sylph** is a program that performs ultrafast (1) **ANI querying** or (2) **metagenomic profiling** for metagenomic shotgun samples. \n\n**Containment ANI querying**: sylph can search a genome, e.g. E. coli, against your sample. If sylph outputs an estimate of 97% ANI, your sample contains an E. coli with 97% ANI to the queried genome.\n\n**Metagenomic profiling**: sylph can determine the species/taxa in your sample and their abundances, just like [Kraken](https://ccb.jhu.edu/software/kraken/) or [MetaPhlAn](https://github.com/biobakery/MetaPhlAn).\n\n<p align=\"center\"><img src=\"assets/sylph.gif?raw=true\"/></p>\n<p align=\"center\">\n   <i>\n   Profiling 1 Gbp of mouse gut reads against 85,205 genomes in a few seconds \n   </i>\n</p>\n\n\n### Why sylph?\n\n1. **Precise species-level profiling**: Our tests show that sylph has less false positives than Kraken and is about as precise and sensitive as marker gene methods (MetaPhlAn, mOTUs). \n\n2. **Ultrafast, multithreaded, multi-sample**: sylph can be > 50x faster than other methods for multi-sample processing. sylph only takes ~15GB of RAM for profiling against the entire GTDB-R220 database (110k genomes).\n\n3. **Accurate (containment) ANIs down to 0.1x effective coverage**: for bacterial ANI queries of > 90% ANI, sylph can often give accurate ANI estimates down to 0.1x coverage.\n\n4. **Customizable, versatile**: sylph can profile against [metagenome-assembled genomes (MAGs), viruses, eukaryotes](https://github.com/bluenote-1577/sylph/wiki/Pre%E2%80%90built-databases), and custom databases. **Long reads work too.** Taxonomic information can be incorporated downstream for traditional profiling reports. \n\n### How does sylph work?\n\nsylph uses a k-mer containment method. sylph's novelty lies in **using a statistical technique to correct ANI for low coverage genomes** , giving accurate results for low abundance genomes. See [here for more information on what sylph can and can not do](https://github.com/bluenote-1577/sylph/wiki/Introduction:-what-is-sylph-and-how-does-it-work%3F). \n\n## Very quick start\n\n#### Profile metagenome sample against [GTDB-R220](https://gtdb.ecogenomic.org/) (113,104 bacterial/archaeal species representative genomes) \n\n```sh\nconda install -c bioconda sylph\n\n# download GTDB-R220 pre-built database (~13 GB)\nwget http://faust.compbio.cs.cmu.edu/sylph-stuff/gtdb-r220-c200-dbv1.syldb\n\n# multi-sample paired-end profiling (sylph version >= 0.6)\nsylph profile gtdb-r220-c200-dbv1.syldb -1 *_1.fastq.gz -2 *_2.fastq.gz -t (threads) > profiling.tsv\n\n# multi-sample single-end profiling\nsylph profile gtdb-r220-c200-dbv1.syldb *.fastq -t (threads) > profiling.tsv\n```\n\n##  Install (current version v0.6.1)\n\n#### Option 1: conda install \n[![Anaconda-Server Badge](https://anaconda.org/bioconda/sylph/badges/version.svg)](https://anaconda.org/bioconda/sylph)\n[![Anaconda-Server Badge](https://anaconda.org/bioconda/sylph/badges/latest_release_date.svg)](https://anaconda.org/bioconda/sylph)\n\n```sh\nconda install -c bioconda sylph\n```\n\n> [!WARNING]\n> conda install may break if AVX2 instructions are not available on your CPU. See the [issue here](https://github.com/bluenote-1577/sylph/issues/2). The binary and source install still work. \n\n#### Option 2: Build from source\n\nRequirements:\n1. [rust](https://www.rust-lang.org/tools/install) (version > 1.63) programming language and associated tools such as cargo are required and assumed to be in PATH.\n2. A c compiler (e.g. GCC)\n3. make\n4. cmake\n\nBuilding takes a few minutes (depending on # of cores).\n\n```sh\ngit clone https://github.com/bluenote-1577/sylph\ncd sylph\n\n# If default rust install directory is ~/.cargo\ncargo install --path . --root ~/.cargo\nsylph query test_files/*\n```\n#### Option 3: Pre-built x86-64 linux statically compiled executable\n\nIf you're on an x86-64 system, you can download the binary and use it without any installation. \n\n```sh\nwget https://github.com/bluenote-1577/sylph/releases/download/latest/sylph\nchmod +x sylph\n./sylph -h\n```\n\nNote: the binary is compiled with a different set of libraries (musl instead of glibc), probably impacting performance. \n\n## Tutorials, manuals, and pre-built databases\n\n### [Pre-built databases](https://github.com/bluenote-1577/sylph/wiki/Pre%E2%80%90built-databases)\n\nThe pre-built databases [available here](https://github.com/bluenote-1577/sylph/wiki/Pre%E2%80%90built-databases) can be downloaded and used with sylph for profiling and containment querying. \n\n### [Cookbook](https://github.com/bluenote-1577/sylph/wiki/sylph-cookbook)\n\nFor common use cases and fast explanations, see the above [cookbook](https://github.com/bluenote-1577/sylph/wiki/sylph-cookbook).\n\n### Tutorials\n1. #### [Introduction: 5-minute sylph tutorial outlining basic usage](https://github.com/bluenote-1577/sylph/wiki/5%E2%80%90minute-sylph-tutorial)\n2. #### [Taxonomic profiling against GTDB database with MetaPhlAn output format](https://github.com/bluenote-1577/sylph/wiki/Taxonomic-profiling-with-the-GTDB%E2%80%90R214-database)\n\n### Manuals\n1. #### [Output format (TSV) and containment ANI explanation](https://github.com/bluenote-1577/sylph/wiki/Output-format)\n2. #### [Incoporating custom taxonomies to get CAMI-like or MetaPhlAn-like outputs](https://github.com/bluenote-1577/sylph/wiki/Integrating-taxonomic-information-with-sylph)\n\n### [sylph-utils](https://github.com/bluenote-1577/sylph-utils) \n\nFor incorporating taxonomy and manipulating output formats, see the [sylph-utils repository](https://github.com/bluenote-1577/sylph-utils).\n\n## Changelog\n\n#### Version v0.6.1 - 2024-04-29. \n\n* Made unknown estimation (-u) more robust for low-depth short-read sequencing. \n\nSee the [CHANGELOG](https://github.com/bluenote-1577/sylph/blob/main/CHANGELOG.md) for complete details.\n\n## Citing sylph\n\nJim Shaw and Yun William Yu. Metagenome profiling and containment estimation through abundance-corrected k-mer sketching with sylph (2023). bioRxiv. (Accepted for publication)\n\n"
      },
      "source": "https://raw.githubusercontent.com/bluenote-1577/sylph/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "<a href=\"https://github.com/bluenote-1577/sylph/wiki/Integrating-taxonomic-information-with-sylph\">Incoporating custom taxonomies to get CAMI-like or MetaPhlAn-like outputs</a>",
        "parent_header": [
          "sylph - fast and precise species-level metagenomic profiling with ANIs",
          "Tutorials, manuals, and pre-built databases",
          "Manuals"
        ],
        "type": "Text_excerpt",
        "value": "# sylph - fast and precise species-level metagenomic profiling with ANIs \n\n## Introduction\n\n**sylph** is a program that performs ultrafast (1) **ANI querying** or (2) **metagenomic profiling** for metagenomic shotgun samples. \n\n**Containment ANI querying**: sylph can search a genome, e.g. E. coli, against your sample. If sylph outputs an estimate of 97% ANI, your sample contains an E. coli with 97% ANI to the queried genome.\n\n**Metagenomic profiling**: sylph can determine the species/taxa in your sample and their abundances, just like [Kraken](https://ccb.jhu.edu/software/kraken/) or [MetaPhlAn](https://github.com/biobakery/MetaPhlAn).\n\n<p align=\"center\"><img src=\"assets/sylph.gif?raw=true\"/></p>\n<p align=\"center\">\n   <i>\n   Profiling 1 Gbp of mouse gut reads against 85,205 genomes in a few seconds \n   </i>\n</p>\n\n\n### Why sylph?\n\n1. **Precise species-level profiling**: Our tests show that sylph has less false positives than Kraken and is about as precise and sensitive as marker gene methods (MetaPhlAn, mOTUs). \n\n2. **Ultrafast, multithreaded, multi-sample**: sylph can be > 50x faster than other methods for multi-sample processing. sylph only takes ~15GB of RAM for profiling against the entire GTDB-R220 database (110k genomes).\n\n3. **Accurate (containment) ANIs down to 0.1x effective coverage**: for bacterial ANI queries of > 90% ANI, sylph can often give accurate ANI estimates down to 0.1x coverage.\n\n4. **Customizable, versatile**: sylph can profile against [metagenome-assembled genomes (MAGs), viruses, eukaryotes](https://github.com/bluenote-1577/sylph/wiki/Pre%E2%80%90built-databases), and custom databases. **Long reads work too.** Taxonomic information can be incorporated downstream for traditional profiling reports. \n\n### How does sylph work?\n\nsylph uses a k-mer containment method. sylph's novelty lies in **using a statistical technique to correct ANI for low coverage genomes** , giving accurate results for low abundance genomes. See [here for more information on what sylph can and can not do](https://github.com/bluenote-1577/sylph/wiki/Introduction:-what-is-sylph-and-how-does-it-work%3F). \n\n## Very quick start\n\n#### Profile metagenome sample against [GTDB-R220](https://gtdb.ecogenomic.org/) (113,104 bacterial/archaeal species representative genomes) \n\n```sh\nconda install -c bioconda sylph\n\n# download GTDB-R220 pre-built database (~13 GB)\nwget http://faust.compbio.cs.cmu.edu/sylph-stuff/gtdb-r220-c200-dbv1.syldb\n\n# multi-sample paired-end profiling (sylph version >= 0.6)\nsylph profile gtdb-r220-c200-dbv1.syldb -1 *_1.fastq.gz -2 *_2.fastq.gz -t (threads) > profiling.tsv\n\n# multi-sample single-end profiling\nsylph profile gtdb-r220-c200-dbv1.syldb *.fastq -t (threads) > profiling.tsv\n```\n\n##  Install (current version v0.6.1)\n\n#### Option 1: conda install \n[![Anaconda-Server Badge](https://anaconda.org/bioconda/sylph/badges/version.svg)](https://anaconda.org/bioconda/sylph)\n[![Anaconda-Server Badge](https://anaconda.org/bioconda/sylph/badges/latest_release_date.svg)](https://anaconda.org/bioconda/sylph)\n\n```sh\nconda install -c bioconda sylph\n```\n\n> [!WARNING]\n> conda install may break if AVX2 instructions are not available on your CPU. See the [issue here](https://github.com/bluenote-1577/sylph/issues/2). The binary and source install still work. \n\n#### Option 2: Build from source\n\nRequirements:\n1. [rust](https://www.rust-lang.org/tools/install) (version > 1.63) programming language and associated tools such as cargo are required and assumed to be in PATH.\n2. A c compiler (e.g. GCC)\n3. make\n4. cmake\n\nBuilding takes a few minutes (depending on # of cores).\n\n```sh\ngit clone https://github.com/bluenote-1577/sylph\ncd sylph\n\n# If default rust install directory is ~/.cargo\ncargo install --path . --root ~/.cargo\nsylph query test_files/*\n```\n#### Option 3: Pre-built x86-64 linux statically compiled executable\n\nIf you're on an x86-64 system, you can download the binary and use it without any installation. \n\n```sh\nwget https://github.com/bluenote-1577/sylph/releases/download/latest/sylph\nchmod +x sylph\n./sylph -h\n```\n\nNote: the binary is compiled with a different set of libraries (musl instead of glibc), probably impacting performance. \n\n## Tutorials, manuals, and pre-built databases\n\n### [Pre-built databases](https://github.com/bluenote-1577/sylph/wiki/Pre%E2%80%90built-databases)\n\nThe pre-built databases [available here](https://github.com/bluenote-1577/sylph/wiki/Pre%E2%80%90built-databases) can be downloaded and used with sylph for profiling and containment querying. \n\n### [Cookbook](https://github.com/bluenote-1577/sylph/wiki/sylph-cookbook)\n\nFor common use cases and fast explanations, see the above [cookbook](https://github.com/bluenote-1577/sylph/wiki/sylph-cookbook).\n\n### Tutorials\n1. #### [Introduction: 5-minute sylph tutorial outlining basic usage](https://github.com/bluenote-1577/sylph/wiki/5%E2%80%90minute-sylph-tutorial)\n2. #### [Taxonomic profiling against GTDB database with MetaPhlAn output format](https://github.com/bluenote-1577/sylph/wiki/Taxonomic-profiling-with-the-GTDB%E2%80%90R214-database)\n\n### Manuals\n1. #### [Output format (TSV) and containment ANI explanation](https://github.com/bluenote-1577/sylph/wiki/Output-format)\n2. #### [Incoporating custom taxonomies to get CAMI-like or MetaPhlAn-like outputs](https://github.com/bluenote-1577/sylph/wiki/Integrating-taxonomic-information-with-sylph)\n"
      },
      "source": "https://raw.githubusercontent.com/bluenote-1577/sylph/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "<a href=\"https://github.com/bluenote-1577/sylph-utils\">sylph-utils</a>",
        "parent_header": [
          "sylph - fast and precise species-level metagenomic profiling with ANIs",
          "Tutorials, manuals, and pre-built databases"
        ],
        "type": "Text_excerpt",
        "value": "For incorporating taxonomy and manipulating output formats, see the [sylph-utils repository](https://github.com/bluenote-1577/sylph-utils).\n"
      },
      "source": "https://raw.githubusercontent.com/bluenote-1577/sylph/main/README.md",
      "technique": "header_analysis"
    }
  ]
}