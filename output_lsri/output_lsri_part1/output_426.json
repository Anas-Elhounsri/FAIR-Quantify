{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "References",
        "parent_header": [
          "fortuna"
        ],
        "type": "Text_excerpt",
        "value": " [1] A. Dobin et al. Star: ultrafast universal rna-seq aligner. Bioinformatics, 29(1):15\u201321, 2013.\n \n [2] N. L. Bray, H. Pimentel, P. Melsted, and L. Pachter. Near-optimal probabilistic rna-seq quantification. Nature Biotechnology, 34:525\u2013527, 2016.\n \n [3] S. Anders, A. Reyes, and W. Huber. Detecting differential usage of exons from rna-seq data. Genome Research, 22:2008\u20132017, 2012.\n \n [4] K. Jaganathan et al. Predicting splicing from primary sequence with deep learning. Cell, 176(3):535\u2013548, 2019.\n \n"
      },
      "source": "https://raw.githubusercontent.com/canzarlab/fortuna/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/canzarlab/fortuna"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributors": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Luka Borozan\nStefan Canzar\n"
      },
      "source": "https://raw.githubusercontent.com/canzarlab/fortuna/main/contributors",
      "technique": "file_exploration"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-01-18T21:26:17Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-02-21T06:31:06Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Fast alignment-free counting of RNA-seq reads "
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9966801573151489,
      "result": {
        "original_header": "fortuna",
        "type": "Text_excerpt",
        "value": "fortuna is an alignment-free method to quantify anambiguous building blocks of transcripts and to detect and annotate novel splicing\nevents. It proceeds in the steps shown in the figure below. \nfortuna starts (A) by \"guessing\" novel transcripts based on annotated splice sites. It then (B) creates a set of sequence fragments of annotated and guessed novel transcripts that contain all possible combinations of unspliced exonic segments. From this set of fragments we build a kallisto [2] index (C) and use it to efficiently pseudoalign reads to fragments (D), which yields counts of the most elementary splicing units, the **signature counts**. Optionally, fortuna can further incorporate novel splice sites (e.g. segment s<sub>2</sub>) identified by **any** spliced aligner from reads that remained unmapped in step (D). Computed counts can be directly used for alternative splicing analysis or added up to larger units such as those used by DEXSeq [3] (E1). In addition, fortuna annotates all novel events (E2) based on precise definitions of event types.\n \n"
      },
      "source": "https://raw.githubusercontent.com/canzarlab/fortuna/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8886705841862046,
      "result": {
        "original_header": "GENCODE fortuna index",
        "type": "Text_excerpt",
        "value": "If you want to use fortuna with human transcripts annoated in GENCODE (https://www.gencodegenes.org/human/), release 42 (GRCh38.p13, access date 17.12.2022), you can download here the fortuna index for different read lengths Other species will follow.\n- [*H. sapiens*, read length 75bp](https://fizika-my.sharepoint.com/:u:/g/personal/lborozan_unios_hr/ERy8k_wj6DBGj03jVFphQ14BKjdGtogzU_43M7Wqm6CyHQ?e=zWYYBA&download=1),\n- [*H. sapiens*, read length 100bp](https://fizika-my.sharepoint.com/:u:/g/personal/lborozan_unios_hr/EfRsiEzTOyJOvDoqflZkfCABTPLiIIKxMqUX6QvZk2jdpA?e=jwe3id&download=1),\n- [*H. sapiens*, read length 150bp](https://fizika-my.sharepoint.com/:u:/g/personal/lborozan_unios_hr/ESzjW3JAQUNHrsuMN1Vum2kBLaKx7-E_r0tcd16FUAsH9g?e=q6hCne&download=1).\n \n"
      },
      "source": "https://raw.githubusercontent.com/canzarlab/fortuna/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8712718968152658,
      "result": {
        "original_header": "Pre-compiled fortuna binaries",
        "type": "Text_excerpt",
        "value": "In addition to compiling from source, pre-compiled fortuna binaries can be downloaded for the x86_64 architecture running [Linux](https://github.com/canzarlab/fortuna/files/10284967/fortuna.zip) or [Mac OS](https://github.com/canzarlab/fortuna/files/10295151/fortuna_mac_x86.zip) or for [Mac OS on the Arm64 architecture](https://github.com/canzarlab/fortuna/files/10289050/fortuna_mac.zip) (M1/M2). \n"
      },
      "source": "https://raw.githubusercontent.com/canzarlab/fortuna/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/canzarlab/fortuna/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/canzarlab/fortuna/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "canzarlab/fortuna"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "fortuna"
      },
      "source": "https://raw.githubusercontent.com/canzarlab/fortuna/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/canzarlab/fortuna/main/bin/processGTF.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://user-images.githubusercontent.com/37735817/149656945-bba990cf-d608-4901-9fc5-a3adfe568fd0.jpg"
      },
      "source": "https://raw.githubusercontent.com/canzarlab/fortuna/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://user-images.githubusercontent.com/37735817/208976495-17478028-b299-4f54-a6b2-1169f33e034b.png"
      },
      "source": "https://raw.githubusercontent.com/canzarlab/fortuna/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://render.githubusercontent.com/render/math?math=T^{ap}_{g}"
      },
      "source": "https://raw.githubusercontent.com/canzarlab/fortuna/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://render.githubusercontent.com/render/math?math=T^{as}_{g}"
      },
      "source": "https://raw.githubusercontent.com/canzarlab/fortuna/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# kallisto installation\n\nRequirements\n------------\n- CMake version >= 2.8.12\n    - Can be installed via homebrew: `brew install cmake`\n- zlib (should be installed on OSX >= 10.9)\n- HDF5 C libraries\n\nInstallation\n------------\n\n1. First clone the repository:\n\n    ```\n    git clone https://github.com/pachterlab/kallisto.git\n    ```\n\n1. Move to the source directory:\n\n    ```\n    cd kallisto\n    ```\n\n1. Make a build directory and move there\n\n    ```\n    mkdir build\n    cd build\n    ```\n\n1. Execute cmake. There are a few options:\n    - `-DCMAKE_INSTALL_PREFIX:PATH=$HOME` which will put kallisto in\n       `$HOME/bin` as opposed to the default (`/usr/local/bin`)\n\n    ```\n    cmake ..\n    ```\n\n    This is only required when one of the `CMakeLists.txt` files changes or new\n    source files are introduced. It will make a new set of `Makefile`s\n\n1. Build the code\n\n    ```\n    make\n    ```\n\n    Optionally install into the cmake install prefix path:\n\n    ```\n    make install\n    ```\n1. Run the code. The source tree hierarchy is copied, so you can find kallisto\n   at `src/kallisto` and tests at `test/tests`.\n\nAfter performing these steps, you can simply build using make as long as new\nsource files aren't introduced or the `CMakeLists.txt` scripts aren't modified.\n"
      },
      "source": "https://raw.githubusercontent.com/canzarlab/fortuna/main/ext/kallisto/INSTALL.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "fortuna"
        ],
        "type": "Text_excerpt",
        "value": "Mac OS users may have to install autoconf 2.69 first (see Dependencies):\n\n```\nbrew install autoconf@2.69\nPATH=\"/opt/homebrew/opt/autoconf@2.69/bin:$PATH\u201c\n```\n\nAfter cloning the repository, run the following commands in the fortuna folder. \n\n``` \nmkdir build \ncd build \ncmake .. \nmake \n```\n"
      },
      "source": "https://raw.githubusercontent.com/canzarlab/fortuna/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9771775024164391,
      "result": {
        "original_header": "fortuna",
        "type": "Text_excerpt",
        "value": "<p align=\"center\">\n<img src=\"https://user-images.githubusercontent.com/37735817/149656945-bba990cf-d608-4901-9fc5-a3adfe568fd0.jpg\" width=45% height=50%>\n</p> \n"
      },
      "source": "https://raw.githubusercontent.com/canzarlab/fortuna/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.999076849968595,
      "result": {
        "original_header": "GENCODE fortuna index",
        "type": "Text_excerpt",
        "value": "If you want to use fortuna with human transcripts annoated in GENCODE (https://www.gencodegenes.org/human/), release 42 (GRCh38.p13, access date 17.12.2022), you can download here the fortuna index for different read lengths Other species will follow.\n- [*H. sapiens*, read length 75bp](https://fizika-my.sharepoint.com/:u:/g/personal/lborozan_unios_hr/ERy8k_wj6DBGj03jVFphQ14BKjdGtogzU_43M7Wqm6CyHQ?e=zWYYBA&download=1),\n- [*H. sapiens*, read length 100bp](https://fizika-my.sharepoint.com/:u:/g/personal/lborozan_unios_hr/EfRsiEzTOyJOvDoqflZkfCABTPLiIIKxMqUX6QvZk2jdpA?e=jwe3id&download=1),\n- [*H. sapiens*, read length 150bp](https://fizika-my.sharepoint.com/:u:/g/personal/lborozan_unios_hr/ESzjW3JAQUNHrsuMN1Vum2kBLaKx7-E_r0tcd16FUAsH9g?e=q6hCne&download=1).\n \n"
      },
      "source": "https://raw.githubusercontent.com/canzarlab/fortuna/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9994566332345075,
      "result": {
        "original_header": "Pre-compiled fortuna binaries",
        "type": "Text_excerpt",
        "value": "In addition to compiling from source, pre-compiled fortuna binaries can be downloaded for the x86_64 architecture running [Linux](https://github.com/canzarlab/fortuna/files/10284967/fortuna.zip) or [Mac OS](https://github.com/canzarlab/fortuna/files/10295151/fortuna_mac_x86.zip) or for [Mac OS on the Arm64 architecture](https://github.com/canzarlab/fortuna/files/10289050/fortuna_mac.zip) (M1/M2). \n"
      },
      "source": "https://raw.githubusercontent.com/canzarlab/fortuna/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.999739964044867,
      "result": {
        "original_header": "Docker",
        "type": "Text_excerpt",
        "value": "Alternatively, fortuna can be run in a docker container. The image can be downloaded [here](https://fizika-my.sharepoint.com/:u:/g/personal/lborozan_unios_hr/EZapKOTGS05AhDK7821YRW4BcBx_nV6Yk6IQXz3YiPU_Lg?e=5s3nLR&download=1). It has been built on Linux and was tested on Linux and Mac OS, but not on Windows. \nThen fortuna can be run on a small example dataset (see below) using the following commands:\n``` \n# Download and load docker image\nwget -O fortuna1-00.tar \"https://fizika-my.sharepoint.com/:u:/g/personal/lborozan_unios_hr/EZapKOTGS05AhDK7821YRW4BcBx_nV6Yk6IQXz3YiPU_Lg?e=5s3nLR&download=1\"\ndocker load -i fortuna1-00.tar\n\n# Download sample\nwget -O sample.zip \"https://fizika-my.sharepoint.com/:u:/g/personal/lborozan_unios_hr/EaprBlTdJU5Ekt6-EKRkyr8B1KFRbbptoCDLjrFMgv-pqQ?e=vmPJVY&download=1\"\nunzip sample.zip -d sample\n\n# Run docker image with the sample\ndocker run -it -v \"$PWD\"/sample:/fortuna/sample fortuna:1.00\n\n# Once inside the docker image, run the following commands\ncd sample\nbash sample.sh\n``` \n \n"
      },
      "source": "https://raw.githubusercontent.com/canzarlab/fortuna/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.9239539894390878,
      "result": {
        "original_header": "Docker",
        "type": "Text_excerpt",
        "value": "Then fortuna can be run on a small example dataset (see below) using the following commands:\n``` \n# Download and load docker image\nwget -O fortuna1-00.tar \"https://fizika-my.sharepoint.com/:u:/g/personal/lborozan_unios_hr/EZapKOTGS05AhDK7821YRW4BcBx_nV6Yk6IQXz3YiPU_Lg?e=5s3nLR&download=1\"\ndocker load -i fortuna1-00.tar\n\n# Download sample\nwget -O sample.zip \"https://fizika-my.sharepoint.com/:u:/g/personal/lborozan_unios_hr/EaprBlTdJU5Ekt6-EKRkyr8B1KFRbbptoCDLjrFMgv-pqQ?e=vmPJVY&download=1\"\nunzip sample.zip -d sample\n\n# Run docker image with the sample\ndocker run -it -v \"$PWD\"/sample:/fortuna/sample fortuna:1.00\n\n# Once inside the docker image, run the following commands\ncd sample\nbash sample.sh\n``` \n \n"
      },
      "source": "https://raw.githubusercontent.com/canzarlab/fortuna/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/canzarlab/fortuna/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "BSD 2-Clause \"Simplified\" License",
        "spdx_id": "BSD-2-Clause",
        "type": "License",
        "url": "https://api.github.com/licenses/bsd-2-clause",
        "value": "https://api.github.com/licenses/bsd-2-clause"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "[Files in this distribution outwith the cram/ subdirectory are distributed\naccording to the terms of the following MIT/Expat license.]\n\nThe MIT/Expat License\n\nCopyright (C) 2012-2014 Genome Research Ltd.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\nTHE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n\n\n[Files within the cram/ subdirectory in this distribution are distributed\naccording to the terms of the following Modified 3-Clause BSD license.]\n\nThe Modified-BSD License\n\nCopyright (C) 2012-2014 Genome Research Ltd.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice,\n   this list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the names Genome Research Ltd and Wellcome Trust Sanger Institute\n   nor the names of its contributors may be used to endorse or promote products\n   derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY GENOME RESEARCH LTD AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL GENOME RESEARCH LTD OR ITS CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\n[The use of a range of years within a copyright notice in this distribution\nshould be interpreted as being equivalent to a list of years including the\nfirst and last year specified and all consecutive years between them.\n\nFor example, a copyright notice that reads \"Copyright (C) 2005, 2007-2009,\n2011-2012\" should be interpreted as being identical to a notice that reads\n\"Copyright (C) 2005, 2007, 2008, 2009, 2011, 2012\" and a copyright notice\nthat reads \"Copyright (C) 2005-2012\" should be interpreted as being identical\nto a notice that reads \"Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010,\n2011, 2012\".]\n"
      },
      "source": "https://raw.githubusercontent.com/canzarlab/fortuna/main/ext/htslib/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "fortuna"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "canzarlab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 1746595,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 485996,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 32734,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 30883,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Roff",
        "size": 20219,
        "type": "Programming_language",
        "value": "Roff"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "M4",
        "size": 12757,
        "type": "Programming_language",
        "value": "M4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 7406,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 7004,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Scilab",
        "size": 2872,
        "type": "Programming_language",
        "value": "Scilab"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/canzarlab/fortuna/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependencies",
        "parent_header": [
          "fortuna"
        ],
        "type": "Text_excerpt",
        "value": "Fortuna requires C++11 to run and CMake version >=2.8.12 to compile. \n\nAlso, fortuna requires\n* zlib library (included in most UNIX distributions)\n* autoconf 2.69 (included in most UNIX distributions, Mac OS users may have to run ```brew install autoconf@2.69```)\n\nAdditional dependencies are included with fortuna, including\n* kallisto (https://github.com/pachterlab/kallisto)\n* htslib (https://github.com/samtools/htslib)\n\n"
      },
      "source": "https://raw.githubusercontent.com/canzarlab/fortuna/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contact",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 00:42:41",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Example dataset",
        "parent_header": [
          "fortuna"
        ],
        "type": "Text_excerpt",
        "value": " \nAn example dataset can be downloaded [here](https://fizika-my.sharepoint.com/:u:/g/personal/lborozan_unios_hr/EaprBlTdJU5Ekt6-EKRkyr8B1KFRbbptoCDLjrFMgv-pqQ?e=vmPJVY&download=1). It contains approximately 240,000 reads taken from sample 4 (patient id 11352.p1) in [4] that map to gene STAT1. fortuna will map over 99% of those reads and find slightly over 1000 reads supporting a novel exon skipping at chr2:190984393-190986854. After extracting the data to the root fortuna folder, use the following commands.\n \n``` \ncd sample\nbash sample.sh\n```\n\nTwo tab-separated output files will be created after a couple of seconds - cnt.tsv and alt.tsv. \n\nFile cnt.tsv contains signature counts in the format documented below. An example line from the file follows.\n```\n223832|223833|223836|   2274\n``` \nThe above example implies that a signature comprised of subexons 223832, 223833, and 223836 has a count of 2274. The IDs of the subexons are taken from the input GTF file sample.rg.gtf (field NodeId). Note that the GTF file has been pre-processed using script ``` bin/processGTF.sh ```.\n\nFile alt.tsv contains novel splicing information. To obtain the information regarding the previously mentioned novel exon skipping, use the following command. Mac OS does not support ```grep -P```. Omit ```-P``` and, depending on your implementation of grep, you might have to replace ```\\t``` by ```^V<tab>``` (press ```ctrl+V``` then press ```tab```).\n```\ngrep -P \"chr2\\t190984393\\t190986854\\t\" alt.tsv\n```\nThe result should be:\n```\nchr2 190984393 190986854 NM_007315.3,NM_139266.2,XM_006712718.1,XM_017004783.2,XR_001738914.2,XR_001738915.2 Locus_18066 ES 1256\n```\nwhich means that on chromosome 2 there exists a novel intron between coordinates 190984393 and 190986854 on gene Locus_18066 that is a novel exon skipping with regards to transcripts NM_007315.3, NM_139266.2, XM_006712718.1, XM_017004783.2, XR_001738914.2, and XR_001738915.2 which is supported by 1256 reads. Just like subexon IDs in the cnt.tsv file, chromosome, gene (gene_id field), and transcript IDs (transcript_id field) are taken from the input GTF file.\n\nBelow is an example sashimi plot of the novel exon skipping we generated using IGV.\n<img width=\"853\" alt=\"sashimi\" src=\"https://user-images.githubusercontent.com/37735817/208976495-17478028-b299-4f54-a6b2-1169f33e034b.png\">\n\n"
      },
      "source": "https://raw.githubusercontent.com/canzarlab/fortuna/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "fortuna"
        ],
        "type": "Text_excerpt",
        "value": "Below we describe how to run the individual steps shown in the top figure. For a complete list of options, run fortuna without any parameters.\n\n ``` ./fortuna ```\n"
      },
      "source": "https://raw.githubusercontent.com/canzarlab/fortuna/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Preprocessing",
        "parent_header": [
          "fortuna",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "A transcript annotation in GTF format needs to be preprocessed by computing minimal disjoint segments bounded by splice sites (segments s<sub>1</sub>, s<sub>2</sub>, s<sub>3</sub>, s<sub>4</sub> in the figure).  Running bash script ``` bin/processGTF.sh ``` with the path to the annotation\n\n``` bash processGTF.sh /path/to/the/annotation.gtf ```\n\nwill generate a segmented annotation in ``` /path/to/the/annotation.rg.gtf ```.\n\n"
      },
      "source": "https://raw.githubusercontent.com/canzarlab/fortuna/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Indexing",
        "parent_header": [
          "fortuna",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Steps B and C are executed using fortuna's \"--index\" command. Given a genome sequence in FASTA format, a preprocessed transcript annotation (GTF),\nand a target read length, it builds an index of annotated and novel transcript fragments that can be used for efficient quantification using kallisto's pseudoalignments (next step). The \nfollowing options are available, mandatory arguments are marked by (*). \n\n* ```-ingtf <FILE>``` input preprocessed GTF file (*)\n* ```-infa <FILE>``` input chromosome FASTA file (*)\n* ```-outfa <FILE>``` outputs intermediate index fasta (*)\n* ```-ind <FILE>``` outputs the final index file for quantification (*)\n* ```-rl <INT>``` target read length (*) \n* ```-tmp <FOLD>``` temporary folder (defaults to the current folder)\n* ```-Mc <INT>``` maximum number of fragments per gene (default 25000)\n* ```-lgo <STR>``` large gene optimization strategy (default \"11\")\n\nIf input reads are of variable length (e.g. after trimming), we recommend setting the target read length (parameter -rl) to the length of the longest read in the sample.\n\nThe last parameter \"-lgo\" controls the extention of the catalog of known trascripts by novel \"guessed\" ones (step A). It takes as argument a string of up to two numbers from the set {0, 2, 1} where 0 is the least restrictive option, 2 is the middle ground and 1 is the most restrictive option. The less restrictive optimizations are, the more additional isoforms will be generated. Option 0 denotes the most comprehensive extension. It creates fragments by combining known donor and acceptor sites of the same gene (set <img src=\"https://render.githubusercontent.com/render/math?math=T^{ap}_{g}\"> in the manuscript).  Option 2 only allows to combine splice sites that lie within the boundaries of a known transcript (set <img src=\"https://render.githubusercontent.com/render/math?math=T^{as}_{g}\">). Finally, option 1 does not create any novel fragments but only uses annotated transcripts. If the provided argument consists of 2 numbers, fragments are created initially using the strategy specified by the first number, gradually reducing to the strategy specified by the second if -Mc is exceeded.  \n\nThe following options further restrict the set of generated fragments: \n\n* ```-mil <INT>``` minimum generated intron length (default unrestricted)\n* ```-Mil <INT>``` maximum generated intron length (default unrestricted)\n* ```-mel <INT>``` minimum generated exon length (default unrestricted)\n* ```-Mel <INT>``` maximum generated exon length (default unrestricted) \n* ```-exs <INT>``` maximum number of skipped exons (default unrestricted)\n* ```-Moh <INT>``` maximum overhang on fragment ends (default unrestricted)\n* ```--pmrna``` generate fragments from known premrna (default off)\n* ```--fse``` generate all singleton subexons despite the limits defined by -Mc (default off)\n\nOptionally, all generated transcript fragments can be output in GTF format.\n\n* ```-outgtf <FILE>``` outputs a gtf file describing fragments\n\nHere is an example call to fortuna's indexing step: \n\n``` ./fortuna --index -ingtf seq/a.gtf -infa seq/a.fa -outfa ind/a.fa -ind ind/a -rl 75 -tmp tmp/ -lgo \"22\" -exs 8 --fse ```\n\n"
      },
      "source": "https://raw.githubusercontent.com/canzarlab/fortuna/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Quantification",
        "parent_header": [
          "fortuna",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "During the quantification step (\"--quant\"), reads will be pseudoaligned to fragments using kallisto (step D). From pseudoalignments fortuna derives signature counts and annotates all novel events (step E2). Optionally, unaligned reads will be written to disk and can be realigned across novel splice sites in the refinement step (below).\n\n* ```-rl <INT>``` input read length (*)\n* ```-gtf <FILE>``` preprocessed GTF file (*)\n* ```-infq <FILE>``` FASTQ file with reads (*)\n* ```-ind <FILE>``` index computed in previous step (*)\n* ```-fa <FILE>``` transcriptome FASTA file\n* ```-outfq <FILE>``` output FASTQ file with misaligned reads for the refinement step\n* ```-cnt <FILE>``` output file with signature counts\n* ```-alt <FILE>``` output file with novel event annotation\n* ```-bam <FILE>``` output pseudoalignment BAM file\n* ```-miss <INT>``` maximum number of allowed mismatches during alignment; reads exceeding this number will be considered unaligned\n* ```-thr <INT>``` number of threads\n* ```--p ``` outputs an intermediate file which is used to quantify paired-end reads\n\nAs in the indexing step, we recommend setting -rl to the length of the longest read.\n\nSignature counts are output in a tab separated file specified by --cnt.  It contains in each line the number of reads with a specific mapping signature. Mapping signatures are specified by a sequence of subexon IDs taken from the segmented GTF file, separated by symbol \"|\". In the following example, the alignment of 7 reads overlap subexons a,b,c, and d:\n\n``` a|b|c|d| 7 ```\n\nThe tab separated event file contains in each line the information of a novel event:\n\n ``` chromosome left-flank right-flank transcripts event-type count gene-id ```\n\nEach event has one of the following types: ES (exon skipping), IR (intron retention), AA (novel acceptor), AD (novel donor), AP (novel pair), IE (intron-in-exon) and XX (unknown). Field transcripts is a comma separated list of annotated transcript IDs in which the event was observed. Field count is the number of reads supporting the event. In case of ES, AA, AD, AP and IE, left and right flanks are the genomic coordinates of donor and acceptor sites of the novel intron, while in the case of IR and XX, 5' and 3' coordinates of the region of the read supporting the novel exonic segment are reported.\n\nHere is an example call of the quantification step: \n\n ``` ./fortuna --quant -rl 75 -gtf seq/a.gtf -infq dat/a.fq -ind ind/a -fa seq/a.fa -outfq dat/a.unaligned.fq -cnt res/cnt.tsv -alt res/alt.tsv -miss 3 -thr 4 ```\n\n"
      },
      "source": "https://raw.githubusercontent.com/canzarlab/fortuna/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Refinement",
        "parent_header": [
          "fortuna",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Optionally (\"--refine\"), fortuna incorporates novel splice sites identified by any spliced aligner (such as STAR) from previously unmapped reads.\n\n* ```-rl <INT>``` input read length (*)\n* ```-gtf <FILE>``` preprocessed GTF file (*)\n* ```-bam <FILE>``` genome BAM file with realigned reads (*)\n* ```-outcnt <FILE>``` output file with refined signature counts \n* ```-outalt <FILE>``` output file with novel event annotation\n* ```-ref <FILE>``` output refinement reference file\n* ```-incnt <FILE>``` input file with signature counts\n* ```-inalt <FILE>``` input file with novel event annotation\n \nInput files specified by \"-incnt\" and \"-inalt\", if specified, will be augmented by the new splice sites taken from the BAM file and stored to files specified by \"-outcnt\" and \"--outalt\". The refinement reference file is a tab separated file which contains all newly created or refined subexons and introns. They are listed\nwith their IDs and genomic coordinates (chromosome, start, end). We recommend setting -rl to the length of the longest read.\n\nHere is an example call to the refinement step:\n\n ``` ./fortuna --refine -rl 75 -gtf seq/a.gtf -bam res/star.bam -incnt res/cnt.tsv -outcnt res/cnt.refined.tsv -inalt res/alt.tsv -outalt res/alt.refined.tsv -ref res/ref.txt ```\n \n "
      },
      "source": "https://raw.githubusercontent.com/canzarlab/fortuna/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Paired-end reads",
        "parent_header": [
          "fortuna",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "fortuna can use two intermediate single-ended outputs obtained by ```--quant``` and merge them into a paired-end count file. Command ```--pairs```, which does that, has following inputs:\n\n* ```-lf <FILE>``` input file with left reads (*)\n* ```-rf <FILE>``` output file with subexon counts (*)\n* ```-out <FILE>``` output file with subexon counts (*)\n* ```-lp <STRING>``` left file read suffix\n* ```-rp <STRING>``` right file read suffix\n\nSometimes, left and right read names have specific suffixes at their respective ends, e.g. r1/1 (left) and r1/2 (right) could represent a read pair. Optional arguments ```--lp``` and ```--rp``` are used to filter out postfixes (\"/1\" and \"/2\" in the example).\n\nHere is an example call:\n \n ``` ./fortuna --pairs -lf res/left.cnt -rf res/right.cnt -out res/paired.cnt ```\n\n"
      },
      "source": "https://raw.githubusercontent.com/canzarlab/fortuna/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Transform",
        "parent_header": [
          "fortuna",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "fortuna also allows to transform (```--trans```) signature counts to subexon counts as used by DEXSeq for alternative downstream analysis. It requires two parameters:\n* ```-incnt <FILE>``` input file with signature counts (*)\n* ```-outcnt <FILE>``` output file with subexon counts (*)\n\nHere is an example conversion of counts:\n \n ``` ./fortuna --trans -incnt res/a.cnt -outcnt res/a.subexon.cnt ```\n\n "
      },
      "source": "https://raw.githubusercontent.com/canzarlab/fortuna/main/README.md",
      "technique": "header_analysis"
    }
  ]
}