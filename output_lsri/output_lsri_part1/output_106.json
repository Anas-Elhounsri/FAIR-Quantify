{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "CITATION",
        "parent_header": [
          "NanoComp"
        ],
        "type": "Text_excerpt",
        "value": "If you use this tool, please consider citing our [publication](https://academic.oup.com/bioinformatics/article/39/5/btad311/7160911).\n\n"
      },
      "source": "https://raw.githubusercontent.com/wdecoster/nanocomp/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/wdecoster/nanocomp"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2017-10-10T20:08:04Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-10T05:42:08Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Comparison of multiple long read datasets"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9798112471374429,
      "result": {
        "original_header": "NanoComp",
        "type": "Text_excerpt",
        "value": "\nCompare multiple runs of long read sequencing data and alignments. Creates violin plots or box plots of length, quality and percent identity and creates dynamic, overlaying read length histograms and a cumulative yield plot. \nAs of version 1.1.0 NanoComp will also create a static png image for dynamic html plots, as the latter can get quite big and slow to load for big datasets. This however requires that you install [orca](https://github.com/plotly/orca). Without orca the script still works, but no static copies of dynamic plots are created. \n"
      },
      "source": "https://raw.githubusercontent.com/wdecoster/nanocomp/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/wdecoster/nanocomp/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 8
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/wdecoster/nanocomp/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "wdecoster/nanocomp"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "NanoComp"
      },
      "source": "https://raw.githubusercontent.com/wdecoster/nanocomp/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/wdecoster/nanocomp/master/scripts/test.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/wdecoster/nanocomp/master/examples/NanoComp_log_length.png"
      },
      "source": "https://raw.githubusercontent.com/wdecoster/nanocomp/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/wdecoster/nanocomp/master/examples/box_NanoComp_percentIdentity.png"
      },
      "source": "https://raw.githubusercontent.com/wdecoster/nanocomp/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "INSTALLATION",
        "parent_header": [
          "NanoComp"
        ],
        "type": "Text_excerpt",
        "value": "`pip install NanoComp`  \n\nThis script is written for Python3.\n"
      },
      "source": "https://raw.githubusercontent.com/wdecoster/nanocomp/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9994413775630676,
      "result": {
        "original_header": "NanoComp",
        "type": "Text_excerpt",
        "value": "As of version 1.1.0 NanoComp will also create a static png image for dynamic html plots, as the latter can get quite big and slow to load for big datasets. This however requires that you install [orca](https://github.com/plotly/orca). Without orca the script still works, but no static copies of dynamic plots are created. \n"
      },
      "source": "https://raw.githubusercontent.com/wdecoster/nanocomp/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/wdecoster/nanocomp/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2022 Wouter De Coster\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/wdecoster/nanocomp/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "nanocomp"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "wdecoster"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 51613,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 1530,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/wdecoster/nanocomp/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "wdecoster",
          "type": "User"
        },
        "date_created": "2020-08-19T07:53:26Z",
        "date_published": "2020-09-03T20:28:02Z",
        "html_url": "https://github.com/wdecoster/nanocomp/releases/tag/1.12.0",
        "release_id": 30686354,
        "tag": "1.12.0",
        "tarball_url": "https://api.github.com/repos/wdecoster/nanocomp/tarball/1.12.0",
        "type": "Release",
        "url": "https://api.github.com/repos/wdecoster/nanocomp/releases/30686354",
        "value": "https://api.github.com/repos/wdecoster/nanocomp/releases/30686354",
        "zipball_url": "https://api.github.com/repos/wdecoster/nanocomp/zipball/1.12.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-03 23:18:17",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 103
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "USAGE",
        "parent_header": [
          "NanoComp"
        ],
        "type": "Text_excerpt",
        "value": "```\nNanoComp [-h] [-v] [-t THREADS] [-o OUTDIR] [-p PREFIX] [--verbose]\n                [--raw] [--readtype {1D,2D,1D2}] [--barcoded]\n                [--split_runs TSV_FILE]\n                [-f {eps,jpeg,jpg,pdf,pgf,png,ps,raw,rgba,svg,svgz,tif,tiff}]\n                [-n names [names ...]] [--plot {violin,box}] [--title TITLE]\n                (--fastq files [files ...] | --summary files [files ...] | --bam files [files ...])\n\nGeneral options:\n  -h, --help            show the help and exit\n  -v, --version         Print version and exit.\n  -t, --threads THREADS\n                        Set the allowed number of threads to be used by the script\n  -o, --outdir OUTDIR   Specify directory in which output has to be created.\n  -p, --prefix PREFIX   Specify an optional prefix to be used for the output files.\n  --verbose             Write log messages also to terminal.\n  --raw                 Store the extracted data in tab separated file.\n\nOptions for filtering or transforming input prior to plotting:\n  --readtype {1D,2D,1D2}\n                        Which read type to extract information about from summary. Options are 1D, 2D,\n                        1D2\n  --barcoded            Barcoded experiment in summary format, splitting per barcode.\n  --split_runs TSV_FILE\n                        File: Split the summary on run IDs and use names in tsv file. Mandatory header\n                        fields are 'NAME' and 'RUN_ID'.\n\nOptions for customizing the plots created:\n  -f, --format {'png'(default),'jpg','jpeg','webp','svg','pdf','eps','json'}\n                        Specify the output format of the plots. JSON output allows for customisation by the end-user after plotting the figures (https://plotly.com/python-api-reference/generated/plotly.io.read_json.html).\n  -n, --names names     Specify the names to be used for the datasets.\n  -c, --colors colors   Specify the colors to be used for the datasets.\n  --plot {violin,box,ridge,false}\n                        Which plot type to use: 'box', 'violin' (default), 'ridge' (joyplot) or 'false' (no plots)\n  --title TITLE         Add a title to all plots, requires quoting if using spaces\n\nInput data sources, one of these is required.:\n  --fastq files [files ...]\n                        Data is in (compressed) fastq format.\n  --fasta files [files ...]\n                        Data is in (compressed) fasta format.\n  --summary files [files ...]\n                        Data is in (compressed) summary files generated by albacore or guppy.\n  --bam files [files ...]\n                        Data is in sorted bam files.\n\n```\n\n[Example file for --split_runs](https://github.com/wdecoster/nanocomp/blob/master/extra/split_file.tsv)\n\n\n\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/wdecoster/nanocomp/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "EXAMPLES",
        "parent_header": [
          "NanoComp"
        ],
        "type": "Text_excerpt",
        "value": "```\nNanoComp --bam alignment1.bam alignment2.bam alignment3.bam --outdir compare-runs\nNanoComp --fastq reads1.fastq.gz reads2.fastq.gz reads3.fastq.gz reads4.fastq.gz --names run1 run2 run3 run4\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/wdecoster/nanocomp/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "EXAMPLE OUTPUT",
        "parent_header": [
          "NanoComp"
        ],
        "type": "Text_excerpt",
        "value": "![loglength example](https://github.com/wdecoster/nanocomp/blob/master/examples/NanoComp_log_length.png)\n![box percentIdentity example](https://github.com/wdecoster/nanocomp/blob/master/examples/box_NanoComp_percentIdentity.png)\n\n[See more examples](https://github.com/wdecoster/nanocomp/tree/master/examples)\n\nI welcome all suggestions, bug reports, feature requests and contributions. Please leave an [issue](https://github.com/wdecoster/nanocomp/issues) or open a pull request. I will usually respond within a day, or rarely within a few days.\n\n"
      },
      "source": "https://raw.githubusercontent.com/wdecoster/nanocomp/master/README.md",
      "technique": "header_analysis"
    }
  ]
}