{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "References",
        "parent_header": [
          "pyPept"
        ],
        "type": "Text_excerpt",
        "value": "If you use pyPept in your work, please cite the following papers:\n\n* [pyPept: a python library to generate atomistic 2D and 3D representations of peptides](https://jcheminf.biomedcentral.com/articles/10.1186/s13321-023-00748-2) , Journal of Cheminformatics, 2023.\n* [BILN \u2013 A Human-readable Line Notation for Complex Peptides](https://pubs.acs.org/doi/10.1021/acs.jcim.2c00703), Journal of Chemical Information and Modelling, 2022.\n"
      },
      "source": "https://raw.githubusercontent.com/Boehringer-Ingelheim/pyPept/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Boehringer-Ingelheim/pyPept"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-01-18T07:52:52Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-03T07:50:50Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "pyPept: a python library to generate atomistic 2D and 3D representations of peptides"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9870213933766169,
      "result": {
        "original_header": "Purpose",
        "type": "Text_excerpt",
        "value": "Here we present pyPept, a package to allow the analysis of natural and modified peptides that are assembled based on personalized monomer dictionaries using the Boehringer Ingelheim line notation format (BILN). From the BILN, the peptide construct can then be represented as an RDKit object for further prediction of properties and usage in a variety of software packages that handle chemical structures.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Boehringer-Ingelheim/pyPept/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8898514213966946,
      "result": {
        "original_header": "Required third-party tools",
        "type": "Text_excerpt",
        "value": "The package relies on the RDKit (https://rdkit.org/) and BioPython (https://biopython.org/) packages to map the BILN peptide and generate different molecular formats.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Boehringer-Ingelheim/pyPept/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Boehringer-Ingelheim/pyPept/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 10
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Boehringer-Ingelheim/pyPept/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Boehringer-Ingelheim/pyPept"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "pyPept"
      },
      "source": "https://raw.githubusercontent.com/Boehringer-Ingelheim/pyPept/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick installation",
        "parent_header": [
          "pyPept"
        ],
        "type": "Text_excerpt",
        "value": "We recommend creating a conda environment with python 3.9\n```Bash\nconda create -n pypept python=3.9\nconda activate pypept\n```\nThe remaining dependencies such as BioPython and Pandas can be installed using the `setup.py` file provided in the code repository, which uses python package managers to easily install the required modules. The script can be called with:\n```Bash\npip install git+https://github.com/Boehringer-Ingelheim/pyPept.git\n```\n\nThat's all there is to installation! The main pyPept BILN-to-structure pipeline can be run using the provided `run_pyPept` CLI tool, or by using pyPept modules directly in a python script.\nExamples of both cases are described in the next section.\n"
      },
      "source": "https://raw.githubusercontent.com/Boehringer-Ingelheim/pyPept/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9425489563792249,
      "result": {
        "original_header": "Required third-party tools",
        "type": "Text_excerpt",
        "value": "The package relies on the RDKit (https://rdkit.org/) and BioPython (https://biopython.org/) packages to map the BILN peptide and generate different molecular formats.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Boehringer-Ingelheim/pyPept/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9948728369230782,
      "result": {
        "original_header": "Tests",
        "type": "Text_excerpt",
        "value": "A set of unit tests are available in the `tests` folder. These can be run separately per module by calling each test script, or all can be tested at the same time using the `test.py` file.\n```Bash\npython test.py\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/Boehringer-Ingelheim/pyPept/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.9202765977328581,
      "result": {
        "original_header": "Tests",
        "type": "Text_excerpt",
        "value": "A set of unit tests are available in the `tests` folder. These can be run separately per module by calling each test script, or all can be tested at the same time using the `test.py` file.\n```Bash\npython test.py\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/Boehringer-Ingelheim/pyPept/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Boehringer-Ingelheim/pyPept/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2023 Boehringer Ingelheim\nCopyright (c) 2021 Pistoia Alliance HELM Project\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/Boehringer-Ingelheim/pyPept/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "pyPept"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "Boehringer-Ingelheim"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 113648,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Boehringer-Ingelheim/pyPept/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "rochoa85",
          "type": "User"
        },
        "date_created": "2023-08-23T07:38:49Z",
        "date_published": "2023-08-29T09:34:24Z",
        "description": "Briefly, the package works as follows:\r\n\r\nThe pyPept Sequence class converts the input line notation into a Sequence object, which is an ordered list of monomers together with all of the connectivity information necessary to accurately build the molecule. The Molecule class takes this Sequence object and creates a molecule object with a sanitized 2D representation. The Conformer class leverages distance geometry functionality to generate a 3D conformer. \r\nHere we found it necessary to provide secondary structure constraints in the 3D generation to obtain conformations that can be close to a bioactive one. Therefore, we developed a method to predict peptide secondary structure elements, which we packaged into the SecStructPredictor class. In addition, we developed a helper class Converter which can be used to translate from HELM to BILN and back, or to convert a FASTA string into BILN.\r\n\r\nA wrapper script (run_pyPept.py) is also provided that automates the sequence-to-structure/conformer conversion of a general peptide, thus demonstrating how to connect the individual components, and providing a non-programmatic way to use pyPept by simple command line execution. ",
        "html_url": "https://github.com/Boehringer-Ingelheim/pyPept/releases/tag/Production",
        "name": "Version 1.0",
        "release_id": 119043530,
        "tag": "Production",
        "tarball_url": "https://api.github.com/repos/Boehringer-Ingelheim/pyPept/tarball/Production",
        "type": "Release",
        "url": "https://api.github.com/repos/Boehringer-Ingelheim/pyPept/releases/119043530",
        "value": "https://api.github.com/repos/Boehringer-Ingelheim/pyPept/releases/119043530",
        "zipball_url": "https://api.github.com/repos/Boehringer-Ingelheim/pyPept/zipball/Production"
      },
      "technique": "GitHub_API"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "1. Using the command-line script provided",
        "parent_header": [
          "pyPept",
          "How to run it"
        ],
        "type": "Text_excerpt",
        "value": "The script `run_pyPept` has the following arguments:\n\n```  \nusage: run_pyPept.py [-h] (--biln string | --helm string | --fasta string) \n                       [--depiction text] [--prefix text] [--secstruct text] [--noconf] \n                       [--imagesize dim dim] [--logfile filename] [-v]\n\nGenerate atomistic 2D and 3D representations of peptides from \ngiven monomer sequences.\n\nMain arguments:\n  -h, --help           show this help message and exit\n  --biln string        BILN string with the peptide to analyze.\n  --helm string        HELM string with the peptide to analyze.\n  --fasta string       FASTA string with the peptide to analyze. \n                       Only natural amino acids are allowed.\n\nAdditional options:\n  --depiction text     Method to generate the 2D image. \n                       Two options are supported: 'local' (default) or 'rdkit'.\n  --prefix text        Name used in the output files. The default is 'peptide'.\n  --secstruct text     Use the given secondary structure. \n                       Otherwise, the secondary structure is predicted and used.\n  --sdf2D              Generate a 2D SDF file of the peptide.\n  --noconf             Do not generate a conformer for the peptide.\n  --imagesize dim dim  Image size for 2D depiction, default (1200, 1200).\n\nLogging options:\n  --logfile filename   Output messages to given logfile, default is stderr.\n  -v, --verbose        Increase output verbosity\n```\n\nThe only required variable is the peptide, which can be provided directly using the BILN format (--biln), or both HELM (--helm) and FASTA (--fasta) can be provided too. For the latest two, the pipeline script converts the format to a BILN representation. For FASTA only natural amino acids are allowed.\n\nSpecifically, pyPept can interconvert between HELM and FASTA formats to BILN, which is internally used by pyPept to facilitate the readability of the molecules and to guarantee a correct chemistry of the peptides during the generation of the RDKit molecular object. Some examples of different modified peptides are shown below:\n\n| BILN | HELM | FASTA |\n| --- | --- | --- |\n| P-E-P-T-I-D-E | PEPTIDE1{P.E.P.T.I.D.E}$$$$V2.0 |\tPEPTIDE |\n| ac-D-T-H-F-E-I-A-am | PEPTIDE1{[ac].D.T.H.F.E.I.A.[am]}$$$$V2.0 | None |\n| C(1,3)-A-A-A-C(1,3) | PEPTIDE1{C.A.A.A.C}$PEPTIDE1,PEPTIDE1,1:R3-5:R3$$$V2.0 | CAAAC |\n| A-G-Q-A-A-K(1,3)-E-F-I-A-A.G-L-E-E(1,3) | PEPTIDE1{A.G.Q.A.A.K.E.F.I.A.A}PEPTIDE2{G.L.E.E}$PEPTIDE1,PEPTIDE2,6:R3-4:R3$$$V2.0 | None |\n| N-Iva-F-D-I-meT-N-A-L-W-Y-Aib-K | PEPTIDE1{N.[Iva].F.D.I.[meT].N.A.L.W.Y.[Aib].K}$$$$V2.0 | None |\n\nAdditional options can be included based on the description provided in the help menu. An example using the biln sequence 'ac-D-T-H-F-E-I-A-am' is shown (``ac`` and ``am`` represent the terminal acid and amine, respectively, and are defined monomers as part of the pyPept package):\n\n```Bash\nrun_pyPept --biln ac-D-T-H-F-E-I-A-am\n```\n"
      },
      "source": "https://raw.githubusercontent.com/Boehringer-Ingelheim/pyPept/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2. Using the modules individually",
        "parent_header": [
          "pyPept",
          "How to run it"
        ],
        "type": "Text_excerpt",
        "value": "If the functions want to be used separately, these are examples for each available class. The first thing is to import the modules and main functions:\n\n**NOTE: In the `examples` folder we provide a set of scripts to run some of the modules for generating 2D and 3D  representations using the peptides shown in the table with different formats (BILN and HELM).**\n\n```Python\n# PyPept modules\nfrom pyPept.sequence import Sequence\nfrom pyPept.sequence import correct_pdb_atoms\nfrom pyPept.molecule import Molecule\nfrom pyPept.converter import Converter\nfrom pyPept.conformer import Conformer\nfrom pyPept.conformer import SecStructPredictor\n\n# RDKit modules\nfrom rdkit import Chem\nfrom rdkit.Chem import Draw\n```\n\nThe biln peptide can be assigned to a `biln` variable in order to create a sequence object:\n\n```Python\n# Start the Sequence object\nbiln = \"ac-D-T-H-F-E-I-A-am\"\nseq = Sequence(biln)\n# Correct atom names in the sequence object\nseq = correct_pdb_atoms(seq)\n```\n\nIf the peptide is in HELM notation, it can be converted to BILN using the following function:\n\n```Python\n# Call the converter to change from HELM to BILN\nfrom pyPept.converter import Converter\n\nhelm = \"PEPTIDE1{[ac].D.T.H.F.E.I.A.[am]}$$$$V2.0\"\nb = Converter(helm=helm)\nbiln = b.get_biln()\nseq = Sequence(biln)\n# Correct atom names in the sequence object\nseq = correct_pdb_atoms(seq)\n```\n\n\nThe Sequence class can receive a `path` variable if the ``data`` folder (including the monomer library) is located in a different location in the system. After creating the sequence, the monomers in the RDKit format can be inspected using a loop as follows:\n\n```Python\n# Loop wit the included monomers\nmm_list = seq.s_monomers\nfor i, monomer in enumerate(mm_list):\n    mon = monomer['m_romol']\n```\n\nThe Molecule class can be called after creating the Sequence object. An example to generate the RDKit object, print the SMILES and generate a 2D depiction is as follows:\n\n```Python\n# Generate the RDKit object\nmol = Molecule(seq)\nromol = mol.get_molecule(fmt='ROMol')\nprint(\"The SMILES of the peptide is: {}\".format(Chem.MolToSmiles(romol)))\nDraw.MolToFile(romol, 'peptide.png', size=(1200, 1200))\n```\n\nAfter having the RDKit molecule object, the user can call the Conformer class and generate a PDB file with predicted secondary structure restraints as explained in the paper, using a residue-like format with corrected atom names. The secondary structure can be provided manually if required. The main categories are: B (beta bridge), H (alpha helix). E (beta strand), S (bend),T (turn) and G (3/10 helix)\n\nAn example to generate a conformer is shown:\n\n```Python\n# Create the peptide conformer with corrected atom names and secondary structure\n# Obtain peptide main chain to predict the secondary structure\nfasta = Conformer.get_peptide(biln)\nsecstruct = SecStructPredictor.predict_active_ss(fasta)\n# Generate the conformer\nromol = Conformer.generate_conformer(romol, secstruct, generate_pdb=True)\n```\n\nThe RDKit object has now embedded the conformer with the correct atom names. Optionally the user can pass arguments to change the name of the output files, as well as provide a different path to access the data folder.\n"
      },
      "source": "https://raw.githubusercontent.com/Boehringer-Ingelheim/pyPept/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-03 23:53:08",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 57
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Support",
        "parent_header": [
          "pyPept"
        ],
        "type": "Text_excerpt",
        "value": "For inquiries please contact: thomas.fox@boehringer-ingelheim.com .\n"
      },
      "source": "https://raw.githubusercontent.com/Boehringer-Ingelheim/pyPept/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ]
}