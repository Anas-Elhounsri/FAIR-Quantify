{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "License and credits",
        "parent_header": [
          "DMFF",
          "About DMFF"
        ],
        "type": "Text_excerpt",
        "value": "The project DMFF is licensed under [GNU LGPL v3.0](LICENSE). If you use this code in any future publications, please cite this using `Xinyan Wang, Jichen Li, Lan Yang, Feiyang Chen, Yingze Wang, Junhan Chang, Junmin Chen, Wei Feng, Linfeng Zhang, and Kuang Yu \nJournal of Chemical Theory and Computation 2023 19 (17), 5897-5909\nDOI: 10.1021/acs.jctc.2c01297`\n"
      },
      "source": "https://raw.githubusercontent.com/deepmodeling/DMFF/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/deepmodeling/DMFF"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-02-14T01:35:50Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-29T03:06:57Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DMFF (Differentiable Molecular Force Field) is a Jax-based python package that provides a full differentiable implementation of molecular force field models. "
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9983201919277293,
      "result": {
        "original_header": "About DMFF",
        "type": "Text_excerpt",
        "value": "**DMFF** (**D**ifferentiable **M**olecular **F**orce **F**ield) is a Jax-based python package that provides a full differentiable implementation of molecular force field models. This project aims to establish an extensible codebase to minimize the efforts in force field parameterization, and to ease the force and virial tensor evaluations for advanced complicated potentials (e.g., polarizable models with geometry-dependent atomic parameters). Currently, this project mainly focuses on the molecular systems such as: water, biological macromolecules (peptides, proteins, nucleic acids), organic polymers, and small organic molecules (organic electrolyte, drug-like molecules) etc. We support both the conventional point charge models (OPLS and AMBER like) and multipolar polarizable models (AMOEBA and MPID like). The entire project is backed by the XLA technique in JAX, thus can be \"jitted\" and run in GPU devices much more efficiently compared to normal python codes. \nThe behavior of organic molecular systems (e.g., protein folding, polymer structure, etc.) is often determined by a complex effect of many different types of interactions. The existing organic molecular force fields are mainly empirically fitted and their performance relies heavily on error cancellation. Therefore, the transferability and the prediction power of these force fields are insufficient. For new molecules, the parameter fitting process requires essential manual intervention and can be quite cumbersome. In order to automate the parametrization process and increase the robustness of the model, it is necessary to apply modern AI techniques in conventional force field development. This project serves for this purpose by utilizing the automatic differentiable programming technique to develop a codebase, which allows a more convenient incorporation of modern AI optimization techniques. It also helps the realization of many exciting functions including (but not limited to): hybrid machine learning/force field models and parameter optimization based on trajectory.\n \n"
      },
      "source": "https://raw.githubusercontent.com/deepmodeling/DMFF/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9746416386416022,
      "result": {
        "original_header": "Code Structure",
        "type": "Text_excerpt",
        "value": "The code is organized as follows: \n+ `examples`: demos presented in Jupyter Notebook.\n+ `docs`: documentation.\n+ `package`: files for constructing packages or images, such as conda recipe and docker files.\n+ `tests`: unit tests.\n+ `dmff`: DMFF python codes\n+ `dmff/api`: source code of application programming interface of DMFF.\n+ `dmff/admp`: source code of automatic differentiable multipolar polarizable (ADMP) force field module.\n+ `dmff/classical`: source code of classical force field module.\n+ `dmff/common`: source code of common functions, such as neighbor list.\n+ `dmff/sgnn`: source of subgragh neural network force field model.\n+ `dmff/eann`: source of embedded atom neural network force field model.\n+ `dmff/generators`: source code of force generators.\n+ `dmff/operators`: source code of operators. \n"
      },
      "source": "https://raw.githubusercontent.com/deepmodeling/DMFF/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/deepmodeling/DMFF/tree/master/docs"
      },
      "technique": "file_exploration"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/deepmodeling/DMFF/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/deepmodeling/DMFF/master/docs/dev_guide/generator.ipynb"
      },
      "source": "https://raw.githubusercontent.com/deepmodeling/DMFF/master/docs/dev_guide/generator.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/deepmodeling/DMFF/master/docs/user_guide/DMFF_example.ipynb"
      },
      "source": "https://raw.githubusercontent.com/deepmodeling/DMFF/master/docs/user_guide/DMFF_example.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/deepmodeling/DMFF/master/docs/user_guide/test.ipynb"
      },
      "source": "https://raw.githubusercontent.com/deepmodeling/DMFF/master/docs/user_guide/test.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/deepmodeling/DMFF/master/examples/fluctuated_leading_term_waterff/demo.ipynb"
      },
      "source": "https://raw.githubusercontent.com/deepmodeling/DMFF/master/examples/fluctuated_leading_term_waterff/demo.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/deepmodeling/DMFF/master/examples/lennard_jones_opt/opt.ipynb"
      },
      "source": "https://raw.githubusercontent.com/deepmodeling/DMFF/master/examples/lennard_jones_opt/opt.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/deepmodeling/DMFF/master/examples/classical/demo.ipynb"
      },
      "source": "https://raw.githubusercontent.com/deepmodeling/DMFF/master/examples/classical/demo.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 43
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/deepmodeling/DMFF/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "deepmodeling/DMFF"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DMFF"
      },
      "source": "https://raw.githubusercontent.com/deepmodeling/DMFF/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/deepmodeling/DMFF/master/examples/peg_slater_isa/fit.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# 2. Installation\n## 2.1 Install Dependencies\n+ Create conda environment:\n```\nconda create -n dmff python=3.9 --yes\nconda activate dmff\n```\n+ Install [jax](https://github.com/google/jax) (select the correct cuda version, see more details in the Jax installation guide):\n```bash\n# CPU version\npip install \"jax[cpu]==0.4.14\"\n# GPU version\npip install \"jax[cuda11_local]==0.4.14\" -f https://storage.googleapis.com/jax-releases/jax_cuda_releases.html\n```\n+ Install [mdtraj](https://github.com/mdtraj/mdtraj), [optax](https://github.com/deepmind/optax), [jaxopt](https://github.com/google/jaxopt) and [pymbar](https://github.com/choderalab/pymbar):\n```bash\nconda install -c conda-forge mdtraj==1.9.7\npip install optax==0.1.3 pymbar==4.0.1 jaxopt==0.8.1\n```\n+ Install [mdtraj](https://github.com/mdtraj/mdtraj), [optax](https://github.com/deepmind/optax) and [pymbar](https://github.com/choderalab/pymbar):\n```bash\nconda install -c conda-forge mdtraj==1.9.7\npip install optax==0.1.3\npip install pymbar==4.0.1\n```\n+ Install [OpenMM](https://openmm.org/):\n```bash\nconda install -c conda-forge openmm==7.7.0\n```\n+ Install [RDKit](https://www.rdkit.org/) (required for SMIRKS-based parametrization):\n```bash\nconda install -c conda-forge rdkit\n```\n## 2.2 Install DMFF from Source Code\nOne can download the DMFF source code from github and install it using `pip`. :\n```bash\ngit clone https://github.com/deepmodeling/DMFF.git\ncd DMFF\npip install . --user\n```\n\n## 2.3 Test Installation\nTo test if DMFF is correctly installed, you can run the following commands in an interactive python session:\n```python\n>>> import dmff\n>>> import dmff.admp\n```\n\nYou can also run the example scripts to test whether DMFF is installed correctly.\n```bash\ncd ./examples/water_fullpol\npython ./run.py\n\n```\nNote that the scripts will run slower than expect if `DO_JIT = True` in `dmff/settings.py`. This is because the programm will do the jit compilation when a function is invoked in the first time.\n"
      },
      "source": "https://raw.githubusercontent.com/deepmodeling/DMFF/master/docs/user_guide/2.installation.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "User Guide",
        "parent_header": [
          "DMFF"
        ],
        "type": "Text_excerpt",
        "value": "+ [1. Introduction](docs/user_guide/1.introduction.md)\n+ [2. Installation](docs/user_guide/2.installation.md)\n+ [3. Basic Usage](docs/user_guide/3.usage.md)\n+ [4. Modules](docs/user_guide/4.modules.md)\n  + [Classical](docs/user_guide/4.1classical.md)\n  + [ADMP](docs/user_guide/4.2ADMPPmeForce.md)\n  + [Qeq](docs/user_guide/4.3ADMPQeqForce.md)\n  + [Machine Learning](docs/user_guide/4.4MLForce.md)\n  + [Optimization](docs/user_guide/4.5Optimization.md)\n  + [Mbar Estimator](docs/user_guide/4.6MBAR.md)\n  + [OpenMM Plugin](docs/user_guide/4.7OpenMMplugin.md)\n+ [5. Advanced examples](docs/user_guide/DMFF_example.ipynb)\n+ [And here is a tutorial notebook of the basic usage of DMFF. Welcome to read it and get started with DMFF!](docs/user_guide/test.ipynb)\n\n[And here is a tutorial notebook, which would tell you some basic usage of DMFF. Welcome to read it and get started witn DMFF\uff01](docs/user_guide/test.ipynb)\n"
      },
      "source": "https://raw.githubusercontent.com/deepmodeling/DMFF/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Developer Guide",
        "parent_header": [
          "DMFF"
        ],
        "type": "Text_excerpt",
        "value": "+ [1. Introduction](docs/dev_guide/introduction.md)\n+ [2. Software architecture](docs/dev_guide/arch.md)\n+ [3. Coding conventions](docs/dev_guide/convention.md)\n+ [4. Document writing](docs/dev_guide/write_docs.md)\n+ [5. An example for developing: how to write a generator?](docs/dev_guide/generator.ipynb)\n"
      },
      "source": "https://raw.githubusercontent.com/deepmodeling/DMFF/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/deepmodeling/DMFF/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "GNU Lesser General Public License v3.0",
        "spdx_id": "LGPL-3.0",
        "type": "License",
        "url": "https://api.github.com/licenses/lgpl-3.0",
        "value": "https://api.github.com/licenses/lgpl-3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "                   GNU LESSER GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\n  This version of the GNU Lesser General Public License incorporates\nthe terms and conditions of version 3 of the GNU General Public\nLicense, supplemented by the additional permissions listed below.\n\n  0. Additional Definitions.\n\n  As used herein, \"this License\" refers to version 3 of the GNU Lesser\nGeneral Public License, and the \"GNU GPL\" refers to version 3 of the GNU\nGeneral Public License.\n\n  \"The Library\" refers to a covered work governed by this License,\nother than an Application or a Combined Work as defined below.\n\n  An \"Application\" is any work that makes use of an interface provided\nby the Library, but which is not otherwise based on the Library.\nDefining a subclass of a class defined by the Library is deemed a mode\nof using an interface provided by the Library.\n\n  A \"Combined Work\" is a work produced by combining or linking an\nApplication with the Library.  The particular version of the Library\nwith which the Combined Work was made is also called the \"Linked\nVersion\".\n\n  The \"Minimal Corresponding Source\" for a Combined Work means the\nCorresponding Source for the Combined Work, excluding any source code\nfor portions of the Combined Work that, considered in isolation, are\nbased on the Application, and not on the Linked Version.\n\n  The \"Corresponding Application Code\" for a Combined Work means the\nobject code and/or source code for the Application, including any data\nand utility programs needed for reproducing the Combined Work from the\nApplication, but excluding the System Libraries of the Combined Work.\n\n  1. Exception to Section 3 of the GNU GPL.\n\n  You may convey a covered work under sections 3 and 4 of this License\nwithout being bound by section 3 of the GNU GPL.\n\n  2. Conveying Modified Versions.\n\n  If you modify a copy of the Library, and, in your modifications, a\nfacility refers to a function or data to be supplied by an Application\nthat uses the facility (other than as an argument passed when the\nfacility is invoked), then you may convey a copy of the modified\nversion:\n\n   a) under this License, provided that you make a good faith effort to\n   ensure that, in the event an Application does not supply the\n   function or data, the facility still operates, and performs\n   whatever part of its purpose remains meaningful, or\n\n   b) under the GNU GPL, with none of the additional permissions of\n   this License applicable to that copy.\n\n  3. Object Code Incorporating Material from Library Header Files.\n\n  The object code form of an Application may incorporate material from\na header file that is part of the Library.  You may convey such object\ncode under terms of your choice, provided that, if the incorporated\nmaterial is not limited to numerical parameters, data structure\nlayouts and accessors, or small macros, inline functions and templates\n(ten or fewer lines in length), you do both of the following:\n\n   a) Give prominent notice with each copy of the object code that the\n   Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the object code with a copy of the GNU GPL and this license\n   document.\n\n  4. Combined Works.\n\n  You may convey a Combined Work under terms of your choice that,\ntaken together, effectively do not restrict modification of the\nportions of the Library contained in the Combined Work and reverse\nengineering for debugging such modifications, if you also do each of\nthe following:\n\n   a) Give prominent notice with each copy of the Combined Work that\n   the Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the Combined Work with a copy of the GNU GPL and this license\n   document.\n\n   c) For a Combined Work that displays copyright notices during\n   execution, include the copyright notice for the Library among\n   these notices, as well as a reference directing the user to the\n   copies of the GNU GPL and this license document.\n\n   d) Do one of the following:\n\n       0) Convey the Minimal Corresponding Source under the terms of this\n       License, and the Corresponding Application Code in a form\n       suitable for, and under terms that permit, the user to\n       recombine or relink the Application with a modified version of\n       the Linked Version to produce a modified Combined Work, in the\n       manner specified by section 6 of the GNU GPL for conveying\n       Corresponding Source.\n\n       1) Use a suitable shared library mechanism for linking with the\n       Library.  A suitable mechanism is one that (a) uses at run time\n       a copy of the Library already present on the user's computer\n       system, and (b) will operate properly with a modified version\n       of the Library that is interface-compatible with the Linked\n       Version.\n\n   e) Provide Installation Information, but only if you would otherwise\n   be required to provide such information under section 6 of the\n   GNU GPL, and only to the extent that such information is\n   necessary to install and execute a modified version of the\n   Combined Work produced by recombining or relinking the\n   Application with a modified version of the Linked Version. (If\n   you use option 4d0, the Installation Information must accompany\n   the Minimal Corresponding Source and Corresponding Application\n   Code. If you use option 4d1, you must provide the Installation\n   Information in the manner specified by section 6 of the GNU GPL\n   for conveying Corresponding Source.)\n\n  5. Combined Libraries.\n\n  You may place library facilities that are a work based on the\nLibrary side by side in a single library together with other library\nfacilities that are not Applications and are not covered by this\nLicense, and convey such a combined library under terms of your\nchoice, if you do both of the following:\n\n   a) Accompany the combined library with a copy of the same work based\n   on the Library, uncombined with any other library facilities,\n   conveyed under the terms of this License.\n\n   b) Give prominent notice with the combined library that part of it\n   is a work based on the Library, and explaining where to find the\n   accompanying uncombined form of the same work.\n\n  6. Revised Versions of the GNU Lesser General Public License.\n\n  The Free Software Foundation may publish revised and/or new versions\nof the GNU Lesser General Public License from time to time. Such new\nversions will be similar in spirit to the present version, but may\ndiffer in detail to address new problems or concerns.\n\n  Each version is given a distinguishing version number. If the\nLibrary as you received it specifies that a certain numbered version\nof the GNU Lesser General Public License \"or any later version\"\napplies to it, you have the option of following the terms and\nconditions either of that published version or of any later version\npublished by the Free Software Foundation. If the Library as you\nreceived it does not specify a version number of the GNU Lesser\nGeneral Public License, you may choose any version of the GNU Lesser\nGeneral Public License ever published by the Free Software Foundation.\n\n  If the Library as you received it specifies that a proxy can decide\nwhether future versions of the GNU Lesser General Public License shall\napply, that proxy's public statement of acceptance of any version is\npermanent authorization for you to choose that version for the\nLibrary.\n"
      },
      "source": "https://raw.githubusercontent.com/deepmodeling/DMFF/master/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License and credits",
        "parent_header": [
          "DMFF",
          "About DMFF"
        ],
        "type": "Text_excerpt",
        "value": "The project DMFF is licensed under [GNU LGPL v3.0](LICENSE). If you use this code in any future publications, please cite this using `Xinyan Wang, Jichen Li, Lan Yang, Feiyang Chen, Yingze Wang, Junhan Chang, Junmin Chen, Wei Feng, Linfeng Zhang, and Kuang Yu \nJournal of Chemical Theory and Computation 2023 19 (17), 5897-5909\nDOI: 10.1021/acs.jctc.2c01297`\n"
      },
      "source": "https://raw.githubusercontent.com/deepmodeling/DMFF/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DMFF"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "deepmodeling"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 627924,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 107564,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 17122,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 3135,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 1883,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "SWIG",
        "size": 1494,
        "type": "Programming_language",
        "value": "SWIG"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Cuda",
        "size": 585,
        "type": "Programming_language",
        "value": "Cuda"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "PureBasic",
        "size": 58,
        "type": "Programming_language",
        "value": "PureBasic"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/deepmodeling/DMFF/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "WangXinyan940",
          "type": "User"
        },
        "date_created": "2023-11-09T06:31:11Z",
        "date_published": "2023-11-09T14:32:37Z",
        "description": "DMFF v1.0.0 Released!\r\n\r\nNew features:\r\n- Implemented QEQ electrostatic potential under constant charge and constant potential modes.\r\n- Refactored the API layer, enhancing frontend robustness.\r\n- Support calculating electrostatic potential in non-periodic systems for point charge, BCC charge, QEQ model, and multipole model.\r\n- Added dmff.api.DMFFTopology class for storing topological information.\r\n- Added dmff.api.ParamSet class, supporting Pytree data structures for improved management of force field parameters.\r\n- Improved computation efficiency of PME kernel on GPU.\r\n- Implemented backend/save_dmff2tf.py, which stores DMFF potential as a TensorFlow module for use in C/C++ API calls.\r\n- Developed an OpenMM plugin, enabling the use of DMFF potential within OpenMM.",
        "html_url": "https://github.com/deepmodeling/DMFF/releases/tag/v1.0.0",
        "name": "v1.0.0 Released",
        "release_id": 128657843,
        "tag": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/deepmodeling/DMFF/tarball/v1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/deepmodeling/DMFF/releases/128657843",
        "value": "https://api.github.com/repos/deepmodeling/DMFF/releases/128657843",
        "zipball_url": "https://api.github.com/repos/deepmodeling/DMFF/zipball/v1.0.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "WangXinyan940",
          "type": "User"
        },
        "date_created": "2022-12-01T05:48:13Z",
        "date_published": "2022-12-02T14:41:23Z",
        "description": "DMFF v0.2.0 Released!\r\n\r\nNew features:\r\n\r\n- Support statistical property optimization using differentiable MBAR estimator\r\n- Support NBFix in Lennard-Jones potential\r\n- Support assigning parameters based on SMIRKS-pattern\r\n- Support bond charge correction (BCC) and virtual site\r\n- Support building neighborlist with `freud` package",
        "html_url": "https://github.com/deepmodeling/DMFF/releases/tag/v0.2.0",
        "name": "v0.2.0 Released",
        "release_id": 84662681,
        "tag": "v0.2.0",
        "tarball_url": "https://api.github.com/repos/deepmodeling/DMFF/tarball/v0.2.0",
        "type": "Release",
        "url": "https://api.github.com/repos/deepmodeling/DMFF/releases/84662681",
        "value": "https://api.github.com/repos/deepmodeling/DMFF/releases/84662681",
        "zipball_url": "https://api.github.com/repos/deepmodeling/DMFF/zipball/v0.2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "Ericwang6",
          "type": "User"
        },
        "date_created": "2022-06-17T13:22:28Z",
        "date_published": "2022-06-17T13:34:57Z",
        "description": "DMFF v0.1.1 Released!\r\n- Fix bugs in parsing multiple force field files\r\n- Fix bugs in LJ force\r\n- Refine examples and installation code",
        "html_url": "https://github.com/deepmodeling/DMFF/releases/tag/v0.1.1",
        "name": "v0.1.1 Released",
        "release_id": 69717665,
        "tag": "v0.1.1",
        "tarball_url": "https://api.github.com/repos/deepmodeling/DMFF/tarball/v0.1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/deepmodeling/DMFF/releases/69717665",
        "value": "https://api.github.com/repos/deepmodeling/DMFF/releases/69717665",
        "zipball_url": "https://api.github.com/repos/deepmodeling/DMFF/zipball/v0.1.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "Ericwang6",
          "type": "User"
        },
        "date_created": "2022-06-14T09:58:18Z",
        "date_published": "2022-06-14T10:07:03Z",
        "description": "DMFF v0.1.0 released!\r\n\r\n+ Support differentiable calculation of classical, multiple polarizable and subgragh neural network force fields\r\n+ Refined documents and examples\r\n+ CI/CD workflows",
        "html_url": "https://github.com/deepmodeling/DMFF/releases/tag/v0.1.0",
        "name": "v0.1.0 Released!",
        "release_id": 69383396,
        "tag": "v0.1.0",
        "tarball_url": "https://api.github.com/repos/deepmodeling/DMFF/tarball/v0.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/deepmodeling/DMFF/releases/69383396",
        "value": "https://api.github.com/repos/deepmodeling/DMFF/releases/69383396",
        "zipball_url": "https://api.github.com/repos/deepmodeling/DMFF/zipball/v0.1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "usage",
    "faq",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-04 00:22:41",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 151
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Support and Contribution",
        "parent_header": [
          "DMFF"
        ],
        "type": "Text_excerpt",
        "value": "Please visit our repository on [GitHub](https://github.com/deepmodeling/DMFF) for the library source code. Any issues or bugs may be reported at our issue tracker. All contributions to DMFF are welcomed via pull requests!\n"
      },
      "source": "https://raw.githubusercontent.com/deepmodeling/DMFF/master/README.md",
      "technique": "header_analysis"
    }
  ]
}