{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Input reference genomenput-representation.png",
        "parent_header": [
          "PanGenie",
          "Required Input files"
        ],
        "type": "Text_excerpt",
        "value": "PanGenie also needs a reference genome in FASTA format which can be provided using option ``-r``.\n\n## Usage\n\nPanGenie can be run using the command shown below:\n\n``./build/src/PanGenie -i <reads.fa/fq> -r <reference.fa> -v <variants.vcf> -t <nr threads for genotyping> -j <nr threads for k-mer counting>``\n\nThe result will be a VCF file containing genotypes for the variants provided in the input VCF. Per default, the name of the output VCF is `` result_genotyping.vcf ``. You can specify the prefix of the output file using option ``-o <prefix>``, i.e. the output file will be named as ``<prefix>_genotyping.vcf ``.\nThe full list of options is provided below.\n\n\n```bat\n\n\nprogram: PanGenie - genotyping and phasing based on kmer-counting and known haplotype sequences.\nauthor: Jana Ebler\n\nusage: PanGenie [options] -i <reads.fa/fq> -r <reference.fa> -v <variants.vcf>\n\noptions:\n\t-c\tcount all read kmers instead of only those located in graph.\n\t-d\tdo not add reference as additional path.\n\t-e VAL\tsize of hash used by jellyfish. (default: 3000000000).\n\t-g\trun genotyping (Forward backward algorithm, default behaviour).\n\t-i VAL\tsequencing reads in FASTA/FASTQ format or Jellyfish database in jf format.\n\t\tNOTE: INPUT FASTA/Q FILE MUST NOT BE COMPRESSED. (required).\n\t-j VAL\tnumber of threads to use for kmer-counting (default: 1).\n\t-k VAL\tkmer size (default: 31).\n\t-o VAL\tprefix of the output files. NOTE: the given path must not include non-existent folders. (default: result).\n\t-p\trun phasing (Viterbi algorithm). Experimental feature.\n\t-r VAL\treference genome in FASTA format.\n\t\tNOTE: INPUT FASTA FILE MUST NOT BE COMPRESSED. (required).\n\t-s VAL\tname of the sample (will be used in the output VCFs) (default: sample).\n\t-t VAL\tnumber of threads to use for core algorithm. Largest number of threads possible is the number of chromosomes given in the VCF (default: 1).\n\t-u\toutput genotype ./. for variants not covered by any unique kmers.\n\t-v VAL\tvariants in VCF format. \n\t\tNOTE: INPUT VCF FILE MUST NOT BE COMPRESSED. (required).\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/hhaentze/MaskedPangenie/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "PanGenie"
        ],
        "type": "Text_excerpt",
        "value": "J. Ebler, P. Ebert, W. E. Clarke, T. Rausch, P. A. Audano, T. Houwaart, Y. Mao, J. Korbel, E. E. Eichler,\nM. C. Zody, A. T. Dilthey, and T. Marschall. Pangenome-based genome inference. Nature genetics,\n54(4):518\u2013525, 2022.\n"
      },
      "source": "https://raw.githubusercontent.com/hhaentze/MaskedPangenie/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/hhaentze/MaskedPangenie"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-11-19T06:27:58Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-04-10T07:43:00Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Modified version of PanGenie that supports spaced seeds"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9883794008899174,
      "result": {
        "original_header": "MaskedPanGenie",
        "type": "Text_excerpt",
        "value": "This is a modified version of PanGenie that supports spaced seeds.  \nSpaced seeds (patterns of care and don't care positions) are more resistent to sequencing errors than conventional contiguous k-mers and may be able to increase sensitivity of Bioinformatics applications.\nMaskedPanGenie implements this by allowing to add a spaced seed as optional parameter (-m), which will be used for the detection of unique \"spaced\" kmers in the provided pangenome graph. \nThese spaced k-mers will then be compared to spaced k-mers of the reads. PanGenie uses the k-mer counter Jellyfish for this, but unfortunately Jellyfish does not support spaced seeds. Hence, I developed a lightweight tool \"MaskJelly\" which can be used in combination with Jellyfish to create dictionaries of spaced k-mers *before* MaskedPanGenie gets executed. \nPlease note that this additional preprocessing step requires additional time and resources, which slows the genotyping pipeline down. This problem could be resolved by implementing a counting tool specialised on spaced k-mers, but this is outside of my technical expertise. MaskedPanGenie is intended as a prototype to analyse the effects of spaced seeds and does not aim to be production-level software. \n \n"
      },
      "source": "https://raw.githubusercontent.com/hhaentze/MaskedPangenie/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9964318375030882,
      "result": {
        "original_header": "PanGenie",
        "type": "Text_excerpt",
        "value": "A short-read genotyper for various types of genetic variants (such as SNPs, indels and structural variants) represented in a pangenome graph. Genotypes are computed based on read k-mer counts and a panel of known haplotypes. A description of the method can be found here: https://doi.org/10.1038/s41588-022-01043-w \n"
      },
      "source": "https://raw.githubusercontent.com/hhaentze/MaskedPangenie/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9924231920632325,
      "result": {
        "original_header": "Required Input files",
        "type": "Text_excerpt",
        "value": "PanGenie is a pangenome-based genotyper using short-read data. It computes genotypes for variants represented as bubbles in a pangenome graph by taking information of already known haplotypes (represented as paths through the graph) into account. The required input files are described in detail below. \n \n"
      },
      "source": "https://raw.githubusercontent.com/hhaentze/MaskedPangenie/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9220080810106834,
      "result": {
        "original_header": "Input variants",
        "type": "Text_excerpt",
        "value": "PanGenie expects a directed and acyclic pangenome graph as input (``-v`` option).\nThis graph is represented in terms of a VCF file that needs to have certain properties: \n- **multi-sample** - it needs to contain haplotype information of at least one known sample\n- **fully-phased** - haplotype information of the known panel samples are represented by phased genotypes and each sample must be phased in a single block (i.e. from start to end).\n- **non-overlapping variants** - the VCF represents a pangenome graph. Therefore, overlapping variation must be represented in a single, multi-allelic variant record. \nWe typically generate such VCFs from haplotype-resolved assemblies using this pipeline: https://bitbucket.org/jana_ebler/vcf-merging . However, any VCF with the properties listed above can be used as input. \n \n"
      },
      "source": "https://raw.githubusercontent.com/hhaentze/MaskedPangenie/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8510293798917727,
      "result": {
        "original_header": "What should I do if my input VCF contains overlapping variants?",
        "type": "Text_excerpt",
        "value": "In this case you can run PanGenie using the Snakemake pipeline provided in ``pipelines/run-from-callset/``. This automatically merges overlapping alleles into mult-allelic VCF, runs PanGenie and later converts the output VCF back to the original representation.\n \n"
      },
      "source": "https://raw.githubusercontent.com/hhaentze/MaskedPangenie/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9679130692469347,
      "result": {
        "original_header": "Input reads",
        "type": "Text_excerpt",
        "value": "PanGenie is k-mer based and thus expects **short reads** as input. Reads must be provided in a single FASTA or FASTQ file using the ``-i`` option.\n \n"
      },
      "source": "https://raw.githubusercontent.com/hhaentze/MaskedPangenie/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9802680044832401,
      "result": {
        "original_header": "Notes",
        "type": "Text_excerpt",
        "value": "The largest panel we have run PanGenie on so far consisted of 44 samples (88 haplotypes). On this data, PanGenie needed 53 CPU hours (03:15 h wallclock time using 24 cores) and 153 GB of memory in order to genotype 20,661,169 variants.\n \n"
      },
      "source": "https://raw.githubusercontent.com/hhaentze/MaskedPangenie/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9842072866458568,
      "result": {
        "original_header": "Limitations",
        "type": "Text_excerpt",
        "value": "The runtime of PanGenie gets slow as the number of haplotype paths increases. Due to technical reasons, the current implementation of PanGenie cannot handle more than 254 input haplotypes (127 diploid samples).\nIn order to efficiently handle panels of this size and larger, the underlying model needs to be optimized.\n \n"
      },
      "source": "https://raw.githubusercontent.com/hhaentze/MaskedPangenie/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/hhaentze/MaskedPangenie/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/hhaentze/MaskedPangenie/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "hhaentze/MaskedPangenie"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MaskedPanGenie"
      },
      "source": "https://raw.githubusercontent.com/hhaentze/MaskedPangenie/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hhaentze/MaskedPangenie/master/tutorial.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hhaentze/MaskedPangenie/master/images/input-representation.png"
      },
      "source": "https://raw.githubusercontent.com/hhaentze/MaskedPangenie/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Building from source using Conda",
        "parent_header": [
          "PanGenie",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "`` git clone https://jana_ebler@bitbucket.org/jana_ebler/pangenie.git``  \n`` cd pangenie``  \n`` conda env create -f environment.yml``  \n`` conda activate pangenie``   \n``mkdir build; cd build; cmake .. ; make``\n"
      },
      "source": "https://raw.githubusercontent.com/hhaentze/MaskedPangenie/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Building from source using Singularity",
        "parent_header": [
          "PanGenie",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "Use the Singularity definition file located in ``container/`` to build an (Ubuntu-based) container as follows (requires root privileges):\n\n``[sudo] singularity build pangenie.sif pangenie.def``\n\nIn all usage examples below, call the ``PanGenie`` executable as follows:\n\n``singularity exec pangenie.sif PanGenie <PARAMETERS>``\n\nFor example, to show ``PanGenie``'s command line help, use the following command:\n\n``singularity exec pangenie.sif PanGenie --help``\n\nYou can check which versions of ``PanGenie`` (git hash) and of the ``jellyfish`` library have been installed in the container by running the following commands:\n\n``singularity exec pangenie.sif cat /metadata/jellyfish.lib.version``\n\nshould produce a line like this (so, here, v2.3.0):\n\n``$ libjellyfish-2.0-2:amd64 2.3.0-4build1 libjellyfish-2.0-dev:amd64 2.3.0-4build1``\n\n``singularity exec pangenie.sif cat /metadata/pangenie.git.version``\n\nshould produce a line like this:\n\n``$ 5a1f9c5``\n\n"
      },
      "source": "https://raw.githubusercontent.com/hhaentze/MaskedPangenie/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9620194814912117,
      "result": {
        "original_header": "PanGenie",
        "type": "Text_excerpt",
        "value": "## Requirements\n* conda or Singularity \n## Installation\n \n"
      },
      "source": "https://raw.githubusercontent.com/hhaentze/MaskedPangenie/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9735891828608431,
      "result": {
        "original_header": "What should I do if my input VCF contains overlapping variants?",
        "type": "Text_excerpt",
        "value": "In this case you can run PanGenie using the Snakemake pipeline provided in ``pipelines/run-from-callset/``. This automatically merges overlapping alleles into mult-allelic VCF, runs PanGenie and later converts the output VCF back to the original representation.\n \n"
      },
      "source": "https://raw.githubusercontent.com/hhaentze/MaskedPangenie/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/hhaentze/MaskedPangenie/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2020 Jana Ebler\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/hhaentze/MaskedPangenie/master/LICENSE.md",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MaskedPangenie"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "hhaentze"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 745833,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 107555,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 3490,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 836,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hhaentze/MaskedPangenie/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirements",
        "parent_header": [
          "PanGenie"
        ],
        "type": "Text_excerpt",
        "value": "* MaskJelly https://github.com/hhaentze/MaskJelly\n* Jellyfish https://github.com/gmarcais/Jellyfish\n"
      },
      "source": "https://raw.githubusercontent.com/hhaentze/MaskedPangenie/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 00:19:46",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "PanGenie"
        ],
        "type": "Text_excerpt",
        "value": "See [example](tutorial.sh)\n\n---\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/hhaentze/MaskedPangenie/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Runtime and memory usage",
        "parent_header": [
          "PanGenie"
        ],
        "type": "Text_excerpt",
        "value": "Runtime and memory usage depend on the number of variants genotyped and the number of haplotypes present in the graph.\n\nWith the data described here: https://doi.org/10.1038/s41588-022-01043-w, PanGenie ran in 1 hour and 25 minutes walltime using 22 cores (16 CPU hours) and used 68 GB RAM.\nThe largest dataset that we have tested contained around 16M variants, 64 haplotypes and around 30x read coverage. Using 24 cores, PanGenie run in 1 hour and 46 minutes (24 CPU hours) and used 120 GB of RAM.\n"
      },
      "source": "https://raw.githubusercontent.com/hhaentze/MaskedPangenie/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Demo",
        "parent_header": [
          "PanGenie"
        ],
        "type": "Text_excerpt",
        "value": "The typical use case is to run PanGenie on a whole genome dataset. The following example is just a little demo illustrating how to run PanGenie. \n\nWe run PanGenie given a pangenome graph (VCF file,``test-variants.vcf``), sequencing reads (FASTA/FASTQ file, ``test-reads.fa``) and a reference sequence (FASTA file, ``test-reference.fa``) provided in the ``demo/`` folder. After installation, PanGenie's genotyping algorithm can be run using the following command (which will take a few seconds for this example):\n\n`` ./build/src/PanGenie -i test-reads.fa -r test-reference.fa -v test-variants.vcf -o test -e 100000 ``\n\n\nThe result will be a VCF file named `` test_genotyping.vcf `` containing the same variants as the input VCF with additional genotype predictions, genotype likelihoods and genotype qualities.\n\nParameter `` -e `` sets the hash size used by Jellyfish for k-mer counting. When running PanGenie on a whole genome dataset, this parameter can be omitted (so that PanGenie uses the default value).\n\nPer default, PanGenie uses a single thread. The number of threads used for k-mer counting and genotyping/phasing can be set via parameters ``-j`` and ``-t``, respectively. \n\n"
      },
      "source": "https://raw.githubusercontent.com/hhaentze/MaskedPangenie/master/README.md",
      "technique": "header_analysis"
    }
  ]
}