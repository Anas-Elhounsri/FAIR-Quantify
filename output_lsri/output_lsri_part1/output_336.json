{
  "application_domain": [
    {
      "confidence": 32.18,
      "result": {
        "type": "String",
        "value": "Natural Language Processing"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "format": "cff",
        "type": "File_dump",
        "value": "cff-version: 1.2.0\nmessage: \"If you use this package, please cite it as below.\"\nauthors:\n- family-names: \"Teschner\"\n  given-names: \"David\"\n  orcid: \"https://orcid.org/0000-0000-0000-0000\" ???\n- family-names: \"Lacki\"\n  given-names: \"Matteo\"\n  orcid: \"https://orcid.org/0000-0000-0000-0000\" ???\ntitle: \"ionmob\"\nversion: 1.0 ???\ndoi: ???\ndate-released: 2021-12-24 ???\nurl: \"https://github.com/theGreatHerrLebert/ionmob\""
      },
      "source": "https://raw.githubusercontent.com/theGreatHerrLebert/ionmob/main/CITATION.cff",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Cite ionmob",
        "type": "Text_excerpt",
        "value": "If you use `ionmob` for your own work, we only ask you to give credit by citing:\n\n```\n@article{10.1093/bioinformatics/btad486,\n    author = {Teschner, David and Gomez-Zepeda, David and Declercq, Arthur and \u0141\u0105cki, Mateusz K and Avci, Seymen and Bob, Konstantin and Distler, Ute and Michna, Thomas and Martens, Lennart and Tenzer, Stefan and Hildebrandt, Andreas},\n    title = \"{Ionmob: A Python Package for Prediction of Peptide Collisional Cross-Section Values}\",\n    journal = {Bioinformatics},\n    pages = {btad486},\n    year = {2023},\n    month = {08},\n    issn = {1367-4811},\n    doi = {10.1093/bioinformatics/btad486},\n    url = {https://doi.org/10.1093/bioinformatics/btad486},\n    eprint = {https://academic.oup.com/bioinformatics/advance-article-pdf/doi/10.1093/bioinformatics/btad486/51038853/btad486.pdf},\n}\n```\n\n[^fn1]: Deep learning the collisional cross-sections of the peptide universe from a million experimental values. Nat Commun, 2021. https://doi.org/10.1038/s41467-021-21352-8\n[^fn2]: Sequence-Specific Model for Predicting Peptide Collision Cross Section Values in Proteomic Ion Mobility Spectrometry. Journal of Proteome Research, 2021. https://doi.org/10.1021/acs.jproteome.1c00185\n"
      },
      "source": "https://raw.githubusercontent.com/theGreatHerrLebert/ionmob/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Teschner, David and Gomez-Zepeda, David and Declercq, Arthur and \u0141\u0105cki, Mateusz K and Avci, Seymen and Bob, Konstantin and Distler, Ute and Michna, Thomas and Martens, Lennart and Tenzer, Stefan and Hildebrandt, Andreas",
        "doi": "10.1093/bioinformatics/btad486",
        "format": "bibtex",
        "title": "{Ionmob: A Python Package for Prediction of Peptide Collisional Cross-Section Values}",
        "type": "Text_excerpt",
        "url": "https://doi.org/10.1093/bioinformatics/btad486",
        "value": "@article{10.1093/bioinformatics/btad486,\n    eprint = {https://academic.oup.com/bioinformatics/advance-article-pdf/doi/10.1093/bioinformatics/btad486/51038853/btad486.pdf},\n    url = {https://doi.org/10.1093/bioinformatics/btad486},\n    doi = {10.1093/bioinformatics/btad486},\n    issn = {1367-4811},\n    month = {08},\n    year = {2023},\n    pages = {btad486},\n    journal = {Bioinformatics},\n    title = {{Ionmob: A Python Package for Prediction of Peptide Collisional Cross-Section Values}},\n    author = {Teschner, David and Gomez-Zepeda, David and Declercq, Arthur and \u0141\u0105cki, Mateusz K and Avci, Seymen and Bob, Konstantin and Distler, Ute and Michna, Thomas and Martens, Lennart and Tenzer, Stefan and Hildebrandt, Andreas},\n}"
      },
      "source": "https://raw.githubusercontent.com/theGreatHerrLebert/ionmob/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/theGreatHerrLebert/ionmob"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-09-07T10:23:07Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-11T14:26:49Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "An open-source prediction framework for peptide ion collision cross section (CCS) values with python."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9934716114983001,
      "result": {
        "original_header": "A Framework for Predicting Collision Cross Section (CCS) Values of Peptide-Ions with Traditional and Deep Machine Learning Methods",
        "type": "Text_excerpt",
        "value": "`ionmob` is a Python package designed to predict **CCS** values of peptides. Beyond offering several pre-trained regression models for this task, it provides a comprehensive pipeline that seamlessly integrates data preprocessing, model training, and CCS value inference. Models are built using up-to-date versions of either [TensorFlow](https://www.tensorflow.org/) or [scikit-learn](https://scikit-learn.org/stable/). \nWe encourage you to use, modify, or extend ionmob to suit your needs. It's freely available and open-source under the **GNU General Public License v3.0**. Feedback is always appreciated! Please let us know if you encounter any missing features, bugs, or if you'd like to contribute in any way. \nOur ionmob package is now featured in a publication in Bioinformatics. Access the fully open-access paper [here](https://academic.oup.com/bioinformatics/advance-article/doi/10.1093/bioinformatics/btad486/7237255). For those interested in replicating our experiments, training models, or reproducing result plots from the paper, additional data and scripts not included in the ionmob package can be found on [Zenodo](https://zenodo.org/record/8091540). \n"
      },
      "source": "https://raw.githubusercontent.com/theGreatHerrLebert/ionmob/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8892043052133918,
      "result": {
        "original_header": "TLDR",
        "type": "Text_excerpt",
        "value": "To simply get started, load our best performing predictor and infer CCS values on a dataset\nprovided by this repository:\n \n"
      },
      "source": "https://raw.githubusercontent.com/theGreatHerrLebert/ionmob/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9228680372715996,
      "result": {
        "original_header": "Inference on one of our provided datasets",
        "type": "Text_excerpt",
        "value": "```python\nimport tensorflow as tf\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nfrom ionmob.utilities.tokenization import tokenizer_from_json\nfrom ionmob.preprocess.data import to_tf_dataset_inference\n\n# you will need to load the correct tokenizer to translate peptide sequences to tokens\ntokenizer = tokenizer_from_json('pretrained_models/tokenizers/tokenizer.json')\n\n# load the example_data\ndata = pd.read_parquet('example_data/Tenzer_unimod.parquet')\n\n# load the model\ndeepGRU = tf.keras.models.load_model('pretrained_models/GRUPredictor/')\n\n# create a tensorflow dataset from example_data\ntf_ds = to_tf_dataset_inference(mz=data['mz'],\n                                charge=data['charge'],\n                                sequences=[list(s) for s in data['sequence-tokenized']],\n                                tokenizer=tokenizer)\n\n# do inference\nccs_predicted, deep_residues = deepGRU.predict(tf_ds)\ndata['ccs_predicted'] = ccs_predicted\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/theGreatHerrLebert/ionmob/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9807968166114535,
      "result": {
        "original_header": "Inference on your own datasets",
        "type": "Text_excerpt",
        "value": "Inference of CCS values on custom data is already more involved as it requires you to tokenize your sequences before \nthey can be used by an `ionmob` predictor. Sequences presented to `ionmob` can be composed of all 20 amino acids and a \ngrowing number of modifications such as phosphorylation. Have a look at all known symbols:\n```python\nfrom ionmob.utilities.chemistry import VARIANT_DICT\n\nprint(VARIANT_DICT)\n\n{'L': ['L'], 'E': ['E'], 'S': ['S', 'S[UNIMOD:21]'], 'A': ['A'], 'V': ['V'], 'D': ['D'], 'G': ['G'],\n '<END>': ['<END>'], 'P': ['P'], '<START>': ['<START>', '<START>[UNIMOD:1]'], 'T': ['T', 'T[UNIMOD:21]'],\n 'I': ['I'], 'Q': ['Q'], 'K': ['K', 'K[UNIMOD:1]'], 'N': ['N'], 'R': ['R'], 'F': ['F'], 'H': ['H'],\n 'Y': ['Y', 'Y[UNIMOD:21]'], 'M': ['M', 'M[UNIMOD:35]'],\n 'W': ['W'], 'C': ['C', 'C[UNIMOD:312]', 'C[UNIMOD:4]'], 'C[UNIMOD:4]': ['C', 'C[UNIMOD:312]', 'C[UNIMOD:4]']}\n\n```\n \nUnmodified amino acids are just written as a singe character as capital letters. Modified sequences use the \n[UniMod convention](http://www.unimod.org/): A modification is noted like `[UNIMOD:X]`, where `X` is \nthe UniMod code for the respective modification. Read more about this convention [here](https://github.com/HUPO-PSI/ProForma).\nAlso, N termini are signified by a `<START>` token und C termini by an `<END>` token. This additionally allows for \ntermini modification tokens as well as indication of read direction of peptide sequences. \nTranslating sequences to tokens from a given output file of PEAKS, DiaNN or MaxQuant is supported out-of-the-box:\n```python\nimport pandas as pd\nfrom ionmob.utilities.utility import preprocess_max_quant_sequence\n\nmq_data = pd.read_table('path/to/mq/evidence.txt', low_memory=False)\n\nmq_data['sequence-tokenized'] = mq_data.apply(lambda r: preprocess_max_quant_sequence(r['Modified sequence']), axis=1)\n```\nDepending on the software used for processing the raw-data, precursor mono-isotopic mz values might not be available\nin the output files. It is therefore possible to calculate them from a given tokenized sequence and charge state:\n \n"
      },
      "source": "https://raw.githubusercontent.com/theGreatHerrLebert/ionmob/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9752223288943357,
      "result": {
        "original_header": "Calculate experiment specific shifts of CCS values",
        "type": "Text_excerpt",
        "value": "A linear shift in calculated CCS values can often be observed between two experiments coming from different sources. You can correct\nfor this by calculating a shift factor that needs to be added to observed values. Optimally, use a set of high \nconfidence identifications that contain at least tokenized sequences, charges and CCS values. They can then be used\ntogether with one of the training datasets as reference:\n```python\nimport pandas as pd\nfrom ionmob.utilities.utility import get_ccs_shift\n\ntarget = pd.read_table('path/to/my/table.csv')\n\n# preprocess, select high confidence identifications, tokenize etc.\n\n# read a reference dataset predictor was trained on\nreference = pd.read_parquet('example_data/reference.parquet')\n\n# a shift factor is calculated from charge state 2, which has the lowest variance\nshift_factor = get_ccs_shift(target, reference)\n\n# optionally, apply shift to target dataset\ntarget['ccs_shifted'] = target.apply(lambda r: r['ccs'] + shift_factor, axis=1)\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/theGreatHerrLebert/ionmob/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9927480168880122,
      "result": {
        "original_header": "What is a peptide CCS value?",
        "type": "Text_excerpt",
        "value": "The rotationally-averaged collision cross section - **CCS** - is a scalar value that describes a physical property of an ion.\nIt can be directly linked to its ion mobility, meaning its interactive behaviour with respect to a charge-neutral gas.\nThe ion mobility is used as an additional separating dimension in high throughput mass spectrometry.\nIt supplements the measurements of retention times and mass-to-charge ratios and ultimately leads to improved peptide identification. \n"
      },
      "source": "https://raw.githubusercontent.com/theGreatHerrLebert/ionmob/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9857207690053755,
      "result": {
        "original_header": "Why do we measure CCS values of ions?",
        "type": "Text_excerpt",
        "value": "The CCS value of an ion is a coarse descriptor of its 3D structure.\nSince peptides are chains (strings) of amino acids, there exist permutations in nature that have exactly the same mass and chemical properties.\nDifferences in AA sequence will result in differences in the 3D structure though.\nDistinguishing between such peptides with conventional methods like e.g. LC-MS-MS is therefore challenging.\nFurthermore, post translational modifications (PTMs) might have only a small impact on an ion's mass but alter the functionality of a protein.\nSince both a permutation of sequence as well as PTMs have significant impact on 3D structure, one can use ion mobility separation to distinguish between them.\nCCS value calculation then gives us a measure how extensively their rotationally-averaged collision cross section differed. \n"
      },
      "source": "https://raw.githubusercontent.com/theGreatHerrLebert/ionmob/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9916831140414887,
      "result": {
        "original_header": "Why would I want to predict CCS values of peptides in silico?",
        "type": "Text_excerpt",
        "value": "First, a predictor might give you insight into factors that drive ion mobility.\nThis information could then be used to optimize your laboratory workflows or uncover yet unknown relationships.\nSecond, the high reproducibility of measured CCS values in the lab make it an ideal candidate to increase confidence in peptide identifications from database searches.\nWe think, the recent triumph of ion mobility enhanced mass spectrometry paves the way for expressive predictors by providing previously unavailable amounts of training data! \n"
      },
      "source": "https://raw.githubusercontent.com/theGreatHerrLebert/ionmob/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9942275065644908,
      "result": {
        "original_header": "What can I do with ionmob if I am an experienced coder?",
        "type": "Text_excerpt",
        "value": "We made sure that our framework provides a modular set of tools for more experienced coders that want to implement their own models, training strategies or data preprocessing pipelines.\nHave a look at our example notebooks for advanced workflow implementation.\nFeel also free to contribute any optimizations, models or ideas that you come up with.\nThis will ultimately help to push prediction accuracy to a point where it provides a huge benefit for rescoring of peptide identifications! \n"
      },
      "source": "https://raw.githubusercontent.com/theGreatHerrLebert/ionmob/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9684426989112277,
      "result": {
        "original_header": "Alignments of in-house and external data",
        "type": "Text_excerpt",
        "value": "2nd method: if you are sure that the output table contains the columns \"Modified sequence\",\n\"Charge\", \"CCS\", \"Intensity\", \"m/z\", \"Raw file\", \"id\", \"Mass\", \"Number of isotopic peaks\",\n\"Retention time\", \"Retention length\" ( which is usually the case for MaxQuant evidence.txt),\nthen you can also use this method\n```python\nex1 = exp.Experiment.from_MaxQuant_DataFrame(df, \"HeLa_grad110\")\n```\n \naccess the name and data of Experiment like this\n```python\nprint(\"name of your experiment: \", ex1.name)\nprint(\"example_data of your experiment: \", ex1.data)\n```\nRegardless of the initialization method the provided data is cleaned of NaN values in any of the essential columns and of the singly charged ions. \nFurthermore, the entries in the .data attribute are aggregated upon initialization of duplicate features (duplicates of sequence-charge-ccs entries), making those unique.\nAdditionally, entries that matched with reversed sequences of the decoy database (depicted as '+' entry in 'reverse' column) are removed. \nSince the .data attribute itself is a pd.DataFrame you can use the pandas library to work on it or isolate information from\n```python\nex1.data.loc[ex1.data.charge == 2]\n``` \n\nto further aggregate rows and thereby getting rid of possible feature divergence, assign a modality class to each feature\n```python\nex2 = ex1.assign_modalities()\n```\nfrom this point on you can proceed with the inter-experimental CCS alignment of experiment\ndata aquired by the same device\n```python\ndata_dir = \"example_data/raw_data/\"\nfile_names = [\"M210115_00[1,2,3]_HeLa_grad110_ramp100__evidence.txt\",\n              \"M210115_00[4,5,6]_HeLa_grad47_ramp100__evidence.txt\",\n              \"M210115_00[7,8,9]_HeLa_grad20_ramp100__evidence.txt\"]\nexp_names = [\"HeLa_grad110\", \"HeLa_grad47\", \"HeLa_grad20\"]\npaths = [data_dir + fname for fname in file_names]\ndfs = [pd.read_csv(path, sep=\"\\t\") for path in paths]\nexs = [exp.Experiment.from_MaxQuant_DataFrame(\n    df, exp_name) for exp_name, df in zip(exp_names, dfs)]\nexs = [ex.assign_modalities() for ex in exs]\n\n# perform the ccs alignment of the experiments to each other\naligned_exs = alig.align_experiments(exs)\n# merge the aligned\naligned_ex = alig.merge_experiments(aligned_exs, \"our_experiments\")\n```\nif you want to expand your aquired data you can align a dataset aquired by another lab to the first one\nfirst read and intrinsically align the experiments of the other dataset like you did above\nBASH9*\n \nin order to merge experiments from 2 different labs you firstly have to perform a linear shift on the data (in this case a copy of aligned_ex2 is returned with the additional column \"shifted_ccs\")\n```python\naligned_ex2_mean_shifted = alig.apply_mean_shift(aligned_ex, aligned_ex2)\n```\nat this point you can compare the original ccs values to the shifted ones within aligned_ex2_mean_shifted by accessing aligned_ex2_mean_shifted.data.ccs and aligned_ex2_mean_shifted.data.shifted_ccs \nif you are satisified with the shifted data you can proceed with adopting the shifted ccs values and then merge them with the previous method\n```python\naligned_ex2_mean_shifted = alig.adopt_shifted_ccs(aligned_ex2_mean_shifted)\n\nexs_of_labs = [aligned_ex, aligned_ex2_mean_shifted]\nbig_dataset = alig.merge_experiments(exs_of_labs, \"our_and_mann_dataset\")\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/theGreatHerrLebert/ionmob/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.927517031688217,
      "result": {
        "original_header": "Implementing a custom deep CCS predictor",
        "type": "Text_excerpt",
        "value": "Say you come up with your very own idea for a deep CCS predictor architecture and want to build on top of ```ionmob```.\nIt is recomended that you have a NVIDIA CUDA enabled GPU with cuDNN bianries available in your working environment,\notherwise training may take quite some time.\nWe  will assume that a dataset for training was already generated, including all necesarry steps for preprocessing.\nFor this demonstration, we can use ```ionmob``` datasets. \nLet's use sets from different sources for training, validation and test.\nThis way, we make sure that we do not overestimate model performace.\nWe will start our model implementation by fitting a tokenizer.\n```python\nimport pandas as pd\nimport numpy as np\nimport tensorflow as tf\nimport os\nfrom datetime import datetime\n\nimport os\n\n# suppress CUDA specific logs \nos.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'\n\ngpus = tf.config.experimental.list_physical_devices('GPU')\n\ntf.config.experimental.set_virtual_device_configuration(gpus[0],\n                                                        [tf.config.experimental.VirtualDeviceConfiguration(\n                                                            memory_limit=2048)])\n\nfrom matplotlib import pyplot as plt\nfrom ionmob.alignment.experiment import Experiment\n\nfrom ionmob.models.deep_models import ProjectToInitialSqrtCCS\nfrom ionmob.preprocess.data import get_tf_dataset\nfrom ionmob.utilities.utility import get_sqrt_slopes_and_intercepts, sequence_to_tokens, sequence_with_charge,\n\nfit_tokenizer\n\ndata_train = pd.read_hdf('example_data/Meier.h5')\ndata_valid = pd.read_hdf('example_data/Tenzer.h5')\ndata_test = pd.read_hdf('example_data/Chang.h5')\n\n# tokenize sequences \nseq_tokenized = [sequence_to_tokens(s, drop_ends=True) for s in data_train.sequence.values]\n# fit a tokenizer\ntokenizer = fit_tokenizer(seq_tokenized)\n# have a look at tokens\n```\n \nThe tokenizer now knows 41 tokens, 20 of which are amino acids and 21 are PTMs. \nIt has proven to be a very efficient way to build on top of a simple square-root fit to help a deep predictor reach high accuracy as well as fast convergence. \n```ionmob``` implements its own layer that is able to project all charge states at the same time, making it very convenient to add it to your own predictor.\nIt is done in two steps: First, fit slopes and intercepts for the initial prediction separately. \nSecond, use the gained values to initialize a first projection layer.\n```ionmob``` makes use of charge state one-hot encoding to gate the prediction based on a given charge state.\nIf you are interested in the intrinsics, [have a look at the implementation](https://github.com/theGreatHerrLebert/ionmob/blob/8f9378c51149d9e1df89fc4550baeebed2176a22/ionmob/models/deep_models.py#L20).\n```python\nslopes, intercepts = get_sqrt_slopes_and_intercepts(data_train.mz, data_train.charge, data_train.ccs)\ninitial_layer = ProjectToInitialSqrtCCS(slopes, intercepts)\n\n# just make sure that everything worked by testing the projection\ninitial_ccs = initial_layer([np.expand_dims(data_train.mz, 1), tf.one_hot(data_train.charge - 1, 4)]).numpy()\n\n# visualize to make sure all went as intended\nplt.figure(figsize=(8, 4), dpi=120)\nplt.scatter(data_train.mz, initial_ccs, s=10, label='sqrt projection')\nplt.xlabel('Mz')\nplt.ylabel('CCS')\nplt.legend()\nplt.show()\n```\n \nThe most flexible way to implement a new predictor is to subclass a [tensorflow module or keras model](https://www.tensorflow.org/guide/keras/custom_layers_and_models). \nWe will do the latter, as it is the prominent way to generate new predictors for ```ionmob```. \nLet's set up a predictor that uses 1D convolutions to extract additional information from the sequence of an ion. \nAll layers that should be part of the model are defined in the constructor, the execution is defined by specifying the call method.\n```python\nclass ConvolutionalCCSPredictor(tf.keras.models.Model):\n    \n    def __init__(self, slopes, intercepts, num_tokens=41, seq_len=50):\n        super(ConvolutionalCCSPredictor, self).__init__()\n        # the inital sqrt projection\n        self.initial = ProjectToInitialSqrtCCS(slopes, intercepts)\n        \n        # the deep sequence processor\n        self.embedding = tf.keras.layers.Embedding(input_dim=num_tokens + 1, output_dim=128, input_length=seq_len)\n        self.conv1d = tf.keras.layers.Conv1D(filters=32, kernel_size=8, activation='relu')\n        self.mp1d = tf.keras.layers.MaxPool1D(pool_size=2)\n        self.conv1d_2 = tf.keras.layers.Conv1D(filters=64, kernel_size=8, activation='relu')\n        \n        # the deep regression tail\n        self.dense = tf.keras.layers.Dense(128, activation='relu')\n        self.dropout = tf.keras.layers.Dropout(0.5)\n        self.dense_2 = tf.keras.layers.Dense(64, activation='relu')\n        self.out = tf.keras.layers.Dense(1, activation=None)\n\n    def call(self, inputs):\n        # read inputs\n        mz, charge, sequence, _, _ = inputs\n        \n        # calculate sequence part\n        deep = self.conv1d_2(self.mp1d(self.conv1d(self.embedding(sequence))))\n        \n        # concat with mz and charge\n        concat = tf.keras.layers.Concatenate()([tf.keras.layers.Flatten()(deep), tf.sqrt(mz), charge])\n        \n        # deep regression\n        dense = self.dense_2(self.dropout(self.dense(concat)))\n        \n        # output is sqrt-fit + deep-regression\n        return self.initial([mz, charge]) + self.out(dense)\n```\n \nCallbacks are a convenient way to further automate your training procedure. \nWe will use two different callbacks that observe model performance on validation data.\nThe first one is a learning rate reducer: Should the loss not go down after three consecutive epochs on the validation set, the reducer is going to reduce the learning rate by an order of magnitude.\nIf there is still no improvement on performance, the early stopper will stop the training procedure after another 2 epochs.\n```python\nearly_stopper = tf.keras.callbacks.EarlyStopping(\n    monitor='val_loss',\n    patience=5\n)\n\nreduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n    monitor='val_loss', \n    factor=1e-1,\n    patience=2,\n    monde='auto',\n    min_delta=1e-5,\n    cooldown=0,\n    min_lr=1e-7\n)\n\ncbs = [early_stopper, reduce_lr]\n```\nWe are now ready to instanciate our predictor, build it and then compile it with a desired objective function and optimizer. \nThe model's summary tells us that it has a total of 178,785 trainable parameters.\n```python\n# create a recurrent predictor\nmodel = ConvolutionalCCSPredictor(slopes, intercepts)\n\n# set input shapes: mz, charge_one_hot, max_seq_len, helix_score, gravy_score\nmodel.build([(None, 1), (None, 4), (None, 50), (None, 1), (None, 1)])\n\nmodel.compile(loss=tf.keras.losses.MeanAbsoluteError(),\n              optimizer=tf.keras.optimizers.Adam(1e-2), metrics=['mae'])\n\ntf_train = get_tf_dataset(data_train.mz, data_train.charge, data_train.sequence, \n                          data_train.ccs, tokenizer, \n                          drop_sequence_ends=True, add_charge=False).shuffle(int(1e7)).batch(1024)\n\ntf_valid = get_tf_dataset(data_valid.mz, data_valid.charge, data_valid.sequence, \n                          data_valid.ccs, tokenizer, \n                          drop_sequence_ends=True, add_charge=False).shuffle(int(1e7)).batch(1024)\n\ntf_test = get_tf_dataset(data_test.mz, data_test.charge, data_test.sequence, \n                          data_test.ccs, tokenizer, drop_sequence_ends=True, add_charge=False).batch(1024)\n\nhistory = model.fit(tf_train, validation_data=tf_valid, \n                    epochs=50, verbose=False, callbacks=cbs)\n\n# plot training and validation loss \nplt.figure(figsize=(8, 4), dpi=120)\nplt.plot(history.history['loss'], label='training')\nplt.plot(history.history['val_loss'], label='validation')\nplt.xlabel('epoch')\nplt.ylabel('loss')\nplt.legend()\nplt.show()\n```\n \nAs we can see from the plot above, loss quickly stops to improve on validation data while it is still falling on training data. The reduction of the learning rate is clearly visible after epoch 9. We can now have a look at test performance and report our CCS prediction accuracy.\n```pytho\nmodel.evaluate(tf_test)\n\n4/4 [==============================] - 0s 16ms/step - loss: 11.5374 - mae: 11.5374\n\n[11.537385940551758, 11.537385940551758]\n```\nIt is arround 11.5. Not too bad compared to the naive approach which gave us a value of arround 13. Want to try it yourself? Use [this notebook](notebook/DeepModelTraining.ipynb).\n \n"
      },
      "source": "https://raw.githubusercontent.com/theGreatHerrLebert/ionmob/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/theGreatHerrLebert/ionmob/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/theGreatHerrLebert/ionmob/main/notebook/TrainKMerModel.ipynb"
      },
      "source": "https://raw.githubusercontent.com/theGreatHerrLebert/ionmob/main/notebook/TrainKMerModel.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/theGreatHerrLebert/ionmob/main/notebook/MobilityDrivingFactors.ipynb"
      },
      "source": "https://raw.githubusercontent.com/theGreatHerrLebert/ionmob/main/notebook/MobilityDrivingFactors.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/theGreatHerrLebert/ionmob/main/notebook/CheckAccuracy.ipynb"
      },
      "source": "https://raw.githubusercontent.com/theGreatHerrLebert/ionmob/main/notebook/CheckAccuracy.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/theGreatHerrLebert/ionmob/main/notebook/DeepModelTraining.ipynb"
      },
      "source": "https://raw.githubusercontent.com/theGreatHerrLebert/ionmob/main/notebook/DeepModelTraining.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/theGreatHerrLebert/ionmob/main/notebook/PreprocessingExample.ipynb"
      },
      "source": "https://raw.githubusercontent.com/theGreatHerrLebert/ionmob/main/notebook/PreprocessingExample.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/theGreatHerrLebert/ionmob/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "theGreatHerrLebert/ionmob"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ionmob"
      },
      "source": "https://raw.githubusercontent.com/theGreatHerrLebert/ionmob/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/theGreatHerrLebert/ionmob/main/docs/images/sqrt_model.png"
      },
      "source": "https://raw.githubusercontent.com/theGreatHerrLebert/ionmob/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://render.githubusercontent.com/render/math?math=\\mathrm{CCS}_{\\mathrm{init}}(\\mathrm{mz}, c)=s_c\\times\\sqrt{\\mathrm{mz}} %2B b_c"
      },
      "source": "https://raw.githubusercontent.com/theGreatHerrLebert/ionmob/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://render.githubusercontent.com/render/math?math=s_c"
      },
      "source": "https://raw.githubusercontent.com/theGreatHerrLebert/ionmob/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://render.githubusercontent.com/render/math?math=b_c"
      },
      "source": "https://raw.githubusercontent.com/theGreatHerrLebert/ionmob/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://render.githubusercontent.com/render/math?math=c"
      },
      "source": "https://raw.githubusercontent.com/theGreatHerrLebert/ionmob/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://render.githubusercontent.com/render/math?math=\\mathrm{CCS}_{\\mathrm{final}}(\\mathrm{mz}, c, s \\vert M) = \\mathrm{CCS}_{\\mathrm{init}}(\\mathrm{mz}, c) %2B M(s, \\theta)"
      },
      "source": "https://raw.githubusercontent.com/theGreatHerrLebert/ionmob/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://render.githubusercontent.com/render/math?math=M"
      },
      "source": "https://raw.githubusercontent.com/theGreatHerrLebert/ionmob/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://render.githubusercontent.com/render/math?math=\\theta"
      },
      "source": "https://raw.githubusercontent.com/theGreatHerrLebert/ionmob/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/theGreatHerrLebert/ionmob/main/docs/images/gravy_helix_linear_correlation.png"
      },
      "source": "https://raw.githubusercontent.com/theGreatHerrLebert/ionmob/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/theGreatHerrLebert/ionmob/main/docs/images/sqrt_fit.png"
      },
      "source": "https://raw.githubusercontent.com/theGreatHerrLebert/ionmob/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/theGreatHerrLebert/ionmob/main/docs/images/loss_train_valid.png"
      },
      "source": "https://raw.githubusercontent.com/theGreatHerrLebert/ionmob/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "ionmob"
        ],
        "type": "Text_excerpt",
        "value": "We recommend to install ```ionmob``` into a separate [python virtual environment](https://docs.python.org/3/tutorial/venv.html). Once activated, you can install the ionmob package into it as follows: \n```\ngit clone https://github.com/theGreatHerrLebert/ionmob.git\ncd ionmob\npip install -e .\n```\n\n---"
      },
      "source": "https://raw.githubusercontent.com/theGreatHerrLebert/ionmob/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9984815392530614,
      "result": {
        "original_header": "A Framework for Predicting Collision Cross Section (CCS) Values of Peptide-Ions with Traditional and Deep Machine Learning Methods",
        "type": "Text_excerpt",
        "value": "We encourage you to use, modify, or extend ionmob to suit your needs. It's freely available and open-source under the **GNU General Public License v3.0**. Feedback is always appreciated! Please let us know if you encounter any missing features, bugs, or if you'd like to contribute in any way. \n"
      },
      "source": "https://raw.githubusercontent.com/theGreatHerrLebert/ionmob/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8145614910765955,
      "result": {
        "original_header": "TLDR",
        "type": "Text_excerpt",
        "value": "To simply get started, load our best performing predictor and infer CCS values on a dataset\nprovided by this repository:\n \n"
      },
      "source": "https://raw.githubusercontent.com/theGreatHerrLebert/ionmob/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9556748062436304,
      "result": {
        "original_header": "Alignments of in-house and external data",
        "type": "Text_excerpt",
        "value": "```python\nimport pandas as pd\nfrom ionmob.preprocess import experiment as exp\nfrom ionmob.preprocess import alignment as alig\n\ndata_dir = \"example_data/raw_data/\"\nfname = \"M210115_00[1,2,3]_HeLa_grad110_ramp100__evidence.txt\"\n\npath = data_dir + fname\ndf = pd.read_csv(path, sep=\"\\t\")\n``` \nif you are satisified with the shifted data you can proceed with adopting the shifted ccs values and then merge them with the previous method\n```python\naligned_ex2_mean_shifted = alig.adopt_shifted_ccs(aligned_ex2_mean_shifted)\n\nexs_of_labs = [aligned_ex, aligned_ex2_mean_shifted]\nbig_dataset = alig.merge_experiments(exs_of_labs, \"our_and_mann_dataset\")\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/theGreatHerrLebert/ionmob/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.99999969528567,
      "result": {
        "original_header": "Implementing a custom deep CCS predictor",
        "type": "Text_excerpt",
        "value": "Say you come up with your very own idea for a deep CCS predictor architecture and want to build on top of ```ionmob```.\nIt is recomended that you have a NVIDIA CUDA enabled GPU with cuDNN bianries available in your working environment,\notherwise training may take quite some time.\nWe  will assume that a dataset for training was already generated, including all necesarry steps for preprocessing.\nFor this demonstration, we can use ```ionmob``` datasets. \nLet's use sets from different sources for training, validation and test.\nThis way, we make sure that we do not overestimate model performace.\nWe will start our model implementation by fitting a tokenizer.\n```python\nimport pandas as pd\nimport numpy as np\nimport tensorflow as tf\nimport os\nfrom datetime import datetime\n\nimport os\n\n# suppress CUDA specific logs \nos.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'\n\ngpus = tf.config.experimental.list_physical_devices('GPU')\n\ntf.config.experimental.set_virtual_device_configuration(gpus[0],\n                                                        [tf.config.experimental.VirtualDeviceConfiguration(\n                                                            memory_limit=2048)])\n\nfrom matplotlib import pyplot as plt\nfrom ionmob.alignment.experiment import Experiment\n\nfrom ionmob.models.deep_models import ProjectToInitialSqrtCCS\nfrom ionmob.preprocess.data import get_tf_dataset\nfrom ionmob.utilities.utility import get_sqrt_slopes_and_intercepts, sequence_to_tokens, sequence_with_charge,\n\nfit_tokenizer\n\ndata_train = pd.read_hdf('example_data/Meier.h5')\ndata_valid = pd.read_hdf('example_data/Tenzer.h5')\ndata_test = pd.read_hdf('example_data/Chang.h5')\n\n# tokenize sequences \nseq_tokenized = [sequence_to_tokens(s, drop_ends=True) for s in data_train.sequence.values]\n# fit a tokenizer\ntokenizer = fit_tokenizer(seq_tokenized)\n# have a look at tokens\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/theGreatHerrLebert/ionmob/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.9313640388314751,
      "result": {
        "original_header": "Inference on one of our provided datasets",
        "type": "Text_excerpt",
        "value": "```python\nimport tensorflow as tf\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nfrom ionmob.utilities.tokenization import tokenizer_from_json\nfrom ionmob.preprocess.data import to_tf_dataset_inference\n\n# you will need to load the correct tokenizer to translate peptide sequences to tokens\ntokenizer = tokenizer_from_json('pretrained_models/tokenizers/tokenizer.json')\n\n# load the example_data\ndata = pd.read_parquet('example_data/Tenzer_unimod.parquet')\n\n# load the model\ndeepGRU = tf.keras.models.load_model('pretrained_models/GRUPredictor/')\n\n# create a tensorflow dataset from example_data\ntf_ds = to_tf_dataset_inference(mz=data['mz'],\n                                charge=data['charge'],\n                                sequences=[list(s) for s in data['sequence-tokenized']],\n                                tokenizer=tokenizer)\n\n# do inference\nccs_predicted, deep_residues = deepGRU.predict(tf_ds)\ndata['ccs_predicted'] = ccs_predicted\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/theGreatHerrLebert/ionmob/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9238760267216554,
      "result": {
        "original_header": "Inference on your own datasets",
        "type": "Text_excerpt",
        "value": "```python\nfrom ionmob.utilities.chemistry import calculate_mz\n\nmq_data['mz'] = mq_data.apply(lambda r: calculate_mz(r['sequence-tokenized'], r['Charge']), axis=1)\n```\nNow, a dataset can be created for prediction:\n```python\nfrom ionmob.preprocess.data import to_tf_dataset_inference\nfrom ionmob.utilities.tokenization import tokenizer_from_json\n\ntokenizer = tokenizer_from_json('pretrained_models/tokenizers/tokenizer.json')\n\ntf_ds = to_tf_dataset_inference(mq_data['mz'], mq_data['Charge'], mq_data['sequence-tokenized'], tokenizer)\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/theGreatHerrLebert/ionmob/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8868413206250493,
      "result": {
        "original_header": "Alignments of in-house and external data",
        "type": "Text_excerpt",
        "value": "```python\nimport pandas as pd\nfrom ionmob.preprocess import experiment as exp\nfrom ionmob.preprocess import alignment as alig\n\ndata_dir = \"example_data/raw_data/\"\nfname = \"M210115_00[1,2,3]_HeLa_grad110_ramp100__evidence.txt\"\n\npath = data_dir + fname\ndf = pd.read_csv(path, sep=\"\\t\")\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/theGreatHerrLebert/ionmob/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8246042821666333,
      "result": {
        "original_header": "Implementing a custom deep CCS predictor",
        "type": "Text_excerpt",
        "value": "Say you come up with your very own idea for a deep CCS predictor architecture and want to build on top of ```ionmob```.\nIt is recomended that you have a NVIDIA CUDA enabled GPU with cuDNN bianries available in your working environment,\notherwise training may take quite some time.\nWe  will assume that a dataset for training was already generated, including all necesarry steps for preprocessing.\nFor this demonstration, we can use ```ionmob``` datasets. \nLet's use sets from different sources for training, validation and test.\nThis way, we make sure that we do not overestimate model performace.\nWe will start our model implementation by fitting a tokenizer.\n```python\nimport pandas as pd\nimport numpy as np\nimport tensorflow as tf\nimport os\nfrom datetime import datetime\n\nimport os\n\n# suppress CUDA specific logs \nos.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'\n\ngpus = tf.config.experimental.list_physical_devices('GPU')\n\ntf.config.experimental.set_virtual_device_configuration(gpus[0],\n                                                        [tf.config.experimental.VirtualDeviceConfiguration(\n                                                            memory_limit=2048)])\n\nfrom matplotlib import pyplot as plt\nfrom ionmob.alignment.experiment import Experiment\n\nfrom ionmob.models.deep_models import ProjectToInitialSqrtCCS\nfrom ionmob.preprocess.data import get_tf_dataset\nfrom ionmob.utilities.utility import get_sqrt_slopes_and_intercepts, sequence_to_tokens, sequence_with_charge,\n\nfit_tokenizer\n\ndata_train = pd.read_hdf('example_data/Meier.h5')\ndata_valid = pd.read_hdf('example_data/Tenzer.h5')\ndata_test = pd.read_hdf('example_data/Chang.h5')\n\n# tokenize sequences \nseq_tokenized = [sequence_to_tokens(s, drop_ends=True) for s in data_train.sequence.values]\n# fit a tokenizer\ntokenizer = fit_tokenizer(seq_tokenized)\n# have a look at tokens\n```\n \nCallbacks are a convenient way to further automate your training procedure. \nWe will use two different callbacks that observe model performance on validation data.\nThe first one is a learning rate reducer: Should the loss not go down after three consecutive epochs on the validation set, the reducer is going to reduce the learning rate by an order of magnitude.\nIf there is still no improvement on performance, the early stopper will stop the training procedure after another 2 epochs.\n```python\nearly_stopper = tf.keras.callbacks.EarlyStopping(\n    monitor='val_loss',\n    patience=5\n)\n\nreduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n    monitor='val_loss', \n    factor=1e-1,\n    patience=2,\n    monde='auto',\n    min_delta=1e-5,\n    cooldown=0,\n    min_lr=1e-7\n)\n\ncbs = [early_stopper, reduce_lr]\n```\nWe are now ready to instanciate our predictor, build it and then compile it with a desired objective function and optimizer. \nThe model's summary tells us that it has a total of 178,785 trainable parameters.\n```python\n# create a recurrent predictor\nmodel = ConvolutionalCCSPredictor(slopes, intercepts)\n\n# set input shapes: mz, charge_one_hot, max_seq_len, helix_score, gravy_score\nmodel.build([(None, 1), (None, 4), (None, 50), (None, 1), (None, 1)])\n\nmodel.compile(loss=tf.keras.losses.MeanAbsoluteError(),\n              optimizer=tf.keras.optimizers.Adam(1e-2), metrics=['mae'])\n\ntf_train = get_tf_dataset(data_train.mz, data_train.charge, data_train.sequence, \n                          data_train.ccs, tokenizer, \n                          drop_sequence_ends=True, add_charge=False).shuffle(int(1e7)).batch(1024)\n\ntf_valid = get_tf_dataset(data_valid.mz, data_valid.charge, data_valid.sequence, \n                          data_valid.ccs, tokenizer, \n                          drop_sequence_ends=True, add_charge=False).shuffle(int(1e7)).batch(1024)\n\ntf_test = get_tf_dataset(data_test.mz, data_test.charge, data_test.sequence, \n                          data_test.ccs, tokenizer, drop_sequence_ends=True, add_charge=False).batch(1024)\n\nhistory = model.fit(tf_train, validation_data=tf_valid, \n                    epochs=50, verbose=False, callbacks=cbs)\n\n# plot training and validation loss \nplt.figure(figsize=(8, 4), dpi=120)\nplt.plot(history.history['loss'], label='training')\nplt.plot(history.history['val_loss'], label='validation')\nplt.xlabel('epoch')\nplt.ylabel('loss')\nplt.legend()\nplt.show()\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/theGreatHerrLebert/ionmob/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/theGreatHerrLebert/ionmob/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ccs, collisional-cross-section, deep-learning, ion-mobility, ion-mobility-spectrometry, machine-learning, mass-spectrometry, proteomics, pypi, python-package"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "GNU General Public License v3.0",
        "spdx_id": "GPL-3.0",
        "type": "License",
        "url": "https://api.github.com/licenses/gpl-3.0",
        "value": "https://api.github.com/licenses/gpl-3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<https://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<https://www.gnu.org/licenses/why-not-lgpl.html>.\n"
      },
      "source": "https://raw.githubusercontent.com/theGreatHerrLebert/ionmob/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ionmob"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "theGreatHerrLebert"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 106069,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "PureBasic",
        "size": 32093,
        "type": "Programming_language",
        "value": "PureBasic"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 162,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/theGreatHerrLebert/ionmob/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "theGreatHerrLebert",
          "type": "User"
        },
        "date_created": "2023-06-23T07:37:04Z",
        "date_published": "2023-06-24T12:46:13Z",
        "description": "Repository status at submission of revised `ionmob` manuscript. Main changes include updated model now ready for prediction of charge state 1 ions, performance update for phosphorylated peptide prediction due to strict training data filtering and UNIMOD based annotation of PTMs.",
        "html_url": "https://github.com/theGreatHerrLebert/ionmob/releases/tag/v0.9.0-revision",
        "name": "Publication revision",
        "release_id": 109780565,
        "tag": "v0.9.0-revision",
        "tarball_url": "https://api.github.com/repos/theGreatHerrLebert/ionmob/tarball/v0.9.0-revision",
        "type": "Release",
        "url": "https://api.github.com/repos/theGreatHerrLebert/ionmob/releases/109780565",
        "value": "https://api.github.com/repos/theGreatHerrLebert/ionmob/releases/109780565",
        "zipball_url": "https://api.github.com/repos/theGreatHerrLebert/ionmob/zipball/v0.9.0-revision"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "theGreatHerrLebert",
          "type": "User"
        },
        "date_created": "2023-01-27T09:40:49Z",
        "date_published": "2023-02-03T13:06:22Z",
        "html_url": "https://github.com/theGreatHerrLebert/ionmob/releases/tag/submission",
        "name": "publication submission",
        "release_id": 91263319,
        "tag": "submission",
        "tarball_url": "https://api.github.com/repos/theGreatHerrLebert/ionmob/tarball/submission",
        "type": "Release",
        "url": "https://api.github.com/repos/theGreatHerrLebert/ionmob/releases/91263319",
        "value": "https://api.github.com/repos/theGreatHerrLebert/ionmob/releases/91263319",
        "zipball_url": "https://api.github.com/repos/theGreatHerrLebert/ionmob/zipball/submission"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-04 00:20:49",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 10
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Can I use ionmob if I am no machine learning expert?",
        "parent_header": [
          "ionmob"
        ],
        "type": "Text_excerpt",
        "value": "Definitely yes!\nWe implemented and pretrained models of different complexity that allow for in silico prediction of CCS values for peptide ions of different charge states out-of-the-box.\nThey are easily integratable into your existing proteomics workflows.\nAll you need is a little bit of python scripting experience.\nA short introduction can be found down below. \nAdditionally, you can have a look at our collection of example notebooks.\n\n---"
      },
      "source": "https://raw.githubusercontent.com/theGreatHerrLebert/ionmob/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "A simple example of CCS prediction and performance evaluation with pre-trained models",
        "parent_header": [
          "ionmob"
        ],
        "type": "Text_excerpt",
        "value": "Let us assume that you want to have a look at prediction performance for two different ```ionmob``` predictors on data of peptide identifications that came from some source.\nFor ```ionmob``` models, you should at least have the following information per peptide: **mz, charge, sequence, ccs**.\nCCS values are optional in the general case but are required if you want to compare CCS predictions to CCS measurements.\nWe will demonstrate how to do this with one of our provided example datasets:\n\n```python\nimport pandas as pd\n\n# read example_data and a predictor\ndata = pd.read_parquet('example_data/Tenzer.parquet')\ndata.head()\n```\n\nThis is what the data looks like:\n\n|    |       mz |   charge | sequence-tokenized                                                |     ccs |      rt | name           |\n|---:|---------:|---------:|:------------------------------------------------------------------|--------:|--------:|:---------------|\n|  2 |  478.78  |        2 | ['\\<START>' 'A' 'A' 'A' 'A' 'A' 'A' 'A' 'L' 'Q' 'A' 'K' '\\<END>'] | 351.073 | 14.1374 | Tenzer-tryptic |\n|  3 |  514.317 |        2 | ['<\\START>' 'A' 'A' 'A' 'A' 'A' 'A' 'T' 'V' 'L' 'L' 'R' '<\\END>'] | 360.949 | 38.812  | Tenzer-tryptic |\n|  4 |  472.251 |        2 | ['<\\START>' 'A' 'A' 'A' 'A' 'A' 'D' 'L' 'A' 'N' 'R' '<\\END>']     | 320.562 | 14.467  | Tenzer-tryptic |\n\n\nLet's compare accuracy for two predictors.\nOne that only does a zero-information square-root fit on ion mz values and a deep model that also uses information on peptide sequences.\nThe latter also needs a so-called [tokenizer](https://www.tensorflow.org/api_docs/python/tf/keras/preprocessing/text/Tokenizer): a tool that translates sequence symbols into a numerical representation.\nIt is specific for a pretrained model and therefore needs to be loaded as well:\n\n```python\nimport tensorflow as tf\nfrom matplotlib import pyplot as plt\nfrom ionmob.preprocess.data import sqrt_model_dataset\n\n# read the pretrained predictors\nsqrtModel = tf.keras.models.load_model('pretrained_models/SqrtModel')\ngruModel = tf.keras.models.load_model('pretrained_models/GRUPredictor/')\n\n# read tokenizer for deep model\ntokenizer = tokenizer_from_json('pretrained_models/tokenizer.json')\n\n# create dataset for sqrt prediction and predict\ntensorflow_ds_sqrt = sqrt_model_dataset(data.mz, data.charge, data.ccs).batch(1024)\ndata['ccs_predicted_s'] = sqrtModel.predict(tensorflow_ds_sqrt)\n\n# create dataset for deep prediction and predict\ntensorflow_ds_deep = get_tf_dataset(data.mz, data.charge, data.sequence, data.ccs, tokenizer,\n                                    drop_sequence_ends=False, add_charge=True).batch(1024)\nccs_predicted_gru, _ = gruModel.predict(tensorflow_ds_deep)\ndata['ccs_predicted_g'] = ccs_predicted_gru\n```\n\nLet's compare prediction accuracies:\n```python\nimport numpy as np\n\n# define error functions\ndef mean_abs_error(ccs, ccs_pred):\n    return np.round(np.mean([np.abs(x[0] - x[1]) for x in np.c_[ccs, ccs_pred]]), 2)\n\ndef mean_perc_error(ccs, ccs_pred):\n    return np.round(np.mean([np.abs((x[0] - x[1]) / x[0]) * 100 for x in np.c_[ccs, ccs_pred]]), 2)\n\n# show results\nprint(f\"sqrt mean absolute percent error: {mean_perc_error(data.ccs, data.ccs_predicted_s)}\")\nprint(f\"gru mean absolute percent error : {mean_perc_error(data.ccs, data.ccs_predicted_g)}\")\nprint(\"\")\nprint(f\"sqrt mean absolute error        : {mean_abs_error(data.ccs, data.ccs_predicted_s)}\")\nprint(f\"gru mean absolute error         : {mean_abs_error(data.ccs, data.ccs_predicted_g)}\")\n```\n\nThis then gives us CCS accuracies of:\n\n```python\nsqrt mean absolute percent error: 2.58\ngru  mean absolute percent error: 1.84\n\nsqrt mean absolute error        : 12.69\ngru  mean absolute error        : 9.04\n```\n\nFinally, let's visualize the predictions compared to the CCS measurements:\n\n```python\nfrom matplotlib import pyplot as plt\n\n# visualize the charge states in different colors\ncolor_dict = {2:'red', 3:'orange', 4:'lightgreen'}\n\n# create the plot\nfig, (ax1, ax2) = plt.subplots(nrows=1, ncols=2, figsize=(12,4), dpi=200, sharey=True, sharex=True)\n\nax1.set_title('sqrt fit prediction')\nax1.set_ylabel('CCS')\nax1.set_xlabel('MZ')\nax2.set_xlabel('MZ')\nax2.set_title('deep prediction')\n\nax1.scatter(data.mz, data.ccs, s=10, alpha=.5, label='ground truth')\nax1.scatter(data.mz, data.ccs_predicted_s, s=10, alpha=.5, c=[color_dict[x] for x in data.charge],\n            label='prediction')\nax2.scatter(data.mz, data.ccs, s=10, alpha=.5, label='ground truth')\nax2.scatter(data.mz, data.ccs_predicted_g, s=10, alpha=.2, c=[color_dict[x] for x in data.charge],\n            label='prediction')\nax1.legend()\nax2.legend()\nfig.show()\n```\n\nThis code will result in the following plot:\n\n<p align=\"center\">\n  <img src=\"docs/images/sqrt_model.png\" width=\"900\" title=\"prediction vs ground truth\">\n</p>\n\nYou can also try this yourself by cloning this repository and running [this notebook](/notebook/CheckAccuracy.ipynb).\n\n---"
      },
      "source": "https://raw.githubusercontent.com/theGreatHerrLebert/ionmob/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Getting insight into driving factors of CCS",
        "parent_header": [
          "ionmob"
        ],
        "type": "Text_excerpt",
        "value": "Recent papers that worked on CCS prediction such as Chang et al.[^fn2] and Meier et al.[^fn1] identified factors that drive differences in ion mobility.\nBy using an in silico digest of the human proteome, we can estimate the impact of two of them, namely the [GRAVY score](https://www.bioinformatics.org/sms2/protein_gravy.html) and helicality of peptides. Our modelling approach will look like this: first an initial CCS value is calculated soley on an ions mass and charge. This is done using the simple formula below (caution, equations might be barely visible if your browser uses darkmode):\n\n<img src=\"https://render.githubusercontent.com/render/math?math=\\mathrm{CCS}_{\\mathrm{init}}(\\mathrm{mz}, c)=s_c\\times\\sqrt{\\mathrm{mz}} %2B b_c\">\n\nWhere a slope <img src=\"https://render.githubusercontent.com/render/math?math=s_c\">  and an intercept <img src=\"https://render.githubusercontent.com/render/math?math=b_c\"> are fit separately for each modeled charge state <img src=\"https://render.githubusercontent.com/render/math?math=c\">.\nThe reason why ion-mobility does add an additional dimension of separation is the fact that an ion's CCS value does not always lie on that line.\nIf it did, CCS would be perfectly correlated with mz and therefore add no new information.\nWe can improve our inital CCS prediction modell by also predicting the residues with respect to the square root fit, meaning the vertical difference to our initial value.\nThese residues could be provided by any predictor but let's use our best performing model: the GRU-based predictor.\nIt uses deep [GRU-units](http://karpathy.github.io/2015/05/21/rnn-effectiveness/) that can take into account sequence specific higher-order information derived from training data.\nWe will expand our mathematical formulation of the problem as follows:\n\n<img src=\"https://render.githubusercontent.com/render/math?math=\\mathrm{CCS}_{\\mathrm{final}}(\\mathrm{mz}, c, s \\vert M) = \\mathrm{CCS}_{\\mathrm{init}}(\\mathrm{mz}, c) %2B M(s, \\theta)\">\n\nHere, a regressor <img src=\"https://render.githubusercontent.com/render/math?math=M\"> (GRU-units) with parameter set <img src=\"https://render.githubusercontent.com/render/math?math=\\theta\"> was fit to further lower the mean absolut error (MAE) of predicted CCS values compared to the experimentally observed ones.\nFor convenience, this predictor does not only return the final predicted ccs value but also the residue with respect to the initial fit, giving us an easy way to link specific features of a given sequence to its impact on ion mobility.\nAn implementation with ```ionmob``` to derive this could look like this:\n\n```python\nimport pandas as pd\nimport numpy as np\nimport tensorflow as tf\n\nfrom ionmob.utilities.utility import get_gravy_score, get_helix_score\nfrom ionmob.utilities.tokenization import tokenizer_from_json\nfrom ionmob.preprocess.data import get_tf_dataset, sqrt_model_dataset\n\n# read in silico digested human proteome to gain insight into predictors behaviour\ndata = pd.read_hdf('Synthetic.h5').sample(frac=0.25)\n\n# read predictors and tokenizer\ngruModel = tf.keras.models.load_model('pretrained_models/GRUPredictor/')\nsqrtModel = tf.keras.models.load_model('pretrained_models/SqrtModel/')\ntokenizer = tokenizer_from_json('pretrained_models/tokenizer.json')\n\n# generate tensorflow datasets for prediction\ntensorflow_ds_sqrt = sqrt_model_dataset(data.mz, data.charge, None).batch(1024)\ntensorflow_ds_deep = get_tf_dataset(data.mz, data.charge, data.sequence, None, tokenizer,\n                                    drop_sequence_ends=False, add_charge=True).batch(1024)\n\n# predict with sqrt-fit\nccs_predicted_sqrt = sqrtModel.predict(tensorflow_ds_sqrt)\n\n# predict with deep fit\nccs_predicted_gru, deep_part = gruModel.predict(tensorflow_ds_deep)\n\n# append predictions to dataframe\ndata['ccs_predicted_gru'] = ccs_predicted_gru\ndata['ccs_predicted_sqrt'] = ccs_predicted_sqrt\ndata['ccs_predicted_deep'] = deep_part\n\n# create normalized value of deep increase or decrease prediction of CCS\ndata['deep_normalized'] = data.ccs_predicted_deep / np.sqrt(data.mz.values)\n\n# calculate gravy and helix scores for each sequence\ngravy = [get_gravy_score(s, normalize=False) for s in data.sequence]\nhelix = [get_helix_score(s) for s in data.sequence]\n\n# append calculated values to dataframe\ndata['gravy'] = gravy\ndata['helix'] = helix\n\n# select a single charge state to deconvolce differences between charges\ncharge_2 = data[data['charge'] == 2]\n```\n\nWe are now ready to have a look at how both GRAVY score and helix score of a given peptide are correlated with an increase or decrease of the deep predicted CCS with respect to the initial guess. Since the impact is not equal along the mz axis, the deep residue value was normalized by dividing it by the square-root mz value of its ion. We will calculate the pearson correlation to have some objective measure how strong they are correlated:\n\n```python\nfrom scipy.stats import pearsonr\n\n# extract values to correlate\nx = charge_2.deep_normalized.values\ny_gravy = charge_2.gravy.values\ny_helix = charge_2.helix.values\n\nprint('Gravy Pearson:', np.round(pearsonr(x, y_gravy), 2))\nprint('Helix Pearson:', np.round(pearsonr(x, y_helix), 2))\n```\nThis gives us pearson correlation and p values for both gravy and helicality analysis:\n\n```python\nGravy Pearson: [0.49 0.  ]\nHelix Pearson: [0.52 0.  ]\n```\n\nOnce again, let's visualize this to get a better feel for what the numbers are telling us:\n\n```python\nfrom sklearn.linear_model import LinearRegression\nfrom mpl_toolkits.axes_grid1 import make_axes_locatable\n\ndef line(x, a, b):\n    return x * a + b\n\nreg_gravy = LinearRegression().fit(np.expand_dims(x, -1), np.expand_dims(y_gravy, -1))\nreg_helix = LinearRegression().fit(np.expand_dims(x, -1), np.expand_dims(y_helix, -1))\n\ny_line_gravy = [line(x, reg_gravy.coef_, reg_gravy.intercept_) for x in charge_2.deep_normalized.values]\ny_line_helix = [line(x, reg_helix.coef_, reg_helix.intercept_) for x in charge_2.deep_normalized.values]\n\n# create the plot\nfig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(nrows=2, ncols=2, figsize=(16,12), dpi=200)\n\nax1.set_title('linear correlation helicality, mobility')\nax1.set_ylabel('helix score')\nax1.set_xlabel('relative mobility trend')\nax2.set_xlabel('MZ')\nax2.set_title('Deep vs Sqrt prediction')\n\nim1 = ax1.scatter(charge_2.deep_normalized, charge_2.helix, c=charge_2.helix, alpha=.3, s=10, label='example_data points')\nim1 = ax1.scatter(charge_2.deep_normalized, y_line_helix, s=10, c='red', label='linear trend')\n\nim2 = ax2.scatter(charge_2.mz, charge_2.ccs_predicted_gru, s=10, c=charge_2.helix - np.mean(data.gravy), alpha=.3, label='example_data points')\nim2 = ax2.scatter(charge_2.mz, charge_2.ccs_predicted_sqrt, s=2, c='red', alpha=.3, label='sqrt prediction')\nax1.legend()\nax2.legend()\n\ndivider = make_axes_locatable(ax2)\ncax = divider.append_axes('right', size='2%', pad=0.05)\ncbar = fig.colorbar(im1, cax=cax, orientation='vertical', ticks=[0, 0.5, 1])\ncbar.ax.set_yticklabels(['0', '0.5', '1'])\n\nax3.set_title('linear correlation gravy, mobility')\nax3.set_ylabel('gravy score')\nax3.set_xlabel('relative mobility trend')\nax4.set_xlabel('MZ')\nax4.set_title('Deep vs Sqrt prediction')\n\nim3 = ax3.scatter(charge_2.deep_normalized, charge_2.gravy, c=charge_2.gravy, alpha=.3, s=10, label='example_data points')\nim3 = ax3.scatter(charge_2.deep_normalized, y_line_gravy, s=10, c='red', label='linear trend')\n\nim4 = ax4.scatter(charge_2.mz, charge_2.ccs_predicted_gru, s=10, c=charge_2.gravy, alpha=.3, label='example_data points')\nim4 = ax4.scatter(charge_2.mz, charge_2.ccs_predicted_sqrt, s=2, c='red', alpha=.3, label='sqrt prediction')\nax3.legend()\nax4.legend()\n\ndivider = make_axes_locatable(ax4)\ncax = divider.append_axes('right', size='2%', pad=0.05)\ncbar = fig.colorbar(im3, cax=cax, orientation='vertical', ticks=[0, 0.5, 1])\ncbar.ax.set_yticklabels(['< -4', '0', '> 4'])\n\nfig.show()\n```\nThis code then creates:\n\n<p align=\"center\">\n  <img src=\"docs/images/gravy_helix_linear_correlation.png\" width=\"900\" title=\"prediction vs ground truth\">\n</p>\n\nAs we can observe, our predictor is able to reproduce findings that were already postulated by Chang et al. as well as Meier et al.: Higher GRAVY and helicality values indeed lead to higher CCS values (at least with respect to our trained predictor). \nThis correlation is by no means perfect, but it lies in the nature of complex interactions that lead to a peptide's 3D structure that they cannot easily be modelled by a simple set of descriptors. \nUltimately, this is why a complex function modelling technique like Deep Learning can add something new!\nImplement your own ideas to uncover driving factors like amino acid counts or specific amino acid positions by altering [this notebook](/notebook/MobilityDrivingFactors.ipynb).\n\n---"
      },
      "source": "https://raw.githubusercontent.com/theGreatHerrLebert/ionmob/main/README.md",
      "technique": "header_analysis"
    }
  ]
}