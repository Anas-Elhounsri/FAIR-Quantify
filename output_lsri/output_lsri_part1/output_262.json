{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "6. Reference",
        "type": "Text_excerpt",
        "value": "[Zhang J, Zhang H, Ju Z, Peng Y, Pan Y, Xi W, Wei Y. JCcirc: circRNA full-length sequence assembly through integrated junction contigs. Brief Bioinform. 2023 Sep 22;24(6):bbad363.](https://academic.oup.com/bib/article-abstract/24/6/bbad363/7313456)"
      },
      "source": "https://raw.githubusercontent.com/cbbzhang/JCcirc/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/cbbzhang/JCcirc"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "7. Contact",
        "type": "Text_excerpt",
        "value": "\tPlease contact Jingjing Zhang (zhangjj@siat.ac.cn) for questions and comments.\n"
      },
      "source": "https://raw.githubusercontent.com/cbbzhang/JCcirc/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-04-24T02:40:26Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-05-16T02:49:40Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "circRNA full length sequences"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1. Introduction",
        "type": "Text_excerpt",
        "value": "**JCcirc v1.0.0** (circRNA assembler through integrated junction contigs) is a computational tool that utilizes both back-splice junction (BSJ) and junction contig (JC) features to reconstruct full-length sequences of circular RNAs from RNA-seq datasets. JCcirc integrates junction reads and junction contigs for the assembly of all circRNAs. The BSJ feature is employed to accurately determine the boundaries of circRNAs, while the JC feature acts as an extension of junction reads, exhibiting superior performance in assembling circRNAs with low expression levels.\n![Figure 6](https://github.com/cbbzhang/JCcirc/assets/38315099/6fd54d85-52dd-4f06-bb13-b975ae42ebd3)\n<p align=\"center\">Workflow of JCcirc</p>\n\t"
      },
      "source": "https://raw.githubusercontent.com/cbbzhang/JCcirc/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9168203302928849,
      "result": {
        "original_header": "4. Note",
        "type": "Text_excerpt",
        "value": "> * The RNA-seq data should be paired-end, and the same file when running de novo assembly.<br>\n> * The GTF annotation file should be the same one when running JCcirc and its upstream software. <br>\n> * Parameter difference|D recommend setting to 0, 1, or 2. If the intron length in the genome is short, set a large D value. For example, human data can be set to 0, and plant data can be set to 2.\n \n"
      },
      "source": "https://raw.githubusercontent.com/cbbzhang/JCcirc/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9046484266626527,
      "result": {
        "original_header": "5. Output file",
        "type": "Text_excerpt",
        "value": "> * Two columns of fragment_final.txt (split by tabs)<br>\n>>>(1) circRNA location<br>\n>>>(2) Location of circRNA fragments on genome<br> \n> * circ_full_seq.fa is the assembly result of circRNA full-length sequences.\n \n"
      },
      "source": "https://raw.githubusercontent.com/cbbzhang/JCcirc/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/cbbzhang/JCcirc/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/cbbzhang/JCcirc/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "cbbzhang/JCcirc"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "JCcirc"
      },
      "source": "https://raw.githubusercontent.com/cbbzhang/JCcirc/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/cbbzhang/JCcirc/assets/38315099/6fd54d85-52dd-4f06-bb13-b975ae42ebd3"
      },
      "source": "https://raw.githubusercontent.com/cbbzhang/JCcirc/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9739909702218333,
      "result": {
        "original_header": "5. Output file",
        "type": "Text_excerpt",
        "value": "> * Two columns of fragment_final.txt (split by tabs)<br>\n>>>(1) circRNA location<br>\n>>>(2) Location of circRNA fragments on genome<br> \n"
      },
      "source": "https://raw.githubusercontent.com/cbbzhang/JCcirc/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/cbbzhang/JCcirc/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "JCcirc"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "cbbzhang"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 92984,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/cbbzhang/JCcirc/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "2. Prerequisites",
        "type": "Text_excerpt",
        "value": "> ### Software Prerequisites:\n>> JCcirc is implemented in Perl under Linux system.\n\n>> A de novo transcript assembler (one of them)\n* [Trinity](https://github.com/trinityrnaseq/trinityrnaseq)\n* [SPAdes](https://github.com/ablab/spades)\n* [SOAPdenovo-Trans](https://github.com/aquaskyline/SOAPdenovo-Trans)\n\n>> Aligner\n* [BWA](https://sourceforge.net/projects/bio-bwa/files/)\n\n> ### Input files:\n>> JCcirc works with six input files. A GTF annotation file, pair-end RNA-seq data, a contig file was generated by de novo assembler, a genome sequence file, and a circRNA junction list.\n\n>>> Contig file can be obtained by de novo transcript assemblers\n>>>> Trinity (trinity/inchworm.DS.fa)<br>\n>>>> SPAdes (spades/K31/transcripts.fasta)<br>\n>>>> SOAPdenovo-Trans (SOAP/soap.contig)<br>\n\n>>> CircRNA lists containing circRNA location (chromosome, start, end), host gene, strand, junction reads ID. <br>\n\n# 3. Usage \n\n```bash\nCommand:\n    perl JCcirc.pl -C circ -G genome -F annotation -O out_dir -P 8 --read1 read_1.fq --read2 read_2.fq --contig contig.fa -D 0\nArguments:\n\n    -C, --circ\n          input circRNA file, which includes chromosome, start site, end site, host gene, strand, and junction reads ID (required).\n    -O, --output\n          directory of output (required).\n    -G, --genome\n          FASTA file of all reference sequences. Please make sure this file is\n          the same one provided to the prediction tool (required).\n    -F, --annotation\n          gene annotation file in gtf format. Please make sure this file is\n          the same one provided to the prediction tool.\n    -P, --thread\n          set number of threads for parallel running (required).\n    --read1\n          RNA-Seq data, read_1 paired-end, fastq format).\n    --read2\n          RNA-Seq data, read_2 paired-end, fastq format).\n    --contig\n          contig sequences (required).\n    -D, --difference\n          the difference in support numbers between adjacent fragments when generating circRNA isoforms, default is 0 (recommend setting to 0, 1, or 2, the larger number means stricter).\n    -H, --help\n          show this help information.\n```\n\t\t  \n# 4. Note\n> * The RNA-seq data should be paired-end, and the same file when running de novo assembly.<br>\n> * The GTF annotation file should be the same one when running JCcirc and its upstream software. <br>\n> * Parameter difference|D recommend setting to 0, 1, or 2. If the intron length in the genome is short, set a large D value. For example, human data can be set to 0, and plant data can be set to 2.\n\n# 5. Output file\n> * Two columns of fragment_final.txt (split by tabs)<br>\n>>>(1) circRNA location<br>\n>>>(2) Location of circRNA fragments on genome<br>\n\n> * circ_full_seq.fa is the assembly result of circRNA full-length sequences.\n\n# 6. Reference\n[Zhang J, Zhang H, Ju Z, Peng Y, Pan Y, Xi W, Wei Y. JCcirc: circRNA full-length sequence assembly through integrated junction contigs. Brief Bioinform. 2023 Sep 22;24(6):bbad363.](https://academic.oup.com/bib/article-abstract/24/6/bbad363/7313456)\n# 7. Contact\n\tPlease contact Jingjing Zhang (zhangjj@siat.ac.cn) for questions and comments.\n"
      },
      "source": "https://raw.githubusercontent.com/cbbzhang/JCcirc/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Software Prerequisites:",
        "parent_header": [
          "2. Prerequisites"
        ],
        "type": "Text_excerpt",
        "value": "# JCcirc\n\n# 1. Introduction\n**JCcirc v1.0.0** (circRNA assembler through integrated junction contigs) is a computational tool that utilizes both back-splice junction (BSJ) and junction contig (JC) features to reconstruct full-length sequences of circular RNAs from RNA-seq datasets. JCcirc integrates junction reads and junction contigs for the assembly of all circRNAs. The BSJ feature is employed to accurately determine the boundaries of circRNAs, while the JC feature acts as an extension of junction reads, exhibiting superior performance in assembling circRNAs with low expression levels.\n![Figure 6](https://github.com/cbbzhang/JCcirc/assets/38315099/6fd54d85-52dd-4f06-bb13-b975ae42ebd3)\n<p align=\"center\">Workflow of JCcirc</p>\n\t\n# 2. Prerequisites\n> ### Software Prerequisites:\n>> JCcirc is implemented in Perl under Linux system.\n\n>> A de novo transcript assembler (one of them)\n* [Trinity](https://github.com/trinityrnaseq/trinityrnaseq)\n* [SPAdes](https://github.com/ablab/spades)\n* [SOAPdenovo-Trans](https://github.com/aquaskyline/SOAPdenovo-Trans)\n\n>> Aligner\n* [BWA](https://sourceforge.net/projects/bio-bwa/files/)\n\n> ### Input files:\n>> JCcirc works with six input files. A GTF annotation file, pair-end RNA-seq data, a contig file was generated by de novo assembler, a genome sequence file, and a circRNA junction list.\n\n>>> Contig file can be obtained by de novo transcript assemblers\n>>>> Trinity (trinity/inchworm.DS.fa)<br>\n>>>> SPAdes (spades/K31/transcripts.fasta)<br>\n>>>> SOAPdenovo-Trans (SOAP/soap.contig)<br>\n\n>>> CircRNA lists containing circRNA location (chromosome, start, end), host gene, strand, junction reads ID. <br>\n\n# 3. Usage \n\n```bash\nCommand:\n    perl JCcirc.pl -C circ -G genome -F annotation -O out_dir -P 8 --read1 read_1.fq --read2 read_2.fq --contig contig.fa -D 0\nArguments:\n\n    -C, --circ\n          input circRNA file, which includes chromosome, start site, end site, host gene, strand, and junction reads ID (required).\n    -O, --output\n          directory of output (required).\n    -G, --genome\n          FASTA file of all reference sequences. Please make sure this file is\n          the same one provided to the prediction tool (required).\n    -F, --annotation\n          gene annotation file in gtf format. Please make sure this file is\n          the same one provided to the prediction tool.\n    -P, --thread\n          set number of threads for parallel running (required).\n    --read1\n          RNA-Seq data, read_1 paired-end, fastq format).\n    --read2\n          RNA-Seq data, read_2 paired-end, fastq format).\n    --contig\n          contig sequences (required).\n    -D, --difference\n          the difference in support numbers between adjacent fragments when generating circRNA isoforms, default is 0 (recommend setting to 0, 1, or 2, the larger number means stricter).\n    -H, --help\n          show this help information.\n```\n\t\t  \n# 4. Note\n> * The RNA-seq data should be paired-end, and the same file when running de novo assembly.<br>\n> * The GTF annotation file should be the same one when running JCcirc and its upstream software. <br>\n> * Parameter difference|D recommend setting to 0, 1, or 2. If the intron length in the genome is short, set a large D value. For example, human data can be set to 0, and plant data can be set to 2.\n\n# 5. Output file\n> * Two columns of fragment_final.txt (split by tabs)<br>\n>>>(1) circRNA location<br>\n>>>(2) Location of circRNA fragments on genome<br>\n\n> * circ_full_seq.fa is the assembly result of circRNA full-length sequences.\n\n# 6. Reference\n[Zhang J, Zhang H, Ju Z, Peng Y, Pan Y, Xi W, Wei Y. JCcirc: circRNA full-length sequence assembly through integrated junction contigs. Brief Bioinform. 2023 Sep 22;24(6):bbad363.](https://academic.oup.com/bib/article-abstract/24/6/bbad363/7313456)\n# 7. Contact\n\tPlease contact Jingjing Zhang (zhangjj@siat.ac.cn) for questions and comments.\n"
      },
      "source": "https://raw.githubusercontent.com/cbbzhang/JCcirc/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Input files:",
        "parent_header": [
          "2. Prerequisites"
        ],
        "type": "Text_excerpt",
        "value": "# JCcirc\n\n# 1. Introduction\n**JCcirc v1.0.0** (circRNA assembler through integrated junction contigs) is a computational tool that utilizes both back-splice junction (BSJ) and junction contig (JC) features to reconstruct full-length sequences of circular RNAs from RNA-seq datasets. JCcirc integrates junction reads and junction contigs for the assembly of all circRNAs. The BSJ feature is employed to accurately determine the boundaries of circRNAs, while the JC feature acts as an extension of junction reads, exhibiting superior performance in assembling circRNAs with low expression levels.\n![Figure 6](https://github.com/cbbzhang/JCcirc/assets/38315099/6fd54d85-52dd-4f06-bb13-b975ae42ebd3)\n<p align=\"center\">Workflow of JCcirc</p>\n\t\n# 2. Prerequisites\n> ### Software Prerequisites:\n>> JCcirc is implemented in Perl under Linux system.\n\n>> A de novo transcript assembler (one of them)\n* [Trinity](https://github.com/trinityrnaseq/trinityrnaseq)\n* [SPAdes](https://github.com/ablab/spades)\n* [SOAPdenovo-Trans](https://github.com/aquaskyline/SOAPdenovo-Trans)\n\n>> Aligner\n* [BWA](https://sourceforge.net/projects/bio-bwa/files/)\n\n> ### Input files:\n>> JCcirc works with six input files. A GTF annotation file, pair-end RNA-seq data, a contig file was generated by de novo assembler, a genome sequence file, and a circRNA junction list.\n\n>>> Contig file can be obtained by de novo transcript assemblers\n>>>> Trinity (trinity/inchworm.DS.fa)<br>\n>>>> SPAdes (spades/K31/transcripts.fasta)<br>\n>>>> SOAPdenovo-Trans (SOAP/soap.contig)<br>\n\n>>> CircRNA lists containing circRNA location (chromosome, start, end), host gene, strand, junction reads ID. <br>\n"
      },
      "source": "https://raw.githubusercontent.com/cbbzhang/JCcirc/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 00:04:45",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "3. Usage",
        "type": "Text_excerpt",
        "value": "```bash\nCommand:\n    perl JCcirc.pl -C circ -G genome -F annotation -O out_dir -P 8 --read1 read_1.fq --read2 read_2.fq --contig contig.fa -D 0\nArguments:\n\n    -C, --circ\n          input circRNA file, which includes chromosome, start site, end site, host gene, strand, and junction reads ID (required).\n    -O, --output\n          directory of output (required).\n    -G, --genome\n          FASTA file of all reference sequences. Please make sure this file is\n          the same one provided to the prediction tool (required).\n    -F, --annotation\n          gene annotation file in gtf format. Please make sure this file is\n          the same one provided to the prediction tool.\n    -P, --thread\n          set number of threads for parallel running (required).\n    --read1\n          RNA-Seq data, read_1 paired-end, fastq format).\n    --read2\n          RNA-Seq data, read_2 paired-end, fastq format).\n    --contig\n          contig sequences (required).\n    -D, --difference\n          the difference in support numbers between adjacent fragments when generating circRNA isoforms, default is 0 (recommend setting to 0, 1, or 2, the larger number means stricter).\n    -H, --help\n          show this help information.\n```\n\t\t  "
      },
      "source": "https://raw.githubusercontent.com/cbbzhang/JCcirc/master/README.md",
      "technique": "header_analysis"
    }
  ]
}