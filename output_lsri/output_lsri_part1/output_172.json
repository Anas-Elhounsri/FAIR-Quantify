{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/chemprop/chemprop"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# How to contribute\n\nWe welcome contributions from external contributors, and this document\ndescribes how to merge code changes into this repository.\n\n## Getting Started\n\n* Make sure you have a [GitHub account](https://github.com/signup/free).\n* [Fork](https://help.github.com/articles/fork-a-repo/) this repository on GitHub.\n* On your local machine,\n  [clone](https://help.github.com/articles/cloning-a-repository/) your fork of\n  the repository.\n\n## Making Changes\n\n* Add some really awesome code to your local fork.  It's usually a [good\n  idea](http://blog.jasonmeridth.com/posts/do-not-issue-pull-requests-from-your-master-branch/)\n  to make changes on a\n  [branch](https://help.github.com/articles/creating-and-deleting-branches-within-your-repository/)\n  with the branch name relating to the feature you are going to add.\n* When you are ready for others to examine and comment on your new feature,\n  navigate to your fork of `chemprop` on GitHub and open a [pull\n  request](https://help.github.com/articles/using-pull-requests/) (PR). Note that\n  after you launch a PR from one of your fork's branches, all\n  subsequent commits to that branch will be added to the open pull request\n  automatically.  Each commit added to the PR will be validated for\n  mergability, compilation and test suite compliance; the results of these tests\n  will be visible on the PR page.\n* If you're providing a new feature, you **must** add test cases and documentation.\n* When the code is ready to go, run the test suite: `pytest`.\n* When you're ready to be considered for merging, click the \"Ready for review\"\n  box on the PR page to let the Chemprop devs know that the changes are complete.\n  The code will not be merged until the continuous integration returns checkmarks,\n  and at least one core developer gives \"Approved\" reviews.\n\n## Additional Resources\n\n* [General GitHub documentation](https://help.github.com/)\n* [PR best practices](http://codeinthehole.com/writing/pull-requests-and-other-good-practices-for-teams-using-github/)\n* [A guide to contributing to software packages](http://www.contribution-guide.org)\n"
      },
      "source": "https://raw.githubusercontent.com/chemprop/chemprop/main/CONTRIBUTING.md",
      "technique": "file_exploration"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-01-25T23:33:22Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-03T20:16:46Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Message Passing Neural Networks for Molecule Property Prediction"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9708549317967368,
      "result": {
        "original_header": "Chemprop",
        "type": "Text_excerpt",
        "value": "Chemprop is a repository containing message passing neural networks for molecular property prediction. \nChemprop recently underwent a ground-up rewrite and new major release (v2.0.0). A helpful transition guide from Chemprop v1 to v2 can be found [here](https://docs.google.com/spreadsheets/u/3/d/e/2PACX-1vRshySIknVBBsTs5P18jL4WeqisxDAnDE5VRnzxqYEhYrMe4GLS17w5KeKPw9sged6TmmPZ4eEZSTIy/pubhtml). This includes a side-by-side comparison of CLI argument options, a list of which arguments will be implemented in later versions of v2, and a list of changes to default hyperparameters. \n**License:** Chemprop is free to use under the [MIT License](LICENSE.txt). The Chemprop logo is free to use under [CC0 1.0](docs/source/_static/images/logo/LICENSE.txt). \n**References**: Please cite the appropriate papers if Chemprop is helpful to your research. \n- Chemprop was initially described in the papers [Analyzing Learned Molecular Representations for Property Prediction](https://pubs.acs.org/doi/abs/10.1021/acs.jcim.9b00237) for molecules and [Machine Learning of Reaction Properties via Learned Representations of the Condensed Graph of Reaction](https://doi.org/10.1021/acs.jcim.1c00975) for reactions.\n- The interpretation functionality (available in v1, but not yet implemented in v2) is based on the paper [Multi-Objective Molecule Generation using Interpretable Substructures](https://arxiv.org/abs/2002.03244).\n- Chemprop now has its own dedicated manuscript that describes and benchmarks it in more detail: [Chemprop: A Machine Learning Package for Chemical Property Prediction](https://doi.org/10.1021/acs.jcim.3c01250).\n- A paper describing and benchmarking the changes in v2.0.0 is forthcoming. \n- [A Deep Learning Approach to Antibiotic Discovery](https://www.cell.com/cell/fulltext/S0092-8674(20)30102-1) - _Cell_ (2020): Chemprop was used to predict antibiotic activity against _E. coli_, leading to the discovery of [Halicin](https://en.wikipedia.org/wiki/Halicin), a novel antibiotic candidate. Model checkpoints are availabile on [Zenodo](https://doi.org/10.5281/zenodo.6527882).\n- [Discovery of a structural class of antibiotics with explainable deep learning](https://www.nature.com/articles/s41586-023-06887-8) - _Nature_ (2023): Identified a structural class of antibiotics selective against methicillin-resistant _S. aureus_ (MRSA) and vancomycin-resistant enterococci using ensembles of Chemprop models, and explained results using Chemprop's interpret method.\n- [ADMET-AI: A machine learning ADMET platform for evaluation of large-scale chemical libraries](https://academic.oup.com/bioinformatics/advance-article/doi/10.1093/bioinformatics/btae416/7698030?utm_source=authortollfreelink&utm_campaign=bioinformatics&utm_medium=email&guestAccessKey=f4fca1d2-49ec-4b10-b476-5aea3bf37045): Chemprop was trained on 41 absorption, distribution, metabolism, excretion, and toxicity (ADMET) datasets from the [Therapeutics Data Commons](https://tdcommons.ai). The Chemprop models in ADMET-AI are available both as a web server at [admet.ai.greenstonebio.com](https://admet.ai.greenstonebio.com) and as a Python package at [github.com/swansonk14/admet_ai](https://github.com/swansonk14/admet_ai).\n- A more extensive list of successful Chemprop applications is given in our [2023 paper](https://doi.org/10.1021/acs.jcim.3c01250)\n \n"
      },
      "source": "https://raw.githubusercontent.com/chemprop/chemprop/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8362355341163423,
      "result": {
        "original_header": "v1 Known Issues",
        "type": "Text_excerpt",
        "value": "We have discontinued support for v1 since v2 has been released, but we still appreciate v1 bug reports and will tag them as [`v1-wontfix`](https://github.com/chemprop/chemprop/issues?q=label%3Av1-wontfix+) so the community can find them easily.\n \n"
      },
      "source": "https://raw.githubusercontent.com/chemprop/chemprop/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "v1 Documentation",
        "parent_header": [
          "Chemprop",
          "Version 1.x"
        ],
        "type": "Text_excerpt",
        "value": "- Documentation of Chemprop v1 is available [here](https://chemprop.readthedocs.io/en/v1.7.1/). Note that the content of this site is several versions behind the final v1 release (v1.7.1) and does not cover the full scope of features available in chemprop v1.\n- The v1 [README](https://github.com/chemprop/chemprop/blob/v1.7.1/README.md) is the best source for documentation on more recently-added features.\n- Please also see descriptions of all the possible command line arguments in the v1 [`args.py`](https://github.com/chemprop/chemprop/blob/v1.7.1/chemprop/args.py) file.\n"
      },
      "source": "https://raw.githubusercontent.com/chemprop/chemprop/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://chemprop.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/chemprop/chemprop/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/chemprop/chemprop/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/chemprop/chemprop/main/docs/source/tutorial/python/loss_functions.ipynb"
      },
      "source": "https://raw.githubusercontent.com/chemprop/chemprop/main/docs/source/tutorial/python/loss_functions.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/chemprop/chemprop/main/docs/source/tutorial/python/metrics.ipynb"
      },
      "source": "https://raw.githubusercontent.com/chemprop/chemprop/main/docs/source/tutorial/python/metrics.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/chemprop/chemprop/main/docs/source/tutorial/python/ensembling.ipynb"
      },
      "source": "https://raw.githubusercontent.com/chemprop/chemprop/main/docs/source/tutorial/python/ensembling.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/chemprop/chemprop/main/docs/source/tutorial/python/saving_and_loading.ipynb"
      },
      "source": "https://raw.githubusercontent.com/chemprop/chemprop/main/docs/source/tutorial/python/saving_and_loading.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/chemprop/chemprop/main/docs/source/tutorial/python/activation.ipynb"
      },
      "source": "https://raw.githubusercontent.com/chemprop/chemprop/main/docs/source/tutorial/python/activation.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/chemprop/chemprop/main/docs/source/tutorial/python/scaling.ipynb"
      },
      "source": "https://raw.githubusercontent.com/chemprop/chemprop/main/docs/source/tutorial/python/scaling.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/chemprop/chemprop/main/docs/source/tutorial/python/featurizers/molecule_featurizers.ipynb"
      },
      "source": "https://raw.githubusercontent.com/chemprop/chemprop/main/docs/source/tutorial/python/featurizers/molecule_featurizers.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/chemprop/chemprop/main/docs/source/tutorial/python/featurizers/bond_featurizers.ipynb"
      },
      "source": "https://raw.githubusercontent.com/chemprop/chemprop/main/docs/source/tutorial/python/featurizers/bond_featurizers.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/chemprop/chemprop/main/docs/source/tutorial/python/featurizers/molgraph_molecule_featurizer.ipynb"
      },
      "source": "https://raw.githubusercontent.com/chemprop/chemprop/main/docs/source/tutorial/python/featurizers/molgraph_molecule_featurizer.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/chemprop/chemprop/main/docs/source/tutorial/python/featurizers/molgraph_reaction_featurizer.ipynb"
      },
      "source": "https://raw.githubusercontent.com/chemprop/chemprop/main/docs/source/tutorial/python/featurizers/molgraph_reaction_featurizer.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/chemprop/chemprop/main/docs/source/tutorial/python/featurizers/atom_featurizers.ipynb"
      },
      "source": "https://raw.githubusercontent.com/chemprop/chemprop/main/docs/source/tutorial/python/featurizers/atom_featurizers.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/chemprop/chemprop/main/docs/source/tutorial/python/models/multicomponent_mpnn_model.ipynb"
      },
      "source": "https://raw.githubusercontent.com/chemprop/chemprop/main/docs/source/tutorial/python/models/multicomponent_mpnn_model.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/chemprop/chemprop/main/docs/source/tutorial/python/models/basic_mpnn_model.ipynb"
      },
      "source": "https://raw.githubusercontent.com/chemprop/chemprop/main/docs/source/tutorial/python/models/basic_mpnn_model.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/chemprop/chemprop/main/docs/source/tutorial/python/models/aggregation.ipynb"
      },
      "source": "https://raw.githubusercontent.com/chemprop/chemprop/main/docs/source/tutorial/python/models/aggregation.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/chemprop/chemprop/main/docs/source/tutorial/python/models/predictor.ipynb"
      },
      "source": "https://raw.githubusercontent.com/chemprop/chemprop/main/docs/source/tutorial/python/models/predictor.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/chemprop/chemprop/main/docs/source/tutorial/python/models/message_passing.ipynb"
      },
      "source": "https://raw.githubusercontent.com/chemprop/chemprop/main/docs/source/tutorial/python/models/message_passing.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/chemprop/chemprop/main/docs/source/tutorial/python/data/datapoints.ipynb"
      },
      "source": "https://raw.githubusercontent.com/chemprop/chemprop/main/docs/source/tutorial/python/data/datapoints.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/chemprop/chemprop/main/docs/source/tutorial/python/data/splitting.ipynb"
      },
      "source": "https://raw.githubusercontent.com/chemprop/chemprop/main/docs/source/tutorial/python/data/splitting.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/chemprop/chemprop/main/docs/source/tutorial/python/data/datasets.ipynb"
      },
      "source": "https://raw.githubusercontent.com/chemprop/chemprop/main/docs/source/tutorial/python/data/datasets.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/chemprop/chemprop/main/docs/source/tutorial/python/data/dataloaders.ipynb"
      },
      "source": "https://raw.githubusercontent.com/chemprop/chemprop/main/docs/source/tutorial/python/data/dataloaders.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/chemprop/chemprop/main/examples/interpreting_monte_carlo_tree_search.ipynb"
      },
      "source": "https://raw.githubusercontent.com/chemprop/chemprop/main/examples/interpreting_monte_carlo_tree_search.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/chemprop/chemprop/main/examples/mpnn_fingerprints.ipynb"
      },
      "source": "https://raw.githubusercontent.com/chemprop/chemprop/main/examples/mpnn_fingerprints.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/chemprop/chemprop/main/examples/extra_features_descriptors.ipynb"
      },
      "source": "https://raw.githubusercontent.com/chemprop/chemprop/main/examples/extra_features_descriptors.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/chemprop/chemprop/main/examples/hpopting.ipynb"
      },
      "source": "https://raw.githubusercontent.com/chemprop/chemprop/main/examples/hpopting.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/chemprop/chemprop/main/examples/training.ipynb"
      },
      "source": "https://raw.githubusercontent.com/chemprop/chemprop/main/examples/training.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/chemprop/chemprop/main/examples/training_regression_multicomponent.ipynb"
      },
      "source": "https://raw.githubusercontent.com/chemprop/chemprop/main/examples/training_regression_multicomponent.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/chemprop/chemprop/main/examples/predicting.ipynb"
      },
      "source": "https://raw.githubusercontent.com/chemprop/chemprop/main/examples/predicting.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/chemprop/chemprop/main/examples/predicting_regression_reaction.ipynb"
      },
      "source": "https://raw.githubusercontent.com/chemprop/chemprop/main/examples/predicting_regression_reaction.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/chemprop/chemprop/main/examples/training_regression_reaction.ipynb"
      },
      "source": "https://raw.githubusercontent.com/chemprop/chemprop/main/examples/training_regression_reaction.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/chemprop/chemprop/main/examples/convert_v1_to_v2.ipynb"
      },
      "source": "https://raw.githubusercontent.com/chemprop/chemprop/main/examples/convert_v1_to_v2.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/chemprop/chemprop/main/examples/multi_task.ipynb"
      },
      "source": "https://raw.githubusercontent.com/chemprop/chemprop/main/examples/multi_task.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/chemprop/chemprop/main/examples/predicting_regression_multicomponent.ipynb"
      },
      "source": "https://raw.githubusercontent.com/chemprop/chemprop/main/examples/predicting_regression_multicomponent.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 574
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/chemprop/chemprop/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "chemprop/chemprop"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Chemprop"
      },
      "source": "https://raw.githubusercontent.com/chemprop/chemprop/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/chemprop/chemprop/main/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/chemprop/chemprop/main/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/chemprop/chemprop/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "chemistry, drug-discovery, machine-learning, neural-networks"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "http://raw.githubusercontent.com/chemprop/chemprop/main/docs/source/_static/images/logo/chemprop_logo.svg"
      },
      "source": "https://raw.githubusercontent.com/chemprop/chemprop/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "chemprop"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "chemprop"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 420595,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 3968,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 1653,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/chemprop/chemprop/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_papers": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/2002.03244"
      },
      "source": "https://raw.githubusercontent.com/chemprop/chemprop/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "shihchengli",
          "type": "User"
        },
        "date_created": "2024-07-30T20:36:46Z",
        "date_published": "2024-07-31T01:03:59Z",
        "description": "## Enhancements and New Features\r\nThis release introduces several enhancements and new features to Chemprop. A notable addition is a new notebook demonstrating Monte Carlo Tree Search for model interpretability (see [here](https://github.com/chemprop/chemprop/blob/main/examples/interpreting_monte_carlo_tree_search.ipynb)). Enhancements have been made to the output transformation and prediction saving mechanisms for `MveFFN` and `EvidentialFFN`. Additionally, users can now perform predictions on CPU even if the models were trained on GPU. Users are now also warned when not using the TensorBoard logger, helping them to be aware of available logging tools for better monitoring.\r\n\r\n## Bug Fixes\r\nSeveral bugs have been fixed in this release, including issues related to Matthews Correlation Coefficient (MCC) metrics and loss calculations, and the behavior of the CGR featurizer when the bond features matrix is empty. The `task_weights` parameter has been standardized across all loss functions and moved to the correct device for MCC metrics, preventing device mismatch errors.\r\n\r\n## What's Changed\r\n* Standardize `task_weights` in `LossFunction` across all loss functions by @shihchengli in https://github.com/chemprop/chemprop/pull/941\r\n* Improve output transformation and prediction saving for `MveFFN` and `EvidentialFFN` by @shihchengli in https://github.com/chemprop/chemprop/pull/943\r\n* Enable CPU prediction for GPU-trained models by @snaeppi in https://github.com/chemprop/chemprop/pull/950\r\n* Fix Issues in MCC Metrics and Loss Calculations by @shihchengli in https://github.com/chemprop/chemprop/pull/942\r\n* Fix docs building by pinning sphinx-argparse by @jonwzheng in https://github.com/chemprop/chemprop/pull/964\r\n* Add Monte Carlo Tree search notebook for interpretability by @hwpang in https://github.com/chemprop/chemprop/pull/924\r\n* Fix CGR featurizer behavior when bond features matrix is empty by @jonwzheng in https://github.com/chemprop/chemprop/pull/958\r\n* Fix Failing CI for `torch==2.4.0` on Windows `ray[tune]` Tests by @JacksonBurns in https://github.com/chemprop/chemprop/pull/971\r\n* warn users when not using tensorboard logger by @JacksonBurns in https://github.com/chemprop/chemprop/pull/967\r\n* Bug: Move `task_weights` to 'device' for MCC metrics by @YoochanMyung in https://github.com/chemprop/chemprop/pull/973\r\n\r\n## New Contributors\r\n* @snaeppi made their first contribution in https://github.com/chemprop/chemprop/pull/950\r\n* @YoochanMyung made their first contribution in https://github.com/chemprop/chemprop/pull/973\r\n\r\n**Full Changelog**: https://github.com/chemprop/chemprop/compare/v2.0.3...v2.0.4",
        "html_url": "https://github.com/chemprop/chemprop/releases/tag/v2.0.4",
        "name": "v2.0.4",
        "release_id": 167925426,
        "tag": "v2.0.4",
        "tarball_url": "https://api.github.com/repos/chemprop/chemprop/tarball/v2.0.4",
        "type": "Release",
        "url": "https://api.github.com/repos/chemprop/chemprop/releases/167925426",
        "value": "https://api.github.com/repos/chemprop/chemprop/releases/167925426",
        "zipball_url": "https://api.github.com/repos/chemprop/chemprop/zipball/v2.0.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "KnathanM",
          "type": "User"
        },
        "date_created": "2024-06-28T21:21:02Z",
        "date_published": "2024-06-28T22:46:56Z",
        "description": "## Notable changes\r\nThe `mfs` argument of `MoleculeDatapoint` was removed in #876. This argument accepted functions which generated molecular features to use as extra datapoint descriptors. When using chemprop in a notebook, users should first manually generate their molecule features and pass them into the datapoints using `x_d` which stands for (extra) datapoint descriptors. This is demonstrated in the `extra_features_descriptors.ipynb` notebook under examples. CLI users will see no change as the CLI will still automatically calculate molecule features using user specified featurizers. The `--features-generators` flag has been deprecated though in favor of the more descriptive `--molecule-featurizers`. Available molecule features can be found in the help text generated by `chemprop train -h`.\r\n\r\n\r\nThe default aggregation was changed to norm in #946. This was meant to be change in version 2.0.0, but got missed. Norm aggregation was used in all the benchmarking of version 1 as it performs better than mean aggregation when predicting properties that are extensive in the number of atoms. \r\n\r\nMore documentation for the CLI `hpopt` and `fingerprint` commands have been added and can be viewed [here](https://chemprop.readthedocs.io/en/main/tutorial/cli/hpopt.html) and [here](https://chemprop.readthedocs.io/en/main/tutorial/cli/fingerprint.html). \r\n\r\nThe individual predictions of an ensemble of models are now automatically averaged and the individual predictions are saved in a separate file. #919\r\n\r\n## What's Changed\r\n* Change the installed numpy version in pyproject by @shihchengli in https://github.com/chemprop/chemprop/pull/922\r\n* Explicitly double save scalers/criterion by @KnathanM in https://github.com/chemprop/chemprop/pull/898\r\n* Add `--show-individual-scores` CLI flag by @shihchengli in https://github.com/chemprop/chemprop/pull/920\r\n* Set Ray Train's trainer resources to 0 by @hwpang in https://github.com/chemprop/chemprop/pull/928\r\n* Save individual and average predictions into different files by @shihchengli in https://github.com/chemprop/chemprop/pull/919\r\n* Add CLI pages for hpopt and fingerprint by @jonwzheng in https://github.com/chemprop/chemprop/pull/914\r\n* Make fingerprint CLI consistent with predict CLI by @hwpang in https://github.com/chemprop/chemprop/pull/927\r\n* Fix issue related to target column for fingerprint by @hwpang in https://github.com/chemprop/chemprop/pull/939\r\n* build molecule featurizer in parsing by @KnathanM in https://github.com/chemprop/chemprop/pull/875\r\n* Remove featurizing from datapoint by @KnathanM in https://github.com/chemprop/chemprop/pull/876\r\n* change aggregation default to norm by @KnathanM in https://github.com/chemprop/chemprop/pull/946\r\n* Use mol.GetBonds() instead of for loop by @KnathanM in https://github.com/chemprop/chemprop/pull/931\r\n\r\n\r\n**Full Changelog**: https://github.com/chemprop/chemprop/compare/v2.0.2...v2.0.3",
        "html_url": "https://github.com/chemprop/chemprop/releases/tag/v2.0.3",
        "name": "v2.0.3",
        "release_id": 163070464,
        "tag": "v2.0.3",
        "tarball_url": "https://api.github.com/repos/chemprop/chemprop/tarball/v2.0.3",
        "type": "Release",
        "url": "https://api.github.com/repos/chemprop/chemprop/releases/163070464",
        "value": "https://api.github.com/repos/chemprop/chemprop/releases/163070464",
        "zipball_url": "https://api.github.com/repos/chemprop/chemprop/zipball/v2.0.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "shihchengli",
          "type": "User"
        },
        "date_created": "2024-06-14T21:22:11Z",
        "date_published": "2024-06-14T22:51:26Z",
        "description": "In this release, we have included numerous notebooks to document modules. Chemprop may be used in python scripts, allowing for greater flexibility and control than the CLI. We recommend first looking through some of the worked examples to get an overview of the workflow. Then further details about the creation, customization, and use of Chemprop modules can be found in the [module tutorials](https://chemprop.readthedocs.io/en/main/tutorial/python/index.html).\r\n## New CLI Features\r\n### Improved `--model-path` CLI\r\nPreviously `--model-path` could take either a single model file or a directory containing model files. Now it can take any combination of  checkpoint files (.ckpt), model files (.pt), and directory containing model files. Directories are recursively searched for model file (.pt). Chemprop will use all models given and found to make predictions (#731). \r\n\r\n### Improvements for hpopt CLI\r\nSome flags related to Ray Tune (i.e., `--raytune-temp-dir`, `--raytune-num-cpus`, `--raytune-num-gpus`, and `--raytune-max-concurrent-trials`) have been added. You can use the CLI to initiate your Ray instance using these flags. (#918)\r\n\r\n### Bug fix\r\nAn incorrect max learning rate was used when writing the config file after hyperparameter optimization. This is now fixed (#913).\r\n\r\n## What's Changed\r\n* Fix typos in docstrings and .rst files that led to rendering errors by @jonwzheng in https://github.com/chemprop/chemprop/pull/901\r\n* Add CLI transition guide link to RTD by @kevingreenman in https://github.com/chemprop/chemprop/pull/907\r\n* Add meaningful warning for warm up epoch search space by @hwpang in https://github.com/chemprop/chemprop/pull/909\r\n* Fixing small bug in hpopt for learning rate by @akshatzalte in https://github.com/chemprop/chemprop/pull/913\r\n* Add notebooks to document modules by @KnathanM in https://github.com/chemprop/chemprop/pull/834\r\n* V2: consolidate `--checkpoint` CLI by @hwpang in https://github.com/chemprop/chemprop/pull/731\r\n* Improvements for hpopt cli by @hwpang in https://github.com/chemprop/chemprop/pull/918\r\n\r\n\r\n**Full Changelog**: https://github.com/chemprop/chemprop/compare/v2.0.1...v2.0.2",
        "html_url": "https://github.com/chemprop/chemprop/releases/tag/v2.0.2",
        "name": "v2.0.2 Adding Document Modules and hpopt Enhancement",
        "release_id": 160569262,
        "tag": "v2.0.2",
        "tarball_url": "https://api.github.com/repos/chemprop/chemprop/tarball/v2.0.2",
        "type": "Release",
        "url": "https://api.github.com/repos/chemprop/chemprop/releases/160569262",
        "value": "https://api.github.com/repos/chemprop/chemprop/releases/160569262",
        "zipball_url": "https://api.github.com/repos/chemprop/chemprop/zipball/v2.0.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "shihchengli",
          "type": "User"
        },
        "date_created": "2024-06-06T15:36:46Z",
        "date_published": "2024-06-06T17:14:13Z",
        "description": "## New CLI Features\r\n### Caching in CLI\r\n`MolGraphs` are now created (by featurizing molecules) and cached at the beginning of training by default in the CLI. If you wish to disable caching, you can use the `--no-cache` flag, which will featurize molecules on the fly instead. (#903)\r\n### Change the default trial scheduler in HPO\r\nWe changed the default trial scheduler for HPO from AsyncHyperBand to FIFO, as it is the default in Ray and was used in version 1. You can switch the trial scheduler back to AsyncHyperBand by using `--raytune-trial-scheduler AsyncHyperBand` if needed. (#896)\r\n### Support Optuna in HPO\r\nYou can use optuna as a HPO search algorithm via `--raytune-search-algorithm optuna`. (#888)\r\n\r\n## CLI Bug Fixes\r\n### HPO-related bugs\r\nIn #873, we changed the search space for the initial and final learning rate ratios and `max_lr` to avoid very small (~10^-10) learning rates and also ensured that some hyperparameters are saved as integers instead of floating-point numbers (e.g., `batch_size`). In #881, we addressed the bug concerning the incompatibility of the saved config file with the training config. In #836, we shut down Ray processes after HPO completion to avoid zombie processes. For those encountering issues with Ray processes, we suggest you start Ray outside of the Python process.\r\n### DDP-related bugs\r\nIn #884, we resolved the issue where metrics were not synchronized across processes and disabled the distributed sampler during testing in DDP.\r\n#### Backwards incompatibility note\r\nIn #883, we fixed the bug related to unused parameters in DDP. Models created via the CLI in v2.0.0 without additional atomic descriptors **cannot be used via the CLI** in v2.0.1. You will need to first remove `message_passing.W_d.weight` and `message_passing.W_d.bias` from the model file's state_dict to make it compatible with the current version. \r\n\r\n## What's Changed\r\n* update v2 installation instructions page in docs by @kevingreenman in https://github.com/chemprop/chemprop/pull/831\r\n* Remove Ray zombie processes by @shihchengli in https://github.com/chemprop/chemprop/pull/836\r\n* Docker images for v2 by @JacksonBurns in https://github.com/chemprop/chemprop/pull/841\r\n* Change Docker sytnax for MyBinder compatibility by @JacksonBurns in https://github.com/chemprop/chemprop/pull/872\r\n* [V2] Fix featurizer cli by @hwpang in https://github.com/chemprop/chemprop/pull/865\r\n* Fix hyperparameter predictorbase by @c-w-feldmann in https://github.com/chemprop/chemprop/pull/832\r\n* V2: Add all notebooks to test by @hwpang in https://github.com/chemprop/chemprop/pull/840\r\n* Fix small bugs in hpopt by @akshatzalte in https://github.com/chemprop/chemprop/pull/873\r\n* Add pip setup step to environment.yml install instructions by @cjmcgill in https://github.com/chemprop/chemprop/pull/889\r\n* Avoid scrambling target column name order by @JacksonBurns in https://github.com/chemprop/chemprop/pull/893\r\n* Fix unused parameters issue in DDP by @shihchengli in https://github.com/chemprop/chemprop/pull/883\r\n* Fix the inference issue related to the target columns by @shihchengli in https://github.com/chemprop/chemprop/pull/895\r\n* Change the default trial scheduler to `FIFOScheduler` by @shihchengli in https://github.com/chemprop/chemprop/pull/896\r\n* Add Optuna support for HPO by @shihchengli in https://github.com/chemprop/chemprop/pull/888\r\n* Fix Circular Import with `isort` by @JacksonBurns in https://github.com/chemprop/chemprop/pull/887\r\n* make LookupAction work with ConfigArgParse by @KnathanM in https://github.com/chemprop/chemprop/pull/900\r\n* V2: Fix typo in hpopt installation instruction by @hwpang in https://github.com/chemprop/chemprop/pull/897\r\n* V2: Make hpopt config compatible with training config by @hwpang in https://github.com/chemprop/chemprop/pull/881\r\n* Fix DDP prediction and checkpoint Issues by @shihchengli in https://github.com/chemprop/chemprop/pull/884\r\n* Add simple cache to CLI by @KnathanM in https://github.com/chemprop/chemprop/pull/903\r\n* V2: Fix small hpopt bugs and add example notebook by @hwpang in https://github.com/chemprop/chemprop/pull/842\r\n\r\n## New Contributors\r\n* @akshatzalte made his first contribution in https://github.com/chemprop/chemprop/pull/873\r\n\r\n**Full Changelog**: https://github.com/chemprop/chemprop/compare/v2.0.0...v2.0.1",
        "html_url": "https://github.com/chemprop/chemprop/releases/tag/v2.0.1",
        "name": "v2.0.1 First Patch",
        "release_id": 159224178,
        "tag": "v2.0.1",
        "tarball_url": "https://api.github.com/repos/chemprop/chemprop/tarball/v2.0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/chemprop/chemprop/releases/159224178",
        "value": "https://api.github.com/repos/chemprop/chemprop/releases/159224178",
        "zipball_url": "https://api.github.com/repos/chemprop/chemprop/zipball/v2.0.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "kevingreenman",
          "type": "User"
        },
        "date_created": "2024-04-23T16:35:41Z",
        "date_published": "2024-04-23T17:41:20Z",
        "description": "This is the first stable release of Chemprop v2.0.0, with updates since the v2.0.0-rc.1 release candidate in early March.\r\n\r\nThe primary objectives of v2.0.0 are making Chemprop more usable from within Python scripts, more modular, easier to maintain and develop, more compute/memory efficient, and usable with PyTorch Lightning. Some features will not be migrated from v1 to v2 (e.g. web, sklearn). Some v1 features will be added in later versions of v2 (v2.1+) (e.g. uncertainty, interpret, atom- and bond-targets); see milestones [here](https://github.com/chemprop/chemprop/milestones). The new version also has substantially faster featurization speeds and much higher unit test coverage, enables training on multiple GPUs, and works on Windows (in addition to Linux and Mac). Finally, the incorporation of a batch normalization layer is expected to result in smoother training and improved predictions. We encourage all Chemprop users to try using v2.0.0 to see how it can improve their workflows.\r\n\r\nv2 documentation can be found [here](https://chemprop.readthedocs.io/en/main/).\r\n\r\nThere are v2 tutorial notebooks in the [`examples/`](https://github.com/chemprop/chemprop/tree/main/examples) directory.\r\n\r\nA helpful transition guide from Chemprop v1 to v2 can be found [here](https://docs.google.com/spreadsheets/u/3/d/e/2PACX-1vRshySIknVBBsTs5P18jL4WeqisxDAnDE5VRnzxqYEhYrMe4GLS17w5KeKPw9sged6TmmPZ4eEZSTIy/pubhtml). This includes a side-by-side comparison of CLI argument options, a list of which arguments will be implemented in later versions of v2, and a list of changes to default hyperparameters.\r\n\r\nNote that if you install from source, the primary branch of our repository has been renamed from `master` to `main`. \r\n\r\nDue to development team bandwidth, Chemprop v1 will no longer be actively developed, so that we can focus our efforts on v2. Bug reports and questions about v1 are still welcome to benefit users who haven't yet made the switch to v2, but bug reports will not be fixed by the development team.\r\n\r\nPlease let us know of any bugs you find, questions you have, or enhancements you want in Chemprop v2 by opening an issue.",
        "html_url": "https://github.com/chemprop/chemprop/releases/tag/v2.0.0",
        "name": "v2.0.0 Stable Release",
        "release_id": 152443378,
        "tag": "v2.0.0",
        "tarball_url": "https://api.github.com/repos/chemprop/chemprop/tarball/v2.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/chemprop/chemprop/releases/152443378",
        "value": "https://api.github.com/repos/chemprop/chemprop/releases/152443378",
        "zipball_url": "https://api.github.com/repos/chemprop/chemprop/zipball/v2.0.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "kevingreenman",
          "type": "User"
        },
        "date_created": "2024-04-12T17:30:57Z",
        "date_published": "2024-04-12T17:47:55Z",
        "description": "This is the final release of chemprop v1. All future development will be done on [chemprop v2](https://github.com/chemprop/chemprop/issues/517). The development team is still happy to answer questions about v1, but no new feature requests or PRs for v1 will be accepted. Users who identify bugs in v1 are still encouraged to open issues to report them - they will be tagged as [`v1-wontfix`](https://github.com/chemprop/chemprop/labels/v1-wontfix) to signify that we won't be publishing fixes for them in official chemprop releases, but the bugs can still be open to community discussion.\r\n\r\nWe encourage all users to try migrating their workflows over to chemprop v2 (available now as a release candidate, stable version planned to be released within the next week) and let us know of any issues you encounter. All v1 releases will remain available on PyPI, and the v1 source code will remain available in this GitHub organization.\r\n\r\n## What's Changed\r\n* fix the `uncal_vars` for atom/bond property prediction by @shihchengli in https://github.com/chemprop/chemprop/pull/712\r\n* [v1]: Add Docker Image Building Action and Official Images to DockerHub by @JacksonBurns in https://github.com/chemprop/chemprop/pull/718\r\n* remove macos and windows from v1 ci by @JacksonBurns in https://github.com/chemprop/chemprop/pull/720\r\n* update docker build `if` to use correct upstream branch name by @JacksonBurns in https://github.com/chemprop/chemprop/pull/723\r\n* fix the task names by @shihchengli in https://github.com/chemprop/chemprop/pull/725\r\n* Fixed typo in README.md by @willspag in https://github.com/chemprop/chemprop/pull/745\r\n\r\n## New Contributors\r\n* @willspag made their first contribution in https://github.com/chemprop/chemprop/pull/745\r\n\r\n**Full Changelog**: https://github.com/chemprop/chemprop/compare/v1.7.0...v1.7.1",
        "html_url": "https://github.com/chemprop/chemprop/releases/tag/v1.7.1",
        "name": "Final Patch for Version 1",
        "release_id": 150968394,
        "tag": "v1.7.1",
        "tarball_url": "https://api.github.com/repos/chemprop/chemprop/tarball/v1.7.1",
        "type": "Release",
        "url": "https://api.github.com/repos/chemprop/chemprop/releases/150968394",
        "value": "https://api.github.com/repos/chemprop/chemprop/releases/150968394",
        "zipball_url": "https://api.github.com/repos/chemprop/chemprop/zipball/v1.7.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "kevingreenman",
          "type": "User"
        },
        "date_created": "2024-03-04T22:23:20Z",
        "date_published": "2024-03-04T22:37:31Z",
        "description": "This is a release candidate for Chemprop v2.0.0, to be released in April 2024.\r\n\r\nThe primary objectives of v2.0.0 are making Chemprop more usable from within Python scripts, more modular, easier to maintain and develop, more compute/memory efficient, and usable with PyTorch Lightning. Some features will not be migrated from v1 to v2 (e.g. web, sklearn). Some v1 features will be added in later versions of v2 (v2.1+) (e.g. uncertainty, interpret, atom- and bond-targets); see milestones [here](https://github.com/chemprop/chemprop/milestones). The new version also has substantially faster featurization speeds and much higher unit test coverage, enables training on multiple GPUs, and works on Windows (in addition to Linux and Mac). Finally, the incorporation of a batch normalization layer is expected to result in smoother training and improved predictions. The label as a \u201crelease candidate\u201d reflects its availability to be downloaded via PyPI and that only minor changes are expected for the Python API before the final release. We expect most remaining changes before the release of v2.0.0 in April to be focused on additional improvements to the command line interface (CLI), which does not yet have feature parity with v1. We encourage all Chemprop users to try using v2.0.0-rc.1 to see how it can improve their workflows.\r\n\r\nThe v2 documentation can be found [here](https://chemprop.readthedocs.io/en/v2-dev/index.html).\r\n\r\nThere are tutorial notebooks for v2 in the [examples/](https://github.com/chemprop/chemprop/tree/v2/dev/examples) directory.\r\n\r\nA helpful transition guide from v1 to v2 can be found [here](https://docs.google.com/spreadsheets/u/3/d/e/2PACX-1vRshySIknVBBsTs5P18jL4WeqisxDAnDE5VRnzxqYEhYrMe4GLS17w5KeKPw9sged6TmmPZ4eEZSTIy/pubhtml). This includes a side-by-side comparison of CLI argument options, a list of which arguments will be implemented in later versions of v2, and a list of changes to default hyperparameters.\r\n\r\nYou can subscribe to our development status and notes for this version: https://github.com/chemprop/chemprop/issues/517.\r\n\r\nOngoing work for this version is available on the `v2/dev` [branch](https://github.com/chemprop/chemprop/tree/v2/dev).\r\n\r\nPlease let us know of any bugs you find by opening an issue.",
        "html_url": "https://github.com/chemprop/chemprop/releases/tag/v2.0.0-rc.1",
        "name": "v2.0.0 Release Candidate",
        "release_id": 144734097,
        "tag": "v2.0.0-rc.1",
        "tarball_url": "https://api.github.com/repos/chemprop/chemprop/tarball/v2.0.0-rc.1",
        "type": "Release",
        "url": "https://api.github.com/repos/chemprop/chemprop/releases/144734097",
        "value": "https://api.github.com/repos/chemprop/chemprop/releases/144734097",
        "zipball_url": "https://api.github.com/repos/chemprop/chemprop/zipball/v2.0.0-rc.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "kevingreenman",
          "type": "User"
        },
        "date_created": "2024-03-04T21:29:32Z",
        "date_published": "2024-03-04T21:51:27Z",
        "description": "## What's Changed\r\n* new split per molecular weight by @soulios in https://github.com/chemprop/chemprop/pull/456\r\n* Specify license for Chemprop logos by @mliu49 in https://github.com/chemprop/chemprop/pull/461\r\n* Add `todo.md` by @davidegraff in https://github.com/chemprop/chemprop/pull/492\r\n* Update authors list in license file and alphabetically sort by @cjmcgill in https://github.com/chemprop/chemprop/pull/532\r\n* update authors in LICENSE and setup files for v1 by @kevingreenman in https://github.com/chemprop/chemprop/pull/533\r\n* Fix Transpose bug in Inequality Regression by @cjmcgill in https://github.com/chemprop/chemprop/pull/308\r\n* Add Dirichlet Evidential Uncertainty Quantification by @cjmcgill in https://github.com/chemprop/chemprop/pull/423\r\n* New metrics by @soulios in https://github.com/chemprop/chemprop/pull/542\r\n* Updating README with ADMET-AI details by @swansonk14 in https://github.com/chemprop/chemprop/pull/554\r\n* Improve error message when gilbrat is needed. by @KnathanM in https://github.com/chemprop/chemprop/pull/569\r\n* limit chempropv1 python version to 3.7, 3.8 only by @JacksonBurns in https://github.com/chemprop/chemprop/pull/618\r\n* Add a `CITATIONS.bib` by @JacksonBurns in https://github.com/chemprop/chemprop/pull/627\r\n* Limit Maximum Allowed `flask` Version in v1 by @JacksonBurns in https://github.com/chemprop/chemprop/pull/628\r\n* move num_unc_tasks definition to ensure always defined by @kevingreenman in https://github.com/chemprop/chemprop/pull/632\r\n* Switching np.mean to np.nanmean to handle NaN metrics by @swansonk14 in https://github.com/chemprop/chemprop/pull/453\r\n* Fix the dtype for targets of different sizes by @shihchengli in https://github.com/chemprop/chemprop/pull/638\r\n* Add setters for atom and bond constraints by @shihchengli in https://github.com/chemprop/chemprop/pull/637\r\n* switch v1 readthedocs build from conda to mamba by @kevingreenman in https://github.com/chemprop/chemprop/pull/660\r\n* Fix v1 docs theme by @kevingreenman in https://github.com/chemprop/chemprop/pull/669\r\n* Conformal Calibration by @danielxu9393 in https://github.com/chemprop/chemprop/pull/304\r\n* add note on feature releases and instructions for ssl+ddp by @JacksonBurns in https://github.com/chemprop/chemprop/pull/685\r\n* remove unnecessary argument for reshape function by @shihchengli in https://github.com/chemprop/chemprop/pull/671\r\n* Fix atom/bond property prediction with atom-mapped SMILES and target classification by @shihchengli in https://github.com/chemprop/chemprop/pull/673\r\n* Pass num_workers to MoleculeDataLoader during interpretation by @kevingreenman in https://github.com/chemprop/chemprop/pull/691\r\n* conformal quantile prediction bug fix by @shihchengli in https://github.com/chemprop/chemprop/pull/693\r\n\r\n## New Contributors\r\n* @soulios made their first contribution in https://github.com/chemprop/chemprop/pull/456\r\n* @danielxu9393 made their first contribution in https://github.com/chemprop/chemprop/pull/304\r\n\r\n**Full Changelog**: https://github.com/chemprop/chemprop/compare/v1.6.1...v1.7.0",
        "html_url": "https://github.com/chemprop/chemprop/releases/tag/v1.7.0",
        "name": "Conformal Calibration",
        "release_id": 144729009,
        "tag": "v1.7.0",
        "tarball_url": "https://api.github.com/repos/chemprop/chemprop/tarball/v1.7.0",
        "type": "Release",
        "url": "https://api.github.com/repos/chemprop/chemprop/releases/144729009",
        "value": "https://api.github.com/repos/chemprop/chemprop/releases/144729009",
        "zipball_url": "https://api.github.com/repos/chemprop/chemprop/zipball/v1.7.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "kevingreenman",
          "type": "User"
        },
        "date_created": "2023-08-01T19:58:36Z",
        "date_published": "2023-08-01T20:09:25Z",
        "description": "## Bug fix\r\nPR #383 unexpectedly broke the atom mapping for reaction mode. The issue is described in Issue #426 and fixed by PR #427.\r\n\r\n## What's Changed\r\n* Fix versioning issues - metadata and dependencies by @kevingreenman in https://github.com/chemprop/chemprop/pull/420\r\n* add job to tests action for PyPI package by @JacksonBurns in https://github.com/chemprop/chemprop/pull/422\r\n* added chemprop manuscript to readme by @hesther in https://github.com/chemprop/chemprop/pull/425\r\n* Keep Support for Python 3.7 and 3.8 when fixing `gilbrat` Issue by @JacksonBurns in https://github.com/chemprop/chemprop/pull/431\r\n* Fix reaction atom mapping by @shihchengli in https://github.com/chemprop/chemprop/pull/427\r\n\r\n\r\n**Full Changelog**: https://github.com/chemprop/chemprop/compare/v1.6.0...v1.6.1",
        "html_url": "https://github.com/chemprop/chemprop/releases/tag/v1.6.1",
        "name": "Bug fix for reaction atom mapping",
        "release_id": 114709352,
        "tag": "v1.6.1",
        "tarball_url": "https://api.github.com/repos/chemprop/chemprop/tarball/v1.6.1",
        "type": "Release",
        "url": "https://api.github.com/repos/chemprop/chemprop/releases/114709352",
        "value": "https://api.github.com/repos/chemprop/chemprop/releases/114709352",
        "zipball_url": "https://api.github.com/repos/chemprop/chemprop/zipball/v1.6.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "kevingreenman",
          "type": "User"
        },
        "date_created": "2023-07-17T20:33:26Z",
        "date_published": "2023-07-17T20:43:17Z",
        "description": "## Major New Features\r\n* Atomic/bond targets prediction by @shihchengli in https://github.com/chemprop/chemprop/pull/280\r\n\r\n## What's Changed\r\n* Replace multiclass mcc with 1-mcc for loss by @cjmcgill in https://github.com/chemprop/chemprop/pull/332\r\n* Add chemprop logo by @shihchengli in https://github.com/chemprop/chemprop/pull/339\r\n* Add CodeQL workflow for GitHub code scanning by @lgtm-com in https://github.com/chemprop/chemprop/pull/344\r\n* Add to the description of evidential regularization by @cjmcgill in https://github.com/chemprop/chemprop/pull/353\r\n* Remove deprecated numpy float types by @cjmcgill in https://github.com/chemprop/chemprop/pull/357\r\n* Correct a bug in ENCE uncertainty evaluation by @cjmcgill in https://github.com/chemprop/chemprop/pull/360\r\n* Hyperopt Parallel Race Conditions and Manual Trial Load by @cjmcgill in https://github.com/chemprop/chemprop/pull/307\r\n* Simplified install with PyPI `rdkit` and git install in `setup.py` by @JacksonBurns in https://github.com/chemprop/chemprop/pull/364\r\n* Allow providing both loaded features and a features generator by @shihchengli in https://github.com/chemprop/chemprop/pull/318\r\n* For any multiclass task, `make_predictions` fails if option --individual_ensemble_predictions is on. by @piotr-semenov in https://github.com/chemprop/chemprop/pull/354\r\n* Save loaded molecular features into .npy files by @shihchengli in https://github.com/chemprop/chemprop/pull/337\r\n* Ignore invalid atom-mapped SMILES by @shihchengli in https://github.com/chemprop/chemprop/pull/367\r\n* Molecule fingerprinting with invalid SMILES in list by @shihchengli in https://github.com/chemprop/chemprop/pull/351\r\n* change calibration_features_path from str to List[str] by @ceroth in https://github.com/chemprop/chemprop/pull/358\r\n* Change logo style by @shihchengli in https://github.com/chemprop/chemprop/pull/369\r\n* Clamp evidential 'v' parameter by @kevingreenman in https://github.com/chemprop/chemprop/pull/371\r\n* fix colab demo by @kevingreenman in https://github.com/chemprop/chemprop/pull/368\r\n* Avoid OverflowError when setting field size to sys.maxsize by @shihchengli in https://github.com/chemprop/chemprop/pull/373\r\n* Set atom and bond constraints when loading model by @shihchengli in https://github.com/chemprop/chemprop/pull/374\r\n* Readme updates by @kevingreenman in https://github.com/chemprop/chemprop/pull/385\r\n* Remove atom map numbers for scaffold splits by @shihchengli in https://github.com/chemprop/chemprop/pull/383\r\n* update bug report template - ask for full stack trace by @kevingreenman in https://github.com/chemprop/chemprop/pull/401\r\n* Fix t-SNE script by @kevingreenman in https://github.com/chemprop/chemprop/pull/403\r\n* Fixing skipped lines in csv writing when using a windows computer by @cjmcgill in https://github.com/chemprop/chemprop/pull/406\r\n\r\n**Full Changelog**: https://github.com/chemprop/chemprop/compare/v1.5.2...v1.6.0",
        "html_url": "https://github.com/chemprop/chemprop/releases/tag/v1.6.0",
        "name": "Atomic/bond targets prediction",
        "release_id": 112563775,
        "tag": "v1.6.0",
        "tarball_url": "https://api.github.com/repos/chemprop/chemprop/tarball/v1.6.0",
        "type": "Release",
        "url": "https://api.github.com/repos/chemprop/chemprop/releases/112563775",
        "value": "https://api.github.com/repos/chemprop/chemprop/releases/112563775",
        "zipball_url": "https://api.github.com/repos/chemprop/chemprop/zipball/v1.6.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "cjmcgill",
          "type": "User"
        },
        "date_created": "2022-07-20T03:12:45Z",
        "date_published": "2022-07-20T03:18:43Z",
        "description": "# Features\r\n\r\n## Flexible hyperparameter search space\r\nThe parameters to be included in hyperparameter optimization can now be selected using the argument `--search_parameter_kewords {list-of-keywords}`. The parameters supported are: activation, aggregation, aggregation_norm, batch_size, depth, dropout, ffn_hidden_size, ffn_num_layers, final_lr, hidden_size, init_lr, max_lr, warmup_epochs. Some special kewords are also included for groups of keywords or different search behavior: basic, learning_rate, all, linked_hidden_size.\r\nPR #299\r\n\r\n## Missing targets in uncertainty calibration datasets\r\nAdded capabilities to the uncertainty calibration and evaluation methods to allow them to handle missing target values in multitask jobs. This capability was already included in the normal training of models, now implemented in uncertainty calibration and evaluation.\r\nPR #295\r\nIssue #292\r\n\r\n## Multitask evaluation for tasks of different magnitudes\r\nWhen evaluation metrics tend to scale with the magnitude of a task (e.g., rmse), averaging metrics between tasks has been replaced with a geometric mean function. This makes the average metric in multitask regression jobs be less dominated by large magnitude targets. This was previously an issue for hyperparameter optimization and the evaluation of optimal epoch during model training, though the calculation of loss for gradient descent is on scaled targets and was already not scale dependent.\r\nPR #290\r\n\r\n## Empty test set allowed\r\nAn empty test split can now be used during training. This was previously possible only using the `cv-no-test` split method, but now it is available more widely when specifying split sizes, for example with `--split_sizes 0.8 0.2 0`.\r\nPR #284, #260 related\r\nIssue #279\r\n\r\n## Updates to conda environment and docker file\r\nConda environment building will now prefer to use the pytorch channel over the conda-forge channel. The Dockerfile has been updated to use micromamba, allowing for faster environment solves than conda and removing a potential licensing issue.\r\nPR #276\r\n\r\n# Bug Fixes\r\n\r\n## Fix MCC loss for multiclass jobs\r\nCorrected a calculation problem in the loss function that was returning infinite loss inappropriately. Also adopted the convention of returning loss of zero when infinite loss is returned, as often happens in very unbalanced datasets. Added appropriate unit testing.\r\nPR #309\r\nIssue #306\r\n\r\n## Correct code error in ence uncertainty evaluation\r\nCorrects an error in the ence uncertainty evaluation method that made that method unusable. Bug was introduced during PR #305.\r\nPR #302\r\nIssue #301\r\n\r\n## Fixed link to MoleculeNet website\r\nCorrected the link to the MoleculeNet benchmark dataset website in the readme, following MoleculeNet migrating to a new site location.\r\nPR #296\r\n\r\n## Multitarget uncertainty calibration mve weighting method\r\nPreviously, this method only worked for single task jobs, now has been extended to work for multitask models as well.\r\nPR #291\r\n\r\n## Remove unused verion.py file\r\nVersion tracking in Chemprop no longer uses the __version__.py file and it was removed.\r\nPR #283\r\n\r\n## Multiclass argument typo in readme\r\nCorrected a typo where the number of classes used in multiclass regression should have been indicated as `--multiclass_num_classes`.\r\nPR #281\r\n\r\n## Repair individual ensemble predictions\r\nRefactoring of prediction file during the addition of uncertainty functions disabled the option to return the individual predictions of each member of an ensemble of models. Option is now available again.\r\nPR #274",
        "html_url": "https://github.com/chemprop/chemprop/releases/tag/v1.5.2",
        "name": "Flexible hyperparameter search, missing uncertainty target values, evaluation of different magnitude multitask targets, empty test set assignment, and DockerFile updates",
        "release_id": 72386479,
        "tag": "v1.5.2",
        "tarball_url": "https://api.github.com/repos/chemprop/chemprop/tarball/v1.5.2",
        "type": "Release",
        "url": "https://api.github.com/repos/chemprop/chemprop/releases/72386479",
        "value": "https://api.github.com/repos/chemprop/chemprop/releases/72386479",
        "zipball_url": "https://api.github.com/repos/chemprop/chemprop/zipball/v1.5.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "cjmcgill",
          "type": "User"
        },
        "date_created": "2022-05-01T17:09:05Z",
        "date_published": "2022-05-01T17:19:45Z",
        "description": "# Bugfix\r\n## Inconsistent Path For Uncertainty Evaluation\r\nFixed a bug in uncertainty evaluation where the uncertainty evaluator was using the path name originally used to train a checkpoint. This made the uncertainty evaluator only work in the case that the test data and training data used in initial model training had the same path.",
        "html_url": "https://github.com/chemprop/chemprop/releases/tag/v1.5.1",
        "name": "Quick Fix to Uncertainty Evaluation",
        "release_id": 65764070,
        "tag": "v1.5.1",
        "tarball_url": "https://api.github.com/repos/chemprop/chemprop/tarball/v1.5.1",
        "type": "Release",
        "url": "https://api.github.com/repos/chemprop/chemprop/releases/65764070",
        "value": "https://api.github.com/repos/chemprop/chemprop/releases/65764070",
        "zipball_url": "https://api.github.com/repos/chemprop/chemprop/zipball/v1.5.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "cjmcgill",
          "type": "User"
        },
        "date_created": "2022-04-30T03:58:00Z",
        "date_published": "2022-04-30T04:09:20Z",
        "description": "# Features\r\n\r\n## Uncertainty Tools\r\nTools added for uncertainty quantification, calibration, and evaluation as part of the chemprop predict function. Uncertainty predictions are saved as part of the predictions file. Uncertainty functions and outputs are triggered using the arguments `--uncertainty_method {method}`.\r\n\r\nUncertainty outputs can be calibrated using an outside dataset (evaluation set from training is often suitable) in order to have better uncertainty estimates on new predictions. Can be activated using `--calibration_method {method}` and `--calibration_path {path-to-csv}`. For the regression dataset type, a calibrated output can provide either a standard deviation or one-sided interval bound, as set with the options `--regression_calibrator_metric {stdev-or-interval}` and `--calibration_interval_percentile {int}`.\r\n\r\nIf the data file containing smiles for the test path also contains target values, the uncertainty performance can be evaluated using various metrics, activated with the option `--evaluation_methods {list-of-methods}`.\r\n\r\nInternally, this PR creates several classes for carrying out prediction tasks: UncertaintyEstimator, UncertaintyPredictor, UncertaintyCalibrator, UncertaintyEvaluator. Loss functions have been added that have auxiliary uncertainty outputs, `mve` and `evidential` for regression.\r\nPR #267\r\nPR #269\r\n\r\n## Reaction-Solvent Option\r\nGives the option to train a chemprop model using one reaction and one molecule for each datapoint. Active when used with the option `--reaction_solvent`. Options for making the solvent mpnn use different parameters than that for the reaction are possible using `--bias_solvent`, `--hidden_size_solvent {int}`, and `--depth_solvent {int}`.\r\nPR #246\r\n\r\n## Multimolecule Fingerprinting\r\nAdded some new changes for fingerprint functions with multiple molecules. Models trained with a \"shared-mpn\" between two molecules can return a MPN fingerprint with only one molecule provided. Also, when multiple molecule models are used for MPN fingerprint generation, the output will indicate which molecule each element belongs to.\r\nPR #242\r\nIssue #236\r\n\r\n## Colab Notebook Examples\r\nCreated a Jupyter notebook that runs examples of Chemprop jobs, specifically as the functions can be used in python. Good resource for new users, demonstrations, or tutorials. Linked to Google Colab so that it can be run remotely, not requiring any local install of Chemprop.\r\nPR #239\r\nPR #273\r\n\r\n## Loss Function Options\r\nPreviously, loss functions were selected automatically based on the dataset type being used in model training. Now the loss function can be selected with `--loss_function {function}`. Some new specialty loss functions have been added with this capability.\r\n* Matthews Correlation Coefficient (`mcc`) is a loss function for classification and multiclass that considers True Positives, True Negatives, False Positives, False Negatives separately in the loss function, avoiding domination by one class and making it well suited to unbalanced training sets.\r\n* Bounded Mean Squared Error (`bounded_mse`) is a regression loss function that allows for training targets expressed as inequalities, e.g. \">5.0\". Intended for use with experimental data with delimited ranges.\r\n* Mean Variance Estimation (`mve`) and `evidential` loss are regression loss functions that maximize the likelihood of the target on an estimated uncertainty distribution. When used as loss functions, the outputs of these functions can be used in uncertainty estimation.\r\nAppropriate metrics have been added along with these loss functions.\r\nPR #238\r\nPR #267\r\n\r\n# Development Environment\r\n\r\n## GitHub Addons\r\nAdded a `CONTRIBUTING.md` file with guidelines for how users can contribute to Chemprop. New templates are now available for issue submission that distinguish between different issue types: bug report, feature request, and questions. New templates also suggested for PRs. Templates stored in the `.github` directory.\r\nPR #241\r\n\r\n## Unit Testing\r\nPart of an ongoing effort to include a more complete set of automated tests for Chemprop. Unit tests added for data utils, uncertainty-related loss functions, and the uncertainty evaluation metrics.\r\nPR #232\r\nPR #267\r\nPR #269\r\n\r\n## Flake8 Formatting\r\nOngoing effort to standardize the formatting of incoming code. New PRs now request/require the new code to be flake8 compliant in formatting. The utils module and files significantly associated with the new uncertainty function are flake8 compliant.\r\nPR #241\r\nPR #258\r\nPR #267\r\n\r\n## Update Versioning\r\nChanged the way that version numbers are stored and updated throughout the code.\r\nPR #247\r\n\r\n## Remove Assertion Errors\r\nRemoved many of the assertion errors throughout Chemprop and replaced them with more easily interpretable error types and messages.\r\nPR #257\r\n\r\n# Bug Fixes\r\n\r\n## Hyperopt Version Fix\r\nChanged the way that random seeds are passed into hyperopt during hyperparameter optimization to avoid an error where hyperopt stopped supporting a previously supported way of passing numpy seeds.\r\nPR #245\r\nIssue #243\r\nIssue #254\r\nIssue #264\r\n",
        "html_url": "https://github.com/chemprop/chemprop/releases/tag/v1.5.0",
        "name": " Uncertainty Functions, Reaction-Solvent Models, Loss Function Options, Keyed Splitting, and Chemprop Colab Demo",
        "release_id": 65726811,
        "tag": "v1.5.0",
        "tarball_url": "https://api.github.com/repos/chemprop/chemprop/tarball/v1.5.0",
        "type": "Release",
        "url": "https://api.github.com/repos/chemprop/chemprop/releases/65726811",
        "value": "https://api.github.com/repos/chemprop/chemprop/releases/65726811",
        "zipball_url": "https://api.github.com/repos/chemprop/chemprop/zipball/v1.5.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "cjmcgill",
          "type": "User"
        },
        "date_created": "2022-01-24T16:30:28Z",
        "date_published": "2022-01-24T16:33:48Z",
        "description": "# Features\r\n\r\n## Allow the inclusion of H atoms in message passing\r\nDefault model behavior is to treat H atoms implicity with their neighbors. With the previously existing argument `--explicit_h`, explicit H atoms included in the SMILES string would be considered during message passing. This PR adds a new argument `--adding_h`, which would make all H atoms treated explicitly during message-passing.\r\nPR #225 and #227\r\n\r\n## Allow splitting by different key molecules in multi-molecule models\r\nThe data-splitting methods `scaffold_balanced` and `random_with_repeated_smiles` can only consider one molecule per datapoint in adhering to the constraints of which data must share splits with each other. This PR creates an argument `--split_key_molecule {int}`, which is used to select which molecule in multi-molecule datasets will be used for the splitting determination.\r\nPR #230\r\n\r\n## Select split fractions when separate test data is provided\r\nPreviously, the split fractions for training/validation were hardcoded as 80/20 when test data was provided via `--separate_test_path`. Split fractions can now be specified in this case using `--split_sizes` as normal.\r\nPR #230\r\n\r\n## Additional output options for make_predictions function\r\nThis change affects usage of `make_predictions` as a python function, rather than in the whole Chemprop workflow. When used as a python function, `make_predictions` would return the predictions for a set of SMILES, but would skip the invalid SMILES without indicating which ones were skipped. Now this function has two new option arguments: 1) `return_invalid_smiles` that includes invalid SMILES in the output but with \"Invalid SMILES\" as the prediction value and 2) `return_index_dict` that returns predictions of the model in a dictionary keyed to the original data indices.\r\nPR #235\r\n\r\n## New utility functions for identifying invalid SMILES\r\nNew functions have been added to chemprop/data/utils.py to allow users to identify datapoints that have invalid SMILES. These functions are `get_invalid_smiles_from_file` and `get_invalid_smiles_from_list`.\r\nPR #235\r\n\r\n# Bug Fixes\r\n\r\n## Simultaneous use of extra atom features and extra bond features\r\nBug prevented using extra atom features and extra bond features at the same time and has been resolved.\r\nPR #215\r\nIssue #213\r\n\r\n## Fixed install error with newer versions of pip\r\nNewer versions of pip failed to install some some chemprop dependencies properly. These dependencies (flake8, pytest, parameterized) were moved to an installation as part of the conda environment rather than by pip. Also, environment build for testing was changed from conda to mamba for better install speed. \r\nPR #215 and #216\r\n\r\n## Correction in tutorial file\r\nTutorial file changed to show the proper list of lists format for SMILES.\r\nPR #218\r\n\r\n## Predicting for a multiclass model with an improper SMILES\r\nWhen making a prediction for an improper SMILES in a multiclass model, an error would be triggered instead of returning a prediction of \"Invalid SMILES\". This has been corrected for this case and the parallel case of improper SMILES used with `--individual_ensemble_predictions`.\r\nPR #229\r\n\r\n## Molecule fingerprints generated with extra atom features\r\nMolecule fingerprints could not be predicted when extra atom features were provided as part of the model. This and the parallel issue with extra bond features have been addressed.\r\nPR #234\r\nIssue #233",
        "html_url": "https://github.com/chemprop/chemprop/releases/tag/v1.4.1",
        "name": "Prediction function output options, multi-molecule splitting, and explicit H atoms in message passing",
        "release_id": 57846755,
        "tag": "v1.4.1",
        "tarball_url": "https://api.github.com/repos/chemprop/chemprop/tarball/v1.4.1",
        "type": "Release",
        "url": "https://api.github.com/repos/chemprop/chemprop/releases/57846755",
        "value": "https://api.github.com/repos/chemprop/chemprop/releases/57846755",
        "zipball_url": "https://api.github.com/repos/chemprop/chemprop/zipball/v1.4.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "cjmcgill",
          "type": "User"
        },
        "date_created": "2021-10-01T15:09:22Z",
        "date_published": "2021-10-01T15:10:37Z",
        "description": "# Features\r\n\r\n## Spectra training\r\nIntroduces `spectra` as a new dataset type available for training, in which each target in a multitarget regression refers to a positive intensity value in one position of a spectrum. Training methods are consistent with https://github.com/gfm-collab/chemprop-IR. Default loss function is spectral information divergence (SID), but Wasserstein loss (earthmover distance) is also supported with `--metric wasserstein --alternative_loss_function wasserstein`.\r\nPR #197\r\n\r\n## Preloading model in predictions\r\nRefactored the `make_predictions` into smaller functions for better capability to use chemprop functions as a python library. Refactoring specficially designed to allow for the loading of a model using the function `chemprop.train.load_model` a single time and then using it for multiple instances of predictions by feeding that model as an argument to `chemprop.train.make_predictions`.\r\nPR #200\r\n\r\n## Improved hyperparameter optimization\r\nAdded several new features to hyperparameter optimization, many related to hyperparameter checkpoints saved in the location specified by `--hyperopt_checkpoint_dir <dir_path>`. The new functionalities:\r\n* Restarting failed hyperparameter optimization jobs by selecting the same checkpoint directory.\r\n* Parallelizing multiple instances of hyperparameter optimization by setting a shared checkpoint directory among instances.\r\n* Seeding hyperparameter optimizations with previously run jobs by indicating an old checkpoint directory and/or by specifying the save directories of relevant jobs trained with `train.py` using `-manual_trial_dirs <list-of-directories>`.\r\n* Manually set the number of hyperparameter trials that use randomized parameters before directed TPE search begins using `--startup_random_iters <int, default=10>`.\r\nPR #208\r\n\r\n## Return results from all ensemble models\r\nWhen making predictions from an ensemble of models, returns the mean prediction but also the individual predictions from the individual models when `--individual_ensemble_predictions` is specified.\r\nPR #190\r\n\r\n## Latent representations for ensembles and from FFN layers\r\nAllows for the calculation of latent fingerprints from an ensemble of models by concatenating them together. Also allows for the return of either a latent representation from the MPNN output or from the next-to-last FFN layer using the argument `--fingerprint_type <MPN or last_FFN>`.\r\nPR #193\r\n\r\n## Target imputation for sklearn multitask models\r\nSklearn multitask training cannot proceed with missing targets among the data, previously would have needed to be run as multiple singletask models. This PR introduces target imputation for missing data to allow multitask sklearn training even when some data is missing with the argument `--impute_mode <model/linear/median/mean/frequent>` indicating which method to use for imputation.\r\nPR #210\r\nIssue #211\r\n\r\n## Reaction balancing\r\nAdds options in reaction training for how to handle situations where reactants and products are not balanced. The argument `--reaction_mode` now also has the options `reac_diff_balance`, `prod_diff_balance`, and `reac_prod_balance` (in addition to the current options `reac_diff`, `prod_diff`, and `reac_prod`). Also fixes an error where atomic numbers are incorrect when an atom is present in the products but not in the reactants.\r\nPR #212\r\nIssue #204\r\n\r\n# Bug Fixes\r\n\r\n## Interactions with git repos\r\nResolves a problem with TAP (typed-argument-parser) where running Chemprop from inside a different git repo would trigger an error related to the generation of a reproducibility hash. In this situation the reproducibility hash is not generated, but it logs the issue and does not stop Chemprop from running.\r\nPR #195\r\n\r\n## Global features structure\r\nChanges the way that global variables related to model construction and feature vector size are handled. Resolves a problem in pytest where these variables wouldn't reset between runs.\r\nPR #206",
        "html_url": "https://github.com/chemprop/chemprop/releases/tag/v1.4.0",
        "name": "Model preloading, hyperparameter optimization improvements, spectra training, latent representations, and more.",
        "release_id": 50642354,
        "tag": "v1.4.0",
        "tarball_url": "https://api.github.com/repos/chemprop/chemprop/tarball/v1.4.0",
        "type": "Release",
        "url": "https://api.github.com/repos/chemprop/chemprop/releases/50642354",
        "value": "https://api.github.com/repos/chemprop/chemprop/releases/50642354",
        "zipball_url": "https://api.github.com/repos/chemprop/chemprop/zipball/v1.4.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "cjmcgill",
          "type": "User"
        },
        "date_created": "2021-07-28T03:15:48Z",
        "date_published": "2021-07-28T04:43:27Z",
        "description": "# Features\r\n## Resume training on multiple folds if interrupted\r\nAs training progresses through folds of a multiple fold model, the results of each individual fold are stored in a JSON file. If training is interrupted, the completed fold results will be read from the JSON file and resume on the first uncompleted fold if using the flag `--resume_experiment`.\r\nPR #164\r\n\r\n## Frozen layers for pre-training\r\nAdded functionality to freeze the MPN or FFN layers in a model being trained at the values of a previously trained model. Freezes MPN values using a model indicated with `--checkpoint_frzn <path>`. FFN layers will also be frozen if indicated with `--frzn_ffn_layers <number-of-layers>`. Models with multiple molecules can select to only freeze the first molecule MPN using `--freeze_first_only`.\r\nPR #170\r\n\r\n## tSNE functionality\r\nAdded HDBScan clustering to the tSNE script.\r\nPR #172\r\n\r\n## Weighted training by target and by datapoint\r\nAdded training weights for different targets and different datapoints, with normalization of weight values. Target weights indicated with the argument `--target_weights <list-of-values>`. Data weights supplied through an input file indicated with the argument `--data_weights_path <path>`.\r\nPR #173, #175, #189\r\nIssue #145\r\n\r\n# Bug Fixes\r\n## MPNN input\r\nProviding SMILES or RDKit molecules to the `MPN`'s `forward` function failed (only `BatchMolGraph` worked) following other changes. Now, SMILES and RDKit molecules can once again be used as input.\r\nPR #164\r\n\r\n## Backwards compatibility with old checkpoints\r\nBackwards compatibility for features scaling\r\nPR #164\r\nIssue #108\r\n\r\n## Updated readme\r\nAdded information to the readme and documentation of pre-training, treatment of missing values in multitask models and caching.\r\nPR #165\r\nIssue #156\r\n\r\n## Multiclass classification\r\nCorrected error when using the metric `accuracy` with multiclass classification.\r\nPR #169\r\n\r\n## RDKit Compatibility\r\nBugfix for compatibility issues of RDKit 2021.03.01 with the interpretation script.\r\nPR #182\r\nIssue #178\r\n\r\n",
        "html_url": "https://github.com/chemprop/chemprop/releases/tag/v1.3.1",
        "name": "Resume interrupted training, frozen layer pre-training, target/data weighted training, and more",
        "release_id": 46878539,
        "tag": "v1.3.1",
        "tarball_url": "https://api.github.com/repos/chemprop/chemprop/tarball/v1.3.1",
        "type": "Release",
        "url": "https://api.github.com/repos/chemprop/chemprop/releases/46878539",
        "value": "https://api.github.com/repos/chemprop/chemprop/releases/46878539",
        "zipball_url": "https://api.github.com/repos/chemprop/chemprop/zipball/v1.3.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "swansonk14",
          "type": "User"
        },
        "date_created": "2021-04-26T14:47:49Z",
        "date_published": "2021-04-26T22:17:11Z",
        "description": "# New Features\r\n\r\n## Custom atom/bond features\r\n\r\nEnabled custom input of atom and bond features either in addition or instead of the default features.\r\n\r\nPR: https://github.com/chemprop/chemprop/pull/137\r\n\r\n## Epistemic uncertainty\r\n\r\nIntroduced the argument `--ensemble_variance` which calculates the epistemic uncertainty of predictions via an ensemble of models.\r\n\r\nPR: https://github.com/chemprop/chemprop/pull/140\r\n\r\n## Reaction option\r\n\r\nIntroduced CGR option - input of atom-mapped reaction smiles instead of molecules. This creates a pseudo-molecule of the graph transition state between reactants and products, and performs message passing on this pseudo-molecule\r\n\r\nPR: https://github.com/chemprop/chemprop/pull/152\r\n\r\n## Latent representation\r\n\r\nAdded a new functionality that saves the latent representation of a molecule (the MPNN output), which can be used similar to predicting with a given checkpoint file, and saves the MPNN output to file.\r\n\r\nPR: https://github.com/chemprop/chemprop/pull/119\r\n\r\n## Preprocessing updates\r\n\r\nUpdates to the preprocessing, handling and saving of smiles strings. Removed redundant checks.\r\n\r\nPR: https://github.com/chemprop/chemprop/pull/135\r\n\r\n## Resume experiments\r\n\r\nExperiments with multiple folds can now be resumed using the `--resume_experiment` flag. Additionally, the test results of each fold are saved as a JSON file in the corresponding subfolder in `save_dir`.\r\n\r\nPR: https://github.com/chemprop/chemprop/pull/164\r\n\r\n# Bug Fixes\r\n\r\n## Atom messages\r\n\r\nMajor bugfix for running Chemprop with the argument `--atom_messages`, where the wrong features were passed to the MPNN. This improves the performance of Chemprop in `atom_messages` mode, and causes backwards incompatibility with old checkpoint files if created in `atom_messages` mode. Since Chemprop is mainly used for directed message passing via bond messages, we hope not many users are affected.\r\n\r\nIssue: https://github.com/chemprop/chemprop/issues/133\r\nPR: https://github.com/chemprop/chemprop/pull/138\r\n\r\n## Backwards compatibility with old checkpoints\r\n\r\nBackwards compatibility for correctly setting recently introduced training arguments for old models.\r\n\r\nIssue: https://github.com/chemprop/chemprop/issues/148 and https://github.com/chemprop/chemprop/issues/108\r\nPR: https://github.com/chemprop/chemprop/pull/149 and PR: https://github.com/chemprop/chemprop/pull/164\r\n\r\n## Sklearn scores\r\n\r\nBugfix in training sklearn models: Scores were not saved correctly previously.\r\n\r\nPR: https://github.com/chemprop/chemprop/pull/162\r\n\r\n## Data split script\r\n\r\nBugfix in a standalone script to create data splits: Multi-molecule input had previously created incompatibilities with passing data to the scaffold split functionality. Update of docstring.\r\n\r\nIssue: https://github.com/chemprop/chemprop/issues/158\r\nPR: https://github.com/chemprop/chemprop/pull/159\r\n\r\n## MPNN sanity check\r\n\r\nBugfix for sanity checks for dimensions of batches within the MPNN forward pass: The introduction of multi-molecule input had previously caused an inconsistency in one of the checks.\r\n\r\nIssue: https://github.com/chemprop/chemprop/issues/153\r\nPR: https://github.com/chemprop/chemprop/pull/154\r\n\r\n## MPNN type annotations\r\n\r\nBugfix for type annotation in the MPNN forward pass + update of docstring.\r\n\r\nPR: https://github.com/chemprop/chemprop/pull/151 and PR: https://github.com/chemprop/chemprop/pull/164\r\n\r\n## Tanimoto distance\r\n\r\nBugfix for calculating Tanimoto distances. The introduction of multi-molecule input had previously caused incompatibilities in the standalone script to find similar molecules in the training data.\r\n\r\nIssue: https://github.com/chemprop/chemprop/issues/143\r\nPR: https://github.com/chemprop/chemprop/pull/144\r\n\r\n## README typos\r\n\r\nFixed typos for a few arguments in the README\r\n\r\nPR: https://github.com/chemprop/chemprop/pull/139\r\n\r\n## Sanitize script\r\n\r\nBugfix in standalone script sanitize.py - open output file with write access.\r\n\r\n## RDKit molecule caching\r\n\r\nBugfix for creating RDKit molecules from smiles strings. Previously the molecules were recreated even though they were already cached.\r\n\r\nPR: https://github.com/chemprop/chemprop/pull/152\r\n\r\n## Saving SMILES\r\n\r\nBugfix for error occurring when `--save_smiles_splits` is used in conjunction with `--separate_test_path`. Now, the data split csv files are still generated, but `split_indices.pkl` is not generated if there are multiple data points with the same SMILES or if some of the data comes from a separate data file.\r\n\r\nIssue: https://github.com/chemprop/chemprop/issues/157\r\nPR: https://github.com/chemprop/chemprop/pull/163\r\n\r\n## SMILES/mols as input to MPNN\r\n\r\nBugfix for SMILES or RDKit molecules as input to MPNN model instead of `BatchMolGraph`.\r\n\r\nPR: https://github.com/chemprop/chemprop/pull/164",
        "html_url": "https://github.com/chemprop/chemprop/releases/tag/v1.3.0",
        "name": "Custom atom/bond features, epistemic uncertainty, reaction option, bug fix for atom/bond features",
        "release_id": 42015515,
        "tag": "v1.3.0",
        "tarball_url": "https://api.github.com/repos/chemprop/chemprop/tarball/v1.3.0",
        "type": "Release",
        "url": "https://api.github.com/repos/chemprop/chemprop/releases/42015515",
        "value": "https://api.github.com/repos/chemprop/chemprop/releases/42015515",
        "zipball_url": "https://api.github.com/repos/chemprop/chemprop/zipball/v1.3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "swansonk14",
          "type": "User"
        },
        "date_created": "2021-01-26T17:22:19Z",
        "date_published": "2021-01-26T17:23:36Z",
        "description": "# Features\r\n\r\n## New split type\r\n\r\nThe split type `--split_type cv` already existed to perform `k`-fold cross-validation (where `k` is set by `--num_folds`). In each fold, `1/k` of the data is put in the test set, `1/k` of the data is in put in the validation set, and the remaining `(k-2)/k` of the data is put in the training set.\r\n\r\nNow, a new split type `--split_type cv-no-test` exists which is essentially identical except that it assigns no data to the test set on each fold (https://github.com/chemprop/chemprop/commit/b56ca9866b303036eab61cab93188cccbaa24af2). Instead, `1/k` of the data is put in the validation set and `(k-1)/k` of the data is put in the training set with no test data. The purpose of this split type is to maximize the training data when training a model in cases where the test performance is already known (or is not important) and doesn't need to be determined. Note that the validation set is still necessary to perform early stopping.\r\n\r\n## Dropping extra columns during prediction\r\n\r\nPreviously, when using `predict.py`, all the columns from the `test_path` file were copied to the `preds_path` file and then the predictions were added as additional columns at the end. Now there is an option called `--drop_extra_columns` which will not copy over these extraneous columns to `preds_path` (https://github.com/chemprop/chemprop/commit/83ea4c06dda4231902777ea6776da922aeba2ad3 and https://github.com/chemprop/chemprop/commit/061339568045863c30c9bd8c2a143b674a0082d8). When `--drop_extra_columns` is used, `preds_path` will only contain columns with the SMILES and with the prediction values.\r\n\r\n# Bug Fixes\r\n\r\n## Backward compatibility for `load_checkpoint`\r\n\r\nPreviously, newer versions of Chemprop incorrectly loaded checkpoints that were trained using older versions of Chemprop due to a change in the names of the parameters. Backward compatibility has now been added to allow this version of Chemprop to load checkpoints with either set of names (https://github.com/chemprop/chemprop/commit/5371b29e7c65e41fa8b83d9c76ba2bfdd400b139 and https://github.com/chemprop/chemprop/commit/206950c6ec92a3646800f95bc69ae6d8dc7ca646).\r\n\r\n## Saving SMILES splits\r\n\r\nDue to new Chemprop features such as the ability to load multiple molecules, the feature `--save_smiles_splits`, which saves the SMILES corresponding to the train, validation, and test splits, had broken (https://github.com/chemprop/chemprop/issues/110). This was fixed in https://github.com/chemprop/chemprop/pull/117.\r\n\r\n## Fixing `interpret.py`\r\n\r\nSimilar to the issue with saving SMILES splits, `interpret.py` broke due to the Chemprop feature that enables multiple molecules to be used as input (https://github.com/chemprop/chemprop/issues/107 and https://github.com/chemprop/chemprop/issues/113). This was fixed in https://github.com/chemprop/chemprop/pull/128.\r\n\r\n## Updating Dockerfile\r\n\r\nThe Dockerfile has been updated to address https://github.com/chemprop/chemprop/issues/100 and https://github.com/chemprop/chemprop/issues/129. This was fixed in https://github.com/chemprop/chemprop/pull/131.\r\n\r\n## Fixing atom descriptors\r\n\r\nThe `atom_descriptors` feature did not work in `predict.py` (https://github.com/chemprop/chemprop/issues/120). This was fixed in https://github.com/chemprop/chemprop/pull/114.\r\n\r\n## Logging\r\n\r\nLogging to the terminal and to files (`quiet.log` and `verbose.log` in the `save_dir`) broke for some OS systems (https://github.com/chemprop/chemprop/issues/106). This was fixed in https://github.com/chemprop/chemprop/pull/118.\r\n\r\n## README additions\r\n\r\nSome of the relatively new features, like custom atomic features, were missing from the README (https://github.com/chemprop/chemprop/issues/121). This was fixed in https://github.com/chemprop/chemprop/pull/122.\r\n\r\n# Infrastructure Changes\r\n\r\n## Migrating from Travis CI to GitHub Actions\r\n\r\nChemprop previously used Travis CI to run automated tests upon pushing to master or creating a pull request, but Travis changed its pricing structure and no longer offers unlimited free testing. For this reason, Chemprop now uses GitHub Actions to run automated tests. The results of the test runs can be seen in the Actions tab of the repo.",
        "html_url": "https://github.com/chemprop/chemprop/releases/tag/v1.2.0",
        "name": "New split type, cleaner predictions file, backward compatibility, bug fixes, and testing improvements",
        "release_id": 36907743,
        "tag": "v1.2.0",
        "tarball_url": "https://api.github.com/repos/chemprop/chemprop/tarball/v1.2.0",
        "type": "Release",
        "url": "https://api.github.com/repos/chemprop/chemprop/releases/36907743",
        "value": "https://api.github.com/repos/chemprop/chemprop/releases/36907743",
        "zipball_url": "https://api.github.com/repos/chemprop/chemprop/zipball/v1.2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "swansonk14",
          "type": "User"
        },
        "date_created": "2020-10-25T19:47:02Z",
        "date_published": "2020-10-25T20:05:12Z",
        "description": "# Features\r\n\r\n## Multiple Input Molecules\r\n\r\n[[PR](https://github.com/chemprop/chemprop/pull/76)] Use multiple molecules as an input to chemprop. The number of molecules is specified with the keyword `number_of_molecules`. Those molecules are embedded with a separate D-MPNN by default. The latent representations are concatenated prior to the FFN. \r\n\r\nThe keyword `mpn_shared` allows you to use a shared D-MPNN. Note that, since the latent representations are concatenated, the order of the input molecules is important. This method is not invariant and there are better ways to use multiple molecules with shared D-MPNN, which will be implemented for the next release.\r\n\r\n## Custom Atom Features\r\n\r\n[[PR](https://github.com/chemprop/chemprop/pull/82)] Implemented custom atomic features as a counterpart of the custom molecular features in ChemProp. The new feature allows users to provide additional atomic features to each node in a given molecule. To use the feature, use the keyword `atom_descriptors`. The custom atom features can be employed in two modes. In the first mode, `--atom_descriptors feature`, custom features are used as normal node features, which are concatenated to the default node vector before the D-MPNN block.  In the second mode,  `--atom_descriptors descriptor`, custom atom features will not participate in the model until the atom feature vector has been updated through D-MPNN block. That is, the `--atom_descriptors descriptor` model will not disturb the extra custom atom features much and keep the information to the maximum extent.\r\n\r\nThe extra custom descriptors can be put into ChemProp through a variety of pickle files (`.pkl`, `.pickle`, `.pckl`), Numpy save file (`.npz`), or a `.sdf` file.  \r\n\r\n### `.pkl` format\r\n\r\nThe `.pkl` file must store a Pandas DataFrame with smiles as index and columns as descriptors. All descriptors must be a 1D numpy array or 2D numpy array. For example:\r\n\r\n1 custom atomic feature for each atom provided in a 1D array\r\n\r\n```\r\nsmiles                          descriptors\r\nCCOc1ccc2nc(S(N)(=O)=O)sc2c1    [0.637781931055927, 0.7075571757878132, 0.7339...\r\nCCN1C(=O)NC(c2ccccc2)C1=O       [0.09588231301387817, 0.6521911050735447, 0.45...\r\n```\r\n\r\nMultiple atomic features for each atom provided in multiple 1D array\r\n\r\n```\r\nsmiles                         desc1                                        desc2\r\nCCOc1ccc2nc(S(N)(=O)=O)sc2c1  [0.637781931055927, 0.7075571757878132...    [0.8266363223032338, 0.89641156703512 ...\r\nCCN1C(=O)NC(c2ccccc2)C1=O     [0.09588231301387817, 0.6521911050735447...  [0.2847367042611851, 0.8410454963208516...\r\n```\r\n\r\nNote: mixed 1D array and 2D array for different columns are not allowed\r\n\r\n### `.npz` file\r\n\r\nAtomic descriptors for each molecule must be saved as one independent 2D numpy array ([number of atoms x number of descriptors]) in the `.npz` file for example by:\r\n\r\n```python\r\nnp.savez('descriptors.npz', *descriptors)\r\n```\r\n\r\nwhere  `descriptors` is a list of atomic descriptors in 2D array in the order of molecules in the training/predicting datafile\r\n\r\n### `.sdf` file\r\n\r\nEach molecule is presented as a mol block in the `.sdf` file. Descriptors should be saved as entries for each mol block in the format of comma separated values. Each molecule must has an entry named SMILES that stores the smiles string. For example:\r\n\r\n```\r\nCHEMBL1308_loner5\r\n     RDKit          3D\r\n\r\n  6  6  0  0  1  0  0  0  0  0999 V2000\r\n   -0.7579   -0.5337   -2.8744 C   0  0  0  0  0  0  0  0  0  0  0  0\r\n   -0.2229   -1.3763   -1.7558 C   0  0  0  0  0  0  0  0  0  0  0  0\r\n   -0.0046   -1.0089   -0.4029 C   0  0  0  0  0  0  0  0  0  0  0  0\r\n    0.4824   -2.0104    0.3280 N   0  0  0  0  0  0  0  0  0  0  0  0\r\n    0.5806   -3.0317   -0.5484 N   0  0  0  0  0  0  0  0  0  0  0  0\r\n    0.1735   -2.6999   -1.8031 C   0  0  0  0  0  0  0  0  0  0  0  0\r\n  1  2  1  0\r\n  2  6  2  0\r\n  2  3  1  0\r\n  3  4  2  0\r\n  4  5  1  0\r\n  5  6  1  0\r\nM  END\r\n>  <desc1>  (1) \r\n-8.568031e-05,0.0001865207,-0.0002012379,-5.054658e-05,0.0002148434,-0.0003503839,1.970448e-05,3.081137e-05,2.997883e-05,9.446278e-05,-7.194711e-05,0.0001527364\r\n\r\n>  <desc2>  (1) \r\n5.462954e-05,-2.415399e-06,0.0001044788,-2.274438e-05,0.0001698836,5.206409e-06,4.5825e-06,-8.882181e-07,-1.08787e-05,2.993307e-05,-4.069051e-06,1.338413e-05\r\n\r\n>  <SMILES>  (1) \r\nCc1cnnHc1\r\n\r\n$$$$\r\n```\r\n\r\nwhere the name of descriptor entries `desc1`, `desc2` can be arbitrary. \r\n\r\nWhen using this feature, users are responsible for all atomic feature preprocessing works, including feature normalization and expansion. \r\n\r\nNote: This feature is developed for small-to-medium sized training dataset, where extra QM descriptors have been demonstrated to be powerful and slow down the model performance downgrade.\r\n\r\n## Options for Aggregation Function\r\n\r\n[[PR](https://github.com/chemprop/chemprop/pull/87)] By default, at the end of message passing, the D-MPNN aggregates atom hidden representations into a single hidden representation for the whole molecule by taking the mean of the atom representations. Now, this aggregation function can be changed by using `--aggregate <mode>`, which currently supports \u201cmean\u201d (the default), \u201csum\u201d, and \u201cnorm\u201d (which is equivalent to \u201csum\u201d with normalization by the constant specified by `--aggregation_norm`).\r\n\r\n## Cross-Validation\r\n\r\n[[commit](https://github.com/chemprop/chemprop/commit/8a2ad6ceec67f0ad2ee83e58c15ed743e824f77f)] The default split type (i.e., `--split_type random`) randomly samples data into the train, validation, and test sets on each of the `num_folds` folds independently. This means that the same molecule can end up in the test split on more than one fold. The advantage of this method is that it can be used easily with an arbitrary number of folds, but the downside is that it does not perform strict cross-validation.\r\n\r\nThe new split type cv (`--split_type cv`) performs true cross-validation. The data is broken down into `num_folds` pieces, each of size `len(data) / num_folds`, and each piece serves as the test split one, the validation split once, and part of the train split on all other folds. The benefit of this method is that it is true cross-validation, but the downside is that the size of each split is dependent on the number of folds, meaning less flexibility (e.g., `--num_folds 3` will result in train, validation, and test splits each with 33.3% of the data, which is perhaps too small for the train split and too large for the test split). `--num_folds 10` is recommended.\r\n\r\n## Saving Test Predictions\r\n\r\n[[commit](https://github.com/chemprop/chemprop/commit/8d5d0c61833a658c7e329bcb72e599334820146c)] The `--save_preds` option will save predictions on the test split of each fold in a file called \u201ctest_preds.csv\u201d in the `save_dir`.\r\n\r\n## Multiple Metrics\r\n\r\n[[commit](https://github.com/chemprop/chemprop/commit/46b9f642fa38e9962b310bfadf1422a8e30c3457)] The `--metric` argument still works as before and this is still the metric that is used for early stopping (i.e., selecting the model which performs best on the validation split), but now there is an additional `--extra_metrics` argument where additional metrics can be specified and will be recorded. The metrics should be space separated (e.g., `--extra_metrics mae rmse r2`).\r\n\r\n## Saving Test Scores\r\n[[commit](https://github.com/chemprop/chemprop/commit/a225ef0328f49c610b8480b8fa4af1acad42898f#diff-728bf686eee83c7034ef4a09fd7fd790b856e03af17adbf22c40e5366da58e16)] Scores on the test splits are now saved to file in the `save_dir` under the name \u201ctest_scores.csv\u201d.\r\n\r\n# Fixes and Improvements\r\n\r\n## Undefined Rows\r\n\r\n[[commit](https://github.com/chemprop/chemprop/commit/c5d354502084c53e34ca10ef964f407e8a7b2323)] Rows in the input data file with target values that are all undefined are now correctly skipped. This is especially relevant when the row may contain some defined target values, but none of those targets are included in `target_columns`.\r\n\r\n## Data Loading\r\n\r\n[[commit](https://github.com/chemprop/chemprop/commit/befaabc9642d0979d1dd5cef2fe6cc7a4150fb81)] Data is now only loaded once to decrease training time.\r\n\r\n## Tests\r\n\r\n[[tests](https://github.com/chemprop/chemprop/blob/master/tests/test_integration.py)] Added more comprehensive tests to ensure correct functionality.\r\n\r\n## Train Loss\r\n\r\n[[commit](https://github.com/chemprop/chemprop/commit/e9a28dea80bc6d255e380dfd10b14549d8c687cc)] Fixed incorrect averaging of the train loss, which affects the train loss that is printed to screen and saved in tensorboard.",
        "html_url": "https://github.com/chemprop/chemprop/releases/tag/v1.1.0",
        "name": "Multiple Molecules, Custom Atom Features, and More",
        "release_id": 33033446,
        "tag": "v1.1.0",
        "tarball_url": "https://api.github.com/repos/chemprop/chemprop/tarball/v1.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/chemprop/chemprop/releases/33033446",
        "value": "https://api.github.com/repos/chemprop/chemprop/releases/33033446",
        "zipball_url": "https://api.github.com/repos/chemprop/chemprop/zipball/v1.1.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "swansonk14",
          "type": "User"
        },
        "date_created": "2020-07-25T01:48:24Z",
        "date_published": "2020-07-25T01:49:41Z",
        "description": "Since descriptastorus isn't on PyPi, it can't be installed automatically via `pip install chemprop`. Instead, it must be installed separately via `pip install git+https://github.com/bp-kelley/descriptastorus`.",
        "html_url": "https://github.com/chemprop/chemprop/releases/tag/v_1.0.2",
        "name": "Fixing descriptastorus PyPi issue",
        "release_id": 28933229,
        "tag": "v_1.0.2",
        "tarball_url": "https://api.github.com/repos/chemprop/chemprop/tarball/v_1.0.2",
        "type": "Release",
        "url": "https://api.github.com/repos/chemprop/chemprop/releases/28933229",
        "value": "https://api.github.com/repos/chemprop/chemprop/releases/28933229",
        "zipball_url": "https://api.github.com/repos/chemprop/chemprop/zipball/v_1.0.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "swansonk14",
          "type": "User"
        },
        "date_created": "2020-07-25T01:33:28Z",
        "date_published": "2020-07-25T01:43:57Z",
        "description": "Fixing an issue with PyPi installation and updating relevant documentation.",
        "html_url": "https://github.com/chemprop/chemprop/releases/tag/v_1.0.1",
        "name": "Fixing PyPi Installation and Documentation",
        "release_id": 28933194,
        "tag": "v_1.0.1",
        "tarball_url": "https://api.github.com/repos/chemprop/chemprop/tarball/v_1.0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/chemprop/chemprop/releases/28933194",
        "value": "https://api.github.com/repos/chemprop/chemprop/releases/28933194",
        "zipball_url": "https://api.github.com/repos/chemprop/chemprop/zipball/v_1.0.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "swansonk14",
          "type": "User"
        },
        "date_created": "2020-07-25T01:07:13Z",
        "date_published": "2020-07-25T01:10:09Z",
        "description": "Chemprop is now available on PyPi: https://pypi.org/project/chemprop. Installation instructions are below.\r\n\r\n1. `conda create -n chemprop python=3.8`\r\n2. `conda activate chemprop`\r\n3. `conda install -c conda-forge rdkit`\r\n4.`pip install git+https://github.com/bp-kelley/descriptastorus`\r\n5. `pip install chemprop`\r\n\r\nAfter installing through PyPi, training and predicting are available via the `chemprop_train` and `chemprop_predict` commands, which are equivalent to `python train.py` and `python predict.py`. All the command line arguments for training and predicting apply as usual. Please see the [README](https://github.com/chemprop/chemprop) for more details.",
        "html_url": "https://github.com/chemprop/chemprop/releases/tag/v_1.0.0",
        "name": "Release on PyPi",
        "release_id": 28932955,
        "tag": "v_1.0.0",
        "tarball_url": "https://api.github.com/repos/chemprop/chemprop/tarball/v_1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/chemprop/chemprop/releases/28932955",
        "value": "https://api.github.com/repos/chemprop/chemprop/releases/28932955",
        "zipball_url": "https://api.github.com/repos/chemprop/chemprop/zipball/v_1.0.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "swansonk14",
          "type": "User"
        },
        "date_created": "2019-02-07T20:02:15Z",
        "date_published": "2019-02-07T20:54:55Z",
        "html_url": "https://github.com/chemprop/chemprop/releases/tag/v0.0.2",
        "release_id": 15434361,
        "tag": "v0.0.2",
        "tarball_url": "https://api.github.com/repos/chemprop/chemprop/tarball/v0.0.2",
        "type": "Release",
        "url": "https://api.github.com/repos/chemprop/chemprop/releases/15434361",
        "value": "https://api.github.com/repos/chemprop/chemprop/releases/15434361",
        "zipball_url": "https://api.github.com/repos/chemprop/chemprop/zipball/v0.0.2"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "installation",
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier"
  ],
  "somef_provenance": {
    "date": "2024-10-03 23:38:14",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1721
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "v1 Tutorials and Examples",
        "parent_header": [
          "Chemprop",
          "Version 1.x"
        ],
        "type": "Text_excerpt",
        "value": "- [Benchmark scripts](https://github.com/chemprop/chemprop_benchmark) - scripts from our 2023 paper, providing examples of many features using Chemprop v1.6.1\n- [ACS Fall 2023 Workshop](https://github.com/chemprop/chemprop-workshop-acs-fall2023) - presentation, interactive demo, exercises on Google Colab with solution key\n- [Google Colab notebook](https://colab.research.google.com/github/chemprop/chemprop/blob/v1.7.1/colab_demo.ipynb) - several examples, intended to be run in Google Colab rather than as a Jupyter notebook on your local machine\n- [nanoHUB tool](https://nanohub.org/resources/chempropdemo/) - a notebook of examples similar to the Colab notebook above, doesn't require any installation\n  - [YouTube video](https://www.youtube.com/watch?v=TeOl5E8Wo2M) - lecture accompanying nanoHUB tool\n- These [slides](https://docs.google.com/presentation/d/14pbd9LTXzfPSJHyXYkfLxnK8Q80LhVnjImg8a3WqCRM/edit?usp=sharing) provide a Chemprop tutorial and highlight additions as of April 28th, 2020\n"
      },
      "source": "https://raw.githubusercontent.com/chemprop/chemprop/main/README.md",
      "technique": "header_analysis"
    }
  ]
}