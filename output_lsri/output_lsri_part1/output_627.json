{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "Crimp"
        ],
        "type": "Text_excerpt",
        "value": "Lautenschlager U. (2023). Crimp: an efficient tool for summarizing multiple clusterings in population structure analysis and beyond. *Molecular Ecology Resources*, 23, 705\u2013711. https://doi.org/10.1111/1755-0998.13734\n"
      },
      "source": "https://raw.githubusercontent.com/ulilautenschlager/crimp/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ulilautenschlager/crimp"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-02-01T00:57:04Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-07-10T16:34:50Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Cluster relabeling based on impurity minimization"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9913168135090183,
      "result": {
        "original_header": "Crimp",
        "type": "Text_excerpt",
        "value": "Crimp (cluster relabeling based on impurity minimization) allows to align \nclusters across multiple clusterings, based on their matrices of membership \ncoefficients (Q-matrices). This is frequently done to post-process \noutputs from programs like Structure (Pritchard et al. 2000). Similar to CLUMPP \n(Jakobsson & Rosenberg 2007), Crimp's input clusterings have to comprise the \nsame number of clusters (K) and clustered objects (C).\n \n"
      },
      "source": "https://raw.githubusercontent.com/ulilautenschlager/crimp/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ulilautenschlager/crimp/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ulilautenschlager/crimp/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ulilautenschlager/crimp"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Crimp"
      },
      "source": "https://raw.githubusercontent.com/ulilautenschlager/crimp/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ulilautenschlager/crimp/main/benchmark/run_all.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ulilautenschlager/crimp/main/benchmark/utils.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ulilautenschlager/crimp/main/benchmark/permutate_input.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ulilautenschlager/crimp/main/benchmark/benchmark_largeR.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ulilautenschlager/crimp/main/benchmark/benchmark_largeK.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ulilautenschlager/crimp/main/benchmark/benchmark_arabid.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ulilautenschlager/crimp/main/benchmark/benchmark_chicken.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "identifier": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://zenodo.org/badge/latestdoi/454221207"
      },
      "source": "https://raw.githubusercontent.com/ulilautenschlager/crimp/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "Crimp"
        ],
        "type": "Text_excerpt",
        "value": "Download Crimp, e.g. using `git clone https://github.com/ulilautenschlager/crimp` or, for specific versions, from https://github.com/ulilautenschlager/crimp/releases.\n\n- Linux: Either use the precompiled crimp (64 Bit, statically linked \nagainst [musl](https://musl.libc.org/)) or compile your own binary by running `make -B` inside the crimp directory (recommended).\n- Windows (64 bit): Please use the precompiled crimp.exe.\n"
      },
      "source": "https://raw.githubusercontent.com/ulilautenschlager/crimp/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9881261447053781,
      "result": {
        "original_header": "Benchmark",
        "type": "Text_excerpt",
        "value": "To reproduce the benchmark analyses from the publication, please follow the instructions in benchmark/run_all.sh (Linux only).\n \n"
      },
      "source": "https://raw.githubusercontent.com/ulilautenschlager/crimp/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ulilautenschlager/crimp/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "parent_header": [
          "Crimp"
        ],
        "type": "Text_excerpt",
        "value": "Unless otherwise stated, the provided files are distributed under the MIT license (see LICENSE.txt).\nThe alternative getopt implementation (src/getopt.c and src/getopt.h), which allows to compile Crimp on non-Unix systems and is used by the Windows binary crimp.exe, is distributed under the conditions stated in LICENSE.getopt.txt.\n"
      },
      "source": "https://raw.githubusercontent.com/ulilautenschlager/crimp/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "crimp"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "ulilautenschlager"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 50788,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 28537,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 1754,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 400,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ulilautenschlager/crimp/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "ulilautenschlager",
          "type": "User"
        },
        "date_created": "2022-07-20T14:25:20Z",
        "date_published": "2022-10-26T16:16:06Z",
        "description": "**Added**\r\n\r\n- -p/-P options (popfile support)\r\n- Alternative getopt implementation for Windows etc.\r\n- Precompiled binaries (Windows, Linux)\r\n\r\n**Changed**\r\n- Preserve additional information at the beginning of each row of the input matrices\r\n- Benchmark main script\r\n\r\n**Fixed**\r\n- Arabidopsis evaluation",
        "html_url": "https://github.com/ulilautenschlager/crimp/releases/tag/1.1.0",
        "name": "Crimp v1.1.0",
        "release_id": 81069406,
        "tag": "1.1.0",
        "tarball_url": "https://api.github.com/repos/ulilautenschlager/crimp/tarball/1.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/ulilautenschlager/crimp/releases/81069406",
        "value": "https://api.github.com/repos/ulilautenschlager/crimp/releases/81069406",
        "zipball_url": "https://api.github.com/repos/ulilautenschlager/crimp/zipball/1.1.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "ulilautenschlager",
          "type": "User"
        },
        "date_created": "2022-02-01T02:25:07Z",
        "date_published": "2022-02-01T02:42:57Z",
        "html_url": "https://github.com/ulilautenschlager/crimp/releases/tag/1.0.0",
        "name": "Crimp v1.0.0",
        "release_id": 58392667,
        "tag": "1.0.0",
        "tarball_url": "https://api.github.com/repos/ulilautenschlager/crimp/tarball/1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/ulilautenschlager/crimp/releases/58392667",
        "value": "https://api.github.com/repos/ulilautenschlager/crimp/releases/58392667",
        "zipball_url": "https://api.github.com/repos/ulilautenschlager/crimp/zipball/1.0.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 01:26:34",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "List of options (see help page)",
        "parent_header": [
          "Crimp",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "```raw\n  -n RUNS           Number of hillclimbing runs. (default: 10)\n                    You may want to increase this value, depending on \n                    the variability of individual runs. If 0 is specified,\n                    only the input order is evaluated and no output files\n                    are written.\n                    \n  -s SEED           Initialize pseudorandom number generator for \n                    reproducible optimization (default: 0, i.e. disabled)\n                    \n  -w WEIGHT_FILE    Row-specific weights can be supplied as separate input file,\n                    values must be delimited by spaces, tabs, or newlines.\n                    The given values do not have to be normalized.\n                    \n  -e                Minimize mean Shannon entropy (default: Gini impurity).\n  \n  -c                Calculate CLUMPP scores H and H'. This is only done for\n                    the initial and final solution.\n\n  -h                Print help message and exit.\n                    \n  -p                Treat input as popfile and ignore last column (population sizes).\n\n  -P                Treat input as popfile and use population sizes as weights.\n                    (incompatible with option -w)\n\n  -q                Quiet mode 1:\n                    Only print final score of each optimization run.\n                    If the standard output is redirected into a file \n                    (e.g. \"./Crimp example.indfile > test.log\"), this option (or -Q)\n                    is strongly recommended.\n                    \n  -Q                Quiet mode 2:\n                    Do not report individual optimization runs at all.\n\n  -r                Create an output file for the aligned coefficient matrices.\n                    (By default, only files for optimized permutations and\n                    averaged coefficients are written.)\n\n  -R                Like -r, but write normalized coefficients (as internally used)\n                    where each row sums to approx. one.\n\n  -x                Exhaustive search:\n                    Evaluate all (K!)^(R-1) possible permutations.\n                    This is only possible for very small problem sizes!\n\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ulilautenschlager/crimp/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "Crimp"
        ],
        "type": "Text_excerpt",
        "value": "Since Crimp is a command-line tool, you usually need to open a Linux terminal or\na Windows command-line interpreter like cmd.exe or PowerShell. In the following,\nfamiliarity with running command-line tools will be assumed.\n\nCrimp expects one mandatory argument, which is the input file containing \nmultiple clusterings (Q-matrices), e.g. `./crimp example.txt`. Additional\noptions (e.g., `-n 20`) may be placed before the input file. Use `./crimp -h` or\n `crimp.exe -h` to display a complete list and descriptions of available program \noptions.\n\n"
      },
      "source": "https://raw.githubusercontent.com/ulilautenschlager/crimp/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Default",
        "parent_header": [
          "Crimp",
          "Usage",
          "Input formats"
        ],
        "type": "Text_excerpt",
        "value": "By default, Crimp expects a single input file comprising multiple \nwhitespace-delimited Q-matrices, separated by one or more empty lines, e.g.\n\n```raw\n1  0\n1  0\n0  1\n\n0  1\n0  1\n1  0\n```\n\nOptionally, each row of a Q-matrix may contain additional information at the \nbeginning, ending with \":\", e.g.\n\n```raw\nindividual_1: 1  0\nindividual_2: 1  0\nindividual_3: 0  1\n\nindividual_1: 0  1\nindividual_2: 0  1\nindividual_3: 1  0\n```\n\nor like CLUMPP-indfiles:\n\n```raw\n1 1 (0) 1 :  1  0\n2 2 (0) 1 :  1  0\n3 3 (0) 1 :  0  1\n\n1 1 (0) 1 :  0  1\n2 2 (0) 1 :  0  1\n3 3 (0) 1 :  1  0\n```\n\nIf present in the input, such information will also be appended to the output \nfiles.\n\nNote: The clustered objects (rows) have to be identically ordered for all \nQ-matrices! Therefore, Crimp will check additional information as above for \nconsistency and raise an error in case of conflicts.\n"
      },
      "source": "https://raw.githubusercontent.com/ulilautenschlager/crimp/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "`-p`/`-P`",
        "parent_header": [
          "Crimp",
          "Usage",
          "Input formats"
        ],
        "type": "Text_excerpt",
        "value": "To be compatible with CLUMPP-popfiles and similar formats, Crimp provides\nthe options `-p` and `-P`. If one of them is used, the rightmost column will \nviewed as population sizes and either be ignored (`-p`) or used as (relative) \nweight for each row's impact on the objective functions (`-P`).\n\nLike additional information on the left side, the last column will be checked \nfor consistency and appended to Crimp's output files.\n\nExample input comprising population sizes (25, 10 and 60):\n\n```raw\n1  0  25\n1  0  10\n0  1  60\n\n0  1  25\n0  1  10\n1  0  60\n```\n\nor more complex:\n\n```raw\n1 1 (0) 1 :  1  0  25\n2 2 (0) 1 :  1  0  10\n3 3 (0) 1 :  0  1  60\n\n1 1 (0) 1 :  0  1  25\n2 2 (0) 1 :  0  1  10\n3 3 (0) 1 :  1  0  60\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ulilautenschlager/crimp/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Output files",
        "parent_header": [
          "Crimp",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "By default, two output files are written: an averaged Q-matrix \n(\\<input\\>.average) based on the aligned input matrices and the optimized column\npermutations (\\<input\\>.permutations). When using `-r` or `-R`, Crimp also \nrearranges the original Q-matrices and writes them to \\<input\\>.ordered.\n"
      },
      "source": "https://raw.githubusercontent.com/ulilautenschlager/crimp/main/README.md",
      "technique": "header_analysis"
    }
  ]
}