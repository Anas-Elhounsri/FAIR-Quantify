{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/mengqingren/VTwins"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-08-06T05:02:58Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-04-21T08:35:48Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Parameter Description",
        "parent_header": [
          "VTwins"
        ],
        "type": "Text_excerpt",
        "value": "- data: must be a data frame with columns representing features and rows representing samples.\n- phenodata: must be a data frame with two columns, and colnames are `id` (column 1) and `grp` (column 2). column id represent the sample id, column grp consist of `grp1` and `grp2`, representing the ctrl and disease, repsectively.\n- k: distance calculating method. it must bu consist with the method in `dist` function.\n- SavePath: filename of output directory. Default: ./\n- Cut_pair: the cutoff of redundant pairs to perform permutation or wilcox rank paired test. Defult 25\n- method_choose: necessary parameter of greated than 25 pair, choose from :\"Wilcox\",\"Permutation\",\n- ShuffleWstat: filename of shuffle W stats\n- BoundarySample: filename of output boundary samples with distance\n- BoundaryPair: filename of output final pairs \n- ShuffleTime: shuffle time\n- DownPercent: lower percentage of shuffle pairs\n- Uppercent: higher percentage of shuffle pairs\n- PvalueCutoff: p value cutoff of `Incre.aveRank.P` and `Decre.aveRank.P`\n\n**Note:** if the sample pairs are less than 10, it will return nothing.\n"
      },
      "source": "https://raw.githubusercontent.com/mengqingren/VTwins/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9360313226619179,
      "result": {
        "original_header": "VTwins",
        "type": "Text_excerpt",
        "value": "The goal of `VTwins` is to perform phenotype-enriched features including species or pathways for metagenomic sequencing or 16S sequencing. \nif you want to use standalone version in Linux, you can check VTwins.Linux from [mengqingren/VTwins.Linux](https://github.com/mengqingren/VTwins.Linux). \nYou can also find the R script of this paper [mengqingren/VTwins.Linux](https://github.com/mengqingren/VTwins.Linux). \n"
      },
      "source": "https://raw.githubusercontent.com/mengqingren/VTwins/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9902137414639895,
      "result": {
        "original_header": "Output",
        "type": "Text_excerpt",
        "value": "- **Decre.aveRank.P** : P value based on averange rank. Generally, to confirm the significant features, we usually use variable `Decre.aveRank.P` to evaluate the disease-enriched features and `Incre.aveRank.P` to evaluate the control enriched features. \n- **Incre.aveRank.P** : P value based on averange rank. Generally, to confirm the significant features, we usually use variable `Decre.aveRank.P` to evaluate the disease-enriched features and `Incre.aveRank.P` to evaluate the control enriched features. \n- Decre.minRank.* : P value based on min rank.\n- Incre.minRank.P : P value based on min rank.\n- Decre.maxRank.P : P value based on max rank.\n- Incre.maxRank.P : P value based on max rank.\n- **Species** : Feature\n- **Enriched** : phenotype-enriched groups with provided p value cutoff\n- Decre.maxRank.P.FDR : P.adjust of Decre.maxRank.P\n- Decre.minRank.P.FDR : P.adjust of Decre.minRank.P\n- **Decre.aveRank.P.FDR** : P.adjust of Decre.aveRank.P\n- **Incre.aveRank.P.FDR** : P.adjust of Incre.aveRank.P\n- Decreasing.Rank.Max : shuffle W stats rank based on max method by decreasing\n- Increasing.Rank.Max : shuffle W stats rank based on max method by increasing\n- Decreasing.Rank.Min : shuffle W stats rank based on min method by decreasing\n- Increasing.Rank.Min : shuffle W stats rank based on min method by increasing\n- **Decreasing.Rank.Average** : shuffle W stats rank based on average method by decreasing\n- **Increasing.Rank.Average** : shuffle W stats rank based on average method by increasing\n- **Ctlmean**: mean value of relativa abundance for paired control samples\n- **Dismean**: mean value of relativa abundance for paired disease samples \n**Important** : Must keep the `Same Order` of samples in  relative abundance dataframe and phenotype dataframe. And we also keep the samples `clustered and placed` according the `grp1 and grp2` of variable `grp` in phenotype data.  \n"
      },
      "source": "https://raw.githubusercontent.com/mengqingren/VTwins/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/mengqingren/VTwins/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/mengqingren/VTwins/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "mengqingren/VTwins"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/mengqingren/VTwins/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "VTwins"
        ],
        "type": "Text_excerpt",
        "value": "Now `VTwins` is not on cran, You can install the development version of\nVTwins from [GitHub](https://github.com/) with:\n  \n  ``` r\n# install.packages(\"remotes\")\nremotes::install_github(\"mengqingren/VTwins\")\n```"
      },
      "source": "https://raw.githubusercontent.com/mengqingren/VTwins/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9972536101958456,
      "result": {
        "original_header": "VTwins",
        "type": "Text_excerpt",
        "value": "if you want to use standalone version in Linux, you can check VTwins.Linux from [mengqingren/VTwins.Linux](https://github.com/mengqingren/VTwins.Linux). \nif you want to use R package, you can keep reading. \n \n"
      },
      "source": "https://raw.githubusercontent.com/mengqingren/VTwins/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/mengqingren/VTwins/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2021 MengQingren\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/mengqingren/VTwins/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "VTwins"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "mengqingren"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 15185,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/mengqingren/VTwins/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependence",
        "parent_header": [
          "VTwins"
        ],
        "type": "Text_excerpt",
        "value": "- R version 4.0.5\n- tidyverse_1.3.1\n"
      },
      "source": "https://raw.githubusercontent.com/mengqingren/VTwins/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-03 23:36:17",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Basic Usage",
        "parent_header": [
          "VTwins"
        ],
        "type": "Text_excerpt",
        "value": "``` r\nlibrary(VTwins)\npair_find(data=YourRelativeAbundanceDataframe, # must be a data frame with columns representing features and rows representing samples.\n          phenodata=YourPhenotypeDataframe, # must be a data frame with two columns, and colnames are `id` (column 1) and `grp` (column 2). column id represent the sample id, column grp consist of `grp1` and `grp2`, representing the ctrl and disease, repsectively.\n          k=\"euclidean\", # distance calculating method. it must bu consist with the method in `dist` function.\n          SavePath = NULL, # output directory. Default: ./\n          Cut_pair=25, \n          method_choose=c(\"Wilcox\",\"Permutation\"),\n          ShuffleWstat = NULL,  # output W stat\n          BoundarySample = NULL, # output boundary samples with distance\n          BoundaryPair=NULL, # output final pairs \n          ShuffleTime=10000, # shuffle time\n          DownPercent = 0.2, # lower percentage of shuffle pairs\n          Uppercent=0.8,\n          PvalueCutoff = 0.05) # p value cutoff of `Incre.aveRank.P` and `Decre.aveRank.P`\n```"
      },
      "source": "https://raw.githubusercontent.com/mengqingren/VTwins/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage -&gt; Mock Data",
        "parent_header": [
          "VTwins"
        ],
        "type": "Text_excerpt",
        "value": "  \n**if you want to skip the download step, you can find the mock and real datasets in [mengqingren/VTwins.Linux](https://github.com/mengqingren/VTwins.Linux)**\n  \n``` r\nlibrary(tidyverse)\nlibrary(VTwins)\nlibrary(vegan)\n# relative abundance dataframe\nset.seed(12345)\ndataset <- data.frame(matrix(runif(1200, min = 1e-5, max = 1),nrow = 120,ncol = 10))\ncolnames(dataset) <- paste(\"Feature\",1:10,sep = '')\nrownames(dataset) <- paste(\"Sample\",1:120,sep = '')\ndataset.normalized <- decostand(dataset,method = \"total\",1) #normalization for fetures like species's relative abundance \n#write.table(dataset.normalized,file = \"test.data.txt\",sep = '\\t',quote = F)\n\n# phenotype dataframe\nphe_data <- data.frame(id = paste(\"Sample\",1:120,sep = ''),grp=rep(c(\"grp1\",\"grp2\"),c(60,60)))\n\n### dataset.normalized <- read.table(\"test.data.txt\",header = T,row.names = 1,sep = '\\t')\n### phe_data <- read.table(\"test.phenodata.txt\",header = T,sep = \"\\t\")\n\n# Run\nres <- pair_find(data=dataset.normalized,\n                 phenodata=phe_data,\n                 k=\"euclidean\",\n                 Cut_pair=25, \n                 method_choose=\"Permutation\",\n                 SavePath = \"./\",\n                 ShuffleWstat = \"ShuffleWstat\", \n                 BoundarySample = \"BoundarySample\",\n                 BoundaryPair=\"BoundaryPair\",\n                 ShuffleTime=10000,\n                 DownPercent = 0.2,\n                 Uppercent=0.8,PvalueCutoff=0.01)\nres$log2FC = log2(as.numeric(res$Dismean)/as.numeric(res$Ctlmean))\nwrite.csv(res,\"Results.csv\",row.names=F)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/mengqingren/VTwins/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage -&gt; Real Data",
        "parent_header": [
          "VTwins"
        ],
        "type": "Text_excerpt",
        "value": "``` r\nlibrary(curatedMetagenomicData) #bioconductor\nlibrary(phyloseq) #bioconductor\nlibrary(tidyverse)\n\n# download dataset -> object\nZellerGData <- curatedMetagenomicData(\"ZellerG_2014.metaphlan_bugs_list*\",\n                                      dryrun = FALSE,\n                                      counts = TRUE,\n                                      bugs.as.phyloseq = TRUE)\npsAB <- subset_samples(ZellerGData$ZellerG_2014.metaphlan_bugs_list.stool, study_condition != \"adenoma\")\npsAB <- prune_samples(sample_sums(psAB) >= 10^3, psAB)\nCRC_WMS <- filter_taxa(psAB,function(x) sum(x>0)>0,1)\n\n# phenodata frame\ngrp1_name = \"control\"\ngrp2_name = \"CRC\"\nvariable_name = \"study_condition\"\n# transitional phenotype dataframe\nphe_data <- CRC_WMS@sam_data %>% data.frame() %>% dplyr::select(\"study_condition\") %>% rownames_to_column() %>% dplyr::rename(id=1,grp=2) %>%\n  mutate(grp = dplyr::case_when(grp == \"control\" ~ \"grp1\",grp == \"CRC\" ~ \"grp2\")) %>% arrange(grp)\n\n# transitional relative abundance dataframe\ndataset <- t(CRC_WMS@otu_table@.Data)%>% data.frame() %>% rownames_to_column() %>% merge(phe_data,.,by.x=\"id\",by.y=\"rowname\") %>%\n  arrange(grp)\n\n# Final phenotype dataframe\nphe_data2 <- dataset %>% dplyr::select(id,grp)\n\n# Final relative abundance dataframe\ndataset2 <- dataset %>% dplyr::select(-grp) %>% remove_rownames() %>% column_to_rownames(\"id\")\n\n### dataset2 <- readRDS(\"RealData.dataset2.RDS\")\n### phe_data2 <- readRDS(\"RealData.phe_data2.RDS\")\n\n# Run\nres <- pair_find(data=dataset2,\n                 phenodata=phe_data2,\n                 k=\"euclidean\",\n                 Cut_pair=25, \n                 method_choose=\"Permutation\",\n                 SavePath = \"./\",\n                 ShuffleWstat = \"RealData.ShuffleWstat\", \n                 BoundarySample = \"RealData.BoundarySample\",\n                 BoundaryPair=\"RealData.BoundaryPair\",\n                 ShuffleTime=10000,\n                 DownPercent = 0.2,\n                 Uppercent=0.8,PvalueCutoff=0.01)\nres$log2FC = log2(as.numeric(res$Dismean)/as.numeric(res$Ctlmean))\nwrite.csv(res,\"RealData.Results.csv\",row.names=F)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/mengqingren/VTwins/main/README.md",
      "technique": "header_analysis"
    }
  ]
}