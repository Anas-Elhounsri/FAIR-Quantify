{
  "application_domain": [
    {
      "confidence": 24.82,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "How to cite this work",
        "parent_header": [
          "scifAI: An explainable AI python framework for the analysis of multi-channel imaging flow cytometry data"
        ],
        "type": "Text_excerpt",
        "value": "\r\ncoming soon\r\n"
      },
      "source": "https://raw.githubusercontent.com/marrlab/scifAI/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/marrlab/scifAI"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Contributing\n\nWe are happy about any contributions. For any suggested changes, please send a pull request to the develop branch.\n"
      },
      "source": "https://raw.githubusercontent.com/marrlab/scifAI/main/CONTRIBUTING.md",
      "technique": "file_exploration"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-08-16T08:45:48Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-12-05T23:31:40Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "scifAI: An explainable AI python framework for the analysis of multi-channel imaging data"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9995403893072585,
      "result": {
        "original_header": "scifAI: An explainable AI python framework for the analysis of multi-channel imaging flow cytometry data",
        "type": "Text_excerpt",
        "value": "\r\n[![Codacy Badge](https://app.codacy.com/project/badge/Grade/898be58197e045a6b35f0407978088c8)](https://www.codacy.com/gh/marrlab/scifAI/dashboard)\r\n\r\nHere, we present `scifAI`, a machine learning framework for the efficient and explainable analysis of high-throughput imaging data based on a modular open-source implementation. The open-source framework was developed in python, leveraging functionality from state-of-the-art modules, such as scikit-learn, SciPy, NumPy and pandas, allowing for smooth integration and extension of existing analysis pipelines. Universally applicable for single-cell imaging projects, the framework provides functionality for import and preprocessing of input data, several feature engineering pipelines including the implementation of a set of biologically motivated features and autoencoder-generated features, as well as methodology for efficient and meaningful feature selection. Moreover, the framework implements several machine learning and deep learning models for training supervised image classification models, e.g. for the prediction of cell configurations such as the immunological synapse. Following the principle of multi-instance learning, the framework also implements functionality to regress a set of selected images, against a downstream continuous readout such as cytokine production. Extensive documentation, as well as example code in the form of Jupyter notebooks is provided.\r\n\r\nNote: this repository only includes the main python package and multiple jupyter notebooks on publicly available datasets. For following on how this package is applied in the main publication, please refer to https://github.com/marrlab/scifAI-notebooks \r\n\r \n"
      },
      "source": "https://raw.githubusercontent.com/marrlab/scifAI/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9947536690122234,
      "result": {
        "original_header": "Data structure",
        "type": "Text_excerpt",
        "value": "\r\nFor using the package, you need to download the data from IDEAS software and save each image (all the channels) as an `.h5` file. The `.h5` file should include at least these keys: `image`, `mask`. In case there is label available, also the `label` should be provided as `str`.\r\n\r\nIn addition, each file should be saved with the object number as the last part in the name. For example, for a random image with object number of 1000 this is the correct name: `random_file_1000.h5`. This is important as you can use the object numbers to come back to files and use the IDEAS software as well.\r\n\r\nApart from each file, we assume that the data comes from different experiments, donors and conditions. For example, in case we have N experiments, M donors and K conditions, the data path folder should look like this:\r\n\r\n```bash\r\ndata_path/Experiment_1/Donor_1/condition_1/*.h5\r\ndata_path/Experiment_1/Donor_1/condition_2/*.h5\r\n.\r\n.\r\n.\r\ndata_path/Experiment_1/Donor_2/condition_1/*.h5\r\ndata_path/Experiment_1/Donor_2/condition_2/*.h5\r\n.\r\n.\r\n.\r\ndata_path/Experiment_N/Donor_M/condition_K/*.h5\r\n```\r\n\r \n"
      },
      "source": "https://raw.githubusercontent.com/marrlab/scifAI/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/marrlab/scifAI/tree/main/docs"
      },
      "technique": "file_exploration"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/marrlab/scifAI/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/marrlab/scifAI/main/docs/IFC_notebooks/apoptotic_cells.ipynb"
      },
      "source": "https://raw.githubusercontent.com/marrlab/scifAI/main/docs/IFC_notebooks/apoptotic_cells.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/marrlab/scifAI/main/docs/IFC_notebooks/Jurkat_cells.ipynb"
      },
      "source": "https://raw.githubusercontent.com/marrlab/scifAI/main/docs/IFC_notebooks/Jurkat_cells.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/marrlab/scifAI/main/docs/IFC_notebooks/whtie_blood_cells_DL.ipynb"
      },
      "source": "https://raw.githubusercontent.com/marrlab/scifAI/main/docs/IFC_notebooks/whtie_blood_cells_DL.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/marrlab/scifAI/main/docs/Other_datasets/Malaria%20Cell%20Images.ipynb"
      },
      "source": "https://raw.githubusercontent.com/marrlab/scifAI/main/docs/Other_datasets/Malaria%20Cell%20Images.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/marrlab/scifAI/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "marrlab/scifAI"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "scifAI: An explainable AI python framework for the analysis of multi-channel imaging flow cytometry data"
      },
      "source": "https://raw.githubusercontent.com/marrlab/scifAI/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/marrlab/scifAI/main/setup.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "How to install the package",
        "parent_header": [
          "scifAI: An explainable AI python framework for the analysis of multi-channel imaging flow cytometry data"
        ],
        "type": "Text_excerpt",
        "value": "\r\nFor installing the package, you can simply clone the repository and run the following command:\r\n\r\n```bash\r\npip -q install <PATH TO THE FOLDER>\r\n```\r\n\r\nThe installation time is less than a minute if all the requirements exist.\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/marrlab/scifAI/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/marrlab/scifAI/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Copyright 2022 F. Hoffmann-La Roche AG & MarrLab\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/marrlab/scifAI/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "scifAI"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "marrlab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 61165,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 52,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/marrlab/scifAI/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "aliechoes",
          "type": "User"
        },
        "date_created": "2023-08-28T08:22:53Z",
        "date_published": "2023-10-10T10:20:07Z",
        "html_url": "https://github.com/marrlab/scifAI/releases/tag/publication",
        "name": "publication",
        "release_id": 124398480,
        "tag": "publication",
        "tarball_url": "https://api.github.com/repos/marrlab/scifAI/tarball/publication",
        "type": "Release",
        "url": "https://api.github.com/repos/marrlab/scifAI/releases/124398480",
        "value": "https://api.github.com/repos/marrlab/scifAI/releases/124398480",
        "zipball_url": "https://api.github.com/repos/marrlab/scifAI/zipball/publication"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-03 23:09:12",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 6
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "How to use the package",
        "parent_header": [
          "scifAI: An explainable AI python framework for the analysis of multi-channel imaging flow cytometry data"
        ],
        "type": "Text_excerpt",
        "value": "\r\nFor the feature extraction, you first need to calcalate the `metadata` dataframe with providing the correct data path. \r\n\r\n```python\r\nimport scifAI\r\n\r\ndata_path = <PATH TO THE DATA FOLDER>\r\nmetadata = scifAI.metadata_generator(data_path)\r\n```\r\n\r\nAfter that, you need to defined the feature union from `sklearn` based on the desired features. For example:\r\n\r\n```python\r\nfrom sklearn.pipeline import  FeatureUnion\r\nfrom scifAI.ml import features\r\n\r\nfeature_union = FeatureUnion([\r\n                                (\"MaskBasedFeatures\", features.MaskBasedFeatures()), \r\n                                (\"GLCMFeatures\", features.GLCMFeatures()),  \r\n                                (\"GradientRMS\", features.GradientRMS()),  \r\n                                (\"BackgroundMean\", features.BackgroundMean()), \r\n                                (\"PercentileFeatures\", features.PercentileFeatures()), \r\n                                (\"CellShape\", features.CellShape()),  \r\n                                (\"Collocalization\", features.Collocalization()),    \r\n                                (\"IntersectionProperties\", features.IntersectionProperties()),\r\n                                (\"CenterOfCellsDistances\", features.CenterOfCellsDistances())\r\n]\r\n)\r\n```\r\n\r\nFinally you can pass the feature union to the `FeatureExtractor` as a `sklearn` pipeline:\r\n\r\n```python\r\nfrom sklearn.pipeline import Pipeline\r\nfrom scifAI.ml import FeatureExtractor \r\n\r\npipeline = Pipeline([(\"features\", feature_union)])\r\n\r\nfeature_extractor = FeatureExtractor(pipeline)\r\nlist_of_features = feature_extractor.extract_features(metadata)\r\n```\r\nThe output of `extract_features` would be a list, where each element is a dictionary of features for every row in the `metadata`. Finally, you can transoform the `list_of_features` to a DataFrame by simply running:\r\n\r\n```python\r\ndf_features = pd.DataFrame(list_of_features)\r\n```\r\n\r\nwhere every row in the `df_features` contains the corresponding features from the same row in `metadata`. \r\n\r\nConsidering that there are many features, we suggest to reduce the features with no variance. In addition, imputing with `0.` is the best option as it follows the biological assumptions for the feature extraction process.\r\n\r\n```python\r\ndf_features = df_features.fillna(0.)\r\ndf_features = df_features.loc[:, df_features.std() > 0.]\r\n```\r\n\r\nFor different examples, you can follow our examples in the [docs](docs) folder.\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/marrlab/scifAI/main/README.md",
      "technique": "header_analysis"
    }
  ]
}