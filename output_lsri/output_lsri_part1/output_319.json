{
  "application_domain": [
    {
      "confidence": 16.71,
      "result": {
        "type": "String",
        "value": "Natural Language Processing"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/mfruzan/CoreDetector"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-02-05T02:15:06Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-08-14T15:18:39Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9972798584669341,
      "result": {
        "original_header": "CoreDetector Multiple Genome Aligner",
        "type": "Text_excerpt",
        "value": "CoreDetector is a new fast and flexible program that is able to identify the core-genome sequence of larger and more evolutionary diverse genomes.  \n"
      },
      "source": "https://raw.githubusercontent.com/mfruzan/CoreDetector/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9291316102869768,
      "result": {
        "original_header": "<a name=\"usage\"></a>Usage",
        "type": "Text_excerpt",
        "value": "The main input file for CoreDetector is the `<genome_list>` text file, consisting of lines of genomes:\n```bash\nAlg130\texample/Alg130.fna\nDW5\texample/DW5.fna\nM4\texample/M4.fna\n```\nEach line contains an alias name (e.g., Alg130, DW5), followed by a space/Tab, then followed by the filepath to the FASTA file for that genome. In this example, Alg130 is the query genome, and the rest of the genomes become the subjects. This text file is passed to `./pipeline_Minimap.sh` using the `-g` flag. \n- `msa.maf` is a standard MAF file, with each entry containing one subject file for each genome. Coordinates and strandness of entries are in respect to the original genome FASTA file. This MAF output file is appropriate for structural variation detection.\n- `concatenated_msa.fa` is a FASTA file, with one entry for each genome file constructed by concatenating that genome's subject line from all entries of the `msa.maf` file. The name of each entry is the same name as the genome given in the input genome list file. This file is appropriate for phylogenetics tree construction. \nThe `-d` argument is the expected divergence level, and can be any integer between 1 and 40. \nOther arguments to CoreDetector are optional, and allow fine-tuning of the program configuration: \n- `-n` is the number of cores/CPUs to use for the program execution (default is 4 cores).\n- `-m` is the minimum alignment length, in bp (the default is 200bp).\n- `-c` toggles chromosome number matching (1: enabled, 0:disabled, default is 0). Note that if chromosome number matching is enabled, CoreDetector considers a contig name to start with a chromosome number, such as 2B or 14, followed by a space (or the characters '_','-'). \nThe [CoreDetector Manual](https://github.com/mfruzan/CoreDetector/blob/master/Manual.md) explains program usage in detail, and lists further analysis examples.\n \n"
      },
      "source": "https://raw.githubusercontent.com/mfruzan/CoreDetector/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 2. Download and install Minimap2 (v2.26)",
        "parent_header": [
          "CoreDetector Multiple Genome Aligner",
          "<a name=\"qstart\"></a>Quick start"
        ],
        "type": "Text_excerpt",
        "value": "Grab the v2.26 release of Minimap2 from its GitHub repository [here](https://github.com/lh3/minimap2/releases/tag/v2.26). Alternatively, copy-paste the below commands to automatically download, compile and configure Minimap2. (Note: this compilation requires compiler tools and the zlib development headers to be installed: on Ubuntu 22.04, you can easily install these compilation dependencies with `sudo apt-get -y install build-essential zlib1g-dev`. You might need to run `sudo apt-get update` before installing build-essential and zlib1g-dev)\n```bash\nwget \"https://github.com/lh3/minimap2/releases/download/v2.26/minimap2-2.26.tar.bz2\"\ntar -xjf minimap2-2.26.tar.bz2\ncd minimap2-2.26 && make\ncp minimap2 misc/paftools.js $HOME/bin/\ncd ..\n```\n"
      },
      "source": "https://raw.githubusercontent.com/mfruzan/CoreDetector/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 3. Download and install K8 (v1.0)",
        "parent_header": [
          "CoreDetector Multiple Genome Aligner",
          "<a name=\"qstart\"></a>Quick start"
        ],
        "type": "Text_excerpt",
        "value": "Get the v1.0 release of the K8 Javascript shell from its GitHub repository [here](https://github.com/attractivechaos/k8/releases/tag/v1.0). Alternatively, execute the following commands to automatically download and configure the precompiled K8 binary:\n```bash\nwget \"https://github.com/attractivechaos/k8/releases/download/v1.0/k8-1.0.tar.bz2\"\ntar -xjf k8-1.0.tar.bz2\ncp k8-1.0/k8-x86_64-Linux $HOME/bin/k8\n```\n"
      },
      "source": "https://raw.githubusercontent.com/mfruzan/CoreDetector/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 5. Download CoreDetector and run an example pipeline",
        "parent_header": [
          "CoreDetector Multiple Genome Aligner",
          "<a name=\"qstart\"></a>Quick start"
        ],
        "type": "Text_excerpt",
        "value": "Finally, pull this GitHub repository to download the CoreDetector tool, and run a test case on the provided example set of genomes to confirm that the tool is working correctly.\n```bash\ngit clone https://github.com/mfruzan/CoreDetector.git\ncd CoreDetector\nchmod +x pipeline_Minimap.sh\n\n./pipeline_Minimap.sh -g example/quick_genomes.txt -o example_out -d 20 -n 16\n```\n"
      },
      "source": "https://raw.githubusercontent.com/mfruzan/CoreDetector/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/mfruzan/CoreDetector/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/mfruzan/CoreDetector/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "mfruzan/CoreDetector"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CoreDetector Multiple Genome Aligner"
      },
      "source": "https://raw.githubusercontent.com/mfruzan/CoreDetector/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/mfruzan/CoreDetector/master/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/mfruzan/CoreDetector/master/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/mfruzan/CoreDetector/master/pipeline_Minimap.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/mfruzan/CoreDetector/master/pipeline_GSAlign.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/mfruzan/CoreDetector/master/r_analysis/scripts/run-me.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 2. Download and install Minimap2 (v2.26)",
        "parent_header": [
          "CoreDetector Multiple Genome Aligner",
          "<a name=\"qstart\"></a>Quick start"
        ],
        "type": "Text_excerpt",
        "value": "Grab the v2.26 release of Minimap2 from its GitHub repository [here](https://github.com/lh3/minimap2/releases/tag/v2.26). Alternatively, copy-paste the below commands to automatically download, compile and configure Minimap2. (Note: this compilation requires compiler tools and the zlib development headers to be installed: on Ubuntu 22.04, you can easily install these compilation dependencies with `sudo apt-get -y install build-essential zlib1g-dev`. You might need to run `sudo apt-get update` before installing build-essential and zlib1g-dev)\n```bash\nwget \"https://github.com/lh3/minimap2/releases/download/v2.26/minimap2-2.26.tar.bz2\"\ntar -xjf minimap2-2.26.tar.bz2\ncd minimap2-2.26 && make\ncp minimap2 misc/paftools.js $HOME/bin/\ncd ..\n```\n"
      },
      "source": "https://raw.githubusercontent.com/mfruzan/CoreDetector/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 3. Download and install K8 (v1.0)",
        "parent_header": [
          "CoreDetector Multiple Genome Aligner",
          "<a name=\"qstart\"></a>Quick start"
        ],
        "type": "Text_excerpt",
        "value": "Get the v1.0 release of the K8 Javascript shell from its GitHub repository [here](https://github.com/attractivechaos/k8/releases/tag/v1.0). Alternatively, execute the following commands to automatically download and configure the precompiled K8 binary:\n```bash\nwget \"https://github.com/attractivechaos/k8/releases/download/v1.0/k8-1.0.tar.bz2\"\ntar -xjf k8-1.0.tar.bz2\ncp k8-1.0/k8-x86_64-Linux $HOME/bin/k8\n```\n"
      },
      "source": "https://raw.githubusercontent.com/mfruzan/CoreDetector/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 4. Install a Java runtime/development kit",
        "parent_header": [
          "CoreDetector Multiple Genome Aligner",
          "<a name=\"qstart\"></a>Quick start"
        ],
        "type": "Text_excerpt",
        "value": "[OpenJDK-11](https://openjdk.org/projects/jdk/11/) (or later versions) have been confirmed to work well with CoreDetector. For most Linux systems, these are easily installed via the package manager. E.g., to install OpenJDK-11 (the default JDK) on Ubuntu 22.04:\n```bash\nsudo apt-get -y install openjdk-11-jdk  # or default-jdk\n```\n"
      },
      "source": "https://raw.githubusercontent.com/mfruzan/CoreDetector/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.8976656188027683,
      "result": {
        "original_header": "<a name=\"usage\"></a>Usage",
        "type": "Text_excerpt",
        "value": "Use the CoreDetector multiple alignment tool (with the Minimap2 pipeline) as follows:\n```\n./pipeline_Minimap.sh -g <genome_list> -o <out_dir> -d <divergence> -n <ncpus> -m <minlength> -c <chromosome>\n``` \nThe `-o` argument specifies the output directory. CoreDetector generates two output files in the specified output folder: `msa.maf` and `concatinated_msa.fa`. Note that the directory will be created if it does not already exist. \n"
      },
      "source": "https://raw.githubusercontent.com/mfruzan/CoreDetector/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/mfruzan/CoreDetector/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2023 Mario Fruzangohar & Paula Moolhuijzen\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/mfruzan/CoreDetector/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CoreDetector"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "mfruzan"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Java",
        "size": 214690,
        "type": "Programming_language",
        "value": "Java"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 6608,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 2388,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 515,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 204,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/mfruzan/CoreDetector/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "repository_status": [
    {
      "confidence": 1,
      "result": {
        "description": "Active \u2013 The project has reached a stable, usable state and is being actively developed.",
        "type": "Url",
        "value": "https://www.repostatus.org/#active"
      },
      "source": "https://raw.githubusercontent.com/mfruzan/CoreDetector/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 1. Configure your `$PATH` for CoreDetector binary dependencies",
        "parent_header": [
          "CoreDetector Multiple Genome Aligner",
          "<a name=\"qstart\"></a>Quick start"
        ],
        "type": "Text_excerpt",
        "value": "CoreDetector depends on the [Minimap2](https://github.com/lh3/minimap2) versatile pairwise aligner (and its related `paftools.js` utility), as well as the [K8 Javascript shell](https://github.com/attractivechaos/k8). The easiest way is to install these to a prepared folder on the system `$PATH` for them, so that they are always available when CoreDetector runs:\n```bash\nmkdir -p $HOME/bin\necho \"export PATH=$HOME/bin:${PATH}\" >> $HOME/.bashrc && source $HOME/.bashrc\n```\n"
      },
      "source": "https://raw.githubusercontent.com/mfruzan/CoreDetector/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 5. Download CoreDetector and run an example pipeline",
        "parent_header": [
          "CoreDetector Multiple Genome Aligner",
          "<a name=\"qstart\"></a>Quick start"
        ],
        "type": "Text_excerpt",
        "value": "Finally, pull this GitHub repository to download the CoreDetector tool, and run a test case on the provided example set of genomes to confirm that the tool is working correctly.\n```bash\ngit clone https://github.com/mfruzan/CoreDetector.git\ncd CoreDetector\nchmod +x pipeline_Minimap.sh\n\n./pipeline_Minimap.sh -g example/quick_genomes.txt -o example_out -d 20 -n 16\n```\n"
      },
      "source": "https://raw.githubusercontent.com/mfruzan/CoreDetector/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 00:16:29",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 25
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "<a name=\"qstart\"></a>Quick start",
        "parent_header": [
          "CoreDetector Multiple Genome Aligner"
        ],
        "type": "Text_excerpt",
        "value": "Installation and configuration of CoreDetector on Linux-based operating systems proceeds as follows.\n"
      },
      "source": "https://raw.githubusercontent.com/mfruzan/CoreDetector/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 5. Download CoreDetector and run an example pipeline",
        "parent_header": [
          "CoreDetector Multiple Genome Aligner",
          "<a name=\"qstart\"></a>Quick start"
        ],
        "type": "Text_excerpt",
        "value": "Finally, pull this GitHub repository to download the CoreDetector tool, and run a test case on the provided example set of genomes to confirm that the tool is working correctly.\n```bash\ngit clone https://github.com/mfruzan/CoreDetector.git\ncd CoreDetector\nchmod +x pipeline_Minimap.sh\n\n./pipeline_Minimap.sh -g example/quick_genomes.txt -o example_out -d 20 -n 16\n```\n"
      },
      "source": "https://raw.githubusercontent.com/mfruzan/CoreDetector/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "<a name=\"dockerqstart\"></a>Quick start (using Docker)",
        "parent_header": [
          "CoreDetector Multiple Genome Aligner"
        ],
        "type": "Text_excerpt",
        "value": "Alternatively, easily set up CoreDetector in a Docker container using the provided Dockerfile, which completely automates the installation. For information about setting up Docker on Windows/Mac/Linux and using containers, see [docs.docker.com](https://docs.docker.com/).\n```bash\ngit clone https://github.com/mfruzan/CoreDetector.git\ncd CoreDetector\nsudo docker build -t coredetector .\nsudo docker run -it -v $(pwd)/example:/example coredetector\n```\nIn the interactive shell for the container, you can immediately run the Multiple Genome Aligner tool:\n```bash\n./pipeline_Minimap.sh -g example/quick_genomes.txt -o example/output -d 20 -n 16\n```\n"
      },
      "source": "https://raw.githubusercontent.com/mfruzan/CoreDetector/master/README.md",
      "technique": "header_analysis"
    }
  ]
}