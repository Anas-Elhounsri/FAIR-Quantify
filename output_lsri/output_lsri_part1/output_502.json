{
  "application_domain": [
    {
      "confidence": 0.8824583197953038,
      "result": {
        "type": "String",
        "value": "Graphs"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/50637/HNSPPI_V1.1"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-03-27T06:25:25Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-06-25T00:47:56Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9258393306342965,
      "result": {
        "type": "Text_excerpt",
        "value": "HNSPPI: A Hybrid Computational Model Combing Network and Sequence Information for Predicting Protein-Protein Interaction \nHNSPPI is a novel computational model for PPI predictions which comprehensively characterizes the intrinsic relationship between two proteins by integrating protein sequence and PPI network connection properties. \nHNSPPI Version: V1.1\nDate: 2023-03-25\nPlatform: Tensorflow 2.7.0 and Python 3.8.0 \n[1] The folders in the HNSPPI package:\n1) data: This folder contains seven benchmark datasets, including two PPI information files (positive and negative cases) and sequence information file. \n2) embeddings: This folder stores the embedding features generated in the training.\n3) OpenNE: This folder contains the node2vec method source code.\n4) SOTA: This folder contains 5 state-of-the-art algorithms. \n[2] Scripts:\n1) The source code files of HNSPPI model \nmain.py - This script is the main entry of the program. \nparallel.py - This script is used to perform parallel experiments. \nutils.py - This script is used to prepare data and features for the model. \nevaluation.py \u2013 This script is used to evaluate the performance of HNSPPI. \n2) The source code files for SOTA algorithms \nDeepFE.py \u2013 This script is to evaluate the performance of DeepFE-PPI. The complete source code can be downloaded from https://github.com/xal2019/DeepFE-PPI. \nDCONV.py- This script is to evaluate the performance of DCONV. The source code can be downloaded from https://gitlab.univnantes.fr/richoux-f/DeepPPI/tree/v1.tcbb. \nDFC.py- This script is to evaluate the performance of DFC. The source code can be downloaded from https://gitlab.univnantes.fr/richoux-f/DeepPPI/tree/v1.tcbb. \nDeepPur(AAC).py- This script is to evaluate the performance of DeepPur(AAC). The code is downloaded from https://github.com/kexinhuang12345/DeepPurpose. \nDeepPur(CNN).py- This script is to evaluate the performance of DeepPur(CNN). The code is downloaded from https://github.com/kexinhuang12345/DeepPurpose. \n(1) In this study, we provided seven testing datasets. The whole package of data can be downloaded from our official website: http://cdsic.njau.edu.cn/data/PPIDataBankV1.0. \n(2) The data profiles for each dataset also can be downloaded from the folder \u2018data\u2019 in the Github.  \n--Running the HNSPPI model requires two edgelist files (one is for positive samples, and the other is for negative samples) and a csv file for the  amino acid sequences of proteins. \n"
      },
      "source": "https://raw.githubusercontent.com/50637/HNSPPI_V1.1/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/50637/HNSPPI_V1.1/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/50637/HNSPPI_V1.1/main/utils.ipynb"
      },
      "source": "https://raw.githubusercontent.com/50637/HNSPPI_V1.1/main/utils.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/50637/HNSPPI_V1.1/main/main.ipynb"
      },
      "source": "https://raw.githubusercontent.com/50637/HNSPPI_V1.1/main/main.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/50637/HNSPPI_V1.1/main/evaluation.ipynb"
      },
      "source": "https://raw.githubusercontent.com/50637/HNSPPI_V1.1/main/evaluation.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/50637/HNSPPI_V1.1/main/parallel.ipynb"
      },
      "source": "https://raw.githubusercontent.com/50637/HNSPPI_V1.1/main/parallel.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/50637/HNSPPI_V1.1/main/delseq.ipynb"
      },
      "source": "https://raw.githubusercontent.com/50637/HNSPPI_V1.1/main/delseq.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/50637/HNSPPI_V1.1/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "50637/HNSPPI_V1.1"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/50637/HNSPPI_V1.1/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9675516441827811,
      "result": {
        "type": "Text_excerpt",
        "value": "HNSPPI Version: V1.1\nDate: 2023-03-25\nPlatform: Tensorflow 2.7.0 and Python 3.8.0 \nDeepFE.py \u2013 This script is to evaluate the performance of DeepFE-PPI. The complete source code can be downloaded from https://github.com/xal2019/DeepFE-PPI. \nDCONV.py- This script is to evaluate the performance of DCONV. The source code can be downloaded from https://gitlab.univnantes.fr/richoux-f/DeepPPI/tree/v1.tcbb. \nDFC.py- This script is to evaluate the performance of DFC. The source code can be downloaded from https://gitlab.univnantes.fr/richoux-f/DeepPPI/tree/v1.tcbb. \nDeepPur(AAC).py- This script is to evaluate the performance of DeepPur(AAC). The code is downloaded from https://github.com/kexinhuang12345/DeepPurpose. \nDeepPur(CNN).py- This script is to evaluate the performance of DeepPur(CNN). The code is downloaded from https://github.com/kexinhuang12345/DeepPurpose. \n(1) In this study, we provided seven testing datasets. The whole package of data can be downloaded from our official website: http://cdsic.njau.edu.cn/data/PPIDataBankV1.0. \n[5] Installation:\n  \ngit clone https://github.com/50637/HNSPPI_V1.1.git \n[6] Execute the code cell by cell in the Python interactive window:\n  \nrun main.ipynb with Jupyter code cells\n \n"
      },
      "source": "https://raw.githubusercontent.com/50637/HNSPPI_V1.1/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8653284366607153,
      "result": {
        "type": "Text_excerpt",
        "value": "utils.py - This script is used to prepare data and features for the model. \n--Command line: \nrun main.py script with --input1 <positive edgelist> --input2 <negative edgelist> --output <output file> --species <species name> --seed <seed>\n  \n--Model output: will generate a file called results.csv\n  \n--For example: \n  \npython main.py --input1 data/mouse/mouse_pos.edgelist --input2 data/mouse/mouse_neg.edgelist --output embeddings/mouse --species \u2018mouse\u2019 --seed 0 \n"
      },
      "source": "https://raw.githubusercontent.com/50637/HNSPPI_V1.1/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/50637/HNSPPI_V1.1/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "HNSPPI_V1.1"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "50637"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 49379,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 22726,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/50637/HNSPPI_V1.1/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-04 00:59:34",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ]
}