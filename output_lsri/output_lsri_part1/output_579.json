{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/BAMeScience/PepGM"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-04-04T09:52:55Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-04-03T17:17:00Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Graphical model for taxonomic profiling"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9683402916943911,
      "result": {
        "type": "Text_excerpt",
        "value": "  <p align=\"center\">\n    A probabilistic graphical model for taxonomic inference of viral proteome samples with associated confidence scores\n    <br />\n  </p>\n</div> \n### Our preprint is out now! You can read it [here](https://www.biorxiv.org/content/10.1101/2022.09.21.508832v1). \n"
      },
      "source": "https://raw.githubusercontent.com/BAMeScience/PepGM/master/readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9828856006427976,
      "result": {
        "original_header": "Our preprint is out now! You can read it <a href=\"https://www.biorxiv.org/content/10.1101/2022.09.21.508832v1\">here</a>.",
        "type": "Text_excerpt",
        "value": "PepGM is a probabilistic graphical model embedded into a snakemake workflow for taxonomic inference of viral proteome samples. PepGM was \ndeveloped by the the eScience group at BAM (Federal Institute for Materials Research and Testing). \n"
      },
      "source": "https://raw.githubusercontent.com/BAMeScience/PepGM/master/readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9398869360191321,
      "result": {
        "original_header": "PepGM",
        "type": "Text_excerpt",
        "value": "0. Optional host and cRAP filtering step\n1. SearchDB cleanup : cRAP DB ist added, host is added (if wanted), duplicate entries are removed using [seqkit](https://bioinf.shenwei.me/seqkit/). generation of target-decoy DB using searchCLI. Susequent peptide search using searchCLI + PeptideShaker. Generation of a a peptide list <br>\n2. All descendant strains of the target taxa are queried in the NCBI protein DB  through the NCBI API. scripts: GetTargets.py, CreatePepGMGraph.py and FactorGraphGeneration.py<br>\n3. Downloaded protein recordes are digested and queried against the protein ID list to generate a bipartite taxon-peptide graph. scripts: CreatePepGMGraph.py and FactorGraphGeneration.py<br>\n4. The bipartite graph is transformed into a factor graph using convolution trees and conditional probability table factors (CPD). scripts: CreatePepGMGraph.py and FactorGraphGeneration.py<br>\n5. For different sets of CPD parameters, the belief propagation algorithm is run until convergence to obtain the posterior probabilites of the taxa. scripts: belief_propagation.py and PepGM.py <br>\n6. Through an  empirically deduced metric, the ideal parameter set is inferred. script GridSearchAnalysis.py <br>\n7. For this ideal parameter set, we output a results barchart and phylogenetic tree view showcasing the 15 best scoring tax. scripts: BarPlotResults, PhyloTreeView.py<br>  \nIf you find PepGM helpful for your research, please cite: <br>\n_PepGM: A probabilistic graphical model for taxonomic inference of viral proteome samples with associated confidence scores  <br>_\nTanja Holstein, Franziska Kistner, Lennart Martens, Thilo Muth <br>\nbioRxiv 2022.09.21.508832 <br>\ndoi: https://doi.org/10.1101/2022.09.21.508832 \nPepGM uses convolution trees. The code for the convolution trees was developed and is described in: [https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0091507](https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0091507)<br>\nPepGM uses a version of the belief propagatin algorithm with a graphical network architecture previously described in [https://pubs.acs.org/doi/10.1021/acs.jproteome.9b00566](https://pubs.acs.org/doi/10.1021/acs.jproteome.9b00566) \nPepGM is tested for Linux OS and uses SearchGUI-4.1.14 and PeptideShaker-2.2.9 developed \nby the CompOmics group at University of Ghent. <br> \n  ```sh\n  cd ./resources/Database\n  wget ftp://ftp.ncbi.nlm.nih.gov/refseq/release/viral/\\*.protein.faa.gz &&\n  gzip -d viral.*.protein.faa.gz &&\n  cat viral.*.protein.faa> refSeqViral.fasta &&\n  rm viral.*.protein.faa\n  ```\n### Using the NCBI Entrez API \nPepGM uses the NCBI Entrez API. <br>\nWe strongly advise you to create an NCBI account with your own key due to drastic speed increase.\nFind out how to obtain your NCBI API key [here](https://support.nlm.nih.gov/knowledgebase/article/KA-05317/en-us). <br> \nDo not change the config file location.\n<details>\n  <summary>Details on the configuration parameters </summary> <br>\n    <details> <summary>Run panel <br> </summary> \n    Set up the workflow of your PepGM run by providing parameters that fill wildcards to locate input files\n    such as raw spectra or reference database files. Thus, use file basenames i.e., without file \n    suffix, that your files already have or rename them accordingly. <br><br>\n    Run: Name of your run that is used to create a subfolder in the results directory. <br>\n    Sample: Name of your sample that is used to create a subfolder in the run directory. <br> \n    Reference: Name of reference database (e.g. human). <br>\n    Host: Trivial host name. <br>\n    Scientific host: Scientific host name. Retain (scientific) host names from public libraries such as \n    <a href=\"http://www.proteomexchange.org/\">ProteomeXchange</a> or \n    <a href=\"https://www.ebi.ac.uk/pride/\">PRIDE</a> (e.g. homo sapiens). <br>\n    Add host and crap database: Search database is extended by a host and\n    <a href=\"https://www.thegpm.org/crap/\">cRAP</a> database. Mutually exclusive to Filter Spectra.  <br><br> </details>\n    <details> <summary>Input panel <br> </summary> \n    Specify input file and directory paths. <br><br>\n    Sample spectra: Path to raw spectra file. <br>   \n    Parameter: Path to SearchGUI parameter file. <br>\n    Sample data: Path to directory that contains sample raw spectra files. <br>\n    Database: Path to directory that contains the reference database. <br>\n    Peptide Shaker: Path to PeptideShaker binary (.jar). <br>\n    Search GUI (folder): Path to SearchGUI binary (.jar). <br><br>\n    The following paths are part of the recommended project structure for Snakemake workflows. Find out more about\n    reproducible Snakemake workflows\n    <a href=\"https://snakemake.readthedocs.io/en/stable/snakefiles/deployment.html\">here</a>. <br>\n    Resources: Relative path to resources folder <br>\n    Results: Relative path to results folder <br>\n    TaxID mapping: Relative path to folder that contains mapped taxIDs. <br> <br>\n    </details>\n    <details> <summary>Search panel <br> </summary> \n    Choose a search engine that SearchGUI is using and the desired FDR levels. <br><br>\n    </details>\n    <details> <summary>PepGM panel <br></summary>\n    Grid search: Choose increments for alpha, beta and prior that are to be included in the grid search to tune\n    graphical model parameters. Do not put a comma between values. <br>\n    Results plotting: Number of taxa in the final strain identification barplot. <br><br> \n    </details>\n    <details> <summary>Config file panel <br> </summary>    \n    Provide your NCBI API mail and key.\n    </details> \nMain results: <br>\n- PepGM_Results.csv: Table with values ID, score, type (contains all taxids under 'ID' and all probabilities under 'score' that were attributed by PepGM) <br>\n- PepGM_ResultsPlot.png: Posterior probabilities of n (default: 15) highest scoring taxa <br>\n- PhyloTreeView.png : n (default: 1 5) highest scoring taxa including their score visualized in a taxonomic tree <br> \nAdditional (intermediate): <br>\n- Intermediate results folder sorted by their prior value for all possible grid search parameter combinations\n- mapped_taxids_weights.csv: csv file of all taxids that had at least one protein map to them and their weight \n- PepGM_graph.graphml: graphml file of the graphical model (without convolution tree factors). Useful to visualize the graph structure and peptide-taxon connections <br>\n- paramcheck.png: barplot of the metric used to determine the graphical model parameters for n (default: 15) best performing parameter combinations <br>\n- log files for bug fixing \nand adopt the reference database file basename in corresponding configuration parameter to minRefSeqViral. Finally, \ninsert your API key and mail and replace the path to SamplePath, ParameterFile, SearchGUI and PeptideShaker with your\nindividual locations. \n\nSee the [open issues](https://github.com/BAMeScience/repo_name/issues) for a full list of proposed features (and known issues). \nIf you have a suggestion that would make this better, please fork the repo and create a pull request. You can also simply open an issue with the tag \"enhancement\".\nDon't forget to give the project a star! Thanks again! \n"
      },
      "source": "https://raw.githubusercontent.com/BAMeScience/PepGM/master/readme.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/BAMeScience/PepGM/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/BAMeScience/PepGM/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "BAMeScience/PepGM"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/BAMeScience/PepGM/master/readme.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BAMeScience/PepGM/master/images/workflow.png"
      },
      "source": "https://raw.githubusercontent.com/BAMeScience/PepGM/master/readme.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9708286656728065,
      "result": {
        "original_header": "PepGM",
        "type": "Text_excerpt",
        "value": "\nThe PepGM workflow includes the following steps: \nAdditonally, you need:\n* NCBI Entrez account \n### Prerequisites \nMake sure you have git installed and clone the repo:\n   ```sh\n   git clone https://github.com/BAMeScience/PepGM.git\n   ```\nPepGM is a snakemake workflow developed with snakemake 5.10.0. <br>\nInstalling snakemake requires mamba. \nTo install mamba:\n  ```sh\nconda install -n <your_env> -c conda-forge mamba\n  ``` \nTo install snakemake:\n```sh\nconda activate <your_env>\nmamba create -c conda-forge -c bioconda -n <your_snakemake_env> snakemake\n```\nIn accordance with the Snakemake recommendations, we suggest to save your sample data \nin `resources` folder. All outputs will be saved in `results`. \nAdditional dependencies necessary are Java and GCC. \nDownload the necessary files at the following link:\n* SearchGUI : [http://compomics.github.io/projects/searchgui](http://compomics.github.io/projects/searchgui)\n* PeptideShaker : [http://compomics.github.io/projects/peptide-shaker.html](http://compomics.github.io/projects/peptide-shaker.html) \nWe suggest to create a new directory `bin` inside your PepGM \nworking directory and save the SearchGUI and PeptideShaker binaries there:\n```shell\nmkdir ./bin && cd bin\nwget https://genesis.ugent.be/maven2/eu/isas/searchgui/SearchGUI/4.1.23/SearchGUI-4.1.23-mac_and_linux.tar.gz\nwget https://genesis.ugent.be/maven2/eu/isas/peptideshaker/PeptideShaker/2.2.16/PeptideShaker-2.2.16.zip\ntar -xvf SearchGUI-4.1.23-mac_and_linux.tar.gz && unzip PeptideShaker-2.2.16.zip\n```\nYou can delete the .zip files afterwards:\nBASH5*\n<p align=\"right\">(<a href=\"#top\">back to top</a>)</p>\n \n### Downloading reference database\nWe recommend using the RefSeq Viral database as a generic reference database. It can be downloaded from the NCBI ftp: \n  ```sh\n  cd ./resources/Database\n  wget ftp://ftp.ncbi.nlm.nih.gov/refseq/release/viral/\\*.protein.faa.gz &&\n  gzip -d viral.*.protein.faa.gz &&\n  cat viral.*.protein.faa> refSeqViral.fasta &&\n  rm viral.*.protein.faa\n  ```\n### Using the NCBI Entrez API \nPepGM uses the NCBI Entrez API. <br>\nWe strongly advise you to create an NCBI account with your own key due to drastic speed increase.\nFind out how to obtain your NCBI API key [here](https://support.nlm.nih.gov/knowledgebase/article/KA-05317/en-us). <br> \n### Configuration file \nPepGM needs a configuration file in `yaml` format to set up the workflow. \nAn exemplary configuration file is provided in `config/config.yaml`. <br>\nPlease insert your NCBI account details (mail & key) and provide the required absolute paths to\n* SamplePath\n* ParametersFile\n* SearchGUI & PeptideShaker binaries (SearchGUIDir & PeptideShakerDir) \nDo not change the config file location.\n<details>\n  <summary>Details on the configuration parameters </summary> <br>\n    <details> <summary>Run panel <br> </summary> \n    Set up the workflow of your PepGM run by providing parameters that fill wildcards to locate input files\n    such as raw spectra or reference database files. Thus, use file basenames i.e., without file \n    suffix, that your files already have or rename them accordingly. <br><br>\n    Run: Name of your run that is used to create a subfolder in the results directory. <br>\n    Sample: Name of your sample that is used to create a subfolder in the run directory. <br> \n    Reference: Name of reference database (e.g. human). <br>\n    Host: Trivial host name. <br>\n    Scientific host: Scientific host name. Retain (scientific) host names from public libraries such as \n    <a href=\"http://www.proteomexchange.org/\">ProteomeXchange</a> or \n    <a href=\"https://www.ebi.ac.uk/pride/\">PRIDE</a> (e.g. homo sapiens). <br>\n    Add host and crap database: Search database is extended by a host and\n    <a href=\"https://www.thegpm.org/crap/\">cRAP</a> database. Mutually exclusive to Filter Spectra.  <br><br> </details>\n    <details> <summary>Input panel <br> </summary> \n    Specify input file and directory paths. <br><br>\n    Sample spectra: Path to raw spectra file. <br>   \n    Parameter: Path to SearchGUI parameter file. <br>\n    Sample data: Path to directory that contains sample raw spectra files. <br>\n    Database: Path to directory that contains the reference database. <br>\n    Peptide Shaker: Path to PeptideShaker binary (.jar). <br>\n    Search GUI (folder): Path to SearchGUI binary (.jar). <br><br>\n    The following paths are part of the recommended project structure for Snakemake workflows. Find out more about\n    reproducible Snakemake workflows\n    <a href=\"https://snakemake.readthedocs.io/en/stable/snakefiles/deployment.html\">here</a>. <br>\n    Resources: Relative path to resources folder <br>\n    Results: Relative path to results folder <br>\n    TaxID mapping: Relative path to folder that contains mapped taxIDs. <br> <br>\n    </details>\n    <details> <summary>Search panel <br> </summary> \n    Choose a search engine that SearchGUI is using and the desired FDR levels. <br><br>\n    </details>\n    <details> <summary>PepGM panel <br></summary>\n    Grid search: Choose increments for alpha, beta and prior that are to be included in the grid search to tune\n    graphical model parameters. Do not put a comma between values. <br>\n    Results plotting: Number of taxa in the final strain identification barplot. <br><br> \n    </details>\n    <details> <summary>Config file panel <br> </summary>    \n    Provide your NCBI API mail and key.\n    </details> \n### Using the graphical user interface\nThe graphical user interface (GUI) is developed to run Snakemake workflows without modifying \nthe configuration file manually in a text editor. <br>\nYou can write a config file from scratch or edit an existing config file.\nWhen modifying the config file in between runs, make sure to press the Write button before running.\n<br> \nPepGM can also be run from the command line. To run the snakemake workflow, \nyou need to be in your PepGM repository and have the Snakemake conda environment activated. \nRun the following command \n```sh\n  snakemake --use-conda --conda-frontend conda --cores <n_cores> \n  ```\nWhere `n_cores` is the number of cores you want snakemake to use. \n<p align=\"right\">(<a href=\"#top\">back to top</a>)</p> \nAll PepGM output files are saved into the results folder and include the following: <br> \n## Toy example\nWe have provided a toy example (<a href=\"https://www.ebi.ac.uk/pride/archive/projects/PXD014913\">Cowpox virus Brighton Red</a>) to ease the first steps with PepGM. You will find a reduced \nviral reference database only containing peptides from cowpow and cowpox-related strains,\na SearchGUI parameter file and the host and cRAP peptide sequence database in `/resources`. The cowpox MS2\nspectra can be downloaded \n<a href=\"https://ftp.pride.ebi.ac.uk/pride/data/archive/2020/05/PXD014913/CPXV-0,1MOI-supernatant-HEp-24h.mgf\">here</a> (PRIDE ftp archive).\nDownload the spectra file to `/resources/SampleData/`\n```\nwget https://ftp.pride.ebi.ac.uk/pride/data/archive/2020/05/PXD014913/CPXV-0,1MOI-supernatant-HEp-24h.mgf\nmv CPXV-0,1MOI-supernatant-HEp-24h.mgf spectrafile_PXD014913_cowpox_minimal_example.mgf\n    \n```\n \nIf you have a suggestion that would make this better, please fork the repo and create a pull request. You can also simply open an issue with the tag \"enhancement\".\nDon't forget to give the project a star! Thanks again! \n1. Fork the Project\n2. Create your Feature Branch (`git checkout -b feature/AmazingFeature`)\n3. Commit your Changes (`git commit -m 'Add some AmazingFeature'`)\n4. Push to the Branch (`git push origin feature/AmazingFeature`)\n5. Open a Pull Request \n\n[contributors-shield]: https://img.shields.io/github/contributors/BAMeScience/repo_name.svg?style=for-the-badge\n[contributors-url]: https://github.com/BAMeScience/repo_name/graphs/contributors\n[forks-shield]: https://img.shields.io/github/forks/BAMeScience/repo_name.svg?style=for-the-badge\n[forks-url]: https://github.com/BAMeScience/repo_name/network/members\n[stars-shield]: https://img.shields.io/github/stars/BAMeScience/repo_name.svg?style=for-the-badge\n[stars-url]: https://github.com/BAMeScience/repo_name/stargazers\n[issues-shield]: https://img.shields.io/github/issues/BAMeScience/repo_name.svg?style=for-the-badge\n[issues-url]: https://github.com/BAMeScience/repo_name/issues\n[license-shield]: https://img.shields.io/github/license/BAMeScience/repo_name.svg?style=for-the-badge\n[license-url]: https://github.com/BAMeScience/repo_name/blob/master/LICENSE.txt\n[linkedin-shield]: https://img.shields.io/badge/-LinkedIn-black.svg?style=for-the-badge&logo=linkedin&colorB=555\n[linkedin-url]: https://linkedin.com/in/linkedin_username\n[product-screenshot]: images/screenshot.png\n[Next.js]: https://img.shields.io/badge/next.js-000000?style=for-the-badge&logo=nextdotjs&logoColor=white\n[Next-url]: https://nextjs.org/\n[React.js]: https://img.shields.io/badge/React-20232A?style=for-the-badge&logo=react&logoColor=61DAFB\n[React-url]: https://reactjs.org/\n[Vue.js]: https://img.shields.io/badge/Vue.js-35495E?style=for-the-badge&logo=vuedotjs&logoColor=4FC08D\n[Vue-url]: https://vuejs.org/\n[Angular.io]: https://img.shields.io/badge/Angular-DD0031?style=for-the-badge&logo=angular&logoColor=white\n[Angular-url]: https://angular.io/\n[Svelte.dev]: https://img.shields.io/badge/Svelte-4A4A55?style=for-the-badge&logo=svelte&logoColor=FF3E00\n[Svelte-url]: https://svelte.dev/\n[Laravel.com]: https://img.shields.io/badge/Laravel-FF2D20?style=for-the-badge&logo=laravel&logoColor=white\n[Laravel-url]: https://laravel.com\n[Bootstrap.com]: https://img.shields.io/badge/Bootstrap-563D7C?style=for-the-badge&logo=bootstrap&logoColor=white\n[Bootstrap-url]: https://getbootstrap.com\n[JQuery.com]: https://img.shields.io/badge/jQuery-0769AD?style=for-the-badge&logo=jquery&logoColor=white\n[JQuery-url]: https://jquery.com  \n"
      },
      "source": "https://raw.githubusercontent.com/BAMeScience/PepGM/master/readme.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8135199028578288,
      "result": {
        "original_header": "PepGM",
        "type": "Text_excerpt",
        "value": "We suggest to create a new directory `bin` inside your PepGM \nworking directory and save the SearchGUI and PeptideShaker binaries there:\n```shell\nmkdir ./bin && cd bin\nwget https://genesis.ugent.be/maven2/eu/isas/searchgui/SearchGUI/4.1.23/SearchGUI-4.1.23-mac_and_linux.tar.gz\nwget https://genesis.ugent.be/maven2/eu/isas/peptideshaker/PeptideShaker/2.2.16/PeptideShaker-2.2.16.zip\ntar -xvf SearchGUI-4.1.23-mac_and_linux.tar.gz && unzip PeptideShaker-2.2.16.zip\n```\nYou can delete the .zip files afterwards:\nBASH5*\n<p align=\"right\">(<a href=\"#top\">back to top</a>)</p>\n \n## Toy example\nWe have provided a toy example (<a href=\"https://www.ebi.ac.uk/pride/archive/projects/PXD014913\">Cowpox virus Brighton Red</a>) to ease the first steps with PepGM. You will find a reduced \nviral reference database only containing peptides from cowpow and cowpox-related strains,\na SearchGUI parameter file and the host and cRAP peptide sequence database in `/resources`. The cowpox MS2\nspectra can be downloaded \n<a href=\"https://ftp.pride.ebi.ac.uk/pride/data/archive/2020/05/PXD014913/CPXV-0,1MOI-supernatant-HEp-24h.mgf\">here</a> (PRIDE ftp archive).\nDownload the spectra file to `/resources/SampleData/`\n```\nwget https://ftp.pride.ebi.ac.uk/pride/data/archive/2020/05/PXD014913/CPXV-0,1MOI-supernatant-HEp-24h.mgf\nmv CPXV-0,1MOI-supernatant-HEp-24h.mgf spectrafile_PXD014913_cowpox_minimal_example.mgf\n    \n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/BAMeScience/PepGM/master/readme.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/BAMeScience/PepGM/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/BAMeScience/PepGM/master/LICENSE.md",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BAMeScience/PepGM/master/images/logo.png"
      },
      "source": "https://raw.githubusercontent.com/BAMeScience/PepGM/master/readme.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PepGM"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "BAMeScience"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 98853,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BAMeScience/PepGM/master/readme.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://snakemake.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/BAMeScience/PepGM/master/readme.md",
      "technique": "regular_expression"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "tanjaholstein",
          "type": "User"
        },
        "date_created": "2022-12-09T15:51:37Z",
        "date_published": "2022-12-14T13:16:22Z",
        "description": "This version comes with the ability to taxonomically analyze viral proteome samples with strain level resolution and statistically computed confidence scores.",
        "html_url": "https://github.com/BAMeScience/PepGM/releases/tag/0.1.0",
        "name": "Initial release",
        "release_id": 86025030,
        "tag": "0.1.0",
        "tarball_url": "https://api.github.com/repos/BAMeScience/PepGM/tarball/0.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/BAMeScience/PepGM/releases/86025030",
        "value": "https://api.github.com/repos/BAMeScience/PepGM/releases/86025030",
        "zipball_url": "https://api.github.com/repos/BAMeScience/PepGM/zipball/0.1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 01:17:15",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "workflows": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BAMeScience/PepGM/master/workflow/Snakefile"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BAMeScience/PepGM/master/workflow/rules/filterHostCrap.smk"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BAMeScience/PepGM/master/workflow/rules/buildDatabase.smk"
      },
      "technique": "file_exploration"
    }
  ]
}