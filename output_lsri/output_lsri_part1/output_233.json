{
  "application_domain": [
    {
      "confidence": 0.8745122613874333,
      "result": {
        "type": "String",
        "value": "Semantic web"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Reference database",
        "type": "Text_excerpt",
        "value": " - CARD: https://card.mcmaster.ca (version 3.1.0)\n - MobileOG: https://github.com/clb21565/mobileOG-db (version 01/22/2022)\n - MetaCompare: doi.org/10.1093/femsec/fiy079 (version 11/06/2018)\n - Parnanen et al. MGE Database: https://doi.org/10.1038/s41467-018-06393-w (version 08/16/2021)\n\nThe reference databases can be updated by the user to the current version.\n\nOnce obtained, the reference database can be processed by DIAMON using a command like below:\n<code>diamond makedb --in db_name.fasta -d db_name </code>\n\nThis will generate a `db_name.dmnd` file. The generated `.dmnd` files need to be put under:\n - driver_annotation/databases\n - driver_readmatching/diamond-annotation/bin/card \uff08for CARD databae)\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/xlxlxlx/ARGem/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/xlxlxlx/ARGem"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-09-14T06:20:27Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-11-30T10:33:12Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9508502241628003,
      "result": {
        "original_header": "About ARGem",
        "type": "Text_excerpt",
        "value": "ARGem is a pipeline specialized for ARG analysis and is completely developed from the initial DNA short reads to the final visualization of results. It was designed for modest numbers of samples processed in one day and for affordable computational components, though the throughput could be easily increased through cloud resources. One feature of the ARGem pipeline is the essential use of project metadata provided by project creators to enable analysis of data across samples and projects.  \nARGem was built by research groups from Virginia Tech. This project is funded by USDA, grant number 2017-68003-26498. \n"
      },
      "source": "https://raw.githubusercontent.com/xlxlxlx/ARGem/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9632640907242638,
      "result": {
        "original_header": "Acknowledge",
        "type": "Text_excerpt",
        "value": "CARD_classification_id.csv for co-occurrence network analysis is obtained from [CARD (Comprehensive Antibiotic Resistance Database)](https://card.mcmaster.ca/) and can be updated by the user to the current version.\n \n"
      },
      "source": "https://raw.githubusercontent.com/xlxlxlx/ARGem/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/xlxlxlx/ARGem/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/xlxlxlx/ARGem/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "xlxlxlx/ARGem"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "About ARGem"
      },
      "source": "https://raw.githubusercontent.com/xlxlxlx/ARGem/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/xlxlxlx/ARGem/main/runscheduler.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Install the pipeline",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "- Download the entire directory of the pipeline\n- Install dependencies in Python    \n  Go to the pipeline's directory in terminal and type the following command:    \n  `pip install -r requirements_w_versions.txt`    \n- Install other listed prequisite (with URL links provided)\n- Create MySQL tables for the pipeline using the following command:   \n  `mysql -u username -p database_name < create_tables.sql`\n"
      },
      "source": "https://raw.githubusercontent.com/xlxlxlx/ARGem/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9999999999792522,
      "result": {
        "original_header": "Prequisite",
        "type": "Text_excerpt",
        "value": " - NCBI SRA toolkit: https://hpc.nih.gov/apps/sratoolkit.html\n - Python 3: https://www.python.org/\n - MySQL >= 15.1: https://www.mysql.com/\n - DIAMOND >= 0.9.12: https://github.com/bbuchfink/diamond\n - BLAST >= 2.9.0: https://blast.ncbi.nlm.nih.gov/doc/blast-help/downloadblastdata.html\n \n"
      },
      "source": "https://raw.githubusercontent.com/xlxlxlx/ARGem/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8375482057658656,
      "result": {
        "original_header": "Python libraries",
        "type": "Text_excerpt",
        "value": " - luigi >= 3.0\n - pandas >= 0.25\n - numpy >= 1.17\n - PyMySQL >= 0.9\n - xlrd >= 1.2.0\n \n"
      },
      "source": "https://raw.githubusercontent.com/xlxlxlx/ARGem/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999999981871213,
      "result": {
        "original_header": "Files and folders",
        "type": "Text_excerpt",
        "value": "- driver_retrieval:     folder w/ SRA retrieval driver\n- driver_readmatching:  folder w/ short read matching driver\n- driver_annotation:    folder w/ annotation driver\n- driver_assembly:      folder w/ assembly driver\n- driver_analysis:      folder w/ analysis driver\n- userprojects:         projects (run w/ runscheduler.sh) stored here\n- README.txt:           this file\n- runscheduler.sh:      script to run the scheduler\n- scheduler.py:         scheduler script\n \n"
      },
      "source": "https://raw.githubusercontent.com/xlxlxlx/ARGem/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.9188128202865911,
      "result": {
        "original_header": "Files and folders",
        "type": "Text_excerpt",
        "value": "- driver_retrieval:     folder w/ SRA retrieval driver\n- driver_readmatching:  folder w/ short read matching driver\n- driver_annotation:    folder w/ annotation driver\n- driver_assembly:      folder w/ assembly driver\n- driver_analysis:      folder w/ analysis driver\n- userprojects:         projects (run w/ runscheduler.sh) stored here\n- README.txt:           this file\n- runscheduler.sh:      script to run the scheduler\n- scheduler.py:         scheduler script\n \n"
      },
      "source": "https://raw.githubusercontent.com/xlxlxlx/ARGem/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/xlxlxlx/ARGem/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2023 xlxlxlx\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/xlxlxlx/ARGem/main/LICENSE.md",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ARGem"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "xlxlxlx"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 157919,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 4782,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 420,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/xlxlxlx/ARGem/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Run the pipeline",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "- To run the pipeline, go to the pipeline's directory in terminal and type the following command:    \n  `./runscheduler.sh <metadata file> <project ID> <user ID> <MGE database>`    \nExample command: \n  `./runscheduler.sh sample_metadata_upload_2.xlsx myProject myUser metacompare`\n- The pipeline will either start immediately (if no other projects in the queue) or be added to the queue\n- Once a project is done processing, find the project under /userprojects/. The results of each stage should be in their subdirectories.\n"
      },
      "source": "https://raw.githubusercontent.com/xlxlxlx/ARGem/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-03 23:57:37",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Optional configurations",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Two databases can be added to the shortread matching step.\n - DeepARG (an ARG reference database): https://doi.org/10.1186/s40168-018-0401-z\n - GreenGenes (a 16S rRNA gene database): https://greengenes.secondgenome.com/         \nThe database files can be put under:\n - driver_readmatching/diamond-annotation/bin/deeparg \uff08for DeepARG database)\n - driver_readmatching/diamond-annotation/bin/gg13 \uff08for GreenGenes database)\n\nIf the paths to the tools (SRA Toolkit, BLAST, and DIAMOND) need to be changed, change the corresponding variables in:\n - driver_retrieval/sra_retriever.py\n - driver_assembly/megahit_driver.py\n - driver_annotation/blast_driver.py\n - driver_annotation/diamond_driver.py\n - driver_annotation/annotation_driver.py\n\nThe configurations of the short read matching step can be changed according to the README in `driver_readmatching/diamond-annotation/`\n"
      },
      "source": "https://raw.githubusercontent.com/xlxlxlx/ARGem/main/README.md",
      "technique": "header_analysis"
    }
  ]
}