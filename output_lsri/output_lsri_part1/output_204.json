{
  "application_domain": [
    {
      "confidence": 0.9525090262268254,
      "result": {
        "type": "String",
        "value": "Graphs"
      },
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9648511660568204,
      "result": {
        "type": "String",
        "value": "Semantic web"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "ReactomeGraph",
        "parent_header": [
          "Stargate-X",
          "API Reference"
        ],
        "type": "Text_excerpt",
        "value": "Represents a graph for a certain species.\n\n| PROPERTY             | TYPE                    | DESCRIPTION                                                |\n| -------------------- | ----------------------- | ---------------------------------------------------------- |\n| `event_nodes`        | `Set[str]`              | Set containing all the event nodes identifiers.            |\n| `entity_nodes`       | `Set[str]`              | Set containing all the entity nodes identifiers.           |\n| `compartments`       | `Iterable[Compartment]` | List of all cellular compartments for this graph instance. |\n| `pathways`           | `Iterable[Pathway]`     | List of all pathways for this graph instance.              |\n| `top_level_pathways` | `Iterable[Pathway]`     | List of all top level pathways for this graph instance.    |\n\n---\n\n| METHOD                     | ARGUMENTS                                                       | RETURNS       | DESCRIPTION                                                                                          |\n| -------------------------- | --------------------------------------------------------------- | ------------- | ---------------------------------------------------------------------------------------------------- |\n| `get_pathway_subgraph`     | pathway: `str` - pathway identifier                             | ReactomeGraph | Generate subgraph using nodes from the given pathway.                                                |\n| `get_compartment_subgraph` | compartment: `str` - compartment GO identifier (eg: GO:0005886) | ReactomeGraph | Generate subgraph using nodes from the given compartment.                                            |\n| `load`                     | species: `Union[Species, str]` - species name or enumeration    | ReactomeGraph | Factory method, builds a Reactome graph from a pickled python object.                                |\n| `build`                    | species: `Union[Species, str]` - species name or enumeration    | ReactomeGraph | Factory method, builds a Reactome graph. Requires a working Neo4j instance containing Reactome data. |\n"
      },
      "source": "https://raw.githubusercontent.com/marinoandrea/stargate-x/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Species",
        "parent_header": [
          "Stargate-X",
          "API Reference"
        ],
        "type": "Text_excerpt",
        "value": "Enumeration with valid Reactome species ([source](https://github.com/marinoandrea/reactome-graph/blob/master/stargate_x/species.py)).\n"
      },
      "source": "https://raw.githubusercontent.com/marinoandrea/stargate-x/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Pathway",
        "parent_header": [
          "Stargate-X",
          "API Reference"
        ],
        "type": "Text_excerpt",
        "value": "Dataclass containing basic pathway information.\n\n| PROPERTY       | TYPE   | DESCRIPTION                                 |\n| -------------- | ------ | ------------------------------------------- |\n| `id`           | `str`  | Reactome pathway identifier.                |\n| `name`         | `str`  | Reactome display name.                      |\n| `is_top_level` | `bool` | Whether the pathway is a top level pathway. |\n| `in_disease`   | `bool` | Whether the pathway is part of a disease.   |\n"
      },
      "source": "https://raw.githubusercontent.com/marinoandrea/stargate-x/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Compartment",
        "parent_header": [
          "Stargate-X",
          "API Reference"
        ],
        "type": "Text_excerpt",
        "value": "Dataclass containing basic cellulare compartment information.\n\n| PROPERTY | TYPE  | DESCRIPTION                                      |\n| -------- | ----- | ------------------------------------------------ |\n| `id`     | `str` | GO compartment identifier (starting with 'GO:'). |\n| `name`   | `str` | Reactome display name.                           |\n"
      },
      "source": "https://raw.githubusercontent.com/marinoandrea/stargate-x/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/marinoandrea/stargate-x"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-07-22T22:02:36Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-12-07T13:18:15Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Python implementation of a bipartite directed multigraph extracted from the Reactome biological pathway database."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9101127967897849,
      "result": {
        "original_header": "Stargate-X",
        "type": "Text_excerpt",
        "value": "The package is a python implementation of a bipartite directed multigraph extracted from the Reactome database. Its underlying implementation uses `networkx`. \nThe graph represents **reactions** and **physical entities** as nodes. Edges are instead classified into 5 categories: \nThe package provides a wrapper for the `networkx.MultiDiGraph` class: the `ReactomeGraph`. Each graph instance is associated with a certain species and can either be: \n> NOTE: the user may prefer the latter option in order to control which specific version of Reactome\u2019s database is used to generate the graphs. The latest supported version for this package will be periodically updated. \nWhen building from a Neo4j instance, the package extracts data from the [Reactome graph database](https://reactome.org/download-data).\n \n"
      },
      "source": "https://raw.githubusercontent.com/marinoandrea/stargate-x/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9750689672084182,
      "result": {
        "original_header": "Authors",
        "type": "Text_excerpt",
        "value": "See also the list of [contributors](https://github.com/marinoandrea/reactome-graph/contributors) who participated in this project.\n \n"
      },
      "source": "https://raw.githubusercontent.com/marinoandrea/stargate-x/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/marinoandrea/stargate-x/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/marinoandrea/stargate-x/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "marinoandrea/stargate-x"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Stargate-X"
      },
      "source": "https://raw.githubusercontent.com/marinoandrea/stargate-x/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "identifier": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://zenodo.org/badge/latestdoi/281791887"
      },
      "source": "https://raw.githubusercontent.com/marinoandrea/stargate-x/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "Stargate-X"
        ],
        "type": "Text_excerpt",
        "value": "```bash\ngit clone https://github.com/marinoandrea/stargate-x.git\ncd stargate-x\npip install .\n```\n"
      },
      "source": "https://raw.githubusercontent.com/marinoandrea/stargate-x/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9329543604517258,
      "result": {
        "original_header": "Stargate-X",
        "type": "Text_excerpt",
        "value": "- loaded from pre-built binaries shipped alongside the package\n- built directly from a Neo4j instance running on the user\u2019s machine \n> NOTE: the user may prefer the latter option in order to control which specific version of Reactome\u2019s database is used to generate the graphs. The latest supported version for this package will be periodically updated. \nWhen building from a Neo4j instance, the package extracts data from the [Reactome graph database](https://reactome.org/download-data).\n \n"
      },
      "source": "https://raw.githubusercontent.com/marinoandrea/stargate-x/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/marinoandrea/stargate-x/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "biology, bipartite, graph, pathway, pathways, reactome, reactome-database, reactome-graph"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "stargate-x"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "marinoandrea"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 16033,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Cypher",
        "size": 2631,
        "type": "Programming_language",
        "value": "Cypher"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/marinoandrea/stargate-x/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "marinoandrea",
          "type": "User"
        },
        "date_created": "2022-12-05T17:44:44Z",
        "date_published": "2022-12-05T21:08:39Z",
        "html_url": "https://github.com/marinoandrea/stargate-x/releases/tag/1.1.0",
        "release_id": 85055484,
        "tag": "1.1.0",
        "tarball_url": "https://api.github.com/repos/marinoandrea/stargate-x/tarball/1.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/marinoandrea/stargate-x/releases/85055484",
        "value": "https://api.github.com/repos/marinoandrea/stargate-x/releases/85055484",
        "zipball_url": "https://api.github.com/repos/marinoandrea/stargate-x/zipball/1.1.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "marinoandrea",
          "type": "User"
        },
        "date_created": "2020-11-15T22:38:50Z",
        "date_published": "2022-12-05T17:39:57Z",
        "html_url": "https://github.com/marinoandrea/stargate-x/releases/tag/1.0.7",
        "release_id": 85024108,
        "tag": "1.0.7",
        "tarball_url": "https://api.github.com/repos/marinoandrea/stargate-x/tarball/1.0.7",
        "type": "Release",
        "url": "https://api.github.com/repos/marinoandrea/stargate-x/releases/85024108",
        "value": "https://api.github.com/repos/marinoandrea/stargate-x/releases/85024108",
        "zipball_url": "https://api.github.com/repos/marinoandrea/stargate-x/zipball/1.0.7"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-03 23:51:00",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "Stargate-X"
        ],
        "type": "Text_excerpt",
        "value": "In order to use the pre-built graphs, just call the `load` method passing the species as an argument:\n\n```python\nfrom stargate_x import ReactomeGraph, Species\n\nhsa_graph = ReactomeGraph.load('Homo sapiens')\n# or\nhsa_graph = ReactomeGraph.load(Species.HSA)\n```\n\nIn order to build a graph directly from Reactome's database, an active Neo4j instance is required.\nThe connection URI can be specified in the `options` (it defaults to `bolt://localhost:7687`):\n\n```python\nfrom stargate_x import ReactomeGraph, Species\n\nhsa_graph = ReactomeGraph.build('Homo sapiens', options={'neo4j_uri': 'bolt://<YOUR_HOST>:<YOUR_PORT>'})\n# or\nhsa_graph = ReactomeGraph.build(Species.HSA, options={'neo4j_uri': 'bolt://<YOUR_HOST>:<YOUR_PORT>'})\n\n```\n"
      },
      "source": "https://raw.githubusercontent.com/marinoandrea/stargate-x/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Examples",
        "parent_header": [
          "Stargate-X"
        ],
        "type": "Text_excerpt",
        "value": "Obtain a subgraph relative to a specific pathway:\n\n```python\nfrom stargate_x import ReactomeGraph\n\nhsa_graph = ReactomeGraph.load('Homo sapiens')\nsignal_transduction_subgraph = hsa_graph.get_pathway_subgraph('R-HSA-162582')\n```\n\nor to a specific cellular compartment:\n\n```python\nfrom stargate_x import ReactomeGraph\n\nhsa_graph = ReactomeGraph.load('Homo sapiens')\nplasma_membrane_subgraph = hsa_graph.get_compartment_subgraph('GO:0005886')\n```\n\nHere is an example where we obtain centrality measures for all nodes in a specific pathway:\n\n```python\nimport networkx as nx\n\nimport stargate_x as sx\n\nsignal_transduction_subgraph = sx.ReactomeGraph\\\n    .load(\"Homo sapiens\")\n    .get_pathway_subgraph(\"R-HSA-162582\")\n\n# calculate different centrality measures for every node in the subgraph\nlapl = sx.laplacian_centrality(signal_transduction_subgraph, deg_type=\"out_degree\")\nhidx = sx.h_index_centrality(signal_transduction_subgraph, deg_type=\"out_degree\")\nlevr = sx.leverage_centrality(signal_transduction_subgraph, deg_type=\"out_degree\")\n```\n\nHere is an example where we analyze the connectivity features of a single node in a specific compartment and pathway:\n\n```python\nimport networkx as nx\n\nimport stargate_x as sx\n\n# select the cytosol compartment subgraph in the nucleotides metabolism pathway\ncytosol_nucleotides_metabolism_subgraph = sx.ReactomeGraph\\\n    .load(\"Homo sapiens\")\\\n    .get_pathway_subgraph(\"R-HSA-15869\")\\\n    .get_compartment_subgraph(\"GO:0005829\")\n\n# find all nodes reachable from ATP using standard networkx functionalities\nreachable_nodes_from_atp = nx.descendants(cytosol_nucleotides_metabolism_subgraph, \"R-ALL-113592\")\n```\n\nHere is an example of how to obtain participating compounds given a reaction node:\n\n```python\nimport stargate_x as sx\n\nsignal_transduction_graph = sx.ReactomeGraph\\\n    .load(\"Homo sapiens\")\n    .get_pathway_subgraph(\"R-HSA-9709957\")\n\n# find all compounds participating in the Phosphorylation of complexed TSC2 by PKB\n# within the Signal Transduction top-level pathway\ncompounds = signal_transduction_graph.neighbors(\"R-HSA-165182\")\n```\n"
      },
      "source": "https://raw.githubusercontent.com/marinoandrea/stargate-x/master/README.md",
      "technique": "header_analysis"
    }
  ]
}