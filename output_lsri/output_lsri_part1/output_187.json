{
  "application_domain": [
    {
      "confidence": 0.8675944316114126,
      "result": {
        "type": "String",
        "value": "Graphs"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "References",
        "parent_header": [
          "`stabJGL` <img src=\"man/figures/stabJGLlogo.png\" align=\"right\" height=\"150\"/>"
        ],
        "type": "Text_excerpt",
        "value": "<div id=\"refs\" class=\"references csl-bib-body hanging-indent\">\n\n<div id=\"ref-danaher2014\" class=\"csl-entry\">\n\nDanaher, Patrick, Pei Wang, and Daniela M Witten. 2014. \u201cThe Joint\nGraphical Lasso for Inverse Covariance Estimation Across Multiple\nClasses.\u201d *Journal of the Royal Statistical Society: Series B\n(Statistical Methodology)* 76 (2): 373\u201397.\n\n</div>\n\n<div id=\"ref-foygel2010extended\" class=\"csl-entry\">\n\nFoygel, Rina, and Mathias Drton. 2010. \u201cExtended Bayesian Information\nCriteria for Gaussian Graphical Models.\u201d In *Advances in Neural\nInformation Processing Systems*, 604\u201312.\n\n</div>\n\n<div id=\"ref-huge\" class=\"csl-entry\">\n\nJiang, Haoming, Xinyu Fei, Han Liu, Kathryn Roeder, John Lafferty, Larry\nWasserman, Xingguo Li, and Tuo Zhao. 2020. *Huge: High-Dimensional\nUndirected Graph Estimation*. <https://CRAN.R-project.org/package=huge>.\n\n</div>\n\n<div id=\"ref-kolaczyk09\" class=\"csl-entry\">\n\nKolaczyk, Eric D. 2009. *Statistical Analysis of Network Data: Methods\nand Models*. Springer Science & Business Media.\n\n</div>\n\n<div id=\"ref-liu2010stability\" class=\"csl-entry\">\n\nLiu, Han, Kathryn Roeder, and Larry Wasserman. 2010. \u201cStability Approach\nto Regularization Selection (Stars) for High Dimensional Graphical\nModels.\u201d In *Advances in Neural Information Processing Systems*,\n1432\u201340.\n\n</div>\n\n</div>\n"
      },
      "source": "https://raw.githubusercontent.com/Camiling/stabJGL/main/README.Rmd",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Camiling/stabJGL"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-11-16T15:35:22Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-10-25T21:23:30Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9973695602090927,
      "result": {
        "original_header": "`stabJGL` <img src=\"man/figures/stabJGLlogo.png\" align=\"right\" height=\"150\"/>",
        "type": "Text_excerpt",
        "value": "The `stabJGL` package implements stabJGL for stable sparsity and\nsimilarity selection in joint network reconstruction of multiple graphs,\nin the setting of Gaussian graphical models. stabJGL performs penalty\nparameter selection in the joint graphical lasso of Danaher, Wang, and\nWitten (2014), selecting both the sparsity controlling and the\nbetween-graph similarity controlling penalty parameters. The objective\nis to borrow strength across similar classes to increase statistical\npower, while ensuring that the joint modelling may not decrease the\naccuracy of the resulting inferred graphs. The method takes a list of\ndata matrices for which separate graphs are to be inferred, and selects\nthe penalty parameters with a data-driven approach. The sparsity\ncontrolling parameter is selected based on graph stability (Liu, Roeder,\nand Wasserman (2010)), while the similarity controlling parameter is\nselected with a likelihood-based approach (Foygel and Drton (2010)).\n \n"
      },
      "source": "https://raw.githubusercontent.com/Camiling/stabJGL/main/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8003449975186017,
      "result": {
        "original_header": "Contribution",
        "type": "Text_excerpt",
        "value": "All feedback and suggestions are very welcome. If you have any questions\nor comments, feel free to open an issue\n[here](https://github.com/Camiling/stabJGL/issues).\n \n"
      },
      "source": "https://raw.githubusercontent.com/Camiling/stabJGL/main/README.Rmd",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Camiling/stabJGL/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Camiling/stabJGL/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Camiling/stabJGL"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "stabJGL "
      },
      "source": "https://raw.githubusercontent.com/Camiling/stabJGL/main/README.Rmd",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Camiling/stabJGL/main/man/figures/README-unnamed-chunk-5-1.png"
      },
      "source": "https://raw.githubusercontent.com/Camiling/stabJGL/main/README.Rmd",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "`stabJGL` <img src=\"man/figures/stabJGLlogo.png\" align=\"right\" height=\"150\"/>"
        ],
        "type": "Text_excerpt",
        "value": "To install the current development version, use\n\n``` r\nremotes::install_github(\"camiling/stabJGL\")\n```\n\nIf you would like to install all packages of the models we currently\nsupport, use\n\n``` r\nremotes::install_github(\"camiling/stabJGL\", dependencies = TRUE)\n```\n\nIf you would also like to build and view the vignette locally, use\n\n``` r\nremotes::install_github(\"camiling/stabJGL\", dependencies = TRUE, build_vignettes = TRUE)\nbrowseVignettes(\"stabJGL\")\n```\n"
      },
      "source": "https://raw.githubusercontent.com/Camiling/stabJGL/main/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9997399915996001,
      "result": {
        "type": "Text_excerpt",
        "value": "[![Lifecycle:\nexperimental](https://img.shields.io/badge/lifecycle-experimental-orange.svg)](https://www.tidyverse.org/lifecycle/#experimental) \n[![License:\nMIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT) \n"
      },
      "source": "https://raw.githubusercontent.com/Camiling/stabJGL/main/README.Rmd",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Camiling/stabJGL/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "YEAR: 2020\nCOPYRIGHT HOLDER: Camilla Lingjaerde"
      },
      "source": "https://raw.githubusercontent.com/Camiling/stabJGL/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Camiling/stabJGL/main/man/figures/stabJGLlogo.png"
      },
      "source": "https://raw.githubusercontent.com/Camiling/stabJGL/main/README.Rmd",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "stabJGL"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "Camiling"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 61895,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "TeX",
        "size": 5865,
        "type": "Programming_language",
        "value": "TeX"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Camiling/stabJGL/main/README.Rmd"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Camiling/stabJGL/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-03 23:43:31",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Example",
        "parent_header": [
          "`stabJGL` <img src=\"man/figures/stabJGLlogo.png\" align=\"right\" height=\"150\"/>"
        ],
        "type": "Text_excerpt",
        "value": "The main function `stabJGL` takes a list of $K$ data matrices, each of\ndimension $n_k \\times p$ where $n_k$ is the sample size of data set $k$,\nfor which separate graphs are to be inferred. The function selects the\nsparsity controlling penalty parameter $\\lambda_1$ and similarity\ncontrolling penalty parameter $\\lambda_2$, and uses the joint graphical\nlasso (Danaher, Wang, and Witten (2014)) to estimate the inverse\ncovariance matrices (precision matrix) of each class.\n\nThe following examples show how `stabJGL` selects how strongly\nsimilarity should be enforced for a set of $K=2$ graph, as well as\ndetermine the sparsity level, and returns the resulting precision matrix\nestimates. One example with $K=2$ data sets drawn from the same\ndistribution, and one with $K=2$ data sets drawn from completely\nunrelated distributions, is shown. In the fist case, $\\lambda_2$ is\nselected to be larger than zero, hence encouraging similarity. This\nresults in high precision considering the high dimensionality of the\nproblem. In the latter case, $\\lambda_2$ is selected to be exactly zero\nand no similarity between the two graphs is encouraged.\n\nThe data is generated using the R package `huge` (Jiang et al. (2020)),\nas it includes functionality for generating data from a Gaussian\ngraphical model. The networks we generate are *scale-free*, which is a\nknown trait in many real-life networks such as genomic networks\n(Kolaczyk (2009)).\n\n``` r\n#  example 1: scale-free data where the data sets are from the same distribution\nset.seed(123)\nn1 <- 100 # let there be different number of samples in each data set\nn2 <- 80\np <- 20\ndat <- huge::huge.generator(n = n1, d = p, graph = \"scale-free\")\n#> Generating data from the multivariate normal distribution with the scale-free graph structure....done.\ndat$sparsity # true sparsity level\n#> [1] 0.1\nprec.mat <- dat$omega # the true precision matrix of both data sets\nx1 <- MASS::mvrnorm(n1, mu = rep(0, p), Sigma = dat$sigma) # data set 1\nx2 <- MASS::mvrnorm(n2, mu = rep(0, p), Sigma = dat$sigma) # data set 2\nY <- list(x1, x2)\nres <- stabJGL(Y, lambda2.max = 0.3)\n#> Tuning lambda1... \n#>  Tuning lambda2...\n#> Tuning lambda2:  100  % done\nadj.mat1 <- res$opt.fit[[1]] != 0 # the estimated adjacency matrix of graph 1\nadj.mat2 <- res$opt.fit[[2]] != 0 # the estimated adjacency matrix of graph 2\nres$opt.lambda1 # the optimal selected value of lambda1\n#> [1] 0.2705263\nres$opt.lambda2 # lambda2 is chosen quite large\n#> [1] 0.09473684\nres$opt.sparsities # the sparsities of the estimated precision matrices\n#> [1] 0.07894737 0.08947368\n# Look at precision of inferred graphs\nprecision(abs(prec.mat) > 1e-7, res$opt.fit[[1]] != 0)\n#> [1] 0.9333333\nprecision(abs(prec.mat) > 1e-7, res$opt.fit[[2]] != 0)\n#> [1] 0.8235294\n\n# example 2: scale-free data where where the data sets are from completely unrelated distributions\nset.seed(123)\nn1 <- 100\nn2 <- 80\np <- 20\ndat1 <- huge::huge.generator(n = n1, d = p, graph = \"scale-free\")\n#> Generating data from the multivariate normal distribution with the scale-free graph structure....done.\ndat2 <- huge::huge.generator(n = n2, d = p, graph = \"scale-free\") # second graph is completely unrelated\n#> Generating data from the multivariate normal distribution with the scale-free graph structure....done.\ndat1$sparsity # true sparsity level for graph 1\n#> [1] 0.1\ndat2$sparsity # true sparsity level for graph 2\n#> [1] 0.1\nprec.mat1 <- dat1$omega # the true precision matrix of data set 1\nprec.mat2 <- dat2$omega # the true precision matrix of data set 2\nx1 <- MASS::mvrnorm(n1, mu = rep(0, p), Sigma = dat1$sigma)\nx2 <- MASS::mvrnorm(n2, mu = rep(0, p), Sigma = dat2$sigma)\nY <- list(x1, x2)\nres <- stabJGL(Y, scale = T, lambda2.max = 0.3)\n#> Tuning lambda1... \n#>  Tuning lambda2...\n#> Tuning lambda2:  100  % done\nadj.mat1 <- res$opt.fit[[1]] != 0 # the estimated adjacency matrix of graph 1\nadj.mat2 <- res$opt.fit[[2]] != 0 # the estimated adjacency matrix of graph 2\nres$opt.lambda1 # the optimal selected value of lambda1\n#> [1] 0.2705263\nres$opt.lambda2 # lambda2 is chosen very small\n#> [1] 0.01578947\nres$opt.sparsities # the sparsities of the estimated precision matrices\n#> [1] 0.06842105 0.12631579\n# lower precision as no information could be borrowed across classes\nprecision(abs(prec.mat1) > 1e-7, adj.mat1 != 0)\n#> [1] 1\nprecision(abs(prec.mat2) > 1e-7, adj.mat2 != 0)\n#> [1] 0.7083333\n```\n\nThe resulting stabJGL graphs can be visualised with functions from the\n`network` and `ggnet2` libraries.\n\n``` r\nset.seed(1234)\nnet1 <- network::network(adj.mat1)\nnet2 <- network::network(adj.mat2)\ng1 <- GGally::ggnet2(net1, alpha = 0.9, color = \"darkorange\")\n#> Registered S3 method overwritten by 'GGally':\n#>   method from   \n#>   +.gg   ggplot2\ng2 <- GGally::ggnet2(net2, alpha = 0.9, color = \"darkorange\")\nggpubr::ggarrange(g1, g2, ncol = 2, nrow = 1)\n```\n\n<img src=\"man/figures/README-unnamed-chunk-5-1.png\" width=\"60%\" style=\"display: block; margin: auto;\" />\n"
      },
      "source": "https://raw.githubusercontent.com/Camiling/stabJGL/main/README.Rmd",
      "technique": "header_analysis"
    }
  ]
}