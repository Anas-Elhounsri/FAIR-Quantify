{
  "application_domain": [
    {
      "confidence": 14.02,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ericcombiolab/LRTK"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-04-19T02:52:20Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-03-07T17:45:59Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A unified and versatile toolkit for analyzing Linked-Read sequencing data"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9993151056449562,
      "result": {
        "original_header": "Overview",
        "type": "Text_excerpt",
        "value": "Linked-Read ToolKit (LRTK), is a unified and versatile toolkit to process human and metagenomic linked-read sequencing data from different linked-read sequencing technologies, including 10x Genomics, single-tube long fragment read (stLFR) and transposase enzyme linked long-read sequencing (TELL-Seq). LRTK provides functions to  simulate linked-read sequencing data, perform barcode correction, barcode-aware alignment and metagenome assembly, reconstruction of virtual DNA fragments, and  barcode-assisted genomic variant detection and phasing. LRTK also has the ability to perform automatic analysis from raw sequencing data to downstream analysis and support the analysis of multiple samples in parallel. In addition, LRTK could produce publication-ready visualizations and generate reproducible reports, summarizing the key parameters at multiple checkpoints such as library preparation.  \n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ericcombiolab/LRTK/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/script/long_fragment/insert_size.ipynb"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/script/long_fragment/insert_size.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ericcombiolab/LRTK/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ericcombiolab/LRTK"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "LRTK: A platform agnostic toolkit for linked-read analysis of both human genomes and metagenomes"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/script/Pangaea/bin/low_assembly.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/script/Pangaea/bin/merge_asm.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/script/Pangaea/bin/bin_assembly.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/script/Pangaea/bin/low_abd_reads.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/script/Pangaea/bin/Lathe/scripts/kmer.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/script/EMA/bwa/bwakit/typeHLA.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/demo_report/img/workflow.png"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Bioconda install",
        "parent_header": [
          "Install using Bioconda"
        ],
        "type": "Text_excerpt",
        "value": "(Please ensure\u00a0channels\u00a0are properly setup for bioconda before installing)\n```\nconda install -c bioconda lrtk=2.0\nlrtk -h\n```\nUsers could also install LRTK using the environment.yaml. \n```\nconda env create -f environment.yaml\nconda activate linkedreads\npython /path/to/lrtk.py -h\n```"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ericcombiolab/LRTK/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2023 CicyYeung\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "LRTK"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "ericcombiolab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 1130083,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 389198,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 303934,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 156105,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 153939,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "JavaScript",
        "size": 45831,
        "type": "Programming_language",
        "value": "JavaScript"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Roff",
        "size": 27406,
        "type": "Programming_language",
        "value": "Roff"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 23378,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CSS",
        "size": 21568,
        "type": "Programming_language",
        "value": "CSS"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 12556,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 9775,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 6342,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Ruby",
        "size": 576,
        "type": "Programming_language",
        "value": "Ruby"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependencies",
        "parent_header": [
          "Install using Bioconda"
        ],
        "type": "Text_excerpt",
        "value": "LRTK is mainly implemented by python3 and requires several python packages, such as numpy, pandas, pysam, scipy, sklrean, snakemake, torch, and sortedcontainers. Most of them could be installed using conda automatically, including Aquila (Zhou et al., 2021), bcftools (Danecek et al., 2021), BWA (Li and Durbin et al., 2009), fastp (Chen et al., 2018), FreeBayes (Garrison and Marth et al., 2012), HapCUT2 (Edge et al., 2017), inStrain (Olm M R et al., 2021),  SAMtools (Li et al., 2009). spades (<=3.15), jellyfish(2.3.0), WhatsHap (Patterson M et al., 2015). \nFurthermore, <a href=\"https://github.com/WGLab/LinkedSV\"> LinkedSV </a> (Fang et al., 2019),<a href=\"https://github.com/ericcombiolab/Pangaea\"> Pangaea </a> (Zhang Z et al., 2022), and <a href=\"https://github.com/BilkentCompGen/valor\"> VALOR2 </a> (Karao\u01e7lano\u01e7lu et al., 2020) that are not supported by conda are needed to be installed by users. \n\nWe have tested LRTK with Aquila==1.0.0, bcftools==1.8, bwa==0.7.17, fastp==0.23.2, freebayes==0.9.21, gatk==3.6, hapcut2==1.3.3, samtools==1.6, VALOR==2.1.5, whatshap==1.2.1.   \n\n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "function 1: linked-read simulation",
        "parent_header": [
          "Running examples",
          "Commands for raw read and variant analysis"
        ],
        "type": "Text_excerpt",
        "value": "```\nlrtk MKFQ -CF \"/path_to/diploid_config\" -IT stLFR\n```\n* #### Required parameters\n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-CF/--config_file:",
        "parent_header": [
          "Running examples",
          "Commands for raw read and variant analysis",
          "function 1: linked-read simulation"
        ],
        "type": "Text_excerpt",
        "value": "The path to the directory containing config_files for linked-read simulation. Example data was stored on the aforementioned Google Drive."
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-IT/--input_type:",
        "parent_header": [
          "Running examples",
          "Commands for raw read and variant analysis",
          "function 2: barcode correction"
        ],
        "type": "Text_excerpt",
        "value": "Sequencing platform. Users can choose from 10x or stLFR.\n\nWe have prepared Two examples of config file (config1.txt and config2.txt; config1.txt is illustrated here) in the diploid_config folder.\n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "function 2: barcode correction",
        "parent_header": [
          "Running examples",
          "Commands for raw read and variant analysis"
        ],
        "type": "Text_excerpt",
        "value": "```\nlrtk FQCONVER -I1 /path_to/IN_FQ1 -I2 /path_to/INF_Q2 -IT 10x -O1 /path_to/OUT_FQ1 -O2 /path_to/OUT_FQ2 -B /path_to/BARCODE_WHITELIST -T 4 \n```\n* #### Required parameters\n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-I1/--input_fastq1:",
        "parent_header": [
          "Running examples",
          "Commands for raw read and variant analysis",
          "function 2: barcode correction"
        ],
        "type": "Text_excerpt",
        "value": "Input file (uncompressed FASTQ format) for the first read of paired-end linked-read sequencing data.\n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-I2/--input_fastq2:",
        "parent_header": [
          "Running examples",
          "Commands for raw read and variant analysis",
          "function 2: barcode correction"
        ],
        "type": "Text_excerpt",
        "value": "Input file (uncompressed FASTQ format) for the second read of paired-end linked-read sequencing data.\n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-ID/--index_fastq:",
        "parent_header": [
          "Running examples",
          "Commands for raw read and variant analysis",
          "function 2: barcode correction"
        ],
        "type": "Text_excerpt",
        "value": "Input index file (uncompressed FASTQ format) for paired linked-read sequencing data. This files only contains information about barcode sequence and is required for TELL-Seq technology.\n\n#### -IT/--input_type: \nSequencing platforms. Users can choose from 10x,stLFR, or TELLSeq.\n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-O1/--output_fastq1:",
        "parent_header": [
          "Running examples",
          "Commands for raw read and variant analysis",
          "function 2: barcode correction"
        ],
        "type": "Text_excerpt",
        "value": "Output fastq file for the first read of paired-end linked-read sequencing data.\n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-O2/--output_fastq2:",
        "parent_header": [
          "Running examples",
          "Commands for raw read and variant analysis",
          "function 2: barcode correction"
        ],
        "type": "Text_excerpt",
        "value": "Output fastq file for the second read of paired-end linked-read sequencing data.\n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "function 3: barcode-aware alignment",
        "parent_header": [
          "Running examples",
          "Commands for raw read and variant analysis"
        ],
        "type": "Text_excerpt",
        "value": "```\nlrtk ALIGN -FQ1 /path_to/IN_FQ1 -FQ2 /path_to/IN_FQ2 -R /path_to/REFERENCE -O /path_to/OUT_BAM -RG \"@RG\\tID:Example\\tSM:Example\" -P 10x -T 4\n```\n* #### Required parameters:\n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-FQ1/--input_fastq1:",
        "parent_header": [
          "Running examples",
          "Commands for raw read and variant analysis",
          "function 3: barcode-aware alignment"
        ],
        "type": "Text_excerpt",
        "value": "Input fastq file (uncompressed FASTQ format) for the first read of paired linked-read sequencing data (without barcode).\n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-FQ2/--input_fastq2:",
        "parent_header": [
          "Running examples",
          "Commands for raw read and variant analysis",
          "function 3: barcode-aware alignment"
        ],
        "type": "Text_excerpt",
        "value": "Input fastq file (uncompressed FASTQ format) for the second read of paired linked-read sequencing data (without barcode).\n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-RG/--read_group:",
        "parent_header": [
          "Running examples",
          "Commands for automatic analysis pipeline",
          "function 10: metagenome workflow"
        ],
        "type": "Text_excerpt",
        "value": "Full read group string (e.g. '@RG\\tID:foo\\tSM:bar')\n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-R/--reference:",
        "parent_header": [
          "Running examples",
          "Commands for raw read and variant analysis",
          "function 7:  variant phasing"
        ],
        "type": "Text_excerpt",
        "value": "The recommended \"GRCH38/genome.fa\" is the reference fasta file downloaded from Zenodo.\n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-O/--outfile:",
        "parent_header": [
          "Running examples",
          "Commands for raw read and variant analysis",
          "function 7:  variant phasing"
        ],
        "type": "Text_excerpt",
        "value": "The output alignment file.  \n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-P/--platform:",
        "parent_header": [
          "Running examples",
          "Commands for raw read and variant analysis",
          "function 3: barcode-aware alignment"
        ],
        "type": "Text_excerpt",
        "value": "Sequencing platforms. Users can choose from (10x,stLFR, TELLSeq).\n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-A/--application:",
        "parent_header": [
          "Running examples",
          "Commands for raw read and variant analysis",
          "function 7:  variant phasing"
        ],
        "type": "Text_excerpt",
        "value": "Barcode-aware aligners. Users can choose from (ema, lariat). \n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "function 4: Reconstruction of long DNA fragment",
        "parent_header": [
          "Running examples",
          "Commands for raw read and variant analysis"
        ],
        "type": "Text_excerpt",
        "value": "```\nlrtk RLF -B /path_to/IN_BAM -D 200000 -O /path_to/OUTFILE\n```\n* #### Required parameters\n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-B/--bam:",
        "parent_header": [
          "Running examples",
          "Commands for raw read and variant analysis",
          "function 7:  variant phasing"
        ],
        "type": "Text_excerpt",
        "value": "The alignment file (.bam) mapped using barcode aware approach.  \n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-D/--distance:",
        "parent_header": [
          "Running examples",
          "Commands for raw read and variant analysis",
          "function 4: Reconstruction of long DNA fragment"
        ],
        "type": "Text_excerpt",
        "value": "the distance for seed extension \n\n#### -O/--outfile:  \nThe reconstructed fragments.  \n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "function 5: small variation calling",
        "parent_header": [
          "Running examples",
          "Commands for raw read and variant analysis"
        ],
        "type": "Text_excerpt",
        "value": "```\nlrtk SNV -B /path_to/IN_BAM -R /path_to/REFERENCE -A \"FreeBayes\" -T 4 -O /path_to/OUT_VCF\n```\n* #### Required parameters\n\n#### -B/--bam: \nThe alignment file (.bam) obtained from ALIGN function.  \n\n#### -R/--reference: \nReference genome.\n\n#### -A/--application: \nThe SNV/INDEL caller (FreeBayes, Samtools or GATK).\n\n#### -O/--outfile: \nOutput VCF file.\n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "function 6: structural variation calling",
        "parent_header": [
          "Running examples",
          "Commands for raw read and variant analysis"
        ],
        "type": "Text_excerpt",
        "value": "```\nlrtk SV -B /path_to/IN_BAM -R /path_to/REFERENCE -A \"Aquila\" -T 4 -O /path_to/OUT_VCF -V /path_to/IN_VCF -U /path_to/DATABASE_UNIQNESS\n```\n* #### Required parameters\n\n#### -B/--bam: \nThe alignment file (.bam) obtained from ALIGN function.  \n\n#### -R/--reference: \nReference genome.\n\n#### -A/--application: \nThe SV caller (Aquila, LinkedSV or VALOR).\n\n#### -O/--outfile: \nOutput VCF file.\n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-U/--uniqness:",
        "parent_header": [
          "Running examples",
          "Commands for raw read and variant analysis",
          "function 6: structural variation calling"
        ],
        "type": "Text_excerpt",
        "value": "\"Uniqness_map/\" is a required database for Aquila, which can be downloaded from Google Drive.\n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-S/--sonic:",
        "parent_header": [
          "Running examples",
          "Commands for raw read and variant analysis",
          "function 6: structural variation calling"
        ],
        "type": "Text_excerpt",
        "value": "\"sonic/\" is a required database for VALOR, which can be downloaded from Google Drive.\n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-V/--vcf:",
        "parent_header": [
          "Running examples",
          "Commands for raw read and variant analysis",
          "function 7:  variant phasing"
        ],
        "type": "Text_excerpt",
        "value": "VCF file generated from ```SNV``` function.\n\n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "function 7:  variant phasing",
        "parent_header": [
          "Running examples",
          "Commands for raw read and variant analysis"
        ],
        "type": "Text_excerpt",
        "value": "```\nlrtk PHASE -B /path_to/IN_BAM -R /path_to/REFERENCE -A \"HapCUT2\" -V /path_to/IN_VCF -O /path_to/OUT_VCF\n```\n* #### Required parameters\n\n#### -B/--bam: \nThe alignment file (.bam) obtained from ALIGN function.  \n\n#### -R/--reference: \nReference genome.\n\n#### -A/--application: \nThe variant phasing tool (HapCUT2, WhatsHap or SpecHap).\n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-T/--threads:",
        "parent_header": [
          "Running examples",
          "Commands for raw read and variant analysis",
          "function 7:  variant phasing"
        ],
        "type": "Text_excerpt",
        "value": "The number of threads used for variant phasing tool (default: 1). \n\n#### -O/--outfile: \nOutput phased VCF file.\n\n#### -V/--vcf: \nVCF with variants to phase.\n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "function 8:  metagenome assembly",
        "parent_header": [
          "Running examples",
          "Commands for raw read and variant analysis"
        ],
        "type": "Text_excerpt",
        "value": "```\nlrtk ASSEMBLY -FQ1 /path_to/IN_FQ1 -FQ2 /path_to/IN_FQ2 -MS /path_to/METASPADES_CONTIG -AL /path_to/ATHENA_LOCAL_CONTIG -AH /path_to/ATHENA_HYBRID_CONTIG -LT LOW_ABD_CUT -O OUTFILE\n```\n* #### Required parameters\n\n  #### -FQ1/--fq1:\n  Input FASTQ1 file (uncompressed FASTQ format).\n  \n  #### -FQ2/--fq2:\n  Input FASTQ2 file (uncompressed FASTQ format).\n  \n  #### -MS/--metaspades:\n  assembled contigs from metaspades.\n  \n  #### -AL/--athena_l:\n  local assembled contigs from athena.\n  \n  #### -AH/--athena_h:\n  hybrid assembled contigs from athena.\n  \n  #### -LT/--low_abd_cut:\n  coverage for low abundance contigs.\n  \n  #### -O/ --outfile:\n  the final assembled contigs.\n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Commands for automatic analysis pipeline",
        "parent_header": [
          "Running examples"
        ],
        "type": "Text_excerpt",
        "value": "LRTK provides an easy-to-use automatic pipeline to process linked-read sequencing from single or multiple samples. Users only need to prepare FASTQ files, LRTK will run the whole pipeline and generate the final report. We show simple examples to process human and metagenome sequencing data using the automatic pipeline. \n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "function 9\uff1ahuman genome workflow",
        "parent_header": [
          "Running examples",
          "Commands for automatic analysis pipeline"
        ],
        "type": "Text_excerpt",
        "value": "```\nlrtk WGS -SI /path_to/SAMPLE_INFO -OD /path_to/OUTDIR -DB /path_to/DATABASE -RG \"@RG\\tID:Example\\tSM:Example\" \n```\n* #### Required parameters"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-OD/--outdir:",
        "parent_header": [
          "Running examples",
          "Commands for automatic analysis pipeline",
          "function 10: metagenome workflow"
        ],
        "type": "Text_excerpt",
        "value": "The output directory.\n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-DB/--database:",
        "parent_header": [
          "Running examples",
          "Commands for automatic analysis pipeline",
          "function 10: metagenome workflow"
        ],
        "type": "Text_excerpt",
        "value": "The ```database``` contains reference genome and barcode whitelist, which can be downloaded from Zenodo.\n\n#### -RG/--read_group: \nRead group (e.g. '@RG\\tID:foo\\tSM:bar').\n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-SI/--sample_info:",
        "parent_header": [
          "Running examples",
          "Commands for automatic analysis pipeline",
          "function 10: metagenome workflow"
        ],
        "type": "Text_excerpt",
        "value": "The path to Sinfo (sample information file).\n\nThe Sinfo (tab-separated) should be prepared as: \n```\n#Barcode\tFQ1\tFQ2\tINDEXFQ\tLinked-read_tech\nExample_10x\t/path_to/Example.large.10x.R1.fq\t/path_to/Example.large.10x.R2.fq\t-\t10x\n```"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "function 10: metagenome workflow",
        "parent_header": [
          "Running examples",
          "Commands for automatic analysis pipeline"
        ],
        "type": "Text_excerpt",
        "value": "```\nlrtk MWGS -SI /path_to/SingleSample_info -MI /path_to/MultipleSample_info -OD /path_to/OUTDIR -DB /path_to/DATABASE -RG \"@RG\\tID:foo\\tSM:bar\"\n```\n* #### Required parameters\n\n#### -OD/--outdir: \nThe output directory.\n\n#### -DB/--database: \nThe ```database``` contains reference genome and barcode whitelist, which can be downloaded from Google Drive.\n\n#### -RG/--read_group: \nRead group (e.g. '@RG\\tID:foo\\tSM:bar').\n\n#### -SI/--sample_info: \nThe path to Sinfo (sample information file).\n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-MI/--multi_info:",
        "parent_header": [
          "Running examples",
          "Commands for automatic analysis pipeline",
          "function 10: metagenome workflow"
        ],
        "type": "Text_excerpt",
        "value": "The path to Sinfo (sample information file).\n\nThe Sinfo (tab-separated) should be prepared as:\n```\n#Barcode\tFQ1\tFQ2\tINDEXFQ\tLinked-read_tech\nExample_10x\t/path_to/Example.large.10x.R1.fq\t/path_to/Example.large.10x.R2.fq\t-\t10x\nExample_stLFR\t/path_to/Example.large.stLFR.R1.fq\t/path_to/Example.large.stLFR.R2.fq\t-\tstLFR\nExample_TELLSeq\t/path_to/Example.large.TellSeq.R1.fq\t/path_to/Example.large.TellSeq.R2.fq /path_to/Example.large.TellSeq.index.fq TELLSeq\n```\nThe Minfo (optional) should be prepared as:\n```\n#single sample\nS1=S1\nS2=S2\nS3=S3\nS4=S4\nS5=S5\n#pairwise comparison\nP1=S4_vs_S5\n#group comparison\nG1=S4,S5\nG2=S1,S2,S3\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-03 23:53:53",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Help information",
        "parent_header": [
          "Running examples"
        ],
        "type": "Text_excerpt",
        "value": "Type \"lrtk -h\" and the help information will be printed.\n```\nlrtk -h \n```\n```\nusage: lrtk version 2.1\n\nLinked Reads ToolKit\n\npositional arguments:\n  {MKFQ, FQCONVER, ALIGN, RLF, SNV, SV, PHASE, ASSEMBLY, WGS, MWGS}\n    MKFQ                Simulate linked-reads\n    FQCONVER            Convert linked FASTQ formats\n    ALIGN               Barcode aware alignment to map reads to the reference genome\n    RLF                 Reconstruct the long DNA fragment\n    SNV                 Detect SNVs and INDELs\n    SV                  Detect structural variations\n    PHASE               Phase germline variations\n    ASSEMBLY            Read-cloud metagenome assembly\n    WGS                 Run the human genome sequencing analysis pipeline\n    MWGS                Run the metagenome sequencing analysis pipeline\n\noptional arguments:\n  -h, --help            show this help message and exit\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "demo report:",
        "parent_header": [
          "Running examples",
          "Commands for automatic analysis pipeline"
        ],
        "type": "Text_excerpt",
        "value": "LRTK produces reproducible reports during the processing of raw sequencing data and the multiple downstream analysis.\nHere is the demo report from LRTK:\n\n<a href=\"https://github.com/ericcombiolab/LRTK/blob/main/demo_report/LRTK.report.html\">human genome</a> \n\n<a href=\"https://github.com/ericcombiolab/LRTK/blob/main/demo_report/metagenome.multi.html\">metagenome</a> \n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Database and demo data",
        "parent_header": [
          "Install using Bioconda"
        ],
        "type": "Text_excerpt",
        "value": "The required database can be downloaded from Google Drive (https://drive.google.com/drive/folders/1XPW2avL_LZAt5yIh9tb35jZ5GfCSj7eQ).\nIn addition, we provide several examples to test LRTK on different linked-read sequencing technologies. We have included a human genome dataset (FQs) and a metagenomic dataset on Google Drive (https://drive.google.com/drive/folders/1XPW2avL_LZAt5yIh9tb35jZ5GfCSj7eQ).\n\nNow the database and demo data is also available at Baidu net disk (https://pan.baidu.com/s/1B-ZRHEMGEWjS-yzTBeSIsQ?pwd=y76i).\n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "function 1: linked-read simulation",
        "parent_header": [
          "Running examples",
          "Commands for raw read and variant analysis"
        ],
        "type": "Text_excerpt",
        "value": "```\nlrtk MKFQ -CF \"/path_to/diploid_config\" -IT stLFR\n```\n* #### Required parameters\n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-CF/--config_file:",
        "parent_header": [
          "Running examples",
          "Commands for raw read and variant analysis",
          "function 1: linked-read simulation"
        ],
        "type": "Text_excerpt",
        "value": "The path to the directory containing config_files for linked-read simulation. Example data was stored on the aforementioned Google Drive."
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-IT/--input_type:",
        "parent_header": [
          "Running examples",
          "Commands for raw read and variant analysis",
          "function 2: barcode correction"
        ],
        "type": "Text_excerpt",
        "value": "Sequencing platform. Users can choose from 10x or stLFR.\n\nWe have prepared Two examples of config file (config1.txt and config2.txt; config1.txt is illustrated here) in the diploid_config folder.\n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "function 2: barcode correction",
        "parent_header": [
          "Running examples",
          "Commands for raw read and variant analysis"
        ],
        "type": "Text_excerpt",
        "value": "```\nlrtk FQCONVER -I1 /path_to/IN_FQ1 -I2 /path_to/INF_Q2 -IT 10x -O1 /path_to/OUT_FQ1 -O2 /path_to/OUT_FQ2 -B /path_to/BARCODE_WHITELIST -T 4 \n```\n* #### Required parameters\n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-I1/--input_fastq1:",
        "parent_header": [
          "Running examples",
          "Commands for raw read and variant analysis",
          "function 2: barcode correction"
        ],
        "type": "Text_excerpt",
        "value": "Input file (uncompressed FASTQ format) for the first read of paired-end linked-read sequencing data.\n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-I2/--input_fastq2:",
        "parent_header": [
          "Running examples",
          "Commands for raw read and variant analysis",
          "function 2: barcode correction"
        ],
        "type": "Text_excerpt",
        "value": "Input file (uncompressed FASTQ format) for the second read of paired-end linked-read sequencing data.\n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-ID/--index_fastq:",
        "parent_header": [
          "Running examples",
          "Commands for raw read and variant analysis",
          "function 2: barcode correction"
        ],
        "type": "Text_excerpt",
        "value": "Input index file (uncompressed FASTQ format) for paired linked-read sequencing data. This files only contains information about barcode sequence and is required for TELL-Seq technology.\n\n#### -IT/--input_type: \nSequencing platforms. Users can choose from 10x,stLFR, or TELLSeq.\n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-O1/--output_fastq1:",
        "parent_header": [
          "Running examples",
          "Commands for raw read and variant analysis",
          "function 2: barcode correction"
        ],
        "type": "Text_excerpt",
        "value": "Output fastq file for the first read of paired-end linked-read sequencing data.\n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-O2/--output_fastq2:",
        "parent_header": [
          "Running examples",
          "Commands for raw read and variant analysis",
          "function 2: barcode correction"
        ],
        "type": "Text_excerpt",
        "value": "Output fastq file for the second read of paired-end linked-read sequencing data.\n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "function 3: barcode-aware alignment",
        "parent_header": [
          "Running examples",
          "Commands for raw read and variant analysis"
        ],
        "type": "Text_excerpt",
        "value": "```\nlrtk ALIGN -FQ1 /path_to/IN_FQ1 -FQ2 /path_to/IN_FQ2 -R /path_to/REFERENCE -O /path_to/OUT_BAM -RG \"@RG\\tID:Example\\tSM:Example\" -P 10x -T 4\n```\n* #### Required parameters:\n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-FQ1/--input_fastq1:",
        "parent_header": [
          "Running examples",
          "Commands for raw read and variant analysis",
          "function 3: barcode-aware alignment"
        ],
        "type": "Text_excerpt",
        "value": "Input fastq file (uncompressed FASTQ format) for the first read of paired linked-read sequencing data (without barcode).\n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-FQ2/--input_fastq2:",
        "parent_header": [
          "Running examples",
          "Commands for raw read and variant analysis",
          "function 3: barcode-aware alignment"
        ],
        "type": "Text_excerpt",
        "value": "Input fastq file (uncompressed FASTQ format) for the second read of paired linked-read sequencing data (without barcode).\n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-RG/--read_group:",
        "parent_header": [
          "Running examples",
          "Commands for automatic analysis pipeline",
          "function 10: metagenome workflow"
        ],
        "type": "Text_excerpt",
        "value": "Full read group string (e.g. '@RG\\tID:foo\\tSM:bar')\n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-R/--reference:",
        "parent_header": [
          "Running examples",
          "Commands for raw read and variant analysis",
          "function 7:  variant phasing"
        ],
        "type": "Text_excerpt",
        "value": "The recommended \"GRCH38/genome.fa\" is the reference fasta file downloaded from Zenodo.\n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-O/--outfile:",
        "parent_header": [
          "Running examples",
          "Commands for raw read and variant analysis",
          "function 7:  variant phasing"
        ],
        "type": "Text_excerpt",
        "value": "The output alignment file.  \n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-P/--platform:",
        "parent_header": [
          "Running examples",
          "Commands for raw read and variant analysis",
          "function 3: barcode-aware alignment"
        ],
        "type": "Text_excerpt",
        "value": "Sequencing platforms. Users can choose from (10x,stLFR, TELLSeq).\n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-A/--application:",
        "parent_header": [
          "Running examples",
          "Commands for raw read and variant analysis",
          "function 7:  variant phasing"
        ],
        "type": "Text_excerpt",
        "value": "Barcode-aware aligners. Users can choose from (ema, lariat). \n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "function 4: Reconstruction of long DNA fragment",
        "parent_header": [
          "Running examples",
          "Commands for raw read and variant analysis"
        ],
        "type": "Text_excerpt",
        "value": "```\nlrtk RLF -B /path_to/IN_BAM -D 200000 -O /path_to/OUTFILE\n```\n* #### Required parameters\n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-B/--bam:",
        "parent_header": [
          "Running examples",
          "Commands for raw read and variant analysis",
          "function 7:  variant phasing"
        ],
        "type": "Text_excerpt",
        "value": "The alignment file (.bam) mapped using barcode aware approach.  \n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-D/--distance:",
        "parent_header": [
          "Running examples",
          "Commands for raw read and variant analysis",
          "function 4: Reconstruction of long DNA fragment"
        ],
        "type": "Text_excerpt",
        "value": "the distance for seed extension \n\n#### -O/--outfile:  \nThe reconstructed fragments.  \n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "function 5: small variation calling",
        "parent_header": [
          "Running examples",
          "Commands for raw read and variant analysis"
        ],
        "type": "Text_excerpt",
        "value": "```\nlrtk SNV -B /path_to/IN_BAM -R /path_to/REFERENCE -A \"FreeBayes\" -T 4 -O /path_to/OUT_VCF\n```\n* #### Required parameters\n\n#### -B/--bam: \nThe alignment file (.bam) obtained from ALIGN function.  \n\n#### -R/--reference: \nReference genome.\n\n#### -A/--application: \nThe SNV/INDEL caller (FreeBayes, Samtools or GATK).\n\n#### -O/--outfile: \nOutput VCF file.\n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "function 6: structural variation calling",
        "parent_header": [
          "Running examples",
          "Commands for raw read and variant analysis"
        ],
        "type": "Text_excerpt",
        "value": "```\nlrtk SV -B /path_to/IN_BAM -R /path_to/REFERENCE -A \"Aquila\" -T 4 -O /path_to/OUT_VCF -V /path_to/IN_VCF -U /path_to/DATABASE_UNIQNESS\n```\n* #### Required parameters\n\n#### -B/--bam: \nThe alignment file (.bam) obtained from ALIGN function.  \n\n#### -R/--reference: \nReference genome.\n\n#### -A/--application: \nThe SV caller (Aquila, LinkedSV or VALOR).\n\n#### -O/--outfile: \nOutput VCF file.\n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-U/--uniqness:",
        "parent_header": [
          "Running examples",
          "Commands for raw read and variant analysis",
          "function 6: structural variation calling"
        ],
        "type": "Text_excerpt",
        "value": "\"Uniqness_map/\" is a required database for Aquila, which can be downloaded from Google Drive.\n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-S/--sonic:",
        "parent_header": [
          "Running examples",
          "Commands for raw read and variant analysis",
          "function 6: structural variation calling"
        ],
        "type": "Text_excerpt",
        "value": "\"sonic/\" is a required database for VALOR, which can be downloaded from Google Drive.\n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-V/--vcf:",
        "parent_header": [
          "Running examples",
          "Commands for raw read and variant analysis",
          "function 7:  variant phasing"
        ],
        "type": "Text_excerpt",
        "value": "VCF file generated from ```SNV``` function.\n\n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "function 7:  variant phasing",
        "parent_header": [
          "Running examples",
          "Commands for raw read and variant analysis"
        ],
        "type": "Text_excerpt",
        "value": "```\nlrtk PHASE -B /path_to/IN_BAM -R /path_to/REFERENCE -A \"HapCUT2\" -V /path_to/IN_VCF -O /path_to/OUT_VCF\n```\n* #### Required parameters\n\n#### -B/--bam: \nThe alignment file (.bam) obtained from ALIGN function.  \n\n#### -R/--reference: \nReference genome.\n\n#### -A/--application: \nThe variant phasing tool (HapCUT2, WhatsHap or SpecHap).\n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-T/--threads:",
        "parent_header": [
          "Running examples",
          "Commands for raw read and variant analysis",
          "function 7:  variant phasing"
        ],
        "type": "Text_excerpt",
        "value": "The number of threads used for variant phasing tool (default: 1). \n\n#### -O/--outfile: \nOutput phased VCF file.\n\n#### -V/--vcf: \nVCF with variants to phase.\n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "function 8:  metagenome assembly",
        "parent_header": [
          "Running examples",
          "Commands for raw read and variant analysis"
        ],
        "type": "Text_excerpt",
        "value": "```\nlrtk ASSEMBLY -FQ1 /path_to/IN_FQ1 -FQ2 /path_to/IN_FQ2 -MS /path_to/METASPADES_CONTIG -AL /path_to/ATHENA_LOCAL_CONTIG -AH /path_to/ATHENA_HYBRID_CONTIG -LT LOW_ABD_CUT -O OUTFILE\n```\n* #### Required parameters\n\n  #### -FQ1/--fq1:\n  Input FASTQ1 file (uncompressed FASTQ format).\n  \n  #### -FQ2/--fq2:\n  Input FASTQ2 file (uncompressed FASTQ format).\n  \n  #### -MS/--metaspades:\n  assembled contigs from metaspades.\n  \n  #### -AL/--athena_l:\n  local assembled contigs from athena.\n  \n  #### -AH/--athena_h:\n  hybrid assembled contigs from athena.\n  \n  #### -LT/--low_abd_cut:\n  coverage for low abundance contigs.\n  \n  #### -O/ --outfile:\n  the final assembled contigs.\n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Commands for automatic analysis pipeline",
        "parent_header": [
          "Running examples"
        ],
        "type": "Text_excerpt",
        "value": "LRTK provides an easy-to-use automatic pipeline to process linked-read sequencing from single or multiple samples. Users only need to prepare FASTQ files, LRTK will run the whole pipeline and generate the final report. We show simple examples to process human and metagenome sequencing data using the automatic pipeline. \n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "function 9\uff1ahuman genome workflow",
        "parent_header": [
          "Running examples",
          "Commands for automatic analysis pipeline"
        ],
        "type": "Text_excerpt",
        "value": "```\nlrtk WGS -SI /path_to/SAMPLE_INFO -OD /path_to/OUTDIR -DB /path_to/DATABASE -RG \"@RG\\tID:Example\\tSM:Example\" \n```\n* #### Required parameters"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-OD/--outdir:",
        "parent_header": [
          "Running examples",
          "Commands for automatic analysis pipeline",
          "function 10: metagenome workflow"
        ],
        "type": "Text_excerpt",
        "value": "The output directory.\n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-DB/--database:",
        "parent_header": [
          "Running examples",
          "Commands for automatic analysis pipeline",
          "function 10: metagenome workflow"
        ],
        "type": "Text_excerpt",
        "value": "The ```database``` contains reference genome and barcode whitelist, which can be downloaded from Zenodo.\n\n#### -RG/--read_group: \nRead group (e.g. '@RG\\tID:foo\\tSM:bar').\n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-SI/--sample_info:",
        "parent_header": [
          "Running examples",
          "Commands for automatic analysis pipeline",
          "function 10: metagenome workflow"
        ],
        "type": "Text_excerpt",
        "value": "The path to Sinfo (sample information file).\n\nThe Sinfo (tab-separated) should be prepared as: \n```\n#Barcode\tFQ1\tFQ2\tINDEXFQ\tLinked-read_tech\nExample_10x\t/path_to/Example.large.10x.R1.fq\t/path_to/Example.large.10x.R2.fq\t-\t10x\n```"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "function 10: metagenome workflow",
        "parent_header": [
          "Running examples",
          "Commands for automatic analysis pipeline"
        ],
        "type": "Text_excerpt",
        "value": "```\nlrtk MWGS -SI /path_to/SingleSample_info -MI /path_to/MultipleSample_info -OD /path_to/OUTDIR -DB /path_to/DATABASE -RG \"@RG\\tID:foo\\tSM:bar\"\n```\n* #### Required parameters\n\n#### -OD/--outdir: \nThe output directory.\n\n#### -DB/--database: \nThe ```database``` contains reference genome and barcode whitelist, which can be downloaded from Google Drive.\n\n#### -RG/--read_group: \nRead group (e.g. '@RG\\tID:foo\\tSM:bar').\n\n#### -SI/--sample_info: \nThe path to Sinfo (sample information file).\n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-MI/--multi_info:",
        "parent_header": [
          "Running examples",
          "Commands for automatic analysis pipeline",
          "function 10: metagenome workflow"
        ],
        "type": "Text_excerpt",
        "value": "The path to Sinfo (sample information file).\n\nThe Sinfo (tab-separated) should be prepared as:\n```\n#Barcode\tFQ1\tFQ2\tINDEXFQ\tLinked-read_tech\nExample_10x\t/path_to/Example.large.10x.R1.fq\t/path_to/Example.large.10x.R2.fq\t-\t10x\nExample_stLFR\t/path_to/Example.large.stLFR.R1.fq\t/path_to/Example.large.stLFR.R2.fq\t-\tstLFR\nExample_TELLSeq\t/path_to/Example.large.TellSeq.R1.fq\t/path_to/Example.large.TellSeq.R2.fq /path_to/Example.large.TellSeq.index.fq TELLSeq\n```\nThe Minfo (optional) should be prepared as:\n```\n#single sample\nS1=S1\nS2=S2\nS3=S3\nS4=S4\nS5=S5\n#pairwise comparison\nP1=S4_vs_S5\n#group comparison\nG1=S4,S5\nG2=S1,S2,S3\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "demo report:",
        "parent_header": [
          "Running examples",
          "Commands for automatic analysis pipeline"
        ],
        "type": "Text_excerpt",
        "value": "LRTK produces reproducible reports during the processing of raw sequencing data and the multiple downstream analysis.\nHere is the demo report from LRTK:\n\n<a href=\"https://github.com/ericcombiolab/LRTK/blob/main/demo_report/LRTK.report.html\">human genome</a> \n\n<a href=\"https://github.com/ericcombiolab/LRTK/blob/main/demo_report/metagenome.multi.html\">metagenome</a> \n"
      },
      "source": "https://raw.githubusercontent.com/ericcombiolab/LRTK/main/README.md",
      "technique": "header_analysis"
    }
  ]
}