{
  "application_domain": [
    {
      "confidence": 0.9243839519210596,
      "result": {
        "type": "String",
        "value": "Graphs"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Reference",
        "parent_header": [
          "Getting started",
          "Parameters"
        ],
        "type": "Text_excerpt",
        "value": "```\n@article{10.1093/nar/gkad570,\n    author = {Wang, Ruo Han and Wang, Jianping and Li, Shuai Cheng},\n    title = \"{Probabilistic tensor decomposition extracts better latent embeddings from single-cell multiomic data}\",\n    journal = {Nucleic Acids Research},\n    pages = {gkad570},\n    year = {2023},\n    month = {07},\n    issn = {0305-1048},\n    doi = {10.1093/nar/gkad570},\n    url = {https://doi.org/10.1093/nar/gkad570},\n    eprint = {https://academic.oup.com/nar/advance-article-pdf/doi/10.1093/nar/gkad570/50819911/gkad570.pdf},\n}\n```\n"
      },
      "source": "https://raw.githubusercontent.com/deepomicslab/SCOIT/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Wang, Ruo Han and Wang, Jianping and Li, Shuai Cheng",
        "doi": "10.1093/nar/gkad570",
        "format": "bibtex",
        "title": "{Probabilistic tensor decomposition extracts better latent embeddings from single-cell multiomic data}",
        "type": "Text_excerpt",
        "url": "https://doi.org/10.1093/nar/gkad570",
        "value": "@article{10.1093/nar/gkad570,\n    eprint = {https://academic.oup.com/nar/advance-article-pdf/doi/10.1093/nar/gkad570/50819911/gkad570.pdf},\n    url = {https://doi.org/10.1093/nar/gkad570},\n    doi = {10.1093/nar/gkad570},\n    issn = {0305-1048},\n    month = {07},\n    year = {2023},\n    pages = {gkad570},\n    journal = {Nucleic Acids Research},\n    title = {{Probabilistic tensor decomposition extracts better latent embeddings from single-cell multiomic data}},\n    author = {Wang, Ruo Han and Wang, Jianping and Li, Shuai Cheng},\n}"
      },
      "source": "https://raw.githubusercontent.com/deepomicslab/SCOIT/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/deepomicslab/SCOIT"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-07-30T12:43:15Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-07-01T09:34:38Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SCOIT is an implementation of a probabilistic tensor decomposition framework for single-cell multi-omics data integration."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9977065359266436,
      "result": {
        "original_header": "SCOIT",
        "type": "Text_excerpt",
        "value": "SCOIT is an implementation of a probabilistic tensor decomposition framework for single-cell multiomic data integration. SCOIT accepts the input of datasets from multiple omics, with missing values allowed. \n"
      },
      "source": "https://raw.githubusercontent.com/deepomicslab/SCOIT/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/deepomicslab/SCOIT/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/deepomicslab/SCOIT/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "deepomicslab/SCOIT"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SCOIT"
      },
      "source": "https://raw.githubusercontent.com/deepomicslab/SCOIT/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/deepomicslab/SCOIT/main/framework.png"
      },
      "source": "https://raw.githubusercontent.com/deepomicslab/SCOIT/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Install",
        "parent_header": [
          "Getting started"
        ],
        "type": "Text_excerpt",
        "value": "```\npip install SCOIT\n```\n"
      },
      "source": "https://raw.githubusercontent.com/deepomicslab/SCOIT/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/deepomicslab/SCOIT/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2022 DeepOmics Lab\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/deepomicslab/SCOIT/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SCOIT"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "deepomicslab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 62100,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/deepomicslab/SCOIT/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Prerequisite",
        "parent_header": [
          "Getting started"
        ],
        "type": "Text_excerpt",
        "value": "+ numpy\n+ scipy 1.6.0\n+ sklearn\n+ communities\n+ igraph\n+ leidenalg\n+ pytorch 1.9.0\n"
      },
      "source": "https://raw.githubusercontent.com/deepomicslab/SCOIT/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 00:40:15",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Examples",
        "parent_header": [
          "Getting started"
        ],
        "type": "Text_excerpt",
        "value": "We put the complete scripts for the analysis described in the manuscript under ```examples/``` directory for detailed usage examples and reproduction. The example data can be downloaded from [Google Drive](https://drive.google.com/drive/folders/1F_WBwNsHggjTqgFfTm6IugNKpb0xJTje?usp=sharing).\n\nThis is an example of multiple datasets when features have corresponding information.\n\n```Python\nfrom scoit import sc_multi_omics\n\ndata = np.array([expression_data, methylation_data])\nsc_model = sc_multi_omics()\npredict_data = sc_model.fit(data) # the imputed data\nnp.savetxt(\"global_cell_embeddings.csv\", sc_model.C, delimiter = ',') # global cell embeddings\nnp.savetxt(\"global_gene_embeddings.csv\", sc_model.G, delimiter = ',') # global gene embeddings\nnp.savetxt(\"local_cell_embeddings.csv\", sc_model.C, delimiter = ',') # omics-specific cell embeddings\nnp.savetxt(\"local_gene_embeddings.csv\", sc_model.G, delimiter = ',') # omics-specific gene embeddings\n\n# imputation\nimputed_expression_data = predict_data[0]\nimputed_methylation_data = predict_data[1]\n\n```\nWhen the features of different omics do not have corresponding information, please use the ```fit_list``` function, which accepts the input as a list of matrices.\n```Python\nfrom scoit import sc_multi_omics\n\ndata = [expression_data, protein_data]\nsc_model = sc_multi_omics()\npredict_data = sc_model.fit_list(data)\n```\nIf the input does not contain missing values (\"NA\"), we provide ```fit_complete``` and ```fit_list_complete``` functions to accelerate the optimization since they take advantage of matrix operations.\n```Python\nfrom scoit import sc_multi_omics\n\ndata = np.array([expression_data, methylation_data])\nsc_model = sc_multi_omics()\npredict_data = sc_model.fit_complete(data) # the imputed data\n```\n```Python\nfrom scoit import sc_multi_omics\n\ndata = [expression_data, protein_data]\nsc_model = sc_multi_omics()\npredict_data = sc_model.fit_list_complete(data)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/deepomicslab/SCOIT/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "BASH10*",
        "parent_header": [
          "Getting started",
          "Parameters"
        ],
        "type": "Text_excerpt",
        "value": "# SCOIT\nSCOIT is an implementation of a probabilistic tensor decomposition framework for single-cell multiomic data integration. SCOIT accepts the input of datasets from multiple omics, with missing values allowed.\n\n![image](https://github.com/deepomicslab/SCOIT/blob/main/framework.png)\n\n# Getting started\n\n## Prerequisite\n+ numpy\n+ scipy 1.6.0\n+ sklearn\n+ communities\n+ igraph\n+ leidenalg\n+ pytorch 1.9.0\n\n## Install\n```\npip install SCOIT\n```\n\n## Examples\nWe put the complete scripts for the analysis described in the manuscript under ```examples/``` directory for detailed usage examples and reproduction. The example data can be downloaded from [Google Drive](https://drive.google.com/drive/folders/1F_WBwNsHggjTqgFfTm6IugNKpb0xJTje?usp=sharing).\n\nThis is an example of multiple datasets when features have corresponding information.\n\n```Python\nfrom scoit import sc_multi_omics\n\ndata = np.array([expression_data, methylation_data])\nsc_model = sc_multi_omics()\npredict_data = sc_model.fit(data) # the imputed data\nnp.savetxt(\"global_cell_embeddings.csv\", sc_model.C, delimiter = ',') # global cell embeddings\nnp.savetxt(\"global_gene_embeddings.csv\", sc_model.G, delimiter = ',') # global gene embeddings\nnp.savetxt(\"local_cell_embeddings.csv\", sc_model.C, delimiter = ',') # omics-specific cell embeddings\nnp.savetxt(\"local_gene_embeddings.csv\", sc_model.G, delimiter = ',') # omics-specific gene embeddings\n\n# imputation\nimputed_expression_data = predict_data[0]\nimputed_methylation_data = predict_data[1]\n\n```\nWhen the features of different omics do not have corresponding information, please use the ```fit_list``` function, which accepts the input as a list of matrices.\n```Python\nfrom scoit import sc_multi_omics\n\ndata = [expression_data, protein_data]\nsc_model = sc_multi_omics()\npredict_data = sc_model.fit_list(data)\n```\nIf the input does not contain missing values (\"NA\"), we provide ```fit_complete``` and ```fit_list_complete``` functions to accelerate the optimization since they take advantage of matrix operations.\n```Python\nfrom scoit import sc_multi_omics\n\ndata = np.array([expression_data, methylation_data])\nsc_model = sc_multi_omics()\npredict_data = sc_model.fit_complete(data) # the imputed data\n```\n```Python\nfrom scoit import sc_multi_omics\n\ndata = [expression_data, protein_data]\nsc_model = sc_multi_omics()\npredict_data = sc_model.fit_list_complete(data)\n```\n\n## Parameters\n###  ```sc_multi_omics```\n> + ```K1```: The local element-wise product parameter, see the manuscript for details (default=30).\n> + ```K2```: The local element-wise product parameter (default=30).\n> + ```K3```: The local element-wise product parameter (default=30).\n> + ```random_seed```: The random seed used in optimization (default=123).\n\n###  ```fit```\n> + ```normalization```: Whether to applied min-max normalization (default=True).\n> + ```pre_impute```: Whether to applied KNNImputer for pre-processing (default=False).\n> + ```opt```: The optimization algorithm for gradient descent, including SGD, Adam, Adadelta, Adagrad, AdamW, SparseAdam, Adamax, ASGD, LBFGS (default=\"Adam\").\n> + ```dist```:The distribution used for modeling, including gaussian, poisson, negative_bionomial (default=\"gaussian\").\n> + ```lr```: The learning rate for gradient descent (default=1e-2).\n> + ```n_epochs```: The number of optimization epochs (default=1000).\n> + ```lambda_C_regularizer```: The coefficient for the penalty term of global cell embeddings (default=0, indicating automatically adjust.).\n> + ```lambda_G_regularizer```: The coefficient for the penalty term of global gene embeddings (default=0).\n> + ```lambda_O_regularizer```: The coefficient list for the penalty term of global omics embeddings; the length of the list should be the same with the number of omics (default=[0, 0]).\n> + ```lambda_OC_regularizer```: The coefficient list for the penalty term of omics-specific cell embeddings; the length of the list should be the same with the number of omics, not avaiable for complete functions (default=[0, 0]).\n> + ```lambda_OG_regularizer```: The coefficient list for the penalty term of omics-specific gene embeddings, the length of the list should be the same with the number of omics, not avaiable for list functions (default=[0, 0]).\n> + ```batch_size```: The batch size used for gradient descent, not avaiable for complete functions (default=256).\n> + ```device```: CPU or GPU (default='cuda' if torch.cuda.is_available() else 'cpu').\n> + ```verbose```: Whether to print loss for each epoch (default=True).\n\n###  ```cell_analysis```\n#### ```knn_adj_matrix```\nConstruct KNN graph with the cell embeddings.\n> + ```k```: The number of neighbos used to construct KNN graph (default=20).\n#### ```snn_adj_matrix```\nConstruct SNN graph with the cell embeddings.\n> + ```k```: The number of neighbos used to construct SNN graph (default=20).\n#### ```jsnn_adj_matrix```\nConstruct jSNN graph with the cell embeddings.\n> + ```k```: The number of neighbos used to construct jaccard SNN graph (default=20).\n> + ```prune```: Set the score below the value to zero (default=1/15).\n#### ```RunLouvain```\nRun Louvain algorithm for the graph.\n> + ```k```: Terminate the search once this number of communities is detected (default=None).\n#### ```RunSpectral```\nRun Spectral clustering algorithm for the graph.\n> + ```k```: Number of clusters (default=5).\n#### ```RunLeiden```\nRun Leiden algorithm for the graph.\n\n###  ```gene_analysis```\n#### ```pearson_correlation```\nCalculate the correlation between the features.\n#### ```feature_projection```\nProject the feature embedding to cell embeddings and visualize with UMAP.\n> + ```umap_epochs```: The number of UMAP epochs for visualization (default=100).\n> + ```dimension```: The dimension of the embeddings to use (default=30).\n> + ```figure_name```: The saved figure name (default=\"feature_projections.png\").\n\n\n### Version history\n+ `v0.1.2.1`: Manuscript version.\n+ `v0.1.2`: Adjust correlation calculation.\n+ `v0.1.1`: Automatically adjusts the coefficients; Add downstream analyses; Extend to unpaired data.\n+ `v0.0.1`: Initial version.\n\n### Maintainer\nWANG Ruohan ruohawang2-c@my.cityu.edu.hk\n\n### Reference\n```\n@article{10.1093/nar/gkad570,\n    author = {Wang, Ruo Han and Wang, Jianping and Li, Shuai Cheng},\n    title = \"{Probabilistic tensor decomposition extracts better latent embeddings from single-cell multiomic data}\",\n    journal = {Nucleic Acids Research},\n    pages = {gkad570},\n    year = {2023},\n    month = {07},\n    issn = {0305-1048},\n    doi = {10.1093/nar/gkad570},\n    url = {https://doi.org/10.1093/nar/gkad570},\n    eprint = {https://academic.oup.com/nar/advance-article-pdf/doi/10.1093/nar/gkad570/50819911/gkad570.pdf},\n}\n```\n"
      },
      "source": "https://raw.githubusercontent.com/deepomicslab/SCOIT/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "BASH15*",
        "parent_header": [
          "Getting started",
          "Parameters"
        ],
        "type": "Text_excerpt",
        "value": "# SCOIT\nSCOIT is an implementation of a probabilistic tensor decomposition framework for single-cell multiomic data integration. SCOIT accepts the input of datasets from multiple omics, with missing values allowed.\n\n![image](https://github.com/deepomicslab/SCOIT/blob/main/framework.png)\n\n# Getting started\n\n## Prerequisite\n+ numpy\n+ scipy 1.6.0\n+ sklearn\n+ communities\n+ igraph\n+ leidenalg\n+ pytorch 1.9.0\n\n## Install\n```\npip install SCOIT\n```\n\n## Examples\nWe put the complete scripts for the analysis described in the manuscript under ```examples/``` directory for detailed usage examples and reproduction. The example data can be downloaded from [Google Drive](https://drive.google.com/drive/folders/1F_WBwNsHggjTqgFfTm6IugNKpb0xJTje?usp=sharing).\n\nThis is an example of multiple datasets when features have corresponding information.\n\n```Python\nfrom scoit import sc_multi_omics\n\ndata = np.array([expression_data, methylation_data])\nsc_model = sc_multi_omics()\npredict_data = sc_model.fit(data) # the imputed data\nnp.savetxt(\"global_cell_embeddings.csv\", sc_model.C, delimiter = ',') # global cell embeddings\nnp.savetxt(\"global_gene_embeddings.csv\", sc_model.G, delimiter = ',') # global gene embeddings\nnp.savetxt(\"local_cell_embeddings.csv\", sc_model.C, delimiter = ',') # omics-specific cell embeddings\nnp.savetxt(\"local_gene_embeddings.csv\", sc_model.G, delimiter = ',') # omics-specific gene embeddings\n\n# imputation\nimputed_expression_data = predict_data[0]\nimputed_methylation_data = predict_data[1]\n\n```\nWhen the features of different omics do not have corresponding information, please use the ```fit_list``` function, which accepts the input as a list of matrices.\n```Python\nfrom scoit import sc_multi_omics\n\ndata = [expression_data, protein_data]\nsc_model = sc_multi_omics()\npredict_data = sc_model.fit_list(data)\n```\nIf the input does not contain missing values (\"NA\"), we provide ```fit_complete``` and ```fit_list_complete``` functions to accelerate the optimization since they take advantage of matrix operations.\n```Python\nfrom scoit import sc_multi_omics\n\ndata = np.array([expression_data, methylation_data])\nsc_model = sc_multi_omics()\npredict_data = sc_model.fit_complete(data) # the imputed data\n```\n```Python\nfrom scoit import sc_multi_omics\n\ndata = [expression_data, protein_data]\nsc_model = sc_multi_omics()\npredict_data = sc_model.fit_list_complete(data)\n```\n\n## Parameters\n###  ```sc_multi_omics```\n> + ```K1```: The local element-wise product parameter, see the manuscript for details (default=30).\n> + ```K2```: The local element-wise product parameter (default=30).\n> + ```K3```: The local element-wise product parameter (default=30).\n> + ```random_seed```: The random seed used in optimization (default=123).\n\n###  ```fit```\n> + ```normalization```: Whether to applied min-max normalization (default=True).\n> + ```pre_impute```: Whether to applied KNNImputer for pre-processing (default=False).\n> + ```opt```: The optimization algorithm for gradient descent, including SGD, Adam, Adadelta, Adagrad, AdamW, SparseAdam, Adamax, ASGD, LBFGS (default=\"Adam\").\n> + ```dist```:The distribution used for modeling, including gaussian, poisson, negative_bionomial (default=\"gaussian\").\n> + ```lr```: The learning rate for gradient descent (default=1e-2).\n> + ```n_epochs```: The number of optimization epochs (default=1000).\n> + ```lambda_C_regularizer```: The coefficient for the penalty term of global cell embeddings (default=0, indicating automatically adjust.).\n> + ```lambda_G_regularizer```: The coefficient for the penalty term of global gene embeddings (default=0).\n> + ```lambda_O_regularizer```: The coefficient list for the penalty term of global omics embeddings; the length of the list should be the same with the number of omics (default=[0, 0]).\n> + ```lambda_OC_regularizer```: The coefficient list for the penalty term of omics-specific cell embeddings; the length of the list should be the same with the number of omics, not avaiable for complete functions (default=[0, 0]).\n> + ```lambda_OG_regularizer```: The coefficient list for the penalty term of omics-specific gene embeddings, the length of the list should be the same with the number of omics, not avaiable for list functions (default=[0, 0]).\n> + ```batch_size```: The batch size used for gradient descent, not avaiable for complete functions (default=256).\n> + ```device```: CPU or GPU (default='cuda' if torch.cuda.is_available() else 'cpu').\n> + ```verbose```: Whether to print loss for each epoch (default=True).\n\n###  ```cell_analysis```\n#### ```knn_adj_matrix```\nConstruct KNN graph with the cell embeddings.\n> + ```k```: The number of neighbos used to construct KNN graph (default=20).\n#### ```snn_adj_matrix```\nConstruct SNN graph with the cell embeddings.\n> + ```k```: The number of neighbos used to construct SNN graph (default=20).\n#### ```jsnn_adj_matrix```\nConstruct jSNN graph with the cell embeddings.\n> + ```k```: The number of neighbos used to construct jaccard SNN graph (default=20).\n> + ```prune```: Set the score below the value to zero (default=1/15).\n#### ```RunLouvain```\nRun Louvain algorithm for the graph.\n> + ```k```: Terminate the search once this number of communities is detected (default=None).\n#### ```RunSpectral```\nRun Spectral clustering algorithm for the graph.\n> + ```k```: Number of clusters (default=5).\n#### ```RunLeiden```\nRun Leiden algorithm for the graph.\n\n###  ```gene_analysis```\n#### ```pearson_correlation```\nCalculate the correlation between the features.\n#### ```feature_projection```\nProject the feature embedding to cell embeddings and visualize with UMAP.\n> + ```umap_epochs```: The number of UMAP epochs for visualization (default=100).\n> + ```dimension```: The dimension of the embeddings to use (default=30).\n> + ```figure_name```: The saved figure name (default=\"feature_projections.png\").\n\n\n### Version history\n+ `v0.1.2.1`: Manuscript version.\n+ `v0.1.2`: Adjust correlation calculation.\n+ `v0.1.1`: Automatically adjusts the coefficients; Add downstream analyses; Extend to unpaired data.\n+ `v0.0.1`: Initial version.\n\n### Maintainer\nWANG Ruohan ruohawang2-c@my.cityu.edu.hk\n\n### Reference\n```\n@article{10.1093/nar/gkad570,\n    author = {Wang, Ruo Han and Wang, Jianping and Li, Shuai Cheng},\n    title = \"{Probabilistic tensor decomposition extracts better latent embeddings from single-cell multiomic data}\",\n    journal = {Nucleic Acids Research},\n    pages = {gkad570},\n    year = {2023},\n    month = {07},\n    issn = {0305-1048},\n    doi = {10.1093/nar/gkad570},\n    url = {https://doi.org/10.1093/nar/gkad570},\n    eprint = {https://academic.oup.com/nar/advance-article-pdf/doi/10.1093/nar/gkad570/50819911/gkad570.pdf},\n}\n```\n"
      },
      "source": "https://raw.githubusercontent.com/deepomicslab/SCOIT/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "BASH31*",
        "parent_header": [
          "Getting started",
          "Parameters",
          "BASH30*"
        ],
        "type": "Text_excerpt",
        "value": "# SCOIT\nSCOIT is an implementation of a probabilistic tensor decomposition framework for single-cell multiomic data integration. SCOIT accepts the input of datasets from multiple omics, with missing values allowed.\n\n![image](https://github.com/deepomicslab/SCOIT/blob/main/framework.png)\n\n# Getting started\n\n## Prerequisite\n+ numpy\n+ scipy 1.6.0\n+ sklearn\n+ communities\n+ igraph\n+ leidenalg\n+ pytorch 1.9.0\n\n## Install\n```\npip install SCOIT\n```\n\n## Examples\nWe put the complete scripts for the analysis described in the manuscript under ```examples/``` directory for detailed usage examples and reproduction. The example data can be downloaded from [Google Drive](https://drive.google.com/drive/folders/1F_WBwNsHggjTqgFfTm6IugNKpb0xJTje?usp=sharing).\n\nThis is an example of multiple datasets when features have corresponding information.\n\n```Python\nfrom scoit import sc_multi_omics\n\ndata = np.array([expression_data, methylation_data])\nsc_model = sc_multi_omics()\npredict_data = sc_model.fit(data) # the imputed data\nnp.savetxt(\"global_cell_embeddings.csv\", sc_model.C, delimiter = ',') # global cell embeddings\nnp.savetxt(\"global_gene_embeddings.csv\", sc_model.G, delimiter = ',') # global gene embeddings\nnp.savetxt(\"local_cell_embeddings.csv\", sc_model.C, delimiter = ',') # omics-specific cell embeddings\nnp.savetxt(\"local_gene_embeddings.csv\", sc_model.G, delimiter = ',') # omics-specific gene embeddings\n\n# imputation\nimputed_expression_data = predict_data[0]\nimputed_methylation_data = predict_data[1]\n\n```\nWhen the features of different omics do not have corresponding information, please use the ```fit_list``` function, which accepts the input as a list of matrices.\n```Python\nfrom scoit import sc_multi_omics\n\ndata = [expression_data, protein_data]\nsc_model = sc_multi_omics()\npredict_data = sc_model.fit_list(data)\n```\nIf the input does not contain missing values (\"NA\"), we provide ```fit_complete``` and ```fit_list_complete``` functions to accelerate the optimization since they take advantage of matrix operations.\n```Python\nfrom scoit import sc_multi_omics\n\ndata = np.array([expression_data, methylation_data])\nsc_model = sc_multi_omics()\npredict_data = sc_model.fit_complete(data) # the imputed data\n```\n```Python\nfrom scoit import sc_multi_omics\n\ndata = [expression_data, protein_data]\nsc_model = sc_multi_omics()\npredict_data = sc_model.fit_list_complete(data)\n```\n\n## Parameters\n###  ```sc_multi_omics```\n> + ```K1```: The local element-wise product parameter, see the manuscript for details (default=30).\n> + ```K2```: The local element-wise product parameter (default=30).\n> + ```K3```: The local element-wise product parameter (default=30).\n> + ```random_seed```: The random seed used in optimization (default=123).\n\n###  ```fit```\n> + ```normalization```: Whether to applied min-max normalization (default=True).\n> + ```pre_impute```: Whether to applied KNNImputer for pre-processing (default=False).\n> + ```opt```: The optimization algorithm for gradient descent, including SGD, Adam, Adadelta, Adagrad, AdamW, SparseAdam, Adamax, ASGD, LBFGS (default=\"Adam\").\n> + ```dist```:The distribution used for modeling, including gaussian, poisson, negative_bionomial (default=\"gaussian\").\n> + ```lr```: The learning rate for gradient descent (default=1e-2).\n> + ```n_epochs```: The number of optimization epochs (default=1000).\n> + ```lambda_C_regularizer```: The coefficient for the penalty term of global cell embeddings (default=0, indicating automatically adjust.).\n> + ```lambda_G_regularizer```: The coefficient for the penalty term of global gene embeddings (default=0).\n> + ```lambda_O_regularizer```: The coefficient list for the penalty term of global omics embeddings; the length of the list should be the same with the number of omics (default=[0, 0]).\n> + ```lambda_OC_regularizer```: The coefficient list for the penalty term of omics-specific cell embeddings; the length of the list should be the same with the number of omics, not avaiable for complete functions (default=[0, 0]).\n> + ```lambda_OG_regularizer```: The coefficient list for the penalty term of omics-specific gene embeddings, the length of the list should be the same with the number of omics, not avaiable for list functions (default=[0, 0]).\n> + ```batch_size```: The batch size used for gradient descent, not avaiable for complete functions (default=256).\n> + ```device```: CPU or GPU (default='cuda' if torch.cuda.is_available() else 'cpu').\n> + ```verbose```: Whether to print loss for each epoch (default=True).\n\n###  ```cell_analysis```\n#### ```knn_adj_matrix```\nConstruct KNN graph with the cell embeddings.\n> + ```k```: The number of neighbos used to construct KNN graph (default=20).\n#### ```snn_adj_matrix```\nConstruct SNN graph with the cell embeddings.\n> + ```k```: The number of neighbos used to construct SNN graph (default=20).\n#### ```jsnn_adj_matrix```\nConstruct jSNN graph with the cell embeddings.\n> + ```k```: The number of neighbos used to construct jaccard SNN graph (default=20).\n> + ```prune```: Set the score below the value to zero (default=1/15).\n#### ```RunLouvain```\nRun Louvain algorithm for the graph.\n> + ```k```: Terminate the search once this number of communities is detected (default=None).\n#### ```RunSpectral```\nRun Spectral clustering algorithm for the graph.\n> + ```k```: Number of clusters (default=5).\n#### ```RunLeiden```\nRun Leiden algorithm for the graph.\n\n###  ```gene_analysis```\n#### ```pearson_correlation```\nCalculate the correlation between the features.\n#### ```feature_projection```\nProject the feature embedding to cell embeddings and visualize with UMAP.\n> + ```umap_epochs```: The number of UMAP epochs for visualization (default=100).\n> + ```dimension```: The dimension of the embeddings to use (default=30).\n> + ```figure_name```: The saved figure name (default=\"feature_projections.png\").\n\n\n### Version history\n+ `v0.1.2.1`: Manuscript version.\n+ `v0.1.2`: Adjust correlation calculation.\n+ `v0.1.1`: Automatically adjusts the coefficients; Add downstream analyses; Extend to unpaired data.\n+ `v0.0.1`: Initial version.\n\n### Maintainer\nWANG Ruohan ruohawang2-c@my.cityu.edu.hk\n\n### Reference\n```\n@article{10.1093/nar/gkad570,\n    author = {Wang, Ruo Han and Wang, Jianping and Li, Shuai Cheng},\n    title = \"{Probabilistic tensor decomposition extracts better latent embeddings from single-cell multiomic data}\",\n    journal = {Nucleic Acids Research},\n    pages = {gkad570},\n    year = {2023},\n    month = {07},\n    issn = {0305-1048},\n    doi = {10.1093/nar/gkad570},\n    url = {https://doi.org/10.1093/nar/gkad570},\n    eprint = {https://academic.oup.com/nar/advance-article-pdf/doi/10.1093/nar/gkad570/50819911/gkad570.pdf},\n}\n```\n"
      },
      "source": "https://raw.githubusercontent.com/deepomicslab/SCOIT/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "BASH33*",
        "parent_header": [
          "Getting started",
          "Parameters",
          "BASH30*"
        ],
        "type": "Text_excerpt",
        "value": "# SCOIT\nSCOIT is an implementation of a probabilistic tensor decomposition framework for single-cell multiomic data integration. SCOIT accepts the input of datasets from multiple omics, with missing values allowed.\n\n![image](https://github.com/deepomicslab/SCOIT/blob/main/framework.png)\n\n# Getting started\n\n## Prerequisite\n+ numpy\n+ scipy 1.6.0\n+ sklearn\n+ communities\n+ igraph\n+ leidenalg\n+ pytorch 1.9.0\n\n## Install\n```\npip install SCOIT\n```\n\n## Examples\nWe put the complete scripts for the analysis described in the manuscript under ```examples/``` directory for detailed usage examples and reproduction. The example data can be downloaded from [Google Drive](https://drive.google.com/drive/folders/1F_WBwNsHggjTqgFfTm6IugNKpb0xJTje?usp=sharing).\n\nThis is an example of multiple datasets when features have corresponding information.\n\n```Python\nfrom scoit import sc_multi_omics\n\ndata = np.array([expression_data, methylation_data])\nsc_model = sc_multi_omics()\npredict_data = sc_model.fit(data) # the imputed data\nnp.savetxt(\"global_cell_embeddings.csv\", sc_model.C, delimiter = ',') # global cell embeddings\nnp.savetxt(\"global_gene_embeddings.csv\", sc_model.G, delimiter = ',') # global gene embeddings\nnp.savetxt(\"local_cell_embeddings.csv\", sc_model.C, delimiter = ',') # omics-specific cell embeddings\nnp.savetxt(\"local_gene_embeddings.csv\", sc_model.G, delimiter = ',') # omics-specific gene embeddings\n\n# imputation\nimputed_expression_data = predict_data[0]\nimputed_methylation_data = predict_data[1]\n\n```\nWhen the features of different omics do not have corresponding information, please use the ```fit_list``` function, which accepts the input as a list of matrices.\n```Python\nfrom scoit import sc_multi_omics\n\ndata = [expression_data, protein_data]\nsc_model = sc_multi_omics()\npredict_data = sc_model.fit_list(data)\n```\nIf the input does not contain missing values (\"NA\"), we provide ```fit_complete``` and ```fit_list_complete``` functions to accelerate the optimization since they take advantage of matrix operations.\n```Python\nfrom scoit import sc_multi_omics\n\ndata = np.array([expression_data, methylation_data])\nsc_model = sc_multi_omics()\npredict_data = sc_model.fit_complete(data) # the imputed data\n```\n```Python\nfrom scoit import sc_multi_omics\n\ndata = [expression_data, protein_data]\nsc_model = sc_multi_omics()\npredict_data = sc_model.fit_list_complete(data)\n```\n\n## Parameters\n###  ```sc_multi_omics```\n> + ```K1```: The local element-wise product parameter, see the manuscript for details (default=30).\n> + ```K2```: The local element-wise product parameter (default=30).\n> + ```K3```: The local element-wise product parameter (default=30).\n> + ```random_seed```: The random seed used in optimization (default=123).\n\n###  ```fit```\n> + ```normalization```: Whether to applied min-max normalization (default=True).\n> + ```pre_impute```: Whether to applied KNNImputer for pre-processing (default=False).\n> + ```opt```: The optimization algorithm for gradient descent, including SGD, Adam, Adadelta, Adagrad, AdamW, SparseAdam, Adamax, ASGD, LBFGS (default=\"Adam\").\n> + ```dist```:The distribution used for modeling, including gaussian, poisson, negative_bionomial (default=\"gaussian\").\n> + ```lr```: The learning rate for gradient descent (default=1e-2).\n> + ```n_epochs```: The number of optimization epochs (default=1000).\n> + ```lambda_C_regularizer```: The coefficient for the penalty term of global cell embeddings (default=0, indicating automatically adjust.).\n> + ```lambda_G_regularizer```: The coefficient for the penalty term of global gene embeddings (default=0).\n> + ```lambda_O_regularizer```: The coefficient list for the penalty term of global omics embeddings; the length of the list should be the same with the number of omics (default=[0, 0]).\n> + ```lambda_OC_regularizer```: The coefficient list for the penalty term of omics-specific cell embeddings; the length of the list should be the same with the number of omics, not avaiable for complete functions (default=[0, 0]).\n> + ```lambda_OG_regularizer```: The coefficient list for the penalty term of omics-specific gene embeddings, the length of the list should be the same with the number of omics, not avaiable for list functions (default=[0, 0]).\n> + ```batch_size```: The batch size used for gradient descent, not avaiable for complete functions (default=256).\n> + ```device```: CPU or GPU (default='cuda' if torch.cuda.is_available() else 'cpu').\n> + ```verbose```: Whether to print loss for each epoch (default=True).\n\n###  ```cell_analysis```\n#### ```knn_adj_matrix```\nConstruct KNN graph with the cell embeddings.\n> + ```k```: The number of neighbos used to construct KNN graph (default=20).\n#### ```snn_adj_matrix```\nConstruct SNN graph with the cell embeddings.\n> + ```k```: The number of neighbos used to construct SNN graph (default=20).\n#### ```jsnn_adj_matrix```\nConstruct jSNN graph with the cell embeddings.\n> + ```k```: The number of neighbos used to construct jaccard SNN graph (default=20).\n> + ```prune```: Set the score below the value to zero (default=1/15).\n#### ```RunLouvain```\nRun Louvain algorithm for the graph.\n> + ```k```: Terminate the search once this number of communities is detected (default=None).\n#### ```RunSpectral```\nRun Spectral clustering algorithm for the graph.\n> + ```k```: Number of clusters (default=5).\n#### ```RunLeiden```\nRun Leiden algorithm for the graph.\n\n###  ```gene_analysis```\n#### ```pearson_correlation```\nCalculate the correlation between the features.\n#### ```feature_projection```\nProject the feature embedding to cell embeddings and visualize with UMAP.\n> + ```umap_epochs```: The number of UMAP epochs for visualization (default=100).\n> + ```dimension```: The dimension of the embeddings to use (default=30).\n> + ```figure_name```: The saved figure name (default=\"feature_projections.png\").\n\n\n### Version history\n+ `v0.1.2.1`: Manuscript version.\n+ `v0.1.2`: Adjust correlation calculation.\n+ `v0.1.1`: Automatically adjusts the coefficients; Add downstream analyses; Extend to unpaired data.\n+ `v0.0.1`: Initial version.\n\n### Maintainer\nWANG Ruohan ruohawang2-c@my.cityu.edu.hk\n\n### Reference\n```\n@article{10.1093/nar/gkad570,\n    author = {Wang, Ruo Han and Wang, Jianping and Li, Shuai Cheng},\n    title = \"{Probabilistic tensor decomposition extracts better latent embeddings from single-cell multiomic data}\",\n    journal = {Nucleic Acids Research},\n    pages = {gkad570},\n    year = {2023},\n    month = {07},\n    issn = {0305-1048},\n    doi = {10.1093/nar/gkad570},\n    url = {https://doi.org/10.1093/nar/gkad570},\n    eprint = {https://academic.oup.com/nar/advance-article-pdf/doi/10.1093/nar/gkad570/50819911/gkad570.pdf},\n}\n```\n"
      },
      "source": "https://raw.githubusercontent.com/deepomicslab/SCOIT/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "BASH34*",
        "parent_header": [
          "Getting started",
          "Parameters",
          "BASH30*"
        ],
        "type": "Text_excerpt",
        "value": "# SCOIT\nSCOIT is an implementation of a probabilistic tensor decomposition framework for single-cell multiomic data integration. SCOIT accepts the input of datasets from multiple omics, with missing values allowed.\n\n![image](https://github.com/deepomicslab/SCOIT/blob/main/framework.png)\n\n# Getting started\n\n## Prerequisite\n+ numpy\n+ scipy 1.6.0\n+ sklearn\n+ communities\n+ igraph\n+ leidenalg\n+ pytorch 1.9.0\n\n## Install\n```\npip install SCOIT\n```\n\n## Examples\nWe put the complete scripts for the analysis described in the manuscript under ```examples/``` directory for detailed usage examples and reproduction. The example data can be downloaded from [Google Drive](https://drive.google.com/drive/folders/1F_WBwNsHggjTqgFfTm6IugNKpb0xJTje?usp=sharing).\n\nThis is an example of multiple datasets when features have corresponding information.\n\n```Python\nfrom scoit import sc_multi_omics\n\ndata = np.array([expression_data, methylation_data])\nsc_model = sc_multi_omics()\npredict_data = sc_model.fit(data) # the imputed data\nnp.savetxt(\"global_cell_embeddings.csv\", sc_model.C, delimiter = ',') # global cell embeddings\nnp.savetxt(\"global_gene_embeddings.csv\", sc_model.G, delimiter = ',') # global gene embeddings\nnp.savetxt(\"local_cell_embeddings.csv\", sc_model.C, delimiter = ',') # omics-specific cell embeddings\nnp.savetxt(\"local_gene_embeddings.csv\", sc_model.G, delimiter = ',') # omics-specific gene embeddings\n\n# imputation\nimputed_expression_data = predict_data[0]\nimputed_methylation_data = predict_data[1]\n\n```\nWhen the features of different omics do not have corresponding information, please use the ```fit_list``` function, which accepts the input as a list of matrices.\n```Python\nfrom scoit import sc_multi_omics\n\ndata = [expression_data, protein_data]\nsc_model = sc_multi_omics()\npredict_data = sc_model.fit_list(data)\n```\nIf the input does not contain missing values (\"NA\"), we provide ```fit_complete``` and ```fit_list_complete``` functions to accelerate the optimization since they take advantage of matrix operations.\n```Python\nfrom scoit import sc_multi_omics\n\ndata = np.array([expression_data, methylation_data])\nsc_model = sc_multi_omics()\npredict_data = sc_model.fit_complete(data) # the imputed data\n```\n```Python\nfrom scoit import sc_multi_omics\n\ndata = [expression_data, protein_data]\nsc_model = sc_multi_omics()\npredict_data = sc_model.fit_list_complete(data)\n```\n\n## Parameters\n###  ```sc_multi_omics```\n> + ```K1```: The local element-wise product parameter, see the manuscript for details (default=30).\n> + ```K2```: The local element-wise product parameter (default=30).\n> + ```K3```: The local element-wise product parameter (default=30).\n> + ```random_seed```: The random seed used in optimization (default=123).\n\n###  ```fit```\n> + ```normalization```: Whether to applied min-max normalization (default=True).\n> + ```pre_impute```: Whether to applied KNNImputer for pre-processing (default=False).\n> + ```opt```: The optimization algorithm for gradient descent, including SGD, Adam, Adadelta, Adagrad, AdamW, SparseAdam, Adamax, ASGD, LBFGS (default=\"Adam\").\n> + ```dist```:The distribution used for modeling, including gaussian, poisson, negative_bionomial (default=\"gaussian\").\n> + ```lr```: The learning rate for gradient descent (default=1e-2).\n> + ```n_epochs```: The number of optimization epochs (default=1000).\n> + ```lambda_C_regularizer```: The coefficient for the penalty term of global cell embeddings (default=0, indicating automatically adjust.).\n> + ```lambda_G_regularizer```: The coefficient for the penalty term of global gene embeddings (default=0).\n> + ```lambda_O_regularizer```: The coefficient list for the penalty term of global omics embeddings; the length of the list should be the same with the number of omics (default=[0, 0]).\n> + ```lambda_OC_regularizer```: The coefficient list for the penalty term of omics-specific cell embeddings; the length of the list should be the same with the number of omics, not avaiable for complete functions (default=[0, 0]).\n> + ```lambda_OG_regularizer```: The coefficient list for the penalty term of omics-specific gene embeddings, the length of the list should be the same with the number of omics, not avaiable for list functions (default=[0, 0]).\n> + ```batch_size```: The batch size used for gradient descent, not avaiable for complete functions (default=256).\n> + ```device```: CPU or GPU (default='cuda' if torch.cuda.is_available() else 'cpu').\n> + ```verbose```: Whether to print loss for each epoch (default=True).\n\n###  ```cell_analysis```\n#### ```knn_adj_matrix```\nConstruct KNN graph with the cell embeddings.\n> + ```k```: The number of neighbos used to construct KNN graph (default=20).\n#### ```snn_adj_matrix```\nConstruct SNN graph with the cell embeddings.\n> + ```k```: The number of neighbos used to construct SNN graph (default=20).\n#### ```jsnn_adj_matrix```\nConstruct jSNN graph with the cell embeddings.\n> + ```k```: The number of neighbos used to construct jaccard SNN graph (default=20).\n> + ```prune```: Set the score below the value to zero (default=1/15).\n#### ```RunLouvain```\nRun Louvain algorithm for the graph.\n> + ```k```: Terminate the search once this number of communities is detected (default=None).\n#### ```RunSpectral```\nRun Spectral clustering algorithm for the graph.\n> + ```k```: Number of clusters (default=5).\n#### ```RunLeiden```\nRun Leiden algorithm for the graph.\n\n###  ```gene_analysis```\n#### ```pearson_correlation```\nCalculate the correlation between the features.\n#### ```feature_projection```\nProject the feature embedding to cell embeddings and visualize with UMAP.\n> + ```umap_epochs```: The number of UMAP epochs for visualization (default=100).\n> + ```dimension```: The dimension of the embeddings to use (default=30).\n> + ```figure_name```: The saved figure name (default=\"feature_projections.png\").\n\n\n### Version history\n+ `v0.1.2.1`: Manuscript version.\n+ `v0.1.2`: Adjust correlation calculation.\n+ `v0.1.1`: Automatically adjusts the coefficients; Add downstream analyses; Extend to unpaired data.\n+ `v0.0.1`: Initial version.\n\n### Maintainer\nWANG Ruohan ruohawang2-c@my.cityu.edu.hk\n\n### Reference\n```\n@article{10.1093/nar/gkad570,\n    author = {Wang, Ruo Han and Wang, Jianping and Li, Shuai Cheng},\n    title = \"{Probabilistic tensor decomposition extracts better latent embeddings from single-cell multiomic data}\",\n    journal = {Nucleic Acids Research},\n    pages = {gkad570},\n    year = {2023},\n    month = {07},\n    issn = {0305-1048},\n    doi = {10.1093/nar/gkad570},\n    url = {https://doi.org/10.1093/nar/gkad570},\n    eprint = {https://academic.oup.com/nar/advance-article-pdf/doi/10.1093/nar/gkad570/50819911/gkad570.pdf},\n}\n```\n"
      },
      "source": "https://raw.githubusercontent.com/deepomicslab/SCOIT/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "BASH36*",
        "parent_header": [
          "Getting started",
          "Parameters",
          "BASH30*"
        ],
        "type": "Text_excerpt",
        "value": "# SCOIT\nSCOIT is an implementation of a probabilistic tensor decomposition framework for single-cell multiomic data integration. SCOIT accepts the input of datasets from multiple omics, with missing values allowed.\n\n![image](https://github.com/deepomicslab/SCOIT/blob/main/framework.png)\n\n# Getting started\n\n## Prerequisite\n+ numpy\n+ scipy 1.6.0\n+ sklearn\n+ communities\n+ igraph\n+ leidenalg\n+ pytorch 1.9.0\n\n## Install\n```\npip install SCOIT\n```\n\n## Examples\nWe put the complete scripts for the analysis described in the manuscript under ```examples/``` directory for detailed usage examples and reproduction. The example data can be downloaded from [Google Drive](https://drive.google.com/drive/folders/1F_WBwNsHggjTqgFfTm6IugNKpb0xJTje?usp=sharing).\n\nThis is an example of multiple datasets when features have corresponding information.\n\n```Python\nfrom scoit import sc_multi_omics\n\ndata = np.array([expression_data, methylation_data])\nsc_model = sc_multi_omics()\npredict_data = sc_model.fit(data) # the imputed data\nnp.savetxt(\"global_cell_embeddings.csv\", sc_model.C, delimiter = ',') # global cell embeddings\nnp.savetxt(\"global_gene_embeddings.csv\", sc_model.G, delimiter = ',') # global gene embeddings\nnp.savetxt(\"local_cell_embeddings.csv\", sc_model.C, delimiter = ',') # omics-specific cell embeddings\nnp.savetxt(\"local_gene_embeddings.csv\", sc_model.G, delimiter = ',') # omics-specific gene embeddings\n\n# imputation\nimputed_expression_data = predict_data[0]\nimputed_methylation_data = predict_data[1]\n\n```\nWhen the features of different omics do not have corresponding information, please use the ```fit_list``` function, which accepts the input as a list of matrices.\n```Python\nfrom scoit import sc_multi_omics\n\ndata = [expression_data, protein_data]\nsc_model = sc_multi_omics()\npredict_data = sc_model.fit_list(data)\n```\nIf the input does not contain missing values (\"NA\"), we provide ```fit_complete``` and ```fit_list_complete``` functions to accelerate the optimization since they take advantage of matrix operations.\n```Python\nfrom scoit import sc_multi_omics\n\ndata = np.array([expression_data, methylation_data])\nsc_model = sc_multi_omics()\npredict_data = sc_model.fit_complete(data) # the imputed data\n```\n```Python\nfrom scoit import sc_multi_omics\n\ndata = [expression_data, protein_data]\nsc_model = sc_multi_omics()\npredict_data = sc_model.fit_list_complete(data)\n```\n\n## Parameters\n###  ```sc_multi_omics```\n> + ```K1```: The local element-wise product parameter, see the manuscript for details (default=30).\n> + ```K2```: The local element-wise product parameter (default=30).\n> + ```K3```: The local element-wise product parameter (default=30).\n> + ```random_seed```: The random seed used in optimization (default=123).\n\n###  ```fit```\n> + ```normalization```: Whether to applied min-max normalization (default=True).\n> + ```pre_impute```: Whether to applied KNNImputer for pre-processing (default=False).\n> + ```opt```: The optimization algorithm for gradient descent, including SGD, Adam, Adadelta, Adagrad, AdamW, SparseAdam, Adamax, ASGD, LBFGS (default=\"Adam\").\n> + ```dist```:The distribution used for modeling, including gaussian, poisson, negative_bionomial (default=\"gaussian\").\n> + ```lr```: The learning rate for gradient descent (default=1e-2).\n> + ```n_epochs```: The number of optimization epochs (default=1000).\n> + ```lambda_C_regularizer```: The coefficient for the penalty term of global cell embeddings (default=0, indicating automatically adjust.).\n> + ```lambda_G_regularizer```: The coefficient for the penalty term of global gene embeddings (default=0).\n> + ```lambda_O_regularizer```: The coefficient list for the penalty term of global omics embeddings; the length of the list should be the same with the number of omics (default=[0, 0]).\n> + ```lambda_OC_regularizer```: The coefficient list for the penalty term of omics-specific cell embeddings; the length of the list should be the same with the number of omics, not avaiable for complete functions (default=[0, 0]).\n> + ```lambda_OG_regularizer```: The coefficient list for the penalty term of omics-specific gene embeddings, the length of the list should be the same with the number of omics, not avaiable for list functions (default=[0, 0]).\n> + ```batch_size```: The batch size used for gradient descent, not avaiable for complete functions (default=256).\n> + ```device```: CPU or GPU (default='cuda' if torch.cuda.is_available() else 'cpu').\n> + ```verbose```: Whether to print loss for each epoch (default=True).\n\n###  ```cell_analysis```\n#### ```knn_adj_matrix```\nConstruct KNN graph with the cell embeddings.\n> + ```k```: The number of neighbos used to construct KNN graph (default=20).\n#### ```snn_adj_matrix```\nConstruct SNN graph with the cell embeddings.\n> + ```k```: The number of neighbos used to construct SNN graph (default=20).\n#### ```jsnn_adj_matrix```\nConstruct jSNN graph with the cell embeddings.\n> + ```k```: The number of neighbos used to construct jaccard SNN graph (default=20).\n> + ```prune```: Set the score below the value to zero (default=1/15).\n#### ```RunLouvain```\nRun Louvain algorithm for the graph.\n> + ```k```: Terminate the search once this number of communities is detected (default=None).\n#### ```RunSpectral```\nRun Spectral clustering algorithm for the graph.\n> + ```k```: Number of clusters (default=5).\n#### ```RunLeiden```\nRun Leiden algorithm for the graph.\n\n###  ```gene_analysis```\n#### ```pearson_correlation```\nCalculate the correlation between the features.\n#### ```feature_projection```\nProject the feature embedding to cell embeddings and visualize with UMAP.\n> + ```umap_epochs```: The number of UMAP epochs for visualization (default=100).\n> + ```dimension```: The dimension of the embeddings to use (default=30).\n> + ```figure_name```: The saved figure name (default=\"feature_projections.png\").\n\n\n### Version history\n+ `v0.1.2.1`: Manuscript version.\n+ `v0.1.2`: Adjust correlation calculation.\n+ `v0.1.1`: Automatically adjusts the coefficients; Add downstream analyses; Extend to unpaired data.\n+ `v0.0.1`: Initial version.\n\n### Maintainer\nWANG Ruohan ruohawang2-c@my.cityu.edu.hk\n\n### Reference\n```\n@article{10.1093/nar/gkad570,\n    author = {Wang, Ruo Han and Wang, Jianping and Li, Shuai Cheng},\n    title = \"{Probabilistic tensor decomposition extracts better latent embeddings from single-cell multiomic data}\",\n    journal = {Nucleic Acids Research},\n    pages = {gkad570},\n    year = {2023},\n    month = {07},\n    issn = {0305-1048},\n    doi = {10.1093/nar/gkad570},\n    url = {https://doi.org/10.1093/nar/gkad570},\n    eprint = {https://academic.oup.com/nar/advance-article-pdf/doi/10.1093/nar/gkad570/50819911/gkad570.pdf},\n}\n```\n"
      },
      "source": "https://raw.githubusercontent.com/deepomicslab/SCOIT/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "BASH37*",
        "parent_header": [
          "Getting started",
          "Parameters",
          "BASH30*"
        ],
        "type": "Text_excerpt",
        "value": "# SCOIT\nSCOIT is an implementation of a probabilistic tensor decomposition framework for single-cell multiomic data integration. SCOIT accepts the input of datasets from multiple omics, with missing values allowed.\n\n![image](https://github.com/deepomicslab/SCOIT/blob/main/framework.png)\n\n# Getting started\n\n## Prerequisite\n+ numpy\n+ scipy 1.6.0\n+ sklearn\n+ communities\n+ igraph\n+ leidenalg\n+ pytorch 1.9.0\n\n## Install\n```\npip install SCOIT\n```\n\n## Examples\nWe put the complete scripts for the analysis described in the manuscript under ```examples/``` directory for detailed usage examples and reproduction. The example data can be downloaded from [Google Drive](https://drive.google.com/drive/folders/1F_WBwNsHggjTqgFfTm6IugNKpb0xJTje?usp=sharing).\n\nThis is an example of multiple datasets when features have corresponding information.\n\n```Python\nfrom scoit import sc_multi_omics\n\ndata = np.array([expression_data, methylation_data])\nsc_model = sc_multi_omics()\npredict_data = sc_model.fit(data) # the imputed data\nnp.savetxt(\"global_cell_embeddings.csv\", sc_model.C, delimiter = ',') # global cell embeddings\nnp.savetxt(\"global_gene_embeddings.csv\", sc_model.G, delimiter = ',') # global gene embeddings\nnp.savetxt(\"local_cell_embeddings.csv\", sc_model.C, delimiter = ',') # omics-specific cell embeddings\nnp.savetxt(\"local_gene_embeddings.csv\", sc_model.G, delimiter = ',') # omics-specific gene embeddings\n\n# imputation\nimputed_expression_data = predict_data[0]\nimputed_methylation_data = predict_data[1]\n\n```\nWhen the features of different omics do not have corresponding information, please use the ```fit_list``` function, which accepts the input as a list of matrices.\n```Python\nfrom scoit import sc_multi_omics\n\ndata = [expression_data, protein_data]\nsc_model = sc_multi_omics()\npredict_data = sc_model.fit_list(data)\n```\nIf the input does not contain missing values (\"NA\"), we provide ```fit_complete``` and ```fit_list_complete``` functions to accelerate the optimization since they take advantage of matrix operations.\n```Python\nfrom scoit import sc_multi_omics\n\ndata = np.array([expression_data, methylation_data])\nsc_model = sc_multi_omics()\npredict_data = sc_model.fit_complete(data) # the imputed data\n```\n```Python\nfrom scoit import sc_multi_omics\n\ndata = [expression_data, protein_data]\nsc_model = sc_multi_omics()\npredict_data = sc_model.fit_list_complete(data)\n```\n\n## Parameters\n###  ```sc_multi_omics```\n> + ```K1```: The local element-wise product parameter, see the manuscript for details (default=30).\n> + ```K2```: The local element-wise product parameter (default=30).\n> + ```K3```: The local element-wise product parameter (default=30).\n> + ```random_seed```: The random seed used in optimization (default=123).\n\n###  ```fit```\n> + ```normalization```: Whether to applied min-max normalization (default=True).\n> + ```pre_impute```: Whether to applied KNNImputer for pre-processing (default=False).\n> + ```opt```: The optimization algorithm for gradient descent, including SGD, Adam, Adadelta, Adagrad, AdamW, SparseAdam, Adamax, ASGD, LBFGS (default=\"Adam\").\n> + ```dist```:The distribution used for modeling, including gaussian, poisson, negative_bionomial (default=\"gaussian\").\n> + ```lr```: The learning rate for gradient descent (default=1e-2).\n> + ```n_epochs```: The number of optimization epochs (default=1000).\n> + ```lambda_C_regularizer```: The coefficient for the penalty term of global cell embeddings (default=0, indicating automatically adjust.).\n> + ```lambda_G_regularizer```: The coefficient for the penalty term of global gene embeddings (default=0).\n> + ```lambda_O_regularizer```: The coefficient list for the penalty term of global omics embeddings; the length of the list should be the same with the number of omics (default=[0, 0]).\n> + ```lambda_OC_regularizer```: The coefficient list for the penalty term of omics-specific cell embeddings; the length of the list should be the same with the number of omics, not avaiable for complete functions (default=[0, 0]).\n> + ```lambda_OG_regularizer```: The coefficient list for the penalty term of omics-specific gene embeddings, the length of the list should be the same with the number of omics, not avaiable for list functions (default=[0, 0]).\n> + ```batch_size```: The batch size used for gradient descent, not avaiable for complete functions (default=256).\n> + ```device```: CPU or GPU (default='cuda' if torch.cuda.is_available() else 'cpu').\n> + ```verbose```: Whether to print loss for each epoch (default=True).\n\n###  ```cell_analysis```\n#### ```knn_adj_matrix```\nConstruct KNN graph with the cell embeddings.\n> + ```k```: The number of neighbos used to construct KNN graph (default=20).\n#### ```snn_adj_matrix```\nConstruct SNN graph with the cell embeddings.\n> + ```k```: The number of neighbos used to construct SNN graph (default=20).\n#### ```jsnn_adj_matrix```\nConstruct jSNN graph with the cell embeddings.\n> + ```k```: The number of neighbos used to construct jaccard SNN graph (default=20).\n> + ```prune```: Set the score below the value to zero (default=1/15).\n#### ```RunLouvain```\nRun Louvain algorithm for the graph.\n> + ```k```: Terminate the search once this number of communities is detected (default=None).\n#### ```RunSpectral```\nRun Spectral clustering algorithm for the graph.\n> + ```k```: Number of clusters (default=5).\n#### ```RunLeiden```\nRun Leiden algorithm for the graph.\n\n###  ```gene_analysis```\n#### ```pearson_correlation```\nCalculate the correlation between the features.\n#### ```feature_projection```\nProject the feature embedding to cell embeddings and visualize with UMAP.\n> + ```umap_epochs```: The number of UMAP epochs for visualization (default=100).\n> + ```dimension```: The dimension of the embeddings to use (default=30).\n> + ```figure_name```: The saved figure name (default=\"feature_projections.png\").\n\n\n### Version history\n+ `v0.1.2.1`: Manuscript version.\n+ `v0.1.2`: Adjust correlation calculation.\n+ `v0.1.1`: Automatically adjusts the coefficients; Add downstream analyses; Extend to unpaired data.\n+ `v0.0.1`: Initial version.\n\n### Maintainer\nWANG Ruohan ruohawang2-c@my.cityu.edu.hk\n\n### Reference\n```\n@article{10.1093/nar/gkad570,\n    author = {Wang, Ruo Han and Wang, Jianping and Li, Shuai Cheng},\n    title = \"{Probabilistic tensor decomposition extracts better latent embeddings from single-cell multiomic data}\",\n    journal = {Nucleic Acids Research},\n    pages = {gkad570},\n    year = {2023},\n    month = {07},\n    issn = {0305-1048},\n    doi = {10.1093/nar/gkad570},\n    url = {https://doi.org/10.1093/nar/gkad570},\n    eprint = {https://academic.oup.com/nar/advance-article-pdf/doi/10.1093/nar/gkad570/50819911/gkad570.pdf},\n}\n```\n"
      },
      "source": "https://raw.githubusercontent.com/deepomicslab/SCOIT/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "BASH38*",
        "parent_header": [
          "Getting started",
          "Parameters",
          "BASH30*"
        ],
        "type": "Text_excerpt",
        "value": "# SCOIT\nSCOIT is an implementation of a probabilistic tensor decomposition framework for single-cell multiomic data integration. SCOIT accepts the input of datasets from multiple omics, with missing values allowed.\n\n![image](https://github.com/deepomicslab/SCOIT/blob/main/framework.png)\n\n# Getting started\n\n## Prerequisite\n+ numpy\n+ scipy 1.6.0\n+ sklearn\n+ communities\n+ igraph\n+ leidenalg\n+ pytorch 1.9.0\n\n## Install\n```\npip install SCOIT\n```\n\n## Examples\nWe put the complete scripts for the analysis described in the manuscript under ```examples/``` directory for detailed usage examples and reproduction. The example data can be downloaded from [Google Drive](https://drive.google.com/drive/folders/1F_WBwNsHggjTqgFfTm6IugNKpb0xJTje?usp=sharing).\n\nThis is an example of multiple datasets when features have corresponding information.\n\n```Python\nfrom scoit import sc_multi_omics\n\ndata = np.array([expression_data, methylation_data])\nsc_model = sc_multi_omics()\npredict_data = sc_model.fit(data) # the imputed data\nnp.savetxt(\"global_cell_embeddings.csv\", sc_model.C, delimiter = ',') # global cell embeddings\nnp.savetxt(\"global_gene_embeddings.csv\", sc_model.G, delimiter = ',') # global gene embeddings\nnp.savetxt(\"local_cell_embeddings.csv\", sc_model.C, delimiter = ',') # omics-specific cell embeddings\nnp.savetxt(\"local_gene_embeddings.csv\", sc_model.G, delimiter = ',') # omics-specific gene embeddings\n\n# imputation\nimputed_expression_data = predict_data[0]\nimputed_methylation_data = predict_data[1]\n\n```\nWhen the features of different omics do not have corresponding information, please use the ```fit_list``` function, which accepts the input as a list of matrices.\n```Python\nfrom scoit import sc_multi_omics\n\ndata = [expression_data, protein_data]\nsc_model = sc_multi_omics()\npredict_data = sc_model.fit_list(data)\n```\nIf the input does not contain missing values (\"NA\"), we provide ```fit_complete``` and ```fit_list_complete``` functions to accelerate the optimization since they take advantage of matrix operations.\n```Python\nfrom scoit import sc_multi_omics\n\ndata = np.array([expression_data, methylation_data])\nsc_model = sc_multi_omics()\npredict_data = sc_model.fit_complete(data) # the imputed data\n```\n```Python\nfrom scoit import sc_multi_omics\n\ndata = [expression_data, protein_data]\nsc_model = sc_multi_omics()\npredict_data = sc_model.fit_list_complete(data)\n```\n\n## Parameters\n###  ```sc_multi_omics```\n> + ```K1```: The local element-wise product parameter, see the manuscript for details (default=30).\n> + ```K2```: The local element-wise product parameter (default=30).\n> + ```K3```: The local element-wise product parameter (default=30).\n> + ```random_seed```: The random seed used in optimization (default=123).\n\n###  ```fit```\n> + ```normalization```: Whether to applied min-max normalization (default=True).\n> + ```pre_impute```: Whether to applied KNNImputer for pre-processing (default=False).\n> + ```opt```: The optimization algorithm for gradient descent, including SGD, Adam, Adadelta, Adagrad, AdamW, SparseAdam, Adamax, ASGD, LBFGS (default=\"Adam\").\n> + ```dist```:The distribution used for modeling, including gaussian, poisson, negative_bionomial (default=\"gaussian\").\n> + ```lr```: The learning rate for gradient descent (default=1e-2).\n> + ```n_epochs```: The number of optimization epochs (default=1000).\n> + ```lambda_C_regularizer```: The coefficient for the penalty term of global cell embeddings (default=0, indicating automatically adjust.).\n> + ```lambda_G_regularizer```: The coefficient for the penalty term of global gene embeddings (default=0).\n> + ```lambda_O_regularizer```: The coefficient list for the penalty term of global omics embeddings; the length of the list should be the same with the number of omics (default=[0, 0]).\n> + ```lambda_OC_regularizer```: The coefficient list for the penalty term of omics-specific cell embeddings; the length of the list should be the same with the number of omics, not avaiable for complete functions (default=[0, 0]).\n> + ```lambda_OG_regularizer```: The coefficient list for the penalty term of omics-specific gene embeddings, the length of the list should be the same with the number of omics, not avaiable for list functions (default=[0, 0]).\n> + ```batch_size```: The batch size used for gradient descent, not avaiable for complete functions (default=256).\n> + ```device```: CPU or GPU (default='cuda' if torch.cuda.is_available() else 'cpu').\n> + ```verbose```: Whether to print loss for each epoch (default=True).\n\n###  ```cell_analysis```\n#### ```knn_adj_matrix```\nConstruct KNN graph with the cell embeddings.\n> + ```k```: The number of neighbos used to construct KNN graph (default=20).\n#### ```snn_adj_matrix```\nConstruct SNN graph with the cell embeddings.\n> + ```k```: The number of neighbos used to construct SNN graph (default=20).\n#### ```jsnn_adj_matrix```\nConstruct jSNN graph with the cell embeddings.\n> + ```k```: The number of neighbos used to construct jaccard SNN graph (default=20).\n> + ```prune```: Set the score below the value to zero (default=1/15).\n#### ```RunLouvain```\nRun Louvain algorithm for the graph.\n> + ```k```: Terminate the search once this number of communities is detected (default=None).\n#### ```RunSpectral```\nRun Spectral clustering algorithm for the graph.\n> + ```k```: Number of clusters (default=5).\n#### ```RunLeiden```\nRun Leiden algorithm for the graph.\n\n###  ```gene_analysis```\n#### ```pearson_correlation```\nCalculate the correlation between the features.\n#### ```feature_projection```\nProject the feature embedding to cell embeddings and visualize with UMAP.\n> + ```umap_epochs```: The number of UMAP epochs for visualization (default=100).\n> + ```dimension```: The dimension of the embeddings to use (default=30).\n> + ```figure_name```: The saved figure name (default=\"feature_projections.png\").\n\n\n### Version history\n+ `v0.1.2.1`: Manuscript version.\n+ `v0.1.2`: Adjust correlation calculation.\n+ `v0.1.1`: Automatically adjusts the coefficients; Add downstream analyses; Extend to unpaired data.\n+ `v0.0.1`: Initial version.\n\n### Maintainer\nWANG Ruohan ruohawang2-c@my.cityu.edu.hk\n\n### Reference\n```\n@article{10.1093/nar/gkad570,\n    author = {Wang, Ruo Han and Wang, Jianping and Li, Shuai Cheng},\n    title = \"{Probabilistic tensor decomposition extracts better latent embeddings from single-cell multiomic data}\",\n    journal = {Nucleic Acids Research},\n    pages = {gkad570},\n    year = {2023},\n    month = {07},\n    issn = {0305-1048},\n    doi = {10.1093/nar/gkad570},\n    url = {https://doi.org/10.1093/nar/gkad570},\n    eprint = {https://academic.oup.com/nar/advance-article-pdf/doi/10.1093/nar/gkad570/50819911/gkad570.pdf},\n}\n```\n"
      },
      "source": "https://raw.githubusercontent.com/deepomicslab/SCOIT/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "BASH40*",
        "parent_header": [
          "Getting started",
          "Parameters",
          "BASH39*"
        ],
        "type": "Text_excerpt",
        "value": "# SCOIT\nSCOIT is an implementation of a probabilistic tensor decomposition framework for single-cell multiomic data integration. SCOIT accepts the input of datasets from multiple omics, with missing values allowed.\n\n![image](https://github.com/deepomicslab/SCOIT/blob/main/framework.png)\n\n# Getting started\n\n## Prerequisite\n+ numpy\n+ scipy 1.6.0\n+ sklearn\n+ communities\n+ igraph\n+ leidenalg\n+ pytorch 1.9.0\n\n## Install\n```\npip install SCOIT\n```\n\n## Examples\nWe put the complete scripts for the analysis described in the manuscript under ```examples/``` directory for detailed usage examples and reproduction. The example data can be downloaded from [Google Drive](https://drive.google.com/drive/folders/1F_WBwNsHggjTqgFfTm6IugNKpb0xJTje?usp=sharing).\n\nThis is an example of multiple datasets when features have corresponding information.\n\n```Python\nfrom scoit import sc_multi_omics\n\ndata = np.array([expression_data, methylation_data])\nsc_model = sc_multi_omics()\npredict_data = sc_model.fit(data) # the imputed data\nnp.savetxt(\"global_cell_embeddings.csv\", sc_model.C, delimiter = ',') # global cell embeddings\nnp.savetxt(\"global_gene_embeddings.csv\", sc_model.G, delimiter = ',') # global gene embeddings\nnp.savetxt(\"local_cell_embeddings.csv\", sc_model.C, delimiter = ',') # omics-specific cell embeddings\nnp.savetxt(\"local_gene_embeddings.csv\", sc_model.G, delimiter = ',') # omics-specific gene embeddings\n\n# imputation\nimputed_expression_data = predict_data[0]\nimputed_methylation_data = predict_data[1]\n\n```\nWhen the features of different omics do not have corresponding information, please use the ```fit_list``` function, which accepts the input as a list of matrices.\n```Python\nfrom scoit import sc_multi_omics\n\ndata = [expression_data, protein_data]\nsc_model = sc_multi_omics()\npredict_data = sc_model.fit_list(data)\n```\nIf the input does not contain missing values (\"NA\"), we provide ```fit_complete``` and ```fit_list_complete``` functions to accelerate the optimization since they take advantage of matrix operations.\n```Python\nfrom scoit import sc_multi_omics\n\ndata = np.array([expression_data, methylation_data])\nsc_model = sc_multi_omics()\npredict_data = sc_model.fit_complete(data) # the imputed data\n```\n```Python\nfrom scoit import sc_multi_omics\n\ndata = [expression_data, protein_data]\nsc_model = sc_multi_omics()\npredict_data = sc_model.fit_list_complete(data)\n```\n\n## Parameters\n###  ```sc_multi_omics```\n> + ```K1```: The local element-wise product parameter, see the manuscript for details (default=30).\n> + ```K2```: The local element-wise product parameter (default=30).\n> + ```K3```: The local element-wise product parameter (default=30).\n> + ```random_seed```: The random seed used in optimization (default=123).\n\n###  ```fit```\n> + ```normalization```: Whether to applied min-max normalization (default=True).\n> + ```pre_impute```: Whether to applied KNNImputer for pre-processing (default=False).\n> + ```opt```: The optimization algorithm for gradient descent, including SGD, Adam, Adadelta, Adagrad, AdamW, SparseAdam, Adamax, ASGD, LBFGS (default=\"Adam\").\n> + ```dist```:The distribution used for modeling, including gaussian, poisson, negative_bionomial (default=\"gaussian\").\n> + ```lr```: The learning rate for gradient descent (default=1e-2).\n> + ```n_epochs```: The number of optimization epochs (default=1000).\n> + ```lambda_C_regularizer```: The coefficient for the penalty term of global cell embeddings (default=0, indicating automatically adjust.).\n> + ```lambda_G_regularizer```: The coefficient for the penalty term of global gene embeddings (default=0).\n> + ```lambda_O_regularizer```: The coefficient list for the penalty term of global omics embeddings; the length of the list should be the same with the number of omics (default=[0, 0]).\n> + ```lambda_OC_regularizer```: The coefficient list for the penalty term of omics-specific cell embeddings; the length of the list should be the same with the number of omics, not avaiable for complete functions (default=[0, 0]).\n> + ```lambda_OG_regularizer```: The coefficient list for the penalty term of omics-specific gene embeddings, the length of the list should be the same with the number of omics, not avaiable for list functions (default=[0, 0]).\n> + ```batch_size```: The batch size used for gradient descent, not avaiable for complete functions (default=256).\n> + ```device```: CPU or GPU (default='cuda' if torch.cuda.is_available() else 'cpu').\n> + ```verbose```: Whether to print loss for each epoch (default=True).\n\n###  ```cell_analysis```\n#### ```knn_adj_matrix```\nConstruct KNN graph with the cell embeddings.\n> + ```k```: The number of neighbos used to construct KNN graph (default=20).\n#### ```snn_adj_matrix```\nConstruct SNN graph with the cell embeddings.\n> + ```k```: The number of neighbos used to construct SNN graph (default=20).\n#### ```jsnn_adj_matrix```\nConstruct jSNN graph with the cell embeddings.\n> + ```k```: The number of neighbos used to construct jaccard SNN graph (default=20).\n> + ```prune```: Set the score below the value to zero (default=1/15).\n#### ```RunLouvain```\nRun Louvain algorithm for the graph.\n> + ```k```: Terminate the search once this number of communities is detected (default=None).\n#### ```RunSpectral```\nRun Spectral clustering algorithm for the graph.\n> + ```k```: Number of clusters (default=5).\n#### ```RunLeiden```\nRun Leiden algorithm for the graph.\n\n###  ```gene_analysis```\n#### ```pearson_correlation```\nCalculate the correlation between the features.\n#### ```feature_projection```\nProject the feature embedding to cell embeddings and visualize with UMAP.\n> + ```umap_epochs```: The number of UMAP epochs for visualization (default=100).\n> + ```dimension```: The dimension of the embeddings to use (default=30).\n> + ```figure_name```: The saved figure name (default=\"feature_projections.png\").\n\n\n### Version history\n+ `v0.1.2.1`: Manuscript version.\n+ `v0.1.2`: Adjust correlation calculation.\n+ `v0.1.1`: Automatically adjusts the coefficients; Add downstream analyses; Extend to unpaired data.\n+ `v0.0.1`: Initial version.\n\n### Maintainer\nWANG Ruohan ruohawang2-c@my.cityu.edu.hk\n\n### Reference\n```\n@article{10.1093/nar/gkad570,\n    author = {Wang, Ruo Han and Wang, Jianping and Li, Shuai Cheng},\n    title = \"{Probabilistic tensor decomposition extracts better latent embeddings from single-cell multiomic data}\",\n    journal = {Nucleic Acids Research},\n    pages = {gkad570},\n    year = {2023},\n    month = {07},\n    issn = {0305-1048},\n    doi = {10.1093/nar/gkad570},\n    url = {https://doi.org/10.1093/nar/gkad570},\n    eprint = {https://academic.oup.com/nar/advance-article-pdf/doi/10.1093/nar/gkad570/50819911/gkad570.pdf},\n}\n```\n"
      },
      "source": "https://raw.githubusercontent.com/deepomicslab/SCOIT/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "BASH41*",
        "parent_header": [
          "Getting started",
          "Parameters",
          "BASH39*"
        ],
        "type": "Text_excerpt",
        "value": "# SCOIT\nSCOIT is an implementation of a probabilistic tensor decomposition framework for single-cell multiomic data integration. SCOIT accepts the input of datasets from multiple omics, with missing values allowed.\n\n![image](https://github.com/deepomicslab/SCOIT/blob/main/framework.png)\n\n# Getting started\n\n## Prerequisite\n+ numpy\n+ scipy 1.6.0\n+ sklearn\n+ communities\n+ igraph\n+ leidenalg\n+ pytorch 1.9.0\n\n## Install\n```\npip install SCOIT\n```\n\n## Examples\nWe put the complete scripts for the analysis described in the manuscript under ```examples/``` directory for detailed usage examples and reproduction. The example data can be downloaded from [Google Drive](https://drive.google.com/drive/folders/1F_WBwNsHggjTqgFfTm6IugNKpb0xJTje?usp=sharing).\n\nThis is an example of multiple datasets when features have corresponding information.\n\n```Python\nfrom scoit import sc_multi_omics\n\ndata = np.array([expression_data, methylation_data])\nsc_model = sc_multi_omics()\npredict_data = sc_model.fit(data) # the imputed data\nnp.savetxt(\"global_cell_embeddings.csv\", sc_model.C, delimiter = ',') # global cell embeddings\nnp.savetxt(\"global_gene_embeddings.csv\", sc_model.G, delimiter = ',') # global gene embeddings\nnp.savetxt(\"local_cell_embeddings.csv\", sc_model.C, delimiter = ',') # omics-specific cell embeddings\nnp.savetxt(\"local_gene_embeddings.csv\", sc_model.G, delimiter = ',') # omics-specific gene embeddings\n\n# imputation\nimputed_expression_data = predict_data[0]\nimputed_methylation_data = predict_data[1]\n\n```\nWhen the features of different omics do not have corresponding information, please use the ```fit_list``` function, which accepts the input as a list of matrices.\n```Python\nfrom scoit import sc_multi_omics\n\ndata = [expression_data, protein_data]\nsc_model = sc_multi_omics()\npredict_data = sc_model.fit_list(data)\n```\nIf the input does not contain missing values (\"NA\"), we provide ```fit_complete``` and ```fit_list_complete``` functions to accelerate the optimization since they take advantage of matrix operations.\n```Python\nfrom scoit import sc_multi_omics\n\ndata = np.array([expression_data, methylation_data])\nsc_model = sc_multi_omics()\npredict_data = sc_model.fit_complete(data) # the imputed data\n```\n```Python\nfrom scoit import sc_multi_omics\n\ndata = [expression_data, protein_data]\nsc_model = sc_multi_omics()\npredict_data = sc_model.fit_list_complete(data)\n```\n\n## Parameters\n###  ```sc_multi_omics```\n> + ```K1```: The local element-wise product parameter, see the manuscript for details (default=30).\n> + ```K2```: The local element-wise product parameter (default=30).\n> + ```K3```: The local element-wise product parameter (default=30).\n> + ```random_seed```: The random seed used in optimization (default=123).\n\n###  ```fit```\n> + ```normalization```: Whether to applied min-max normalization (default=True).\n> + ```pre_impute```: Whether to applied KNNImputer for pre-processing (default=False).\n> + ```opt```: The optimization algorithm for gradient descent, including SGD, Adam, Adadelta, Adagrad, AdamW, SparseAdam, Adamax, ASGD, LBFGS (default=\"Adam\").\n> + ```dist```:The distribution used for modeling, including gaussian, poisson, negative_bionomial (default=\"gaussian\").\n> + ```lr```: The learning rate for gradient descent (default=1e-2).\n> + ```n_epochs```: The number of optimization epochs (default=1000).\n> + ```lambda_C_regularizer```: The coefficient for the penalty term of global cell embeddings (default=0, indicating automatically adjust.).\n> + ```lambda_G_regularizer```: The coefficient for the penalty term of global gene embeddings (default=0).\n> + ```lambda_O_regularizer```: The coefficient list for the penalty term of global omics embeddings; the length of the list should be the same with the number of omics (default=[0, 0]).\n> + ```lambda_OC_regularizer```: The coefficient list for the penalty term of omics-specific cell embeddings; the length of the list should be the same with the number of omics, not avaiable for complete functions (default=[0, 0]).\n> + ```lambda_OG_regularizer```: The coefficient list for the penalty term of omics-specific gene embeddings, the length of the list should be the same with the number of omics, not avaiable for list functions (default=[0, 0]).\n> + ```batch_size```: The batch size used for gradient descent, not avaiable for complete functions (default=256).\n> + ```device```: CPU or GPU (default='cuda' if torch.cuda.is_available() else 'cpu').\n> + ```verbose```: Whether to print loss for each epoch (default=True).\n\n###  ```cell_analysis```\n#### ```knn_adj_matrix```\nConstruct KNN graph with the cell embeddings.\n> + ```k```: The number of neighbos used to construct KNN graph (default=20).\n#### ```snn_adj_matrix```\nConstruct SNN graph with the cell embeddings.\n> + ```k```: The number of neighbos used to construct SNN graph (default=20).\n#### ```jsnn_adj_matrix```\nConstruct jSNN graph with the cell embeddings.\n> + ```k```: The number of neighbos used to construct jaccard SNN graph (default=20).\n> + ```prune```: Set the score below the value to zero (default=1/15).\n#### ```RunLouvain```\nRun Louvain algorithm for the graph.\n> + ```k```: Terminate the search once this number of communities is detected (default=None).\n#### ```RunSpectral```\nRun Spectral clustering algorithm for the graph.\n> + ```k```: Number of clusters (default=5).\n#### ```RunLeiden```\nRun Leiden algorithm for the graph.\n\n###  ```gene_analysis```\n#### ```pearson_correlation```\nCalculate the correlation between the features.\n#### ```feature_projection```\nProject the feature embedding to cell embeddings and visualize with UMAP.\n> + ```umap_epochs```: The number of UMAP epochs for visualization (default=100).\n> + ```dimension```: The dimension of the embeddings to use (default=30).\n> + ```figure_name```: The saved figure name (default=\"feature_projections.png\").\n\n"
      },
      "source": "https://raw.githubusercontent.com/deepomicslab/SCOIT/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Version history",
        "parent_header": [
          "Getting started",
          "Parameters"
        ],
        "type": "Text_excerpt",
        "value": "+ `v0.1.2.1`: Manuscript version.\n+ `v0.1.2`: Adjust correlation calculation.\n+ `v0.1.1`: Automatically adjusts the coefficients; Add downstream analyses; Extend to unpaired data.\n+ `v0.0.1`: Initial version.\n"
      },
      "source": "https://raw.githubusercontent.com/deepomicslab/SCOIT/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Maintainer",
        "parent_header": [
          "Getting started",
          "Parameters"
        ],
        "type": "Text_excerpt",
        "value": "WANG Ruohan ruohawang2-c@my.cityu.edu.hk\n"
      },
      "source": "https://raw.githubusercontent.com/deepomicslab/SCOIT/main/README.md",
      "technique": "header_analysis"
    }
  ]
}