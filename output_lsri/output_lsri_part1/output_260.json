{
  "application_domain": [
    {
      "confidence": 19.5,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ZHU-XU-xmu/cgMSI"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Support and Contact",
        "parent_header": [
          "cgMSI",
          "cgMSI: pathogen detection within species from nanopore metagenomic sequencing data"
        ],
        "type": "Text_excerpt",
        "value": "For any issues or concerns, please contact us at zhuxu@stu.xmu.edu.cn\n \n"
      },
      "source": "https://raw.githubusercontent.com/ZHU-XU-xmu/cgMSI/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-05-26T02:35:43Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-10-14T23:17:50Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "cgMSI is a tool that detect pathogens at strain level from nanopore metagenomic sequencing. "
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "parent_header": [
          "cgMSI",
          "cgMSI: pathogen detection within species from nanopore metagenomic sequencing data"
        ],
        "type": "Text_excerpt",
        "value": "cgMSI (Core Genome Metagenome Strain Identify), a tool to detect pathogen from nanopore metagenomic data within species at low abundance. \n cgMSI consists of two core modules:\n- The cgMSI LIB module will create or update the library accroding to the file provided by the user. \n- The cgMSI MAP module will  identify the strain and estimate the abundance.\n\n"
      },
      "source": "https://raw.githubusercontent.com/ZHU-XU-xmu/cgMSI/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.974210026852333,
      "result": {
        "original_header": "Test",
        "type": "Text_excerpt",
        "value": "We have downloaded Klebsiella pneumoniae core gene allele pool and some reference genomes in dir ./test and  added an example to show how to use cgMSI. Detailed parameter information follows this section.\nFirstly, generate related library by cgMSI LIB module. \n"
      },
      "source": "https://raw.githubusercontent.com/ZHU-XU-xmu/cgMSI/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8695429398219885,
      "result": {
        "original_header": "LIB",
        "type": "Text_excerpt",
        "value": "We need the database of strains, which can be downloaded from NCBI. Also you can add your own genomes to the folder. First you need to make sure that \ngenomes belonging to the same species are in one folder, different species are in different folders.  The allele table  and specise alleles file were download from https://www.cgmlst.org/ncs . We download 7 specises' allele tables in ./library that can use directly.The target specise allele file you\ncan download from the website and merge all loci into a fasta file.\ncreate a new library for a species:\n```\npython cgMSI.py LIB -genomesDir genomeDIR -allelePath species_alleles.fasta -alleleTable speciesAlleleTable -species speciesName -t threadNumber \n\nRequired arguments:\n\n-genomesDir,              string                    Target species Reference Genome Directory Full Path \n\n-allelePath,              string                    alleles fasta file,can be download \n\n-alleleTable,             string                    path of the target specise allele table \n\n-species,                 string                    species name with No whitespace(if Escherichia coli ,like Ec) for distinguish different species\n\n-outPutDir                string                    the dir of the library (default at ./cgMSI/library/)\n\nOptional arguments:\n\n-t,                        int                      Number of threads to use by aligner (bowtie2) if different from default (12)\n                    \n``` \nadd a genome to a existed species library:\n```\npython cgMSI.py LIB -addGenome -genomesDir genomeDIR -allelePath species_alleles.fasta -alleleTable speciesAlleleTable -species speciesName -genomeName addGenomeName -genomeFile addGenomeFastaFile -t threadNumber \n\nRequired arguments:\n\n-genomesDir,              string                    directory Full Path of target species Reference Genome  \n\n-allelePath,              string                    alleles fasta file,can be download \n\n-alleleTable,             string                    path of the target specise allele table \n\n-species,                 string                    species name with No whitespace(if Escherichia coli ,like Ec) for distinguish different species\n\n-genomeName               string                    the name of the genome added into the library\n\n-genomeFile               string                    full path of the added genome fasta file\n\n-outPutDir                string                    the dir of the library (default at ./cgMSI/library/)\n\nOptional arguments:\n\n-t,                       int                       Number of threads to use by aligner (bowtie2) if different from default (8)\n     \n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/ZHU-XU-xmu/cgMSI/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.885754335075837,
      "result": {
        "original_header": "MAP",
        "type": "Text_excerpt",
        "value": "First you need to make sure that the LIB module is finished. MAP module will use library generated previously with LIB module. \ncall MAP module help for details\n```\npython cgMSI.py MAP -h\n\npython cgMSI.py MAP  -genomesDir genomeDIR -allelePath species_alleles.fasta -alleleTable speciesAlleleTable -species speciesName -sampleFile sampleFile -outPutDir outPutDir -t threadNumber \n\nRequired arguments:\n\n-genomesDir,              string                    directory Full Path of target species Reference Genome  \n\n-allelePath,              string                    alleles fasta file,can be download \n\n-alleleTable,             string                    full path of the target specise allele table \n\n-species,                 string                    species name with No whitespace(if Escherichia coli ,like Ec) for distinguish different species\n\n-genomeName               string                    the name of the genome added into the library\n\n-genomeFile               string                    full path of the added genome fasta file\n\n-sampleFile               string                    full path of sample file(fasta or fastq)\n\n-outPutDir                string                    the dir of the predict result\n\nOptional arguments:\n-t,                       int                       Number of threads to use by aligner (bowtie2) if different from default (8)\n\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/ZHU-XU-xmu/cgMSI/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ZHU-XU-xmu/cgMSI/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ZHU-XU-xmu/cgMSI/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ZHU-XU-xmu/cgMSI"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "cgMSI"
      },
      "source": "https://raw.githubusercontent.com/ZHU-XU-xmu/cgMSI/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ZHU-XU-xmu/cgMSI/master/script/get_genomes.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ZHU-XU-xmu/cgMSI/master/script/rename_alleles.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ZHU-XU-xmu/cgMSI/master/script/getGCF_NC.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Manual",
        "parent_header": [
          "cgMSI",
          "cgMSI: pathogen detection within species from nanopore metagenomic sequencing data"
        ],
        "type": "Text_excerpt",
        "value": "First of all, we should:\n- change directory (cd) to cgMSI folder\n- cd into cgMSI directory \n  ```\n  cd ../cgMSI\n  python cgMSI.py -h\n  ```           "
      },
      "source": "https://raw.githubusercontent.com/ZHU-XU-xmu/cgMSI/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9990533971173857,
      "result": {
        "original_header": "Test",
        "type": "Text_excerpt",
        "value": "  ```\n  cd ../cgMSI/\n  tar -zxvf ./test/Kp_alleles.tar.gz\n  python cgMSI.py LIB -species Kp -genomesDir ./test/testRef/ -allelePath ./test/Kp_alleles.fasta -alleleTable ./library/Klebsiella_pneumoniae_cgMLST_count.tsv -t 12 -outPutDir ./test/library/\n  ```\n Next, detection pathogen strain by cgMSI MAP module.\n   BASH2*\n  The result can be found at dir ./test.\n \n \n"
      },
      "source": "https://raw.githubusercontent.com/ZHU-XU-xmu/cgMSI/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999989552831948,
      "result": {
        "original_header": "LIB",
        "type": "Text_excerpt",
        "value": "We need the database of strains, which can be downloaded from NCBI. Also you can add your own genomes to the folder. First you need to make sure that \ngenomes belonging to the same species are in one folder, different species are in different folders.  The allele table  and specise alleles file were download from https://www.cgmlst.org/ncs . We download 7 specises' allele tables in ./library that can use directly.The target specise allele file you\ncan download from the website and merge all loci into a fasta file.\ncreate a new library for a species:\n```\npython cgMSI.py LIB -genomesDir genomeDIR -allelePath species_alleles.fasta -alleleTable speciesAlleleTable -species speciesName -t threadNumber \n\nRequired arguments:\n\n-genomesDir,              string                    Target species Reference Genome Directory Full Path \n\n-allelePath,              string                    alleles fasta file,can be download \n\n-alleleTable,             string                    path of the target specise allele table \n\n-species,                 string                    species name with No whitespace(if Escherichia coli ,like Ec) for distinguish different species\n\n-outPutDir                string                    the dir of the library (default at ./cgMSI/library/)\n\nOptional arguments:\n\n-t,                        int                      Number of threads to use by aligner (bowtie2) if different from default (12)\n                    \n``` \n"
      },
      "source": "https://raw.githubusercontent.com/ZHU-XU-xmu/cgMSI/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9968870454757289,
      "result": {
        "original_header": "MAP",
        "type": "Text_excerpt",
        "value": "First you need to make sure that the LIB module is finished. MAP module will use library generated previously with LIB module. \n"
      },
      "source": "https://raw.githubusercontent.com/ZHU-XU-xmu/cgMSI/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8887477025058338,
      "result": {
        "original_header": "Test",
        "type": "Text_excerpt",
        "value": "  ```\n  cd ../cgMSI/\n  tar -zxvf ./test/Kp_alleles.tar.gz\n  python cgMSI.py LIB -species Kp -genomesDir ./test/testRef/ -allelePath ./test/Kp_alleles.fasta -alleleTable ./library/Klebsiella_pneumoniae_cgMLST_count.tsv -t 12 -outPutDir ./test/library/\n  ```\n Next, detection pathogen strain by cgMSI MAP module.\n   BASH2*\n  The result can be found at dir ./test.\n \n \n"
      },
      "source": "https://raw.githubusercontent.com/ZHU-XU-xmu/cgMSI/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ZHU-XU-xmu/cgMSI/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2022 ZHU-XU-xmu\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/ZHU-XU-xmu/cgMSI/master/license",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "cgMSI"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "ZHU-XU-xmu"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 33227,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 1679,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ZHU-XU-xmu/cgMSI/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Software Dependencies",
        "parent_header": [
          "cgMSI",
          "cgMSI: pathogen detection within species from nanopore metagenomic sequencing data"
        ],
        "type": "Text_excerpt",
        "value": "It is recommended to create a new conda environment:\n```\nconda create -n python37 python=3.7\n\n# Activate this environment:\nconda activate python37\n```\n       \u2022 numpy (v1.15.0)\n            conda install -c conda-forge numpy\n       \u2022 pandas (v0.24.2)\n            conda install -c conda-forge pandas\n       \u2022 minimap2 (v2.22)\n            conda install -c bioconda minimap2\n       \u2022 pysam (v0.15.3)\n            conda install -c bioconda pysam \n       \u2022 seqkit (v2.0.0)\n            conda install -c bioconda seqkit \n       \u2022 scipy (v22.11.1)\n            conda install -c conda-forge scipy\n"
      },
      "source": "https://raw.githubusercontent.com/ZHU-XU-xmu/cgMSI/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 00:03:57",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Support and Contact",
        "parent_header": [
          "cgMSI",
          "cgMSI: pathogen detection within species from nanopore metagenomic sequencing data"
        ],
        "type": "Text_excerpt",
        "value": "For any issues or concerns, please contact us at zhuxu@stu.xmu.edu.cn\n \n"
      },
      "source": "https://raw.githubusercontent.com/ZHU-XU-xmu/cgMSI/master/README.md",
      "technique": "header_analysis"
    }
  ]
}