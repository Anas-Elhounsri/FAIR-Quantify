{
  "application_domain": [
    {
      "confidence": 44.94,
      "result": {
        "type": "String",
        "value": "Natural Language Processing"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "4. Citing this work",
        "parent_header": [
          "Protein 3D Structure Prediction with DeepFold"
        ],
        "type": "Text_excerpt",
        "value": "If you use the DeepFold code or server, please cite this work as follows:\n\n```\n@article{10.1093/bioinformatics/btad712,\n    author = {Lee, Jae-Won and Won, Jong-Hyun and Jeon, Seonggwang and Choo, Yujin and Yeon, Yubin and Oh, Jin-Seon and Kim, Minsoo and Kim, SeonHwa and Joung, InSuk and Jang, Cheongjae and Lee, Sung Jong and Kim, Tae Hyun and Jin, Kyong Hwan and Song, Giltae and Kim, Eun-Sol and Yoo, Jejoong and Paek, Eunok and Noh, Yung-Kyun and Joo, Keehyoung},\n    title = \"{DeepFold: enhancing protein structure prediction through optimized loss functions, improved template features, and re-optimized energy function}\",\n    journal = {Bioinformatics},\n    volume = {39},\n    number = {12},\n    pages = {btad712},\n    year = {2023},\n    month = {11},\n    issn = {1367-4811},\n    doi = {10.1093/bioinformatics/btad712},\n    url = {https://doi.org/10.1093/bioinformatics/btad712},\n    eprint = {https://academic.oup.com/bioinformatics/article-pdf/39/12/btad712/54770684/btad712.pdf},\n}\n```\n"
      },
      "source": "https://raw.githubusercontent.com/newtonjoo/deepfold/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Lee, Jae-Won and Won, Jong-Hyun and Jeon, Seonggwang and Choo, Yujin and Yeon, Yubin and Oh, Jin-Seon and Kim, Minsoo and Kim, SeonHwa and Joung, InSuk and Jang, Cheongjae and Lee, Sung Jong and Kim, Tae Hyun and Jin, Kyong Hwan and Song, Giltae and Kim, Eun-Sol and Yoo, Jejoong and Paek, Eunok and Noh, Yung-Kyun and Joo, Keehyoung",
        "doi": "10.1093/bioinformatics/btad712",
        "format": "bibtex",
        "title": "{DeepFold: enhancing protein structure prediction through optimized loss functions, improved template features, and re-optimized energy function}",
        "type": "Text_excerpt",
        "url": "https://doi.org/10.1093/bioinformatics/btad712",
        "value": "@article{10.1093/bioinformatics/btad712,\n    eprint = {https://academic.oup.com/bioinformatics/article-pdf/39/12/btad712/54770684/btad712.pdf},\n    url = {https://doi.org/10.1093/bioinformatics/btad712},\n    doi = {10.1093/bioinformatics/btad712},\n    issn = {1367-4811},\n    month = {11},\n    year = {2023},\n    pages = {btad712},\n    number = {12},\n    volume = {39},\n    journal = {Bioinformatics},\n    title = {{DeepFold: enhancing protein structure prediction through optimized loss functions, improved template features, and re-optimized energy function}},\n    author = {Lee, Jae-Won and Won, Jong-Hyun and Jeon, Seonggwang and Choo, Yujin and Yeon, Yubin and Oh, Jin-Seon and Kim, Minsoo and Kim, SeonHwa and Joung, InSuk and Jang, Cheongjae and Lee, Sung Jong and Kim, Tae Hyun and Jin, Kyong Hwan and Song, Giltae and Kim, Eun-Sol and Yoo, Jejoong and Paek, Eunok and Noh, Yung-Kyun and Joo, Keehyoung},\n}"
      },
      "source": "https://raw.githubusercontent.com/newtonjoo/deepfold/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/newtonjoo/deepfold"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# How to Contribute\n\nWe welcome the community to join us in developing the repository together, including but not limited to 1) reports and fixes of bugs,2) new features and 3) better interfaces.\n\n## Developer Certificate of Origin\n\nContributions to this project must be accompanied by a [Developer Certificate of Origin](./DCO.txt). You (or your employer) retain the copyright to your contribution. The certificate only restrict you to use the same license in your contribution.\n\n## Code reviews\n\nAll submissions, including submissions by project members, require review. We use GitHub pull requests for this purpose. Consult [GitHub Help](https://help.github.com/articles/about-pull-requests/) for more information on using pull requests.\n"
      },
      "source": "https://raw.githubusercontent.com/newtonjoo/deepfold/main/CONTRIBUTING.md",
      "technique": "file_exploration"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-12-07T00:15:41Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-08-26T03:54:08Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Protein 3D Structure Prediction with DeepFold"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9868002597874788,
      "result": {
        "original_header": "Protein 3D Structure Prediction with DeepFold",
        "type": "Text_excerpt",
        "value": "> We have developed a new pipeline of protein structure prediction called **DeepFold**, that improves the accuracy of side-chain predictions as well as that of backbones by leveraging AlphaFold2. \n- First, we optimized the loss functions of side chains by considering the sequential dependence of each torsion angle.\n- Second, we enhanced template features to capture better structural context between residue pairs by employing advanced sequence alignment methods and exploring the structure database. \n- Last, we implemented a reoptimization step that utilizes the energy function of molecular mechanics and an advanced global optimization method to enhance the structural validity of the prediction. \nThis package provides an implementation of **DeepFold**, a trainable, Transformer-based deep protein folding model. We modified the open-source code of [DeepMind AlphaFold v2.0](https://github.com/deepmind/alphafold) and [Uni-Fold-jax](https://github.com/dptech-corp/Uni-Fold-jax).  \n"
      },
      "source": "https://raw.githubusercontent.com/newtonjoo/deepfold/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8690486327179143,
      "result": {
        "original_header": "2. Inference with trained models.",
        "type": "Text_excerpt",
        "value": "We provide the trained models on [Google Drive](https://drive.google.com/drive/folders/1Qyq0oZo4NUv55X7N7LSjqJOZcmR23NV6?usp=sharing). Please download the models and place them in the `data/params` folder. \n"
      },
      "source": "https://raw.githubusercontent.com/newtonjoo/deepfold/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9469134612586385,
      "result": {
        "original_header": "2.1 Infer from features.pkl.",
        "type": "Text_excerpt",
        "value": "We provide the [`run_from_pkl.py`](./run_from_pkl.py) script to support inferring protein structures from `features.pkl` inputs. A demo command would be\n```bash\npython run_from_pkl.py \\\n  --pickle_paths ./example_data/features/aa/1aac_1_A/features.pkl \\\n  --model_names model1 \\\n  --model_paths data/params/model1.npz \\\n  --output_dir ./out\n```\n \nThe command will generate structures (in PDB format) from input features predicted by different input models, the running time of each component, and corresponding residue-wise confidence score (predicted LDDT, or pLDDT).\n \n"
      },
      "source": "https://raw.githubusercontent.com/newtonjoo/deepfold/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8725936357606463,
      "result": {
        "original_header": "2.2 Infer from FASTA files.",
        "type": "Text_excerpt",
        "value": "Essentially, inferring the structures from given FASTA files includes two steps, i.e. generating the pickled features and predicting structures from them. We provided a script, [`run_from_fasta.py`](./run_from_fasta.py), as a friendlier user interface. An example usage would be\n```bash\npython run_from_fasta.py \\\n  --fasta_paths ./example_data/fasta/aa/1aac_1_A.fasta \\\n  --model_names model1 \\\n  --model_paths params/model1.npz \\\n  --data_dir /path/to/database/directory\n  --output_dir ./out\n```\nIf you need to change the default database paths (uniref90, mgnify, bfd, uniclust30, pdb70, template mmcif), you can use the flags in run_from_fasta.py.\n \n"
      },
      "source": "https://raw.githubusercontent.com/newtonjoo/deepfold/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/newtonjoo/deepfold/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/newtonjoo/deepfold/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "newtonjoo/deepfold"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Protein 3D Structure Prediction with DeepFold"
      },
      "source": "https://raw.githubusercontent.com/newtonjoo/deepfold/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/newtonjoo/deepfold/main/docker/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/newtonjoo/deepfold/main/docker/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/newtonjoo/deepfold/main/install_dependencies_11.2.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/newtonjoo/deepfold/main/run_inference.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/newtonjoo/deepfold/main/install_dependencies.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/newtonjoo/deepfold/main/gen_pkl.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/newtonjoo/deepfold/main/run_train.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/newtonjoo/deepfold/main/run_alignment.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/newtonjoo/deepfold/main/scripts/download_alphafold_params.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/newtonjoo/deepfold/main/scripts/download_mgnify.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/newtonjoo/deepfold/main/scripts/download_pdb70.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/newtonjoo/deepfold/main/scripts/colabfold_search.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/newtonjoo/deepfold/main/scripts/download_bfd.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/newtonjoo/deepfold/main/scripts/download_uniref90.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/newtonjoo/deepfold/main/scripts/download_all_data.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/newtonjoo/deepfold/main/scripts/download_pdb_mmcif.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/newtonjoo/deepfold/main/scripts/download_small_bfd.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/newtonjoo/deepfold/main/scripts/download_uniclust30.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/newtonjoo/deepfold/main/crfalign/compile.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/newtonjoo/deepfold/main/crfalign/src/compile_all.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/newtonjoo/deepfold/main/crfalign/src/make.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/newtonjoo/deepfold/main/crfalign/src/compile.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/newtonjoo/deepfold/main/crfalign/examples/align.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "1. Install the environment.",
        "parent_header": [
          "Protein 3D Structure Prediction with DeepFold"
        ],
        "type": "Text_excerpt",
        "value": "We recommend using [Docker](https://www.docker.com/) to install the environment. The Dockerfile is provided in the `docker` folder. To build the docker image, run the following command:\n\n```bash\n  git clone https://github.com/newtonjoo/deepfold\n  cd deepfold\n\n  # build docker\n  docker build -f docker/Dockerfile -t deepfold .\n```\n\nTo mount the data folder on Docker and attach to bash, use the following command:\n```bash\n  docker run --gpus all -v \"${DATA_DIR}:/app/deepfold/data\" -it deepfold:latest\n```\n"
      },
      "source": "https://raw.githubusercontent.com/newtonjoo/deepfold/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3. Manual training",
        "parent_header": [
          "Protein 3D Structure Prediction with DeepFold"
        ],
        "type": "Text_excerpt",
        "value": "If you want to train the model from scratch, you can use the docker image to run the training script. The training script is `run_train.sh`. You can modify the script to suit your learning settings.\n"
      },
      "source": "https://raw.githubusercontent.com/newtonjoo/deepfold/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3.1 Prepare data before training.",
        "parent_header": [
          "Protein 3D Structure Prediction with DeepFold",
          "3. Manual training"
        ],
        "type": "Text_excerpt",
        "value": "Before you start to train your own folding models, you shall prepare the features and labels of the training proteins. Features of proteins mainly include the amino acid sequence, MSAs and templates of proteins. These messages should be contained in a pickle file `<name>/features.pkl` for each training protein. Deepfold provides scripts to process input FASTA files, relying on several external databases and tools. Labels are CIF files containing the structures of the proteins.\n"
      },
      "source": "https://raw.githubusercontent.com/newtonjoo/deepfold/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3.2 Datasets and external tools.",
        "parent_header": [
          "Protein 3D Structure Prediction with DeepFold",
          "3. Manual training"
        ],
        "type": "Text_excerpt",
        "value": "Deepfold adopts the same data processing pipeline as AlphaFold2. We kept the scripts of downloading corresponding databases for searching sequence homologies and templates in the AlphaFold2 repo. Use the command\n\n```bash\n  bash scripts/download_all_data.sh /path/to/database/directory\n```\n\nto download all required databases of Deepfold.\n\nIf you successfully installed the Conda environment in Section 1, external tools of search sequence homologies and templates should be installed properly. As an alternative, you can customize the arguments of the feature preparation script (`generate_pkl_features.py`) to refer to your own databases and tools.\n"
      },
      "source": "https://raw.githubusercontent.com/newtonjoo/deepfold/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3.3 Run the preparation code.",
        "parent_header": [
          "Protein 3D Structure Prediction with DeepFold",
          "3. Manual training"
        ],
        "type": "Text_excerpt",
        "value": "An example command of running the feature preparation pipeline would be\n\n```bash\n  python generate_pkl_features.py \\\n    --fasta_dir ./example_data/fasta \\\n    --output_dir ./out \\\n    --data_dir /path/to/database/directory \\\n    --num_workers 1\n```\n\nThis command automatically processes all FASTA files under `fasta_dir`, and dumps the results to `output_dir`. Note that each FASTA file should contain only one sequence. The default number of CPUs used in hhblits and jackhmmer are 4 and 8. You can modify them in `deepfold/data/tools/hhblits.py` and `deepfold/data/tools/jackhmmer.py`, respectively.\n"
      },
      "source": "https://raw.githubusercontent.com/newtonjoo/deepfold/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3.4 Organize your training data.",
        "parent_header": [
          "Protein 3D Structure Prediction with DeepFold",
          "3. Manual training"
        ],
        "type": "Text_excerpt",
        "value": "Deepfold uses the class [`DataSystem`](./deepfold/train/data_system.py) to automatically sample and load the training proteins. To make everything goes right, you shall pay attention to how the training data is organized. Two directories should be established, one with input features (`features.pkl` files, referred to as `features_dir`) and the other with labels (`*.cif` files, referred to as `mmcif_dir`). The feature directory should have its files named as `<pdb_id>_<model_id>_<chain_id>/features.pkl`, e.g. `101m_1_A/features.pkl`, and the label directory should have its files named as `<pdb_id>.cif`, e.g. `101m.cif`. See [`./example_data/features`](./example_data/features) and [`./example_data/mmcif`](./example_data/mmcif) for instances of the two directories. Notably, users shall make sure that all proteins used for training have their corresponding labels. This is checked by `DataSystem.check_completeness()`.\n\n"
      },
      "source": "https://raw.githubusercontent.com/newtonjoo/deepfold/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3.5 Configuration.",
        "parent_header": [
          "Protein 3D Structure Prediction with DeepFold",
          "3. Manual training"
        ],
        "type": "Text_excerpt",
        "value": "Before you conduct any actual training processes, please make sure that you correctly configured the code. Modify the training configurations in [`deepfold/train/train_config.py`](./deepfold/train/train_config.py). We annotated the default configurations to reproduce AlphaFold in the script. Specifically, modify the configurations of data paths:\n    \n  ```json\n  \"data\": {\n    \"train\": {\n      \"features_dir\": \"where/training/protein/features/are/stored/\",\n      \"mmcif_dir\": \"where/training/mmcif/files/are/stored/\",\n      \"sample_weights\": \"which/specifies/proteins/for/training.json\"\n    },\n    \"eval\": {\n      \"features_dir\": \"where/validation/protein/features/are/stored/\",\n      \"mmcif_dir\": \"where/validation/mmcif/files/are/stored/\",\n      \"sample_weights\": \"which/specifies/proteins/for/training.json\"\n    }\n  }\n  ```\n  \n  The specified data should be contained in two folders, namely a `features_dir` and a `mmcif_dir`. Organizations of the two directories are introduced in Section 2.3. Meanwhile, if you want to specify a subset of training data under the directories, or assign customized sample weights for each protein, write a json file and feed its path to `sample_weights`. This is optional, as you can leave it as `None` (and the program will attempt to use all entries under `features_dir` with uniform weights). The json file should be a dictionary containing the basenames of directories of protein features ([pdb_id]\\_[model_id]\\_[chain_id]) and the sample weight of each protein in the training process (integer or float), such as:\n\n  ```json\n  {\"1am9_1_C\": 82, \"1amp_1_A\": 291, \"1aoj_1_A\": 60, \"1aoz_1_A\": 552}\n  ```\n  or for uniform sampling, simply using a list of protein entries suffices:\n\n  ```json\n  [\"1am9_1_C\", \"1amp_1_A\", \"1aoj_1_A\", \"1aoz_1_A\"]\n  ```\n\nFor users who want to customize their own folding models, configurations of model hyperparameters can be edited in [`deepfold/model/config.py`](./deepfold/model/config.py) .\n"
      },
      "source": "https://raw.githubusercontent.com/newtonjoo/deepfold/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9989825446902153,
      "result": {
        "original_header": "2.2 Infer from FASTA files.",
        "type": "Text_excerpt",
        "value": "Essentially, inferring the structures from given FASTA files includes two steps, i.e. generating the pickled features and predicting structures from them. We provided a script, [`run_from_fasta.py`](./run_from_fasta.py), as a friendlier user interface. An example usage would be\n```bash\npython run_from_fasta.py \\\n  --fasta_paths ./example_data/fasta/aa/1aac_1_A.fasta \\\n  --model_names model1 \\\n  --model_paths params/model1.npz \\\n  --data_dir /path/to/database/directory\n  --output_dir ./out\n```\nIf you need to change the default database paths (uniref90, mgnify, bfd, uniclust30, pdb70, template mmcif), you can use the flags in run_from_fasta.py.\n \n"
      },
      "source": "https://raw.githubusercontent.com/newtonjoo/deepfold/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8047953644747924,
      "result": {
        "original_header": "2.2 Infer from FASTA files.",
        "type": "Text_excerpt",
        "value": "Essentially, inferring the structures from given FASTA files includes two steps, i.e. generating the pickled features and predicting structures from them. We provided a script, [`run_from_fasta.py`](./run_from_fasta.py), as a friendlier user interface. An example usage would be\n```bash\npython run_from_fasta.py \\\n  --fasta_paths ./example_data/fasta/aa/1aac_1_A.fasta \\\n  --model_names model1 \\\n  --model_paths params/model1.npz \\\n  --data_dir /path/to/database/directory\n  --output_dir ./out\n```\nIf you need to change the default database paths (uniref90, mgnify, bfd, uniclust30, pdb70, template mmcif), you can use the flags in run_from_fasta.py.\n \n"
      },
      "source": "https://raw.githubusercontent.com/newtonjoo/deepfold/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/newtonjoo/deepfold/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Apache License 2.0",
        "spdx_id": "Apache-2.0",
        "type": "License",
        "url": "https://api.github.com/licenses/apache-2.0",
        "value": "https://api.github.com/licenses/apache-2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
      },
      "source": "https://raw.githubusercontent.com/newtonjoo/deepfold/main/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "5.1 DeepFold code license.",
        "parent_header": [
          "Protein 3D Structure Prediction with DeepFold",
          "5. License and disclaimer."
        ],
        "type": "Text_excerpt",
        "value": "Copyright 2022 DeepFold Team.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at \n<http://www.apache.org/licenses/LICENSE-2.0>.\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
      },
      "source": "https://raw.githubusercontent.com/newtonjoo/deepfold/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "deepfold"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "newtonjoo"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 1269588,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 743022,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 659830,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 477491,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "ZenScript",
        "size": 405537,
        "type": "Programming_language",
        "value": "ZenScript"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "TeX",
        "size": 141578,
        "type": "Programming_language",
        "value": "TeX"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 25548,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Scheme",
        "size": 11904,
        "type": "Programming_language",
        "value": "Scheme"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Parrot",
        "size": 3004,
        "type": "Programming_language",
        "value": "Parrot"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 2140,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/newtonjoo/deepfold/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "3.3 Run the preparation code.",
        "parent_header": [
          "Protein 3D Structure Prediction with DeepFold",
          "3. Manual training"
        ],
        "type": "Text_excerpt",
        "value": "An example command of running the feature preparation pipeline would be\n\n```bash\n  python generate_pkl_features.py \\\n    --fasta_dir ./example_data/fasta \\\n    --output_dir ./out \\\n    --data_dir /path/to/database/directory \\\n    --num_workers 1\n```\n\nThis command automatically processes all FASTA files under `fasta_dir`, and dumps the results to `output_dir`. Note that each FASTA file should contain only one sequence. The default number of CPUs used in hhblits and jackhmmer are 4 and 8. You can modify them in `deepfold/data/tools/hhblits.py` and `deepfold/data/tools/jackhmmer.py`, respectively.\n"
      },
      "source": "https://raw.githubusercontent.com/newtonjoo/deepfold/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3.6 Run the training code!",
        "parent_header": [
          "Protein 3D Structure Prediction with DeepFold",
          "3. Manual training"
        ],
        "type": "Text_excerpt",
        "value": "To train the model on a single node without MPI, run\n```bash\npython train.py\n```\n\nYou can also train the model with multiple GPUs using MPI (or workload managers that supports MPI, such as PBS or Slurm) by running:\n```bash\nsbatch run_train.sh\n```\n\nIn either way, make sure you properly configurate the option `use_mpi` and `gpus_per_node` in [`deepfold/train/train_config.py`](./deepfold/train/train_config.py).\n"
      },
      "source": "https://raw.githubusercontent.com/newtonjoo/deepfold/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-03 23:36:25",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 17
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "5.2 Use of third-party software.",
        "parent_header": [
          "Protein 3D Structure Prediction with DeepFold",
          "5. License and disclaimer."
        ],
        "type": "Text_excerpt",
        "value": "Use of the third-party software, libraries or code may be governed by separate terms and conditions or license provisions. Your use of the third-party software, libraries or code is subject to any such terms and you should check that you can comply with any applicable restrictions or terms and conditions before use.\n"
      },
      "source": "https://raw.githubusercontent.com/newtonjoo/deepfold/main/README.md",
      "technique": "header_analysis"
    }
  ]
}