{
  "application_domain": [
    {
      "confidence": 10.4,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "CandyCrunch"
        ],
        "type": "Text_excerpt",
        "value": "If you use `CandyCrunch` or any of our datasets in your work, please cite Urban et al., bioRxiv 2023.  \nThe data used to train `CandyCrunch` can be found at Zenodo, under [doi:10.5281/zenodo.7940047](https://zenodo.org/record/7940047)\n"
      },
      "source": "https://raw.githubusercontent.com/BojarLab/CandyCrunch/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/BojarLab/CandyCrunch"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-09-30T12:07:15Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-09T10:42:48Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Predicting glycan structure from LC-MS/MS data"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9972540503687393,
      "result": {
        "original_header": "What is CandyCrunch?",
        "type": "Text_excerpt",
        "value": "**CandyCrunch** is a package for predicting glycan structure from LC-MS/MS data. It contains the CandyCrunch model, along with the rest of the inference pipeline and and downstream spectrum processing tools. These are further described in our manuscript [Urban et al. (2024)](https://www.nature.com/articles/s41592-024-02314-6) &ndash; ***Predicting glycan structure from tandem mass spectrometry via deep learning*** published in Nature Methods.\n \n"
      },
      "source": "https://raw.githubusercontent.com/BojarLab/CandyCrunch/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9856918940256998,
      "result": {
        "original_header": "`CandyCrunch.ipynb` <a href=\"https://colab.research.google.com/github/BojarLab/CandyCrunch/blob/main/CandyCrunch.ipynb\"><img alt=\"Open In Colab\" src=\"https://colab.research.google.com/assets/colab-badge.svg\" /></a>",
        "type": "Text_excerpt",
        "value": "If you are looking for a **convenient** and **easy-to-run** version of the code that does not require any local installations, we have also created a Google Colaboratory notebook.  \nThe notebook contains an example pipeline ready to run, which can be copied, executed, and customised in any way.  \nThe example file included in the notebook is the same as in `examples/` and is ready for use in the notebook workflow. \n \n"
      },
      "source": "https://raw.githubusercontent.com/BojarLab/CandyCrunch/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9393042454369281,
      "result": {
        "original_header": "Requires at a minimum:",
        "type": "Text_excerpt",
        "value": "#### Optional arguments:\n</summary>\n<pre>\n--mode, type=string: mass spectrometry mode; options are 'negative' or 'positive'; default: 'negative' <br />\n--modification, type=string: chemical derivatization of glycans; options are \u201creduced\u201d, \u201cpermethylated\u201d, \u201c2AA\u201d, \u201c2AB\u201d or \u201ccustom\u201d; default:\u201dreduced\u201d\n| \n|--mass_tag, type=float: only if modification = \"custom\", mass of custom reducing end tag ; default:None <br />\n--lc, type=string: type of liquid chromatography; options are 'PGC', 'C18', and 'other'; default:'PGC' <br />\n--trap, type=string: type of mass detector used; options are 'linear', 'orbitrap', 'amazon', and 'other'; default:'linear' <br />\n--rt_min, type=float: whether only spectra from a minimum retention time (in minutes) onward should be considered; default:0 <br />\n--rt_max, type=float: whether only spectra up to a maximum retention time (in minutes) should be considered; default:0 <br />\n--rt_diff, type=float: maximum retention time difference (in minutes) to peak apex that can be grouped with that peak; default:1.0 <br />\n--spectra, type=float: whether to also output the actual spectra used for prediction; default:False <br />\n--get_missing, type=bool: whether to also organize spectra without a matching prediction but a valid composition; default:False\n|\n|--filter_out, type=set: only if get_missing = \"True\", set of monosaccharide or modification types that is used to filter out compositions (e.g., if you know there is no Pen); default:{'Kdn', 'P', 'HexA', 'Pen', 'HexN', 'Me', 'PCho', 'PEtN'} <br />  \n--mass_tolerance, type=float: permitted variation in Da, to still consider two masses to stem from the same molecule.; default:0.5 <br />\n--supplement, type=bool: whether to impute observed biosynthetic intermediaries from biosynthetic networks; default:True <br />\n--experimental, type=bool: whether to impute missing predictions via database searches etc.; default:True\n|\n|--taxonomy_class, type=string: only if experimental = \"True\", which taxonomy class to pull glycans for populating the mass_dic for experimental=True; default:'Mammalia' <br />\n--plot_glycans, type=bool: whether you want to save an output.xlsx file that contains SNFG images of all top1 predictions, will be saved in the same folder as spectra_filepath; default:False\n</pre>\n</details>\n \n"
      },
      "source": "https://raw.githubusercontent.com/BojarLab/CandyCrunch/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9728792051541251,
      "result": {
        "original_header": "`wrap_inference` (in `CandyCrunch.prediction`) <br>",
        "type": "Text_excerpt",
        "value": "#### Optional arguments:\n</summary>\n<pre>\nmodel, type=Pytorch object: loaded from a checkpoint of a trained CandyCrunch model  <br />\nglycans, type=list: ordered list of glycans used to train CandyCrunch which can be predicted by the model <br />\nlibr, type=list: library of monosaccharides, used as a mapping index to ensure unique graph construction <br />\nbin_num, type=list: number of bins to separate the ms2 spectrum into <br />\nfrag_num, type=list: number of top fragments to show in df_out per spectrum; default:100 <br />\nmode, type=string: mass spectrometry mode; options are 'negative' or 'positive'; default: 'negative' <br />\nmodification, type=string: chemical derivatization of glycans; options are \u201creduced\u201d, \u201cpermethylated\u201d, \u201c2AA\u201d, \u201c2AB\u201d or \u201ccustom\u201d; default:\u201dreduced\u201d\n| \n|--mass_tag, type=float: only if modification = \"custom\", mass of custom reducing end tag ; default:None <br />\nlc, type=string: type of liquid chromatography; options are 'PGC', 'C18', and 'other'; default:'PGC' <br />\ntrap, type=string: type of mass detector used; options are 'linear', 'orbitrap', 'amazon', and 'other'; default:'linear' <br />\nrt_min, type=float: whether only spectra from a minimum retention time (in minutes) onward should be considered; default:0 <br />\nrt_max, type=float: whether only spectra up to a maximum retention time (in minutes) should be considered; default:0 <br />\nrt_diff, type=float: maximum retention time difference (in minutes) to peak apex that can be grouped with that peak; default:1.0 <br />\npred_thresh, type=float: prediction confidence threshold used for filtering; default:0.01 <br />\ntemperature, type=float: the temperature factor used to calibrate logits; default:1.15 <br />\nspectra, type=float: whether to also output the actual spectra used for prediction; default:False <br />\nget_missing, type=bool: whether to also organize spectra without a matching prediction but a valid composition; default:False\n|\n|--filter_out, type=set: only if get_missing = \"True\", set of monosaccharide or modification types that is used to filter out compositions (e.g., if you know there is no Pen); default:{'Kdn', 'P', 'HexA', 'Pen', 'HexN', 'Me', 'PCho', 'PEtN'} <br />\nmass_tolerance, type=float: permitted variation in Da, to still consider two masses to stem from the same molecule.; default:0.5 <br />\nextra_thresh, type=float: prediction confidence threshold at which to allow cross-class predictions (e.g., predicting N-glycans in O-glycan samples); default:0.2 <br />\nsupplement, type=bool: whether to impute observed biosynthetic intermediaries from biosynthetic networks; default:True <br />\nexperimental, type=bool: whether to impute missing predictions via database searches etc.; default:True\n|\n|--mass_dic, type=dict: only if experimental = \"True\", dictionary of form mass : list of glycans; will be generated internally \n|\n|--taxonomy_class, type=string: only if experimental = \"True\", which taxonomy class to pull glycans for populating the mass_dic for experimental=True; default:'Mammalia' \n|\n|--df_use, type=DataFrame: only if experimental = \"True\", sugarbase-like database of glycans with species associations etc.; default: use glycowork-stored df_glycan <br />\nplot_glycans, type=bool: whether you want to save an output.xlsx file that contains SNFG images of all top1 predictions, will be saved in the same folder as spectra_filepath; default:False  \n#### This is what a truncated example of `annotated_spectra_df` would look like\n</summary> \n"
      },
      "source": "https://raw.githubusercontent.com/BojarLab/CandyCrunch/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9732321890287491,
      "result": {
        "original_header": "`wrap_inference_batch` (in `CandyCrunch.prediction`) <br>",
        "type": "Text_excerpt",
        "value": "Wrapper function to predict glycan structures from multiple LC-MS/MS files using CandyCrunch. <br />\nThis function similarly to `wrap_inference` except a list of filenames is provided and a dictionary of output DataFrames is returned, one for each input file, keyed by their filenames.  <br />\nGlycan predictions are assigned to groups based on the most common prediction in the group across files. Useful for retention time correction but cannot correct LC runs in cases where noise exceeds signal. <br /> \n#### Requires at a minimum:  \n<pre>\n- spectra_filepath_list, type = list: list of filepaths to mzML/mzXML file and/or a .xlsx files <br />\n- glycan_class, type = string: the glycan class measured (\"N\", \"O\", \"lipid\"/\"free\") <br />\n- intra_cat_threshold, type = float: minutes the RT of a structure can differ from the mean of a group. <br />\n- top_n_isomers, type = int: number of different isomer groups at each composition to retain. \n</pre>\n \n"
      },
      "source": "https://raw.githubusercontent.com/BojarLab/CandyCrunch/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9505369343722508,
      "result": {
        "original_header": "`CandyCrumbs` (in `CandyCrunch.analysis`) <br>",
        "type": "Text_excerpt",
        "value": "#### Optional arguments:\n</summary>\n<pre>\nmax_cleavages, type=int: maximum number of allowed concurrent cleavages per possible fragment; default:3 <br />\nsimplify, type=bool: whether to select a single fragment for each mass based on mass difference, number of cleavages, and other fragments; default:True <br />\ncharge, type=int: the charge state of the precursor ion (singly-charged, doubly-charged, etc.); default:-1 <br />\nlabel_mass, type=float: mass of the glycan label or reducing end modification; default:2.0156 <br />\niupac, type=bool: whether to also return the fragment sequence in IUPAC-condensed nomenclature; default:False <br />\nlibr, type=list: library of monosaccharides, used as a mapping index to ensure unique graph construction \n</pre>\n</details> \n\n<details>\n<summary>\n  \n#### This is what `annotated_fragments_dict` would look like\n</summary>\n<pre>{425.07: {'Theoretical fragment masses': [425.12955],\n  'Domon-Costello nomenclatures': [['02A_3_Alpha', 'M_H2O']],\n  'Fragment charges': [-1]},\n 443.07: {'Theoretical fragment masses': [443.1401],\n  'Domon-Costello nomenclatures': [['02A_3_Alpha']],\n  'Fragment charges': [-1]},\n 546.19: {'Theoretical fragment masses': [546.18775],\n  'Domon-Costello nomenclatures': [['Y_3_Beta', 'Y_2_Alpha']],\n  'Fragment charges': [-1]},\n 1216.32: {'Theoretical fragment masses': [1216.43105],\n  'Domon-Costello nomenclatures': [['M_C2H4O2']],\n  'Fragment charges': [-1]}}</pre>\n</details> \nIt isn't always easy to quickly visualise the Domon-Costello nomenclature. Here is an example of how we can use GlycoDraw to visualise one of the outputs:\n```python\n#This will calculate where on the glycan the fragments occured and return a valid GlycoDraw input\nfragment_iupac = domon_costello_to_fragIUPAC('Gal(a1-3)Gal(b1-4)GlcNAc(b1-6)[GalNAc(b1-4)GlcNAc(b1-3)]Gal(b1-4)Glc',['Y_3_Beta', 'Y_2_Alpha'])\n\n#Then we can simply draw the result with GlycoDraw\nGlycoDraw(fragment_iupac)\n```\n<p align=\"center\">\n  <img width=\"460\" height=\"300\" src=\"/images/frag_iupac_demo_white.svg\">\n</p>\n \n"
      },
      "source": "https://raw.githubusercontent.com/BojarLab/CandyCrunch/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.982802509880365,
      "result": {
        "original_header": "`prediction` <br>",
        "type": "Text_excerpt",
        "value": "- Includes all functions used in `wrap_inference`. \n- Contains `process_mzML_stack` and `process_mzXML_stack` to extract spectra from .mzML and .mzXML files <br> \n"
      },
      "source": "https://raw.githubusercontent.com/BojarLab/CandyCrunch/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9022836488230344,
      "result": {
        "original_header": "`analysis` <br>",
        "type": "Text_excerpt",
        "value": "- Includes all functions used in `CandyCrumbs`.\n- Contains functions to analyze and compare averaged spectra\n- Contains other functions to manipulate glycan string representations, e.g., `domon_costello_to_fragIUPAC` <br> \n"
      },
      "source": "https://raw.githubusercontent.com/BojarLab/CandyCrunch/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9787057296336003,
      "result": {
        "original_header": "`model` <br>",
        "type": "Text_excerpt",
        "value": "- Includes code for model definition, dataset handling, and data augmentation; only used in the back-end <br> \n"
      },
      "source": "https://raw.githubusercontent.com/BojarLab/CandyCrunch/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/BojarLab/CandyCrunch/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BojarLab/CandyCrunch/main/CandyCrunch.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BojarLab/CandyCrunch/main/CandyCrunch.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/BojarLab/CandyCrunch/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "BojarLab/CandyCrunch"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CandyCrunch"
      },
      "source": "https://raw.githubusercontent.com/BojarLab/CandyCrunch/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "identifier": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://doi.org/10.5281/zenodo.7940046"
      },
      "source": "https://raw.githubusercontent.com/BojarLab/CandyCrunch/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://colab.research.google.com/assets/colab-badge.svg"
      },
      "source": "https://raw.githubusercontent.com/BojarLab/CandyCrunch/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BojarLab/CandyCrunch/main//images/frag_iupac_demo_white.svg"
      },
      "source": "https://raw.githubusercontent.com/BojarLab/CandyCrunch/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Development version:",
        "parent_header": [
          "CandyCrunch",
          "Install CandyCrunch"
        ],
        "type": "Text_excerpt",
        "value": "```bash\npip install git+https://github.com/BojarLab/CandyCrunch.git\n``` "
      },
      "source": "https://raw.githubusercontent.com/BojarLab/CandyCrunch/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Development version bundled with GlycoDraw:",
        "parent_header": [
          "CandyCrunch",
          "Install CandyCrunch"
        ],
        "type": "Text_excerpt",
        "value": "> [!NOTE]  \n> The Operating System specific installations for GlycoDraw are still required, read more in the [GlycoDraw installation guide](https://bojarlab.github.io/glycowork/examples.html#glycodraw-code-snippets)\n```bash\npip install 'CandyCrunch[draw] @ git+https://github.com/Bojarlab/CandyCrunch'\n``` "
      },
      "source": "https://raw.githubusercontent.com/BojarLab/CandyCrunch/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "PyPI:",
        "parent_header": [
          "CandyCrunch",
          "Install CandyCrunch"
        ],
        "type": "Text_excerpt",
        "value": "```bash\npip install CandyCrunch\n```"
      },
      "source": "https://raw.githubusercontent.com/BojarLab/CandyCrunch/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9287618417655595,
      "result": {
        "original_header": "`CandyCrunch.ipynb` <a href=\"https://colab.research.google.com/github/BojarLab/CandyCrunch/blob/main/CandyCrunch.ipynb\"><img alt=\"Open In Colab\" src=\"https://colab.research.google.com/assets/colab-badge.svg\" /></a>",
        "type": "Text_excerpt",
        "value": "If you are looking for a **convenient** and **easy-to-run** version of the code that does not require any local installations, we have also created a Google Colaboratory notebook.  \nThe notebook contains an example pipeline ready to run, which can be copied, executed, and customised in any way.  \nThe example file included in the notebook is the same as in `examples/` and is ready for use in the notebook workflow. \n \n"
      },
      "source": "https://raw.githubusercontent.com/BojarLab/CandyCrunch/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9177207640548318,
      "result": {
        "original_header": "Using CandyCrunch &ndash; Command line interface:",
        "type": "Text_excerpt",
        "value": "If you would like to run our main inference function from the command line, you can do so using the `candycrunch_predict` command included in this repository.\n \n"
      },
      "source": "https://raw.githubusercontent.com/BojarLab/CandyCrunch/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8631852479875445,
      "result": {
        "original_header": "Requires at a minimum:",
        "type": "Text_excerpt",
        "value": "<pre>\n--spectra_filepath,type=string: a filepath to an mzML/mzXML file or a .xlsx file <br />\n--glycan_class, type=string: the glycan class measured (\"N\", \"O\", \"lipid\"/\"free\") <br />\n--output, type=string: an output filepath ending with `.csv` or `.xlsx`\n</pre> \n"
      },
      "source": "https://raw.githubusercontent.com/BojarLab/CandyCrunch/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8974765042014009,
      "result": {
        "original_header": "`wrap_inference` (in `CandyCrunch.prediction`) <br>",
        "type": "Text_excerpt",
        "value": "Wrapper function to predict glycan structures from raw LC-MS/MS spectra using `CandyCrunch`  \n  \n#### Requires at a minimum:  \n<pre>\n- spectra_filepath, type = string: a filepath to an mzML/mzXML file or a .xlsx file <br />\n- glycan_class,type = string: the glycan class measured (\"N\", \"O\", \"lipid\"/\"free\")\n</pre>\nmzML/mzXML files are internally processed into extracted spectra. xlsx files need to be already extracted in the format as the example file in `examples/`.\n<details>\n<summary> \n"
      },
      "source": "https://raw.githubusercontent.com/BojarLab/CandyCrunch/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/BojarLab/CandyCrunch/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bioinformatics, glycans, machine-learning, mass-spectrometry, python"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2022 BojarLab\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/BojarLab/CandyCrunch/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BojarLab/CandyCrunch/main//images/candycrunch_logo_light_banner_pt.svg"
      },
      "source": "https://raw.githubusercontent.com/BojarLab/CandyCrunch/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CandyCrunch"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "BojarLab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 1561054,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 357916,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BojarLab/CandyCrunch/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "urbj",
          "type": "User"
        },
        "date_created": "2024-08-29T08:54:14Z",
        "date_published": "2024-08-29T09:04:26Z",
        "description": "# Change Log\r\n\r\n## general \r\nupdated package to the current glycowork version (~=1.30)\r\n\r\n## analysis \r\n- Added further sulphation fragment support to Neu5Ac, Neu5Gc, HexNAc, and HexA\r\n- Added HCO3 adduct fragment support",
        "html_url": "https://github.com/BojarLab/CandyCrunch/releases/tag/v.0.4.1",
        "name": "v0.4.1",
        "release_id": 172515625,
        "tag": "v.0.4.1",
        "tarball_url": "https://api.github.com/repos/BojarLab/CandyCrunch/tarball/v.0.4.1",
        "type": "Release",
        "url": "https://api.github.com/repos/BojarLab/CandyCrunch/releases/172515625",
        "value": "https://api.github.com/repos/BojarLab/CandyCrunch/releases/172515625",
        "zipball_url": "https://api.github.com/repos/BojarLab/CandyCrunch/zipball/v.0.4.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "urbj",
          "type": "User"
        },
        "date_created": "2024-04-05T04:00:46Z",
        "date_published": "2024-04-05T08:51:50Z",
        "description": "# Change Log\r\n## general \r\n- updated package to the current `glycowork` version (~=1.20)\r\n\r\n## analysis\r\n- Generalised monosaccharide mass retrieval\r\n- Added '02X', '02A' dHex cross ring fragments\r\n- Added phosphorylated fragments\r\n- Added '02A', '24X' HexNAc cross ring fragments\r\n- Added '15X', '24X', '25X', '02A', '04A', '14A', '15A', '24A' sialic acid cross ring fragments\r\n- Added '04X', '24X', '35X', '15A', '03A' Hex cross ring fragments\r\n",
        "html_url": "https://github.com/BojarLab/CandyCrunch/releases/tag/v0.4.0",
        "name": "v0.4.0",
        "release_id": 149907596,
        "tag": "v0.4.0",
        "tarball_url": "https://api.github.com/repos/BojarLab/CandyCrunch/tarball/v0.4.0",
        "type": "Release",
        "url": "https://api.github.com/repos/BojarLab/CandyCrunch/releases/149907596",
        "value": "https://api.github.com/repos/BojarLab/CandyCrunch/releases/149907596",
        "zipball_url": "https://api.github.com/repos/BojarLab/CandyCrunch/zipball/v0.4.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "urbj",
          "type": "User"
        },
        "date_created": "2024-02-12T13:11:17Z",
        "date_published": "2024-02-12T13:29:22Z",
        "description": "# Change Log\r\n\r\n## general \r\n\r\n- updated package to the current `glycowork` version (~=1.1.0)\r\n\r\n## analysis \r\n\r\n- Added '03X', '15X', and '24X' cross ring fragments\r\n\r\n## cli\r\n\r\n- Added `candycrunch_predict` and command line functionality\r\n \r\n## prediction\r\n\r\n- Added `glytoucan_map` to harmonize predicted glycans and display GlyTouCan IDs in outputs\r\n- Added to generation of possible structures by generalising Neu5Ac/Neu5Gc sequence substitutions\r\n- Added to generation of possible structures by generalising GlcNAc/GlcNAc6S sequence substitutions\r\n- Added Neu5Ac isomer deduplication based on Neu5Gc isomers\r\n- Added user defined RT cutoffs `rt_min, rt_max, rt_diff` to narrow downs spectra of interest \r\n- Added functionality to filter out duplicates based on RT \r\n- Added `plot_glycans_excel` support for output excel spreadsheets\r\n- Added `wrap_inference_batch` to run inference on multiple inputs at once and group structures across files \r\n\r\n## model\r\n\r\n- Updated model checkpoint ",
        "html_url": "https://github.com/BojarLab/CandyCrunch/releases/tag/v0.3.0",
        "name": "v0.3.0",
        "release_id": 141617054,
        "tag": "v0.3.0",
        "tarball_url": "https://api.github.com/repos/BojarLab/CandyCrunch/tarball/v0.3.0",
        "type": "Release",
        "url": "https://api.github.com/repos/BojarLab/CandyCrunch/releases/141617054",
        "value": "https://api.github.com/repos/BojarLab/CandyCrunch/releases/141617054",
        "zipball_url": "https://api.github.com/repos/BojarLab/CandyCrunch/zipball/v0.3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "urbj",
          "type": "User"
        },
        "date_created": "2023-12-07T13:48:52Z",
        "date_published": "2023-12-07T13:50:11Z",
        "description": "- updated package to the current `glycowork` version (1.0.1)\r\n- added required dependencies ",
        "html_url": "https://github.com/BojarLab/CandyCrunch/releases/tag/v0.2.2",
        "name": "v0.2.2",
        "release_id": 133024537,
        "tag": "v0.2.2",
        "tarball_url": "https://api.github.com/repos/BojarLab/CandyCrunch/tarball/v0.2.2",
        "type": "Release",
        "url": "https://api.github.com/repos/BojarLab/CandyCrunch/releases/133024537",
        "value": "https://api.github.com/repos/BojarLab/CandyCrunch/releases/133024537",
        "zipball_url": "https://api.github.com/repos/BojarLab/CandyCrunch/zipball/v0.2.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "Bribak",
          "type": "User"
        },
        "date_created": "2023-11-16T10:26:40Z",
        "date_published": "2023-11-16T10:28:08Z",
        "description": "- fixed indentation in process_mzML_stack",
        "html_url": "https://github.com/BojarLab/CandyCrunch/releases/tag/v0.2.1",
        "name": "v0.2.1",
        "release_id": 129703327,
        "tag": "v0.2.1",
        "tarball_url": "https://api.github.com/repos/BojarLab/CandyCrunch/tarball/v0.2.1",
        "type": "Release",
        "url": "https://api.github.com/repos/BojarLab/CandyCrunch/releases/129703327",
        "value": "https://api.github.com/repos/BojarLab/CandyCrunch/releases/129703327",
        "zipball_url": "https://api.github.com/repos/BojarLab/CandyCrunch/zipball/v0.2.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "Bribak",
          "type": "User"
        },
        "date_created": "2023-11-01T15:36:47Z",
        "date_published": "2023-11-01T16:17:59Z",
        "description": "- refactored spectral grouping and averaging\r\n- general code refactoring for readability and efficiency\r\n- filter out very low and very high RT spectra if possible\r\n- added some ancillary functionality, such as combining relative abundances across multiple charge states\r\n- some preparations for eventually accepting glycowork v0.9, including supporting more adducts etc.",
        "html_url": "https://github.com/BojarLab/CandyCrunch/releases/tag/v0.2.0",
        "name": "v0.2.0",
        "release_id": 127553432,
        "tag": "v0.2.0",
        "tarball_url": "https://api.github.com/repos/BojarLab/CandyCrunch/tarball/v0.2.0",
        "type": "Release",
        "url": "https://api.github.com/repos/BojarLab/CandyCrunch/releases/127553432",
        "value": "https://api.github.com/repos/BojarLab/CandyCrunch/releases/127553432",
        "zipball_url": "https://api.github.com/repos/BojarLab/CandyCrunch/zipball/v0.2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "Bribak",
          "type": "User"
        },
        "date_created": "2023-10-06T14:04:20Z",
        "date_published": "2023-10-06T14:07:24Z",
        "description": "- updated model weights (better performance)\r\n- agglomerative clustering for RT grouping\r\n- generalized handling of tag masses in wrap_inference\r\n- calculate ppm error",
        "html_url": "https://github.com/BojarLab/CandyCrunch/releases/tag/v0.1.3",
        "name": "v0.1.3",
        "release_id": 124053866,
        "tag": "v0.1.3",
        "tarball_url": "https://api.github.com/repos/BojarLab/CandyCrunch/tarball/v0.1.3",
        "type": "Release",
        "url": "https://api.github.com/repos/BojarLab/CandyCrunch/releases/124053866",
        "value": "https://api.github.com/repos/BojarLab/CandyCrunch/releases/124053866",
        "zipball_url": "https://api.github.com/repos/BojarLab/CandyCrunch/zipball/v0.1.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "Bribak",
          "type": "User"
        },
        "date_created": "2023-09-22T03:57:21Z",
        "date_published": "2023-09-22T04:01:09Z",
        "description": "- updated package to the current `glycowork` version (0.8.1)\r\n- updated model checkpoint with internal (better) model",
        "html_url": "https://github.com/BojarLab/CandyCrunch/releases/tag/v0.1.2",
        "name": "v0.1.2",
        "release_id": 122146764,
        "tag": "v0.1.2",
        "tarball_url": "https://api.github.com/repos/BojarLab/CandyCrunch/tarball/v0.1.2",
        "type": "Release",
        "url": "https://api.github.com/repos/BojarLab/CandyCrunch/releases/122146764",
        "value": "https://api.github.com/repos/BojarLab/CandyCrunch/releases/122146764",
        "zipball_url": "https://api.github.com/repos/BojarLab/CandyCrunch/zipball/v0.1.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "Bribak",
          "type": "User"
        },
        "date_created": "2023-06-12T09:53:29Z",
        "date_published": "2023-06-12T09:54:32Z",
        "description": "- made torch compatibility more flexible",
        "html_url": "https://github.com/BojarLab/CandyCrunch/releases/tag/v0.1.1",
        "name": "v0.1.1",
        "release_id": 108195205,
        "tag": "v0.1.1",
        "tarball_url": "https://api.github.com/repos/BojarLab/CandyCrunch/tarball/v0.1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/BojarLab/CandyCrunch/releases/108195205",
        "value": "https://api.github.com/repos/BojarLab/CandyCrunch/releases/108195205",
        "zipball_url": "https://api.github.com/repos/BojarLab/CandyCrunch/zipball/v0.1.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "Bribak",
          "type": "User"
        },
        "date_created": "2023-06-10T09:41:15Z",
        "date_published": "2023-06-10T10:51:04Z",
        "description": "first public release; matching results presented in our upcoming preprint (Urban et al., bioRxiv, 2023)",
        "html_url": "https://github.com/BojarLab/CandyCrunch/releases/tag/v0.1.0",
        "name": "v0.1.0",
        "release_id": 108103505,
        "tag": "v0.1.0",
        "tarball_url": "https://api.github.com/repos/BojarLab/CandyCrunch/tarball/v0.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/BojarLab/CandyCrunch/releases/108103505",
        "value": "https://api.github.com/repos/BojarLab/CandyCrunch/releases/108103505",
        "zipball_url": "https://api.github.com/repos/BojarLab/CandyCrunch/zipball/v0.1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-03 23:15:52",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 19
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Basic usage",
        "parent_header": [
          "CandyCrunch",
          "Using CandyCrunch &ndash; LC-MS/MS glycan annotation",
          "`wrap_inference` (in `CandyCrunch.prediction`) <br>"
        ],
        "type": "Text_excerpt",
        "value": "> [!IMPORTANT]  \n> Users must install CandyCrunch using pip before running the commands below\n```console\n/Users/xurbja $ candycrunch_predict --spectra_filepath path_to_my_files/file.mzML --glycan_class 'O' --output path_to_my_outputs/output_file.csv \n```\n"
      },
      "source": "https://raw.githubusercontent.com/BojarLab/CandyCrunch/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "`examples` <br>",
        "parent_header": [
          "CandyCrunch",
          "Modules"
        ],
        "type": "Text_excerpt",
        "value": "- Includes the extracted spectra of an example mzML file from Kouka et al. 2022\n"
      },
      "source": "https://raw.githubusercontent.com/BojarLab/CandyCrunch/main/README.md",
      "technique": "header_analysis"
    }
  ]
}