{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citing RNA-Bloom :scroll:",
        "type": "Text_excerpt",
        "value": "If you use RNA-Bloom in your work, please cite our manuscript(s).\n\n[Long-read RNA-seq assembly](https://doi.org/10.1038/s41467-023-38553-y):\n\n> Ka Ming Nip, Saber Hafezqorani, Kristina K. Gagalova, Readman Chiu, Chen Yang, Ren\u00e9 L. Warren, and Inanc Birol. Reference-free assembly of long-read transcriptome sequencing data with RNA-Bloom2. Nature Communications. 2023 May 22;14(1):2940. doi: 10.1038/s41467-023-38553-y\n\n[Short-read RNA-seq assembly](https://genome.cshlp.org/content/30/8/1191.full):\n\n> Ka Ming Nip, Readman Chiu, Chen Yang, Justin Chu, Hamid Mohamadi, Ren\u00e9 L. Warren, and Inanc Birol. RNA-Bloom enables reference-free and reference-guided sequence assembly for single-cell transcriptomes. Genome Research. 2020 Aug;30(8):1191-1200. doi: 10.1101/gr.260174.119. Epub 2020 Aug 17.\n\n--------------------------------------------------------------------------------\n"
      },
      "source": "https://raw.githubusercontent.com/bcgsc/RNA-Bloom/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/bcgsc/RNA-Bloom"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-06-30T22:24:19Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-27T17:10:23Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ":hibiscus: reference-free transcriptome assembly for short and long reads"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9800819441236718,
      "result": {
        "original_header": "(C) stop at an intermediate stage:",
        "type": "Text_excerpt",
        "value": "This is a very useful option if you only want to assemble fragments or correct long reads (ie. with `-stage 2`)!\n \n"
      },
      "source": "https://raw.githubusercontent.com/bcgsc/RNA-Bloom/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8747782440040408,
      "result": {
        "original_header": "Implementation :pencil:",
        "type": "Text_excerpt",
        "value": "RNA-Bloom is written in Java with Apache NetBeans IDE. It uses the following libraries:\n* [Apache Commons CLI](https://commons.apache.org/proper/commons-cli/)\n* [JGraphT](https://jgrapht.org/)\n* [Smile](https://github.com/haifengl/smile) \n"
      },
      "source": "https://raw.githubusercontent.com/bcgsc/RNA-Bloom/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9866297982349758,
      "result": {
        "type": "Text_excerpt",
        "value": "**RNA-Bloom** is a fast and memory-efficient *de novo* transcript sequence assembler. It is designed for the following sequencing data types:\n* single-end/paired-end bulk RNA-seq (strand-specific/agnostic)\n* paired-end single-cell RNA-seq (strand-specific/agnostic)\n* long-read RNA-seq (ONT cDNA/direct RNA, PacBio cDNA) \n"
      },
      "source": "https://raw.githubusercontent.com/bcgsc/RNA-Bloom/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "(B) download from GitHub:",
        "parent_header": [
          "Installation :wrench:"
        ],
        "type": "Text_excerpt",
        "value": "1. Download the binary tarball `rnabloom_vX.X.X.tar.gz` from the [releases](https://github.com/bcgsc/RNA-Bloom/releases) section.\n2. Extract the downloaded tarball with the command:\n```\ntar -zxf rnabloom_vX.X.X.tar.gz\n```\nRNA-Bloom can be run as `java -jar /path/to/RNA-Bloom.jar ...`\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/bcgsc/RNA-Bloom/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/bcgsc/RNA-Bloom/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 7
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/bcgsc/RNA-Bloom/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bcgsc/RNA-Bloom"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/bcgsc/RNA-Bloom/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bcgsc/RNA-Bloom/master/recipe/build.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation :wrench:",
        "type": "Text_excerpt",
        "value": "RNA-Bloom can be installed in two ways:\n"
      },
      "source": "https://raw.githubusercontent.com/bcgsc/RNA-Bloom/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "(A) install with `conda` or `mamba`:",
        "parent_header": [
          "Installation :wrench:"
        ],
        "type": "Text_excerpt",
        "value": "```\nconda install -c bioconda rnabloom\n```\n```\nmamba install -c bioconda rnabloom\n```\nAll dependent software (listed above) will be installed. RNA-Bloom can be run as `rnabloom ...`\n"
      },
      "source": "https://raw.githubusercontent.com/bcgsc/RNA-Bloom/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "(A) set Bloom filter sizes automatically:",
        "parent_header": [
          "General Settings :gear:"
        ],
        "type": "Text_excerpt",
        "value": "If `ntcard` is found in your `PATH`, then the `-ntcard` option is automatically turned on to count the number of unique k-mers in your reads.\n```\njava -jar RNA-Bloom.jar -fpr 0.01 ...\n```\nThis sets the size of Bloom filters automatically to accommodate a false positive rate (FPR) of ~1%.\n\nAlternatively, you can specify the exact number of unique k-mers:\n```\njava -jar RNA-Bloom.jar -fpr 0.01 -nk 28077715 ...\n```\nThis sets the size of Bloom filters automatically to accommodate 28,077,715 unique k-mers for a FPR of ~1%.\n\nAs a rule of thumb, a lower FPR may result in a better assembly but requires more memory for a larger Bloom filter.\n"
      },
      "source": "https://raw.githubusercontent.com/bcgsc/RNA-Bloom/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "(B) set the total size of Bloom filters:",
        "parent_header": [
          "General Settings :gear:"
        ],
        "type": "Text_excerpt",
        "value": "```\njava -jar RNA-Bloom.jar -mem 10 ...\n```\nThis sets the total size to 10 GB. If neither `-nk`, `-ntcard`, or `-mem` are used, then the total size is configured based on the size of input read files.\n"
      },
      "source": "https://raw.githubusercontent.com/bcgsc/RNA-Bloom/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9104761910303742,
      "result": {
        "original_header": "(C) stop at an intermediate stage:",
        "type": "Text_excerpt",
        "value": "This is a very useful option if you only want to assemble fragments or correct long reads (ie. with `-stage 2`)!\n \n"
      },
      "source": "https://raw.githubusercontent.com/bcgsc/RNA-Bloom/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999960288089209,
      "result": {
        "original_header": "(E) limit the size of Java heap:",
        "type": "Text_excerpt",
        "value": "```\njava -Xmx2g -jar RNA-Bloom.jar ...\n```\nor if you installed with `conda`:\nBASH2*\nThis limits the maximum Java heap to 2 GB with the `-Xmx` option. Note that `java` options has no effect on Bloom filter sizes. \n"
      },
      "source": "https://raw.githubusercontent.com/bcgsc/RNA-Bloom/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9672980839262009,
      "result": {
        "original_header": "Implementation :pencil:",
        "type": "Text_excerpt",
        "value": "RNA-Bloom is written in Java with Apache NetBeans IDE. It uses the following libraries:\n* [Apache Commons CLI](https://commons.apache.org/proper/commons-cli/)\n* [JGraphT](https://jgrapht.org/)\n* [Smile](https://github.com/haifengl/smile) \n"
      },
      "source": "https://raw.githubusercontent.com/bcgsc/RNA-Bloom/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/bcgsc/RNA-Bloom/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bioinformatics-tool, bulk-rna-seq, denovo-assembly, nanopore-sequencing, pacbio-sequencing, rna-seq, single-cell-rna-seq"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "RNA-Bloom\nCopyright 2018 Ka Ming Nip, BC Cancer, Genome Sciences Centre\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, version 3.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program. If not, see <http://www.gnu.org/licenses/>.\n\nFor commercial licensing options, please contact\nPatrick Rebstein <prebstein@bccancer.bc.ca>\n\nSee the file COPYRIGHT for details of the copyright and license of\neach individual file included with this software.\n\n                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/bcgsc/RNA-Bloom/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bcgsc/RNA-Bloom/master/rnabloom_logo.png"
      },
      "source": "https://raw.githubusercontent.com/bcgsc/RNA-Bloom/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "RNA-Bloom"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "bcgsc"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Java",
        "size": 1461615,
        "type": "Programming_language",
        "value": "Java"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 773,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bcgsc/RNA-Bloom/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "kmnip",
          "type": "User"
        },
        "date_created": "2022-12-24T01:13:02Z",
        "date_published": "2023-03-17T20:13:57Z",
        "description": "**general changes**\r\n* work around a bug in ntcard (fixes #43)\r\n* bypass non-ACGTU characters in input reads (fixes #49)\r\n\r\n**long-read assembly changes**\r\n* improvements to assembly sensitivity\r\n* fix bug in processing reads names containing `/` (fixes #45)\r\n* standardize format of assembled transcript names (fixes #46)\r\n* add more descriptive error messages (fixes #47)\r\n* add warning for assembly with only short transcripts (fixes #48)\r\n\r\n",
        "html_url": "https://github.com/bcgsc/RNA-Bloom/releases/tag/v2.0.1",
        "name": "RNA-Bloom v2.0.1",
        "release_id": 96033579,
        "tag": "v2.0.1",
        "tarball_url": "https://api.github.com/repos/bcgsc/RNA-Bloom/tarball/v2.0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/bcgsc/RNA-Bloom/releases/96033579",
        "value": "https://api.github.com/repos/bcgsc/RNA-Bloom/releases/96033579",
        "zipball_url": "https://api.github.com/repos/bcgsc/RNA-Bloom/zipball/v2.0.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "kmnip",
          "type": "User"
        },
        "date_created": "2022-07-08T17:47:22Z",
        "date_published": "2022-07-15T20:13:07Z",
        "description": "### general changes\r\n* display error message when there are too few input reads for assembly (fixes #42)\r\n* updated readme on description of output files (fixes #36)\r\n* `-ntcard` is turned on automatically if `-nk` is not specified and `ntcard` is found in your environment\r\n\r\n### short-read assembly changes\r\n* release unused Bloom filters during redundancy reduction, lowering memory usage (fixes #40)\r\n\r\n### long-read assembly changes\r\n* major improvements to assembly quality, peak memory, and runtime\r\n* use strobemers instead of k-mers for read subsampling\r\n  * (default) input arguments to `-lrsub` are changed\r\n* default value of `-lrrd` is raised from 2 to 3\r\n* remove sequences with no read support (fixes #18)\r\n* fix bug in handling assembly of a single sequence (fixes #44)",
        "html_url": "https://github.com/bcgsc/RNA-Bloom/releases/tag/v2.0.0",
        "name": "RNA-Bloom v2.0.0",
        "release_id": 72121810,
        "tag": "v2.0.0",
        "tarball_url": "https://api.github.com/repos/bcgsc/RNA-Bloom/tarball/v2.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/bcgsc/RNA-Bloom/releases/72121810",
        "value": "https://api.github.com/repos/bcgsc/RNA-Bloom/releases/72121810",
        "zipball_url": "https://api.github.com/repos/bcgsc/RNA-Bloom/zipball/v2.0.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "kmnip",
          "type": "User"
        },
        "date_created": "2021-10-06T18:18:59Z",
        "date_published": "2021-10-06T18:36:20Z",
        "description": "### general changes\r\n* upgrade to Java 11\r\n* fix critical bug where file reading takes forever to terminate on certain machines (fixes #15)\r\n* functionality of `-Q` option is changed to filter reads with low average base quality during the assembly stages\r\n  * now support both short reads and long reads\r\n* various bugfixes, optimization, and changes in default parameters/thresholds throughout\r\n\r\n### short-read assembly changes\r\n* new options for specifying single-end forward/reverse reads: `-sef` and `-ser`\r\n  * can be used in conjunction with `-left`, `-right`, and `-long`\r\n  * support for single-end reads in `-pool` will be implemented in a future release\r\n* max tip length is now set automatically based on sampled read lengths by default\r\n  * can still be set manually with `-tiplength` option\r\n* `transcripts.short.fa` is not used anymore during redundancy reduction to reduce computing requirements (fixes #13)\r\n  * only `transcripts.fa` is used and only `transcripts.nr.fa` will be generated\r\n\r\n### long-read assembly changes\r\n* overhaul of long read assembly workflow\r\n* option to polish long reads with short reads (see README for details)\r\n* new option to turn on/off read sub-sampling during long read assembly: `-lrsub` (default: on)",
        "html_url": "https://github.com/bcgsc/RNA-Bloom/releases/tag/v1.4.3",
        "name": "RNA-Bloom v1.4.3",
        "release_id": 50500987,
        "tag": "v1.4.3",
        "tarball_url": "https://api.github.com/repos/bcgsc/RNA-Bloom/tarball/v1.4.3",
        "type": "Release",
        "url": "https://api.github.com/repos/bcgsc/RNA-Bloom/releases/50500987",
        "value": "https://api.github.com/repos/bcgsc/RNA-Bloom/releases/50500987",
        "zipball_url": "https://api.github.com/repos/bcgsc/RNA-Bloom/zipball/v1.4.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "kmnip",
          "type": "User"
        },
        "date_created": "2020-06-06T02:38:24Z",
        "date_published": "2020-06-06T02:54:12Z",
        "description": "### general changes\r\n* prints error message when options `-left`,`-right`,`-long` are used with `-pool`\r\n\r\n### short reads assembly changes\r\n* initial support for single-end reads (see README for usage)\r\n\r\n### long reads assembly changes\r\n* initial support for PacBio reads; added new option:\r\n  * `-lrpb`: use PacBio options for minimap2",
        "html_url": "https://github.com/bcgsc/RNA-Bloom/releases/tag/v1.3.1",
        "name": "RNA-Bloom v1.3.1",
        "release_id": 27284511,
        "tag": "v1.3.1",
        "tarball_url": "https://api.github.com/repos/bcgsc/RNA-Bloom/tarball/v1.3.1",
        "type": "Release",
        "url": "https://api.github.com/repos/bcgsc/RNA-Bloom/releases/27284511",
        "value": "https://api.github.com/repos/bcgsc/RNA-Bloom/releases/27284511",
        "zipball_url": "https://api.github.com/repos/bcgsc/RNA-Bloom/zipball/v1.3.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "kmnip",
          "type": "User"
        },
        "date_created": "2020-05-19T21:06:54Z",
        "date_published": "2020-05-20T02:21:47Z",
        "description": "### general changes\r\n* fixed error when Bloom filter size is adjusted due to high false positive rate\r\n\r\n### short reads assembly changes\r\n* reduced misassemblies\r\n\r\n### nanopore reads assembly changes\r\n* significantly reduced run time\r\n* significantly reduced number of temporary files and their disk space usage\r\n* low-complexity reads are discarded during error correction\r\n* improved error correction in polyA tails\r\n* potentially chimeric reads are discarded\r\n* removed read clustering and related options\r\n* added new options:\r\n  * `-lrop`: min proportion of matching bases in read overlaps\r\n  * `-lrrd`: min read depth required for assembly",
        "html_url": "https://github.com/bcgsc/RNA-Bloom/releases/tag/v1.3.0",
        "name": "RNA-Bloom v1.3.0",
        "release_id": 26694556,
        "tag": "v1.3.0",
        "tarball_url": "https://api.github.com/repos/bcgsc/RNA-Bloom/tarball/v1.3.0",
        "type": "Release",
        "url": "https://api.github.com/repos/bcgsc/RNA-Bloom/releases/26694556",
        "value": "https://api.github.com/repos/bcgsc/RNA-Bloom/releases/26694556",
        "zipball_url": "https://api.github.com/repos/bcgsc/RNA-Bloom/zipball/v1.3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "kmnip",
          "type": "User"
        },
        "date_created": "2020-02-14T21:53:54Z",
        "date_published": "2020-02-27T02:03:01Z",
        "description": "### general changes\r\n* support installation with Bioconda (see README for details)\r\n\r\n### short reads assembly changes\r\n* use binary representation for assembled fragments (reducing their file size)\r\n* significantly reduced runtime for transcript assembly stage\r\n* reduced run time and memory usage of overlap assembly algorithm\r\n\r\n### nanopore reads assembly changes\r\n* use symbolic links instead of copying files\r\n* reduced run time and memory usage of overlap assembly algorithm\r\n* fixed StackOverflowError",
        "html_url": "https://github.com/bcgsc/RNA-Bloom/releases/tag/v1.2.3",
        "name": "RNA-Bloom v1.2.3",
        "release_id": 24023666,
        "tag": "v1.2.3",
        "tarball_url": "https://api.github.com/repos/bcgsc/RNA-Bloom/tarball/v1.2.3",
        "type": "Release",
        "url": "https://api.github.com/repos/bcgsc/RNA-Bloom/releases/24023666",
        "value": "https://api.github.com/repos/bcgsc/RNA-Bloom/releases/24023666",
        "zipball_url": "https://api.github.com/repos/bcgsc/RNA-Bloom/zipball/v1.2.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "kmnip",
          "type": "User"
        },
        "date_created": "2020-02-03T18:45:38Z",
        "date_published": "2020-02-03T18:55:03Z",
        "description": "### general changes\r\n* please update your ntCard to v1.2.1, which supports uracil and has other improvements and bugfixes\r\n\r\n### short reads assembly changes\r\n* changed Bloom filter architecture for paired k-mers\r\n* multi-threaded graph construction for transcript assembly\r\n* fixed out-of-bound error\r\n\r\n### nanopore reads assembly changes\r\n* adjusted read clustering algorithm\r\n* new options to adjust read clustering:\r\n  * `-hpc`: use homopolymer-compressed minimizers\r\n  * `-m`: minimizer size\r\n  * `-mw`: minimizer window size\r\n  * `-sop`: minimum proportion of sketch overlap minimizers\r\n  * `-son`: minimum number of sketch overlap minimizers\r\n* reduced memory usage for assembly stage",
        "html_url": "https://github.com/bcgsc/RNA-Bloom/releases/tag/v1.2.2",
        "name": "RNA-Bloom v1.2.2",
        "release_id": 23349591,
        "tag": "v1.2.2",
        "tarball_url": "https://api.github.com/repos/bcgsc/RNA-Bloom/tarball/v1.2.2",
        "type": "Release",
        "url": "https://api.github.com/repos/bcgsc/RNA-Bloom/releases/23349591",
        "value": "https://api.github.com/repos/bcgsc/RNA-Bloom/releases/23349591",
        "zipball_url": "https://api.github.com/repos/bcgsc/RNA-Bloom/zipball/v1.2.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "kmnip",
          "type": "User"
        },
        "date_created": "2020-01-13T17:40:25Z",
        "date_published": "2020-01-14T21:15:29Z",
        "description": "### general changes\r\n* Optional syntax for the `-k` option in finding the \"optimal\" k-mer size within a specified range.\r\n  * For example, `-k 20-60:5` would find the k-mer size, between 20 and 60 at a step size of 5, that yields the largest number of unique k-mers according to ntCard histograms.\r\n  * Turns on the `-ntcard` option. \r\n\r\n### short-read assembly changes\r\n* Initial support for single-end reads. \r\n  * Supply your reads with the `-left` option and the orientation (ie. `-rcl`) and strandedness (ie. `-ss`) accordingly.\r\n* New `-mergepool` option for merging pooled assemblies.\r\n  * Used in conjunction with the `-pool` option.\r\n  * Turns off the `-norr` option.\r\n* Fixed potential memory leak during transcript assembly stage.\r\n* Reduced potential Bloom filter false-positives for paired k-mers.\r\n* Improved overall assembly sensitivity.\r\n* Fixed several bugs.\r\n\r\n### nanopore reads assembly changes\r\n* Fixed potential memory leak during transcript assembly stage.\r\n* Trim reverse-complement artifacts.\r\n",
        "html_url": "https://github.com/bcgsc/RNA-Bloom/releases/tag/v1.2.1",
        "name": "RNA-Bloom v1.2.1",
        "release_id": 22840280,
        "tag": "v1.2.1",
        "tarball_url": "https://api.github.com/repos/bcgsc/RNA-Bloom/tarball/v1.2.1",
        "type": "Release",
        "url": "https://api.github.com/repos/bcgsc/RNA-Bloom/releases/22840280",
        "value": "https://api.github.com/repos/bcgsc/RNA-Bloom/releases/22840280",
        "zipball_url": "https://api.github.com/repos/bcgsc/RNA-Bloom/zipball/v1.2.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "kmnip",
          "type": "User"
        },
        "date_created": "2019-10-17T23:25:49Z",
        "date_published": "2019-10-23T23:47:00Z",
        "description": "### general changes\r\n* significant reduction in overall memory usage for Bloom filters\r\n* new option `-savebf` to save graph Bloom filters to disk\r\n* new option `-debug` to output seed sequences in FASTA headers of assembled fragments and transcripts\r\n* supports multi-line records in input FASTA files\r\n* reduced default value for `-fpr` to `0.01`\r\n* increased initial Bloom filter sizes when `-ntcard` or `-nk` are not used\r\n* various bug-fixes\r\n\r\n### short-read assembly changes\r\n* reduced misassemblies\r\n* new option `-ref` for reference-guided assembly with reference transcriptome(s)\r\n* redundancy reduction in transcript assembly is turn on by default\r\n  * reduces assembly redundancy *and* overlaps assembled transcripts\r\n  * results are written to `*.transcripts.nr.fa`\r\n  * `minimap2` is required in the `PATH`\r\n  * new option `-norr` to turn off redundancy reduction\r\n  * option `-nr` was removed\r\n\r\n### nanopore reads assembly changes\r\n* removed dependency on MINIASM\r\n* supports direct cDNA-seq data (see README)\r\n* inter-cluster assembly\r\n  * results are written to `*-transcripts.fa`",
        "html_url": "https://github.com/bcgsc/RNA-Bloom/releases/tag/v1.2.0",
        "name": "RNA-Bloom v1.2.0",
        "release_id": 20932477,
        "tag": "v1.2.0",
        "tarball_url": "https://api.github.com/repos/bcgsc/RNA-Bloom/tarball/v1.2.0",
        "type": "Release",
        "url": "https://api.github.com/repos/bcgsc/RNA-Bloom/releases/20932477",
        "value": "https://api.github.com/repos/bcgsc/RNA-Bloom/releases/20932477",
        "zipball_url": "https://api.github.com/repos/bcgsc/RNA-Bloom/zipball/v1.2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "kmnip",
          "type": "User"
        },
        "date_created": "2019-08-13T22:44:03Z",
        "date_published": "2019-08-14T16:20:48Z",
        "description": "* Fixes compatibility issue with Java 11 (See #1)\r\n* `-long` option now presets other relevant options (ie. `-k`, `-e`, `-indel`, `-p`) for long read assembly\r\n* `-stage` option is supported in long read assemblies (See README for details)\r\n* Significantly improved runtime for long read assembly\r\n* New `-mmaln` option to generate CIGAR for long read overlaps in minimap2 (Note that this was the default behavior in RNA-Bloom version 1.1.0)",
        "html_url": "https://github.com/bcgsc/RNA-Bloom/releases/tag/v1.1.1",
        "name": "RNA-Bloom v1.1.1",
        "release_id": 19291916,
        "tag": "v1.1.1",
        "tarball_url": "https://api.github.com/repos/bcgsc/RNA-Bloom/tarball/v1.1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/bcgsc/RNA-Bloom/releases/19291916",
        "value": "https://api.github.com/repos/bcgsc/RNA-Bloom/releases/19291916",
        "zipball_url": "https://api.github.com/repos/bcgsc/RNA-Bloom/zipball/v1.1.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "kmnip",
          "type": "User"
        },
        "date_created": "2019-07-16T00:41:49Z",
        "date_published": "2019-07-16T00:56:54Z",
        "description": "* Provide initial support for nanopore RNA-seq data (cDNA/direct RNA). See README for example usage for `-long`.\r\n* Support RNA-seq data containing uracil instead of thymine\r\n* Option to write uracil instead of thymine in final output assembly (`-uracil`)\r\n* Fix bug where contained reads are designated as unconnected\r\n* Fix bug where dovetail paired reads are not merged\r\n* Other small bugfixes",
        "html_url": "https://github.com/bcgsc/RNA-Bloom/releases/tag/v1.1.0",
        "name": "RNA-Bloom v1.1.0",
        "release_id": 18632027,
        "tag": "v1.1.0",
        "tarball_url": "https://api.github.com/repos/bcgsc/RNA-Bloom/tarball/v1.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/bcgsc/RNA-Bloom/releases/18632027",
        "value": "https://api.github.com/repos/bcgsc/RNA-Bloom/releases/18632027",
        "zipball_url": "https://api.github.com/repos/bcgsc/RNA-Bloom/zipball/v1.1.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "kmnip",
          "type": "User"
        },
        "date_created": "2019-02-13T20:18:19Z",
        "date_published": "2019-02-13T20:51:28Z",
        "description": "This is the official version 1 release of RNA-Bloom! :)\r\n\r\nIt is highly recommended that you have [ntCard](https://github.com/bcgsc/ntCard) installed and use the `-ntcard` option whenever possible. See README for more details.",
        "html_url": "https://github.com/bcgsc/RNA-Bloom/releases/tag/v1.0.0",
        "name": "RNA-Bloom v1.0.0",
        "release_id": 15544465,
        "tag": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/bcgsc/RNA-Bloom/tarball/v1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/bcgsc/RNA-Bloom/releases/15544465",
        "value": "https://api.github.com/repos/bcgsc/RNA-Bloom/releases/15544465",
        "zipball_url": "https://api.github.com/repos/bcgsc/RNA-Bloom/zipball/v1.0.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "kmnip",
          "type": "User"
        },
        "date_created": "2018-11-23T19:10:11Z",
        "date_published": "2018-11-23T19:19:37Z",
        "description": "Added an option (`-nk`) to set Bloom filter sizes based on expected number of unique k-mers. See README for example usage.",
        "html_url": "https://github.com/bcgsc/RNA-Bloom/releases/tag/v0.9.10",
        "name": "RNA-Bloom v0.9.10",
        "release_id": 14161938,
        "tag": "v0.9.10",
        "tarball_url": "https://api.github.com/repos/bcgsc/RNA-Bloom/tarball/v0.9.10",
        "type": "Release",
        "url": "https://api.github.com/repos/bcgsc/RNA-Bloom/releases/14161938",
        "value": "https://api.github.com/repos/bcgsc/RNA-Bloom/releases/14161938",
        "zipball_url": "https://api.github.com/repos/bcgsc/RNA-Bloom/zipball/v0.9.10"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "kmnip",
          "type": "User"
        },
        "date_created": "2018-10-05T22:35:17Z",
        "date_published": "2018-10-05T22:49:34Z",
        "description": "Added a bash script for running RNA-Bloom without specifying the path to the JAR file.",
        "html_url": "https://github.com/bcgsc/RNA-Bloom/releases/tag/v0.9.9",
        "name": "RNA-Bloom v0.9.9",
        "release_id": 13277394,
        "tag": "v0.9.9",
        "tarball_url": "https://api.github.com/repos/bcgsc/RNA-Bloom/tarball/v0.9.9",
        "type": "Release",
        "url": "https://api.github.com/repos/bcgsc/RNA-Bloom/releases/13277394",
        "value": "https://api.github.com/repos/bcgsc/RNA-Bloom/releases/13277394",
        "zipball_url": "https://api.github.com/repos/bcgsc/RNA-Bloom/zipball/v0.9.9"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "kmnip",
          "type": "User"
        },
        "date_created": "2018-06-30T22:52:43Z",
        "date_published": "2018-07-01T05:02:21Z",
        "description": "This is the first public release of RNA-Bloom.\r\n\r\nTo use RNA-Bloom, unpack the tarball `rnabloom_v0.9.8.tar.gz` in a directory. There is no need to compile/build from source! :thumbsup:\r\n\r\nThe source code archive is a NetBeans project.",
        "html_url": "https://github.com/bcgsc/RNA-Bloom/releases/tag/v0.9.8",
        "name": "RNA-Bloom v0.9.8",
        "release_id": 11726381,
        "tag": "v0.9.8",
        "tarball_url": "https://api.github.com/repos/bcgsc/RNA-Bloom/tarball/v0.9.8",
        "type": "Release",
        "url": "https://api.github.com/repos/bcgsc/RNA-Bloom/releases/11726381",
        "value": "https://api.github.com/repos/bcgsc/RNA-Bloom/releases/11726381",
        "zipball_url": "https://api.github.com/repos/bcgsc/RNA-Bloom/zipball/v0.9.8"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependency :pushpin:",
        "type": "Text_excerpt",
        "value": "* [Java SE Development Kit (JDK) 11](https://www.oracle.com/java/technologies/downloads/#java11) (JDK 17 is slightly faster)\n\n* External software used:\n\n| software                                            | short reads   | long reads   |\n| :-------------------------------------------------- | :------------ | :----------- |\n| [minimap2](https://github.com/lh3/minimap2) >=2.22  | required      | required     |\n| [Racon](https://github.com/lbcb-sci/racon)          | not used      | required     |\n| [ntCard](https://github.com/bcgsc/ntCard) >=1.2.1   | required      | required     |\n\n:warning: Their executables must be accessible from your `PATH`!\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/bcgsc/RNA-Bloom/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick Start for Short Reads :running:",
        "type": "Text_excerpt",
        "value": ":warning: Input reads must be in either FASTQ or FASTA format and may be compressed with GZIP.\n\n:information_source: Note that `-left`, `-right`, `-sef`, and `-ser` can accept multiple file paths separated by the whitespace character.\n"
      },
      "source": "https://raw.githubusercontent.com/bcgsc/RNA-Bloom/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "(A) assemble bulk RNA-seq data:",
        "parent_header": [
          "Quick Start for Short Reads :running:"
        ],
        "type": "Text_excerpt",
        "value": "* paired-end reads only\n  * when `left` reads are sense and `right` reads are antisense, use `-revcomp-right` to reverse-complement `right` reads\n  * when `left` reads are antisense and `right` reads are sense, use `-revcomp-left` to reverse-complement `left` reads\n  * for non-stranded data, use either `-revcomp-right` or `-revcomp-left`\n```\njava -jar RNA-Bloom.jar -left LEFT.fastq -right RIGHT.fastq -revcomp-right -t THREADS -outdir OUTDIR\n```\n\n* single-end reads only\n  * use `-sef` for forward reads and `-ser` for reverse reads\n```\njava -jar RNA-Bloom.jar -sef SE.fastq -t THREADS -outdir OUTDIR\n```\n\n* paired-end and single-end reads\n```\njava -jar RNA-Bloom.jar -left LEFT.fastq -right RIGHT.fastq -revcomp-right -sef SE.fastq -t THREADS -outdir OUTDIR\n```\n"
      },
      "source": "https://raw.githubusercontent.com/bcgsc/RNA-Bloom/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "final output files:",
        "parent_header": [
          "Quick Start for Long Reads :running:",
          "(C) assemble long-read sequencing data with short-read polishing:"
        ],
        "type": "Text_excerpt",
        "value": "| file name                       | description                                                       |\n| :------------------------------ | :---------------------------------------------------------------- |\n| `rnabloom.transcripts.fa`       | assembled transcripts longer than length threshold (default: 200) |\n| `rnabloom.transcripts.short.fa` | assembled transcripts shorter than length threshold               |\n| `rnabloom.transcripts.nr.fa`    | assembled transcripts with redundancy reduced                     |\n\n"
      },
      "source": "https://raw.githubusercontent.com/bcgsc/RNA-Bloom/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "(B) assemble multi-sample RNA-seq data with pooled assembly mode:",
        "parent_header": [
          "Quick Start for Short Reads :running:"
        ],
        "type": "Text_excerpt",
        "value": "```\njava -jar RNA-Bloom.jar -pool READSLIST.txt -revcomp-right -t THREADS -outdir OUTDIR\n```\nThis is especially useful for single-cell datasets. RNA-Bloom was tested on Smart-seq2 and SMARTer datasets. It is not supported for long-read data (`-long`) at this time.\n"
      },
      "source": "https://raw.githubusercontent.com/bcgsc/RNA-Bloom/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "file format for the `-pool` option:",
        "parent_header": [
          "Quick Start for Short Reads :running:",
          "(B) assemble multi-sample RNA-seq data with pooled assembly mode:"
        ],
        "type": "Text_excerpt",
        "value": "This is a tabular file that describes the read file paths for all cells/samples to be used pooled assembly.\n- Column header is on the first line, leading with `#`\n- Columns are separated by space/tab characters\n- Each sample can have more than one lines; lines sharing the same `name` will be grouped together during assembly\n\n| column  | description |\n| :------ | :---------- |\n| `name`  | sample name | \n| `left`  | path to one left read file |\n| `right` | path to one right read file |\n| `sef`   | path to one single-end forward read file |\n| `ser`   | path to one single-end reverse read file |\n"
      },
      "source": "https://raw.githubusercontent.com/bcgsc/RNA-Bloom/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "(i) paired-end reads only:",
        "parent_header": [
          "Quick Start for Short Reads :running:",
          "(B) assemble multi-sample RNA-seq data with pooled assembly mode:",
          "file format for the `-pool` option:"
        ],
        "type": "Text_excerpt",
        "value": "Only `name`, `left`, and `right` columns are specified for a total of 3 columns. The legacy header-less tri-column format is still supported.\n```\n#name left right\ncell1 /path/to/cell1/left.fastq /path/to/cell1/right.fastq\ncell2 /path/to/cell2/left.fastq /path/to/cell2/right.fastq\ncell3 /path/to/cell3/left.fastq /path/to/cell3/right.fastq\n```\n"
      },
      "source": "https://raw.githubusercontent.com/bcgsc/RNA-Bloom/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "(ii) paired and unpaired reads:",
        "parent_header": [
          "Quick Start for Short Reads :running:",
          "(B) assemble multi-sample RNA-seq data with pooled assembly mode:",
          "file format for the `-pool` option:"
        ],
        "type": "Text_excerpt",
        "value": "In addition to `name`, `left`, and `right` columns, either `sef`, `ser` or both are specified for a total of 4~5 columns. \n```\n#name left right sef ser\ncell1 /path/to/cell1/left.fastq /path/to/cell1/right.fastq /path/to/cell1/sef.fastq /path/to/cell1/ser.fastq\ncell2 /path/to/cell2/left.fastq /path/to/cell2/right.fastq /path/to/cell2/sef.fastq /path/to/cell2/ser.fastq\ncell3 /path/to/cell3/left.fastq /path/to/cell3/right.fastq /path/to/cell3/sef.fastq /path/to/cell3/ser.fastq\n```\n"
      },
      "source": "https://raw.githubusercontent.com/bcgsc/RNA-Bloom/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "final output files per cell:",
        "parent_header": [
          "Quick Start for Short Reads :running:",
          "(B) assemble multi-sample RNA-seq data with pooled assembly mode:"
        ],
        "type": "Text_excerpt",
        "value": "| file name                       | description                                                       |\n| :------------------------------ | :---------------------------------------------------------------- |\n| `rnabloom.transcripts.fa`       | assembled transcripts longer than length threshold (default: 200) |\n| `rnabloom.transcripts.short.fa` | assembled transcripts shorter than length threshold               |\n| `rnabloom.transcripts.nr.fa`    | assembled transcripts with redundancy reduced                     |\n\n"
      },
      "source": "https://raw.githubusercontent.com/bcgsc/RNA-Bloom/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "(C) strand-specific assembly:",
        "parent_header": [
          "Quick Start for Short Reads :running:"
        ],
        "type": "Text_excerpt",
        "value": "```\njava -jar RNA-Bloom.jar -stranded ...\n```\nThe `-stranded` option indicates that input reads are strand-specific.\n\nStrand-specific reads are typically in the F2R1 orientation, where `/2` denotes *left* reads in *forward* orientation and `/1` denotes *right* reads in *reverse* orientation.\n\nConfigure the read file paths accordingly for bulk RNA-seq data and indicate read orientation:\n\n`-stranded -left /path/to/reads_2.fastq -right /path/to/reads_1.fastq -revcomp-right`\n\nand for scRNA-seq data:\n```\ncell1 /path/to/cell1/reads_2.fastq /path/to/cell1/reads_1.fastq\n```\n"
      },
      "source": "https://raw.githubusercontent.com/bcgsc/RNA-Bloom/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "(D) reference-guided assembly:",
        "parent_header": [
          "Quick Start for Short Reads :running:"
        ],
        "type": "Text_excerpt",
        "value": "```\njava -jar RNA-Bloom.jar -ref TRANSCRIPTS.fasta ...\n```\nThe `-ref` option specifies the reference transcriptome FASTA file for guiding short-read assembly. It is not supported for long-read data (`-long`) at this time.\n\n"
      },
      "source": "https://raw.githubusercontent.com/bcgsc/RNA-Bloom/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick Start for Long Reads :running:",
        "type": "Text_excerpt",
        "value": ":warning: It is strongly recommended to trim adapters in your reads before assembly. For example, see [Porechop](https://github.com/rrwick/Porechop) for more information.\n\n:warning: Input reads must not have purely integer IDs (e.g. `1`, `2`, `3`), which could be in conflict with RNA-Bloom's sequence IDs. Please rename your read IDs (with `seqtk rename`) if necessary.\n\n:information_source: Note that `-long`, `-sef`, and `-ser` can accept multiple file paths separated by the whitespace character.\n"
      },
      "source": "https://raw.githubusercontent.com/bcgsc/RNA-Bloom/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "(A) assemble long-read cDNA sequencing data:",
        "parent_header": [
          "Quick Start for Long Reads :running:"
        ],
        "type": "Text_excerpt",
        "value": "Default presets for `-long` are intended for ONT data. Please add the `-lrpb` flag for PacBio data.\n```\njava -jar RNA-Bloom.jar -long LONG.fastq -t THREADS -outdir OUTDIR\n```\nInput reads are expected to be in a mix of both forward and reverse orientations.\n\nOptions `-pool` and `-ref` are not supported for long-read data at this time.\n"
      },
      "source": "https://raw.githubusercontent.com/bcgsc/RNA-Bloom/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "(B) assemble nanopore direct RNA sequencing data:",
        "parent_header": [
          "Quick Start for Long Reads :running:"
        ],
        "type": "Text_excerpt",
        "value": "```\njava -jar RNA-Bloom.jar -long LONG.fastq -stranded -t THREADS -outdir OUTDIR\n```\nInput reads are expected to be only in the forward orientation.\n\nBy default, uracil (`U`) is written as `T`. Use the `-uracil` option to write `U` instead of `T` in the output assembly.\n\nntCard v1.2.1 supports uracil in reads.\n"
      },
      "source": "https://raw.githubusercontent.com/bcgsc/RNA-Bloom/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "(C) assemble long-read sequencing data with short-read polishing:",
        "parent_header": [
          "Quick Start for Long Reads :running:"
        ],
        "type": "Text_excerpt",
        "value": "cDNA data:\n```\njava -jar RNA-Bloom.jar -long LONG.fastq -sef SHORT.fastq -t THREADS -outdir OUTDIR\n```\ndirect RNA data:\n```\njava -jar RNA-Bloom.jar -stranded -long LONG.fastq -sef SHORT_FORWARD.fastq -ser SHORT_REVERSE.fastq -t THREADS -outdir OUTDIR\n```\n\n#### final output files:\n| file name                       | description                                                            |\n| :------------------------------ | :--------------------------------------------------------------------- |\n| `rnabloom.transcripts.fa`       | assembled transcripts longer than min. length threshold (default: 200) |\n| `rnabloom.transcripts.short.fa` | assembled transcripts shorter than min. length threshold               |\n\n"
      },
      "source": "https://raw.githubusercontent.com/bcgsc/RNA-Bloom/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 01:07:57",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 92
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick Start for Short Reads :running:",
        "type": "Text_excerpt",
        "value": ":warning: Input reads must be in either FASTQ or FASTA format and may be compressed with GZIP.\n\n:information_source: Note that `-left`, `-right`, `-sef`, and `-ser` can accept multiple file paths separated by the whitespace character.\n"
      },
      "source": "https://raw.githubusercontent.com/bcgsc/RNA-Bloom/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "(A) assemble bulk RNA-seq data:",
        "parent_header": [
          "Quick Start for Short Reads :running:"
        ],
        "type": "Text_excerpt",
        "value": "* paired-end reads only\n  * when `left` reads are sense and `right` reads are antisense, use `-revcomp-right` to reverse-complement `right` reads\n  * when `left` reads are antisense and `right` reads are sense, use `-revcomp-left` to reverse-complement `left` reads\n  * for non-stranded data, use either `-revcomp-right` or `-revcomp-left`\n```\njava -jar RNA-Bloom.jar -left LEFT.fastq -right RIGHT.fastq -revcomp-right -t THREADS -outdir OUTDIR\n```\n\n* single-end reads only\n  * use `-sef` for forward reads and `-ser` for reverse reads\n```\njava -jar RNA-Bloom.jar -sef SE.fastq -t THREADS -outdir OUTDIR\n```\n\n* paired-end and single-end reads\n```\njava -jar RNA-Bloom.jar -left LEFT.fastq -right RIGHT.fastq -revcomp-right -sef SE.fastq -t THREADS -outdir OUTDIR\n```\n"
      },
      "source": "https://raw.githubusercontent.com/bcgsc/RNA-Bloom/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "final output files:",
        "parent_header": [
          "Quick Start for Long Reads :running:",
          "(C) assemble long-read sequencing data with short-read polishing:"
        ],
        "type": "Text_excerpt",
        "value": "| file name                       | description                                                       |\n| :------------------------------ | :---------------------------------------------------------------- |\n| `rnabloom.transcripts.fa`       | assembled transcripts longer than length threshold (default: 200) |\n| `rnabloom.transcripts.short.fa` | assembled transcripts shorter than length threshold               |\n| `rnabloom.transcripts.nr.fa`    | assembled transcripts with redundancy reduced                     |\n\n"
      },
      "source": "https://raw.githubusercontent.com/bcgsc/RNA-Bloom/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "(B) assemble multi-sample RNA-seq data with pooled assembly mode:",
        "parent_header": [
          "Quick Start for Short Reads :running:"
        ],
        "type": "Text_excerpt",
        "value": "```\njava -jar RNA-Bloom.jar -pool READSLIST.txt -revcomp-right -t THREADS -outdir OUTDIR\n```\nThis is especially useful for single-cell datasets. RNA-Bloom was tested on Smart-seq2 and SMARTer datasets. It is not supported for long-read data (`-long`) at this time.\n"
      },
      "source": "https://raw.githubusercontent.com/bcgsc/RNA-Bloom/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "file format for the `-pool` option:",
        "parent_header": [
          "Quick Start for Short Reads :running:",
          "(B) assemble multi-sample RNA-seq data with pooled assembly mode:"
        ],
        "type": "Text_excerpt",
        "value": "This is a tabular file that describes the read file paths for all cells/samples to be used pooled assembly.\n- Column header is on the first line, leading with `#`\n- Columns are separated by space/tab characters\n- Each sample can have more than one lines; lines sharing the same `name` will be grouped together during assembly\n\n| column  | description |\n| :------ | :---------- |\n| `name`  | sample name | \n| `left`  | path to one left read file |\n| `right` | path to one right read file |\n| `sef`   | path to one single-end forward read file |\n| `ser`   | path to one single-end reverse read file |\n"
      },
      "source": "https://raw.githubusercontent.com/bcgsc/RNA-Bloom/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "(i) paired-end reads only:",
        "parent_header": [
          "Quick Start for Short Reads :running:",
          "(B) assemble multi-sample RNA-seq data with pooled assembly mode:",
          "file format for the `-pool` option:"
        ],
        "type": "Text_excerpt",
        "value": "Only `name`, `left`, and `right` columns are specified for a total of 3 columns. The legacy header-less tri-column format is still supported.\n```\n#name left right\ncell1 /path/to/cell1/left.fastq /path/to/cell1/right.fastq\ncell2 /path/to/cell2/left.fastq /path/to/cell2/right.fastq\ncell3 /path/to/cell3/left.fastq /path/to/cell3/right.fastq\n```\n"
      },
      "source": "https://raw.githubusercontent.com/bcgsc/RNA-Bloom/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "(ii) paired and unpaired reads:",
        "parent_header": [
          "Quick Start for Short Reads :running:",
          "(B) assemble multi-sample RNA-seq data with pooled assembly mode:",
          "file format for the `-pool` option:"
        ],
        "type": "Text_excerpt",
        "value": "In addition to `name`, `left`, and `right` columns, either `sef`, `ser` or both are specified for a total of 4~5 columns. \n```\n#name left right sef ser\ncell1 /path/to/cell1/left.fastq /path/to/cell1/right.fastq /path/to/cell1/sef.fastq /path/to/cell1/ser.fastq\ncell2 /path/to/cell2/left.fastq /path/to/cell2/right.fastq /path/to/cell2/sef.fastq /path/to/cell2/ser.fastq\ncell3 /path/to/cell3/left.fastq /path/to/cell3/right.fastq /path/to/cell3/sef.fastq /path/to/cell3/ser.fastq\n```\n"
      },
      "source": "https://raw.githubusercontent.com/bcgsc/RNA-Bloom/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "final output files per cell:",
        "parent_header": [
          "Quick Start for Short Reads :running:",
          "(B) assemble multi-sample RNA-seq data with pooled assembly mode:"
        ],
        "type": "Text_excerpt",
        "value": "| file name                       | description                                                       |\n| :------------------------------ | :---------------------------------------------------------------- |\n| `rnabloom.transcripts.fa`       | assembled transcripts longer than length threshold (default: 200) |\n| `rnabloom.transcripts.short.fa` | assembled transcripts shorter than length threshold               |\n| `rnabloom.transcripts.nr.fa`    | assembled transcripts with redundancy reduced                     |\n\n"
      },
      "source": "https://raw.githubusercontent.com/bcgsc/RNA-Bloom/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "(C) strand-specific assembly:",
        "parent_header": [
          "Quick Start for Short Reads :running:"
        ],
        "type": "Text_excerpt",
        "value": "```\njava -jar RNA-Bloom.jar -stranded ...\n```\nThe `-stranded` option indicates that input reads are strand-specific.\n\nStrand-specific reads are typically in the F2R1 orientation, where `/2` denotes *left* reads in *forward* orientation and `/1` denotes *right* reads in *reverse* orientation.\n\nConfigure the read file paths accordingly for bulk RNA-seq data and indicate read orientation:\n\n`-stranded -left /path/to/reads_2.fastq -right /path/to/reads_1.fastq -revcomp-right`\n\nand for scRNA-seq data:\n```\ncell1 /path/to/cell1/reads_2.fastq /path/to/cell1/reads_1.fastq\n```\n"
      },
      "source": "https://raw.githubusercontent.com/bcgsc/RNA-Bloom/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "(D) reference-guided assembly:",
        "parent_header": [
          "Quick Start for Short Reads :running:"
        ],
        "type": "Text_excerpt",
        "value": "```\njava -jar RNA-Bloom.jar -ref TRANSCRIPTS.fasta ...\n```\nThe `-ref` option specifies the reference transcriptome FASTA file for guiding short-read assembly. It is not supported for long-read data (`-long`) at this time.\n\n"
      },
      "source": "https://raw.githubusercontent.com/bcgsc/RNA-Bloom/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick Start for Long Reads :running:",
        "type": "Text_excerpt",
        "value": ":warning: It is strongly recommended to trim adapters in your reads before assembly. For example, see [Porechop](https://github.com/rrwick/Porechop) for more information.\n\n:warning: Input reads must not have purely integer IDs (e.g. `1`, `2`, `3`), which could be in conflict with RNA-Bloom's sequence IDs. Please rename your read IDs (with `seqtk rename`) if necessary.\n\n:information_source: Note that `-long`, `-sef`, and `-ser` can accept multiple file paths separated by the whitespace character.\n"
      },
      "source": "https://raw.githubusercontent.com/bcgsc/RNA-Bloom/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "(A) assemble long-read cDNA sequencing data:",
        "parent_header": [
          "Quick Start for Long Reads :running:"
        ],
        "type": "Text_excerpt",
        "value": "Default presets for `-long` are intended for ONT data. Please add the `-lrpb` flag for PacBio data.\n```\njava -jar RNA-Bloom.jar -long LONG.fastq -t THREADS -outdir OUTDIR\n```\nInput reads are expected to be in a mix of both forward and reverse orientations.\n\nOptions `-pool` and `-ref` are not supported for long-read data at this time.\n"
      },
      "source": "https://raw.githubusercontent.com/bcgsc/RNA-Bloom/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "(B) assemble nanopore direct RNA sequencing data:",
        "parent_header": [
          "Quick Start for Long Reads :running:"
        ],
        "type": "Text_excerpt",
        "value": "```\njava -jar RNA-Bloom.jar -long LONG.fastq -stranded -t THREADS -outdir OUTDIR\n```\nInput reads are expected to be only in the forward orientation.\n\nBy default, uracil (`U`) is written as `T`. Use the `-uracil` option to write `U` instead of `T` in the output assembly.\n\nntCard v1.2.1 supports uracil in reads.\n"
      },
      "source": "https://raw.githubusercontent.com/bcgsc/RNA-Bloom/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "(C) assemble long-read sequencing data with short-read polishing:",
        "parent_header": [
          "Quick Start for Long Reads :running:"
        ],
        "type": "Text_excerpt",
        "value": "cDNA data:\n```\njava -jar RNA-Bloom.jar -long LONG.fastq -sef SHORT.fastq -t THREADS -outdir OUTDIR\n```\ndirect RNA data:\n```\njava -jar RNA-Bloom.jar -stranded -long LONG.fastq -sef SHORT_FORWARD.fastq -ser SHORT_REVERSE.fastq -t THREADS -outdir OUTDIR\n```\n\n#### final output files:\n| file name                       | description                                                            |\n| :------------------------------ | :--------------------------------------------------------------------- |\n| `rnabloom.transcripts.fa`       | assembled transcripts longer than min. length threshold (default: 200) |\n| `rnabloom.transcripts.short.fa` | assembled transcripts shorter than min. length threshold               |\n\n"
      },
      "source": "https://raw.githubusercontent.com/bcgsc/RNA-Bloom/master/README.md",
      "technique": "header_analysis"
    }
  ]
}