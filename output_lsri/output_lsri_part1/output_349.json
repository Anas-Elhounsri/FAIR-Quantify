{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "CITING *spotter*",
        "parent_header": [
          "*spotter*"
        ],
        "type": "Text_excerpt",
        "value": "If you use _spotter_ in your work, please cite:\n\nHacker, W.C., Elcock, A.H. (2023) _spotter_: A single-nucleotide resolution stochastic simulation model of supercoiling-mediated transcription and translation in prokaryotes. (preprint) bioRxiv.\n\nAll code here was written by Will Hacker with the exception of some very helpful xtc utilities (see [External contributions](#external-contributions) below)\n\n<br/>\n"
      },
      "source": "https://raw.githubusercontent.com/Elcock-Lab/spotter/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Elcock-Lab/spotter"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-04-14T19:18:37Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-04-14T21:14:25Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9993622090649704,
      "result": {
        "original_header": "*spotter*",
        "type": "Text_excerpt",
        "value": "_spotter_ (**s**imulator of **p**rokaryotic **o**peron **t**ranscriptional and **t**ranslational **e**longation **r**eactions) is an integrated simulation model offering highly-detailed representations of prokaryotic transcription, translation, and DNA supercoiling. _spotter_ is designed to incorporate sequencing data and allows users to explore the interplay of transcription and translation. \n"
      },
      "source": "https://raw.githubusercontent.com/Elcock-Lab/spotter/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9044396936010896,
      "result": {
        "original_header": "COMPILING *spotter*",
        "type": "Text_excerpt",
        "value": "\nAll of the programs needed for running _spotter_ can be compiled using the\nmakefile included in this directory. \n"
      },
      "source": "https://raw.githubusercontent.com/Elcock-Lab/spotter/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9422074163433938,
      "result": {
        "original_header": "### Compiling with GSL",
        "type": "Text_excerpt",
        "value": "If you have access to the GNU Scientific Library on your machine, you can\ncompile a version of the simulation code that uses the GSL implementation\nof the Mersenne Twister random number generator. \nTo compile using the GSL RNG, enter (in this directory): \nThe makefile in this directory first looks for GSL on the machine it's being run\non and reports what it finds--so even if you're not sure about the existence\nand/or location of GSL it's worth trying with the basic command to start. \n - If the GSL files are in standard locations (`/usr/local/include` or `/usr/include`\nfor the include path and `/usr/local/lib` or `/usr/lib` for the library linkage),\nyou should be good to go: the compiler will be able to include/link to files in\nthese locations. \n - If GSL library or header files exist but are in nonstandard locations, there's a\ngood chance you'll still be able to compile with the basic command and an\nunaltered makefile: if found, paths to these locations will be passed\nautomtically to the compiler. \nto have the compiler use one or both of the alternative include (`IPATH`) or\nlibrary (`LPATH`) locations: `/XXX/XXX` and `YYY/YYY` are the filepaths for these\nlocations, respectively (note that you need to keep the `-I/` and `-L/` prefixes). \nAlternatively, you can modify the makefile and direct the compiler to your\nGSL include and library locations by uncommenting and modifying lines 92 and 95. \n--Note that if you are running on a cluster where GCC and GSL are loaded as\nmodules into your environment, the make command may not be able to locate the\nappropriate filepaths but will still compile appropriately. JUST BE SURE TO LOAD\nTHESE MODULES (BOTH GCC and GSL, using \"module load\" or whatever is appropriate\nto your system), or the program will not compile. \n - `spotter`\n \n \tUsed to run simulations of transcription and translation. Discussed in [Running _spotter_ simulations](#running-spotter-simulations). \n - `trajectory_movie_maker`\n \n \tUsed to make operon-level movies of simulation trajectories. Discussed in [Post-simulation visualization: Making movies from trajectories](#post-simulation-visualization-making-movies-from-trajectories). \n - `zoomin_movie_maker`\n \n \tUsed to make transcription-only movies of a portion of the DNA template to illustrate RNAP rotation and local supercoiling. Discussed in [Post-simulation visualization: Making \"zoomed-in\" movies](#post-simulation-visualization-making-zoomed-in-movies). \n - `kymograph_maker`\n \n \tUsed for making 2-D plots of changing supercoiling density and RNAP positions as a function of time. Discussed in [Post simulation visualization: Making kymographs](#post-simulation-visualization-making-kymographs). \n\tUsed for making 3-D plots of production, degradation, and translation of individual RNAs made during the simulation. Discussed in [Post simulation visualization: Making RNA plots](#post-simulation-visualization-making-plots-of-simulation-rnas) \n--If you're compiling with an older version of GCC, the compiler may issue\n  warnings about missing braces around initializers--these are not a problem \n--If you run simulation code in locations different from the location where it\n  was compiled (e.g., compute nodes when the program was compiled on a head\n  node), the *SAME* GSL library used in the compilation should be available\n  in the location where the simulation is being run. The program *may* run with\n  a version of GSL different from that with which it was compiled, but if you're\n  on a system where different versions of GSL are available you'll want to keep\n  track of the version you compiled with and use that in subsequent runs. \n"
      },
      "source": "https://raw.githubusercontent.com/Elcock-Lab/spotter/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9139416254879417,
      "result": {
        "original_header": "### Compiling WITHOUT GSL",
        "type": "Text_excerpt",
        "value": "If you do not have access to the GNU Scientific Library, you can compile a\nversion of the simulation code that uses the built-in C random generator. \nNB: THE BUILT-IN RNG IS NOT A HIGH-QUALITY RANDOM NUMBER GENERATOR! While\nthis may be a great way to get up and running quickly and simulation results\nwill be qualitatively very similar to those produced with a simulation-quality\nRNG, you will want to install/recompile with GSL if you're going to be working\nclosely with simulation data. \nTo compile using the built-in RNG, enter (in the folder with the makefile): \n\nTo remove old executables and object files, enter (in the makefile directory): \nNote: this will remove ALL object files (from both GSL and C_RNG compilations,\nif for some reason you've compiled both ways). \n\nIf you only need to update the simulation code proper, you can use: \nAnd if you're only changing post-simulation code: \nThe last two options bypass the search for GSL and so can be faster on machines\nwhere this search takes a while and  the simulation runner doesn't need to be\nrecompiled. \n"
      },
      "source": "https://raw.githubusercontent.com/Elcock-Lab/spotter/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9016089452456244,
      "result": {
        "original_header": "POST-SIMULATION VISUALIZATION: MAKING MOVIES FROM TRAJECTORIES",
        "type": "Text_excerpt",
        "value": "\nAfter a simulation run is complete, you can use output files from that run to visualize\nthe simulation trajectory. Movies made using the following commands represent all\ntranscription, translation, and RNA degradation that took place during the simulation\nin a \"whole operon\" view: all active RNAPs and ribosomes, as well as all extant RNAs,\nappear in each simulation frame. \n**Snapshot from a simulation of the _E. coli alaS_ operon**\n<br/>\n<br/>\n<br/> \n"
      },
      "source": "https://raw.githubusercontent.com/Elcock-Lab/spotter/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.967252462379789,
      "result": {
        "original_header": "POST-SIMULATION VISUALIZATION: MAKING \"ZOOMED-IN\" MOVIES",
        "type": "Text_excerpt",
        "value": "\nIn addition to the \"big picture\" movies designed to capture transcriptional dynamics\nat the operon level (see documentation on whole-operon movies in this folder), users\ncan also use simulation output to make movies focused on a smaller section of the\nDNA template. These movies are limited to a 500 bp section of the template and do not\ninclude RNA or ribosomes but are well-suited for visualizing RNAP rotation and pausing\nand local changes in supercoiling density. \n### Making trajectory files for visualization\n------------------------------------------ \nThe key file for making zoomed-in movies of a trajectory is: \nThis file is produced in simulation in which users select the \"make_kymograph\"\noption in simulation input files. It contains information about RNAP template\nposition, state, and extent of rotation, as well as base pair-resolution\ninformation about supercoiling density. By default, the kymograph is set to\ncover a 50-second portion of simulation time at 0.01-second resolution over\na template span of 500 bp. The 5000 resulting frames are a reasonable upper for\nvisualization, and the 0.01-second resolution is a reasonable minimum for capturing\nrotation. The zoom-in movie maker currently includes a hard-coded assumption\nthat the portion of the template covered in the kymograph file is 500 bp. \n\ttraj_label\t\t\t...is a unique label for assign to the \n\t\t\t\t\ttrajectory to be visualized \nThe output of the movie maker is a directory called: \nEach of these files will be labeled with the \"traj_label\" identifier. \nTo proceed with moviemaking, copy this directory to your local workstation. \n\n\tNOTE: If your implementation of VMD automatically creates a representation (e.g., a ruler)\nso that the loaded pdb file will not be molecule 0, start your VMD session by opening\nthe pdb with VMD (that is, do not open VMD, then open the pdb from your session). If your\nversion does not autoload any representations at start-up, the order is inconsequential:\nyou can either load your pdb into an already-running session of VMD or open VMD with the \nopening of your pdb. \n\tIf you are not already in the directory where your pdb is located, change to that directory.\nYou can check your current directory in the Tk console by entering \"pwd\" in the Tk console.\nIf the directory listed is not where your pdb file is located, change to that directory with: \nIn the trajectory, DNA coloration is an indicator of supercoiling density (sigma), with\nwhite indicating relaxed DNA, blue representing negatively-supercoiled (underwound) DNA,\nand red representing positively-supercoiled (overwound) DNA. RNAPs appear with two lobes\nin order to make their rotation apparent. \n"
      },
      "source": "https://raw.githubusercontent.com/Elcock-Lab/spotter/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9677093221627573,
      "result": {
        "original_header": "POST-SIMULATION VISUALIZATION: MAKING KYMOGRAPHS",
        "type": "Text_excerpt",
        "value": "\nSimulation output can be used to make kymographs that illustrate changes in RNAP position\nand the evolution of supercoiling density in a 2-D plot: \nAlthough the kymograph maker will provide data that can be used for plotting in a number of\ngraphing programs, the short custom script it generates is written specifically for R. \n"
      },
      "source": "https://raw.githubusercontent.com/Elcock-Lab/spotter/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9444180279668594,
      "result": {
        "original_header": "POST-SIMULATION VISUALIZATION: MAKING PLOTS OF SIMULATION RNAS",
        "type": "Text_excerpt",
        "value": "The transcription and translation trajectory file produced during a simulation can\nalso be used to create plots illustrating the production, translational usage, and\ndegradation of individual mRNA molecules. \nFiles for making three-dimensional plots of RNA production and translation can be\nmade with: \nwhere the first argument, \"tx_tsl_traj.for_xtc.txt\", is the trajectory file mentioned\nabove used in making operon-scale movies, the second argument is the number of RNAs\nto be plotted in the 3-D rendering (here, 10; values >30 van be difficult to visualize),\nand the third argument is the name of the directory that will contain files necessary\nfor R visualization. \nEach RNA displayed will be displayed as a bold line with length at a given time indicated on\nthe z-axis; the position of translating ribosomes on that mRNA as a function of time is indicated by the\nthe thinner lines (one line for each ribosome) is also indicated by z-axis position. \nProduction of mRNAs is illustrated in the increasing z-axis position; RNAs are mature\nin the flat region of the RNA plot; and the progress of degradation is indicated by decreasing\nRNA length in the period following. \n"
      },
      "source": "https://raw.githubusercontent.com/Elcock-Lab/spotter/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9245668368181689,
      "result": {
        "original_header": "EXTERNAL CONTRIBUTIONS",
        "type": "Text_excerpt",
        "value": "The programs for visualization of simulation trajectories included in this repository rely on the xtc\nfile format developed by Erik Lindahl and David van der Spoel. Files enabling the use of this format\nfrom these authors have been included without modification. They are (in the INCL directory): \nand (in the SRC directory): \nAdditional information can be found in the comments provided by the authors at the top of each\nof the listed files. \n"
      },
      "source": "https://raw.githubusercontent.com/Elcock-Lab/spotter/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Elcock-Lab/spotter/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Elcock-Lab/spotter/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Elcock-Lab/spotter"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "spotter"
      },
      "source": "https://raw.githubusercontent.com/Elcock-Lab/spotter/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Elcock-Lab/spotter/main/IMG/220526_movie_example.png"
      },
      "source": "https://raw.githubusercontent.com/Elcock-Lab/spotter/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Elcock-Lab/spotter/main/IMG/example_kymo.png"
      },
      "source": "https://raw.githubusercontent.com/Elcock-Lab/spotter/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "PREPARING FOR SIMULATIONS",
        "parent_header": [
          "*spotter*"
        ],
        "type": "Text_excerpt",
        "value": " \n \n\n\nAll simulations require a set of input files to run: a file listing position-specific\nrates for reactions affecting RNAPs (described in the next section), a file listing\nposition-specific rates for reactions affecting ribosomes (described in [Making\nposition-specific ribosome reaction rate files](#making-position-specific-ribosome-reaction-rate-files)), and a group of files defining basic\nsimulation parameters and the rates of position-independent reactions (described in\n[Preparing additional simulation input files](#preparing-additional-simulation-input-files)).\n"
      },
      "source": "https://raw.githubusercontent.com/Elcock-Lab/spotter/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Making position-specific RNAP reaction rate files",
        "parent_header": [
          "*spotter*",
          "PREPARING FOR SIMULATIONS"
        ],
        "type": "Text_excerpt",
        "value": "Simulations require a file detailing the rates at which RNAPs undergo position-specific\n(translocation and pause-entry) reactions at each position along the DNA template.\n\nThe required rate file can be made using a single command, which can be run with a variety\nof user-selected options. These rates can be calculated from a real transcribed sequence\nfrom any organism provided by the user; alternatively, users can create random or uniform\nsequences if they are more interested in general phenomena (e.g., the effect of isolated\npauses or pause clusters). Similarly, users can supply dwell times for their template or\nor can choose to have these dwell times calculated for a sequence they provide.\n"
      },
      "source": "https://raw.githubusercontent.com/Elcock-Lab/spotter/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Making position-specific ribosome reaction rate files",
        "parent_header": [
          "*spotter*",
          "PREPARING FOR SIMULATIONS"
        ],
        "type": "Text_excerpt",
        "value": "\nSimulations require a file detailing the rates at which ribosomes undergo addition and\ntranslocation reactions at each position along mRNA.\n\nNOTE: THIS FILE NEEDS TO BE MADE FOR ALL SIMULATIONS, INCLUDING THOSE\nTHAT DO NOT MODEL TRANSLATION. A simple dummy file can be made for systems without\ntranslation using commands below.\n\nLike the RNAP rate file, the ribosome rate file can be made with a single command.\nIt is most straightforward to generate the ribosome file AFTER making the RNAP rate\nfile--the sequence file made in making the RNAP file (`aligned_sequence.txt`) can be used\ndirectly.\n\nDetails about files required for the program are listed at the bottom of this README;\nin every case users will need to supply a sequence and a list of genes. The rate file\ncan incorporate user-supplied dwell times (derived from ribosomal profiling or custom\nmade) and/or tRNA competition-driven decoding times. Files for simpler schemes with\nuniform addition rates can also be made.\n\n#### Commands and flags\n---------------------------------------\n\n**To run the ribosome rate file generator, use:**\n\n\t./ribosome_rate_file_generator\n\nAs with the RNAP generator, available options are accessed with flags following the basic\ncommand. The flags are as follows:\n\n\n  |Flag|Options|Comments|\n  |----|-------|--------|\n  |`-sequence`|file name|Required. The simplest option is to use the \"aligned_sequence.txt\" file made in running the RNAP file-making script. If a different file is used, users should verify that it starts at the TSS and ends at the transcription start site.|\n  |`-genefile`|file name|Required. This is a list of of all genesincluded in the transcription unit (the file format is listed below) with their start position (first NT of the first codon) and stop position (last NT of the last/stop codon) relative to the TSS.|\n  |`-dwell`|file name / flat / use_decode|Optional. If a file name is given, that file will contain relative dwell times for each *NT* (not codon) and so match the length of operon. If \"flat\" is selected, identical relative dwell times will be assigned at all positions. If \"use_decode\" is selected, dwell times proportional to decoding times for each codon will be assigned; this is the default setting.|\n  |`-decode`|file name / flat|Optional. If a file name is given, that file will list decoding times for all codons in *milliseconds*. If the flag is not supplied, the script defaults to decoding times derived from a tRNA competition model for E. coli. If \"flat\" is selected, the same decoding is used for all codons; the default is 100 ms but changeable with the `-dt` flag.|\n  |`-dt`|floating point number|Optional. If the \"flat\" option has been selected with the `-decode` flag, sets the fixed decoding time for all codons. The value given is in milliseconds.|\n\n<br/>\n\n#### Examples\n---------\n\n - **Example of a run where a user has both a dwell time file and a codon-specific list of decoding times:**\n\n  \t`./ribosome_rate_file_generator  -sequence aligned_sequence.txt  -genefile gene.list  -dwell ribo_seq.gapA  -decode codon_add_times`\n\n\n -  **Example of a run where a user has a list of decoding time but not a dwell time file--in this case case dwell times will be assigned based on decoding times:**\n\n  \t`./ribosome_rate_file_generator  -sequence aligned_sequence.txt  -genefile gene.list -decode codon_add_times`\n\n\n - **Example of a run where a user has a dwell time file but not codon-based addition times--in this case decoding times will default to 100 ms at all codons:**\n\n  \t`./ribosome_rate_file_generator  -sequence aligned_sequence.txt  -genefile gene.list -dwell ribo_seq.gapA`\n\n\n - **Example of a run where a user wants a uniform rate of translation of 12.5 codons/s--the decoding time is set to 80 milliseconds:**\n\n  \t`./ribosome_rate_file_generator  -sequence aligned_sequence.txt  -genefile gene.list -dwell use_decode  -decode flat  -dt 80.0`\n\n<br/>\n\n--------------------------------------\n#### Notes\n--------------------------------------\n\nSome details about files required for the ribosome rate generator:\n\n - **SEQUENCE FILES**\n\nAll FASTA files (with or without header lines) will work. If the `aligned_sequence.txt`\noutput file from the RNAP file-making script is used, it will automatically be trimmed\nand aligned. If any other files are used, they MUST run from the TSS of the transcription\nunit of interest to the last transcribed position in the unit and match the length of\nany dwell time file supplied. \n\n - **DWELL TIME FILES**\n\nDwell time files should list in each line RNA template position and (separated by one or\nmore spaces) the dwell time. The template position should be given relative to the TSS,\nso that the position 1 in the file correspons to the first NT transcribed in the \ntranscription unit. NOTE: The file MUST contain dwell times for all *nucleotides*, not\nall codons on the template mRNA, and so match the length of the transcription unit.\nOnly the *relative* values of the times given matter for simulations: in another input\nfile used at simulation run-time, the mean rate of elongation on each gene is selected\nand the times will be scaled accordingly.\n\n - **GENE INFORMATION FILE**\n\nThis file is required. It should contain one line for each gene included on the\ntranscription unit of interest. Each line should contain a name or unique identifier for\nthat gene, the start position (first NT of first codon relative to the TSS), and the\nstop position (last NT of last codon relative to the TSS) of the gene, each separated by\none or more spaces. \n\n\n - **DECODING INFORMATION FILES**\n\nThe default file used is fluitt_based_transloc_decoding_split.txt. If another file is\nsupplied, it should follow the same format: each line should contain: 1) the three-\nletter codon identifier; 2) the fraction of total time spent in decoding; and 3) the\ntotal decoding time in milliseconds. The order in which the codons appear in the file\nwill not affect its readability.\n\n\n**FILE CHECKLIST:**\n\n\nThe following files are required for the rate generator to work:\n\n\tsequence file\n\tgene file\n\nAdditional files cen be supplied if desired:\n\n\tdwell time file\n\tdecoding time file\n\n <br/>\n\n"
      },
      "source": "https://raw.githubusercontent.com/Elcock-Lab/spotter/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.8974210205285661,
      "result": {
        "original_header": "COMPILING *spotter*",
        "type": "Text_excerpt",
        "value": "\nAll of the programs needed for running _spotter_ can be compiled using the\nmakefile included in this directory. \n*REQUIRED:* gcc compiler (standard with Linux) \n*HIGHLY RECOMMENDED:* GNU Scientific Library (GSL)\n \n"
      },
      "source": "https://raw.githubusercontent.com/Elcock-Lab/spotter/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9811968104011588,
      "result": {
        "original_header": "### Compiling with GSL",
        "type": "Text_excerpt",
        "value": "To compile using the GSL RNG, enter (in this directory): \n\tmake\nor: \n - If the GSL files are in standard locations (`/usr/local/include` or `/usr/include`\nfor the include path and `/usr/local/lib` or `/usr/lib` for the library linkage),\nyou should be good to go: the compiler will be able to include/link to files in\nthese locations. \n - If GSL library or header files exist but are in nonstandard locations, there's a\ngood chance you'll still be able to compile with the basic command and an\nunaltered makefile: if found, paths to these locations will be passed\nautomtically to the compiler. \n - If running the command above fails to locate the correct filepaths but you know\nwhere the files are located (or if you have a standard GSL installation but \nwould prefer to use a version in a different location), enter: \nto have the compiler use one or both of the alternative include (`IPATH`) or\nlibrary (`LPATH`) locations: `/XXX/XXX` and `YYY/YYY` are the filepaths for these\nlocations, respectively (note that you need to keep the `-I/` and `-L/` prefixes). \nAlternatively, you can modify the makefile and direct the compiler to your\nGSL include and library locations by uncommenting and modifying lines 92 and 95. \n--Note that if you are running on a cluster where GCC and GSL are loaded as\nmodules into your environment, the make command may not be able to locate the\nappropriate filepaths but will still compile appropriately. JUST BE SURE TO LOAD\nTHESE MODULES (BOTH GCC and GSL, using \"module load\" or whatever is appropriate\nto your system), or the program will not compile. \n ***If you don't have GSL on your system but want to run with its RNG:*** \nIt's definitely worth trying the command above in case there's a rogue version\nof GSL available on your system. If it's clear that GSL isn't available on\nyour system, you can install it. \nYou can download GSL following instructions at: \nhttps://www.gnu.org/software/gsl/ \nWith root access you can install to `/usr/` so that files are in standard\nlocations. Without root access you can install to an alternative directory\n(instructions at https://coral.ise.lehigh.edu/jild13/2016/07/11/hello/).\n`-IPATH` and `-LPATH` should be modified to match the nonstandard location. \n--If you're compiling with an older version of GCC, the compiler may issue\n  warnings about missing braces around initializers--these are not a problem \n--If you run simulation code in locations different from the location where it\n  was compiled (e.g., compute nodes when the program was compiled on a head\n  node), the *SAME* GSL library used in the compilation should be available\n  in the location where the simulation is being run. The program *may* run with\n  a version of GSL different from that with which it was compiled, but if you're\n  on a system where different versions of GSL are available you'll want to keep\n  track of the version you compiled with and use that in subsequent runs. \n"
      },
      "source": "https://raw.githubusercontent.com/Elcock-Lab/spotter/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9576059635677053,
      "result": {
        "original_header": "### Compiling WITHOUT GSL",
        "type": "Text_excerpt",
        "value": "If you do not have access to the GNU Scientific Library, you can compile a\nversion of the simulation code that uses the built-in C random generator. \nTo compile using the built-in RNG, enter (in the folder with the makefile): \n\tmake clean \nNote: this will remove ALL object files (from both GSL and C_RNG compilations,\nif for some reason you've compiled both ways). \n\nIf you only need to update the simulation code proper, you can use: \n"
      },
      "source": "https://raw.githubusercontent.com/Elcock-Lab/spotter/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9932732386724124,
      "result": {
        "original_header": "POST-SIMULATION VISUALIZATION: MAKING MOVIES FROM TRAJECTORIES",
        "type": "Text_excerpt",
        "value": "\n<p align=\"center\">\n\t<img width=\"800\" height=\"530\" src=\"https://github.com/Elcock-Lab/spotter/blob/main/IMG/220526_movie_example.png\">\n</p> \n*REQUIREMENTS:* VMD (Visual Molecular Dynamics) molecular graphics viewer\n \n"
      },
      "source": "https://raw.githubusercontent.com/Elcock-Lab/spotter/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9587921906166367,
      "result": {
        "original_header": "POST-SIMULATION VISUALIZATION: MAKING \"ZOOMED-IN\" MOVIES",
        "type": "Text_excerpt",
        "value": "\n*REQUIREMENTS:* VMD (Visual Molecular Dynamics) \nTo make the files required for a VMD movie, run: \nTo proceed with moviemaking, copy this directory to your local workstation. \nOnce you have the directory on your local workstation, do the following: \n\n\tNOTE: If your implementation of VMD automatically creates a representation (e.g., a ruler)\nso that the loaded pdb file will not be molecule 0, start your VMD session by opening\nthe pdb with VMD (that is, do not open VMD, then open the pdb from your session). If your\nversion does not autoload any representations at start-up, the order is inconsequential:\nyou can either load your pdb into an already-running session of VMD or open VMD with the \nopening of your pdb. \n - **Check your current location in the Tk console** \n\tIf you are not already in the directory where your pdb is located, change to that directory.\nYou can check your current directory in the Tk console by entering \"pwd\" in the Tk console.\nIf the directory listed is not where your pdb file is located, change to that directory with: \n                cd FILE_PATH/ \n\n - **Enter the following command:** \n\n\t`source zoomin_viewer.NAME.tcl` \n"
      },
      "source": "https://raw.githubusercontent.com/Elcock-Lab/spotter/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9941204561476736,
      "result": {
        "original_header": "POST-SIMULATION VISUALIZATION: MAKING KYMOGRAPHS",
        "type": "Text_excerpt",
        "value": "<p align=\"center\">\n\t<img width=\"538\" height=\"480\" src=\"https://github.com/Elcock-Lab/spotter/blob/main/IMG/example_kymo.png\">\n</p> \nUsers without R can download both R and the (free) RStudio Desktop package from links at: \n\thttps://www.rstudio.com/products/rstudio/download/#download \n"
      },
      "source": "https://raw.githubusercontent.com/Elcock-Lab/spotter/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8955177353770202,
      "result": {
        "original_header": "POST-SIMULATION VISUALIZATION: MAKING PLOTS OF SIMULATION RNAS",
        "type": "Text_excerpt",
        "value": "\t./rna_trajectory_plotter tx_tsl_traj.for_xtc.txt 10 RNA_TRAJ_NAME \nTo display the plot, copy the directory made on executing the command above to your workstation,\nload the \"rna_and_ribosome_plotter.R\" script and in RStudio run it. Note that the lines\ndesigned to identify and reset the current working directory may not work on all systems. In this\ncase, the lines of the script can be executed one by one with the current directory set\nmanually at the point indicated by the comments included in the script. Once all commands have\nbeen executed, the plot can be displayed by entering: \n"
      },
      "source": "https://raw.githubusercontent.com/Elcock-Lab/spotter/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Elcock-Lab/spotter/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2023 Elcock-Lab\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/Elcock-Lab/spotter/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Elcock-Lab/spotter/main/IMG/220526_spotter_overview.png"
      },
      "source": "https://raw.githubusercontent.com/Elcock-Lab/spotter/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "spotter"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "Elcock-Lab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 870185,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 7605,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Elcock-Lab/spotter/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "Elcock-Lab",
          "type": "User"
        },
        "date_created": "2023-06-21T22:09:10Z",
        "date_published": "2023-07-20T22:34:48Z",
        "html_url": "https://github.com/Elcock-Lab/spotter/releases/tag/v1.0.0",
        "name": "spotter",
        "release_id": 113042588,
        "tag": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/Elcock-Lab/spotter/tarball/v1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/Elcock-Lab/spotter/releases/113042588",
        "value": "https://api.github.com/repos/Elcock-Lab/spotter/releases/113042588",
        "zipball_url": "https://api.github.com/repos/Elcock-Lab/spotter/zipball/v1.0.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "GETTING STARTED: A TEST RUN WITH THE *E. coli alaS* OPERON",
        "parent_header": [
          "*spotter*"
        ],
        "type": "Text_excerpt",
        "value": "The test run below uses the _alaS_ sequence (provided in the EXAMPLES folder), but if a sequence\nfor a particular transcription unit is not available, simulations can proceed without one; as\ndescribed below, users have a variety of options for providing sequences, dwell time data, and\nparameters defining alternative models of transcription and translation.\n\nTo set up the run, leave the spotter directory and create a directory for the trial run...\n\n`mkdir ALA_S_TEST`\n\n...change into that directory, and copy the provided _alaS_ sequence and two example files into it:\n\n`cp /home/spotter/EXAMPLES/STARTUP/alaS.seq .`\n\t\n`cp /home/spotter/EXAMPLES/STARTUP/consolidated.alaS.inp .`\n\n`cp /home/spotter/EXAMPLES/STARTUP/alaS.gene .`\n\n(note that `/home/spotter/` should be replaced by the location of the spotter folder on your system)\n\nOnce these files are in place, you can start making the files needed to run a simulation.\n\n<br/>\n\n**First, use the sequence file to generate a position-specific list of reaction rates for RNAPs at each DNA template position:**\n\n  - `/home/spotter/PRECOMPILED/rnap_rate_file_generator  -sequence alaS.seq -tx_start 13 -tx_stop 2769`\n\n\tSeveral options are available for calculating RNAP reaction rates (these are detailed in [Making position-specific RNAP reaction rate files](#making-position-specific-rnap-reaction-rate-files) below). Here, we use default settings where dwell times are calculated using a NET-seq-derived energy function and RNAPs travel at a mean rate of 30 bp/s and are subject to short elemental pauses but do not enter longer-lived pauses or backtrack.\n\n<br/>\n\n**Rename the output RNAP rate file:**\n\n  - `mv full_rnap_rate_set.seq_based rnap_rates.alaS`\n\n<br/>\n\n**Next, use the aligned sequence file made in generating RNAP rates to make a position-specific list of reaction rates for ribosomes at each mRNA template position:**\n\n - `/home/spotter/PRECOMPILED/ribosome_rate_file_generator  -sequence aligned_sequence.txt  -genefile alaS.gene`\n \n \tLike RNAP reaction rates, ribosome rates can be calculated using a variety of options (detailed in [Making-position-specific ribosome reaction rate files](#making-position-specific-ribosome-reaction-rate-files) below). Here, we use default settings where ribosomes are assumed to move at a mean rate of 10 codons/s and their dwell times are determined by a tRNA competition model.\n \n <br/>\n \n **Rename the output ribosome rate file...**\n \n  - `mv ribo_rates.seq.full_info ribo_rates.alaS`\n\n<br/>\n\n**...then modify the simulation input file (`consolidated.alaS.inp`) so that it lists the locations of the position-specific rate files just made:**\n\nChange the lines to match the following:\n\n - <code>rnap_dwell_file&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rnap_rates.alaS</code>\n\n\t(located under \"Position-dependent reaction rates\" in the \"Transcription\" section in the simulation input file)\n\n - <code>ribo_dwell_file&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ribo_rates.alaS</code>\n\n\n\t(located under \"Position-dependent reaction rates\" in the \"Translation\" section in the simulation input file)\n\n\tThe simulation input file used is \"annotated.\" Annotations describe options available for general simulation parameters, transcription and supercoiling models, ribosome-RNAP and inter-RNAP interactions, and rates for position-independent reaction rates. Here, the input file sets up a 15-minute simulation with a simple model of RNAP activation, a single-step model of transcription (no elemental pauses, advanced pauses or backtracking), a ribosome initiaion rate of 0.12 s<sup>-1</sup>, and a promoter that toggles between \"on\" and \"off\" states. Many of these parameters can be adjusted without needing to remake the position-dependent rate files; note, though, that if you change position-**independent** rates for RNAP pause entry and escape in the simulation input file, you will need to remake position-**dependent** RNAP rate files to match these changes.\n\n<br/>\n\n**Now you're ready to run a simulation:**\n\n - `/home/spotter/PRECOMPILED/spotter.startup  -singlefile consolidated.alaS.inp -seed 17123 > simoutput`\n \n \t**NOTE:** The above uses a version of the simulation runner compiled using a static version of the GSL library and so has a reasonable chance of running out of the box. If it's not working, you can also try a version compiled with the built-in C random number generator: `/home/spotter/PRECOMPILED/spotter.C_RNG`. See [Compiling _spotter_](#compiling-spotter) for further information.\n \n \tThere are several options available in running simulations (see [Running _spotter_ simulations](#running-spotter-simulations) for details). Input files can be given as modules (with separate files for transcription, translation, etc.) but are here collected in a single file.\n\n\tSimulation output files are described in [Running _spotter_ simulations: Simulation output](#simulation-output). Files include logs of transcriptional and translational activity and data for making plots and movies representing the trajectory.\n\n<br/>\n\n**If you have Visual Molecular Dynamics (VMD) installed on your desktop, you can now make a movie of the simulation trajectory. First, make VMD-readable files representing the trajectory:**\n\n - `/home/spotter/PRECOMPILED/trajectory_movie_maker  tx_tsl_traj.for_xtc.txt  consolidated.alaS.inp  200  50  0.1  alaS`\n\n<br/>\n\n**Next, copy the directory made by the movie-maker (`MOVIE_MATERIALS.alaS`) to your desktop. Start VMD by opening the `.pdb` file in this directory (if your version autoloads a ruler or other \"molecules,\" don't open VMD first). In the Tk Console (available from the dropdown \"Extensions\" menu), enter...**\n\n - `source custom_script_for_alaS.tcl`\n \n <br/>\n \n **...followed by:**\n \n  - `start_tx_tsl_viewer 1 white`\n\n\tScroll in and out briefly to center text. The movie can played with \"play\" button in the lower right-hand corner of the display window. Because the fractional availability of the promoter is 1/3, RNAPs may not initiate at the beginning of the simulation; you can try other random seeds for comparison. See [Post-simulation visualization: Making movies from trajectories](#post-simulation-visualization-making-movies-from-trajectories) for additional details.\n\n<br/>\n"
      },
      "source": "https://raw.githubusercontent.com/Elcock-Lab/spotter/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 00:23:34",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "GETTING STARTED: A TEST RUN WITH THE *E. coli alaS* OPERON",
        "parent_header": [
          "*spotter*"
        ],
        "type": "Text_excerpt",
        "value": "The test run below uses the _alaS_ sequence (provided in the EXAMPLES folder), but if a sequence\nfor a particular transcription unit is not available, simulations can proceed without one; as\ndescribed below, users have a variety of options for providing sequences, dwell time data, and\nparameters defining alternative models of transcription and translation.\n\nTo set up the run, leave the spotter directory and create a directory for the trial run...\n\n`mkdir ALA_S_TEST`\n\n...change into that directory, and copy the provided _alaS_ sequence and two example files into it:\n\n`cp /home/spotter/EXAMPLES/STARTUP/alaS.seq .`\n\t\n`cp /home/spotter/EXAMPLES/STARTUP/consolidated.alaS.inp .`\n\n`cp /home/spotter/EXAMPLES/STARTUP/alaS.gene .`\n\n(note that `/home/spotter/` should be replaced by the location of the spotter folder on your system)\n\nOnce these files are in place, you can start making the files needed to run a simulation.\n\n<br/>\n\n**First, use the sequence file to generate a position-specific list of reaction rates for RNAPs at each DNA template position:**\n\n  - `/home/spotter/PRECOMPILED/rnap_rate_file_generator  -sequence alaS.seq -tx_start 13 -tx_stop 2769`\n\n\tSeveral options are available for calculating RNAP reaction rates (these are detailed in [Making position-specific RNAP reaction rate files](#making-position-specific-rnap-reaction-rate-files) below). Here, we use default settings where dwell times are calculated using a NET-seq-derived energy function and RNAPs travel at a mean rate of 30 bp/s and are subject to short elemental pauses but do not enter longer-lived pauses or backtrack.\n\n<br/>\n\n**Rename the output RNAP rate file:**\n\n  - `mv full_rnap_rate_set.seq_based rnap_rates.alaS`\n\n<br/>\n\n**Next, use the aligned sequence file made in generating RNAP rates to make a position-specific list of reaction rates for ribosomes at each mRNA template position:**\n\n - `/home/spotter/PRECOMPILED/ribosome_rate_file_generator  -sequence aligned_sequence.txt  -genefile alaS.gene`\n \n \tLike RNAP reaction rates, ribosome rates can be calculated using a variety of options (detailed in [Making-position-specific ribosome reaction rate files](#making-position-specific-ribosome-reaction-rate-files) below). Here, we use default settings where ribosomes are assumed to move at a mean rate of 10 codons/s and their dwell times are determined by a tRNA competition model.\n \n <br/>\n \n **Rename the output ribosome rate file...**\n \n  - `mv ribo_rates.seq.full_info ribo_rates.alaS`\n\n<br/>\n\n**...then modify the simulation input file (`consolidated.alaS.inp`) so that it lists the locations of the position-specific rate files just made:**\n\nChange the lines to match the following:\n\n - <code>rnap_dwell_file&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rnap_rates.alaS</code>\n\n\t(located under \"Position-dependent reaction rates\" in the \"Transcription\" section in the simulation input file)\n\n - <code>ribo_dwell_file&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ribo_rates.alaS</code>\n\n\n\t(located under \"Position-dependent reaction rates\" in the \"Translation\" section in the simulation input file)\n\n\tThe simulation input file used is \"annotated.\" Annotations describe options available for general simulation parameters, transcription and supercoiling models, ribosome-RNAP and inter-RNAP interactions, and rates for position-independent reaction rates. Here, the input file sets up a 15-minute simulation with a simple model of RNAP activation, a single-step model of transcription (no elemental pauses, advanced pauses or backtracking), a ribosome initiaion rate of 0.12 s<sup>-1</sup>, and a promoter that toggles between \"on\" and \"off\" states. Many of these parameters can be adjusted without needing to remake the position-dependent rate files; note, though, that if you change position-**independent** rates for RNAP pause entry and escape in the simulation input file, you will need to remake position-**dependent** RNAP rate files to match these changes.\n\n<br/>\n\n**Now you're ready to run a simulation:**\n\n - `/home/spotter/PRECOMPILED/spotter.startup  -singlefile consolidated.alaS.inp -seed 17123 > simoutput`\n \n \t**NOTE:** The above uses a version of the simulation runner compiled using a static version of the GSL library and so has a reasonable chance of running out of the box. If it's not working, you can also try a version compiled with the built-in C random number generator: `/home/spotter/PRECOMPILED/spotter.C_RNG`. See [Compiling _spotter_](#compiling-spotter) for further information.\n \n \tThere are several options available in running simulations (see [Running _spotter_ simulations](#running-spotter-simulations) for details). Input files can be given as modules (with separate files for transcription, translation, etc.) but are here collected in a single file.\n\n\tSimulation output files are described in [Running _spotter_ simulations: Simulation output](#simulation-output). Files include logs of transcriptional and translational activity and data for making plots and movies representing the trajectory.\n\n<br/>\n\n**If you have Visual Molecular Dynamics (VMD) installed on your desktop, you can now make a movie of the simulation trajectory. First, make VMD-readable files representing the trajectory:**\n\n - `/home/spotter/PRECOMPILED/trajectory_movie_maker  tx_tsl_traj.for_xtc.txt  consolidated.alaS.inp  200  50  0.1  alaS`\n\n<br/>\n\n**Next, copy the directory made by the movie-maker (`MOVIE_MATERIALS.alaS`) to your desktop. Start VMD by opening the `.pdb` file in this directory (if your version autoloads a ruler or other \"molecules,\" don't open VMD first). In the Tk Console (available from the dropdown \"Extensions\" menu), enter...**\n\n - `source custom_script_for_alaS.tcl`\n \n <br/>\n \n **...followed by:**\n \n  - `start_tx_tsl_viewer 1 white`\n\n\tScroll in and out briefly to center text. The movie can played with \"play\" button in the lower right-hand corner of the display window. Because the fractional availability of the promoter is 1/3, RNAPs may not initiate at the beginning of the simulation; you can try other random seeds for comparison. See [Post-simulation visualization: Making movies from trajectories](#post-simulation-visualization-making-movies-from-trajectories) for additional details.\n\n<br/>\n"
      },
      "source": "https://raw.githubusercontent.com/Elcock-Lab/spotter/main/README.md",
      "technique": "header_analysis"
    }
  ]
}