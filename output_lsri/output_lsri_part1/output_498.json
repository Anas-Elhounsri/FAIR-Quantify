{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "How to cite",
        "parent_header": [
          "AmberMDrun"
        ],
        "type": "Text_excerpt",
        "value": "bibtex:\r\n~~~tex\r\n@Article{biom13040635,\r\nAUTHOR = {Zhang, Zhi-Wei and Lu, Wen-Cai},\r\nTITLE = {AmberMDrun: A Scripting Tool for Running Amber MD in an Easy Way},\r\nJOURNAL = {Biomolecules},\r\nVOLUME = {13},\r\nYEAR = {2023},\r\nNUMBER = {4},\r\nARTICLE-NUMBER = {635},\r\nURL = {https://www.mdpi.com/2218-273X/13/4/635},\r\nISSN = {2218-273X},\r\nDOI = {10.3390/biom13040635}\r\n}\r\n~~~\r"
      },
      "source": "https://raw.githubusercontent.com/9527567/AmberMDrun/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "If you are interested, you can also cite this article",
        "parent_header": [
          "AmberMDrun"
        ],
        "type": "Text_excerpt",
        "value": "~~~tex\r\n@article{CUI2023134812,\r\ntitle = {A TastePeptides-Meta system including an umami/bitter classification model Umami_YYDS, a TastePeptidesDB database and an open-source package Auto_Taste_ML},\r\njournal = {Food Chemistry},\r\nvolume = {405},\r\npages = {134812},\r\nyear = {2023},\r\nissn = {0308-8146},\r\ndoi = {https://doi.org/10.1016/j.foodchem.2022.134812},\r\nurl = {https://www.sciencedirect.com/science/article/pii/S0308814622027741},\r\nauthor = {Zhiyong Cui and Zhiwei Zhang and Tianxing Zhou and Xueke Zhou and Yin Zhang and Hengli Meng and Wenli Wang and Yuan Liu},\r\nkeywords = {Peptides, Umami prediction, TastePeptidesDB, Machine learning},\r\nabstract = {Taste peptides with umami/bitterness play a role in food attributes. However, the taste mechanisms of peptides are not fully understood, and the identification of these peptides is time-consuming. Here, we created a taste peptide database by collecting the reported taste peptide information. Eight key molecular descriptors from di/tri-peptides were selected and obtained by modeling screening. A gradient boosting decision tree model named Umami_YYDS (89.6\\% accuracy) was established by data enhancement, comparison algorithm and model optimization. Our model showed a great prediction performance compared to other models, and its outstanding ability was verified by sensory experiments. To provide a convenient approach, we deployed a prediction website based on Umami_YYDS and uploaded the Auto_Taste_ML machine learning package. In summary, we established the system TastePeptides-Meta, containing a taste peptide database TastePeptidesDB an umami/bitter taste prediction model Umami_YYDS and an open-source machine learning package Auto_Taste_ML, which were helpful for rapid screening of umami peptides.}\r\n}\r\n~~~"
      },
      "source": "https://raw.githubusercontent.com/9527567/AmberMDrun/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Zhang, Zhi-Wei and Lu, Wen-Cai",
        "doi": "10.3390/biom13040635",
        "format": "bibtex",
        "title": "AmberMDrun: A Scripting Tool for Running Amber MD in an Easy Way",
        "type": "Text_excerpt",
        "url": "https://www.mdpi.com/2218-273X/13/4/635",
        "value": "@article{biom13040635,\n    doi = {10.3390/biom13040635},\n    issn = {2218-273X},\n    url = {https://www.mdpi.com/2218-273X/13/4/635},\n    article-number = {635},\n    number = {4},\n    year = {2023},\n    volume = {13},\n    journal = {Biomolecules},\n    title = {AmberMDrun: A Scripting Tool for Running Amber MD in an Easy Way},\n    author = {Zhang, Zhi-Wei and Lu, Wen-Cai},\n}"
      },
      "source": "https://raw.githubusercontent.com/9527567/AmberMDrun/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Zhiyong Cui and Zhiwei Zhang and Tianxing Zhou and Xueke Zhou and Yin Zhang and Hengli Meng and Wenli Wang and Yuan Liu",
        "doi": "https://doi.org/10.1016/j.foodchem.2022.134812",
        "format": "bibtex",
        "title": "A TastePeptides-Meta system including an umami/bitter classification model Umami_YYDS, a TastePeptidesDB database and an open-source package Auto_Taste_ML",
        "type": "Text_excerpt",
        "url": "https://www.sciencedirect.com/science/article/pii/S0308814622027741",
        "value": "@article{CUI2023134812,\n    abstract = {Taste peptides with umami/bitterness play a role in food attributes. However, the taste mechanisms of peptides are not fully understood, and the identification of these peptides is time-consuming. Here, we created a taste peptide database by collecting the reported taste peptide information. Eight key molecular descriptors from di/tri-peptides were selected and obtained by modeling screening. A gradient boosting decision tree model named Umami_YYDS (89.6\\% accuracy) was established by data enhancement, comparison algorithm and model optimization. Our model showed a great prediction performance compared to other models, and its outstanding ability was verified by sensory experiments. To provide a convenient approach, we deployed a prediction website based on Umami_YYDS and uploaded the Auto_Taste_ML machine learning package. In summary, we established the system TastePeptides-Meta, containing a taste peptide database TastePeptidesDB an umami/bitter taste prediction model Umami_YYDS and an open-source machine learning package Auto_Taste_ML, which were helpful for rapid screening of umami peptides.},\n    keywords = {Peptides, Umami prediction, TastePeptidesDB, Machine learning},\n    author = {Zhiyong Cui and Zhiwei Zhang and Tianxing Zhou and Xueke Zhou and Yin Zhang and Hengli Meng and Wenli Wang and Yuan Liu},\n    url = {https://www.sciencedirect.com/science/article/pii/S0308814622027741},\n    doi = {https://doi.org/10.1016/j.foodchem.2022.134812},\n    issn = {0308-8146},\n    year = {2023},\n    pages = {134812},\n    volume = {405},\n    journal = {Food Chemistry},\n    title = {A TastePeptides-Meta system including an umami/bitter classification model Umami_YYDS, a TastePeptidesDB database and an open-source package Auto_Taste_ML},\n}"
      },
      "source": "https://raw.githubusercontent.com/9527567/AmberMDrun/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/9527567/AmberMDrun"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-09-19T04:16:17Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-07-26T13:32:33Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.83311172506279,
      "result": {
        "original_header": "AmberMDrun",
        "type": "Text_excerpt",
        "value": "Easy to use, easy to expand, high-performance Amber simulation package\r \n"
      },
      "source": "https://raw.githubusercontent.com/9527567/AmberMDrun/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9927408051985799,
      "result": {
        "original_header": "How to calculate MM-PB (GB) SA between small molecules and proteins of a single drug",
        "type": "Text_excerpt",
        "value": "\r\n~~~bash\r\nusage: mmpbsa [-h] --protein PROTEIN [--mol2 MOL2 [MOL2 ...]] [--temp TEMP] [--ns NS] [-g] [-uc] [-c CHARGE [CHARGE ...]] [--multiplicity MULTIPLICITY [MULTIPLICITY ...]]\r\n              [--MIN MIN] [--MD MD]\r\n\r\nTools for automating the operation of MMPBSA\r\n\r\noptions:\r\n  -h, --help            show this help message and exit\r\n  --protein PROTEIN, -p PROTEIN\r\n                        pdb file for protein\r\n  --mol2 MOL2 [MOL2 ...], -m MOL2 [MOL2 ...]\r\n                        mol2 file for mol\r\n  --temp TEMP, -t TEMP  Temperature\r\n  --ns NS, -n NS        time for MD(ns)\r\n  -g, --guess_charge    guess charge\r\n  -uc, --user_charge    user charge\r\n  -c CHARGE [CHARGE ...], --charge CHARGE [CHARGE ...]\r\n                        charge of mol\r\n  --multiplicity MULTIPLICITY [MULTIPLICITY ...]\r\n                        multiplicity of mol\r\n  --MIN MIN             Engine for MIN\r\n  --MD MD               Engine for MD\r\n~~~\r\nTypically, the complex structure after molecular docking is used to perform MMPBSA calculations.Therefore, we have provided a short code to handle the pdb format of the complex. Therefore, when your complex structure is docked and the ligand is in the desired initial position, you can directly provide the pdb format file of the complex.The following is an example.**It should be noted that we will not actively assist you in handling the hydrogen atom of the ligand. We need you to ensure that the hydrogen of the ligand is correct.**\r\n~~~bash\r\nmmpbsa -p complex.pdb\r\n~~~\r \n"
      },
      "source": "https://raw.githubusercontent.com/9527567/AmberMDrun/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/9527567/AmberMDrun/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/9527567/AmberMDrun/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "9527567/AmberMDrun"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "AmberMDrun"
      },
      "source": "https://raw.githubusercontent.com/9527567/AmberMDrun/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Install",
        "parent_header": [
          "AmberMDrun"
        ],
        "type": "Text_excerpt",
        "value": "This software only supports **Linux** because some Linux system functions are called.**Mac OS X** and **Windows** are not supported.\r"
      },
      "source": "https://raw.githubusercontent.com/9527567/AmberMDrun/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Necessary",
        "parent_header": [
          "AmberMDrun",
          "Install"
        ],
        "type": "Text_excerpt",
        "value": "Ambertools, python3, and python3-dev are required. Amber acceleration package is optional, but we strongly recommend installing high-performance pmemd module. [Amber](https://ambermd.org/)\r\n\r\nYou can refer to the [Amber installation tutorial](https://ambermd.org/Installation.php) to install Amber.\r\n\r\nThen, you can choose several installation methods.\r\n\r\n1. Anaconda(**recommend**)\r\n\r\n![anaconda](https://anaconda.org/zjack/ambermdrun/badges/version.svg)\r\n![update](https://anaconda.org/zjack/ambermdrun/badges/latest_release_date.svg)\r\n![download](https://anaconda.org/zjack/ambermdrun/badges/downloads.svg)\r\n![MIT](https://anaconda.org/zjack/ambermdrun/badges/license.svg)\r\n![platform](https://anaconda.org/zjack/ambermdrun/badges/platforms.svg)\r\n~~~bash\r\nconda install ambermdrun -c zjack\r\n~~~\r\n<br>\r\n\r\n2. PYPI\r\nPYPI installation requires a c++compiler that supports the c++17 standard.\r\nGCC-8 does not fully support the file system in the c++17 standard, so GCC-9 or higher is required. Therefore, different systems have different processing methods, and we recommend using conda for installation.\r\n\r\n![pypi](https://img.shields.io/pypi/dm/ambermdrun?style=flat-square)\r\n\r\nUbuntu >= 20\r\n~~~bash\r\napt install g++ libpython3-dev\r\npip install AmberMDrun\r\n~~~\r\n centos7\r\n We recommend [Red Hat Developer Toolset](https://access.redhat.com/documentation/en-us/red_hat_developer_toolset/9) for higher version of gcc.\r\n~~~bash\r\nyum update\r\nyum install epel-release\r\nyum install centos-release-scl-rh\r\nyum install devtoolset-9\r\nsource /opt/rh/devtoolset-9/enable # enable gcc-9\r\nyum install python3-devel\r\npip install AmberMDrun\r\n~~~\r\n3. You can also choose to build from source code.\r\n~~~bash\r\ngit clone https://github.com/9527567/AmberMD --recursive\r\npython setup.py install --user\r\n~~~\r"
      },
      "source": "https://raw.githubusercontent.com/9527567/AmberMDrun/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Optional",
        "parent_header": [
          "AmberMDrun",
          "Install"
        ],
        "type": "Text_excerpt",
        "value": "If you want to use AmberMDrun to calculate MMPB (GB) SA, then additional programs are necessary.\r\n\r\n- [ACPYPE](https://github.com/alanwilter/acpype)\r\n- [gmx_MMPBSA](https://github.com/Valdes-Tresanco-MS/gmx_MMPBSA)\r"
      },
      "source": "https://raw.githubusercontent.com/9527567/AmberMDrun/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/9527567/AmberMDrun/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2022 9527567\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/9527567/AmberMDrun/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "AmberMDrun"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "9527567"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 690685,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 26534,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 1702,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/9527567/AmberMDrun/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 00:58:44",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 13
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "V0.0.5 added support for multiple ligands",
        "parent_header": [
          "AmberMDrun"
        ],
        "type": "Text_excerpt",
        "value": "Just follow the files of multiple ligands after -m, and add an option `-g` to guess the static charge of small molecules, or manually specify the static charge, for example:\r\n~~~bash\r\nmmpbsa -p pro.pdb -m lig1.mol2 lig2.mol2 -g -n 100\r\n~~~\r"
      },
      "source": "https://raw.githubusercontent.com/9527567/AmberMDrun/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "How to use parm7 and rst7 for dynamic simulation",
        "parent_header": [
          "AmberMDrun"
        ],
        "type": "Text_excerpt",
        "value": "~~~bash\r\nusage: amberMDrun [-h] --parm7 PARM7 --rst7 RST7 [--temp TEMP] [--ns NS] [--addmask ADDMASK] [--gamd GAMD] [--MIN MIN] [--MD MD]\r\n\r\nTools for automated operation of AMBER MD\r\n\r\noptions:\r\n  -h, --help            show this help message and exit\r\n  --parm7 PARM7, -p PARM7\r\n                        amber top file\r\n  --rst7 RST7, -c RST7  amber rst file\r\n  --temp TEMP, -t TEMP  Temperature\r\n  --ns NS, -n NS        time for MD(ns)\r\n  --addmask ADDMASK     add restarint mask\r\n  --gamd GAMD           if run gamd\r\n  --MIN MIN             Engine for MIN\r\n  --MD MD               Engine for MD\r\n~~~\r"
      },
      "source": "https://raw.githubusercontent.com/9527567/AmberMDrun/main/README.md",
      "technique": "header_analysis"
    }
  ]
}