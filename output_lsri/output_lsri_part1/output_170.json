{
  "application_domain": [
    {
      "confidence": 20.05,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/lemene/PECAT"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contact",
        "type": "Text_excerpt",
        "value": "+ Nie Fan, niefan@csu.edu.cn\n+ QQ 316859622\n"
      },
      "source": "https://raw.githubusercontent.com/lemene/PECAT/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-02-06T02:20:10Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-26T09:16:46Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PECAT, a phased error correct and assembly tool"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "type": "Text_excerpt",
        "value": "PECAT is a phased error correction and assembly tool for long reads. It includes a haplotype-aware correction method and an efficient diploid assembly method. \n"
      },
      "source": "https://raw.githubusercontent.com/lemene/PECAT/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9206988909654308,
      "result": {
        "original_header": "More details",
        "type": "Text_excerpt",
        "value": "PECAT follows the correct-then-assemble strategy, including an error correction module and a two-round string-graph-based assembly module. Here, we describe some important steps and parameters. See [config.md](doc/config.md)\n \n"
      },
      "source": "https://raw.githubusercontent.com/lemene/PECAT/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8130612361716585,
      "result": {
        "original_header": "Correcting raw reads",
        "type": "Text_excerpt",
        "value": "PECAT first extracts `prep_output_coverage` longest raw reads for correction. It uses minimap2 with `corr_rd2rd_options` to find the candidate overlaps between the extracted reads. PECAT corrects the raw reads with `corr_correct_options`. It implements `corr_iterate_number` rounds of error correction. After correcting, it extracts `corr_output_coverage` longest corrected reads for assembly, which are in the file `$PRJECT/1-correct/corrected_reads.fasta`. We can use the following scripts to correct raw reads.\n```Shell\n$ pecat.pl correct cfgile\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/lemene/PECAT/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9006276207474918,
      "result": {
        "original_header": "The first round of assembly",
        "type": "Text_excerpt",
        "value": "In the first round of assembly, PECAT first uses minimap2 with `align_rd2rd_options` to detect the overlaps between corrected reads. Minimap2 uses the seed-based method to find the overlaps, so the overlaps may have long overhangs. To reduce overhangs of overlaps, PECAT (`align_filter_options`) performs local alignment to extend overlaps to the ends of the reads and filter out the overlaps still with long overhangs. Then, PECAT (`asm1_assmeble_options`)  assembles the overlaps to haplotype-collapsed contigs. The contigs file is `$PROJECT/3-assemble/primary.fasta`. We can use the following scripts to run this step. \n```Shell\n$ pecat.pl assemble cfgfile\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/lemene/PECAT/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9155639363533284,
      "result": {
        "original_header": "The second round of assembly",
        "type": "Text_excerpt",
        "value": "In the second round of assembly, PECAT first use minimap2 to map the reads (`phase_use_reads=0` for raw reads `phase_use_reads=1` for corrected reads) to `$PROJECT/3-assemble/primary.fasta` with `phase_rd2ctg_options`. PECAT calls the heterozygous SNP sites based on the base frequency of the alignments and identifies the inconsistent overlaps with `phase_phase_options`. PECAT removes the inconsistent overlaps with `phase_filter_options`.  \nFor Nanopore reads, we recommend using clair3 to call heterozygous SNPs from the raw reads. This is a similar process. You can use similar parameters above, but the parameters start with `phase_clair3_`. \nAfter filtering out inconsistent overlaps, PECAT use `asm2_assemble_options` to assemble the filtered overlaps. The contigs files are placed in `$PROJECT/5-assemble`. \n"
      },
      "source": "https://raw.githubusercontent.com/lemene/PECAT/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9667807483210378,
      "result": {
        "original_header": "Polishing",
        "type": "Text_excerpt",
        "value": "After generating the contigs, PECAT use minimap2 with `polish_map_options` to map reads  (`polish_use_reads=0` for raw reads `polish_use_reads=1` for corrected reads) to the `$PROJECT/5-assemble/{primary.fasta,alternate.fasta}` or `$PROJECT/5-assemble/haplotype_1.fasta,haplotype_2.fasta}` and uses racon with `polish_cns_options` to polish the contigs. The polished contigs are placed in `$PROJECT/6-polish/racon`. \nIf `polish_medaka=1` is set, PECAT use medaka to further improve the quality of the assembly. The parameters are similar and start with `polish_medaka_`. The contigs are placed in `$PROJECT/6-polish/medaka`. \n"
      },
      "source": "https://raw.githubusercontent.com/lemene/PECAT/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/lemene/PECAT/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/lemene/PECAT/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "lemene/PECAT"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Introduction"
      },
      "source": "https://raw.githubusercontent.com/lemene/PECAT/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lemene/PECAT/main/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/lemene/PECAT/main/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lemene/PECAT/main/scripts/package.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installing PECAT from source codes",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "```shell\n$ git clone --recursive https://github.com/lemene/PECAT.git\n$ cd PECAT\n$ make\n```\nor\n```shell\n$ git clone  https://github.com/lemene/PECAT.git\n$ cd PECAT\n$ git submodule init\n$ git submodule update\n$ make\n```\n\nAfter building, all the executable files can be found in `PECAT/build/bin`. We can run `PECAT/build/bin/pecal.pl` or add the path to the system PATH and run `pecal.pl`.\n"
      },
      "source": "https://raw.githubusercontent.com/lemene/PECAT/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "zlib not found",
        "parent_header": [
          "Installation",
          "Installing PECAT from source codes"
        ],
        "type": "Text_excerpt",
        "value": "```Shell\nZLIB=zlib-1.3.1\nwget -c http://www.zlib.net/$ZLIB.tar.gz\ntar -xzf $ZLIB.tar.gz\ncd $ZLIB\n./configure && make\ncd ..\nexport C_INCLUDE_PATH=`pwd`/$ZLIB:$C_INCLUDE_PATH\nexport CPLUS_INCLUDE_PATH=`pwd`/$ZLIB:$CPLUS_INCLUDE_PATH\nexport LIBRARY_PATH=`pwd`/$ZLIB:$LIBRARY_PATH\nmake\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/lemene/PECAT/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installing PECAT using conda",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "Use [Bioconda](https://bioconda.github.io/).\n\n```\nconda config --add channels defaults\nconda config --add channels bioconda\nconda config --add channels conda-forge\nconda config --set channel_priority strict\n```\n\nInstall PECAT.\n```\nconda create -n pecat-env\nconda activate pecat-env\nconda install pecat\n```\nThen we can run `pecal.pl`.\n"
      },
      "source": "https://raw.githubusercontent.com/lemene/PECAT/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installing third-party tools using conda",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "PECAT depends on other tools, and their paths need to be added to the system PATH. We recommend using conda to install the third-party tools.\n```\nconda create -n pecat-env\nconda activate pecat-env\nconda install minimap2=2.24 racon=1.5 perl=5.32 samtools=1.17 python=3.11 # clair3 medaka\n```\n"
      },
      "source": "https://raw.githubusercontent.com/lemene/PECAT/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installing and configuring clair3 and medaka",
        "parent_header": [
          "Installation",
          "Installing third-party tools using conda"
        ],
        "type": "Text_excerpt",
        "value": "When we installed clair3 and medaka using conda, we encountered a conflict between clair3(v0.1-r12) and medaka (1.7.2). Only one of them can be installed. If you also fail to install the tools, we recommend using singularity or docker to invoke them. \n\n"
      },
      "source": "https://raw.githubusercontent.com/lemene/PECAT/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Using singularity",
        "parent_header": [
          "Installation",
          "Docker pre-built image"
        ],
        "type": "Text_excerpt",
        "value": "Download the images\n```Shell\nsingularity pull docker://hkubal/clair3:v0.1-r12\nsingularity pull docker://ontresearch/medaka:v1.7.2\n```\n\nAdd the following parameters to the config file. See [cfg_cattle_ont](demo/configs/cfg_cattle_ont)\n```\nphase_clair3_command = singularity exec -B `pwd -P`:`pwd -P` -B /tmp:/tmp clair3_v0.1-r12.sif /opt/bin/run_clair3.sh\npolish_medaka_command = singularity exec -B `pwd -P`:`pwd -P`  -B /tmp:/tmp medaka_v1.7.2.sif medaka\n```\n+ ``` `pwd -P`:`pwd -P` ```: It maps current working directory from the host to the container, so clair3 and medaka can access the files generated by PECAT.\n+ ``` /tmp:/tmp ```: prevents `/tmp` in the container from becoming full.\n+ `clair3_v0.1-r12.sif` and `medaka_v1.7.2.sif` should be replaced with the paths of corresponding images. Or the images are placed to the current path.\n"
      },
      "source": "https://raw.githubusercontent.com/lemene/PECAT/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Using docker",
        "parent_header": [
          "Installation",
          "Installing third-party tools using conda",
          "Installing and configuring clair3 and medaka"
        ],
        "type": "Text_excerpt",
        "value": "Add the following parameters to the config file. \n```\nphase_clair3_command =  docker run -i -v `pwd -P`:`pwd -P` -v /tmp:/tmp hkubal/clair3:latest /opt/bin/run_clair3.sh\npolish_medaka_command = docker run -i -v `pwd -P`:`pwd -P` -v /tmp:/tmp ontresearch/medaka:v1.7.2 medaka\n```\n+ ``` `pwd -P`:`pwd -P` ```: see [Using singularity](#using-singularity).\n+ ``` /tmp:/tmp ```\uff1a see [Using singularity](#using-singularity)\n"
      },
      "source": "https://raw.githubusercontent.com/lemene/PECAT/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Without medaka and clair3",
        "parent_header": [
          "Installation",
          "Installing third-party tools using conda",
          "Installing and configuring clair3 and medaka"
        ],
        "type": "Text_excerpt",
        "value": "PECAT can run and achieve genome assembly without clair3 and medaka. Set the following parameters to the config file.\n```\nphase_method = 0\npolish_medaka = 0\n``` \nSee [cfg_cattle_clr](demo/configs/cfg_cattle_clr)\n"
      },
      "source": "https://raw.githubusercontent.com/lemene/PECAT/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Docker pre-built image",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "There is a pre-built [docker image](https://hub.docker.com/r/lemene/pecat). Use the following commands to run pecat.\n\n```\ndocker run -i -v $CWD:/mnt -v /var/run/docker.sock:/var/run/docker.sock lemene/pecat:v0.0.3 pecat.pl unzip cfg\n```\n+ ```-v $CWD:/mnt```: Map current working directory (`$CWD`) of the host to current working directory (`/mnt`) of the container, so PECAT can access the config file `cfg`.\n+ ```-v /var/run/docker.sock:/var/run/docker.sock```: [Docker in Docker](https://devopscube.com/run-docker-in-docker/). By adding this parameter, pecat in the container can run the docker images (clair3 and medaka) of the host.\n+ The directory of datasets should also be mapped carefully to ensure that PECAT in the container can access them.\n\nAdd the following parameters to the config file, so that pecat can call `clair3` and `medaka` in the container.\n```\nphase_clair3_command =  docker run -i -v $CWD:/mnt -v /tmp:/tmp hkubal/clair3:latest /opt/bin/run_clair3.sh\npolish_medaka_command = docker run -i -v $CWD:/mnt -v /tmp:/tmp ontresearch/medaka:v1.7.2 medaka\n```\n+ `$CWD`: should be set to an absolute path of current working directory in the host.\n\n\n### Using singularity\nDownload PECAT image.\n```\nsingularity pull docker://lemene/pecat:v0.0.3\n```\nRun PECAT using the following command.\n```\nsingularity exec -B `pwd -P`:`pwd -P` pecat_v0.0.3.sif pecat.pl unzip cfg\n```\n+ ``` `pwd -P`:`pwd -P` ```: It maps current working directory from the host to the container, so PECAT can access the config file `cfg`.\n+ The directory of datasets should also be mapped carefully to ensure that PECAT in the container can access them.\n\nWe did not successfully run the singularity image in the container. It reports \n```ERROR  : Failed to create user namespace: user namespace disabled```.\nSo in this mode PECAT cannot run `clair3` and `medaka`. See [Without medaka and clair3](#without-medaka-and-clair3)\n\n"
      },
      "source": "https://raw.githubusercontent.com/lemene/PECAT/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Testing",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "We can run the demo to test whether PECAT has been succesfully installed. See [demo/README.md](demo/README.md).\n```Shell\ncd demo\npecat.pl unzip cfgfile\n```\n"
      },
      "source": "https://raw.githubusercontent.com/lemene/PECAT/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/lemene/PECAT/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "BSD 2-Clause \"Simplified\" License",
        "spdx_id": "BSD-2-Clause",
        "type": "License",
        "url": "https://api.github.com/licenses/bsd-2-clause",
        "value": "https://api.github.com/licenses/bsd-2-clause"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "BSD 2-Clause License\n\nCopyright (c) 2022, lemene\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
      },
      "source": "https://raw.githubusercontent.com/lemene/PECAT/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PECAT"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "lemene"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 1285877,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 119364,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 62387,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 8223,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 1559,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 974,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 526,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lemene/PECAT/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "lemene",
          "type": "User"
        },
        "date_created": "2024-02-01T05:55:09Z",
        "date_published": "2024-03-09T09:51:42Z",
        "description": "PECAT (v0.0.3) for Zenodo",
        "html_url": "https://github.com/lemene/PECAT/releases/tag/v0.0.3_zenodo",
        "release_id": 145610890,
        "tag": "v0.0.3_zenodo",
        "tarball_url": "https://api.github.com/repos/lemene/PECAT/tarball/v0.0.3_zenodo",
        "type": "Release",
        "url": "https://api.github.com/repos/lemene/PECAT/releases/145610890",
        "value": "https://api.github.com/repos/lemene/PECAT/releases/145610890",
        "zipball_url": "https://api.github.com/repos/lemene/PECAT/zipball/v0.0.3_zenodo"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "lemene",
          "type": "User"
        },
        "date_created": "2023-10-03T16:30:27Z",
        "date_published": "2023-10-03T17:02:27Z",
        "description": "Improvements for ONT R10",
        "html_url": "https://github.com/lemene/PECAT/releases/tag/v0.0.3",
        "name": "v0.0.3",
        "release_id": 123204209,
        "tag": "v0.0.3",
        "tarball_url": "https://api.github.com/repos/lemene/PECAT/tarball/v0.0.3",
        "type": "Release",
        "url": "https://api.github.com/repos/lemene/PECAT/releases/123204209",
        "value": "https://api.github.com/repos/lemene/PECAT/releases/123204209",
        "zipball_url": "https://api.github.com/repos/lemene/PECAT/zipball/v0.0.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "lemene",
          "type": "User"
        },
        "date_created": "2023-05-21T10:54:46Z",
        "date_published": "2023-05-22T02:13:38Z",
        "description": "1. Support using Clair3 to call SNPs\r\n2. Use Medaka to polish the assembly from Nanopore sequences.",
        "html_url": "https://github.com/lemene/PECAT/releases/tag/v0.0.2",
        "name": "v0.0.2",
        "release_id": 103732757,
        "tag": "v0.0.2",
        "tarball_url": "https://api.github.com/repos/lemene/PECAT/tarball/v0.0.2",
        "type": "Release",
        "url": "https://api.github.com/repos/lemene/PECAT/releases/103732757",
        "value": "https://api.github.com/repos/lemene/PECAT/releases/103732757",
        "zipball_url": "https://api.github.com/repos/lemene/PECAT/zipball/v0.0.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "lemene",
          "type": "User"
        },
        "date_created": "2022-09-23T00:41:54Z",
        "date_published": "2022-09-26T07:19:04Z",
        "description": "The release for commit id 8a63d0f.",
        "html_url": "https://github.com/lemene/PECAT/releases/tag/v0.0.1",
        "name": "v0.0.1",
        "release_id": 78103185,
        "tag": "v0.0.1",
        "tarball_url": "https://api.github.com/repos/lemene/PECAT/tarball/v0.0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/lemene/PECAT/releases/78103185",
        "value": "https://api.github.com/repos/lemene/PECAT/releases/78103185",
        "zipball_url": "https://api.github.com/repos/lemene/PECAT/zipball/v0.0.1"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependency",
        "type": "Text_excerpt",
        "value": "+ [python3](https://www.python.org) (3.6+)\n+ [minimap2](https://github.com/lh3/minimap2) (2.17+)\n+ [racon](https://github.com/lbcb-sci/racon) (v1.4.21+)\n+ [perl](https://github.com/Perl) (v5.22.1+)\n+ [samtools](https://github.com/samtools/samtools)  (1.7+)\n+ [clair3](https://github.com/HKU-BAL/Clair3)  (v0.1-r12+) (optional)\n+ [medaka](https://github.com/nanoporetech/medaka)  (1.7.2+) (optional)\n"
      },
      "source": "https://raw.githubusercontent.com/lemene/PECAT/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running with multiple computation nodes",
        "parent_header": [
          "More details"
        ],
        "type": "Text_excerpt",
        "value": "The pipeline script is written with [plgd](https://github.com/lemene/plgd). It supports PBS, SGE, LSF and Slurm systems. The follow parameter in the config file need to be set:\n```shell\ngrid= auto:4\n```\n\nIn the above example, `auto` means the pipeline automatically detects the type of cluster system. `pbs`, `sge`, `lsf` and `slurm` represent the corresponding systems, respectively. `4` computation nodes are used and each computation node run with `threads` CPU threads.\n"
      },
      "source": "https://raw.githubusercontent.com/lemene/PECAT/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Additional options",
        "parent_header": [
          "More details",
          "Running with multiple computation nodes"
        ],
        "type": "Text_excerpt",
        "value": "The parameter `grid_options` is used to add additional options. \n\nHere is an example. When `grid_options` is set to\n```\ngrid_options=  -A pi_zy --partition cpuQ -q cpuq\n```\nthe command for `slurm` system is\n```\nsbatch -D `pwd` -J al_rd2rd_split.sh --cpus-per-task=1 -o al_rd2rd_split.sh.log -A pi_zy --partition cpuQ -q al_rd2rd_split.sh\n```\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/lemene/PECAT/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-03 23:37:49",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 38
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick Start",
        "type": "Text_excerpt",
        "value": "Create a config file using the following command,\n\n```shell\n$ pecat.pl config cfgfile\n```\n\nFill in the necessary parameters.\n\n``` shell\nproject=S1\nreads=./demo/reads.fasta.gz\ngenome_size=1500000\n  ......\n```\n\nRun PECAT to assemble the reads.\n```\n$ pecat.pl unzip cfgfile\n```\n\n+ The corrected reads are in the file `S1/1-correct/corrected_reads.fasta`. \n+ The primary/alternate-format contigs are in the files `S1/6-polish/racon/{primary.fasta,alternate.fasta}`. \n+ The dual-format contigs are in the files `S1/6-polish/racon/{haplotype_1.fasta,haplotype_2.fasta}`. \n+ If the paramter `polish_medaka=1` is set, PECAT uses Medaka to further polish the above results, and the contigs are placed in `S1/6-polish/medaka`.\n\nIn the `demo` directory, there is a small example (`demo/{cfgfile,reads.fasta.gz}`) and several config files (`demo/configs`). When assembling a dataset, you can choose a config file of a similar species as a template and modify its parameters. See [config.md](doc/config.md). \n"
      },
      "source": "https://raw.githubusercontent.com/lemene/PECAT/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Notes",
        "parent_header": [
          "Quick Start"
        ],
        "type": "Text_excerpt",
        "value": "***Note:*** We strongly recommend setting the parameter `cleanup=1`. PECAT deletes temporary files, otherwise it take up a lot of disk space.\n\n***Note:*** For large genomes such as cattle and human, we strongly suggest adding the parameter `-f 0.005` or `-f 0.002` to `corr_rd2rd_options` and `align_rd2rd_options`. See [cfg_cattle_clr](demo/configs/cfg_cattle_clr), [cfg_cattle_ont](demo/configs/cfg_cattle_ont) and [cfg_hg002_ont](demo/configs/cfg_hg002_ont). The parameter is passed to `minimap2`, which means to filter out top 0.005 or 0.002 fraction of repetitive minimizers. It outputs less candidate overlaps, which reduces disk usage and speeds up error correction step and assembling step. \n\n"
      },
      "source": "https://raw.githubusercontent.com/lemene/PECAT/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Resource usage",
        "type": "Text_excerpt",
        "value": "|Dataset|Size|Cov.|Config|CPU time|Peak memory usage|Peak disk space usage|\n|:---------------|-----:|-----:|:---------------------|-------:|--------:|----:|\n|[Yeast-CLR](demo/README.md)|12Mb   |200|[cfg_yeast_clr](demo/configs/cfg_yeast_clr)  |11h  |18G |4G |\n|[Arab-CLR](demo/README.md)|130Mb   |135|[cfg_arab_clr](demo/configs/cfg_arab_clr)    |167h |71G |80G |\n|[Dro-CLR](demo/README.md) |140Mb   |146|[cfg_dro_clr](demo/configs/cfg_dro_clr)      |142h |41G |49G |\n|[Cattle-CLR](demo/README.md)|2.7Gb |135|[cfg_cattle_clr](demo/configs/cfg_cattle_clr)|4437h|219G|1099G|\n|[Arab-ONT](demo/README.md) |130Mb  |106|[cfg_arab_ont](demo/configs/cfg_arab_ont)    |359h |179G|142G|\n|[Cattle-ONT](demo/README.md) |2.7Gb|200|[cfg_cattle_ont](demo/configs/cfg_cattle_ont)|8869h|381G|1574G|\n|[HG002-ONT](demo/README.md) |3Gb   |59|[cfg_hg002_ont](demo/configs/cfg_hg002_ont)   |7456h|348G|1211G|\n\nThe assemblies are available at https://doi.org/10.5281/zenodo.8380113\n"
      },
      "source": "https://raw.githubusercontent.com/lemene/PECAT/main/README.md",
      "technique": "header_analysis"
    }
  ]
}