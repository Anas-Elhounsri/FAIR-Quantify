{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "How to Cite",
        "parent_header": [
          "GCPBayes Pipeline"
        ],
        "type": "Text_excerpt",
        "value": "Asgari et al., \"GCPBayes Pipeline: a tool for exploring pleiotropy at gene-level\", *NAR Genomics and Bioinformatics*, 5(3), lqad065, 2023, doi:10.1093/nargab/lqad065 [(Link)](https://academic.oup.com/nargab/article/5/3/lqad065/7219410?searchresult=1)\n<br>\n<br>\n"
      },
      "source": "https://raw.githubusercontent.com/CESP-ExpHer/GCPBayes-Pipeline/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/CESP-ExpHer/GCPBayes-Pipeline"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-01-14T08:14:30Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-03T06:35:58Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9818212903628456,
      "result": {
        "original_header": "GCPBayes Pipeline",
        "type": "Text_excerpt",
        "value": "**NOTE:** All SNPs and genes positions in the GWAS and annotation data used in the examples are based on GRCh37 (hg19) Human Genome Assembly.\n<br><br>\n \n"
      },
      "source": "https://raw.githubusercontent.com/CESP-ExpHer/GCPBayes-Pipeline/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8746649930148659,
      "result": {
        "original_header": "Test Dataset",
        "type": "Text_excerpt",
        "value": "Here, we provide a small dataset for testing the Pipeline. The data are GWAS summary statistics for The Breast Cancer Association Consortium (BCAC) and The Ovarian Cancer Association Consortium (OCAC) chromosome #5 and we want to run the Pipeline (without LD clumping method) and GCPBayes at a gene-level for 300 coding genes. \n<br>\nYou could use one of the following options (R or Bash) to run a small example file to test GCPBayes Pipeline: \n<br>\n \n"
      },
      "source": "https://raw.githubusercontent.com/CESP-ExpHer/GCPBayes-Pipeline/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8328240923024696,
      "result": {
        "original_header": "R",
        "type": "Text_excerpt",
        "value": "- Download and run the *\"GCPBayes_pipeline_check_packages_test.R\"* [(Link)](0_test_dataset) R script to check a list of required packages and install them if they are not available in your system. It also prints a warning message if any of the packages cannot be installed.\n- Download INPUT files [(Download)](http://marge11.vjf.inserm.fr/ExpHer_shared/)\n  - BCAC and OCAC GWAS data on chromosome #5 (*gwas_BCAC_chr5.txt*, *gwas_OCAC_chr5.txt*)\n  - An annotation file including all coding genes (*annot_gencode_v38lift37_modified_gene_class.txt*)\n  - BCAC GWAS file with a gene column (*Annot_BCAC_2020_onco_ALL_reformatted_coding.txt*)\n- Download the scripts and put them in the same folder as input data [(Download)](0_test_dataset)\n  - *R_C1_code_find_common_snps_one_pair_test.R*\n  - *R_D1_code_pipeline_annot_coding_withoutldclumping_extra_info_test.R*\n  - *R_D3_code_separate_groups_length_threshold_noclump_test.R*\n  - *R_E1_code_gcpbayes_less_extra_info_test.R*\n- Download the parameter file (*GCPBayes_pipeline_parameters_test.R*) [(Download)](0_test_dataset)\n  - You **JUST** need to replace **/PATH/** regarding *\"working directory\"* with the path where you put all downloaded data and scripts. \n- Now, all you need is to run *\"GCPBayes_pipeline_test.R\"* R script [(Download)](0_test_dataset)\n \n"
      },
      "source": "https://raw.githubusercontent.com/CESP-ExpHer/GCPBayes-Pipeline/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8726163848554246,
      "result": {
        "original_header": "OUTPUT files",
        "type": "Text_excerpt",
        "value": "**Running Time:** It took about **3 minutes** to run the *pipeline before GCPBayes* (in a system with Intel Core i7 11th Gen 2.8 GHz with 16 GB RAM). For the *GCPBayes*, we just used the first 300 genes from the data and it took **3 minutes** to run. \n**Note:** After a successful running, there would be a gene **\"*SETD9*\"** in the pleiotropic output file which determines the gene as a candidate with potential pleitropic signal among both breast and ovarian cancers. *SETD9* has 43 SNPs through our test datasets and one of its biological functions is [Regulation of TP53 Activity through Methylation](https://www.ncbi.nlm.nih.gov/gene/133383). \n"
      },
      "source": "https://raw.githubusercontent.com/CESP-ExpHer/GCPBayes-Pipeline/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9319125661444149,
      "result": {
        "original_header": "Visualization",
        "type": "Text_excerpt",
        "value": "- There are different visualizations for outputs from various steps. You can find more details through the visualization scripts in the [**Tutorial - Wiki**](2).\n<br> \n- **Shiny App - Online:** For a GCPBayes pleiotropic candidate genes output, we developed a shiny App which you can find through the following link:\n<br><br>\n[**GCPBayes_Output_Shiny_App**](https://cespexpher.shinyapps.io/gcpbayesoutput/)\n<br><br>\nFor example, you could use this file as an example [(Download)](0_Files) (filename: *output_GCPBayes_pleiotropy_example.txt*) (it has the same format as an output of GCPBayes pipeline for pleiotropic genes) and see different visualization tools via the online shiny App. **NOTE**: You need to select **Space** as **separator** after uploading the data.\n<br> \n- **Shiny App with Karyotype - Local:** For a newer version of the shiny App, we added a new graph (Karyotype) which demonstrates the position of candidate pleiotropic genes in the chromosomes. This type of graph is not available in the online version, but you could use it by running the shiny script on your computer. You could download the script from [**here**](0_Codes/Source_Codes) (filename: *shiny_gcpbayes_output_with_karyotype.R*).\n**NOTE:** You need to install the following packages before running the shiny App: *shiny, datasets, ggplot2, gridExtra, tidyverse, BioCircos, plotly, ggpubr, biomaRt, regioneR,* and *karyoploteR*.\n \n"
      },
      "source": "https://raw.githubusercontent.com/CESP-ExpHer/GCPBayes-Pipeline/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/CESP-ExpHer/GCPBayes-Pipeline/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/CESP-ExpHer/GCPBayes-Pipeline/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CESP-ExpHer/GCPBayes-Pipeline"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "GCPBayes Pipeline"
      },
      "source": "https://raw.githubusercontent.com/CESP-ExpHer/GCPBayes-Pipeline/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/CESP-ExpHer/GCPBayes-Pipeline/main/0_Bash/00_Global_run_GCPBayes.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/CESP-ExpHer/GCPBayes-Pipeline/main/0_Codes/Bash/00_Global_run_GCPBayes.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/CESP-ExpHer/GCPBayes-Pipeline/main/0_Codes/Bash_Parallel/00_Global_run_GCPBayes_parallel.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/CESP-ExpHer/GCPBayes-Pipeline/main/0_Images/Fig1_v3.jpg"
      },
      "source": "https://raw.githubusercontent.com/CESP-ExpHer/GCPBayes-Pipeline/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9233177413464303,
      "result": {
        "original_header": "GCPBayes Pipeline",
        "type": "Text_excerpt",
        "value": "Created by: Yazdan Asgari<br>\nCreation date: 14 Jan 2022<br>\nUpdate: Feb 2024<br>\nhttps://cesp.inserm.fr/en/equipe/exposome-and-heredity\n<br>\n<br> \n"
      },
      "source": "https://raw.githubusercontent.com/CESP-ExpHer/GCPBayes-Pipeline/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999999999992042,
      "result": {
        "original_header": "R",
        "type": "Text_excerpt",
        "value": "- Download and run the *\"GCPBayes_pipeline_check_packages_test.R\"* [(Link)](0_test_dataset) R script to check a list of required packages and install them if they are not available in your system. It also prints a warning message if any of the packages cannot be installed.\n- Download INPUT files [(Download)](http://marge11.vjf.inserm.fr/ExpHer_shared/)\n  - BCAC and OCAC GWAS data on chromosome #5 (*gwas_BCAC_chr5.txt*, *gwas_OCAC_chr5.txt*)\n  - An annotation file including all coding genes (*annot_gencode_v38lift37_modified_gene_class.txt*)\n  - BCAC GWAS file with a gene column (*Annot_BCAC_2020_onco_ALL_reformatted_coding.txt*)\n- Download the scripts and put them in the same folder as input data [(Download)](0_test_dataset)\n  - *R_C1_code_find_common_snps_one_pair_test.R*\n  - *R_D1_code_pipeline_annot_coding_withoutldclumping_extra_info_test.R*\n  - *R_D3_code_separate_groups_length_threshold_noclump_test.R*\n  - *R_E1_code_gcpbayes_less_extra_info_test.R*\n- Download the parameter file (*GCPBayes_pipeline_parameters_test.R*) [(Download)](0_test_dataset)\n  - You **JUST** need to replace **/PATH/** regarding *\"working directory\"* with the path where you put all downloaded data and scripts. \n- Now, all you need is to run *\"GCPBayes_pipeline_test.R\"* R script [(Download)](0_test_dataset)\n \n"
      },
      "source": "https://raw.githubusercontent.com/CESP-ExpHer/GCPBayes-Pipeline/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.978704553987014,
      "result": {
        "original_header": "OUTPUT files",
        "type": "Text_excerpt",
        "value": "  - *step1_output_BCAC.txt*\n  - *step1_output_OCAC.txt*\n  - *D1_output_pipeline_BCAC_common2all_2_studies_coding_wo_clumping.txt*\n  - *D1_output_pipeline_OCAC_common2all_2_studies_coding_wo_clumping.txt*\n  - *D1_output_pipeline_SNP_in_genes_output_pipeline_output_wo_clump.txt*\n  - *D1_Summary_SNP_in_genes_output_pipeline_BCAC_common2all_2_studies_coding_wo_clumping.txt*\n  - *D1_Summary_SNP_in_genes_output_pipeline_OCAC_common2all_2_studies_coding_wo_clumping.txt*\n  - *D1_Matrices_extra_info_output_pipeline_output_wo_clump.Rdata*\n  - *D1_Matrices_output_pipeline_output_wo_clump.Rdata*\n  - *output_output_GCPBayes_wo_clump_less_threshold_700_results.txt*\n  - *output_output_GCPBayes_wo_clump_less_threshold_700_pleiotropy.txt* \n**Note:** While running GCPBayes, a user could check these two files to see the results:\n- *output_output_GCPBayes_wo_clump_less_threshold_700_results.txt*\n- *output_output_GCPBayes_wo_clump_less_threshold_700_pleiotropy.txt* \n"
      },
      "source": "https://raw.githubusercontent.com/CESP-ExpHer/GCPBayes-Pipeline/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999925487582637,
      "result": {
        "original_header": "Visualization",
        "type": "Text_excerpt",
        "value": "- **Shiny App - Local:** It is also possible to use the script for the shiny App and run it on your computer. You could download the script from [**here**](0_Codes/Source_Codes) (filename: *shiny_gcpbayes_output.R*).\n**NOTE:** You need to install the following packages before running the shiny App: *shiny, datasets, ggplot2, gridExtra, tidyverse, BioCircos, plotly,* and *ggpubr*.\n<br> \n- **Shiny App with Karyotype - Local:** For a newer version of the shiny App, we added a new graph (Karyotype) which demonstrates the position of candidate pleiotropic genes in the chromosomes. This type of graph is not available in the online version, but you could use it by running the shiny script on your computer. You could download the script from [**here**](0_Codes/Source_Codes) (filename: *shiny_gcpbayes_output_with_karyotype.R*).\n**NOTE:** You need to install the following packages before running the shiny App: *shiny, datasets, ggplot2, gridExtra, tidyverse, BioCircos, plotly, ggpubr, biomaRt, regioneR,* and *karyoploteR*.\n \n"
      },
      "source": "https://raw.githubusercontent.com/CESP-ExpHer/GCPBayes-Pipeline/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/CESP-ExpHer/GCPBayes-Pipeline/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) [2022] [Exposome and Heredity Team]\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/CESP-ExpHer/GCPBayes-Pipeline/main/LICENSE.md",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "GCPBayes-Pipeline"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "CESP-ExpHer"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 819531,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 39238,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 24715,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/CESP-ExpHer/GCPBayes-Pipeline/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "yazdan59",
          "type": "User"
        },
        "date_created": "2023-05-15T11:40:39Z",
        "date_published": "2023-06-15T09:16:18Z",
        "description": "This release is just after the acceptance of the paper.",
        "html_url": "https://github.com/CESP-ExpHer/GCPBayes-Pipeline/releases/tag/v2.1",
        "name": "GCPBayes_Pipeline_06_2023",
        "release_id": 108695830,
        "tag": "v2.1",
        "tarball_url": "https://api.github.com/repos/CESP-ExpHer/GCPBayes-Pipeline/tarball/v2.1",
        "type": "Release",
        "url": "https://api.github.com/repos/CESP-ExpHer/GCPBayes-Pipeline/releases/108695830",
        "value": "https://api.github.com/repos/CESP-ExpHer/GCPBayes-Pipeline/releases/108695830",
        "zipball_url": "https://api.github.com/repos/CESP-ExpHer/GCPBayes-Pipeline/zipball/v2.1"
      },
      "technique": "GitHub_API"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running of the Pipeline",
        "parent_header": [
          "GCPBayes Pipeline"
        ],
        "type": "Text_excerpt",
        "value": "- [**Running the Pipeline using Shiny App**](3) **(recommended for non-computer scientists)** which is a R Shiny App that a user could easily open a Shiny App and change any desired parameters and run the whole procedure automatically with some simple clicks.<br>\n**IMPORTANT NOTE:** The Shiny App was tested on a Windows OS and Unix-based server with CentOS 7.\n\n- [**Running the Pipeline using Bash File or R script**](1) **(recommended for computer scientists)** which is a plain text file that contains a series of commands for running the whole procedure automatically with a user-defined parameters.<br>\n**IMPORTANT NOTE:** The Bash file was tested on a Unix-based server with CentOS 7 while the R Script was tested on a Windows OS and Unix-based server with CentOS 7.\n\n- [**Tutorial - Wiki**](2) which includes description for each scripts in more detail. This is useful for developers who want to modify/add any part of the pipeline\n<br>\n\nA schematic overview of the main sections of the GCPBayes pipeline is as follows:\n<br></br>\n<kbd> <img src=\"0_Images/Fig1_v3.jpg\"/> </kbd>\n<br></br>\n\n"
      },
      "source": "https://raw.githubusercontent.com/CESP-ExpHer/GCPBayes-Pipeline/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 01:19:28",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ]
}