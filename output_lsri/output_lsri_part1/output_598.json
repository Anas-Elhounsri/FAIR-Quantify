{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/jsunn-y/DeCOIL"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-02-17T04:51:46Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-24T21:08:16Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A computational method to optimize degenerate codons for synthesizing an informed combinatorial mutagenesis protein variant library"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9986873568013046,
      "result": {
        "original_header": "DeCOIL",
        "type": "Text_excerpt",
        "value": "<img src=\"workflow.jpg\">\nDEgnerate Codon Optimization for Informed Libraries (DeCOIL) is a computational method to optimize degenerate codons for synthesizing an informed combinatorial mutagenesis protein variant library, which is a critical step in a variety of machine learning-assisted protein engineering workflows. DeCOIL aims to bias a degenerate library toward desired proteins based on a predictive model from physics-based simulations, evolutionary knowledge, or machine-learning models while also providing diversity in the library.\n \n"
      },
      "source": "https://raw.githubusercontent.com/jsunn-y/DeCOIL/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9085446622508294,
      "result": {
        "original_header": "MLDE Simulations",
        "type": "Text_excerpt",
        "value": "To run MLDE simulations, the relevant anaconda environment can be installed from `MLDE_lite.yml`. To build this environment, run\n```\ncd ./DeCOIL\nconda env create -f MLDE_lite.yml\nconda activate MLDE_lite\n```\nThe MLDE simulations demonstrated in our accompanying study can be reproduced below:\nBASH2*\nThe configuration file should be located in `MLDE_lite/configs` with keys specified as follows:\n| Key (data config)| Description |\n|:-----------|:----------------:|\n| name |filname for csv file containing sequences in the combinatorial space and corresponding fitness values. Use \"GB1_fitness.csv\" for the GB1 dataset| \n|encoding | List of encodings to use, only supports \"one-hot\"| \n|library | Specifies how the training sequences should be sampled for each simulation. If a list of integers is provided, for an integer $a$, sequences will be sampled from the library containing the top $a$ sequences based on the Triad rank. If a string is specified, the optimized degenerate codon libraries corresponding to that folder in `optimization/saved` will be used| \n|n_solutions |must correspond to the number of libraries specified in \"library\"| \n| Key (model config)| Description |\n|:-----------|:----------------:|\n| name | list of model classes to be used. Only supports \"boosting\"|  \n| Key (train config)| Description |\n|:-----------|:----------------:|\n| seed | seed for reproducibility| \n| n_samples | list of integers specifying the number of sequences to sample from a library for the training set| \n| n_splits | the number of models to be trained in the ensemble| \n| n_subsets | number of times to sample training sequences from the library, to get statistics| \n| num_workers | number of processors to use| \n| verbose | boolean specifying whether or not to print training updates| \n| save_model | boolean specifying whether or not to save the trained models|  \nOutputs will be saved in `MLDE_lite/saved` under a folder with the name as the configuration file. The results of MLDE simulations can be accessed in `mlde_results.npy` and example analyses are provided in `analysis.ipynb`.\n \n"
      },
      "source": "https://raw.githubusercontent.com/jsunn-y/DeCOIL/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/jsunn-y/DeCOIL/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jsunn-y/DeCOIL/master/analysis.ipynb"
      },
      "source": "https://raw.githubusercontent.com/jsunn-y/DeCOIL/master/analysis.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/jsunn-y/DeCOIL/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "jsunn-y/DeCOIL"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DeCOIL"
      },
      "source": "https://raw.githubusercontent.com/jsunn-y/DeCOIL/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jsunn-y/DeCOIL/master/workflow.jpg"
      },
      "source": "https://raw.githubusercontent.com/jsunn-y/DeCOIL/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "DeCOIL"
        ],
        "type": "Text_excerpt",
        "value": "To download, clone this repository\n```\ngit clone https://github.com/jsunn-y/DeCOIL.git\n```\nTo run DeCOIL optimization, the relevant anaconda environment can be installed from `DeCOIL.yml`. To build this environment, run\n```\ncd ./DeCOIL\nconda env create -f DeCOIL.yml\nconda activate DeCOIL\n```\n"
      },
      "source": "https://raw.githubusercontent.com/jsunn-y/DeCOIL/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9999177608939146,
      "result": {
        "original_header": "MLDE Simulations",
        "type": "Text_excerpt",
        "value": "To run MLDE simulations, the relevant anaconda environment can be installed from `MLDE_lite.yml`. To build this environment, run\n```\ncd ./DeCOIL\nconda env create -f MLDE_lite.yml\nconda activate MLDE_lite\n```\nThe MLDE simulations demonstrated in our accompanying study can be reproduced below:\nBASH2*\nThe configuration file should be located in `MLDE_lite/configs` with keys specified as follows:\n| Key (data config)| Description |\n|:-----------|:----------------:|\n| name |filname for csv file containing sequences in the combinatorial space and corresponding fitness values. Use \"GB1_fitness.csv\" for the GB1 dataset| \n|encoding | List of encodings to use, only supports \"one-hot\"| \n|library | Specifies how the training sequences should be sampled for each simulation. If a list of integers is provided, for an integer $a$, sequences will be sampled from the library containing the top $a$ sequences based on the Triad rank. If a string is specified, the optimized degenerate codon libraries corresponding to that folder in `optimization/saved` will be used| \n|n_solutions |must correspond to the number of libraries specified in \"library\"| \n"
      },
      "source": "https://raw.githubusercontent.com/jsunn-y/DeCOIL/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/jsunn-y/DeCOIL/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DeCOIL"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "jsunn-y"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 88601,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 60462,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jsunn-y/DeCOIL/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-04 01:20:49",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 13
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "General Use",
        "parent_header": [
          "DeCOIL"
        ],
        "type": "Text_excerpt",
        "value": "DeCOIL can be executed on a personal computer using the following command:\n```\npython execute_DeCOIL.py --config_file 'file_name.json'\n```\nThe configuration file should be located in `DeCOIL/configs` with keys specified as follows:\n| Key (data config) | Description |\n|:-----------|:----------------:|\n| name |filname for csv file containing sequences in the combinatorial space and corresponding predicted values. Must contain a column called 'Combo' which sqecifies the mutations at each site in the combinatorial library| \n|zs_name | Name of the column in the csv file, which contains the relative value of each variant. By default, lower values are more desirable.| \n|samples |Approximate screening size (number of sequences sampled from the library)| \n|sites |number of amino acid sites targeted in the combinatoral library|\n|library | optional argument. If not provided, optimizes from random initializations. If a string, loads the final libraries from a previous optimization with the same configuration name. If a list of strings, each string in the list should specify a mixed base template to load.|\n\n\n| Key (train config)| Description |\n|:-----------|:----------------:|\n| type |type of optimization, only \"greedy\" is currently supported| \n|weight_type | List containing either \"simple\" or \"full\" for step and diffuse coverage respectively. If \"full\" is specified, the encoding type can also be specified, default is onehot.| \n|dist_function |Only required if weight_type contains \"full\". Can be \"hamming\", \"manhattan\", or \"euclidean\" | \n| zs_exp |p parameter, which is used to tune the desired amount of exploration and exploitation|\n| sigma | $\\sigma$ parameter used in diffuse coverage calculations|\n| seed | seed for reproducibility|\n| iters | number of iterations for greedy hill climbing |\n| samples | number of initial starting points and solutions, parallelized|\n| n_mix | number of templates per library to optimize simultaneously |\n| directions | number of random changes to the library to test in each iteration of greedy hill climbing|\n| num_repeats | number of sets of sequences to sample from the library for scoring, to get good statistics|\n| num_workers | number of processors to use|\n| top_fraction | fraction of sequences in a certain percentile of predictor scores, for logging purposes only|\n\nAfter each iteration of optimization, average stats for each library will be printed.\nWeighted (weighted coverage)\nUnweighted (unweighted coverage)\nRaw Weighted Simple (weighted step coverage with p=1)\nTop Counts: Number of unique variants sampled by the library that lie in \"top_fraction\"\nUnique: Number of unique variants sampled by the library that are not stop codons\n\nOutputs will be saved in `DeCOIL/saved` under a folder with the name as the configuration file. The optimization trajectory can be accessed in `results.npy` and example analyses are provided in `analysis.ipynb`.\n"
      },
      "source": "https://raw.githubusercontent.com/jsunn-y/DeCOIL/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Examples",
        "parent_header": [
          "DeCOIL"
        ],
        "type": "Text_excerpt",
        "value": "Relevant examples can be found under `/configs/examples` and `/saved/examples`\n"
      },
      "source": "https://raw.githubusercontent.com/jsunn-y/DeCOIL/master/README.md",
      "technique": "header_analysis"
    }
  ]
}