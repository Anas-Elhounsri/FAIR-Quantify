{
  "application_domain": [
    {
      "confidence": 0.9106288991628609,
      "result": {
        "type": "String",
        "value": "Semantic web"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Bayer-Group/cellenium"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Contribution Guidelines\n\n## Pull requests are always welcome\n\nWe're trying very hard to keep our systems simple, lean and focused. We don't want them to be everything for everybody. This means that we might decide\nagainst incorporating a new request.\n\n\n## Create issues...\n\nAny significant change should be documented as a GitHub issue before anybody starts working on it.\n\n\n### ...but check for existing issues first!\n\nPlease take a moment to check that an issue doesn't already exist documenting your request. If it does, it never hurts to add a quick \"+1\" or \"I need this too\". This will help prioritize the most common requests.\n\n\n## Conventions\n\nFork the repository and make changes on your fork on a branch:\n\n1. Create the right type of issue (defect, enhancement, test, etc)\n2. Name the branch N-something where N is the number of the issue.\n\nNote that the maintainers work on branches in this repository.\n\nWork hard to ensure your pull request is valid. This includes code quality and clear naming. Please read the Code Of Conduct at the bottom of this file.\n\nPull request descriptions should be as clear as possible and include a reference to all the issues that they address. In GitHub, you can reference an\nissue by adding a line to your commit description that follows the format:\n\n  `Fixes #N`\n\nwhere N is the issue number.\n\n\n## Merge approval\n\nRepository maintainers will review the pull request and make sure it provides the appropriate level of code quality & correctness. \n\n\n\n## How are decisions made?\n\nShort answer: with pull requests to this repository.\n\nAll decisions, big and small, follow the same 3 steps:\n\n1. Open a pull request. Anyone can do this.\n\n2. Discuss the pull request. Anyone can do this.\n\n3. Accept or refuse a pull request. The relevant maintainers do this (see below \"Who decides what?\")\n\n   1. Accepting pull requests\n\n      1. If the pull request appears to be ready to merge, approve it.\n\n      2. If the pull request has some small problems that need to be changed, make a comment addressing the issues.\n\n      3. If the changes needed to a PR are small, you can add a \"LGTM once the following comments are addressed...\" this will reduce needless back and forth.\n\n      4. If the PR only needs a few changes before being merged, any MAINTAINER can make a replacement PR that incorporates the existing commits and fixes the problems before a fast track merge.\n\n   2. Closing pull requests\n\n      1. If a PR appears to be abandoned, after having attempted to contact the original contributor, then a replacement PR may be made. Once the replacement PR is made, any contributor may close the original one.\n\n      2. If you are not sure if the pull request implements a good feature or you do not understand the purpose of the PR, ask the contributor to provide more documentation. If the contributor is not able to adequately explain the purpose of the PR, the PR may be closed by any MAINTAINER.\n\n      3. If a MAINTAINER feels that the pull request is sufficiently architecturally flawed, or if the pull request needs significantly more design discussion before being considered, the MAINTAINER should close the pull request with a short explanation of what discussion still needs to be had. It is important not to leave such pull requests open, as this will waste both the MAINTAINER's time and the contributor's time. It is not good to string a contributor on for weeks or months, having them make many changes to a PR that will eventually be rejected.\n\n\n## Who decides what?\n\nAll decisions are pull requests, and the relevant maintainers make decisions by accepting or refusing pull requests. Review and acceptance by anyone is\ndenoted by adding a comment in the pull request: `LGTM`. However, only currently listed `MAINTAINERS` are counted towards the required majority.\n\nThe maintainers will be listed in the MAINTAINER file, all these people will be in the employment of Bayer.\n\n\n## I'm a maintainer, should I make pull requests too?\n\nYes. Nobody should ever push to master directly. All changes should be made through a pull request.\n\n## Code Of Conduct\n\nAs contributors and maintainers of this project, we pledge to respect all people who contribute through reporting issues, posting feature requests, updating documentation, submitting pull requests or patches, and other activities.\n\nWe are committed to making participation in this project a harassment-free experience for everyone, regardless of level of experience, gender, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, or religion.\n\nExamples of unacceptable behavior by participants include the use of sexual language or imagery, derogatory comments or personal attacks, trolling, public or private harassment, insults, or other unprofessional conduct.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct. Project maintainers who do not follow the Code of Conduct may be removed from the project team.\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by opening an issue or contacting one or more of the project maintainers.\n\nThis Code of Conduct is adapted from the Contributor Covenant, version 1.0.0, available at https://www.contributor-covenant.org/version/1/0/0/code-of-conduct.html\n"
      },
      "source": "https://raw.githubusercontent.com/Bayer-Group/cellenium/main/CONTRIBUTING.md",
      "technique": "file_exploration"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-01-30T21:07:11Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-07-14T04:51:14Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Cellenium is a FAIR and scalable interactive visual analytics app for scRNA-Seq data (single-cell RNA sequencing)."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9994479918653162,
      "result": {
        "original_header": "cellenium",
        "type": "Text_excerpt",
        "value": "Cellenium is a FAIR and scalable interactive visual analytics app for scRNA-Seq data. It allows to:\n* organize and semantically find scRNA studies with ontologized metadata for tissues and diseases\n* explore cell types and other cell annotations in UMAP space\n* find differentially expressed genes based on clusters of annotated cells\n* view the expression of a single gene (or a few selected genes) in the UMAP plot or as grouped violin plots\n* draw coexpression plots for pairs of genes, explore the cell types contained in the plots\n* add new cell annotations based on plot selections, see differentially expressed genes for a selected group of cells\n* find genes which expression is highly correlated to a query gene\n* find marker genes in all imported studies and qualitatively compare gene expression across studies  \n"
      },
      "source": "https://raw.githubusercontent.com/Bayer-Group/cellenium/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.94978456090429,
      "result": {
        "original_header": "System Overview",
        "type": "Text_excerpt",
        "value": "Cellenium imports scRNA expression data and cell annotations in H5AD format. We provide jupyter notebooks for\ndownloading some publicly available scRNA studies, normalize the data if necessary, and calculate differentially\nexpressed genes, a UMAP projection and other study data that is needed for Cellenium's features to work. \nCellenium is a web application that accesses a PostgreSQL database via GraphQL API. Some API features, like\nserver-side rendered plots, depend on Python stored procedures. The [graphql_api_usage](documentation/graphql_api_usage/) folder\ncontains a couple of example queries to illustrate the API capabilities. \nThe setup steps below automate the download and creation of appropriate H5AD files, docker image build,\ndatabase schema setup and data ingestion.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Bayer-Group/cellenium/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Bayer-Group/cellenium/tree/main/client/src/docs"
      },
      "technique": "file_exploration"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Bayer-Group/cellenium/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Bayer-Group/cellenium/main/data_import/postgres_python_plotting_devenv.ipynb"
      },
      "source": "https://raw.githubusercontent.com/Bayer-Group/cellenium/main/data_import/postgres_python_plotting_devenv.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Bayer-Group/cellenium/main/data_import/postgres_python_gene_correlation_devenv.ipynb"
      },
      "source": "https://raw.githubusercontent.com/Bayer-Group/cellenium/main/data_import/postgres_python_gene_correlation_devenv.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Bayer-Group/cellenium/main/data_import/postgres_python_diffexp_devenv.ipynb"
      },
      "source": "https://raw.githubusercontent.com/Bayer-Group/cellenium/main/data_import/postgres_python_diffexp_devenv.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Bayer-Group/cellenium/main/data_import/analyse_cellbygene_datasets.ipynb"
      },
      "source": "https://raw.githubusercontent.com/Bayer-Group/cellenium/main/data_import/analyse_cellbygene_datasets.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Bayer-Group/cellenium/main/data_import/public_data/brain3k_processed.h5mu.ipynb"
      },
      "source": "https://raw.githubusercontent.com/Bayer-Group/cellenium/main/data_import/public_data/brain3k_processed.h5mu.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Bayer-Group/cellenium/main/data_import/public_data/blood_covid.h5ad.ipynb"
      },
      "source": "https://raw.githubusercontent.com/Bayer-Group/cellenium/main/data_import/public_data/blood_covid.h5ad.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Bayer-Group/cellenium/main/data_import/public_data/brain3k_processed_subset.h5mu.ipynb"
      },
      "source": "https://raw.githubusercontent.com/Bayer-Group/cellenium/main/data_import/public_data/brain3k_processed_subset.h5mu.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Bayer-Group/cellenium/main/data_import/public_data/tabula_sapiens_kidney.h5ad.ipynb"
      },
      "source": "https://raw.githubusercontent.com/Bayer-Group/cellenium/main/data_import/public_data/tabula_sapiens_kidney.h5ad.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Bayer-Group/cellenium/main/data_import/public_data/pancreas_atlas.h5ad.ipynb"
      },
      "source": "https://raw.githubusercontent.com/Bayer-Group/cellenium/main/data_import/public_data/pancreas_atlas.h5ad.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Bayer-Group/cellenium/main/data_import/public_data/tabula_muris_senis_heart.h5ad.ipynb"
      },
      "source": "https://raw.githubusercontent.com/Bayer-Group/cellenium/main/data_import/public_data/tabula_muris_senis_heart.h5ad.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Bayer-Group/cellenium/main/data_import/public_data/heart_failure_reichart2022_gene_subset.h5ad.ipynb"
      },
      "source": "https://raw.githubusercontent.com/Bayer-Group/cellenium/main/data_import/public_data/heart_failure_reichart2022_gene_subset.h5ad.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Bayer-Group/cellenium/main/data_import/public_data/pbmc3k_processed.h5mu.ipynb"
      },
      "source": "https://raw.githubusercontent.com/Bayer-Group/cellenium/main/data_import/public_data/pbmc3k_processed.h5mu.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Bayer-Group/cellenium/main/data_import/public_data/heart_failure_reichart2022.h5ad.ipynb"
      },
      "source": "https://raw.githubusercontent.com/Bayer-Group/cellenium/main/data_import/public_data/heart_failure_reichart2022.h5ad.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Bayer-Group/cellenium/main/data_import/public_data/lung_asthma.h5ad.ipynb"
      },
      "source": "https://raw.githubusercontent.com/Bayer-Group/cellenium/main/data_import/public_data/lung_asthma.h5ad.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Bayer-Group/cellenium/main/data_import/public_data/pancreas_atlas_subset.h5ad.ipynb"
      },
      "source": "https://raw.githubusercontent.com/Bayer-Group/cellenium/main/data_import/public_data/pancreas_atlas_subset.h5ad.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Bayer-Group/cellenium/main/data_import/public_data/tabula_muris_senis_liver.h5ad.ipynb"
      },
      "source": "https://raw.githubusercontent.com/Bayer-Group/cellenium/main/data_import/public_data/tabula_muris_senis_liver.h5ad.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Bayer-Group/cellenium/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Bayer-Group/cellenium"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "cellenium"
      },
      "source": "https://raw.githubusercontent.com/Bayer-Group/cellenium/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "docker_compose",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Bayer-Group/cellenium/main/docker-compose.yml"
      },
      "source": "https://raw.githubusercontent.com/Bayer-Group/cellenium/main/docker-compose.yml",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Bayer-Group/cellenium/main/postgraphile/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/Bayer-Group/cellenium/main/postgraphile/Dockerfile",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Bayer-Group/cellenium/main/terraform/modules/batch/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/Bayer-Group/cellenium/main/terraform/modules/batch/Dockerfile",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Bayer-Group/cellenium/main/postgres/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/Bayer-Group/cellenium/main/postgres/Dockerfile",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Bayer-Group/cellenium/main/data_import/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/Bayer-Group/cellenium/main/data_import/Dockerfile",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Bayer-Group/cellenium/main/client/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/Bayer-Group/cellenium/main/client/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Bayer-Group/cellenium/main/postgres/docker-entrypoint.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Bayer-Group/cellenium/main/postgres/s3_backup.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Bayer-Group/cellenium/main/documentation/screenshots/projection_plot.png"
      },
      "source": "https://raw.githubusercontent.com/Bayer-Group/cellenium/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Setting up",
        "parent_header": [
          "cellenium"
        ],
        "type": "Text_excerpt",
        "value": "Preparation of CellO data files (workaround for https://github.com/deweylab/CellO/issues/29 ):\n\n```bash\nmkdir scratch/cello_resources\ncurl https://deweylab.biostat.wisc.edu/cell_type_classification/resources_v2.0.0.tar.gz >scratch/cello_resources/resources_v2.0.0.tar.gz\ntar -C scratch/cello_resources -zxf scratch/cello_resources/resources_v2.0.0.tar.gz\n```\n\nCellenium setup, including execution of study data processing notebooks (initially, this will take a couple of hours\nto run).\n\n```bash\n# builds docker images and runs the whole stack\n# until you run the \"make reset_database\" step below, error messages about the missing \"postgraphile\" user pile up... you can ignore them for now.\ndocker compose up\nconda env create -f data_import/environment.yml\nconda activate cellenium_import\n# 'test_studydata' should contain data to cover all application features, but is small enough to be imported in a few minutes\nmake reset_database test_studydata_import\n\n# 'normal_studydata': real life studies (i.e. with full amount of cells and genes)\nmake normal_studydata_import\n\n# we have one for atac\nmake atac_studydata_import\n\n# and one for cite\nmake cite_studydata_import\n```\n\nThe GraphQL API explorer is available at http://localhost:5000/postgraphile/graphiql . Postgraphile will listen\nto changes in the database schema and the updated API is visible immediately.\n\nThe cellenium webapp 'production build' static site is hosted in the 'client' container, see http://localhost:6002/ .\nFor development, you run `(cd client && yarn && yarn start)` to install the webapp's dependencies and have\na hot-reloaded webapp.\n\nBefore you process and import the huge example study (there are two additional make targets for that), edit the beginning\nof `heart_failure_reichart2022*.ipynb` and define the download URL as described in the notebooks.\n"
      },
      "source": "https://raw.githubusercontent.com/Bayer-Group/cellenium/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "manually executing the study data preparation jupyter notebooks",
        "parent_header": [
          "cellenium"
        ],
        "type": "Text_excerpt",
        "value": "The notebooks are run in headless mode by `make`. To create new notebooks and explore datasets:\n\n```bash\n(cd data_import && PYTHONPATH=$(pwd) jupyter-lab)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/Bayer-Group/cellenium/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9996857592782981,
      "result": {
        "original_header": "System Overview",
        "type": "Text_excerpt",
        "value": "The setup steps below automate the download and creation of appropriate H5AD files, docker image build,\ndatabase schema setup and data ingestion.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Bayer-Group/cellenium/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Bayer-Group/cellenium/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bioinformatics, dataviz, scrna-seq, transcriptomics"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2022 Bayer AG\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/Bayer-Group/cellenium/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Bayer-Group/cellenium/main/documentation/cellenium_architecture.png"
      },
      "source": "https://raw.githubusercontent.com/Bayer-Group/cellenium/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "cellenium"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "Bayer-Group"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 4840643,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "TypeScript",
        "size": 755741,
        "type": "Programming_language",
        "value": "TypeScript"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "PLpgSQL",
        "size": 126245,
        "type": "Programming_language",
        "value": "PLpgSQL"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 114316,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "HCL",
        "size": 40921,
        "type": "Programming_language",
        "value": "HCL"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 12812,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "JavaScript",
        "size": 5635,
        "type": "Programming_language",
        "value": "JavaScript"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 3617,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 2749,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 1646,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CSS",
        "size": 745,
        "type": "Programming_language",
        "value": "CSS"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Bayer-Group/cellenium/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "manually executing the study data preparation jupyter notebooks",
        "parent_header": [
          "cellenium"
        ],
        "type": "Text_excerpt",
        "value": "The notebooks are run in headless mode by `make`. To create new notebooks and explore datasets:\n\n```bash\n(cd data_import && PYTHONPATH=$(pwd) jupyter-lab)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/Bayer-Group/cellenium/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "usage",
    "faq",
    "identifier"
  ],
  "somef_provenance": {
    "date": "2024-10-04 00:28:51",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 26
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "manually executing the study data preparation jupyter notebooks",
        "parent_header": [
          "cellenium"
        ],
        "type": "Text_excerpt",
        "value": "The notebooks are run in headless mode by `make`. To create new notebooks and explore datasets:\n\n```bash\n(cd data_import && PYTHONPATH=$(pwd) jupyter-lab)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/Bayer-Group/cellenium/main/README.md",
      "technique": "header_analysis"
    }
  ]
}