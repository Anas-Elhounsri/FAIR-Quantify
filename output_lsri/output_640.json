{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "IntelliPy",
          "Python GUI for automatic analyses of IntelliCage data"
        ],
        "type": "Text_excerpt",
        "value": "Please cite: \n\nNicolas Ruffini, Marianne B M\u00fcller, Ulrich Schmitt, Susanne Gerber, IntelliPy: a GUI for analyzing IntelliCage data, Bioinformatics, Volume 37, Issue 21, 1 November 2021, Pages 3972\u20133973, doi: 10.1093/bioinformatics/btab682. Epub ahead of print. PMID: 34601559; PMCID: PMC8570781.\n\nhttps://pubmed.ncbi.nlm.nih.gov/34601559/\n"
      },
      "source": "https://raw.githubusercontent.com/NiRuff/IntelliPy/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/NiRuff/IntelliPy"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-11-16T11:26:51Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-07-16T20:58:03Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Graphical User Interface for automatic analyses of IntelliCage data in .xlsx file"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9991795464793058,
      "result": {
        "original_header": "Motivation:",
        "type": "Text_excerpt",
        "value": "The IntelliCage system helps researchers to conduct behavioral experiments and learning experiments with mice while ensuring minimal human intervention. The animals can be observed for long time periods - up to several weeks. This long-term data acquisition can provide new insights in mouse behavior, that might not be detectable in short-term observations.\nHowever, analyzing those big amounts of data is challenging for many researchers. \nIntelliPy aims to simplify and automize many aspects of the analysis, such as dividing data by learning module, acquiring data per group, creating learning curves or pivoting parameters in different timeframes. All plots are automatically created and the final tables for statistical tests are stored separately for the user.\n \n"
      },
      "source": "https://raw.githubusercontent.com/NiRuff/IntelliPy/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8900689698444956,
      "result": {
        "original_header": "Settings",
        "type": "Text_excerpt",
        "value": "IntelliPy utilizes the **Nosepoke.txt**, **Visit.txt** and **Animal.txt** file (in this given order) of an IntelliCage experiment. These files can be extracted using the TSE Analyzer. Additionally, if new groups should be assigned that are not included in the Animal.txt file, a group assignment file can be created, in order to conduct new group-wise analyses or to specify the alternative side conditions such as \"Sucrose\" or any other user-defined label for e.g. sucrose preference experiments: \n"
      },
      "source": "https://raw.githubusercontent.com/NiRuff/IntelliPy/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8626962843558815,
      "result": {
        "original_header": "Pivot tables:",
        "type": "Text_excerpt",
        "value": "For the parameters, measured by the IntelliCage Systems, such as **Lick Duration, Nosepoke Number** or **NosepokeDuration**, pivot tables are created for each module by IntelliPy. By default, these timeframes are created per day, but the user can add more timeframes using the IntelliPy GUI, like e.g. 12-hour or 6-hour timeframes. Depending on the chosen settings, group means or medians are calculated with their standard deviation or upper and lower quartiles respectively. For further statistical analyses, the pivoting results are stored in the resulting xlsx files as well as all created plots.\n \n"
      },
      "source": "https://raw.githubusercontent.com/NiRuff/IntelliPy/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9920125433849571,
      "result": {
        "original_header": "Learning Rates:",
        "type": "Text_excerpt",
        "value": "As the experiments conducted with the IntelliCage systems can be conducted as learning experiments with different setups per phase, the learning rate of each individual as well as for the each group can be of high interest. Rather than only the final rate of correct attempts, the rate per hour and per attempt (Visit for Place Error based learning rate, the Nosepokes for the Side Error based Learning Rate) is computed and plotted by IntelliPy. This enables the user, to utilize longitudinal learning information for each individual and group.\nFor those learning rates, it is even possible to include all nosepokes or to remove those that were not followed by a lick. It can be argued about, whether a nosepoke without a lick should or shouldn't be accounted as a correct attempt, so this decision is up to the user. Furthermore, there are both, the possibility to exclude all nosepokes not followed by a lick or to treat them as incorrect attempts.\nAs there are two types of errors tracked in an IntelliCage experiment, namely Side Errors (wrong door nosepoked) and Place Errors (wrong corner visited), two different learning rates will be computed - one refering to the Place Errors and another one refering to the Side Errors.\n \n"
      },
      "source": "https://raw.githubusercontent.com/NiRuff/IntelliPy/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9380345514288002,
      "result": {
        "original_header": "Alternative Label Analyses (e.g. Sucrose preference):",
        "type": "Text_excerpt",
        "value": "For learning experiments, including the choice between two sides after choosing the correct place, such as the choice between one side with Sucrose and one with Water, the proportion of Lick Duration spent for one side rather than the other side over time is computed by IntelliPy. Additionally, it is possible to define the alternative label (e.g. \"Sucrose\") as correct or as incorrect for the learning rate computation. This will influence the computation of the learning rate of the sucrose preference experiments. Consequently, for learning modules utilizing an alternative label, the nosepoke learning rate files are influenced by the used option and one additional file is created for showing the lick duration ratio between the \"alternative label\" side and the \"Correct\" side.\n \n"
      },
      "source": "https://raw.githubusercontent.com/NiRuff/IntelliPy/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9676938956628259,
      "result": {
        "original_header": "Output files",
        "type": "Text_excerpt",
        "value": "In the current version of IntelliPy, it is also possible to extract the results as PNG and CSV files. However, we recommend using the XLSX option, as the XLSX output with different sheets, summarizing data and plots related to the same analysis, provides better structuring of the results. \nIf the PNG + CSV option is used, the given tables and plots show the same data as described below. \n\n>If alternative label is used, also:\n> *  _learning_Data_Correct&<alternative label>Correct.xlsx_\n> * _alternative_Label_Data.xlsx_\n \nThese .xlsx output files contain the tabular data and also the plots, showing the data per individual and per group in two different plots per sheet.\n \n"
      },
      "source": "https://raw.githubusercontent.com/NiRuff/IntelliPy/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9573467927840772,
      "result": {
        "original_header": "*nosepoke_learning_Data.xlsx*",
        "type": "Text_excerpt",
        "value": "This file contains the table for the overall Side Error-based learning rate per individual and per group for nosepoke 1 - n in the first sheet. The second sheet contains the same information, but not computed for every single nosepoke but after each hour, so that it gives the possibility to compare the learning performance between individuals and groups based on time and not based on trials. Additionally, the given data is also visualized in line plots showing all individuals and all defined groups.\nIf the user decided to treat nosepokes not followed by a lick differently (excluded or as incorrect), the data and plots are also created per nosepoke and per hour in different sheets. Additionally, the user can also decide to create sheets in which only nosepokes not followed by a lick are shown, e.g. if this behavior is assumed as playing behavior. \nBoth, the nosepoke.txt and the visit.txt file can be used for computing the learning rate but the latter contains information on the side error and the place error, whereas the former only contains information that are connected to nosepokes, so the place errors are not included in the data (as no nosepokes are possible at the wrong \"place\"). Additionally, the visit.txt file contains information per visit, not per nosepoke, so that many nosepokes can be included in one visit and thus temporal resolution is less detailed than in the _Nosepoke.txt_ file. Furthermore, the _Visit.txt_ data is not showing if a specific nosepoke was followed by a lick so that this part of the analysis is only included in the _nosepoke_learning_Data.xlsx_.\n \n"
      },
      "source": "https://raw.githubusercontent.com/NiRuff/IntelliPy/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9749936770165525,
      "result": {
        "original_header": "*pivot_Data.xlsx*",
        "type": "Text_excerpt",
        "value": "The aggregated data (sum) for each animal and the mean or median per group (depending on the settings) of the **LickDuration**, **LickNumber**, **NosepokeDuration**, **NosepokeNumber**, **VisitCount** and **LickContactTime** is given here as tables and graphs on different sheets. The graphs for the group\u2019s mean / median value also contain error bars either showing the standard deviation within the group (Mean option) or the 25th and 75th percentile (Median option). Per default, all data is aggregated by day. If the user specified some other hour intervals in the options, e.g. 12 hours, 6 hours, etc., these intervals will also be given here for each parameter in separate sheets.\n \n"
      },
      "source": "https://raw.githubusercontent.com/NiRuff/IntelliPy/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9637448135378346,
      "result": {
        "original_header": "*visit_learning_Data.xlsx*",
        "type": "Text_excerpt",
        "value": "This file contains the table for the overall Side Error-based learning rate per individual and per group for visit 1 - n in the first sheet. The second sheet contains the same information, but not computed for every single visit but after each hour, so that it gives the possibility to compare the learning performance between individuals and groups based on time and not based on trials.\nSheet number three and four contain the analogous information on the Place Error-based learning rate, meaning information on the ratio of the individuals and groups choosing the correct corner of the cage.\nAdditionally, the given data is also visulaized in line plots showing all individuals and all defined groups.\n \n"
      },
      "source": "https://raw.githubusercontent.com/NiRuff/IntelliPy/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9909418376064986,
      "result": {
        "original_header": "*data.csv*",
        "type": "Text_excerpt",
        "value": "After all learning modules and their starting times are extracted automatically by IntelliPy, the original files for _Visit.txt_ and _Nosepoke.txt_ are sliced based on these modules. For each extracted module, the sliced version of the _Visit.txt_ file is given here as a **csv** file in order to able to comprehend the exact data that was used for the analyses. IntelliPy also gives information in the _log.txt_ file on whether the sum of all data in the sliced modules sum up to the original data.\n \n"
      },
      "source": "https://raw.githubusercontent.com/NiRuff/IntelliPy/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9486966078860873,
      "result": {
        "original_header": "*learning_Data*\\<alternative label>TreatedAsCorrect.xlsx_ or *learning_Data*\\<alternative label>TreatedAsIncorrect.xlsx_",
        "type": "Text_excerpt",
        "value": "Based on the chosen option, the alternative label is treated as correct or incorrect for the learning rate computation. Given this alteration, the file is computed just as the _nosepoke_learning_Data.xlsx_.\n \n"
      },
      "source": "https://raw.githubusercontent.com/NiRuff/IntelliPy/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9100997539411818,
      "result": {
        "original_header": "*alternative_Label_Data.xlsx*",
        "type": "Text_excerpt",
        "value": "This file shows the **LickDuration** ratio up to nosepoke/hour _x_ of the alternative label per total **LickDuration**. For e.g. sucrose preference experiments, the **LickDuration** ratio of sucrose per total **LickDuration** per animal/group up to a given timepoint/nosepoke can be compared here.\n \n"
      },
      "source": "https://raw.githubusercontent.com/NiRuff/IntelliPy/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.966566776334062,
      "result": {
        "original_header": "The *log.txt* file",
        "type": "Text_excerpt",
        "value": "The _log.txt_ file contains all parameters that were chosen by the user in order to ensure traceability of the results. Additionally, it is given, if the slicing of the original data into the different modules was successful by checking if the row numbers of all slices combined sum up to the row number of the original files. The path to the used input is given as well to make every part of the experiment traceable and thus reproducible.\n \n"
      },
      "source": "https://raw.githubusercontent.com/NiRuff/IntelliPy/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/NiRuff/IntelliPy/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/NiRuff/IntelliPy/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "NiRuff/IntelliPy"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "IntelliPy"
      },
      "source": "https://raw.githubusercontent.com/NiRuff/IntelliPy/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://user-images.githubusercontent.com/50486014/119659466-796ea700-be2e-11eb-8a40-4910ea708c91.png"
      },
      "source": "https://raw.githubusercontent.com/NiRuff/IntelliPy/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://user-images.githubusercontent.com/50486014/119659466-796ea700-be2e-11eb-8a40-4910ea708c91.png"
      },
      "source": "https://raw.githubusercontent.com/NiRuff/IntelliPy/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://user-images.githubusercontent.com/50486014/119659474-7b386a80-be2e-11eb-9ce1-7b90b5570cb2.png"
      },
      "source": "https://raw.githubusercontent.com/NiRuff/IntelliPy/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "...using pip",
        "parent_header": [
          "IntelliPy",
          "Python GUI for automatic analyses of IntelliCage data",
          "Installation &amp; Launch"
        ],
        "type": "Text_excerpt",
        "value": "IntelliPy can be installed in principal for every operating system running Python. The easiest way, is installing it via the Python Packaging Index (PyPI) using the command:\n\n```pip install intellipy```\n\nIt can then be used with\n\n```python3 -m intellipy``` or just ```python -m intellipy```\n"
      },
      "source": "https://raw.githubusercontent.com/NiRuff/IntelliPy/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "...troubleshooting using Ubuntu",
        "parent_header": [
          "IntelliPy",
          "Python GUI for automatic analyses of IntelliCage data",
          "Installation &amp; Launch"
        ],
        "type": "Text_excerpt",
        "value": "If you have an error due to the absence of the tkinter module in Ubuntu or Linux Mint, you can solve this issue with installing *python3-tk* by running\n\n```sudo apt-get update```\n\n```sudo apt-get install python3-tk```\n\nin your terminal.\n"
      },
      "source": "https://raw.githubusercontent.com/NiRuff/IntelliPy/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "...using the intelli.exe",
        "parent_header": [
          "IntelliPy",
          "Python GUI for automatic analyses of IntelliCage data",
          "Installation &amp; Launch"
        ],
        "type": "Text_excerpt",
        "value": "If you have problems installing IntelliPy using pip, you can also download a windows exe file [here](https://seafile.rlp.net/f/1a9e63dc038b4a1e87be/?dl=1). As there is no need to have Python or any packages (e.g. pandas) installed, this file is quite big (75MB unzipped), as it brings Python and all recommended packages with it.\nChoosing the latter way for using IntelliPy, you just have to extract the *ZIP* file, open the directory and launch the *intelli.exe*.\n"
      },
      "source": "https://raw.githubusercontent.com/NiRuff/IntelliPy/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8133003260576437,
      "result": {
        "original_header": "Creating a group assignment file:",
        "type": "Text_excerpt",
        "value": "*An example file is added as* **\"Group_assignment.txt\"**\n \n"
      },
      "source": "https://raw.githubusercontent.com/NiRuff/IntelliPy/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/NiRuff/IntelliPy/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) [2020] [Nicolas Ruffini]\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/NiRuff/IntelliPy/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "IntelliPy"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "NiRuff"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/NiRuff/IntelliPy/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 01:48:00",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "non-software"
      },
      "technique": "software_type_heuristics"
    }
  ]
}