{
  "application_domain": [
    {
      "confidence": 16.07,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Appleabc123/GCSENet"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-11-20T11:24:23Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-11-01T12:27:57Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9746289981770405,
      "result": {
        "original_header": "GCSENet",
        "type": "Text_excerpt",
        "value": "    GCSENet is a novel learning-based framework for miRNA-disease association identification via graph convolutional neural networks\u3001convolutional neural networks\u3001Squeeze-and-Excitation Networks\uff08SENet\uff09. \nit contains: \"code\" and \"data\" \n"
      },
      "source": "https://raw.githubusercontent.com/Appleabc123/GCSENet/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8846606040758636,
      "result": {
        "original_header": "How to reproduce our results:",
        "type": "Text_excerpt",
        "value": "       Set the data_path in main.py, containing original data (d-d.csv, g-g.csv, d-g.csv,disease_name.csv, gene_name.csv).\n       \n       Run main.py to obtain the disease-gene vector. The result includes \u2018disease-gene.csv\u2019 file, which is saved in \u2018../data/process_feature\u2019 folder.\n       \n       Set the data_path in main.py, containing original data (m-m.csv, g-g.csv, m-g.csv, miRNA_name.csv, gene_name.csv).\n       \n       Run main.py to obtain the miRNA-gene vector. The result includes \u2018miRNA-gene.csv\u2019 file, which is saved in \u2018../data/process_feature\u2019 folder. \n       Run process_feature.py to obtain the disease-miRNA vector. The result includes two files with \u2018disease-miRNA.csv\u2019 and \u2018label.csv\u2019, which are saved in the \u2018../data/CNN_SENet\u2019 folder. \n"
      },
      "source": "https://raw.githubusercontent.com/Appleabc123/GCSENet/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Appleabc123/GCSENet/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Appleabc123/GCSENet/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Appleabc123/GCSENet"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "GCSENet"
      },
      "source": "https://raw.githubusercontent.com/Appleabc123/GCSENet/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9999456814756204,
      "result": {
        "original_header": "How to reproduce our results:",
        "type": "Text_excerpt",
        "value": "       Download the code package from https://github.com/Appleabc123/GCSENet. \n"
      },
      "source": "https://raw.githubusercontent.com/Appleabc123/GCSENet/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.9035240845836727,
      "result": {
        "original_header": "How to reproduce our results:",
        "type": "Text_excerpt",
        "value": "       Set the data_path in main.py, containing original data (d-d.csv, g-g.csv, d-g.csv,disease_name.csv, gene_name.csv).\n       \n       Run main.py to obtain the disease-gene vector. The result includes \u2018disease-gene.csv\u2019 file, which is saved in \u2018../data/process_feature\u2019 folder.\n       \n       Set the data_path in main.py, containing original data (m-m.csv, g-g.csv, m-g.csv, miRNA_name.csv, gene_name.csv).\n       \n       Run main.py to obtain the miRNA-gene vector. The result includes \u2018miRNA-gene.csv\u2019 file, which is saved in \u2018../data/process_feature\u2019 folder. \n       Run process_feature.py to obtain the disease-miRNA vector. The result includes two files with \u2018disease-miRNA.csv\u2019 and \u2018label.csv\u2019, which are saved in the \u2018../data/CNN_SENet\u2019 folder. \n       Run CS_train.py to train the model. \n       Run CS_test.py to test the model. \n"
      },
      "source": "https://raw.githubusercontent.com/Appleabc123/GCSENet/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Appleabc123/GCSENet/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "GCSENet"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "Appleabc123"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 37997,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Appleabc123/GCSENet/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependencies",
        "type": "Text_excerpt",
        "value": "    GCSENet was implemented with python 3.6.4. To run GCSENet, you need these packages:\n    Matplotlib (3.1.1),     (https://pypi.org/project/matplotlib/).\n    Networkx (2.5),       (https://pypi.org/project/networkx/).\n    Tensorflow-gpu (1.4.0), (https://pypi.tuna.tsinghua.edu.cn/simple/tensorflow-gpu/).\n    Numpy (1.19.1),       (https://pypi.org/project/numpy/).\n    Pandas (0.25.3),       (https://pypi.org/project/pandas/).\n    Sklearn (0.20.3),       (https://pypi.org/project/sklearn/).\n    Scipy (1.5.2),          (https://pypi.org/project/scipy/).\n    In addition,CUDA 8.0 and cuDNN 6.0 have been used.\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/Appleabc123/GCSENet/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 05:41:44",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "How to use the framework on your interested datasets (disease, gene, miRNA) as training or test datasets?",
        "type": "Text_excerpt",
        "value": "Step 1. Generate the feature vector of miRNA-gene, disease-gene\n\n    (1). Put the interested data (d-d.csv, g-d.csv, g-g.csv, disease_name.csv, gene_name.csv) in the \u2018../data/Generate feature/disease-gene\u2019 folder, the interested data (g-g.csv, g-m.csv, m-m.csv, gene_name.csv, miRNA_name.csv) in the \u2018../data/Generate feature/miRNA-gene\u2019 folder, respectively.\n    (2). Set some parameters in main.py:\n         data_path = \u2018../data/Generate feature/disease-gene\u2019 #setting the data directory as the directory where you save the raw data (disease-gene, miRNA-gene).\n         save_path = \u2018../data/process_feature\u2019  #the directory is the place to save the feature vectors of disease-gene and miRNA-gene which will used in the following step 2.\n    (3). Run \u2018main.py\u2019 to get the feature vector of disease-gene and miRNA-gene which will be saved in the given path.\n\nStep 2. Process the feature vector to get the feature of miRNA-disease and label\n\n    (1). Put the positive sample (pos.txt) and negative sample (neg.txt) in the \u2018../data/process_feature\u2019.\n    (2). Set some parameters in process_feature.py:\n         input_postive = \u2018../data/process_feature/pos.txt\u2019 #the directory is used for saving the positive sample file from the test dataset. In our GCSENet, the positive samples are from benchmark2019.\n         input_negative = \u2018../data/process_feature/neg.txt\u2019 #the directory is used for saving the negative sample file. The negative samples in the test dataset are not in the dataset generating positive samples.\n         Output = \u2018../data/CNN_SENet\u2019 #the directory is the path where you save the output files of miRNA-disease feature and label.\n    (3). Run \u2018process_feature.py\u2019 to get the miRNA-disease feature (disease-miRNA.csv) and label (label.csv), which will be used in the following step 3.\n\nStep 3. Train the model\n\n    Run CS_train.py to train the model.\n\nStep 4. Test the model\n\n    Run CS_test.py to get the AUROC, AUPR, Precision, Recall, F1-score.\n\n"
      },
      "source": "https://raw.githubusercontent.com/Appleabc123/GCSENet/main/README.md",
      "technique": "header_analysis"
    }
  ]
}