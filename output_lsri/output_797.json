{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "author": "Liu, Daniel and Steinegger, Martin",
        "format": "bibtex",
        "title": "{Block Aligner}: an adaptive {SIMD}-accelerated aligner for sequences and position-specific scoring matrices",
        "type": "Text_excerpt",
        "value": "@article{liu2023block,\n    publisher = {Oxford University Press},\n    year = {2023},\n    pages = {btad487},\n    number = {8},\n    volume = {39},\n    journal = {Bioinformatics},\n    author = {Liu, Daniel and Steinegger, Martin},\n    title = {{Block Aligner}: an adaptive {SIMD}-accelerated aligner for sequences and position-specific scoring matrices},\n}"
      },
      "source": "https://raw.githubusercontent.com/Daniel-Liu-c0deb0t/block-aligner/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Daniel-Liu-c0deb0t/block-aligner"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-11-07T05:08:02Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-27T20:26:39Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SIMD-accelerated library for computing global and X-drop affine gap penalty sequence-to-sequence or sequence-to-profile alignments using an adaptive block-based algorithm."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.8752430559369562,
      "result": {
        "original_header": "block aligner",
        "type": "Text_excerpt",
        "value": "SIMD-accelerated library for computing global and X-drop affine gap penalty sequence-to-sequence or\nsequence-to-profile alignments using an adaptive block-based algorithm. \nSee the Bioinformatics paper [here](https://doi.org/10.1093/bioinformatics/btad487) for more info on the\nalgorithm and how it compares with other algorithms. \n"
      },
      "source": "https://raw.githubusercontent.com/Daniel-Liu-c0deb0t/block-aligner/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.96888292349532,
      "result": {
        "original_header": "Algorithm",
        "type": "Text_excerpt",
        "value": "Block aligner provides a new efficient way to compute pairwise alignments on proteins, DNA sequences,\nand byte strings with dynamic programming.\nBlock aligner also supports aligning sequences to profiles, which are position-specific\nscoring matrices and position-specific gap open costs. \nIt works by calculating scores in a small square block that is shifted down or right in a greedy\nmanner, based on the scores at the edges of the block.\nThis dynamic approach results in a much smaller calculated block area compared to previous approaches,\nthough at the expense of some accuracy.\nThe block can also go back to a previous best checkpoint and grow larger, to handle difficult regions\nwith large gaps.\nThe block size can also dynamically shrink when it detects that a large block is not needed.\nBoth block growing and shrinking are based on heuristics. \nBy trading off some accuracy for speed, block aligner is able to efficiently handle a variety of scoring matrices and\nadapt to sequences of varying sequence identities. In practice, it is still very accurate on a variety of protein and\nnucleotide sequences. \nBlock aligner behaves similarly to an (adaptive) banded aligner when the minimum and maximum block size is set to\nthe same value.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Daniel-Liu-c0deb0t/block-aligner/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9949863590766697,
      "result": {
        "original_header": "Tuning block sizes",
        "type": "Text_excerpt",
        "value": "For long, noisy Nanopore reads, a min block size of ~1% sequence length and a max block size\nof ~10% sequence length performs well (tested with reads up to ~50kbps).\nFor proteins, a min block size of 32 and a max block size of 256 performs well.\nUsing a minimum block size that is at least 32 is recommended for most applications.\nUsing a maximum block size greater than `2^14 = 16384` is not recommended.\nThe library contains a `percent_len` function that computes a percentage of the sequence length with these recommendations.\nIf the alignment scores are saturating (score too large), then use a smaller block size.\nLet me know how block aligner performs on your data!\n \n"
      },
      "source": "https://raw.githubusercontent.com/Daniel-Liu-c0deb0t/block-aligner/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9791165645328681,
      "result": {
        "original_header": "C API",
        "type": "Text_excerpt",
        "value": "There are C bindings for block aligner. More information on how to use them is located in\nthe [C readme](c/README.md).\nSee the `3di` branch for an example of using block aligner to do local alignment in C,\nalong with block aligner modifications to support aligning with amino acid 3D interaction (3Di) information.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Daniel-Liu-c0deb0t/block-aligner/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9533517130198009,
      "result": {
        "original_header": "Improving Block Aligner",
        "type": "Text_excerpt",
        "value": "Block aligner uses simple greedy heuristics that are cheap to evaluate for making these decisions.\nThere is probably a lot of room to improve here! Maybe seeds? Neural network models? \nTo try your ideas, take a look at the code after the comment `// TODO: better heuristics?` in `src/scan_block.rs`\n(depending on your changes, you may need to modify other parts of the code too). Let me know if you\nare working on new ideas! \n**Most of the instructions below are for benchmarking and testing block aligner.**\n \n"
      },
      "source": "https://raw.githubusercontent.com/Daniel-Liu-c0deb0t/block-aligner/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8418114583592846,
      "result": {
        "original_header": "Data",
        "type": "Text_excerpt",
        "value": "Some Illumina/Nanopore (DNA), Uniclust30 (protein), and SCOP (protein profile) data are used in some tests and benchmarks.\nYou will need to download them by following the instructions in the [data readme](data/README.md).\n \n"
      },
      "source": "https://raw.githubusercontent.com/Daniel-Liu-c0deb0t/block-aligner/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9251268194420704,
      "result": {
        "original_header": "Test",
        "type": "Text_excerpt",
        "value": "For debugging, there exists a `debug` feature flag that prints out a lot of\nuseful info about the internal state of the aligner while it runs.\nThere is another feature flag, `debug_size`, that prints the sizes of blocks after they grow.\nTo manually inspect alignments, run `scripts/debug_avx2.sh` with two sequences as arguments.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Daniel-Liu-c0deb0t/block-aligner/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8148056723236062,
      "result": {
        "original_header": "Benchmark",
        "type": "Text_excerpt",
        "value": "Run `scripts/bench_avx2.sh` or `scripts/bench_wasm.sh` for basic benchmarks.\nSee the `scripts` directory for runnable benchmark scripts on real data.\nMost of the actual implementations of the benchmarks are in the `examples` directory.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Daniel-Liu-c0deb0t/block-aligner/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8389774891534587,
      "result": {
        "original_header": "Data analysis and visualizations",
        "type": "Text_excerpt",
        "value": "Use the Jupyter notebook in the `vis/` directory to gather data and plot them. An easier way\nto run the whole notebook is to run the `vis/run_vis.sh` script. This reproduces the\nexperiments in the manuscript.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Daniel-Liu-c0deb0t/block-aligner/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9232586626084273,
      "result": {
        "original_header": "Compare (relatively unused)",
        "type": "Text_excerpt",
        "value": "Edits were made to [Hajime Suzuki](https://github.com/ocxtal)'s adaptive banding benchmark code\nand difference recurrence benchmark code. These edits are available [here](https://github.com/Daniel-Liu-c0deb0t/adaptivebandbench)\nand [here](https://github.com/Daniel-Liu-c0deb0t/diff-bench-paper), respectively.\nGo to those repos, then follow the instructions for installing and running the code. \n"
      },
      "source": "https://raw.githubusercontent.com/Daniel-Liu-c0deb0t/block-aligner/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Daniel-Liu-c0deb0t/block-aligner/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Daniel-Liu-c0deb0t/block-aligner/main/vis/block_aligner_accuracy_vis.ipynb"
      },
      "source": "https://raw.githubusercontent.com/Daniel-Liu-c0deb0t/block-aligner/main/vis/block_aligner_accuracy_vis.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Daniel-Liu-c0deb0t/block-aligner/main/vis/block_aligner_bench_vis.ipynb"
      },
      "source": "https://raw.githubusercontent.com/Daniel-Liu-c0deb0t/block-aligner/main/vis/block_aligner_bench_vis.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 7
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Daniel-Liu-c0deb0t/block-aligner/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Daniel-Liu-c0deb0t/block-aligner"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "block aligner"
      },
      "source": "https://raw.githubusercontent.com/Daniel-Liu-c0deb0t/block-aligner/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Daniel-Liu-c0deb0t/block-aligner/main/vis/run_vis.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Daniel-Liu-c0deb0t/block-aligner/main/scripts/bench_avx2.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Daniel-Liu-c0deb0t/block-aligner/main/scripts/nanopore_accuracy_avx2.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Daniel-Liu-c0deb0t/block-aligner/main/scripts/doc_avx2.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Daniel-Liu-c0deb0t/block-aligner/main/scripts/x_drop_accuracy_avx2.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Daniel-Liu-c0deb0t/block-aligner/main/scripts/pssm_accuracy_avx2.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Daniel-Liu-c0deb0t/block-aligner/main/scripts/uc_bench_avx2.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Daniel-Liu-c0deb0t/block-aligner/main/scripts/accuracy_wasm.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Daniel-Liu-c0deb0t/block-aligner/main/scripts/nanopore_bench_avx2.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Daniel-Liu-c0deb0t/block-aligner/main/scripts/accuracy_avx2.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Daniel-Liu-c0deb0t/block-aligner/main/scripts/pssm_bench_avx2.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Daniel-Liu-c0deb0t/block-aligner/main/scripts/nanopore_bench_global_avx2.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Daniel-Liu-c0deb0t/block-aligner/main/scripts/doc_wasm.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Daniel-Liu-c0deb0t/block-aligner/main/scripts/bench_wasm.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Daniel-Liu-c0deb0t/block-aligner/main/scripts/build_wat.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Daniel-Liu-c0deb0t/block-aligner/main/scripts/test_avx2.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Daniel-Liu-c0deb0t/block-aligner/main/scripts/compare_avx2.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Daniel-Liu-c0deb0t/block-aligner/main/scripts/build_ir_asm.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Daniel-Liu-c0deb0t/block-aligner/main/scripts/debug_avx2.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Daniel-Liu-c0deb0t/block-aligner/main/scripts/test_wasm.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Daniel-Liu-c0deb0t/block-aligner/main/scripts/uc_accuracy_avx2.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Daniel-Liu-c0deb0t/block-aligner/main/data/uc30_0.95_pairwise_aln.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Daniel-Liu-c0deb0t/block-aligner/main/data/uc30_pairwise_aln.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Daniel-Liu-c0deb0t/block-aligner/main/block aligner</h1>\n<p><a href="
      },
      "source": "https://raw.githubusercontent.com/Daniel-Liu-c0deb0t/block-aligner/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Daniel-Liu-c0deb0t/block-aligner/main/block aligner</h1>\n<p><a href="
      },
      "source": "https://raw.githubusercontent.com/Daniel-Liu-c0deb0t/block-aligner/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Install",
        "parent_header": [
          "block aligner"
        ],
        "type": "Text_excerpt",
        "value": "This library can be used on both stable and nightly Rust channels.\nThe nightly channel is needed for running tests and benchmarks. Additionally, the tests\nand benchmarks need to run on Linux or MacOS.\n\nTo use this as a crate in your Rust project, add the following to your `Cargo.toml`:\n```\n[dependencies]\nblock-aligner = { version = \"0.5\", features = [\"simd_avx2\"] }\n```\nUse the `simd_sse2`, `simd_neon`, or `simd_wasm` feature flag for x86 SSE2, ARM Neon, or WASM SIMD support, respectively.\nIt is your responsibility to ensure the correct feature to be enabled and supported by the\nplatform that runs the code because this library does not automatically detect the supported\nSIMD instruction set. More information on specifying different features for different platforms\nwith the same dependency [here](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#platform-specific-dependencies).\nHere's a simple example:\n```\n[target.'cfg(target_arch = \"x86_64\")'.dependencies]\nblock-aligner = { version = \"0.5\", features = [\"simd_avx2\"] }\n[target.'cfg(target_arch = \"aarch64\")'.dependencies]\nblock-aligner = { version = \"0.5\", features = [\"simd_neon\"] }\n```\n\nFor developing, testing, or using the C API, you should clone this repo\nand use Rust nightly. In general, when building, you need to specify the\ncorrect feature flags through the command line.\n\nFor x86 AVX2:\n```\ncargo build --features simd_avx2 --release\n```\n\nFor x86 SSE2:\n```\ncargo build --features simd_sse2 --release\n```\n\nFor ARM Neon:\n```\ncargo build --target=aarch64-unknown-linux-gnu --features simd_neon --release\n```\n\nFor WASM SIMD:\n```\ncargo build --target=wasm32-wasi --features simd_wasm --release\n```\n\nTo run WASM programs, you will need [`wasmtime`](https://github.com/bytecodealliance/wasmtime)\ninstalled and on your `$PATH`.\n"
      },
      "source": "https://raw.githubusercontent.com/Daniel-Liu-c0deb0t/block-aligner/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9593167688592973,
      "result": {
        "original_header": "Improving Block Aligner",
        "type": "Text_excerpt",
        "value": "To try your ideas, take a look at the code after the comment `// TODO: better heuristics?` in `src/scan_block.rs`\n(depending on your changes, you may need to modify other parts of the code too). Let me know if you\nare working on new ideas! \n"
      },
      "source": "https://raw.githubusercontent.com/Daniel-Liu-c0deb0t/block-aligner/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999989426583132,
      "result": {
        "original_header": "Test",
        "type": "Text_excerpt",
        "value": "Run `scripts/test_avx2.sh` or `scripts/test_wasm.sh` to run tests.\nCI will run these tests when commits are pushed to this repo.\nMore testing and evaluating scripts are available in the `scripts` directory. \n"
      },
      "source": "https://raw.githubusercontent.com/Daniel-Liu-c0deb0t/block-aligner/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.999955167012922,
      "result": {
        "original_header": "Docs",
        "type": "Text_excerpt",
        "value": "Run `scripts/doc_avx2.sh` or `scripts/doc_wasm.sh` to build the docs locally.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Daniel-Liu-c0deb0t/block-aligner/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9398085550045826,
      "result": {
        "original_header": "Benchmark",
        "type": "Text_excerpt",
        "value": "Run `scripts/bench_avx2.sh` or `scripts/bench_wasm.sh` for basic benchmarks.\nSee the `scripts` directory for runnable benchmark scripts on real data.\nMost of the actual implementations of the benchmarks are in the `examples` directory.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Daniel-Liu-c0deb0t/block-aligner/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9657210609773518,
      "result": {
        "original_header": "Data analysis and visualizations",
        "type": "Text_excerpt",
        "value": "Use the Jupyter notebook in the `vis/` directory to gather data and plot them. An easier way\nto run the whole notebook is to run the `vis/run_vis.sh` script. This reproduces the\nexperiments in the manuscript.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Daniel-Liu-c0deb0t/block-aligner/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.997343384405953,
      "result": {
        "original_header": "Profiling with MacOS Instruments",
        "type": "Text_excerpt",
        "value": "Use\n```\nbrew install cargo-instruments\nRUSTFLAGS=\"-g\" cargo instruments --example profile --release --features simd_avx2 --open\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/Daniel-Liu-c0deb0t/block-aligner/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8192958688506895,
      "result": {
        "original_header": "Analyzing performance with LLVM-MCA",
        "type": "Text_excerpt",
        "value": "Use\n```\nscripts/build_ir_asm.sh\n```\nto generate assembly output and run LLVM-MCA.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Daniel-Liu-c0deb0t/block-aligner/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8672681637925891,
      "result": {
        "original_header": "Viewing the assembly",
        "type": "Text_excerpt",
        "value": "Use either `scripts/build_ir_asm.sh`, `objdump -d` on a binary (avoids recompiling code in\nsome cases), or a more advanced tool like Ghidra (has a decompiler, too).\n \n"
      },
      "source": "https://raw.githubusercontent.com/Daniel-Liu-c0deb0t/block-aligner/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.93854118275316,
      "result": {
        "original_header": "Compare (relatively unused)",
        "type": "Text_excerpt",
        "value": "Edits were made to [Hajime Suzuki](https://github.com/ocxtal)'s adaptive banding benchmark code\nand difference recurrence benchmark code. These edits are available [here](https://github.com/Daniel-Liu-c0deb0t/adaptivebandbench)\nand [here](https://github.com/Daniel-Liu-c0deb0t/diff-bench-paper), respectively.\nGo to those repos, then follow the instructions for installing and running the code. \nIf you run the scripts in those repos for comparing scores produced by different algorithms,\nyou should get `.tsv` generated files. Then, in this repo's directory, run\n```\nscripts/compare_avx2.sh /path/to/file.tsv 50\n```\nto get the comparisons. The X-drop threshold is specified after the path.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Daniel-Liu-c0deb0t/block-aligner/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8013371570019835,
      "result": {
        "type": "Text_excerpt",
        "value": "\n<p align = \"center\">\n<img src = \"vis/block_img1.png\" width = \"300px\">\n</p>\n \n"
      },
      "source": "https://raw.githubusercontent.com/Daniel-Liu-c0deb0t/block-aligner/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8168080756896425,
      "result": {
        "original_header": "Test",
        "type": "Text_excerpt",
        "value": "Run `scripts/test_avx2.sh` or `scripts/test_wasm.sh` to run tests.\nCI will run these tests when commits are pushed to this repo.\nMore testing and evaluating scripts are available in the `scripts` directory. \n"
      },
      "source": "https://raw.githubusercontent.com/Daniel-Liu-c0deb0t/block-aligner/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8344308264578582,
      "result": {
        "original_header": "Analyzing performance with LLVM-MCA",
        "type": "Text_excerpt",
        "value": "Use\n```\nscripts/build_ir_asm.sh\n```\nto generate assembly output and run LLVM-MCA.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Daniel-Liu-c0deb0t/block-aligner/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Daniel-Liu-c0deb0t/block-aligner/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "algorithms, alignment, avx2, bioinformatics, neon, rust, simd, wasm, webassembly"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2021 Daniel Liu\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/Daniel-Liu-c0deb0t/block-aligner/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "block-aligner"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "Daniel-Liu-c0deb0t"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 343331,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Rust",
        "size": 324449,
        "type": "Programming_language",
        "value": "Rust"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 21284,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 6077,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 5242,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 327,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Daniel-Liu-c0deb0t/block-aligner/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "Daniel-Liu-c0deb0t",
          "type": "User"
        },
        "date_created": "2021-06-24T10:15:00Z",
        "date_published": "2021-06-26T02:31:23Z",
        "description": "This release is just to have a place to put some Uniclust30 proteins, SCOP proteins, and Illumina/Nanopore reads necessary for some tests or benchmarks.",
        "html_url": "https://github.com/Daniel-Liu-c0deb0t/block-aligner/releases/tag/v0.0.0",
        "name": "Sequence data",
        "release_id": 45267166,
        "tag": "v0.0.0",
        "tarball_url": "https://api.github.com/repos/Daniel-Liu-c0deb0t/block-aligner/tarball/v0.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/Daniel-Liu-c0deb0t/block-aligner/releases/45267166",
        "value": "https://api.github.com/repos/Daniel-Liu-c0deb0t/block-aligner/releases/45267166",
        "zipball_url": "https://api.github.com/repos/Daniel-Liu-c0deb0t/block-aligner/zipball/v0.0.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-06 02:23:34",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 125
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Example",
        "parent_header": [
          "block aligner"
        ],
        "type": "Text_excerpt",
        "value": "```rust\nuse block_aligner::{cigar::*, scan_block::*, scores::*};\n\nlet min_block_size = 32;\nlet max_block_size = 256;\n\n// A gap of length n will cost: open + extend * (n - 1)\nlet gaps = Gaps { open: -2, extend: -1 };\n\n// Note that PaddedBytes, Block, and Cigar can be initialized with sequence length\n// and block size upper bounds and be reused later for shorter sequences, to avoid\n// repeated allocations.\nlet r = PaddedBytes::from_bytes::<NucMatrix>(b\"TTAAAAAAATTTTTTTTTTTT\", max_block_size);\nlet q = PaddedBytes::from_bytes::<NucMatrix>(b\"TTTTTTTTAAAAAAATTTTTTTTT\", max_block_size);\n\n// Align with traceback, but no X-drop threshold (global alignment).\nlet mut a = Block::<true, false>::new(q.len(), r.len(), max_block_size);\na.align(&q, &r, &NW1, gaps, min_block_size..=max_block_size, 0);\nlet res = a.res();\n\nassert_eq!(res, AlignResult { score: 7, query_idx: 24, reference_idx: 21 });\n\nlet mut cigar = Cigar::new(res.query_idx, res.reference_idx);\n// Compute traceback and resolve =/X (matches/mismatches).\na.trace().cigar_eq(&q, &r, res.query_idx, res.reference_idx, &mut cigar);\n\nassert_eq!(cigar.to_string(), \"2=6I16=3D\");\n```\nSee the [docs](https://docs.rs/block-aligner) for detailed API information.\n\nHere is a diagram showing alignment types that are supported in Block Aligner:\n\n<p align = \"center\">\n<img src = \"block_aligner_modes.png\" width = \"400px\">\n</p>\n"
      },
      "source": "https://raw.githubusercontent.com/Daniel-Liu-c0deb0t/block-aligner/main/README.md",
      "technique": "header_analysis"
    }
  ]
}