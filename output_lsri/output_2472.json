{
  "acknowledgement": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Acknowledgments - November 2010\n-------------------------------\n\nWe would like to thank the following people who have contributed directly\nor indirectly to HDF5:\n\nWerner Benger, for contributing code used to add support for the Windows \nThreading library included in the 1.8.6 release.\n\nJohn A. Biddiscombe, Mike Jackson, and Sean McBride for contributing and\ntesting CMake code included in the HDF5 1.8.5 distribution.\n\nThe HDF5 community for helping shape the development of HDF5 by contributing\nbug reports and patches, joining in on forum discussions, and continually\nsupporting our software.\n\nFinally, we'd like to thank all organizations whose funding has made HDF5 \npossible.\n"
      },
      "source": "https://raw.githubusercontent.com/BioinformaticsCSU/MultiNanopolish/master/hdf5-1.8.14/ACKNOWLEDGMENTS",
      "technique": "file_exploration"
    }
  ],
  "application_domain": [
    {
      "confidence": 19.79,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/BioinformaticsCSU/MultiNanopolish"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-05-07T14:49:10Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-08-30T00:27:01Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Accelaration of Nanopolish algorithm"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9987905971771395,
      "result": {
        "original_header": "MultiNanopolish",
        "type": "Text_excerpt",
        "value": "\r\nNanopolish is a software package for signal-level analysis of Oxford Nanopore sequencing data. Nanopolish can calculate an improved consensus sequence for a draft genome assembly, detect base modifications, call SNPs and indels with respect to a reference genome and more (see [Nanopolish](https://github.com/jts/nanopolish) for more details).\r\n\r\nWe present an efficient  implementation of Nanopolish, called MultiNanopolish. MultiNanopolish use a different iterative calculation strategy to reduce redundant calculations.  We propose an abstract concept, namely independent computing unit(GroupTask) which can be distributed to the thread pool for multi-thread concurrent computing.\r\n\r\nCode compilation and dependencies are the same as Nanopolish, and it is used in exactly the same way as Nanopolish. Next, installation instructions are provided. We refer to Nanopolish's README.\r\n\r \n"
      },
      "source": "https://raw.githubusercontent.com/BioinformaticsCSU/MultiNanopolish/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9890202207650596,
      "result": {
        "original_header": "Nanopolish modules",
        "type": "Text_excerpt",
        "value": "\r\nThe main subprograms of nanopolish are:\r\n\r\n```\r\nnanopolish call-methylation: predict genomic bases that may be methylated\r\nnanopolish variants: detect SNPs and indels with respect to a reference genome\r\nnanopolish variants --consensus: calculate an improved consensus sequence for a draft genome assembly\r\nnanopolish eventalign: align signal-level events to k-mers of a reference genome\r\n```\r\n\r \n"
      },
      "source": "https://raw.githubusercontent.com/BioinformaticsCSU/MultiNanopolish/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "http://nanopolish.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/BioinformaticsCSU/MultiNanopolish/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/BioinformaticsCSU/MultiNanopolish/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/BioinformaticsCSU/MultiNanopolish/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "BioinformaticsCSU/MultiNanopolish"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MultiNanopolish"
      },
      "source": "https://raw.githubusercontent.com/BioinformaticsCSU/MultiNanopolish/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BioinformaticsCSU/MultiNanopolish/master/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/BioinformaticsCSU/MultiNanopolish/master/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BioinformaticsCSU/MultiNanopolish/master/scripts/import_ont_models_from_dir.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BioinformaticsCSU/MultiNanopolish/master/hdf5-1.8.14/vms/tools/h5diff/remove_exit.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BioinformaticsCSU/MultiNanopolish/master/hdf5-1.8.14/fortran/examples/testh5fc.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BioinformaticsCSU/MultiNanopolish/master/hdf5-1.8.14/fortran/examples/run-fortran-ex.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BioinformaticsCSU/MultiNanopolish/master/hdf5-1.8.14/c%2B%2B/examples/testh5c%2B%2B.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BioinformaticsCSU/MultiNanopolish/master/hdf5-1.8.14/c%2B%2B/examples/run-c%2B%2B-ex.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BioinformaticsCSU/MultiNanopolish/master/hdf5-1.8.14/hl/fortran/examples/run-hlfortran-ex.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BioinformaticsCSU/MultiNanopolish/master/hdf5-1.8.14/hl/c%2B%2B/examples/run-hlc%2B%2B-ex.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BioinformaticsCSU/MultiNanopolish/master/hdf5-1.8.14/hl/examples/run-hl-ex.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BioinformaticsCSU/MultiNanopolish/master/hdf5-1.8.14/hl/examples/run-hlc-ex.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BioinformaticsCSU/MultiNanopolish/master/hdf5-1.8.14/hl/tools/gif2h5/h52giftest.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BioinformaticsCSU/MultiNanopolish/master/hdf5-1.8.14/examples/run-all-ex.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BioinformaticsCSU/MultiNanopolish/master/hdf5-1.8.14/examples/testh5cc.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BioinformaticsCSU/MultiNanopolish/master/hdf5-1.8.14/examples/run-c-ex.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BioinformaticsCSU/MultiNanopolish/master/hdf5-1.8.14/perform/build_h5perf_alone.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BioinformaticsCSU/MultiNanopolish/master/hdf5-1.8.14/perform/build_h5perf_serial_alone.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BioinformaticsCSU/MultiNanopolish/master/hdf5-1.8.14/tools/h5diff/testph5diff.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BioinformaticsCSU/MultiNanopolish/master/hdf5-1.8.14/tools/h5diff/testh5diff.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BioinformaticsCSU/MultiNanopolish/master/hdf5-1.8.14/tools/h5repack/h5repack.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BioinformaticsCSU/MultiNanopolish/master/hdf5-1.8.14/tools/h5repack/h5repack_plugin.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BioinformaticsCSU/MultiNanopolish/master/hdf5-1.8.14/tools/h5jam/testh5jam.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BioinformaticsCSU/MultiNanopolish/master/hdf5-1.8.14/tools/h5ls/testh5ls.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BioinformaticsCSU/MultiNanopolish/master/hdf5-1.8.14/tools/h5stat/testh5stat.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BioinformaticsCSU/MultiNanopolish/master/hdf5-1.8.14/tools/h5dump/testh5dumppbits.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BioinformaticsCSU/MultiNanopolish/master/hdf5-1.8.14/tools/h5dump/testh5dumpxml.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BioinformaticsCSU/MultiNanopolish/master/hdf5-1.8.14/tools/h5dump/testh5dump.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BioinformaticsCSU/MultiNanopolish/master/hdf5-1.8.14/tools/h5import/h5importtestutil.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BioinformaticsCSU/MultiNanopolish/master/hdf5-1.8.14/tools/misc/testh5mkgrp.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BioinformaticsCSU/MultiNanopolish/master/hdf5-1.8.14/tools/misc/testh5repart.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BioinformaticsCSU/MultiNanopolish/master/hdf5-1.8.14/tools/h5copy/testh5copy.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BioinformaticsCSU/MultiNanopolish/master/hdf5-1.8.14/bin/output_filter.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BioinformaticsCSU/MultiNanopolish/master/hdf5-1.8.14/bin/ltmain.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BioinformaticsCSU/MultiNanopolish/master/eigen/bench/bench_multi_compilers.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BioinformaticsCSU/MultiNanopolish/master/eigen/bench/btl/data/mk_mean_script.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BioinformaticsCSU/MultiNanopolish/master/eigen/bench/btl/data/mk_gnuplot_script.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BioinformaticsCSU/MultiNanopolish/master/eigen/bench/btl/data/mk_new_gnuplot.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BioinformaticsCSU/MultiNanopolish/master/eigen/bench/btl/data/smooth_all.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BioinformaticsCSU/MultiNanopolish/master/share/hdf5_examples/run-all-ex.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BioinformaticsCSU/MultiNanopolish/master/share/hdf5_examples/hl/run-hl-ex.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BioinformaticsCSU/MultiNanopolish/master/share/hdf5_examples/hl/c/run-hlc-ex.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BioinformaticsCSU/MultiNanopolish/master/share/hdf5_examples/c/run-c-ex.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installing the latest code from github (recommended)",
        "parent_header": [
          "MultiNanopolish",
          "Installation instructions"
        ],
        "type": "Text_excerpt",
        "value": "\r\nYou can download and compile the latest code from github as follows:\r\n\r\n```\r\ngit clone --recursive https://github.com/BioinformaticsCSU/MultiNanopolish.git\r\ncd MultiNanopolish\r\nmake clean\r\nmake\r\n```\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/BioinformaticsCSU/MultiNanopolish/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/BioinformaticsCSU/MultiNanopolish/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "The MIT License (MIT)\n\nCopyright (c) 2015 Ontario Institute for Cancer Research\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE. \n"
      },
      "source": "https://raw.githubusercontent.com/BioinformaticsCSU/MultiNanopolish/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MultiNanopolish"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "BioinformaticsCSU"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 27506671,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 12247125,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 4706134,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Fortran",
        "size": 4126273,
        "type": "Programming_language",
        "value": "Fortran"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 2550204,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 1002349,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "M4",
        "size": 168669,
        "type": "Programming_language",
        "value": "M4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "DIGITAL Command Language",
        "size": 164966,
        "type": "Programming_language",
        "value": "DIGITAL Command Language"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "LiveScript",
        "size": 149612,
        "type": "Programming_language",
        "value": "LiveScript"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 99827,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 93311,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "PLSQL",
        "size": 72923,
        "type": "Programming_language",
        "value": "PLSQL"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Yacc",
        "size": 20591,
        "type": "Programming_language",
        "value": "Yacc"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Roff",
        "size": 20231,
        "type": "Programming_language",
        "value": "Roff"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CSS",
        "size": 12683,
        "type": "Programming_language",
        "value": "CSS"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 11336,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "JavaScript",
        "size": 7839,
        "type": "Programming_language",
        "value": "JavaScript"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Lex",
        "size": 6948,
        "type": "Programming_language",
        "value": "Lex"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Scilab",
        "size": 1506,
        "type": "Programming_language",
        "value": "Scilab"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 226,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BioinformaticsCSU/MultiNanopolish/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependencies",
        "parent_header": [
          "MultiNanopolish"
        ],
        "type": "Text_excerpt",
        "value": "\r\nA compiler that supports C++11 is needed to build nanopolish. Development of the code is performed using [gcc-4.8](https://gcc.gnu.org/gcc-4.8/).\r\n\r\nBy default, nanopolish will download and compile all of its required dependencies. Some users however may want to use system-wide versions of the libraries. To turn off the automatic installation of dependencies set `HDF5=noinstall`, `EIGEN=noinstall`, `HTS=noinstall` or `MINIMAP2=noinstall` parameters when running `make` as appropriate. The current versions and compile options for the dependencies are:\r\n\r\n* [libhdf5-1.8.14](http://www.hdfgroup.org/HDF5/release/obtain5.html) compiled with multi-threading support `--enable-threadsafe`\r\n* [eigen-3.2.5](http://eigen.tuxfamily.org)\r\n* [htslib-1.4](http://github.com/samtools/htslib)\r\n* [minimap2-d2de282](http://github.com/lh3/minimap2)\r\n\r\nIn order to use the additional python3 scripts within `/scripts`, install the dependencies via\r\n\r\n```\r\npip install -r scripts/requirements.txt --user\r\n```\r\n\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/BioinformaticsCSU/MultiNanopolish/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "To run using docker",
        "parent_header": [
          "MultiNanopolish"
        ],
        "type": "Text_excerpt",
        "value": "\r\nFirst build the image from the dockerfile:\r\n```\r\ndocker build .\r\n```\r\nNote the uuid given upon successful build.\r\nThen you can run nanopolish from the image:\r\n```\r\ndocker run -v /path/to/local/data/data/:/data/ -it :image_id  ./nanopolish eventalign -r /data/reads.fa -b /data/alignments.sorted.bam -g /data/ref.fa\r\n```\r\n\r\n"
      },
      "source": "https://raw.githubusercontent.com/BioinformaticsCSU/MultiNanopolish/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "download",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 08:59:30",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Data preprocessing",
        "parent_header": [
          "MultiNanopolish",
          "Analysis workflow examples"
        ],
        "type": "Text_excerpt",
        "value": "\r\nNanopolish needs access to the signal-level data measured by the nanopore sequencer. The first step of any nanopolish workflow is to prepare the input data by telling nanopolish where to find the signal files. If you ran Albacore 2.0 on your data you should run `nanopolish index` on your input reads (-d can be specified more than once if using multiple runs):\r\n\r\n```\r\n# Index the output of the albacore basecaller\r\nnanopolish index -d /path/to/raw_fast5s/ -s sequencing_summary.txt albacore_output.fastq\r\n```\r\n\r\nThe `-s` option tells nanopolish to read the `sequencing_summary.txt` file from Albacore to speed up indexing. Without this option `nanopolish index` is extremely slow as it needs to read every fast5 file individually. If you basecalled your run in parallel, so you have multiple `sequencing_summary.txt` files, you can use the `-f` option to pass in a file containing the paths to the sequencing summary files (one per line).\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/BioinformaticsCSU/MultiNanopolish/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Computing a new consensus sequence for a draft assembly",
        "parent_header": [
          "MultiNanopolish",
          "Analysis workflow examples"
        ],
        "type": "Text_excerpt",
        "value": "\r\nThe original purpose of nanopolish was to compute an improved consensus sequence for a draft genome assembly produced by a long-read assembly like [canu](https://github.com/marbl/canu). This section describes how to do this, starting with your draft assembly which should have megabase-sized contigs. We've also posted a tutorial including example data [here](http://nanopolish.readthedocs.io/en/latest/quickstart_consensus.html).\r\n\r\n```\r\n# Index the draft genome\r\nbwa index draft.fa\r\n\r\n# Align the basecalled reads to the draft sequence\r\nbwa mem -x ont2d -t 8 draft.fa reads.fa | samtools sort -o reads.sorted.bam -T reads.tmp -\r\nsamtools index reads.sorted.bam\r\n```\r\n\r\nNow, we use nanopolish to compute the consensus sequence (the genome is polished in 50kb blocks and there will be one output file per block).\r\n\r\n```\r\npython3 nanopolish_makerange.py draft.fa | parallel --results nanopolish.results -P 8 \\\r\n    nanopolish variants --consensus -o polished.{1}.vcf -w {1} -r reads.fa -b reads.sorted.bam -g draft.fa -t 4 --min-candidate-frequency 0.1\r\n```\r\n\r\nThis command will run the consensus algorithm on eight 50kbp segments of the genome at a time, using 4 threads each. Change the ```-P``` and ```--threads``` options as appropriate for the machines you have available.\r\n\r\nAfter all polishing jobs are complete, you can merge the individual 50kb segments together back into the final assembly:\r\n\r\n```\r\nnanopolish vcf2fasta -g draft.fa polished.*.vcf > polished_genome.fa\r\n```\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/BioinformaticsCSU/MultiNanopolish/master/README.md",
      "technique": "header_analysis"
    }
  ]
}