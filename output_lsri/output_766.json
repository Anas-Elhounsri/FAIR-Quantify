{
  "application_domain": [
    {
      "confidence": 9.2,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/yaozhong/deepIntraSV"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-01-31T00:10:21Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-08-08T14:43:05Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "UNet model for segmenting intra-bin structural variants with base-pair read-depth data of WGS"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9770670840645899,
      "result": {
        "original_header": "Breakpoint enhancement for read-depth based SV callers",
        "type": "Text_excerpt",
        "value": "RDBKE is a breakpoint enhancment pipeline for read-depth (RD) based SV callers using deep segmenation model UNet.\nUNet is used to learn specific patterns of base-wise RDs surrounding known breaking points.\nIt is designed for in-sample and cross-sample applications.\nMore details can be found in the manuscript https://doi.org/10.1101/503649 \nOld branch DeepIntraSV only contains model-level training and testing.\nRDBKE branch added the enhancement module for RD-based SV callers (e.g., CNVnator). \n* Model structure of UNet used for RDBKE:\n![](figures/Fig2_Unet_structure.png)\n \n"
      },
      "source": "https://raw.githubusercontent.com/yaozhong/deepIntraSV/RDBKE/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9117307663530926,
      "result": {
        "original_header": "Required files",
        "type": "Text_excerpt",
        "value": "1. reference files are located in ./data/reference/, which includes required reference files:  \n* reference genome FASTA file ``hs37d5.fa`` and its ``index ``\ths37d5.fa.fai``\n(Please download from [1000genomes](http://ftp.1000genomes.ebi.ac.uk/vol1/ftp/technical/reference/phase2_reference_assembly_sequence/) , and place it in ``./data/reference/hg19/``)\n* mappability of 100-mer file\n* Encode hg19 blacklist regions\n* hg19 Chromesome length  \n2. SV annotation files./data/SV_annotation/\n  (a python script is provided to parse VCF for SV regions)\n \n"
      },
      "source": "https://raw.githubusercontent.com/yaozhong/deepIntraSV/RDBKE/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9228590542546522,
      "result": {
        "original_header": "Training UNet model",
        "type": "Text_excerpt",
        "value": "Input are WGS bam file(s) and VCF file(s). \nCached train-test data will be first searched according to current parameters,\nIf cache files are not found, the code will process the bam file and cache the data.\nA multi-core version of pysam is used. \nBy default, all cores will be used to generate RD bins from bam file. \nFor each training data, \nbackground statistics of RDs are first calcuated through sampling WGS data.\nBackground statistics of each WGS data will be cached in the same fold of trained model parameters \nWe provided a default hyperparameters of UNet and CNN in ``./experiment/model_param/``\nUsers can make changes of the parameter file or specifiy through command line option.\nIf no model parameter file is provided, the code will use hyperOpt to search preDefined hyper-parameter spaces based on the train set. \nFor the in-sample case, only one bam file is required and the data is split into train-test with the following data split -ds option: \n"
      },
      "source": "https://raw.githubusercontent.com/yaozhong/deepIntraSV/RDBKE/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9527452121173212,
      "result": {
        "original_header": "BAM files",
        "type": "Text_excerpt",
        "value": "* NA12878:(ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/data/NA12878/high_coverage_alignment/NA12878.mapped.ILLUMINA.bwa.CEU.high_coverage_pcr_free.20130906.bam)  \n* NA19238:(ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/data/NA12878/high_coverage_alignment/NA19238.mapped.ILLUMINA.bwa.YRI.high_coverage_pcr_free.20130924.bam) \n* NA19239:(ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/data/NA12878/high_coverage_alignment/NA19239.mapped.ILLUMINA.bwa.YRI.high_coverage_pcr_free.20130924.bam) \n* HG002:(ftp://ftp-trace.ncbi.nlm.nih.gov/giab/ftp/data/AshkenazimTrio/HG002_NA24385_son/NIST_HiSeq_HG002_Homogeneity-10953946/NHGRI_Illumina300X_AJtrio_novoalign_bams/HG002.hs37d5.60X.1.bam) \n"
      },
      "source": "https://raw.githubusercontent.com/yaozhong/deepIntraSV/RDBKE/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/yaozhong/deepIntraSV/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/yaozhong/deepIntraSV/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "yaozhong/deepIntraSV"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Breakpoint enhancement for read-depth based SV callers"
      },
      "source": "https://raw.githubusercontent.com/yaozhong/deepIntraSV/RDBKE/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/yaozhong/deepIntraSV/RDBKE/figures/Fig1_workflow.png"
      },
      "source": "https://raw.githubusercontent.com/yaozhong/deepIntraSV/RDBKE/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/yaozhong/deepIntraSV/RDBKE/figures/Fig2_Unet_structure.png"
      },
      "source": "https://raw.githubusercontent.com/yaozhong/deepIntraSV/RDBKE/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9999959139843984,
      "result": {
        "original_header": "Docker enviroment",
        "type": "Text_excerpt",
        "value": "We provide a docker image for running this code\n```\ndocker pull yaozhong/deep_intra_sv:0.9\n```\n* ubuntu 16.04.4\n* Tensorflow 1.8.0\n* Keras 2.2.4\n```\nWORKING_FOLD=<Absolute-PATH>\nnvidia-docker run -it --rm -v $WORKING_FOLD:/workspace yaozhong/deep_intra_sv:0.9 bash\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/yaozhong/deepIntraSV/RDBKE/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.993374464747577,
      "result": {
        "original_header": "Configuration file",
        "type": "Text_excerpt",
        "value": "The parameter setteing is pre-defined in the `code/config.py` file.\nSome frequently used parameters can be also specifized through command line option (See '-h' option). \n \n"
      },
      "source": "https://raw.githubusercontent.com/yaozhong/deepIntraSV/RDBKE/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.823948635025719,
      "result": {
        "original_header": "Required files",
        "type": "Text_excerpt",
        "value": "2. SV annotation files./data/SV_annotation/\n  (a python script is provided to parse VCF for SV regions)\n \n"
      },
      "source": "https://raw.githubusercontent.com/yaozhong/deepIntraSV/RDBKE/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9716755858692236,
      "result": {
        "original_header": "Training UNet model",
        "type": "Text_excerpt",
        "value": "We provided a default hyperparameters of UNet and CNN in ``./experiment/model_param/``\nUsers can make changes of the parameter file or specifiy through command line option.\nIf no model parameter file is provided, the code will use hyperOpt to search preDefined hyper-parameter spaces based on the train set. \n"
      },
      "source": "https://raw.githubusercontent.com/yaozhong/deepIntraSV/RDBKE/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9997253569869492,
      "result": {
        "original_header": "Cross-sample train and testing",
        "type": "Text_excerpt",
        "value": "```\n# cross-sample \nbin_size=400\n\nsample1_name=\"sample1\"\nsample2_name=\"sample2\"\n\nBAM=<bam-file-path>\nBAM2=<bam2-file-path>\n\n# SVs can be provided in BED or VCF file\nVCF=<vcf-file-path>\nVCF2=<vcf2-file-path>\n\nmodel_para=\"../experiment/model_param/unet_default\"\ntmp_worksapce=\"../experiment/tmp_workspace/\"\nmodel_save_fold=\"../experiment/cross_train_model/\"\n\npython train.py -b $bin_size -em cross -d $sample1_name -d2 $sample2_name \\\n-bam $BAM -bam2 $BAM2 -vcf $VCF -vcf2 $VCF2  \\\n-m UNet -mp $model_para  -l dice_loss  -tsp 0 -tmp $tmp_worksapce  -msf $model_save_fold\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/yaozhong/deepIntraSV/RDBKE/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9776872379435622,
      "result": {
        "original_header": "In-sample train and testing",
        "type": "Text_excerpt",
        "value": "```\n# In-sample \nbin_size=400\n\nsample1_name=\"sample1\"\nBAM=<bam-file-path>\n\n# SVs can be provided in BED or VCF file\nVCF=<vcf-file-path>\n\nmodel_para=\"../experiment/model_param/unet_default\"\ntmp_worksapce=\"../experiment/tmp_workspace/\"\nmodel_save_fold=\"../experiment/single_sample_train_model/\"\n\npython train.py -b $bin_size -em single -d $sample1_name \\\n-bam $BAM -vcf $VCF  \\\n-m UNet -mp $model_para  -l dice_loss  -tsp 0.8 -tmp $tmp_worksapce  -msf $model_save_fold\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/yaozhong/deepIntraSV/RDBKE/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9979766296374688,
      "result": {
        "original_header": "VCF files",
        "type": "Text_excerpt",
        "value": "* Simulated data:(https://github.com/stat-lab/EvalSVcallers/blob/master/Ref_SV/Sim-A.SV.vcf) \n* NA12878, NA19238, NA19239:(ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/phase3/integrated_sv_map/ALL.wgs.mergedSV.v8.20130502.svs.genotypes.vcf.gz)\n \n* HG002:(ftp://ftp-trace.ncbi.nlm.nih.gov/giab/ftp/data/AshkenazimTrio/analysis/NIST_SVs_Integration_v0.6/HG002_SVs_Tier1_v0.6.vcf.gz)\n \n* COLO829T:(https://zenodo.org/record/3988185/files/truthset_somaticSVs_COLO829.vcf?download=1)\n  \n"
      },
      "source": "https://raw.githubusercontent.com/yaozhong/deepIntraSV/RDBKE/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.9361615066779615,
      "result": {
        "original_header": "Cross-sample train and testing",
        "type": "Text_excerpt",
        "value": "```\n# cross-sample \nbin_size=400\n\nsample1_name=\"sample1\"\nsample2_name=\"sample2\"\n\nBAM=<bam-file-path>\nBAM2=<bam2-file-path>\n\n# SVs can be provided in BED or VCF file\nVCF=<vcf-file-path>\nVCF2=<vcf2-file-path>\n\nmodel_para=\"../experiment/model_param/unet_default\"\ntmp_worksapce=\"../experiment/tmp_workspace/\"\nmodel_save_fold=\"../experiment/cross_train_model/\"\n\npython train.py -b $bin_size -em cross -d $sample1_name -d2 $sample2_name \\\n-bam $BAM -bam2 $BAM2 -vcf $VCF -vcf2 $VCF2  \\\n-m UNet -mp $model_para  -l dice_loss  -tsp 0 -tmp $tmp_worksapce  -msf $model_save_fold\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/yaozhong/deepIntraSV/RDBKE/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9294761360383359,
      "result": {
        "original_header": "In-sample train and testing",
        "type": "Text_excerpt",
        "value": "```\n# In-sample \nbin_size=400\n\nsample1_name=\"sample1\"\nBAM=<bam-file-path>\n\n# SVs can be provided in BED or VCF file\nVCF=<vcf-file-path>\n\nmodel_para=\"../experiment/model_param/unet_default\"\ntmp_worksapce=\"../experiment/tmp_workspace/\"\nmodel_save_fold=\"../experiment/single_sample_train_model/\"\n\npython train.py -b $bin_size -em single -d $sample1_name \\\n-bam $BAM -vcf $VCF  \\\n-m UNet -mp $model_para  -l dice_loss  -tsp 0.8 -tmp $tmp_worksapce  -msf $model_save_fold\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/yaozhong/deepIntraSV/RDBKE/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/yaozhong/deepIntraSV/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "breakpoint-detection, segmentation, u-net"
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "deepIntraSV"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "yaozhong"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 221378,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/yaozhong/deepIntraSV/RDBKE/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 02:16:25",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ]
}