{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Credits",
        "type": "Text_excerpt",
        "value": "The software is an implementation of the method TraSig, jointly developed by [Dongshunyi \"Dora\" Li](https://github.com/doraadong), [Jun Ding](https://github.com/phoenixding) and Ziv Bar-Joseph from [System Biology Group @ Carnegie Mellon University](http://sb.cs.cmu.edu/). We also acknowledge Jeremy J. Velazquez, Joshua Hislop and Mo R. Ebrahimkhani from University of Pittsburgh for the fruitful discussions on method development. \n"
      },
      "source": "https://raw.githubusercontent.com/doraadong/TraSig/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "References",
        "type": "Text_excerpt",
        "value": "<a id=\"1\">[1]</a> \nRamilowski, J., Goldberg, T., Harshbarger, J. et al. A draft network of ligand\u2013receptor-mediated multicellular signalling in human. Nat Commun 6, 7866 (2015). https://doi.org/10.1038/ncomms8866\n\n"
      },
      "source": "https://raw.githubusercontent.com/doraadong/TraSig/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/doraadong/TraSig"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contacts",
        "type": "Text_excerpt",
        "value": "* dongshul at andrew.cmu.edu \n"
      },
      "source": "https://raw.githubusercontent.com/doraadong/TraSig/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-06-14T23:08:29Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-07-23T10:27:26Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Inferring cell-cell interactions from pseudotime ordering of scRNA-Seq data"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "type": "Text_excerpt",
        "value": "TraSig (**Tra**jectory-based **Sig**nalling genes inference) identifies interacting cell types pairs and significant ligand-receptors based on the expression of genes as well as the *pseudo-time ordering* of cells. For any two groups of cells that are expected to overlap in time, TraSig takes the pseudo-time ordering for each group and the expression of genes along the trajectory as input and then outputs an interaction score and p-value for each possible ligand-receptor pair. It also outputs a summary score for cell type pairs by combining individual ligand-receptors' scores. \n\n![flowchart](./method_diagram.png)\n"
      },
      "source": "https://raw.githubusercontent.com/doraadong/TraSig/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Table of Contents",
        "parent_header": [
          "Introduction"
        ],
        "type": "Text_excerpt",
        "value": "- [Get started](#Get-started)\n- [Command-line tools](#Command-line)\n- [Tutorials](#Tutorials)\n- [Updates log](#Updates-log)\n- [Learn more](#Learn-more)\n- [Credits](#Credits)\n\n"
      },
      "source": "https://raw.githubusercontent.com/doraadong/TraSig/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9477198371206038,
      "result": {
        "original_header": "Analyze outputs from TraSig",
        "type": "Text_excerpt",
        "value": "```shell\nusage: analyze_outputs.py [-h] -i INPUT -o OUTPUT -d PROJECT -g PREPROCESS -b\n                          MODELNAME [-t LISTTYPE] [-p OTHERIDENTIFIER]\n                          [-l NLAP] [-m METRIC] [-z NAN2ZERO] [-n NUMPERMS]\n                          [-s STARTINGTREATMENT] [-a ALIGNTYPE]\n                          [-y GENEPAIRTYPE] [-f SMOOTH] [-v OVERLAP] [-r RATE]\n                          [-e ERRORTYPE] [-k ARATE] [-j BRATE]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i INPUT, --input INPUT\n                        string, folder to find TraSig's inputs\n  -o OUTPUT, --output OUTPUT\n                        string, folder to find TraSig's outputs\n  -d PROJECT, --project PROJECT\n                        string, project name\n  -g PREPROCESS, --preprocess PREPROCESS\n                        string, preprocessing steps applied to the data /\n                        project, default None\n  -b MODELNAME, --modelName MODELNAME\n                        string, name of the trajectory model\n  -t LISTTYPE, --listType LISTTYPE\n                        string, optional, interaction list type, default\n                        ligand_receptor\n  -p OTHERIDENTIFIER, --otherIdentifier OTHERIDENTIFIER\n                        string, optional, other identifier for the output,\n                        default None\n  -l NLAP, --nLap NLAP  integer, optional, sliding window size, default 20\n  -m METRIC, --metric METRIC\n                        string, optional, scoring metric, default dot\n  -z NAN2ZERO, --nan2zero NAN2ZERO\n                        boolean, optional, if treat nan as zero, default True\n  -n NUMPERMS, --numPerms NUMPERMS\n                        integer, optional, number of permutations, default\n                        10000\n  -s STARTINGTREATMENT, --startingTreatment STARTINGTREATMENT\n                        string, optional, way to treat values at the beginning\n                        of an edge with sliding window size smaller than nLap,\n                        None/parent/discard/smallerWindow, default\n                        smallerWindow, need to provide an extra input\n                        'path_info.pickle' for 'parent' option\n  -a ALIGNTYPE, --alignType ALIGNTYPE\n                        string, optional, how to align edges, options:\n                        unaligned/aligned-fixed/aligned-specific, default\n                        unaligned\n  -y GENEPAIRTYPE, --genePairType GENEPAIRTYPE\n                        string, optional, identifier for the type of genes to\n                        align, e.g. interaction/cell_cycle, default\n                        interaction\n  -f SMOOTH, --smooth SMOOTH\n                        float, optional, smoothing parameter for splines,\n                        default 1\n  -v OVERLAP, --overlap OVERLAP\n                        float, optional, overlap threshold for alignment,\n                        default 0.5\n  -r RATE, --rate RATE  integer, optional, sampling rate for aligned time\n                        points, default 1\n  -e ERRORTYPE, --errorType ERRORTYPE\n                        string, optional, type of distance metric for\n                        alignment (MSE, cosine or corr), default cosine\n  -k ARATE, --aRate ARATE\n                        float, optional, rate to sample parameter a for\n                        alignment, default 0.05\n  -j BRATE, --bRate BRATE\n                        float, optional, rate to sample parameter b for\n                        alignment, default 2.5\n\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/doraadong/TraSig/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9080952776995723,
      "result": {
        "original_header": "Updates-log",
        "type": "Text_excerpt",
        "value": "* 9-21-2022:  \n-- Add tutorial on data preprocessing for the liver organoid scRNA-seq data  \n* 12-21-2021:   \n-- Add support for conducting temporal alignment and calculating scores using optimally aligned expression profiles  \n-- Add tutorial illustrating how to prepare inputs using user-defined trajectory, not necessarily from dynverse\n \n"
      },
      "source": "https://raw.githubusercontent.com/doraadong/TraSig/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/doraadong/TraSig/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/doraadong/TraSig/main/tutorials/Prepare_input_from_user_defined_trajectory.ipynb"
      },
      "source": "https://raw.githubusercontent.com/doraadong/TraSig/main/tutorials/Prepare_input_from_user_defined_trajectory.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/doraadong/TraSig/main/tutorials/Prepare_input_from_dynverse_ti_methods.ipynb"
      },
      "source": "https://raw.githubusercontent.com/doraadong/TraSig/main/tutorials/Prepare_input_from_dynverse_ti_methods.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/doraadong/TraSig/main/tutorials/preprocess_liver_organoid_data.ipynb"
      },
      "source": "https://raw.githubusercontent.com/doraadong/TraSig/main/tutorials/preprocess_liver_organoid_data.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/doraadong/TraSig/main/tutorials/Run_TraSig_on_example_data.ipynb"
      },
      "source": "https://raw.githubusercontent.com/doraadong/TraSig/main/tutorials/Run_TraSig_on_example_data.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/doraadong/TraSig/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "doraadong/TraSig"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Introduction"
      },
      "source": "https://raw.githubusercontent.com/doraadong/TraSig/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/doraadong/TraSig/main/./method_diagram.png"
      },
      "source": "https://raw.githubusercontent.com/doraadong/TraSig/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Install within a virtual environment",
        "parent_header": [
          "Get-started",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "It is recommended to use a virtural environment/pacakges manager such as [Anaconda](https://www.anaconda.com/). After successfully installing Anaconda/Miniconda, create an environment by following: \n\n```shell\nconda create -n myenv python=3.6\n```\n\nYou can then install and run the package in the virtual environment. Activate the virtural environment by: \n\n```shell\nconda activate myenv\n```\n\nMake sure you have **pip** installed in your environment. You may check by \n\n```shell\nconda list\n```\n\nIf not installed, then: \n\n```shell\nconda install pip\n```\n\nThen install TraSig, together with all its dependencies by: \n\n```shell\npip install git+https://github.com/doraadong/TraSig.git\n```\n\nIf you want to upgrade TraSig to the newest version, then first uninstall it by:\n\n```shell\npip uninstall trasig\n```\nAnd then just run the pip install command again. \n"
      },
      "source": "https://raw.githubusercontent.com/doraadong/TraSig/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Not using virtural environment",
        "parent_header": [
          "Get-started",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "If you prefer not to use a virtual envrionment, then you may install TraSig and its dependencies by (may need to use **sudo**): \n\n```shell\npip3 install git+https://github.com/doraadong/TraSig.git\n```\n\nYou may find where the package is installed by:\n \n```shell\npip show trasig\n```\n"
      },
      "source": "https://raw.githubusercontent.com/doraadong/TraSig/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Prepare inputs for TraSig (from dynverse outputs)",
        "parent_header": [
          "Command-line"
        ],
        "type": "Text_excerpt",
        "value": "For preparing inputs using user-defined trajectory (not from dynverse), see [tutorial](tutorials/Prepare_input_from_user_defined_trajectory.ipynb). \n\nGiven dynverse outputs, prepare inputs by (arguments are taken for example): \n\n```shell\npython prepare_inputs.py -i ../trajectory/input -o ../example/input -d oligodendrocyte-differentiation-clusters_marques -t ../trajectory/output/output.h5 -g None -b ti_slingshot -e None\n```\n\nThe usage of this command is listed as follows:  \n\n```shell\nusage: prepare_inputs.py [-h] -i INPUT -o OUTPUT -d PROJECT -t TRAJECTORYFILE\n                         -g PREPROCESS -b MODELNAME [-e OTHERIDENTIFIER]\n                         [-c LISTTYPE] [-cp PATHLR] [-y GENEPAIRTYPE]\n                         [-yp PATHALIGN]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i INPUT, --input INPUT\n                        string, folder to find inputs for trajectory inference\n  -o OUTPUT, --output OUTPUT\n                        string, folder to save inputs for TraSig\n  -d PROJECT, --project PROJECT\n                        string, project name\n  -t TRAJECTORYFILE, --trajectoryFile TRAJECTORYFILE\n                        string, trajectory output file from dynverse, default\n                        ../trajectory/output/output.h5\n  -g PREPROCESS, --preprocess PREPROCESS\n                        string, preprocessing steps applied to the data /\n                        project, default None\n  -b MODELNAME, --modelName MODELNAME\n                        string, name of the trajectory model\n  -e OTHERIDENTIFIER, --otherIdentifier OTHERIDENTIFIER\n                        string, optional, other identifier for the output,\n                        default None\n  -c LISTTYPE, --listType LISTTYPE\n                        string, optional, interaction list type, default\n                        ligand_receptor\n  -cp PATHLR, --pathLR PATHLR\n                        string, optional, path to the interaction list,\n                        default\n                        ../ligand_receptor_lists/ligand_receptor_FANTOM.pickle\n  -y GENEPAIRTYPE, --genePairType GENEPAIRTYPE\n                        string, optional, identifier for the type of genes to\n                        align, e.g. interaction/cell_cycle, default\n                        interaction\n  -yp PATHALIGN, --pathAlign PATHALIGN\n                        string, optional, path to the alignment genes list,\n                        set as 'None' if not doing alignment or using\n                        'interaction' for alignment, default None\n\n```\n"
      },
      "source": "https://raw.githubusercontent.com/doraadong/TraSig/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Prepare inputs",
        "parent_header": [
          "Tutorials"
        ],
        "type": "Text_excerpt",
        "value": "To run TraSig, we need to have 4 input files. Here is a [tutorial](tutorials/Prepare_input_from_dynverse_ti_methods.ipynb), showing how to prepare these files from the inference results of any trajectory inference method included in [dynverse](https://dynverse.org/). You can find the example expression data (input) and trajectory inference result (output) under the folder [trajectory](trajectory). You may also prepare the inputs for TraSig by running the aforementioned script [prepare_inputs](tutorials/prepare_inputs.py) using command-line. See the tutorial for more details. \n\nWe can also accept inputs that are not generated by dynverse. For outputs from any pseudotime trajectory tool you prefer, you can prepare the inputs for TraSig following this [tutorial](tutorials/Prepare_input_from_user_defined_trajectory.ipynb).\n\nWe can also accept customized ligand-receptor database and customized gene list for alignment, if you would like to use the alignment option for TraSig. The inputs will be changed accordingly and you may need to **specify the filepath and identifier** for your own ligand-receptor database and gene list for alignment. Please find the corresponding arguements in the [command-line tool](tutorials/prepare_inputs.py) and the corresponding variables in the tutorials mentioned above to make the changes. You may also find descriptions on the file formats in the tutorials. The [example ligand-receptor database](ligand_receptor_lists/ligand_receptor_FANTOM.pickle) is from [[1]](#1) and the [example alignment gene lists](alignment_genes_lists/cell_cycle_markers_Seurat.pickle) is downloaded from the [Seurat package](https://satijalab.org/seurat/).\n"
      },
      "source": "https://raw.githubusercontent.com/doraadong/TraSig/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9999985203830453,
      "result": {
        "original_header": "Analyze outputs from TraSig",
        "type": "Text_excerpt",
        "value": "```shell\nusage: analyze_outputs.py [-h] -i INPUT -o OUTPUT -d PROJECT -g PREPROCESS -b\n                          MODELNAME [-t LISTTYPE] [-p OTHERIDENTIFIER]\n                          [-l NLAP] [-m METRIC] [-z NAN2ZERO] [-n NUMPERMS]\n                          [-s STARTINGTREATMENT] [-a ALIGNTYPE]\n                          [-y GENEPAIRTYPE] [-f SMOOTH] [-v OVERLAP] [-r RATE]\n                          [-e ERRORTYPE] [-k ARATE] [-j BRATE]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i INPUT, --input INPUT\n                        string, folder to find TraSig's inputs\n  -o OUTPUT, --output OUTPUT\n                        string, folder to find TraSig's outputs\n  -d PROJECT, --project PROJECT\n                        string, project name\n  -g PREPROCESS, --preprocess PREPROCESS\n                        string, preprocessing steps applied to the data /\n                        project, default None\n  -b MODELNAME, --modelName MODELNAME\n                        string, name of the trajectory model\n  -t LISTTYPE, --listType LISTTYPE\n                        string, optional, interaction list type, default\n                        ligand_receptor\n  -p OTHERIDENTIFIER, --otherIdentifier OTHERIDENTIFIER\n                        string, optional, other identifier for the output,\n                        default None\n  -l NLAP, --nLap NLAP  integer, optional, sliding window size, default 20\n  -m METRIC, --metric METRIC\n                        string, optional, scoring metric, default dot\n  -z NAN2ZERO, --nan2zero NAN2ZERO\n                        boolean, optional, if treat nan as zero, default True\n  -n NUMPERMS, --numPerms NUMPERMS\n                        integer, optional, number of permutations, default\n                        10000\n  -s STARTINGTREATMENT, --startingTreatment STARTINGTREATMENT\n                        string, optional, way to treat values at the beginning\n                        of an edge with sliding window size smaller than nLap,\n                        None/parent/discard/smallerWindow, default\n                        smallerWindow, need to provide an extra input\n                        'path_info.pickle' for 'parent' option\n  -a ALIGNTYPE, --alignType ALIGNTYPE\n                        string, optional, how to align edges, options:\n                        unaligned/aligned-fixed/aligned-specific, default\n                        unaligned\n  -y GENEPAIRTYPE, --genePairType GENEPAIRTYPE\n                        string, optional, identifier for the type of genes to\n                        align, e.g. interaction/cell_cycle, default\n                        interaction\n  -f SMOOTH, --smooth SMOOTH\n                        float, optional, smoothing parameter for splines,\n                        default 1\n  -v OVERLAP, --overlap OVERLAP\n                        float, optional, overlap threshold for alignment,\n                        default 0.5\n  -r RATE, --rate RATE  integer, optional, sampling rate for aligned time\n                        points, default 1\n  -e ERRORTYPE, --errorType ERRORTYPE\n                        string, optional, type of distance metric for\n                        alignment (MSE, cosine or corr), default cosine\n  -k ARATE, --aRate ARATE\n                        float, optional, rate to sample parameter a for\n                        alignment, default 0.05\n  -j BRATE, --bRate BRATE\n                        float, optional, rate to sample parameter b for\n                        alignment, default 2.5\n\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/doraadong/TraSig/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9765470077463752,
      "result": {
        "original_header": "Updates-log",
        "type": "Text_excerpt",
        "value": "* 12-21-2021:   \n-- Add support for conducting temporal alignment and calculating scores using optimally aligned expression profiles  \n-- Add tutorial illustrating how to prepare inputs using user-defined trajectory, not necessarily from dynverse\n \n"
      },
      "source": "https://raw.githubusercontent.com/doraadong/TraSig/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8576776205198319,
      "result": {
        "original_header": "Analyze outputs from TraSig",
        "type": "Text_excerpt",
        "value": "Analyze outputs by (arguments are taken for example): \n```shell\npython analyze_outputs.py -i ../example/input -o ../example/output -d oligodendrocyte-differentiation-clusters_marques -g None -p None -b ti_slingshot -p None -n 100000 -s smallerWindow\n```\nThe usage of this command is listed as follows:  \n \n"
      },
      "source": "https://raw.githubusercontent.com/doraadong/TraSig/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/doraadong/TraSig/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2021 Dora Li\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/doraadong/TraSig/main/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "type": "Text_excerpt",
        "value": "This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details\n"
      },
      "source": "https://raw.githubusercontent.com/doraadong/TraSig/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "TraSig"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "doraadong"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 268078,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 105542,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 3144,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/doraadong/TraSig/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "doraadong",
          "type": "User"
        },
        "date_created": "2022-02-03T23:00:07Z",
        "date_published": "2022-02-03T23:16:15Z",
        "description": "TraSig (Trajectory-based Signalling genes inference) identifies interacting cell types pairs and significant ligand-receptors based on the expression of genes as well as the pseudo-time ordering of cells. For any two groups of cells that are expected to overlap in time, TraSig takes the pseudo-time ordering for each group and the expression of genes along the trajectory as input and then outputs an interaction score and p-value for each possible ligand-receptor pair. It also outputs a summary score for cell type pairs by combining individual ligand-receptors' scores.",
        "html_url": "https://github.com/doraadong/TraSig/releases/tag/v1.0.1",
        "name": "Genome Biology release ",
        "release_id": 58646644,
        "tag": "v1.0.1",
        "tarball_url": "https://api.github.com/repos/doraadong/TraSig/tarball/v1.0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/doraadong/TraSig/releases/58646644",
        "value": "https://api.github.com/repos/doraadong/TraSig/releases/58646644",
        "zipball_url": "https://api.github.com/repos/doraadong/TraSig/zipball/v1.0.1"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Prerequisites",
        "parent_header": [
          "Get-started"
        ],
        "type": "Text_excerpt",
        "value": "* Python >= 3.6\n* Python side-packages:   \n-- numpy >= 1.19.5  \n-- pandas >= 0.23.4  \n-- Bottleneck >= 1.3.2  \n-- statsmodels >= 0.12.1 (required for post-analysis only)  \n-- scipy >= 1.5.4 (required for post-analysis only)  \n-- matplotlib >= 3.3.4 (required for post-analysis only)  \n-- seaborn >= 0.11.0 (required for post-analysis only)\n"
      },
      "source": "https://raw.githubusercontent.com/doraadong/TraSig/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Run TraSig",
        "parent_header": [
          "Command-line"
        ],
        "type": "Text_excerpt",
        "value": "Run TraSig by (arguments are taken for example): \n\n```shell\nmain.py -i input -o output -d oligodendrocyte-differentiation-clusters_marques -g None -b ti_slingshot -n 1000 -s smallerWindow\n```\nThe usage of this command is listed as follows:  \n\n```shell\nusage: main.py [-h] -i INPUT -o OUTPUT -d PROJECT -g PREPROCESS -b MODELNAME\n               [-t LISTTYPE] [-l NLAP] [-m METRIC] [-z NAN2ZERO] [-n NUMPERMS]\n               [-p MULTIPROCESS] [-c NCORES] [-s STARTINGTREATMENT]\n               [-a ALIGNTYPE] [-y GENEPAIRTYPE] [-f SMOOTH] [-v OVERLAP]\n               [-r RATE] [-e ERRORTYPE] [-k ARATE] [-j BRATE]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i INPUT, --input INPUT\n                        string, folder to find inputs\n  -o OUTPUT, --output OUTPUT\n                        string, folder to put outputs\n  -d PROJECT, --project PROJECT\n                        string, project name\n  -g PREPROCESS, --preprocess PREPROCESS\n                        string, preprocessing steps applied to the data /\n                        project, default None\n  -b MODELNAME, --modelName MODELNAME\n                        string, name of the trajectory model\n  -t LISTTYPE, --listType LISTTYPE\n                        string, optional, interaction list type, default\n                        ligand_receptor\n  -l NLAP, --nLap NLAP  integer, optional, sliding window size, default 20\n  -m METRIC, --metric METRIC\n                        string, optional, scoring metric, default dot\n  -z NAN2ZERO, --nan2zero NAN2ZERO\n                        boolean, optional, if treat nan as zero, default True\n  -n NUMPERMS, --numPerms NUMPERMS\n                        integer, optional, number of permutations, default\n                        10000\n  -p MULTIPROCESS, --multiProcess MULTIPROCESS\n                        boolean, optional, if use multi-processing, default\n                        True\n  -c NCORES, --ncores NCORES\n                        integer, optional, number of cores to use for multi-\n                        processing, default 4\n  -s STARTINGTREATMENT, --startingTreatment STARTINGTREATMENT\n                        string, optional, way to treat values at the beginning\n                        of an edge with sliding window size smaller than nLap,\n                        None/parent/discard/smallerWindow, default\n                        smallerWindow, need to provide an extra input\n                        'path_info.pickle' for 'parent' option\n  -a ALIGNTYPE, --alignType ALIGNTYPE\n                        string, optional, how to align edges, options:\n                        unaligned/aligned-fixed/aligned-specific, default\n                        unaligned\n  -y GENEPAIRTYPE, --genePairType GENEPAIRTYPE\n                        string, optional, identifier for the type of genes to\n                        align, e.g. interaction/cell_cycle, default\n                        interaction\n  -f SMOOTH, --smooth SMOOTH\n                        float, optional, smoothing parameter for splines,\n                        default 1\n  -v OVERLAP, --overlap OVERLAP\n                        float, optional, overlap threshold for alignment,\n                        default 0.5\n  -r RATE, --rate RATE  integer, optional, sampling rate for aligned time\n                        points, default 1\n  -e ERRORTYPE, --errorType ERRORTYPE\n                        string, optional, type of distance metric for\n                        alignment (MSE, cosine or corr), default cosine\n  -k ARATE, --aRate ARATE\n                        float, optional, rate to sample parameter a for\n                        alignment, default 0.05\n  -j BRATE, --bRate BRATE\n                        float, optional, rate to sample parameter b for\n                        alignment, default 2.5\n```\n"
      },
      "source": "https://raw.githubusercontent.com/doraadong/TraSig/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Run TraSig on example data and analyze outputs",
        "parent_header": [
          "Tutorials"
        ],
        "type": "Text_excerpt",
        "value": "The example inputs and outputs can be found under the folder [example](example). You may follow the [tutorial](tutorials/Run_TraSig_on_example_data.ipynb) to run TraSig on the example data and analyze the outputs. You may also obtain the analysis outputs by running the aforementioned script [analyze_outputs](tutorials/analyze_outputs.py) using command-line. See the tutorial for more details. \n"
      },
      "source": "https://raw.githubusercontent.com/doraadong/TraSig/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-06 00:20:15",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 24
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Tutorials",
        "type": "Text_excerpt",
        "value": "Github rendering disables some functionalities of Jupyter notebooks. We recommend using [nbviewer](https://nbviewer.jupyter.org/) to view the following tutorials. \n"
      },
      "source": "https://raw.githubusercontent.com/doraadong/TraSig/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Run TraSig on example data and analyze outputs",
        "parent_header": [
          "Tutorials"
        ],
        "type": "Text_excerpt",
        "value": "The example inputs and outputs can be found under the folder [example](example). You may follow the [tutorial](tutorials/Run_TraSig_on_example_data.ipynb) to run TraSig on the example data and analyze the outputs. You may also obtain the analysis outputs by running the aforementioned script [analyze_outputs](tutorials/analyze_outputs.py) using command-line. See the tutorial for more details. \n"
      },
      "source": "https://raw.githubusercontent.com/doraadong/TraSig/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Preprocess liver organoid data",
        "parent_header": [
          "Tutorials"
        ],
        "type": "Text_excerpt",
        "value": "After downloading the raw count matrices from our data repository (GSE159491), you may follow [preprocess_liver_organoid](tutorials/preprocess_liver_organoid_data.ipynb) to preprocess the expression values, assign the cells with initial annotations and combine data from multiple time points.\n"
      },
      "source": "https://raw.githubusercontent.com/doraadong/TraSig/main/README.md",
      "technique": "header_analysis"
    }
  ]
}