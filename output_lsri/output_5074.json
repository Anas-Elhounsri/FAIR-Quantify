{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/rajewsky-lab/FLAMAnalysis"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-04-15T21:22:05Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-12-18T17:10:24Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Data Analysis For FLAM-Seq Third Generation RNA Sequencing"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9616079210348598,
      "result": {
        "original_header": "Perform FLAM-Seq Analysis",
        "type": "Text_excerpt",
        "value": "Before running this analysis pipeline, PacBio or Nanopore sequencing data need to ne converted to ```.fastq``` format.\nThis can be done using default software of respective sequencing systems.\nThe obtained ```.fastq``` file is the starting point for the analysis. \nIt is recommended to generate a new ```parameters.yaml``` file for each sample to be analyzed and store it in the\nrespective output folder. \n"
      },
      "source": "https://raw.githubusercontent.com/rajewsky-lab/FLAMAnalysis/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9096251600609994,
      "result": {
        "original_header": "Results",
        "type": "Text_excerpt",
        "value": "We recommend continuing your analysis with the ```*_gene_polyA_length.csv``` file generated in the BASH2*\nafter running the complete pipeline. This file can easily be loaded into R or Pandas for downstream analysis on poly(A)\ntails. \n"
      },
      "source": "https://raw.githubusercontent.com/rajewsky-lab/FLAMAnalysis/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8563750195340895,
      "result": {
        "original_header": "Further Info",
        "type": "Text_excerpt",
        "value": "FLAM-Seq has beed developed by Ivano Legnini, Salah Ayoub, Nikos Karaiskos and Jonathan Alles as members of the\n<a href= \"https://www.mdc-berlin.de/n-rajewsky\">Nikolaus Rajewsky Lab</a> at the <a href=\"https://www.mdc-berlin.de/\">\nMax Delbruck Center Berlin</a>. FLAM-Seq allows for sequencing of entire RNA molecules. A preprint describing the FLAM-Seq\nmethod can be found <a href=\"https://www.biorxiv.org/content/10.1101/547034v1\">here</a>.\n \n"
      },
      "source": "https://raw.githubusercontent.com/rajewsky-lab/FLAMAnalysis/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/rajewsky-lab/FLAMAnalysis/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/rajewsky-lab/FLAMAnalysis/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "rajewsky-lab/FLAMAnalysis"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "FLAM-Seq Data Analysis Pipeline"
      },
      "source": "https://raw.githubusercontent.com/rajewsky-lab/FLAMAnalysis/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9982708224517203,
      "result": {
        "original_header": "Perform FLAM-Seq Analysis",
        "type": "Text_excerpt",
        "value": "The pipeline can the simply be run using the ```FLAMSeqAnalysis.py``` script:\n```python3 /path/to/FLAMSeqAnalysis.py command -p /path/to/parameter.yaml```\n \n\ne.g. for running the complete pipeline\n```python3 /path/to/FLAMSeqAnalysis.py all -p /path/to/parameter.yaml```\nor for mapping and quantifying the reads\n```python3 /path/to/FLAMSeqAnalysis.py mapQuant -p /path/to/parameter.yaml```\n \n"
      },
      "source": "https://raw.githubusercontent.com/rajewsky-lab/FLAMAnalysis/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9587102151801055,
      "result": {
        "original_header": "Parameters.yaml",
        "type": "Text_excerpt",
        "value": "A template ```parameters.yaml``` file is provided with the pipeline. The file can be renamed but structure of keywords withing the\nfile (everything before the ':') must not be changed. All paths need to be adapted to user requirements. An example is\nshown below: \n\n```\nexperimentName: \"FLAMSeq_1\"               # Name of Experiment. This will be prefix for generated analysis files.\n\nexperiment:\n  rawFastq: \"/path/to/pacbioreads.fq\"     # Define Path to Input PacBio / Nanopore Reads in fastq format\n  outputDir: \"/path/to/outputDir\"         # Define Path to Output dir for writing analysis results. Pipeline will generate of dir is not present.\n  genomeIndexDir: \"/path/to/STARIndex\"    # Define Dir for STARLong Index for Mapping\n  annotationGTF: \"/path/to/GTFFile\"       # GTF File containing gene annotations for assigning reads to genes\n  genomeFasta: \"/path/to/genomeFasta\"     # Genome Fasta File containing genome sequence (that the index was generated from)\n\nsoftware:\n  STARlong: \"/path/to/STARlong\"           # Path to STARlong executable\n  featureCounts: \"/path/to/featureCounts\" # Path to FeatureCounts executable\n  nThreads: 8                             # Number of threads for mapping reads\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/rajewsky-lab/FLAMAnalysis/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8585121905188177,
      "result": {
        "original_header": "Perform FLAM-Seq Analysis",
        "type": "Text_excerpt",
        "value": "The pipeline can the simply be run using the ```FLAMSeqAnalysis.py``` script:\n```python3 /path/to/FLAMSeqAnalysis.py command -p /path/to/parameter.yaml```\n \n"
      },
      "source": "https://raw.githubusercontent.com/rajewsky-lab/FLAMAnalysis/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/rajewsky-lab/FLAMAnalysis/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "FLAMAnalysis"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "rajewsky-lab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 48564,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rajewsky-lab/FLAMAnalysis/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Software Dependencies",
        "parent_header": [
          "FLAM-Seq Data Analysis Pipeline"
        ],
        "type": "Text_excerpt",
        "value": "The analysis pipeline is implemented in Python3 and requires <a href=\"https://github.com/alexdobin/STAR/blob/master/bin/Linux_x86_64/STARlong\">STARlong</a>\nand <a href=\"http://subread.sourceforge.net/\">featureCounts</a> as addtional software. Packages and Software Versions used are listed below:\n\n```\npython 3.6.7 Anaconda, Inc.\nSTARlong 2.5.4b\nFeatureCounts 1.6.0\nregex 2018.2.21\npysam 0.14\npandas 0.23.4\nyaml 0.1.7\n```\n"
      },
      "source": "https://raw.githubusercontent.com/rajewsky-lab/FLAMAnalysis/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 18:41:55",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 7
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "FLAM-Seq Data Analysis Pipeline"
        ],
        "type": "Text_excerpt",
        "value": "\n    -h:                 Show help\n    -p, --parameters:   Parameter YAML file specifying configurations for analysis\n\n    all                 Run complete FLAM-Seq Analysis Pipeline. This includes all steps listed below:\n                        preprocess, quantTail, mapQuant, cleanGenomic, result\n\n    preprocess          Preprocess input fastq reads. Check if reads contain adapters and place reads in correct orientation.\n                        This step creates /preprocessDir and creates *_preprocessed_filtered.fq files\n                        containing preprocessed reads and *_preprocessed_filtered_error.fq, containing reads without\n                        adapters/poly(A) tails.\n\n    quantTail           Quantify poly(A) tail length and sequence from preprocessed reads. This step uses 2 Algorithms\n                        with different parameter combinations in order to extract putative poly(A) tail sequences from\n                        reads. This step creates /quantTailDir with *_trimmed_tail.fq, containing reads with\n                        poly(A) tail trimmed for later mapping, *_umis.txt, containing read names and read UMIs,\n                        *_tail_length.txt containing poly(A) tail length, sequence and read name and\n                        *_no_tail.fq containing reads without detectable poly(A) sequence.\n\n    mapQuant            Map trimmed reads and assign reads to genes. This step maps reads with trimmed poly(A) tail\n                        sequences using STARLong to genome index specified in parameters.yaml. Next aligned reads\n                        are assigned to gene models using FeatureCounts and GTF file specified in parameters.yaml.\n                        This step creates /mapQuantGeneDir with *__Aligned.sortedByCoord.out.bam containing\n                        mapped read BAM file (sorted), *_Aligned.sortedByCoord.out.bam.featureCounts containing read names\n                        tagged with gene-of-origin.\n\n    cleanGenomic        cleanGenomic compares the sequences derived from putative poly(A) tail with the genomic sequence\n                        of the mapping location of the respective read. This step 'cleans' nucleotides from 5'ends of putative\n                        poly(A) sequences from nucleotides which are encoded in the genome.\n                        This step requires genome fasta file specified in parameters.yaml.\n                        It creates /cleanGenomicDir with *_cleaned.bam conataining aligned reads filtered by\n                        reads with valid poly(A) tail, *_clean_genomic_tail_length.txt, containing cleaned poly(A)\n                        length/sequence and *_genomic_non_temp_tails.txt containing parts of each read that are not\n                        templated by genome.\n\n    result              Aggregate data from above steps into *_gene_polyA_length.csv. This file contains for each\n                        read poly(A) tail length and sequence, UMI and gene the read maps to. This step creates\n                        /resultDir.\n\n"
      },
      "source": "https://raw.githubusercontent.com/rajewsky-lab/FLAMAnalysis/master/README.md",
      "technique": "header_analysis"
    }
  ]
}