{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/frankkramer-lab/RCX"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2017-08-03T10:32:05Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-01-23T20:08:24Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "R package implementing the Cytoscape Exchange (CX) format"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "type": "Text_excerpt",
        "value": "Networks are a powerful and flexible methodology for expressing\nbiological knowledge for computation and communication. Biological\nnetworks can hold a variety of different types of information, like\ngenetic or metabolic interactions, gene, and transcriptional regulation,\nprotein-protein interaction (PPI), or cell signaling networks and\npathways. They often form a valuable resource for hypothesis generation\nand further investigations, and in the course of the analyses, they are\nprocessed and enriched with additional information from experiments. As\na result further networks are generated, whether as intermediate results\nthat should be documented in the process, as the outcome of those\nanalyses, or as visual representations and illustrations used in reports\nand publications. As a consequence, these resulting networks do not\nfollow anymore the strict rules the source networks were subjected,\ntherefore a more flexible format is needed to capture their content.\n\nIn addition, suitable solutions for transmission conflict with those for\nstorage, or usage in applications and analyses. Therefore, seamless\nconversion between those different formats becomes as important as the\ndata itself.\n"
      },
      "source": "https://raw.githubusercontent.com/frankkramer-lab/RCX/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "The Cytoscape Exchange (CX)",
        "parent_header": [
          "Introduction"
        ],
        "type": "Text_excerpt",
        "value": "A possible solution as flexible transmission format is provided by the\nCytoscape Exchange (CX) format. CX is a JSON-based, aspect-oriented data\nstructure, which means that the network is divided into several\nindependent modules (\u201caspects\u201d). This way, every aspect of a network,\nmeaning nodes, edges, its attributes, and visual representations can be\nhandled individually without interference. Each aspect has its own\nschema for its contained information, and links between aspects are\nrealized by referencing the unique internal IDs of other aspects. The CX\ndata model was developed by the NDEx project, in collaboration with the\nCytoscape Consortium\n(<a href=\"http://www.cytoscapeconsortium.org/\" class=\"uri\">http://www.cytoscapeconsortium.org/</a>)\nas a transmission format between their tools, and since adopted by many\nothers. More details about the CX data model can be found on its\ndocumentation website:\n<a href=\"https://home.ndexbio.org/data-model/\" class=\"uri\">https://home.ndexbio.org/data-model/</a>\n"
      },
      "source": "https://raw.githubusercontent.com/frankkramer-lab/RCX/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "The NDEx platform",
        "parent_header": [
          "Introduction"
        ],
        "type": "Text_excerpt",
        "value": "The Network Data Exchange, or NDEx, is an online commons for biological\nnetworks (Pratt et al., 2015, Cell Systems 1, 302-305, October 28, 2015\n\u00a92015 Elsevier\nInc.\u00a0[ScienceDirect](http://www.sciencedirect.com/science/article/pii/S2405471215001477)).\nIt is an open-source software framework to manipulate, store, and\nexchange networks of various types and formats. NDEx can be used to\nupload, share and publicly distribute networks while providing an output\nin formats, that can be used by plenty of other applications.\n\nThe public NDEx server is a network data commons that provides pathway\ncollections like the Pathway Interaction Database of the NCI\n(<a href=\"http://www.ndexbio.org/#/user/301a91c6-a37b-11e4-bda0-000c29202374\" class=\"uri\">http://www.ndexbio.org/#/user/301a91c6-a37b-11e4-bda0-000c29202374</a>)\nand the Cancer Cell Maps Initiative\n(<a href=\"http://www.ndexbio.org/#/user/b47268a6-8112-11e6-b0a6-06603eb7f303\" class=\"uri\">http://www.ndexbio.org/#/user/b47268a6-8112-11e6-b0a6-06603eb7f303</a>).\nPublic networks can be searched and retrieved from the platform for\nfurther use. Own networks can be uploaded and shared with certain\ncollaborators or groups privately or provided publicly to the community.\nFurthermore, private installation of the NDEx platform can be used to\nstore and collaborate on networks locally.\n\nThe ndexr package available on Bioconductor\n(<a href=\"https://doi.org/doi:10.18129/B9.bioc.ndexr\" class=\"uri\">https://doi.org/doi:10.18129/B9.bioc.ndexr</a>)\nallows connecting with the NDEx platform from within R. This package\nprovides an interface to query the public NDEx server, as well as\nprivate installations, to upload, download or modify biological\nnetworks.\n"
      },
      "source": "https://raw.githubusercontent.com/frankkramer-lab/RCX/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Cytoscape",
        "parent_header": [
          "Introduction"
        ],
        "type": "Text_excerpt",
        "value": "The most prominent software environment for biological network analysis\nand visualization is Cytoscape\n(<a href=\"https://cytoscape.org/\" class=\"uri\">https://cytoscape.org/</a>).\nIt provides support for large networks and comes with a rich set of\nfeatures for custom visualization, and advanced layout and analysis\nalgorithms. One of these visualization features is the\n\u201cattribute-to-visual mapping\u201d, where the network\u2019s data translates to\nits visual representation. Based on this visualization strategy,\nCytoscape contributed aspects to the CX-format to capture the visual\nrepresentation as part of the network. Because of these aspects, the\nvisualization not only can be documented along with the network, but\nalso reproduced on other platforms, and even shared between networks\nwith the same attributes used for creating the visualization.\n"
      },
      "source": "https://raw.githubusercontent.com/frankkramer-lab/RCX/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "RCX - an adaption of the CX format",
        "parent_header": [
          "Introduction"
        ],
        "type": "Text_excerpt",
        "value": "CX is a JSON-based data structure designed as a flexible model for\ntransmitting networks with a focus on flexibility, modularity, and\nextensibility. Although those features are widely used in common REST\nprotocols they don\u2019t quite fit the R way of thinking about data.\n\nThis package provides an adaption of the CX format to standard R data\nformats and types to create and modify, load, export, and visualize\nthose networks. This document aims to help the user to install and\nbenefit from the wide range of functionality of this implementation. For\nan overview of the differences of the RCX implementation to the CX\nspecification see [Appendix: The RCX and CX Data\nModel](vignettes/Appendix_The_RCX_and_CX_Data_Model.Rmd)\n"
      },
      "source": "https://raw.githubusercontent.com/frankkramer-lab/RCX/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "The basics",
        "type": "Text_excerpt",
        "value": "In the following, it will be explained, how to read and write networks\nfrom/to CX files, create and modify RCX networks, validate its contents\nand finally visualize them.\n"
      },
      "source": "https://raw.githubusercontent.com/frankkramer-lab/RCX/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Read and write CX files",
        "parent_header": [
          "The basics"
        ],
        "type": "Text_excerpt",
        "value": "Networks can be downloaded from the [NDEx\nplattform](http://ndexbio.org/) as CX files in JSON format. Those files\ncan be read, and are automatically transformed into RCX networks that\ncan be used in R. Here we load a provided example network from file:\n\n``` r\ncxFile <- system.file(\n  \"extdata\", \n  \"Imatinib-Inhibition-of-BCR-ABL-66a902f5-2022-11e9-bb6a-0ac135e8bacf.cx\", \n  package = \"RCX\"\n)\n\nrcx = readCX(cxFile)\n```\n\nThis network also can be accessed and downloaded from NDEx at\n<a href=\"https://www.ndexbio.org/viewer/networks/66a902f5-2022-11e9-bb6a-0ac135e8bacf\" class=\"uri\">https://www.ndexbio.org/viewer/networks/66a902f5-2022-11e9-bb6a-0ac135e8bacf</a>\n\nRCX networks can be saved in a similar manner:\n\n``` r\nwriteCX(rcx, \"path/to/some-file.cx\")\n```\n\nHowever, there might some errors occur while reading CX file. This might\nhappen, because the definition of the CX has changed over time, and so\nthe definition of some aspects. Therefore it is possible, that there are\nstill some networks stored at the NDEx platform following a deprecated\nformat. In those cases it might be helpful to process the CX network\nstep by step:\n\n**1.** just read the JSON content without parsing\n\n``` r\njson <- readJSON(cxFile)\n\nsubstr(json, 1, 77)\n```\n\n    ## [{\"numberVerification\":[{\"longNumber\":281474976710655}]},{\"metaData\":[{\"name\"\n\nThis also allows to handle a CX network in JSON format, even if it comes\nfrom a different source instead of a file.\n\n**2.** parse the JSON\n\n``` r\naspectList <- parseJSON(json)\n\nstr(aspectList, 2)\n```\n\n    ## List of 12\n    ##  $ :List of 1\n    ##   ..$ numberVerification:List of 1\n    ##  $ :List of 1\n    ##   ..$ metaData:List of 9\n    ##  $ :List of 1\n    ##   ..$ provenanceHistory:List of 1\n    ##  $ :List of 1\n    ##   ..$ nodes:List of 75\n    ##  $ :List of 1\n    ##   ..$ edges:List of 159\n    ##  $ :List of 1\n    ##   ..$ networkAttributes:List of 10\n    ##  $ :List of 1\n    ##   ..$ nodeAttributes:List of 1129\n    ##  $ :List of 1\n    ##   ..$ edgeAttributes:List of 229\n    ##  $ :List of 1\n    ##   ..$ cartesianLayout:List of 75\n    ##  $ :List of 1\n    ##   ..$ cyVisualProperties:List of 3\n    ##  $ :List of 1\n    ##   ..$ cyHiddenAttributes:List of 1\n    ##  $ :List of 1\n    ##   ..$ status:List of 1\n\nThe result of the parsing are nested lists containing all aspects and\nits contents. This format not easy to handle in R, but allows error\ncorrection previous to forming aspect and RCX objects.\n\n**3.** process the aspect data\n\n``` r\nrcx <- processCX(aspectList)\n```\n\nAll the above function for processing CX networks come with an option to\nshow the performed steps. This might be helpful for finding occurring\nerrors:\n\n``` r\nrcx <- readCX(cxFile, verbose = TRUE)\n```\n\n    ## Read file \"R/x86_64-pc-linux-gnu-library/4.0/RCX/extdata/Imatinib-Inhibition-of-BCR-ABL-66a902f5-2022-11e9-bb6a-0ac135e8bacf.cx\"...done!\n    ## Parse json...done!\n    ## Parsing nodes...create aspect...done!\n    ## Create RCX from parsed nodes...done!\n    ## Parsing edges...create aspect...done!\n    ## Add aspect \"edges\" to RCX...done!\n    ## Parsing node attributes...create aspect...done!\n    ## Add aspect \"nodeAttributes\" to RCX...done!\n    ## Parsing edge attributes...create aspect...done!\n    ## Add aspect \"edgeAttributes\" to RCX...done!\n    ## Parsing network attributes...create aspect...done!\n    ## Add aspect \"networkAttributes\" to RCX...done!\n    ## Parsing cartesian layout...create aspect...done!\n    ## Add aspect \"cartesianLayout\" to RCX...done!\n    ## Parsing Cytoscape visual properties...done!\n    ## - Create sub-objects...done!\n    ## - Create aspect...done!\n    ## Add aspect \"cyVisualProperties\" to RCX...done!\n    ## Parsing Cytoscape hidden attributes...create aspect...done!\n    ## Add aspect \"cyHiddenAttributes\" to RCX...done!\n    ## Parsing meta-data...done!\n    ## Ignore \"numberVerification\" aspect, not necessary in RCX!\n    ## Can't process aspect \"numberVerification\", so skip it...done!\n    ## Don't know what to do with a \"provenanceHistory\" aspect!\n    ## Can't process aspect \"provenanceHistory\", so skip it...done!\n    ## Ignore \"status\" aspect, not necessary in RCX!\n    ## Can't process aspect \"status\", so skip it...done!\n\nThis shows, that some aspects that are contained in the CX file are\nignored while creating the RCX network. Those are for example aspects\nneeded for transmission of the CX (`status`, `numberVerification`), or\ndeprecated aspects (`provenanceHistory`). For more details about the\ndifferences in aspects see [Appendix: The RCX and CX Data\nModel](Appendix_The_RCX_and_CX_Data_Model.Rmd).\n"
      },
      "source": "https://raw.githubusercontent.com/frankkramer-lab/RCX/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Explore the RCX object",
        "parent_header": [
          "The basics"
        ],
        "type": "Text_excerpt",
        "value": "The simplest way to have a look at the content of an RCX object is by\nprinting it:\n\n``` r\nprint(rcx)\n## OR:\nrcx\n```\n\nHowever, especially for large networks this can produce long and hardly\nreadable output. To get a better overview of the contained aspects, the\nmandatory and automatically generated `metaData` aspect provides\ninformation about the contained aspects. This includes information about\nthe number of elements or the highest used ID, if an aspect uses\ninternal IDs:\n\n``` r\nrcx$metaData\n```\n\n    ## Meta-data:\n    ##                 name version idCounter elementCount consistencyGroup\n    ## 1              nodes     1.0     11551           75                1\n    ## 2              edges     1.0     11554          159                1\n    ## 3     nodeAttributes     1.0        NA         1129                1\n    ## 4     edgeAttributes     1.0        NA          229                1\n    ## 5  networkAttributes     1.0        NA           10                1\n    ## 6    cartesianLayout     1.0        NA           75                1\n    ## 7 cyVisualProperties     1.0        NA            3                1\n    ## 8 cyHiddenAttributes     1.0        NA            1                1\n\nBesides exploring the RCX-object manually, a summary of the object, or\nsingle aspects, can provide more insight on them:\n\n``` r\nsummary(rcx$nodeAttributes)\n```\n\n    ##       propertyOf        name               value    \n    ##  Total     : 1129   Length:1129        Boolean:185  \n    ##  Unique ids:   75   Unique:34          Double : 92  \n    ##  Min.      :11321   Class :character   Integer: 68  \n    ##  Max.      :11551                      String :784\n\nWe already can quickly see that there are many different node attributes\nare used. The different node attributes are:\n\n``` r\nunique(rcx$nodeAttributes$name)\n```\n\n    ##  [1] \"sbo\"                   \"metaId\"                \"compartmentCode\"      \n    ##  [4] \"sbml type\"             \"sbml id\"               \"reversible\"           \n    ##  [7] \"sbml compartment\"      \"cyId\"                  \"label\"                \n    ## [10] \"sbml type ext\"         \"fast\"                  \"constant\"             \n    ## [13] \"units\"                 \"boundaryCondition\"     \"derivedUnits\"         \n    ## [16] \"sbml initial amount\"   \"value\"                 \"substanceUnits\"       \n    ## [19] \"hasOnlySubstanceUnits\" \"uniprot\"               \"inchikey\"             \n    ## [22] \"chebi\"                 \"biocyc\"                \"cas\"                  \n    ## [25] \"chemspider\"            \"kegg.compound\"         \"inchi\"                \n    ## [28] \"pubchem.compound\"      \"hmdb\"                  \"scale\"                \n    ## [31] \"exponent\"              \"kind\"                  \"multiplier\"           \n    ## [34] \"unitSid\"\n"
      },
      "source": "https://raw.githubusercontent.com/frankkramer-lab/RCX/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Visualize the network",
        "parent_header": [
          "The basics"
        ],
        "type": "Text_excerpt",
        "value": "This package provides simple functions to visualize the network encoded\nin the RCX object.\n\n``` r\nvisualize(rcx)\n```\n\n![Imatinib Inhibition of BCR-ABL\n(66a902f5-2022-11e9-bb6a-0ac135e8bacf)](vignettes/1_network_orig.png)\n\nThe visualization also utilizes the same JavaScript library as the NDEx\nplatform. Therefore the visual result is the same as when the network is\nuploaded to the NDEx platform. Additionally, this allows the\nvisualization to be exported as a single HTML file, which can directly\nbe hosted on a web-server or included in existing websites:\n\n``` r\nwriteHTML(rcx, \"path/to/some-file.html\")\n```\n\nNetworks with many nodes and edges, or those without a provided layout,\noften are difficult to interpret visually. To untangle the \u201chairball\u201d it\nis possible to apply different layout option provided by the\n[Cytoscape.js](https://js.cytoscape.org/) framework. A force driven\nlayout is a good starting point in those cases. For demonstration\npurposes, let\u2019s delete the visual layout of our network first:\n\n``` r\n## save them for later\noriginalVisualProperties <- rcx$cyVisualProperties\n\n## and delete them from the RCX network\nrcx$cyVisualProperties <- NULL\nrcx <- updateMetaData(rcx)\n\nrcx$metaData\n```\n\n    ## Meta-data:\n    ##                 name version idCounter elementCount consistencyGroup\n    ## 1              nodes     1.0     11551           75                1\n    ## 2              edges     1.0     11554          159                1\n    ## 3     nodeAttributes     1.0        NA         1129                1\n    ## 4     edgeAttributes     1.0        NA          229                1\n    ## 5  networkAttributes     1.0        NA           10                1\n    ## 6    cartesianLayout     1.0        NA           75                1\n    ## 7 cyHiddenAttributes     1.0        NA            1                1\n\nLets have a look at the visualization now:\n\n``` r\nvisualize(rcx, layout = c(name = \"cose\"))\n```\n\n![Force-driven visualization of the network without visual\nproperties](vignettes/1_network_no_cvp.png)\n\nUnfortunately no labels are shown in the network. We can fix that by\ndefining a simple pass-through mapping for the node labels and add it to\nthe network:\n\n``` r\ncyMapping <- createCyVisualPropertyMappings(\n  name= \"NODE_LABEL\" ,\n  type = \"PASSTHROUGH\",\n  definition = \"COL=label,T=string\"\n)\n\ncyVisualProperties <- createCyVisualProperties(\n  defaultNodes = createCyVisualProperty(\n    mappings = cyMapping\n  )\n)\n\nrcx <- updateCyVisualProperties(rcx, cyVisualProperties)\n```\n\nBy default the visualization is opened in RStudio, but it also can be\nforced to open in an external browser. The `Cytoscape.js` parameters\nused to customize the layout algorithm can be found in it documentation\nat\n<a href=\"https://js.cytoscape.org/#layouts/cose\" class=\"uri\">https://js.cytoscape.org/#layouts/cose</a>\n\n``` r\nvisualize(\n  rcx, \n  layout = c(\n    name=\"cose\", \n    idealEdgeLength=\"80\", \n    edgeElasticity=\"250\"), \n  openExternal = TRUE)\n```\n\n![](vignettes/1_network_cose_with_label.png)\n"
      },
      "source": "https://raw.githubusercontent.com/frankkramer-lab/RCX/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Validation",
        "parent_header": [
          "The basics"
        ],
        "type": "Text_excerpt",
        "value": "The correctness of the RCX network is important for the conversion to\nCX, and therefore to be used at all platforms and tools. The validity of\nthe an RCX network can be checked simply:\n\n``` r\nvalidate(rcx)\n```\n\n    ## Checking Nodes Aspect:\n    ## - Is object of class \"NodesAspect\"...OK\n    ## - All required columns present (id)...OK\n    ## - Column (id) doesn't contain any NA values...OK\n    ## - At least one node present...OK\n    ## - Column (id) contains only unique values...OK\n    ## - Column (id) only contains numeric values...OK\n    ## - Column (id) only contains positive (>=0) values...OK\n    ## - No merge artefacts present (i.e. column with old ids: oldId)...OK\n    ## - Only allowed columns present (id, name, represents)...OK\n    ## >> Nodes Aspect: OK\n    ## \n    ## Checking Edges Aspect:\n    ## - Is object of class \"EdgesAspect\"...OK\n    ## - All required columns present (id, source, target)...OK\n    ## - Column (id) doesn't contain any NA values...OK\n    ## - Column (id) contains only unique values...OK\n    ## - Column (id) only contains numeric values...OK\n    ## - Column (id) only contains positive (>=0) values...OK\n    ## - Column (source) doesn't contain any NA values...OK\n    ## - Column (source) only contains numeric values...OK\n    ## - Column (source) only contains positive (>=0) values...OK\n    ## - Column (target) doesn't contain any NA values...OK\n    ## - Column (target) only contains numeric values...OK\n    ## - Column (target) only contains positive (>=0) values...OK\n    ## - No merge artefacts present (i.e. column with old ids: oldId)...OK\n    ## - Only allowed columns present (id, source, target, name, interaction)...OK\n    ## >> Edges Aspect: OK\n    ## \n    ## Checking Node Attributes Aspect:\n    ## - Is object of class \"NodeAttributesAspect\"...OK\n    ## - All required columns present (propertyOf, name, value, dataType, isList)...OK\n    ## - Combination of columns (propertyOf, name) contains only unique values...OK\n    ## - Column (propertyOf) doesn't contain any NA values...OK\n    ## - Column (propertyOf) only contains numeric values...OK\n    ## - Column (propertyOf) only contains positive (>=0) values...OK\n    ## - Is the column (name) a character vector...OK\n    ## - Is the column (value) a list...OK\n    ## - Column (dataType) doesn't contain any NA values...OK\n    ## - Is the column (dataType) a character vector...OK\n    ## - All values of dataType are in the allowed set (boolean, integer, long, double, string)...OK\n    ## - Column (isList) doesn't contain any NA values...OK\n    ## - Column (isList) only contains logical values...OK\n    ## - Only allowed columns present (propertyOf, name, value, dataType, isList)...OK\n    ## >> Node Attributes Aspect: OK\n    ## \n    ## Checking Edge Attributes Aspect:\n    ## - Is object of class \"EdgeAttributesAspect\"...OK\n    ## - All required columns present (propertyOf, name, value, dataType, isList)...OK\n    ## - Combination of columns (propertyOf, name) contains only unique values...OK\n    ## - Column (propertyOf) doesn't contain any NA values...OK\n    ## - Column (propertyOf) only contains numeric values...OK\n    ## - Column (propertyOf) only contains positive (>=0) values...OK\n    ## - Is the column (name) a character vector...OK\n    ## - Is the column (value) a list...OK\n    ## - Column (dataType) doesn't contain any NA values...OK\n    ## - Is the column (dataType) a character vector...OK\n    ## - All values of dataType are in the allowed set (boolean, integer, long, double, string)...OK\n    ## - Column (isList) doesn't contain any NA values...OK\n    ## - Column (isList) only contains logical values...OK\n    ## - Only allowed columns present (propertyOf, name, value, dataType, isList)...OK\n    ## >> Edge Attributes Aspect: OK\n    ## \n    ## Checking Network Attributes Aspect:\n    ## - Is object of class \"NetworkAttributesAspect\"...OK\n    ## - All required columns present (name, value, dataType, isList)...OK\n    ## - Column (name) contains only unique values...OK\n    ## - Is the column (name) a character vector...OK\n    ## - Is the column (value) a list...OK\n    ## - Column (dataType) doesn't contain any NA values...OK\n    ## - Is the column (dataType) a character vector...OK\n    ## - All values of dataType are in the allowed set (boolean, integer, long, double, string)...OK\n    ## - Column (isList) doesn't contain any NA values...OK\n    ## - Column (isList) only contains logical values...OK\n    ## - Only allowed columns present (name, value, dataType, isList)...OK\n    ## >> Network Attributes Aspect: OK\n    ## \n    ## Checking Cartesian Layout Aspect:\n    ## - Is object of class \"CartesianLayoutAspect\"...OK\n    ## - All required columns present (node, x, y)...OK\n    ## - Column (node) contains only unique values...OK\n    ## - Column (node) only contains numeric values...OK\n    ## - Column (node) doesn't contain any NA values...OK\n    ## - Column (x) only contains numeric values...OK\n    ## - Column (x) doesn't contain any NA values...OK\n    ## - Column (y) only contains numeric values...OK\n    ## - Column (y) doesn't contain any NA values...OK\n    ## - Only allowed columns present (node, x, y, z)...OK\n    ## >> Cartesian Layout Aspect: OK\n    ## \n    ## Checking Cytoscape Visual Properties Aspect:\n    ## - Is object of class \"CyVisualPropertiesAspect\"...OK\n    ## - Is object a list...OK\n    ## - Is a named list (\"network\", \"nodes\", \"edges\", \"defaultNodes\" or \"defaultEdges\")...OK\n    ## - The list only contains entries of class \"CyVisualProperty\"...OK\n    ## - At least one of the elements present (network, nodes, edges, defaultNodes, defaultEdges)...OK\n    ## For defaultNodes: Checking Cytoscape Visual Property sub-aspect:\n    ## - Is object of class \"CyVisualProperty\"...OK\n    ## - Is object a list...OK\n    ## - Is a named list (\"appliesTo\", \"view\", \"properties\", \"dependencies\" or \"mappings\")...OK\n    ## - List element (appliesTo) only contains numeric values...OK\n    ## - List element (view) only contains numeric values...OK\n    ## - Combination of columns (appliesTo, view) contains only unique values...OK\n    ## - At least one of the elements present (properties, dependencies, mappings)...OK\n    ##   Checking Cytoscape Visual Property Mappings:\n    ## - Is mappings a list...OK\n    ## - The list only contains entries of class \"CyVisualPropertyMappings\"...OK\n    ## - All required columns present (name, type, definition)...OK\n    ## - All list elements of name contain only character values...OK\n    ## - All list elements of name don't contain any NA values...OK\n    ## - All list elements (name) contain only unique values...OK\n    ## - All list elements of type contain only character values...OK\n    ## - All list elements of type don't contain any NA values...OK\n    ## - All list elements of definition contain only character values...OK\n    ## - All list elements of definition don't contain any NA values...OK\n    ## - Only allowed columns present (name, type, definition)...OK\n    ## >> Cytoscape Visual Property sub-aspect: OK\n    ## >> Cytoscape Visual Properties Aspect: OK\n    ## \n    ## Checking Cytoscape Hidden Attributes Aspect:\n    ## - Is object of class \"CyHiddenAttributesAspect\"...OK\n    ## - All required columns present (name, value, dataType, isList)...OK\n    ## - Column (name) contains only unique values...OK\n    ## - Is the column (name) a character vector...OK\n    ## - Is the column (value) a list...OK\n    ## - Column (dataType) doesn't contain any NA values...OK\n    ## - Is the column (dataType) a character vector...OK\n    ## - All values of dataType are in the allowed set (boolean, integer, long, double, string)...OK\n    ## - Column (isList) doesn't contain any NA values...OK\n    ## - Column (isList) only contains logical values...OK\n    ## - Only allowed columns present (name, value, dataType, isList)...OK\n    ## >> Cytoscape Hidden Attributes Aspect: OK\n    ## \n    ## Checking RCX:\n    ## - Is object of class \"RCX\"...OK\n    ## - nodes aspect is present...OK\n    ## - Validate nodes aspect...OK\n    ## - Validate edges aspect...OK\n    ##   - Reference aspect (nodes) present and correct...OK\n    ##   - All id references exist (EdgesAspect$source ids in NodesAspect$id)...OK\n    ##   - All id references exist (EdgesAspect$target ids in NodesAspect$id)...OK\n    ## - Validate node attributes aspect...OK\n    ##   - Reference aspect (nodes) present and correct...OK\n    ##   - All id references exist (NodeAttributesAspect$propertyOf ids in NodesAspect$id)...OK\n    ## - Validate edge attributes aspect...OK\n    ##   - Reference aspect (edges) present and correct...OK\n    ##   - All id references exist (EdgeAttributesAspect$propertyOf ids in EdgesAspect$id)...OK\n    ## - Validate network attributes aspect...OK\n    ## - Validate cartesian layout aspect...OK\n    ##   - Reference aspect (nodes) present and correct...OK\n    ##   - All id references exist (CartesianLayoutAspect$node ids in NodesAspect$id)...OK\n    ## - Validate cytoscape visual property aspect...OK\n    ## - Validate cytoscape hidden attributes aspect...OK\n    ## >> RCX: OK\n\nThe verbose output also shows at which tests are performed. Let\u2019s\nmanually introduce an error in an aspect and validate only this one\nagain. Therefore we simply duplicate a node ID.\n\n``` r\nnodes <- rcx$nodes\nnodes$id[1] <- nodes$id[2]\n\ntest <- validate(nodes)\n```\n\n    ## Checking Nodes Aspect:\n    ## - Is object of class \"NodesAspect\"...OK\n    ## - All required columns present (id)...OK\n    ## - Column (id) doesn't contain any NA values...OK\n    ## - At least one node present...OK\n    ## - Column (id) contains only unique values...FAIL\n    ## - Column (id) only contains numeric values...OK\n    ## - Column (id) only contains positive (>=0) values...OK\n    ## - No merge artefacts present (i.e. column with old ids: oldId)...OK\n    ## - Only allowed columns present (id, name, represents)...OK\n    ## >> Nodes Aspect: FAIL\n\n``` r\ntest\n```\n\n    ## [1] FALSE\n\nAs expected, the test fails and returns `FALSE`.\n"
      },
      "source": "https://raw.githubusercontent.com/frankkramer-lab/RCX/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9963036198464179,
      "result": {
        "original_header": "Conversion to R graph data models",
        "type": "Text_excerpt",
        "value": "The RCX package provides conversion to and from objects of iGraph and\nBioconductor graph, both widely used libraries for graph manipulation\nand network analysis.\n \n"
      },
      "source": "https://raw.githubusercontent.com/frankkramer-lab/RCX/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9643755729847187,
      "result": {
        "original_header": "igraph",
        "type": "Text_excerpt",
        "value": "igraph is a library for creating and manipulating graphs and analyzing\n(especially large) networks. RCX networks can be simply converted to\nigraph objects as follows:\n``` r\nlibrary(igraph)\n```\n \nTo ensure a consistent conversion in both direction, some conventions\nhave to be matched: For example avoiding collisions between `name` used\nin nodes, `name` used as nodes attribute, and the `name` used by igraph,\nthe first two were re-named in igraph to `nodeName` and\n`attribute...name` respectively. A similar convention is used for the\ncartesian coordinates: In the igraph object they are saved as\n`cartesianLayout...x`, `cartesianLayout...y`, and `cartesianLayout...z`.\nIf the vertex attributes match this naming convention, they assigned to\nthe correct aspect when converted back:\n``` r\nrcxFromIg <- fromIgraph(ig)\n```\nIgraph objects can not hold information about the visual representation\nof the network, and therefore the Cytoscape aspects are lost in the\nconversion. But we can simply add the `CyVisualProperties` aspect we\nsaved previously to get back to the original layout:\n``` r\nrcxFromIg <- updateCyVisualProperties(rcxFromIg, originalVisualProperties)\n```\n \n![Imatinib Inhibition of BCR-ABL\n(66a902f5-2022-11e9-bb6a-0ac135e8bacf)](vignettes/1_network_orig.png)\n \n"
      },
      "source": "https://raw.githubusercontent.com/frankkramer-lab/RCX/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9197761638103482,
      "result": {
        "original_header": "Bioconductor graph (graphNEL)",
        "type": "Text_excerpt",
        "value": "Bioconductor graph is a package that implements some simple graph\nhandling capabilities. It can handle multi-edges, but only if the graph\nis directed and the source and target start and end not between the same\nnodes. Unfortunaltelly this is the case in our sample network. A quick\nfix is simply switching the direction of source and target for the\nmulti-edges:\n``` r\ndubEdges <- duplicated(rcx$edges[c(\"source\", \"target\")])\n\ns <- rcx$edges$source\nrcx$edges$source[dubEdges] <- rcx$edges$target[dubEdges]\nrcx$edges$target[dubEdges] <- s[dubEdges]\n\ngNel <- toGraphNEL(rcx, directed = TRUE)\nrcxBack <- fromGraphNEL(gNel)\n```\nThen we can simply convert the RCX to a graphNEL object:\n``` r\ngNel <- toGraphNEL(rcx, directed = TRUE)\ngNel\n```\n \n    ## A graphNEL graph with directed edges\n    ## Number of Nodes = 75 \n    ## Number of Edges = 159 \nFor the conversion igraph is used as an intermediate format, therefore,\nthe same conventions apply as for the igraph conversion. The conversion\nback to the RCX object works analogously:\n``` r\nrcxBack <- fromGraphNEL(gNel)\nrcxBack$metaData\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/frankkramer-lab/RCX/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/frankkramer-lab/RCX/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "faq": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Errors, questions and suggestions",
        "type": "Text_excerpt",
        "value": "If you have any questions to the usage of this package, suggestions for the further development of this package or encountered any problems in the process of the installation or while the usage:\n\nPleas feel free to open a new [issue on our bord](https://github.com/frankkramer-lab/RCX/issues)!\n\n"
      },
      "source": "https://raw.githubusercontent.com/frankkramer-lab/RCX/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/frankkramer-lab/RCX/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "frankkramer-lab/RCX"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Introduction"
      },
      "source": "https://raw.githubusercontent.com/frankkramer-lab/RCX/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/frankkramer-lab/RCX/master/inst/script/WP3633-d1663a2f-56bc-11eb-9e72-0ac135e8bacf.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/frankkramer-lab/RCX/master/inst/script/RCX_Data_Structure.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/frankkramer-lab/RCX/master/inst/script/Imatinib-Inhibition-of-BCR-ABL-66a902f5-2022-11e9-bb6a-0ac135e8bacf.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/frankkramer-lab/RCX/master/vignettes/1_network_orig.png"
      },
      "source": "https://raw.githubusercontent.com/frankkramer-lab/RCX/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/frankkramer-lab/RCX/master/vignettes/1_network_no_cvp.png"
      },
      "source": "https://raw.githubusercontent.com/frankkramer-lab/RCX/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/frankkramer-lab/RCX/master/vignettes/1_network_cose_with_label.png"
      },
      "source": "https://raw.githubusercontent.com/frankkramer-lab/RCX/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/frankkramer-lab/RCX/master/vignettes/1_network_orig.png"
      },
      "source": "https://raw.githubusercontent.com/frankkramer-lab/RCX/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "For installing packages from github the `devtools` package is the most common approach.\nHowever, it requires XML libraries installed on the system which can cause problems while installation due to unmet dependencies.\nThe `remotes` package covers the functionality to download and install R packages stored in 'GitHub', 'GitLab', 'Bitbucket', 'Bioconductor', or plain 'subversion' or 'git' repositories without depending on XML libraries.\nIf `devtools` is already installed, of course it can be used, otherwise it is recommended to use the lightweight `remotes` package.\n\n**From github using remotes:**\n\nFor installing packages from github the `devtools` package is the most common approach.\nHowever, it requires XML libraries installed on the system which can cause problems while installation due to unmet dependencies.\nThe `remotes` package covers the functionality to download and install R packages stored in 'GitHub', 'GitLab', 'Bitbucket', 'Bioconductor', or plain 'subversion' or 'git' repositories without depending on XML libraries.\nIf `devtools` is already installed, of course it can be used, otherwise it is recommended to use the lightweight `remotes` package.\n\n**From github using remotes:**\n\n``` r\nif(!\"remotes\" %in% installed.packages()){\n  install.packages(\"remotes\")\n}\nif(!\"RCX\" %in% installed.packages()){\n  remotes::install_github(\"frankkramer-lab/RCX\")\n}\nlibrary(RCX)\n```\n\n**From github using devtools:**\n\n``` r\nif(!\"devtools\" %in% installed.packages()){\n  install.packages(\"devtools\")\n}\nif(!\"RCX\" %in% installed.packages()){\n  devtools::install_github(\"frankkramer-lab/RCX\")\n}\nlibrary(RCX)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/frankkramer-lab/RCX/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.947633622953459,
      "result": {
        "original_header": "igraph",
        "type": "Text_excerpt",
        "value": "    ## \n    ## Attaching package: 'igraph' \n"
      },
      "source": "https://raw.githubusercontent.com/frankkramer-lab/RCX/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9998974048573317,
      "result": {
        "original_header": "Session info",
        "type": "Text_excerpt",
        "value": "    ## R version 4.0.3 (2020-10-10)\n    ## Platform: x86_64-pc-linux-gnu (64-bit)\n    ## Running under: Ubuntu 20.04.3 LTS\n    ## \n    ## Matrix products: default\n    ## BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0\n    ## LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0\n    ## \n    ## locale:\n    ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n    ##  [3] LC_TIME=de_DE.UTF-8        LC_COLLATE=en_US.UTF-8    \n    ##  [5] LC_MONETARY=de_DE.UTF-8    LC_MESSAGES=en_US.UTF-8   \n    ##  [7] LC_PAPER=de_DE.UTF-8       LC_NAME=C                 \n    ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n    ## [11] LC_MEASUREMENT=de_DE.UTF-8 LC_IDENTIFICATION=C       \n    ## \n    ## attached base packages:\n    ## [1] stats     graphics  grDevices utils     datasets  methods   base     \n    ## \n    ## other attached packages:\n    ## [1] igraph_1.2.6 RCX_0.99.0   knitr_1.33  \n    ## \n    ## loaded via a namespace (and not attached):\n    ##  [1] Rcpp_1.0.7          digest_0.6.27       plyr_1.8.6         \n    ##  [4] jsonlite_1.7.2      stats4_4.0.3        formatR_1.11       \n    ##  [7] magrittr_2.0.1      evaluate_0.14       graph_1.68.0       \n    ## [10] rlang_0.4.11        stringi_1.6.2       rmarkdown_2.9      \n    ## [13] tools_4.0.3         stringr_1.4.0       parallel_4.0.3     \n    ## [16] xfun_0.24           yaml_2.2.1          compiler_4.0.3     \n    ## [19] BiocGenerics_0.36.1 pkgconfig_2.0.3     htmltools_0.5.1.1\n \n"
      },
      "source": "https://raw.githubusercontent.com/frankkramer-lab/RCX/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/frankkramer-lab/RCX/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2021 Florian Auer\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/frankkramer-lab/RCX/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "RCX"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "frankkramer-lab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 2193480,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 418010,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 3708,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/frankkramer-lab/RCX/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 02:16:13",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 8
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Get information about the networks",
        "type": "Text_excerpt",
        "value": "It is always useful to get some basic information about the network. For\nexample this can be the number of elements in the different aspects of\nthe network:\n\n``` r\ncountElements(rcx)\n```\n\n    ##              NodesAspect           MetaDataAspect              EdgesAspect \n    ##                       75                       NA                      159 \n    ##     NodeAttributesAspect     EdgeAttributesAspect  NetworkAttributesAspect \n    ##                     1129                      229                       10 \n    ##    CartesianLayoutAspect CyHiddenAttributesAspect CyVisualPropertiesAspect \n    ##                       75                        1                        1\n\nThis also works for single aspects:\n\n``` r\ncountElements(rcx$nodes)\n```\n\n    ## [1] 75\n\nTo determine, if an aspect contains IDs (on the contrary to knowing it\nbeforehand), this can be checked with:\n\n``` r\nhasIds(rcx$nodes)\n```\n\n    ## [1] TRUE\n\nIf an aspect has IDs, one can check what the highest used ID is, to know\nat which ID the next elements have to continue before adding them. This\ncan even be done for the whole network at once.\n\n``` r\nmaxId(rcx$nodes)\n```\n\n    ## [1] 11551\n\n``` r\nmaxId(rcx)\n```\n\n    ## NodesAspect EdgesAspect \n    ##       11551       11554\n\nSince we now know, that the nodes aspect has IDs, we can also determine\nthe name of the property that holds the IDs:\n\n``` r\nidProperty(rcx$nodes)\n```\n\n    ## [1] \"id\"\n\nOther aspects use those IDs to reference to them. Let\u2019s find out, which\naspect is referred by others:\n\n``` r\nreferredBy(rcx)\n```\n\n    ## $NodesAspect\n    ## [1] \"EdgesAspect\"           \"NodeAttributesAspect\"  \"CartesianLayoutAspect\"\n    ## \n    ## $EdgesAspect\n    ## [1] \"EdgeAttributesAspect\"\n\nThe nodes aspect is referred by the edges aspect, so we can find out\nwhich properties of the edges aspect refer to it:\n\n``` r\nrefersTo(rcx$edges)\n```\n\n    ##        source        target \n    ## \"NodesAspect\" \"NodesAspect\"\n\nIt might have gotten to your attention, that there is a difference\nbetween the aspect name and the aspect class. This has been done\nintentionally to avoid naming conflicts. The different naming can be\nconverted to each other:\n\n``` r\n## all classes\naspectClasses\n```\n\n    ##                        rcx                   metaData \n    ##                      \"RCX\"           \"MetaDataAspect\" \n    ##                      nodes                      edges \n    ##              \"NodesAspect\"              \"EdgesAspect\" \n    ##             nodeAttributes             edgeAttributes \n    ##     \"NodeAttributesAspect\"     \"EdgeAttributesAspect\" \n    ##          networkAttributes            cartesianLayout \n    ##  \"NetworkAttributesAspect\"    \"CartesianLayoutAspect\" \n    ##                   cyGroups         cyVisualProperties \n    ##           \"CyGroupsAspect\" \"CyVisualPropertiesAspect\" \n    ##         cyHiddenAttributes         cyNetworkRelations \n    ## \"CyHiddenAttributesAspect\" \"CyNetworkRelationsAspect\" \n    ##              cySubNetworks              cyTableColumn \n    ##      \"CySubNetworksAspect\"      \"CyTableColumnAspect\"\n\n``` r\n## class of nodes\naspectName2Class(\"nodes\")\n```\n\n    ##         nodes \n    ## \"NodesAspect\"\n\n``` r\n## accession name of NodesAspect\naspectClass2Name(\"NodesAspect\")\n```\n\n    ## [1] \"nodes\"\n\n``` r\n## back and forth\nclass(rcx[[aspectClass2Name(\"NodesAspect\")]])\n```\n\n    ## [1] \"NodesAspect\" \"data.frame\"\n\n**Note:** These function can help especially for writing extension to\nthe RCX data model (see [03 Extending the RCX Data\nModel](vignettes/Extending_the_RCX_Data_Model.Rmd)).\n"
      },
      "source": "https://raw.githubusercontent.com/frankkramer-lab/RCX/master/README.md",
      "technique": "header_analysis"
    }
  ]
}