{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Ebedthan/hyperex"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-08-02T02:24:23Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-02-03T09:51:10Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Hypervariable region primer-based extractor for 16S rRNA and other SSU/LSU sequences."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.8927535195252158,
      "result": {
        "original_header": "About",
        "type": "Text_excerpt",
        "value": "HyperEx (pronounced \"Hyper Ex\" for Hypervariable region Extractor) is a tool that extracts 16S ribosomal RNA (rRNA) hypervariable region based on a set of primers. By default when no option is specified, hyperex extracts all hypervariable region from the supplied sequences assuming 16S rRNA sequences. To do this it has a set of built-in primer sequences which are universal 16S primers sequences.\nNevertheless, the user can choose to specify the wanted region by specifying the `--region` option or by providing the primer sequences using `--forward-primer` and `--reverse-primer`. The `--region` option takes only the region names like \"v1v2\" or \"v4v5\" while the `--forward-primer` and `--reverse-primer` takes only the sequences which can contains IUPAC ambiguities.  \nFor more than one needed region, one can use multiple time the `--region`, `--forward-primer`, `reverse-primer` options to specify the wanted region. Theses option takes only one argument, but can be repeat multiple time (see Examples below). \n"
      },
      "source": "https://raw.githubusercontent.com/Ebedthan/hyperex/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Ebedthan/hyperex/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Ebedthan/hyperex/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Ebedthan/hyperex"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/Ebedthan/hyperex/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Using prebuilt binaries",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "Please see the [releases page](https://github.com/Ebedthan/hyperex/releases) for prebuilt binaries for major operating system\n"
      },
      "source": "https://raw.githubusercontent.com/Ebedthan/hyperex/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "From crates.io",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "If you already have a functional rust installation you can easily do:\n\n```\ncargo install hyperex\n```\n\nAnd that's all!\n"
      },
      "source": "https://raw.githubusercontent.com/Ebedthan/hyperex/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "From source",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "```\ngit clone https://github.com/Ebedthan/hyperex.git\ncd hyperex\n\ncargo build --release\ncargo test\n\n# To install hyperex in current directory\ncargo install --path .\n```\n\nAnd you are good to go!\n\n"
      },
      "source": "https://raw.githubusercontent.com/Ebedthan/hyperex/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9922856263515429,
      "result": {
        "original_header": "Note",
        "type": "Text_excerpt",
        "value": "hyperex use colored output in help, nevertheless hyperex honors [NO_COLORS](https://no-color.org/) environment variable.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Ebedthan/hyperex/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8681380417785409,
      "result": {
        "original_header": "Bugs",
        "type": "Text_excerpt",
        "value": "Submit problems or requests to the [Issue Tracker](https://github.com/Ebedthan/hyperex/issues).\n \n"
      },
      "source": "https://raw.githubusercontent.com/Ebedthan/hyperex/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Ebedthan/hyperex/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "16s-rrna, bioinformatics, rust-lang"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2021 Anicet Ebou\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
      },
      "source": "https://raw.githubusercontent.com/Ebedthan/hyperex/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Ebedthan/hyperex/main/img/hyperex.png"
      },
      "source": "https://raw.githubusercontent.com/Ebedthan/hyperex/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "hyperex"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "Ebedthan"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Rust",
        "size": 32482,
        "type": "Programming_language",
        "value": "Rust"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Ebedthan/hyperex/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "Ebedthan",
          "type": "User"
        },
        "date_created": "2021-08-18T20:34:31Z",
        "date_published": "2021-08-18T20:35:07Z",
        "html_url": "https://github.com/Ebedthan/hyperex/releases/tag/v0.1.0",
        "name": "hyperex v0.1.0",
        "release_id": 48071751,
        "tag": "v0.1.0",
        "tarball_url": "https://api.github.com/repos/Ebedthan/hyperex/tarball/v0.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/Ebedthan/hyperex/releases/48071751",
        "value": "https://api.github.com/repos/Ebedthan/hyperex/releases/48071751",
        "zipball_url": "https://api.github.com/repos/Ebedthan/hyperex/zipball/v0.1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Mandatory",
        "parent_header": [
          "Requirements"
        ],
        "type": "Text_excerpt",
        "value": "- [Rust](https://rust-lang.org) in stable channel\n"
      },
      "source": "https://raw.githubusercontent.com/Ebedthan/hyperex/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Optional",
        "parent_header": [
          "Requirements"
        ],
        "type": "Text_excerpt",
        "value": "- libgz for gz file support\n- liblzma for xz file support\n- libbzip2 for bzip2 file support\n\n"
      },
      "source": "https://raw.githubusercontent.com/Ebedthan/hyperex/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "By default with no options",
        "parent_header": [
          "How to run hyperex ?"
        ],
        "type": "Text_excerpt",
        "value": "```\n# reading data from a specified file\nhyperex file.fa\n\n# reading data from standard input\ncat file.fa | hyperex\n```\n"
      },
      "source": "https://raw.githubusercontent.com/Ebedthan/hyperex/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Using built-in 16S primer names",
        "parent_header": [
          "How to run hyperex ?"
        ],
        "type": "Text_excerpt",
        "value": "```\n# reading data from a specified file\nhyperex -f 27F -r 337R file.fa.gz\n\n# reading data from standard input\nzcat file.fa.gz | hyperex -f 27F -r 337R\n```\n"
      },
      "source": "https://raw.githubusercontent.com/Ebedthan/hyperex/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Using built-in 16S region names",
        "parent_header": [
          "How to run hyperex ?"
        ],
        "type": "Text_excerpt",
        "value": "```\n# reading data from a specified file\nhyperex --region v3v4 file.fa.xz\n\n# reading data from standard input\nxzcat file.fa.xz | hyperex --region v3v4\n```\n"
      },
      "source": "https://raw.githubusercontent.com/Ebedthan/hyperex/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Using custom primer sequences",
        "parent_header": [
          "How to run hyperex ?"
        ],
        "type": "Text_excerpt",
        "value": "```\n# reading data from a specified file\nhyperex -p prefix --forward-primer ATCG --reverse-primer TYAATG file.fa.bz2\n\n# reading data from standard input\nbzcat file.fa.bz2 | hyperex -p prefix --forward-primer ATCG --reverse-primer TYAATG\n```\n"
      },
      "source": "https://raw.githubusercontent.com/Ebedthan/hyperex/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Using custom list of primers: primers.txt",
        "parent_header": [
          "How to run hyperex ?"
        ],
        "type": "Text_excerpt",
        "value": "```\nhyperex --region primers.txt file.fa\n```\n"
      },
      "source": "https://raw.githubusercontent.com/Ebedthan/hyperex/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Using multiple primers",
        "parent_header": [
          "How to run hyperex ?"
        ],
        "type": "Text_excerpt",
        "value": "```\nhyperex --region v1v2 --region v3v4 file.fa\n\nhyperex -f ATC -f YGA -r GGCC -r TTRC file.fa\n```\n"
      },
      "source": "https://raw.githubusercontent.com/Ebedthan/hyperex/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 02:57:04",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 9
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Command line arguments",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "```\nhyperex [FLAGS] [OPTIONS] <FILE>\n```\n"
      },
      "source": "https://raw.githubusercontent.com/Ebedthan/hyperex/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Flags:",
        "parent_header": [
          "Usage",
          "Command line arguments"
        ],
        "type": "Text_excerpt",
        "value": "```\n    --force      Force output overwritting\n-q, --quiet      Decreases program verbosity\n-h, --help       Prints help information\n-V, --version    Prints version information\n```\n"
      },
      "source": "https://raw.githubusercontent.com/Ebedthan/hyperex/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Options:",
        "parent_header": [
          "Usage",
          "Command line arguments"
        ],
        "type": "Text_excerpt",
        "value": "```\n-f, --forward-primer <PRIMER>...    Specifies forward primer sequence. Can be a sequence with degenerate bases\n-r, --reverse-primer <PRIMER>...    Specifies reverse primer sequence. Can be a sequence with degenerate bases\n    --region <REGION>...            Specifies a hypervariable region to extract\n-m, --mismatch <N>                  Specifies number of allowed mismatch [default: 0]\n-p, --prefix <PATH>                 Specifies the prefix for the output files [default: hyperex_out]\n```\n"
      },
      "source": "https://raw.githubusercontent.com/Ebedthan/hyperex/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Args:",
        "parent_header": [
          "Usage",
          "Command line arguments"
        ],
        "type": "Text_excerpt",
        "value": "```\n<FILE>    Input fasta file. Can be gzip'd, xz'd or bzip'd\n```\n"
      },
      "source": "https://raw.githubusercontent.com/Ebedthan/hyperex/main/README.md",
      "technique": "header_analysis"
    }
  ]
}