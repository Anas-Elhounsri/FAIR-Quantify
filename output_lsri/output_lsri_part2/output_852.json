{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "External references",
        "parent_header": [
          "mPARCE"
        ],
        "type": "Text_excerpt",
        "value": "If you implement this protocol and publish the results, these references to external programs should be included:\n\n- Rosetta: Alford, R. F. et al. J. Chem. Theory Comput., 2017, 13, 3031\u20133048.\n- AutoDock Vina: Trott, O.; Olson, A. J. J. Comput. Chem., 2009, 31, 455\u2013461.\n- Cyscore: Cao, Y.; Dai, W.; Miao, Z. Methods Mol. Biol., 2018, 1762, 233\u2013243.\n- NNScore:  Durrant,  J.  D.;  McCammon,  J.  A., J. Chem. Inf. Model, 2011, 51, 2897\u20132903.\n- DLigand2: Chen, Y.; Ke, Y.; Lu, Y. et. al. J. Cheminformatics, 2019, 11, 8.\n- Smina: Koes, D.; Baumgartner M.; Camacho C. J. Chem. Inf. Model, 2013, 53, 8, 1893\u20131904.\n"
      },
      "source": "https://raw.githubusercontent.com/rochoa85/mPARCE/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/rochoa85/mPARCE"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-04-20T14:36:09Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-06-16T15:14:40Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "mPARCE: Protocol for iterative optimization of modified peptides bound to protein targets"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9095742727966692,
      "result": {
        "original_header": "mPARCE: Protocol for iterative optimization of modified peptides bound to protein targets",
        "type": "Text_excerpt",
        "value": "* If this protocol is used, please cite the following publication: **Protocol for iterative optimization of modified peptides bound to protein targets**. Link: https://link.springer.com/article/10.1007/s10822-022-00482-1.\n* Journal of Computer-Aided Molecular Design, 2022\n* Authors: Rodrigo Ochoa, Pilar Cossio, Thomas Fox\n \n"
      },
      "source": "https://raw.githubusercontent.com/rochoa85/mPARCE/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9740567372400747,
      "result": {
        "original_header": "Purpose",
        "type": "Text_excerpt",
        "value": "Here, we present mPARCE, an open source protocol to design modified peptides with improved binding affinity to a target of reference. The protocol generates single-point mutations on the peptide sequence based on a list of parameterized non-natural amino acids (NNAAs). Then, it estimates their binding affinities in complex with the protein in an efficient but accurate manner by combining backrub sampling from Rosetta with a consensus metric using multiple protein-ligand scoring functions.\n \n"
      },
      "source": "https://raw.githubusercontent.com/rochoa85/mPARCE/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8368931243324959,
      "result": {
        "original_header": "Required third-party tools:",
        "type": "Text_excerpt",
        "value": "- The scoring functions (Vina, DLigand2, NNscore, Cyscore, RosettaScore, Smina) are provided in the **src** folder and configured to run the analysis. **NOTE: In the case of scripts extracted from MGLTools (http://mgltools.scripps.edu/downloads), we recommend to install them from source and update the scripts: pythonsh, prepare_receptor4.py and prepare_ligand4.py in the src/scores folder from mPARCE.**\n \n"
      },
      "source": "https://raw.githubusercontent.com/rochoa85/mPARCE/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9781762119998926,
      "result": {
        "original_header": "Input files required",
        "type": "Text_excerpt",
        "value": "To use Rosetta, it is required to add the NNAAs that have been parameterized for the protocol. **A file with all the information is available in the auxiliar folder. Details to copy the files are provided in the section *Analysis of the results and auxiliar files and scripts* of this README.**\n \n"
      },
      "source": "https://raw.githubusercontent.com/rochoa85/mPARCE/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9603089433865377,
      "result": {
        "original_header": "Configuration file",
        "type": "Text_excerpt",
        "value": "- **folder**: Name of the folder where all the output files of the protocol will be stored. This folder is created inside the design_output folder, which is generated in the selected workspace after running the protocol.\n- **mode**: The design mode, which has three possible options: *start* (start the protocol from zero), *restart* (start from a particular iteration of a previous run) and *nothing* (just run without modifying existing files for debugging purposes).\n- **pdbID**: Name of the structure that is used as input, which contains the protein and the peptide/protein binder molecules.\n- **peptide**: The sequence of the peptide using 3-letter codes separated by dashes.\n- **chain**: Chain id of the peptidomimetic binder in the complex.\n- **trials**: Number of trials attempted by the backrub sampling. A total of 20000 is recommended.\n- **scoring**: Schema to run the scoring, which could be: *consensus* (using multiple scoring functions) or *single*.\n- **score_list**: List of the scoring functions that will be used to calculate the consensus. Currently the package has available: Vina, DLigand2, NNscore, Cyscore, RosettaScore and Smina. *At least two should be selected.*\n- **threshold**: Threshold used for the consensus. If the number of scoring functions in agreement are equal or greater than the threshold, then the mutation is accepted.\n- **teffective**: Reference temperature (in KT) used for the metropolis monte carlo criterion.\n- **num_mutations**: Number of mutations that will be attempted.\n- **residues_mod**: These are the specific positions of the residues that will be modified. This depends on the peptide/protein length and the numbering in the PDB file. *It is recommended to renumber the input structure to associate the first position to residue number 1, for avoiding errors in posterior stages related with the renumbering of the coordinate files*.\n- **source**: Path to the folder containing the input files (PDB).\n- **rosetta_version**:  Name of the local Rosetta path folder.\n- **categories (optional)**: Pre-assigned categories of the NNAAs that can be used to filter which chemical entities to include in the design process. They are split into three groups: hydrophobicity (HYDROPHOBIC, POLAR, CHARGED), charge (NEUTRAL, POSITIVE, NEGATIVE), and size (SMALL, MEDIUM, LARGE). *The user can select only one option per each group using the capital letter words shown here.*  \n"
      },
      "source": "https://raw.githubusercontent.com/rochoa85/mPARCE/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9331220035483689,
      "result": {
        "original_header": "Output folder content",
        "type": "Text_excerpt",
        "value": "When a design run starts, an initial folder is created with the required input files, as well as the folders that will store the outputs step-by-step. The following is a list of the folders created, and the specific content stored: \n\nThe design protocol results are summarized in the output file called `mutation_report.txt`, which contains details per mutation step like the type of mutation, the average scores, the binder sequence and if the mutation was accepted or not. Regarding the type of mutation, it is defined with the nomenclature: [old amino acid][binder chain][position][new amino acid]. **An example of a mutation is DGNB1OLT, which means that the NNAA DGN located in the position number 1 of the chain B is replaced by the NNAA OLT.** \n"
      },
      "source": "https://raw.githubusercontent.com/rochoa85/mPARCE/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8995125341185535,
      "result": {
        "original_header": "Analysis of the results and auxiliar files and scripts",
        "type": "Text_excerpt",
        "value": "With the final `mutation_report.txt`, it is possible to check and select the accepted sequences, and plot the scores to verify that they are minimizing after the mutation steps. The results are numbered per iteration step, and the folder's content facilitates locating the information. Examples of the analysis are provided in the manuscript. \n**1. Parameterization of new NNAAs** \nThe goal of the script `parameterize_NNAA.py` is to parameterize non-natural amino acids to be included within the Rosetta installation. The script requires of auxiliary programs and Unix system commands, including pyRosetta, BioPython, RDKit, OpenBabel, and the rdkit-to-params packages (*more details in the script*). The script requires a file called `list_NNAA.txt` with two columns, one having the PDB code of the NNAA and a second with the SMILES. **NOTE: The SMILES require of adding \\* symbols after the N and C terminal atoms. An example is provided in the auxiliar folder.** \n**2. Rosetta files of the included non-natural_amino acids** \n"
      },
      "source": "https://raw.githubusercontent.com/rochoa85/mPARCE/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/rochoa85/mPARCE/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/rochoa85/mPARCE/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "rochoa85/mPARCE"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "mPARCE"
      },
      "source": "https://raw.githubusercontent.com/rochoa85/mPARCE/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rochoa85/mPARCE/master/install_dependencies.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 0.9996064523580261,
      "result": {
        "original_header": "Required third-party tools:",
        "type": "Text_excerpt",
        "value": "- Rosetta (tested with 2022 version): https://www.rosettacommons.org/software/license-and-download \n**NOTE: The name of the local Rosetta folder path must be provided in the configuration file. Rosetta is required to perform the mutation and conformational sampling.** \n- The scoring functions (Vina, DLigand2, NNscore, Cyscore, RosettaScore, Smina) are provided in the **src** folder and configured to run the analysis. **NOTE: In the case of scripts extracted from MGLTools (http://mgltools.scripps.edu/downloads), we recommend to install them from source and update the scripts: pythonsh, prepare_receptor4.py and prepare_ligand4.py in the src/scores folder from mPARCE.**\n \n"
      },
      "source": "https://raw.githubusercontent.com/rochoa85/mPARCE/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9692357324837879,
      "result": {
        "original_header": "Configuration file",
        "type": "Text_excerpt",
        "value": "A configuration file is required with the following parameters: \n"
      },
      "source": "https://raw.githubusercontent.com/rochoa85/mPARCE/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9824336973957466,
      "result": {
        "original_header": "Analysis of the results and auxiliar files and scripts",
        "type": "Text_excerpt",
        "value": "We also included a folder called `auxiliar` with the following: \nThe goal of the script `parameterize_NNAA.py` is to parameterize non-natural amino acids to be included within the Rosetta installation. The script requires of auxiliary programs and Unix system commands, including pyRosetta, BioPython, RDKit, OpenBabel, and the rdkit-to-params packages (*more details in the script*). The script requires a file called `list_NNAA.txt` with two columns, one having the PDB code of the NNAA and a second with the SMILES. **NOTE: The SMILES require of adding \\* symbols after the N and C terminal atoms. An example is provided in the auxiliar folder.** \n"
      },
      "source": "https://raw.githubusercontent.com/rochoa85/mPARCE/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/rochoa85/mPARCE/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "chemistry, computational, design, peptide"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2022 Rodrigo Ochoa\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/rochoa85/mPARCE/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "mPARCE"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "rochoa85"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Roff",
        "size": 3745798,
        "type": "Programming_language",
        "value": "Roff"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 3638955,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "AMPL",
        "size": 14208,
        "type": "Programming_language",
        "value": "AMPL"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 4690,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 3913,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rochoa85/mPARCE/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependencies:",
        "parent_header": [
          "mPARCE"
        ],
        "type": "Text_excerpt",
        "value": "The BioPython and additional python modules (minimum python3.5) can be installed directly from the OS repositories. An example in Ubuntu 20.04 is:\n\n```\nsudo apt-get install pdb2pqr\nsudo apt-get install openbabel\nsudo apt-get install python3-biopython\nsudo apt-get install python3-pip\nsudo apt-get install python3-tk\nsudo apt-get install python3-yaml\n```\n\n**NOTE: They can be installed using Conda. In addition, a `install_dependencies.sh` file is provided to automatize the installation of the dependencies in the Linux (Ubuntu) operating system.**\n"
      },
      "source": "https://raw.githubusercontent.com/rochoa85/mPARCE/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "How to run the protocol script",
        "parent_header": [
          "mPARCE"
        ],
        "type": "Text_excerpt",
        "value": "**The protocol has been created and tested using minimum Python3.5**. The basic command line to run the script is:\n\n`python3 run_protocol.py [-h] -c CONFIG_FILE`\n\nwhere the arguments are:\n\n```\narguments:\n  -h, --help      show this help message and exits\n  -c CONFIG_FILE  File containing all the necessary parameters to run the\n                  protocol\n ```\n\nThe configuration file describes the parameters required to run the protocol. A full detailed explanation is provided in the next section.\n"
      },
      "source": "https://raw.githubusercontent.com/rochoa85/mPARCE/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 12:14:43",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 8
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Support",
        "parent_header": [
          "mPARCE"
        ],
        "type": "Text_excerpt",
        "value": "For inquiries, please contact: rodrigo.ochoa@udea.edu.co\n"
      },
      "source": "https://raw.githubusercontent.com/rochoa85/mPARCE/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Tutorial example",
        "parent_header": [
          "mPARCE"
        ],
        "type": "Text_excerpt",
        "value": "The following is an example of the configuration file *(config.txt)* for a protease-peptide complex provided in the code:\n\n```\nfolder: granzymeH\nmode: start\npdbID: granzymeH\npeptide: PRO-THR-SER-TYR-ALA-GLY-ASP-ASP-SER \nchain: B\ntrials: 20000\nscoring: consensus\nscore_list: vina,dligand2,rosetta,nnscore,internal,cyscore\nthreshold: 4\nteffective: 4\nnum_mutations: 100\nresidues_mod: 2,4,6,8\nsource: ./input\nrosetta_version: <UPDATE_ROSETTA_PATH>\ncategories: NEUTRAL,HYDROPHOBIC,MEDIUM\n```\n**NOTE: The 'categories' variable is optional, and the 'route' input in the 'rosetta_version' variable can be updated depending on the local installation.**\n\nIf any of these parameters are missing, the protocol stops and prints a warning message to the user.\n\nIn this example, the configuration file is prepared to run 100 mutation attempts, using 20000 trials for the intitial sampling of the complex. It requires the use of a single core, facilitating its use in a local desktop or server.\n"
      },
      "source": "https://raw.githubusercontent.com/rochoa85/mPARCE/master/README.md",
      "technique": "header_analysis"
    }
  ]
}