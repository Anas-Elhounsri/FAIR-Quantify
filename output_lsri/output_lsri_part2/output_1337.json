{
  "application_domain": [
    {
      "confidence": 0.9951512084831715,
      "result": {
        "type": "String",
        "value": "Graphs"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Kingsford-Group/gtedemedtest"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-01-14T02:37:23Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-06-29T10:38:48Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9223156461830997,
      "result": {
        "original_header": "gtedemedtest",
        "type": "Text_excerpt",
        "value": "This repository contains data and script for reproducing results in the follow manuscript: \n*The Effect of Genome Graph Expressiveness onthe Discrepancy Between Genome Graph Distanceand String Set Distance* \n`plot_GTED_EMED.ipynb` contains necessary scripts to analyze results presented in the manuscript\n`scripts/` contains necessary scripts to\n1. Sample flow decomposition from input graphs\n2. Compute FGTED between graphs\n3. Construct MSA/dBG graphs with conforming formats to FGTED solver\n \n"
      },
      "source": "https://raw.githubusercontent.com/Kingsford-Group/gtedemedtest/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9894667631490796,
      "result": {
        "original_header": "T-Cell Receptor",
        "type": "Text_excerpt",
        "value": "- Data: MSA graph and dBG4 constructed on 50 string sets are contained in `TCR_graphs`\n    - The instruction to simulate TCR repertoires is included in `data/`\n    - `TCR_all_EMED.csv` -- contains all pair-wise EMED\n    - `TCR_sampled_diameters_msa.csv` -- contains all sampled diameters on MSA graphs\n    - `TCR_sampled_diameters_dbg4.csv` -- contains all sampled diameters on dBG4 graphs\n    - `TCR_fgted_logs` -- contains all output from gurobi for solving FGTED\n    - `TCR_summary.csv` -- contains summary stats for all pairs of MSA graphs\n    - `TCR_FGTED.csv` -- contains FGTED between pairs of dBG4 graphs\n \n"
      },
      "source": "https://raw.githubusercontent.com/Kingsford-Group/gtedemedtest/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8990547822925129,
      "result": {
        "original_header": "Hepatitis B Virus",
        "type": "Text_excerpt",
        "value": "- Data: MSA graphs constructed on 9 string sets are contained in `HBV_graphs`\n    - `HBV_all_EMED.csv` -- contains all pair-wise EMED\n    - `HBV_sampled_diameters.txt` -- contains all sampled diameters\n    - `HBV_fgted_logs` -- contains all output from gurobi for solving FGTED\n    - `HBV_summary.csv` -- contains all summary stats for all pairs\n- Scripts: see `pipeline_hbv.sh` for scripts to produce pair-wise FGTED\n    - see `GTED_MSA_HBV_solver.py` for details\n \n"
      },
      "source": "https://raw.githubusercontent.com/Kingsford-Group/gtedemedtest/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Kingsford-Group/gtedemedtest/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Kingsford-Group/gtedemedtest/main/plot_GTED_EMD.ipynb"
      },
      "source": "https://raw.githubusercontent.com/Kingsford-Group/gtedemedtest/main/plot_GTED_EMD.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Kingsford-Group/gtedemedtest/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Kingsford-Group/gtedemedtest"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "gtedemedtest"
      },
      "source": "https://raw.githubusercontent.com/Kingsford-Group/gtedemedtest/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Kingsford-Group/gtedemedtest/main/pipeline_hbv.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Kingsford-Group/gtedemedtest/main/pipeline_diameter.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Kingsford-Group/gtedemedtest/main/pipeline_tcr.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 0.9966122739506008,
      "result": {
        "original_header": "How to compute FGTED / sample diameters from different data",
        "type": "Text_excerpt",
        "value": "- See `pipeline_tcr.sh`, `pipeline_hbv.sh` for scripts to produce pair-wise FGTED.\n- See `pipeline_diameter.sh` for scripts to produce sampled diameters.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Kingsford-Group/gtedemedtest/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Kingsford-Group/gtedemedtest/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "gtedemedtest"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "Kingsford-Group"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 75687,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 26686,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 1941,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Kingsford-Group/gtedemedtest/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-04 14:04:16",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ]
}