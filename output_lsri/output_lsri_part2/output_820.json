{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/osmanbeyoglulab/CITRUS"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-08-01T21:36:08Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-06-16T14:52:04Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "type": "Text_excerpt",
        "value": "The repository contains the PyTorch implementation of CITRUS model in the paper: Tao Y*, Ma X*, Palmer D, Schwartz R, Lu X, Osmanbeyoglu HU. [Interpretable deep learning for chromatin-informed inference of transcriptional programs driven by somatic alterations across cancers](https://www.biorxiv.org/content/10.1101/2021.09.07.459263v3.full). bioRxiv 2021:2021.2009.2007.459263.\n\nCITRUS (Chromatin-informed Inference of Transcriptional Regulators Using Self-attention mechanism) is a partially interpretable deep neural network modeling the impact of somatic alterations on cellular states onto downstream gene expression patterns within context-speci\ufb01c transcriptional programs.  The model follows an overall encoder-decoder architecture. The encoder module employs a self-attention mechanism to model the contextual functional impact of somatic alterations in a tumor-specific manner, and the decoder uses a layer of hidden nodes to explicitly represent the state of transcription factors (TFs).\n"
      },
      "source": "https://raw.githubusercontent.com/osmanbeyoglulab/CITRUS/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9008304294676058,
      "result": {
        "original_header": "Data",
        "type": "Text_excerpt",
        "value": "There are three major datasets used to train CITRUS model: Somatica alteration gene matrix (SGA), gene expression matrix (GEP), and TF-target gene matrix. They included 5803 samples with 17 different tumor types from TCGA. SGA is originally a binary matrix containing 11998 genes with 1 as having a distinct mutation or copy number alteration and 0 as none of them. We transformed the sparse binary SGA into index lists to facilitate gene embedding. GEP contains continuous values of gene expression with filtered 5541 genes by considering top variant genes in each cancer type as well as gene availability in TF-target gene matrix. We packaged those matrices as well as cancer types, tumor barcodes, etc. into a pickle file for fast processing and convenient delivery. \nYou can explore the contents of the dataset by running:\n```sh\ndata = pickle.load( open(\"dataset_CITRUS.pkl\"), \"rb\")\ndata.keys()\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/osmanbeyoglulab/CITRUS/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8507389643401382,
      "result": {
        "original_header": "Explore CITRUS model",
        "type": "Text_excerpt",
        "value": "**Arguments and Hyperparameters** \n"
      },
      "source": "https://raw.githubusercontent.com/osmanbeyoglulab/CITRUS/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/osmanbeyoglulab/CITRUS/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/osmanbeyoglulab/CITRUS/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "osmanbeyoglulab/CITRUS"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/osmanbeyoglulab/CITRUS/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9742404524436615,
      "result": {
        "original_header": "Data",
        "type": "Text_excerpt",
        "value": "The integrated dataset of the pickle file can be downloaded from https://sites.pitt.edu/~xim33/CITRUS \n"
      },
      "source": "https://raw.githubusercontent.com/osmanbeyoglulab/CITRUS/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8260971154135369,
      "result": {
        "original_header": "Data",
        "type": "Text_excerpt",
        "value": "You can explore the contents of the dataset by running:\n```sh\ndata = pickle.load( open(\"dataset_CITRUS.pkl\"), \"rb\")\ndata.keys()\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/osmanbeyoglulab/CITRUS/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8516344340752785,
      "result": {
        "original_header": "Explore CITRUS model",
        "type": "Text_excerpt",
        "value": "To assist CITRUS usage, we established the following input arguments\n```sh\nparser.add_argument(\n    \"--input_dir\",\n    help=\"directory of input files\",\n    type=str,\n    default=\"./data\"\n)\nparser.add_argument(\n    \"--output_dir\",\n    help=\"directory of output files\",\n    type=str,\n    default=\"./data\",\n)\nparser.add_argument(\n    \"--dataset_name\",\n    help=\"the dataset name loaded and saved\",\n    type=str,\n    default=\"dataset_PANunion2500_17_sga_dropped_seperated_rmNotImpt_0.04_with_holdout_new\",\n)\nparser.add_argument(\n    \"--tag\",\n    help=\"a tag passed from command line\",\n    type=str,\n    default=\"\"\n)\nparser.add_argument(\n    \"--run_count\",\n    help=\"the count for training\",\n    type=str,\n    default=\"1\"\nparser.add_argument(\n    \"--train_model\",\n    help=\"whether to train model or load model\",\n    type=bool_ext,\n    default=True,\n)\n```\nFor example, The following command runs CITIRUS by specifying your own dataset, its location and output directory:\nBASH2*\nAll the demos we showed above trained CITRUS deep learning model with default hyperparameters. There are more than 10 hyperparameters that have been tuned to get optimal results.\n \n```sh\nparser.add_argument(\n    \"--embedding_size\",\n    help=\"embedding dimension of genes and tumors\",\n    type=int,\n    default=512,\n)\nparser.add_argument(\n    \"--hidden_size\",\n    help=\"hidden layer dimension of MLP decoder\",\n    type=int,\n    default=400\n)\nparser.add_argument(\n    \"--attention_size\",\n    help=\"size of attention parameter beta_j\",\n    type=int,\n    default=256\n)\nparser.add_argument(\n    \"--attention_head\",\n    help=\"number of attention heads\",\n    type=int,\n    default=32\n)\nparser.add_argument(\n    \"--learning_rate\",\n    help=\"learning rate for Adam\",\n    type=float,\n    default=1e-3\n)\nparser.add_argument(\n    \"--weight_decay\",\n    help=\"coefficient of l2 regularizer\",\n    type=float,\n    default=1e-5\n)\nparser.add_argument(\n    \"--max_iter\",\n    help=\"maximum number of training iterations\",\n    type=int,\n    default=1\n)\nparser.add_argument(\n    \"--batch_size\",\n    help=\"training batch size\",\n    type=int,\n    default=100\n)\nparser.add_argument(\n    \"--test_batch_size\",\n    help=\"test batch size\",\n    type=int,\n    default=100\n)\nparser.add_argument(\n    \"--dropout_rate\",\n    help=\"dropout rate\",\n    type=float,\n    default=0.2\n)\nparser.add_argument(\n    \"--input_dropout_rate\",\n    help=\"dropout rate\",\n    type=float,\n    default=0.2\n)\nparser.add_argument(\n    \"--activation\",\n    help=\"activation function used in hidden layer\",\n    type=str,\n    default=\"tanh\",\n)\nparser.add_argument(\n    \"--patience\",\n    help=\"earlystopping patience\",\n    type=int,\n    default=30\n)\nparser.add_argument(\n    \"--gep_normalization\",\n    help=\"how to normalize gep\",\n    type=str,\n    default=\"scaleRow\"\n)\nparser.add_argument(\n    \"--attention\",\n    help=\"whether to use attention mechanism or not\",\n    type=bool_ext,\n    default=True,\n)\nparser.add_argument(\n    \"--cancer_type\",\n    help=\"whether to use cancer type or not\",\n    type=bool_ext,\n    default=True,\n)\n\n```\nWhen training dataset other than provided. It is better to re-tune these parameters. The following command shows the way to train the model with the learning rate as 1e-4, and use the activation function as 'relu'\nBASH4*\n**Extract contents from CITRUS output** \nThe output contains many elements including \"predicted gene expression\", \"extracted TF activities\", \"gene embedding\", \"tumor embedding\", \"attention weight\", etc. They are integrated into a python dictionary data structure as:\n```sh\ndataset_out = {\n    \"labels\": labels,         # measured exp\n    \"preds\": preds,           # predicted exp\n    \"hid_tmr\": hid_tmr,       # TF activity\n    \"emb_tmr\": emb_tmr,       # tumor embedding\n    \"tmr\": tmr,               # tumor list\n    \"emb_sga\": emb_sga,       # straitified tumor embedding\n    \"attn_wt\": attn_wt,       # attention weight\n    \"can\": dataset[\"can\"],    # cancer type list\n    \"gene_emb\": gene_emb,     # gene embedding\n    \"tf_gene\": model.layer_w_2.weight.data.cpu().numpy(),  # trained weight of tf_gene constrains\n    'labels_test':labels_test,      # measured exp on test set\n    'preds_test':preds_test,        # predicted exp on test set\n    'tmr_test':tmr_test,            # tumor list on test set\n    'can_test':dataset_test[\"can\"]  # cancer type list on test set\n}\n```\nThe dictionary object was saved as a pickle file on disk. To extract the contents of output. First read in the pickle file\nBASH6*\n \n"
      },
      "source": "https://raw.githubusercontent.com/osmanbeyoglulab/CITRUS/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/osmanbeyoglulab/CITRUS/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CITRUS"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "osmanbeyoglulab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 30840,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/osmanbeyoglulab/CITRUS/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Prerequisites",
        "type": "Text_excerpt",
        "value": "The code runs on python 3.7 and above. Besides python 3, some other packages such as PyTorch, Pandas, Numpy, scikit-learn, Scipy are used. We have tested our code on torch version 1.2.0 (Windows), torch version 1.5.1+cu101 (Linux), torch version 1.9.0 (Mac)\n\nIt is recommended to install PyTorch through the Anaconda package manager since it installs all dependencies. If you installed the Anaconda distribution of Python 3.7 and above, Pandas, Numpy, scikit-learn, Scipy come pre-installed and no further installation steps are necessary.\n\nTo set up a running environment, here are the easy steps to follow.\n1. Install Anaconda: Download the Anaconda installer according to your operating system, and follow the installer's prompt to finish the installation. Please check Anaconda documentation here\nhttps://docs.anaconda.com/anaconda/install/index.html\n2. Create a conda environment and activate it by executing\n```sh\n    conda create --name myenv\n    conda activate myenv\n```\n3.  Install PyTorch in the conda environment. The installation command will be slightly different depending on your computer operating system and hardware configuration. You can get customized installation command by visiting PyTorch support site: https://pytorch.org/get-started/locally/. For example, on a Window system with CUDA support, you may install PyTorch by running\n```sh\n    conda install pytorch torchvision torchaudio cudatoolkit=10.2 -c pytorch\n ```  \n ## Replicate experiments\nDownload/clone this repository. Download input dataset \"dataset_CITRUS.pkl\" from https://sites.pitt.edu/~xim33/CITRUS and put it into ./data directory. Execute the command\n```sh\npython run_CITRUS.py\n```\n\nWe use the ensemble method to further stabilize TF activity which is a hidden layer before the output gene expression layer.\n\nTo generate ensembled TF activity, First run the model 10 times\n```sh\nfor (( i = 1; i <= 10; i++ )); do\n    python run_CITRUS.py --run_count $i\ndone\n```\nAfter getting the outputs for all runs, execute the ensemble_TF.py to ensemble TF activities\n```sh\npython ensemble_TF.py --runs 10\n```\nYou can find the generated ensemble_TF activities from 10 runs of CITURS model at https://sites.pitt.edu/~xim33/CITRUS\n"
      },
      "source": "https://raw.githubusercontent.com/osmanbeyoglulab/CITRUS/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 12:08:42",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 28
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ]
}