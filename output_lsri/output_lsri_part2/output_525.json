{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Reference sequences used",
        "parent_header": [
          "Creating plots"
        ],
        "type": "Text_excerpt",
        "value": "You can find them in the [reference](https://github.com/novoalab/Nano3P_Seq/tree/master/references) folder \n\n* Curlcake sequences : \n    * curlcake_1_2.fasta\n* cDNA Standards : \n    * cdna_std.fasta\n* Sequins : \n    * Genome : chrIS.v2.fa\n    * Genome annotation : RNAsequins.v2.2.gtf\n* Yeast : \n    * Genome : SacCer3.fa\n    * Ribosomal RNA : yeast_rRNA.fa\n    * Genome annotation : Saccer64.gtf\n* Mouse : \n    * [Genome](http://ftp.ensembl.org/pub/release-107/fasta/mus_musculus/dna/Mus_musculus.GRCm39.dna_sm.primary_assembly.fa.gz)\n    * Ribosomal RNA : mus_musculus_rRNA.fasta\n    * [Genome annotation](http://ftp.ensembl.org/pub/release-107/gtf/mus_musculus/Mus_musculus.GRCm39.107.gtf.gz)\n* Zebrafish : \n    * [Genome](http://ftp.ensembl.org/pub/release-107/fasta/danio_rerio/dna/Danio_rerio.GRCz11.dna_sm.primary_assembly.fa.gz)\n    * Ribosomal RNA : Zebrafish_rRNA_Maternal_Zygotic.fa\n    * [Genome annotation](http://ftp.ensembl.org/pub/release-107/gtf/danio_rerio/Danio_rerio.GRCz11.107.gtf.gz)\n* Human : \n    * [Genome](http://ftp.ensembl.org/pub/release-107/fasta/homo_sapiens/dna/Homo_sapiens.GRCh38.dna_sm.primary_assembly.fa.gz)\n    * Ribosomal RNA : human_rRNAs.fa\n    * [Genome annotation](http://ftp.ensembl.org/pub/release-107/gtf/homo_sapiens/Homo_sapiens.GRCh38.107.gtf.gz)\n\n"
      },
      "source": "https://raw.githubusercontent.com/novoalab/Nano3P_Seq/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "Creating plots"
        ],
        "type": "Text_excerpt",
        "value": "If you find this work useful, please cite: \n\n\nBegik O, Diensthuber G, Liu H, Delgado-Tejedor A, Kontur C, Niazi AM, Valen E, Giraldez AJ, Beaudoin JD, Mattick JS and Novoa EM. Nano3P-seq: transcriptome-wide analysis of gene expression and tail dynamics using end-capture nanopore cDNA sequencing. Nature Methods 2023. doi:[https://www.nature.com/articles/s41592-022-01714-w]. \n"
      },
      "source": "https://raw.githubusercontent.com/novoalab/Nano3P_Seq/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/novoalab/Nano3P_Seq"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-04-08T11:37:29Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-30T06:02:43Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Nanopore 3' end-capture sequencing (Begik et al., bioRxiv 2021)"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9273948802646866,
      "result": {
        "original_header": "Nano3P-seq: *Nano*pore *3* *P*rime end-capture *seq*uencing",
        "type": "Text_excerpt",
        "value": "Bioinformatic analysis of Nano3P-seq nanopore libraries (direct cDNA first strand sequencing with template switching) \n"
      },
      "source": "https://raw.githubusercontent.com/novoalab/Nano3P_Seq/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8952145814861103,
      "result": {
        "original_header": "Base-calling and demultiplexing",
        "type": "Text_excerpt",
        "value": "Basecalling is done using Guppy basecaller without adapter trimming. We need the adapter sequence for the tailfindR software.  \n"
      },
      "source": "https://raw.githubusercontent.com/novoalab/Nano3P_Seq/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9062492528225479,
      "result": {
        "original_header": "Tail length estimations using tailfindR nano3p-seq version",
        "type": "Text_excerpt",
        "value": "Note: For each read, Tailfindr will report as output numerical integers corresponding to the tail length in nt (e.g. 120), 0 or NaN.  \nLength = 0 ---> when the status of the read is: ```contains_no_polyT_tail``` \nLength = NaN ---> when the status of the read is: ```no_adaptor_found``` \nTherefore, tail length equal to 0 means that the software could find the adapter, but next to it, it did not find any polyA tail stretch (so length is 0 nt), whereas NaN means that the read could not be analyzed because the adapter was not found. \n \n"
      },
      "source": "https://raw.githubusercontent.com/novoalab/Nano3P_Seq/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8455335539788105,
      "result": {
        "original_header": "Trimming the adapter sequence",
        "type": "Text_excerpt",
        "value": "We need to trim the adapter sequence before analysing the tail content\nIn order to do so, we need to create an alternative adapters.py file that ONLY contains Nano3p-seq adapter. \nThis way we can make the search with less stringency and get a cleaner trimming\nYou can find the adapters.py file in the porechop_libraries folder\n```bash\nporechop --extra_end_trim 0 --end_threshold 40 --adapter_threshold 40 -i input.fastq  -t 10 > output.fastq\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/novoalab/Nano3P_Seq/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8919789607238279,
      "result": {
        "original_header": "Mapping",
        "type": "Text_excerpt",
        "value": "Furthermore, we followed a pipelime comprised of customised scripts in order to extract the following information:  \n"
      },
      "source": "https://raw.githubusercontent.com/novoalab/Nano3P_Seq/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8487868489049297,
      "result": {
        "original_header": "Extracting soft-clipped region of reads",
        "type": "Text_excerpt",
        "value": "We extract this information for the tail content analysis. It should contain the unmapped tail region of the reads\n```bash\npython soft_clipped_content.py trimmed.bam > tail_content.tsv\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/novoalab/Nano3P_Seq/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8715484560338244,
      "result": {
        "original_header": "Detailed mapping steps",
        "type": "Text_excerpt",
        "value": "Filtering mapped reads based on annotations and assigning reads to gene biotype \nAt this step, using the annotation, we aim to remove the reads coming from degraded RNAs \nWe will use a mouse sample run as an example\n \n"
      },
      "source": "https://raw.githubusercontent.com/novoalab/Nano3P_Seq/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8705118574852166,
      "result": {
        "original_header": "Create new annotation files",
        "type": "Text_excerpt",
        "value": "Refer to this [link](https://github.com/novoalab/Nano3P_Seq/tree/master/R_scripts/annotation_building) for creating bed files from gtf file \n"
      },
      "source": "https://raw.githubusercontent.com/novoalab/Nano3P_Seq/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8397299764835133,
      "result": {
        "original_header": "Map reads to cytoplasmic ribosomal RNA sequences",
        "type": "Text_excerpt",
        "value": "```bash\n#Minimap with default options\nminimap2 -ax map-ont --MD -t 2 reference_fasta input_fastq > cytrRNA.bam\n#Convert BAM into SAM, including only high-quality allignment\nsamtools view -Sb -F 3844 cytrRNA.bam >  cytrRNA.sam\n#Extract high quality and reverse strand only reads and sort/index\nsamtools view -hb -f 0x10 -bq 59 cytrRNA.sam | samtools sort - cytrRNA.sorted && samtools index cytrRNA.sorted.bam\n#Remove intermediate files\nrm cytrRNA.bam  cytrRNA.sam\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/novoalab/Nano3P_Seq/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8873880224560602,
      "result": {
        "original_header": "Issues",
        "type": "Text_excerpt",
        "value": "If you have any issues/doubts when using this code, please check previous [Issues](https://github.com/novoalab/Nano3P_Seq/issues). If you still don't find the answer to your question, please open a new [Issue](https://github.com/novoalab/Nano3P_Seq/issues). Thanks!\n \n"
      },
      "source": "https://raw.githubusercontent.com/novoalab/Nano3P_Seq/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/novoalab/Nano3P_Seq/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/novoalab/Nano3P_Seq/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "novoalab/Nano3P_Seq"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Nano3P-seq: Nanopore 3 Prime end-capture sequencing"
      },
      "source": "https://raw.githubusercontent.com/novoalab/Nano3P_Seq/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/novoalab/Nano3P_Seq/master/./images/overall.png"
      },
      "source": "https://raw.githubusercontent.com/novoalab/Nano3P_Seq/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/novoalab/Nano3P_Seq/master/./images/Clipping.png"
      },
      "source": "https://raw.githubusercontent.com/novoalab/Nano3P_Seq/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9821876283930103,
      "result": {
        "original_header": "Base-calling and demultiplexing",
        "type": "Text_excerpt",
        "value": "\nBase-calling with Guppy v6 without trimming the adapter :\n```bash\nguppy_basecalling --device cuda:0 -c dna_r9.4.1_450bps_hac.cfg --barcode_kits EXP-NBD104 --fast5_out --trim_strategy none -ri fast5_files -s output_folder\n``` \nBase-calling and demultiplexing with Guppy v6 without trimming the adapter :\n```bash\nguppy_basecalling --device cuda:0 -c dna_r9.4.1_450bps_hac.cfg --fast5_out --trim_strategy none -ri fast5_files -s output_folder\n``` \nDemultiplexing the unclassified.fastq file using porechop (Python 3 is required)\n```bash\nporechop -i unclassified.fastq -b output_folder -t 10 --barcode_threshold 50 --untrimmed \n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/novoalab/Nano3P_Seq/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.995354367445595,
      "result": {
        "original_header": "Tail length estimations using tailfindR nano3p-seq version",
        "type": "Text_excerpt",
        "value": "You can download nano3p-seq version of tailfindr [here](https://github.com/adnaniazi/tailfindr/tree/nano3p-seq)\n```R\n#Prerequisite : tailfindR tool nano3p-seq version\ntails <- find_tails(fast5_dir ='fast5_location',\nsave_dir = './',\ncsv_filename = 'Tails.csv' ,\nnum_cores = 10)\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/novoalab/Nano3P_Seq/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9506997952156382,
      "result": {
        "original_header": "Assigning reads to transcripts/isoforms",
        "type": "Text_excerpt",
        "value": "```bash\n#Prerequisite : isoquant.py tool\npython isoquant.py --genedb gtf_file --complete_genedb --bam data.bam --data_type nanopore -o OUTPUT_FOLDER\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/novoalab/Nano3P_Seq/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999997070433156,
      "result": {
        "original_header": "Software versions used",
        "type": "Text_excerpt",
        "value": "* Guppy version 6.0.2\n* minimap2 version 2.17\n* samtools version 0.1.19\n* R version 3.6.0\n* TailfindR (Nano3P-seq version)\n* picard.jar v2.25.0\n* bedtools v2.29.1\n* Isoquant v1.3\n* porechop v0.2.4\n* seqkit\n* Python version 3\n \n"
      },
      "source": "https://raw.githubusercontent.com/novoalab/Nano3P_Seq/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9863031460425405,
      "result": {
        "original_header": "Issues",
        "type": "Text_excerpt",
        "value": "If you have any issues/doubts when using this code, please check previous [Issues](https://github.com/novoalab/Nano3P_Seq/issues). If you still don't find the answer to your question, please open a new [Issue](https://github.com/novoalab/Nano3P_Seq/issues). Thanks!\n \n"
      },
      "source": "https://raw.githubusercontent.com/novoalab/Nano3P_Seq/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8268152736782232,
      "result": {
        "original_header": "Mapping",
        "type": "Text_excerpt",
        "value": "General mapping options used in our pipeline\n```bash\n# Mapping to transcriptome\nminimap2 -ax map-ont --MD reference.fasta input.fastq | samtools view -hSb -F 3844 - > output.sam\nsamtools view  -f 0x10 -bq 59 output.sam | samtools sort - output.sorted && samtools index output.sorted.bam\n\n# Mapping to genome\nminimap2 -ax splice -k14 --MD $ref input.fastq | samtools view -hSb -F 3844 - >  output.sam\nsamtools sort output.sam output.sorted && rm output.sam && samtools index output.sorted.bam\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/novoalab/Nano3P_Seq/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.931578309280885,
      "result": {
        "original_header": "Assigning reads to transcripts/isoforms",
        "type": "Text_excerpt",
        "value": "```bash\n#Prerequisite : isoquant.py tool\npython isoquant.py --genedb gtf_file --complete_genedb --bam data.bam --data_type nanopore -o OUTPUT_FOLDER\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/novoalab/Nano3P_Seq/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8041426694687305,
      "result": {
        "original_header": "Extract non-rRNA reads",
        "type": "Text_excerpt",
        "value": "```bash\n#Intersect the BAM file reads with rRNA annotation\nbedtools intersect -abam cytrRNA.sorted.bam -b Zebrafish_rRNA_Transcript_Ends.bed -wa -wb -bed > cytrRNA_complete.bed\n#Extract Read IDs\nawk '!seen[$4]++' cytrRNA_complete.bed  | cut -f4 > cytrRNA_complete.reads\n#Extract BAM for complete mapping to rRNA\njava -jar picard.jar FilterSamReads \\\n   I=cytrRNA.sorted.bam \\\n   O=cytrRNA_complete.sorted.bam\\\n   READ_LIST_FILE=cytrRNA_complete.reads \\\n   FILTER=includeReadList\n#Index the BAM file\nsamtools index cytrRNA_complete.sorted.bam\n#Intersect the BAM file with rRNA Annotation to label the reads as rRNA\nbedtools intersect -abam cytrRNA_complete.sorted.bam -b Zebrafish_rRNA_Annotation.bed -wa -wb -bed -S | awk '!seen[$4]++'>  cytrRNA.overlapping.FINAL.bed\n# Exclude these reads from fastq\nsamtools view cytrRNA.sorted.bam | cut -f1 > cytrRNA.reads\n#Excluded fastq\nseqkit grep --pattern-file cytrRNA.reads --invert-match  input_fastq > nonrRNA.fastq\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/novoalab/Nano3P_Seq/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8517920013402809,
      "result": {
        "original_header": "Map non-rRNA reads to genome",
        "type": "Text_excerpt",
        "value": "```bash\n#Minimap with default options\nminimap2 -ax splice -k14 --MD -t 2 $ref nonrRNA.fastq  > nonrRNA.bam\n#Convert BAM into SAM, including only high-quality allignment\nsamtools view -Sb -F 3844 nonrRNA.bam > nonrRNA.sam\n#Sort BAM file\nsamtools view -hb nonrRNA.sam | samtools sort - nonrRNA.sorted && samtools index nonrRNA.sorted.bam\n#Convert BAM into BED\nbedtools bamtobed -i nonrRNA.sorted.bam > nonrRNA.sorted.bed \n#Remove intermediate files\nrm nonrRNA.bam nonrRNA.sam\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/novoalab/Nano3P_Seq/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8442820445561553,
      "result": {
        "original_header": "Assigning complete reads to Biotypes",
        "type": "Text_excerpt",
        "value": "```bash\n#Extract read start coordinates from the BED file\nRscript --vanilla readstarts.R nonrRNA.sorted.bed nonrRNA\n#Intersect reads with miRNA Gene annotation to first take miRNA reads apart from the rest\nbedtools intersect -abam nonrRNA.sorted.bam -b miRNA_Gene.bed -wa -wb -bed -split -S > miRNAs.bed\n#Extract read IDs\nawk '!seen[$4]++' miRNAs.bed | cut -f4 > miRNAs.reads\n#Intersect read start coordinates with small RNA transcript end coordinates\nbedtools intersect -a nonrRNA_readstarts.bed -b SmallRNA_TranscriptEnds.bed -wa -wb > smallRNAs.bed\n#Exrtract read IDs\nawk '!seen[$4]++' smallRNAs.bed | cut -f4 > smallRNAs.reads\n#Make a BAM file for reads mapping to small RNAs\njava -jar picard.jar FilterSamReads \\\n     I=nonrRNA.sorted.bam \\\n     O=smallRNAs.bam\\\n     READ_LIST_FILE=smallRNAs.reads \\\n     FILTER=includeReadList\n#Index the BAM file     \nsamtools index smallRNAs.bam\n#Make a BAM file for reads not mapping to small RNAs\njava -jar picard.jar FilterSamReads \\\n     I=nonrRNA.sorted.bam \\\n     O=longRNAs.bam\\\n     READ_LIST_FILE=smallRNAs.reads\\\n     FILTER=excludeReadList\n#Index the BAM file     \nsamtools index longRNAs.bam\n#Convert BAM to BED\nbedtools bamtobed -i longRNAs.bam > longRNAs.bed\n#Extract read starts from BAM file\nRscript --vanilla readstarts.R longRNAs.bed longRNAs\n#Intersect read start coordinates with long RNA transcript end coordinates\nbedtools intersect -a longRNAs.readstarts.bed -b Transcript_Ends.bed -wa -wb > longRNAs.overlapping.bed\n#Extract read IDs\nawk '!seen[$4]++' longRNAs.overlapping.bed | cut -f4 > longRNAs.overlapping.reads\n#Make a BAM file for reads mapping to long RNAs\njava -jar picard.jar FilterSamReads \\\n     I=nonrRNA.sorted.bam \\\n     O=longRNAs.overlapping.bam\\\n     READ_LIST_FILE=longRNAs.overlapping.reads \\\n     FILTER=includeReadList\n#Index BAM file\nsamtools index longRNAs.overlapping.bam\n# We need to remove the reads from miRNAs that are overlapping with smallRNAs or restRNAs\ndiff longRNAs.overlapping.reads miRNAs.reads |grep \">\"|cut -c 3- > miRNAs.longexcluded.reads\ndiff smallRNAs.reads miRNAs.longexcluded.reads |grep \">\"|cut -c 3- > miRNAs.longsmallexcluded.reads\n#Extract filtered miRNA BAM file\njava -jar picard.jar FilterSamReads \\\n     I=sorted.bam \\\n     O=miRNAFINAL.bam\\\n     READ_LIST_FILE=miRNAs.longsmallexcluded.reads\\\n     FILTER=includeReadList\n#Index BAM file\nsamtools index miRNAFINAL.bam\n#Assigning Read IDs to Biotypes\nbedtools intersect -abam longRNAs.overlapping.bam -b Rest_EXON.bed -wa -wb -bed -split -S | awk '!seen[$4]++'> longRNAs.overlapping.FINAL.bed\n#Assigning Read IDs to Biotypes\nbedtools intersect -abam smallRNAs.bam -b SmallRNA_Gene.bed -wa -wb -bed -split -S | awk '!seen[$4]++' > smallRNAs.overlapping.FINAL.bed\n#Assigning Read IDs to Biotypes\nbedtools intersect -abam miRNAFINAL.bam -b miRNA_Gene.bed -wa -wb -bed -split -S | awk '!seen[$4]++' > miRNAs.FINAL.bed\n#Merge all the files\ncat  cytrRNA_complete.bed longRNAs.overlapping.FINAL.bed smallRNAs.overlapping.FINAL.bed miRNAs.FINAL.bed > allRNAs.bed\n#Exract Read IDs\nawk '!seen[$4]++' allRNAs.bed | cut -f4 > allRNAs.reads\n#Create BAM file for nonrRNA FINAL version\njava -jar /users/enovoa/boguzhan/Software/picard/build/libs/picard.jar FilterSamReads \\\n     I=nonrRNA.sorted.bam \\\n     O=nonrRNA.FINAL.bam\\\n     READ_LIST_FILE=allRNAs.reads\\\n     FILTER=includeReadList\n#Merge nonrRNA and cyt rRNA reads\nsamtools merge allRNAs.bam nonrRNA.FINAL.bam cytrRNA_complete.sorted.bam\n#Index BAM file\nsamtools index allRNAs.bam\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/novoalab/Nano3P_Seq/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9074634207734221,
      "result": {
        "original_header": "Creating plots",
        "type": "Text_excerpt",
        "value": "R script for timepoint dot plots\n```R\nRscript dotplot_timepoints.R <tailfindR.file> <bedfile1> <bedfile2> <bedfile3> label\n\n#Example \nRscript dotplot_timepoints.R zebrafish_tailfindr.csv 2hpf.bed 4hpf.bed 6hpf.bed zebrafish\n\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/novoalab/Nano3P_Seq/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/novoalab/Nano3P_Seq/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2021 Oguzhan Begik\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/novoalab/Nano3P_Seq/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Nano3P_Seq"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "novoalab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 36531,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 32427,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/novoalab/Nano3P_Seq/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "enovoa",
          "type": "User"
        },
        "date_created": "2022-11-15T14:10:18Z",
        "date_published": "2022-12-16T21:22:58Z",
        "html_url": "https://github.com/novoalab/Nano3P_Seq/releases/tag/v1.0",
        "name": "v1.0",
        "release_id": 86369636,
        "tag": "v1.0",
        "tarball_url": "https://api.github.com/repos/novoalab/Nano3P_Seq/tarball/v1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/novoalab/Nano3P_Seq/releases/86369636",
        "value": "https://api.github.com/repos/novoalab/Nano3P_Seq/releases/86369636",
        "zipball_url": "https://api.github.com/repos/novoalab/Nano3P_Seq/zipball/v1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 11:01:34",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 12
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ]
}