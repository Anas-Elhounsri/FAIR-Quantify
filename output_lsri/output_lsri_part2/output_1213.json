{
  "application_domain": [
    {
      "confidence": 17.92,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/eved1018/ISPIP"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-10-29T15:03:27Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-06-26T02:15:29Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Integrated Structure-based Protein Interface Prediction"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9754578482232409,
      "result": {
        "original_header": "Abstract:",
        "type": "Text_excerpt",
        "value": "__Background__\n<p>Identifying protein interfaces can inform how proteins interact with their binding partners, uncover the regulatory mechanisms that control biological functions and guide the development of novel therapeutic agents. A variety of computational approaches have been developed for predicting a protein\u2019s interfacial residues from its known sequence and structure. Methods using the known three- dimensional structures of proteins can be template-based or template-free. Template-based methods have limited success in predicting interfaces when homologues with known complex structures are not available to use as templates. The prediction performance of template-free methods that only rely only upon proteins\u2019 intrinsic properties is limited by the amount of biologically relevant features that can be included in an interface prediction model.</p> \n__Results__\n<p> We describe the development of an integrated method, ISPIP, to explore the hypothesis that the efficacy of a computational prediction method of protein binding sites can be enhanced by using a combination of methods that rely on orthogonal structure-based properties of a query protein, combining and balancing both template-free and template-based features. ISPIP is a method that integrates these approaches through simple linear or logistic regression models and more complex decision tree models. On a diverse test set of 156 query proteins, ISPIP outperforms each of its individual classifiers in identifying protein binding interfaces. </p> \n__Conclusions__ \n<p>The integrated method captures the best performance of individual classifiers and delivers an improved interface prediction. The method is robust and performs well even when one of the individual classifiers performs poorly on a particular query protein. This work demonstrates that integrating orthogonal methods that depend on different structural properties of proteins performs better at interface prediction than any individual classifier alone.</p> \n| ![image](Media/output-onlinegiftools.gif) | ![image](Media/legend-removebg-preview.png) |\n| --- | --- |\n| The structure of 1CP2.A is shown with the annotated and predicted interface resiues highlighted in pink and green respectively |  \n\t* `-of`: [str] default: output - Directory to place output of ISPIP.\n\t* `-i`: [str] default: input.csv - CSV Filename with columns: \"residue\",\"predus\",\"ispred\",\"dockpred\",\"annotated\". The column residue is of the form {residue number}_{PDB ID}.{chain}. The annotated column is 1 or interface residue and 0 for non-interface residue\n\t* `-cv`: [str] default: cv -Directory containing test and train sets for cross-validation. Same csv format as train/test. Filenames should start with train and test\n\t* `--trainset`: [str] default: test_set.txt - CSV Filename containing proteins for models to train on with columns: protein,size. The column protein is of the form {PDB ID}.{chain}\n\t* `--testset`: [str] default: train_set.txt - CSV Filename containing proteins for models to test on with columns: protein,size. The column protein is of the form {PDB ID}.{chain}\n\t* `--cutoffs`: [str] default:'cutoffs.csv' - CSV Filename containing length of interface or precalculated cutoff for each protein. File should have columns: Protein,surface res,cutoff res,annotated res. \n\t* `--model-name`: [str] default:'model' - Name of models to import/export. (see -if about)\n\t* `--results-df`: [str] - path to result file from previous \"predict\" run to reprocess. (normally named bin_frame.csv) \n- Mode selection:\n\t* `--mode`: ['predict', 'train', 'generate','cv','viz', \"reprocess\"] default: 'predict'  \n\t\t* __predict__: Use pre-trained model in input folder to predict on set.\n\t\t* __generate__: Generate a new rf model from a test set without predicting on any data.\n\t\t* __train__: Generate a new rf model from a test set and train on a training set (the runs predict).\n\t\t* __viz__: Only call the pymol visualization function. (takes --results_df_input and -cv as input)\n\t\t* __cv__: Perform cross-validation and hyperparameter tuning of models on split training set, the best models are then used to predict on a designated testing set.  \n\t\t* __reprocess__: Generate statistics from a succesful predict run. (takes --results_df_input as input) \n\n- Flags: \n\t* `--pymol`: Output pymol session and image of protein with experimental and predicted interfaces overladed. \n\t* `-tv`: Output svg image of a randomly sampled tree (for large datasets this can take up a huge amount of time and space) see https://github.com/parrt/dtreeviz for details.\n\t* `-xg`: Include the use of gradient boosting regression model. \n- `results.csv`: this file contains the fscore, MCC, Roc AUC and PR AUC for each individual method and model.  \n- `roc_model.csv` and pr_model.csv: the TRP and FPR by threshold for each individual method and model, can be used to generate specific ROC or PR graphs. \n- `fscore_mcc_by_protein`: the individual fscore and mcc for each protein in the test set.  \n- `pairtest.csv`: Comparison of statistical significance between AUCs.\n\t- top triangle: difference in pairs of AUCs\n\t- bottom triangle: log(10) of p-values for the difference in pairs of AUCs.\n- `proteins`: Directory containing pymol sessions for each protein in the test set.  \n- `cvout`: Directory containing the best parameters for each model used in the final prediction, as well as the individual metrics over each cross validation step.  \n<p>Dr. Andras Fiser and Dr. Eduardo J Fajardo for insight and guidance.</p>  \n<p>Terence Parr and Prince Grover for use of dtreeviz.</p> \n"
      },
      "source": "https://raw.githubusercontent.com/eved1018/ISPIP/main/ReadMe.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/eved1018/ISPIP/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/eved1018/ISPIP/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "eved1018/ISPIP"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ISPIP: Integrated Structure-based Protein Interface Prediction"
      },
      "source": "https://raw.githubusercontent.com/eved1018/ISPIP/main/ReadMe.md",
      "technique": "regular_expression"
    }
  ],
  "identifier": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://doi.org/10.5281/zenodo.6323262"
      },
      "source": "https://raw.githubusercontent.com/eved1018/ISPIP/main/ReadMe.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/eved1018/ISPIP/main/Media/output-onlinegiftools.gif"
      },
      "source": "https://raw.githubusercontent.com/eved1018/ISPIP/main/ReadMe.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/eved1018/ISPIP/main/Media/legend-removebg-preview.png"
      },
      "source": "https://raw.githubusercontent.com/eved1018/ISPIP/main/ReadMe.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9841267751471824,
      "result": {
        "original_header": "Abstract:",
        "type": "Text_excerpt",
        "value": "<h3> Requirements: </h3> \n```shell\npip install ISPIP\nispip -i /path/to/input/file --mode generate\n``` \n```shell\ngit clone https://github.com/eved1018/ISPIP\ncd ISPIP\npip3 install -r requirements.txt\npython3 main.py -i /path/to/input/file\n``` \n- Parameters: \n\t* `--rf-trees`: [integer] default: 10 - Scikit learn 'n_estimators' parameter.\n\t* `--rf-depth`: [integer] default: None - Scikit learn 'max_depth' parameter.\n\t* `--rf-ccp`: [float] default: 0.0 - Scikit learn 'ccp_alpha' parameter. (https://scikit-learn.org/stable/modules/tree.html#minimal-cost-complexity-pruning).\n\t* `--autocutoff`: [int] default: 15 - If no cutoff file is used this sets the default interface cutoff value. \n\n---\n### Updates:\nPlease Consult the CHANGELOG.md for all updates \n"
      },
      "source": "https://raw.githubusercontent.com/eved1018/ISPIP/main/ReadMe.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9580667820942218,
      "result": {
        "original_header": "Updates:",
        "type": "Text_excerpt",
        "value": "Please Consult the CHANGELOG.md for all updates \n"
      },
      "source": "https://raw.githubusercontent.com/eved1018/ISPIP/main/ReadMe.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8789468239173905,
      "result": {
        "original_header": "Abstract:",
        "type": "Text_excerpt",
        "value": "- Input/Output:\n\t* `-if`: [str] default: None - Directory containing trained models. This folder should contain .joblib files to use as model inputs.  \n\t* `-of`: [str] default: output - Directory to place output of ISPIP.\n\t* `-i`: [str] default: input.csv - CSV Filename with columns: \"residue\",\"predus\",\"ispred\",\"dockpred\",\"annotated\". The column residue is of the form {residue number}_{PDB ID}.{chain}. The annotated column is 1 or interface residue and 0 for non-interface residue\n\t* `-cv`: [str] default: cv -Directory containing test and train sets for cross-validation. Same csv format as train/test. Filenames should start with train and test\n\t* `--trainset`: [str] default: test_set.txt - CSV Filename containing proteins for models to train on with columns: protein,size. The column protein is of the form {PDB ID}.{chain}\n\t* `--testset`: [str] default: train_set.txt - CSV Filename containing proteins for models to test on with columns: protein,size. The column protein is of the form {PDB ID}.{chain}\n\t* `--cutoffs`: [str] default:'cutoffs.csv' - CSV Filename containing length of interface or precalculated cutoff for each protein. File should have columns: Protein,surface res,cutoff res,annotated res. \n\t* `--model-name`: [str] default:'model' - Name of models to import/export. (see -if about)\n\t* `--results-df`: [str] - path to result file from previous \"predict\" run to reprocess. (normally named bin_frame.csv) \n- Mode selection:\n\t* `--mode`: ['predict', 'train', 'generate','cv','viz', \"reprocess\"] default: 'predict'  \n\t\t* __predict__: Use pre-trained model in input folder to predict on set.\n\t\t* __generate__: Generate a new rf model from a test set without predicting on any data.\n\t\t* __train__: Generate a new rf model from a test set and train on a training set (the runs predict).\n\t\t* __viz__: Only call the pymol visualization function. (takes --results_df_input and -cv as input)\n\t\t* __cv__: Perform cross-validation and hyperparameter tuning of models on split training set, the best models are then used to predict on a designated testing set.  \n\t\t* __reprocess__: Generate statistics from a succesful predict run. (takes --results_df_input as input) \n- `*.joblib`: the trained models from a generate, test or cv run. Move these into the input directory to be used with 'predict' mode.  \n"
      },
      "source": "https://raw.githubusercontent.com/eved1018/ISPIP/main/ReadMe.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/eved1018/ISPIP/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "machine-learning, python"
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ISPIP"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "eved1018"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 51354,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/eved1018/ISPIP/main/ReadMe.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "eved1018",
          "type": "User"
        },
        "date_created": "2022-03-02T14:23:52Z",
        "date_published": "2022-03-02T14:28:05Z",
        "description": "**Full Changelog**: https://github.com/eved1018/ISPIP/compare/MetaDPIv2...ISPIP",
        "html_url": "https://github.com/eved1018/ISPIP/releases/tag/ISPIP",
        "name": "ISPIP",
        "release_id": 60804033,
        "tag": "ISPIP",
        "tarball_url": "https://api.github.com/repos/eved1018/ISPIP/tarball/ISPIP",
        "type": "Release",
        "url": "https://api.github.com/repos/eved1018/ISPIP/releases/60804033",
        "value": "https://api.github.com/repos/eved1018/ISPIP/releases/60804033",
        "zipball_url": "https://api.github.com/repos/eved1018/ISPIP/zipball/ISPIP"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "eved1018",
          "type": "User"
        },
        "date_created": "2021-11-16T18:13:28Z",
        "date_published": "2021-11-16T21:05:47Z",
        "description": "MetaDPIv2.0",
        "html_url": "https://github.com/eved1018/ISPIP/releases/tag/MetaDPIv2.0.0",
        "name": "MetaDPIv2",
        "release_id": 53504938,
        "tag": "MetaDPIv2.0.0",
        "tarball_url": "https://api.github.com/repos/eved1018/ISPIP/tarball/MetaDPIv2.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/eved1018/ISPIP/releases/53504938",
        "value": "https://api.github.com/repos/eved1018/ISPIP/releases/53504938",
        "zipball_url": "https://api.github.com/repos/eved1018/ISPIP/zipball/MetaDPIv2.0.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "eved1018",
          "type": "User"
        },
        "date_created": "2021-11-16T18:13:28Z",
        "date_published": "2022-02-24T18:07:51Z",
        "html_url": "https://github.com/eved1018/ISPIP/releases/tag/MetaDPIv2",
        "name": "MetaDPIv2.1",
        "release_id": 60401501,
        "tag": "MetaDPIv2",
        "tarball_url": "https://api.github.com/repos/eved1018/ISPIP/tarball/MetaDPIv2",
        "type": "Release",
        "url": "https://api.github.com/repos/eved1018/ISPIP/releases/60401501",
        "value": "https://api.github.com/repos/eved1018/ISPIP/releases/60401501",
        "zipball_url": "https://api.github.com/repos/eved1018/ISPIP/zipball/MetaDPIv2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "eved1018",
          "type": "User"
        },
        "date_created": "2021-11-16T18:13:28Z",
        "date_published": "2021-11-16T21:02:58Z",
        "description": "RELEASETEST\r\n\r\n**Full Changelog**: https://github.com/eved1018/MetaDPIv2/commits/MetaDPIv2",
        "html_url": "https://github.com/eved1018/ISPIP/releases/tag/Test",
        "name": "RELEASTEST",
        "release_id": 53504775,
        "tag": "Test",
        "tarball_url": "https://api.github.com/repos/eved1018/ISPIP/tarball/Test",
        "type": "Release",
        "url": "https://api.github.com/repos/eved1018/ISPIP/releases/53504775",
        "value": "https://api.github.com/repos/eved1018/ISPIP/releases/53504775",
        "zipball_url": "https://api.github.com/repos/eved1018/ISPIP/zipball/Test"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": " Requirements: ",
        "parent_header": [
          "ISPIP: Integrated Structure-based Protein Interface Prediction"
        ],
        "type": "Text_excerpt",
        "value": "# ISPIP: Integrated Structure-based Protein Interface Prediction\n\n[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.6323262.svg)](https://doi.org/10.5281/zenodo.6323262)\n\n---\n\n<p> Written by Evan Edelstein </p>\n\n<p> Manuscript by R. Viswanathan, M. Walder, E. Edelstein, S. Lazarev, M. Carroll, J.E. Fajardo, A. Fiser </p>\n\n[Walder, M., Edelstein, E., Carroll, M. et al. Integrated structure-based protein interface prediction.](https://bmcbioinformatics.biomedcentral.com/articles/10.1186/s12859-022-04852-2)\n\n---\n\n### Abstract: \n\n__Background__\n<p>Identifying protein interfaces can inform how proteins interact with their binding partners, uncover the regulatory mechanisms that control biological functions and guide the development of novel therapeutic agents. A variety of computational approaches have been developed for predicting a protein\u2019s interfacial residues from its known sequence and structure. Methods using the known three- dimensional structures of proteins can be template-based or template-free. Template-based methods have limited success in predicting interfaces when homologues with known complex structures are not available to use as templates. The prediction performance of template-free methods that only rely only upon proteins\u2019 intrinsic properties is limited by the amount of biologically relevant features that can be included in an interface prediction model.</p>\n\n__Results__\n<p> We describe the development of an integrated method, ISPIP, to explore the hypothesis that the efficacy of a computational prediction method of protein binding sites can be enhanced by using a combination of methods that rely on orthogonal structure-based properties of a query protein, combining and balancing both template-free and template-based features. ISPIP is a method that integrates these approaches through simple linear or logistic regression models and more complex decision tree models. On a diverse test set of 156 query proteins, ISPIP outperforms each of its individual classifiers in identifying protein binding interfaces. </p>\n\n__Conclusions__ \n<p>The integrated method captures the best performance of individual classifiers and delivers an improved interface prediction. The method is robust and performs well even when one of the individual classifiers performs poorly on a particular query protein. This work demonstrates that integrating orthogonal methods that depend on different structural properties of proteins performs better at interface prediction than any individual classifier alone.</p>\n\n\n---\n\n| ![image](Media/output-onlinegiftools.gif) | ![image](Media/legend-removebg-preview.png) |\n| --- | --- |\n| The structure of 1CP2.A is shown with the annotated and predicted interface resiues highlighted in pink and green respectively | \n\n---\n\n<h3> Requirements: </h3>\n\n* python3.7\n\n<h3>Usage: </h3>\n\n```shell\npip install ISPIP\nispip -i /path/to/input/file --mode generate\n```\n\n<h3>Development: </h3>\n\n```shell\ngit clone https://github.com/eved1018/ISPIP\ncd ISPIP\npip3 install -r requirements.txt\npython3 main.py -i /path/to/input/file\n```\n\n<h3>Arguments:</h3>\n\n- Input/Output:\n\t* `-if`: [str] default: None - Directory containing trained models. This folder should contain .joblib files to use as model inputs. \n\n\n\t\t\t| Model    | Name |\n\t\t\t| -------- | ------- |\n\t\t\t| RandomForest  | RF_{model_name}.joblib    |\n\t\t\t| Log Regression  | Logit_{model_name}.joblib    |\n\t\t\t| Lin Regression  | LinRerg_{model_name}.joblib    |\n\t\t\t| XGBoost  | XGB_{model_name}.joblib    |\n\n\t* `-of`: [str] default: output - Directory to place output of ISPIP.\n\t* `-i`: [str] default: input.csv - CSV Filename with columns: \"residue\",\"predus\",\"ispred\",\"dockpred\",\"annotated\". The column residue is of the form {residue number}_{PDB ID}.{chain}. The annotated column is 1 or interface residue and 0 for non-interface residue\n\t* `-cv`: [str] default: cv -Directory containing test and train sets for cross-validation. Same csv format as train/test. Filenames should start with train and test\n\t* `--trainset`: [str] default: test_set.txt - CSV Filename containing proteins for models to train on with columns: protein,size. The column protein is of the form {PDB ID}.{chain}\n\t* `--testset`: [str] default: train_set.txt - CSV Filename containing proteins for models to test on with columns: protein,size. The column protein is of the form {PDB ID}.{chain}\n\t* `--cutoffs`: [str] default:'cutoffs.csv' - CSV Filename containing length of interface or precalculated cutoff for each protein. File should have columns: Protein,surface res,cutoff res,annotated res. \n\t* `--model-name`: [str] default:'model' - Name of models to import/export. (see -if about)\n\t* `--results-df`: [str] - path to result file from previous \"predict\" run to reprocess. (normally named bin_frame.csv)\n\n- Mode selection:\n\t* `--mode`: ['predict', 'train', 'generate','cv','viz', \"reprocess\"] default: 'predict'  \n\t\t* __predict__: Use pre-trained model in input folder to predict on set.\n\t\t* __generate__: Generate a new rf model from a test set without predicting on any data.\n\t\t* __train__: Generate a new rf model from a test set and train on a training set (the runs predict).\n\t\t* __viz__: Only call the pymol visualization function. (takes --results_df_input and -cv as input)\n\t\t* __cv__: Perform cross-validation and hyperparameter tuning of models on split training set, the best models are then used to predict on a designated testing set.  \n\t\t* __reprocess__: Generate statistics from a succesful predict run. (takes --results_df_input as input)\n\n- Parameters: \n\t* `--rf-trees`: [integer] default: 10 - Scikit learn 'n_estimators' parameter.\n\t* `--rf-depth`: [integer] default: None - Scikit learn 'max_depth' parameter.\n\t* `--rf-ccp`: [float] default: 0.0 - Scikit learn 'ccp_alpha' parameter. (https://scikit-learn.org/stable/modules/tree.html#minimal-cost-complexity-pruning).\n\t* `--autocutoff`: [int] default: 15 - If no cutoff file is used this sets the default interface cutoff value.\n\n\n- Flags: \n\t* `--pymol`: Output pymol session and image of protein with experimental and predicted interfaces overladed. \n\t* `-tv`: Output svg image of a randomly sampled tree (for large datasets this can take up a huge amount of time and space) see https://github.com/parrt/dtreeviz for details.\n\t* `-xg`: Include the use of gradient boosting regression model.\n\n\nOutput:\n\n- `results.csv`: this file contains the fscore, MCC, Roc AUC and PR AUC for each individual method and model. \n\n- `roc_model.csv` and pr_model.csv: the TRP and FPR by threshold for each individual method and model, can be used to generate specific ROC or PR graphs.\n\n- `fscore_mcc_by_protein`: the individual fscore and mcc for each protein in the test set. \n\n- `*.joblib`: the trained models from a generate, test or cv run. Move these into the input directory to be used with 'predict' mode. \n\n- `pairtest.csv`: Comparison of statistical significance between AUCs.\n\t- top triangle: difference in pairs of AUCs\n\t- bottom triangle: log(10) of p-values for the difference in pairs of AUCs.\n- `proteins`: Directory containing pymol sessions for each protein in the test set.  \n- `cvout`: Directory containing the best parameters for each model used in the final prediction, as well as the individual metrics over each cross validation step. \n\n\n---\n### Special Thanks To:\n\n<p>Dr. Andras Fiser and Dr. Eduardo J Fajardo for insight and guidance.</p> \n\n<p>Terence Parr and Prince Grover for use of dtreeviz.</p>\n\n\n---\n### Updates:\nPlease Consult the CHANGELOG.md for all updates\n\n"
      },
      "source": "https://raw.githubusercontent.com/eved1018/ISPIP/main/ReadMe.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 13:36:05",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage: ",
        "parent_header": [
          "ISPIP: Integrated Structure-based Protein Interface Prediction"
        ],
        "type": "Text_excerpt",
        "value": "# ISPIP: Integrated Structure-based Protein Interface Prediction\n\n[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.6323262.svg)](https://doi.org/10.5281/zenodo.6323262)\n\n---\n\n<p> Written by Evan Edelstein </p>\n\n<p> Manuscript by R. Viswanathan, M. Walder, E. Edelstein, S. Lazarev, M. Carroll, J.E. Fajardo, A. Fiser </p>\n\n[Walder, M., Edelstein, E., Carroll, M. et al. Integrated structure-based protein interface prediction.](https://bmcbioinformatics.biomedcentral.com/articles/10.1186/s12859-022-04852-2)\n\n---\n\n### Abstract: \n\n__Background__\n<p>Identifying protein interfaces can inform how proteins interact with their binding partners, uncover the regulatory mechanisms that control biological functions and guide the development of novel therapeutic agents. A variety of computational approaches have been developed for predicting a protein\u2019s interfacial residues from its known sequence and structure. Methods using the known three- dimensional structures of proteins can be template-based or template-free. Template-based methods have limited success in predicting interfaces when homologues with known complex structures are not available to use as templates. The prediction performance of template-free methods that only rely only upon proteins\u2019 intrinsic properties is limited by the amount of biologically relevant features that can be included in an interface prediction model.</p>\n\n__Results__\n<p> We describe the development of an integrated method, ISPIP, to explore the hypothesis that the efficacy of a computational prediction method of protein binding sites can be enhanced by using a combination of methods that rely on orthogonal structure-based properties of a query protein, combining and balancing both template-free and template-based features. ISPIP is a method that integrates these approaches through simple linear or logistic regression models and more complex decision tree models. On a diverse test set of 156 query proteins, ISPIP outperforms each of its individual classifiers in identifying protein binding interfaces. </p>\n\n__Conclusions__ \n<p>The integrated method captures the best performance of individual classifiers and delivers an improved interface prediction. The method is robust and performs well even when one of the individual classifiers performs poorly on a particular query protein. This work demonstrates that integrating orthogonal methods that depend on different structural properties of proteins performs better at interface prediction than any individual classifier alone.</p>\n\n\n---\n\n| ![image](Media/output-onlinegiftools.gif) | ![image](Media/legend-removebg-preview.png) |\n| --- | --- |\n| The structure of 1CP2.A is shown with the annotated and predicted interface resiues highlighted in pink and green respectively | \n\n---\n\n<h3> Requirements: </h3>\n\n* python3.7\n\n<h3>Usage: </h3>\n\n```shell\npip install ISPIP\nispip -i /path/to/input/file --mode generate\n```\n\n<h3>Development: </h3>\n\n```shell\ngit clone https://github.com/eved1018/ISPIP\ncd ISPIP\npip3 install -r requirements.txt\npython3 main.py -i /path/to/input/file\n```\n\n<h3>Arguments:</h3>\n\n- Input/Output:\n\t* `-if`: [str] default: None - Directory containing trained models. This folder should contain .joblib files to use as model inputs. \n\n\n\t\t\t| Model    | Name |\n\t\t\t| -------- | ------- |\n\t\t\t| RandomForest  | RF_{model_name}.joblib    |\n\t\t\t| Log Regression  | Logit_{model_name}.joblib    |\n\t\t\t| Lin Regression  | LinRerg_{model_name}.joblib    |\n\t\t\t| XGBoost  | XGB_{model_name}.joblib    |\n\n\t* `-of`: [str] default: output - Directory to place output of ISPIP.\n\t* `-i`: [str] default: input.csv - CSV Filename with columns: \"residue\",\"predus\",\"ispred\",\"dockpred\",\"annotated\". The column residue is of the form {residue number}_{PDB ID}.{chain}. The annotated column is 1 or interface residue and 0 for non-interface residue\n\t* `-cv`: [str] default: cv -Directory containing test and train sets for cross-validation. Same csv format as train/test. Filenames should start with train and test\n\t* `--trainset`: [str] default: test_set.txt - CSV Filename containing proteins for models to train on with columns: protein,size. The column protein is of the form {PDB ID}.{chain}\n\t* `--testset`: [str] default: train_set.txt - CSV Filename containing proteins for models to test on with columns: protein,size. The column protein is of the form {PDB ID}.{chain}\n\t* `--cutoffs`: [str] default:'cutoffs.csv' - CSV Filename containing length of interface or precalculated cutoff for each protein. File should have columns: Protein,surface res,cutoff res,annotated res. \n\t* `--model-name`: [str] default:'model' - Name of models to import/export. (see -if about)\n\t* `--results-df`: [str] - path to result file from previous \"predict\" run to reprocess. (normally named bin_frame.csv)\n\n- Mode selection:\n\t* `--mode`: ['predict', 'train', 'generate','cv','viz', \"reprocess\"] default: 'predict'  \n\t\t* __predict__: Use pre-trained model in input folder to predict on set.\n\t\t* __generate__: Generate a new rf model from a test set without predicting on any data.\n\t\t* __train__: Generate a new rf model from a test set and train on a training set (the runs predict).\n\t\t* __viz__: Only call the pymol visualization function. (takes --results_df_input and -cv as input)\n\t\t* __cv__: Perform cross-validation and hyperparameter tuning of models on split training set, the best models are then used to predict on a designated testing set.  \n\t\t* __reprocess__: Generate statistics from a succesful predict run. (takes --results_df_input as input)\n\n- Parameters: \n\t* `--rf-trees`: [integer] default: 10 - Scikit learn 'n_estimators' parameter.\n\t* `--rf-depth`: [integer] default: None - Scikit learn 'max_depth' parameter.\n\t* `--rf-ccp`: [float] default: 0.0 - Scikit learn 'ccp_alpha' parameter. (https://scikit-learn.org/stable/modules/tree.html#minimal-cost-complexity-pruning).\n\t* `--autocutoff`: [int] default: 15 - If no cutoff file is used this sets the default interface cutoff value.\n\n\n- Flags: \n\t* `--pymol`: Output pymol session and image of protein with experimental and predicted interfaces overladed. \n\t* `-tv`: Output svg image of a randomly sampled tree (for large datasets this can take up a huge amount of time and space) see https://github.com/parrt/dtreeviz for details.\n\t* `-xg`: Include the use of gradient boosting regression model.\n\n\nOutput:\n\n- `results.csv`: this file contains the fscore, MCC, Roc AUC and PR AUC for each individual method and model. \n\n- `roc_model.csv` and pr_model.csv: the TRP and FPR by threshold for each individual method and model, can be used to generate specific ROC or PR graphs.\n\n- `fscore_mcc_by_protein`: the individual fscore and mcc for each protein in the test set. \n\n- `*.joblib`: the trained models from a generate, test or cv run. Move these into the input directory to be used with 'predict' mode. \n\n- `pairtest.csv`: Comparison of statistical significance between AUCs.\n\t- top triangle: difference in pairs of AUCs\n\t- bottom triangle: log(10) of p-values for the difference in pairs of AUCs.\n- `proteins`: Directory containing pymol sessions for each protein in the test set.  \n- `cvout`: Directory containing the best parameters for each model used in the final prediction, as well as the individual metrics over each cross validation step. \n\n\n---\n### Special Thanks To:\n\n<p>Dr. Andras Fiser and Dr. Eduardo J Fajardo for insight and guidance.</p> \n\n<p>Terence Parr and Prince Grover for use of dtreeviz.</p>\n\n\n---\n### Updates:\nPlease Consult the CHANGELOG.md for all updates\n\n"
      },
      "source": "https://raw.githubusercontent.com/eved1018/ISPIP/main/ReadMe.md",
      "technique": "header_analysis"
    }
  ]
}