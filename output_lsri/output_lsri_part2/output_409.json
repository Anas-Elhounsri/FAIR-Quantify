{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "PyVisualFields"
        ],
        "type": "Text_excerpt",
        "value": "If you found this package impactful for your research, please cite the following article: \n- Mohammad Eslami, Saber Kazeminasab, Vishal Sharma, Yangjiani Li, Mojtaba Fazli, Mengyu Wang, Nazlee Zebardast, Tobias Elze; PyVisualFields: A Python Package for Visual Field Analysis. Trans. Vis. Sci. Tech. 2023;12(2):6. https://doi.org/10.1167/tvst.12.2.6.\n\nand of course the corresponding sub-package:\n- vfprogression (by Elze et al. [1])\n- visualFields (by Marin-Granch et al. [2])\n"
      },
      "source": "https://raw.githubusercontent.com/mohaEs/PyVisualField/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "references:",
        "parent_header": [
          "PyVisualFields"
        ],
        "type": "Text_excerpt",
        "value": "[1] https://cran.r-project.org/web/packages/vfprogression/index.html </br>\n[2] https://cran.r-project.org/web/packages/visualFields/index.html \n\n</br>\n\n![](./imgs/img.jpg)\n\n"
      },
      "source": "https://raw.githubusercontent.com/mohaEs/PyVisualField/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/mohaEs/PyVisualField"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-10-11T14:00:24Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-05-27T21:49:45Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.966170743422256,
      "result": {
        "original_header": "A python tool collection for analyzing visual fields",
        "type": "Text_excerpt",
        "value": "This packages includes functions for visuald field analysis and display.  \nWe use the rpy2 as the python wrapper to use R in Python. Then, we define and prepare the methods to call the methods and data implemented and introduced in R packages vfprogression (by Elze et al. [1]) and visualFields (by Marin-Granch et al. [2]). We write these functions in python language and demonstrate their functionalities in four categories of presenting data, plotting, scoring and progression analysis, and normalization analysis. For each category, we provide the examples, description of each function, associated requirements, and the output of that function in Jupyter notebooks.\n \n"
      },
      "source": "https://raw.githubusercontent.com/mohaEs/PyVisualField/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9910397288512205,
      "result": {
        "original_header": "list of functions",
        "type": "Text_excerpt",
        "value": "The list and description of all functions are as follow. They are all examined and introduced with examples in 4 different notebooks. It is important to mention that, based on the background R packages, the input VF dataframe needs to have columns with special column names. Make sure, to consider the data notebook. If further information is required, see the corresponding references: _vfprogression[1]_, _visualFields[2]_ </br>\n- Data [demo_1_Data.ipynb](demo_1_Data.ipynb)\n- Normalization and deviation analysis [demo_2_Deviation_Analysis.ipynb](demo_2_Deviation_Analysis.ipynb)\n- Plotting [demo_3_Plotting.ipynb](demo_3_Plotting.ipynb)\n- Analysis [demo_4_Analysis.ipynb](demo_4_Analysis.ipynb) \n-   &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;   __function__  &nbsp; ----------------------------- &nbsp; __description__ &nbsp; ----------- &nbsp; __from package__ </br> </br>\n- visualFields.data_vfpwgRetest24d2() &nbsp; ----------- &nbsp; VF data &nbsp; ----------- &nbsp; _visualFields[2]_ \n- visualFields.data_vfctrSunyiu24d2() &nbsp; ----------- &nbsp; VF data &nbsp; ----------- &nbsp; _visualFields[2]_ \n- visualFields.data_vfpwgSunyiu24d2() &nbsp; ----------- &nbsp; VF data &nbsp; ----------- &nbsp; _visualFields[2]_ \n- visualFields.data_vfctrSunyiu10d2() &nbsp; ----------- &nbsp; VF data &nbsp; ----------- &nbsp; _visualFields[2]_ \n-  visualFields.data_vfctrIowaPC26() &nbsp; ----------- &nbsp; VF data &nbsp; ----------- &nbsp; _visualFields[2]_ \n- visualFields.data_vfctrIowaPeri() &nbsp; ----------- &nbsp; VF data &nbsp; ----------- &nbsp; _visualFields[2]_ </br></br>\n- vfprogression.data_vfseries() &nbsp; ----------- &nbsp; VF data &nbsp; ----------- &nbsp; _vfprogression[1]_ \n- vfprogression.data_vfi() &nbsp; ----------- &nbsp; VF data &nbsp; ----------- &nbsp; _vfprogression[1]_ \n-  vfprogression.data_cigts() &nbsp; ----------- &nbsp; VF data &nbsp; ----------- &nbsp; _vfprogression[1]_ \n- vfprogression.data_plrnouri2012() &nbsp; ----------- &nbsp; VF data &nbsp; ----------- &nbsp; _vfprogression[1]_ \n- vfprogression.data_schell2014()  &nbsp; ----------- &nbsp; VF data &nbsp; ----------- &nbsp; _vfprogression[1]_  </br></br>\n- vfprogression.get_score_AGIS() &nbsp; ----------- &nbsp;  get AGIS score &nbsp; ----------- &nbsp; _vfprogression[1]_\n- vfprogression.get_score_CIGTS() &nbsp; ----------- &nbsp;  get CIGTS score &nbsp; ----------- &nbsp; _vfprogression[1]_\n- vfprogression.progression_cigts() &nbsp; ----------- &nbsp;  progression analysis by CIGTS &nbsp; ----------- &nbsp; _vfprogression[1]_\n- vfprogression.progression_plrnouri2012() &nbsp; ----------- &nbsp;  progression analysis by Nouri et al. &nbsp; ----------- &nbsp; _vfprogression[1]_\n- vfprogression.progression_vfi()&nbsp; ----------- &nbsp;  progression analysis by VFi measurements &nbsp; ----------- &nbsp; _vfprogression[1]_\n- vfprogression.progression_schell2014()&nbsp; ----------- &nbsp;  progression analysis by schell et al. &nbsp; ----------- &nbsp; _vfprogression[1]_\n- vfprogression.progression_agis()&nbsp; ----------- &nbsp;  progression analysis by AGIS &nbsp; ----------- &nbsp; _vfprogression[1]_ </br></br> \n- visualFields.glr() &nbsp; ----------- &nbsp;  Linear regression with global indices  &nbsp; ----------- &nbsp; _visualFields[2]_\n- visualFields.plr() &nbsp; ----------- &nbsp;  pointwise linear regression (PLR)  &nbsp; ----------- &nbsp; _visualFields[2]_  \n- visualFields.poplr() &nbsp; ----------- &nbsp;  PoPLR regression analysis  &nbsp; ----------- &nbsp; _visualFields[2]_ </br></br>\n- vfprogression.plotValues() &nbsp; ----------- &nbsp; plot/save VF values (s, td, pd) &nbsp; ----------- &nbsp; _vfprogression[1]_ \n- vfprogression.plotProbabilities() ----------- &nbsp; plot/save tdp/pdp values (tdp, pdp) &nbsp; ----------- &nbsp; _vfprogression[1]_\n- visualFields.vfplot() ----------- &nbsp; plot/save s/td/pd/tds/pds values (s, td, pd) &nbsp; ----------- &nbsp; _visualFields[2]_\n- visualFields.vfplot_s()  &nbsp; ----------- &nbsp; alias for vfplot(type='s') &nbsp; ----------- &nbsp; _visualFields[2]_\n- visualFields.vfplot_td()  &nbsp; ----------- &nbsp; alias for vfplot(type='td') &nbsp; ----------- &nbsp; _visualFields[2]_\n- visualFields.vfplot_pd() &nbsp; ----------- &nbsp; alias for vfplot(type='pd') &nbsp; ----------- &nbsp; _visualFields[2]_\n- visualFields.vfplot_tds()  &nbsp; ----------- &nbsp; alias for vfplot(type='tds') (s, td, pd) &nbsp; ----------- &nbsp; _visualFields[2]_\n- visualFields.vfplot_pds()  &nbsp; ----------- &nbsp; alias for vfplot(type='pds') (s, td, pd) &nbsp; ----------- &nbsp; _visualFields[2]_\n- visualFields.plotProbColormap() &nbsp; ----------- &nbsp; show colormap of probablies &nbsp; ----------- &nbsp; _visualFields[2]_\n- visualFields.vfplotsparklines() &nbsp; ----------- &nbsp; plot/save sparklines (s, td, pd) &nbsp; ----------- &nbsp; _visualFields[2]_\n- visualFields.vfplotsparklines_s()  &nbsp; ----------- &nbsp; alias for vfplotsparklines(type='s') &nbsp; ----------- &nbsp; _visualFields[2]_\n- visualFields.vfplotsparklines_td() &nbsp; ----------- &nbsp; alias for vfplotsparklines(type='td') &nbsp; ----------- &nbsp; _visualFields[2]_\n- visualFields.vfplotsparklines_pd() &nbsp; ----------- &nbsp; alias for vfplotsparklines(type='pd') &nbsp; ----------- &nbsp; _visualFields[2]_\n- visualFields.vfplotplr() &nbsp; ----------- &nbsp; -- &nbsp; ----------- &nbsp; _visualFields[2]_\n- visualFields.vflegoplot() &nbsp; ----------- &nbsp; -- &nbsp; ----------- &nbsp; _visualFields[2]_ \n- visualFields.vfsfa() &nbsp; ----------- &nbsp; Generates one-page report of single field analyses as a pdf file &nbsp; ----------- &nbsp; _visualFields[2]_  </br></br>\n- currentNV = visualFields.getnv() &nbsp; ----------- &nbsp; get current normative environment/setting (NV) &nbsp; ----------- &nbsp; _visualFields[2]_ \n- visualFields.getallvalues() &nbsp; ----------- &nbsp; compute all td, pd, pdp, tdp, gl, gh,glp based on the current NV &nbsp; ----------- &nbsp; _visualFields[2]_\n- visualFields.gettd() &nbsp; ----------- &nbsp; alias for getallvalues only to compute td &nbsp; ----------- &nbsp; _visualFields[2]_\n- visualFields.getgl() &nbsp; ----------- &nbsp; alias for getallvalues only to compute gl &nbsp; ----------- &nbsp; _visualFields[2]_\n- visualFields.gettdp() &nbsp; ----------- &nbsp; alias for getallvalues only to compute tdp &nbsp; ----------- &nbsp; _visualFields[2]_\n- visualFields.getpd() &nbsp; ----------- &nbsp; alias for getallvalues only to compute pd &nbsp; ----------- &nbsp; _visualFields[2]_\n- visualFields.getgh() &nbsp; ----------- &nbsp; alias for getallvalues only to compute gh &nbsp; ----------- &nbsp; _visualFields[2]_\n- visualFields.getpdp() &nbsp; ----------- &nbsp; alias for getallvalues only to compute pdp &nbsp; ----------- &nbsp; _visualFields[2]_\n- visualFields.getglp() &nbsp; ----------- &nbsp; alias for getallvalues only to compute gi &nbsp; ----------- &nbsp; _visualFields[2]_\n- visualFields.get_info_normvals() &nbsp; ----------- &nbsp; Get all avialbale predefined normalization environments/settings &nbsp; ----------- &nbsp; _visualFields[2]_\n- visualFields.setnv() &nbsp; ----------- &nbsp; change/set normalization environment based on a predefined NV &nbsp; ----------- &nbsp; _visualFields[2]_\n- visualFields.nvgenerate &nbsp; ----------- &nbsp; generate a normalization environment based new data &nbsp; ----------- &nbsp; _visualFields[2]_ \n"
      },
      "source": "https://raw.githubusercontent.com/mohaEs/PyVisualField/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/mohaEs/PyVisualField/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/mohaEs/PyVisualField/main/demo_1_Data.ipynb"
      },
      "source": "https://raw.githubusercontent.com/mohaEs/PyVisualField/main/demo_1_Data.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/mohaEs/PyVisualField/main/demo_4_Analysis.ipynb"
      },
      "source": "https://raw.githubusercontent.com/mohaEs/PyVisualField/main/demo_4_Analysis.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/mohaEs/PyVisualField/main/demo_2_Deviation_Analysis.ipynb"
      },
      "source": "https://raw.githubusercontent.com/mohaEs/PyVisualField/main/demo_2_Deviation_Analysis.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/mohaEs/PyVisualField/main/demo_3_Plotting.ipynb"
      },
      "source": "https://raw.githubusercontent.com/mohaEs/PyVisualField/main/demo_3_Plotting.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/mohaEs/PyVisualField/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "mohaEs/PyVisualField"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PyVisualFields"
      },
      "source": "https://raw.githubusercontent.com/mohaEs/PyVisualField/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/mohaEs/PyVisualField/main/./imgs/img.jpg"
      },
      "source": "https://raw.githubusercontent.com/mohaEs/PyVisualField/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "\n\n# Address the following steps to prepare the system\n\n1- Verify R and rpy2 work well </br>\n2- Install R requirements </br>\n3- Install python requirements </br>\n4- install our PyVisualFields package\n\n## 1- verify the R and rpy2 installation\nThis package needs R >= 4.1.1 and rpy2 >= 3.4.5 to be installed and work fine. </br>\nAfter your prefered installation approach, use the _test_rpy2.py_ to verify that your installation works.\nIf you recieved error: \"R_HOME must be set in the environment or Registry\", you need to fix it first (see the [section 2](R_HOME) of the readme). \n\n## 2- install R packages\nuse _install_R_packages.py_ to install required R packages.\n\n## 3- install python packages (you can skip this)\ninstall other requirements with requirement.txt file:\n> \\> pip install -r requirements.txt </br>\n\nor simply manually install these:   </br>\n&emsp;    tzlocal >= 3.0 </br>\n&emsp;    scikit-image >= 0.18.1 </br>\n&emsp;    pandas >= 1.2.4 </br>\n&emsp;    PyPDF2 >=  1.26.0 </br>\n&emsp;    PyMuPDF >= 1.19.1 </br>\n&emsp;    reportlab >=  3.6.2 </br>\n&emsp;    matplotlib >= 3.3.4 </br>\n\n## 4- install the PyVisualFields package\n\n> \\> pip install PyVisualFields\n\n### Done: now you can import the library and use the notebooks \n</br></br>\n## +++++++++ Section 2 ++++++++\n\n# R_HOME\n\n## rpy2 problem (R_HOME)\nif you have installed R and rpy2 before and have a problem to set the R_HOME error. </br>\nQuick fix: </br> \n### A) Get your R path (path/to/R) </br>\nin R terminal type R.home() and get the path of installed R. </br>\nexample: </br>\n> \\> R.home() </br>\n[1] \"C:/Users/mohae/anaconda3/envs/env_test_pyVF/lib/R\" </br>\nso we have our path/to/R e.g. as \"C:/Users/mohae/anaconda3/envs/env_test_pyVF/lib/R\" \n\n### B) add the R_HOME variable\nThen set the R_HOME environment variable to this path. </br>\n==> For windows:</br>\nin cmd or anaconda prompt, set a permanent setting path:\n> setx R_HOME path/to/R\n\n==> For mac or Linux: </br>\npermanently: </br>\n> echo 'export R_HOME=path/to/R' >> ~/.bash_profile \n\n### __Notice__: You need to restart the terminal to have changes"
      },
      "source": "https://raw.githubusercontent.com/mohaEs/PyVisualField/main/readme_Installation.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "## set up everything from scratch\n\nIf you have not installed any R or rpy2, or want to make a seperate environment with Anaconda, follow our intruction:\n\n### 0- Download/clone the GitHub repository\n[GitHub link](https://github.com/mohaEs/PyVisualField) \n\n### 1- create and activate a conda environment:\n\n> \\> conda create --name env_pyVF python=3.8 </br>\n> \\> conda activate env_pyVF </br>\n\n### 2- install R in the environment\ninstall R 4.1.2: </br>\n> (env_pyVF) \\> conda install -c conda-forge r-base==4.1.2 \n\n### 3- set R_HOME variable\nset the R_HOME environment variable/path to the R version installed in the environment: </br>\n#### A) Get your R path (path/to/R) </br>\nin R terminal type R.home() and get the path of installed R. </br>\nexample: </br>\n> (env_pyVF)\\> R </br>\n> \\> R.home() </br>\n[1] \"C:/Users/mohae/anaconda3/envs/env_pyVF/lib/R\" </br>\nso we have our path/to/R as \"C:/Users/mohae/anaconda3/envs/env_pyVF/lib/R\" </br>\ncopy the path and quit from R\n\n\n#### B) add the R_HOME variable\nThen set the R_HOME environment variable to this path. </br>\n==> For windows:</br>\nin cmd or anaconda prompt, set a permanent setting path:\n> \\> setx R_HOME path/to/R\n\n==> For mac or Linux: </br>\npermanently: </br>\n> \\> echo 'export R_HOME=path/to/R' >> ~/.bash_profile \n\nclose the terminal and open a new one </br>\n\n### 4- install rpy2\nopen a new conda prompt </br>\nactivate the environement e.g. \n> \\> conda activate env_pyVF\n\ninstall rpy2 </br>\n> (env_pyVF)\\> pip install rpy2==3.4.5 \n\nuse _test_rpy2.py_ to verify the R and rpy2 installation.\n\n### 5- install required R packages\ninstall required R packages with _install_R_packages.py_\n> (env_pyVF)\\> python install_R_packages.py\n\nevaluate the installation with _test_Rpacks.py_\n\n### 6- install required python packages (you can skip this)\n> (env_pyVF)\\> pip install -r requirements.txt\n\n### 7- install PyVisualFields\nif all above sections work properly, install the PyVisualFields Package:\n> (env_pyVF)\\> pip install PyVisualFields\n\n\n### 8- install every other packages do you need in the environment, e.g. jupyter\n> (env_pyVF)\\> ..\n"
      },
      "source": "https://raw.githubusercontent.com/mohaEs/PyVisualField/main/readme_Installation_conda.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation:",
        "parent_header": [
          "PyVisualFields"
        ],
        "type": "Text_excerpt",
        "value": "This python package depends on \n- R \n- rpy2 python package\n- vfprogression R package\n- visualFields R package\n\nMake sure to install them before installing this PyVisualFields package:\n\n- If you want to create a seperate conda environment and install everything from scratch follow this guidline: [readme_Installation_conda.md](https://github.com/mohaEs/PyVisualField/blob/main/readme_Installation_conda.md)\nor this video [installation_video](https://youtu.be/_L9YWrtlOhY) \n\n- If you have your preinstalled R or rpy2, follow the steps provided in our guideline: [readme_Installation.md](https://github.com/mohaEs/PyVisualField/blob/main/readme_Installation.md)\n"
      },
      "source": "https://raw.githubusercontent.com/mohaEs/PyVisualField/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9971644700941421,
      "result": {
        "original_header": "A python tool collection for analyzing visual fields",
        "type": "Text_excerpt",
        "value": "https://pypi.org/project/PyVisualFields/ \n"
      },
      "source": "https://raw.githubusercontent.com/mohaEs/PyVisualField/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/mohaEs/PyVisualField/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Copyright (c) 2018 The Python Packaging Authority\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
      },
      "source": "https://raw.githubusercontent.com/mohaEs/PyVisualField/main/license",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PyVisualField"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "mohaEs"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 540237,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 78167,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/mohaEs/PyVisualField/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-04 10:36:14",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 10
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Demo jupyter notebooks",
        "parent_header": [
          "PyVisualFields"
        ],
        "type": "Text_excerpt",
        "value": "The list and description of all functions are available at [All_Functions](#list-of-functions). They are all examined and introduced with examples in 4 different notebooks categorized: </br>\n- Data [demo_1_Data.ipynb](demo_1_Data.ipynb)\n- Normalization and deviation analysis [demo_2_Deviation_Analysis.ipynb](demo_2_Deviation_Analysis.ipynb)\n- Plotting [demo_3_Plotting.ipynb](demo_3_Plotting.ipynb)\n- Analysis [demo_4_Analysis.ipynb](demo_4_Analysis.ipynb)\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/mohaEs/PyVisualField/main/README.md",
      "technique": "header_analysis"
    }
  ]
}