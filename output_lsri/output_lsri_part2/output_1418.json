{
  "application_domain": [
    {
      "confidence": 9.59,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Code references",
        "parent_header": [
          "ResPAN"
        ],
        "type": "Text_excerpt",
        "value": "For the implementation of ResPAN, we referred to [WGAN-GP](https://github.com/Zeleni9/pytorch-wgan) for the structure of Generative Adversarial Network and [iMAP](https://github.com/Svvord/iMAP) for the random walk mutual nearest neighbor method. Many thanks to their open-source treasure.\n"
      },
      "source": "https://raw.githubusercontent.com/AprilYuge/ResPAN/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Paper references",
        "parent_header": [
          "ResPAN"
        ],
        "type": "Text_excerpt",
        "value": "[1] Wang, Dongfang, et al. \"iMAP: integration of multiple single-cell datasets by adversarial paired transfer networks.\" Genome biology 22.1 (2021): 1-24.\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/AprilYuge/ResPAN/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/AprilYuge/ResPAN"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-05-13T03:19:58Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-06-28T08:52:57Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "a light structured Residual autoencoder and mutual nearest neighbor Paring guided Adversarial Network for scRNA-seq batch correction"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9960687198729103,
      "result": {
        "original_header": "ResPAN",
        "type": "Text_excerpt",
        "value": "This reporsity contains code and information of data used in the paper \u201c*ResPAN: a powerful batch correction model for scRNA-seq data through residual adversarial networks*\u201d. Source code for ResPAN are in the [ResPAN](https://github.com/AprilYuge/ResPAN/tree/main/ResPAN) folder, scipts for reproducing benchmarking results are in the [scripts](https://github.com/AprilYuge/ResPAN/tree/main/scripts) folder, and data information can be found in the [data](https://github.com/AprilYuge/ResPAN/tree/main/data) folder. \nResPAN is a light structured **Res**idual autoencoder and mutual nearest neighbor **P**aring guided **A**dversarial **N**etwork for scRNA-seq batch correction. The workflow of ResPAN contains three key steps: generation of training data, adversarial training of the neural network, and generation of corrected data without batch effect. A figure summary is shown below. \n"
      },
      "source": "https://raw.githubusercontent.com/AprilYuge/ResPAN/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9757883503737267,
      "result": {
        "original_header": "API document",
        "type": "Text_excerpt",
        "value": "For the API of our model, please refer this [link](https://respan.readthedocs.io/en/latest/API.html).\n \n"
      },
      "source": "https://raw.githubusercontent.com/AprilYuge/ResPAN/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://respan.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/AprilYuge/ResPAN/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/AprilYuge/ResPAN/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/AprilYuge/ResPAN/main/tutorials/respan_tutorial.ipynb"
      },
      "source": "https://raw.githubusercontent.com/AprilYuge/ResPAN/main/tutorials/respan_tutorial.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/AprilYuge/ResPAN/main/CRC_analysis/crc_evaluation.ipynb"
      },
      "source": "https://raw.githubusercontent.com/AprilYuge/ResPAN/main/CRC_analysis/crc_evaluation.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/AprilYuge/ResPAN/main/data/simulate_post_process.ipynb"
      },
      "source": "https://raw.githubusercontent.com/AprilYuge/ResPAN/main/data/simulate_post_process.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/AprilYuge/ResPAN/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "AprilYuge/ResPAN"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ResPAN"
      },
      "source": "https://raw.githubusercontent.com/AprilYuge/ResPAN/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/AprilYuge/ResPAN/main/images/workflow.png"
      },
      "source": "https://raw.githubusercontent.com/AprilYuge/ResPAN/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "ResPAN"
        ],
        "type": "Text_excerpt",
        "value": "There are two ways to install and use ResPAN, the first and easiest way is to use pip install:\n```\npip install ResPAN\n```\n\nIf it doesn't work, you can also make a clone of this GitHub repository:\n```\ngit clone https://github.com/AprilYuge/ResPAN.git\n```\n\nA callable function `run_respan` is in ResPAN/respan.py.\n"
      },
      "source": "https://raw.githubusercontent.com/AprilYuge/ResPAN/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/AprilYuge/ResPAN/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2022 Yuge Wang\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/AprilYuge/ResPAN/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ResPAN"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "AprilYuge"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 1024524,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 66892,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 6390,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/AprilYuge/ResPAN/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Package requirement",
        "parent_header": [
          "ResPAN"
        ],
        "type": "Text_excerpt",
        "value": "ResPAN is implemented in Python and based on the framework of PyTorch. Before downloading and installing ResPAN, some packages need to be installed first. These required packages along with their versions used in our manuscript are listed below.\n\n| Package    | Version      |\n|------------|--------------|\n| numpy      | 1.18.1       |\n| pandas     | 1.3.5        |\n| scipy      | 1.8.0        |\n| scanpy     | 1.8.2        |\n| pytorch    | 1.10.2+cu113 |\n"
      },
      "source": "https://raw.githubusercontent.com/AprilYuge/ResPAN/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-04 14:21:35",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 13
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Brief tutorial",
        "parent_header": [
          "ResPAN"
        ],
        "type": "Text_excerpt",
        "value": "A brief tutorial of using ResPAN can be found below and under the folder [tutorials](https://github.com/AprilYuge/ResPAN/tree/main/tutorials).\n\nTo run our method, the first thing is to import necessary packages:\n```\nimport numpy as np\nimport pandas as pd\nimport scanpy as sc\nimport scipy\nfrom ResPAN import run_respan\n```\n\nThen we need to load the scRNA-seq data with batch information and preprocess it before running ResPAN:\n```\n# data loading\nadata = sc.read_loom('CL_raw.loom', sparse=False) \n# pre-processing\nsc.pp.filter_cells(adata, min_genes=200)\nsc.pp.filter_genes(adata, min_cells=3)\nsc.pp.normalize_per_cell(adata, counts_per_cell_after=1e4)\nsc.pp.log1p(adata)\nsc.pp.highly_variable_genes(adata, n_top_genes=2000, batch_key='batch')\nadata = adata[:, adata.var['highly_variable']]\n# check if data is in sparse format\nif isinstance(adata.X, scipy.sparse.csr.csr_matrix): \n    adata_new = sc.AnnData(adata.X.todense())\n    adata_new.obs = adata.obs.copy()\n    adata_new.obs_names = adata.obs_names\n    adata_new.var_names = adata.var_names\n    adata_new.obs_names.name = 'CellID'\n    adata_new.var_names.name = 'Gene'\n    del adata\n    adata = adata_new\n```\n\nNow we can run ResPAN on the preprocessed data for batch correction. The output result is an AnnData object:\n```\nadata_new = run_respan(adata, batch_key='batch', epoch=300, batch=1024, reduction='pca', subsample=3000, seed=999)\n```\nAs indicated in our manuscipt, we use PCA for dimensionality reduction, kPCA (`reduction='kpca'`) and CCA (`reduction='cca'`) are also implemented, but their performance were not as good as PCA. Meanwhile, we subsampled cells in each batch to 3,000 before finding random walk MNN pairs [1].\n\nTo visualize our results, we can use the following commands:\n```\nadata_new.raw = adata_new\nsc.pp.scale(adata_new, max_value=10)\nsc.tl.pca(adata_new, 20, svd_solver='arpack')\nsc.pp.neighbors(adata_new)\nsc.tl.umap(adata_new)\nsc.set_figure_params(figsize=(5,5),fontsize=12)\nsc.pl.umap(adata_new, color=['batch', 'celltype'], frameon=False, show=False)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/AprilYuge/ResPAN/main/README.md",
      "technique": "header_analysis"
    }
  ]
}