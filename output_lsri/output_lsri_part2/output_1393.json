{
  "application_domain": [
    {
      "confidence": 0.963842870268434,
      "result": {
        "type": "String",
        "value": "Graphs"
      },
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9697216829330317,
      "result": {
        "type": "String",
        "value": "Semantic web"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "**References**",
        "type": "Text_excerpt",
        "value": "If you find NeuMapper useful, please consider citing:\n> Geniesse, C., Chowdhury, S., & Saggar, M. (2022). [NeuMapper: A Scalable Computational Framework for Multiscale Exploration of the Brain's Dynamical Organization](https://doi.org/10.1162/netn_a_00229). *Network Neuroscience*, Advance publication. doi:10.1162/netn_a_00229\n\nFor more information about DyNeuSR, please see:\n> Geniesse, C., Sporns, O., Petri, G., & Saggar, M. (2019). [Generating dynamical neuroimaging spatiotemporal representations (DyNeuSR) using topological data analysis](https://www.mitpressjournals.org/doi/abs/10.1162/netn_a_00093). *Network Neuroscience*, *3*(3). doi:10.1162/netn_a_00093\n\nFor more information about the Mapper approach, please see:\n> Saggar, M., Sporns, O., Gonzalez-Castillo, J., Bandettini, P.A., Carlsson, G., Glover, G., & Reiss, A.L. (2018). [Towards a new approach to reveal dynamical organization of the brain using topological data analysis](https://www.nature.com/articles/s41467-018-03664-4). *Nature Communications*, *9*(1). doi:10.1038/s41467-018-03664-4\n\n\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/braindynamicslab/neumapper/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/braindynamicslab/neumapper"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-10-14T23:38:29Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-07-15T06:34:22Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A scalable Mapper algorithm for neuroimaging data analysis"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9868097550845192,
      "result": {
        "original_header": "**NeuMapper**",
        "type": "Text_excerpt",
        "value": "\n[NeuMapper](https://braindynamicslab.github.io/neumapper/) is a Matlab implementation of a scalable Mapper algorithm designed specifically for neuroimaging data analysis. \nDeveloped with neuroimaging data analysis in mind, NeuMapper implements a novel landmark-based intrinsic binning strategy that eliminates the need for dimensionality reduction. Rather than projecting the high-dimensional data to a low-dimensional embedding, NeuMapper stays in high-dimensional space and performs the binning directly on a reciprocal kNN graph. By using geodesic distances, NeuMapper is able to better capture the high-dimensional, non-linear structure underlying the dynamical landscape of brain activity. \nNeuMapper was designed specifically for working with complex, high-dimensional neuroimaging data and produces a shape graph representation that can be annotated with meta-information and further examined using network science tools. These shape graphs can be visualized using [DyNeuSR](https://braindynamicslab.github.io/dyneusr/), a Python visualization library that provides a custom web interface for exploring and interacting with shape graphs, and several other tools for anchoring these representations back to neurophysiology and behavior. To see how NeuMapper and DyNeuSR can be used together to create beautiful visualizations of high-dimensional data, check out the [examples](https://github.com/braindynamicslab/neumapper/tree/master/examples/) folder. \nFor more details about NeuMapper see \"[NeuMapper: A Scalable Computational Framework for Multiscale Exploration of the Brain's Dynamical Organization](https://doi.org/10.1162/netn_a_00229)\" (Geniesse et al., 2022). For the original Mapper algorithm and related applications to neuroimaging data, see \"[Generating dynamical neuroimaging spatiotemporal representations (DyNeuSR) using topological data analysis](https://www.mitpressjournals.org/doi/abs/10.1162/netn_a_00093)\" (Geniesse et al., 2019) and \"[Towards a new approach to reveal dynamical organization of the brain using topological data analysis](https://www.nature.com/articles/s41467-018-03664-4)\" (Saggar et al., 2018). Check out this [blog post](https://braindynamicslab.github.io/blog/tda-cme-paper/) for more about the initial work that inspired the development of NeuMapper.  \n"
      },
      "source": "https://raw.githubusercontent.com/braindynamicslab/neumapper/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9928095599842782,
      "result": {
        "original_header": "**Related Projects**",
        "type": "Text_excerpt",
        "value": "- [Reciprocal Isomap](https://calebgeniesse.github.io/reciprocal_isomap) is a reciprocal variant of Isomap for robust non-linear dimensionality reduction in Python. The `ReciprocalIsomap` transformer was inspired by scikit-learn's implementation of Isomap, but the reciprocal variant enforces shared connectivity in the underlying *k*-nearest neighbors graph (i.e., two points are only considered neighbors if each is a neighbor of the other). \n- [Landmark Cover](https://calebgeniesse.github.io/landmark_cover) is a Python implementation of NeuMapper's landmark-based cover. The `LandmarkCover` transformer was designed for use with [KeplerMapper](https://kepler-mapper.scikit-tda.org/en/latest/), but rather than dividing an *extrinsic* space (e.g., low-dimensional projection) into overlapping hypercubes, the landmark-based approach directly partitions data points into overlapping subsets based on their *intrinsic* distances from pre-selected landmark points. \n- [DyNeuSR](https://braindynamicslab.github.io/dyneusr/) is a Python library for visualizing topological representations of neuroimaging data. The package combines visual web components with a high-level Python interface for interacting with, manipulating, and visualizing topological graph representations of functional brain activity. \n"
      },
      "source": "https://raw.githubusercontent.com/braindynamicslab/neumapper/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/braindynamicslab/neumapper/tree/master/docs"
      },
      "technique": "file_exploration"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/braindynamicslab/neumapper/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/braindynamicslab/neumapper/master/examples/haxby_decoding/Untitled.ipynb"
      },
      "source": "https://raw.githubusercontent.com/braindynamicslab/neumapper/master/examples/haxby_decoding/Untitled.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/braindynamicslab/neumapper/master/examples/haxby_decoding/.ipynb_checkpoints/Untitled-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/braindynamicslab/neumapper/master/examples/haxby_decoding/.ipynb_checkpoints/Untitled-checkpoint.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/braindynamicslab/neumapper/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "braindynamicslab/neumapper"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/braindynamicslab/neumapper/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/braindynamicslab/neumapper/master/examples/trefoil_knot/trefoil_knot_neumapper.png"
      },
      "source": "https://raw.githubusercontent.com/braindynamicslab/neumapper/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/braindynamicslab/neumapper/master/examples/haxby_decoding/haxby_decoding_neumapper.png"
      },
      "source": "https://raw.githubusercontent.com/braindynamicslab/neumapper/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/braindynamicslab/neumapper/master/examples/haxby_decoding/haxby_decoding_neumapper_dyneusr.png"
      },
      "source": "https://raw.githubusercontent.com/braindynamicslab/neumapper/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "<a href=\"https://www.mathworks.com/products/new_products/release2020b.html\">MATLAB R2020b</a>",
        "parent_header": [
          "**Setup**",
          "**Dependencies**"
        ],
        "type": "Text_excerpt",
        "value": "* [Statistics and Machine Learning Toolbox](https://www.mathworks.com/products/statistics.html)\n* [Parallel Computing Toolbox](https://www.mathworks.com/products/parallel-computing.html)\n\n\n\n\n\n\n\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/braindynamicslab/neumapper/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9980983808741833,
      "result": {
        "original_header": "**NeuMapper**",
        "type": "Text_excerpt",
        "value": "<p align=\"center\"><img src=\"https://github.com/braindynamicslab/neumapper/blob/master/docs/assets/neumapper_pipeline.png\" width=\"75%\"></p> \n"
      },
      "source": "https://raw.githubusercontent.com/braindynamicslab/neumapper/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/braindynamicslab/neumapper/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "brain-dynamics, brain-networks, mapper-algorithm, neuroimaging, topological-data-analysis"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "BSD 3-Clause Clear License",
        "spdx_id": "BSD-3-Clause-Clear",
        "type": "License",
        "url": "https://api.github.com/licenses/bsd-3-clause-clear",
        "value": "https://api.github.com/licenses/bsd-3-clause-clear"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "The Clear BSD License\n\nCopyright (c) 2021, Caleb Geniesse, Samir Chowdhury, Manish Saggar\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted (subject to the limitations in the disclaimer\nbelow) provided that the following conditions are met:\n\n     * Redistributions of source code must retain the above copyright notice,\n     this list of conditions and the following disclaimer.\n\n     * Redistributions in binary form must reproduce the above copyright\n     notice, this list of conditions and the following disclaimer in the\n     documentation and/or other materials provided with the distribution.\n\n     * Neither the name of the copyright holder nor the names of its\n     contributors may be used to endorse or promote products derived from this\n     software without specific prior written permission.\n\nNO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY\nTHIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND\nCONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\nPARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\nCONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\nEXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\nPROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR\nBUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\nIN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\nARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE.\n"
      },
      "source": "https://raw.githubusercontent.com/braindynamicslab/neumapper/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/braindynamicslab/neumapper/master/docs/assets/neumapper_pipeline.png"
      },
      "source": "https://raw.githubusercontent.com/braindynamicslab/neumapper/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "neumapper"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "braindynamicslab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "MATLAB",
        "size": 35977,
        "type": "Programming_language",
        "value": "MATLAB"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/braindynamicslab/neumapper/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "<a href=\"https://www.mathworks.com/products/new_products/release2020b.html\">MATLAB R2020b</a>",
        "parent_header": [
          "**Setup**",
          "**Dependencies**"
        ],
        "type": "Text_excerpt",
        "value": "* [Statistics and Machine Learning Toolbox](https://www.mathworks.com/products/statistics.html)\n* [Parallel Computing Toolbox](https://www.mathworks.com/products/parallel-computing.html)\n\n\n\n\n\n\n\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/braindynamicslab/neumapper/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-04 14:16:22",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "**Examples**",
        "type": "Text_excerpt",
        "value": "This repository includes several [examples](https://github.com/braindynamicslab/neumapper/tree/master/examples/) that introduce NeuMapper's core functions and highlight different options.\n\n"
      },
      "source": "https://raw.githubusercontent.com/braindynamicslab/neumapper/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "**Trefoil knot** (<a href=\"https://github.com/braindynamicslab/neumapper/tree/master/examples/trefoil_knot/\">examples/trefoil_knot</a>)",
        "parent_header": [
          "**Examples**"
        ],
        "type": "Text_excerpt",
        "value": "\nThe code below walks through a simple example using NeuMapper to visualize\nthe shape of data sampled from a trefoil knot.\n\n```matlab\n%% Configure paths\naddpath(genpath('../../code/'));\n\n\n%% Load the data\nX = create_trefoil_knot(1000,'euclidean');\n\n\n%% Use default options\noptions = struct();\noptions.resolution = 40;\n\n\n%% Run NeuMapper\nres = neumapper(X, options);\n\n\n%% Save outputs\nsave('trefoil_knot_neumapper.mat','res');\nsaveas(gcf, 'trefoil_knot_neumapper.png');\n```\n\n<p align=\"center\"><img src=\"https://github.com/braindynamicslab/neumapper/blob/master/examples/trefoil_knot/trefoil_knot_neumapper.png\"></p>\n\n\n\n\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/braindynamicslab/neumapper/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "**Haxby fMRI data** (<a href=\"https://github.com/braindynamicslab/neumapper/tree/master/examples/haxby_decoding/\">examples/haxby_decoding</a>)",
        "parent_header": [
          "**Examples**"
        ],
        "type": "Text_excerpt",
        "value": "\nFirst, let's fetch some data from the Haxby fMRI visual decoding dataset, \nusing Nilearn's `fetch_haxby` function. We can then save the data and timing \nlabels, so that we can read these variables into Matlab before running \nNeuMapper.\n\n```python\nimport numpy as np \nimport pandas as pd\nfrom nilearn.datasets import fetch_haxby\nfrom nilearn.input_data import NiftiMasker\n\n# Fetch dataset, extract time-series from ventral temporal (VT) mask\ndataset = fetch_haxby(subjects=[2])\nmasker = NiftiMasker(\n    dataset.mask_vt[0], \n    standardize=True, detrend=True, smoothing_fwhm=4.0,\n    low_pass=0.09, high_pass=0.008, t_r=2.5,\n    memory=\"nilearn_cache\")\nX = masker.fit_transform(dataset.func[0])\n\n# Encode labels as integers\ndf = pd.read_csv(dataset.session_target[0], sep=\" \")\ntarget, labels = pd.factorize(df.labels.values)\ntiming = pd.DataFrame().assign(task=target, task_name=labels[target])\ntiming_onehot = pd.DataFrame({l:1*(target==i) for i,l in enumerate(labels)})\n\n# Save X and y\nnp.save('SBJ02_mask_vt.npy', X)\ntiming.to_csv('SBJ02_timing_labels.tsv', sep='\\t', index=0)\ntiming_onehot.to_csv('SBJ02_timing_onehot.tsv', sep='\\t', index=0)\n```\n\n\n\nNow we can simply load the data into Matlab, and run NeuMapper.\n\n```matlab\n%% Configure paths\naddpath(genpath('../../code/'));\n\n\n%% Load the data\nX = readNPY('SBJ02_mask_vt.npy');\ntiming = readtable('SBJ02_timing_labels.tsv','FileType','text','Delimiter','\\t');\ncolors = timing.task;\nlabels = string(timing.task_name);\n\n\n%% Configure options\noptions = struct();\noptions.metric = 'correlation';\noptions.k = 30;\noptions.resolution = 400;\noptions.gain = 40;\noptions.labels = timing.task + 1; %reindex to start from 1\n\n\n%% Run NeuMapper\n[c,X_] = pca(X,'NumComponents',50); % Preprocess with PCA\nres = neumapper(X_, options);\n\n\n%% Save outputs\nsave('haxby_decoding_neumapper.mat','res');\nsaveas(gcf, 'haxby_decoding_neumapper.png');\n```\n\n<p align=\"center\"><img src=\"https://github.com/braindynamicslab/neumapper/blob/master/examples/haxby_decoding/haxby_decoding_neumapper.png\"></p>\n\n\n\nWhile NeuMapper provides a basic visualization of the shape graph, to create \na more interactive visualization, we can go back to Python and use the DyNeuSR \nvisualization library. Compared to the simpler visualizations produced by \nNeuMapper, where each node is represented by the average coloring, the\nvisualizations produced by DyNeuSR represent each node as a pie-chart, colored \nby the relative proportion of each label associated with the node.\n\nNote, after loading the result file in Python, a few additional steps are \nrequired to extract the relevant node/link information from the `memberMat` \nmatrix stored in the `res` structure returned by NeuMapper.\n\n```python\nimport numpy as np \nimport pandas as pd\nimport networkx as nx\nimport scipy as sp\nfrom sklearn.utils import Bunch\nfrom scipy.io import loadmat\nfrom dyneusr.core import DyNeuGraph  \nfrom collections import defaultdict\n\n\n## Load the NeuMapper result\nmat = loadmat('haxby_decoding_neumapper.mat')\nres = mat['res'][0][0]\nres = Bunch(**{k:res[i] for i,k in enumerate(res.dtype.names)})\nres = res.get('res', res.get('var', res))\n\n# load one-hot encoding matrix of timing labels \ntiming_onehot = pd.read_csv('SBJ02_timing_onehot.tsv', sep='\\t') \n\n\n## Convert to KeplerMapper format\nmembership = res.clusterBins\nadjacency = membership @ membership.T\nnp.fill_diagonal(adjacency, 0)\nadjacency = (adjacency > 0).astype(int)\n\n# get node link data \nG = nx.Graph(adjacency)\ngraph = nx.node_link_data(G)\n\n# update format of nodes  e.g. {node: [row_i, ...]}\nnodes = defaultdict(list) \nfor n, node in enumerate(membership):\n    nodes[n] = node.nonzero()[0].tolist()\n\n# update format of links  e.g. {source: [target, ...]}\nlinks = defaultdict(list) \nfor link in graph['links']:\n    u, v = link['source'], link['target']\n    if u != v:\n        links[u].append(v)\n\n# update graph data\ngraph['nodes'] = nodes\ngraph['links'] = links\n\n\n## Visualize the shape graph using DyNeuSR's DyNeuGraph\ndG = DyNeuGraph(G=graph, y=timing_onehot)\ndG.visualize('haxby_decoding_neumapper_dyneusr.html')\n```\n\n<p align=\"center\"><img src=\"https://github.com/braindynamicslab/neumapper/blob/master/examples/haxby_decoding/haxby_decoding_neumapper_dyneusr.png\"></p>\n\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/braindynamicslab/neumapper/master/README.md",
      "technique": "header_analysis"
    }
  ]
}