{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/jkimlab/msPIPE"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-12-03T15:46:52Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-04-29T15:10:44Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9889508652839315,
      "result": {
        "original_header": "msPIPE",
        "type": "Text_excerpt",
        "value": "- Methylation analysis pipeline for WGBS data \n"
      },
      "source": "https://raw.githubusercontent.com/jkimlab/msPIPE/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9542883658611432,
      "result": {
        "original_header": "Skip options",
        "type": "Text_excerpt",
        "value": "All output created by msPIPE will be written to the `methylCALL` and `Analysis` directories in the given `output` directory.\nThe output of pre-processing (read files processed by trimming and quality control), alignment, and methylation calling for each input library (named with LIB_NAME in config file) will be in `methylCALL` directory.\nThe output of methylation analysis will be in `Analysis` directory.  \n* An example output structure of `Analysis` directory \n* Output files and directories in `Analysis` \n\t* avg_methlevel.pdf : a bar plot of average methylation level for CpG, CHG, and CHH context\n\t* `annotations` : a directory with information of genes, exons, introns, promoters, and intergenic regions in BED format files\n\t* `sample1` : a directory with all results of methylation analysis for *sample1*\n\t\t* Average_methyl_lv.txt : average methylation level for each gene and its promoter\n\t\t* Avg_Genomic_Context_CpG.txt : average methylation level for each genomic context (gene, exon, intron, promoter, and intergenic)\n\t\t* CXX_methylCalls.bed : all methylation calls for each CX context (CXX is one of CpG, CHG, and CHH)\n\t\t* `AroundTSS`/meth_lv_3M.txt : for each gene, average methylation levels in bins around TSS (+/- 1500 bp)\n\t\t* `MethylSeekR` : a directory with all results for running MethylSeekR\n\t\t* UMR-Promoter.cnt.bed : the number of UMRs in each promoter region\n\t\t* UMR-Promoter.pos.bed : the genomic coordinates of UMRs in each promoter region\n\t\t* Circos.CpG_UMRs_LMRs.pdf : a circos plot for methylation level in whole-genome scale\n\t\t* Genomic_Context_CpG.pdf : a bar plot for average methylation level of each genomic context (gene, exon, intron, promoter, and intergenic)\n\t\t* hist_sample1_CXX.pdf : the distribution of methylation in CX context (CXX is one of CpG, CHG, and CHH) \nIf DMC/DMR analysis is performed, `DMR` directory will be created in `Analysis` directory. When the DMC/DMR analysis is performed, GO enrichment test will be carried out for the gene set with DMCs or DMRs in their promoter.  \n* Examples of output files and directories in `DMR` for comparison pair sample1 and sample2 \n"
      },
      "source": "https://raw.githubusercontent.com/jkimlab/msPIPE/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9891529403198593,
      "result": {
        "original_header": "Analysis Output",
        "type": "Text_excerpt",
        "value": "\t* `sample1.sample2` : a directory with all results of DMC/DMR analysis, in this case sample1 will be treated as *control* and sample2 will be treated as *case*\n\t\t* DMR_q0.5.bed : information of differentially methylated regions\n\t\t* `methylkit` : output of running methylKit\n\t\t* DMC_q0.5.bed : filtered DMCs with q-value 0.5\n\t\t* hypoDMC_detailed_count_methyl.txt : the number of hypomethylated DMCs in each promoter (methylation level *case* < *control*)\n\t\t* hyperDMC_detailed_count_methyl.txt : the number of hypermethylated DMCs in each promoter (methylation level *case* > *control*)\n\t\t* intersection.DMC2Promoter.txt : a list of intersection between genes and DMCs\n\t\t* DMC_genelist.txt : a list of genes with DMCs overlapped their promoter region\n\t\t* DMC_gene.GOresult.txt : a text output of GO enrichment test for genes with DMCs from methylKit using g:Profiler\n\t\t* DMC_gene.GOresult.pdf : Plots of GO enrichment test for genes with DMCs from methylKit using g:Profiler \n\t\t* DMR_gene.GOresult.txt : a text output of GO enrichment test for genes with DMRs from BSmooth using g:Profiler\n\t\t* DMR_gene.GOresult.pdf : Plots of GO enrichment test for genes with DMRs from BSmooth using g:Profiler \n___\n \n"
      },
      "source": "https://raw.githubusercontent.com/jkimlab/msPIPE/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/jkimlab/msPIPE/tree/master/bin/Bismark/Docs"
      },
      "technique": "file_exploration"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Download",
        "parent_header": [
          "msPIPE"
        ],
        "type": "Text_excerpt",
        "value": "```\ngit clone https://github.com/jkimlab/msPIPE.git\n```\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/jkimlab/msPIPE/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/jkimlab/msPIPE/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 9
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/jkimlab/msPIPE/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "jkimlab/msPIPE"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "msPIPE"
      },
      "source": "https://raw.githubusercontent.com/jkimlab/msPIPE/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jkimlab/msPIPE/master/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/jkimlab/msPIPE/master/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jkimlab/msPIPE/master/bin/BSseeker2/install.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Preparing an input parameter file",
        "parent_header": [
          "msPIPE",
          "Running"
        ],
        "type": "Text_excerpt",
        "value": "The parameter file must contain information necessary for pipeline execution.\n* params_format.conf   \n\n\t> ###INPUT PARAMETER FILE FORMAT###\n\t>\n\t> [DMR]   \n\t> ANALYSIS1 = sample1, sample2 (Two sample names for DMR analysis)   \n\t> ANALYSIS2 = sample1, sample3 (Two sample names for DMR analysis)   \n\t>\n\t> [REFERENCE]  \n\t> UCSC_NAME = UCSC reference version name   \n\t> FASTA = [path to reference fasta file (not required)]  \n\t> GTF= [path to reference gtf file (not required)]  \n\t>\n\t> [LIB1]  \n\t> SAMPLE_NAME = sample name  \n\t> LIB_NAME = library name  \n\t> LIB_TYPE = P or S (Paired-End or Single-Read)  \n\t> FILE_1 = [path to sequencing read file]  \n\t> FILE_2 = [path to sequencing read file]  \n\n\n"
      },
      "source": "https://raw.githubusercontent.com/jkimlab/msPIPE/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Preparing an input parameter file for Docker",
        "parent_header": [
          "msPIPE",
          "Using Docker"
        ],
        "type": "Text_excerpt",
        "value": " - The parameter file must be written based on the internal path of the docker container and placed within the output dir.\n - Mount the volumes with '-v' options to deliver input data and receive output results.\n - params_docker.conf  \n    ```\n    [DMR]\n    ANALYSIS1 = 24M, 3M\n\n    [REFERENCE]\n    UCSC_NAME = mm10\n\n    [LIB1]\n    SAMPLE_NAME = 24M\n    LIB_NAME = 24M_rep1\n    LIB_TYPE = P\n    FILE_1 = /msPIPE/data/SRX6589858_1.fastq.gz\n    FILE_2 = /msPIPE/data/SRX6589858_2.fastq.gz\n\n    [LIB2]\n    SAMPLE_NAME = 24M\n    LIB_NAME = 24M_rep2\n    LIB_TYPE = P\n    FILE_1 = /msPIPE/data/SRX6589859_1.fastq.gz\n    FILE_2 = /msPIPE/data/SRX6589859_2.fastq.gz\n    \n    ...\n    \n    \n    ```\n"
      },
      "source": "https://raw.githubusercontent.com/jkimlab/msPIPE/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9999999996752535,
      "result": {
        "original_header": "Building msPIPE docker image",
        "type": "Text_excerpt",
        "value": "```\ngit clone https://github.com/jkimlab/msPIPE.git\ncd msPIPE\ndocker build -t jkimlab/mspipe:latest .\n```\n    \n- Or you can pull docker image from the docker hub\n    BASH2*\n \n"
      },
      "source": "https://raw.githubusercontent.com/jkimlab/msPIPE/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/jkimlab/msPIPE/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "The MIT License (MIT)\n\nCopyright (c) 2012-2013 BS-Seeker2 Developers.  All  Rights  Reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n"
      },
      "source": "https://raw.githubusercontent.com/jkimlab/msPIPE/master/bin/BSseeker2/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "msPIPE"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "jkimlab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 14581269,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "LilyPond",
        "size": 3080285,
        "type": "Programming_language",
        "value": "LilyPond"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 1055156,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 299140,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Smarty",
        "size": 29116,
        "type": "Programming_language",
        "value": "Smarty"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 17346,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 16090,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 3319,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 357,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jkimlab/msPIPE/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://cutadapt.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/jkimlab/msPIPE/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirements",
        "parent_header": [
          "msPIPE"
        ],
        "type": "Text_excerpt",
        "value": "- R >= 4.1.3, python2 and python3\n- [Trim Galore](https://www.bioinformatics.babraham.ac.uk/projects/trim_galore/)\n- [Samtools](http://www.htslib.org/)\n- [cutadapt](https://cutadapt.readthedocs.io/en/stable/)\n- [bowtie](http://bowtie-bio.sourceforge.net/index.shtml), [bowtie2](http://bowtie-bio.sourceforge.net/bowtie2/index.shtml)\n- [Bismark](https://github.com/FelixKrueger/Bismark)\n- [BS-Seeker2](https://github.com/BSSeeker/BSseeker2)\n- Other required R packages can be installed via msPIPE/bin/script/Package_install.R.\n<br />\n\n*Or you can use msPIPE on docker without having to prepare the environment.* ***\\< Recommended\\>***  \n:point_right: [HOW TO USE msPIPE on docker](#using-docker) ![Docker](https://img.shields.io/badge/Docker-%230db7ed.svg?&logo=Docker&logoColor=white)\n<br />\n<br />\n\n"
      },
      "source": "https://raw.githubusercontent.com/jkimlab/msPIPE/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running command",
        "parent_header": [
          "msPIPE",
          "Running"
        ],
        "type": "Text_excerpt",
        "value": "```\n/PATH/TO/msPIPE/msPIPE.py -p params.conf -o OUTDIR \n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/jkimlab/msPIPE/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "msPIPE options",
        "parent_header": [
          "msPIPE",
          "Running",
          "Additional options"
        ],
        "type": "Text_excerpt",
        "value": " ```\n usage: msPIPE.py [-h] --param params.conf --out PATH [--core int] [--qvalue float] [--skip_trimming] [--program bismark or bs2]\n                            [--bsmooth] [--skip_mapping] [--skip_calling] [--calling_data PATH] [--skip_GMA] [--skip_DMR]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --param params.conf, -p params.conf\n                        config format parameter file\n  --out PATH, -o PATH   output directory\n  --core int, -c int    core (default:5)\n  --qvalue float, -q float\n                        q-value cutoff (default:0.5)\n  --skip_trimming       skip the trimgalore trimming\n  --program bismark or bs2\n                        program option for mapping & calling\n  --bsmooth             use bsmooth for DMR analysis\n  --skip_mapping        skip the bismark mapping\n  --skip_calling        skip the methylation calling\n  --calling_data PATH, -m PATH\n                        methylCALL directory\n  --skip_GMA            skip the Gene-Methyl analysis\n  --skip_DMR            skip the DMR analysis\n\n ```\n \n"
      },
      "source": "https://raw.githubusercontent.com/jkimlab/msPIPE/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Software options",
        "parent_header": [
          "msPIPE",
          "Running",
          "Additional options"
        ],
        "type": "Text_excerpt",
        "value": "You can choose the software to be used for analysis by selecting the module.\n1. **<span style=\"color:DarkslateBlue\">WGBS reads mapping & calling (--program bismark or bs2)<span>**.  \n\tUse this option to select the tools to be used for mapping and calling of wgbs reads.  \n    --program bismark : use Bismark with bowtie2 (default)  \n    --program bs2 : use BS-Seeker2 with bowtie   \n    \n2. **<span style=\"color:DarkslateBlue\">Differential methylation analysis (--bsmooth)<span>**  \n\tWith this option, BSmooth is used to analyze instead of methylKit and inhouse script.\n\n"
      },
      "source": "https://raw.githubusercontent.com/jkimlab/msPIPE/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Skip options",
        "parent_header": [
          "msPIPE",
          "Running",
          "Additional options"
        ],
        "type": "Text_excerpt",
        "value": "You can leave out some pipeline steps with the *--skip_\\<STEP\\>* option.  \nThe main steps of the entire pipeline and the steps that can be omitted are as follows.\n1. **<span style=\"color:DarkslateGray\">Check all input<span>**. \n2. **<span style=\"color:DarkslateGray\">Prepare bisulfite-converted reference genome (Bismark or BS-Seeker2)<span>**  \n\t- It will be skipped if the same assembly name of the bisulfite genome has already been created under msPIPE/reference/ directory.\n3. **<span style=\"color:DarkslateGray\">WGBS reads trimming  (TrimGalore)<span>**\n\t- Can drop with *--skip_trimming* option.\n\t- Trimmed reads to be used in mapping can be delivered through the TRIMMED_FILE_* parameters. ([LIB1] on below format)\n\t- Without TRIMMED_FILE_* parameters, the pipeline searches the files on the output directory.\n4. **<span style=\"color:DarkslateGray\">WGBS reads mapping  (Bismark or BS-Seeker2)<span>**\n\t- Can drop with *--skip_mapping* option.\n\t- Mapping file to be used in the next step can be delivered through the BAM_FILE parameter. ([LIB2] on below format)\n\t- Without BAM_FILE parameter, the pipeline searches the file on the output directory.\n5. **<span style=\"color:DarkslateGray\">Methylation calling (Bismark or BS-Seeker2)<span>**\n\t- Can drop with *--skip_calling* option.\n\t- Pipeline use calling output on the output directory.\n\t- Other msPIPE calling output can be given with the *--calling_data* option.\n6. **<span style=\"color:DarkslateGray\">Gene-Methylation analysis (Methylation profiling and Hypomethylated region analysis)<span>**\n\t- Can drop with *--skip_GMA* option.\n7. **<span style=\"color:DarkslateGray\">Differential methylation analysis<span>**\n\t- Can drop with *--skip_DMR* option.  \n\n* params_format.conf\n\n  > ###INPUT WITH SKIP OPTIONS###  \n  > \n  > **...**\n  >   \n  > \n  > [LIB1]  \n  > SAMPLE_NAME = sample name  \n  > LIB_NAME = library name  \n  > LIB_TYPE = P or S (Paired-End or Single-Read)  \n  > TRIMMED_FILE_1 = [path to preprocessed read file (with --skip_trimming option)]  \n  > TRIMMED_FILE_2 = [path to preprocessed read file (with --skip_trimming option)]  \n  >\n  > [LIB2]  \n  > SAMPLE_NAME = sample name  \n  > LIB_NAME = library name  \n  > LIB_TYPE = P or S (Paired-End or Single-Read)  \n  > BAM_FILE = [path to bismark mapping file (with --skip_mapping option)]  \n\n\n<br /> \n  \n___\n\n## Running example\n\n- Running example using mouse rod WGBS data from [Corso-D\u00edaz, Ximena et al.](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7228806/)  \n\n    | GEO accession | sample-24M |  sample-3M |\n    | ------------| ------------- | ------------- |\n    | [GSE134873](https://0-www-ncbi-nlm-nih-gov.brum.beds.ac.uk/bioproject/556668) | [rep1](https://0-www-ncbi-nlm-nih-gov.brum.beds.ac.uk/biosample/12361857), [rep2](https://0-www-ncbi-nlm-nih-gov.brum.beds.ac.uk/biosample/12361856), [rep3](https://0-www-ncbi-nlm-nih-gov.brum.beds.ac.uk/biosample/12361855) | [rep1](https://0-www-ncbi-nlm-nih-gov.brum.beds.ac.uk/biosample/12361836), [rep2](https://0-www-ncbi-nlm-nih-gov.brum.beds.ac.uk/biosample/12361837), [rep3](https://0-www-ncbi-nlm-nih-gov.brum.beds.ac.uk/biosample/12361839)|\n\n- params_mouse.conf  \n    *Replace the '/PATH/TO/DATA' with a data path on your local server.*\n    \n    ```\n    [DMR]\n    ANALYSIS1 = 24M, 3M\n\n    [REFERENCE]\n    UCSC_NAME = mm10\n\n    [LIB1]\n    SAMPLE_NAME = 24M\n    LIB_NAME = 24M_rep1\n    LIB_TYPE = P\n    FILE_1 = /PATH/TO/DATA/SRX6589858_1.fastq.gz\n    FILE_2 = /PATH/TO/DATA/SRX6589858_2.fastq.gz\n\n    [LIB2]\n    SAMPLE_NAME = 24M\n    LIB_NAME = 24M_rep2\n    LIB_TYPE = P\n    FILE_1 = /PATH/TO/DATA/SRX6589859_1.fastq.gz\n    FILE_2 = /PATH/TO/DATA/SRX6589859_2.fastq.gz\n\n    [LIB3]\n    SAMPLE_NAME = 24M\n    LIB_NAME = 24M_rep3\n    LIB_TYPE = P\n    FILE_1 = /PATH/TO/DATA/SRX6589860_1.fastq.gz\n    FILE_2 = /PATH/TO/DATA/SRX6589860_2.fastq.gz\n\n    [LIB4]\n    SAMPLE_NAME = 3M\n    LIB_NAME = 3M_rep1\n    LIB_TYPE = P\n    FILE_1 = /PATH/TO/DATA/SRX6589850_1.fastq.gz\n    FILE_2 = /PATH/TO/DATA/SRX6589850_2.fastq.gz\n    \n    [LIB5]\n    SAMPLE_NAME = 3M\n    LIB_NAME = 3M_rep2\n    LIB_TYPE = P\n    FILE_1 = /PATH/TO/DATA/SRX6589851_1.fastq.gz\n    FILE_2 = /PATH/TO/DATA/SRX6589851_2.fastq.gz\n\n    [LIB6]\n    SAMPLE_NAME = 3M\n    LIB_NAME = 3M_rep3\n    LIB_TYPE = P\n    FILE_1 = /PATH/TO/DATA/SRX6589852_1.fastq.gz\n    FILE_2 = /PATH/TO/DATA/SRX6589852_2.fastq.gz\n    ```\n- Running command\n\n    ```\n     ./msPIPE/msPIPE.py -p params_mouse.conf -o mouse_result -c 5 -q 0.5\n    ```\n\n___\n\n## Analysis Output\n\nAll output created by msPIPE will be written to the `methylCALL` and `Analysis` directories in the given `output` directory.\nThe output of pre-processing (read files processed by trimming and quality control), alignment, and methylation calling for each input library (named with LIB_NAME in config file) will be in `methylCALL` directory.\nThe output of methylation analysis will be in `Analysis` directory. \n\n* An example output structure of `Analysis` directory\n\n\t```\n\t[Analysis]\n\t|- avg_methlevel.pdf\n\t|- [annotations]\n\t|- [sample1]\n\t   |- ALL_TEXTFILES_AND_PLOTS_FOR_SAMPLE1\n\t   |- [AroundTSS]\n\t   |- [MethylSeekR]\n\t|- [sample2]\n\t   |- ...\n\t|- [DMR]\n\t   |- [sample1.sample2]\n\t```\n\n* Output files and directories in `Analysis`\n\n\t* avg_methlevel.pdf : a bar plot of average methylation level for CpG, CHG, and CHH context\n\t* `annotations` : a directory with information of genes, exons, introns, promoters, and intergenic regions in BED format files\n\t* `sample1` : a directory with all results of methylation analysis for *sample1*\n\t\t* Average_methyl_lv.txt : average methylation level for each gene and its promoter\n\t\t* Avg_Genomic_Context_CpG.txt : average methylation level for each genomic context (gene, exon, intron, promoter, and intergenic)\n\t\t* CXX_methylCalls.bed : all methylation calls for each CX context (CXX is one of CpG, CHG, and CHH)\n\t\t* `AroundTSS`/meth_lv_3M.txt : for each gene, average methylation levels in bins around TSS (+/- 1500 bp)\n\t\t* `MethylSeekR` : a directory with all results for running MethylSeekR\n\t\t* UMR-Promoter.cnt.bed : the number of UMRs in each promoter region\n\t\t* UMR-Promoter.pos.bed : the genomic coordinates of UMRs in each promoter region\n\t\t* Circos.CpG_UMRs_LMRs.pdf : a circos plot for methylation level in whole-genome scale\n\t\t* Genomic_Context_CpG.pdf : a bar plot for average methylation level of each genomic context (gene, exon, intron, promoter, and intergenic)\n\t\t* hist_sample1_CXX.pdf : the distribution of methylation in CX context (CXX is one of CpG, CHG, and CHH)\n\nIf DMC/DMR analysis is performed, `DMR` directory will be created in `Analysis` directory. When the DMC/DMR analysis is performed, GO enrichment test will be carried out for the gene set with DMCs or DMRs in their promoter. \n\n* Examples of output files and directories in `DMR` for comparison pair sample1 and sample2\n\n\t* `sample1.sample2` : a directory with all results of DMC/DMR analysis, in this case sample1 will be treated as *control* and sample2 will be treated as *case*\n\t\t* DMR_q0.5.bed : information of differentially methylated regions\n\t\t* `methylkit` : output of running methylKit\n\t\t* DMC_q0.5.bed : filtered DMCs with q-value 0.5\n\t\t* hypoDMC_detailed_count_methyl.txt : the number of hypomethylated DMCs in each promoter (methylation level *case* < *control*)\n\t\t* hyperDMC_detailed_count_methyl.txt : the number of hypermethylated DMCs in each promoter (methylation level *case* > *control*)\n\t\t* intersection.DMC2Promoter.txt : a list of intersection between genes and DMCs\n\t\t* DMC_genelist.txt : a list of genes with DMCs overlapped their promoter region\n\t\t* DMC_gene.GOresult.txt : a text output of GO enrichment test for genes with DMCs from methylKit using g:Profiler\n\t\t* DMC_gene.GOresult.pdf : Plots of GO enrichment test for genes with DMCs from methylKit using g:Profiler \n\t\t* DMR_gene.GOresult.txt : a text output of GO enrichment test for genes with DMRs from BSmooth using g:Profiler\n\t\t* DMR_gene.GOresult.pdf : Plots of GO enrichment test for genes with DMRs from BSmooth using g:Profiler \n___\n\n## Using Docker\n\n### Building msPIPE docker image\n\n```\ngit clone https://github.com/jkimlab/msPIPE.git\ncd msPIPE\ndocker build -t jkimlab/mspipe:latest .\n```\n    \n- Or you can pull docker image from the docker hub\n    ```\n    docker pull jkimlab/mspipe:latest\n    ```\n\n### Preparing an input parameter file for Docker\n - The parameter file must be written based on the internal path of the docker container and placed within the output dir.\n - Mount the volumes with '-v' options to deliver input data and receive output results.\n - params_docker.conf  \n    ```\n    [DMR]\n    ANALYSIS1 = 24M, 3M\n\n    [REFERENCE]\n    UCSC_NAME = mm10\n\n    [LIB1]\n    SAMPLE_NAME = 24M\n    LIB_NAME = 24M_rep1\n    LIB_TYPE = P\n    FILE_1 = /msPIPE/data/SRX6589858_1.fastq.gz\n    FILE_2 = /msPIPE/data/SRX6589858_2.fastq.gz\n\n    [LIB2]\n    SAMPLE_NAME = 24M\n    LIB_NAME = 24M_rep2\n    LIB_TYPE = P\n    FILE_1 = /msPIPE/data/SRX6589859_1.fastq.gz\n    FILE_2 = /msPIPE/data/SRX6589859_2.fastq.gz\n    \n    ...\n    \n    \n    ```\n\n### Running pipeline on Docker\n    \n ```\n #docker run -v [local path]:[docker path] [docker image name] [msPIPE command]\n\n docker run -v /PATH/TO/INPUT/DATA:/msPIPE/data:ro -v /PATH/TO/REUSABLE/REFERENCE:/msPIPE/reference -v /PATH/TO/OUTDIR:/work_dir/ jkimlab/mspipe:latest msPIPE.py -p params_docker.conf -o result\n ```\n \n - Mount the volumes with '-v' options to deliver input data and receive output results.\n    - input data dir \u2192 /msPIPE/data\n    - reusable references dir \u2192 /msPIPE/reference\n    - output dir \u2192 /work_dir\n - All local paths to mount volumes are must be expressed as absolute paths.\n - Replace the '/PATH/TO/*' with a directory path on your local server.\n \n \n \n <br />\n\n    \n ## CONTACT\n\n[bioinfolabkr@gmail.com](mailto:bioinfolabkr@gmail.com)\n"
      },
      "source": "https://raw.githubusercontent.com/jkimlab/msPIPE/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "INPUT WITH SKIP OPTIONS###",
        "parent_header": [
          "msPIPE",
          "Running"
        ],
        "type": "Text_excerpt",
        "value": "# msPIPE\n- Methylation analysis pipeline for WGBS data\n\n\n## Requirements\n\n- R >= 4.1.3, python2 and python3\n- [Trim Galore](https://www.bioinformatics.babraham.ac.uk/projects/trim_galore/)\n- [Samtools](http://www.htslib.org/)\n- [cutadapt](https://cutadapt.readthedocs.io/en/stable/)\n- [bowtie](http://bowtie-bio.sourceforge.net/index.shtml), [bowtie2](http://bowtie-bio.sourceforge.net/bowtie2/index.shtml)\n- [Bismark](https://github.com/FelixKrueger/Bismark)\n- [BS-Seeker2](https://github.com/BSSeeker/BSseeker2)\n- Other required R packages can be installed via msPIPE/bin/script/Package_install.R.\n<br />\n\n*Or you can use msPIPE on docker without having to prepare the environment.* ***\\< Recommended\\>***  \n:point_right: [HOW TO USE msPIPE on docker](#using-docker) ![Docker](https://img.shields.io/badge/Docker-%230db7ed.svg?&logo=Docker&logoColor=white)\n<br />\n<br />\n\n\n## Download\n\n```\ngit clone https://github.com/jkimlab/msPIPE.git\n```\n\n\n\n## Running\n#### Running command\n```\n/PATH/TO/msPIPE/msPIPE.py -p params.conf -o OUTDIR \n```\n\n\n#### Preparing an input parameter file\nThe parameter file must contain information necessary for pipeline execution.\n* params_format.conf   \n\n\t> ###INPUT PARAMETER FILE FORMAT###\n\t>\n\t> [DMR]   \n\t> ANALYSIS1 = sample1, sample2 (Two sample names for DMR analysis)   \n\t> ANALYSIS2 = sample1, sample3 (Two sample names for DMR analysis)   \n\t>\n\t> [REFERENCE]  \n\t> UCSC_NAME = UCSC reference version name   \n\t> FASTA = [path to reference fasta file (not required)]  \n\t> GTF= [path to reference gtf file (not required)]  \n\t>\n\t> [LIB1]  \n\t> SAMPLE_NAME = sample name  \n\t> LIB_NAME = library name  \n\t> LIB_TYPE = P or S (Paired-End or Single-Read)  \n\t> FILE_1 = [path to sequencing read file]  \n\t> FILE_2 = [path to sequencing read file]  \n\n\n\n### Additional options  \n#### msPIPE options  \n ```\n usage: msPIPE.py [-h] --param params.conf --out PATH [--core int] [--qvalue float] [--skip_trimming] [--program bismark or bs2]\n                            [--bsmooth] [--skip_mapping] [--skip_calling] [--calling_data PATH] [--skip_GMA] [--skip_DMR]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --param params.conf, -p params.conf\n                        config format parameter file\n  --out PATH, -o PATH   output directory\n  --core int, -c int    core (default:5)\n  --qvalue float, -q float\n                        q-value cutoff (default:0.5)\n  --skip_trimming       skip the trimgalore trimming\n  --program bismark or bs2\n                        program option for mapping & calling\n  --bsmooth             use bsmooth for DMR analysis\n  --skip_mapping        skip the bismark mapping\n  --skip_calling        skip the methylation calling\n  --calling_data PATH, -m PATH\n                        methylCALL directory\n  --skip_GMA            skip the Gene-Methyl analysis\n  --skip_DMR            skip the DMR analysis\n\n ```\n \n\n#### Software options\nYou can choose the software to be used for analysis by selecting the module.\n1. **<span style=\"color:DarkslateBlue\">WGBS reads mapping & calling (--program bismark or bs2)<span>**.  \n\tUse this option to select the tools to be used for mapping and calling of wgbs reads.  \n    --program bismark : use Bismark with bowtie2 (default)  \n    --program bs2 : use BS-Seeker2 with bowtie   \n    \n2. **<span style=\"color:DarkslateBlue\">Differential methylation analysis (--bsmooth)<span>**  \n\tWith this option, BSmooth is used to analyze instead of methylKit and inhouse script.\n\n\n#### Skip options\nYou can leave out some pipeline steps with the *--skip_\\<STEP\\>* option.  \nThe main steps of the entire pipeline and the steps that can be omitted are as follows.\n1. **<span style=\"color:DarkslateGray\">Check all input<span>**. \n2. **<span style=\"color:DarkslateGray\">Prepare bisulfite-converted reference genome (Bismark or BS-Seeker2)<span>**  \n\t- It will be skipped if the same assembly name of the bisulfite genome has already been created under msPIPE/reference/ directory.\n3. **<span style=\"color:DarkslateGray\">WGBS reads trimming  (TrimGalore)<span>**\n\t- Can drop with *--skip_trimming* option.\n\t- Trimmed reads to be used in mapping can be delivered through the TRIMMED_FILE_* parameters. ([LIB1] on below format)\n\t- Without TRIMMED_FILE_* parameters, the pipeline searches the files on the output directory.\n4. **<span style=\"color:DarkslateGray\">WGBS reads mapping  (Bismark or BS-Seeker2)<span>**\n\t- Can drop with *--skip_mapping* option.\n\t- Mapping file to be used in the next step can be delivered through the BAM_FILE parameter. ([LIB2] on below format)\n\t- Without BAM_FILE parameter, the pipeline searches the file on the output directory.\n5. **<span style=\"color:DarkslateGray\">Methylation calling (Bismark or BS-Seeker2)<span>**\n\t- Can drop with *--skip_calling* option.\n\t- Pipeline use calling output on the output directory.\n\t- Other msPIPE calling output can be given with the *--calling_data* option.\n6. **<span style=\"color:DarkslateGray\">Gene-Methylation analysis (Methylation profiling and Hypomethylated region analysis)<span>**\n\t- Can drop with *--skip_GMA* option.\n7. **<span style=\"color:DarkslateGray\">Differential methylation analysis<span>**\n\t- Can drop with *--skip_DMR* option.  \n\n* params_format.conf\n\n  > ###INPUT WITH SKIP OPTIONS###  \n  > \n  > **...**\n  >   \n  > \n  > [LIB1]  \n  > SAMPLE_NAME = sample name  \n  > LIB_NAME = library name  \n  > LIB_TYPE = P or S (Paired-End or Single-Read)  \n  > TRIMMED_FILE_1 = [path to preprocessed read file (with --skip_trimming option)]  \n  > TRIMMED_FILE_2 = [path to preprocessed read file (with --skip_trimming option)]  \n  >\n  > [LIB2]  \n  > SAMPLE_NAME = sample name  \n  > LIB_NAME = library name  \n  > LIB_TYPE = P or S (Paired-End or Single-Read)  \n  > BAM_FILE = [path to bismark mapping file (with --skip_mapping option)]  \n\n\n<br /> \n  \n___\n"
      },
      "source": "https://raw.githubusercontent.com/jkimlab/msPIPE/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Running example",
        "parent_header": [
          "msPIPE"
        ],
        "type": "Text_excerpt",
        "value": "- Running example using mouse rod WGBS data from [Corso-D\u00edaz, Ximena et al.](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7228806/)  \n\n    | GEO accession | sample-24M |  sample-3M |\n    | ------------| ------------- | ------------- |\n    | [GSE134873](https://0-www-ncbi-nlm-nih-gov.brum.beds.ac.uk/bioproject/556668) | [rep1](https://0-www-ncbi-nlm-nih-gov.brum.beds.ac.uk/biosample/12361857), [rep2](https://0-www-ncbi-nlm-nih-gov.brum.beds.ac.uk/biosample/12361856), [rep3](https://0-www-ncbi-nlm-nih-gov.brum.beds.ac.uk/biosample/12361855) | [rep1](https://0-www-ncbi-nlm-nih-gov.brum.beds.ac.uk/biosample/12361836), [rep2](https://0-www-ncbi-nlm-nih-gov.brum.beds.ac.uk/biosample/12361837), [rep3](https://0-www-ncbi-nlm-nih-gov.brum.beds.ac.uk/biosample/12361839)|\n\n- params_mouse.conf  \n    *Replace the '/PATH/TO/DATA' with a data path on your local server.*\n    \n    ```\n    [DMR]\n    ANALYSIS1 = 24M, 3M\n\n    [REFERENCE]\n    UCSC_NAME = mm10\n\n    [LIB1]\n    SAMPLE_NAME = 24M\n    LIB_NAME = 24M_rep1\n    LIB_TYPE = P\n    FILE_1 = /PATH/TO/DATA/SRX6589858_1.fastq.gz\n    FILE_2 = /PATH/TO/DATA/SRX6589858_2.fastq.gz\n\n    [LIB2]\n    SAMPLE_NAME = 24M\n    LIB_NAME = 24M_rep2\n    LIB_TYPE = P\n    FILE_1 = /PATH/TO/DATA/SRX6589859_1.fastq.gz\n    FILE_2 = /PATH/TO/DATA/SRX6589859_2.fastq.gz\n\n    [LIB3]\n    SAMPLE_NAME = 24M\n    LIB_NAME = 24M_rep3\n    LIB_TYPE = P\n    FILE_1 = /PATH/TO/DATA/SRX6589860_1.fastq.gz\n    FILE_2 = /PATH/TO/DATA/SRX6589860_2.fastq.gz\n\n    [LIB4]\n    SAMPLE_NAME = 3M\n    LIB_NAME = 3M_rep1\n    LIB_TYPE = P\n    FILE_1 = /PATH/TO/DATA/SRX6589850_1.fastq.gz\n    FILE_2 = /PATH/TO/DATA/SRX6589850_2.fastq.gz\n    \n    [LIB5]\n    SAMPLE_NAME = 3M\n    LIB_NAME = 3M_rep2\n    LIB_TYPE = P\n    FILE_1 = /PATH/TO/DATA/SRX6589851_1.fastq.gz\n    FILE_2 = /PATH/TO/DATA/SRX6589851_2.fastq.gz\n\n    [LIB6]\n    SAMPLE_NAME = 3M\n    LIB_NAME = 3M_rep3\n    LIB_TYPE = P\n    FILE_1 = /PATH/TO/DATA/SRX6589852_1.fastq.gz\n    FILE_2 = /PATH/TO/DATA/SRX6589852_2.fastq.gz\n    ```\n- Running command\n\n    ```\n     ./msPIPE/msPIPE.py -p params_mouse.conf -o mouse_result -c 5 -q 0.5\n    ```\n\n___\n"
      },
      "source": "https://raw.githubusercontent.com/jkimlab/msPIPE/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Running pipeline on Docker",
        "parent_header": [
          "msPIPE",
          "Using Docker"
        ],
        "type": "Text_excerpt",
        "value": "    \n ```\n #docker run -v [local path]:[docker path] [docker image name] [msPIPE command]\n\n docker run -v /PATH/TO/INPUT/DATA:/msPIPE/data:ro -v /PATH/TO/REUSABLE/REFERENCE:/msPIPE/reference -v /PATH/TO/OUTDIR:/work_dir/ jkimlab/mspipe:latest msPIPE.py -p params_docker.conf -o result\n ```\n \n - Mount the volumes with '-v' options to deliver input data and receive output results.\n    - input data dir \u2192 /msPIPE/data\n    - reusable references dir \u2192 /msPIPE/reference\n    - output dir \u2192 /work_dir\n - All local paths to mount volumes are must be expressed as absolute paths.\n - Replace the '/PATH/TO/*' with a directory path on your local server.\n \n \n \n <br />\n\n    \n ## CONTACT\n\n[bioinfolabkr@gmail.com](mailto:bioinfolabkr@gmail.com)\n"
      },
      "source": "https://raw.githubusercontent.com/jkimlab/msPIPE/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 12:45:11",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 14
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running example",
        "parent_header": [
          "msPIPE"
        ],
        "type": "Text_excerpt",
        "value": "- Running example using mouse rod WGBS data from [Corso-D\u00edaz, Ximena et al.](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7228806/)  \n\n    | GEO accession | sample-24M |  sample-3M |\n    | ------------| ------------- | ------------- |\n    | [GSE134873](https://0-www-ncbi-nlm-nih-gov.brum.beds.ac.uk/bioproject/556668) | [rep1](https://0-www-ncbi-nlm-nih-gov.brum.beds.ac.uk/biosample/12361857), [rep2](https://0-www-ncbi-nlm-nih-gov.brum.beds.ac.uk/biosample/12361856), [rep3](https://0-www-ncbi-nlm-nih-gov.brum.beds.ac.uk/biosample/12361855) | [rep1](https://0-www-ncbi-nlm-nih-gov.brum.beds.ac.uk/biosample/12361836), [rep2](https://0-www-ncbi-nlm-nih-gov.brum.beds.ac.uk/biosample/12361837), [rep3](https://0-www-ncbi-nlm-nih-gov.brum.beds.ac.uk/biosample/12361839)|\n\n- params_mouse.conf  \n    *Replace the '/PATH/TO/DATA' with a data path on your local server.*\n    \n    ```\n    [DMR]\n    ANALYSIS1 = 24M, 3M\n\n    [REFERENCE]\n    UCSC_NAME = mm10\n\n    [LIB1]\n    SAMPLE_NAME = 24M\n    LIB_NAME = 24M_rep1\n    LIB_TYPE = P\n    FILE_1 = /PATH/TO/DATA/SRX6589858_1.fastq.gz\n    FILE_2 = /PATH/TO/DATA/SRX6589858_2.fastq.gz\n\n    [LIB2]\n    SAMPLE_NAME = 24M\n    LIB_NAME = 24M_rep2\n    LIB_TYPE = P\n    FILE_1 = /PATH/TO/DATA/SRX6589859_1.fastq.gz\n    FILE_2 = /PATH/TO/DATA/SRX6589859_2.fastq.gz\n\n    [LIB3]\n    SAMPLE_NAME = 24M\n    LIB_NAME = 24M_rep3\n    LIB_TYPE = P\n    FILE_1 = /PATH/TO/DATA/SRX6589860_1.fastq.gz\n    FILE_2 = /PATH/TO/DATA/SRX6589860_2.fastq.gz\n\n    [LIB4]\n    SAMPLE_NAME = 3M\n    LIB_NAME = 3M_rep1\n    LIB_TYPE = P\n    FILE_1 = /PATH/TO/DATA/SRX6589850_1.fastq.gz\n    FILE_2 = /PATH/TO/DATA/SRX6589850_2.fastq.gz\n    \n    [LIB5]\n    SAMPLE_NAME = 3M\n    LIB_NAME = 3M_rep2\n    LIB_TYPE = P\n    FILE_1 = /PATH/TO/DATA/SRX6589851_1.fastq.gz\n    FILE_2 = /PATH/TO/DATA/SRX6589851_2.fastq.gz\n\n    [LIB6]\n    SAMPLE_NAME = 3M\n    LIB_NAME = 3M_rep3\n    LIB_TYPE = P\n    FILE_1 = /PATH/TO/DATA/SRX6589852_1.fastq.gz\n    FILE_2 = /PATH/TO/DATA/SRX6589852_2.fastq.gz\n    ```\n- Running command\n\n    ```\n     ./msPIPE/msPIPE.py -p params_mouse.conf -o mouse_result -c 5 -q 0.5\n    ```\n\n___\n"
      },
      "source": "https://raw.githubusercontent.com/jkimlab/msPIPE/master/README.md",
      "technique": "header_analysis"
    }
  ]
}