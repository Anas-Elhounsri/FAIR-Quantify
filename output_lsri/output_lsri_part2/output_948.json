{
  "application_domain": [
    {
      "confidence": 20.49,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation instructions",
        "parent_header": [
          "GWAS Quality Control Pipeline User Manual"
        ],
        "type": "Text_excerpt",
        "value": "If you use our software in any published work, please cite our BIGwas software and methods paper: \n\nK\u00e4ssens JC, Wienbrandt L, Ellinghaus D. BIGwas: Single-command quality control\nand association testing for multi-cohort and biobank-scale GWAS/PheWAS data.\nGigascience. 2021 Jun 29;10(6):giab047.\n"
      },
      "source": "https://raw.githubusercontent.com/ikmb/gwas-qc/master/Readme.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ikmb/gwas-qc"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-03-11T10:13:58Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-02-18T07:15:34Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "The IKMB GWAS Quality Control Pipeline"
      },
      "technique": "GitHub_API"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ikmb/gwas-qc/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "faq": [
    {
      "confidence": 1,
      "result": {
        "original_header": "HPC Resources and Job Queues",
        "parent_header": [
          "GWAS Quality Control Pipeline User Manual",
          "Advanced Configuration"
        ],
        "type": "Text_excerpt",
        "value": "By default, all processes are launched on the computer where the QC is started. This is usually not appropriate on HPC login nodes where jobs should be sheduled on different nodes. Nextflow provides support for a broad range of job submission systems, such as SLURM, SGE or PBS/Torque. Please review the [Nextflow documenation on compute resources](https://www.nextflow.io/docs/latest/executor.html).\n\nFor example, if you intend to use a SLURM environment, place the following code in your config (see [Local and Side-wide Configuration](#local-and-side-wide-configuration)):\n```\nprocess.executor = \"slurm\"\nexecutor.queue = \"partition-name\"  // optional\nexecutor.queueSize = 150           // optional, override max queue length for Nextflow\nprocess.clusterOptions = '--qos=someval' // optional, if you need to supply additional args to sbatch\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ikmb/gwas-qc/master/Readme.md",
      "technique": "header_analysis"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ikmb/gwas-qc/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ikmb/gwas-qc"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "GWAS Quality Control Pipeline User Manual"
      },
      "source": "https://raw.githubusercontent.com/ikmb/gwas-qc/master/Readme.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ikmb/gwas-qc/master/bin/update_build_PLINK1.9.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ikmb/gwas-qc/master/templates/run_flashpca.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ikmb/gwas-qc/master/templates/run_tracy_widom_stats.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ikmb/gwas-qc//master/doc/screenshot-liftover.png"
      },
      "source": "https://raw.githubusercontent.com/ikmb/gwas-qc/master/Readme.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Individual Annotations",
        "parent_header": [
          "GWAS Quality Control Pipeline User Manual",
          "How to use"
        ],
        "type": "Text_excerpt",
        "value": "For a proper analysis of batch and principal component effects, the pipeline makes use of certain sample information that you need to supply in a text file. It contains a single header line and one line for each sample in your dataset. **The columns are separated by tab characters.** The format is as follows:\n```\nfamilyID    individualID\tpaternalID\tmaternalID\tsex\tphenotype\tbatch\tethnicity_predicted\tdiagnosis\tcountry\nHG00096\t    HG00096\t        0\t        0               2       2\t        1000G\tEuropean\t        Control\t        Somewhere\nHG00097\t    HG00097\t        0\t        0\t        1\t2\t        1000G\tEuropean\t        Control\t        Somewhere\nHG00099\t    HG00099\t        0\t        0\t        2\t2\t        1000G\tEuropean\t        Control\t        Somewhere\nHG00100\t    HG00100\t        0\t        0       \t1\t1\t        1000G\tEuropean\t        Case\t        Somewhere\nHG00101\t    HG00101\t        0\t        0\t        2\t1\t        1000G\tEuropean\t        Case\t        Somewhere\nHG00102\t    HG00102\t        0\t        0\t        2\t2\t        1000G\tEuropean\t        Control\t        Somewhere\n```\n\n* familyID, individualID, paternalID, maternalID: can be copied from the Plink FAM file. The `individualID` must be unique. `paternalID` and `maternalID` are required but are currently not used.\n* sex, phenotype: same encoding as in the FAM file. For sex, 1/2 is male/female and for phenotype, 1/2 is control/case for a binary trait. 0 or -9 represents \"unknown\" phenotype. Any value other than -9/0/1/2 represents a quantitative trait, i.e. if a value other than -9/0/1/2 is given in the phenotype column, a quantitative trait is assumed.\n* batch: used by principal component analysis to find batch effects. Can be set to the same value for all samples if you only have one batch.\n* ethnicity_predicted: used to provide a reference frame for PCA plots. Based on the numerically most frequently specified ethnicity in column \"ethnicity_predicted\" the HWE test is performed only for controls of that ethnicity (or for all samples with that ethnicity if it is a quantitative trait).\n* diagnosis: if the `phenotype` is 1, this should be control. Otherwise, pick a disease name for the cases. This is used in PCA effect analysis and diagnosis filtering (see \"How to use\").\n* country: the probably self-reported origin of the sample. Is used in PCA to show batch effects.\n\nNote that empty lines or comment lines are currently not supported.\n"
      },
      "source": "https://raw.githubusercontent.com/ikmb/gwas-qc/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Non-hg19 Data and Liftover to hg19 (pre-QC)",
        "parent_header": [
          "GWAS Quality Control Pipeline User Manual",
          "How to use"
        ],
        "type": "Text_excerpt",
        "value": "Currently, the pipeline requires working on hg19 data. It is, however, possible to semi-automatically convert your hg18 (genome build 36) or hg38 coordinates to hg19 (genome build 37) prior to any actual QC steps. For this step to be possible, it is required that your input datasets are as original as possible regarding the microarray definition. If the input batches are already merged with other data or the variant names have been changed, the process is likely to fail.\n\nIf you already started the QC with non-hg19 input, the resulting data should not be used. The report will show valuable information about the detected chip type and will help choosing the appropriate definition file for lifting over. Each batch will have a subsection called \"Annotation Overview\" where this information is contained:\n![Liftover Report Screenshot](doc/screenshot-liftover.png)\n\nAs shown in the screenshot, several chips have been found to almost exactly match the input data. As they all performed equally, it does not matter which one you choose. For this example we choose `Human610-Quadv1_B`. To configure the QC pipeline to convert this batch to b37, you need to specify the chip in your `pipeline.config`. Consult the [full list of supported chips](https://github.com/ikmb/gwas-qc/blob/master/doc/supported-chips.txt) for possible values:\n\n```\ndataset_prefixes['Some_Demo_Dataset'] = [\"/home/user/oldbatch\", \"/home/user/otherbatch\"]\n\nbatch_liftover['oldbatch'] = \"Human610-Quadv1_B\"    // lift batch to build 37\nbatch_liftover['otherbatch'] = \"\"                   // no liftover for this batch\n```\n\nIn the configuration file, the keys in the dictionary `batch_liftover` specify the base names of the datasets set in `dataset_prefixes`. \n\nAfter liftover, the report shows a short summary about the success (or failure) of the liftover process.\n"
      },
      "source": "https://raw.githubusercontent.com/ikmb/gwas-qc/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Post-QC Liftover to hg38 (and others)",
        "parent_header": [
          "GWAS Quality Control Pipeline User Manual",
          "How to use"
        ],
        "type": "Text_excerpt",
        "value": "In addition to the regular GRCh37 (hg19) output, the QC pipeline offers automatic conversion to hg38. Due to licensing issues, the required tools are not included in this distribution and as such, this functionality is disabled by default. If you would like to use this feature, you will need to download the [UCSC LiftOver program for Linux](https://genome-store.ucsc.edu/), the chain file [`hg19ToHg38.over.chain.gz`](http://hgdownload.cse.ucsc.edu/goldenPath/hg19/liftOver/) and the _unpacked_ [UCSC hg38 reference `hg38.fa.gz`](http://hgdownload.cse.ucsc.edu/goldenPath/hg38/bigZips/). \n\nThe target directory should now contain the following files:\n\n```\nliftOver                 # needs to be executable: chmod a+x liftOver\nhg19ToHg38.over.chain.gz\nhg38.fa                  # obtain using: gunzip hg38.fa.gz\n```\n\nOpen your dataset's `QC.config` and set the following parameter to the path where the above files reside:\n```\nparams.ucsc_liftover = \"/home/user/ucsc-liftover-data\"\n```\n\n\nThe pipeline process automatically detects the presence of the UCSC liftover tools and adds a hg38 conversion step to the pipeline.\n"
      },
      "source": "https://raw.githubusercontent.com/ikmb/gwas-qc/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Principal Component Analysis with HapMap",
        "parent_header": [
          "GWAS Quality Control Pipeline User Manual",
          "How to use"
        ],
        "type": "Text_excerpt",
        "value": "By default, the QC pipeline performs a Principal Component Analysis with a 1000 Genomes Reference. It is possible to include an additional analysis using the HapMap2 reference for PCA by adding the parameter `--activate_hapmap_pca=1` to the Nextflow call. This additional PCA will not contribute to the actual outcome but will add HapMap2 PCA plots to the final report.\n\nIt is not recommended to use this feature for large datasets, e.g. >50,000 samples.\n"
      },
      "source": "https://raw.githubusercontent.com/ikmb/gwas-qc/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Duplicate/Relatedness Detection",
        "parent_header": [
          "GWAS Quality Control Pipeline User Manual",
          "How to use"
        ],
        "type": "Text_excerpt",
        "value": "The QC pipeline performs duplicate/relatedness testing (identity-by-state (IBS) and identity-by-descent (IBD) estimation). Pairwise percentage IBD values are computed from a pruned subset of linkage disequilibrium (LD) independent genetic variants. The expectation is that IBD = 1 for duplicates or monozygotic twins, IBD = 0.5 for first-degree relatives, IBD = 0.25 for second-degree relatives and IBD = 0.125 for third-degree relatives. By default, one individual is removed from each pair with an IBD value of > 0.1875, which is halfway between the expected IBD for third- and second-degree relatives. To keep relatives, add the `--keep_related` parameter to the nextflow call.\n"
      },
      "source": "https://raw.githubusercontent.com/ikmb/gwas-qc/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Local and Side-wide Configuration",
        "parent_header": [
          "GWAS Quality Control Pipeline User Manual",
          "Advanced Configuration"
        ],
        "type": "Text_excerpt",
        "value": "You can extend the Nextflow default configuration by using (or creating) the following configuration files:\n- a `nextflow.config` in the current working directory. This file is automatically read if Nextflow is launched from this folder.\n- a site-wide `$HOME/.nextflow/config`. This file is automatically read every time you run Nextflow.\n\nIt is usually a good idea to place additional configuration items to the side-wide configuration (see below for examples).\n"
      },
      "source": "https://raw.githubusercontent.com/ikmb/gwas-qc/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Shared Singularity Cache",
        "parent_header": [
          "GWAS Quality Control Pipeline User Manual",
          "Advanced Configuration"
        ],
        "type": "Text_excerpt",
        "value": "In a shared compute enviroment such as HPC clusters, it is often useful to share the singularity cache with other Nextflow/Singularity users so they would not have to download the same large files over and over again. To specify the singularity cache directory, add the following line to your config:\n```\nsingularity.cacheDir = '/some/shared/place/singularity'\n```\nNote that the directory must be accessible from all compute nodes.\n\nIf your head node or compute nodes have restricted internet access, you need to manually acquire the images. This can be done as follows:\n```\n# the path under singularity.cacheDir, see above\ncd /some/shared/place/singularity\nwget https://hybridcomputing.ikmb.uni-kiel.de/downloads/lwienbrandt-ikmb-gwas-qc-assoc-assets.sif\nsingularity pull saige-0.43.2.sif docker://wzhou88/saige:0.43.2\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ikmb/gwas-qc/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Limited Temporary Space",
        "parent_header": [
          "GWAS Quality Control Pipeline User Manual",
          "Advanced Configuration"
        ],
        "type": "Text_excerpt",
        "value": "This pipeline makes heavy use of temporary storage. By default, Nextflow will store them in a folder called `work` within your current working directory. If your local storage is limited and/or you need to store the temporary files in a different place, you can\n- call Nextflow/the start script from a place with enough available storage. The config files do not need to be in the current working directory, or\n- set the environment variable `NXF_WORK` to a different directory. The default value is `NXF_WORK=$(pwd)/work`. A good place for this setting is your shell startup file (e.g. `.bashrc` or `.zshrc`, don't forget to `source` it or re-login to make it work). For a quick test, you can also just temporarily `export NXF_WORK=/some/other/place` before running the pipeline.\n\nThe example dataset that comes with this package requires at least 620 MB temporary store space and additional 385 MB result storage.\n\n"
      },
      "source": "https://raw.githubusercontent.com/ikmb/gwas-qc/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Mounting Paths into the Singularity Container",
        "parent_header": [
          "GWAS Quality Control Pipeline User Manual",
          "Advanced Configuration"
        ],
        "type": "Text_excerpt",
        "value": "To separate the operating system within the singularity container from the host system, Singularity only makes your home folder accessible to the insides. If your data files are stored in a directory different from your home (e.g. a shared storage `/data_storage`), you will need to explicitly make it accessible by specifying additional singularity options in your config file:\n```\nsingularity.runOptions = \"-B /data_storage -B /some_other_storage -B /even_more_storage\"\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ikmb/gwas-qc/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Cache Issues",
        "parent_header": [
          "GWAS Quality Control Pipeline User Manual",
          "Advanced Configuration"
        ],
        "type": "Text_excerpt",
        "value": "Some users have experienced error messages that read like:\n```\nFATAL: Cached File Hash(...) and Expected Hash(...) does not match\n```\n\nWhen Nextflow is run on a grid computing/cluster platform, it makes heavy and parallel use of shared storage among the involved nodes. If the filesystem that is used on this shared storage cannot guarantee cache coherency, Nextflow might run into race conditions leading to the above error. Removing the `$NXF_WORK` or `work` directory and/or moving them to a different filesystem might help with the issue. Almost all of these errors that are known to us have happened on directories that are mounted via SMB/CIFS. It has successfully and thoroughly been tested with NFS and BeeGFS.\n\nIf you absolutely must use a SMB/CIFS share as the pipeline working directory, you could try setting `process.cache = 'deep'` in your `nextflow.conf` (see above for suitable config file locations). This will make Nextflow's caching behavior considerably slower.\n\n"
      },
      "source": "https://raw.githubusercontent.com/ikmb/gwas-qc/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "UKSH medcluster configuration",
        "parent_header": [
          "GWAS Quality Control Pipeline User Manual",
          "Advanced Configuration"
        ],
        "type": "Text_excerpt",
        "value": "For optimal configuration on the UKSH medcluster, perform the following configuration changes (you only need to do this once):\n\nCreate or change your `$HOME/.nextflow/config` file:\n```\n// use pre-populated singularity image cache\nsingularity.cacheDir = \"/work_ifs/ikmb_repository/singularity_cache\"\n\n// bind /work_ifs folders. If you need more than $HOME and work_ifs, add another \"-B /somewhere\" switch.\nsingularity.runOptions = \"-B /work_ifs\"\n\n// make nextflow use slurm by default\nprofiles {\n    standard {\n        executor.name = \"slurm\"\n        executor.queueSize = 150\n        process.executor = \"slurm\"\n        process.queue = \"all\"\n    }\n}\n```\n\nBefore launching the pipeline, please assure that the proper modules are loaded: `module load nextflow singularity`. Java should be loaded automatically as a dependency of Nextflow.\n"
      },
      "source": "https://raw.githubusercontent.com/ikmb/gwas-qc/master/Readme.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ikmb/gwas-qc/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "nextflow, qc-pipeline"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2020 Institute of Clinical Molecular Biology\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/ikmb/gwas-qc/master/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "parent_header": [
          "GWAS Quality Control Pipeline User Manual"
        ],
        "type": "Text_excerpt",
        "value": "MIT License\n\nCopyright (c) 2020-2021 Institute of Clinical Molecular Biology\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/ikmb/gwas-qc/master/Readme.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "gwas-qc"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "ikmb"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 427443,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 135945,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Groovy",
        "size": 127795,
        "type": "Programming_language",
        "value": "Groovy"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 86189,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Nextflow",
        "size": 7541,
        "type": "Programming_language",
        "value": "Nextflow"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 5049,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "TeX",
        "size": 1202,
        "type": "Programming_language",
        "value": "TeX"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Awk",
        "size": 184,
        "type": "Programming_language",
        "value": "Awk"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ikmb/gwas-qc/master/Readme.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Prerequisites",
        "parent_header": [
          "GWAS Quality Control Pipeline User Manual"
        ],
        "type": "Text_excerpt",
        "value": "- Nextflow: https://www.nextflow.io/ (must be installed in your search path, e.g. `$PATH`)\n- Java 8 or higher (must be available on all compute nodes and head node)\n- Singularity 3.4 or higher (must be available on all compute nodes)\n- A to-be-QCed dataset in Plink format (bim/bed/fam). You can use the included example for test runs.\n\nPlease ensure that you have 16 GB RAM installed on the computer where you intend to run the pipeline, and have at least 1.5 GB available hard disk space for the example dataset. For larger datasets, consider setting a location for temporary files (see [Limited Temporary Space](#limited-temporary-space)).\n\nTypically, users would like to run the tool on an HPC instead of a single local computer. For local testing, no further configuration needs to be done (proceed to [Quick Start](#quick-start)). For HPC environments, please consult the [Advanced Configuration](#advanced-configuration) section. At the very least, consider setting up your batch scheduler and temporary space location ([Limited Temporary Space](#limited-temporary-space))\n\nNote, that no separate installation of the pipeline software is necessary. During Nextflow's first launch, required scripts and containers are automatically downloaded and installed locally into a cache folder. If your HPC cluster has limited Internet connectivity, you might need to download some files manually (see [Shared Singularity Cache](#shared-singularity-cache)). If the current version on Github is updated, Nextflow prints a notice that the local copy is outdated. In that case, the local copy can be updated using `nextflow pull ikmb/gwas-qc`.\n\n**Note:** As we have a current issue with the hoster of our Singularity container, you need to download the container yourself and configure the path to the container before the first run of Nextflow. (Btw, the process is similar to setting up a [Shared Singularity Cache](#shared-singularity-cache).)\n```\ncd /some/place/for/your/container\nwget https://hybridcomputing.ikmb.uni-kiel.de/downloads/lwienbrandt-ikmb-gwas-qc-assoc-assets.sif\n```\nThen, add/modify the following key in your `~/.nextflow/config` (if the file does not exist, create it):\n```\nsingularity.cacheDir = \"/some/place/for/your/container\"\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/ikmb/gwas-qc/master/Readme.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 12:37:15",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 8
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick Start",
        "parent_header": [
          "GWAS Quality Control Pipeline User Manual"
        ],
        "type": "Text_excerpt",
        "value": "1. Get the example dataset: https://raw.githubusercontent.com/ikmb/gwas-qc/master/example.tar.gz\n   - Note, that the example also contains files that will not be used by the QC, but for later marker association testing.\n   - The example dataset is a subset of the 1000 Genomes Project, using 2504 samples with randomized sex and phenotype, and 50,000 randomly-selected variants.\n3. Unpack it in your home folder: `tar xvaf example.tar.gz -C $HOME; cd $HOME/example`\n4. Launch the pipeline: `nextflow run -c pipeline.config ikmb/gwas-qc` (Please ensure that you followed beforementioned note about downloading the singulariry container first.)\n5. (optional) Use the QC output directly as input to the [Association Testing Pipeline](https://github.com/ikmb/gwas-assoc).\n\nThe pipeline output and reports will be written to the `output` directory.\n"
      },
      "source": "https://raw.githubusercontent.com/ikmb/gwas-qc/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "How to use",
        "parent_header": [
          "GWAS Quality Control Pipeline User Manual"
        ],
        "type": "Text_excerpt",
        "value": "In most cases, the example configuration consisting of three files, `QC.config`, `dataset.config` and `pipeline.config` can be used for your own dataset with only minor changes. The file `pipeline.config` describes extrinsic parameters, i.e. where your input files are, etc. The file `dataset.config` contains dataset-specific information, i.e. the target name of the dataset, the expected diagnoses and various configurable threshold parameters to the QC process. The last file, `QC.config`, configures the runtime parameters such as allocated memory on HPC clusters, wallclock time allowance. To prepare your own dataset, perform the following steps:\n\n1. Create a new directory to host your configuration and results.\n2. Copy the aforementioned configuration files to your newly-created directory.\n3. Adjust the names and locations of datasets and config files in your `pipeline.config`. Note that absolute path names are required, relative names are not supported.\n4. Change the items `collection_name` and `allowed_diagnoses` in your dataset.config according to your data. The collection name is the name prefix that will be used for output files and is arbitrary, as long as it would be a valid filename. The `allowed_diagnoses` key is used to specify which samples to filter based on specified diseases in case you have a multi-disease dataset. Disease names are arbitrary but should not contain whitespaces.\n5. Create individual annotations (see below) for your dataset and place it among your source files. If your source files are named `MyGWAS.bim/bed/fam`, the annotations are expected to be in `MyGWAS_individuals_annotation.txt`. The entire pipeline (QC module and association module) works for binary as well as quantitative traits. For a QC based on quantitative traits, in the PLINK input Fam file, only the 6th column must be specified as a quantitative trait (for more information, see also http://zzz.bwh.harvard.edu/plink/data.shtml#ped).\n6. Run the pipeline with `nextflow run -c pipeline.config ikmb/gwas-qc`.\n"
      },
      "source": "https://raw.githubusercontent.com/ikmb/gwas-qc/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Individual Annotations",
        "parent_header": [
          "GWAS Quality Control Pipeline User Manual",
          "How to use"
        ],
        "type": "Text_excerpt",
        "value": "For a proper analysis of batch and principal component effects, the pipeline makes use of certain sample information that you need to supply in a text file. It contains a single header line and one line for each sample in your dataset. **The columns are separated by tab characters.** The format is as follows:\n```\nfamilyID    individualID\tpaternalID\tmaternalID\tsex\tphenotype\tbatch\tethnicity_predicted\tdiagnosis\tcountry\nHG00096\t    HG00096\t        0\t        0               2       2\t        1000G\tEuropean\t        Control\t        Somewhere\nHG00097\t    HG00097\t        0\t        0\t        1\t2\t        1000G\tEuropean\t        Control\t        Somewhere\nHG00099\t    HG00099\t        0\t        0\t        2\t2\t        1000G\tEuropean\t        Control\t        Somewhere\nHG00100\t    HG00100\t        0\t        0       \t1\t1\t        1000G\tEuropean\t        Case\t        Somewhere\nHG00101\t    HG00101\t        0\t        0\t        2\t1\t        1000G\tEuropean\t        Case\t        Somewhere\nHG00102\t    HG00102\t        0\t        0\t        2\t2\t        1000G\tEuropean\t        Control\t        Somewhere\n```\n\n* familyID, individualID, paternalID, maternalID: can be copied from the Plink FAM file. The `individualID` must be unique. `paternalID` and `maternalID` are required but are currently not used.\n* sex, phenotype: same encoding as in the FAM file. For sex, 1/2 is male/female and for phenotype, 1/2 is control/case for a binary trait. 0 or -9 represents \"unknown\" phenotype. Any value other than -9/0/1/2 represents a quantitative trait, i.e. if a value other than -9/0/1/2 is given in the phenotype column, a quantitative trait is assumed.\n* batch: used by principal component analysis to find batch effects. Can be set to the same value for all samples if you only have one batch.\n* ethnicity_predicted: used to provide a reference frame for PCA plots. Based on the numerically most frequently specified ethnicity in column \"ethnicity_predicted\" the HWE test is performed only for controls of that ethnicity (or for all samples with that ethnicity if it is a quantitative trait).\n* diagnosis: if the `phenotype` is 1, this should be control. Otherwise, pick a disease name for the cases. This is used in PCA effect analysis and diagnosis filtering (see \"How to use\").\n* country: the probably self-reported origin of the sample. Is used in PCA to show batch effects.\n\nNote that empty lines or comment lines are currently not supported.\n"
      },
      "source": "https://raw.githubusercontent.com/ikmb/gwas-qc/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Non-hg19 Data and Liftover to hg19 (pre-QC)",
        "parent_header": [
          "GWAS Quality Control Pipeline User Manual",
          "How to use"
        ],
        "type": "Text_excerpt",
        "value": "Currently, the pipeline requires working on hg19 data. It is, however, possible to semi-automatically convert your hg18 (genome build 36) or hg38 coordinates to hg19 (genome build 37) prior to any actual QC steps. For this step to be possible, it is required that your input datasets are as original as possible regarding the microarray definition. If the input batches are already merged with other data or the variant names have been changed, the process is likely to fail.\n\nIf you already started the QC with non-hg19 input, the resulting data should not be used. The report will show valuable information about the detected chip type and will help choosing the appropriate definition file for lifting over. Each batch will have a subsection called \"Annotation Overview\" where this information is contained:\n![Liftover Report Screenshot](doc/screenshot-liftover.png)\n\nAs shown in the screenshot, several chips have been found to almost exactly match the input data. As they all performed equally, it does not matter which one you choose. For this example we choose `Human610-Quadv1_B`. To configure the QC pipeline to convert this batch to b37, you need to specify the chip in your `pipeline.config`. Consult the [full list of supported chips](https://github.com/ikmb/gwas-qc/blob/master/doc/supported-chips.txt) for possible values:\n\n```\ndataset_prefixes['Some_Demo_Dataset'] = [\"/home/user/oldbatch\", \"/home/user/otherbatch\"]\n\nbatch_liftover['oldbatch'] = \"Human610-Quadv1_B\"    // lift batch to build 37\nbatch_liftover['otherbatch'] = \"\"                   // no liftover for this batch\n```\n\nIn the configuration file, the keys in the dictionary `batch_liftover` specify the base names of the datasets set in `dataset_prefixes`. \n\nAfter liftover, the report shows a short summary about the success (or failure) of the liftover process.\n"
      },
      "source": "https://raw.githubusercontent.com/ikmb/gwas-qc/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Post-QC Liftover to hg38 (and others)",
        "parent_header": [
          "GWAS Quality Control Pipeline User Manual",
          "How to use"
        ],
        "type": "Text_excerpt",
        "value": "In addition to the regular GRCh37 (hg19) output, the QC pipeline offers automatic conversion to hg38. Due to licensing issues, the required tools are not included in this distribution and as such, this functionality is disabled by default. If you would like to use this feature, you will need to download the [UCSC LiftOver program for Linux](https://genome-store.ucsc.edu/), the chain file [`hg19ToHg38.over.chain.gz`](http://hgdownload.cse.ucsc.edu/goldenPath/hg19/liftOver/) and the _unpacked_ [UCSC hg38 reference `hg38.fa.gz`](http://hgdownload.cse.ucsc.edu/goldenPath/hg38/bigZips/). \n\nThe target directory should now contain the following files:\n\n```\nliftOver                 # needs to be executable: chmod a+x liftOver\nhg19ToHg38.over.chain.gz\nhg38.fa                  # obtain using: gunzip hg38.fa.gz\n```\n\nOpen your dataset's `QC.config` and set the following parameter to the path where the above files reside:\n```\nparams.ucsc_liftover = \"/home/user/ucsc-liftover-data\"\n```\n\n\nThe pipeline process automatically detects the presence of the UCSC liftover tools and adds a hg38 conversion step to the pipeline.\n"
      },
      "source": "https://raw.githubusercontent.com/ikmb/gwas-qc/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Principal Component Analysis with HapMap",
        "parent_header": [
          "GWAS Quality Control Pipeline User Manual",
          "How to use"
        ],
        "type": "Text_excerpt",
        "value": "By default, the QC pipeline performs a Principal Component Analysis with a 1000 Genomes Reference. It is possible to include an additional analysis using the HapMap2 reference for PCA by adding the parameter `--activate_hapmap_pca=1` to the Nextflow call. This additional PCA will not contribute to the actual outcome but will add HapMap2 PCA plots to the final report.\n\nIt is not recommended to use this feature for large datasets, e.g. >50,000 samples.\n"
      },
      "source": "https://raw.githubusercontent.com/ikmb/gwas-qc/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Duplicate/Relatedness Detection",
        "parent_header": [
          "GWAS Quality Control Pipeline User Manual",
          "How to use"
        ],
        "type": "Text_excerpt",
        "value": "The QC pipeline performs duplicate/relatedness testing (identity-by-state (IBS) and identity-by-descent (IBD) estimation). Pairwise percentage IBD values are computed from a pruned subset of linkage disequilibrium (LD) independent genetic variants. The expectation is that IBD = 1 for duplicates or monozygotic twins, IBD = 0.5 for first-degree relatives, IBD = 0.25 for second-degree relatives and IBD = 0.125 for third-degree relatives. By default, one individual is removed from each pair with an IBD value of > 0.1875, which is halfway between the expected IBD for third- and second-degree relatives. To keep relatives, add the `--keep_related` parameter to the nextflow call.\n"
      },
      "source": "https://raw.githubusercontent.com/ikmb/gwas-qc/master/Readme.md",
      "technique": "header_analysis"
    }
  ],
  "workflows": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ikmb/gwas-qc/master/SNPQCI.nf"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ikmb/gwas-qc/master/Report.nf"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ikmb/gwas-qc/master/QC.nf"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ikmb/gwas-qc/master/SNPQCII.nf"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ikmb/gwas-qc/master/SampleQCI.nf"
      },
      "technique": "file_exploration"
    }
  ]
}