{
  "application_domain": [
    {
      "confidence": 48.08,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/zamanianlab/wrmXpress"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-11-29T20:24:25Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-10-15T10:39:57Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9781134768089628,
      "result": {
        "original_header": "Overview",
        "type": "Text_excerpt",
        "value": "This package contains a variety of Python and CellProfiler pipelines used for the analysis of worm imaging data. Some of these are specific to Zamanian lab experimental pipelines, but many of the modules should be robust to a diversity of species and experimental procedures. \nExperimental protocols used to generate images that are compatible with wrmXpress can be found in the associated manuscripts and preprints: \n    Contains all the wrmXpress details. See this manuscript for an explanation of modules and pipelines included.\n- [Multivariate screening preprint](https://doi.org/10.1101/2022.07.25.501423) \n    Includes comprehensive protocols for microfilariae imaging (motility and viability) and adult filaria imaging (motility). Detailed step-by-step procedures can be found at Protocol Exchange for the [bivariate high-content mf screen](https://doi.org/10.21203/rs.3.pex-1916/v1) and the [multivarite adult screen](https://doi.org/10.21203/rs.3.pex-1918/v1).\n- [*C. elegans* feeding preprint](https://doi.org/10.1101/2022.08.31.506057) \n    Includes details on the development and validation of a feeding protocol using fluorescent stains. Detailed step-by-step procedures for parts of this assay can be found [here](https://doi.org/10.21203/rs.3.pex-2018/v1).\n \n"
      },
      "source": "https://raw.githubusercontent.com/zamanianlab/wrmXpress/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.961732210402703,
      "result": {
        "original_header": "Instrument settings",
        "type": "Text_excerpt",
        "value": "**Imaging mode** - Either a single well or multiple wells in each image. \n**Number of rows and columns per image** - If performing multi-well imaging, include the number of rows/columns in each image. Set both to 1 if mode is single-well. \n**Multi-well detection mode** - If performing multi-well imaging, choose the method for detecting wells. `auto` works for cropped videos of 24-well plates; use `grid` for other formats.\n \n"
      },
      "source": "https://raw.githubusercontent.com/zamanianlab/wrmXpress/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.943141431124858,
      "result": {
        "original_header": "Worm information",
        "type": "Text_excerpt",
        "value": "**Stages** - Triggers different parameters for the motility and segmentation modules.\n \n"
      },
      "source": "https://raw.githubusercontent.com/zamanianlab/wrmXpress/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.955087645615217,
      "result": {
        "original_header": "Module selection",
        "type": "Text_excerpt",
        "value": "**Modules** contains a key for each possible module, including CellProfiler. Modules are invoked by setting the value of `run` to `True`; additional module-specific parameters may apply.\n \n"
      },
      "source": "https://raw.githubusercontent.com/zamanianlab/wrmXpress/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9668388794368771,
      "result": {
        "original_header": "Run-time settings",
        "type": "Text_excerpt",
        "value": "**Wells** - Either `All` or a list of wells (each well on a new line, initiated with a hyphen) \n**Directories**- Full paths of the `input/`, `output/`, and `work/` directories. If using a Docker image, each can be in the root directory.\n \n"
      },
      "source": "https://raw.githubusercontent.com/zamanianlab/wrmXpress/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9641314790901748,
      "result": {
        "original_header": "Modules",
        "type": "Text_excerpt",
        "value": "Please see the [manuscript](https://doi.org/10.1371/journal.pntd.0010937) for a more thorough description of each module.\n \n"
      },
      "source": "https://raw.githubusercontent.com/zamanianlab/wrmXpress/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9916494619730187,
      "result": {
        "original_header": "motility",
        "type": "Text_excerpt",
        "value": "A Python implementation of CV2's dense flow algorithm. Requires video input and supports `imagexpress` or `avi` modalities. Thumbnails of flow output are generated by `dx`. If using `multi-well`, `auto` works for videos of 24-well plates cropped to only include the plate; otherwise use `grid`. \n"
      },
      "source": "https://raw.githubusercontent.com/zamanianlab/wrmXpress/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9666946594259268,
      "result": {
        "original_header": "convert",
        "type": "Text_excerpt",
        "value": "Converts the default ImageXpress directory structure (images grouped by time point) into a structure that allows for video generation (grouped by well). Automatically invoked when using the motility module. `save_video` can be set to true to save the directory structure to `output`, and `rescale_multiplier` can be set to any float in order to shrink the images (for smaller video sizes).\n \n"
      },
      "source": "https://raw.githubusercontent.com/zamanianlab/wrmXpress/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9856225803138505,
      "result": {
        "original_header": "segment",
        "type": "Text_excerpt",
        "value": "Segments worms using a combination of Sobel and Gaussian filters. Has been tested with microfilaria, nematode larvae and adults, and schistosome adults. Can be run on multiple wavelengths and with multi-site images. Thumbnails of segmented worms are generated by `dx`. \n"
      },
      "source": "https://raw.githubusercontent.com/zamanianlab/wrmXpress/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.867541947191831,
      "result": {
        "original_header": "fecundity",
        "type": "Text_excerpt",
        "value": "Segments released microfilariae or eggs, depending on species. Has been tested with *Brugia* spp. and *Schistosoma* spp. If using schistosomes, adults do not need to be removed from the well prior to imaging. \n"
      },
      "source": "https://raw.githubusercontent.com/zamanianlab/wrmXpress/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9836708315325544,
      "result": {
        "original_header": "dx",
        "type": "Text_excerpt",
        "value": "Generates a plate-shaped thumbnail of each wavelength, as well as diagnostic images from certain modules. \n"
      },
      "source": "https://raw.githubusercontent.com/zamanianlab/wrmXpress/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9769322472217391,
      "result": {
        "original_header": "mf_celltox",
        "type": "Text_excerpt",
        "value": "Measures dead microfilaria via fluorescent staining. Compatible with multi-site images. Untested for other worms/stages, but is likely to work out-of-the-box.\n \n"
      },
      "source": "https://raw.githubusercontent.com/zamanianlab/wrmXpress/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9403061302022976,
      "result": {
        "original_header": "feeding",
        "type": "Text_excerpt",
        "value": "Measures fluorescence in two channels. Specifically used for *C. elegans* feeding assays, but likely to work with slight modification for any *C. elegans* assay that seeks to measure worm fluorescence in multiple channels. \n"
      },
      "source": "https://raw.githubusercontent.com/zamanianlab/wrmXpress/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9535997568412578,
      "result": {
        "original_header": "wormsize",
        "type": "Text_excerpt",
        "value": "Generic pipeline for measuring the size of worms. Has been tested with mixed stages of *C. elegans*; may work with parasites. Incorporates the worm untangling and straightening algorithms from the [Worm Toolbox](https://doi.org/10.1038/nmeth.1984). \n"
      },
      "source": "https://raw.githubusercontent.com/zamanianlab/wrmXpress/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9888296556294986,
      "result": {
        "original_header": "wormsize_trans",
        "type": "Text_excerpt",
        "value": "Implementation of `wormsize` that also measures worm fluorescence in a single wavelength. Useful for filtering for transgenic worms containing a fluorescent marker.\n \n"
      },
      "source": "https://raw.githubusercontent.com/zamanianlab/wrmXpress/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9821154636264424,
      "result": {
        "original_header": "wormsize_intensity",
        "type": "Text_excerpt",
        "value": "Implementation of `wormsize` that also measures intensity features, which may be helpful for filtering non-worms.\n \n"
      },
      "source": "https://raw.githubusercontent.com/zamanianlab/wrmXpress/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9785958374265202,
      "result": {
        "original_header": "wormsize_intensity_cellpose",
        "type": "Text_excerpt",
        "value": "Implementation of `wormsize_intensity` that uses [Cellpose](https://github.com/MouseLand/cellpose) and a pre-trained model for *C. elegans* segmentation. \n"
      },
      "source": "https://raw.githubusercontent.com/zamanianlab/wrmXpress/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/zamanianlab/wrmXpress/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/zamanianlab/wrmXpress/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "zamanianlab/wrmXpress"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Overview"
      },
      "source": "https://raw.githubusercontent.com/zamanianlab/wrmXpress/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/zamanianlab/wrmXpress/main/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/zamanianlab/wrmXpress/main/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "identifier": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://doi.org/10.5281/zenodo.7116648"
      },
      "source": "https://raw.githubusercontent.com/zamanianlab/wrmXpress/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://doi.org/10.5281/zenodo.7116648"
      },
      "source": "https://raw.githubusercontent.com/zamanianlab/wrmXpress/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/zamanianlab/wrmXpress/main/img/logo/output.png"
      },
      "source": "https://raw.githubusercontent.com/zamanianlab/wrmXpress/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/zamanianlab/wrmXpress/main/img/flow_dx.png"
      },
      "source": "https://raw.githubusercontent.com/zamanianlab/wrmXpress/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/zamanianlab/wrmXpress/main/img/segment_dx.png"
      },
      "source": "https://raw.githubusercontent.com/zamanianlab/wrmXpress/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/zamanianlab/wrmXpress/main/img/fecundity.png"
      },
      "source": "https://raw.githubusercontent.com/zamanianlab/wrmXpress/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/zamanianlab/wrmXpress/main/img/wormsize_dx.png"
      },
      "source": "https://raw.githubusercontent.com/zamanianlab/wrmXpress/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/zamanianlab/wrmXpress/main/img/feeding.png"
      },
      "source": "https://raw.githubusercontent.com/zamanianlab/wrmXpress/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/zamanianlab/wrmXpress/main/img/straightened.png"
      },
      "source": "https://raw.githubusercontent.com/zamanianlab/wrmXpress/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation and usage",
        "type": "Text_excerpt",
        "value": "The Zamanian Lab run all analyses on a node at the [Center for High-Throughput Computing at UW-Madison](https://chtc.cs.wisc.edu). A Docker recipe containing all the dependendenies can be found in our [Docker GitHub repo](https://github.com/zamanianlab/Docker/tree/main/chtc-wrmxpress), and a pre-compiled image can be found at [DockerHub](https://hub.docker.com/repository/docker/zamanianlab/chtc-wrmxpress). A Conda environment file has also been provided at `local_env/conda_env.yml`, though this may need modification based on the user's processor (e.g., Apple vs Intel).\n"
      },
      "source": "https://raw.githubusercontent.com/zamanianlab/wrmXpress/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9660255191454525,
      "result": {
        "original_header": "fecundity",
        "type": "Text_excerpt",
        "value": "Segments released microfilariae or eggs, depending on species. Has been tested with *Brugia* spp. and *Schistosoma* spp. If using schistosomes, adults do not need to be removed from the well prior to imaging. \n"
      },
      "source": "https://raw.githubusercontent.com/zamanianlab/wrmXpress/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9911453543072427,
      "result": {
        "original_header": "Issues",
        "type": "Text_excerpt",
        "value": "Please use the provided issue template when submitting a bug report.\n \n"
      },
      "source": "https://raw.githubusercontent.com/zamanianlab/wrmXpress/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/zamanianlab/wrmXpress/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2020 ZamanianLab\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/zamanianlab/wrmXpress/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "wrmXpress"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "zamanianlab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 4891602,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 51462,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 15589,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 561,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/zamanianlab/wrmXpress/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "wheelern",
          "type": "User"
        },
        "date_created": "2023-12-19T16:33:19Z",
        "date_published": "2023-12-19T16:35:13Z",
        "description": "- Added a Dockerfile for building an image with the wrmXpress source code included.\r\n- Added a GitHub Action for automatically building and pushing a new image to Docker Hub whenever a new version (vX.Y.Z) of wrmXpress is released\r\n\r\n**Full Changelog**: https://github.com/zamanianlab/wrmXpress/compare/v1.3.0...v1.4.0",
        "html_url": "https://github.com/zamanianlab/wrmXpress/releases/tag/v1.4.0",
        "name": "v1.4.0",
        "release_id": 134505354,
        "tag": "v1.4.0",
        "tarball_url": "https://api.github.com/repos/zamanianlab/wrmXpress/tarball/v1.4.0",
        "type": "Release",
        "url": "https://api.github.com/repos/zamanianlab/wrmXpress/releases/134505354",
        "value": "https://api.github.com/repos/zamanianlab/wrmXpress/releases/134505354",
        "zipball_url": "https://api.github.com/repos/zamanianlab/wrmXpress/zipball/v1.4.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "wheelern",
          "type": "User"
        },
        "date_created": "2022-09-23T14:53:15Z",
        "date_published": "2022-09-23T14:58:01Z",
        "description": "## What's Changed\r\n* Use Cellpose for segmentation by @wheelern in https://github.com/zamanianlab/wrmXpress/pull/16\r\n\r\nFor *C. elegans* segmentation, the method of choice is now Cellpose. A model has been trained and included in this repo. For now, the algorithm is only invoked when using the `wormsize_intensity_cellpose` CellProfiler pipeline. All other pipelines remain unchanged.\r\n\r\n**Full Changelog**: https://github.com/zamanianlab/wrmXpress/compare/v1.2.1...v1.3.0",
        "html_url": "https://github.com/zamanianlab/wrmXpress/releases/tag/v1.3.0",
        "name": "v1.3.0",
        "release_id": 77995968,
        "tag": "v1.3.0",
        "tarball_url": "https://api.github.com/repos/zamanianlab/wrmXpress/tarball/v1.3.0",
        "type": "Release",
        "url": "https://api.github.com/repos/zamanianlab/wrmXpress/releases/77995968",
        "value": "https://api.github.com/repos/zamanianlab/wrmXpress/releases/77995968",
        "zipball_url": "https://api.github.com/repos/zamanianlab/wrmXpress/zipball/v1.3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "wheelern",
          "type": "User"
        },
        "date_created": "2022-08-18T22:17:50Z",
        "date_published": "2022-08-18T22:20:21Z",
        "description": "Hot-fix to force the algorithm to automatically switch to `grid_crop` when `auto_crop` doesn't find the correct number of wells.\r\n\r\nAssorted other changes in `crop_wells.py`\r\n\r\n**Full Changelog**: https://github.com/zamanianlab/wrmXpress/compare/v1.2.0...v1.2.1",
        "html_url": "https://github.com/zamanianlab/wrmXpress/releases/tag/v1.2.1",
        "name": "v1.2.1",
        "release_id": 74782196,
        "tag": "v1.2.1",
        "tarball_url": "https://api.github.com/repos/zamanianlab/wrmXpress/tarball/v1.2.1",
        "type": "Release",
        "url": "https://api.github.com/repos/zamanianlab/wrmXpress/releases/74782196",
        "value": "https://api.github.com/repos/zamanianlab/wrmXpress/releases/74782196",
        "zipball_url": "https://api.github.com/repos/zamanianlab/wrmXpress/zipball/v1.2.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "wheelern",
          "type": "User"
        },
        "date_created": "2022-08-02T18:11:14Z",
        "date_published": "2022-08-02T18:12:24Z",
        "description": "## What's Changed\r\n* Add fecundity modules by @wheelern in https://github.com/zamanianlab/wrmXpress/pull/14\r\n\r\n![20220625-p01-KTR_1522_binary](https://user-images.githubusercontent.com/16230555/182444616-1f8e7583-876a-497c-b26f-d0efbc5b0cae.png)\r\n\r\n**Full Changelog**: https://github.com/zamanianlab/wrmXpress/compare/v1.1.0...v1.2.0",
        "html_url": "https://github.com/zamanianlab/wrmXpress/releases/tag/v1.2.0",
        "name": "v1.2.0",
        "release_id": 73468383,
        "tag": "v1.2.0",
        "tarball_url": "https://api.github.com/repos/zamanianlab/wrmXpress/tarball/v1.2.0",
        "type": "Release",
        "url": "https://api.github.com/repos/zamanianlab/wrmXpress/releases/73468383",
        "value": "https://api.github.com/repos/zamanianlab/wrmXpress/releases/73468383",
        "zipball_url": "https://api.github.com/repos/zamanianlab/wrmXpress/zipball/v1.2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "wheelern",
          "type": "User"
        },
        "date_created": "2022-07-29T15:29:11Z",
        "date_published": "2022-07-29T15:41:58Z",
        "description": "## Highlights\r\n\r\nv1.1.0 includes new functionality for videos that include more than one well per each image (for instance, when imaging an entire multi-well plate without magnification). Accordingly, there have been a few changes to the YAML file that parameterizes each job. A new template YAML has been included.\r\n\r\nFor multi-well imaging, it is necessary to pre-process the video by cropping it so that only the plate is included. Two modes for well detection are included, one that automatically detects them (only supported for unmagnified 24-well plates) and one that splits the video into a grid based on user-provided row/column parameters. Both modes work well with sample videos of *B. malayi*: \r\n\r\n|**_24-well plate_** | **_96-well plate_** |\r\n|:---: |:---: |\r\n| `auto` | `grid` |         \r\n| <img src=\"https://user-images.githubusercontent.com/16230555/181793812-2d279b6e-fb76-4249-8a00-b507c3d9d2f5.png\" width=\"300\"/>| <img src=\"https://user-images.githubusercontent.com/16230555/181794185-48aa98ee-3a44-4302-9426-fa928d865f66.png\" width=\"300\" />|\r\n|<img src=\"https://user-images.githubusercontent.com/16230555/181794986-f721a52d-a66a-4307-9e89-48c2af0e8a1d.png\" width=\"300\" /> | <img src=\"https://user-images.githubusercontent.com/16230555/181795095-2c9f5755-bf4f-42f4-9149-3671a33f2b05.png\" width=\"300\" />|\r\n\r\n\r\n## What Else Has Changed\r\n* Thumbnail generation isn't very performant by @wheelern in https://github.com/zamanianlab/wrmXpress/pull/10\r\n* Add support for motility measurement from AVIs, including automatic or grid-based well detection by @wheelern in https://github.com/zamanianlab/wrmXpress/pull/12\r\n\r\n\r\n**Full Changelog**: https://github.com/zamanianlab/wrmXpress/compare/v1.0.0...v1.1.0",
        "html_url": "https://github.com/zamanianlab/wrmXpress/releases/tag/v1.1.0",
        "name": "v1.1.0",
        "release_id": 73181869,
        "tag": "v1.1.0",
        "tarball_url": "https://api.github.com/repos/zamanianlab/wrmXpress/tarball/v1.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/zamanianlab/wrmXpress/releases/73181869",
        "value": "https://api.github.com/repos/zamanianlab/wrmXpress/releases/73181869",
        "zipball_url": "https://api.github.com/repos/zamanianlab/wrmXpress/zipball/v1.1.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "wheelern",
          "type": "User"
        },
        "date_created": "2022-05-17T19:37:43Z",
        "date_published": "2022-05-18T15:11:20Z",
        "description": "First major release ",
        "html_url": "https://github.com/zamanianlab/wrmXpress/releases/tag/v1.0.0",
        "name": "v1.0.0",
        "release_id": 67190226,
        "tag": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/zamanianlab/wrmXpress/tarball/v1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/zamanianlab/wrmXpress/releases/67190226",
        "value": "https://api.github.com/repos/zamanianlab/wrmXpress/releases/67190226",
        "zipball_url": "https://api.github.com/repos/zamanianlab/wrmXpress/zipball/v1.0.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "wheelern",
          "type": "User"
        },
        "date_created": "2022-01-27T18:08:08Z",
        "date_published": "2022-01-27T18:14:08Z",
        "description": "Hotfix of a bug induced by the previous commit to `metadata_join_master.R` which broke compatability with non-CP pipelines. This fix temporarily removes the worm classification feature until a safe implementation is developed.",
        "html_url": "https://github.com/zamanianlab/wrmXpress/releases/tag/v0.3.1",
        "name": "v0.3.1",
        "release_id": 58126760,
        "tag": "v0.3.1",
        "tarball_url": "https://api.github.com/repos/zamanianlab/wrmXpress/tarball/v0.3.1",
        "type": "Release",
        "url": "https://api.github.com/repos/zamanianlab/wrmXpress/releases/58126760",
        "value": "https://api.github.com/repos/zamanianlab/wrmXpress/releases/58126760",
        "zipball_url": "https://api.github.com/repos/zamanianlab/wrmXpress/zipball/v0.3.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "wheelern",
          "type": "User"
        },
        "date_created": "2022-01-26T20:07:34Z",
        "date_published": "2022-01-26T20:10:22Z",
        "description": "## What's Changed\r\n* Feature: classify straightened worms by @wheelern in https://github.com/zamanianlab/wrmXpress/pull/3\r\n* Requires chtc-wrmxpress:v3 Docker image\r\n* Updated the conda_env.yml\r\n* Raises errors when wells provided in the `parameters.yml` do not exist in the input data\r\n\r\n**Full Changelog**: https://github.com/zamanianlab/wrmXpress/compare/v0.2.0...v0.3.0",
        "html_url": "https://github.com/zamanianlab/wrmXpress/releases/tag/v0.3.0",
        "name": "0.3.0",
        "release_id": 58041667,
        "tag": "v0.3.0",
        "tarball_url": "https://api.github.com/repos/zamanianlab/wrmXpress/tarball/v0.3.0",
        "type": "Release",
        "url": "https://api.github.com/repos/zamanianlab/wrmXpress/releases/58041667",
        "value": "https://api.github.com/repos/zamanianlab/wrmXpress/releases/58041667",
        "zipball_url": "https://api.github.com/repos/zamanianlab/wrmXpress/zipball/v0.3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "wheelern",
          "type": "User"
        },
        "date_created": "2022-01-19T21:29:44Z",
        "date_published": "2022-01-19T21:30:51Z",
        "description": "## What's Changed\r\n* Add species functionality  by @wheelern in https://github.com/zamanianlab/wrmXpress/pull/1\r\n\r\n**Full Changelog**: https://github.com/zamanianlab/wrmXpress/compare/v0.1.1...v0.2.0",
        "html_url": "https://github.com/zamanianlab/wrmXpress/releases/tag/v0.2.0",
        "name": "0.2.0",
        "release_id": 57507600,
        "tag": "v0.2.0",
        "tarball_url": "https://api.github.com/repos/zamanianlab/wrmXpress/tarball/v0.2.0",
        "type": "Release",
        "url": "https://api.github.com/repos/zamanianlab/wrmXpress/releases/57507600",
        "value": "https://api.github.com/repos/zamanianlab/wrmXpress/releases/57507600",
        "zipball_url": "https://api.github.com/repos/zamanianlab/wrmXpress/zipball/v0.2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "wheelern",
          "type": "User"
        },
        "date_created": "2021-11-29T20:26:49Z",
        "date_published": "2021-11-29T20:32:30Z",
        "description": "First minor release; production-ready for the Zamanian lab only.",
        "html_url": "https://github.com/zamanianlab/wrmXpress/releases/tag/v0.1.1",
        "name": "0.1.0",
        "release_id": 54271615,
        "tag": "v0.1.1",
        "tarball_url": "https://api.github.com/repos/zamanianlab/wrmXpress/tarball/v0.1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/zamanianlab/wrmXpress/releases/54271615",
        "value": "https://api.github.com/repos/zamanianlab/wrmXpress/releases/54271615",
        "zipball_url": "https://api.github.com/repos/zamanianlab/wrmXpress/zipball/v0.1.1"
      },
      "technique": "GitHub_API"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running wrmXpress using a conda environment (local)",
        "parent_header": [
          "Installation and usage"
        ],
        "type": "Text_excerpt",
        "value": "1. Use the conda environment file provided at `local_env/conda_env.yml` as a guide for creating a custom environment. **Note**: We have used multiple different conda environments depending on machine architecture. The one provided here should be used as a guide and shows the minimum version numbers.\n2. Activate the conda environment.\n3. Create a directory where all the wrmXpress operations will take place.\n4. In a terminal, set this directory as your home directory: `export HOME=$PWD`. **Note**: Your `$HOME` environmental variable will reset as soon as this terminal is closed, and it will not extrapolate to other terminal tabs/windows.\n5. In this new home directory, make `input`, `output`, `metadata`, and `work` directories.\n6. Clone the wrmXpress repository from GitHub in the same folder.\n7. Transfer the imaging data to `input`. If using a directory of images from wells of a multi-well plate, ensure the image directories are structured in the same was as the example datasets at this Zenodo repository: [![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.7116648.svg)](https://doi.org/10.5281/zenodo.7116648).\n8. Transfer the metadata to `metadata`. A given experiment can have any amount of metadata CSVs, and each CSV should contain a single piece of metadata (i.e., strain.csv, species.csv, treatment.csv, conc.csv, etc.). CSVs should be structured to have the same shape as the multi-well plate (that is, A01 should be the top-left cell).\n9. Use and edit the provided YAML file `local_env/parameters_template.yml`) to configure the run. The file should have the same name as the plate directory in `input`.\n10. Run the following command from the new home directory: `python wrmXpress/wrapper.py {plate}.yml {plate}` where `{plate}` is the name of the directory that contains the data in `input`.\n"
      },
      "source": "https://raw.githubusercontent.com/zamanianlab/wrmXpress/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Running wrmXpress in a Docker container (local or remote)",
        "parent_header": [
          "Installation and usage"
        ],
        "type": "Text_excerpt",
        "value": "1. If running locally, use the Docker desktop app to access the [pre-compiled docker image](https://hub.docker.com/repository/docker/zamanianlab/chtc-wrmxpress). If running on a remote server, consult with the server administrator for using Docker images.\n2. In a Docker image, we recommend scripting the process described above. The [Zamanian Lab's Condor-based Bash script](https://github.com/zamanianlab/chtc-submit/blob/main/imgproc/wrmXpress.sh) can be consulted. The script should include the following:\n   1. Make `input`, `metadata`, `work`, and `output`, directories in the home directory of the image.\n   2. Transfer imaging data (usually stored on a different remote server) to `input/` (see the above notes about structuring the input directory).\n   3. Transfer metadata to `metadata` (see the above notes about structuring the metadata CSVs).\n   4. Transfer the YAML file to the home directory of the image.\n   5. Run the program.\n\nIf using a CellProfiler pipeline that implements Cellpose for *C. elegans* segementation, training of a custom model may be required. Follow the instructions [here](cellpose_training/README.md) to train a model on custom images.\n\nFor testing, example data for each module/pipline is provided here: [![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.7116648.svg)](https://doi.org/10.5281/zenodo.7116648).\n"
      },
      "source": "https://raw.githubusercontent.com/zamanianlab/wrmXpress/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 11:46:32",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation and usage",
        "type": "Text_excerpt",
        "value": "The Zamanian Lab run all analyses on a node at the [Center for High-Throughput Computing at UW-Madison](https://chtc.cs.wisc.edu). A Docker recipe containing all the dependendenies can be found in our [Docker GitHub repo](https://github.com/zamanianlab/Docker/tree/main/chtc-wrmxpress), and a pre-compiled image can be found at [DockerHub](https://hub.docker.com/repository/docker/zamanianlab/chtc-wrmxpress). A Conda environment file has also been provided at `local_env/conda_env.yml`, though this may need modification based on the user's processor (e.g., Apple vs Intel).\n"
      },
      "source": "https://raw.githubusercontent.com/zamanianlab/wrmXpress/main/README.md",
      "technique": "header_analysis"
    }
  ]
}