{
  "application_domain": [
    {
      "confidence": 14.79,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "**Citing Scrooge**",
        "parent_header": [
          "**Scrooge:** A fast and memory-frugal genomic sequence aligner for CPUs, GPUs and ASICs"
        ],
        "type": "Text_excerpt",
        "value": "\r\nIf you use Scrooge in your work, please cite:\r\n\r\n> Jo\u00ebl Lindegger, Damla Senol Cali, Mohammed Alser, Juan G\u00f3mez-Luna, Nika Mansouri Ghiasi, and Onur Mutlu.\r\n> [\"Scrooge: A Fast and Memory-Frugal Genomic Sequence Aligner for CPUs, GPUs and ASICs.\"](https://doi.org/10.1093/bioinformatics/btad151)\r\n> Bioinformatics (2023).\r\n\r\n> Jo\u00ebl Lindegger, Damla Senol Cali, Mohammed Alser, Juan G\u00f3mez-Luna, and Onur Mutlu. \r\n> [\"Algorithmic Improvement and GPU Acceleration of the GenASM Algorithm.\"](https://arxiv.org/abs/2203.15561) \r\n> HiCOMB (2022).\r\n\r\nBelow are the citations in bibtex format.\r\n\r\n```bibtex\r\n@article{lindegger2023scrooge,\r\n  title={{Scrooge: A Fast and Memory-Frugal Genomic Sequence Aligner for CPUs, GPUs, and ASICs}},\r\n  author={Lindegger, Jo{\\\"e}l and Senol Cali, Damla and Alser, Mohammed and G{\\'o}mez-Luna, Juan and Mansouri Ghiasi, Nika and Mutlu, Onur},\r\n  journal={Bioinformatics},\r\n  year={2023}\r\n}\r\n@article{lindegger2022algorithmic,\r\n  title={{Algorithmic Improvement and GPU Acceleration of the GenASM Algorithm}},\r\n  author={Lindegger, Jo{\\\"e}l and Senol Cali, Damla and Alser, Mohammed and G{\\'o}mez-Luna, Juan and Mutlu, Onur},\r\n  journal={HiCOMB},\r\n  year={2022}\r\n}\r\n```\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/CMU-SAFARI/Scrooge/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Lindegger, Jo{\\\"e}l and Senol Cali, Damla and Alser, Mohammed and G{\\'o}mez-Luna, Juan and Mansouri Ghiasi, Nika and Mutlu, Onur",
        "format": "bibtex",
        "title": "{Scrooge: A Fast and Memory-Frugal Genomic Sequence Aligner for CPUs, GPUs, and ASICs}",
        "type": "Text_excerpt",
        "value": "@article{lindegger2023scrooge,\n    year = {2023},\n    journal = {Bioinformatics},\n    author = {Lindegger, Jo{\\\"e}l and Senol Cali, Damla and Alser, Mohammed and G{\\'o}mez-Luna, Juan and Mansouri Ghiasi, Nika and Mutlu, Onur},\n    title = {{Scrooge: A Fast and Memory-Frugal Genomic Sequence Aligner for CPUs, GPUs, and ASICs}},\n}"
      },
      "source": "https://raw.githubusercontent.com/CMU-SAFARI/Scrooge/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Lindegger, Jo{\\\"e}l and Senol Cali, Damla and Alser, Mohammed and G{\\'o}mez-Luna, Juan and Mutlu, Onur",
        "format": "bibtex",
        "title": "{Algorithmic Improvement and GPU Acceleration of the GenASM Algorithm}",
        "type": "Text_excerpt",
        "value": "@article{lindegger2022algorithmic,\n    year = {2022},\n    journal = {HiCOMB},\n    author = {Lindegger, Jo{\\\"e}l and Senol Cali, Damla and Alser, Mohammed and G{\\'o}mez-Luna, Juan and Mutlu, Onur},\n    title = {{Algorithmic Improvement and GPU Acceleration of the GenASM Algorithm}},\n}"
      },
      "source": "https://raw.githubusercontent.com/CMU-SAFARI/Scrooge/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/CMU-SAFARI/Scrooge"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-05-29T12:43:05Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-07-11T05:37:22Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Scrooge is a high-performance pairwise sequence aligner based on the GenASM algorithm. Scrooge includes three novel algorithmic improvements on top of GenASM, and high-performance CPU and GPU implementations. Described by Lindegger et al. at https://doi.org/10.48550/arXiv.2208.09985"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9982622891275672,
      "result": {
        "original_header": "**Scrooge:** A fast and memory-frugal genomic sequence aligner for CPUs, GPUs and ASICs",
        "type": "Text_excerpt",
        "value": "\r\n_Scrooge_ is a fast pairwise genomic sequence aligner. It efficiently aligns short and long genomic sequence pairs on multiple computing platforms. It is based on the GenASM algorithm ([Senol Cali+, 2020](https://arxiv.org/abs/2009.07692)), and adds multiple algorithmic improvements that significantly improve the throughput and resource efficiency for CPUs, GPUs and ASICs. For long reads, the CPU version of Scrooge achieves a 20.1x, 1.7x, and 2.1x speedup over KSW2, Edlib, and a CPU implementation of GenASM, respectively. The GPU version of Scrooge achieves a 4.0x 80.4x, 6.8x, 12.6x and 5.9x speedup over the CPU version of Scrooge, KSW2, Edlib, Darwin-GPU, and a GPU implementation of GenASM, respectively. We estimate an ASIC implementation of Scrooge to use 3.6x less chip area and 2.1x less power than a GenASM ASIC while maintaining the same throughput.\r\n\r\nThis repository contains Scrooge's CPU and GPU implementations, and several evaluation scripts. We describe Scrooge in our paper [on arXiv](https://doi.org/10.48550/arXiv.2208.09985) and [in Bioinformatics](https://doi.org/10.1093/bioinformatics/btad151).\r\n\r \n"
      },
      "source": "https://raw.githubusercontent.com/CMU-SAFARI/Scrooge/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9812007335234354,
      "result": {
        "original_header": "**Using Scrooge as a Library**",
        "type": "Text_excerpt",
        "value": "\r\nScrooge can be used for pairwise sequence alignment in a variety of use-cases by calling it as a library. `library_example.cu` gives an example for each supported library interface, it can be compiled and run with `make library_example_linux`. All components of Scrooge run on Linux. The CUDA and C++ components are supported on Windows and have their own make rules (e.g., `make library_example_windows`).\r\n\r\n```bash\r\ngit clone https://github.com/CMU-SAFARI/Scrooge && cd Scrooge\r\nmake library_example_linux\r\n./library_example\r\n```\r\n\r\nThere are two types of interfaces supported, *unstructured pairwise alignment* and *pairwise alignment for read mapping*, each on both CPUs and GPUs. Both calculate the semiglobal edit distance and corresponding alignment between pairs of strings, where the entire query/read sequence must be consumed, but only a prefix of the target/reference sequence.\r\n\r \n"
      },
      "source": "https://raw.githubusercontent.com/CMU-SAFARI/Scrooge/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9958424648244657,
      "result": {
        "original_header": "**Unstructured Pairwise Alignment**",
        "type": "Text_excerpt",
        "value": "\r\nThis is the more general of the two supported interfaces. It simply accepts a list of pairs of strings, and calculates the edit distance and CIGAR string between each pair.\r\n\r \n"
      },
      "source": "https://raw.githubusercontent.com/CMU-SAFARI/Scrooge/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9982531434127963,
      "result": {
        "original_header": "**Pairwise Alignment for Read Mapping**",
        "type": "Text_excerpt",
        "value": "\r\nThis is the more specialized, but potentially more efficient of the two supported interfaces. It accepts a reference genome of one or multiple chromosomes, a list of reads, and a list of candidate locations for each read. It then performs pairwise alignment between each read and the reference at each of the reads' candidate locations.\r\n\r\nThe key advantage of this interface is that it does not create any redundant copies of the sequence pairs in memory: Each read is stored once, and a single copy of the reference genome is stored. This can improve the memory footprint, required memory bandwidth, and cache hitrate. In contrast, when read mapping with the more general unstructured interface, each candidate location has a separate copy of the read and reference segment in memory.\r\n\r \n"
      },
      "source": "https://raw.githubusercontent.com/CMU-SAFARI/Scrooge/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9737715274524076,
      "result": {
        "original_header": "**Performance and Accuracy Evaluation**",
        "type": "Text_excerpt",
        "value": "\r\nWe provide the `tests` command line utility to evaluate Scrooge's throughput and accuracy in a read mapping use-case, it can be compiled as follows:\r\n\r\n```bash\r\ngit clone https://github.com/CMU-SAFARI/Scrooge && cd Scrooge\r\nmake tests_linux\r\n./tests --unit_tests\r\n```\r\n\r\nThe `tests` utility accepts any short or long read dataset as a tuple of &lt;FASTA, FASTQ, MAF/PAF&gt; files, i.e., a reference genome, a read set, and a candidate location list. This simulates the case that seeding and chaining were already executed, and the remaining pairs must be evaluated using pairwise sequence alignment. The only requirement on the dataset is that the fasta and fastq files must contain only upper- and lowercase \"ACGT\" characters, but no \"N\" (nondetermined) bases. For example, it can be invoked on one of our prepared datasets:\r\n\r\nBASH2*\r\nThis runs a GPU performance test by default, and produces an output in the following form:\r\nBASH3*\r\nAlternatively, the `tests` utility can also run a CPU performance test, producing a similar output:\r\nBASH4*\r\n\r\nWe provide the `cpu_baseline` utility to evaluate the performance of CPU baselines, and compare Scrooge's accuracy to the accuracy of baseline tools.\r\n\r\nBASH5*\r\n\r \n"
      },
      "source": "https://raw.githubusercontent.com/CMU-SAFARI/Scrooge/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9284304172727976,
      "result": {
        "original_header": "**Automated Profiling**",
        "type": "Text_excerpt",
        "value": "\r\nAlternatively, the `profile` script automatically compiles and runs `tests` across multiple passes and algorithm configurations for a dataset. It assumes each dataset is in a separate subdirectory of `datasets` and contains a reference, read and candidate location file. The `download_datasets` script produces this file structure. For example, it can be run as follows:\r\n```bash\r\npython3 scripts/download_datasets.py\r\npython3 scripts/profile.py cpu pbsim_groundtruth\r\n```\r\n\r\nThe `profile` script then produces CSV files with different columns, depending on the profiling target. For example, `python3 scripts/profile.py cpu [...]` produces the following:\r\nBASH2*\r\n\r\nFor all options, see \r\nBASH3*\r \n"
      },
      "source": "https://raw.githubusercontent.com/CMU-SAFARI/Scrooge/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9735700394858858,
      "result": {
        "original_header": "**Obtaining Datasets**",
        "type": "Text_excerpt",
        "value": "\r\nAll our prepared datasets can also be downloaded from [Zenodo](https://zenodo.org/record/7013734/files/scrooge_datasets.tar.gz). \r\n\r\nThe `download_datasets` script automatically downloads and untars our prepared datasets:\r\n```bash\r\npython3 scripts/download_datasets.py\r\n```\r\nThe gzipped datasets are 13.9GiB in total, and 63GiB when unzipped.\r\n\r\nIn [DATASETS.md](DATASETS.md) we describe in detail how we prepared our datasets, and how other real and simulated datasets can be prepared.\r\n\r\n For reproducibility, we also provide the outputs we obtained from `profile.py` on [Zenodo](https://zenodo.org/record/6736836/files/scrooge_profile_results.tar.gz). The `download_profile` script automatically downloads and extracts the files:\r\n BASH2*\r\n The gzipped `profile` directory is 3.1GiB in total, and 17GiB when unzipped.\r\n\r \n"
      },
      "source": "https://raw.githubusercontent.com/CMU-SAFARI/Scrooge/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8327771859154943,
      "result": {
        "original_header": "**Plotting**",
        "type": "Text_excerpt",
        "value": "\r\nThe `plot` script produces several figures that analyze Scrooge's throughput and accuracy. It assumes all files in our profile results are available, i.e. should be used in conjunction with `download_profile`.\r\n\r\n```bash\r\npython3 scripts/download_profile.py\r\npython3 scripts/plot.py\r\n```\r\n\r \n"
      },
      "source": "https://raw.githubusercontent.com/CMU-SAFARI/Scrooge/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8883635134571891,
      "result": {
        "original_header": "**CIGAR inspector**",
        "type": "Text_excerpt",
        "value": "\r\nWe provide a specialized plotting script called `cigar_inspector` to visualize the CIGAR strings different algorithms produce for each sequence pair. This is particularly helpful to understand under what circumstances GenASM produces different results than e.g. KSW2 and Edlib.\r\n\r\nThis should we run on a csv file generated by the `profile` script that includes the CIGAR strings:\r\n```bash\r\npython3 scripts/profile.py accuracy_cpu --cigar [dataset]\r\npython3 scripts/cigar_inspector.py profile/[...]_all_accuracy_cigar.csv 10\r\n```\r\nThe above command starts the CIGAR inspector with the sequence pair for which Scrooge/GenASM generated the 10th-worst alignment score. You can zoom into regions of interest using the matplotlib GUI functions. At higher zoomlevels, the axes ticks are labeled with the sequence contents.\r\n\r \n"
      },
      "source": "https://raw.githubusercontent.com/CMU-SAFARI/Scrooge/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.990514596242212,
      "result": {
        "original_header": "**Limitations**",
        "type": "Text_excerpt",
        "value": "\r\nLike GenASM, Scrooge may calculate an edit distance and alignment that is very close to the actual edit distance, but sometimes overestimates the actual edit distance, and finds a sub-optimal alignment. We evaluate GenASM/Scrooge's accuracy behavior in detail in our paper.\r\n\r \n"
      },
      "source": "https://raw.githubusercontent.com/CMU-SAFARI/Scrooge/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/CMU-SAFARI/Scrooge/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/CMU-SAFARI/Scrooge/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CMU-SAFARI/Scrooge"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Scrooge: A fast and memory-frugal genomic sequence aligner for CPUs, GPUs and ASICs"
      },
      "source": "https://raw.githubusercontent.com/CMU-SAFARI/Scrooge/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/CMU-SAFARI/Scrooge/main/scripts/start_pbsim2_docker.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/CMU-SAFARI/Scrooge/main/baseline_algorithms/darwin-gpu/run.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/CMU-SAFARI/Scrooge/main/baseline_algorithms/darwin-gpu/profile.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/CMU-SAFARI/Scrooge/main/baseline_algorithms/darwin-gpu/convert.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/CMU-SAFARI/Scrooge/main/baseline_algorithms/darwin-gpu/x_scalingrun.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/CMU-SAFARI/Scrooge/main/baseline_algorithms/darwin-gpu/w_run.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/CMU-SAFARI/Scrooge/main/baseline_algorithms/darwin-gpu/y_measure_mem_usage.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/CMU-SAFARI/Scrooge/main/baseline_algorithms/darwin-gpu/generate.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/CMU-SAFARI/Scrooge/main/baseline_algorithms/darwin-gpu/gdb.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/CMU-SAFARI/Scrooge/main/baseline_algorithms/darwin-gpu/z_compile.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/CMU-SAFARI/Scrooge/main/baseline_algorithms/wfa/tools/examples/compile.examples.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 0.998073990640694,
      "result": {
        "original_header": "**Repository Structure**",
        "type": "Text_excerpt",
        "value": "\r\n```\r\n.\r\n\u2514\u2500\u2500 1. baseline_algorithms\r\n\u2514\u2500\u2500 2. scripts\r\n\u2514\u2500\u2500 3. src\r\n\u2514\u2500\u2500 4. profile #after running scripts/profile.py or scripts/download_profile.py\r\n\u2514\u2500\u2500 5. cacti #after running scripts/asic_numbers.py --cacti\r\n\u2514\u2500\u2500 6. datasets #after running scripts/download_datasets.py\r\n```\r\n\r\n1. the `baseline_algorithms` directory contains the source code of various CPU and GPU baseline tools to compare against\r\n2. the `scripts` directory contains various python and bash tools to automate experiments, plotting, and data download/generation\r\n3. The `src` directory contains the CPU and GPU code for Scrooge's alignment, testing and example components\r\n4. The `profile` directory contains the `.csv` results of parameter sweeps done by `scripts/profile.py`. Alternatively, our profiling results can be downloaded from Zenodo with `scripts/download_profile.py`\r\n5. The `cacti` directory contains a clone of the CACTI git repository after running `scripts/asic_numbers.py --cacti`\r\n6. The datasets directory contains several example datasets after running `scripts/download_datasets.py`\r\n\r \n"
      },
      "source": "https://raw.githubusercontent.com/CMU-SAFARI/Scrooge/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8151527566698091,
      "result": {
        "original_header": "**Performance and Accuracy Evaluation**",
        "type": "Text_excerpt",
        "value": "\r\nWe provide the `tests` command line utility to evaluate Scrooge's throughput and accuracy in a read mapping use-case, it can be compiled as follows:\r\n\r\n```bash\r\ngit clone https://github.com/CMU-SAFARI/Scrooge && cd Scrooge\r\nmake tests_linux\r\n./tests --unit_tests\r\n```\r\n\r\nThe `tests` utility accepts any short or long read dataset as a tuple of &lt;FASTA, FASTQ, MAF/PAF&gt; files, i.e., a reference genome, a read set, and a candidate location list. This simulates the case that seeding and chaining were already executed, and the remaining pairs must be evaluated using pairwise sequence alignment. The only requirement on the dataset is that the fasta and fastq files must contain only upper- and lowercase \"ACGT\" characters, but no \"N\" (nondetermined) bases. For example, it can be invoked on one of our prepared datasets:\r\n\r\nBASH2*\r\nThis runs a GPU performance test by default, and produces an output in the following form:\r\nBASH3*\r\nAlternatively, the `tests` utility can also run a CPU performance test, producing a similar output:\r\nBASH4*\r\n\r\nWe provide the `cpu_baseline` utility to evaluate the performance of CPU baselines, and compare Scrooge's accuracy to the accuracy of baseline tools.\r\n\r\nBASH5*\r\n\r \n"
      },
      "source": "https://raw.githubusercontent.com/CMU-SAFARI/Scrooge/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999999949690164,
      "result": {
        "original_header": "**Advanced Compilation**",
        "type": "Text_excerpt",
        "value": "\r\nWhen running Scrooge on a GPU, the correct CUDA GPU architecture should be supplied to nvcc. The makefile we provide checks the architecture set in the `NVCC_ARCH` environment variable, e.g.:\r\n```\r\nexport NVCC_ARCH=sm_86\r\nmake tests_linux\r\n```\r\nIf `NVCC_ARCH` is not set, the makefile will default to sm_86. If `nvcc` is not in the `PATH`, the nvcc binary can be specified using the `NVCC` environment variable.\r\n\r \n"
      },
      "source": "https://raw.githubusercontent.com/CMU-SAFARI/Scrooge/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9952756682153252,
      "result": {
        "original_header": "**Automated Profiling**",
        "type": "Text_excerpt",
        "value": "\r\nAlternatively, the `profile` script automatically compiles and runs `tests` across multiple passes and algorithm configurations for a dataset. It assumes each dataset is in a separate subdirectory of `datasets` and contains a reference, read and candidate location file. The `download_datasets` script produces this file structure. For example, it can be run as follows:\r\n```bash\r\npython3 scripts/download_datasets.py\r\npython3 scripts/profile.py cpu pbsim_groundtruth\r\n```\r\n\r\nThe `profile` script then produces CSV files with different columns, depending on the profiling target. For example, `python3 scripts/profile.py cpu [...]` produces the following:\r\nBASH2*\r\n\r\nFor all options, see \r\nBASH3*\r \n"
      },
      "source": "https://raw.githubusercontent.com/CMU-SAFARI/Scrooge/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999999998404974,
      "result": {
        "original_header": "**Reproducing Results**",
        "type": "Text_excerpt",
        "value": "\r\nAll results from our paper can be reproduced by repeating our exact experiments with the following commandlines. Note that (1) some of these experiments run 10s of hours, and (2) the GPU command lines require an NVIDIA GPU to be available.\r\n\r\n```bash\r\n#download datasets\r\npython3 scripts/download_datasets.py\r\n\r\n#calculate ASIC area and power\r\npython3 ./scripts/asic_numbers.py --cacti\r\n\r\n#accuracy\r\npython3 ./scripts/profile.py accuracy_cpu illumina_chained --override_W 32\r\npython3 ./scripts/profile.py accuracy_cpu pbsim_chained\r\npython3 ./scripts/profile.py accuracy_cpu pbsim_groundtruth\r\npython3 ./scripts/profile.py accuracy_cpu pbsim_groundtruth --cigar\r\n\r\n#CPU performance\r\npython3 ./scripts/profile.py cpu illumina_chained --override_W 32\r\npython3 ./scripts/profile.py cpu pbsim_chained\r\npython3 ./scripts/profile.py cpu_baselines illumina_chained\r\npython3 ./scripts/profile.py cpu_baselines pbsim_chained\r\n\r\n#GPU performance\r\npython3 ./scripts/profile.py gpu illumina_chained --arch sm_86 --override_W 32\r\npython3 ./scripts/profile.py gpu pbsim_chained --arch sm_86\r\npython3 ./scripts/profile.py gpu_baselines illumina_chained --tmp_dir tmp --arch sm_86\r\npython3 ./scripts/profile.py gpu_baselines pbsim_chained --tmp_dir tmp --arch sm_86\r\n\r\n#plot\r\npython3 ./scripts/plot.py\r\n```\r\n \n"
      },
      "source": "https://raw.githubusercontent.com/CMU-SAFARI/Scrooge/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8843460105032502,
      "result": {
        "original_header": "**Repository Structure**",
        "type": "Text_excerpt",
        "value": "\r\n```\r\n.\r\n\u2514\u2500\u2500 1. baseline_algorithms\r\n\u2514\u2500\u2500 2. scripts\r\n\u2514\u2500\u2500 3. src\r\n\u2514\u2500\u2500 4. profile #after running scripts/profile.py or scripts/download_profile.py\r\n\u2514\u2500\u2500 5. cacti #after running scripts/asic_numbers.py --cacti\r\n\u2514\u2500\u2500 6. datasets #after running scripts/download_datasets.py\r\n```\r\n\r\n1. the `baseline_algorithms` directory contains the source code of various CPU and GPU baseline tools to compare against\r\n2. the `scripts` directory contains various python and bash tools to automate experiments, plotting, and data download/generation\r\n3. The `src` directory contains the CPU and GPU code for Scrooge's alignment, testing and example components\r\n4. The `profile` directory contains the `.csv` results of parameter sweeps done by `scripts/profile.py`. Alternatively, our profiling results can be downloaded from Zenodo with `scripts/download_profile.py`\r\n5. The `cacti` directory contains a clone of the CACTI git repository after running `scripts/asic_numbers.py --cacti`\r\n6. The datasets directory contains several example datasets after running `scripts/download_datasets.py`\r\n\r \n"
      },
      "source": "https://raw.githubusercontent.com/CMU-SAFARI/Scrooge/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.888809455547691,
      "result": {
        "original_header": "**Automated Profiling**",
        "type": "Text_excerpt",
        "value": "\r\nAlternatively, the `profile` script automatically compiles and runs `tests` across multiple passes and algorithm configurations for a dataset. It assumes each dataset is in a separate subdirectory of `datasets` and contains a reference, read and candidate location file. The `download_datasets` script produces this file structure. For example, it can be run as follows:\r\n```bash\r\npython3 scripts/download_datasets.py\r\npython3 scripts/profile.py cpu pbsim_groundtruth\r\n```\r\n\r\nThe `profile` script then produces CSV files with different columns, depending on the profiling target. For example, `python3 scripts/profile.py cpu [...]` produces the following:\r\nBASH2*\r\n\r\nFor all options, see \r\nBASH3*\r \n"
      },
      "source": "https://raw.githubusercontent.com/CMU-SAFARI/Scrooge/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8622537017768779,
      "result": {
        "original_header": "**Plotting**",
        "type": "Text_excerpt",
        "value": "\r\nThe `plot` script produces several figures that analyze Scrooge's throughput and accuracy. It assumes all files in our profile results are available, i.e. should be used in conjunction with `download_profile`.\r\n\r\n```bash\r\npython3 scripts/download_profile.py\r\npython3 scripts/plot.py\r\n```\r\n\r \n"
      },
      "source": "https://raw.githubusercontent.com/CMU-SAFARI/Scrooge/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9044841309723076,
      "result": {
        "original_header": "**Reproducing Results**",
        "type": "Text_excerpt",
        "value": "\r\nAll results from our paper can be reproduced by repeating our exact experiments with the following commandlines. Note that (1) some of these experiments run 10s of hours, and (2) the GPU command lines require an NVIDIA GPU to be available.\r\n\r\n```bash\r\n#download datasets\r\npython3 scripts/download_datasets.py\r\n\r\n#calculate ASIC area and power\r\npython3 ./scripts/asic_numbers.py --cacti\r\n\r\n#accuracy\r\npython3 ./scripts/profile.py accuracy_cpu illumina_chained --override_W 32\r\npython3 ./scripts/profile.py accuracy_cpu pbsim_chained\r\npython3 ./scripts/profile.py accuracy_cpu pbsim_groundtruth\r\npython3 ./scripts/profile.py accuracy_cpu pbsim_groundtruth --cigar\r\n\r\n#CPU performance\r\npython3 ./scripts/profile.py cpu illumina_chained --override_W 32\r\npython3 ./scripts/profile.py cpu pbsim_chained\r\npython3 ./scripts/profile.py cpu_baselines illumina_chained\r\npython3 ./scripts/profile.py cpu_baselines pbsim_chained\r\n\r\n#GPU performance\r\npython3 ./scripts/profile.py gpu illumina_chained --arch sm_86 --override_W 32\r\npython3 ./scripts/profile.py gpu pbsim_chained --arch sm_86\r\npython3 ./scripts/profile.py gpu_baselines illumina_chained --tmp_dir tmp --arch sm_86\r\npython3 ./scripts/profile.py gpu_baselines pbsim_chained --tmp_dir tmp --arch sm_86\r\n\r\n#plot\r\npython3 ./scripts/plot.py\r\n```\r\n \n"
      },
      "source": "https://raw.githubusercontent.com/CMU-SAFARI/Scrooge/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/CMU-SAFARI/Scrooge/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2022 SAFARI Research Group at ETH Zurich and Carnegie Mellon University\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/CMU-SAFARI/Scrooge/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Scrooge"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "CMU-SAFARI"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 409128,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 396703,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 222097,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Cuda",
        "size": 181972,
        "type": "Programming_language",
        "value": "Cuda"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 13572,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 7699,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 275,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Batchfile",
        "size": 140,
        "type": "Programming_language",
        "value": "Batchfile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/CMU-SAFARI/Scrooge/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_papers": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/2009.07692"
      },
      "source": "https://raw.githubusercontent.com/CMU-SAFARI/Scrooge/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/2203.15561"
      },
      "source": "https://raw.githubusercontent.com/CMU-SAFARI/Scrooge/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "**Requirements**",
        "parent_header": [
          "**Scrooge:** A fast and memory-frugal genomic sequence aligner for CPUs, GPUs and ASICs"
        ],
        "type": "Text_excerpt",
        "value": "\r\n- **Python 3:** At least version 3.6, tested with 3.9 and 3.10\r\n    - packages: matplotlib, pandas\r\n- **g++:** At least support for C++17 and OpenMP, tested with g++ 9.4\r\n- **CUDA:** To run GPU tools, tested with CUDA 10 and CUDA 11\r\n- **Docker:** To run the PBSIM2 docker we provide, if desired\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/CMU-SAFARI/Scrooge/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 09:48:47",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 37
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "**Getting Help**",
        "parent_header": [
          "**Scrooge:** A fast and memory-frugal genomic sequence aligner for CPUs, GPUs and ASICs"
        ],
        "type": "Text_excerpt",
        "value": "\r\nIf you have any suggestion for improvement, please contact jmlindegger at gmail dot com. If you encounter bugs or have further questions or requests, you can raise an issue at the [issue page](https://github.com/CMU-SAFARI/Scrooge/issues).\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/CMU-SAFARI/Scrooge/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "**Getting Help**",
        "parent_header": [
          "**Scrooge:** A fast and memory-frugal genomic sequence aligner for CPUs, GPUs and ASICs"
        ],
        "type": "Text_excerpt",
        "value": "\r\nIf you have any suggestion for improvement, please contact jmlindegger at gmail dot com. If you encounter bugs or have further questions or requests, you can raise an issue at the [issue page](https://github.com/CMU-SAFARI/Scrooge/issues).\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/CMU-SAFARI/Scrooge/main/README.md",
      "technique": "header_analysis"
    }
  ]
}