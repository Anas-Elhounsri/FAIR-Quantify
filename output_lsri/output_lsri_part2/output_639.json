{
  "application_domain": [
    {
      "confidence": 53.97,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/jono-m/OrganoID"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-07-28T18:48:38Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-08-29T23:06:17Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9189313039158895,
      "result": {
        "original_header": "REQUIREMENTS",
        "type": "Text_excerpt",
        "value": "The OrganoID distribution comes with an optimized TensorFlow Lite model, <b>OptimizedModel</b>. This\nmodel can be used for most applications. Here is an example of usage (run in <i>Anaconda Prompt</i> from the directory that contains <i>OrganoID.py</i>): \nThis command goes through each image in the <i>/path/to/images</i> folder and produces a labeled grayscale image, where the intensity at each pixel is the organoid \"ID\". These images are saved in the <i>/path/to/outputFolder</i> directory. You can also output other versions of this image with command options, such as <i>--binary</i>, <i>--belief</i>, or <i>--colorize</i> to generate black-and-white masks, detection belief images, or color-labeled images, respectively. To see all options with instructions, run the following command: \nThe dataset for model training and all validation/testing from the OrganoID publication is openly available here:\nhttps://osf.io/xmes4/\n \n"
      },
      "source": "https://raw.githubusercontent.com/jono-m/OrganoID/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/jono-m/OrganoID/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 12
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/jono-m/OrganoID/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "jono-m/OrganoID"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "REQUIREMENTS"
      },
      "source": "https://raw.githubusercontent.com/jono-m/OrganoID/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "INSTALLATION",
        "type": "Text_excerpt",
        "value": "OrganoID was run with the following software configuration:\n\n- Windows 10 64-bit\n- Python 3.9\n\n<h1>INSTALLATION</h1>\n\n<i>Overview: to set up OrganoID source dependencies, create an empty Conda environment (e.g., with miniconda) and\ninstall all packages listed in <b>requirements.txt</b>.\n\nNOTE: OrganoID uses TensorFlow for neural network predictions. TensorFlow will automatically run on your\nGPU if compatible libraries are installed for your graphics card (e.g. NVIDIA CUDA). See tensorflow.org/install for guidance.</i>\n\n1) Install Anaconda (https://www.anaconda.com/products/distribution).\n2) Open <i>Anaconda Prompt</i> and create a new environment:\n   ```\n   >> conda create -n OrganoID python=3.9\n   >> activate OrganoID\n   ```\n3) Download OrganoID and extract it to a directory of your choosing (https://github.com/jono-m/OrganoID/archive/refs/heads/master.zip). You may also clone the repository instead.\n4) In <i>Anaconda Prompt</i>, navigate to the OrganoID root directory (which contains <i>OrganoID.py</i>):\n   ```\n   >> cd path/to/OrganoID/directory\n   ```\n5) If you would like to run TensorFlow on your GPU (which may be faster for batch processing), go to https://www.tensorflow.org/install/pip and follow the relevant instructions for your operating system, if GPU-mode is supported. (e.x. Step 5 for Windows Native). Skip this step otherwise.\n6) Install all OrganoID requirements:\n   ```\n   pip install -r requirements.txt\n   ```\n\n<h1>USAGE</h1>\n\nThe OrganoID distribution comes with an optimized TensorFlow Lite model, <b>OptimizedModel</b>. This\nmodel can be used for most applications. Here is an example of usage (run in <i>Anaconda Prompt</i> from the directory that contains <i>OrganoID.py</i>):\n\n> python OrganoID.py run OptimizedModel /path/to/images /path/to/outputFolder\n\nThis command goes through each image in the <i>/path/to/images</i> folder and produces a labeled grayscale image, where the intensity at each pixel is the organoid \"ID\". These images are saved in the <i>/path/to/outputFolder</i> directory. You can also output other versions of this image with command options, such as <i>--binary</i>, <i>--belief</i>, or <i>--colorize</i> to generate black-and-white masks, detection belief images, or color-labeled images, respectively. To see all options with instructions, run the following command:\n\n> python OrganoID.py run -h\n\nIf you would like to tune model performance for particular applications, the included model\n<b>TrainableModel</b> can be re-trained through this tool. Run the following command to view\ntraining instructions:\n\n> python OrganoID.py train -h\n\nSuch as:\n\n> python OrganoID.py train /path/to/trainingData /path/to/outputFolder NewModelName -M TrainableModel\n\n\n<h1>USER INTERFACE</h1>\n\nOrganoID now includes a user interface. To start the interface, run:\n\n> python OrganoID_UI.py\n\nThe parameters in the interface correspond to those in the command-line tool.\n\n<h1>DATASET</h1>\n\nThe dataset for model training and all validation/testing from the OrganoID publication is openly available here:\nhttps://osf.io/xmes4/\n"
      },
      "source": "https://raw.githubusercontent.com/jono-m/OrganoID/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9351092441796005,
      "result": {
        "original_header": "REQUIREMENTS",
        "type": "Text_excerpt",
        "value": "OrganoID was run with the following software configuration: \n- Windows 10 64-bit\n- Python 3.9 \n<h1>INSTALLATION</h1> \n<i>Overview: to set up OrganoID source dependencies, create an empty Conda environment (e.g., with miniconda) and\ninstall all packages listed in <b>requirements.txt</b>. \nNOTE: OrganoID uses TensorFlow for neural network predictions. TensorFlow will automatically run on your\nGPU if compatible libraries are installed for your graphics card (e.g. NVIDIA CUDA). See tensorflow.org/install for guidance.</i> \n1) Install Anaconda (https://www.anaconda.com/products/distribution).\n2) Open <i>Anaconda Prompt</i> and create a new environment:\n   ```\n   >> conda create -n OrganoID python=3.9\n   >> activate OrganoID\n   ```\n3) Download OrganoID and extract it to a directory of your choosing (https://github.com/jono-m/OrganoID/archive/refs/heads/master.zip). You may also clone the repository instead.\n4) In <i>Anaconda Prompt</i>, navigate to the OrganoID root directory (which contains <i>OrganoID.py</i>):\n   BASH2*\n5) If you would like to run TensorFlow on your GPU (which may be faster for batch processing), go to https://www.tensorflow.org/install/pip and follow the relevant instructions for your operating system, if GPU-mode is supported. (e.x. Step 5 for Windows Native). Skip this step otherwise.\n6) Install all OrganoID requirements:\n   BASH3* \n> python OrganoID.py run OptimizedModel /path/to/images /path/to/outputFolder \n> python OrganoID.py run -h \n> python OrganoID.py train -h \n> python OrganoID.py train /path/to/trainingData /path/to/outputFolder NewModelName -M TrainableModel \n> python OrganoID_UI.py \n"
      },
      "source": "https://raw.githubusercontent.com/jono-m/OrganoID/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.906733913146543,
      "result": {
        "original_header": "REQUIREMENTS",
        "type": "Text_excerpt",
        "value": "> python OrganoID.py run OptimizedModel /path/to/images /path/to/outputFolder \n> python OrganoID.py run -h \n> python OrganoID.py train -h \n> python OrganoID.py train /path/to/trainingData /path/to/outputFolder NewModelName -M TrainableModel \n> python OrganoID_UI.py \n"
      },
      "source": "https://raw.githubusercontent.com/jono-m/OrganoID/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/jono-m/OrganoID/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "OrganoID"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "jono-m"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "PureBasic",
        "size": 347572,
        "type": "Programming_language",
        "value": "PureBasic"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 129500,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Batchfile",
        "size": 3017,
        "type": "Programming_language",
        "value": "Batchfile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jono-m/OrganoID/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "REQUIREMENTS",
        "type": "Text_excerpt",
        "value": "OrganoID was run with the following software configuration:\n\n- Windows 10 64-bit\n- Python 3.9\n\n<h1>INSTALLATION</h1>\n\n<i>Overview: to set up OrganoID source dependencies, create an empty Conda environment (e.g., with miniconda) and\ninstall all packages listed in <b>requirements.txt</b>.\n\nNOTE: OrganoID uses TensorFlow for neural network predictions. TensorFlow will automatically run on your\nGPU if compatible libraries are installed for your graphics card (e.g. NVIDIA CUDA). See tensorflow.org/install for guidance.</i>\n\n1) Install Anaconda (https://www.anaconda.com/products/distribution).\n2) Open <i>Anaconda Prompt</i> and create a new environment:\n   ```\n   >> conda create -n OrganoID python=3.9\n   >> activate OrganoID\n   ```\n3) Download OrganoID and extract it to a directory of your choosing (https://github.com/jono-m/OrganoID/archive/refs/heads/master.zip). You may also clone the repository instead.\n4) In <i>Anaconda Prompt</i>, navigate to the OrganoID root directory (which contains <i>OrganoID.py</i>):\n   ```\n   >> cd path/to/OrganoID/directory\n   ```\n5) If you would like to run TensorFlow on your GPU (which may be faster for batch processing), go to https://www.tensorflow.org/install/pip and follow the relevant instructions for your operating system, if GPU-mode is supported. (e.x. Step 5 for Windows Native). Skip this step otherwise.\n6) Install all OrganoID requirements:\n   ```\n   pip install -r requirements.txt\n   ```\n\n<h1>USAGE</h1>\n\nThe OrganoID distribution comes with an optimized TensorFlow Lite model, <b>OptimizedModel</b>. This\nmodel can be used for most applications. Here is an example of usage (run in <i>Anaconda Prompt</i> from the directory that contains <i>OrganoID.py</i>):\n\n> python OrganoID.py run OptimizedModel /path/to/images /path/to/outputFolder\n\nThis command goes through each image in the <i>/path/to/images</i> folder and produces a labeled grayscale image, where the intensity at each pixel is the organoid \"ID\". These images are saved in the <i>/path/to/outputFolder</i> directory. You can also output other versions of this image with command options, such as <i>--binary</i>, <i>--belief</i>, or <i>--colorize</i> to generate black-and-white masks, detection belief images, or color-labeled images, respectively. To see all options with instructions, run the following command:\n\n> python OrganoID.py run -h\n\nIf you would like to tune model performance for particular applications, the included model\n<b>TrainableModel</b> can be re-trained through this tool. Run the following command to view\ntraining instructions:\n\n> python OrganoID.py train -h\n\nSuch as:\n\n> python OrganoID.py train /path/to/trainingData /path/to/outputFolder NewModelName -M TrainableModel\n\n\n<h1>USER INTERFACE</h1>\n\nOrganoID now includes a user interface. To start the interface, run:\n\n> python OrganoID_UI.py\n\nThe parameters in the interface correspond to those in the command-line tool.\n\n<h1>DATASET</h1>\n\nThe dataset for model training and all validation/testing from the OrganoID publication is openly available here:\nhttps://osf.io/xmes4/\n"
      },
      "source": "https://raw.githubusercontent.com/jono-m/OrganoID/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 11:27:22",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 22
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "USAGE",
        "type": "Text_excerpt",
        "value": "OrganoID was run with the following software configuration:\n\n- Windows 10 64-bit\n- Python 3.9\n\n<h1>INSTALLATION</h1>\n\n<i>Overview: to set up OrganoID source dependencies, create an empty Conda environment (e.g., with miniconda) and\ninstall all packages listed in <b>requirements.txt</b>.\n\nNOTE: OrganoID uses TensorFlow for neural network predictions. TensorFlow will automatically run on your\nGPU if compatible libraries are installed for your graphics card (e.g. NVIDIA CUDA). See tensorflow.org/install for guidance.</i>\n\n1) Install Anaconda (https://www.anaconda.com/products/distribution).\n2) Open <i>Anaconda Prompt</i> and create a new environment:\n   ```\n   >> conda create -n OrganoID python=3.9\n   >> activate OrganoID\n   ```\n3) Download OrganoID and extract it to a directory of your choosing (https://github.com/jono-m/OrganoID/archive/refs/heads/master.zip). You may also clone the repository instead.\n4) In <i>Anaconda Prompt</i>, navigate to the OrganoID root directory (which contains <i>OrganoID.py</i>):\n   ```\n   >> cd path/to/OrganoID/directory\n   ```\n5) If you would like to run TensorFlow on your GPU (which may be faster for batch processing), go to https://www.tensorflow.org/install/pip and follow the relevant instructions for your operating system, if GPU-mode is supported. (e.x. Step 5 for Windows Native). Skip this step otherwise.\n6) Install all OrganoID requirements:\n   ```\n   pip install -r requirements.txt\n   ```\n\n<h1>USAGE</h1>\n\nThe OrganoID distribution comes with an optimized TensorFlow Lite model, <b>OptimizedModel</b>. This\nmodel can be used for most applications. Here is an example of usage (run in <i>Anaconda Prompt</i> from the directory that contains <i>OrganoID.py</i>):\n\n> python OrganoID.py run OptimizedModel /path/to/images /path/to/outputFolder\n\nThis command goes through each image in the <i>/path/to/images</i> folder and produces a labeled grayscale image, where the intensity at each pixel is the organoid \"ID\". These images are saved in the <i>/path/to/outputFolder</i> directory. You can also output other versions of this image with command options, such as <i>--binary</i>, <i>--belief</i>, or <i>--colorize</i> to generate black-and-white masks, detection belief images, or color-labeled images, respectively. To see all options with instructions, run the following command:\n\n> python OrganoID.py run -h\n\nIf you would like to tune model performance for particular applications, the included model\n<b>TrainableModel</b> can be re-trained through this tool. Run the following command to view\ntraining instructions:\n\n> python OrganoID.py train -h\n\nSuch as:\n\n> python OrganoID.py train /path/to/trainingData /path/to/outputFolder NewModelName -M TrainableModel\n\n\n<h1>USER INTERFACE</h1>\n\nOrganoID now includes a user interface. To start the interface, run:\n\n> python OrganoID_UI.py\n\nThe parameters in the interface correspond to those in the command-line tool.\n\n<h1>DATASET</h1>\n\nThe dataset for model training and all validation/testing from the OrganoID publication is openly available here:\nhttps://osf.io/xmes4/\n"
      },
      "source": "https://raw.githubusercontent.com/jono-m/OrganoID/master/README.md",
      "technique": "header_analysis"
    }
  ]
}