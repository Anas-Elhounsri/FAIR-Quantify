{
  "application_domain": [
    {
      "confidence": 36.93,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/cvdelannoy/baseLess"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-07-04T18:09:53Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-02-29T16:26:38Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9884872545222553,
      "result": {
        "original_header": "baseLess: minION sequence detection, no basecalling required",
        "type": "Text_excerpt",
        "value": "BaseLess reduces your MinION sequencing device to a simple species detector. As a trade-off, it runs on inexpensive computational hardware like single-board computers. The neural network it uses is a composite of many smaller networks, each detecting a different k-mer, thus reconfiguration of baseLess to detect a different sequence amounts to combining different smaller networks. \n \n"
      },
      "source": "https://raw.githubusercontent.com/cvdelannoy/baseLess/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/cvdelannoy/baseLess/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/cvdelannoy/baseLess/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "cvdelannoy/baseLess"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "baseLess: minION sequence detection, no basecalling required"
      },
      "source": "https://raw.githubusercontent.com/cvdelannoy/baseLess/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Install",
        "parent_header": [
          "baseLess: minION sequence detection, no basecalling required"
        ],
        "type": "Text_excerpt",
        "value": "Install baseLess from conda, with the much faster [mamba](https://anaconda.org/conda-forge/mamba) drop-in replacement if you have it: \n```shell\nmamba install -c bioconda -c conda-forge -c cvdelannoy baseless\n```\nOtherwise just replace `mamba` by `conda`.  \n\nBefore compiling your first model, you can choose to download pre-generated k-mer models into the default directory of the package (current size <1MB):\n```shell\nbaseLess update_16s_db\n```\n"
      },
      "source": "https://raw.githubusercontent.com/cvdelannoy/baseLess/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/cvdelannoy/baseLess/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2022 Carlos de Lannoy\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/cvdelannoy/baseLess/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "baseLess"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "cvdelannoy"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 172795,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/cvdelannoy/baseLess/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Abundance mode",
        "parent_header": [
          "baseLess: minION sequence detection, no basecalling required",
          "Running"
        ],
        "type": "Text_excerpt",
        "value": "BaseLess determines whether the reads originate from a given target genome or not, by comparing the abundance of k-mers it finds to the abundance of k-mers in the genomes.\n- For pure samples\n- Works with larger genomes\n- Useful for differentiating visually similar species or strains\n\nTo generate a model:\n```\nbaseLess compile_model \\\n  --model-type abundance \\\n  --target-fasta target.fasta \\                                # fasta containing target genome\n  --background-fastas background1.fasta backgroud2.fasta ... \\ # genomes of other species\n  --nn-directory directory/of/nns \\                            # directory containing NNs\n  --out-model your_model_name.h5\n```\n\nIf you have reads of species close to your target species, you can use these as training reads and increase the probability of finding salient k-mers in your training data significantly. In that case, run:\n```\nbaseLess compile_model \\\n  --model-type abundance \\\n  --target-fasta target.fasta \\                                # fasta containing target genome\n  --background-fastas background1.fasta backgroud2.fasta ... \\ # genomes of other species\n  --nn-directory directory/of/nns \\                            # directory containing NNs\n  --out-model your_model_name.h5  \\\n  --training-reads training/reads/directory \\\n  --cores 8 \\                                                  # more CPUs == faster\n  --train-on-the-fly\n```\nk-mer models will be generated as needed, so this will take longer to run (typically <1 hour). Reads will need to be corrected prior to usage for training, see [below](#Generating-k-mer-detection-networks).\n"
      },
      "source": "https://raw.githubusercontent.com/cvdelannoy/baseLess/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Read detection mode",
        "parent_header": [
          "baseLess: minION sequence detection, no basecalling required",
          "Running"
        ],
        "type": "Text_excerpt",
        "value": "BaseLess looks for all k-mers in each read. If a read contains a minimum fraction of total k-mers (>66%, by default), it is considered to originate from the target species. Though not necessarily restricted to any sequence, this has been tested for and attuned to 16S sequence at the moment.\n- For amplified/metagenomic samples\n- Useful for microbial species detection\n\nTo generate a model:\n```\nbaseLess compile_model \\\n  --model-type read_detection \\\n  --target-fasta target.fasta \\                                # fasta containing one or more 16S sequences\n  --out-model your_model_name.h5\n```\n"
      },
      "source": "https://raw.githubusercontent.com/cvdelannoy/baseLess/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Inference",
        "parent_header": [
          "baseLess: minION sequence detection, no basecalling required",
          "Running"
        ],
        "type": "Text_excerpt",
        "value": "To run inference simultaneously with the MinION, change configuration so that one read per fast5 is returned, and point baseLess to the fast5 output directory of your reads:\n```\nbaseLess run_inference \\\n    --fast5-in directory/of/fast5s \\ \n    --out-dir your/output/directory \\\n    --model your_model_name.h5 \\\n    --inference-mode once\n```\n- In read detection mode, baseLess will only retain fast5s that contain your target. In abundance mode, no reads will be retained.\n- baseLess will run indefinitely, until stopped manually (`ctrl-c`).\n- To run on a directory of reads and stop when all reads are analysed, provide `--inference-mode once`. If you do not want the reads to be removed, add `--copy-reads`.\n"
      },
      "source": "https://raw.githubusercontent.com/cvdelannoy/baseLess/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Generating k-mer detection networks",
        "parent_header": [
          "baseLess: minION sequence detection, no basecalling required",
          "Running"
        ],
        "type": "Text_excerpt",
        "value": "baseLess comes with a pre-generated set of k-mer detection networks, for k-mers that should be particularly salient in the context of 16S detection. We plan to further expand the number of available k-mer networks, however if you have a large read set of a known species, a good reference genome, and you want to generate k-mer networks yourself, you can do so as follows.\n\nBasecall your reads with guppy if you haven't yet. If reads were output as multi-fast5, split them using from the [ont-fast5-api](https://pypi.org/project/ont-fast5-api/) package:\n```\nsingle_to_multi_fast5 -i multi/fast5/input/folder -s single/fast5/output/folder\n```\n\nCorrect your reads with [tombo](https://anaconda.org/bioconda/ont-tombo):\n```\ntombo resquiggle single/fast5/output/folder reference_genome.fasta\n```\n\nUse these reads as input for baseLess:\n```\nbaseLess run_production_pipeline \\\n  --training-reads path/to/training/reads \\\n  --test-reads path/to/test/reads \\\n  --out-dir path/to/networks/directory \\\n  --cores 8 \\                                # more CPUs == faster\n  --kmer-list                                # txt list, 1 line per k-mer\n```\n"
      },
      "source": "https://raw.githubusercontent.com/cvdelannoy/baseLess/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Running on Nvidia Jetson Nano (2GB)",
        "parent_header": [
          "baseLess: minION sequence detection, no basecalling required",
          "Minimal hardware"
        ],
        "type": "Text_excerpt",
        "value": "The Nvidia Jetson Nano is a single-board computer with dedicated GPU. BaseLess is designed to be light enough to run on such low-powered hardware. \n\nBefore first usage open a terminal in the baseless directory and build the image:\n\n```shell\ndocker build -f Dockerfile_jetson -t baseless .\n```\n\nopen the docker container interactively:\n```shell\ndocker run -it --rm --runtime nvidia --network host baseless\n```\nAdd any directories you may want to read/write by adding `-v /local/dir:/home/some_dir_name `\n\nYou can now start running inference!\n\nSome tips to make the most of your limited memory:\n- As the Jetson Nano has little memory to spare (2GB or 4GB, depending on your model), you may need to limit memory of docker and of baseLess separately.  We found that the 2GB model still runs well with baseLess limited at 256MB (`--mem 256`) and the docker container at 512MB (`-m 512m`).\n- If you limit docker memory, you can safely switch off the docker out-of-memory killer (`--oom-kill-disable`).\n- Switch off the GUI -- `sudo systemctl stop lxdm` or `sudo sysctl disable lxdm` to prevent the GUI starting at startup. \n- You can also follow Zafer Arican's [advice](https://www.zaferarican.com/post/how-to-save-1gb-memory-on-jetson-nano-by-installing-lubuntu-desktop) and switch to lubuntu.\n- Future versions of baseLess will avoid the docker container all together for even less overhead.\n"
      },
      "source": "https://raw.githubusercontent.com/cvdelannoy/baseLess/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 09:49:58",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 12
      },
      "technique": "GitHub_API"
    }
  ]
}