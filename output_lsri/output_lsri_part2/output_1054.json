{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "References",
        "parent_header": [
          "SNPAAMapper-Python"
        ],
        "type": "Text_excerpt",
        "value": "1. Preston, J., VanZeeland, A. and A. Peiffer PhD., D., 2022. Innovation at Illumina: The road to the $600 human genome. [online] Nature.com. Available at: <https://www.nature.com/articles/d42473-021-00030-9>. \n2. Lewis, T., 2013. Human Genome Project Marks 10th Anniversary. [online] livescience.com. Available at: <https://www.livescience.com/28708-human-genome-project-anniversary.html>.\n3. Barba, M., Czosnek, H. and Hadidi, A., 2014. Historical Perspective, Development and Applications of Next-Generation Sequencing in Plant Virology. Viruses, 6(1), pp.106-136. doi: 10.3390/v6010106\n4. Bai, Y. and Cavalcoli, J., 2013. SNPAAMapper: An efficient genome-wide SNP variant analysis pipeline for next-generation sequencing data. Bioinformation, [online] 9(17), pp.870-872. Available at: <https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3819573/>. doi: 10.6026/97320630009870\n5. Landrum, M., Lee, J., Benson, M., Brown, G., Chao, C., Chitipiralla, S., Gu, B., Hart, J., Hoffman, D., Hoover, J., Jang, W., Katz, K., Ovetsky, M., Riley, G., Sethi, A., Tully, R., Villamarin-Salomon, R., Rubinstein, W. and Maglott, D., 2015. ClinVar: public archive of interpretations of clinically relevant variants. Nucleic Acids Research, [online] 44(D1), pp.D862-D868. Available at: https://doi.org/10.1093/nar/gkv1222\n6. Li, H., B. Handsaker, A. Wysoker, T. Fennell, J. Ruan, N. Homer, G. Marth, G. Abecasis, and R. Durbin. \u201cThe Sequence Alignment/Map Format and SAMtools.\u201d Bioinformatics 25, no. 16 (2009): 2078\u201379. https://doi.org/10.1093/bioinformatics/btp352. \n\n"
      },
      "source": "https://raw.githubusercontent.com/BaiLab/SNPAAMapper-Python/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/BaiLab/SNPAAMapper-Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-03-05T23:51:26Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-01-30T14:33:36Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Python version of Github"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.848797758324796,
      "result": {
        "original_header": "SNPAAMapper-Python",
        "type": "Text_excerpt",
        "value": "SNPAAMapper is a downstream variant annotation program that can effectively classify variants by region (CDS, UTRs, upstream, downstream, intron), predict amino acid change type (missense, nonsense, etc.), and prioritize mutation effects (e.g., non-Synonymous > Synonymous).\n \n"
      },
      "source": "https://raw.githubusercontent.com/BaiLab/SNPAAMapper-Python/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9042284080668278,
      "result": {
        "original_header": "Instructions",
        "type": "Text_excerpt",
        "value": "and download [hg19_CDSIntronWithSign.txt.out](https://drive.google.com/file/d/1yh3ZAHXMip4j82uXHsQw7BIl87upAGr0/view?usp=sharing) to your local repository. \n\n2. Process exon annotation files and generate feature start and gene mapping files: \n"
      },
      "source": "https://raw.githubusercontent.com/BaiLab/SNPAAMapper-Python/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/BaiLab/SNPAAMapper-Python/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/BaiLab/SNPAAMapper-Python/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "BaiLab/SNPAAMapper-Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SNPAAMapper-Python"
      },
      "source": "https://raw.githubusercontent.com/BaiLab/SNPAAMapper-Python/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BaiLab/SNPAAMapper-Python/main/run_SNPAAMapper.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 0.9938867397821782,
      "result": {
        "original_header": "Instructions",
        "type": "Text_excerpt",
        "value": "Clone this repo as follows\n```sh\ngit clone https://github.com/BaiLab/SNPAAMapper-Python.git\ncd ./SNPAAMapper-Python\n```\n \nNext, type\n```sh\n./run_SNPAAMapper.sh config_007.txt\n```\n \nOR run the following steps in sequential order: \n    ```sh\n    python algorithm_preprocessing_exon_annotation_rr.py ChrAll_knownGene.txt.exons\n    ```\n    \n3. Classify variants by regions (CDS, Upstream, Downstream Intron, UTRs...) \n    ```sh\n    python algorithm_mapping_variants_reporting_class_intronlocation_updown.py ChrAll_knownGene.txt.exons VCF_input_file_in_tab_delimited_format.vcf\n    ```\n    \n    OR\n    \n    BASH5*\n    \n4. Predict amino acid change type \n    ```sh\n    python algorithm_predicting_full_aa_change_samtools_updown.py VCF_input_file_in_tab_delimited_format.vcf.append kgXref.txt hg19_CDSIntronWithSign.txt.out ChrAll_knownGene.txt >VCF_input_file_in_tab_delimited_format.vcf.out.txt\n    ```\n    \n5. Prioritize mutation effects \n    ```sh\n    python algorithm_prioritizing_mutation_headertop_updown.py VCF_input_file_in_tab_delimited_format.vcf.append.out.txt\n    ``` \n"
      },
      "source": "https://raw.githubusercontent.com/BaiLab/SNPAAMapper-Python/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8799848535800905,
      "result": {
        "original_header": "Instructions",
        "type": "Text_excerpt",
        "value": "Next, type\n```sh\n./run_SNPAAMapper.sh config_007.txt\n```\n \n    ```sh\n    python algorithm_preprocessing_exon_annotation_rr.py ChrAll_knownGene.txt.exons\n    ```\n    \n3. Classify variants by regions (CDS, Upstream, Downstream Intron, UTRs...) \n    ```sh\n    python algorithm_mapping_variants_reporting_class_intronlocation_updown.py ChrAll_knownGene.txt.exons VCF_input_file_in_tab_delimited_format.vcf\n    ```\n    \n    OR\n    \n    BASH5*\n    \n4. Predict amino acid change type \n    ```sh\n    python algorithm_predicting_full_aa_change_samtools_updown.py VCF_input_file_in_tab_delimited_format.vcf.append kgXref.txt hg19_CDSIntronWithSign.txt.out ChrAll_knownGene.txt >VCF_input_file_in_tab_delimited_format.vcf.out.txt\n    ```\n    \n5. Prioritize mutation effects \n    ```sh\n    python algorithm_prioritizing_mutation_headertop_updown.py VCF_input_file_in_tab_delimited_format.vcf.append.out.txt\n    ``` \n"
      },
      "source": "https://raw.githubusercontent.com/BaiLab/SNPAAMapper-Python/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/BaiLab/SNPAAMapper-Python/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "parent_header": [
          "SNPAAMapper-Python"
        ],
        "type": "Text_excerpt",
        "value": "MIT\n"
      },
      "source": "https://raw.githubusercontent.com/BaiLab/SNPAAMapper-Python/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SNPAAMapper-Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "BaiLab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 34117,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 2091,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BaiLab/SNPAAMapper-Python/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirements",
        "parent_header": [
          "SNPAAMapper-Python"
        ],
        "type": "Text_excerpt",
        "value": "- python 3.x\n- sys\n- os\n- pandas\n- numpy\n- csv\n- re\n"
      },
      "source": "https://raw.githubusercontent.com/BaiLab/SNPAAMapper-Python/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 13:01:35",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ]
}