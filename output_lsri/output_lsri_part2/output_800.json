{
  "application_domain": [
    {
      "confidence": 8.65,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/MelvinYin/Defined_Proteins"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-03-15T13:30:41Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-08-20T04:35:54Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "The DEFINED-PROTEINS software package allows users to: (i) derive descriptor of elementary functions of interest directly from protein structures; (ii) use derived descriptor in rational design and protein engineering of protein functions."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9070792665548859,
      "result": {
        "original_header": "DEFINED-Proteins",
        "type": "Text_excerpt",
        "value": "For local deployment, either:\n1. docker pull melvinyin/definedproteins  \nOR 1. Copy the dockerfile/Dockerfile here into a local .txt file named\n Dockerfile, and docker build -t definedproteins --build-arg CACHEBUST=$(date +%s ) .  \nRemember the dot at the end.   \n2. Because the website loads by default into port 80, you need to kill any\n processes using that port first. sudo lsof -i :80 => sudo kill YOUR_PID   \n3. If lsof gives nothing, ignore the kill step. This is usually your default\nnginx or apache server intro page, so it's fine. If you're running something\n useful there you know not to do this.[1]  \n4. docker run --publish 80:80 melvinyin/definedproteins /bin/bash ./docker_build.sh  \n4. If docker gives permission denied, instead of doing sudo docker, grant\n permission to docker instead, via sudo groupadd docker => sudo usermod -aG\n  docker $USER => sudo reboot [THIS WILL REBOOT YOUR COMPUTER]. sudo docker\n   gives weird errors sometimes. \n5. Navigate to http://localhost in your browser, it should work. Ignore\n security warning.   \n \nTo run in background in 4, add -d. \nIf you don't want to use docker, see dockerfile for build instructions. A\n possible set of instructions are:   \nNavigate to your browser's localhost:8000 and it should work.  \n[1] portno is hard-coded in ./docker_build.sh, you probably need to manually\n docker run -it and change that, sorry. Remember to docker commit/save and\n  use that image, and to change port mapping in --publish, in run step. \n[2] DEFINED-Proteins = Descriptor of Function IN Engineering and Design - Proteins\n</p>\n \n"
      },
      "source": "https://raw.githubusercontent.com/MelvinYin/Defined_Proteins/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/MelvinYin/Defined_Proteins/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/MelvinYin/Defined_Proteins/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MelvinYin/Defined_Proteins"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DEFINED-Proteins"
      },
      "source": "https://raw.githubusercontent.com/MelvinYin/Defined_Proteins/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MelvinYin/Defined_Proteins/main/dockerfile/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/MelvinYin/Defined_Proteins/main/dockerfile/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MelvinYin/Defined_Proteins/main/docker_build.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MelvinYin/Defined_Proteins/main/src/pdb_component/parsers/hb/source/run.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MelvinYin/Defined_Proteins/main/src/pdb_component/parsers/hb/source/build.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 0.9654404297682156,
      "result": {
        "original_header": "DEFINED-Proteins",
        "type": "Text_excerpt",
        "value": "<p>\nDefined proteins[2] is now live, at http://definedproteins.com \nhttps://www.frontiersin.org/articles/10.3389/fbinf.2021.657529/full \nFor local deployment, either:\n1. docker pull melvinyin/definedproteins  \nOR 1. Copy the dockerfile/Dockerfile here into a local .txt file named\n Dockerfile, and docker build -t definedproteins --build-arg CACHEBUST=$(date +%s ) .  \nRemember the dot at the end.   \n2. Because the website loads by default into port 80, you need to kill any\n processes using that port first. sudo lsof -i :80 => sudo kill YOUR_PID   \n3. If lsof gives nothing, ignore the kill step. This is usually your default\nnginx or apache server intro page, so it's fine. If you're running something\n useful there you know not to do this.[1]  \n4. docker run --publish 80:80 melvinyin/definedproteins /bin/bash ./docker_build.sh  \n4. If docker gives permission denied, instead of doing sudo docker, grant\n permission to docker instead, via sudo groupadd docker => sudo usermod -aG\n  docker $USER => sudo reboot [THIS WILL REBOOT YOUR COMPUTER]. sudo docker\n   gives weird errors sometimes. \n5. Navigate to http://localhost in your browser, it should work. Ignore\n security warning.   \n \nTo run in background in 4, add -d. \nIf you don't want to use docker, see dockerfile for build instructions. A\n possible set of instructions are:   \nsudo apt update  \nsudo apt upgrade  \nsudo apt install gcc libmpich-dev git    \ncurl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash    \nsudo apt-get install git-lfs    \nFor python, either have your own venv activated or, to use conda:  \nsudo apt install curl gpg  \ncurl https://repo.anaconda.com/pkgs/misc/gpgkeys/anaconda.asc | gpg --dearmor > conda.gpg  \ninstall -o root -g root -m 644 conda.gpg /usr/share/keyrings/conda-archive-keyring.gpg  \necho \"deb [arch=amd64 signed-by=/usr/share/keyrings/conda-archive-keyring.gpg] https://repo.anaconda.com/pkgs/misc/debrepo/conda stable main\" > /etc/apt/sources.list.d/conda.list  \nsudo apt update  \nsudo apt install conda  \nHere, either activate your conda env via:\n/opt/conda/bin/conda init bash OR /your/path/to/bin/conda init bash  \n. ~/.bashrc  \nconda activate base  \nconda install python  \necho Y | pip install django scikit-learn numpy scipy bokeh matplotlib pandas\n boto3  \nIf you're running your own python venv, only run the last line.  \nNext, you might have to build the search and converge binaries. After you\n have git cloned:\n(I know it's bad to have to cd and therefore set PWD to there, yes it\n implicitly requires PWD to be there, this is old code)  \ncd /your/path/to/Defined_Proteins/src/preprocess/converge\nmpicxx -std=c++11 -Iinclude -o calculator main.cpp  \ncd /your/path/to/Defined_Proteins/src/preprocess/search/source  \ngcc -o search searchPSSM.c -lm  \ncd ..  \nmv ./source/search ./search  \ncd ../../..  \n(You should be in root now, where src is a directory same level as you and\n you're not in src)  \npython download_data_folder.py   \n[1] portno is hard-coded in ./docker_build.sh, you probably need to manually\n docker run -it and change that, sorry. Remember to docker commit/save and\n  use that image, and to change port mapping in --publish, in run step. \n"
      },
      "source": "https://raw.githubusercontent.com/MelvinYin/Defined_Proteins/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/MelvinYin/Defined_Proteins/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "BSD 3-Clause License\n\nCopyright (c) 2021, Melvin Yin\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its\n   contributors may be used to endorse or promote products derived from\n   this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
      },
      "source": "https://raw.githubusercontent.com/MelvinYin/Defined_Proteins/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Defined_Proteins"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "MelvinYin"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 914240,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 558848,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CSS",
        "size": 183749,
        "type": "Programming_language",
        "value": "CSS"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 65564,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 24127,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "JavaScript",
        "size": 10632,
        "type": "Programming_language",
        "value": "JavaScript"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "PHP",
        "size": 2006,
        "type": "Programming_language",
        "value": "PHP"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 1886,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Starlark",
        "size": 329,
        "type": "Programming_language",
        "value": "Starlark"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 209,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MelvinYin/Defined_Proteins/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 12:04:12",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ]
}