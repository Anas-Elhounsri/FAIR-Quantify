{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Cite us",
        "parent_header": [
          "microFIM"
        ],
        "type": "Text_excerpt",
        "value": "Link\n"
      },
      "source": "https://raw.githubusercontent.com/qLSLab/microFIM/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "References",
        "parent_header": [
          "microFIM"
        ],
        "type": "Text_excerpt",
        "value": "<a id=\"1\">[1]</a> \nNaulaerts, S., Meysman, P., Bittremieux, W., Vu, T. N., Vanden Berghe, W., Goethals, B., & Laukens, K. (2015). A primer to frequent itemset mining for bioinformatics. Briefings in bioinformatics, 16(2), 216-231. \\\n<a id=\"2\">[2]</a> \nAgrawal, R., Imieli\u0144ski, T., & Swami, A. (1993, June). Mining association rules between sets of items in large databases. In Proceedings of the 1993 ACM SIGMOD international conference on Management of data (pp. 207-216). \\\n<a id=\"1\">[3]</a> \nOmiecinski, E. R. (2003). Alternative interest measures for mining associations in databases. IEEE Transactions on Knowledge and Data Engineering, 15(1), 57-69. \\\n<a id=\"1\">[4]</a> \nXiong, H., Tan, P. N., & Kumar, V. (2006). Hyperclique pattern discovery. Data mining and knowledge discovery, 13(2), 219-242. \\\n<a id=\"1\">[5]</a> \nTan, P. N., Kumar, V., & Srivastava, J. (2002, July). Selecting the right interestingness measure for association patterns. Proc. ACM SIGKDD Int. (pp. 32-41). \\\n<a id=\"1\">[6]</a> \nHahsler, M., Chelluboina, S., Hornik, K., & Buchta, C. (2011). The arules R-package ecosystem: analyzing interesting patterns from large transaction data sets. The Journal of Machine Learning Research, 12, 2021-2025. \\\n<a id=\"1\">[7]</a> \nGonzalez, A., Navas-Molina, J. A., Kosciolek, T., McDonald, D., V\u00e1zquez-Baeza, Y., Ackermann, G., ... & Knight, R. (2018). Qiita: rapid, web-enabled microbiome meta-analysis. Nature methods, 15(10), 796-798. \\\n<a id=\"2\">[8]</a> \nBolyen, E., Rideout, J. R., Dillon, M. R., Bokulich, N. A., Abnet, C. C., Al-Ghalith, G. A., ... & Caporaso, J. G. (2019). Reproducible, interactive, scalable and extensible microbiome data science using QIIME 2. Nature biotechnology, 37(8), 852-857. \\\n<a id=\"3\">[9]</a> \nVangay, P., Hillmann, B. M., & Knights, D. (2019). Microbiome Learning Repo (ML Repo): A public repository of microbiome regression and classification tasks. Gigascience, 8(5), giz042.\n"
      },
      "source": "https://raw.githubusercontent.com/qLSLab/microFIM/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/qLSLab/microFIM"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contacts",
        "parent_header": [
          "microFIM"
        ],
        "type": "Text_excerpt",
        "value": "For any doubt and help, please contact g.agostinetto@campus.unimib.it\n"
      },
      "source": "https://raw.githubusercontent.com/qLSLab/microFIM/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-04-14T13:14:48Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-07-21T11:54:56Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Input description",
        "parent_header": [
          "microFIM",
          "Usage",
          "Input/output microFIM files"
        ],
        "type": "Text_excerpt",
        "value": "Before starting with microFIM, be sure to set the following requirements for **inputs**:\n* #ID \\\nIn the taxa table, the column describing taxa must be filled as #ID. You can rename it with `sed -i 's/SEARCH_REGEX/REPLACEMENT/g' INPUTFILE` \\\nor a text editor;\n* #SampleID \\\nIf you want to filter your taxa table with a list of samples or metadata file, the column name must be filled as #SampleID; \n* CSV or TSV format \\\nTaxa table and metadata file must be provided as CSV or TSV files. Template file is already defined as CSV in [input_templates](input_templates) directory.\n"
      },
      "source": "https://raw.githubusercontent.com/qLSLab/microFIM/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Output description",
        "parent_header": [
          "microFIM",
          "Usage",
          "Input/output microFIM files"
        ],
        "type": "Text_excerpt",
        "value": "* transactional file: taxa table is converted into a transactional file, where each row represents a sample with the list of elements it contains;\n* pattern datadrame: for each pattern, interesting measures are calculated and represented in CSV dataframe;\n* pattern table as CSV: after pattern extraction, a presence-absence matrix is calculated, considering for each pattern if it is present or not in each sample - the results is similar to a taxa table, where the first column contains the patterns while the others describe in which sample are found. Columns considering the length of the patterns and their support are reported. Additional metrics can be also added (see Next section for details) - see the Figure below for an example;\n* plots as SVG and HTML: visualizations as barplot, scatter plot and heatmap can be generated.\n\n"
      },
      "source": "https://raw.githubusercontent.com/qLSLab/microFIM/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.963187518273514,
      "result": {
        "original_header": "Overview",
        "type": "Text_excerpt",
        "value": "**microFIM (microbial Frequent Itemset Mining) is a Python tool for the integration of Frequent Itemset Mining approach (also known as Association Rule Mining - ARM) into microbiome pattern analysis**. \nThe tool is developed to create a bridge between microbial ecology researchers and ARM technique, integrating the common microbiome outputs (in particular, OTU, ESV and taxa table), metadata files typically used in microbiome analysis, and it provides similar microbiome outputs that help scientists to integrate ARM in microbiome pipelines.  \nIn detail, microFIM generates the **pattern table** - an OTU table built with the patterns extracted via ARM (see Figure above as an example)- that can be used for further statistical analysis and microbiome visualization strategies. \nmicroFIM is also versatile. It is suited for metabarcoding projects and datasets that respect the input format requests (see the **microFIM input** section for details and examples).\n \n"
      },
      "source": "https://raw.githubusercontent.com/qLSLab/microFIM/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9490021408187127,
      "result": {
        "original_header": "Frequent Itemset Mining (or ARM) in a nutshell",
        "type": "Text_excerpt",
        "value": "Association rule mining is a supervised machine learning method for discovering interesting relations between variables in large databases. It is intended to identify patterns (group of items) and strong rules discovered in databases using some measures of interestingness. \nmicroFIM is implemeted to integrate ARM analysis in 16S rRNA microbiome pipelines. An example of applications is provided in the figure below. \nmicroFIM, in particular, supports **pattern mining phase** (itemset extraction), in order to extract interesting patterns from 16S rRNA microbiome data.\nDetails about ARM approach are available in the work of Naulearts et al., 2016 [[1]](#1) and Agrawal et al., 1993 [[2]](#2). \nmicroFIM framework is developed in **6 main steps** (see the next sections for details and the main figure for an **overview**) and it integrates the following metrics: \n* to extract patterns, the mandatory parameters (also available in [input_templates](input_templates) directory) are the following:\n   * minimum support to be considered to extract interesting patterns, intended as Support = frq(X,Y)/N, e.g. the frequency of the pattern in the dataset;\n   * minimum length, intended as the minimum number of elements that composed the patterns;\n   * maximum length, intended as the maximum number of elements that composed the patterns. \n* measures included to evaluate patterns extracted and available in microFIM outputs:\n   * Support of the patterns;\n   * length of the patterns;\n   * number of samples in which the patterns were found.\n   \n* interest measures integrated in microFIM framework:\n   * all-confidence - metrics to evaluate 'hypercliques patterns' [[3]](#3). \n   \n     Considering a pattern \u2018X\u2019 composed of different items, all-confidence is calculated as the ratio between the support of \u2018X\u2019 and the highest support   retrieved from the elements of the pattern \u2018X\u2019.\n   \n      all-confidence(X) = min{P(X|Y),P(Y|X)}\n   \n       All-confidence means that all rules which can be generated from itemset X have at least a confidence of all-confidence(X). \n       For details, see [[3]](#3)[[4]](#5).\n       \n    Example: Considering a pattern \u2018X\u2019 composed of different items, all-confidence is calculated as the ratio between the support of \u2018X\u2019 and the highest support retrieved from the elements of the pattern \u2018X\u2019. For example, a pattern X is composed of 3 elements that, considering the entire dataset, have the following support threshold: 0.3, 0.6 and 0.8. Overall, the pattern X has a support of 0.3. All-confidence will be calculated as the ratio between the support of X - 0.3 - and the higher support within X - 0.8, resulting in 0.37. All-confidence, in this way, is defined as the smallest confidence of all rules which can be produced from a pattern, i.e., all rules produced from a pattern will have a confidence greater or equal to its all-confidence value [[3]](#3)[[5]](#5). In detail, confidence is an indication of how often a rule has been found to be true, so it is considered as a measure of rule reliability [[1]](#1)[[6]](#6). \nBelow, installation, instructions of use and tutorials are provided.\n \n"
      },
      "source": "https://raw.githubusercontent.com/qLSLab/microFIM/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/qLSLab/microFIM/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/qLSLab/microFIM/main/microfim_tutorial_notebook.ipynb"
      },
      "source": "https://raw.githubusercontent.com/qLSLab/microFIM/main/microfim_tutorial_notebook.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/qLSLab/microFIM/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "qLSLab/microFIM"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "microFIM"
      },
      "source": "https://raw.githubusercontent.com/qLSLab/microFIM/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/qLSLab/microFIM/main/microFIM_framework.jpg"
      },
      "source": "https://raw.githubusercontent.com/qLSLab/microFIM/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/qLSLab/microFIM/main/arm_microbiome_applications.png"
      },
      "source": "https://raw.githubusercontent.com/qLSLab/microFIM/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/qLSLab/microFIM/main/taxa_table_example.png"
      },
      "source": "https://raw.githubusercontent.com/qLSLab/microFIM/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "microFIM"
        ],
        "type": "Text_excerpt",
        "value": "1. Download Python 3 if you haven\u2019t already at https://www.python.org/\n2. Clone github repository (link: https://github.com/qLSLab/microFIM.git) and:\n    * Download ZIP from microFIM github home page, then decompress it\\\n    or \n    * Use git from command line: `git clone https://github.com/qLSLab/microFim.git`\n\n3. We suggest to install Conda or Mininconda to run microFIM - here you can find how to install Miniconda3: https://conda.io/projects/conda/en/latest/user-guide/install/index.html\n\n4. Once Miniconda is installed, create the conda environment with the command below: \\\n`conda create --name microFIM --file requirements.txt --channel default --channel conda-forge --channel plotly`\n\n5. (Optional) Test microFIM before starting with your analysis - see Tutorial section for details\n"
      },
      "source": "https://raw.githubusercontent.com/qLSLab/microFIM/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9998841348985847,
      "result": {
        "original_header": "Frequent Itemset Mining (or ARM) in a nutshell",
        "type": "Text_excerpt",
        "value": "Below, installation, instructions of use and tutorials are provided.\n \n"
      },
      "source": "https://raw.githubusercontent.com/qLSLab/microFIM/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/qLSLab/microFIM/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "microFIM"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "qLSLab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 42890,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 23710,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/qLSLab/microFIM/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-04 12:14:22",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "microFIM"
        ],
        "type": "Text_excerpt",
        "value": "microFIM can be used via guided scripts or python functions. \\\nPlease see [microfim_tutorial_notebook](microfim_tutorial_notebook.ipynb) for complete tutorials for both usage.\nBelow, recomendations about input files format and explanation about the structure and functions module are available.\n"
      },
      "source": "https://raw.githubusercontent.com/qLSLab/microFIM/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Input/output microFIM files",
        "parent_header": [
          "microFIM",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "microFIM accepts as input taxa table and metadata in CSV or TSV format. An example of taxa table is provided in [tutorials](tutorials) (e.g. as test1.csv or test2.csv). In particular, the file is composed by the rows and columns representing the taxa with their abundances for each sample (visible also in the figure below). This kind of file derives from the conversion of the BIOM file into a CSV file (https://biom-format.org/). There are different ways to convert a BIOM file into a TSV or CSV file, at the end of the page we provide some options. In general, you can find taxa tables in different sources, as for example in QIITA platform (https://qiita.ucsd.edu/; [[7]](#7)) or in MLrepo (https://knights-lab.github.io/MLRepo/; [[8]](#8)).\nConsidering microbiome analysis, QIIME2 provide complete frameworks and scripts to analyse and obtain taxa tables (https://qiime2.org/; [[9]](#9)).\n\n![alt text](taxa_table_example.png)\n"
      },
      "source": "https://raw.githubusercontent.com/qLSLab/microFIM/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Structure",
        "parent_header": [
          "microFIM",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Guided scripts are defined in **6 main phases**, also represented in [microFIM_framework](microFIM_framework.jpg) figure.\nFor complete tutorials, see [microfim_tutorial_notebook](microfim_tutorial_notebook.ipynb). \n"
      },
      "source": "https://raw.githubusercontent.com/qLSLab/microFIM/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Script usage",
        "parent_header": [
          "microFIM",
          "Usage",
          "Structure"
        ],
        "type": "Text_excerpt",
        "value": "* Step 1: **importing and filtering taxa table** - in the first phase you can filter your taxa table using the metadata file (via #SampleID column). \nIf you want to run microFIM on your taxa table without filtering, go to the next step.\nThe script to filter is [script_1_filtertable.py](script_1_filtertable.py). \n\n* Step 2: **conversion into a transactional dataset** - taxa table must be converted in a transactional file (see the previous description for details). The script to convert it is [script_2_tableconversion.py](script_2_tableconversion.py).\n\n* Step 3: **patterns extraction** - microFIM extract patterns from the transactional file (see previous step). To run [script_3_microfimcalculation.py](script_3_microfimcalculation.py), files with parameters must be given as input, you can find examples to be filled in [template_inputs](template_inputs).\nThe parameters to be filled are: \n   * minimum support (minsupp);\n   * minimum length (zmin);\n   * maximum length (zmax).\nWe recomment to keep the option **report = [asS** in order to correctly used our scripts.\n\n* Step 4: **integration of additional interest measures** - microFIM provides additional interest metrics to evaluate patterns, in particular all-Confidence is added. However, other metrics can be added. For each pattern, the value of the interest measure is added in a separate column, in order to guarantee further analysis and filtering steps. The script to calculate additional interest measures is [script_4_additionalmeasures.py](script_4_additionalmeasures.py). \n\n* Step 5: **creation of the pattern table** - similar to a taxa table, the pattern table describes the presence-absence of a pattern in the samples analysed. A CSV file is obtained. The script to obtain the pattern table is [script_5_generatepatterntable.py](script_5_generatepatterntable.py). \n\n* Step 6: **visualization of results** - from the pattern table, plot can be obtained. In particular, bar plot, scatter plot and heatmap are available. The standard output are SVG and HTML format. The script to generate visualizations is [script_6_generateplots.py](script_6_generateplots.py).\n"
      },
      "source": "https://raw.githubusercontent.com/qLSLab/microFIM/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Function usage",
        "parent_header": [
          "microFIM",
          "Usage",
          "Structure"
        ],
        "type": "Text_excerpt",
        "value": "* microdir module: functions for setting project directory.\n* microimport module: functions for importing input files.\n* microfim module: main functions of microFIM - converting data, extract patterns, generated main outputs.\n* microinteresmeasures module: functions implementing interesting measures.\n* microplots module: functions for visualization of results.\n"
      },
      "source": "https://raw.githubusercontent.com/qLSLab/microFIM/main/README.md",
      "technique": "header_analysis"
    }
  ]
}