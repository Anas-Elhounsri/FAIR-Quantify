{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/mancusolab/twas_sim"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-05-21T23:46:09Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-08-09T22:56:17Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Using real genotype data, simulate a complex trait as a function of latent expression, fit eQTL weights in independent data, and perform GWAS/TWAS on complex trait."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.985181224666381,
      "result": {
        "original_header": "`twas_sim`",
        "type": "Text_excerpt",
        "value": "A python software leveraging real genotype data to simulate a complex trait as a function of latent expression, fit eQTL weights in independent data, and perform GWAS/TWAS on the complex trait. \n`twas_sim` is described in: \n> [twas_sim, a Python-based tool for simulation and power analysis of transcriptome-wide association analysis](https://doi.org/10.1093/bioinformatics/btad288). Xinran Wang, Zeyun Lu, Arjun Bhattacharya, Bogdan Pasaniuc, Nicholas Mancuso, twas_sim, a Python-based tool for simulation and power analysis of transcriptome-wide association analysis, ***Bioinformatics***, 2023; \n"
      },
      "source": "https://raw.githubusercontent.com/mancusolab/twas_sim/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9095900361110815,
      "result": {
        "original_header": "Key features:",
        "type": "Text_excerpt",
        "value": "* **LD reference panels:** twas_sim supports the option to use different LD reference panels across GWAS and eQTL simulations in addition to TWAS testing. \n* **Linear model:** `twas_sim` supports predicting gene expressions using Elastic Net, LASSO, GBLUP, and true eQTL effect sizes. The dynamic import feature enables twas_sim to easily include external prediction tools. \n* **Horizontal pleiotropy:** twas_sim accounts for the situation when nearby tagging genes are also tested in TWAS in addition to the causal TWAS model.\n \n"
      },
      "source": "https://raw.githubusercontent.com/mancusolab/twas_sim/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9120990701953707,
      "result": {
        "original_header": "Output",
        "type": "Text_excerpt",
        "value": "The first `OUTPUT.summary.tsv` is a high-level summary that contains two columns: \n| stat             | values |\n| ------           | ------ |\n| gwas.sim         | GWAS mode |\n| real.time        | Real time spent on the current simulation |\n| cpu.time         | CPU time spent on the current simulation |\n| linear_model     | Linear model used in the current simulation |\n| h2ge             | Variance explained in trait by GE |\n| snp_model        | SNP model used in the current simulation |\n| nsnps            | Number of SNPs |\n| ngwas            | GWAS sample size |\n| nqtl             | eQTL sample size  |\n| h2g              | Narrow-sense heritability of GE |\n| h2g.hat          | Predicted narrow-sense heritability of GE |\n| avg.ldsc         | Average LD-score at the region |\n| min.gwas.p       | Minimum GWAS SNP p-value |\n| mean.gwas.chi2   | Mean GWAS SNP &chi;<sup>2</sup> |\n| median.gwas.chi2 | Median GWAS SNP &chi;<sup>2</sup> |\n| twas.z           | TWAS Z score |\n| twas.p           | TWAS p-value |\n| alpha            | TWAS alpha | \n| column              | description |\n| ------              | ----------  |\n| chrom               | chromosome  |\n| snp                 | snp identifier |\n| pos                 | bp position |\n| a0                  | non-effect allele |\n| a1                  | effect allele |\n| maf                 | minor allele frequency |\n| ld.score            | ld score (ie. sum<sub>i</sub> r<sub>ij</sub><sup>2</sup>, where r<sub>ij</sub> is LD between snps i, j) |\n| ld.score.causal     | ld score for causal variants |\n| gwas.sim            | GWAS mode |\n| gwas.true           | true causal effect for complex trait |\n| gwas.beta           | beta coefficient in GWAS |\n| gwas.se             | standard error in GWAS |\n| eqtl.true           | true causal effect for expression |\n| eqtl.beta           | beta coefficient in eQTL |\n| eqtl.se             | standard error in eQTL |\n| eqtl.model          | linear model to predict gene expression from genotype |\n| eqtl.model.beta     | coefficient estimated in selected linear model |\n \n"
      },
      "source": "https://raw.githubusercontent.com/mancusolab/twas_sim/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8856815437106969,
      "result": {
        "original_header": "Other Software",
        "type": "Text_excerpt",
        "value": "* [MA-FOCUS](https://github.com/mancusolab/ma-focus): a Bayesian fine-mapping framework using [TWAS](https://www.nature.com/articles/ng.3506) statistics across multiple ancestries to identify the causal genes for complex traits. \n* [SuShiE](https://github.com/mancusolab/sushie): a multi-ancestry variational fine-mapping method on molecular data.\n \n"
      },
      "source": "https://raw.githubusercontent.com/mancusolab/twas_sim/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/mancusolab/twas_sim/wiki"
      },
      "source": "https://raw.githubusercontent.com/mancusolab/twas_sim/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/mancusolab/twas_sim/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/mancusolab/twas_sim/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "mancusolab/twas_sim"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "twas_sim"
      },
      "source": "https://raw.githubusercontent.com/mancusolab/twas_sim/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/mancusolab/twas_sim/master/example.external.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/mancusolab/twas_sim/master/example.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/mancusolab/twas_sim/master/example.slurm.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "`twas_sim`"
        ],
        "type": "Text_excerpt",
        "value": "To download `twas_sim`, first type the commands\n\n    git clone https://github.com/mancusolab/twas_sim.git\n    cd twas_sim\n\nthen,\n\n    conda env create --file environment.yml\n    conda activate twas_sim\n"
      },
      "source": "https://raw.githubusercontent.com/mancusolab/twas_sim/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9999989347765552,
      "result": {
        "original_header": "Overview",
        "type": "Text_excerpt",
        "value": "The script [example.sh](https://github.com/mancusolab/twas_sim/blob/master/example.sh) generates a single TWAS statistic using the simulator [sim.py](https://github.com/mancusolab/twas_sim/blob/master/sim.py). Please make sure to update the corresponding paths in `example.sh` first. The scripts rely on PLINK-formatted genotype data. We recommend to use data from [1000G](https://data.broadinstitute.org/alkesgroup/LDSCORE/1000G_Phase3_plinkfiles.tgz) as reference genotypes. Make sure to enter the command when you are done with the simulator:\n```conda deactivate```\n \n"
      },
      "source": "https://raw.githubusercontent.com/mancusolab/twas_sim/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/mancusolab/twas_sim/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "eqtl, gwas, python, simulation, twas"
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "twas_sim"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "mancusolab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 8504,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 3107,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 800,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/mancusolab/twas_sim/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "license",
    "faq",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 09:19:38",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 26
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Support",
        "parent_header": [
          "`twas_sim`"
        ],
        "type": "Text_excerpt",
        "value": "Please report any bugs or feature requests in the Issue Tracker. If users have any questions or comments, please contact Xinran Wang (xwang505@usc.edu), Zeyun Lu (zeyunlu@usc.edu), and Nicholas Mancuso (nmancuso@usc.edu).\n"
      },
      "source": "https://raw.githubusercontent.com/mancusolab/twas_sim/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "`twas_sim`"
        ],
        "type": "Text_excerpt",
        "value": "[sim.py](https://github.com/mancusolab/twas_sim/blob/master/sim.py) is the actual simulator. Its usage is below:\n\n    usage: sim.py [-h] [--eqtl-prefix EQTL_PREFIX] [--test-prefix TEST_PREFIX]\n              [--fast-gwas-sim] [--ngwas NGWAS] [--nqtl NQTL] [--IDX IDX]\n              [--ncausal NCAUSAL] [--ld-ridge LD_RIDGE]\n              [--linear-model {lasso,enet,ridge,trueqtl,external}]\n              [--external-module EXTERNAL_MODULE] [--eqtl-h2 EQTL_H2]\n              [--h2ge H2GE] [--indep-gwas] [--h2g-gwas H2G_GWAS] [-o OUTPUT]\n              [-c] [--seed SEED]\n              prefix\n\n    Simulate TWAS using real genotype data\n\n      optional arguments:\n        -h, --help            show this help message and exit\n        --eqtl-prefix EQTL_PREFIX\n                              Optional prefix to PLINK-formatted data for eQTL LD\n                              information. Otherwise use GWAS LD. (default: None)\n        --test-prefix TEST_PREFIX\n                              Optional prefix to PLINK-formatted data for LD\n                              information in TWAS test statistic. Otherwise use GWAS\n                              LD. (default: None)\n        --fast-gwas-sim       If set then simulate GWAS summary data directly from\n                              LD (default: False)\n        --ngwas NGWAS         Sample size for GWAS panel (default: 100000)\n        --nqtl NQTL           Sample size for eQTL panel (default: 500)\n        --IDX IDX             Simulation index (default: None)\n        --ncausal NCAUSAL     Number of causal SNPs for gene expression/trait. Can\n                              represent explicit number (e.g., 1, 10), a percentage\n                              using the 'pct' modifier (e.g., '1pct', '10pct'), or\n                              an average under a truncated Poisson model (e.g.,\n                              '1avg', '10avg'). (default: 1)\n        --ld-ridge LD_RIDGE   Offset to add to LD Diagonal (default: 0.1)\n        --linear-model {lasso,enet,ridge,trueqtl,external}\n                              Linear model to predict gene expression from genotype.\n                              Use external to indicate an external module should be\n                              loaded. (default: lasso)\n        --external-module EXTERNAL_MODULE\n                              Path to external Python file with custom `fit`\n                              function. Only used if `--linear-module=external`.\n                              E.g., if `my_module.py` contains `fit function then\n                              pass in `my_module`. (default: None)\n        --eqtl-h2 EQTL_H2     The SNP heritability of gene expression. (default:0.1)\n        --h2ge H2GE           Phenotypic variance explained by genetic component of\n                              gene expression, (default: 0.01)\n        --indep-gwas          Generate GWAS effect-sizes independently from eQTLs.\n                              (default: False)\n        --h2g-gwas H2G_GWAS   The SNP heritability of downstream phenotype. Only\n                              used when `--indep-gwas` is set. (default: 0.01)\n        -o OUTPUT, --output OUTPUT\n                              Output prefix (default: None)\n        -c, --compress        Compress output (gzip) (default: False)\n        --seed SEED           Seed for random number generation (default: None)\n"
      },
      "source": "https://raw.githubusercontent.com/mancusolab/twas_sim/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "<a href=\"https://github.com/mancusolab/twas_sim/blob/master/example.sh\">example.sh</a>",
        "parent_header": [
          "`twas_sim`",
          "Example"
        ],
        "type": "Text_excerpt",
        "value": "This example script generates a single TWAS statistic using the simulator [sim.py](https://github.com/mancusolab/twas_sim/blob/master/sim.py). The simulator currently supports fitting LASSO, Elastic Net, and GBLUP prediction models to predict gene expression into GWAS. It is easily extendable with dynamic import function to include additional linear models.\n\n<details>\n<summary>show details</summary>\n\n* First, we define GWAS sample size, eQTL sample size, eQTL model, eQTL h2g, variance explained in complex trait, and linear model:\n  ```\n  N=100000 # N GWAS\n  NGE=500 # N EQTL\n  MODEL=1 # eQTL model; see sim.py for details\n  H2G=0.1 # eQTL h2g\n  H2GE=0.001 # variance explained in complex trait; 0 (null) to 0.01 (huge effect) are reasonable values\n  LINEAR_MODEL=enet\n  ```\n\n* Then, we call optional arguments to generate TWAS test statistics.\n  * In this example, we use the first reference panel to compute GWAS LD information and the second reference panel to compute eQTL and TWAS LD information.\n  ```\n  python sim.py \\\n      $odir/twas_sim_sample1_loci${IDX} \\\n      --eqtl-prefix $odir/twas_sim_sample2_loci${IDX} \\\n      --test-prefix $odir/twas_sim_sample2_loci${IDX} \\\n      --ngwas $N \\\n      --nqtl $NGE \\\n      --ncausal $MODEL \\\n      --eqtl-h2 $H2G \\\n      --fast-gwas-sim \\\n      --IDX ${IDX}\\\n      --h2ge $H2GE \\\n      --linear-model $LINEAR_MODEL \\\n      --seed ${IDX} \\\n      --output $odir/twas_sim_loci${IDX}\n  ```\n</details>\n"
      },
      "source": "https://raw.githubusercontent.com/mancusolab/twas_sim/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "<a href=\"https://github.com/mancusolab/twas_sim/blob/master/example.external.sh\">example.external.sh</a>",
        "parent_header": [
          "`twas_sim`",
          "Example"
        ],
        "type": "Text_excerpt",
        "value": "This script works as a showcase of the dynamic import function mentioned above. It generates a single TWAS statistic with external python module [external_py.py](https://github.com/mancusolab/twas_sim/blob/master/external_py.py) or external R module [external_r.py](https://github.com/mancusolab/twas_sim/blob/master/external_r.py) and [external.R](https://github.com/mancusolab/twas_sim/blob/master/external.R).\n\n<details>\n<summary>show details</summary>\n\n* First, we define GWAS sample size, eQTL sample size, eQTL model, eQTL h2g, variance explained in complex trait, and linear model:\n  ```\n  N=100000 # N GWAS\n  NGE=500 # N EQTL\n  MODEL=1 # eQTL model; see sim.py for details\n  H2G=0.1 # eQTL h2g\n  H2GE=0.001 # variance explained in complex trait; 0 (null) to 0.01 (huge effect) are reasonable values\n  LINEAR_MODEL=external\n  ```\n* Then, we call optional arguments to generate TWAS test statistics.\n  * In this example, we use the first reference panel to compute GWAS LD information and the second reference panel to compute eQTL and TWAS LD information.\n  * twas_sim supports dynamically loading custom code (e.g., Python, R, Julia). Here, we use external R module to fit effect sizes (note: [external_r.py](https://github.com/mancusolab/twas_sim/blob/master/external_r.py) calls [external.R](https://github.com/mancusolab/twas_sim/blob/master/external.R) to call susieR on the simulated data).\n\n  ```\n  python sim.py \\\n      $odir/twas_sim_sample1_loci${IDX} \\\n      --eqtl-prefix $odir/twas_sim_sample2_loci${IDX} \\\n      --test-prefix $odir/twas_sim_sample2_loci${IDX} \\\n      --ngwas $N \\\n      --nqtl $NGE \\\n      --ncausal $MODEL \\\n      --eqtl-h2 $H2G \\\n      --fast-gwas-sim \\\n      --IDX ${IDX}\\\n      --h2ge $H2GE \\\n      --linear-model $LINEAR_MODEL \\\n      --external-module external_r \\\n      --seed ${IDX} \\\n      --output $odir/twas_sim_loci${IDX}\n  ```\n</details>\n"
      },
      "source": "https://raw.githubusercontent.com/mancusolab/twas_sim/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "<a href=\"https://github.com/mancusolab/twas_sim/blob/master/example.slurm.sh\">example.slurm.sh</a>",
        "parent_header": [
          "`twas_sim`",
          "Example"
        ],
        "type": "Text_excerpt",
        "value": "This is a batch script of the simulator. It generates TWAS statistic for a list of parameters specified in [slurm.params](https://github.com/mancusolab/twas_sim/blob/master/slurm.params).\n\n<details>\n<summary>show details</summary>\n\n* First, we define a list of GWAS sample size, eQTL sample size, eQTL model, eQTL h2g, variance explained in complex trait, and linear model. The example below shows the first 4 lines of [slurm.params](https://github.com/mancusolab/twas_sim/blob/master/slurm.params):\n\n  | ID    | N\t        | NGE\t     | MODEL  \t| H2G\t   | H2GE\t    | LINEAR_MODEL |\n  | ------| ------    | ------   | ------   | ------ | ------   | ------       |\n  | 1\t    | 50000\t    | 500\t     | 1    \t  | 0.1\t   | 0\t      | enet         |\n  | 2\t    | 100000\t  | 500\t     | 1\t      | 0.1\t   | 0\t      | enet         |\n  | 3\t    | 200000\t  | 500\t     | 1\t      | 0.1\t   | 0\t      | enet         |\n  | 4\t    | 500000\t  | 500\t     | 1\t      | 0.1\t   | 0\t      | enet         |\n  | ...   | ...       | ...      | ...      | ...    | ...      | ...          |\n\n\n* Second, we link [slurm.params](https://github.com/mancusolab/twas_sim/blob/master/slurm.params) to the shell script:\n  ```\n  # ID\tN\tNGE\tMODEL\tH2G\tH2GE\tLINEAR_MODEL\n  IDX=$1\n  N=$2 # N GWAS\n  NGE=$3 # N EQTL\n  MODEL=$4 # eQTL model; see sim.py for details\n  H2G=$5 # eQTL h2g\n  H2GE=$6 # h2ge in complex trait; 0 (null) to 0.01 (huge effect) are reasonable values\n  LINEAR_MODEL=$7\n  ```\n\n* Then, we call optional arguments to generate TWAS test statistics for each user-defined parameter sets.\n  * In this example, we use the first reference panel to compute GWAS LD information and the second reference panel to compute eQTL and TWAS LD information.\n  * The first 4 lines of the [slurm.params](https://github.com/mancusolab/twas_sim/blob/master/slurm.params) generate 4 TWAS test statistics using GWAS sample size of 50K, 100K, 200K, and 500K, with all other parameters fixed.\n\n  ```\n  python sim.py \\\n        $odir/twas_sim_sample1_loci${IDX} \\\n        --eqtl-prefix $odir/twas_sim_sample2_loci${IDX} \\\n        --test-prefix $odir/twas_sim_sample2_loci${IDX} \\\n        --ngwas $N \\\n        --nqtl $NGE \\\n        --ncausal $MODEL \\\n        --eqtl-h2 $H2G \\\n        --fast-gwas-sim \\\n        --IDX ${IDX}\\\n        --h2ge $H2GE \\\n        --linear-model $LINEAR_MODEL \\\n        --seed ${IDX} \\\n        --output $odir/twas_sim_loci${IDX}.fast\n  ```\n\n* Here, we run ten jobs at a time and 40 jobs in total:\n    \n  ```\n  #SBATCH --array=1-4\n  ```\n  ```\n  start=`python -c \"print( 1 + 10 * int(int($NR-1)))\"`\n  stop=$((start + 9))\n  ```\n</details>\n"
      },
      "source": "https://raw.githubusercontent.com/mancusolab/twas_sim/master/README.md",
      "technique": "header_analysis"
    }
  ]
}