{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "Biodivine/AEON.py"
        ],
        "type": "Text_excerpt",
        "value": "If you used AEON.py for some academic work, we'd be very happy if you could cite it using \nthe following publication:\n\n```\nBene\u0161, N., Brim, L., Huvar, O., Pastva, S., \u0160afr\u00e1nek, D., & \u0160mij\u00e1kov\u00e1, E. (2022). \nAEON. py: Python library for attractor analysis in asynchronous Boolean networks. \nBioinformatics, 38(21), 4978-4980.\n```\n"
      },
      "source": "https://raw.githubusercontent.com/sybila/biodivine-aeon-py/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/sybila/biodivine-aeon-py"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-12-21T10:45:57Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-03T12:50:11Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9670124601763578,
      "result": {
        "original_header": "Biodivine/AEON.py",
        "type": "Text_excerpt",
        "value": " > AEON.py now finally has API documentation! You can learn more about the individual methods and classes \n > [here](https://biodivine.fi.muni.cz/docs/aeon-py/latest/).  \nAEON.py provides Python bindings for the internal and experimental functionality of the tool\n[AEON](https://biodivine.fi.muni.cz/aeon/). You can use it to perform analysis of \nBoolean networks with symbolic (BDD-based or solver-based) methods. In particular, AEON.py supports: \n - Classical and *partially specified* Boolean networks (i.e. with missing or partially unknown update functions).\n - Major network formats like `.sbml` and `.bnet`, including model validation.\n - Competitive symbolic methods for:\n    - Attractor detection.\n    - Fixed-point enumeration.\n    - Minimal/maximal trap space enumeration.\n - Symbolic (H)CTL model checking and parameter synthesis.\n - Control/reprogramming methods.\n - Arbitrary symbolic operations on sets of Boolean states/space/functions represented through BDDs.\n \n"
      },
      "source": "https://raw.githubusercontent.com/sybila/biodivine-aeon-py/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9598212696487101,
      "result": {
        "original_header": "Development instructions",
        "type": "Text_excerpt",
        "value": "To build AEON.py from source, you generally need to follow the guides/instructions available for the\n[maturin](https://github.com/PyO3/maturin) tool. However, since some of the functionality in AEON.py\nrequires the Z3 solver, the process is slightly more error-prone, as it also involves C dependencies,\nnot only pure Rust (this also complicates builds on Apple Silicon and more exotic CPUs).\n \n"
      },
      "source": "https://raw.githubusercontent.com/sybila/biodivine-aeon-py/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9415572151255265,
      "result": {
        "original_header": "Local builds",
        "type": "Text_excerpt",
        "value": "To build and test AEON.py locally, you can generally follow the official instructions for building\npackages using `maturin`. However, you have two options for integrating with Z3: either as a static\nor as a dynamic library.  \n - Using static integration is more \"stable\" since the library will use a known \n   version of Z3 tested by us. However, Z3 will need to be built during the first\n   compilation, which can take ~30min (subsequent builds should be faster thanks\n   to the build cache). You can also encounter build errors if there are issues with\n   your C/C++ toolchain. To use the static linking method, you'll need to add\n   extra commandline arguments when building the library (see below).\n - Dynamic integration uses the version of Z3 installed on your system. As such,\n   the compilation is faster since there's no need to build Z3. However, we do not\n   guarantee that your installed version is compatible. Furthermore, you'll need to\n   make sure your version is installed in such a way that it can be used as a dynamic\n   library (the `.h` and `.so/.dylib/.dll` files are available in their respective\n   include paths). Ideally, to use this approach, you should only need to install Z3 on\n   your system using the official method (e.g. `apt install z3`, `brew install z3`, or\n   use the official Windows installer). \nIn general, we recommend starting with dynamic linking, because if everything works, it is faster\nand easier. However, in case you run into trouble, static linking could be actually easier\nto debug, since it depends less on your actual configuration and is thus easier to reproduce across \ndifferent machines. Similarly, it can be easier to use static linking on systems where Z3 is not \navailable through an official installer or cannot be installed globally. \n > On Apple Silicon, dynamic linking for Z3 is currently not working out-of-the-box if\n > you installed Z3 through `brew`, because the library files are not discoverable by `clang`\n > by default. To fix this issue, you need to update `CPATH` and `LIBRARY_PATH` (use correct\n > Z3 location based on your installed version):\n > ```bash\n > export CPATH=$CPATH:/opt/homebrew/Cellar/z3/4.12.2/include          \n > export LIBRARY_PATH=$LIBRARY_PATH:/opt/homebrew/Cellar/z3/4.12.2/lib\n > ``` \nIf the build passes, you should be able to use the library on your local machine. Feel free to also install Jupyter\nnotebooks and test the library in the interactive environment (or on one of the examples).\n \n"
      },
      "source": "https://raw.githubusercontent.com/sybila/biodivine-aeon-py/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8438707341534415,
      "result": {
        "original_header": "Other tasks",
        "type": "Text_excerpt",
        "value": "After successfully running `maturin develop`, you can use `pytest ./tests` to execute a set of Python unit tests.\nCode coverage can be computed for these tests based on the [official example](https://github.com/cjermain/rust-python-coverage).\nBasic type integrity of the tests can be also validated through `mypy tests`. \nSimilarly, you can generate documentation using `pdoc` by running `python3 -m pdoc biodivine_aeon`. This combines \ndocumentation in Rust comments with type aliases in `biodivine_aeon/__init__.py`.\n \n"
      },
      "source": "https://raw.githubusercontent.com/sybila/biodivine-aeon-py/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9470383735278375,
      "result": {
        "original_header": "Publishing",
        "type": "Text_excerpt",
        "value": "Finally, you may want to release an alpha/beta version of the library to test that everything is working correctly\non all platforms (builds are notoriously finicky in these situations, since we essentially have to build for\nevery platform and multiple versions of Python). Fortunately, the CI is set up to automatically build \nand publish the library on all relevant platforms every time a new tag is pushed.  \nBefore you publish a new version, make sure that the build works at least on your own machine. Then, make \nsure to update the library versions in all the build files. Specifically, you should update the version in \n`pyproject.toml` (publishing on PyPI), `cargo.toml` (Rust crate version, not published at the moment), and \n`conda/meta.yml` (publishing on Anaconda).  \nNot everything is relevant for every publishing method, but it is generally a good idea to update all files to ensure\nconsistency. For `pyproject.toml` and `conda/meta.yml`, you can use suffix `aX` to indicate that the version is\nan \"alpha\" version (e.g. `0.4.0a2`). In `Cargo.toml`, you have to use `-alphaX` instead (e.g. `0.4.0-alpha2`). \nOnce everything is working as expected, you can remove the `alpha` suffixes and properly release a new version (in \nwhich case, please include a detailed changelog in the release description on GitHub).\n \n"
      },
      "source": "https://raw.githubusercontent.com/sybila/biodivine-aeon-py/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Documentation",
        "parent_header": [
          "Biodivine/AEON.py"
        ],
        "type": "Text_excerpt",
        "value": "The documentation of the AEON.py API is available [here](https://biodivine.fi.muni.cz/docs/aeon-py/latest/).\nIt should describe the functionality of all the classes/methods, but it currently does not \nprovide self-contained examples.\n\nFor that, we recommend the Jupyter notebooks available in the `examples` directory:\n - There are three non-trivial case studies using AEON.py for analysing attractor and phenotype\n bifurcations in real-world Boolean networks.\n - There are several \"workflow\" examples. Some are focused on a specific task (e.g. attractor\n or fixed-point detection) while others provide a general \"overview\" of a particular topic (\n like BDDs and symbolic algorithms in general).\n\nAdditionally, the \n[manual](https://biodivine.fi.muni.cz/aeon/manual/v0.4.0/index.html) of the standalone AEON tool\ncan be helpful to understand some of the high-level concepts related\nto partially specified Boolean networks (both classical and partially specified).\n"
      },
      "source": "https://raw.githubusercontent.com/sybila/biodivine-aeon-py/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/sybila/biodivine-aeon-py/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sybila/biodivine-aeon-py/main/example/case-study/t-cell-signalling/main.ipynb"
      },
      "source": "https://raw.githubusercontent.com/sybila/biodivine-aeon-py/main/example/case-study/t-cell-signalling/main.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sybila/biodivine-aeon-py/main/example/case-study/interferon-pathway/main.ipynb"
      },
      "source": "https://raw.githubusercontent.com/sybila/biodivine-aeon-py/main/example/case-study/interferon-pathway/main.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sybila/biodivine-aeon-py/main/example/case-study/control/main.ipynb"
      },
      "source": "https://raw.githubusercontent.com/sybila/biodivine-aeon-py/main/example/case-study/control/main.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sybila/biodivine-aeon-py/main/example/case-study/butanol-production/main.ipynb"
      },
      "source": "https://raw.githubusercontent.com/sybila/biodivine-aeon-py/main/example/case-study/butanol-production/main.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sybila/biodivine-aeon-py/main/example/workflow/comparing-partial-and-full-functions.ipynb"
      },
      "source": "https://raw.githubusercontent.com/sybila/biodivine-aeon-py/main/example/workflow/comparing-partial-and-full-functions.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sybila/biodivine-aeon-py/main/example/workflow/XX-network-reductions.ipynb"
      },
      "source": "https://raw.githubusercontent.com/sybila/biodivine-aeon-py/main/example/workflow/XX-network-reductions.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sybila/biodivine-aeon-py/main/example/workflow/03-symbolic-data-structures.ipynb"
      },
      "source": "https://raw.githubusercontent.com/sybila/biodivine-aeon-py/main/example/workflow/03-symbolic-data-structures.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sybila/biodivine-aeon-py/main/example/workflow/classification.ipynb"
      },
      "source": "https://raw.githubusercontent.com/sybila/biodivine-aeon-py/main/example/workflow/classification.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sybila/biodivine-aeon-py/main/example/workflow/00-binary-decision-diagrams.ipynb"
      },
      "source": "https://raw.githubusercontent.com/sybila/biodivine-aeon-py/main/example/workflow/00-binary-decision-diagrams.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sybila/biodivine-aeon-py/main/example/workflow/computing-fixed-points.ipynb"
      },
      "source": "https://raw.githubusercontent.com/sybila/biodivine-aeon-py/main/example/workflow/computing-fixed-points.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sybila/biodivine-aeon-py/main/example/workflow/01-boolean-network-manipulation.ipynb"
      },
      "source": "https://raw.githubusercontent.com/sybila/biodivine-aeon-py/main/example/workflow/01-boolean-network-manipulation.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sybila/biodivine-aeon-py/main/example/workflow/computing-attractors.ipynb"
      },
      "source": "https://raw.githubusercontent.com/sybila/biodivine-aeon-py/main/example/workflow/computing-attractors.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sybila/biodivine-aeon-py/main/example/workflow/model-checking.ipynb"
      },
      "source": "https://raw.githubusercontent.com/sybila/biodivine-aeon-py/main/example/workflow/model-checking.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sybila/biodivine-aeon-py/main/example/workflow/02-network-file-formats.ipynb"
      },
      "source": "https://raw.githubusercontent.com/sybila/biodivine-aeon-py/main/example/workflow/02-network-file-formats.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/sybila/biodivine-aeon-py/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "sybila/biodivine-aeon-py"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Biodivine/AEON.py"
      },
      "source": "https://raw.githubusercontent.com/sybila/biodivine-aeon-py/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sybila/biodivine-aeon-py/main/manylinux-image/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/sybila/biodivine-aeon-py/main/manylinux-image/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sybila/biodivine-aeon-py/main/conda/build.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "Biodivine/AEON.py"
        ],
        "type": "Text_excerpt",
        "value": "The package is available through `PyPI` for all major operating systems (Windows, Linux and macOS). \nTo install it, you can simply run:\n\n```\npip install biodivine_aeon\n```\n\nAEON.py is also available through [conda](https://anaconda.org/daemontus/biodivine_aeon) \nand the [CoLoMoTo Docker](https://github.com/colomoto/colomoto-docker) environment.\n"
      },
      "source": "https://raw.githubusercontent.com/sybila/biodivine-aeon-py/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9993758026453259,
      "result": {
        "original_header": "Development instructions",
        "type": "Text_excerpt",
        "value": "To build AEON.py from source, you generally need to follow the guides/instructions available for the\n[maturin](https://github.com/PyO3/maturin) tool. However, since some of the functionality in AEON.py\nrequires the Z3 solver, the process is slightly more error-prone, as it also involves C dependencies,\nnot only pure Rust (this also complicates builds on Apple Silicon and more exotic CPUs).\n \n"
      },
      "source": "https://raw.githubusercontent.com/sybila/biodivine-aeon-py/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9994804056169935,
      "result": {
        "original_header": "Local builds",
        "type": "Text_excerpt",
        "value": "To build and test AEON.py locally, you can generally follow the official instructions for building\npackages using `maturin`. However, you have two options for integrating with Z3: either as a static\nor as a dynamic library.  \n - Using static integration is more \"stable\" since the library will use a known \n   version of Z3 tested by us. However, Z3 will need to be built during the first\n   compilation, which can take ~30min (subsequent builds should be faster thanks\n   to the build cache). You can also encounter build errors if there are issues with\n   your C/C++ toolchain. To use the static linking method, you'll need to add\n   extra commandline arguments when building the library (see below).\n - Dynamic integration uses the version of Z3 installed on your system. As such,\n   the compilation is faster since there's no need to build Z3. However, we do not\n   guarantee that your installed version is compatible. Furthermore, you'll need to\n   make sure your version is installed in such a way that it can be used as a dynamic\n   library (the `.h` and `.so/.dylib/.dll` files are available in their respective\n   include paths). Ideally, to use this approach, you should only need to install Z3 on\n   your system using the official method (e.g. `apt install z3`, `brew install z3`, or\n   use the official Windows installer). \nIn general, we recommend starting with dynamic linking, because if everything works, it is faster\nand easier. However, in case you run into trouble, static linking could be actually easier\nto debug, since it depends less on your actual configuration and is thus easier to reproduce across \ndifferent machines. Similarly, it can be easier to use static linking on systems where Z3 is not \navailable through an official installer or cannot be installed globally. \n > In any case, on linux, you'll need typical \"essential\" build tools like `cmake` and `clang`\n > to even build the Z3 dependency, regardless of the linking process. On debian-ish distros,\n > `apt install build-essential cmake clang` should be sufficient. \n > On Apple Silicon, dynamic linking for Z3 is currently not working out-of-the-box if\n > you installed Z3 through `brew`, because the library files are not discoverable by `clang`\n > by default. To fix this issue, you need to update `CPATH` and `LIBRARY_PATH` (use correct\n > Z3 location based on your installed version):\n > ```bash\n > export CPATH=$CPATH:/opt/homebrew/Cellar/z3/4.12.2/include          \n > export LIBRARY_PATH=$LIBRARY_PATH:/opt/homebrew/Cellar/z3/4.12.2/lib\n > ``` \nTo install a local version of AEON.py, you then simply need to follow the same steps outlined \nin the `maturin` [tutorial](https://www.maturin.rs/tutorial): \n - Install `maturin` (see [here](https://www.maturin.rs/installation)).\n - Create a Python [virtual environment](https://docs.python.org/3/library/venv.html) for testing and activate it.\n - \\[Dynamic linking\\] Run `maturin develop` to install a local version of AEON.py into this virtual environment.\n - \\[Static linking\\] Run `maturin develop --features static-z3` to do the same, but with a static version of Z3. \nIf the build passes, you should be able to use the library on your local machine. Feel free to also install Jupyter\nnotebooks and test the library in the interactive environment (or on one of the examples).\n \n"
      },
      "source": "https://raw.githubusercontent.com/sybila/biodivine-aeon-py/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9695692997431012,
      "result": {
        "original_header": "Publishing",
        "type": "Text_excerpt",
        "value": "Finally, you may want to release an alpha/beta version of the library to test that everything is working correctly\non all platforms (builds are notoriously finicky in these situations, since we essentially have to build for\nevery platform and multiple versions of Python). Fortunately, the CI is set up to automatically build \nand publish the library on all relevant platforms every time a new tag is pushed.  \nBefore you publish a new version, make sure that the build works at least on your own machine. Then, make \nsure to update the library versions in all the build files. Specifically, you should update the version in \n`pyproject.toml` (publishing on PyPI), `cargo.toml` (Rust crate version, not published at the moment), and \n`conda/meta.yml` (publishing on Anaconda).  \nNot everything is relevant for every publishing method, but it is generally a good idea to update all files to ensure\nconsistency. For `pyproject.toml` and `conda/meta.yml`, you can use suffix `aX` to indicate that the version is\nan \"alpha\" version (e.g. `0.4.0a2`). In `Cargo.toml`, you have to use `-alphaX` instead (e.g. `0.4.0-alpha2`). \nFinally, either create a new git tag and push it, or create a new GitHub release with the new tag. Ideally, the tag \nshould be equivalent to the Rust crate version (e.g. `0.4.0-alpha2`).  \n > If the build fails, and you want to fix it, you can actually reuse the same tag: Once you've made the changes, \n > delete the tag locally and push the change (this may need a force push, but since you are the only person using \n > this tag, it should be ok). Then create the tag again and push it again. It should be also possible to \n > [overwrite](https://stackoverflow.com/questions/25815631/git-force-push-tag-when-the-tag-already-exists-on-remote) \n > the tag directly. \nOnce everything is working as expected, you can remove the `alpha` suffixes and properly release a new version (in \nwhich case, please include a detailed changelog in the release description on GitHub).\n \n"
      },
      "source": "https://raw.githubusercontent.com/sybila/biodivine-aeon-py/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/sybila/biodivine-aeon-py/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2021 sybila\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/sybila/biodivine-aeon-py/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "biodivine-aeon-py"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "sybila"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Rust",
        "size": 695450,
        "type": "Programming_language",
        "value": "Rust"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 684056,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 185354,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 571,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 344,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Batchfile",
        "size": 109,
        "type": "Programming_language",
        "value": "Batchfile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sybila/biodivine-aeon-py/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "daemontus",
          "type": "User"
        },
        "date_created": "2024-09-20T16:12:34Z",
        "date_published": "2024-09-20T16:14:31Z",
        "description": "Introduces a new phenotype classification method: Now, you can pick between `classify_phenotypes` and `classify_attractor_phenotypes`, where the second option actually classifies each attractor in isolation, so you get a better idea of the actual possible behaviors (the first option only detects if a phenotype is possible at all).",
        "html_url": "https://github.com/sybila/biodivine-aeon-py/releases/tag/v1.1.0",
        "name": "v1.1.0",
        "release_id": 176149248,
        "tag": "v1.1.0",
        "tarball_url": "https://api.github.com/repos/sybila/biodivine-aeon-py/tarball/v1.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/sybila/biodivine-aeon-py/releases/176149248",
        "value": "https://api.github.com/repos/sybila/biodivine-aeon-py/releases/176149248",
        "zipball_url": "https://api.github.com/repos/sybila/biodivine-aeon-py/zipball/v1.1.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "daemontus",
          "type": "User"
        },
        "date_created": "2024-09-18T10:30:06Z",
        "date_published": "2024-09-18T10:32:17Z",
        "description": "Compared to `1.0.0`, updates the `lib-bdd` dependency to version `0.5.21`. This does not add any new significant functionality, but it fixes a performance problem in the implementation of `mk_dnf`/`mk_cnf`. It also uses a new, improved `to_dnf` algorithm. Finally, `to_dnf` now has a `size_limit` argument which interrupts the method if the DNF becomes too large.\r\n\r\n## What's Changed\r\n* Update `lib-bdd` to 0.5.21 by @daemontus in https://github.com/sybila/biodivine-aeon-py/pull/24\r\n\r\n\r\n**Full Changelog**: https://github.com/sybila/biodivine-aeon-py/compare/v1.0.0...v1.0.1",
        "html_url": "https://github.com/sybila/biodivine-aeon-py/releases/tag/v1.0.1",
        "name": "v1.0.1",
        "release_id": 175630123,
        "tag": "v1.0.1",
        "tarball_url": "https://api.github.com/repos/sybila/biodivine-aeon-py/tarball/v1.0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/sybila/biodivine-aeon-py/releases/175630123",
        "value": "https://api.github.com/repos/sybila/biodivine-aeon-py/releases/175630123",
        "zipball_url": "https://api.github.com/repos/sybila/biodivine-aeon-py/zipball/v1.0.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "daemontus",
          "type": "User"
        },
        "date_created": "2024-09-16T07:49:58Z",
        "date_published": "2024-09-16T08:41:52Z",
        "description": "This is essentially a complete rewrite of the Python wrappers. Much has been added. Please consult the API documentation regarding the new interface: https://biodivine.fi.muni.cz/docs/aeon-py/latest/biodivine_aeon.html",
        "html_url": "https://github.com/sybila/biodivine-aeon-py/releases/tag/v1.0.0",
        "name": "v1.0.0",
        "release_id": 175184361,
        "tag": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/sybila/biodivine-aeon-py/tarball/v1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/sybila/biodivine-aeon-py/releases/175184361",
        "value": "https://api.github.com/repos/sybila/biodivine-aeon-py/releases/175184361",
        "zipball_url": "https://api.github.com/repos/sybila/biodivine-aeon-py/zipball/v1.0.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "smijeva",
          "type": "User"
        },
        "date_created": "2023-12-29T18:32:23Z",
        "date_published": "2023-12-29T18:35:14Z",
        "html_url": "https://github.com/sybila/biodivine-aeon-py/releases/tag/0.0.9-alpha2",
        "name": "0.0.9-alpha2",
        "release_id": 135378484,
        "tag": "0.0.9-alpha2",
        "tarball_url": "https://api.github.com/repos/sybila/biodivine-aeon-py/tarball/0.0.9-alpha2",
        "type": "Release",
        "url": "https://api.github.com/repos/sybila/biodivine-aeon-py/releases/135378484",
        "value": "https://api.github.com/repos/sybila/biodivine-aeon-py/releases/135378484",
        "zipball_url": "https://api.github.com/repos/sybila/biodivine-aeon-py/zipball/0.0.9-alpha2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "smijeva",
          "type": "User"
        },
        "date_created": "2023-11-22T13:33:34Z",
        "date_published": "2023-11-22T14:46:09Z",
        "html_url": "https://github.com/sybila/biodivine-aeon-py/releases/tag/0.4.0-alphaa5",
        "name": "v0.4.0a5",
        "release_id": 131009130,
        "tag": "0.4.0-alphaa5",
        "tarball_url": "https://api.github.com/repos/sybila/biodivine-aeon-py/tarball/0.4.0-alphaa5",
        "type": "Release",
        "url": "https://api.github.com/repos/sybila/biodivine-aeon-py/releases/131009130",
        "value": "https://api.github.com/repos/sybila/biodivine-aeon-py/releases/131009130",
        "zipball_url": "https://api.github.com/repos/sybila/biodivine-aeon-py/zipball/0.4.0-alphaa5"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "smijeva",
          "type": "User"
        },
        "date_created": "2023-11-20T22:03:55Z",
        "date_published": "2023-11-20T22:06:45Z",
        "html_url": "https://github.com/sybila/biodivine-aeon-py/releases/tag/0.4.0-alpha4",
        "name": "v0.4.0a4",
        "release_id": 130500015,
        "tag": "0.4.0-alpha4",
        "tarball_url": "https://api.github.com/repos/sybila/biodivine-aeon-py/tarball/0.4.0-alpha4",
        "type": "Release",
        "url": "https://api.github.com/repos/sybila/biodivine-aeon-py/releases/130500015",
        "value": "https://api.github.com/repos/sybila/biodivine-aeon-py/releases/130500015",
        "zipball_url": "https://api.github.com/repos/sybila/biodivine-aeon-py/zipball/0.4.0-alpha4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "smijeva",
          "type": "User"
        },
        "date_created": "2023-11-06T20:43:18Z",
        "date_published": "2023-11-06T20:45:06Z",
        "html_url": "https://github.com/sybila/biodivine-aeon-py/releases/tag/0.4.0-alpha3",
        "name": "Phenotype control alpha release 3",
        "release_id": 128216617,
        "tag": "0.4.0-alpha3",
        "tarball_url": "https://api.github.com/repos/sybila/biodivine-aeon-py/tarball/0.4.0-alpha3",
        "type": "Release",
        "url": "https://api.github.com/repos/sybila/biodivine-aeon-py/releases/128216617",
        "value": "https://api.github.com/repos/sybila/biodivine-aeon-py/releases/128216617",
        "zipball_url": "https://api.github.com/repos/sybila/biodivine-aeon-py/zipball/0.4.0-alpha3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "daemontus",
          "type": "User"
        },
        "date_created": "2023-10-18T20:03:18Z",
        "date_published": "2023-10-18T20:55:02Z",
        "description": "This release adds some new functionality and incorporates a lot of the latest changes in biodivine libraries. As opposed to the transition from `0.1.0` to `0.2.0`, transition to `0.3.0` should not have any breaking changes.\r\n\r\nComplete list of changes:\r\n - Added bindings for HCTL and attractor property classification:\r\n    * `run_hctl_classification`, `run_attractor_classification`: compute HCTL or attractor classification map.\r\n    * `save_class_archive`, `load_class_archive`: load/store classification results for later use or GUI analysis.\r\n    * `get_model_assertions`, `get_model_properties`: read HCTL assertions/properties from an annotated `.aeon` model.\r\n - Added bindings for HCTL model checking:\r\n    * A `HctlTreeNode` class is used to manipulate and represent HCTL formulas at runtime.\r\n    * `get_extended_stg`: extends a `SymbolicAsyncGraph` with a collection of symbolic variables necessary for model checking.\r\n    * `model_check`, `model_check_multiple`: Basic model checking.\r\n    * `model_check_extended`, `model_check_extended_multiple`: Model checking, but with \"extended\" propositions that can map to arbitrary subsets of states.\r\n    * `mc_analysis`, `mc_analysis_multiple`: Run model checking with progress printing, sanitization, etc.\r\n - Fixed #13, so `BddValuation` and `BddPartialValuation` are now actually iterable objects.\r\n - Added `BddVariableSet::transfer_from`, `SymbolicContext::transfer_from`, and `SymbolicAsyncGraph::transfer_from`/`SymbolicAsyncGraph::transfer_colors_from`/`SymbolicAsyncGraph::transfer_vertices_from`. These methods are used to translate a `Bdd` or a symbolic set between two symbolic domains.\r\n - Added `BooleanNetwork::inline_variable` and `FnUpdate::substitute_variable`, which can be used to implement network reduction.\r\n - Added three new example workflow notebooks:\r\n    * `classification.ipynb`: Classification of network instantiations based on HCTL and attractor properties.\r\n    * `file-formats.ipynb`: A quick overview of supported file formats and their properties/limitations.\r\n    * `model-checking.ipynb`: Model checking of HCTL properties on (partially specified) Boolean networks. \r\n    * Examples for the network reduction process will be added later once we resolve a few remaining issues in the Rust backend.",
        "html_url": "https://github.com/sybila/biodivine-aeon-py/releases/tag/0.3.0",
        "name": "0.3.0",
        "release_id": 125689623,
        "tag": "0.3.0",
        "tarball_url": "https://api.github.com/repos/sybila/biodivine-aeon-py/tarball/0.3.0",
        "type": "Release",
        "url": "https://api.github.com/repos/sybila/biodivine-aeon-py/releases/125689623",
        "value": "https://api.github.com/repos/sybila/biodivine-aeon-py/releases/125689623",
        "zipball_url": "https://api.github.com/repos/sybila/biodivine-aeon-py/zipball/0.3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "smijeva",
          "type": "User"
        },
        "date_created": "2023-10-11T09:44:38Z",
        "date_published": "2023-10-11T11:35:46Z",
        "html_url": "https://github.com/sybila/biodivine-aeon-py/releases/tag/0.4.0-alpha2",
        "name": "Phenotype control alpha release 2",
        "release_id": 124586860,
        "tag": "0.4.0-alpha2",
        "tarball_url": "https://api.github.com/repos/sybila/biodivine-aeon-py/tarball/0.4.0-alpha2",
        "type": "Release",
        "url": "https://api.github.com/repos/sybila/biodivine-aeon-py/releases/124586860",
        "value": "https://api.github.com/repos/sybila/biodivine-aeon-py/releases/124586860",
        "zipball_url": "https://api.github.com/repos/sybila/biodivine-aeon-py/zipball/0.4.0-alpha2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "smijeva",
          "type": "User"
        },
        "date_created": "2023-09-03T17:08:04Z",
        "date_published": "2023-09-03T17:14:38Z",
        "html_url": "https://github.com/sybila/biodivine-aeon-py/releases/tag/0.4.0-alphaa1",
        "name": "Phenotype control alpha release",
        "release_id": 119742089,
        "tag": "0.4.0-alphaa1",
        "tarball_url": "https://api.github.com/repos/sybila/biodivine-aeon-py/tarball/0.4.0-alphaa1",
        "type": "Release",
        "url": "https://api.github.com/repos/sybila/biodivine-aeon-py/releases/119742089",
        "value": "https://api.github.com/repos/sybila/biodivine-aeon-py/releases/119742089",
        "zipball_url": "https://api.github.com/repos/sybila/biodivine-aeon-py/zipball/0.4.0-alphaa1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "smijeva",
          "type": "User"
        },
        "date_created": "2023-09-03T15:35:55Z",
        "date_published": "2023-09-03T17:11:25Z",
        "html_url": "https://github.com/sybila/biodivine-aeon-py/releases/tag/0.4.0-alpha1",
        "name": "Phenotype control alpha version",
        "release_id": 119742004,
        "tag": "0.4.0-alpha1",
        "tarball_url": "https://api.github.com/repos/sybila/biodivine-aeon-py/tarball/0.4.0-alpha1",
        "type": "Release",
        "url": "https://api.github.com/repos/sybila/biodivine-aeon-py/releases/119742004",
        "value": "https://api.github.com/repos/sybila/biodivine-aeon-py/releases/119742004",
        "zipball_url": "https://api.github.com/repos/sybila/biodivine-aeon-py/zipball/0.4.0-alpha1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "daemontus",
          "type": "User"
        },
        "date_created": "2023-06-06T19:17:04Z",
        "date_published": "2023-06-07T08:22:35Z",
        "description": "This is a second \"major\" release of AEON.py. It adds some of the latest functionality from the internal biodivine libraries (although, still not everything is covered). It also improves significantly on several issues of the original `0.1.0` version, which unfortunately means a few breaking changes in the public API. However, we are getting closer to the stable `1.0.0` release, hopefully later this year, which will then have full ongoing backwards compatibility support and proper API documentation. It is almost certain that there will still be further breaking changes between `0.2.0` and `1.0.0` (e.g. we plan to subdivide AEON.py into proper modules), but many of the new APIs introduced in this version can be considered essentially final.\r\n\r\nKey highlights:\r\n - Added support for faster fixed point computation (`FixedPoints` class).\r\n - Added support for projected enumeration of symbolic sets (`SymbolicProjection` class).\r\n - Much better coverage of low-level symbolic operations provided by `lib-bdd`.\r\n - Many new \"static analysis\" methods like feedback vertex set, independent cycles computation, regulatory graph inference, input inlining, etc.\r\n\r\nComplete list of changes (compared to `0.1.1`, some of this was previously available as the `0.2.0aX` pre-releases):\r\n - AEON.py now comes with a bundled Z3 solver used for some internal features.\r\n - Upgraded to Python `3.11` and Rust `1.69.0`, both on PyPI and Conda.\r\n - There is now a more complete set of available workflows and case studies in the `example` directory.\r\n - Changes in `bdd` implementation:\r\n   - **[breaking]** Methods implementing logical operators are now *all* prefixed with `l_*` to avoid clashing with Python keywords. Furthermore, logical operations accept an optional `limit` argument which allows them to fail when the result is too large.\r\n   - **[breaking]** Replaced `Bdd.var_project` and `Bdd.project` with a single polymorphic `Bdd.project_exists` method.\r\n   - **[breaking]** Replaced `Bdd.var_pick` and `Bdd.pick` with a single polymorphic `Bdd.pick` method.\r\n   - **[breaking]** Replaced `Bdd.var_select` and `Bdd.select` with a single polymorphic `Bdd.select` method.\r\n   - **[breaking]** Replaced `Bdd.sat_witness` with a richer API for extracting satisfying valuations (see below).\r\n   - Added a `BddValuation` class. This is essentially a mutable fixed-length list indexed by `BddVariable` objects. This replaces normal \"generic\" lists in many places as the \"default\" argument type. However, whenever possible, the API also accepts normal lists and performs the conversion automatically.\r\n   - Added a `BddPartialValuation` class. This is essentially a mutable dictionary indexed by `BddVariable` objects which returns `None` instead of throwing a `KeyError` for missing values. Similar to `BddValuation`, this also now appears in many method types, but the API should be also fine with plain dictionaries.\r\n   - Added actual API to the `BooleanExpression` class. Now we can manipulate Boolean expressions in Python, but there is a lot of memory copying involved. There is a plan how to fix this in the `1.0` version though, so stay tuned :)\r\n   - Added a `Bdd.sem_eq` semantic equality method (default `==` implementation only supports structural equality).\r\n   - Added a `Bdd.pick_random` method: similar to `Bdd.pick`, but selects a random valuation. Can be parametrized with a seed.\r\n   - Added a `Bdd.project_for_all` method: similar to `project_exists`, but universal instead of existential quantification.\r\n   - Added a `Bdd.restrict` operator: a combination of `select` and `project_exists`.\r\n   - Added `Bdd.support_set` to retrieve the variables in the BDD and `Bdd.size_per_variable` to retrieve the number of nodes that utilize individual variables.\r\n   - Added `Bdd.valuation_witness` and `Bdd.valuation_random` as well as `Bdd.clause_witness` and `Bdd.clause_random` which allow picking elements (either full valuations or partial \"cubes\"/\"clauses\").\r\n   - Added `Bdd.valuation_iterator` and `Bdd.clause_iterator` which are actual iterable objects through which we can explore all satisfying valuations of a BDD. These are implemented through `BddValuationIterator` and `BddClauseIterator` classes.\r\n   - Added `BddVariableSet.mk_valuation` which \"materializes\" a `BddValuation` (or a compatible type) into a singleton `Bdd` (this was already supported for `BddPartialValuation`).\r\n   - `Bdd.to_dot` now optionally supports `zero-pruned` argument (default `True` matches the previous behavior).\r\n  - Changes in the `param-bn` implementation:\r\n    - **[breaking]** A `BooleanNetwork` now *inherits* from a `RegulatoryNetwork`. This means that all methods available on the `RegulatoryNetwork` are available on a `BooleanNetwork` as well, typically with no performance impact. As such, some of the original re-implementations were removed.\r\n    - **[breaking]** Instead of using just strings, there is now a `FnUpdate` type which represents a single update function that can be queried and manipulated similar to the `BooleanExpression`. In general, the API should still accept a string wherever possible, but some new methods only accept `FnUpdate`.\r\n    - **[breaking]** `RegulatoryGraph.targets`, `RegulatoryGraph.regulators`, `RegulatoryGraph.targets_transitive` and `RegulatoryGraph.regulators_transitive` now return a `set` instead of a `list`.\r\n    - **[breaking]** `RegulatoryGraph.components` replaced with a better `RegulatoryGraph.strongly_connected_components` implementation.\r\n    - Added a `ModelAnnotation` class which can extract annotation data from `.aeon` files.\r\n    - Added a new `SymbolicContext` class which provides mostly the same low-level functionality as its Rust counterpart.\r\n    - Added a `SymbolicProjection` class which allows iteration over projected elements of a symbolic set (both the state data as well as the \"mateiralized\" update functions).\r\n    - Classes `BooleanNetwork` and `RegulatoryGraph` can now be [\"pickled\"](https://docs.python.org/3/library/pickle.html). Later, this should extend to more classes, but it will require careful consideration for things like the symbolic sets (ideally, we should just make everything serializable by default, but that will need a bit more work).\r\n    - `VariableId` and `ParameterId` now support explicit conversions from/to numbers (`from_index` and `to_index`).\r\n    - Added `RegulatoryNetwork.shortest_cycle`, `RegulatoryNetwork.feedback_vertex_set` and `RegulatoryNetwork.independent_cycles` that provide naive algorithms for exploring the network structure.\r\n    - Added `BooleanNetwork.num_implicit_parameters` and `BooleanNetwork.implicit_parameters` to list variables with no update functions.\r\n    - Added `BooleanNetwork.parameter_appears_in` to track which functions contain a specific parameter.\r\n    - Added `BooleanNetwork.infer_regulatory_graph` (creates a new regulatory graph which is compliant with the current update functions) and `BooleanNetwork.inline_inputs` (turns input nodes into explicit parameters).\r\n    - Added a `FixedPoints` class which implements various algorithms for quickly computing fixed points of a symbolic state transition graph. Right now, some of the methods return lists instead of iterators, which will be fixed in the `1.0` release.\r\n    - Added `GraphColoredVertices.is_subspace`, `GraphColoredVertices.is_singleton`, `GraphColoredVertices.fix_network_variable` and `GraphColoredVertices.restrict_network_variable`. Also added a `GraphColoredVertices.new` which constructs the set from a \"raw\" Bdd object. Similar methods were added to `GraphColors` and `GraphVertices`.\r\n    - `GraphVertices.list_vertices` replaced with `GraphVertices.iterator` (and native `__iter__` method), which actually iterates through the members of the set instead of listing them directly.\r\n    - Added several methods for creating and inspecting symbolic sets: `SymbolicAsyncGraph.fix_variable_in_vertices`, `SymbolicAsyncGraph.wrap_in_subspace`, `SymbolicAsyncGraph.wrap_in_symbolic_subspace`, `SymbolicAsyncGraph.fix_subspace`, `SymbolicAsyncGraph.fix_subnetwork_colors`, and `SymbolicAsyncGraph.is_trap_set`.\r\n    - Added several naive fixed-point algorithms for exploring the symbolic graph: `SymbolicAsyncGraph.reach_forward`, `SymbolicAsyncGraph.reach_backward`, `SymbolicAsyncGraph.trap_forward`, and `SymbolicAsyncGraph.trap_backward`.\r\n    - `BooleanNetwork.to_bnet` now has an optional `rename_if_necessary` argument (default `False`, i.e. previous behavior).\r\n  - Other:\r\n    - `find_attractors` can be now optionally restricted to a specific subset of states.\r\n   \r\n \r\nInternal changes:\r\n - There is now a `Wrapper` derivation macro which automatically implements `From` and `AsNative` conversions between Rust types and their Python wrapper types. In the future, we might be able to also generate other Python-related functionality, such as a working `Eq` and `Ord` translation.\r\n - Upgraded to `maturin` version `1.0.1` for hopefully fewer CI breaking changes in the future and added a custom `manylinux` Docker image for linux packaging.\r\n ",
        "html_url": "https://github.com/sybila/biodivine-aeon-py/releases/tag/0.2.0",
        "name": "0.2.0",
        "release_id": 107356040,
        "tag": "0.2.0",
        "tarball_url": "https://api.github.com/repos/sybila/biodivine-aeon-py/tarball/0.2.0",
        "type": "Release",
        "url": "https://api.github.com/repos/sybila/biodivine-aeon-py/releases/107356040",
        "value": "https://api.github.com/repos/sybila/biodivine-aeon-py/releases/107356040",
        "zipball_url": "https://api.github.com/repos/sybila/biodivine-aeon-py/zipball/0.2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "smijeva",
          "type": "User"
        },
        "date_created": "2022-04-17T15:43:47Z",
        "date_published": "2022-04-17T15:47:03Z",
        "html_url": "https://github.com/sybila/biodivine-aeon-py/releases/tag/0.1.2-alpha",
        "name": "0.1.2-alpha",
        "release_id": 64606885,
        "tag": "0.1.2-alpha",
        "tarball_url": "https://api.github.com/repos/sybila/biodivine-aeon-py/tarball/0.1.2-alpha",
        "type": "Release",
        "url": "https://api.github.com/repos/sybila/biodivine-aeon-py/releases/64606885",
        "value": "https://api.github.com/repos/sybila/biodivine-aeon-py/releases/64606885",
        "zipball_url": "https://api.github.com/repos/sybila/biodivine-aeon-py/zipball/0.1.2-alpha"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "daemontus",
          "type": "User"
        },
        "date_created": "2022-03-22T18:38:59Z",
        "date_published": "2022-03-22T18:50:30Z",
        "description": "Several bugfixes to the 0.1.0 release. Mainly, improved `to_string` implementations for some of the data structures and added `hash` implementations for types that override equality operator.",
        "html_url": "https://github.com/sybila/biodivine-aeon-py/releases/tag/0.1.1",
        "name": "0.1.1",
        "release_id": 62485452,
        "tag": "0.1.1",
        "tarball_url": "https://api.github.com/repos/sybila/biodivine-aeon-py/tarball/0.1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/sybila/biodivine-aeon-py/releases/62485452",
        "value": "https://api.github.com/repos/sybila/biodivine-aeon-py/releases/62485452",
        "zipball_url": "https://api.github.com/repos/sybila/biodivine-aeon-py/zipball/0.1.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "daemontus",
          "type": "User"
        },
        "date_created": "2022-03-22T14:18:52Z",
        "date_published": "2022-03-22T14:27:58Z",
        "description": "First feature complete release of AEON.py\r\n\r\nIt includes symbolic processing using BDDs, partially specified Boolean networks, attractor detection and source-target control.",
        "html_url": "https://github.com/sybila/biodivine-aeon-py/releases/tag/0.1.0",
        "name": "0.1.0",
        "release_id": 62459846,
        "tag": "0.1.0",
        "tarball_url": "https://api.github.com/repos/sybila/biodivine-aeon-py/tarball/0.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/sybila/biodivine-aeon-py/releases/62459846",
        "value": "https://api.github.com/repos/sybila/biodivine-aeon-py/releases/62459846",
        "zipball_url": "https://api.github.com/repos/sybila/biodivine-aeon-py/zipball/0.1.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "daemontus",
          "type": "User"
        },
        "date_created": "2022-02-20T17:14:05Z",
        "date_published": "2022-02-20T17:14:46Z",
        "description": "Adds preliminary support for target-attractor control.",
        "html_url": "https://github.com/sybila/biodivine-aeon-py/releases/tag/0.0.8",
        "name": "0.0.8",
        "release_id": 59999998,
        "tag": "0.0.8",
        "tarball_url": "https://api.github.com/repos/sybila/biodivine-aeon-py/tarball/0.0.8",
        "type": "Release",
        "url": "https://api.github.com/repos/sybila/biodivine-aeon-py/releases/59999998",
        "value": "https://api.github.com/repos/sybila/biodivine-aeon-py/releases/59999998",
        "zipball_url": "https://api.github.com/repos/sybila/biodivine-aeon-py/zipball/0.0.8"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "daemontus",
          "type": "User"
        },
        "date_created": "2022-02-11T17:50:44Z",
        "date_published": "2022-02-11T18:04:33Z",
        "description": "Adds support for the `can/will_post/pre_out/within` helper step functions within `SymbolicAsyncGraph`.",
        "html_url": "https://github.com/sybila/biodivine-aeon-py/releases/tag/0.0.7",
        "name": "0.0.7",
        "release_id": 59356033,
        "tag": "0.0.7",
        "tarball_url": "https://api.github.com/repos/sybila/biodivine-aeon-py/tarball/0.0.7",
        "type": "Release",
        "url": "https://api.github.com/repos/sybila/biodivine-aeon-py/releases/59356033",
        "value": "https://api.github.com/repos/sybila/biodivine-aeon-py/releases/59356033",
        "zipball_url": "https://api.github.com/repos/sybila/biodivine-aeon-py/zipball/0.0.7"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "daemontus",
          "type": "User"
        },
        "date_created": "2022-02-06T19:16:56Z",
        "date_published": "2022-02-06T19:22:51Z",
        "description": "Add a `set_variable_name` convenience method to `RegulatoryGraph` and `BooleanNetwork`.",
        "html_url": "https://github.com/sybila/biodivine-aeon-py/releases/tag/0.0.6",
        "name": "0.0.6",
        "release_id": 58832557,
        "tag": "0.0.6",
        "tarball_url": "https://api.github.com/repos/sybila/biodivine-aeon-py/tarball/0.0.6",
        "type": "Release",
        "url": "https://api.github.com/repos/sybila/biodivine-aeon-py/releases/58832557",
        "value": "https://api.github.com/repos/sybila/biodivine-aeon-py/releases/58832557",
        "zipball_url": "https://api.github.com/repos/sybila/biodivine-aeon-py/zipball/0.0.6"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "daemontus",
          "type": "User"
        },
        "date_created": "2021-12-23T14:22:47Z",
        "date_published": "2021-12-23T14:32:14Z",
        "description": "Add aeon algorithms.",
        "html_url": "https://github.com/sybila/biodivine-aeon-py/releases/tag/0.0.5",
        "name": "0.0.5",
        "release_id": 55901676,
        "tag": "0.0.5",
        "tarball_url": "https://api.github.com/repos/sybila/biodivine-aeon-py/tarball/0.0.5",
        "type": "Release",
        "url": "https://api.github.com/repos/sybila/biodivine-aeon-py/releases/55901676",
        "value": "https://api.github.com/repos/sybila/biodivine-aeon-py/releases/55901676",
        "zipball_url": "https://api.github.com/repos/sybila/biodivine-aeon-py/zipball/0.0.5"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "daemontus",
          "type": "User"
        },
        "date_created": "2021-12-23T11:31:27Z",
        "date_published": "2021-12-23T11:31:53Z",
        "description": "Fixes some initial issues with the BN library (problems with serialisation and update function parsing)",
        "html_url": "https://github.com/sybila/biodivine-aeon-py/releases/tag/0.0.4",
        "name": "0.0.4",
        "release_id": 55890135,
        "tag": "0.0.4",
        "tarball_url": "https://api.github.com/repos/sybila/biodivine-aeon-py/tarball/0.0.4",
        "type": "Release",
        "url": "https://api.github.com/repos/sybila/biodivine-aeon-py/releases/55890135",
        "value": "https://api.github.com/repos/sybila/biodivine-aeon-py/releases/55890135",
        "zipball_url": "https://api.github.com/repos/sybila/biodivine-aeon-py/zipball/0.0.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "daemontus",
          "type": "User"
        },
        "date_created": "2021-12-23T09:04:44Z",
        "date_published": "2021-12-23T09:05:32Z",
        "description": "Adds bindings to the (Parametrised) Boolean networks library.",
        "html_url": "https://github.com/sybila/biodivine-aeon-py/releases/tag/0.0.3",
        "name": "0.0.3",
        "release_id": 55881519,
        "tag": "0.0.3",
        "tarball_url": "https://api.github.com/repos/sybila/biodivine-aeon-py/tarball/0.0.3",
        "type": "Release",
        "url": "https://api.github.com/repos/sybila/biodivine-aeon-py/releases/55881519",
        "value": "https://api.github.com/repos/sybila/biodivine-aeon-py/releases/55881519",
        "zipball_url": "https://api.github.com/repos/sybila/biodivine-aeon-py/zipball/0.0.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "daemontus",
          "type": "User"
        },
        "date_created": "2021-12-21T20:18:03Z",
        "date_published": "2021-12-21T20:18:50Z",
        "description": "Fix an issue in `0.0.1` where Boolean expressions could not be printed into strings.",
        "html_url": "https://github.com/sybila/biodivine-aeon-py/releases/tag/0.0.2",
        "name": "0.0.2",
        "release_id": 55777848,
        "tag": "0.0.2",
        "tarball_url": "https://api.github.com/repos/sybila/biodivine-aeon-py/tarball/0.0.2",
        "type": "Release",
        "url": "https://api.github.com/repos/sybila/biodivine-aeon-py/releases/55777848",
        "value": "https://api.github.com/repos/sybila/biodivine-aeon-py/releases/55777848",
        "zipball_url": "https://api.github.com/repos/sybila/biodivine-aeon-py/zipball/0.0.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "daemontus",
          "type": "User"
        },
        "date_created": "2021-12-21T18:28:42Z",
        "date_published": "2021-12-21T18:29:56Z",
        "description": "Initial release.\r\n\r\nThe bindings cover most of the `lib-bdd` functionality (aside from iterators and some more advanced functions). This release is mostly to test whether automatic publishing works.",
        "html_url": "https://github.com/sybila/biodivine-aeon-py/releases/tag/0.0.1",
        "name": "0.0.1",
        "release_id": 55770957,
        "tag": "0.0.1",
        "tarball_url": "https://api.github.com/repos/sybila/biodivine-aeon-py/tarball/0.0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/sybila/biodivine-aeon-py/releases/55770957",
        "value": "https://api.github.com/repos/sybila/biodivine-aeon-py/releases/55770957",
        "zipball_url": "https://api.github.com/repos/sybila/biodivine-aeon-py/zipball/0.0.1"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Upgrading dependencies",
        "parent_header": [
          "Biodivine/AEON.py",
          "Development instructions"
        ],
        "type": "Text_excerpt",
        "value": "Currently, there is no automated way of generating bindings for newly created (or updated) methods. As such, when\nupgrading a `biodivine` dependency, you should make sure to create/update bindings for all relevant methods.\n\nAs this is a rather error-prone process, we provide documentation that we use to track relevant API changes.\nYou can find this documentation in the `api-coverage` folder. Please follow the instructions given in the \n`README` of this folder when upgrading a library dependency.\n\nFurthermore, once you update the library bindings, you also need to manually update the python documentation.\nThis documentation is stored in the `api-docs` folder.\n"
      },
      "source": "https://raw.githubusercontent.com/sybila/biodivine-aeon-py/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "usage",
    "faq",
    "support",
    "identifier"
  ],
  "somef_provenance": {
    "date": "2024-10-04 09:16:23",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ]
}