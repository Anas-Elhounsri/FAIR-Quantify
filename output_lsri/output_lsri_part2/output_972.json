{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "format": "cff",
        "type": "File_dump",
        "value": "cff-version: 1.2.0\nmessage: \"If you use this software, please cite it as below.\"\nauthors:\n  - family-names: \"Fry\"\n    given-names: \"Joshua P\"\n    orcid: \"https://orcid.org/0000-0002-2503-611X\"\n  - family-names: \"Li\"\n    given-names: \"Yang Yang\"\n    orcid: \"https://orcid.org/0000-0001-8224-1067\"\n  - family-names: \"Yang\"\n    given-names: \"Ren Dong\"\n    orcid: \"https://orcid.org/0000-0001-8224-106x\"\ntitle: \"ScanExitronLR: characterization and quantification of\n  exitron splicing events in long-read RNA-seq data\"\nversion: 1.0.0\ndoi:  10.1093/bioinformatics/btac626\ndate-released: 2022-03-27\nurl: \"https://github.com/ylab-hi/ScanExitronLR\"\npreferred-citation:\n  type: article\n  authors:\n    - family-names: \"Fry\"\n      given-names: \"Joshua P\"\n      orcid: \"https://orcid.org/0000-0002-2503-611X\"\n    - family-names: \"Li\"\n      given-names: \"Yang Yang\"\n      orcid: \"https://orcid.org/0000-0001-8224-1067\"\n    - family-names: \"Yang\"\n      given-names: \"Ren Dong\"\n      orcid: \"https://orcid.org/0000-0001-8224-106x\"\n  doi: \"10.1093/bioinformatics/btac626\"\n  journal: \"Bioinformatics\"\n  month: 9\n  start: 4966 # First page number\n  end: 4968 # Last page number\n  title: \"ScanExitronLR: characterization and quantification of\n  exitron splicing events in long-read RNA-seq data\"\n  issue: 21\n  volume: 38\n  year: 2022\n"
      },
      "source": "https://raw.githubusercontent.com/ylab-hi/ScanExitronLR/main/CITATION.cff",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "type": "Text_excerpt",
        "value": "```bibtex\n@article{Fry2022,\n  doi = {10.1093/bioinformatics/btac626},\n  url = {https://doi.org/10.1093/bioinformatics/btac626},\n  year = {2022},\n  month = sep,\n  publisher = {Oxford University Press ({OUP})},\n  volume = {38},\n  number = {21},\n  pages = {4966--4968},\n  author = {Joshua Fry and Yangyang Li and Rendong Yang},\n  editor = {Christina Kendziorski},\n  title = {{ScanExitronLR}: characterization and quantification of exitron splicing events in long-read {RNA}-seq data},\n  journal = {Bioinformatics}\n}\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ylab-hi/ScanExitronLR/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Joshua Fry and Yangyang Li and Rendong Yang",
        "doi": "10.1093/bioinformatics/btac626",
        "format": "bibtex",
        "title": "{ScanExitronLR}: characterization and quantification of exitron splicing events in long-read {RNA}-seq data",
        "type": "Text_excerpt",
        "url": "https://doi.org/10.1093/bioinformatics/btac626",
        "value": "@article{Fry2022,\n    journal = {Bioinformatics},\n    title = {{ScanExitronLR}: characterization and quantification of exitron splicing events in long-read {RNA}-seq data},\n    editor = {Christina Kendziorski},\n    author = {Joshua Fry and Yangyang Li and Rendong Yang},\n    pages = {4966--4968},\n    number = {21},\n    volume = {38},\n    publisher = {Oxford University Press ({OUP})},\n    month = {September},\n    year = {2022},\n    url = {https://doi.org/10.1093/bioinformatics/btac626},\n    doi = {10.1093/bioinformatics/btac626},\n}"
      },
      "source": "https://raw.githubusercontent.com/ylab-hi/ScanExitronLR/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_of_conduct": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our community include:\n\n- Demonstrating empathy and kindness toward other people\n- Being respectful of differing opinions, viewpoints, and experiences\n- Giving and gracefully accepting constructive feedback\n- Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience\n- Focusing on what is best not just for us as individuals, but for the overall community\n\nExamples of unacceptable behavior include:\n\n- The use of sexualized language or imagery, and sexual attention or advances of any kind\n- Trolling, insulting or derogatory comments, and personal or political attacks\n- Public or private harassment\n- Publishing others' private information, such as a physical or email address, without their explicit permission\n- Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at [INSERT CONTACT METHOD]. All complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the reporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series of actions.\n\n**Consequence**: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including sustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within the community.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 2.0, available at [https://www.contributor-covenant.org/version/2/0/code_of_conduct.html][v2.0].\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct enforcement ladder][mozilla coc].\n\nFor answers to common questions about this code of conduct, see the FAQ at [https://www.contributor-covenant.org/faq][faq]. Translations are available at [https://www.contributor-covenant.org/translations][translations].\n\n[homepage]: https://www.contributor-covenant.org\n[v2.0]: https://www.contributor-covenant.org/version/2/0/code_of_conduct.html\n[mozilla coc]: https://github.com/mozilla/diversity\n[faq]: https://www.contributor-covenant.org/faq\n[translations]: https://www.contributor-covenant.org/translations\n"
      },
      "source": "https://raw.githubusercontent.com/ylab-hi/ScanExitronLR/main/CODE_OF_CONDUCT.md",
      "technique": "file_exploration"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ylab-hi/ScanExitronLR"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contact",
        "type": "Text_excerpt",
        "value": "Please feel free to post any issues here on github.\n"
      },
      "source": "https://raw.githubusercontent.com/ylab-hi/ScanExitronLR/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-01-24T20:28:34Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-11-15T18:02:43Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A package for the characterization and quantification of exitron splicing events in long-read RNA-seq"
      },
      "technique": "GitHub_API"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ylab-hi/ScanExitronLR/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ylab-hi/ScanExitronLR/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ylab-hi/ScanExitronLR"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ScanExitronLR"
      },
      "source": "https://raw.githubusercontent.com/ylab-hi/ScanExitronLR/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ylab-hi/ScanExitronLR/main/splice_type.png#gh-light-mode-only"
      },
      "source": "https://raw.githubusercontent.com/ylab-hi/ScanExitronLR/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ylab-hi/ScanExitronLR/main/splice_type_dark.png#gh-dark-mode-only"
      },
      "source": "https://raw.githubusercontent.com/ylab-hi/ScanExitronLR/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ylab-hi/ScanExitronLR/main/cluster_purity_wb.png"
      },
      "source": "https://raw.githubusercontent.com/ylab-hi/ScanExitronLR/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "The recommended way to install `ScanExitronLR` is using [pip](https://pip.pypa.io/en/stable/):\n\n```console\n$ pip install scanexitronlr\n```\n\nThis will pull and install the latest stable release from [PyPi](https://pypi.org/). ScanExitronLR requires Python 3.7+. Thus you need to make sure that the `pip` is for python3 using e.g. `which pip` or using:\n\n```console\n$ pip3 install scanexitronlr\n```\n\nTo test your installation, run:\n\n```console\n$ selr\n```\n\nYou should see the version number, usage instructions and commands. (If you prefer a more descriptive command `scanexitronlr` also works.)\n\n**NOTE**: ScanExitronLR uses the LIQA package to infer exitron specific transcript abundance. Currently, LIQA sometimes crashes with newest versions of the lifelines package.  To avoid this, install version v0.26.4 of lifelines with `conda install lifelines=v0.26.4`.\n"
      },
      "source": "https://raw.githubusercontent.com/ylab-hi/ScanExitronLR/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ylab-hi/ScanExitronLR/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bioinformatics-tool, long-read-data, python"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2020 YangLab@HI\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/ylab-hi/ScanExitronLR/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ScanExitronLR"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "ylab-hi"
      },
      "technique": "GitHub_API"
    }
  ],
  "package_distribution": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://pypi.org/project/scanexitronlr/%20%22PyPI%22/"
      },
      "source": "https://raw.githubusercontent.com/ylab-hi/ScanExitronLR/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 62482,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ylab-hi/ScanExitronLR/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jpfry327",
          "type": "User"
        },
        "date_created": "2022-03-28T17:13:53Z",
        "date_published": "2022-03-28T03:44:38Z",
        "description": "This release is published on PyPi: https://pypi.org/project/scanexitronlr/#description",
        "html_url": "https://github.com/ylab-hi/ScanExitronLR/releases/tag/v1.1.8",
        "name": "ScanExitronLR",
        "release_id": 62886614,
        "tag": "v1.1.8",
        "tarball_url": "https://api.github.com/repos/ylab-hi/ScanExitronLR/tarball/v1.1.8",
        "type": "Release",
        "url": "https://api.github.com/repos/ylab-hi/ScanExitronLR/releases/62886614",
        "value": "https://api.github.com/repos/ylab-hi/ScanExitronLR/releases/62886614",
        "zipball_url": "https://api.github.com/repos/ylab-hi/ScanExitronLR/zipball/v1.1.8"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 12:42:01",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "type": "Text_excerpt",
        "value": "ScanExitronLR has two modes, `extract` and `annotate`. Use `extract` when calling exitrons in an alignment and `annotate` when annotating exitrons called using `extract`.\n\n\n<details>\n  <summary><h3> Extract </h3></summary>\n  <p>\n  \n\n\n`extract` requires three inputs: (1) a BAM alignment file of long-reads containing the ts:A flag (provided by default by Minimap2), (2) a reference genome and (3) a sorted and bgzip'd gene annotation file. Currently only gtf files are supported. We suggest using the `--junc-bed` parameter in minimap2 for more accurate spliced alignments.  Without the parameter, it may be harder to distinguish unannoted exitron splicing events from annotated splicing events. \n\nTo sort your gtf file, use the command:\n\n```console\n$ awk '$1 ~ /^#/ {print $0;next} {print $0 | \"sort -k1,1 -k4,4n -k5,5n\"}' in.gtf > out_sorted.gtf\n```\n\nTo bgzip your gene annotation file, use:\n\n```console\n$ bgzip in.gtf\n```\n\n`bgzip` is part of the [htslib](http://www.htslib.org/), which you most likely already have installed if you care about BAM files. Otherwise, you can get it [here](http://www.htslib.org/). It is important to note that if you download the [latest GENCODE release](https://www.gencodegenes.org/human/) it will be in the gzip form, not bgzip. You will need to run `gzip -d` and then `bgzip`.\n\nScanExitronLR utilizes the `gffutils` package, which requires an SQL-lite database of the annotation file. You do not need to provide such a file, as ScanExitronLR will create one if one is not found, though it may take ~20 minutes to build. It will be saved as `your_annotation.gtf.gz.db` in the same location as your annotation and will not need to be built again. In addition, we require a tabix index, and it will be created if one is not found. This should only take seconds. It will be saved as `your_annotation.gtf.gz.tbi`.\n\nThus, if you are running ScanExitronLR on a shared server and using a shared annotation database, you may not have writing privelages in the shared space. You will need to copy your annotation file to your local directory.\n\nWe have provided fully processed GTF files for [Gencode V39](https://drive.google.com/drive/folders/1LAU26BxAmTmkQdCaHJ1ba1LHBmOI8yUM?usp=sharing) and [TAIR10](https://drive.google.com/drive/folders/1FNZ5HRJOvGeiMxMObXBPgTGC2E0l3yeE?usp=sharing) for your convenience.\n\nTo run ScanExitronLR in extract mode, simply run\n\n```console\n$ selr extract ...\n```\n\nwith the following parameters:\n\n| Parameter | Description |\n| --- | --- |\n| -i STR | REQUIRED: Input BAM file |\n| -g STR | REQUIRED: Input genome reference (e.g. hg38.fa) |\n| -r STR | REQUIRED: Input _sorted_ and bgzip'd annotation reference (e.g. gencode_v38_sorted.gtf.gz). |\n| -o STR | Output filename (e.g. bam_filename.exitron <- this is default) |\n| -a/--ao INT | Reports only exitrons with AO (# of supporting reads) of INT or above (default: 2). |\n| -p/--pso FLOAT | Reports only exitrons with PSO of FLOAT or above (default: 0.01). |\n| -c/--cores INT | Use INT cores (default: 1). Use as many as you can spare. Even large BAM files only use at most 4GB total memory on 10 cores. |\n| -cp/--cluster-purity FLOAT | Reports only exitrons with cluster purity of FLOAT or above (default: 0). |\n| -m/--mapq INT | Only considers reads with mapq score >= INT (default: 50) |\n| -j/--jitter INT | Treat splice-sites with fuzzy boundry of +/- INT (default: 10). |\n| -sr | Use this flag to skip the realignment step. |\n| -sa | Use this flag to save isoform abundance files for downstream differential isoform usage analysis with LIQA. Files are of the form: input.isoform.exitrons, input.isoform.normals (See example page) |\n\nWe provide some functionality to perform exitron differential isoform usage with the `-sa` flag.  See [here](https://github.com/ylab-hi/ScanExitronLR/tree/main/test_data) for an example.\n\n  </p>\n</details>\n\n<details>\n  <summary><h3> Choosing Filtering Parameters </h3></summary>\n  <p>\n\n\nScanExitronLR filters exitron splicing events based on AO (-a/--ao), PSO (-p/--pso) and cluster purity (-cp/--cluster-purity):\n> __AO__. By default, ScanExitronLR only reports exitrons with at least two supporting reads (AO >= 2). This is filter out random sequencing errors that may lead to a faulty alignment and false splicing event. However, if the coverage is particularly low, you may need to set the AO threshold to 1 in order to detect exitrons in medium and lower expressed genes. \n\n> __PSO__. By default, ScanExitronLR only reports exitrons with a splicing frequence (PSO) above 1%. Splicing events below this frequency may not be biologically relevant or may just be due to splicing noise. Setting PSO filtering to 0% is not recommended because it will increase running time and report many low quality splicing events. \n\n> __Cluster Purity__. By default, ScanExitronLR does not filter by cluster purity.  However, cluster purity is important for having high confidence the the reported splice sites. For example, if the cluster purity is 90%, then 90% of the exitron spliced reads have the reported splice sites. Thus, one ought to be cautious when investigating exitrons with cluster purities below 50%. There is an exitron splicing event being detected, but it is unclear where the exact splice sites occur. This can happen if the reads are particularly noisy or are aligned to a repetitive region. \n<img align=\"center\" width=\"800\" src=\"https://raw.githubusercontent.com/ylab-hi/ScanExitronLR/main/cluster_purity_wb.png\">\n\n  </p>\n</details>\n"
      },
      "source": "https://raw.githubusercontent.com/ylab-hi/ScanExitronLR/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Annotate",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "To run ScanExitronLR in annotate mode, simply run\n\n```console\n$ selr annotate ...\n```\n\nwith the following parameters:\n\n| parameters | Description |\n| --- | --- |\n| -i STR | REQUIRED: Input exitron file, generated from selr extract |\n| -g STR | REQUIRED: Input genome reference (e.g. hg38.fa) |\n| -r STR | REQUIRED: Input _sorted_ and _ gzip'd_ annotation reference (e.g. gencode_v38_sorted.gtf.gz). |\n| -o STR | Output filename (e.g. bam_filename.exitron.annotation <- this is default) |\n| -b/--bam-file STR | If specified, annotation includes read supported NMD status directly from alignments. |\n| -arabidopsis | Use this flag if using alignments from Arabidopsis. See github page for annotation file/genome assumptions. |\n\nThe output is a tab-separated file with the following columns:\n\n\n| Column | Description |\n| --- | --- |\n| chrom | Chromosome name |\n| start | Exitron start | \n| end | Exitron end |\n| name | Unique exitron identifier |\n| region | Exitron region | \n| ao | # of supporting reads |\n| strand | Gene strand | \n| gene_name | Gene name from annotation |\n| gene_id | Gene ID from annotation |\n| length | Exitron legnth | \n| splice_site | Exitron splice sites (G[T/C]-AG, AT-AC) |\n| transcript_id | Transcript ID from annotation |\n| pso | Exitron percent spliced out value |\n| dp | Total depth at exitron position (PSO = AO/DP) | \n| cluster_purity | Exitron cluster purity |\n| exitron_prot_position | Position in amino acid sequence of exitron splicing event | \n| type | Exitron type (frameshift/truncation/truncation+substitution) | \n| substitution | If from substitution type, determines which amino acid substitution occured |\n| nmd_status_predicted | If frameshift type, determines if a downstream stop codon is 50 nt upstream of splicing junction | \n| nmd_status_percentage | If frameshift type, reports percentage of reads that directly support a stop codon 50 nt upstream of splicing junction |\n| downstream_inframe_AUG | If frameshift type, reports whether there is a downstream AUG, usually attenuating NMD efficiency |\n| start_proximal_PTC | If frameshift type, reports whether premature stop codon is within 200 nt of start codon, usually attenuating NMD efficiency |\n| prot_domains | Any PFAM domains that are disrupted by the exitron splicing |\n| reads | Name of all reads which are exitron spliced | \n\n**ScanExitronLR** may assign transcript abundance to multiple annotated transcripts. If this is the case, each transcript will get an annotation. Thus, if an exitron is associated with two transcripts, there will be two rows in the annotation output, one for each transcript. \n"
      },
      "source": "https://raw.githubusercontent.com/ylab-hi/ScanExitronLR/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example",
        "type": "Text_excerpt",
        "value": "See [here](https://github.com/ylab-hi/ScanExitronLR/tree/main/test_data) for an example.\n"
      },
      "source": "https://raw.githubusercontent.com/ylab-hi/ScanExitronLR/main/README.md",
      "technique": "header_analysis"
    }
  ]
}