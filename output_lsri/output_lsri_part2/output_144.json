{
  "application_domain": [
    {
      "confidence": 45.12,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/BradhamLab/icat"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-04-20T00:14:13Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-10-19T13:10:01Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Identifying Cell-states Across Treatments"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9689318486449556,
      "result": {
        "original_header": "icat",
        "type": "Text_excerpt",
        "value": "ICAT is a tool developed to better identify cell states in scRNAseq experiments where perturbations or some other biologic heterogeneity is present, such as gene knock-outs. \nThe method works by first identifying a set of conrol-defined cell states by performing unsupervised clustering. These identified cell states are then fed into a sparse gene weighting algorithm, Neighborhood Component Feature Selection (NCFS), to highly weight the most predictive genes, while also removing variance from non-explanatory genes. We then transform the data matrix using this weight vector, and perform semi-supervised clustering such that the originally identified control labels remain constant, but cells from experimental conditions are free to cluster with any other cells regardless of treatment status.\n \n"
      },
      "source": "https://raw.githubusercontent.com/BradhamLab/icat/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8142916174603859,
      "result": {
        "original_header": "Paper",
        "type": "Text_excerpt",
        "value": "To learn more about the algorithm, and how it compares to other methods, see the original paper at [Bioinformatics](https://doi.org/10.1093/bioinformatics/btad278)\n \n"
      },
      "source": "https://raw.githubusercontent.com/BradhamLab/icat/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9707575322380111,
      "result": {
        "original_header": "Hyper Parameter Optimization",
        "type": "Text_excerpt",
        "value": "For working with your own data, we recommend finding appropriate Louvain and NCFS hyper\nparameters **prior** to running the complete ICAT workflow. All hyper parameters used in the\noriginal pre-print can be found as supplemental tables. \nWe have also provided grid search functions to find the \"best\" `n_neighbor` and `resolution`\nparameters for Louvain and Semi-supervised Louvain clustering steps, as well as a function\nto find the \"best\" kernel width (`sigma`) and regularization parameters (`reg)`. \n```python\nfrom icat import optimize\nsc.pp.pca(controls)\n\n# Find the \"best\" `n_neighbor` and `resolution` parameter for clustering control cells by\n# optimizing the Calinski-Harabasz Index over a grid of `n` and `r` values\nlouvain_n, louvain_r = optimize.optimize_louvain(\n    controls,\n    min_neighbors=3,\n    max_neighbors=50,\n    neighbor_step=2,\n    min_res=0.3,\n    max_res=1.2,\n    res_step=0.02,\n)\n\n# cluster control cells with \"best\" values\nsc.pp.neighbors(controls, n_neighbors=louvain_n)\nsc.tl.louvain(controls, resolution=louvain_r)\n\n# find \"best\" `sigma` and `reg` NCFS values by measuring the MCC in a\n# weighted KNN over k-fold cross validation\nsigma, reg =  optimize.optimize_ncfs(\n    controls,\n    controls.obs.louvain,\n    n_neighbors=5,\n    n_splits=3,\n    sigma_vals=[0.5, 1, 1.5, 2, 2.5, 3],\n    reg_vals=[0.25, 0.5, 1, 1.5, 2, 2.5, 3],\n)\n```\nBy default, ICAT uses the same `n_neighbors` and `resolution` parameters during\nsemi-supervised clustering as it does during control clustering. In practice,\nthis leads to good results (see paper). However, if users _would_ like to\noptimize these parameters separately, we've include the below function:\n```python\n# optimize louvain parameters for semi-supervised clustering in NCFS\n# space -- include complete dataset now \nadata.obs.loc[controls.obs.index, \"control_clusters\"] = controls.obs.louvain\nsslouvain_n, sslouvain_r = optimize_sslouvain(\n    adata,\n    adata.obs.control_clusters,\n    reg,\n    sigma,\n    max_cells=750,\n    min_neighbors=3,\n    max_neighbors=50,\n    neighbor_step=2,\n    min_res=0.3,\n    max_res=1.2,\n    res_step=0.02,\n)\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/BradhamLab/icat/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/BradhamLab/icat/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/BradhamLab/icat/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "BradhamLab/icat"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "icat"
      },
      "source": "https://raw.githubusercontent.com/BradhamLab/icat/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BradhamLab/icat/master/docs/images/raw_input.png"
      },
      "source": "https://raw.githubusercontent.com/BradhamLab/icat/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "icat"
        ],
        "type": "Text_excerpt",
        "value": "ICAT can be installed on linux machines using `pip` with the following command:\n\n`pip install icat-sc`\n"
      },
      "source": "https://raw.githubusercontent.com/BradhamLab/icat/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/BradhamLab/icat/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "clustering, machine-learning, self-supervised-learning, semi-supervised-learning, single-cell, single-cell-analysis, single-cell-rna-seq"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "BSD 3-Clause \"New\" or \"Revised\" License",
        "spdx_id": "BSD-3-Clause",
        "type": "License",
        "url": "https://api.github.com/licenses/bsd-3-clause",
        "value": "https://api.github.com/licenses/bsd-3-clause"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "BSD 3-Clause License\n\nCopyright (c) 2018, Dakota Hawkins\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of the copyright holder nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
      },
      "source": "https://raw.githubusercontent.com/BradhamLab/icat/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BradhamLab/icat/master/docs/images/icat_output.png"
      },
      "source": "https://raw.githubusercontent.com/BradhamLab/icat/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "icat"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "BradhamLab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 90772,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BradhamLab/icat/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 09:32:37",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "How to use",
        "parent_header": [
          "icat"
        ],
        "type": "Text_excerpt",
        "value": "ICAT makes heavy use of the excellent `scanpy` library along with the associated `AnnData` data structure.\n\nAn example code block walks through running `icat` on a simulated dataset. The \nfinal clustering is stored in the `sslouvain` column of the returned `AnnData`\nobject.\n\n```python\n    from icat import simulate\n    from icat import models\n    import scanpy as sc\n    import numpy as np\n    data_model = simulate.SingleCellDataset(\n        populations=2,\n        genes=1000,\n        dispersion=np.random.choice([1, 2, 3], 1000)\n    )\n    controls = data_model.simulate()\n    controls.obs['treatment'] = 'control'\n    perturbed = simulate.perturb(controls)\n    perturbed.obs['treatment'] = 'perturbed'\n    adata = controls.concatenate([perturbed])\n    sc.pp.log1p(adata)\n```\n**visualizing dataset**\n![](docs/images/raw_input.png)\n```python\n    # specify model parameters -- see documentation for more information\n    model = models.icat(\n        ctrl_value=\"control\",\n        ncfs_kws={'reg': 1, 'sigma': 3},\n        neighbor_kws={'n_neighbors': 15}, \n        cluster_kws={'resolution': 0.75},\n    )\n    # cluster cells by providing treatment information\n    out = model.cluster(adata, adata.obs['treatment'])\n    print(out.obs['sslouvain'].unique())\n```\n**visualizing results**\n\nWhile ICAT does not automatically compute UMAP, tsne, or other reduced dimension\nvisualizations during clustering, it is possible to pass the upweighted count matrix\n(found in `adata.obsm[\"X_icat\"]`) to these algorithms. In the case of UMAP, the\nreturned `adata` object already has neighbors defined in this upweighted space, so \ncalculating a new UMAP is simple:\n\n```python\nsc.tl.umap(out)\nsc.pl.umap(out, color=['sslouvain', 'Population'])\n```\n\n![](docs/images/icat_output.png)\n"
      },
      "source": "https://raw.githubusercontent.com/BradhamLab/icat/master/README.md",
      "technique": "header_analysis"
    }
  ]
}