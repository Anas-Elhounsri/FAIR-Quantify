{
  "application_domain": [
    {
      "confidence": 11.88,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/MauerLab/DJExpress"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-09-24T11:25:20Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-08-09T05:23:40Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9630479676730497,
      "result": {
        "original_header": "DJExpress README",
        "type": "Text_excerpt",
        "value": "-   [1 Installation](#installation)\n-   [2 Details](#details)\n-   [3 Example DJE analysis](#example-dje-analysis)\n    -   [3.1 Import junction quantification files with\n        DJEimport()](#import-junction-quantification-files-with-djeimport)\n    -   [3.2 Annotate junctions with their respective gene of origin\n        with\n        DJEannotate()](#annotate-junctions-with-their-respective-gene-of-origin-with-djeannotate)\n    -   [3.3 Filtering junctions for differential expression analysis\n        using\n        DJEprepare()](#filtering-junctions-for-differential-expression-analysis-using-djeprepare)\n    -   [3.4 Test for Differential Junction Expression using\n        DJEanalyze()](#test-for-differential-junction-expression-using-DJEanalyze)\n    -   [3.5 Gene-wise Splice plots](#gene-wise-splice-plots)\n    -   [3.6 Association between junction expression and external traits\n        with\n        DJEvsTrait()](#association-between-junction-expression-and-external-traits-with-djevstrait)\n-   [4 Example Junction Co-expression Network Analysis\n    (JCNA)](#example-junction-co-expression-network-analysis-jcna)\n    -   [4.1 Prepare data for JCNA\n        1-pass](#prepare-data-for-jcna-1-pass)\n    -   [4.2 1-pass JCNA](#1-pass-jcna)\n    -   [4.3 2-pass JCNA](#2-pass-jcna)\n \n"
      },
      "source": "https://raw.githubusercontent.com/MauerLab/DJExpress/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9574815839644752,
      "result": {
        "original_header": "2 Details",
        "type": "Text_excerpt",
        "value": "The DJExpress package provides several convenient functions for\nDifferential Junction Expression analysis (DJE) as well as Junction\nCo-expression Network Analysis (JCNA): \n"
      },
      "source": "https://raw.githubusercontent.com/MauerLab/DJExpress/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/MauerLab/DJExpress/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/MauerLab/DJExpress/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MauerLab/DJExpress"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DJExpress README"
      },
      "source": "https://raw.githubusercontent.com/MauerLab/DJExpress/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MauerLab/DJExpress/master/ReadFig/tutorial_plotSplice.png"
      },
      "source": "https://raw.githubusercontent.com/MauerLab/DJExpress/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MauerLab/DJExpress/master/ReadFig/DJEplotSplice_ENAH.png"
      },
      "source": "https://raw.githubusercontent.com/MauerLab/DJExpress/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MauerLab/DJExpress/master/ReadFig/tutorial_spliceradar.png"
      },
      "source": "https://raw.githubusercontent.com/MauerLab/DJExpress/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MauerLab/DJExpress/master/ReadFig/tutorial_sampleclust.png"
      },
      "source": "https://raw.githubusercontent.com/MauerLab/DJExpress/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MauerLab/DJExpress/master/ReadFig/tutorial_nettop.png"
      },
      "source": "https://raw.githubusercontent.com/MauerLab/DJExpress/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MauerLab/DJExpress/master/ReadFig/tutorial_moduleden1.png"
      },
      "source": "https://raw.githubusercontent.com/MauerLab/DJExpress/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MauerLab/DJExpress/master/ReadFig/tutorial_moduleden2.png"
      },
      "source": "https://raw.githubusercontent.com/MauerLab/DJExpress/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MauerLab/DJExpress/master/ReadFig/tutorial_moduleden3.png"
      },
      "source": "https://raw.githubusercontent.com/MauerLab/DJExpress/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MauerLab/DJExpress/master/ReadFig/tutorial_moduleden4.png"
      },
      "source": "https://raw.githubusercontent.com/MauerLab/DJExpress/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MauerLab/DJExpress/master/ReadFig/2passdendro.png"
      },
      "source": "https://raw.githubusercontent.com/MauerLab/DJExpress/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MauerLab/DJExpress/master/ReadFig/purplemod.png"
      },
      "source": "https://raw.githubusercontent.com/MauerLab/DJExpress/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MauerLab/DJExpress/master/ReadFig/cytoscapeex.png"
      },
      "source": "https://raw.githubusercontent.com/MauerLab/DJExpress/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "1 Installation",
        "type": "Text_excerpt",
        "value": "The devtools package provides install\\_github() that allows you to\ninstall the package from GitHub **(this option will be available once\nthe repository becomes public)**:\n\n``` r\ninstall.packages(\"devtools\") # if you have not installed \"devtools\" package\ndevtools::install_github(\"MauerLab/DJExpress\")\n```\n\nDJExpress can be also installed from the source (DJExpress\\_0.1.0.tar.gz\nfile available with granted access at\n<https://gitlab.com/MauerLab/djexpress-source-file>) file using\ninstall.packages():\n\n``` r\ninstall.packages(path_to_DJExpress_sourcefile, repos = NULL, type=\"source\")\n```\n"
      },
      "source": "https://raw.githubusercontent.com/MauerLab/DJExpress/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "4.1 Prepare data for JCNA 1-pass",
        "parent_header": [
          "4 Example Junction Co-expression Network Analysis (JCNA)"
        ],
        "type": "Text_excerpt",
        "value": "The initial inputs for JCNA module are:\n\n1.  A **DJEanalyze** output object from where junction quantification\n    and additional sample information is retrieved.\n\n-   Alternatively, users can directly provide junction read counts\n    table, such as the one produced by STAR alignment (the choice should\n    be indicated in *input.type = c(\u201cDJEanalyze.out\u201d,\n    \u201cjunction.counts\u201d)* and the path to folder where individual junction\n    quantification files are located should be indicated in the\n    *workDir* argument. This folder should only contain junction\n    quantification files).\n\n-   As suggested by WGCNA guidelines\n    (<https://horvath.genetics.ucla.edu/html/CoexpressionNetwork/Rpackages/WGCNA/faq.html>),\n    sufficient sample size should be provided ( &gt;= 15 samples within\n    single experimental conditions) in order to avoid the constructon of\n    noisy expression networks that do not trully represent biologically\n    meaningful associations.\n\n2.  A vector or factor specifying sample names corresponding to the\n    experimental condition that should be excluded from the JCNA\n    analysis (Group1, we want to keep only tumor sample data). This\n    should be indicated only when *input.type = \u201cDJEanalyze.out\u201d*.\n\n3.  A numeric vector or a matrix of external sample traits. Samples\n    should be as rows and traits as columns.\n\nAdditional options can be further explored by typing **?JCNAprepare**.\n\nThe first step in the JCNA module is to prepare data for a first round\nof co-expression network construction. For this, outlier samples\n(identified based on sample dendrogram clustering) as well as missing\nentries, entries with weights below a threshold, and zero-variance\njunctions are removed from the analysis.\n\nAfter this, the soft-thresholding power for the network construction\nshould be chosen. For this, JCNAprepare contains a wrapper of the \\*\\_\\_\npickSoftThreshold()\\_\\_\\* function from WGCNA, which performs the\nanalysis of network topology, using some predifined set of\nsoft-thresholding testing powers as suggested in WGCNA guidelines. This\nstep generates two plots: 1) the scale-free fit index vs\nsoft-thresholding power plot, and 2) The mean connectivity vs\nsoft-thresholding power plot. This representation is helpful for the\nselection of a proper soft-thresholding power that will be used later\nduring JCNA 1-pass step.\n\nFor this example, we are going to use a full version of the\n**DJEanalyze()** output we used before. This object has to be loaded\nfrom GitLab:\n\n``` r\n# Load DJEanalyze output for JCNA:\ngithubURL <- \"https://gitlab.com/MauerLab/djexpress-DJEanalyze-output-file/raw/main/DJEanlz.total.RData\"\nload(url(githubURL))\nDJEanlz <- analyze.coadread\n\n# Summary of DJEanlz:\nsummary(DJEanlz)\n```\n\n    ##              Length Class        Mode\n    ## v.norm        4     EList        list\n    ## ex.norm      17     MArrayLM     list\n    ## dje.out      26     data.frame   list\n    ## dje.sig      26     data.frame   list\n    ## logFC.plot    3     recordedplot list\n    ## volcano.plot  9     gg           list\n    ## model.fit     4     data.frame   list\n    ## group.par    14     -none-       list\n\n``` r\n# Load splicing factor expression as trait data:\nSF <- system.file(\"extdata\", \"SF.expr.rds\", package = \"DJExpress\")\nSF.exp <- readRDS(SF)\n\n# Change format of colnames for visualization:\ncolnames(DJEanlz$v.norm)[grep(\"TCGA\", colnames(DJEanlz$v.norm))] <- paste0(\"TCGA_\",\nseq(1,length(colnames(DJEanlz$v.norm)[grep(\"TCGA\", colnames(DJEanlz$v.norm))]), 1))\n\n# Set Group1 (normal tissue) to exclude from the analysis\nGroup1 <- colnames(DJEanlz$v.norm$E)[grep(\"SRR\", colnames(DJEanlz$v.norm$E))]\n\n# Run JCNAprepare (it takes some minutes):\nJprep <- JCNAprepare(analyze.out=DJEanlz, Group1 = Group1,\ntraitData = SF.exp, abline.threshold=600, input.type = \"DJEanalyze.out\")\n```\n\n    ## Allowing parallel execution with up to 2 working processes.\n    ##  Flagging junctions and samples with too many missing values...\n    ##   ..step 1\n\n    ## pickSoftThreshold: will use block size 390.\n    ##  pickSoftThreshold: calculating connectivity for given powers...\n    ##    ..working on genes 1 through 390 of 114639\n    ##    ..working on genes 391 through 780 of 114639\n    ##    ...     \n    ##    ..working on genes 114271 through 114639 of 114639\n    ##    Power SFT.R.sq   slope truncated.R.sq  mean.k. median.k. max.k.\n    ## 1      1 0.000349  0.0636          0.883 25400.00  24400.00  41600\n    ## 2      2 0.359000 -1.2500          0.900  8670.00   7730.00  21200\n    ## 3      3 0.687000 -1.7300          0.937  3680.00   2970.00  12700\n    ## 4      4 0.790000 -1.9200          0.948  1790.00   1290.00   8270\n    ## 5      5 0.819000 -2.0100          0.949   964.00    612.00   5750\n    ## 6      6 0.836000 -2.0300          0.957   558.00    313.00   4170\n    ## 7      7 0.846000 -2.0300          0.963   343.00    168.00   3120\n    ## 8      8 0.843000 -2.0400          0.965   220.00     94.70   2400\n    ## 9      9 0.835000 -2.0600          0.965   147.00     55.70   1880\n    ## 10    10 0.839000 -2.0500          0.971   102.00     34.10   1500\n    ## 11    12 0.840000 -2.0400          0.977    52.80     14.20    990\n    ## 12    14 0.828000 -2.0400          0.976    29.90      6.83    680\n    ## 13    16 0.820000 -2.0100          0.963    18.20      3.66    482\n    ## 14    18 0.798000 -1.9200          0.906    11.80      2.13    350\n    ## 15    20 0.944000 -1.6000          0.936     8.09      1.32    259\n\n``` r\n# Summary of JCNAprepare output:\nsummary(Jprep)\n```\n\n    ##            Length Class        Mode\n    ## sample.den      3 recordedplot list\n    ## datExpr    114639 data.frame   list\n    ## datTraits     360 data.frame   list\n    ## NetTop          3 recordedplot list\n    ## sft             2 -none-       list\n\nWe had defined an abline.threshold of 60, to allow the removal of the\noutlier sample observed in the sample dendrogram:\n\n<img src=\"ReadFig/tutorial_sampleclust.png\" width=\"571\" />\n\n**Jprep$NetTop** shows the 2 plots generated during the analysis of\nnetwork topology. The lowest power for which the scale-free topology fit\nindex curve flattens out upon reaching a high value (here around 0.90)\nis 18. This is the power selected for the first round of network\nconstruction (**JCNA1pass()** function).\n\n``` r\n# Network topology analysis plots:\nJprep$NetTop\n```\n\n<img src=\"ReadFig/tutorial_nettop.png\" width=\"571\" />\n"
      },
      "source": "https://raw.githubusercontent.com/MauerLab/DJExpress/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/MauerLab/DJExpress/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "YEAR: 2021\nCOPYRIGHT HOLDER: Lina Gallego-Paez\n"
      },
      "source": "https://raw.githubusercontent.com/MauerLab/DJExpress/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DJExpress"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "MauerLab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 233868,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MauerLab/DJExpress/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 12:10:46",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 6
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "3 Example DJE analysis",
        "type": "Text_excerpt",
        "value": "DJExpress uses two types of files as the primary input for DJE analysis:\n\n1.  STAR aligner-derived \u201cSJ.out.tab\u201d files containing splice junction\n    counts per sample (generated from FASTQ or BAM files) in\n    tab-delimited format, or outputs from any other junction\n    quantification tool as long as they contain junction IDs as first\n    columns, following the format chr: start: end: strand\n    (e.g.\u00a0chr1:123:456:1, where positive or negative strand are coded as\n    1 and 2, respectively)\n\n2.  The correspondent transcriptome annotation (gtf file) used for\n    junction quantification.\n\nOur recommended STAR alignment settings are the following:\n\n**STAR \u2013genomeDir GENOME \u2013readFilesIn READ1 READ2 \u2013runThreadN 4\n\u2013outFilterMultimapScoreRange 1 \u2013outFilterMultimapNmax 20\n\u2013outFilterMismatchNmax 10 \u2013alignIntronMax 500000 \u2013alignMatesGapMax\n1000000 \u2013sjdbScore 2 \u2013alignSJDBoverhangMin 1 \u2013genomeLoad NoSharedMemory\n\u2013limitBAMsortRAM 70000000000 \u2013readFilesCommand cat\n\u2013outFilterMatchNminOverLread 0.33 \u2013outFilterScoreMinOverLread 0.33\n\u2013sjdbOverhang 100 \u2013outSAMstrandField intronMotif \u2013outSAMattributes NH HI\nNM MD AS XS \u2013sjdbGTFfile GENCODE\\_ANNOTATION \u2013limitSjdbInsertNsj 2000000\n\u2013outSAMunmapped None \u2013outSAMtype BAM SortedByCoordinate \u2013outSAMheaderHD\n@HD VN:1.4 \u2013outSAMattrRGline ID::<ID> \u2013twopassMode Basic \u2013outSAMmultNmax\n1**\n"
      },
      "source": "https://raw.githubusercontent.com/MauerLab/DJExpress/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3.1 Import junction quantification files with DJEimport()",
        "parent_header": [
          "3 Example DJE analysis"
        ],
        "type": "Text_excerpt",
        "value": "The first step in the DJE analysis is to merge \u201cSJ.out.tab\u201d files into a\nsingle expression matrix (in case the primary input contains individual\nfiles per sample) and to generate a matrix of junction coordinates for\njunction-to-gene mapping. The input for DJEimport() is the path to the\nfolder where these junction quantification files are located.\n\nAs an example, we are going to use a few \u201cSJ.out.tab\u201d files produced by\nSTAR alignment using 3 TCGA colorectal (COADREAD) tumor samples and 3\nmatching normal colon samples from GTEx:\n\n``` r\nlibrary(DJExpress)\nin.file <- system.file(\"extdata\", \"junct.quant\", package = \"DJExpress\")\nprint(in.file)\n```\n\n    ## [1] \"/Users/paez/Library/R/4.0/library/DJExpress/extdata/junct.quant\"\n\nYou can see that **in.file** contains the path to the folder\n(\u201cjunct.quant\u201d) where \u201cSJ.out.tab\u201d files from STAR alignment are found.\n\nThis is how individual \u201cSJ.out.tab\u201d files look like:\n\n``` r\nfiles <- list.files(in.file)\njunctions <- readr::read_tsv(paste0(in.file,\"/\", files[1]), comment = \"\", col_names = FALSE)\nhead(junctions)\n```\n\n    ## # A tibble: 6 x 9\n    ##   X1       X2    X3    X4    X5    X6    X7    X8    X9\n    ##   <chr> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n    ## 1 chr1  14830 14929     2     2     1     2     0    29\n    ## 2 chr1  14830 14969     2     2     1    19   275    38\n    ## 3 chr1  14830 15020     2     2     1     0    12    18\n    ## 4 chr1  15013 25232     1     1     1     0     1    13\n    ## 5 chr1  15039 15795     2     2     1     4   115    37\n    ## 6 chr1  15039 16853     2     2     1     0    10     1\n\nNow, let\u2019s generate the junction quantification matrix and the\nrespective junction coordinates matrix. We are going to determine that 3\nreads per junction is the minimal number of reads for a junction to be\nconsidered expressed in the sample, which means that every read count\nbelow 3 will be transformed to 0 (this is the default value for\n**min.expressed** in **DJEimport()**):\n\n``` r\nout.file <- DJEimport(workDir = in.file, aligner=\"STAR\", min.expressed = 3)\n# summary of out.file:\nsummary(out.file)\n```\n\n    ##       Length Class      Mode\n    ## quant 6      data.frame list\n    ## coord 5      data.frame list\n\n``` r\n# Head of out.file$quant:\nhead(out.file$quant)\n```\n\n    ##                    GTEx1.aligned.bam.junctions GTEx2.aligned.bam.junctions\n    ## chr1:14830:14929:2                           0                           0\n    ## chr1:14830:14969:2                          19                          71\n    ## chr1:14830:15020:2                           0                           0\n    ## chr1:15013:25232:1                           0                           0\n    ## chr1:15039:15795:2                           4                          30\n    ## chr1:15039:16853:2                           0                           0\n    ##                    GTEx3.aligned.bam.junctions TCGA1.aligned.junctions\n    ## chr1:14830:14929:2                           0                       0\n    ## chr1:14830:14969:2                           9                       0\n    ## chr1:14830:15020:2                           0                       0\n    ## chr1:15013:25232:1                           0                       0\n    ## chr1:15039:15795:2                           0                       9\n    ## chr1:15039:16853:2                           0                       0\n    ##                    TCGA2.aligned.junctions TCGA3.aligned.junctions\n    ## chr1:14830:14929:2                       0                       0\n    ## chr1:14830:14969:2                      13                       0\n    ## chr1:14830:15020:2                       0                       0\n    ## chr1:15013:25232:1                       0                       0\n    ## chr1:15039:15795:2                      15                       0\n    ## chr1:15039:16853:2                       0                       0\n\n``` r\n# Head of out.file$coord:\nhead(out.file$coord)\n```\n\n    ##    chr start   end strand        junction_id\n    ## 1 chr1 14830 14929      - chr1:14830:14929:2\n    ## 2 chr1 14830 14969      - chr1:14830:14969:2\n    ## 3 chr1 14830 15020      - chr1:14830:15020:2\n    ## 4 chr1 15013 25232      + chr1:15013:25232:1\n    ## 5 chr1 15039 15795      - chr1:15039:15795:2\n    ## 6 chr1 15039 16853      - chr1:15039:16853:2\n"
      },
      "source": "https://raw.githubusercontent.com/MauerLab/DJExpress/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3.2 Annotate junctions with their respective gene of origin with DJEannotate()",
        "parent_header": [
          "3 Example DJE analysis"
        ],
        "type": "Text_excerpt",
        "value": "We now need to associate junctions found in **out.file** to their\nrespective gene, so gene-level differential junction usage can be\ncalculated downstream in the analysis.\n\nFor this step we need the path to the transcriptome annotation file (or\ngtf file) and the output object of DJEimport(). We are going to use an\nexample gtf file containing only chromosome 1 (chr1) for simplicity:\n\n``` r\n# Get path to gtf file:\ngtf0 <- system.file(\"extdata\", \"chr1.gtf.gz\", package = \"DJExpress\")\nprint(gtf0)\n```\n\n    ## [1] \"/Users/paez/Library/R/4.0/library/DJExpress/extdata/chr1.gtf.gz\"\n\n``` r\n# Run DJEannotate():\nann.out <- DJEannotate(import.out = out.file, gtf = gtf0)\n\n# Summary of ann.out:\nsummary(ann.out)\n```\n\n    ##                 Length Class      Mode     \n    ## quant.annotated   6    data.frame list     \n    ## featureID       420    -none-     character\n    ## groupID         420    -none-     character\n\n``` r\n# head of ann.out$quant.annotated (the junction quantification matrix)\nhead(ann.out$quant.annotated)\n```\n\n    ##                    GTEx1.aligned.bam.junctions GTEx2.aligned.bam.junctions\n    ## chr1:14830:14929:2                           0                           0\n    ## chr1:14830:14969:2                          19                          71\n    ## chr1:14830:15020:2                           0                           0\n    ## chr1:15039:15795:2                           4                          30\n    ## chr1:15039:16853:2                           0                           0\n    ## chr1:15943:16606:2                           0                           3\n    ##                    GTEx3.aligned.bam.junctions TCGA1.aligned.junctions\n    ## chr1:14830:14929:2                           0                       0\n    ## chr1:14830:14969:2                           9                       0\n    ## chr1:14830:15020:2                           0                       0\n    ## chr1:15039:15795:2                           0                       9\n    ## chr1:15039:16853:2                           0                       0\n    ## chr1:15943:16606:2                           0                       0\n    ##                    TCGA2.aligned.junctions TCGA3.aligned.junctions\n    ## chr1:14830:14929:2                       0                       0\n    ## chr1:14830:14969:2                      13                       0\n    ## chr1:14830:15020:2                       0                       0\n    ## chr1:15039:15795:2                      15                       0\n    ## chr1:15039:16853:2                       0                       0\n    ## chr1:15943:16606:2                       6                       0\n\n``` r\n# head of ann.out$featureID (the junction ID list)\nhead(ann.out$featureID)\n```\n\n    ## [1] \"chr1:14830:14929:2\" \"chr1:14830:14969:2\" \"chr1:14830:15020:2\"\n    ## [4] \"chr1:15039:15795:2\" \"chr1:15039:16853:2\" \"chr1:15943:16606:2\"\n\n``` r\n# head of ann.out$groupID (the junction-associated gene list)\nhead(ann.out$groupID)\n```\n\n    ## [1] \"WASH7P\" \"WASH7P\" \"WASH7P\" \"WASH7P\" \"WASH7P\" \"WASH7P\"\n"
      },
      "source": "https://raw.githubusercontent.com/MauerLab/DJExpress/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3.3 Filtering junctions for differential expression analysis using DJEprepare()",
        "parent_header": [
          "3 Example DJE analysis"
        ],
        "type": "Text_excerpt",
        "value": "Once we have junctions annotated with their respective gene of origin\nwithin **ann.out**, we can now filter them based on user-defined\nexpression cutoffs.\n\nFor this step, we need to provide the sample names (as defined by the\ncolnames in ann.out$quant.annotated) that correspond to the basal\nexperimental condition (e.g.\u00a0WT/normal condition, non-treated condition,\netc). In the case of this example, the GTEx normal colon samples\ncorrespond to our basal experimental condition.\n\nAdditionally, we are going to use the default expression cutoffs for\nDJEprepare (minimum of read count mean per junction - **minMean** of 10\nreads and minimum of read count variance per junction - **minVar** of\n0):\n\n``` r\nGroup1 <- colnames(ann.out$quant.annotated)[grep(\"GTEx\", colnames(ann.out$quant.annotated))]\nprint(Group1) # GTEx sample names\n```\n\n    ## [1] \"GTEx1.aligned.bam.junctions\" \"GTEx2.aligned.bam.junctions\"\n    ## [3] \"GTEx3.aligned.bam.junctions\"\n\n``` r\n# Run DJEprepare\nprep.out <- DJEprepare(annotate.out = ann.out, Group1 = Group1,\n                       minMean = 10,maxMean = Inf,minVar = 0,maxVar = Inf) # these are the default values for minMean, maxMean, minVar and MaxVar\n\n# Summary of prep.out\nsummary(prep.out)\n```\n\n    ##               Length Class      Mode     \n    ## JunctExprfilt  6     data.frame list     \n    ## featureID     38     -none-     character\n    ## groupID       38     -none-     character\n    ## design        12     -none-     numeric\n\nDJEprepare() contains expression-based filtered junction counts, gene\nannotation and design matrix for differential expression analysis\n"
      },
      "source": "https://raw.githubusercontent.com/MauerLab/DJExpress/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3.4 Test for Differential Junction Expression using DJEanalyze()",
        "parent_header": [
          "3 Example DJE analysis"
        ],
        "type": "Text_excerpt",
        "value": "At this point we have all the data we need for the differential junction\nexpression analysis.\n\nAn FDR cutoff of 0.05 and a minimal absolute log-fold change (logFC) of\n2 are default paramenters for DJEanalyze(). Users are free to explore\nand modify the multiple options for the function (type ?DJEanalyze for\nmore details):\n\n``` r\n# Run DJEanalyze\nanlz.out <- DJEanalyze(prepare.out = prep.out, Group1 = Group1,\n                       FDR = 0.05, logFC = 2)\n```\n\n    ## Total number of junctions:  38 \n    ## Total number of genes:  4 \n    ## Number of genes with 1 junction:  1 \n    ## Mean number of junctions in a gene:  10 \n    ## Max number of junctions in a gene:  19\n\nWith DJEanalyze, a tests for differential junction expression is\nimplemented using voom\u2019s log2-counts per million (logCPM) and\nobservation-level weights based on mean-variance relationship (stored at\n**anlz.out$v.norm**).\n\nA linear model is then fit per junction using a provided experimental\ndesign, and empirical Bayes moderated t-statistics are implemented to\nassess the significance level of the observed expression changes.\n\nThe linear model framework of limma is also used in parallel to\ncalculate differential junction usage, where significant differences in\nlog-fold-changes in the fit model between junctions from the same gene\nare tested (using the diffSplice function from limma and stored at\n**anlz.out$ex.norm**).\n\nDJExpress thereby identifies alternatively spliced regions in\ntranscripts based on two main features of splice junction expression: 1)\nQuantitative changes in the abundance of individual junctions between\nexperimental groups, and 2) Differences in their expression levels\ncompared to the average expression of other junctions in the gene.\n\nFollowing these criteria, splice junctions are classified based on their\nabsolute log-fold change (e.g.\u00a0experimental condition A vs B) and their\nrelative log-fold change (target junction vs all other junctions in the\ngene) in one of the following expression groups:\n\n-   **Group 0**: Junctions without differential expression or\n    differential usage.\n-   **Group 1**: Junctions with equal levels of differential expression\n    and differential usage, reflecting changes in splicing patterns\n    between experimental conditions (in this case, both absolute and\n    relative log-fold change values are similar, if not the same).\n-   **Group 2**: Junctions with differential expression but no\n    differential usage or vice-versa, implying the occurrence of\n    generalized changes in expression across the gene, rather than the\n    presence of a differentially spliced region (in this case, either\n    the absolute or relative log-fold change value is not significant).\n-   **Group 3**: Junctions with divergent levels of differential\n    expression and differential usage, indicating concomitant changes in\n    splicing and total gene expression (in this case, the absolute and\n    relative log-fold change values can substantially vary from each\n    other).\n\nLet\u2019s check the summary of **anlz.out** object:\n\n``` r\nsummary(anlz.out)\n```\n\n    ##                       Length Class      Mode\n    ## v.norm                 4     EList      list\n    ## ex.norm               17     MArrayLM   list\n    ## dje.out               25     data.frame list\n    ## dje.sig                0     -none-     NULL\n    ## logFC.plot             0     -none-     NULL\n    ## logFC.plot.junctions   0     -none-     NULL\n    ## volcano.plot           0     -none-     NULL\n    ## model.fit              0     -none-     NULL\n    ## group.par              0     -none-     NULL\n\n-   **v.norm** correspond to the log-cpm values outputed by limma:voom\n-   **ex.norm** contains the differential junction expression analysis\n    output\n-   **dje.out** correspond to the annotated **ex.norm** data set with\n    additional information, including basic statistics (e.g.\u00a0median,\n    zero counts, etc) and DJE group for each junction.\n-   **dje.sig** a subset of **dje.out** containing significant hits\n    based on FDR and logFC cutoffs and the expression group of each\n    junction.\n-   **logFC.plot.junctions** Table with junctions shown in logFC.plot. They are defined as     junctions passing FDR cutoff for differential usage as well as differential               expression.\n-   **logFC.plot** Shows the regression plot of Absolute logFC ~ Relative logFC for           differentially used (compared to average junction expression in the gene) and             differentially expressed junctions (basal vs tested sample group)\n-   **volcano.plot** Volcano plot of differential junction expression\n-   **model.fit** Correspond to the confidence and prediction intervals\n    for the linear regression (Absolute logFC \\~ Relative logFC)\n    required to define the expression group of each junction.\n-   **group.par** Indicates the \u201cGroup\u201d type for each junction (Group\n    0,1,2 or 3) based on its position within the \u201crelative vs absolute\n    logFC\u201d regression plot (**logFC.plot**) whose parameters are defined\n    by the fit model (**model.fit**), and user-defined FDR and logFC\n    cutoffs.\n\nFor most users, the top relevant element in DJEanalyze() output object\nis **dje.sig** , a data frame with the differentially expressed\njunctions considered significant based on the FDR and logFC cutoffs\n*(for this particular example, since the gtf used only contained chr1\n-and consequently, only genes in this chromosome- there were no\ndifferentially expressed junctions detected and thus **dje.sig**,\n**logFC.plot**, **volcano.plot**, **model.fit** and **group.par** are\nnot produced).*\n\nThe summary statistics and additional information about all junctions\nanalyzed by DJExpress() can be found in **dje.out**:\n\n``` r\nhead(anlz.out$dje.out)\n```\n\n    ##             junctionID     GeneID     logFC          t    P.Value       FDR\n    ## 1 chr1:569491:569920:2 AL669831.3 -7.399331 -2.4981874 0.01357649 0.4060932\n    ## 2 chr1:569199:569362:2 AL669831.3 -6.920520 -2.3156498 0.02195099 0.4060932\n    ## 3 chr1:568990:569195:2 AL669831.3  3.883564  1.4650514 0.14502801 0.9320353\n    ## 4 chr1:569158:569317:2 AL669831.3 -3.658810 -1.1936361 0.23453015 0.9320353\n    ## 5   chr1:15948:16606:2     WASH7P  3.528810  1.0169887 0.31081845 0.9320353\n    ## 6 chr1:569297:569340:2 AL669831.3  2.318959  0.7760885 0.43893519 0.9320353\n    ##   medianExp.group1   meanExp.group1 medianExp.group2   meanExp.group2\n    ## 1                0 204.333333333333                0                0\n    ## 2                0 150.333333333333                0                0\n    ## 3                0                0               71 63.6666666666667\n    ## 4                0               94                0                0\n    ## 5                0               19                4 6.33333333333333\n    ## 6                0                0                0 394.666666666667\n    ##   medianNormExp.group1 meanNormExp.group1 medianNormExp.group2\n    ## 1     10.8601062067676   13.3887641130092     7.44121906358489\n    ## 2     10.8601062067676   13.2413183276152     7.44121906358489\n    ## 3     10.2985733721812   9.96845760178822     14.6417753676264\n    ## 4     10.8601062067676   13.0158266208891     7.44121906358489\n    ## 5     10.2985733721812   12.2502876187697     10.6518290322903\n    ## 6     10.2985733721812   9.96845760178822     7.44121906358489\n    ##   meanNormExp.group2 group1WithCounts group2WithCounts zeroCounts.group1\n    ## 1   7.44830555314337                1                0                 2\n    ## 2   7.44830555314337                1                0                 2\n    ## 3   12.4725591108128                0                2                 3\n    ## 4   7.44830555314337                1                0                 2\n    ## 5   10.1563459904198                1                2                 2\n    ## 6   11.1849930475568                0                1                 3\n    ##   zeroCounts.group2 neojunction logFC.ebayes AveExpr.ebayes   t.ebayes\n    ## 1                 3        <NA>    -7.790190       10.41853 -2.4486829\n    ## 2                 3        <NA>    -7.363267       10.34481 -2.2917382\n    ## 3                 1 neojunction     2.447053       11.22051  0.8708416\n    ## 4                 3        <NA>    -4.388091       10.23207 -1.3283461\n    ## 5                 1        <NA>    -1.675349       11.20332 -0.4402782\n    ## 6                 2 neojunction     1.110836       10.57673  0.3458094\n    ##   P.Value.ebayes adj.P.Val.ebayes  B.ebayes\n    ## 1     0.01547513        0.4425836 -4.592654\n    ## 2     0.02329387        0.4425836 -4.593063\n    ## 3     0.38521396        0.7921862 -4.595273\n    ## 4     0.18605478        0.7921862 -4.594770\n    ## 5     0.66036110        0.9934724 -4.595398\n    ## 6     0.72996414        0.9934724 -4.595546\n\nThe column **neojunction** specifies the junctions that are uniquely\nfound in the tested condition (TCGA tumor samples in this example) and\nnever found in any sample from the basal condition.\n\nWhen a junction annotation file is provided as an additional input to\nDJEanalyze() (), **dje.out** contains an additional column called\n**annotation**, where junctions not found in the gtf transcriptome\nannotation file are indicated as ***unnanotated***.\n\n***Note**: A junction annotation file can be produced using the JAn()\nfunction in DJExpress. users need to provide the path to the gtf file\nand JAn() generates a data frame with all exon-exon junctions found in\nthe gft and their correspondent gene ID (this can take some time\ndepending on the size of the gtf file).*\n\n``` r\ngtf <- system.file(\"extdata\", \"chr1.gtf.gz\", package = \"DJExpress\")\nJan.out <- JAn(gtf)\n\nhead(Jan.out)\n```\n\n    ##                gene           junction\n    ## 1 ENSG00000223972.5 chr1:12228:12612:1\n    ## 2 ENSG00000223972.5 chr1:12722:13220:1\n    ## 3 ENSG00000223972.5 chr1:12058:12178:1\n    ## 5 ENSG00000223972.5 chr1:12698:12974:1\n    ## 6 ENSG00000223972.5 chr1:13053:13220:1\n    ## 7 ENSG00000223972.5 chr1:13375:13452:1\n"
      },
      "source": "https://raw.githubusercontent.com/MauerLab/DJExpress/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3.5 Gene-wise Splice plots",
        "parent_header": [
          "3 Example DJE analysis"
        ],
        "type": "Text_excerpt",
        "value": "One of the main features of DJExpress is the generation of interactive\ngene-wise junction plots using **DJEplotSplice()** function. This type\nof representation facilitates straight-forward visual inspection of\ndifferential splicing across a gene of interest and exploration of\nsupplementary information about each junction\u2019s expression, including\nthe above-mentioned classification based on absolute and relative\nlog-fold change patterns and basic statistics on expression levels\n(e.g.\u00a0mean and median expression in each experimental condition, number\nof samples expressing the junction, etc.).\n\nAs example, we show here the gene-wise splice plot for the ENAH gene\nindicating the presence of an exon inclusion event in tumor samples:\n\n``` r\n# load DJEanalyze ouptut object (30 TCGA COADREAD tumor vs 30 GTEx colon tissue samples):\ndata(DJEanlz)\n\n# generate gene-wise splice plot:\niPlot.out <- DJEplotSplice(DJEanlz, geneID=\"ENAH\", logFC = 0.5, FDR = 0.05)\niPlot.out$plot\n```\n\n<img src=\"ReadFig/tutorial_plotSplice.png\" width=\"787\" />\n\nUp- and down-regulted Junctions (with both relative and absolute logFC\nvalues above the specified threshold) are shown in red and blue,\nrespectively. The user can explore further statistical information about\neach individual junction by hoovering over the junction dots in the\nplot, which displays a box with summarized DJE information, including\nrelative and absolute logFC values, FDR values and expression group of\nthe selected junction.\n\nWhen the path to a gtf file is provided, iPlot.out object contains an\nadditional gene model plot with exon-to-protein domain annotation and\nthe localization of a user-selected junction (e.g.\u00a0the exon skipping\njunction downregulated in ENAH):\n\n``` r\n# Indicate path to gtf file:\ngtf0 <- \"~/Downloads/gencode.v32lift37.annotation.gtf\" # gtf downloaded from GENCODE website\n\n# generate gene-wise splice plot:\nplot <-DJEplotSplice(DJEanlz, geneID=\"ENAH\",logFC = 0.5, FDR = 0.05,\n                     gtf = gtf0,\n                     target.junction = \"chr1:225688773:225695652:2\")\n\n# Show gene model plot:\nplot$JunctionToGene\n```\n\n<img src=\"ReadFig/DJEplotSplice_ENAH.png\" width=\"1192\" />\n\nColors within exonic regions in the gene model plot indicate the\npresence of protein domains and/or post-translational modifications\n(PTMs). The position of the selected junction within the gene model plot\nis indicated by a dashed arc whose color correspond to the type of\ndifferential expression (blue for downregulation and red for\nupregulation).\n\nThis visualization strategy facilitates straight-forward visual\ninspection of differential splicing across the entire gene (not\nrestricted to individual local splicing events) and exploration of\nsupplementary information about each junction\u2019s expression, including\nthe relative position of target alternative splicing events to protein\ndomains and PTMs, which further facilitates the undestanding of the\nfunctional consequences of such alterations in transcript and protein\nstructure.\n"
      },
      "source": "https://raw.githubusercontent.com/MauerLab/DJExpress/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3.6 Association between junction expression and external traits with DJEvsTrait()",
        "parent_header": [
          "3 Example DJE analysis"
        ],
        "type": "Text_excerpt",
        "value": "In order to explore the physiologic significance of target alternative\nsplicing events, the user can make associations between junction\nexpression and external sample traits (e.g.\u00a0clinical data, mutation\ndata, gene expression, etc) when available.\n\n**DJEvsTrait()** function recieves as input:\n\n1.  a **DJEanalyze** output object (analyze.out), and\n2.  a numeric vector or a matrix of external sample traits (traitData).\n\nUser should also indicate the experimental condition that should be\nexcluded from the junction-trait association test (Group1, we want to\nkeep only tumor sample data).\n\n**DJEvsTrait()** offers two type of association test: association based\non correlation, or association based on regression (test.type).\n\nIn the case of correlation analysis, **DJEvsTrait()** executes a big\nmatrix correlation test (\u201cbicor\u201d, \u201cpearson\u201d, \u201ckendall\u201d or \u201cspearman\u201d)\nbetween the normalized junction expression contained within the\n**DJEanalyze** output object and values in the trait data, for the\nselected samples in **Group1**. The return object contains the matrices\nwith correlation coefficients and associated P-values for each\njunction-trait pair.\n\nWhen regression analysis is selected, **DJEvsTrait()** uses large matrix\noperations adapted from the ***Matrix eQTL*** algorithms\n(<http://www.bios.unc.edu/research/genomic_software/Matrix_eQTL/>) and\nreturns a data frame with significant junction-trait associations based\non the selected model in **useModel** (modelLINEAR, modelANOVA or\nmodelLINEAR\\_CROSS).\n\nUsers have the additional option to supply a specific set of target\njunctions (maximum 5 junction IDs) to generate SpliceRadar plots (using\n**DJEspliceRadar** function) when test.type = \u201cCorrelation\u201d.\n\nFor our example, we are going to use the expression of genes known to\ncode for splicing factors as external trait data from the TCGA COADREAD\nsamples. Our aim is to test potential associations between the\nexpression levels of splicing factors and the expression of splice\njunctions, which could contribute to the characterization of regulatory\nnetworks controlling alternative splicing events of interest.\n\nOur example trait data looks like this:\n\n``` r\nSF <- system.file(\"extdata\", \"SF.expr.rds\", package = \"DJExpress\")\nSF.exp <- readRDS(SF)\nprint(SF.exp[,c(1:8)], row.names = FALSE)\n```\n\n    ##     ACIN1    AGGF1      AQR   ARGLU1     BAG2      BCAS1    BCAS2     BUB3\n    ##  7.552864 5.587345 6.066815 7.076861 2.074548  4.3489730 4.494495 6.478300\n    ##  7.053783 5.416257 4.330139 8.234791 2.230377  5.1375484 4.106623 7.122091\n    ##  7.545562 5.097509 5.660424 7.551051 3.282097  6.4118113 4.770974 7.290347\n    ##  7.381274 4.710511 5.348603 6.641707 4.510515  3.2940607 4.182552 7.234991\n    ##  7.446583 4.644171 5.170452 6.859362 5.155595 -0.5479771 4.940280 6.876452\n    ##  7.146317 5.147694 5.094728 7.849169 2.477678  2.4382041 4.782368 6.909769\n    ##  6.538969 4.753975 4.666928 7.444170 4.952424  4.2047463 4.530543 7.103473\n    ##  7.076956 4.982824 5.109519 6.120249 2.863316  6.3985415 4.808807 6.746150\n    ##  7.189313 3.854566 5.113996 5.519869 3.421598  3.0286828 4.355646 7.424761\n    ##  6.615288 4.500616 5.127311 5.957938 4.170996  4.6175814 5.412729 6.713595\n    ##  6.069404 4.920051 4.398614 7.865325 3.211644  2.9211268 4.805560 7.008063\n    ##  6.960877 4.398029 5.583253 6.787906 4.387801  4.1299934 4.850540 7.359703\n    ##  6.909462 5.144576 4.477908 8.053648 2.483248  4.5048661 5.109640 6.885118\n    ##  7.192344 5.130073 5.836868 6.075499 3.354691  2.9441545 4.937601 6.990735\n    ##  7.058618 5.185318 5.511891 6.104409 2.781132  2.7857434 5.246682 6.954692\n    ##  6.832429 5.094747 5.171595 7.211786 3.015575  4.8738161 5.095292 7.087915\n    ##  7.221428 5.873249 6.148053 5.410874 4.351467  6.0306128 5.804583 7.679160\n    ##  6.549775 5.818928 5.873622 7.986173 3.100379  3.1409853 4.492918 7.225574\n    ##  7.405144 4.974626 5.657289 5.800262 4.283825  5.1377954 4.779288 6.719201\n    ##  7.415361 5.615890 5.915267 6.943296 4.325100  6.3536787 5.757642 7.747063\n    ##  6.848851 5.780174 6.119275 6.766806 3.688394  4.4958346 5.594975 7.479008\n    ##  7.339277 5.358377 5.716494 5.815694 2.734738  4.9442019 5.291155 6.269628\n    ##  7.234535 5.336751 5.890506 6.888185 1.336695  6.4180489 4.747839 6.467778\n    ##  7.370953 5.070476 6.701108 6.839450 2.886882  6.3873475 5.161956 6.949431\n    ##  7.045549 5.423561 5.702272 5.312090 4.628792  5.7806371 5.199481 7.175501\n    ##  7.426605 5.137016 5.372259 7.260949 2.809443  7.5712496 4.694615 6.334887\n    ##  7.062514 5.068249 4.827781 7.293300 3.837951  3.2426898 4.179654 6.812228\n    ##  7.662508 4.393593 5.395414 7.319873 4.155953  4.3963637 4.778637 6.805694\n    ##  6.910246 5.365189 5.115793 7.432051 1.900800  6.0665772 5.161969 6.603271\n    ##  6.828736 5.364454 5.668844 6.356400 5.324406  3.7972869 5.874960 7.502759\n\nJunction-trait association analysis based on biweight mid-correlation\n(bicor) shows these results:\n\n``` r\n# define sample group for junction-trait association:\nGroup1 <- colnames(DJEanlz$v.norm$E)[grep(\"SRR\", colnames(DJEanlz$v.norm$E))]\n\n# Run DJEvsTrait:\nDT.out <- DJEvsTrait(analyze.out = DJEanlz, Group1 = Group1,traitData = SF.exp,\n                     coeff = 0.2,select.junctions = c(\"chr1:225692756:225695652:2\",\n                                                      \"chr1:225688773:225692692:2\",\n                                                      \"chr1:225688773:225695652:2\"),\n                     test.type = \"Correlation\", cor.method = \"bicor\")\n```\n\n    ## Allowing parallel execution with up to 2 working processes.\n    ## [1] \"subsetting associations to: chr1:225692756:225695652:2\"\n    ## [2] \"subsetting associations to: chr1:225688773:225692692:2\"\n    ## [3] \"subsetting associations to: chr1:225688773:225695652:2\"\n\n``` r\n# Summary of DT.out:\nsummary(DT.out)\n```\n\n    ##             Length Class  Mode   \n    ## TraitCor    385920 -none- numeric\n    ## TraitPvalue 385920 -none- numeric\n    ## sig.cor          3 -none- list\n\n``` r\n# Correlation coefficients:\nhead(DT.out$TraitCor[,c(1:10)])\n```\n\n    ##                                  ACIN1        AGGF1         AQR      ARGLU1\n    ## chr16:67863992:67864292:2   0.33027264  0.161770864  0.14655085 -0.19782666\n    ## chr17:73512698:73512826:1  -0.19339096  0.177985264  0.03910401  0.29665809\n    ## chr3:150321287:150340171:1 -0.12109937 -0.015321447  0.11433838  0.15094432\n    ## chr19:54970588:54970643:1  -0.03313364 -0.008815586 -0.36675411  0.22514066\n    ## chr7:134853813:134855150:2  0.09934680  0.153334718  0.39719648  0.01736267\n    ## chr19:54969701:54971945:1   0.13933309  0.401910104  0.18723459  0.15628675\n    ##                                   BAG2        BCAS1       BCAS2        BUB3\n    ## chr16:67863992:67864292:2   0.01183096 -0.013778808  0.08835670 -0.09855143\n    ## chr17:73512698:73512826:1  -0.30689089 -0.056371682 -0.13733771  0.19555748\n    ## chr3:150321287:150340171:1 -0.03725409 -0.008522488  0.03627020 -0.00957963\n    ## chr19:54970588:54970643:1  -0.03049230 -0.101366952 -0.09463717  0.21727652\n    ## chr7:134853813:134855150:2 -0.07880536 -0.056826845 -0.13440598  0.25771843\n    ## chr19:54969701:54971945:1  -0.31797439  0.163953042 -0.15865312 -0.19529143\n    ##                                   BUD13       BUD31\n    ## chr16:67863992:67864292:2   0.310379904  0.14446102\n    ## chr17:73512698:73512826:1   0.030813246  0.29721521\n    ## chr3:150321287:150340171:1 -0.308716116 -0.11785015\n    ## chr19:54970588:54970643:1  -0.398680758  0.12816278\n    ## chr7:134853813:134855150:2 -0.009644815  0.08440710\n    ## chr19:54969701:54971945:1   0.358594965  0.07900475\n\n``` r\n# Correlation p-values:\nhead(DT.out$TraitPvalue[,c(1:10)])\n```\n\n    ##                                 ACIN1      AGGF1        AQR    ARGLU1\n    ## chr16:67863992:67864292:2  0.07466582 0.39307645 0.43965805 0.2946843\n    ## chr17:73512698:73512826:1  0.30586162 0.34671266 0.83744804 0.1114087\n    ## chr3:150321287:150340171:1 0.52382712 0.93595276 0.54742388 0.4259137\n    ## chr19:54970588:54970643:1  0.86200967 0.96312371 0.04620474 0.2316263\n    ## chr7:134853813:134855150:2 0.60144862 0.41853646 0.02975046 0.9274410\n    ## chr19:54969701:54971945:1  0.46275102 0.02769423 0.32180880 0.4095248\n    ##                                  BAG2     BCAS1     BCAS2      BUB3      BUD13\n    ## chr16:67863992:67864292:2  0.95052351 0.9423902 0.6424359 0.6043772 0.09505788\n    ## chr17:73512698:73512826:1  0.09903153 0.7673248 0.4692460 0.3003696 0.87159104\n    ## chr3:150321287:150340171:1 0.84504360 0.9643490 0.8490889 0.9599301 0.09693744\n    ## chr19:54970588:54970643:1  0.87291772 0.5940376 0.6188770 0.2487676 0.02909002\n    ## chr7:134853813:134855150:2 0.67891899 0.7654980 0.4788746 0.1691444 0.95965766\n    ## chr19:54969701:54971945:1  0.08682700 0.3866383 0.4023805 0.3010406 0.05166453\n    ##                                BUD31\n    ## chr16:67863992:67864292:2  0.4462792\n    ## chr17:73512698:73512826:1  0.1107065\n    ## chr3:150321287:150340171:1 0.5351055\n    ## chr19:54970588:54970643:1  0.4997138\n    ## chr7:134853813:134855150:2 0.6574294\n    ## chr19:54969701:54971945:1  0.6781497\n\nWe have selected the 3 junction IDs involved in the exon inclusion event\nin ENAH gene to generate **sig.cor** table with the subset of\nsignificant associations to splicing factor expression. This table will\nbe use to generate the SpliceRadar plot using **DJEspliceRadar()**\nfunction:\n\n``` r\n# sig.cor table:\nsummary(DT.out$sig.cor)\n\n# define sample group for junction-trait association:\nSr.out <- DJEspliceRadar(DT.out, ordered.junction = \"chr1:225688773:225692692:2\")\n\nSr.out\n```\n\n<img src=\"ReadFig/tutorial_spliceradar.png\" width=\"1123\" />\n\nIn the SpliceRadar plot, the coefficient of top-ranked correlations\nbetween the three ENAH junctions is used to map each junction-trait\nassociation within a radar chart. Positive correlation coefficients are\nlocated within the outer region and negative correlation coefficients\nare found within the inner region of the radar chart.\n\nIn this example, we can see that both upregulated exon inclusion\njunctions (in red and dark red) correlate in a consistent way with an\nspecific subset of splicing factors expression, and such association\npattern tends to be inversed for the downregulated exon exclusion\njunction (in blue).\n\nSpliceRadar plot concept thus allows for the simultaneous visual\ninspection of relevant associations between the expression of selected\njunctions and external traits (e.g.\u00a0splicing factor expression), as well\nas for the elucidatation of expression-trait patterns shared among\njunctions of interest with potential biological relevance.\n"
      },
      "source": "https://raw.githubusercontent.com/MauerLab/DJExpress/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "4 Example Junction Co-expression Network Analysis (JCNA)",
        "type": "Text_excerpt",
        "value": "The weighted junction co-expression network analysis module (JCNA) in\nDJExpress provides an implementation of WGCNA algorithms (version\n1.70.3, Langfelder & Horvath, 2008) in the context of splice junction\nexpression.\n\nBefore testing the JCNA module with custom data, we highly recommend\nusers to get familiarized to co-expression network analysis concepts and\npipelines by following WGCNA tutorials\n(<https://horvath.genetics.ucla.edu/html/CoexpressionNetwork/Rpackages/WGCNA/Tutorials/>).\n"
      },
      "source": "https://raw.githubusercontent.com/MauerLab/DJExpress/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "4.2 1-pass JCNA",
        "parent_header": [
          "4 Example Junction Co-expression Network Analysis (JCNA)"
        ],
        "type": "Text_excerpt",
        "value": "Once data is pre-processed, **JCNA1pass()** function (which is a wrapper\nof the **blockwiseModules()** function in WGCNA) will construct the\njunction network and identify modules of expression. For this,\ncorrelation matrices (e.g.\u00a0using Pearson, Spearman or the default\nbiweight midcorrelation) are built for all pair-wise junctions. The full\nnetwork is specified by a weighted adjacency matrix calculated using the\nsoft threshold power determined by **JCNAprepare()**.\n\nUsers should explore the multiple parameters that can be adjusted for\n**JCNA1pass()** (e.g.\u00a0minimum module size, module detection sensitivity,\ncut height of the hierarchical clustering dendrogram for module\ndefinition, etc) in order to fine-tuning network construction. We have\nkept default parameter values also suggested by WGCNA guidelines to work\nwell in a variety of settings.\n\n``` r\n# Run JCNA1pass (this will take some minutes. You can try more threads specified in nThreads, in case they are available in your system):\nJ1pass <- JCNA1pass(Jprep, cor.method = \"bicor\", nThreads = 2)\n```\n\n    ## [1] \"Constructing the junction network and modules\"\n    ## Allowing parallel execution with up to 2 working processes.\n    ##  Calculating module eigengenes block-wise from all genes\n    ##    Flagging genes and samples with too many missing values...\n    ##     ..step 1\n    ##  ....pre-clustering genes to determine blocks..\n    ##    Projective K-means:\n    ##    ..k-means clustering..\n    ##    ..merging smaller clusters...\n    ## Block sizes:\n    ## gBlocks\n    ##    1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16 \n    ## 4999 4999 4998 4997 4993 4991 4990 4988 4985 4969 4967 4964 4960 4942 4903 4896 \n    ##   17   18   19   20   21   22   23   24 \n    ## 4862 4851 4838 4710 4663 4167 4043 2964 \n    ##  ..Working on block 1 .\n    ##     TOM calculation: adjacency..\n    ##     ..will use 2 parallel threads.\n    ##      Fraction of slow calculations: 0.000000\n    ##     ..connectivity..\n    ##     ..matrix multiplication (system BLAS)..\n    ##     ..normalization..\n    ##     ..done.\n    ##    ..saving TOM for block 1 into file JCNA_blockwiseTOM-block.1.RData\n    ##  ....clustering..\n    ##  ....detecting modules..\n    ##  ....calculating module eigengenes..\n    ##  ....checking kME in modules..\n    ##      ..removing 6 genes from module 2 because their KME is too low.\n    ##  ..Working on block 2 .\n    ##     TOM calculation: adjacency..\n    ##     ..will use 2 parallel threads.\n    ##      Fraction of slow calculations: 0.000000\n    ##     ..connectivity..\n    ##     ..matrix multiplication (system BLAS)..\n    ##     ..normalization..\n    ##     ..done.\n    ##    ..saving TOM for block 2 into file JCNA_blockwiseTOM-block.2.RData\n    ##  ....clustering..\n    ##  ....detecting modules..\n    ##  ....calculating module eigengenes..\n    ##  ....checking kME in modules..\n    ##  ...      \n    ##      ..removing 123 genes from module 1 because their KME is too low.\n    ##      ..removing 104 genes from module 2 because their KME is too low.\n    ##  ..merging modules that are too close..\n    ##      mergeCloseModules: Merging modules whose distance is less than 0.25\n    ##        Calculating new MEs...\n    ## [1] \" modules identified:32\"\n    ## \n    ##     0     1     2     3     4     5     6     7     8     9    10    11    12 \n    ## 59055 24919  8625  2498  1564  1423  1356  1352  1262  1180  1174  1036   987 \n    ##    13    14    15    16    17    18    19    20    21    22    23    24    25 \n    ##   958   743   719   677   625   621   517   410   338   309   302   293   278 \n    ##    26    27    28    29    30    31 \n    ##   268   255   244   229   218   204 \n    ## [1] \"Label 0 (grey color) is reserved for genes outside of all modules\"\n\n    ## [1] \"Calculating module membership values and trait correlations\"\n\n    ## [1] \"Defining junction significance for each trait\"\n    ## [1] \"done\"\n\n``` r\n# Summary of JCNA1pass output:\nsummary(J1pass)\n```\n\n    ##                      Length Class        Mode     \n    ## net                      10 -none-       list     \n    ## datExpr              114639 data.frame   list     \n    ## datTraits               360 data.frame   list     \n    ## moduleColors         114639 -none-       character\n    ## module.den               24 -none-       list     \n    ## moduleTraitCor        11520 -none-       numeric  \n    ## moduleTraitPvalue     11520 -none-       numeric  \n    ## juncModuleMembership     32 data.frame   list     \n    ## juncMMPvalue             32 data.frame   list     \n    ## ModuleTrait               3 recordedplot list     \n    ## Junctrait               720 data.frame   list     \n    ## sig.cors.trait          360 -none-       list\n\n``` r\n# Junction module dendrogram (first 4 dendrogram blocks shown):\nJ1pass$module.den[[1]]\nJ1pass$module.den[[2]]\nJ1pass$module.den[[3]]\nJ1pass$module.den[[4]]\n```\n\n<img src=\"ReadFig/tutorial_moduleden1.png\" width=\"571\" /><img src=\"ReadFig/tutorial_moduleden2.png\" width=\"571\" /><img src=\"ReadFig/tutorial_moduleden3.png\" width=\"571\" /><img src=\"ReadFig/tutorial_moduleden4.png\" width=\"571\" />\n\n``` r\n# Assignment of junctions to respective module:\nJ1pass$net$colors[1:10] # only first 10 displayed\n```\n\n    ##   chr1:14830:14969:2   chr1:17369:17605:2   chr1:17743:17914:2 \n    ##                 \"23\"                  \"0\"                  \"0\" \n    ## chr1:569158:569317:2 chr1:763156:764382:1 chr1:878439:878632:1 \n    ##                 \"18\"                  \"0\"                  \"4\" \n    ## chr1:878758:879077:1 chr1:879189:879287:1 chr1:880181:880421:2 \n    ##                  \"4\"                  \"4\"                  \"0\" \n    ## chr1:880181:880436:2 \n    ##                  \"0\"\n\n``` r\n# correspondent module color:\nWGCNA::labels2colors(J1pass$net$colors)[1:10]\n```\n\n    ##  [1] \"grey60\"      \"turquoise\"   \"turquoise\"   \"greenyellow\" \"turquoise\"  \n    ##  [6] \"white\"       \"white\"       \"white\"       \"turquoise\"   \"turquoise\"\n\n``` r\n# Module Eigengenes per sample:\nJ1pass$net$MEs[,c(1:10)] # only first 10 modules displayed\n```\n\n    ##                 ME20         ME16        ME15         ME14          ME19\n    ## TCGA_1   0.103025422 -0.085979768  0.07872600  0.036201625  0.1155179449\n    ## TCGA_3   0.077388088  0.208277206  0.28396200  0.075029346  0.1339219076\n    ## TCGA_4   0.283525364 -0.015779129  0.24892425  0.240541474  0.1659999945\n    ## TCGA_5   0.004878349  0.256686160  0.29543648  0.165513127  0.1793970536\n    ## TCGA_6   0.196332433 -0.202724060  0.06576807  0.219980665  0.1606143575\n    ## TCGA_7  -0.309061016 -0.146727796 -0.30270714 -0.518139586 -0.5193446470\n    ## TCGA_8  -0.180901898 -0.083101393  0.12028732  0.014987299 -0.0009810184\n    ## TCGA_9  -0.014158443 -0.156754417 -0.30826127 -0.339741467 -0.4613021783\n    ## TCGA_10  0.471977840  0.249560020 -0.16770460  0.064724664 -0.1646598532\n    ## TCGA_11 -0.086727123 -0.110125043 -0.23698113 -0.384640759 -0.3233076214\n    ## TCGA_12  0.130058683  0.040692105 -0.13100943  0.123838866  0.1587360867\n    ## TCGA_13 -0.177380898 -0.375057512  0.06719161 -0.383660548 -0.3372767844\n    ## TCGA_14  0.074352071 -0.070708327  0.25641499  0.053958173  0.1744532425\n    ## TCGA_15  0.166798830 -0.117336995 -0.09967809  0.155346101  0.0646724857\n    ## TCGA_16  0.124458900 -0.003326440  0.25037229  0.145776218 -0.0056271056\n    ## TCGA_17 -0.177184502  0.372111905 -0.13085418  0.013332421  0.0622467349\n    ## TCGA_18 -0.010139358  0.018419138  0.14658309  0.033578241 -0.0502907902\n    ## TCGA_19 -0.105347359  0.100940621 -0.18893045 -0.089993877  0.0279343516\n    ## TCGA_20  0.063090995  0.370859516 -0.10886590  0.138195004  0.1251715822\n    ## TCGA_21  0.247349442 -0.177080300 -0.03528816  0.110462422 -0.0121397858\n    ## TCGA_22 -0.094210008 -0.098454899  0.26669427  0.140130354  0.1560703358\n    ## TCGA_23 -0.134667800 -0.072609008  0.17590567 -0.003969142  0.0559605664\n    ## TCGA_24 -0.237916877  0.005787073  0.02423824 -0.010766956  0.1576507066\n    ## TCGA_25 -0.145077975  0.272782176 -0.14672240 -0.069686683  0.0925133214\n    ## TCGA_26 -0.329115346  0.158809785 -0.14792298 -0.126770944 -0.0029033820\n    ## TCGA_27 -0.136027994 -0.177009294 -0.17842783 -0.057076877 -0.0169949330\n    ## TCGA_28  0.004267095 -0.248977965 -0.20414304  0.057011195  0.0806757604\n    ## TCGA_29 -0.064642694 -0.065824790  0.08029586  0.046692531  0.0394803395\n    ## TCGA_30  0.255055780  0.152651429  0.02669649  0.149147113 -0.0561886726\n    ##                ME21         ME28         ME24           ME8          ME9\n    ## TCGA_1   0.02011512  0.070213520  0.070963544  0.1005742246  0.175879038\n    ## TCGA_3   0.14533509  0.240513389  0.097109630  0.0413671717  0.138486295\n    ## TCGA_4   0.11171969  0.055470603 -0.045384832  0.0008061462  0.149309270\n    ## TCGA_5   0.11419077 -0.046389587 -0.071892523 -0.0333749086  0.124228831\n    ## TCGA_6   0.09573965  0.087567816  0.176708955  0.0502289070  0.203514489\n    ## TCGA_7  -0.56731235 -0.514299457 -0.509578918 -0.5065169274 -0.514144174\n    ## TCGA_8   0.04682959  0.176652437  0.122147771  0.1492983690  0.132499407\n    ## TCGA_9  -0.40115667 -0.472828249 -0.475456370 -0.4795429081 -0.502983071\n    ## TCGA_10  0.03066148 -0.080665162  0.187103585 -0.1929783169 -0.075595198\n    ## TCGA_11 -0.26099680 -0.221260234 -0.222182747 -0.2732343291 -0.262071880\n    ## TCGA_12  0.24218073 -0.001809426  0.178738966  0.1210553752  0.113177819\n    ## TCGA_13 -0.41560879 -0.361331695 -0.398709962 -0.3412629796 -0.303770508\n    ## TCGA_14  0.16489960  0.031372683  0.207118923  0.1264930861  0.165070491\n    ## TCGA_15 -0.01011077 -0.029484605  0.166182866  0.0733883529  0.064718440\n    ## TCGA_16  0.01513443  0.032763378 -0.002736111  0.0047487797 -0.009480872\n    ## TCGA_17 -0.02383060  0.109283526 -0.064485131  0.0399616752 -0.085063472\n    ## TCGA_18  0.07927667  0.059840559  0.099922532  0.0697602976  0.011851582\n    ## TCGA_19 -0.04270465 -0.004187904 -0.001851495  0.1159348878  0.014957875\n    ## TCGA_20  0.11938908  0.142667343  0.009276971 -0.0185853821 -0.035615425\n    ## TCGA_21  0.01726009 -0.060542289 -0.105072928 -0.0929620723 -0.152614392\n    ## TCGA_22  0.18527830  0.084729323  0.198922796  0.1649739534  0.115474758\n    ## TCGA_23  0.08295565  0.192813193  0.102252084  0.1844101536  0.117218602\n    ## TCGA_24  0.08978370  0.021838165  0.063634696  0.1573683600  0.062455533\n    ## TCGA_25  0.11098264  0.221709377  0.079938572  0.1175522919  0.030759915\n    ## TCGA_26 -0.13839989  0.190518526 -0.023554770  0.0783302282  0.070103393\n    ## TCGA_27 -0.05795956 -0.013003750  0.035733110  0.1301201803  0.101919311\n    ## TCGA_28  0.03837291  0.034808037  0.046159493  0.1750222699  0.134001677\n    ## TCGA_29  0.08933600  0.173935633  0.101934375  0.1373147219  0.124860247\n    ## TCGA_30  0.11863890 -0.120895148 -0.022943083 -0.1002516083 -0.109147980\n\n``` r\n# Junction module membership values:\nJ1pass$juncModuleMembership[c(1:10),c(1:10)] # only first 10 rows and columns displayed\n```\n\n    ##                             MM20         MM16          MM15         MM14\n    ## chr1:14830:14969:2   -0.14877223  0.052944771 -0.0198539391 -0.153526309\n    ## chr1:17369:17605:2   -0.07993977 -0.248403998 -0.1247984181 -0.039483325\n    ## chr1:17743:17914:2   -0.06385915 -0.185576948 -0.1324204839  0.049227883\n    ## chr1:569158:569317:2 -0.11662347 -0.023285794  0.0007658819 -0.138827147\n    ## chr1:763156:764382:1 -0.11415083  0.072718117  0.1349391358  0.317648078\n    ## chr1:878439:878632:1 -0.08693247 -0.163699774  0.0773272097 -0.007002024\n    ## chr1:878758:879077:1 -0.03800737 -0.189611988  0.1140912037 -0.042286393\n    ## chr1:879189:879287:1  0.08201547 -0.177359464  0.1636950030  0.191416081\n    ## chr1:880181:880421:2  0.06301739  0.096558628  0.4203080058  0.409683730\n    ## chr1:880181:880436:2 -0.04915496  0.005130104  0.3382846892  0.375097592\n    ##                             MM19          MM0        MM21         MM28\n    ## chr1:14830:14969:2   -0.04000515  0.346179640 -0.14458737  0.041006498\n    ## chr1:17369:17605:2   -0.01793684 -0.130997017 -0.30675197  0.183418347\n    ## chr1:17743:17914:2   -0.04453809 -0.257697292 -0.16682654  0.225098647\n    ## chr1:569158:569317:2 -0.02478559  0.423370092 -0.03723287 -0.003926982\n    ## chr1:763156:764382:1  0.50333991  0.008196651  0.31873508  0.182771097\n    ## chr1:878439:878632:1  0.10963058 -0.133608529  0.01334184  0.123534518\n    ## chr1:878758:879077:1  0.06231297 -0.100335353  0.02817631  0.046707983\n    ## chr1:879189:879287:1  0.17892070 -0.097559013  0.04887074  0.129816343\n    ## chr1:880181:880421:2  0.62576224  0.368134688  0.34923326  0.531837366\n    ## chr1:880181:880436:2  0.65508869  0.158788228  0.23439304  0.519129483\n    ##                             MM24        MM8\n    ## chr1:14830:14969:2   -0.33596049 -0.2822884\n    ## chr1:17369:17605:2    0.02556507  0.1961402\n    ## chr1:17743:17914:2    0.23872819  0.2891339\n    ## chr1:569158:569317:2 -0.29098799 -0.2397877\n    ## chr1:763156:764382:1  0.32636260  0.3269458\n    ## chr1:878439:878632:1  0.38115907  0.5768248\n    ## chr1:878758:879077:1  0.42411405  0.5074444\n    ## chr1:879189:879287:1  0.45894553  0.5130710\n    ## chr1:880181:880421:2  0.26577456  0.3033289\n    ## chr1:880181:880436:2  0.24762612  0.4620172\n\n``` r\n# Junction-to-trait significance (GS, correlation coefficient) and associated P-value (p.GS):\nJ1pass$Junctrait[c(1:10),c(1:10)]\n```\n\n    ##                          GS.ACIN1   p.GS.ACIN1    GS.AGGF1 p.GS.AGGF1\n    ## chr1:14830:14969:2    0.003528657 0.9855059914 -0.02646876 0.89159018\n    ## chr1:17369:17605:2    0.161718535 0.4019685800 -0.15925833 0.40926172\n    ## chr1:17743:17914:2   -0.014423959 0.9408016343  0.04374008 0.82175054\n    ## chr1:569158:569317:2 -0.024231807 0.9007053778 -0.06793467 0.72622462\n    ## chr1:763156:764382:1  0.201223382 0.2952333639 -0.13403070 0.48820542\n    ## chr1:878439:878632:1  0.224990026 0.2406223560 -0.31449073 0.09660253\n    ## chr1:878758:879077:1  0.129715207 0.5024414455 -0.33822422 0.07271972\n    ## chr1:879189:879287:1  0.226587708 0.2372101839 -0.18279777 0.34255685\n    ## chr1:880181:880421:2  0.543446928 0.0023134152  0.25834020 0.17602036\n    ## chr1:880181:880436:2  0.609123130 0.0004533334  0.23732484 0.21511629\n    ##                           GS.AQR    p.GS.AQR   GS.ARGLU1 p.GS.ARGLU1\n    ## chr1:14830:14969:2   -0.33093484 0.079509429  0.19997543  0.29830121\n    ## chr1:17369:17605:2   -0.10506178 0.587547789  0.38183554  0.04095541\n    ## chr1:17743:17914:2    0.06747463 0.728008859  0.22980615  0.23043486\n    ## chr1:569158:569317:2 -0.35154750 0.061475357  0.15507589  0.42182918\n    ## chr1:763156:764382:1  0.10487526 0.588214866 -0.05413338  0.78032269\n    ## chr1:878439:878632:1 -0.02684557 0.890056038 -0.29338520  0.12243145\n    ## chr1:878758:879077:1 -0.03644917 0.851101775  0.01034415  0.95752797\n    ## chr1:879189:879287:1  0.04844585 0.802928058 -0.17567310  0.36201492\n    ## chr1:880181:880421:2  0.35379534 0.059720121 -0.03337284  0.86354720\n    ## chr1:880181:880436:2  0.47477966 0.009255848 -0.22068007  0.24998911\n    ##                           GS.BAG2  p.GS.BAG2\n    ## chr1:14830:14969:2   -0.003491630 0.98565806\n    ## chr1:17369:17605:2   -0.385933921 0.03866051\n    ## chr1:17743:17914:2   -0.341306410 0.06998722\n    ## chr1:569158:569317:2  0.006052153 0.97514320\n    ## chr1:763156:764382:1  0.169537762 0.37928292\n    ## chr1:878439:878632:1 -0.172823404 0.36997683\n    ## chr1:878758:879077:1 -0.313905330 0.09725837\n    ## chr1:879189:879287:1 -0.282704082 0.13729338\n    ## chr1:880181:880421:2 -0.170888366 0.37544122\n    ## chr1:880181:880436:2 -0.231039250 0.22787373\n\n``` r\n# Module-trait significant associations found:\nJ1pass$sig.cors.trait[1:10] # only first 10 displayed\n```\n\n    ## $ACIN1\n    ## ME19 ME28  ME8  ME9 ME10 ME25 \n    ##    5    8   10   11   25   31 \n    ## \n    ## $AGGF1\n    ## ME28  ME7  ME2 \n    ##    8   22   23 \n    ## \n    ## $AQR\n    ## ME19 ME21 ME28 ME17 ME23  ME2 \n    ##    5    7    8   20   21   23 \n    ## \n    ## $ARGLU1\n    ## ME16  ME3 \n    ##    2   15 \n    ## \n    ## $BAG2\n    ## ME16 ME12  ME3  ME5  ME1 \n    ##    2   13   15   26   29 \n    ## \n    ## $BCAS1\n    ## ME20 ME28 ME10  ME5 \n    ##    1    8   25   26 \n    ## \n    ## $BCAS2\n    ## ME16  ME9 ME23  ME2  ME4  ME1 \n    ##    2   11   21   23   24   29 \n    ## \n    ## $BUB3\n    ## ME8 ME9 ME7 ME2 ME4 ME5 \n    ##  10  11  22  23  24  26 \n    ## \n    ## $BUD13\n    ## ME14 ME19 ME21 ME18 ME22 ME17 ME23  ME2 ME26  ME1 \n    ##    4    5    7   17   18   20   21   23   28   29 \n    ## \n    ## $BUD31\n    ## ME20 ME14  ME0  ME8 ME12  ME7  ME2 ME10  ME5  ME1  ME6 \n    ##    1    4    6   10   13   22   23   25   26   29   30\n\n``` r\n# Module-trait correlation coefficients and P-values:\nJ1pass$moduleTraitCor[,c(1:10)]\n```\n\n    ##             ACIN1        AGGF1          AQR       ARGLU1         BAG2\n    ## ME20 -0.094187007 -0.079875341  0.103057540 -0.084712531  0.184627441\n    ## ME16  0.126069973  0.125829436  0.338210955 -0.376360135  0.474339873\n    ## ME15  0.243069048  0.226191344  0.225742639  0.149470677 -0.341869191\n    ## ME14  0.223856908  0.117045011  0.345740870 -0.060061133  0.104749586\n    ## ME19  0.684845147  0.031569628  0.506309064 -0.151149183  0.027515334\n    ## ME0   0.247170248 -0.180359608 -0.140926106  0.069882844  0.142406195\n    ## ME21  0.174891789  0.031564261  0.383094901 -0.124989088  0.160144243\n    ## ME28  0.471644299  0.368091825  0.398830803 -0.077019991 -0.287583202\n    ## ME24  0.103256854 -0.004519532  0.250607016 -0.194724351 -0.302337422\n    ## ME8   0.449308783  0.026993582  0.305783000 -0.129593259 -0.359518739\n    ## ME9   0.573457777 -0.213310151  0.098449971  0.061249011 -0.293339957\n    ## ME29  0.317518097 -0.082450248  0.133917960  0.077739147 -0.287553535\n    ## ME12  0.175492079  0.033631153  0.124934572 -0.039409627 -0.417383505\n    ## ME13 -0.243129196  0.010254087 -0.031415695  0.187689029 -0.187542424\n    ## ME3  -0.144160127  0.011575137 -0.120241864  0.394503834 -0.558334627\n    ## ME30  0.048156448  0.024933861 -0.248329470  0.090333536 -0.288592452\n    ## ME18 -0.054355839 -0.041905047 -0.351361550  0.194504785  0.012240492\n    ## ME22  0.069960063 -0.012259707 -0.254955535  0.096372081  0.008950175\n    ## ME31  0.093180213  0.047151134 -0.119823182 -0.208025937 -0.192216657\n    ## ME17 -0.078960714 -0.346169303 -0.377136762 -0.061396350  0.168675149\n    ## ME23  0.183746287 -0.242457340 -0.384934483 -0.001347678 -0.035949986\n    ## ME7   0.204561585 -0.419069811 -0.171207053 -0.111378829  0.106850776\n    ## ME2  -0.151710835 -0.480170237 -0.547714102  0.073629160 -0.050249492\n    ## ME4   0.079198346 -0.323731363 -0.233958620 -0.074651633 -0.070472876\n    ## ME10  0.421242304  0.084588457  0.273460762 -0.156744454  0.011293134\n    ## ME5   0.352272741  0.146359616  0.003781174  0.114389694 -0.512887900\n    ## ME11 -0.150156070 -0.094566937 -0.173637718  0.226521429 -0.254513104\n    ## ME26 -0.153276274  0.017114139 -0.345141121  0.201171836 -0.023817382\n    ## ME1  -0.001826104 -0.194361100 -0.284137744  0.210736823 -0.421367891\n    ## ME6  -0.201732338  0.157294691  0.092513744 -0.033744113 -0.124718915\n    ## ME25 -0.618527210  0.031132130 -0.262089771  0.162372896 -0.021662140\n    ## ME27  0.110741164 -0.021406347  0.143499899 -0.033098912  0.300609740\n    ##             BCAS1        BCAS2         BUB3        BUD13        BUD31\n    ## ME20 -0.419622847  0.196918572  0.311627003  0.366074398  0.633608568\n    ## ME16  0.294374914  0.407285851  0.277238396  0.325643598 -0.004556284\n    ## ME15 -0.056297280 -0.018853025 -0.183092638  0.137846779  0.215915883\n    ## ME14 -0.196672710  0.249566053  0.132162469  0.589420512  0.393537815\n    ## ME19 -0.001844834 -0.050150402 -0.015933364  0.374126680  0.047405024\n    ## ME0  -0.296625838 -0.065840262  0.104166821  0.008623718  0.510934892\n    ## ME21 -0.014169618  0.194779564  0.173661546  0.438139067  0.201513264\n    ## ME28  0.630038368 -0.021985600 -0.191515260  0.153129652 -0.281317205\n    ## ME24  0.086872982  0.004656436 -0.330895444  0.321509843  0.091009461\n    ## ME8   0.310105871 -0.350021573 -0.448492175  0.005127489 -0.526701842\n    ## ME9  -0.068441911 -0.533008217 -0.442312760 -0.005521309 -0.037926863\n    ## ME29  0.076625305 -0.321609412 -0.149093392 -0.114575132 -0.301348449\n    ## ME12 -0.214239209  0.052423974 -0.018823537  0.352189726  0.418334202\n    ## ME13 -0.202445807  0.061287979  0.220185646  0.081040463  0.077675299\n    ## ME3  -0.124530472 -0.134770123 -0.357502805  0.085074630 -0.070560625\n    ## ME30 -0.024384725 -0.091762975 -0.233417798 -0.048112615  0.034745785\n    ## ME18 -0.166103309 -0.050645621  0.268136808 -0.401105917  0.187740583\n    ## ME22 -0.276463273 -0.177649631  0.084863326 -0.415328354  0.161064141\n    ## ME31 -0.286970779 -0.224568605 -0.194717581 -0.365205753 -0.077371549\n    ## ME17 -0.053164012 -0.175700192 -0.161224907 -0.396723765 -0.328096962\n    ## ME23 -0.068907490 -0.413144300 -0.246844917 -0.573898924 -0.223313467\n    ## ME7   0.055707445 -0.253342992 -0.455579518 -0.242942736 -0.416963911\n    ## ME2  -0.202510101 -0.477939050 -0.490436353 -0.563212301 -0.372929614\n    ## ME4  -0.219591529 -0.428881826 -0.621465729 -0.228480460 -0.334942099\n    ## ME10  0.767819952  0.107936312 -0.053112533  0.022359808 -0.492583261\n    ## ME5   0.560563951 -0.215846983 -0.385250506 -0.359050018 -0.423819031\n    ## ME11 -0.081650063 -0.039801443 -0.063740583 -0.257595906  0.022354225\n    ## ME26  0.113043957 -0.185370942  0.007698684 -0.600202777 -0.261603896\n    ## ME1   0.129299444 -0.426522523 -0.312920131 -0.525158845 -0.393912865\n    ## ME6   0.295845740  0.029692149  0.076870658 -0.274300673 -0.523043190\n    ## ME25  0.067959415  0.181555281  0.282259617 -0.212227145 -0.081945309\n    ## ME27  0.095065855  0.299743346  0.317378696  0.148468043 -0.057875557\n\n``` r\nJ1pass$moduleTraitPvalue[,c(1:10)]\n```\n\n    ##             ACIN1       AGGF1         AQR     ARGLU1        BAG2        BCAS1\n    ## ME20 6.269782e-01 0.680427163 0.594733109 0.66217577 0.337663672 2.344606e-02\n    ## ME16 5.146256e-01 0.515434632 0.072731651 0.04418979 0.009330264 1.211169e-01\n    ## ME15 2.038900e-01 0.238053674 0.239010959 0.43900152 0.069496989 7.717669e-01\n    ## ME14 2.430620e-01 0.545401325 0.066196095 0.75694777 0.588664537 3.065168e-01\n    ## ME19 4.165264e-05 0.870857244 0.005071119 0.43381989 0.887330124 9.924220e-01\n    ## ME0  1.961252e-01 0.349143409 0.465892128 0.71868430 0.461173335 1.181661e-01\n    ## ME21 3.641877e-01 0.870879018 0.040238937 0.51826604 0.406626979 9.418437e-01\n    ## ME28 9.797457e-03 0.049455751 0.032103125 0.69128507 0.130349755 2.495617e-04\n    ## ME24 5.940169e-01 0.981436574 0.189777683 0.31142897 0.110917570 6.540841e-01\n    ## ME8  1.447904e-02 0.889453522 0.106707996 0.50284672 0.055427688 1.015969e-01\n    ## ME9  1.145748e-03 0.266555756 0.611393153 0.75228801 0.122491788 7.242589e-01\n    ## ME29 9.326398e-02 0.670688902 0.488574688 0.68854462 0.130391183 6.927907e-01\n    ## ME12 3.625177e-01 0.862500909 0.518449988 0.83915801 0.024274870 2.644290e-01\n    ## ME13 2.037747e-01 0.957897453 0.871481763 0.32957122 0.329956007 2.922477e-01\n    ## ME3  4.556143e-01 0.952479024 0.534402087 0.03419454 0.001646008 5.198145e-01\n    ## ME30 8.040826e-01 0.897843239 0.193968018 0.64120287 0.128946135 9.000819e-01\n    ## ME18 7.794419e-01 0.829117368 0.061622345 0.31198560 0.949750769 3.891541e-01\n    ## ME22 7.183860e-01 0.949671989 0.181952658 0.61896958 0.963247389 1.465620e-01\n    ## ME31 6.306823e-01 0.808096494 0.535836588 0.27886248 0.317823012 1.312069e-01\n    ## ME17 6.838985e-01 0.065838443 0.043719043 0.75171062 0.381748454 7.841637e-01\n    ## ME23 3.400149e-01 0.205066015 0.039210414 0.99446415 0.853118941 7.224562e-01\n    ## ME7  2.871254e-01 0.023648563 0.374538055 0.56515293 0.581166358 7.740965e-01\n    ## ME2  4.320935e-01 0.008383528 0.002101724 0.70425729 0.795741613 2.920912e-01\n    ## ME4  6.829960e-01 0.086686376 0.221886700 0.70033689 0.716405667 2.523923e-01\n    ## ME10 2.286123e-02 0.662641611 0.151178489 0.41679009 0.953635524 1.164466e-06\n    ## ME5  6.090471e-02 0.448693575 0.984468892 0.55461710 0.004440737 1.562082e-03\n    ## ME11 4.368816e-01 0.625582693 0.367691278 0.23735109 0.182738316 6.737097e-01\n    ## ME26 4.273016e-01 0.929785490 0.066699295 0.29535968 0.902395479 5.593150e-01\n    ## ME1  9.924990e-01 0.312350189 0.135225783 0.27250417 0.022816377 5.038238e-01\n    ## ME6  2.939879e-01 0.415135735 0.633139198 0.86204344 0.519177954 1.191827e-01\n    ## ME25 3.484392e-04 0.872632410 0.169608780 0.40004122 0.911191531 7.261287e-01\n    ## ME27 5.673959e-01 0.912236185 0.457702661 0.86465698 0.113074294 6.237520e-01\n    ##            BCAS2         BUB3        BUD13        BUD31\n    ## ME20 0.305900350 0.0998428295 0.0508130483 0.0002244111\n    ## ME16 0.028314805 0.1453868677 0.0847348517 0.9812856454\n    ## ME15 0.922671465 0.3417653977 0.4757900829 0.2606189580\n    ## ME14 0.191685021 0.4943430557 0.0007666807 0.0346761332\n    ## ME19 0.796136011 0.9346192565 0.0455661021 0.8070823501\n    ## ME0  0.734358885 0.5907515946 0.9645870908 0.0046204734\n    ## ME21 0.311289102 0.3676245238 0.0174414920 0.2945236123\n    ## ME28 0.909870734 0.3196258237 0.4277492097 0.1393152805\n    ## ME24 0.980874356 0.0795473977 0.0889962956 0.6386985766\n    ## ME8  0.062689657 0.0146804006 0.9789399791 0.0033316789\n    ## ME9  0.002910364 0.0162808211 0.9773228473 0.8451359171\n    ## ME29 0.088891774 0.4401708163 0.5539711784 0.1121483577\n    ## ME12 0.787099313 0.9227920571 0.0609698160 0.0239201286\n    ## ME13 0.752135284 0.2510787900 0.6760143446 0.6887877681\n    ## ME3  0.485786960 0.0569110216 0.6608169422 0.7160669897\n    ## ME30 0.635911399 0.2229877131 0.8042575500 0.8579887585\n    ## ME18 0.794165438 0.1596195953 0.0310456526 0.3294359743\n    ## ME22 0.356552571 0.6616097607 0.0250564260 0.4039012826\n    ## ME31 0.241527791 0.3114461289 0.0514064441 0.6899449300\n    ## ME17 0.361939719 0.4034259856 0.0331082514 0.0822803726\n    ## ME23 0.025909389 0.1967335992 0.0011334066 0.2442378786\n    ## ME7  0.184827593 0.0130079868 0.2041324910 0.0244327978\n    ## ME2  0.008735785 0.0069130149 0.0014672273 0.0463176574\n    ## ME4  0.020261167 0.0003203793 0.2332097527 0.0757192085\n    ## ME10 0.577309172 0.7843677856 0.9083430096 0.0066348573\n    ## ME5  0.260774818 0.0390358606 0.0557698348 0.0219553550\n    ## ME11 0.837579809 0.7425419531 0.1773130609 0.9083657979\n    ## ME26 0.335687457 0.9683837143 0.0005775188 0.1704301537\n    ## ME1  0.021036779 0.0983696846 0.0034423895 0.0344885153\n    ## ME6  0.878479426 0.6918546064 0.1498766885 0.0035993082\n    ## ME25 0.345903947 0.1379390158 0.2690488387 0.6725945238\n    ## ME27 0.114167502 0.0934157679 0.4421126249 0.7655429590\n\nIn order to explore module-trait significant associations found by\n**JCNA1pass**, users can use the **JCNAModTrait()** function to plot\nModule membership vs.\u00a0Junction significance.\n\nHere we explore the association between module No.\u00a04 (turquoise) and\nDDX1 splicing factor expression:\n\n``` r\njMT <- JCNAModTrait(J1pass, trait =\"DDX1\",module = \"4\", cor.method = \"bicor\")\n\njMT$MMplot\n```\n\n<img src=\"\n    \n    /tutorial_MMvsJCplot.png\" width=\"855\" />\n\n***jMT$MMplot*** shows an interactive scatterplot of Junction\nSignificance (JS) for DDX1 expression vs.\u00a0Module Membership (MM) in the\nbrown module. There is a significant correlation between JS and MM,\nindicating that junctions in this co-expression module are significantly\nassociated to the expression of this particular splicing factor. It also\nillustrates how junctions highly significantly associated with a trait\nare often also the most important (central) elements of modules\nassociated with the trait.\n"
      },
      "source": "https://raw.githubusercontent.com/MauerLab/DJExpress/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "4.3 2-pass JCNA",
        "parent_header": [
          "4 Example Junction Co-expression Network Analysis (JCNA)"
        ],
        "type": "Text_excerpt",
        "value": "Users have the option to continue into a second round of network\nconstruction, that is specifically conceived to identify and remove\njunction from the network, whose association to external trait data is\nnot splicing-specific but rather representing the association between\nthe trait and the total expression of the respective gene. This is\nparticularly relevant, since a considerable number of co-expressing\njunctions are expected to cluster into single modules as a result of\nintrinsic associations at the gene expression level without any specific\nassociation to splicing.\n\nFor 2-pass JCNA, gene expression-based networks including correlations\nwith a user-selected sample trait are calculated using\n**JCNAgenePrepare()** function. The required input data are:\n\n1.  **JCNA1pass** output object\n2.  Path to gtf file (used to asign junctions to genes)\n3.  Normalized gene expression data\n\nThe absolute value of junction significance, which represents the\ncorrelation coefficient between a given junction and the selected trait\nis plotted as a function of the corresponding gene significance.\nJunctions outside of the distribution by \u22652 standard deviations (showing\nno correlation between junction and gene significance for trait) are\nkept for network re-construction using **JCNA2pass()** function:\n\n``` r\n# Indicate path to gtf file:\ngtf0 <- \"~/Downloads/gencode.v32lift37.annotation.gtf\" # gtf downloaded from GENCODE website\n\n# load gene expression data:\ngexp <- system.file(\"extdata\", \"genExpr.rds\", package = \"DJExpress\")\nfilgenExpr <- readRDS(gexp)\n\n# Change format of rownames for match:\nrownames(J1pass$datTraits) <- paste0(\"TCGA_\",\nseq(1,nrow(J1pass$datTraits), 1))\n\n\n# Run JCNAgenePrepare:\nJgPrep <- JCNAgenePrepare(pass1.out = J1pass, genExpr = filgenExpr,\n                          gtf=gtf0, networkType = \"unsigned\", cor.method = \"bicor\")\n```\n\n    ## [1] \"Calculating co-expression networks from gene expression\"\n    ## Allowing parallel execution with up to 2 working processes.\n    ##  Flagging junctions and samples with too many missing values...\n    ##   ..step 1\n    ##   ..Excluding 7 genes from the calculation due to too many missing samples or zero variance.\n    ##   ..step 2\n    ## Removing genes: CT45A3, CT45A4, CT45A5, CT45A6, GAGE13, GAGE2E, MAGEB1\n\n    ## pickSoftThreshold: will use block size 2504.\n    ##  pickSoftThreshold: calculating connectivity for given powers...\n    ##    ..working on genes 1 through 2504 of 17863\n    ##    ..working on genes 2505 through 5008 of 17863\n    ##    ..working on genes 5009 through 7512 of 17863\n    ##    ..working on genes 7513 through 10016 of 17863\n    ##    ..working on genes 10017 through 12520 of 17863\n    ##    ..working on genes 12521 through 15024 of 17863\n    ##    ..working on genes 15025 through 17528 of 17863\n    ##    ..working on genes 17529 through 17863 of 17863\n    ##    Power SFT.R.sq  slope truncated.R.sq  mean.k. median.k. max.k.\n    ## 1      1 0.000835 -0.134          0.969 3710.000  3.68e+03 5630.0\n    ## 2      2 0.272000 -1.480          0.944 1180.000  1.14e+03 2600.0\n    ## 3      3 0.597000 -1.960          0.941  471.000  4.28e+02 1470.0\n    ## 4      4 0.760000 -2.180          0.938  216.000  1.83e+02  939.0\n    ## 5      5 0.828000 -2.270          0.928  111.000  8.61e+01  649.0\n    ## 6      6 0.856000 -2.250          0.918   61.600  4.33e+01  473.0\n    ## 7      7 0.885000 -2.170          0.924   36.700  2.30e+01  358.0\n    ## 8      8 0.901000 -2.060          0.928   23.100  1.28e+01  279.0\n    ## 9      9 0.919000 -1.950          0.937   15.200  7.45e+00  222.0\n    ## 10    10 0.926000 -1.860          0.942   10.500  4.46e+00  179.0\n    ## 11    12 0.955000 -1.680          0.963    5.430  1.73e+00  122.0\n    ## 12    14 0.966000 -1.560          0.974    3.120  7.40e-01   87.7\n    ## 13    16 0.947000 -1.530          0.964    1.930  3.39e-01   66.4\n    ## 14    18 0.941000 -1.490          0.966    1.260  1.64e-01   51.9\n    ## 15    20 0.912000 -1.480          0.951    0.866  8.21e-02   41.3\n    ## 16    22 0.892000 -1.470          0.949    0.615  4.31e-02   33.4\n    ## 17    24 0.891000 -1.450          0.956    0.450  2.32e-02   27.4\n    ## 18    26 0.890000 -1.440          0.961    0.337  1.30e-02   22.8\n    ## 19    28 0.895000 -1.420          0.968    0.258  7.36e-03   19.1\n    ## 20    30 0.897000 -1.410          0.970    0.201  4.23e-03   16.2\n\n    ## [1] \"Constructing the gene network and modules\"\n    ## Allowing parallel execution with up to 2 working processes.\n\n    ## [1] \"Defining gene significance for each trait\"\n    ## [1] \"Defining gene-Trait vs junction-Trait correlation\"\n\n``` r\n# summary of JCNAgenePrepare output:\nsummary(JgPrep)\n```\n\n    ##                  Length Class        Mode\n    ## Gene.sampletree    3    recordedplot list\n    ## Gene.hc            3    recordedplot list\n    ## Gene.NetTop        3    recordedplot list\n    ## Gene.net          10    -none-       list\n    ## Gene.ModuleTrait   3    recordedplot list\n    ## Genetrait        720    data.frame   list\n    ## GeneToJunct       11    data.frame   list\n    ## JunctGeneTrait   360    -none-       list\n\n``` r\nJ2pass <- JCNA2pass(pass1.out = J1pass, GenePrepare.out = JgPrep,\n                     workDir= getwd(),\n                     trait=\"DDX1\", cor.method = \"bicor\")\n```\n\n    ## [1] \"Calculating co-expression networks from gene expression\"\n    ## Allowing parallel execution with up to 2 working processes.\n    ##  Flagging junctions and samples with too many missing values...\n    ##   ..step 1\n    ##  Flagging junctions and samples with too many missing values...\n    ##   ..step 1\n\n    ## [1] \"Choosing the soft-thresholding power\"\n    ## pickSoftThreshold: will use block size 5257.\n    ##  pickSoftThreshold: calculating connectivity for given powers...\n    ##    ..working on genes 1 through 5257 of 5257\n    ##    Power SFT.R.sq  slope truncated.R.sq  mean.k. median.k.  max.k.\n    ## 1      1   0.0859  0.862          0.902 1230.000  1.23e+03 1810.00\n    ## 2      2   0.1970 -0.751          0.956  433.000  4.18e+02  890.00\n    ## 3      3   0.5500 -1.250          0.988  188.000  1.71e+02  517.00\n    ## 4      4   0.7120 -1.530          0.995   93.600  7.95e+01  330.00\n    ## 5      5   0.7980 -1.660          0.999   51.200  4.06e+01  225.00\n    ## 6      6   0.8420 -1.770          0.998   30.300  2.25e+01  160.00\n    ## 7      7   0.8710 -1.860          0.998   19.000  1.32e+01  118.00\n    ## 8      8   0.8940 -1.910          0.998   12.600  8.20e+00   90.20\n    ## 9      9   0.9050 -1.940          0.995    8.740  5.37e+00   70.40\n    ## 10    10   0.9100 -1.960          0.990    6.300  3.73e+00   56.30\n    ## 11    12   0.9140 -1.990          0.980    3.610  1.96e+00   38.00\n    ## 12    14   0.8980 -2.000          0.973    2.300  1.09e+00   27.00\n    ## 13    16   0.8980 -1.920          0.974    1.580  6.46e-01   20.00\n    ## 14    18   0.9080 -1.820          0.987    1.160  4.03e-01   15.40\n    ## 15    20   0.9280 -1.700          0.982    0.886  2.62e-01   12.10\n    ## 16    22   0.9430 -1.610          0.980    0.701  1.73e-01   10.10\n    ## 17    24   0.9330 -1.640          0.979    0.570  1.16e-01    9.31\n    ## 18    26   0.9400 -1.630          0.989    0.473  8.03e-02    8.59\n    ## 19    28   0.9530 -1.600          0.991    0.399  5.61e-02    7.94\n    ## 20    30   0.9480 -1.600          0.984    0.341  3.97e-02    7.36\n\n    ## [1] \"Constructing gene effect-independent junction network and modules\"\n    ## Allowing parallel execution with up to 2 working processes.\n    ## [1] \" modules identified:31\"\n    ## \n    ##         black          blue         brown          cyan     darkgreen \n    ##            47           143           139            27            23 \n    ##      darkgrey    darkorange       darkred darkturquoise         green \n    ##            23            21            23            23            50 \n    ##   greenyellow          grey        grey60     lightcyan    lightgreen \n    ##            33          3989            27            27            25 \n    ##   lightyellow       magenta  midnightblue        orange          pink \n    ##            25            41            27            23            43 \n    ##        purple           red     royalblue   saddlebrown        salmon \n    ##            36            48            24            20            32 \n    ##       skyblue     steelblue           tan     turquoise         white \n    ##            20            20            32           175            20 \n    ##        yellow \n    ##            51 \n    ## [1] \"Label 0 is reserved for genes outside of all modules\"\n\n    ## [1] \"Calculating module membership values and trait correlations\"\n\n    ## Registered S3 method overwritten by 'quantmod':\n    ##   method            from\n    ##   as.zoo.data.frame zoo\n\n    ## [1] \"Calculating adjacency and saving Cytoscape tables\"\n    ## Allowing parallel execution with up to 2 working processes.\n    ## ..connectivity..\n    ## ..matrix multiplication (system BLAS)..\n    ## ..normalization..\n    ## ..done.\n    ## [1] \"done\"\n\n``` r\n# summary of JCNA2pass output:\nsummary(J2pass)\n```\n\n    ##                  Length   Class        Mode     \n    ## Junct.sampletree        3 recordedplot list     \n    ## net                    10 -none-       list     \n    ## MEs                    31 data.frame   list     \n    ## module.den              2 -none-       list     \n    ## JunctMM                31 data.frame   list     \n    ## MMPvalue               31 data.frame   list     \n    ## JunctTS                 5 data.frame   list     \n    ## JSPvalue                5 data.frame   list     \n    ## MMvsJunctSig           31 -none-       list     \n    ## modTOM           15912121 -none-       numeric  \n    ## modGenes.2           3989 -none-       character\n    ## modGenes             3989 -none-       character\n    ## modNames               31 -none-       character\n    ## Cytoscape.input        31 -none-       list     \n    ## VisANT.input           31 -none-       list\n\n``` r\n# Re-constructed network dendrogram:\nJ2pass$module.den\n```\n\n<img src=\"ReadFig/2passdendro.png\" width=\"571\" />\n\n``` r\n# Examples of junction modules significantly associated to DDX1 splicing factor expression:\nJ2pass$MMvsJunctSig$purple\n```\n\n<img src=\"ReadFig/purplemod.png\" width=\"855\" />\n\n``` r\n# Junctions in purple module (first 10 shown):\nJ2pass$net$colors[which(J2pass$net$colors==\"purple\")[1:10]]\n```\n\n    ##   chr2:74708214:74708349:2   chr2:99193607:99203938:1 \n    ##                   \"purple\"                   \"purple\" \n    ## chr2:122120877:122122669:2 chr3:126741185:126741594:1 \n    ##                   \"purple\"                   \"purple\" \n    ##   chr6:31927897:31927996:1   chr6:31930869:31931189:1 \n    ##                   \"purple\"                   \"purple\" \n    ##   chr6:31933791:31934485:1 chr7:100279859:100279944:2 \n    ##                   \"purple\"                   \"purple\" \n    ## chr7:100280106:100280212:2 chr7:100280854:100280926:2 \n    ##                   \"purple\"                   \"purple\"\n\n**JCNA2pass** output includes tables in the format required to be loaded\nin network visualization tools such as Cytoscape and VisANT which are\nsaved as text files in the working directoy:\n\n``` r\n# Network edges data of purple module formatted for Cytoscape:\nJ2pass$Cytoscape.input$purple$edgeData[c(1:10),]\n```\n\n    ##    fromNode   toNode     weight  direction fromAltName toAltName\n    ## 1   CCDC142   PLXNA1 0.02750298 undirected     CCDC142    PLXNA1\n    ## 2   CCDC142   SKIV2L 0.03256128 undirected     CCDC142    SKIV2L\n    ## 3   CCDC142 SKIV2L.1 0.03324313 undirected     CCDC142    SKIV2L\n    ## 4   CCDC142 SKIV2L.2 0.02877763 undirected     CCDC142    SKIV2L\n    ## 5   CCDC142   GIGYF1 0.03382747 undirected     CCDC142    GIGYF1\n    ## 6   CCDC142 GIGYF1.1 0.02298797 undirected     CCDC142    GIGYF1\n    ## 7   CCDC142 GIGYF1.2 0.02046708 undirected     CCDC142    GIGYF1\n    ## 8   CCDC142 GIGYF1.3 0.03512255 undirected     CCDC142    GIGYF1\n    ## 9   CCDC142 GIGYF1.4 0.03946027 undirected     CCDC142    GIGYF1\n    ## 10  CCDC142 GIGYF1.6 0.02237523 undirected     CCDC142    GIGYF1\n\n``` r\n# Network nodes data of purple module formatted for Cytoscape:\nJ2pass$Cytoscape.input$purple$nodeData[c(1:10),]\n```\n\n    ##    nodeName altName nodeAttr[nodesPresent, ]\n    ## 1   CCDC142 CCDC142                   purple\n    ## 2    INPP4A  INPP4A                   purple\n    ## 3    CLASP1  CLASP1                   purple\n    ## 4    PLXNA1  PLXNA1                   purple\n    ## 5    SKIV2L  SKIV2L                   purple\n    ## 6  SKIV2L.1  SKIV2L                   purple\n    ## 7  SKIV2L.2  SKIV2L                   purple\n    ## 8    GIGYF1  GIGYF1                   purple\n    ## 9  GIGYF1.1  GIGYF1                   purple\n    ## 10 GIGYF1.2  GIGYF1                   purple\n\n``` r\n# Network visualization using Cytoscape:\n```\n\n<img src=\"ReadFig/cytoscapeex.png\" width=\"1897\" />\n\n***Note***: On Cytoscape 3.8.0, you can import table network using\n**File** -&gt; **Import** -&gt; **Network from File** and selecting the\nmodule edge file. On the import dialogue box, select the following\nsettings:\n\n**fromNode** column as the Source Node  \n**toNode** column as the Target Node  \n**weight** column should be left as an Edge Attribute  \n**direction** column as interaction type  \n**fromAltName** as Source Node Attribute  \n**toAltName** as Target Node Attribute.\n"
      },
      "source": "https://raw.githubusercontent.com/MauerLab/DJExpress/master/README.md",
      "technique": "header_analysis"
    }
  ]
}