{
  "application_domain": [
    {
      "confidence": 16.29,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/prafols/rMSI"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2015-11-30T15:43:08Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-06T06:34:51Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "R MSI Tools"
      },
      "technique": "GitHub_API"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/prafols/rMSI/wiki"
      },
      "source": "https://raw.githubusercontent.com/prafols/rMSI/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/prafols/rMSI/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/prafols/rMSI/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "prafols/rMSI"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "rMSI"
      },
      "source": "https://raw.githubusercontent.com/prafols/rMSI/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "rMSI",
        "parent_header": [
          "rMSI",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "rMSI is an R package for mass spectrometry (MS) imaging data handling and visualization.\nThe package is a multi-platform tool that has been tested on Linux, MAC and Windows systems. \nIt provides an optimized data model to allow loading large MS imaging datasets in low resource computers. MS data is stored in the hard disk drive (HDD) but rMSI is able to access data as if it where kept in computer\u2019s memory using a virtual memory technology. The package also provides a graphical user interface (GUI) to facilitate MS imaging data exploration in R platform. The main rMSI GUI allows representing up to three MS ions spacial distribution, direct access to pixel spectrum and other usefull features. See and screenshot below.\n\n![alt text](https://github.com/prafols/rMSI/blob/master/images/screenShotrMSI_RGB.png \"rMSI Main GUI\")\n"
      },
      "source": "https://raw.githubusercontent.com/prafols/rMSI/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Rtools (Windows only)",
        "parent_header": [
          "rMSI",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "*rMSI* uses some compression methods that are not available by default in Windows operating system. To be able to run *rMSI*, Windows users must install Rtools available at: <https://cran.r-project.org/bin/windows/Rtools/> just download the *.exe installer and go trough the installation wizard.\n"
      },
      "source": "https://raw.githubusercontent.com/prafols/rMSI/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "RGtk2",
        "parent_header": [
          "rMSI",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "*rMSI* provides a quite complex data model together with a graphical user interface (GUI), consequently rMSI depends on many other R packages that must be also installed. RGtk2 is one of these packages and is known to be problematic to install in some cases (specially on non-Linux systems). So, it is highly recommended installing and testing it before going through the process of installing *rMSI*. \nFirst install RGtk2 using R console:\n```R\n> install.packages(\"RGtk2\")\n```\nThen test that it is working by loading the package:\n```R\n> library(RGtk2)\n```\nIf RGtk2 loads properly then continue with the *rMSI* installation process. Otherwise, please check out the RGtk2 website to solve issues related with Gtk installation: <http://www.ggobi.org/rgtk2/>\n\n##### rMSI\nThe simplest way to install rMSI and keep it updated is using devtools package. Install devtools from CRAN into your R session:\n```R\n>  install.packages(\"devtools\")\n```\nThen simply tell devtools to install rMSI from github latest release:\n```R\n> devtools::install_github(\"prafols/rMSI\", ref = \"0.9.1\")\n```\nThis will install rMSI package and all of its dependencies in your R environment. Then you can access to its functions by loading the rMSI package or through the `::` operator. For example, you can test the main rMSI GUI by executing:\n```R\n> foo <- rMSI::OpenMSI()\n```\nThis will open a dialog that allows loading up to two MS images in imzML format or rMSI .tar format. Then the MS images will be displayed. A reference to each MS image will be returned and stored in *foo* variable as *foo$img1* and *foo$img2*. \n"
      },
      "source": "https://raw.githubusercontent.com/prafols/rMSI/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick Start Guide",
        "parent_header": [
          "rMSI"
        ],
        "type": "Text_excerpt",
        "value": "This guide provides a quick overview of rMSI package usage. Before going through this guide it is recommended to have some knowledge of R language (<https://www.r-project.org>) and  rMSI package installed as described above. The fundamentals of rMSI are described here but for a more detailed information, please check the package documentation through the standard R help interface:\n```R\n> ??rMSI\n```\n"
      },
      "source": "https://raw.githubusercontent.com/prafols/rMSI/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "rMSI data structure",
        "parent_header": [
          "rMSI",
          "Quick Start Guide"
        ],
        "type": "Text_excerpt",
        "value": "MS images are loaded into R using rMSI format which consists in a list with the following fields:\n```R\nname: A string with the name of the MS image.\nmass: A numeric vector with all the mass channels.\nSize: A named two element vector containing the X and Y size of image in pixels.\npos:  A two column matrix where each rows provides the raster location of each spectrum.\npixel_size_um: The pixel size in microns.\nmean: The average spectrum of the whole image.\ndata: Data pointers to image spectra actually stored in the hard drive.\nnormalizations: A list containing intensity normalization coefficients already computed and stored.\n```\nEach one of the elements in the MS image can be access directly using the $ operator. For example, to obtain the pixel resolution:\n```R\nmyData$pixel_size_um\n```\nrMSI stores MS data in computer\u2019s hard drive and only loads part of it to RAM when it is required. For example, the main GUI only will load parts of spectra to memory to render an ion image, but the whole data won't be never completely loaded. Each MS spectrum is located using a unique identifier (ID) which is actually an integer number. The raster position of each spectrum is stored in myData$pos array where each row number corresponds to the spectrum ID of each raster position. \n"
      },
      "source": "https://raw.githubusercontent.com/prafols/rMSI/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Accessing spectra",
        "parent_header": [
          "rMSI",
          "Quick Start Guide"
        ],
        "type": "Text_excerpt",
        "value": "To simplify data access rMSI provides *loadImgCunckFromIds()* and *loadImgCunckFromCoords()* functions to load a bunch of selected pixel spectra to an R matrix. This functions load data into standard R variables so, be careful to not load to many data in your computer\u2019s memory. For example, lets suppose I want lo load some spectra of pixels which I know their ID and the desired ID\u2019s are 34, 56 and 96:\n```R\nmySpectra <- rMSI::loadImgChunkFromIds(myData, c(34, 56, 96))\n```\nAnd if I don't know the ID's but I know the XY coordinates the spectra can be also access expresing the XY coordinates as complex numbers, for example:\n```R\nmySpectra <- rMSI::loadImgChunkFromCoords(myData, complex(real = c(10, 12, 34), imaginary = c(5, 9, 12)))\n```\nIn both cases an R matrix is returned. Each row of the matrix corresponds to one spectrum using the same order as the ID\u2019s or XY coords were provided. So you can get your first spectrum intensities by doing:\n```R\nmyFirstIntensities <- mySpectra[1, ]\n```\nThe mass axis is common to the whole image and is available at mass field: *myData$mass*.  This spectrum can be plotted using the rMSI spectra viewer GUI:\n```R\nrMSI::plotSpectra(mass = myData$mass, intensity = myFirstIntensities, col = \"red\")\n```\nThe rMSI main GUI can be used to obtain spectra ID\u2019s from a set of pixels. First, open the MS image in the main GUI using the  *OpenMSI()* or *MSIWindow()* functions as described before. Then select some ion to visualize in the spectrum. After that, draw a rectangle over the MS image and click the *Get Spectra* button to fill the spectra list with the pixels inside the selected area. Finally, export the spectra list using the *Export* button. This will export the selected spectra as plain ASCII files and a list of ID\u2019s also as an ASCII file. If many pixels are selected a warning will be displayed and exporting only ID list will be allowed. Then, the exported list can be loaded into R session by standard functions as *read.table()*.\n"
      },
      "source": "https://raw.githubusercontent.com/prafols/rMSI/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/prafols/rMSI/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "GNU General Public License v3.0",
        "spdx_id": "GPL-3.0",
        "type": "License",
        "url": "https://api.github.com/licenses/gpl-3.0",
        "value": "https://api.github.com/licenses/gpl-3.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/prafols/rMSI/master/images/screenShotrMSI_RGB.png"
      },
      "source": "https://raw.githubusercontent.com/prafols/rMSI/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "rMSI"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "prafols"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 436547,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 239198,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/prafols/rMSI/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "prafols",
          "type": "User"
        },
        "date_created": "2020-09-28T06:45:09Z",
        "date_published": "2020-09-28T06:47:04Z",
        "description": "Minor changes to provide compatibility with the new ff package.",
        "html_url": "https://github.com/prafols/rMSI/releases/tag/0.9.1",
        "name": "rMSI version 0.9.1",
        "release_id": 31871026,
        "tag": "0.9.1",
        "tarball_url": "https://api.github.com/repos/prafols/rMSI/tarball/0.9.1",
        "type": "Release",
        "url": "https://api.github.com/repos/prafols/rMSI/releases/31871026",
        "value": "https://api.github.com/repos/prafols/rMSI/releases/31871026",
        "zipball_url": "https://api.github.com/repos/prafols/rMSI/zipball/0.9.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "prafols",
          "type": "User"
        },
        "date_created": "2020-07-31T17:10:47Z",
        "date_published": "2020-08-01T09:27:49Z",
        "description": "Improved rMSI with support for Orbitrap data. Use it with rMSIproc 0.3",
        "html_url": "https://github.com/prafols/rMSI/releases/tag/0.9",
        "name": "rMSI version 0.9",
        "release_id": 29190149,
        "tag": "0.9",
        "tarball_url": "https://api.github.com/repos/prafols/rMSI/tarball/0.9",
        "type": "Release",
        "url": "https://api.github.com/repos/prafols/rMSI/releases/29190149",
        "value": "https://api.github.com/repos/prafols/rMSI/releases/29190149",
        "zipball_url": "https://api.github.com/repos/prafols/rMSI/zipball/0.9"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "prafols",
          "type": "User"
        },
        "date_created": "2019-05-02T11:16:37Z",
        "date_published": "2019-05-02T11:25:01Z",
        "description": "Heavily tested version which is known to work properly with rMSIproc v0.2",
        "html_url": "https://github.com/prafols/rMSI/releases/tag/0.8",
        "name": "rMSI version 0.8",
        "release_id": 17106977,
        "tag": "0.8",
        "tarball_url": "https://api.github.com/repos/prafols/rMSI/tarball/0.8",
        "type": "Release",
        "url": "https://api.github.com/repos/prafols/rMSI/releases/17106977",
        "value": "https://api.github.com/repos/prafols/rMSI/releases/17106977",
        "zipball_url": "https://api.github.com/repos/prafols/rMSI/zipball/0.8"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "prafols",
          "type": "User"
        },
        "date_created": "2017-08-09T15:53:58Z",
        "date_published": "2017-08-09T16:02:49Z",
        "description": "- Added a method for merging datasets with slightly different mass axis (resampling)\r\n- Added imzML support for processed mode\r\n- Added support for datasets UUID's\r\n- Various imzML reading improvements ",
        "html_url": "https://github.com/prafols/rMSI/releases/tag/0.7",
        "name": "rMSI version 0.7",
        "release_id": 7335374,
        "tag": "0.7",
        "tarball_url": "https://api.github.com/repos/prafols/rMSI/tarball/0.7",
        "type": "Release",
        "url": "https://api.github.com/repos/prafols/rMSI/releases/7335374",
        "value": "https://api.github.com/repos/prafols/rMSI/releases/7335374",
        "zipball_url": "https://api.github.com/repos/prafols/rMSI/zipball/0.7"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "prafols",
          "type": "User"
        },
        "date_created": "2017-02-28T16:45:41Z",
        "date_published": "2017-02-28T16:51:23Z",
        "description": "Bug fix release\n",
        "html_url": "https://github.com/prafols/rMSI/releases/tag/0.6",
        "name": "version 0.6",
        "release_id": 5596629,
        "tag": "0.6",
        "tarball_url": "https://api.github.com/repos/prafols/rMSI/tarball/0.6",
        "type": "Release",
        "url": "https://api.github.com/repos/prafols/rMSI/releases/5596629",
        "value": "https://api.github.com/repos/prafols/rMSI/releases/5596629",
        "zipball_url": "https://api.github.com/repos/prafols/rMSI/zipball/0.6"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "prafols",
          "type": "User"
        },
        "date_created": "2017-01-26T16:56:19Z",
        "date_published": "2017-01-26T17:51:23Z",
        "description": "Added spin buttons for ion selection on spectraWidget\nCode refactorization\nRemoved MALDIquant and Zoo deps.\nMoved m/z calibration routines to rMSIproc pacakge\n",
        "html_url": "https://github.com/prafols/rMSI/releases/tag/0.5",
        "name": "rMSI version 0.5",
        "release_id": 5277461,
        "tag": "0.5",
        "tarball_url": "https://api.github.com/repos/prafols/rMSI/tarball/0.5",
        "type": "Release",
        "url": "https://api.github.com/repos/prafols/rMSI/releases/5277461",
        "value": "https://api.github.com/repos/prafols/rMSI/releases/5277461",
        "zipball_url": "https://api.github.com/repos/prafols/rMSI/zipball/0.5"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "prafols",
          "type": "User"
        },
        "date_created": "2016-12-05T10:07:38Z",
        "date_published": "2016-12-05T10:11:40Z",
        "description": "Improved readme\nAdded flip buttons\n",
        "html_url": "https://github.com/prafols/rMSI/releases/tag/0.4",
        "name": "rMSI version 0.4",
        "release_id": 4831481,
        "tag": "0.4",
        "tarball_url": "https://api.github.com/repos/prafols/rMSI/tarball/0.4",
        "type": "Release",
        "url": "https://api.github.com/repos/prafols/rMSI/releases/4831481",
        "value": "https://api.github.com/repos/prafols/rMSI/releases/4831481",
        "zipball_url": "https://api.github.com/repos/prafols/rMSI/zipball/0.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "prafols",
          "type": "User"
        },
        "date_created": "2016-10-28T11:46:45Z",
        "date_published": "2016-10-28T11:52:23Z",
        "description": "This is the first production release of rMSI package. It is basically a bug-fix of the previous release but it also adds support for imzML format (continuous mode only).\n",
        "html_url": "https://github.com/prafols/rMSI/releases/tag/0.3",
        "name": "rMSI version 0.3",
        "release_id": 4509539,
        "tag": "0.3",
        "tarball_url": "https://api.github.com/repos/prafols/rMSI/tarball/0.3",
        "type": "Release",
        "url": "https://api.github.com/repos/prafols/rMSI/releases/4509539",
        "value": "https://api.github.com/repos/prafols/rMSI/releases/4509539",
        "zipball_url": "https://api.github.com/repos/prafols/rMSI/zipball/0.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "prafols",
          "type": "User"
        },
        "date_created": "2016-05-13T09:49:28Z",
        "date_published": "2016-05-13T09:52:31Z",
        "description": "Pre-release version of rMSI. features:\n\nRAMdisk custom data format base on ff package\nMSI exploring interface with dual view (up to two images can be loaded)\nRGB composite image reconstruction (up to three ions)\nPixel spectrum access using ROI controls\nImage export for publication\nSpectra export in ASCII format\nSpectra ID export for large analysis\nXMASS import tools\nData access library\nCalibration GUI\n",
        "html_url": "https://github.com/prafols/rMSI/releases/tag/0.2",
        "name": "0.2",
        "release_id": 3218655,
        "tag": "0.2",
        "tarball_url": "https://api.github.com/repos/prafols/rMSI/tarball/0.2",
        "type": "Release",
        "url": "https://api.github.com/repos/prafols/rMSI/releases/3218655",
        "value": "https://api.github.com/repos/prafols/rMSI/releases/3218655",
        "zipball_url": "https://api.github.com/repos/prafols/rMSI/zipball/0.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "prafols",
          "type": "User"
        },
        "date_created": "2016-04-21T07:22:11Z",
        "date_published": "2016-04-22T08:34:10Z",
        "description": "Pre-release version of rMSI. features:\n- RAMdisk custom data format base on ff package\n- MSI exploring interface with dual view (up to two images can be loaded)\n- RGB composite image reconstruction (up to three ions)\n- Pixel spectrum access using ROI controls\n- Image export for publication\n- Spectra export in ASCII format \n- Spectra ID export for large analysis\n- XMASS import tools\n- Data access library\n",
        "html_url": "https://github.com/prafols/rMSI/releases/tag/0.1",
        "name": "0.1",
        "release_id": 3075624,
        "tag": "0.1",
        "tarball_url": "https://api.github.com/repos/prafols/rMSI/tarball/0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/prafols/rMSI/releases/3075624",
        "value": "https://api.github.com/repos/prafols/rMSI/releases/3075624",
        "zipball_url": "https://api.github.com/repos/prafols/rMSI/zipball/0.1"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 09:41:37",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 15
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick Start Guide",
        "parent_header": [
          "rMSI"
        ],
        "type": "Text_excerpt",
        "value": "This guide provides a quick overview of rMSI package usage. Before going through this guide it is recommended to have some knowledge of R language (<https://www.r-project.org>) and  rMSI package installed as described above. The fundamentals of rMSI are described here but for a more detailed information, please check the package documentation through the standard R help interface:\n```R\n> ??rMSI\n```\n"
      },
      "source": "https://raw.githubusercontent.com/prafols/rMSI/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Loading data and starting the main GUI",
        "parent_header": [
          "rMSI",
          "Quick Start Guide"
        ],
        "type": "Text_excerpt",
        "value": "The first step to start using rMSI consists in loading an MS image. You can obtain some example data to test the program at the public available links in  **Example Data** section below. The MS imaging data can be loaded from two formats: rMSI format and imzML (currently only continuous mode is supported). It is also possible to load data from Bruker\u2019s XMASS format but this format has to be previously converted using the *importBrukerXMASSImg_Wizard()* function.\nThe more straightforward way of loading data is using the function *OpenMSI()* which prompts the user to graphically select up to two MS images to load:\n```R\nmyData <- rMSI::OpenMSI()\n```\nThis function will load the images and open the main graphical user interface (GUI) which allows exploring the MS data interactively.\nThe returned value of *OpenMSI()* will contain a list of two images where: myData$img1 corresponds to the first user-selected image and myData$img2 the second loaded images. However, it is not mandatory to load two images. If only one image is loaded, then the other one will be *NULL*.\n\nNevertheless, opening the main GUI each time a MS images is loaded may not be very convenient in some cases. So, another way of loading data is using the *LoadMsiData()* function:\n```R\nmyData <- rMSI::LoadMsiData(\"/path/to/your/image.data\")\n```\nWhere the path to the image must be complete including .imzML or .tar extension. Then, this function will return the loaded MS image in a rMSI formatted R object.\nThe main GUI can be started anytime using the *MSIWindow()* function. For eaxmple:\n```R\nrMSI::MSIWindow(myData)\n```\nWhen rMSI uncompresse MS imaging data from its own format (.tar) or imzML format a folder called something like \"ramdisk_yourData\" is created at the same place where your data is stored on your hard drive. This folder will be used for rMSI to access MS data from the hard drive inside your R ression.\nIf an MS image was previously loaded, rMSI will automatically locate the \u201cramdisk\u201d folder and another day, in another R session *OpenMSI()* and *LoadMsiData()* function will use that ramdisk directory to restore the data in a few seconds. You can also delete this ramdisk folder (for example to recuperate some HDD space) and then it will be recreated when you call rMSI loading functions.\n"
      },
      "source": "https://raw.githubusercontent.com/prafols/rMSI/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "rMSI data structure",
        "parent_header": [
          "rMSI",
          "Quick Start Guide"
        ],
        "type": "Text_excerpt",
        "value": "MS images are loaded into R using rMSI format which consists in a list with the following fields:\n```R\nname: A string with the name of the MS image.\nmass: A numeric vector with all the mass channels.\nSize: A named two element vector containing the X and Y size of image in pixels.\npos:  A two column matrix where each rows provides the raster location of each spectrum.\npixel_size_um: The pixel size in microns.\nmean: The average spectrum of the whole image.\ndata: Data pointers to image spectra actually stored in the hard drive.\nnormalizations: A list containing intensity normalization coefficients already computed and stored.\n```\nEach one of the elements in the MS image can be access directly using the $ operator. For example, to obtain the pixel resolution:\n```R\nmyData$pixel_size_um\n```\nrMSI stores MS data in computer\u2019s hard drive and only loads part of it to RAM when it is required. For example, the main GUI only will load parts of spectra to memory to render an ion image, but the whole data won't be never completely loaded. Each MS spectrum is located using a unique identifier (ID) which is actually an integer number. The raster position of each spectrum is stored in myData$pos array where each row number corresponds to the spectrum ID of each raster position. \n"
      },
      "source": "https://raw.githubusercontent.com/prafols/rMSI/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Accessing spectra",
        "parent_header": [
          "rMSI",
          "Quick Start Guide"
        ],
        "type": "Text_excerpt",
        "value": "To simplify data access rMSI provides *loadImgCunckFromIds()* and *loadImgCunckFromCoords()* functions to load a bunch of selected pixel spectra to an R matrix. This functions load data into standard R variables so, be careful to not load to many data in your computer\u2019s memory. For example, lets suppose I want lo load some spectra of pixels which I know their ID and the desired ID\u2019s are 34, 56 and 96:\n```R\nmySpectra <- rMSI::loadImgChunkFromIds(myData, c(34, 56, 96))\n```\nAnd if I don't know the ID's but I know the XY coordinates the spectra can be also access expresing the XY coordinates as complex numbers, for example:\n```R\nmySpectra <- rMSI::loadImgChunkFromCoords(myData, complex(real = c(10, 12, 34), imaginary = c(5, 9, 12)))\n```\nIn both cases an R matrix is returned. Each row of the matrix corresponds to one spectrum using the same order as the ID\u2019s or XY coords were provided. So you can get your first spectrum intensities by doing:\n```R\nmyFirstIntensities <- mySpectra[1, ]\n```\nThe mass axis is common to the whole image and is available at mass field: *myData$mass*.  This spectrum can be plotted using the rMSI spectra viewer GUI:\n```R\nrMSI::plotSpectra(mass = myData$mass, intensity = myFirstIntensities, col = \"red\")\n```\nThe rMSI main GUI can be used to obtain spectra ID\u2019s from a set of pixels. First, open the MS image in the main GUI using the  *OpenMSI()* or *MSIWindow()* functions as described before. Then select some ion to visualize in the spectrum. After that, draw a rectangle over the MS image and click the *Get Spectra* button to fill the spectra list with the pixels inside the selected area. Finally, export the spectra list using the *Export* button. This will export the selected spectra as plain ASCII files and a list of ID\u2019s also as an ASCII file. If many pixels are selected a warning will be displayed and exporting only ID list will be allowed. Then, the exported list can be loaded into R session by standard functions as *read.table()*.\n"
      },
      "source": "https://raw.githubusercontent.com/prafols/rMSI/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example Data",
        "parent_header": [
          "rMSI"
        ],
        "type": "Text_excerpt",
        "value": "Some MS images are available at the following link to test rMSI package:\n<https://drive.google.com/file/d/0Bw0ksDAUk_BDQ2dFSGo1cjAzRkE/view?usp=sharing&resourcekey=0-WcpstoxAmFbAkY2pWluS7w>\n"
      },
      "source": "https://raw.githubusercontent.com/prafols/rMSI/master/README.md",
      "technique": "header_analysis"
    }
  ]
}