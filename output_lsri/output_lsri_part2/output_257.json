{
  "acknowledgement": [
    {
      "confidence": 1,
      "result": {
        "original_header": ":trophy: Some components of this project come from the follwing projects:",
        "parent_header": [
          "Acknowledgement and References"
        ],
        "type": "Text_excerpt",
        "value": ":star: The MGM Java implemention is from [causalMGM](https://github.com/benoslab/causalMGM) and [TetradLite](https://github.com/benoslab/tetradLite).\\\n:star: The DeepPINK implementation is from [DeepPINK](https://github.com/younglululu/DeepPINK).\\\n:star: The FDR filter function is from [DeepKnockoffs](https://github.com/msesia/deepknockoffs).\\\n:star: The Python implementation of DG algorithm is based on its Java version from [Tetrad](https://www.ccd.pitt.edu).\\\n:star: The implementation of the PC algorithm used in this project is from [pcalg](https://github.com/keiichishima/pcalg).\n"
      },
      "source": "https://raw.githubusercontent.com/ZhenjiangFan/DAG-deepVASE/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": ":trophy: Some components of this project come from the follwing projects:",
        "parent_header": [
          "Acknowledgement and References"
        ],
        "type": "Text_excerpt",
        "value": ":star: The MGM Java implemention is from [causalMGM](https://github.com/benoslab/causalMGM) and [TetradLite](https://github.com/benoslab/tetradLite).\\\n:star: The DeepPINK implementation is from [DeepPINK](https://github.com/younglululu/DeepPINK).\\\n:star: The FDR filter function is from [DeepKnockoffs](https://github.com/msesia/deepknockoffs).\\\n:star: The Python implementation of DG algorithm is based on its Java version from [Tetrad](https://www.ccd.pitt.edu).\\\n:star: The implementation of the PC algorithm used in this project is from [pcalg](https://github.com/keiichishima/pcalg).\n"
      },
      "source": "https://raw.githubusercontent.com/ZhenjiangFan/DAG-deepVASE/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ZhenjiangFan/DAG-deepVASE"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contact",
        "type": "Text_excerpt",
        "value": ":email: Please let us know if you have any questions, bug reports, or feedback via the following email:\n<p align=\"center\">\n    :e-mail: hyp15@pitt.edu\n</p>\n    \n\n"
      },
      "source": "https://raw.githubusercontent.com/ZhenjiangFan/DAG-deepVASE/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-05-18T21:41:19Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-08-23T15:25:53Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "type": "Text_excerpt",
        "value": "Identifying nonlinear causal relations and estimating their effect size help understand the complex disease pathobiology. Directed Acyclic Graphs using deep-learning VAriable SElection (DAG-deepVASE) is the first computational method that learns both linear and nonlinear causal relations and estimates the effect size using a deep-neural network approach coupled with the knockoff framework."
      },
      "source": "https://raw.githubusercontent.com/ZhenjiangFan/DAG-deepVASE/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9096225894125328,
      "result": {
        "original_header": "Source Code",
        "type": "Text_excerpt",
        "value": "\ud83d\udcc1The sub folder [*/MGM*](./MGM/) contains the Python version of MGM implementation.\\\n\ud83d\udcc1 The sub folder [*/DL*](./DL/) contains the Python implemenation of DeepPINK procedure (knockoff data generation, DNN, and FDR).\\\n\ud83d\udcc1 The sub folder [*/causal*](./causal/) contains the Python implementation of DG procedure.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ZhenjiangFan/DAG-deepVASE/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ZhenjiangFan/DAG-deepVASE/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ZhenjiangFan/DAG-deepVASE/main/Dataset_preprocessing.ipynb"
      },
      "source": "https://raw.githubusercontent.com/ZhenjiangFan/DAG-deepVASE/main/Dataset_preprocessing.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ZhenjiangFan/DAG-deepVASE/main/Example.ipynb"
      },
      "source": "https://raw.githubusercontent.com/ZhenjiangFan/DAG-deepVASE/main/Example.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ZhenjiangFan/DAG-deepVASE/main/ExampleForDataWithNoTarget.ipynb"
      },
      "source": "https://raw.githubusercontent.com/ZhenjiangFan/DAG-deepVASE/main/ExampleForDataWithNoTarget.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ZhenjiangFan/DAG-deepVASE/main/Figures/Fig.5.A.ipynb"
      },
      "source": "https://raw.githubusercontent.com/ZhenjiangFan/DAG-deepVASE/main/Figures/Fig.5.A.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ZhenjiangFan/DAG-deepVASE/main/Figures/Fig.2.E.ipynb"
      },
      "source": "https://raw.githubusercontent.com/ZhenjiangFan/DAG-deepVASE/main/Figures/Fig.2.E.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ZhenjiangFan/DAG-deepVASE/main/Figures/Fig.5.B.ipynb"
      },
      "source": "https://raw.githubusercontent.com/ZhenjiangFan/DAG-deepVASE/main/Figures/Fig.5.B.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ZhenjiangFan/DAG-deepVASE/main/Figures/Fig.2.A.ipynb"
      },
      "source": "https://raw.githubusercontent.com/ZhenjiangFan/DAG-deepVASE/main/Figures/Fig.2.A.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ZhenjiangFan/DAG-deepVASE/main/Figures/Fig.2.D.ipynb"
      },
      "source": "https://raw.githubusercontent.com/ZhenjiangFan/DAG-deepVASE/main/Figures/Fig.2.D.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ZhenjiangFan/DAG-deepVASE/main/Figures/Fig.4.B%26C.ipynb"
      },
      "source": "https://raw.githubusercontent.com/ZhenjiangFan/DAG-deepVASE/main/Figures/Fig.4.B%26C.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ZhenjiangFan/DAG-deepVASE/main/Figures/Fig.4.A.ipynb"
      },
      "source": "https://raw.githubusercontent.com/ZhenjiangFan/DAG-deepVASE/main/Figures/Fig.4.A.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ZhenjiangFan/DAG-deepVASE/main/Figures/Fig.2.B.ipynb"
      },
      "source": "https://raw.githubusercontent.com/ZhenjiangFan/DAG-deepVASE/main/Figures/Fig.2.B.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ZhenjiangFan/DAG-deepVASE/main/Figures/Fig.4.D.ipynb"
      },
      "source": "https://raw.githubusercontent.com/ZhenjiangFan/DAG-deepVASE/main/Figures/Fig.4.D.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ZhenjiangFan/DAG-deepVASE/main/Figures/SimulationDataRun.ipynb"
      },
      "source": "https://raw.githubusercontent.com/ZhenjiangFan/DAG-deepVASE/main/Figures/SimulationDataRun.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ZhenjiangFan/DAG-deepVASE/main/Figures/Fig.2.C.ipynb"
      },
      "source": "https://raw.githubusercontent.com/ZhenjiangFan/DAG-deepVASE/main/Figures/Fig.2.C.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ZhenjiangFan/DAG-deepVASE/main/Figures/Fig.3.A.ipynb"
      },
      "source": "https://raw.githubusercontent.com/ZhenjiangFan/DAG-deepVASE/main/Figures/Fig.3.A.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ZhenjiangFan/DAG-deepVASE/main/Figures/Fig.5.C.ipynb"
      },
      "source": "https://raw.githubusercontent.com/ZhenjiangFan/DAG-deepVASE/main/Figures/Fig.5.C.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ZhenjiangFan/DAG-deepVASE/main/existingMethods/Fig2.ipynb"
      },
      "source": "https://raw.githubusercontent.com/ZhenjiangFan/DAG-deepVASE/main/existingMethods/Fig2.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ZhenjiangFan/DAG-deepVASE/main/existingMethods/Fig2-Sumplementary.ipynb"
      },
      "source": "https://raw.githubusercontent.com/ZhenjiangFan/DAG-deepVASE/main/existingMethods/Fig2-Sumplementary.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ZhenjiangFan/DAG-deepVASE/main/existingMethods/Test.ipynb"
      },
      "source": "https://raw.githubusercontent.com/ZhenjiangFan/DAG-deepVASE/main/existingMethods/Test.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ZhenjiangFan/DAG-deepVASE/main/existingMethods/BRCAResult.ipynb"
      },
      "source": "https://raw.githubusercontent.com/ZhenjiangFan/DAG-deepVASE/main/existingMethods/BRCAResult.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ZhenjiangFan/DAG-deepVASE/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ZhenjiangFan/DAG-deepVASE"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Introduction"
      },
      "source": "https://raw.githubusercontent.com/ZhenjiangFan/DAG-deepVASE/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ZhenjiangFan/DAG-deepVASE/main/existingMethods/notears/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/ZhenjiangFan/DAG-deepVASE/main/existingMethods/notears/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 0.9847451958140739,
      "result": {
        "original_header": "Test DAG-DeepVASE using a Docker container",
        "type": "Text_excerpt",
        "value": "1. Download Docker [here](https://docs.docker.com/get-docker/) and install it.\n2. Download DAG-DeepVASE docker image via the Docker command below:\n```python\ndocker pull zhenjiangfan/dagdeepvase:latest\n```\n3. Run the Docker image in a Docker container:\nBASH2*\nIf you would encounter an error message saying 'Unable to find image 'dagdeepvase:latest' locally', please go to Docker application, find the image 'zhenjiangfan/dagdeepvase', and press the 'Run' button to run the image. Then Docker will take you to the Container interface, then please press the 'OPEN IN TERMINAL' button to open the container terminal.<br />\nIf Docker would not be able to run the container and you are using Windows, please install Windows Subsystem for Linux (WSL) 2 by following this tutorial: https://docs.docker.com/desktop/windows/wsl/. \n3. Test DAG-DeepVASE using the TCGA BRCA RNA-seq data:\n```python\npython3 ExampleUsingBRCAData.py\n```\n4. Test DAG-DeepVASE by running the Python code below in the Docker container:\nBASH4* \n"
      },
      "source": "https://raw.githubusercontent.com/ZhenjiangFan/DAG-deepVASE/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8916641306398444,
      "result": {
        "original_header": "Test DAG-DeepVASE using a Docker container",
        "type": "Text_excerpt",
        "value": "3. Test DAG-DeepVASE using the TCGA BRCA RNA-seq data:\n```python\npython3 ExampleUsingBRCAData.py\n```\n4. Test DAG-DeepVASE by running the Python code below in the Docker container:\nBASH4* \n"
      },
      "source": "https://raw.githubusercontent.com/ZhenjiangFan/DAG-deepVASE/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ZhenjiangFan/DAG-deepVASE/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2021 ZhenjiangFan\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/ZhenjiangFan/DAG-deepVASE/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DAG-deepVASE"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "ZhenjiangFan"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 2790134,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 149154,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 57300,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 6734,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 506,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ZhenjiangFan/DAG-deepVASE/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running Environment Requirements",
        "type": "Text_excerpt",
        "value": ":stars: R environment\\\n:stars: Java environment\n\nTo install all the required package, please find the 'requirements.txt' file under this repository, which contains all the Python packages that this tool needs, and use the command line 'pip install -r requirements.txt' to install all the required packages.\n"
      },
      "source": "https://raw.githubusercontent.com/ZhenjiangFan/DAG-deepVASE/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running Environment Requirements",
        "type": "Text_excerpt",
        "value": ":stars: R environment\\\n:stars: Java environment\n\nTo install all the required package, please find the 'requirements.txt' file under this repository, which contains all the Python packages that this tool needs, and use the command line 'pip install -r requirements.txt' to install all the required packages.\n"
      },
      "source": "https://raw.githubusercontent.com/ZhenjiangFan/DAG-deepVASE/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Run MGM to get linear associations",
        "parent_header": [
          "Example"
        ],
        "type": "Text_excerpt",
        "value": "\n```python\nXYDataFileName = \"XY_n1000_p100_rep20.txt\";\ndataFolderPath = \"data/simData\";\n'''\nRun MGM\nNote: MGM was implemented in Java and the following Python APIs call the Java implementation.\nPlease restart the Python program after encountering a JVM problem.\nThe format of the input data file must be \".txt\" in which columns are separated by \"\\t\" and it should also include the response variables.\nHere is what the input data should look like:\nX1 X2 ... Xp\n1  1  ... 1\n'''\n# import the MGM package\nfrom MGM.MGM import MGM\n# Initialize a MGM object\nmgm = MGM();\n'''\nRun MGM\nParameters:\n    dataFolderPath: the directory that stores the input data.\n    DataFileName: the name of the input data.\n    lambda_continuous_continuous: the panalty value 'lambda' set for the associations whose two end variables are continuous.\n    lamda_continuous_discrete: the panalty value 'lambda' set for the associations whose one end variable is continuous and the other is discrete.\n    lamda_discrete_discrete: the panalty value 'lambda' set for the associations whose two end variables are discrete.\n    \nReturn:\n    mgmOutputFile: a tuple, where the first file contains all the selected associations and the second file contains the corresponding likelihoods.\n'''\nmgmOutputFile = mgm.runMGM(dataFolderPath, XYDataFileName,lambda_continuous_continuous = 0.3, lamda_continuous_discrete = 0.3, lamda_discrete_discrete = 0.3);\n\"\"\"\nMGM uses the Python package Jpype to call MGM's Java implementation.\nAccording to Jpype documents, it says \"Due to limitations in the JPype, \nit is not possible to restart the JVM after being terminated.\"\nTherefore, please restart the Python kernel if you encounter an OSError (i.e., \"OSError: JVM cannot be restarted\").\n\"\"\"\nprint(\"MGM's output was saved as the following file:\");\nprint(mgmOutputFile[0]);\nprint(\"The likelihood values were saved as the following file:\");\nprint(mgmOutputFile[1]);\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ZhenjiangFan/DAG-deepVASE/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Generate knockoff data",
        "parent_header": [
          "Example",
          "Run DNN to get nonlinear associations"
        ],
        "type": "Text_excerpt",
        "value": "\n```python\n'''\n#Generate knockoff data using one of two methods: ISEE Omega and Cholesky_LU.\nThe code for generating ISEE Omega knockoff is implemented using R. Please make sure your computer has R installed.\n'''\nfrom DL.knockoff.KnockoffGenerator import KnockoffGenerator;\ngenerator = KnockoffGenerator();\n\nDataFileName = \"X_n1000_p100_rep20.txt\";\n# knockoffFilePath = generator.CholLuKnockoff(dataFolderPath, DataFileName,sep=\"\\t\");\n\n#If want to generate ISEE Omega knockoff, please set the ISEE code path and R home environment.\ngenerator.set_ISEE_path(\"/absolute_path_of_DAG_DeepVASE\");#/home/user/DAG_DeepVASE/\ngenerator.set_R_home('absolute_path_to_directory_where_r_is_installed');#e.g.,/home/user/lib/R\nknockoffFilePath = generator.ISEEKnockoff(dataFolderPath, DataFileName,sep=\"\\t\");\n\nprint(\"The newly generated knockoff file is named as:\");\nprint(knockoffFilePath);\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ZhenjiangFan/DAG-deepVASE/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Run DNN",
        "parent_header": [
          "Example",
          "Run DNN to get nonlinear associations"
        ],
        "type": "Text_excerpt",
        "value": "\n```python\n''''''\n# After generating the knockoff data, run DNN\nXKnockoffData = pd.read_csv(knockoffFilePath,sep=\"\\t\");\n\nYDataFileName = 'y_si_n1000_p100_rep20.txt';\nYdata = pd.read_csv(dataFolderPath+os.path.sep+YDataFileName,sep=\"\\t\");\n\nXKValues = XKnockoffData.values;\nYValues = Ydata.values;\n    \npNum = int(XKValues.shape[1] / 2);\nn = XKValues.shape[0];\n    \nXOrigin = XKValues[:, 0:pNum];\nknockoff = XKValues[:, pNum:];\n\nX3DTrain = np.zeros((n, pNum, 2));\nX3DTrain[:, :, 0] = XOrigin;\nX3DTrain[:, :, 1] = knockoff;\nlabelTrain = YValues;\ncoeff = 0.05 * np.sqrt(2.0 * np.log(pNum) / n);\nnOutputs = Ydata.shape[1];\n\n#Save the DNN output to the following directory.\nresultDir = dataFolderPath+os.path.sep+'DNN_result/';\nif not os.path.exists(resultDir):\n    os.makedirs(resultDir);\n    \nfrom DL.DNN.DNN import DNN;\ndnn = DNN();\nmodel = dnn.build_DNN(pNum, nOutputs, coeff);\ncallback = DNN.Job_finish_Callback(resultDir,pNum);\ndnn.train_DNN(model, X3DTrain, labelTrain,callback);\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ZhenjiangFan/DAG-deepVASE/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Apply FDR control",
        "parent_header": [
          "Example",
          "Run DNN to get nonlinear associations"
        ],
        "type": "Text_excerpt",
        "value": "\n```python\n#Apply FDR control to DNN result\nfrom DL.FDR.FDR_control import FDR_control;\ncontrol = FDR_control();\nXDataFileName = \"X_n1000_p100_rep20.txt\";\nselected_features = control.controlFilter(dataFolderPath +os.path.sep+ XDataFileName, resultDir, offset=1, q=0.05);\n#Save the selected associations\nselected_associations = [];\nfor ele in selected_features:\n    selected_associations.append({\"Feature1\":ele[0],\"Feature2\":\"Y\"});\npd.DataFrame(selected_associations).to_csv(dataFolderPath +os.path.sep+\"DNN_selected_associations.csv\");\n```\n\n\n```python\n# Run DG\n# Load data\ndataset = pd.read_csv(dataFolderPath+os.path.sep+XYDataFileName,sep=\"\\t\");\n\n#Calculate the covariance matrix\ncov_mat = dataset.cov();\ncorr_inv = np.linalg.inv(cov_mat)\ncorr_inv = pd.DataFrame(data=corr_inv, index=cov_mat.index,columns=cov_mat.columns)\n\n#Convert the columns to their numerical representations\ncol_map = {};\ncol_map_rev = {};\ncol_list = dataset.columns.to_list();\nfor index,ele in enumerate(col_list):\n    col_map[ele] = index;\n    col_map_rev[index] = ele;\nprint(dataset.shape);\n\n#The data may need to be normalized if neccessary.\n# from sklearn.preprocessing import MinMaxScaler\n# scaler = MinMaxScaler();\n# scaled_values = scaler.fit_transform(dataset);\n# dataset.loc[:,:] = scaled_values;\n\n#Initialize DG object\nfrom causal.DegenerateGaussianScore import DegenerateGaussianScore\ndg = DegenerateGaussianScore(dataset,discrete_threshold=0.2);\n\n```\n\n\n```python\nselectedAssociationsSum = [];\n#Load both MGM-identified and DNN associations\nMGMAssociations = pd.read_csv(mgmOutputFile[0]);\nfor index,row in MGMAssociations.iterrows():\n    f1 = row[\"Feature1\"];\n    f2 = row[\"Feature2\"];\n    if f1==\"Y\" or f2==\"Y\":\n        tempList = [f1,f2];\n        tempList.sort();\n        tempStr = tempList[0]+\"___\"+tempList[1];\n        if tempStr not in selectedAssociationsSum:\n            selectedAssociationsSum.append(tempStr);\n        \nDNNAssociations = pd.read_csv(dataFolderPath +os.path.sep+\"DNN_selected_associations.csv\");\nfor index,row in DNNAssociations.iterrows():\n    f1 = row[\"Feature1\"];\n    f2 = row[\"Feature2\"];\n    tempList = [f1,f2];\n    tempList.sort();\n    tempStr = tempList[0]+\"___\"+tempList[1];\n    if tempStr not in selectedAssociationsSum:\n        selectedAssociationsSum.append(tempStr);\n```\n\n\n```python\nimport networkx as nx\n#Calculate causal directions\ncausalGraph = nx.DiGraph();\nfor ele in selectedAssociationsSum:\n    strs = ele.split(\"___\");\n    f1 = strs[0];\n    f2 = strs[1];\n    \n    inv_val = abs(corr_inv[f1][f2]);\n    if inv_val<=0.0:\n        continue;\n\n    n1_idx = col_map[f1];\n    n2_idx = col_map[f2];\n\n    s1 = dg.localScore(n1_idx,{n2_idx});\n    s2 = dg.localScore(n2_idx,{n1_idx});\n\n    if s1<s2:\n        print(\"Cause: \"+f2+\", Effect: \"+f1);\n        dif = s2-s1;\n        causalGraph.add_edge(f2, f1, weight=dif);\n    elif s1>s2:\n        print(\"Cause: \"+f1+\", Effect: \"+f2);\n        dif = s1-s2;\n        causalGraph.add_edge(f1, f2, weight=dif);\n    else:\n        print(\"Same score.\");\n        \n#Remove cycles\ncausalGraph = dg.removeCycles(causalGraph);\n\nimport scipy.stats\n#Identify if a causal relationship is positive or negative.\nedgeList = [];\nfor edge in causalGraph.edges():\n    cause = edge[0];\n    effect = edge[1];\n    effectSize = np.log(causalGraph.get_edge_data(cause,effect)['weight']);\n    corr = scipy.stats.pearsonr(dataset[cause].values,dataset[effect].values)[0];\n    if corr>0:\n        edgeList.append({\"Cause\":cause,\"Effect\":effect,\"EffectSize\":effectSize,\"CauseDirection\":\"Positive\"});\n    elif corr == 0:\n        edgeList.append({\"Cause\":cause,\"Effect\":effect,\"EffectSize\":effectSize,\"CauseDirection\":\"Undefined\"});\n    else:\n        edgeList.append({\"Cause\":cause,\"Effect\":effect,\"EffectSize\":effectSize,\"CauseDirection\":\"Negative\"});\n```\n\n\n```python\n\n```\n\n\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/ZhenjiangFan/DAG-deepVASE/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "download",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier"
  ],
  "somef_provenance": {
    "date": "2024-10-04 09:58:23",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Import required packages:",
        "parent_header": [
          "Example"
        ],
        "type": "Text_excerpt",
        "value": "\n```python\nimport pandas as pd\nimport numpy as np\nimport os\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ZhenjiangFan/DAG-deepVASE/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Run MGM to get linear associations",
        "parent_header": [
          "Example"
        ],
        "type": "Text_excerpt",
        "value": "\n```python\nXYDataFileName = \"XY_n1000_p100_rep20.txt\";\ndataFolderPath = \"data/simData\";\n'''\nRun MGM\nNote: MGM was implemented in Java and the following Python APIs call the Java implementation.\nPlease restart the Python program after encountering a JVM problem.\nThe format of the input data file must be \".txt\" in which columns are separated by \"\\t\" and it should also include the response variables.\nHere is what the input data should look like:\nX1 X2 ... Xp\n1  1  ... 1\n'''\n# import the MGM package\nfrom MGM.MGM import MGM\n# Initialize a MGM object\nmgm = MGM();\n'''\nRun MGM\nParameters:\n    dataFolderPath: the directory that stores the input data.\n    DataFileName: the name of the input data.\n    lambda_continuous_continuous: the panalty value 'lambda' set for the associations whose two end variables are continuous.\n    lamda_continuous_discrete: the panalty value 'lambda' set for the associations whose one end variable is continuous and the other is discrete.\n    lamda_discrete_discrete: the panalty value 'lambda' set for the associations whose two end variables are discrete.\n    \nReturn:\n    mgmOutputFile: a tuple, where the first file contains all the selected associations and the second file contains the corresponding likelihoods.\n'''\nmgmOutputFile = mgm.runMGM(dataFolderPath, XYDataFileName,lambda_continuous_continuous = 0.3, lamda_continuous_discrete = 0.3, lamda_discrete_discrete = 0.3);\n\"\"\"\nMGM uses the Python package Jpype to call MGM's Java implementation.\nAccording to Jpype documents, it says \"Due to limitations in the JPype, \nit is not possible to restart the JVM after being terminated.\"\nTherefore, please restart the Python kernel if you encounter an OSError (i.e., \"OSError: JVM cannot be restarted\").\n\"\"\"\nprint(\"MGM's output was saved as the following file:\");\nprint(mgmOutputFile[0]);\nprint(\"The likelihood values were saved as the following file:\");\nprint(mgmOutputFile[1]);\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ZhenjiangFan/DAG-deepVASE/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Generate knockoff data",
        "parent_header": [
          "Example",
          "Run DNN to get nonlinear associations"
        ],
        "type": "Text_excerpt",
        "value": "\n```python\n'''\n#Generate knockoff data using one of two methods: ISEE Omega and Cholesky_LU.\nThe code for generating ISEE Omega knockoff is implemented using R. Please make sure your computer has R installed.\n'''\nfrom DL.knockoff.KnockoffGenerator import KnockoffGenerator;\ngenerator = KnockoffGenerator();\n\nDataFileName = \"X_n1000_p100_rep20.txt\";\n# knockoffFilePath = generator.CholLuKnockoff(dataFolderPath, DataFileName,sep=\"\\t\");\n\n#If want to generate ISEE Omega knockoff, please set the ISEE code path and R home environment.\ngenerator.set_ISEE_path(\"/absolute_path_of_DAG_DeepVASE\");#/home/user/DAG_DeepVASE/\ngenerator.set_R_home('absolute_path_to_directory_where_r_is_installed');#e.g.,/home/user/lib/R\nknockoffFilePath = generator.ISEEKnockoff(dataFolderPath, DataFileName,sep=\"\\t\");\n\nprint(\"The newly generated knockoff file is named as:\");\nprint(knockoffFilePath);\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ZhenjiangFan/DAG-deepVASE/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Apply FDR control",
        "parent_header": [
          "Example",
          "Run DNN to get nonlinear associations"
        ],
        "type": "Text_excerpt",
        "value": "\n```python\n#Apply FDR control to DNN result\nfrom DL.FDR.FDR_control import FDR_control;\ncontrol = FDR_control();\nXDataFileName = \"X_n1000_p100_rep20.txt\";\nselected_features = control.controlFilter(dataFolderPath +os.path.sep+ XDataFileName, resultDir, offset=1, q=0.05);\n#Save the selected associations\nselected_associations = [];\nfor ele in selected_features:\n    selected_associations.append({\"Feature1\":ele[0],\"Feature2\":\"Y\"});\npd.DataFrame(selected_associations).to_csv(dataFolderPath +os.path.sep+\"DNN_selected_associations.csv\");\n```\n\n\n```python\n# Run DG\n# Load data\ndataset = pd.read_csv(dataFolderPath+os.path.sep+XYDataFileName,sep=\"\\t\");\n\n#Calculate the covariance matrix\ncov_mat = dataset.cov();\ncorr_inv = np.linalg.inv(cov_mat)\ncorr_inv = pd.DataFrame(data=corr_inv, index=cov_mat.index,columns=cov_mat.columns)\n\n#Convert the columns to their numerical representations\ncol_map = {};\ncol_map_rev = {};\ncol_list = dataset.columns.to_list();\nfor index,ele in enumerate(col_list):\n    col_map[ele] = index;\n    col_map_rev[index] = ele;\nprint(dataset.shape);\n\n#The data may need to be normalized if neccessary.\n# from sklearn.preprocessing import MinMaxScaler\n# scaler = MinMaxScaler();\n# scaled_values = scaler.fit_transform(dataset);\n# dataset.loc[:,:] = scaled_values;\n\n#Initialize DG object\nfrom causal.DegenerateGaussianScore import DegenerateGaussianScore\ndg = DegenerateGaussianScore(dataset,discrete_threshold=0.2);\n\n```\n\n\n```python\nselectedAssociationsSum = [];\n#Load both MGM-identified and DNN associations\nMGMAssociations = pd.read_csv(mgmOutputFile[0]);\nfor index,row in MGMAssociations.iterrows():\n    f1 = row[\"Feature1\"];\n    f2 = row[\"Feature2\"];\n    if f1==\"Y\" or f2==\"Y\":\n        tempList = [f1,f2];\n        tempList.sort();\n        tempStr = tempList[0]+\"___\"+tempList[1];\n        if tempStr not in selectedAssociationsSum:\n            selectedAssociationsSum.append(tempStr);\n        \nDNNAssociations = pd.read_csv(dataFolderPath +os.path.sep+\"DNN_selected_associations.csv\");\nfor index,row in DNNAssociations.iterrows():\n    f1 = row[\"Feature1\"];\n    f2 = row[\"Feature2\"];\n    tempList = [f1,f2];\n    tempList.sort();\n    tempStr = tempList[0]+\"___\"+tempList[1];\n    if tempStr not in selectedAssociationsSum:\n        selectedAssociationsSum.append(tempStr);\n```\n\n\n```python\nimport networkx as nx\n#Calculate causal directions\ncausalGraph = nx.DiGraph();\nfor ele in selectedAssociationsSum:\n    strs = ele.split(\"___\");\n    f1 = strs[0];\n    f2 = strs[1];\n    \n    inv_val = abs(corr_inv[f1][f2]);\n    if inv_val<=0.0:\n        continue;\n\n    n1_idx = col_map[f1];\n    n2_idx = col_map[f2];\n\n    s1 = dg.localScore(n1_idx,{n2_idx});\n    s2 = dg.localScore(n2_idx,{n1_idx});\n\n    if s1<s2:\n        print(\"Cause: \"+f2+\", Effect: \"+f1);\n        dif = s2-s1;\n        causalGraph.add_edge(f2, f1, weight=dif);\n    elif s1>s2:\n        print(\"Cause: \"+f1+\", Effect: \"+f2);\n        dif = s1-s2;\n        causalGraph.add_edge(f1, f2, weight=dif);\n    else:\n        print(\"Same score.\");\n        \n#Remove cycles\ncausalGraph = dg.removeCycles(causalGraph);\n\nimport scipy.stats\n#Identify if a causal relationship is positive or negative.\nedgeList = [];\nfor edge in causalGraph.edges():\n    cause = edge[0];\n    effect = edge[1];\n    effectSize = np.log(causalGraph.get_edge_data(cause,effect)['weight']);\n    corr = scipy.stats.pearsonr(dataset[cause].values,dataset[effect].values)[0];\n    if corr>0:\n        edgeList.append({\"Cause\":cause,\"Effect\":effect,\"EffectSize\":effectSize,\"CauseDirection\":\"Positive\"});\n    elif corr == 0:\n        edgeList.append({\"Cause\":cause,\"Effect\":effect,\"EffectSize\":effectSize,\"CauseDirection\":\"Undefined\"});\n    else:\n        edgeList.append({\"Cause\":cause,\"Effect\":effect,\"EffectSize\":effectSize,\"CauseDirection\":\"Negative\"});\n```\n\n\n```python\n\n```\n\n\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/ZhenjiangFan/DAG-deepVASE/main/README.md",
      "technique": "header_analysis"
    }
  ]
}