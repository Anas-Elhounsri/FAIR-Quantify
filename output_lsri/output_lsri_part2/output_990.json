{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/qianli10000/mtradeR"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-11-11T17:01:33Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-11-09T22:57:43Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "parent_header": [
          "mtradeR"
        ],
        "type": "Text_excerpt",
        "value": "We proposed a Joint model with Matching and Regularization (JMR) to detect OTUs predictive of hosts' disease status in matched sets. We also designed and implemented a simulation pipeline to generate disease outcome and temporal high-dimensional metagenomic counts in matched sets. The paper is available on [BMC Genomics](https://link.springer.com/article/10.1186/s12864-022-08890-1)\n"
      },
      "source": "https://raw.githubusercontent.com/qianli10000/mtradeR/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9849562047130479,
      "result": {
        "original_header": "mtradeR",
        "type": "Text_excerpt",
        "value": "Metagenomic TRajectory Analysis with Disease Endpoint and Risk factors.\n \n"
      },
      "source": "https://raw.githubusercontent.com/qianli10000/mtradeR/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/qianli10000/mtradeR/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/qianli10000/mtradeR/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "qianli10000/mtradeR"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "mtradeR"
      },
      "source": "https://raw.githubusercontent.com/qianli10000/mtradeR/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "mtradeR"
        ],
        "type": "Text_excerpt",
        "value": "``` r\ninstall.packages(\"devtools\")\nlibrary(devtools)\ninstall_github('qianli10000/mtradeR')\nlibrary('mtradeR')\n```\n"
      },
      "source": "https://raw.githubusercontent.com/qianli10000/mtradeR/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/qianli10000/mtradeR/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "YEAR: 2022\nCOPYRIGHT HOLDER: mtradeR authors\n"
      },
      "source": "https://raw.githubusercontent.com/qianli10000/mtradeR/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "mtradeR"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "qianli10000"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 31301,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/qianli10000/mtradeR/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 12:44:54",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "A real data example",
        "parent_header": [
          "mtradeR"
        ],
        "type": "Text_excerpt",
        "value": "We use the real data from a small subset of longitudinal metagenomes (n=153) in a large-cohort study of type 1 diabetes [Stewart and Ajami et al.](https://www.nature.com/articles/s41586-018-0617-x) to demonstrate the usage of JMR. We randomly select P=100 OTUs with relative abundance \\>$10^{-5}$ and prevalence \\>10% in this example. The OTU names are masked in this dataset.\n\nLoad real data.\n\n``` r\ndata(example_data)\nlong<-example_data$long\nlogistic<-example_data$logistic\ntaxa_filtered<-example_data$taxa_filtered\n```\n\nPreview of real data\n\n``` r\nhead(long)\n  subjectID setID order sampleID sample_age outcome genotype\n1    274433  1161     1       S1          4       0        1\n2    274433  1161     1       S2          5       0        1\n3    274433  1161     1       S3          6       0        1\n4    274433  1161     1       S4          7       0        1\n5    274433  1161     1       S5          8       0        1\n6    893569  1161     2       S6          4       1        0\n\nhead(logistic)\n  subjectID setID order outcome genotype\n1    274433  1161     1       0        1\n2    893569  1161     2       1        0\n3    290463  1217     1       0        1\n4    819136  1217     2       1        1\n5    592349  1308     1       0        0\n6    956178  1308     2       1        1\n\nhead(taxa_filtered,c(5,5))\n          S1    S2      S3    S4      S5\nOTU1 0.00000 3e-05 0.00000 0e+00 0.00001\nOTU2 0.00001 1e-04 0.00034 0e+00 0.00000\nOTU3 0.00015 6e-04 0.00013 2e-05 0.00018\nOTU4 0.00001 6e-05 0.00000 0e+00 0.00001\nOTU5 0.00001 1e-05 0.00000 1e-05 0.00001\n```\n\nFormat input data.\n\n``` r\nlong_design=model.matrix(~sample_age+genotype,long)\nlogistic_design=model.matrix(~genotype,logistic)\nlong_idset=long[,1:3]\nlogistic_idset=logistic[,1:3]\n```\n\nAn intercept test without adjusting for top-correlated taxa (JMR-NC).\n\n``` r\nJMRNC.res<- JMR(otu_tab = taxa_filtered,long_design = long_design,\n               logistic_design = logistic_design,outcome = logistic$outcome, \n               long_idset = long_idset,logistic_idset = logistic_idset,\n               rand.var = '(Intercept)', cov.taxa=FALSE)\n```\n\nAn intercept test adjusting for top-correlated taxa.\n\n``` r\nJMR.res<- JMR(otu_tab = taxa_filtered,long_design = long_design,\n             logistic_design = logistic_design,outcome = logistic$outcome, \n             long_idset = long_idset,logistic_idset = logistic_idset,\n             rand.var = '(Intercept)', cov.taxa=TRUE)\n```\n\n-   **otu_tab**: a relative abundance table with rows as filtered OTUs and columns as samples.\n-   **long_design**: a design matrix for longitudinal variables in the abundance-presence sub-model.\n-   **logistic_design**: a design matrix for risk factors in the disease sub-model.\n-   **outcome**: a vector of disease outcome per subject mapped to logistic_design.\n-   **long_idset**: a dataframe of subject and set identifiers mapped to long_design, in the order of subjectID, setID, order (within-set indicator).\n-   **logistic_idset**: a dataframe of subject and set identifier mapped to logistic_design, in the order of subjectID, setID, order (within-set indicator).\n-   **rand.var**: the type of trajectory analysis, intercept: '(Intercept)', or slope: 'sample_age'.\n-   **tune**: a scalar or vector of tuning parameter for L2 regularization. If otu_tab contains \\<10 OTUs, tuning is not applicable and must be set as scalar. The default value is tune=0.15.\n-   **cov.taxa**: whether to adjust for unknown dependence between taxa, default is cov.taxa=TRUE. If otu_tab contains only one OTU, cov.taxa must be FALSE.\n-   **n.cores**: \\# of workers registered in parallel computing. If n.cores is not specified (NULL), JMR sets n.cores=detectCores()-1.\n\nThe returned dataframe test.result shows the p-value (joint.pvalue) and BH-adjusted p-value (FDR) for taxon-specific association with disease outcome.\n\n```{r}\ntail(JMRNC.res$test.result,c(5,2))\n       joint.pvalue       FDR\nOTU96     0.2409968 0.3596967\nOTU97     0.6072212 0.6979554\nOTU98     0.6588216 0.7239798\nOTU99     0.6317104 0.7120273\nOTU100    0.7983006 0.8492559\n```\n"
      },
      "source": "https://raw.githubusercontent.com/qianli10000/mtradeR/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "A simulation example",
        "parent_header": [
          "mtradeR"
        ],
        "type": "Text_excerpt",
        "value": "Below is an example code running the simulation pipeline and testing JMR for different types of analysis.\n\nLoad baseline parameter and generate set indicator and disease outcome, format design matrix.\n\n```{r}\ndata(\"DM_MLE\")\nmeta_data<-StatSim(n=100)\nmeta_data<-meta_data[order(meta_data$set,meta_data$id),]\nsubj_data<-unique(meta_data[,c('id','outcome')])\noutcome<-subj_data$outcome\nnames(outcome)<-subj_data$id\nlong_design <- model.matrix(~age,meta_data)\nlogistic<-unique(subset(meta_data,select = -c(age,ageset.id)))\nrownames(logistic)=logistic$id\nlogistic_design <- model.matrix(~genetic,logistic)\nlong_idset <- meta_data[,c('id','set','order')]\nlogistic_idset <- logistic[,c('id','set','order')]\n```\n\nGenerate metagenomic raw counts table\n\n``` r\nraw.counts=TaxaSim(DM_MLE,StatSim = meta_data,shift_subject = 0.9,trace =F)\nrel.abun=t(t(raw.counts)/colSums(raw.counts))\n```\n\nFilter taxa by relative abundance and prevalence\n\n``` r\nmean.rel.abun=rowMeans(rel.abun)\nfilter=mean.rel.abun>1e-5 & rowSums(rel.abun==0)<0.9*ncol(rel.abun)\ninput_tab=rel.abun[filter,]\n```\n\nRun JMR for intercept test without covariate taxa and tuning, setting shrinkage at 0.15\n\n``` r\nJMR.res=JMR(otu_tab = input_tab,long_design = long_design,\n            logistic_design = logistic_design,outcome = outcome, \n            long_idset = long_idset,logistic_idset = logistic_idset,\n            rand.var = '(Intercept)', tune=0.15,cov.taxa=FALSE)\n```\n\nRun JMR for slope test with covariate taxa but without tuning, setting shrinkage at 0.15\n\n``` r\nJMR.res=JMR(otu_tab = input_tab,long_design = long_design,\n            logistic_design = logistic_design,outcome = outcome, \n            long_idset = long_idset,logistic_idset = logistic_idset,\n            rand.var = 'age', tune=0.15,cov.taxa=TRUE)\n```\n\nRun JMR for intercept test with tuning but without selecting covariate taxa\n\n``` r\nJMR.res=JMR(otu_tab = input_tab,long_design = long_design,\n            logistic_design = logistic_design,outcome = outcome, \n            long_idset = long_idset,logistic_idset = logistic_idset,\n            rand.var = '(Intercept)', tune=seq(0.05,0.15,0.05),cov.taxa=FALSE)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/qianli10000/mtradeR/main/README.md",
      "technique": "header_analysis"
    }
  ]
}