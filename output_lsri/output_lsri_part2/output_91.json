{
  "application_domain": [
    {
      "confidence": 16.15,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_of_conduct": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting any of the maintainers of this project and\nwe will attempt to resolve the issues with respect and dignity.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n"
      },
      "source": "https://raw.githubusercontent.com/MMV-Lab/mmv_im2im/main/CODE_OF_CONDUCT.md",
      "technique": "file_exploration"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/MMV-Lab/mmv_im2im"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Contributing\n\nContributions are welcome, and they are greatly appreciated! Every little bit\nhelps, and credit will always be given.\n\n## Get Started!\n\nReady to contribute? Here's how to set up `mmv_im2im` for local development.\n\n1. Fork the `mmv_im2im` repo on GitHub.\n\n2. Clone your fork locally:\n\n    ```bash\n    git clone git@github.com:{your_name_here}/mmv_im2im.git\n    ```\n\n3. Install the project in editable mode. (It is also recommended to work in a virtualenv or anaconda environment):\n\n    ```bash\n    cd mmv_im2im/\n    pip install -e .[dev]\n    ```\n\n4. Create a branch for local development:\n\n    ```bash\n    git checkout -b {your_development_type}/short-description\n    ```\n\n    Ex: feature/read-tiff-files or bugfix/handle-file-not-found<br>\n    Now you can make your changes locally.\n\n5. When you're done making changes, check that your changes pass linting and\n   tests, including testing other Python versions with make:\n\n    ```bash\n    make build\n    ```\n\n6. Commit your changes and push your branch to GitHub:\n\n    ```bash\n    git add .\n    git commit -m \"Resolves gh-###. Your detailed description of your changes.\"\n    git push origin {your_development_type}/short-description\n    ```\n\n7. Submit a pull request through the GitHub website.\n\n## Deploying\n\nA reminder for the maintainers on how to deploy.\nMake sure all your changes are committed.\nThen run:\n\n```bash\nbump2version patch # possible: major / minor / patch\ngit push\ngit push --tags\n```\n\nThis will release a new package version on Git + GitHub and publish to PyPI.\n"
      },
      "source": "https://raw.githubusercontent.com/MMV-Lab/mmv_im2im/main/CONTRIBUTING.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Contribute models to <a href=\"https://bioimage.io/#/\">BioImage Model Zoo</a>",
        "parent_header": [
          "MMV Im2Im Transformation",
          "Tutorials, examples, demonstrations and documentations"
        ],
        "type": "Text_excerpt",
        "value": "We highly appreciate the BioImage Model Zoo's initiative to provide a comprehensive collection of pre-trained models for a wide range of applications. To make MMV_Im2Im trained models available as well, the first step involves extracting the state_dict from the PyTorch Lightning checkpoint.\nThis can be done via:\n\n```python\nimport torch\n\nckpt_path = \"./lightning_logs/version_0/checkpoints/last.ckpt\"\ncheckpoint = torch.load(ckpt_path, map_location=torch.device('cpu'))\nstate_dict = checkpoint['state_dict']\ntorch.save(state_dict, \"./state_dict.pt\")\n```\n\nAll further steps to provide models can be found in the [official documentation](https://bioimage.io/docs/#/contribute_models/README).\n"
      },
      "source": "https://raw.githubusercontent.com/MMV-Lab/mmv_im2im/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-11-11T05:36:57Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-08-26T10:14:18Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Python package for deep learning based image to image transformation"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9751416184413639,
      "result": {
        "original_header": "MMV Im2Im Transformation",
        "type": "Text_excerpt",
        "value": "A generic python package for deep learning based image-to-image transformation in biomedical applications \nThe main branch will be further developed in order to be able to use the latest state of the art techniques and methods in the future. To reproduce the results of our manuscript, we refer to the branch [paper_version](https://github.com/MMV-Lab/mmv_im2im/tree/paper_version).\n(We are actively working on the documentation and tutorials. Submit a feature request if there is anything you need.) \n"
      },
      "source": "https://raw.githubusercontent.com/MMV-Lab/mmv_im2im/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9958170492840701,
      "result": {
        "original_header": "Overview",
        "type": "Text_excerpt",
        "value": "The overall package is designed with a generic image-to-image transformation framework, which could be directly used for semantic segmentation, instance segmentation, image restoration, image generation, labelfree prediction, staining transformation, etc.. The implementation takes advantage of the state-of-the-art ML engineering techniques for users to focus on researches without worrying about the engineering details. In our pre-print [arxiv link](https://arxiv.org/abs/2209.02498), we demonstrated the effectiveness of *MMV_Im2Im* in more than ten different biomedical problems/datasets.  \n* For computational biomedical researchers (e.g., AI algorithm development or bioimage analysis workflow development), we hope this package could serve as the starting point for their specific problems, since the image-to-image \"boilerplates\" can be easily extended further development or adapted for users' specific problems.\n* For experimental biomedical researchers, we hope this work provides a comprehensive view of the image-to-image transformation concept through diversified examples and use cases, so that deep learning based image-to-image transformation could be integrated into the assay development process and permit new biomedical studies that can hardly be done only with traditional experimental methods \n"
      },
      "source": "https://raw.githubusercontent.com/MMV-Lab/mmv_im2im/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Tutorials, examples, demonstrations and documentations",
        "parent_header": [
          "MMV Im2Im Transformation"
        ],
        "type": "Text_excerpt",
        "value": "The overall package aims to achieve both simplicty and flexibilty with the modularized image-to-image boilerplates. To help different users to best use this package, we provide documentations from four different aspects:\n\n* [Examples (i.e., scripts and config files)](tutorials/example_by_use_case.md) for reproducing all the experiments in our [pre-print](https://arxiv.org/abs/2209.02498)\n* A bottom-up tutorials on [how to understand the modularized image-to-image boilerplates](tutorials/how_to_understand_boilerplates.md) (for extending or adapting the package) and [how to understand the configuration system in details](tutorials/how_to_understand_config.md) (for advance usage to make specific customization).\n* A top-down tutorials as [FAQ](tutorials/FAQ.md), which will continuously grow as we receive more questions.\n* All the models used in the manuscript and sample data can be found here: [![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.10034416.svg)](https://doi.org/10.5281/zenodo.10034416)\n\n"
      },
      "source": "https://raw.githubusercontent.com/MMV-Lab/mmv_im2im/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/MMV-Lab/mmv_im2im/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MMV-Lab/mmv_im2im/main/paper_configs/prepare_data/multiplex.ipynb"
      },
      "source": "https://raw.githubusercontent.com/MMV-Lab/mmv_im2im/main/paper_configs/prepare_data/multiplex.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MMV-Lab/mmv_im2im/main/paper_configs/prepare_data/unsupervised_seg_2d.ipynb"
      },
      "source": "https://raw.githubusercontent.com/MMV-Lab/mmv_im2im/main/paper_configs/prepare_data/unsupervised_seg_2d.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MMV-Lab/mmv_im2im/main/paper_configs/prepare_data/denoising.ipynb"
      },
      "source": "https://raw.githubusercontent.com/MMV-Lab/mmv_im2im/main/paper_configs/prepare_data/denoising.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MMV-Lab/mmv_im2im/main/paper_configs/prepare_data/instance_seg_3d.ipynb"
      },
      "source": "https://raw.githubusercontent.com/MMV-Lab/mmv_im2im/main/paper_configs/prepare_data/instance_seg_3d.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MMV-Lab/mmv_im2im/main/paper_configs/prepare_data/sythetic_gen_3d.ipynb"
      },
      "source": "https://raw.githubusercontent.com/MMV-Lab/mmv_im2im/main/paper_configs/prepare_data/sythetic_gen_3d.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MMV-Lab/mmv_im2im/main/paper_configs/prepare_data/modaity_transfer.ipynb"
      },
      "source": "https://raw.githubusercontent.com/MMV-Lab/mmv_im2im/main/paper_configs/prepare_data/modaity_transfer.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MMV-Lab/mmv_im2im/main/paper_configs/prepare_data/sythetic_gen_2d.ipynb"
      },
      "source": "https://raw.githubusercontent.com/MMV-Lab/mmv_im2im/main/paper_configs/prepare_data/sythetic_gen_2d.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MMV-Lab/mmv_im2im/main/paper_configs/prepare_data/labelfree_3d.ipynb"
      },
      "source": "https://raw.githubusercontent.com/MMV-Lab/mmv_im2im/main/paper_configs/prepare_data/labelfree_3d.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MMV-Lab/mmv_im2im/main/paper_configs/prepare_data/semantic_seg_2d.ipynb"
      },
      "source": "https://raw.githubusercontent.com/MMV-Lab/mmv_im2im/main/paper_configs/prepare_data/semantic_seg_2d.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MMV-Lab/mmv_im2im/main/paper_configs/prepare_data/instance_seg_2d.ipynb"
      },
      "source": "https://raw.githubusercontent.com/MMV-Lab/mmv_im2im/main/paper_configs/prepare_data/instance_seg_2d.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MMV-Lab/mmv_im2im/main/paper_configs/prepare_data/unsupervised_seg_3d.ipynb"
      },
      "source": "https://raw.githubusercontent.com/MMV-Lab/mmv_im2im/main/paper_configs/prepare_data/unsupervised_seg_3d.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MMV-Lab/mmv_im2im/main/paper_configs/prepare_data/semantic_seg_3d.ipynb"
      },
      "source": "https://raw.githubusercontent.com/MMV-Lab/mmv_im2im/main/paper_configs/prepare_data/semantic_seg_3d.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MMV-Lab/mmv_im2im/main/paper_configs/prepare_data/labelfree_2d.ipynb"
      },
      "source": "https://raw.githubusercontent.com/MMV-Lab/mmv_im2im/main/paper_configs/prepare_data/labelfree_2d.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MMV-Lab/mmv_im2im/main/tutorials/colab/labelfree_2d.ipynb"
      },
      "source": "https://raw.githubusercontent.com/MMV-Lab/mmv_im2im/main/tutorials/colab/labelfree_2d.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/MMV-Lab/mmv_im2im/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MMV-Lab/mmv_im2im"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MMV Im2Im Transformation"
      },
      "source": "https://raw.githubusercontent.com/MMV-Lab/mmv_im2im/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MMV-Lab/mmv_im2im/main/docker/amd64/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/MMV-Lab/mmv_im2im/main/docker/amd64/Dockerfile",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MMV-Lab/mmv_im2im/main/docker/arm64/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/MMV-Lab/mmv_im2im/main/docker/arm64/Dockerfile",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MMV-Lab/mmv_im2im/main/docker/cuda/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/MMV-Lab/mmv_im2im/main/docker/cuda/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MMV-Lab/mmv_im2im/main/docker/amd64/run_container.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MMV-Lab/mmv_im2im/main/docker/arm64/run_container.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MMV-Lab/mmv_im2im/main/docker/cuda/run_container.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "identifier": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://doi.org/10.5281/zenodo.10034416"
      },
      "source": "https://raw.githubusercontent.com/MMV-Lab/mmv_im2im/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://colab.research.google.com/assets/colab-badge.svg"
      },
      "source": "https://raw.githubusercontent.com/MMV-Lab/mmv_im2im/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "MMV Im2Im Transformation"
        ],
        "type": "Text_excerpt",
        "value": "Before starting, we recommend to [create a new conda environment](https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#creating-an-environment-with-commands) or [a virtual environment](https://docs.python.org/3/library/venv.html) with Python 3.9+.\n\nPlease note that the proper setup of hardware is beyond the scope of this pacakge. This package was tested with GPU/CPU on Linux/Windows and CPU on MacOS. [Special note for MacOS users: Directly pip install in MacOS may need [additional setup of xcode](https://developer.apple.com/forums/thread/673827).]\n"
      },
      "source": "https://raw.githubusercontent.com/MMV-Lab/mmv_im2im/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Install MONAI",
        "parent_header": [
          "MMV Im2Im Transformation",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "To reproduce our results, we need to install MONAI's code version of a specific commit. To do this:\n```\ngit clone https://github.com/Project-MONAI/MONAI.git\ncd ./MONAI\ngit checkout 37b58fcec48f3ec1f84d7cabe9c7ad08a93882c0\npip install .\n```\n\nWe will remove this step for the main branch in the future to ensure a simplified installation of our tool.\n"
      },
      "source": "https://raw.githubusercontent.com/MMV-Lab/mmv_im2im/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Install MMV_Im2Im for basic usage:",
        "parent_header": [
          "MMV Im2Im Transformation",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "(For users only using this package, not planning to change any code or make any extension):\n\n**Option 1: core functionality only** `pip install mmv_im2im`<br>\n**Option 2: advanced functionality (core + logger)** `pip install mmv_im2im[advance]`<br>\n**Option 3: to reproduce paper:** `pip install mmv_im2im[paper]`<br>\n**Option 4: install everything:** `pip install mmv_im2im[all]`<br>\n\nFor MacOS users, additional ' ' marks are need when using installation tags in zsh. For example, `pip install mmv_im2im[paper]` should be `pip install mmv_im2im'[paper]'` in MacOS.\n"
      },
      "source": "https://raw.githubusercontent.com/MMV-Lab/mmv_im2im/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Install MMV_Im2Im for customization or extension:",
        "parent_header": [
          "MMV Im2Im Transformation",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "\n```\ngit clone https://github.com/MMV-Lab/mmv_im2im.git\ncd mmv_im2im\npip install -e .[all]\n```\n\nNote: The `-e` option is the so-called \"editable\" mode. This will allow code changes taking effect immediately. The installation tags, `advance`, `paper`, `all`, are be selected based on your needs.\n"
      },
      "source": "https://raw.githubusercontent.com/MMV-Lab/mmv_im2im/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "(Optional) Install using Docker",
        "parent_header": [
          "MMV Im2Im Transformation",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "It is also possible to use our package through [docker](https://www.docker.com/). The installation tutorial is [here](docker/tutorial.md). Specifically, for MacOS users, please refer to [this tutorial](tutorials/docker/mmv_im2im_docker_tutorial.md).\n"
      },
      "source": "https://raw.githubusercontent.com/MMV-Lab/mmv_im2im/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/MMV-Lab/mmv_im2im/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2021, Jianxu Chen\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
      },
      "source": "https://raw.githubusercontent.com/MMV-Lab/mmv_im2im/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "mmv_im2im"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "MMV-Lab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 229473,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 208205,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 2472,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 1444,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 451,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MMV-Lab/mmv_im2im/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_papers": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/2209.02498"
      },
      "source": "https://raw.githubusercontent.com/MMV-Lab/mmv_im2im/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "support"
  ],
  "somef_provenance": {
    "date": "2024-10-04 09:16:32",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 49
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Install MMV_Im2Im for basic usage:",
        "parent_header": [
          "MMV Im2Im Transformation",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "(For users only using this package, not planning to change any code or make any extension):\n\n**Option 1: core functionality only** `pip install mmv_im2im`<br>\n**Option 2: advanced functionality (core + logger)** `pip install mmv_im2im[advance]`<br>\n**Option 3: to reproduce paper:** `pip install mmv_im2im[paper]`<br>\n**Option 4: install everything:** `pip install mmv_im2im[all]`<br>\n\nFor MacOS users, additional ' ' marks are need when using installation tags in zsh. For example, `pip install mmv_im2im[paper]` should be `pip install mmv_im2im'[paper]'` in MacOS.\n"
      },
      "source": "https://raw.githubusercontent.com/MMV-Lab/mmv_im2im/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "(Optional) Use MMV_Im2Im with Google Colab",
        "parent_header": [
          "MMV Im2Im Transformation",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "We provide a web-based demo, if cloud computing is preferred. you can [![Open a 2D labelfree DEMO in Google Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/MMV-Lab/mmv_im2im/blob/main/tutorials/colab/labelfree_2d.ipynb). The same demo can de adapted for different applications.\n"
      },
      "source": "https://raw.githubusercontent.com/MMV-Lab/mmv_im2im/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick start",
        "parent_header": [
          "MMV Im2Im Transformation"
        ],
        "type": "Text_excerpt",
        "value": "You can try out on a simple example following [the quick start guide](tutorials/quick_start.md)\n\nBasically, you can specify your training configuration in a yaml file and run training with `run_im2im --config /path/to/train_config.yaml`. Then, you can specify the inference configuration in another yaml file and run inference with `run_im2im --config /path/to/inference_config.yaml`. You can also run the inference as a function with the provided API. This will be useful if you want to run the inference within another python script or workflow.  Here is an example:\n\n```\nfrom pathlib import Path\nfrom aicsimageio import AICSImage\nfrom aicsimageio.writers import OmeTiffWriter\nfrom mmv_im2im.configs.config_base import ProgramConfig, parse_adaptor, configuration_validation\nfrom mmv_im2im import ProjectTester\n\n# load the inference configuration\ncfg = parse_adaptor(config_class=ProgramConfig, config=\"./paper_configs/semantic_seg_2d_inference.yaml\")\ncfg = configuration_validation(cfg)\n\n# define the executor for inference\nexecutor = ProjectTester(cfg)\nexecutor.setup_model()\nexecutor.setup_data_processing()\n\n# get the data, run inference, and save the result\nfn = Path(\"./data/img_00_IM.tiff\")\nimg = AICSImage(fn).get_image_data(\"YX\", Z=0, C=0, T=0)\n# or using delayed loading if the data is large\n# img = AICSImage(fn).get_image_dask_data(\"YX\", Z=0, C=0, T=0)\nseg = executor.process_one_image(img)\nOmeTiffWriter.save(seg, \"output.tiff\", dim_orders=\"YX\")\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/MMV-Lab/mmv_im2im/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Tutorials, examples, demonstrations and documentations",
        "parent_header": [
          "MMV Im2Im Transformation"
        ],
        "type": "Text_excerpt",
        "value": "The overall package aims to achieve both simplicty and flexibilty with the modularized image-to-image boilerplates. To help different users to best use this package, we provide documentations from four different aspects:\n\n* [Examples (i.e., scripts and config files)](tutorials/example_by_use_case.md) for reproducing all the experiments in our [pre-print](https://arxiv.org/abs/2209.02498)\n* A bottom-up tutorials on [how to understand the modularized image-to-image boilerplates](tutorials/how_to_understand_boilerplates.md) (for extending or adapting the package) and [how to understand the configuration system in details](tutorials/how_to_understand_config.md) (for advance usage to make specific customization).\n* A top-down tutorials as [FAQ](tutorials/FAQ.md), which will continuously grow as we receive more questions.\n* All the models used in the manuscript and sample data can be found here: [![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.10034416.svg)](https://doi.org/10.5281/zenodo.10034416)\n\n"
      },
      "source": "https://raw.githubusercontent.com/MMV-Lab/mmv_im2im/main/README.md",
      "technique": "header_analysis"
    }
  ]
}