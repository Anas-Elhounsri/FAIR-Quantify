{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citations",
        "parent_header": [
          "AlphaPeptDeep (PeptDeep)"
        ],
        "type": "Text_excerpt",
        "value": "Wen-Feng Zeng, Xie-Xuan Zhou, Sander Willems, Constantin Ammar, Maria Wahle, Isabell Bludau, Eugenia Voytik, Maximillian T. Strauss & Matthias Mann. AlphaPeptDeep: a modular deep learning framework to predict peptide properties for proteomics. Nat Commun 13, 7238 (2022). https://doi.org/10.1038/s41467-022-34904-3\n\n\n------------------------------------------------------------------------\n"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/MannLabs/alphapeptdeep"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# How to contribute\n\n## How to contribute to source code\n\n* Folk this GitHub repository to your personal repository.\n* Make changes/updates.\n* Make a PR back to the this repository.\n\n## Did you find a bug?\n\n* Ensure the bug was not already reported by searching on GitHub under Issues.\n* If you're unable to find an open issue addressing the problem, open a new one. Be sure to include a title and clear description, as much relevant information as possible, and a code sample or an executable test case demonstrating the expected behavior that is not occurring.\n* Be sure to add the complete error messages.\n\n#### Did you write a patch that fixes a bug?\n\n* Open a new GitHub pull request with the patch.\n* Ensure that your PR includes a test that fails without your patch, and pass with it.\n* Ensure the PR description clearly describes the problem and solution. Include the relevant issue number if applicable.\n\n## PR submission guidelines\n\n* Keep each PR focused. While it's more convenient, do not combine several unrelated fixes together. Create as many branches as needing to keep each PR focused.\n* Do not mix style changes/fixes with \"functional\" changes. It's very difficult to review such PRs and it most likely get rejected.\n* Do not add/remove vertical whitespace. Preserve the original style of the file you edit as much as you can.\n* Do not turn an already submitted PR into your development playground. If after you submitted PR, you discovered that more work is needed - close the PR, do the required work and then submit a new PR. Otherwise each of your commits requires attention from maintainers of the project.\n* If, however, you submitted a PR and received a request for changes, you should proceed with commits inside that PR, so that the maintainer can see the incremental fixes and won't need to review the whole PR again. In the exception case where you realize it'll take many many commits to complete the requests, then it's probably best to close the PR, do the work and then submit it again. Use common sense where you'd choose one way over another.\n\n## Do you want to contribute to the documentation?\n\n* Docs are automatically created from the notebooks in the nbs folder.\n"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/CONTRIBUTING.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "How to contribute",
        "parent_header": [
          "AlphaPeptDeep (PeptDeep)"
        ],
        "type": "Text_excerpt",
        "value": "If you like this software, you can give us a\n[star](https://github.com/MannLabs/alphapeptdeep/stargazers) to boost\nour visibility! All direct contributions are also welcome. Feel free to\npost a new [issue](https://github.com/MannLabs/alphapeptdeep/issues) or\nclone the repository and create a [pull\nrequest](https://github.com/MannLabs/alphapeptdeep/pulls) with a new\nbranch. For an even more interactive participation, check out the\n[discussions](https://github.com/MannLabs/alphapeptdeep/discussions) and\nthe [Contributors License Agreement](misc/CLA.md).\n"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Tagging of changes",
        "parent_header": [
          "AlphaPeptDeep (PeptDeep)",
          "How to contribute",
          "Notes for developers"
        ],
        "type": "Text_excerpt",
        "value": "In order to have release notes automatically generated, changes need to be tagged with labels.\nThe following labels are used (should be safe-explanatory):\n`breaking-change`, `bug`, `enhancement`.\n"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Release a new version",
        "parent_header": [
          "AlphaPeptDeep (PeptDeep)",
          "How to contribute",
          "Notes for developers"
        ],
        "type": "Text_excerpt",
        "value": "This package uses a shared release process defined in the\n[alphashared](https://github.com/MannLabs/alphashared) repository. Please see the instructions\n[there](https://github.com/MannLabs/alphashared/blob/reusable-release-workflow/.github/workflows/README.md#release-a-new-version).\n"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "pre-commit hooks",
        "parent_header": [
          "AlphaPeptDeep (PeptDeep)",
          "How to contribute",
          "Notes for developers"
        ],
        "type": "Text_excerpt",
        "value": "It is highly recommended to use the provided pre-commit hooks, as the CI pipeline enforces all checks therein to\npass in order to merge a branch.\n\nThe hooks need to be installed once by\n```bash\npre-commit install\n```\nYou can run the checks yourself using:\n```bash\npre-commit run --all-files\n```\n------------------------------------------------------------------------\n"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-10-01T12:53:05Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-03T05:30:39Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Deep learning framework for proteomics"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9377227637476612,
      "result": {
        "original_header": "About",
        "type": "Text_excerpt",
        "value": "AlphaPeptDeep (`peptdeep` for short) aims to easily build new deep\nlearning models for shotgun proteomics studies. Transfer learning is\nalso easy to apply using AlphaPeptDeep. \nIt contains some built-in models such as retention time (RT), collision\ncross section (CCS), and tandem mass spectrum (MS2) prediction for given\npeptides. With these models, one can easily generate a predicted library\nfrom fasta files. \nFor details, check out our [publications](#citations). \n"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.992069701848632,
      "result": {
        "original_header": "AlphaX repositories:",
        "type": "Text_excerpt",
        "value": "- [**alphabase**](https://github.com/MannLabs/alphabase): Infrastructure for AlphaX Ecosystem\n- [**alphapept**](https://github.com/MannLabs/alphapept): DDA search\n  engine\n- [**alphapeptdeep**](https://github.com/MannLabs/alphapeptdeep): Deep\n  learning for proteomics\n- [**alpharaw**](https://github.com/MannLabs/alpharaw): Raw data\n  accessing\n- [**alphaviz**](https://github.com/MannLabs/alphaviz): MS data and\n  result visualization\n- [**alphatims**](https://github.com/MannLabs/alphatims): timsTOF data\n  accessing\n \n"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8655043990581232,
      "result": {
        "original_header": "Subsequent projects of AlphaPeptDeep",
        "type": "Text_excerpt",
        "value": "- [**peptdeep_hla**](https://github.com/MannLabs/PeptDeep-HLA): the DL model that predict if a peptide is presented by indivudual HLA or not.\n \n"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9011142651750247,
      "result": {
        "original_header": "Pip",
        "type": "Text_excerpt",
        "value": "In case of issues, check out the following: \nSee the [HISTORY.md](HISTORY.md) for a full overview of the changes made\nin each version.\n \n"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://alphapeptdeep.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/MannLabs/alphapeptdeep/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/docs/nbs/tutorial_building_ccs_model.ipynb"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/docs/nbs/tutorial_building_ccs_model.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/docs/nbs/tutorial_models_from_scratch.ipynb"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/docs/nbs/tutorial_models_from_scratch.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/docs/nbs/tutorial_speclib_from_fasta.ipynb"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/docs/nbs/tutorial_speclib_from_fasta.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/docs/nbs/tutorial_building_rt_model.ipynb"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/docs/nbs/tutorial_building_rt_model.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/docs/nbs/alphapeptdeep_hdf_to_tsv.ipynb"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/docs/nbs/alphapeptdeep_hdf_to_tsv.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/docs/nbs/tutorial_model_manager.ipynb"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/docs/nbs/tutorial_model_manager.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/docs/nbs/tutorial.ipynb"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/docs/nbs/tutorial.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/docs/tutorials/tutorial_immunopeptidomics.ipynb"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/docs/tutorials/tutorial_immunopeptidomics.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/docs/tutorials/tutorial_speclib.ipynb"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/docs/tutorials/tutorial_speclib.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/nbs_trials/test_fasta_lib_gpu.ipynb"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/nbs_trials/test_fasta_lib_gpu.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/nbs_trials/test_argparse.ipynb"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/nbs_trials/test_argparse.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/nbs_trials/speclib_from_dda.ipynb"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/nbs_trials/speclib_from_dda.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/nbs_trials/test_transfer_api.ipynb"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/nbs_trials/test_transfer_api.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/nbs_trials/test_multi_target.ipynb"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/nbs_trials/test_multi_target.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/nbs_trials/test_predict_mp.ipynb"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/nbs_trials/test_predict_mp.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/nbs_trials/test_percolator.ipynb"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/nbs_trials/test_percolator.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/nbs_trials/test_fasta_lib_precursor_lib.ipynb"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/nbs_trials/test_fasta_lib_precursor_lib.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/nbs_trials/test_torch_jit.ipynb"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/nbs_trials/test_torch_jit.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/nbs_trials/test_predict_ms2_mp.ipynb"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/nbs_trials/test_predict_ms2_mp.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/nbs_trials/test_ccs_rt.ipynb"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/nbs_trials/test_ccs_rt.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/nbs_trials/test_rescore_api.ipynb"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/nbs_trials/test_rescore_api.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/nbs_trials/rescore/fdr.ipynb"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/nbs_trials/rescore/fdr.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/nbs_trials/rescore/percolator.ipynb"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/nbs_trials/rescore/percolator.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/nbs_trials/rescore/feature_extractor.ipynb"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/nbs_trials/rescore/feature_extractor.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 20
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/MannLabs/alphapeptdeep/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MannLabs/alphapeptdeep"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "AlphaPeptDeep (PeptDeep)"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/docs/build_docs.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/misc/get_version.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/misc/stable_pip_install.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/misc/check_version.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/misc/loose_pip_install.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/release/macos/create_installer_macos.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/release/macos/build_installer_macos.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/release/macos/build_package_macos.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/release/pypi/prepare_pypi_wheel.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/release/pypi/install_test_pypi_wheel.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/release/pypi/install_pypi_wheel.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/release/windows/create_installer_windows.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/release/linux/create_installer_linux.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/release/linux/build_installer_linux.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/release/linux/build_package_linux.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://user-images.githubusercontent.com/4646029/189301730-ac1f92cc-0e9d-4ba3-be1d-07c4d66032cd.jpg"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "AlphaPeptDeep (PeptDeep)"
        ],
        "type": "Text_excerpt",
        "value": "AlphaPeptDeep can be installed and used on all major operating systems\n(Windows, macOS and Linux).\n\nThere are three different types of installation possible:\n\n- [**One-click GUI installer:**](#one-click-gui) Choose this\n  installation if you only want the GUI and/or keep things as simple as\n  possible.\n- [**Pip installer:**](#pip) Choose this installation if you want to use peptdeep as a Python package in an existing Python (recommended Python 3.8 or 3.9) environment (e.g.\u00a0a Jupyter notebook). If needed, the GUI and CLI\n  can be installed with pip as well.\n- [**Developer installer:**](#developer) Choose this installation if you\n  are familiar with CLI tools, [conda](https://docs.conda.io/en/latest/)\n  and Python. This installation allows access to all available features\n  of peptdeep and even allows to modify its source code directly.\n  Generally, the developer version of peptdeep outperforms the\n  precompiled versions which makes this the installation of choice for\n  high-throughput experiments.\n"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "One-click GUI",
        "parent_header": [
          "AlphaPeptDeep (PeptDeep)",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "The GUI of peptdeep is a completely stand-alone tool that requires no\nknowledge of Python or CLI tools. Click on one of the links below to\ndownload the latest release for:\n\n- [**Windows**](https://github.com/MannLabs/alphapeptdeep/releases/latest/download/peptdeep-1.3.0-windows-amd64.exe)\n- [**macOS**](https://github.com/MannLabs/alphapeptdeep/releases/latest/download/peptdeep-1.3.0-macos-darwin-x64.pkg)\n- [**macOS ARM**](https://github.com/MannLabs/alphapeptdeep/releases/latest/download/peptdeep-1.3.0-macos-darwin-arm64.pkg )\n- [**Linux**](https://github.com/MannLabs/alphapeptdeep/releases/latest/download/peptdeep-1.3.0-linux-x64.deb)\n\nOlder releases remain available on the [release\npage](https://github.com/MannLabs/alphapeptdeep/releases), but no\nbackwards compatibility is guaranteed.\n\nNote that, as GitHub does not allow large release files, these installers do not have GPU support.\nTo create GPU version installers: clone the source code, install the GPU-version of pytorch [see here](#use-gpu),\nand then use the `build_installer_*.sh` and `build_package_*.sh`\nscript in the respective `release/[macos, linux, windows]` folder to build the installer locally.\nFor Linux you need to additionally pass the \"GPU\" flag, i.e. run\n```bash\nrelease/linux/build_installer_linux.sh GPU\nrelease/linux/build_package_linux.sh\n```\n"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Pip",
        "parent_header": [
          "AlphaPeptDeep (PeptDeep)",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "> PythonNET must be installed to access Thermo or Sciex raw data.\n>\n> *Legacy, should be replaced by AlphaRaw in the near future.*\n>\n> #### PythonNET in Windows\n>\n> Automatically installed for Windows.\n>\n> #### PythonNET in Linux\n>\n> 1.  Install Mono from mono-project website [Mono\n>     Linux](https://www.mono-project.com/download/stable/#download-lin).\n>     NOTE, the installed mono version should be at least 6.10, which\n>     requires you to add the ppa to your trusted sources!\n> 2.  Install PythonNET with `pip install pythonnet`.\n>\n> #### PythonNET in MacOS\n>\n> 1.  Install [brew](https://brew.sh) and pkg-config:\n>     `brew install pkg-config` 3. Install Mono from mono-project\n>     website [Mono Mac](https://www.mono-project.com/download/stable/)\n> 2.  Register the Mono-Path to your system: For macOS Catalina, open\n>     the configuration of zsh via the terminal:\n>\n> - Type `nano ~/.zshrc` to open the configuration of the terminal\n> - Append the mono path to your `PKG_CONFIG_PATH`:\n>   `export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/usr/lib/pkgconfig:/Library/Frameworks/Mono.framework/Versions/Current/lib/pkgconfig:$PKG_CONFIG_PATH`.\n> - Save everything and execute `. ~/.zshrc`\n>\n> 3.  Install PythonNET with `pip install pythonnet`.\n\npeptdeep can be installed in an existing Python environment with a\nsingle `bash` command. *This `bash` command can also be run directly\nfrom within a Jupyter notebook by prepending it with a `!`*:\n\n``` bash\npip install peptdeep\n```\n\nInstalling peptdeep like this avoids conflicts when integrating it in\nother tools, as this does not enforce strict versioning of dependancies.\nHowever, if new versions of dependancies are released, they are not\nguaranteed to be fully compatible with peptdeep. This should only occur\nin rare cases where dependencies are not backwards compatible.\n\n> **TODO** You can always force peptdeep to use dependancy versions\n> which are known to be compatible with:\n>\n> ``` bash\n> pip install \"peptdeep[stable]\"\n> ```\n>\n> NOTE: You might need to run `pip install pip` before installing\n> peptdeep like this. Also note the double quotes `\"`.\n\nFor those who are really adventurous, it is also possible to directly\ninstall any branch (e.g.\u00a0`@development`) with any extras\n(e.g.\u00a0`#egg=peptdeep[stable,development-stable]`) from GitHub with e.g.\n\n``` bash\npip install \"git+https://github.com/MannLabs/alphapeptdeep.git@development#egg=peptdeep[stable,development-stable]\"\n```\n\n### Use GPU\n\nTo enable GPU, GPU version of PyTorch is required, it can be installed\nwith:\n\n``` bash\npip install torch --extra-index-url https://download.pytorch.org/whl/cu116 --upgrade\n```\n\nNote that this may depend on your NVIDIA driver version. Run the command\nto check your NVIDIA driver:\n\n``` bash\nnvidia-smi\n```\n\nFor latest pytorch version, see [pytorch.org](https://pytorch.org/get-started/locally/).\n\n### Developer\n\npeptdeep can also be installed in editable (i.e.\u00a0developer) mode with a\nfew `bash` commands. This allows to fully customize the software and\neven modify the source code to your specific needs. When an editable\nPython package is installed, its source code is stored in a transparent\nlocation of your choice. While optional, it is advised to first (create\nand) navigate to e.g.\u00a0a general software folder:\n\n``` bash\nmkdir ~/alphapeptdeep/project/folder\ncd ~/alphapeptdeep/project/folder\n```\n\n***The following commands assume you do not perform any additional `cd`\ncommands anymore***.\n\nNext, download the peptdeep repository from GitHub either directly or\nwith a `git` command. This creates a new peptdeep subfolder in your\ncurrent directory.\n\n``` bash\ngit clone https://github.com/MannLabs/alphapeptdeep.git\n```\n\nFor any Python package, it is highly recommended to use a separate\n[conda virtual environment](https://docs.conda.io/en/latest/), as\notherwise *dependancy conflicts can occur with already existing\npackages*.\n\n``` bash\nconda create --name peptdeep python=3.9 -y\nconda activate peptdeep\n```\n\nFinally, peptdeep and all its [dependancies](requirements) need to be\ninstalled. To take advantage of all features and allow development (with\nthe `-e` flag), this is best done by also installing the [development\ndependencies](requirements/requirements_development.txt) instead of only\nthe [core dependencies](requirements/requirements.txt):\n\n``` bash\npip install -e \".[development]\"\n```\n\nBy default this installs loose dependancies (no explicit versioning),\nalthough it is also possible to use stable dependencies\n(e.g.\u00a0`pip install -e \".[stable,development-stable]\"`).\n\n***By using the editable flag `-e`, all modifications to the [peptdeep\nsource code folder](peptdeep) are directly reflected when running\npeptdeep. Note that the peptdeep folder cannot be moved and/or renamed\nif an editable version is installed. In case of confusion, you can\nalways retrieve the location of any Python module with e.g.\u00a0the command\n`import module` followed by `module.__file__`.***\n\n------------------------------------------------------------------------\n\n## Usage\n\nThere are three ways to use peptdeep:\n\n- [**GUI**](#gui)\n- [**CLI**](#cli)\n- [**Python**](#python-and-jupyter-notebooks)\n\nNOTE: The first time you use a fresh installation of peptdeep, it is\noften quite slow because some functions might still need compilation on\nyour local operating system and architecture. Subsequent use should be a\nlot faster.\n\n### GUI\n\nIf the GUI was not installed through a one-click GUI installer, it can\nbe launched with the following `bash` command:\n\n``` bash\npeptdeep gui\n```\n\nThis command will start a web server and automatically open the default\nbrowser:\n![](https://user-images.githubusercontent.com/4646029/189301730-ac1f92cc-0e9d-4ba3-be1d-07c4d66032cd.jpg)\n\nThere are several options in the GUI (left panel):\n\n- Server: Start/stop the task server, check tasks in the task queue\n- Settings: Configure common settings, load/save current settings\n- Model: Configure DL models for prediction or transfer learning\n- Transfer: Refine the models\n- Library: Predict a library\n- Rescore: Perform ML feature extraction and Percolator\n\n------------------------------------------------------------------------\n\n### CLI\n\nThe CLI can be run with the following command (after activating the\n`conda` environment with `conda activate peptdeep` or if an alias was\nset to the peptdeep executable):\n\n``` bash\npeptdeep -h\n```\n\nIt is possible to get help about each function and their (required)\nparameters by using the `-h` flag. AlphaPeptDeep provides several\ncommands for different tasks:\n\n- [**export-settings**](#export-settings)\n- [**cmd-flow**](#cmd-flow)\n- [**library**](#library)\n- [**transfer**](#transfer)\n- [**rescore**](#rescore)\n- [**install-models**](#install-models)\n- [**gui**](#gui)\n\nRun a command to check usages:\n\n``` bash\npeptdeep $command -h\n```\n\nFor example:\n\n``` bash\npeptdeep library -h\n```\n\n#### export-settings\n\n``` bash\npeptdeep export-settings C:/path/to/settings.yaml\n```\n\nThis command will export the default settings into the `settings.yaml`\nas a template, users can edit the yaml file to run other commands.\n\nHere is a section of the yaml file which controls global parameters for\ndifferent tasks:\n\n```\nmodel_url: \"https://github.com/MannLabs/alphapeptdeep/releases/download/pre-trained-models/pretrained_models.zip\"\n\ntask_type: library\ntask_type_choices:\n  - library\n  - train\n  - rescore\nthread_num: 8\ntorch_device:\n  device_type: gpu\n  device_type_choices:\n    - gpu\n    - mps\n    - cpu\n  device_ids: []\n\nlog_level: info\nlog_level_choices:\n  - debug\n  - info\n  - warning\n  - error\n  - critical\n\ncommon:\n  modloss_importance_level: 1.0\n  user_defined_modifications: {}\n  # For example,\n  # user_defined_modifications:\n  #   \"Dimethyl2@Any_N-term\":\n  #     composition: \"H(2)2H(2)C(2)\"\n  #     modloss_composition: \"H(0)\" # can be without if no modloss\n  #   \"Dimethyl2@K\":\n  #     composition: \"H(2)2H(2)C(2)\"\n  #   \"Dimethyl6@Any_N-term\":\n  #     composition: \"2H(4)13C(2)\"\n  #   \"Dimethyl6@K\":\n  #     composition: \"2H(4)13C(2)\"\n\npeak_matching:\n  ms2_ppm: True\n  ms2_tol_value: 20.0\n  ms1_ppm: True\n  ms1_tol_value: 20.0\n\nmodel_mgr:\n  default_nce: 30.0\n  default_instrument: Lumos\n  mask_modloss: True\n  model_type: generic\n  model_choices:\n  - generic\n  - phos\n  - hla # same as generic\n  - digly\n  external_ms2_model: ''\n  external_rt_model: ''\n  external_ccs_model: ''\n  instrument_group:\n    ThermoTOF: ThermoTOF\n    Astral: ThermoTOF\n    Lumos: Lumos\n    QE: QE\n    timsTOF: timsTOF\n    SciexTOF: SciexTOF\n    Fusion: Lumos\n    Eclipse: Lumos\n    Velos: Lumos # not important\n    Elite: Lumos # not important\n    OrbitrapTribrid: Lumos\n    ThermoTribrid: Lumos\n    QE+: QE\n    QEHF: QE\n    QEHFX: QE\n    Exploris: QE\n    Exploris480: QE\n  predict:\n    batch_size_ms2: 512\n    batch_size_rt_ccs: 1024\n    verbose: True\n    multiprocessing: True\n```\n\nThe `model_mgr` section in the yaml defines the common settings for\nMS2/RT/CCS prediction.\n\n------------------------------------------------------------------------\n\n### cmd-flow\n\n``` bash\npeptdeep cmd-flow ...\n```\n\nSupport CLI parameters to control `global_settings` for CLI users. It supports three workflows: `train`, `library` or `train library`, controlled by CLI parameter `--task_workflow`, for example, `--task_workflow train library`. All settings in [global_settings](peptdeep/constants/default_settings.yaml) are converted to CLI parameters using `--` as the dict level indicator, for example, `global_settings[\"library\"][\"var_mods\"]` corresponds to `--library--var_mods`. See [test_cmd_flow.sh](tests/test_cmd_flow.sh) for example.\n\nThere are three kinds of parameter types:\n  1. value type (int, float, bool, str): The CLI parameter only has a single value, for instance: `--model_mgr--default_instrument 30.0`.\n  2. list type (list): The CLI parameter has a list of values seperated by a space, for instance `--library--var_mods \"Oxidation@M\" \"Acetyl@Protein_N-term\"`.\n  3. dict type (dict): Only three parameters are `dict type`, `--library--labeling_channels`, `--model_mgr--transfer--psm_modification_mapping`, and `--common--user_defined_modifications`. Here are the examples:\n    - `--library--labeling_channels`: labeling channels for the library. Example: `--library--labeling_channels \"0:Dimethyl@Any_N-term;Dimethyl@K\" \"4:xx@Any_N-term;xx@K\"`\n    - `--model_mgr--transfer--psm_modification_mapping`: converting other search engines' modification names to alphabase modifications for transfer learning. Example: `--model_mgr--transfer--psm_modification_mapping \"Dimethyl@Any_N-term:_(Dimethyl-n-0);_(Dimethyl)\" \"Dimethyl@K:K(Dimethyl-K-0);K(Dimethyl)\"`. Note that `X(UniMod:id)` format can directly be recognized by alphabase.\n    - `--common--user_defined_modification`: user defined modifications. Example:`--common--user_defined_modification \"NewMod1@Any_N-term:H(2)2H(2)C(2)\" \"NewMod2@K:H(100)O(2)C(2)\"`\n\n#### library\n\n``` bash\npeptdeep library settings_yaml\n```\n\nThis command will predict a spectral library for given settings_yaml\nfile (exported by [export-settings](#export-settings)). All the\nessential settings are in the `library` section in the settings_yaml\nfile:\n\n```\nlibrary:\n  infile_type: fasta\n  infile_type_choices:\n  - fasta\n  - sequence_table\n  - peptide_table # sequence with mods and mod_sites\n  - precursor_table # peptide with charge state\n  infiles:\n  - xxx.fasta\n  fasta:\n    protease: 'trypsin'\n    protease_choices:\n    - 'trypsin'\n    - '([KR])'\n    - 'trypsin_not_P'\n    - '([KR](?=[^P]))'\n    - 'lys-c'\n    - 'K'\n    - 'lys-n'\n    - '\\w(?=K)'\n    - 'chymotrypsin'\n    - 'asp-n'\n    - 'glu-c'\n    max_miss_cleave: 2\n    add_contaminants: False\n  fix_mods:\n  - Carbamidomethyl@C\n  var_mods:\n  - Acetyl@Protein_N-term\n  - Oxidation@M\n  special_mods: [] # normally for Phospho or GlyGly@K\n  special_mods_cannot_modify_pep_n_term: False\n  special_mods_cannot_modify_pep_c_term: False\n  labeling_channels: {}\n  # For example,\n  # labeling_channels:\n  #   0: ['Dimethyl@Any_N-term','Dimethyl@K']\n  #   4: ['Dimethyl:2H(2)@Any_N-term','Dimethyl:2H(2)@K']\n  #   8: [...]\n  min_var_mod_num: 0\n  max_var_mod_num: 2\n  min_special_mod_num: 0\n  max_special_mod_num: 1\n  min_precursor_charge: 2\n  max_precursor_charge: 4\n  min_peptide_len: 7\n  max_peptide_len: 35\n  min_precursor_mz: 200.0\n  max_precursor_mz: 2000.0\n  decoy: pseudo_reverse\n  decoy_choices:\n  - pseudo_reverse\n  - diann\n  - None\n  max_frag_charge: 2\n  frag_types:\n  - b\n  - y\n  rt_to_irt: True\n  generate_precursor_isotope: False\n  output_folder: \"{PEPTDEEP_HOME}/spec_libs\"\n  output_tsv:\n    enabled: False\n    min_fragment_mz: 200\n    max_fragment_mz: 2000\n    min_relative_intensity: 0.001\n    keep_higest_k_peaks: 12\n    translate_batch_size: 1000000\n    translate_mod_to_unimod_id: False\n```\n\npeptdeep will load sequence data based on `library:infile_type`\nand `library:infiles` for library prediction.\n`library:infiles` contains the list of files with\n`library:infile_type` defined in\n`library:infile_type_choices`:\n\n- fasta: Protein fasta files, peptdeep will digest the protein sequences\n  into peptide sequences.\n- [sequence_table](#sequence_table): Tab/comma-delimited txt/tsv/csv\n  (text) files which contain the column `sequence` for peptide\n  sequences.\n- [peptide_table](#peptide_table): Tab/comma-delimited txt/tsv/csv\n  (text) files which contain the columns `sequence`, `mods`, and\n  `mod_sites`. peptdeep will not add modifications for peptides of this\n  file type.\n- [precursor_table](#precursor_table): Tab/comma-delimited txt/tsv/csv\n  (text) files which contain the columns `sequence`, `mods`,\n  `mod_sites`, and `charge`. peptdeep will not add modifications and\n  charge states for peptides of this file type.\n\nSee examples:\n\n``` python\nimport pandas as pd\ndf = pd.DataFrame({\n    'sequence': ['ACDEFGHIK','LMNPQRSTVK','WYVSTR'],\n    'mods': ['Carbamidomethyl@C','Acetyl@Protein_N-term;Phospho@S',''],\n    'mod_sites': ['2','0;7',''],\n    'charge': [2,3,1],\n})\n```\n\n##### sequence_table\n\n``` python\ndf[['sequence']]\n```\n\n|  | sequence |\n| --- | --- |\n| 0 | ACDEFGHIK |\n| 1 | LMNPQRSTVK |\n| 2 | WYVSTR |\n\n\n##### peptide_table\n\n``` python\ndf[['sequence','mods','mod_sites']]\n```\n\n|  | sequence | mods | mod_sites |\n| --- | --- | --- | --- |\n| 0 | ACDEFGHIK | Carbamidomethyl@C | 2 |\n| 1 | LMNPQRSTVK | Acetyl@Protein_N-term;Phospho@S | 0;7 |\n| 2 | WYVSTR | | |\n\n##### precursor_table\n\n``` python\ndf\n```\n\n|  | sequence | mods | mod_sites | charge |\n| --- | --- | --- | --- | --- |\n| 0 | ACDEFGHIK | Carbamidomethyl@C | 2 | 2 |\n| 1 | LMNPQRSTVK | Acetyl@Protein_N-term;Phospho@S | 0;7 | 3 |\n| 2 | WYVSTR | | | 1 |\n\n> Columns of `proteins` and `genes` are optional for these txt/tsv/csv\n> files.\n\npeptdeep supports multiple files for library prediction, for example (in\nthe yaml file):\n\n```\nlibrary:\n  ...\n  infile_type: fasta\n  infiles:\n  - /path/to/fasta/human.fasta\n  - /path/to/fasta/yeast.fasta\n  ...\n```\n\nThe library in HDF5 (.hdf) format will be saved into\n`library:output_folder`. If `library:output_tsv:enabled` is True, a TSV\nspectral library that can be processed by DIA-NN and Spectronaut will\nalso be saved into `library:output_folder`.\n\n------------------------------------------------------------------------\n\n#### transfer\n\n``` bash\npeptdeep transfer settings_yaml\n```\n\nThis command will apply transfer learning to refine RT/CCS/MS2 models\nbased on `model_mgr:transfer:psm_files` and\n`model_mgr:transfer:psm_type`. All yaml settings (exported by\n[export-settings](#export-settings)) related to this command are:\n\n```\nmodel_mgr:\n  transfer:\n    model_output_folder: \"{PEPTDEEP_HOME}/refined_models\"\n    epoch_ms2: 20\n    warmup_epoch_ms2: 10\n    batch_size_ms2: 512\n    lr_ms2: 0.0001\n    epoch_rt_ccs: 40\n    warmup_epoch_rt_ccs: 10\n    batch_size_rt_ccs: 1024\n    lr_rt_ccs: 0.0001\n    verbose: False\n    grid_nce_search: False\n    grid_nce_first: 15.0\n    grid_nce_last: 45.0\n    grid_nce_step: 3.0\n    grid_instrument: ['Lumos']\n    psm_type: alphapept\n    psm_type_choices:\n      - alphapept\n      - pfind\n      - maxquant\n      - diann\n      - speclib_tsv\n    psm_files: []\n    ms_file_type: alphapept_hdf\n    ms_file_type_choices:\n      - alphapept_hdf\n      - thermo_raw\n      - mgf\n      - mzml\n    ms_files: []\n    psm_num_to_train_ms2: 100000000\n    psm_num_per_mod_to_train_ms2: 50\n    psm_num_to_test_ms2: 0\n    psm_num_to_train_rt_ccs: 100000000\n    psm_num_per_mod_to_train_rt_ccs: 50\n    psm_num_to_test_rt_ccs: 0\n    top_n_mods_to_train: 10\n    psm_modification_mapping: {}\n    # alphabase modification to modifications of other search engines\n    # For example,\n    # psm_modification_mapping:\n    #   Dimethyl@Any_N-term:\n    #     - _(Dimethyl-n-0)\n    #     - _(Dimethyl)\n    #   Dimethyl:2H(2)@K:\n    #     - K(Dimethyl-K-2)\n    #   ...\n```\nFor DDA data, peptdeep can also extract MS2 intensities from the\nspectrum files from `model_mgr:transfer:ms_files` and\n`model_mgr:transfer:ms_file_type` for all PSMs. This will enable the\ntransfer learning of the MS2 model.\n\nFor DIA data, only RT and CCS (if timsTOF) models will be refined.\n\nFor example of the settings yaml:\n\n```\nmodel_mgr:\n  transfer:\n    ...\n    psm_type: pfind\n    psm_files:\n    - /path/to/pFind.spectra\n    - /path/to/other/pFind.spectra\n\n    ms_file_type: thermo_raw\n    ms_files:\n    - /path/to/raw1.raw\n    - /path/to/raw2.raw\n    ...\n```\n\nThe refined models will be saved in\n`model_mgr:transfer:model_output_folder`. After transfer learning, users\ncan apply the new models by replacing `model_mgr:external_ms2_model`,\n`model_mgr:external_rt_model` and `model_mgr:external_ccs_model` with\nthe saved `ms2.pth`, `rt.pth` and `ccs.pth` in\n`model_mgr:transfer:model_output_folder`. This is useful to perform\nsample-specific library prediction.\n\n------------------------------------------------------------------------\n\n#### rescore\n\nThis command will apply Percolator to rescore DDA PSMs in\n`percolator:input_files:psm_files` and\n`percolator:input_files:psm_type`. All yaml settings (exported by\n[export-settings](#export-settings)) related to this command are:\n\n```\npercolator:\n  require_model_tuning: True\n  raw_num_to_tune: 8\n\n  require_raw_specific_tuning: True\n  raw_specific_ms2_tuning: False\n  psm_num_per_raw_to_tune: 200\n  epoch_per_raw_to_tune: 5\n\n  multiprocessing: True\n\n  top_k_frags_to_calc_spc: 10\n  calibrate_frag_mass_error: False\n  max_perc_train_sample: 1000000\n  min_perc_train_sample: 100\n\n  percolator_backend: sklearn\n  percolator_backend_choices:\n    - sklearn\n    - pytorch\n  percolator_model: linear\n  percolator_model_choices:\n    pytorch_as_backend:\n      - linear # not fully tested, performance may be unstable\n      - mlp # not implemented yet\n    sklearn_as_backend:\n      - linear # logistic regression\n      - random_forest\n  lr_percolator_torch_model: 0.1 # learning rate, only used when percolator_backend==pytorch\n  percolator_iter_num: 5 # percolator iteration number\n  cv_fold: 1\n  fdr: 0.01\n  fdr_level: psm\n  fdr_level_choices:\n    - psm\n    - precursor\n    - peptide\n    - sequence\n  use_fdr_for_each_raw: False\n  frag_types: ['b_z1','b_z2','y_z1','y_z2']\n  input_files:\n    psm_type: alphapept\n    psm_type_choices:\n      - alphapept\n      - pfind\n    psm_files: []\n    ms_file_type: alphapept_hdf\n    ms_file_type_choices:\n      - alphapept_hdf\n      - thermo_raw # if alpharaw is installed\n      - mgf\n      - mzml\n    ms_files: []\n    other_score_column_mapping:\n      alphapept: {}\n      pfind:\n        raw_score: Raw_Score\n      msfragger:\n        hyperscore: hyperscore\n        nextscore: nextscore\n      maxquant: {}\n  output_folder: \"{PEPTDEEP_HOME}/rescore\"\n```\n\nTransfer learning will be applied when rescoring if `percolator:require_model_tuning`\nis True.\n\nThe corresponding MS files (`percolator:input_files:ms_files` and\n`percolator:input_files:ms_file_type`) must be provided to extract\nexperimental fragment intensities.\n\n------------------------------------------------------------------------\n\n#### install-models\n\n``` bash\npeptdeep install-models [--model-file url_or_local_model_zip] --overwrite True\n```\n\nRunning peptdeep for the first time, it will download and install models\nfrom [models on github](https://github.com/MannLabs/alphapeptdeep/releases/download/pre-trained-models/pretrained_models.zip)\ndefined in \u2018model_url\u2019 in the default yaml settings. This command will\nupdate `pretrained_models.zip` from `--model-file url_or_local_model_zip`.\n\nIt is also possible to use other models instead of the pretrained_models by providing `model_mgr:external_ms2_model`,\n`model_mgr:external_rt_model` and `model_mgr:external_ccs_model`.\n\n------------------------------------------------------------------------\n\n### Python and Jupyter notebooks\n\nUsing peptdeep from Python script or notebook provides the most flexible\nway to access all features in peptdeep.\n\nWe will introduce several usages of peptdeep via Python notebook:\n\n- [**global_settings**](#global_settings)\n- [**Pipeline APIs**](#pipeline-apis)\n- [**ModelManager**](#modelmanager)\n- [**Library Prediction**](#library-prediction)\n- [**DDA Rescoring**](#dda-rescoring)\n- [**HLA Peptide Prediction**](#hla-peptide-prediction)\n\n------------------------------------------------------------------------\n\n#### global_settings\n\nMost of the default parameters and attributes peptdeep functions and\nclasses are controlled by `peptdeep.settings.global_settings` which is a\n`dict`.\n\n``` python\nfrom peptdeep.settings import global_settings\n```\n\nThe default values of `global_settings` is defined in\n[default_settings.yaml](https://github.com/MannLabs/alphapeptdeep/blob/main/peptdeep/constants/default_settings.yaml).\n\n#### Pipeline APIs\n\nPipeline APIs provides the same functionalities with [CLI](#cli),\nincluding [library prediction](#library), [transfer\nlearning](#transfer), and [rescoring](#rescore).\n\n``` python\nfrom peptdeep.pipeline_api import (\n    generate_library,\n    transfer_learn,\n    rescore,\n)\n```\n\nAll these functionalities take a `settings_dict` as the inputs, the dict\nstructure is the same as the settings yaml file. See the documatation of `generate_library`, `transfer_learn`, `rescore` in https://alphapeptdeep.readthedocs.io/en/latest/module_pipeline_api.html.\n\n#### ModelManager\n\n``` python\nfrom peptdeep.pretrained_models import ModelManager\n```\n\n[`ModelManager`](https://alphapeptdeep.readthedocs.io/en/latest/module_pretrained_models.html#peptdeep.pretrained_models.ModelManager) class is the main entry to access MS2/RT/CCS models. It provides functionalities to train/refine the models and then use the new models to predict the data.\n\nCheck [tutorial_model_manager.ipynb](https://github.com/MannLabs/alphapeptdeep/blob/main/nbs/docs/tutorial_model_manager.ipynb) for details.\n\n#### Library Prediction\n\n``` python\nfrom peptdeep.protein.fasta import PredictSpecLibFasta\n```\n\n[`PredictSpecLibFasta`](https://alphapeptdeep.readthedocs.io/en/latest/protein/fasta.html#peptdeep.protein.fasta.PredictSpecLibFasta) class provides functionalities to deal with fasta files or protein\nsequences and spectral libraries.\n\nCheck out\n[tutorial_speclib_from_fasta.ipynb](https://github.com/MannLabs/alphapeptdeep/blob/main/docs/nbs/tutorial_speclib_from_fasta.ipynb)\nfor details.\n\n#### DDA Rescoring\n\n``` python\nfrom peptdeep.rescore.percolator import Percolator\n```\n\n`Percolator` class provides functionalities to rescore DDA PSMs search by `pFind` and\n`AlphaPept`, (and `MaxQuant` if output FDR=100%), \u2026\n\nCheck out [test_percolator.ipynb](https://github.com/MannLabs/alphapeptdeep/blob/main/nbs_tests/test_percolator.ipynb)\nfor details.\n\n#### HLA Peptide Prediction\n\n``` python\nfrom peptdeep.model.model_interface import ModelInterface\nimport peptdeep.model.generic_property_prediction # model shop\n```\n\nBuilding new DL models for peptide property prediction is one of the key features of AlphaPeptDeep. The key functionalities are [`ModelInterface`](https://alphapeptdeep.readthedocs.io/en/latest/model/model_interface.html#peptdeep.model.model_interface.ModelInterface) and the pre-designed models and model interfaces in the model shop (module [`peptdeep.model.generic_property_prediction`](https://alphapeptdeep.readthedocs.io/en/latest/model/generic_property_prediction.html)).\n\nFor example, we can built a HLA classifier that distinguishes HLA peptides from non-HLA peptides, see https://github.com/MannLabs/PeptDeep-HLA for details.\n\n------------------------------------------------------------------------\n\n## Troubleshooting\n\nIn case of issues, check out the following:\n\n- [Issues](https://github.com/MannLabs/alphapeptdeep/issues). Try a few\n  different search terms to find out if a similar problem has been\n  encountered before.\n\n- [Discussions](https://github.com/MannLabs/alphapeptdeep/discussions).\n  Check if your problem or feature requests has been discussed before.\n\n------------------------------------------------------------------------\n\n## How to contribute\n\nIf you like this software, you can give us a\n[star](https://github.com/MannLabs/alphapeptdeep/stargazers) to boost\nour visibility! All direct contributions are also welcome. Feel free to\npost a new [issue](https://github.com/MannLabs/alphapeptdeep/issues) or\nclone the repository and create a [pull\nrequest](https://github.com/MannLabs/alphapeptdeep/pulls) with a new\nbranch. For an even more interactive participation, check out the\n[discussions](https://github.com/MannLabs/alphapeptdeep/discussions) and\nthe [Contributors License Agreement](misc/CLA.md).\n\n### Notes for developers\n\n#### Tagging of changes\nIn order to have release notes automatically generated, changes need to be tagged with labels.\nThe following labels are used (should be safe-explanatory):\n`breaking-change`, `bug`, `enhancement`.\n\n#### Release a new version\nThis package uses a shared release process defined in the\n[alphashared](https://github.com/MannLabs/alphashared) repository. Please see the instructions\n[there](https://github.com/MannLabs/alphashared/blob/reusable-release-workflow/.github/workflows/README.md#release-a-new-version).\n\n#### pre-commit hooks\nIt is highly recommended to use the provided pre-commit hooks, as the CI pipeline enforces all checks therein to\npass in order to merge a branch.\n\nThe hooks need to be installed once by\n```bash\npre-commit install\n```\nYou can run the checks yourself using:\n```bash\npre-commit run --all-files\n```\n------------------------------------------------------------------------\n\n## Changelog\n\nSee the [HISTORY.md](HISTORY.md) for a full overview of the changes made\nin each version.\n"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "PythonNET in Windows",
        "parent_header": [
          "AlphaPeptDeep (PeptDeep)",
          "Installation",
          "Pip"
        ],
        "type": "Text_excerpt",
        "value": "# AlphaPeptDeep (PeptDeep)\n\n[![Default installation and tests](https://github.com/MannLabs/alphapeptdeep/actions/workflows/pip_installation.yml/badge.svg)](https://github.com/MannLabs/alphapeptdeep/actions/workflows/pip_installation.yml)\n[![Publish on PyPi and release on GitHub](https://github.com/MannLabs/alphapeptdeep/actions/workflows/publish_and_release.yml/badge.svg)](https://github.com/MannLabs/alphapeptdeep/actions/workflows/publish_and_release.yml)\n[![Documentation Status](https://readthedocs.org/projects/alphapeptdeep/badge/?version=latest)](https://alphapeptdeep.readthedocs.io/en/latest/?badge=latest)\n[![pypi](https://img.shields.io/pypi/v/peptdeep)](https://pypi.org/project/peptdeep)\n[![GitHub release](https://img.shields.io/github/v/release/mannlabs/alphapeptdeep?display_name=tag)](https://github.com/MannLabs/alphapeptdeep/releases)\n[![GitHub downloads](https://img.shields.io/github/downloads/mannlabs/alphapeptdeep/total?label=github%20downloads)](https://github.com/MannLabs/alphapeptdeep/releases)\n[![Downloads@pre-train-models](https://img.shields.io/github/downloads/mannlabs/alphapeptdeep/pre-trained-models/total)](https://github.com/MannLabs/alphapeptdeep/releases/tag/pre-trained-models)\n[![pip downloads](https://img.shields.io/pypi/dm/peptdeep?color=blue&label=pip%20downloads)](https://pypi.org/project/peptdeep)\n![Python](https://img.shields.io/pypi/pyversions/peptdeep)\n\n- [**About**](#about)\n- [**License**](#license)\n- [**Installation**](#installation)\n  - [**One-click GUI**](#one-click-gui)\n  - [**Pip installer**](#pip)\n  - [**Use GPU**](#use-gpu)\n  - [**Developer installer**](#developer)\n- [**Usage**](#usage)\n  - [**GUI**](#gui)\n  - [**CLI**](#cli)\n  - [**Python and jupyter notebooks**](#python-and-jupyter-notebooks)\n- [**Troubleshooting**](#troubleshooting)\n- [**Citations**](#citations)\n- [**How to contribute**](#how-to-contribute)\n- [**Changelog**](#changelog)\n\n------------------------------------------------------------------------\n\n## About\n\nAlphaPeptDeep (`peptdeep` for short) aims to easily build new deep\nlearning models for shotgun proteomics studies. Transfer learning is\nalso easy to apply using AlphaPeptDeep.\n\nIt contains some built-in models such as retention time (RT), collision\ncross section (CCS), and tandem mass spectrum (MS2) prediction for given\npeptides. With these models, one can easily generate a predicted library\nfrom fasta files.\n\nFor details, check out our [publications](#citations).\n\nFor documentation, see [readthedocs](https://alphapeptdeep.readthedocs.io/en/latest/).\n\n### AlphaX repositories:\n\n- [**alphabase**](https://github.com/MannLabs/alphabase): Infrastructure for AlphaX Ecosystem\n- [**alphapept**](https://github.com/MannLabs/alphapept): DDA search\n  engine\n- [**alphapeptdeep**](https://github.com/MannLabs/alphapeptdeep): Deep\n  learning for proteomics\n- [**alpharaw**](https://github.com/MannLabs/alpharaw): Raw data\n  accessing\n- [**alphaviz**](https://github.com/MannLabs/alphaviz): MS data and\n  result visualization\n- [**alphatims**](https://github.com/MannLabs/alphatims): timsTOF data\n  accessing\n\n### Subsequent projects of AlphaPeptDeep\n\n- [**peptdeep_hla**](https://github.com/MannLabs/PeptDeep-HLA): the DL model that predict if a peptide is presented by indivudual HLA or not.\n\n### Other pre-trained MS2/RT/CCS models\n\n- [**Dimethyl**](https://github.com/MannLabs/alphapeptdeep/releases/tag/dimethyl-models): the MS2/RT/CCS models for Dimethyl-labeled peptides.\n\n------------------------------------------------------------------------\n\n## Citations\n\nWen-Feng Zeng, Xie-Xuan Zhou, Sander Willems, Constantin Ammar, Maria Wahle, Isabell Bludau, Eugenia Voytik, Maximillian T. Strauss & Matthias Mann. AlphaPeptDeep: a modular deep learning framework to predict peptide properties for proteomics. Nat Commun 13, 7238 (2022). https://doi.org/10.1038/s41467-022-34904-3\n\n\n------------------------------------------------------------------------\n\n## License\n\nAlphaPeptDeep was developed by the [Mann Labs at the Max Planck\nInstitute of Biochemistry](https://www.biochem.mpg.de/mann) and the\n[University of\nCopenhagen](https://www.cpr.ku.dk/research/proteomics/mann/) and is\nfreely available with an [Apache License](LICENSE.txt). External Python\npackages (available in the [requirements](requirements) folder) have\ntheir own licenses, which can be consulted on their respective websites.\n\n------------------------------------------------------------------------\n\n## Installation\n\nAlphaPeptDeep can be installed and used on all major operating systems\n(Windows, macOS and Linux).\n\nThere are three different types of installation possible:\n\n- [**One-click GUI installer:**](#one-click-gui) Choose this\n  installation if you only want the GUI and/or keep things as simple as\n  possible.\n- [**Pip installer:**](#pip) Choose this installation if you want to use peptdeep as a Python package in an existing Python (recommended Python 3.8 or 3.9) environment (e.g.\u00a0a Jupyter notebook). If needed, the GUI and CLI\n  can be installed with pip as well.\n- [**Developer installer:**](#developer) Choose this installation if you\n  are familiar with CLI tools, [conda](https://docs.conda.io/en/latest/)\n  and Python. This installation allows access to all available features\n  of peptdeep and even allows to modify its source code directly.\n  Generally, the developer version of peptdeep outperforms the\n  precompiled versions which makes this the installation of choice for\n  high-throughput experiments.\n\n### One-click GUI\n\nThe GUI of peptdeep is a completely stand-alone tool that requires no\nknowledge of Python or CLI tools. Click on one of the links below to\ndownload the latest release for:\n\n- [**Windows**](https://github.com/MannLabs/alphapeptdeep/releases/latest/download/peptdeep-1.3.0-windows-amd64.exe)\n- [**macOS**](https://github.com/MannLabs/alphapeptdeep/releases/latest/download/peptdeep-1.3.0-macos-darwin-x64.pkg)\n- [**macOS ARM**](https://github.com/MannLabs/alphapeptdeep/releases/latest/download/peptdeep-1.3.0-macos-darwin-arm64.pkg )\n- [**Linux**](https://github.com/MannLabs/alphapeptdeep/releases/latest/download/peptdeep-1.3.0-linux-x64.deb)\n\nOlder releases remain available on the [release\npage](https://github.com/MannLabs/alphapeptdeep/releases), but no\nbackwards compatibility is guaranteed.\n\nNote that, as GitHub does not allow large release files, these installers do not have GPU support.\nTo create GPU version installers: clone the source code, install the GPU-version of pytorch [see here](#use-gpu),\nand then use the `build_installer_*.sh` and `build_package_*.sh`\nscript in the respective `release/[macos, linux, windows]` folder to build the installer locally.\nFor Linux you need to additionally pass the \"GPU\" flag, i.e. run\n```bash\nrelease/linux/build_installer_linux.sh GPU\nrelease/linux/build_package_linux.sh\n```\n\n### Pip\n\n> PythonNET must be installed to access Thermo or Sciex raw data.\n>\n> *Legacy, should be replaced by AlphaRaw in the near future.*\n>\n> #### PythonNET in Windows\n>\n> Automatically installed for Windows.\n>\n> #### PythonNET in Linux\n>\n> 1.  Install Mono from mono-project website [Mono\n>     Linux](https://www.mono-project.com/download/stable/#download-lin).\n>     NOTE, the installed mono version should be at least 6.10, which\n>     requires you to add the ppa to your trusted sources!\n> 2.  Install PythonNET with `pip install pythonnet`.\n>\n> #### PythonNET in MacOS\n>\n> 1.  Install [brew](https://brew.sh) and pkg-config:\n>     `brew install pkg-config` 3. Install Mono from mono-project\n>     website [Mono Mac](https://www.mono-project.com/download/stable/)\n> 2.  Register the Mono-Path to your system: For macOS Catalina, open\n>     the configuration of zsh via the terminal:\n>\n> - Type `nano ~/.zshrc` to open the configuration of the terminal\n> - Append the mono path to your `PKG_CONFIG_PATH`:\n>   `export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/usr/lib/pkgconfig:/Library/Frameworks/Mono.framework/Versions/Current/lib/pkgconfig:$PKG_CONFIG_PATH`.\n> - Save everything and execute `. ~/.zshrc`\n>\n> 3.  Install PythonNET with `pip install pythonnet`.\n\npeptdeep can be installed in an existing Python environment with a\nsingle `bash` command. *This `bash` command can also be run directly\nfrom within a Jupyter notebook by prepending it with a `!`*:\n\n``` bash\npip install peptdeep\n```\n\nInstalling peptdeep like this avoids conflicts when integrating it in\nother tools, as this does not enforce strict versioning of dependancies.\nHowever, if new versions of dependancies are released, they are not\nguaranteed to be fully compatible with peptdeep. This should only occur\nin rare cases where dependencies are not backwards compatible.\n\n> **TODO** You can always force peptdeep to use dependancy versions\n> which are known to be compatible with:\n>\n> ``` bash\n> pip install \"peptdeep[stable]\"\n> ```\n>\n> NOTE: You might need to run `pip install pip` before installing\n> peptdeep like this. Also note the double quotes `\"`.\n\nFor those who are really adventurous, it is also possible to directly\ninstall any branch (e.g.\u00a0`@development`) with any extras\n(e.g.\u00a0`#egg=peptdeep[stable,development-stable]`) from GitHub with e.g.\n\n``` bash\npip install \"git+https://github.com/MannLabs/alphapeptdeep.git@development#egg=peptdeep[stable,development-stable]\"\n```\n\n### Use GPU\n\nTo enable GPU, GPU version of PyTorch is required, it can be installed\nwith:\n\n``` bash\npip install torch --extra-index-url https://download.pytorch.org/whl/cu116 --upgrade\n```\n\nNote that this may depend on your NVIDIA driver version. Run the command\nto check your NVIDIA driver:\n\n``` bash\nnvidia-smi\n```\n\nFor latest pytorch version, see [pytorch.org](https://pytorch.org/get-started/locally/).\n\n### Developer\n\npeptdeep can also be installed in editable (i.e.\u00a0developer) mode with a\nfew `bash` commands. This allows to fully customize the software and\neven modify the source code to your specific needs. When an editable\nPython package is installed, its source code is stored in a transparent\nlocation of your choice. While optional, it is advised to first (create\nand) navigate to e.g.\u00a0a general software folder:\n\n``` bash\nmkdir ~/alphapeptdeep/project/folder\ncd ~/alphapeptdeep/project/folder\n```\n\n***The following commands assume you do not perform any additional `cd`\ncommands anymore***.\n\nNext, download the peptdeep repository from GitHub either directly or\nwith a `git` command. This creates a new peptdeep subfolder in your\ncurrent directory.\n\n``` bash\ngit clone https://github.com/MannLabs/alphapeptdeep.git\n```\n\nFor any Python package, it is highly recommended to use a separate\n[conda virtual environment](https://docs.conda.io/en/latest/), as\notherwise *dependancy conflicts can occur with already existing\npackages*.\n\n``` bash\nconda create --name peptdeep python=3.9 -y\nconda activate peptdeep\n```\n\nFinally, peptdeep and all its [dependancies](requirements) need to be\ninstalled. To take advantage of all features and allow development (with\nthe `-e` flag), this is best done by also installing the [development\ndependencies](requirements/requirements_development.txt) instead of only\nthe [core dependencies](requirements/requirements.txt):\n\n``` bash\npip install -e \".[development]\"\n```\n\nBy default this installs loose dependancies (no explicit versioning),\nalthough it is also possible to use stable dependencies\n(e.g.\u00a0`pip install -e \".[stable,development-stable]\"`).\n\n***By using the editable flag `-e`, all modifications to the [peptdeep\nsource code folder](peptdeep) are directly reflected when running\npeptdeep. Note that the peptdeep folder cannot be moved and/or renamed\nif an editable version is installed. In case of confusion, you can\nalways retrieve the location of any Python module with e.g.\u00a0the command\n`import module` followed by `module.__file__`.***\n\n------------------------------------------------------------------------\n\n## Usage\n\nThere are three ways to use peptdeep:\n\n- [**GUI**](#gui)\n- [**CLI**](#cli)\n- [**Python**](#python-and-jupyter-notebooks)\n\nNOTE: The first time you use a fresh installation of peptdeep, it is\noften quite slow because some functions might still need compilation on\nyour local operating system and architecture. Subsequent use should be a\nlot faster.\n\n### GUI\n\nIf the GUI was not installed through a one-click GUI installer, it can\nbe launched with the following `bash` command:\n\n``` bash\npeptdeep gui\n```\n\nThis command will start a web server and automatically open the default\nbrowser:\n![](https://user-images.githubusercontent.com/4646029/189301730-ac1f92cc-0e9d-4ba3-be1d-07c4d66032cd.jpg)\n\nThere are several options in the GUI (left panel):\n\n- Server: Start/stop the task server, check tasks in the task queue\n- Settings: Configure common settings, load/save current settings\n- Model: Configure DL models for prediction or transfer learning\n- Transfer: Refine the models\n- Library: Predict a library\n- Rescore: Perform ML feature extraction and Percolator\n\n------------------------------------------------------------------------\n\n### CLI\n\nThe CLI can be run with the following command (after activating the\n`conda` environment with `conda activate peptdeep` or if an alias was\nset to the peptdeep executable):\n\n``` bash\npeptdeep -h\n```\n\nIt is possible to get help about each function and their (required)\nparameters by using the `-h` flag. AlphaPeptDeep provides several\ncommands for different tasks:\n\n- [**export-settings**](#export-settings)\n- [**cmd-flow**](#cmd-flow)\n- [**library**](#library)\n- [**transfer**](#transfer)\n- [**rescore**](#rescore)\n- [**install-models**](#install-models)\n- [**gui**](#gui)\n\nRun a command to check usages:\n\n``` bash\npeptdeep $command -h\n```\n\nFor example:\n\n``` bash\npeptdeep library -h\n```\n\n#### export-settings\n\n``` bash\npeptdeep export-settings C:/path/to/settings.yaml\n```\n\nThis command will export the default settings into the `settings.yaml`\nas a template, users can edit the yaml file to run other commands.\n\nHere is a section of the yaml file which controls global parameters for\ndifferent tasks:\n\n```\nmodel_url: \"https://github.com/MannLabs/alphapeptdeep/releases/download/pre-trained-models/pretrained_models.zip\"\n\ntask_type: library\ntask_type_choices:\n  - library\n  - train\n  - rescore\nthread_num: 8\ntorch_device:\n  device_type: gpu\n  device_type_choices:\n    - gpu\n    - mps\n    - cpu\n  device_ids: []\n\nlog_level: info\nlog_level_choices:\n  - debug\n  - info\n  - warning\n  - error\n  - critical\n\ncommon:\n  modloss_importance_level: 1.0\n  user_defined_modifications: {}\n  # For example,\n  # user_defined_modifications:\n  #   \"Dimethyl2@Any_N-term\":\n  #     composition: \"H(2)2H(2)C(2)\"\n  #     modloss_composition: \"H(0)\" # can be without if no modloss\n  #   \"Dimethyl2@K\":\n  #     composition: \"H(2)2H(2)C(2)\"\n  #   \"Dimethyl6@Any_N-term\":\n  #     composition: \"2H(4)13C(2)\"\n  #   \"Dimethyl6@K\":\n  #     composition: \"2H(4)13C(2)\"\n\npeak_matching:\n  ms2_ppm: True\n  ms2_tol_value: 20.0\n  ms1_ppm: True\n  ms1_tol_value: 20.0\n\nmodel_mgr:\n  default_nce: 30.0\n  default_instrument: Lumos\n  mask_modloss: True\n  model_type: generic\n  model_choices:\n  - generic\n  - phos\n  - hla # same as generic\n  - digly\n  external_ms2_model: ''\n  external_rt_model: ''\n  external_ccs_model: ''\n  instrument_group:\n    ThermoTOF: ThermoTOF\n    Astral: ThermoTOF\n    Lumos: Lumos\n    QE: QE\n    timsTOF: timsTOF\n    SciexTOF: SciexTOF\n    Fusion: Lumos\n    Eclipse: Lumos\n    Velos: Lumos # not important\n    Elite: Lumos # not important\n    OrbitrapTribrid: Lumos\n    ThermoTribrid: Lumos\n    QE+: QE\n    QEHF: QE\n    QEHFX: QE\n    Exploris: QE\n    Exploris480: QE\n  predict:\n    batch_size_ms2: 512\n    batch_size_rt_ccs: 1024\n    verbose: True\n    multiprocessing: True\n```\n\nThe `model_mgr` section in the yaml defines the common settings for\nMS2/RT/CCS prediction.\n\n------------------------------------------------------------------------\n\n### cmd-flow\n\n``` bash\npeptdeep cmd-flow ...\n```\n\nSupport CLI parameters to control `global_settings` for CLI users. It supports three workflows: `train`, `library` or `train library`, controlled by CLI parameter `--task_workflow`, for example, `--task_workflow train library`. All settings in [global_settings](peptdeep/constants/default_settings.yaml) are converted to CLI parameters using `--` as the dict level indicator, for example, `global_settings[\"library\"][\"var_mods\"]` corresponds to `--library--var_mods`. See [test_cmd_flow.sh](tests/test_cmd_flow.sh) for example.\n\nThere are three kinds of parameter types:\n  1. value type (int, float, bool, str): The CLI parameter only has a single value, for instance: `--model_mgr--default_instrument 30.0`.\n  2. list type (list): The CLI parameter has a list of values seperated by a space, for instance `--library--var_mods \"Oxidation@M\" \"Acetyl@Protein_N-term\"`.\n  3. dict type (dict): Only three parameters are `dict type`, `--library--labeling_channels`, `--model_mgr--transfer--psm_modification_mapping`, and `--common--user_defined_modifications`. Here are the examples:\n    - `--library--labeling_channels`: labeling channels for the library. Example: `--library--labeling_channels \"0:Dimethyl@Any_N-term;Dimethyl@K\" \"4:xx@Any_N-term;xx@K\"`\n    - `--model_mgr--transfer--psm_modification_mapping`: converting other search engines' modification names to alphabase modifications for transfer learning. Example: `--model_mgr--transfer--psm_modification_mapping \"Dimethyl@Any_N-term:_(Dimethyl-n-0);_(Dimethyl)\" \"Dimethyl@K:K(Dimethyl-K-0);K(Dimethyl)\"`. Note that `X(UniMod:id)` format can directly be recognized by alphabase.\n    - `--common--user_defined_modification`: user defined modifications. Example:`--common--user_defined_modification \"NewMod1@Any_N-term:H(2)2H(2)C(2)\" \"NewMod2@K:H(100)O(2)C(2)\"`\n\n#### library\n\n``` bash\npeptdeep library settings_yaml\n```\n\nThis command will predict a spectral library for given settings_yaml\nfile (exported by [export-settings](#export-settings)). All the\nessential settings are in the `library` section in the settings_yaml\nfile:\n\n```\nlibrary:\n  infile_type: fasta\n  infile_type_choices:\n  - fasta\n  - sequence_table\n  - peptide_table # sequence with mods and mod_sites\n  - precursor_table # peptide with charge state\n  infiles:\n  - xxx.fasta\n  fasta:\n    protease: 'trypsin'\n    protease_choices:\n    - 'trypsin'\n    - '([KR])'\n    - 'trypsin_not_P'\n    - '([KR](?=[^P]))'\n    - 'lys-c'\n    - 'K'\n    - 'lys-n'\n    - '\\w(?=K)'\n    - 'chymotrypsin'\n    - 'asp-n'\n    - 'glu-c'\n    max_miss_cleave: 2\n    add_contaminants: False\n  fix_mods:\n  - Carbamidomethyl@C\n  var_mods:\n  - Acetyl@Protein_N-term\n  - Oxidation@M\n  special_mods: [] # normally for Phospho or GlyGly@K\n  special_mods_cannot_modify_pep_n_term: False\n  special_mods_cannot_modify_pep_c_term: False\n  labeling_channels: {}\n  # For example,\n  # labeling_channels:\n  #   0: ['Dimethyl@Any_N-term','Dimethyl@K']\n  #   4: ['Dimethyl:2H(2)@Any_N-term','Dimethyl:2H(2)@K']\n  #   8: [...]\n  min_var_mod_num: 0\n  max_var_mod_num: 2\n  min_special_mod_num: 0\n  max_special_mod_num: 1\n  min_precursor_charge: 2\n  max_precursor_charge: 4\n  min_peptide_len: 7\n  max_peptide_len: 35\n  min_precursor_mz: 200.0\n  max_precursor_mz: 2000.0\n  decoy: pseudo_reverse\n  decoy_choices:\n  - pseudo_reverse\n  - diann\n  - None\n  max_frag_charge: 2\n  frag_types:\n  - b\n  - y\n  rt_to_irt: True\n  generate_precursor_isotope: False\n  output_folder: \"{PEPTDEEP_HOME}/spec_libs\"\n  output_tsv:\n    enabled: False\n    min_fragment_mz: 200\n    max_fragment_mz: 2000\n    min_relative_intensity: 0.001\n    keep_higest_k_peaks: 12\n    translate_batch_size: 1000000\n    translate_mod_to_unimod_id: False\n```\n\npeptdeep will load sequence data based on `library:infile_type`\nand `library:infiles` for library prediction.\n`library:infiles` contains the list of files with\n`library:infile_type` defined in\n`library:infile_type_choices`:\n\n- fasta: Protein fasta files, peptdeep will digest the protein sequences\n  into peptide sequences.\n- [sequence_table](#sequence_table): Tab/comma-delimited txt/tsv/csv\n  (text) files which contain the column `sequence` for peptide\n  sequences.\n- [peptide_table](#peptide_table): Tab/comma-delimited txt/tsv/csv\n  (text) files which contain the columns `sequence`, `mods`, and\n  `mod_sites`. peptdeep will not add modifications for peptides of this\n  file type.\n- [precursor_table](#precursor_table): Tab/comma-delimited txt/tsv/csv\n  (text) files which contain the columns `sequence`, `mods`,\n  `mod_sites`, and `charge`. peptdeep will not add modifications and\n  charge states for peptides of this file type.\n\nSee examples:\n\n``` python\nimport pandas as pd\ndf = pd.DataFrame({\n    'sequence': ['ACDEFGHIK','LMNPQRSTVK','WYVSTR'],\n    'mods': ['Carbamidomethyl@C','Acetyl@Protein_N-term;Phospho@S',''],\n    'mod_sites': ['2','0;7',''],\n    'charge': [2,3,1],\n})\n```\n\n##### sequence_table\n\n``` python\ndf[['sequence']]\n```\n\n|  | sequence |\n| --- | --- |\n| 0 | ACDEFGHIK |\n| 1 | LMNPQRSTVK |\n| 2 | WYVSTR |\n\n\n##### peptide_table\n\n``` python\ndf[['sequence','mods','mod_sites']]\n```\n\n|  | sequence | mods | mod_sites |\n| --- | --- | --- | --- |\n| 0 | ACDEFGHIK | Carbamidomethyl@C | 2 |\n| 1 | LMNPQRSTVK | Acetyl@Protein_N-term;Phospho@S | 0;7 |\n| 2 | WYVSTR | | |\n\n##### precursor_table\n\n``` python\ndf\n```\n\n|  | sequence | mods | mod_sites | charge |\n| --- | --- | --- | --- | --- |\n| 0 | ACDEFGHIK | Carbamidomethyl@C | 2 | 2 |\n| 1 | LMNPQRSTVK | Acetyl@Protein_N-term;Phospho@S | 0;7 | 3 |\n| 2 | WYVSTR | | | 1 |\n\n> Columns of `proteins` and `genes` are optional for these txt/tsv/csv\n> files.\n\npeptdeep supports multiple files for library prediction, for example (in\nthe yaml file):\n\n```\nlibrary:\n  ...\n  infile_type: fasta\n  infiles:\n  - /path/to/fasta/human.fasta\n  - /path/to/fasta/yeast.fasta\n  ...\n```\n\nThe library in HDF5 (.hdf) format will be saved into\n`library:output_folder`. If `library:output_tsv:enabled` is True, a TSV\nspectral library that can be processed by DIA-NN and Spectronaut will\nalso be saved into `library:output_folder`.\n\n------------------------------------------------------------------------\n\n#### transfer\n\n``` bash\npeptdeep transfer settings_yaml\n```\n\nThis command will apply transfer learning to refine RT/CCS/MS2 models\nbased on `model_mgr:transfer:psm_files` and\n`model_mgr:transfer:psm_type`. All yaml settings (exported by\n[export-settings](#export-settings)) related to this command are:\n\n```\nmodel_mgr:\n  transfer:\n    model_output_folder: \"{PEPTDEEP_HOME}/refined_models\"\n    epoch_ms2: 20\n    warmup_epoch_ms2: 10\n    batch_size_ms2: 512\n    lr_ms2: 0.0001\n    epoch_rt_ccs: 40\n    warmup_epoch_rt_ccs: 10\n    batch_size_rt_ccs: 1024\n    lr_rt_ccs: 0.0001\n    verbose: False\n    grid_nce_search: False\n    grid_nce_first: 15.0\n    grid_nce_last: 45.0\n    grid_nce_step: 3.0\n    grid_instrument: ['Lumos']\n    psm_type: alphapept\n    psm_type_choices:\n      - alphapept\n      - pfind\n      - maxquant\n      - diann\n      - speclib_tsv\n    psm_files: []\n    ms_file_type: alphapept_hdf\n    ms_file_type_choices:\n      - alphapept_hdf\n      - thermo_raw\n      - mgf\n      - mzml\n    ms_files: []\n    psm_num_to_train_ms2: 100000000\n    psm_num_per_mod_to_train_ms2: 50\n    psm_num_to_test_ms2: 0\n    psm_num_to_train_rt_ccs: 100000000\n    psm_num_per_mod_to_train_rt_ccs: 50\n    psm_num_to_test_rt_ccs: 0\n    top_n_mods_to_train: 10\n    psm_modification_mapping: {}\n    # alphabase modification to modifications of other search engines\n    # For example,\n    # psm_modification_mapping:\n    #   Dimethyl@Any_N-term:\n    #     - _(Dimethyl-n-0)\n    #     - _(Dimethyl)\n    #   Dimethyl:2H(2)@K:\n    #     - K(Dimethyl-K-2)\n    #   ...\n```\nFor DDA data, peptdeep can also extract MS2 intensities from the\nspectrum files from `model_mgr:transfer:ms_files` and\n`model_mgr:transfer:ms_file_type` for all PSMs. This will enable the\ntransfer learning of the MS2 model.\n\nFor DIA data, only RT and CCS (if timsTOF) models will be refined.\n\nFor example of the settings yaml:\n\n```\nmodel_mgr:\n  transfer:\n    ...\n    psm_type: pfind\n    psm_files:\n    - /path/to/pFind.spectra\n    - /path/to/other/pFind.spectra\n\n    ms_file_type: thermo_raw\n    ms_files:\n    - /path/to/raw1.raw\n    - /path/to/raw2.raw\n    ...\n```\n\nThe refined models will be saved in\n`model_mgr:transfer:model_output_folder`. After transfer learning, users\ncan apply the new models by replacing `model_mgr:external_ms2_model`,\n`model_mgr:external_rt_model` and `model_mgr:external_ccs_model` with\nthe saved `ms2.pth`, `rt.pth` and `ccs.pth` in\n`model_mgr:transfer:model_output_folder`. This is useful to perform\nsample-specific library prediction.\n\n------------------------------------------------------------------------\n\n#### rescore\n\nThis command will apply Percolator to rescore DDA PSMs in\n`percolator:input_files:psm_files` and\n`percolator:input_files:psm_type`. All yaml settings (exported by\n[export-settings](#export-settings)) related to this command are:\n\n```\npercolator:\n  require_model_tuning: True\n  raw_num_to_tune: 8\n\n  require_raw_specific_tuning: True\n  raw_specific_ms2_tuning: False\n  psm_num_per_raw_to_tune: 200\n  epoch_per_raw_to_tune: 5\n\n  multiprocessing: True\n\n  top_k_frags_to_calc_spc: 10\n  calibrate_frag_mass_error: False\n  max_perc_train_sample: 1000000\n  min_perc_train_sample: 100\n\n  percolator_backend: sklearn\n  percolator_backend_choices:\n    - sklearn\n    - pytorch\n  percolator_model: linear\n  percolator_model_choices:\n    pytorch_as_backend:\n      - linear # not fully tested, performance may be unstable\n      - mlp # not implemented yet\n    sklearn_as_backend:\n      - linear # logistic regression\n      - random_forest\n  lr_percolator_torch_model: 0.1 # learning rate, only used when percolator_backend==pytorch\n  percolator_iter_num: 5 # percolator iteration number\n  cv_fold: 1\n  fdr: 0.01\n  fdr_level: psm\n  fdr_level_choices:\n    - psm\n    - precursor\n    - peptide\n    - sequence\n  use_fdr_for_each_raw: False\n  frag_types: ['b_z1','b_z2','y_z1','y_z2']\n  input_files:\n    psm_type: alphapept\n    psm_type_choices:\n      - alphapept\n      - pfind\n    psm_files: []\n    ms_file_type: alphapept_hdf\n    ms_file_type_choices:\n      - alphapept_hdf\n      - thermo_raw # if alpharaw is installed\n      - mgf\n      - mzml\n    ms_files: []\n    other_score_column_mapping:\n      alphapept: {}\n      pfind:\n        raw_score: Raw_Score\n      msfragger:\n        hyperscore: hyperscore\n        nextscore: nextscore\n      maxquant: {}\n  output_folder: \"{PEPTDEEP_HOME}/rescore\"\n```\n\nTransfer learning will be applied when rescoring if `percolator:require_model_tuning`\nis True.\n\nThe corresponding MS files (`percolator:input_files:ms_files` and\n`percolator:input_files:ms_file_type`) must be provided to extract\nexperimental fragment intensities.\n\n------------------------------------------------------------------------\n\n#### install-models\n\n``` bash\npeptdeep install-models [--model-file url_or_local_model_zip] --overwrite True\n```\n\nRunning peptdeep for the first time, it will download and install models\nfrom [models on github](https://github.com/MannLabs/alphapeptdeep/releases/download/pre-trained-models/pretrained_models.zip)\ndefined in \u2018model_url\u2019 in the default yaml settings. This command will\nupdate `pretrained_models.zip` from `--model-file url_or_local_model_zip`.\n\nIt is also possible to use other models instead of the pretrained_models by providing `model_mgr:external_ms2_model`,\n`model_mgr:external_rt_model` and `model_mgr:external_ccs_model`.\n\n------------------------------------------------------------------------\n\n### Python and Jupyter notebooks\n\nUsing peptdeep from Python script or notebook provides the most flexible\nway to access all features in peptdeep.\n\nWe will introduce several usages of peptdeep via Python notebook:\n\n- [**global_settings**](#global_settings)\n- [**Pipeline APIs**](#pipeline-apis)\n- [**ModelManager**](#modelmanager)\n- [**Library Prediction**](#library-prediction)\n- [**DDA Rescoring**](#dda-rescoring)\n- [**HLA Peptide Prediction**](#hla-peptide-prediction)\n\n------------------------------------------------------------------------\n\n#### global_settings\n\nMost of the default parameters and attributes peptdeep functions and\nclasses are controlled by `peptdeep.settings.global_settings` which is a\n`dict`.\n\n``` python\nfrom peptdeep.settings import global_settings\n```\n\nThe default values of `global_settings` is defined in\n[default_settings.yaml](https://github.com/MannLabs/alphapeptdeep/blob/main/peptdeep/constants/default_settings.yaml).\n\n#### Pipeline APIs\n\nPipeline APIs provides the same functionalities with [CLI](#cli),\nincluding [library prediction](#library), [transfer\nlearning](#transfer), and [rescoring](#rescore).\n\n``` python\nfrom peptdeep.pipeline_api import (\n    generate_library,\n    transfer_learn,\n    rescore,\n)\n```\n\nAll these functionalities take a `settings_dict` as the inputs, the dict\nstructure is the same as the settings yaml file. See the documatation of `generate_library`, `transfer_learn`, `rescore` in https://alphapeptdeep.readthedocs.io/en/latest/module_pipeline_api.html.\n\n#### ModelManager\n\n``` python\nfrom peptdeep.pretrained_models import ModelManager\n```\n\n[`ModelManager`](https://alphapeptdeep.readthedocs.io/en/latest/module_pretrained_models.html#peptdeep.pretrained_models.ModelManager) class is the main entry to access MS2/RT/CCS models. It provides functionalities to train/refine the models and then use the new models to predict the data.\n\nCheck [tutorial_model_manager.ipynb](https://github.com/MannLabs/alphapeptdeep/blob/main/nbs/docs/tutorial_model_manager.ipynb) for details.\n\n#### Library Prediction\n\n``` python\nfrom peptdeep.protein.fasta import PredictSpecLibFasta\n```\n\n[`PredictSpecLibFasta`](https://alphapeptdeep.readthedocs.io/en/latest/protein/fasta.html#peptdeep.protein.fasta.PredictSpecLibFasta) class provides functionalities to deal with fasta files or protein\nsequences and spectral libraries.\n\nCheck out\n[tutorial_speclib_from_fasta.ipynb](https://github.com/MannLabs/alphapeptdeep/blob/main/docs/nbs/tutorial_speclib_from_fasta.ipynb)\nfor details.\n\n#### DDA Rescoring\n\n``` python\nfrom peptdeep.rescore.percolator import Percolator\n```\n\n`Percolator` class provides functionalities to rescore DDA PSMs search by `pFind` and\n`AlphaPept`, (and `MaxQuant` if output FDR=100%), \u2026\n\nCheck out [test_percolator.ipynb](https://github.com/MannLabs/alphapeptdeep/blob/main/nbs_tests/test_percolator.ipynb)\nfor details.\n\n#### HLA Peptide Prediction\n\n``` python\nfrom peptdeep.model.model_interface import ModelInterface\nimport peptdeep.model.generic_property_prediction # model shop\n```\n\nBuilding new DL models for peptide property prediction is one of the key features of AlphaPeptDeep. The key functionalities are [`ModelInterface`](https://alphapeptdeep.readthedocs.io/en/latest/model/model_interface.html#peptdeep.model.model_interface.ModelInterface) and the pre-designed models and model interfaces in the model shop (module [`peptdeep.model.generic_property_prediction`](https://alphapeptdeep.readthedocs.io/en/latest/model/generic_property_prediction.html)).\n\nFor example, we can built a HLA classifier that distinguishes HLA peptides from non-HLA peptides, see https://github.com/MannLabs/PeptDeep-HLA for details.\n\n------------------------------------------------------------------------\n\n## Troubleshooting\n\nIn case of issues, check out the following:\n\n- [Issues](https://github.com/MannLabs/alphapeptdeep/issues). Try a few\n  different search terms to find out if a similar problem has been\n  encountered before.\n\n- [Discussions](https://github.com/MannLabs/alphapeptdeep/discussions).\n  Check if your problem or feature requests has been discussed before.\n\n------------------------------------------------------------------------\n\n## How to contribute\n\nIf you like this software, you can give us a\n[star](https://github.com/MannLabs/alphapeptdeep/stargazers) to boost\nour visibility! All direct contributions are also welcome. Feel free to\npost a new [issue](https://github.com/MannLabs/alphapeptdeep/issues) or\nclone the repository and create a [pull\nrequest](https://github.com/MannLabs/alphapeptdeep/pulls) with a new\nbranch. For an even more interactive participation, check out the\n[discussions](https://github.com/MannLabs/alphapeptdeep/discussions) and\nthe [Contributors License Agreement](misc/CLA.md).\n\n### Notes for developers\n\n#### Tagging of changes\nIn order to have release notes automatically generated, changes need to be tagged with labels.\nThe following labels are used (should be safe-explanatory):\n`breaking-change`, `bug`, `enhancement`.\n\n#### Release a new version\nThis package uses a shared release process defined in the\n[alphashared](https://github.com/MannLabs/alphashared) repository. Please see the instructions\n[there](https://github.com/MannLabs/alphashared/blob/reusable-release-workflow/.github/workflows/README.md#release-a-new-version).\n\n#### pre-commit hooks\nIt is highly recommended to use the provided pre-commit hooks, as the CI pipeline enforces all checks therein to\npass in order to merge a branch.\n\nThe hooks need to be installed once by\n```bash\npre-commit install\n```\nYou can run the checks yourself using:\n```bash\npre-commit run --all-files\n```\n------------------------------------------------------------------------\n\n## Changelog\n\nSee the [HISTORY.md](HISTORY.md) for a full overview of the changes made\nin each version.\n"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "PythonNET in Linux",
        "parent_header": [
          "AlphaPeptDeep (PeptDeep)",
          "Installation",
          "Pip"
        ],
        "type": "Text_excerpt",
        "value": "# AlphaPeptDeep (PeptDeep)\n\n[![Default installation and tests](https://github.com/MannLabs/alphapeptdeep/actions/workflows/pip_installation.yml/badge.svg)](https://github.com/MannLabs/alphapeptdeep/actions/workflows/pip_installation.yml)\n[![Publish on PyPi and release on GitHub](https://github.com/MannLabs/alphapeptdeep/actions/workflows/publish_and_release.yml/badge.svg)](https://github.com/MannLabs/alphapeptdeep/actions/workflows/publish_and_release.yml)\n[![Documentation Status](https://readthedocs.org/projects/alphapeptdeep/badge/?version=latest)](https://alphapeptdeep.readthedocs.io/en/latest/?badge=latest)\n[![pypi](https://img.shields.io/pypi/v/peptdeep)](https://pypi.org/project/peptdeep)\n[![GitHub release](https://img.shields.io/github/v/release/mannlabs/alphapeptdeep?display_name=tag)](https://github.com/MannLabs/alphapeptdeep/releases)\n[![GitHub downloads](https://img.shields.io/github/downloads/mannlabs/alphapeptdeep/total?label=github%20downloads)](https://github.com/MannLabs/alphapeptdeep/releases)\n[![Downloads@pre-train-models](https://img.shields.io/github/downloads/mannlabs/alphapeptdeep/pre-trained-models/total)](https://github.com/MannLabs/alphapeptdeep/releases/tag/pre-trained-models)\n[![pip downloads](https://img.shields.io/pypi/dm/peptdeep?color=blue&label=pip%20downloads)](https://pypi.org/project/peptdeep)\n![Python](https://img.shields.io/pypi/pyversions/peptdeep)\n\n- [**About**](#about)\n- [**License**](#license)\n- [**Installation**](#installation)\n  - [**One-click GUI**](#one-click-gui)\n  - [**Pip installer**](#pip)\n  - [**Use GPU**](#use-gpu)\n  - [**Developer installer**](#developer)\n- [**Usage**](#usage)\n  - [**GUI**](#gui)\n  - [**CLI**](#cli)\n  - [**Python and jupyter notebooks**](#python-and-jupyter-notebooks)\n- [**Troubleshooting**](#troubleshooting)\n- [**Citations**](#citations)\n- [**How to contribute**](#how-to-contribute)\n- [**Changelog**](#changelog)\n\n------------------------------------------------------------------------\n\n## About\n\nAlphaPeptDeep (`peptdeep` for short) aims to easily build new deep\nlearning models for shotgun proteomics studies. Transfer learning is\nalso easy to apply using AlphaPeptDeep.\n\nIt contains some built-in models such as retention time (RT), collision\ncross section (CCS), and tandem mass spectrum (MS2) prediction for given\npeptides. With these models, one can easily generate a predicted library\nfrom fasta files.\n\nFor details, check out our [publications](#citations).\n\nFor documentation, see [readthedocs](https://alphapeptdeep.readthedocs.io/en/latest/).\n\n### AlphaX repositories:\n\n- [**alphabase**](https://github.com/MannLabs/alphabase): Infrastructure for AlphaX Ecosystem\n- [**alphapept**](https://github.com/MannLabs/alphapept): DDA search\n  engine\n- [**alphapeptdeep**](https://github.com/MannLabs/alphapeptdeep): Deep\n  learning for proteomics\n- [**alpharaw**](https://github.com/MannLabs/alpharaw): Raw data\n  accessing\n- [**alphaviz**](https://github.com/MannLabs/alphaviz): MS data and\n  result visualization\n- [**alphatims**](https://github.com/MannLabs/alphatims): timsTOF data\n  accessing\n\n### Subsequent projects of AlphaPeptDeep\n\n- [**peptdeep_hla**](https://github.com/MannLabs/PeptDeep-HLA): the DL model that predict if a peptide is presented by indivudual HLA or not.\n\n### Other pre-trained MS2/RT/CCS models\n\n- [**Dimethyl**](https://github.com/MannLabs/alphapeptdeep/releases/tag/dimethyl-models): the MS2/RT/CCS models for Dimethyl-labeled peptides.\n\n------------------------------------------------------------------------\n\n## Citations\n\nWen-Feng Zeng, Xie-Xuan Zhou, Sander Willems, Constantin Ammar, Maria Wahle, Isabell Bludau, Eugenia Voytik, Maximillian T. Strauss & Matthias Mann. AlphaPeptDeep: a modular deep learning framework to predict peptide properties for proteomics. Nat Commun 13, 7238 (2022). https://doi.org/10.1038/s41467-022-34904-3\n\n\n------------------------------------------------------------------------\n\n## License\n\nAlphaPeptDeep was developed by the [Mann Labs at the Max Planck\nInstitute of Biochemistry](https://www.biochem.mpg.de/mann) and the\n[University of\nCopenhagen](https://www.cpr.ku.dk/research/proteomics/mann/) and is\nfreely available with an [Apache License](LICENSE.txt). External Python\npackages (available in the [requirements](requirements) folder) have\ntheir own licenses, which can be consulted on their respective websites.\n\n------------------------------------------------------------------------\n\n## Installation\n\nAlphaPeptDeep can be installed and used on all major operating systems\n(Windows, macOS and Linux).\n\nThere are three different types of installation possible:\n\n- [**One-click GUI installer:**](#one-click-gui) Choose this\n  installation if you only want the GUI and/or keep things as simple as\n  possible.\n- [**Pip installer:**](#pip) Choose this installation if you want to use peptdeep as a Python package in an existing Python (recommended Python 3.8 or 3.9) environment (e.g.\u00a0a Jupyter notebook). If needed, the GUI and CLI\n  can be installed with pip as well.\n- [**Developer installer:**](#developer) Choose this installation if you\n  are familiar with CLI tools, [conda](https://docs.conda.io/en/latest/)\n  and Python. This installation allows access to all available features\n  of peptdeep and even allows to modify its source code directly.\n  Generally, the developer version of peptdeep outperforms the\n  precompiled versions which makes this the installation of choice for\n  high-throughput experiments.\n\n### One-click GUI\n\nThe GUI of peptdeep is a completely stand-alone tool that requires no\nknowledge of Python or CLI tools. Click on one of the links below to\ndownload the latest release for:\n\n- [**Windows**](https://github.com/MannLabs/alphapeptdeep/releases/latest/download/peptdeep-1.3.0-windows-amd64.exe)\n- [**macOS**](https://github.com/MannLabs/alphapeptdeep/releases/latest/download/peptdeep-1.3.0-macos-darwin-x64.pkg)\n- [**macOS ARM**](https://github.com/MannLabs/alphapeptdeep/releases/latest/download/peptdeep-1.3.0-macos-darwin-arm64.pkg )\n- [**Linux**](https://github.com/MannLabs/alphapeptdeep/releases/latest/download/peptdeep-1.3.0-linux-x64.deb)\n\nOlder releases remain available on the [release\npage](https://github.com/MannLabs/alphapeptdeep/releases), but no\nbackwards compatibility is guaranteed.\n\nNote that, as GitHub does not allow large release files, these installers do not have GPU support.\nTo create GPU version installers: clone the source code, install the GPU-version of pytorch [see here](#use-gpu),\nand then use the `build_installer_*.sh` and `build_package_*.sh`\nscript in the respective `release/[macos, linux, windows]` folder to build the installer locally.\nFor Linux you need to additionally pass the \"GPU\" flag, i.e. run\n```bash\nrelease/linux/build_installer_linux.sh GPU\nrelease/linux/build_package_linux.sh\n```\n\n### Pip\n\n> PythonNET must be installed to access Thermo or Sciex raw data.\n>\n> *Legacy, should be replaced by AlphaRaw in the near future.*\n>\n> #### PythonNET in Windows\n>\n> Automatically installed for Windows.\n>\n> #### PythonNET in Linux\n>\n> 1.  Install Mono from mono-project website [Mono\n>     Linux](https://www.mono-project.com/download/stable/#download-lin).\n>     NOTE, the installed mono version should be at least 6.10, which\n>     requires you to add the ppa to your trusted sources!\n> 2.  Install PythonNET with `pip install pythonnet`.\n>\n> #### PythonNET in MacOS\n>\n> 1.  Install [brew](https://brew.sh) and pkg-config:\n>     `brew install pkg-config` 3. Install Mono from mono-project\n>     website [Mono Mac](https://www.mono-project.com/download/stable/)\n> 2.  Register the Mono-Path to your system: For macOS Catalina, open\n>     the configuration of zsh via the terminal:\n>\n> - Type `nano ~/.zshrc` to open the configuration of the terminal\n> - Append the mono path to your `PKG_CONFIG_PATH`:\n>   `export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/usr/lib/pkgconfig:/Library/Frameworks/Mono.framework/Versions/Current/lib/pkgconfig:$PKG_CONFIG_PATH`.\n> - Save everything and execute `. ~/.zshrc`\n>\n> 3.  Install PythonNET with `pip install pythonnet`.\n\npeptdeep can be installed in an existing Python environment with a\nsingle `bash` command. *This `bash` command can also be run directly\nfrom within a Jupyter notebook by prepending it with a `!`*:\n\n``` bash\npip install peptdeep\n```\n\nInstalling peptdeep like this avoids conflicts when integrating it in\nother tools, as this does not enforce strict versioning of dependancies.\nHowever, if new versions of dependancies are released, they are not\nguaranteed to be fully compatible with peptdeep. This should only occur\nin rare cases where dependencies are not backwards compatible.\n\n> **TODO** You can always force peptdeep to use dependancy versions\n> which are known to be compatible with:\n>\n> ``` bash\n> pip install \"peptdeep[stable]\"\n> ```\n>\n> NOTE: You might need to run `pip install pip` before installing\n> peptdeep like this. Also note the double quotes `\"`.\n\nFor those who are really adventurous, it is also possible to directly\ninstall any branch (e.g.\u00a0`@development`) with any extras\n(e.g.\u00a0`#egg=peptdeep[stable,development-stable]`) from GitHub with e.g.\n\n``` bash\npip install \"git+https://github.com/MannLabs/alphapeptdeep.git@development#egg=peptdeep[stable,development-stable]\"\n```\n\n### Use GPU\n\nTo enable GPU, GPU version of PyTorch is required, it can be installed\nwith:\n\n``` bash\npip install torch --extra-index-url https://download.pytorch.org/whl/cu116 --upgrade\n```\n\nNote that this may depend on your NVIDIA driver version. Run the command\nto check your NVIDIA driver:\n\n``` bash\nnvidia-smi\n```\n\nFor latest pytorch version, see [pytorch.org](https://pytorch.org/get-started/locally/).\n\n### Developer\n\npeptdeep can also be installed in editable (i.e.\u00a0developer) mode with a\nfew `bash` commands. This allows to fully customize the software and\neven modify the source code to your specific needs. When an editable\nPython package is installed, its source code is stored in a transparent\nlocation of your choice. While optional, it is advised to first (create\nand) navigate to e.g.\u00a0a general software folder:\n\n``` bash\nmkdir ~/alphapeptdeep/project/folder\ncd ~/alphapeptdeep/project/folder\n```\n\n***The following commands assume you do not perform any additional `cd`\ncommands anymore***.\n\nNext, download the peptdeep repository from GitHub either directly or\nwith a `git` command. This creates a new peptdeep subfolder in your\ncurrent directory.\n\n``` bash\ngit clone https://github.com/MannLabs/alphapeptdeep.git\n```\n\nFor any Python package, it is highly recommended to use a separate\n[conda virtual environment](https://docs.conda.io/en/latest/), as\notherwise *dependancy conflicts can occur with already existing\npackages*.\n\n``` bash\nconda create --name peptdeep python=3.9 -y\nconda activate peptdeep\n```\n\nFinally, peptdeep and all its [dependancies](requirements) need to be\ninstalled. To take advantage of all features and allow development (with\nthe `-e` flag), this is best done by also installing the [development\ndependencies](requirements/requirements_development.txt) instead of only\nthe [core dependencies](requirements/requirements.txt):\n\n``` bash\npip install -e \".[development]\"\n```\n\nBy default this installs loose dependancies (no explicit versioning),\nalthough it is also possible to use stable dependencies\n(e.g.\u00a0`pip install -e \".[stable,development-stable]\"`).\n\n***By using the editable flag `-e`, all modifications to the [peptdeep\nsource code folder](peptdeep) are directly reflected when running\npeptdeep. Note that the peptdeep folder cannot be moved and/or renamed\nif an editable version is installed. In case of confusion, you can\nalways retrieve the location of any Python module with e.g.\u00a0the command\n`import module` followed by `module.__file__`.***\n\n------------------------------------------------------------------------\n\n## Usage\n\nThere are three ways to use peptdeep:\n\n- [**GUI**](#gui)\n- [**CLI**](#cli)\n- [**Python**](#python-and-jupyter-notebooks)\n\nNOTE: The first time you use a fresh installation of peptdeep, it is\noften quite slow because some functions might still need compilation on\nyour local operating system and architecture. Subsequent use should be a\nlot faster.\n\n### GUI\n\nIf the GUI was not installed through a one-click GUI installer, it can\nbe launched with the following `bash` command:\n\n``` bash\npeptdeep gui\n```\n\nThis command will start a web server and automatically open the default\nbrowser:\n![](https://user-images.githubusercontent.com/4646029/189301730-ac1f92cc-0e9d-4ba3-be1d-07c4d66032cd.jpg)\n\nThere are several options in the GUI (left panel):\n\n- Server: Start/stop the task server, check tasks in the task queue\n- Settings: Configure common settings, load/save current settings\n- Model: Configure DL models for prediction or transfer learning\n- Transfer: Refine the models\n- Library: Predict a library\n- Rescore: Perform ML feature extraction and Percolator\n\n------------------------------------------------------------------------\n\n### CLI\n\nThe CLI can be run with the following command (after activating the\n`conda` environment with `conda activate peptdeep` or if an alias was\nset to the peptdeep executable):\n\n``` bash\npeptdeep -h\n```\n\nIt is possible to get help about each function and their (required)\nparameters by using the `-h` flag. AlphaPeptDeep provides several\ncommands for different tasks:\n\n- [**export-settings**](#export-settings)\n- [**cmd-flow**](#cmd-flow)\n- [**library**](#library)\n- [**transfer**](#transfer)\n- [**rescore**](#rescore)\n- [**install-models**](#install-models)\n- [**gui**](#gui)\n\nRun a command to check usages:\n\n``` bash\npeptdeep $command -h\n```\n\nFor example:\n\n``` bash\npeptdeep library -h\n```\n\n#### export-settings\n\n``` bash\npeptdeep export-settings C:/path/to/settings.yaml\n```\n\nThis command will export the default settings into the `settings.yaml`\nas a template, users can edit the yaml file to run other commands.\n\nHere is a section of the yaml file which controls global parameters for\ndifferent tasks:\n\n```\nmodel_url: \"https://github.com/MannLabs/alphapeptdeep/releases/download/pre-trained-models/pretrained_models.zip\"\n\ntask_type: library\ntask_type_choices:\n  - library\n  - train\n  - rescore\nthread_num: 8\ntorch_device:\n  device_type: gpu\n  device_type_choices:\n    - gpu\n    - mps\n    - cpu\n  device_ids: []\n\nlog_level: info\nlog_level_choices:\n  - debug\n  - info\n  - warning\n  - error\n  - critical\n\ncommon:\n  modloss_importance_level: 1.0\n  user_defined_modifications: {}\n  # For example,\n  # user_defined_modifications:\n  #   \"Dimethyl2@Any_N-term\":\n  #     composition: \"H(2)2H(2)C(2)\"\n  #     modloss_composition: \"H(0)\" # can be without if no modloss\n  #   \"Dimethyl2@K\":\n  #     composition: \"H(2)2H(2)C(2)\"\n  #   \"Dimethyl6@Any_N-term\":\n  #     composition: \"2H(4)13C(2)\"\n  #   \"Dimethyl6@K\":\n  #     composition: \"2H(4)13C(2)\"\n\npeak_matching:\n  ms2_ppm: True\n  ms2_tol_value: 20.0\n  ms1_ppm: True\n  ms1_tol_value: 20.0\n\nmodel_mgr:\n  default_nce: 30.0\n  default_instrument: Lumos\n  mask_modloss: True\n  model_type: generic\n  model_choices:\n  - generic\n  - phos\n  - hla # same as generic\n  - digly\n  external_ms2_model: ''\n  external_rt_model: ''\n  external_ccs_model: ''\n  instrument_group:\n    ThermoTOF: ThermoTOF\n    Astral: ThermoTOF\n    Lumos: Lumos\n    QE: QE\n    timsTOF: timsTOF\n    SciexTOF: SciexTOF\n    Fusion: Lumos\n    Eclipse: Lumos\n    Velos: Lumos # not important\n    Elite: Lumos # not important\n    OrbitrapTribrid: Lumos\n    ThermoTribrid: Lumos\n    QE+: QE\n    QEHF: QE\n    QEHFX: QE\n    Exploris: QE\n    Exploris480: QE\n  predict:\n    batch_size_ms2: 512\n    batch_size_rt_ccs: 1024\n    verbose: True\n    multiprocessing: True\n```\n\nThe `model_mgr` section in the yaml defines the common settings for\nMS2/RT/CCS prediction.\n\n------------------------------------------------------------------------\n\n### cmd-flow\n\n``` bash\npeptdeep cmd-flow ...\n```\n\nSupport CLI parameters to control `global_settings` for CLI users. It supports three workflows: `train`, `library` or `train library`, controlled by CLI parameter `--task_workflow`, for example, `--task_workflow train library`. All settings in [global_settings](peptdeep/constants/default_settings.yaml) are converted to CLI parameters using `--` as the dict level indicator, for example, `global_settings[\"library\"][\"var_mods\"]` corresponds to `--library--var_mods`. See [test_cmd_flow.sh](tests/test_cmd_flow.sh) for example.\n\nThere are three kinds of parameter types:\n  1. value type (int, float, bool, str): The CLI parameter only has a single value, for instance: `--model_mgr--default_instrument 30.0`.\n  2. list type (list): The CLI parameter has a list of values seperated by a space, for instance `--library--var_mods \"Oxidation@M\" \"Acetyl@Protein_N-term\"`.\n  3. dict type (dict): Only three parameters are `dict type`, `--library--labeling_channels`, `--model_mgr--transfer--psm_modification_mapping`, and `--common--user_defined_modifications`. Here are the examples:\n    - `--library--labeling_channels`: labeling channels for the library. Example: `--library--labeling_channels \"0:Dimethyl@Any_N-term;Dimethyl@K\" \"4:xx@Any_N-term;xx@K\"`\n    - `--model_mgr--transfer--psm_modification_mapping`: converting other search engines' modification names to alphabase modifications for transfer learning. Example: `--model_mgr--transfer--psm_modification_mapping \"Dimethyl@Any_N-term:_(Dimethyl-n-0);_(Dimethyl)\" \"Dimethyl@K:K(Dimethyl-K-0);K(Dimethyl)\"`. Note that `X(UniMod:id)` format can directly be recognized by alphabase.\n    - `--common--user_defined_modification`: user defined modifications. Example:`--common--user_defined_modification \"NewMod1@Any_N-term:H(2)2H(2)C(2)\" \"NewMod2@K:H(100)O(2)C(2)\"`\n\n#### library\n\n``` bash\npeptdeep library settings_yaml\n```\n\nThis command will predict a spectral library for given settings_yaml\nfile (exported by [export-settings](#export-settings)). All the\nessential settings are in the `library` section in the settings_yaml\nfile:\n\n```\nlibrary:\n  infile_type: fasta\n  infile_type_choices:\n  - fasta\n  - sequence_table\n  - peptide_table # sequence with mods and mod_sites\n  - precursor_table # peptide with charge state\n  infiles:\n  - xxx.fasta\n  fasta:\n    protease: 'trypsin'\n    protease_choices:\n    - 'trypsin'\n    - '([KR])'\n    - 'trypsin_not_P'\n    - '([KR](?=[^P]))'\n    - 'lys-c'\n    - 'K'\n    - 'lys-n'\n    - '\\w(?=K)'\n    - 'chymotrypsin'\n    - 'asp-n'\n    - 'glu-c'\n    max_miss_cleave: 2\n    add_contaminants: False\n  fix_mods:\n  - Carbamidomethyl@C\n  var_mods:\n  - Acetyl@Protein_N-term\n  - Oxidation@M\n  special_mods: [] # normally for Phospho or GlyGly@K\n  special_mods_cannot_modify_pep_n_term: False\n  special_mods_cannot_modify_pep_c_term: False\n  labeling_channels: {}\n  # For example,\n  # labeling_channels:\n  #   0: ['Dimethyl@Any_N-term','Dimethyl@K']\n  #   4: ['Dimethyl:2H(2)@Any_N-term','Dimethyl:2H(2)@K']\n  #   8: [...]\n  min_var_mod_num: 0\n  max_var_mod_num: 2\n  min_special_mod_num: 0\n  max_special_mod_num: 1\n  min_precursor_charge: 2\n  max_precursor_charge: 4\n  min_peptide_len: 7\n  max_peptide_len: 35\n  min_precursor_mz: 200.0\n  max_precursor_mz: 2000.0\n  decoy: pseudo_reverse\n  decoy_choices:\n  - pseudo_reverse\n  - diann\n  - None\n  max_frag_charge: 2\n  frag_types:\n  - b\n  - y\n  rt_to_irt: True\n  generate_precursor_isotope: False\n  output_folder: \"{PEPTDEEP_HOME}/spec_libs\"\n  output_tsv:\n    enabled: False\n    min_fragment_mz: 200\n    max_fragment_mz: 2000\n    min_relative_intensity: 0.001\n    keep_higest_k_peaks: 12\n    translate_batch_size: 1000000\n    translate_mod_to_unimod_id: False\n```\n\npeptdeep will load sequence data based on `library:infile_type`\nand `library:infiles` for library prediction.\n`library:infiles` contains the list of files with\n`library:infile_type` defined in\n`library:infile_type_choices`:\n\n- fasta: Protein fasta files, peptdeep will digest the protein sequences\n  into peptide sequences.\n- [sequence_table](#sequence_table): Tab/comma-delimited txt/tsv/csv\n  (text) files which contain the column `sequence` for peptide\n  sequences.\n- [peptide_table](#peptide_table): Tab/comma-delimited txt/tsv/csv\n  (text) files which contain the columns `sequence`, `mods`, and\n  `mod_sites`. peptdeep will not add modifications for peptides of this\n  file type.\n- [precursor_table](#precursor_table): Tab/comma-delimited txt/tsv/csv\n  (text) files which contain the columns `sequence`, `mods`,\n  `mod_sites`, and `charge`. peptdeep will not add modifications and\n  charge states for peptides of this file type.\n\nSee examples:\n\n``` python\nimport pandas as pd\ndf = pd.DataFrame({\n    'sequence': ['ACDEFGHIK','LMNPQRSTVK','WYVSTR'],\n    'mods': ['Carbamidomethyl@C','Acetyl@Protein_N-term;Phospho@S',''],\n    'mod_sites': ['2','0;7',''],\n    'charge': [2,3,1],\n})\n```\n\n##### sequence_table\n\n``` python\ndf[['sequence']]\n```\n\n|  | sequence |\n| --- | --- |\n| 0 | ACDEFGHIK |\n| 1 | LMNPQRSTVK |\n| 2 | WYVSTR |\n\n\n##### peptide_table\n\n``` python\ndf[['sequence','mods','mod_sites']]\n```\n\n|  | sequence | mods | mod_sites |\n| --- | --- | --- | --- |\n| 0 | ACDEFGHIK | Carbamidomethyl@C | 2 |\n| 1 | LMNPQRSTVK | Acetyl@Protein_N-term;Phospho@S | 0;7 |\n| 2 | WYVSTR | | |\n\n##### precursor_table\n\n``` python\ndf\n```\n\n|  | sequence | mods | mod_sites | charge |\n| --- | --- | --- | --- | --- |\n| 0 | ACDEFGHIK | Carbamidomethyl@C | 2 | 2 |\n| 1 | LMNPQRSTVK | Acetyl@Protein_N-term;Phospho@S | 0;7 | 3 |\n| 2 | WYVSTR | | | 1 |\n\n> Columns of `proteins` and `genes` are optional for these txt/tsv/csv\n> files.\n\npeptdeep supports multiple files for library prediction, for example (in\nthe yaml file):\n\n```\nlibrary:\n  ...\n  infile_type: fasta\n  infiles:\n  - /path/to/fasta/human.fasta\n  - /path/to/fasta/yeast.fasta\n  ...\n```\n\nThe library in HDF5 (.hdf) format will be saved into\n`library:output_folder`. If `library:output_tsv:enabled` is True, a TSV\nspectral library that can be processed by DIA-NN and Spectronaut will\nalso be saved into `library:output_folder`.\n\n------------------------------------------------------------------------\n\n#### transfer\n\n``` bash\npeptdeep transfer settings_yaml\n```\n\nThis command will apply transfer learning to refine RT/CCS/MS2 models\nbased on `model_mgr:transfer:psm_files` and\n`model_mgr:transfer:psm_type`. All yaml settings (exported by\n[export-settings](#export-settings)) related to this command are:\n\n```\nmodel_mgr:\n  transfer:\n    model_output_folder: \"{PEPTDEEP_HOME}/refined_models\"\n    epoch_ms2: 20\n    warmup_epoch_ms2: 10\n    batch_size_ms2: 512\n    lr_ms2: 0.0001\n    epoch_rt_ccs: 40\n    warmup_epoch_rt_ccs: 10\n    batch_size_rt_ccs: 1024\n    lr_rt_ccs: 0.0001\n    verbose: False\n    grid_nce_search: False\n    grid_nce_first: 15.0\n    grid_nce_last: 45.0\n    grid_nce_step: 3.0\n    grid_instrument: ['Lumos']\n    psm_type: alphapept\n    psm_type_choices:\n      - alphapept\n      - pfind\n      - maxquant\n      - diann\n      - speclib_tsv\n    psm_files: []\n    ms_file_type: alphapept_hdf\n    ms_file_type_choices:\n      - alphapept_hdf\n      - thermo_raw\n      - mgf\n      - mzml\n    ms_files: []\n    psm_num_to_train_ms2: 100000000\n    psm_num_per_mod_to_train_ms2: 50\n    psm_num_to_test_ms2: 0\n    psm_num_to_train_rt_ccs: 100000000\n    psm_num_per_mod_to_train_rt_ccs: 50\n    psm_num_to_test_rt_ccs: 0\n    top_n_mods_to_train: 10\n    psm_modification_mapping: {}\n    # alphabase modification to modifications of other search engines\n    # For example,\n    # psm_modification_mapping:\n    #   Dimethyl@Any_N-term:\n    #     - _(Dimethyl-n-0)\n    #     - _(Dimethyl)\n    #   Dimethyl:2H(2)@K:\n    #     - K(Dimethyl-K-2)\n    #   ...\n```\nFor DDA data, peptdeep can also extract MS2 intensities from the\nspectrum files from `model_mgr:transfer:ms_files` and\n`model_mgr:transfer:ms_file_type` for all PSMs. This will enable the\ntransfer learning of the MS2 model.\n\nFor DIA data, only RT and CCS (if timsTOF) models will be refined.\n\nFor example of the settings yaml:\n\n```\nmodel_mgr:\n  transfer:\n    ...\n    psm_type: pfind\n    psm_files:\n    - /path/to/pFind.spectra\n    - /path/to/other/pFind.spectra\n\n    ms_file_type: thermo_raw\n    ms_files:\n    - /path/to/raw1.raw\n    - /path/to/raw2.raw\n    ...\n```\n\nThe refined models will be saved in\n`model_mgr:transfer:model_output_folder`. After transfer learning, users\ncan apply the new models by replacing `model_mgr:external_ms2_model`,\n`model_mgr:external_rt_model` and `model_mgr:external_ccs_model` with\nthe saved `ms2.pth`, `rt.pth` and `ccs.pth` in\n`model_mgr:transfer:model_output_folder`. This is useful to perform\nsample-specific library prediction.\n\n------------------------------------------------------------------------\n\n#### rescore\n\nThis command will apply Percolator to rescore DDA PSMs in\n`percolator:input_files:psm_files` and\n`percolator:input_files:psm_type`. All yaml settings (exported by\n[export-settings](#export-settings)) related to this command are:\n\n```\npercolator:\n  require_model_tuning: True\n  raw_num_to_tune: 8\n\n  require_raw_specific_tuning: True\n  raw_specific_ms2_tuning: False\n  psm_num_per_raw_to_tune: 200\n  epoch_per_raw_to_tune: 5\n\n  multiprocessing: True\n\n  top_k_frags_to_calc_spc: 10\n  calibrate_frag_mass_error: False\n  max_perc_train_sample: 1000000\n  min_perc_train_sample: 100\n\n  percolator_backend: sklearn\n  percolator_backend_choices:\n    - sklearn\n    - pytorch\n  percolator_model: linear\n  percolator_model_choices:\n    pytorch_as_backend:\n      - linear # not fully tested, performance may be unstable\n      - mlp # not implemented yet\n    sklearn_as_backend:\n      - linear # logistic regression\n      - random_forest\n  lr_percolator_torch_model: 0.1 # learning rate, only used when percolator_backend==pytorch\n  percolator_iter_num: 5 # percolator iteration number\n  cv_fold: 1\n  fdr: 0.01\n  fdr_level: psm\n  fdr_level_choices:\n    - psm\n    - precursor\n    - peptide\n    - sequence\n  use_fdr_for_each_raw: False\n  frag_types: ['b_z1','b_z2','y_z1','y_z2']\n  input_files:\n    psm_type: alphapept\n    psm_type_choices:\n      - alphapept\n      - pfind\n    psm_files: []\n    ms_file_type: alphapept_hdf\n    ms_file_type_choices:\n      - alphapept_hdf\n      - thermo_raw # if alpharaw is installed\n      - mgf\n      - mzml\n    ms_files: []\n    other_score_column_mapping:\n      alphapept: {}\n      pfind:\n        raw_score: Raw_Score\n      msfragger:\n        hyperscore: hyperscore\n        nextscore: nextscore\n      maxquant: {}\n  output_folder: \"{PEPTDEEP_HOME}/rescore\"\n```\n\nTransfer learning will be applied when rescoring if `percolator:require_model_tuning`\nis True.\n\nThe corresponding MS files (`percolator:input_files:ms_files` and\n`percolator:input_files:ms_file_type`) must be provided to extract\nexperimental fragment intensities.\n\n------------------------------------------------------------------------\n\n#### install-models\n\n``` bash\npeptdeep install-models [--model-file url_or_local_model_zip] --overwrite True\n```\n\nRunning peptdeep for the first time, it will download and install models\nfrom [models on github](https://github.com/MannLabs/alphapeptdeep/releases/download/pre-trained-models/pretrained_models.zip)\ndefined in \u2018model_url\u2019 in the default yaml settings. This command will\nupdate `pretrained_models.zip` from `--model-file url_or_local_model_zip`.\n\nIt is also possible to use other models instead of the pretrained_models by providing `model_mgr:external_ms2_model`,\n`model_mgr:external_rt_model` and `model_mgr:external_ccs_model`.\n\n------------------------------------------------------------------------\n\n### Python and Jupyter notebooks\n\nUsing peptdeep from Python script or notebook provides the most flexible\nway to access all features in peptdeep.\n\nWe will introduce several usages of peptdeep via Python notebook:\n\n- [**global_settings**](#global_settings)\n- [**Pipeline APIs**](#pipeline-apis)\n- [**ModelManager**](#modelmanager)\n- [**Library Prediction**](#library-prediction)\n- [**DDA Rescoring**](#dda-rescoring)\n- [**HLA Peptide Prediction**](#hla-peptide-prediction)\n\n------------------------------------------------------------------------\n\n#### global_settings\n\nMost of the default parameters and attributes peptdeep functions and\nclasses are controlled by `peptdeep.settings.global_settings` which is a\n`dict`.\n\n``` python\nfrom peptdeep.settings import global_settings\n```\n\nThe default values of `global_settings` is defined in\n[default_settings.yaml](https://github.com/MannLabs/alphapeptdeep/blob/main/peptdeep/constants/default_settings.yaml).\n\n#### Pipeline APIs\n\nPipeline APIs provides the same functionalities with [CLI](#cli),\nincluding [library prediction](#library), [transfer\nlearning](#transfer), and [rescoring](#rescore).\n\n``` python\nfrom peptdeep.pipeline_api import (\n    generate_library,\n    transfer_learn,\n    rescore,\n)\n```\n\nAll these functionalities take a `settings_dict` as the inputs, the dict\nstructure is the same as the settings yaml file. See the documatation of `generate_library`, `transfer_learn`, `rescore` in https://alphapeptdeep.readthedocs.io/en/latest/module_pipeline_api.html.\n\n#### ModelManager\n\n``` python\nfrom peptdeep.pretrained_models import ModelManager\n```\n\n[`ModelManager`](https://alphapeptdeep.readthedocs.io/en/latest/module_pretrained_models.html#peptdeep.pretrained_models.ModelManager) class is the main entry to access MS2/RT/CCS models. It provides functionalities to train/refine the models and then use the new models to predict the data.\n\nCheck [tutorial_model_manager.ipynb](https://github.com/MannLabs/alphapeptdeep/blob/main/nbs/docs/tutorial_model_manager.ipynb) for details.\n\n#### Library Prediction\n\n``` python\nfrom peptdeep.protein.fasta import PredictSpecLibFasta\n```\n\n[`PredictSpecLibFasta`](https://alphapeptdeep.readthedocs.io/en/latest/protein/fasta.html#peptdeep.protein.fasta.PredictSpecLibFasta) class provides functionalities to deal with fasta files or protein\nsequences and spectral libraries.\n\nCheck out\n[tutorial_speclib_from_fasta.ipynb](https://github.com/MannLabs/alphapeptdeep/blob/main/docs/nbs/tutorial_speclib_from_fasta.ipynb)\nfor details.\n\n#### DDA Rescoring\n\n``` python\nfrom peptdeep.rescore.percolator import Percolator\n```\n\n`Percolator` class provides functionalities to rescore DDA PSMs search by `pFind` and\n`AlphaPept`, (and `MaxQuant` if output FDR=100%), \u2026\n\nCheck out [test_percolator.ipynb](https://github.com/MannLabs/alphapeptdeep/blob/main/nbs_tests/test_percolator.ipynb)\nfor details.\n\n#### HLA Peptide Prediction\n\n``` python\nfrom peptdeep.model.model_interface import ModelInterface\nimport peptdeep.model.generic_property_prediction # model shop\n```\n\nBuilding new DL models for peptide property prediction is one of the key features of AlphaPeptDeep. The key functionalities are [`ModelInterface`](https://alphapeptdeep.readthedocs.io/en/latest/model/model_interface.html#peptdeep.model.model_interface.ModelInterface) and the pre-designed models and model interfaces in the model shop (module [`peptdeep.model.generic_property_prediction`](https://alphapeptdeep.readthedocs.io/en/latest/model/generic_property_prediction.html)).\n\nFor example, we can built a HLA classifier that distinguishes HLA peptides from non-HLA peptides, see https://github.com/MannLabs/PeptDeep-HLA for details.\n\n------------------------------------------------------------------------\n\n## Troubleshooting\n\nIn case of issues, check out the following:\n\n- [Issues](https://github.com/MannLabs/alphapeptdeep/issues). Try a few\n  different search terms to find out if a similar problem has been\n  encountered before.\n\n- [Discussions](https://github.com/MannLabs/alphapeptdeep/discussions).\n  Check if your problem or feature requests has been discussed before.\n\n------------------------------------------------------------------------\n\n## How to contribute\n\nIf you like this software, you can give us a\n[star](https://github.com/MannLabs/alphapeptdeep/stargazers) to boost\nour visibility! All direct contributions are also welcome. Feel free to\npost a new [issue](https://github.com/MannLabs/alphapeptdeep/issues) or\nclone the repository and create a [pull\nrequest](https://github.com/MannLabs/alphapeptdeep/pulls) with a new\nbranch. For an even more interactive participation, check out the\n[discussions](https://github.com/MannLabs/alphapeptdeep/discussions) and\nthe [Contributors License Agreement](misc/CLA.md).\n\n### Notes for developers\n\n#### Tagging of changes\nIn order to have release notes automatically generated, changes need to be tagged with labels.\nThe following labels are used (should be safe-explanatory):\n`breaking-change`, `bug`, `enhancement`.\n\n#### Release a new version\nThis package uses a shared release process defined in the\n[alphashared](https://github.com/MannLabs/alphashared) repository. Please see the instructions\n[there](https://github.com/MannLabs/alphashared/blob/reusable-release-workflow/.github/workflows/README.md#release-a-new-version).\n\n#### pre-commit hooks\nIt is highly recommended to use the provided pre-commit hooks, as the CI pipeline enforces all checks therein to\npass in order to merge a branch.\n\nThe hooks need to be installed once by\n```bash\npre-commit install\n```\nYou can run the checks yourself using:\n```bash\npre-commit run --all-files\n```\n------------------------------------------------------------------------\n\n## Changelog\n\nSee the [HISTORY.md](HISTORY.md) for a full overview of the changes made\nin each version.\n"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "PythonNET in MacOS",
        "parent_header": [
          "AlphaPeptDeep (PeptDeep)",
          "Installation",
          "Pip"
        ],
        "type": "Text_excerpt",
        "value": "# AlphaPeptDeep (PeptDeep)\n\n[![Default installation and tests](https://github.com/MannLabs/alphapeptdeep/actions/workflows/pip_installation.yml/badge.svg)](https://github.com/MannLabs/alphapeptdeep/actions/workflows/pip_installation.yml)\n[![Publish on PyPi and release on GitHub](https://github.com/MannLabs/alphapeptdeep/actions/workflows/publish_and_release.yml/badge.svg)](https://github.com/MannLabs/alphapeptdeep/actions/workflows/publish_and_release.yml)\n[![Documentation Status](https://readthedocs.org/projects/alphapeptdeep/badge/?version=latest)](https://alphapeptdeep.readthedocs.io/en/latest/?badge=latest)\n[![pypi](https://img.shields.io/pypi/v/peptdeep)](https://pypi.org/project/peptdeep)\n[![GitHub release](https://img.shields.io/github/v/release/mannlabs/alphapeptdeep?display_name=tag)](https://github.com/MannLabs/alphapeptdeep/releases)\n[![GitHub downloads](https://img.shields.io/github/downloads/mannlabs/alphapeptdeep/total?label=github%20downloads)](https://github.com/MannLabs/alphapeptdeep/releases)\n[![Downloads@pre-train-models](https://img.shields.io/github/downloads/mannlabs/alphapeptdeep/pre-trained-models/total)](https://github.com/MannLabs/alphapeptdeep/releases/tag/pre-trained-models)\n[![pip downloads](https://img.shields.io/pypi/dm/peptdeep?color=blue&label=pip%20downloads)](https://pypi.org/project/peptdeep)\n![Python](https://img.shields.io/pypi/pyversions/peptdeep)\n\n- [**About**](#about)\n- [**License**](#license)\n- [**Installation**](#installation)\n  - [**One-click GUI**](#one-click-gui)\n  - [**Pip installer**](#pip)\n  - [**Use GPU**](#use-gpu)\n  - [**Developer installer**](#developer)\n- [**Usage**](#usage)\n  - [**GUI**](#gui)\n  - [**CLI**](#cli)\n  - [**Python and jupyter notebooks**](#python-and-jupyter-notebooks)\n- [**Troubleshooting**](#troubleshooting)\n- [**Citations**](#citations)\n- [**How to contribute**](#how-to-contribute)\n- [**Changelog**](#changelog)\n\n------------------------------------------------------------------------\n\n## About\n\nAlphaPeptDeep (`peptdeep` for short) aims to easily build new deep\nlearning models for shotgun proteomics studies. Transfer learning is\nalso easy to apply using AlphaPeptDeep.\n\nIt contains some built-in models such as retention time (RT), collision\ncross section (CCS), and tandem mass spectrum (MS2) prediction for given\npeptides. With these models, one can easily generate a predicted library\nfrom fasta files.\n\nFor details, check out our [publications](#citations).\n\nFor documentation, see [readthedocs](https://alphapeptdeep.readthedocs.io/en/latest/).\n\n### AlphaX repositories:\n\n- [**alphabase**](https://github.com/MannLabs/alphabase): Infrastructure for AlphaX Ecosystem\n- [**alphapept**](https://github.com/MannLabs/alphapept): DDA search\n  engine\n- [**alphapeptdeep**](https://github.com/MannLabs/alphapeptdeep): Deep\n  learning for proteomics\n- [**alpharaw**](https://github.com/MannLabs/alpharaw): Raw data\n  accessing\n- [**alphaviz**](https://github.com/MannLabs/alphaviz): MS data and\n  result visualization\n- [**alphatims**](https://github.com/MannLabs/alphatims): timsTOF data\n  accessing\n\n### Subsequent projects of AlphaPeptDeep\n\n- [**peptdeep_hla**](https://github.com/MannLabs/PeptDeep-HLA): the DL model that predict if a peptide is presented by indivudual HLA or not.\n\n### Other pre-trained MS2/RT/CCS models\n\n- [**Dimethyl**](https://github.com/MannLabs/alphapeptdeep/releases/tag/dimethyl-models): the MS2/RT/CCS models for Dimethyl-labeled peptides.\n\n------------------------------------------------------------------------\n\n## Citations\n\nWen-Feng Zeng, Xie-Xuan Zhou, Sander Willems, Constantin Ammar, Maria Wahle, Isabell Bludau, Eugenia Voytik, Maximillian T. Strauss & Matthias Mann. AlphaPeptDeep: a modular deep learning framework to predict peptide properties for proteomics. Nat Commun 13, 7238 (2022). https://doi.org/10.1038/s41467-022-34904-3\n\n\n------------------------------------------------------------------------\n\n## License\n\nAlphaPeptDeep was developed by the [Mann Labs at the Max Planck\nInstitute of Biochemistry](https://www.biochem.mpg.de/mann) and the\n[University of\nCopenhagen](https://www.cpr.ku.dk/research/proteomics/mann/) and is\nfreely available with an [Apache License](LICENSE.txt). External Python\npackages (available in the [requirements](requirements) folder) have\ntheir own licenses, which can be consulted on their respective websites.\n\n------------------------------------------------------------------------\n\n## Installation\n\nAlphaPeptDeep can be installed and used on all major operating systems\n(Windows, macOS and Linux).\n\nThere are three different types of installation possible:\n\n- [**One-click GUI installer:**](#one-click-gui) Choose this\n  installation if you only want the GUI and/or keep things as simple as\n  possible.\n- [**Pip installer:**](#pip) Choose this installation if you want to use peptdeep as a Python package in an existing Python (recommended Python 3.8 or 3.9) environment (e.g.\u00a0a Jupyter notebook). If needed, the GUI and CLI\n  can be installed with pip as well.\n- [**Developer installer:**](#developer) Choose this installation if you\n  are familiar with CLI tools, [conda](https://docs.conda.io/en/latest/)\n  and Python. This installation allows access to all available features\n  of peptdeep and even allows to modify its source code directly.\n  Generally, the developer version of peptdeep outperforms the\n  precompiled versions which makes this the installation of choice for\n  high-throughput experiments.\n\n### One-click GUI\n\nThe GUI of peptdeep is a completely stand-alone tool that requires no\nknowledge of Python or CLI tools. Click on one of the links below to\ndownload the latest release for:\n\n- [**Windows**](https://github.com/MannLabs/alphapeptdeep/releases/latest/download/peptdeep-1.3.0-windows-amd64.exe)\n- [**macOS**](https://github.com/MannLabs/alphapeptdeep/releases/latest/download/peptdeep-1.3.0-macos-darwin-x64.pkg)\n- [**macOS ARM**](https://github.com/MannLabs/alphapeptdeep/releases/latest/download/peptdeep-1.3.0-macos-darwin-arm64.pkg )\n- [**Linux**](https://github.com/MannLabs/alphapeptdeep/releases/latest/download/peptdeep-1.3.0-linux-x64.deb)\n\nOlder releases remain available on the [release\npage](https://github.com/MannLabs/alphapeptdeep/releases), but no\nbackwards compatibility is guaranteed.\n\nNote that, as GitHub does not allow large release files, these installers do not have GPU support.\nTo create GPU version installers: clone the source code, install the GPU-version of pytorch [see here](#use-gpu),\nand then use the `build_installer_*.sh` and `build_package_*.sh`\nscript in the respective `release/[macos, linux, windows]` folder to build the installer locally.\nFor Linux you need to additionally pass the \"GPU\" flag, i.e. run\n```bash\nrelease/linux/build_installer_linux.sh GPU\nrelease/linux/build_package_linux.sh\n```\n\n### Pip\n\n> PythonNET must be installed to access Thermo or Sciex raw data.\n>\n> *Legacy, should be replaced by AlphaRaw in the near future.*\n>\n> #### PythonNET in Windows\n>\n> Automatically installed for Windows.\n>\n> #### PythonNET in Linux\n>\n> 1.  Install Mono from mono-project website [Mono\n>     Linux](https://www.mono-project.com/download/stable/#download-lin).\n>     NOTE, the installed mono version should be at least 6.10, which\n>     requires you to add the ppa to your trusted sources!\n> 2.  Install PythonNET with `pip install pythonnet`.\n>\n> #### PythonNET in MacOS\n>\n> 1.  Install [brew](https://brew.sh) and pkg-config:\n>     `brew install pkg-config` 3. Install Mono from mono-project\n>     website [Mono Mac](https://www.mono-project.com/download/stable/)\n> 2.  Register the Mono-Path to your system: For macOS Catalina, open\n>     the configuration of zsh via the terminal:\n>\n> - Type `nano ~/.zshrc` to open the configuration of the terminal\n> - Append the mono path to your `PKG_CONFIG_PATH`:\n>   `export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/usr/lib/pkgconfig:/Library/Frameworks/Mono.framework/Versions/Current/lib/pkgconfig:$PKG_CONFIG_PATH`.\n> - Save everything and execute `. ~/.zshrc`\n>\n> 3.  Install PythonNET with `pip install pythonnet`.\n\npeptdeep can be installed in an existing Python environment with a\nsingle `bash` command. *This `bash` command can also be run directly\nfrom within a Jupyter notebook by prepending it with a `!`*:\n\n``` bash\npip install peptdeep\n```\n\nInstalling peptdeep like this avoids conflicts when integrating it in\nother tools, as this does not enforce strict versioning of dependancies.\nHowever, if new versions of dependancies are released, they are not\nguaranteed to be fully compatible with peptdeep. This should only occur\nin rare cases where dependencies are not backwards compatible.\n\n> **TODO** You can always force peptdeep to use dependancy versions\n> which are known to be compatible with:\n>\n> ``` bash\n> pip install \"peptdeep[stable]\"\n> ```\n>\n> NOTE: You might need to run `pip install pip` before installing\n> peptdeep like this. Also note the double quotes `\"`.\n\nFor those who are really adventurous, it is also possible to directly\ninstall any branch (e.g.\u00a0`@development`) with any extras\n(e.g.\u00a0`#egg=peptdeep[stable,development-stable]`) from GitHub with e.g.\n\n``` bash\npip install \"git+https://github.com/MannLabs/alphapeptdeep.git@development#egg=peptdeep[stable,development-stable]\"\n```\n"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Developer",
        "parent_header": [
          "AlphaPeptDeep (PeptDeep)",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "peptdeep can also be installed in editable (i.e.\u00a0developer) mode with a\nfew `bash` commands. This allows to fully customize the software and\neven modify the source code to your specific needs. When an editable\nPython package is installed, its source code is stored in a transparent\nlocation of your choice. While optional, it is advised to first (create\nand) navigate to e.g.\u00a0a general software folder:\n\n``` bash\nmkdir ~/alphapeptdeep/project/folder\ncd ~/alphapeptdeep/project/folder\n```\n\n***The following commands assume you do not perform any additional `cd`\ncommands anymore***.\n\nNext, download the peptdeep repository from GitHub either directly or\nwith a `git` command. This creates a new peptdeep subfolder in your\ncurrent directory.\n\n``` bash\ngit clone https://github.com/MannLabs/alphapeptdeep.git\n```\n\nFor any Python package, it is highly recommended to use a separate\n[conda virtual environment](https://docs.conda.io/en/latest/), as\notherwise *dependancy conflicts can occur with already existing\npackages*.\n\n``` bash\nconda create --name peptdeep python=3.9 -y\nconda activate peptdeep\n```\n\nFinally, peptdeep and all its [dependancies](requirements) need to be\ninstalled. To take advantage of all features and allow development (with\nthe `-e` flag), this is best done by also installing the [development\ndependencies](requirements/requirements_development.txt) instead of only\nthe [core dependencies](requirements/requirements.txt):\n\n``` bash\npip install -e \".[development]\"\n```\n\nBy default this installs loose dependancies (no explicit versioning),\nalthough it is also possible to use stable dependencies\n(e.g.\u00a0`pip install -e \".[stable,development-stable]\"`).\n\n***By using the editable flag `-e`, all modifications to the [peptdeep\nsource code folder](peptdeep) are directly reflected when running\npeptdeep. Note that the peptdeep folder cannot be moved and/or renamed\nif an editable version is installed. In case of confusion, you can\nalways retrieve the location of any Python module with e.g.\u00a0the command\n`import module` followed by `module.__file__`.***\n\n------------------------------------------------------------------------\n"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.8053259335040152,
      "result": {
        "original_header": "About",
        "type": "Text_excerpt",
        "value": "For documentation, see [readthedocs](https://alphapeptdeep.readthedocs.io/en/latest/).\n \n"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8066306763872777,
      "result": {
        "original_header": "Pip",
        "type": "Text_excerpt",
        "value": "- [Discussions](https://github.com/MannLabs/alphapeptdeep/discussions).\n  Check if your problem or feature requests has been discussed before. \n"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/MannLabs/alphapeptdeep/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "deep-learning, hla, machine-learning, proteomics, python"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Apache License 2.0",
        "spdx_id": "Apache-2.0",
        "type": "License",
        "url": "https://api.github.com/licenses/apache-2.0",
        "value": "https://api.github.com/licenses/apache-2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "parent_header": [
          "AlphaPeptDeep (PeptDeep)"
        ],
        "type": "Text_excerpt",
        "value": "AlphaPeptDeep was developed by the [Mann Labs at the Max Planck\nInstitute of Biochemistry](https://www.biochem.mpg.de/mann) and the\n[University of\nCopenhagen](https://www.cpr.ku.dk/research/proteomics/mann/) and is\nfreely available with an [Apache License](LICENSE.txt). External Python\npackages (available in the [requirements](requirements) folder) have\ntheir own licenses, which can be consulted on their respective websites.\n\n------------------------------------------------------------------------\n"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "alphapeptdeep"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "MannLabs"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 4728690,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 464818,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 11769,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Inno Setup",
        "size": 4968,
        "type": "Programming_language",
        "value": "Inno Setup"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "PowerShell",
        "size": 1113,
        "type": "Programming_language",
        "value": "PowerShell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 995,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2024-09-12T23:24:02Z",
        "date_published": "2024-09-13T01:05:18Z",
        "description": "<!-- Release notes generated using configuration in .github/release.yml at v1.3.0 -->\r\n\r\n## What's Changed\r\n### Other Changes / unlabeled\r\n* Apply ruff formatting by @mschwoer in https://github.com/MannLabs/alphapeptdeep/pull/182\r\n* #179 ADD HLA module by @jalew188 in https://github.com/MannLabs/alphapeptdeep/pull/181\r\n* 183 tutorial immunopeptidomics by @jalew188 in https://github.com/MannLabs/alphapeptdeep/pull/188\r\n* Try macos-latest for arm64 in github actions by @jalew188 in https://github.com/MannLabs/alphapeptdeep/pull/192\r\n* remove macos from github CI due to diff errors by @jalew188 in https://github.com/MannLabs/alphapeptdeep/pull/193\r\n* #185 transfer GUI only supports best supported psm_readers by @jalew188 in https://github.com/MannLabs/alphapeptdeep/pull/186\r\n* replace space with _ in NC-term PTMs by @jalew188 in https://github.com/MannLabs/alphapeptdeep/pull/180\r\n* add new release workflow action by @mschwoer in https://github.com/MannLabs/alphapeptdeep/pull/202\r\n* fix return type in docstring by @mo-sameh in https://github.com/MannLabs/alphapeptdeep/pull/197\r\n* 187 tutorial speclib by @jalew188 in https://github.com/MannLabs/alphapeptdeep/pull/196\r\n* Prepare for new release workflow by @mschwoer in https://github.com/MannLabs/alphapeptdeep/pull/206\r\n* Development by @jalew188 in https://github.com/MannLabs/alphapeptdeep/pull/208\r\n\r\n## New Contributors\r\n* @mschwoer made their first contribution in https://github.com/MannLabs/alphapeptdeep/pull/182\r\n\r\n**Full Changelog**: https://github.com/MannLabs/alphapeptdeep/compare/1.2.1...v1.3.0",
        "html_url": "https://github.com/MannLabs/alphapeptdeep/releases/tag/v1.3.0",
        "name": "v1.3.0",
        "release_id": 174862232,
        "tag": "v1.3.0",
        "tarball_url": "https://api.github.com/repos/MannLabs/alphapeptdeep/tarball/v1.3.0",
        "type": "Release",
        "url": "https://api.github.com/repos/MannLabs/alphapeptdeep/releases/174862232",
        "value": "https://api.github.com/repos/MannLabs/alphapeptdeep/releases/174862232",
        "zipball_url": "https://api.github.com/repos/MannLabs/alphapeptdeep/zipball/v1.3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2024-05-31T01:23:16Z",
        "date_published": "2024-05-31T01:26:12Z",
        "description": "## What's Changed\r\n* FIX use Lumos model for Astral by @GeorgWa in https://github.com/MannLabs/alphapeptdeep/pull/174\r\n* FIX use lumos model for Astral by @jalew188 in https://github.com/MannLabs/alphapeptdeep/pull/175\r\n\r\n\r\n**Full Changelog**: https://github.com/MannLabs/alphapeptdeep/compare/1.2.0...1.2.1",
        "html_url": "https://github.com/MannLabs/alphapeptdeep/releases/tag/1.2.1",
        "name": "Release version 1.2.1",
        "release_id": 158266081,
        "tag": "1.2.1",
        "tarball_url": "https://api.github.com/repos/MannLabs/alphapeptdeep/tarball/1.2.1",
        "type": "Release",
        "url": "https://api.github.com/repos/MannLabs/alphapeptdeep/releases/158266081",
        "value": "https://api.github.com/repos/MannLabs/alphapeptdeep/releases/158266081",
        "zipball_url": "https://api.github.com/repos/MannLabs/alphapeptdeep/zipball/1.2.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2024-05-29T19:51:05Z",
        "date_published": "2024-05-29T20:20:32Z",
        "description": "## What's Changed\r\n* FIX github action failed with `setup-miniconda@v2 to setup-miniconda@v3` by @jalew188 in https://github.com/MannLabs/alphapeptdeep/pull/159\r\n* CHORE comment on why using macos-13 instead of macos-latest and macos-xlarge by @jalew188 in https://github.com/MannLabs/alphapeptdeep/pull/160\r\n* save charge model when it exists  by @mo-sameh in https://github.com/MannLabs/alphapeptdeep/pull/156\r\n* Update interface to allow different learning rate schedulers by @mo-sameh in https://github.com/MannLabs/alphapeptdeep/pull/155\r\n* FEAT use inference_mode instead of no_grad by @jalew188 in https://github.com/MannLabs/alphapeptdeep/pull/161\r\n* Feat: Add train callbacks by @mo-sameh in https://github.com/MannLabs/alphapeptdeep/pull/162\r\n* Allow change of device for charge models through initialization  by @mo-sameh in https://github.com/MannLabs/alphapeptdeep/pull/165\r\n* Remove nbdev from peptdeep by @jalew188 in https://github.com/MannLabs/alphapeptdeep/pull/167\r\n* Pre commit hooks by @jalew188 in https://github.com/MannLabs/alphapeptdeep/pull/171\r\n* Development by @jalew188 in https://github.com/MannLabs/alphapeptdeep/pull/173\r\n\r\n## New Contributors\r\n* @mo-sameh made their first contribution in https://github.com/MannLabs/alphapeptdeep/pull/156\r\n\r\n**Full Changelog**: https://github.com/MannLabs/alphapeptdeep/compare/1.1.9...1.2.0",
        "html_url": "https://github.com/MannLabs/alphapeptdeep/releases/tag/1.2.0",
        "name": "Release version 1.2.0",
        "release_id": 158063626,
        "tag": "1.2.0",
        "tarball_url": "https://api.github.com/repos/MannLabs/alphapeptdeep/tarball/1.2.0",
        "type": "Release",
        "url": "https://api.github.com/repos/MannLabs/alphapeptdeep/releases/158063626",
        "value": "https://api.github.com/repos/MannLabs/alphapeptdeep/releases/158063626",
        "zipball_url": "https://api.github.com/repos/MannLabs/alphapeptdeep/zipball/1.2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2024-04-12T07:32:22Z",
        "date_published": "2024-04-12T07:34:42Z",
        "html_url": "https://github.com/MannLabs/alphapeptdeep/releases/tag/1.1.9",
        "name": "Release version 1.1.9",
        "release_id": 150882460,
        "tag": "1.1.9",
        "tarball_url": "https://api.github.com/repos/MannLabs/alphapeptdeep/tarball/1.1.9",
        "type": "Release",
        "url": "https://api.github.com/repos/MannLabs/alphapeptdeep/releases/150882460",
        "value": "https://api.github.com/repos/MannLabs/alphapeptdeep/releases/150882460",
        "zipball_url": "https://api.github.com/repos/MannLabs/alphapeptdeep/zipball/1.1.9"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2024-04-12T05:42:38Z",
        "date_published": "2024-04-12T06:01:31Z",
        "html_url": "https://github.com/MannLabs/alphapeptdeep/releases/tag/1.1.8",
        "name": "Release version 1.1.8",
        "release_id": 150873397,
        "tag": "1.1.8",
        "tarball_url": "https://api.github.com/repos/MannLabs/alphapeptdeep/tarball/1.1.8",
        "type": "Release",
        "url": "https://api.github.com/repos/MannLabs/alphapeptdeep/releases/150873397",
        "value": "https://api.github.com/repos/MannLabs/alphapeptdeep/releases/150873397",
        "zipball_url": "https://api.github.com/repos/MannLabs/alphapeptdeep/zipball/1.1.8"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2024-03-16T09:11:17Z",
        "date_published": "2024-03-16T09:15:56Z",
        "html_url": "https://github.com/MannLabs/alphapeptdeep/releases/tag/1.1.7",
        "name": "Release version 1.1.7",
        "release_id": 146882374,
        "tag": "1.1.7",
        "tarball_url": "https://api.github.com/repos/MannLabs/alphapeptdeep/tarball/1.1.7",
        "type": "Release",
        "url": "https://api.github.com/repos/MannLabs/alphapeptdeep/releases/146882374",
        "value": "https://api.github.com/repos/MannLabs/alphapeptdeep/releases/146882374",
        "zipball_url": "https://api.github.com/repos/MannLabs/alphapeptdeep/zipball/1.1.7"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2024-02-23T06:36:40Z",
        "date_published": "2024-02-23T06:37:50Z",
        "html_url": "https://github.com/MannLabs/alphapeptdeep/releases/tag/1.1.6",
        "name": "Release version 1.1.6",
        "release_id": 143301782,
        "tag": "1.1.6",
        "tarball_url": "https://api.github.com/repos/MannLabs/alphapeptdeep/tarball/1.1.6",
        "type": "Release",
        "url": "https://api.github.com/repos/MannLabs/alphapeptdeep/releases/143301782",
        "value": "https://api.github.com/repos/MannLabs/alphapeptdeep/releases/143301782",
        "zipball_url": "https://api.github.com/repos/MannLabs/alphapeptdeep/zipball/1.1.6"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2024-01-29T22:04:42Z",
        "date_published": "2024-02-17T08:17:06Z",
        "html_url": "https://github.com/MannLabs/alphapeptdeep/releases/tag/1.1.5",
        "name": "Release version 1.1.5",
        "release_id": 142440473,
        "tag": "1.1.5",
        "tarball_url": "https://api.github.com/repos/MannLabs/alphapeptdeep/tarball/1.1.5",
        "type": "Release",
        "url": "https://api.github.com/repos/MannLabs/alphapeptdeep/releases/142440473",
        "value": "https://api.github.com/repos/MannLabs/alphapeptdeep/releases/142440473",
        "zipball_url": "https://api.github.com/repos/MannLabs/alphapeptdeep/zipball/1.1.5"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2024-01-07T14:16:01Z",
        "date_published": "2024-01-07T14:29:50Z",
        "html_url": "https://github.com/MannLabs/alphapeptdeep/releases/tag/1.1.4",
        "name": "Release version 1.1.4",
        "release_id": 136098948,
        "tag": "1.1.4",
        "tarball_url": "https://api.github.com/repos/MannLabs/alphapeptdeep/tarball/1.1.4",
        "type": "Release",
        "url": "https://api.github.com/repos/MannLabs/alphapeptdeep/releases/136098948",
        "value": "https://api.github.com/repos/MannLabs/alphapeptdeep/releases/136098948",
        "zipball_url": "https://api.github.com/repos/MannLabs/alphapeptdeep/zipball/1.1.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2024-01-06T11:56:48Z",
        "date_published": "2024-01-06T11:58:25Z",
        "html_url": "https://github.com/MannLabs/alphapeptdeep/releases/tag/1.1.3",
        "name": "Release version 1.1.3",
        "release_id": 136057859,
        "tag": "1.1.3",
        "tarball_url": "https://api.github.com/repos/MannLabs/alphapeptdeep/tarball/1.1.3",
        "type": "Release",
        "url": "https://api.github.com/repos/MannLabs/alphapeptdeep/releases/136057859",
        "value": "https://api.github.com/repos/MannLabs/alphapeptdeep/releases/136057859",
        "zipball_url": "https://api.github.com/repos/MannLabs/alphapeptdeep/zipball/1.1.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2024-01-05T21:36:04Z",
        "date_published": "2024-01-05T21:37:08Z",
        "html_url": "https://github.com/MannLabs/alphapeptdeep/releases/tag/1.1.2",
        "name": "Release version 1.1.2",
        "release_id": 136027863,
        "tag": "1.1.2",
        "tarball_url": "https://api.github.com/repos/MannLabs/alphapeptdeep/tarball/1.1.2",
        "type": "Release",
        "url": "https://api.github.com/repos/MannLabs/alphapeptdeep/releases/136027863",
        "value": "https://api.github.com/repos/MannLabs/alphapeptdeep/releases/136027863",
        "zipball_url": "https://api.github.com/repos/MannLabs/alphapeptdeep/zipball/1.1.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2023-12-26T15:53:11Z",
        "date_published": "2023-12-26T18:58:12Z",
        "html_url": "https://github.com/MannLabs/alphapeptdeep/releases/tag/1.1.1",
        "name": "Release version 1.1.1",
        "release_id": 135126584,
        "tag": "1.1.1",
        "tarball_url": "https://api.github.com/repos/MannLabs/alphapeptdeep/tarball/1.1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/MannLabs/alphapeptdeep/releases/135126584",
        "value": "https://api.github.com/repos/MannLabs/alphapeptdeep/releases/135126584",
        "zipball_url": "https://api.github.com/repos/MannLabs/alphapeptdeep/zipball/1.1.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2023-09-09T14:55:09Z",
        "date_published": "2023-12-26T13:39:01Z",
        "html_url": "https://github.com/MannLabs/alphapeptdeep/releases/tag/1.1.0",
        "name": "Release version 1.1.0",
        "release_id": 135104472,
        "tag": "1.1.0",
        "tarball_url": "https://api.github.com/repos/MannLabs/alphapeptdeep/tarball/1.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/MannLabs/alphapeptdeep/releases/135104472",
        "value": "https://api.github.com/repos/MannLabs/alphapeptdeep/releases/135104472",
        "zipball_url": "https://api.github.com/repos/MannLabs/alphapeptdeep/zipball/1.1.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2023-02-17T10:18:29Z",
        "date_published": "2023-02-24T08:09:41Z",
        "html_url": "https://github.com/MannLabs/alphapeptdeep/releases/tag/1.0.2",
        "name": "Release version 1.0.2",
        "release_id": 93538755,
        "tag": "1.0.2",
        "tarball_url": "https://api.github.com/repos/MannLabs/alphapeptdeep/tarball/1.0.2",
        "type": "Release",
        "url": "https://api.github.com/repos/MannLabs/alphapeptdeep/releases/93538755",
        "value": "https://api.github.com/repos/MannLabs/alphapeptdeep/releases/93538755",
        "zipball_url": "https://api.github.com/repos/MannLabs/alphapeptdeep/zipball/1.0.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2023-01-20T09:14:00Z",
        "date_published": "2023-01-20T15:33:17Z",
        "html_url": "https://github.com/MannLabs/alphapeptdeep/releases/tag/1.0.1",
        "name": "Release version 1.0.1",
        "release_id": 89719503,
        "tag": "1.0.1",
        "tarball_url": "https://api.github.com/repos/MannLabs/alphapeptdeep/tarball/1.0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/MannLabs/alphapeptdeep/releases/89719503",
        "value": "https://api.github.com/repos/MannLabs/alphapeptdeep/releases/89719503",
        "zipball_url": "https://api.github.com/repos/MannLabs/alphapeptdeep/zipball/1.0.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2023-01-09T14:51:04Z",
        "date_published": "2023-01-11T12:37:48Z",
        "description": "Windows installer has been tested and it worked well. \r\n\r\nFor Linux and MacOS, if there are any issues of the installers, please use peptdeep Python package. See https://github.com/MannLabs/alphapeptdeep#pip and https://github.com/MannLabs/alphapeptdeep#usage",
        "html_url": "https://github.com/MannLabs/alphapeptdeep/releases/tag/1.0.0",
        "name": "Release version 1.0.0",
        "release_id": 88580243,
        "tag": "1.0.0",
        "tarball_url": "https://api.github.com/repos/MannLabs/alphapeptdeep/tarball/1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/MannLabs/alphapeptdeep/releases/88580243",
        "value": "https://api.github.com/repos/MannLabs/alphapeptdeep/releases/88580243",
        "zipball_url": "https://api.github.com/repos/MannLabs/alphapeptdeep/zipball/1.0.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2023-01-04T00:24:02Z",
        "date_published": "2023-01-04T00:25:20Z",
        "html_url": "https://github.com/MannLabs/alphapeptdeep/releases/tag/0.5.0",
        "name": "Release version 0.5.0",
        "release_id": 87833852,
        "tag": "0.5.0",
        "tarball_url": "https://api.github.com/repos/MannLabs/alphapeptdeep/tarball/0.5.0",
        "type": "Release",
        "url": "https://api.github.com/repos/MannLabs/alphapeptdeep/releases/87833852",
        "value": "https://api.github.com/repos/MannLabs/alphapeptdeep/releases/87833852",
        "zipball_url": "https://api.github.com/repos/MannLabs/alphapeptdeep/zipball/0.5.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jalew188",
          "type": "User"
        },
        "date_created": "2023-01-04T00:24:02Z",
        "date_published": "2023-01-09T10:07:44Z",
        "description": "MS2/RT/CCS models for Dimethyl-labeled peptides.\r\n\r\nTODO: We are still working on this, it will be released soon.",
        "html_url": "https://github.com/MannLabs/alphapeptdeep/releases/tag/dimethyl-models",
        "name": "dimethyl-models",
        "release_id": 88286617,
        "tag": "dimethyl-models",
        "tarball_url": "https://api.github.com/repos/MannLabs/alphapeptdeep/tarball/dimethyl-models",
        "type": "Release",
        "url": "https://api.github.com/repos/MannLabs/alphapeptdeep/releases/88286617",
        "value": "https://api.github.com/repos/MannLabs/alphapeptdeep/releases/88286617",
        "zipball_url": "https://api.github.com/repos/MannLabs/alphapeptdeep/zipball/dimethyl-models"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2022-12-29T02:21:45Z",
        "date_published": "2022-12-29T03:38:51Z",
        "html_url": "https://github.com/MannLabs/alphapeptdeep/releases/tag/0.4.0",
        "name": "Release version 0.4.0",
        "release_id": 87484612,
        "tag": "0.4.0",
        "tarball_url": "https://api.github.com/repos/MannLabs/alphapeptdeep/tarball/0.4.0",
        "type": "Release",
        "url": "https://api.github.com/repos/MannLabs/alphapeptdeep/releases/87484612",
        "value": "https://api.github.com/repos/MannLabs/alphapeptdeep/releases/87484612",
        "zipball_url": "https://api.github.com/repos/MannLabs/alphapeptdeep/zipball/0.4.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2022-12-26T20:27:50Z",
        "date_published": "2022-12-26T20:30:10Z",
        "description": "Building Linux release failed as the .deb file is too large including nvidia cuda runtime for github. \r\n\r\nWe need to build .deb installer by ourselves using `release/one_click_linux_gui/create_installer_linux.sh`.",
        "html_url": "https://github.com/MannLabs/alphapeptdeep/releases/tag/0.2.2",
        "name": "Release version 0.2.2",
        "release_id": 87261769,
        "tag": "0.2.2",
        "tarball_url": "https://api.github.com/repos/MannLabs/alphapeptdeep/tarball/0.2.2",
        "type": "Release",
        "url": "https://api.github.com/repos/MannLabs/alphapeptdeep/releases/87261769",
        "value": "https://api.github.com/repos/MannLabs/alphapeptdeep/releases/87261769",
        "zipball_url": "https://api.github.com/repos/MannLabs/alphapeptdeep/zipball/0.2.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2022-09-28T23:58:06Z",
        "date_published": "2022-09-30T11:56:50Z",
        "html_url": "https://github.com/MannLabs/alphapeptdeep/releases/tag/0.2.0",
        "name": "Release version 0.2.0",
        "release_id": 78685866,
        "tag": "0.2.0",
        "tarball_url": "https://api.github.com/repos/MannLabs/alphapeptdeep/tarball/0.2.0",
        "type": "Release",
        "url": "https://api.github.com/repos/MannLabs/alphapeptdeep/releases/78685866",
        "value": "https://api.github.com/repos/MannLabs/alphapeptdeep/releases/78685866",
        "zipball_url": "https://api.github.com/repos/MannLabs/alphapeptdeep/zipball/0.2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2022-09-14T13:45:35Z",
        "date_published": "2022-09-14T15:22:22Z",
        "html_url": "https://github.com/MannLabs/alphapeptdeep/releases/tag/0.1.7",
        "name": "Release version 0.1.7",
        "release_id": 77155241,
        "tag": "0.1.7",
        "tarball_url": "https://api.github.com/repos/MannLabs/alphapeptdeep/tarball/0.1.7",
        "type": "Release",
        "url": "https://api.github.com/repos/MannLabs/alphapeptdeep/releases/77155241",
        "value": "https://api.github.com/repos/MannLabs/alphapeptdeep/releases/77155241",
        "zipball_url": "https://api.github.com/repos/MannLabs/alphapeptdeep/zipball/0.1.7"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2022-09-12T12:49:27Z",
        "date_published": "2022-09-12T13:02:45Z",
        "html_url": "https://github.com/MannLabs/alphapeptdeep/releases/tag/0.1.6",
        "name": "Release version 0.1.6",
        "release_id": 76891546,
        "tag": "0.1.6",
        "tarball_url": "https://api.github.com/repos/MannLabs/alphapeptdeep/tarball/0.1.6",
        "type": "Release",
        "url": "https://api.github.com/repos/MannLabs/alphapeptdeep/releases/76891546",
        "value": "https://api.github.com/repos/MannLabs/alphapeptdeep/releases/76891546",
        "zipball_url": "https://api.github.com/repos/MannLabs/alphapeptdeep/zipball/0.1.6"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2022-09-09T21:45:59Z",
        "date_published": "2022-09-09T22:32:37Z",
        "html_url": "https://github.com/MannLabs/alphapeptdeep/releases/tag/0.1.5",
        "name": "Release version 0.1.5",
        "release_id": 76770180,
        "tag": "0.1.5",
        "tarball_url": "https://api.github.com/repos/MannLabs/alphapeptdeep/tarball/0.1.5",
        "type": "Release",
        "url": "https://api.github.com/repos/MannLabs/alphapeptdeep/releases/76770180",
        "value": "https://api.github.com/repos/MannLabs/alphapeptdeep/releases/76770180",
        "zipball_url": "https://api.github.com/repos/MannLabs/alphapeptdeep/zipball/0.1.5"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2022-07-29T16:30:47Z",
        "date_published": "2022-07-29T16:58:08Z",
        "html_url": "https://github.com/MannLabs/alphapeptdeep/releases/tag/0.1.4",
        "name": "Release version 0.1.4",
        "release_id": 73188924,
        "tag": "0.1.4",
        "tarball_url": "https://api.github.com/repos/MannLabs/alphapeptdeep/tarball/0.1.4",
        "type": "Release",
        "url": "https://api.github.com/repos/MannLabs/alphapeptdeep/releases/73188924",
        "value": "https://api.github.com/repos/MannLabs/alphapeptdeep/releases/73188924",
        "zipball_url": "https://api.github.com/repos/MannLabs/alphapeptdeep/zipball/0.1.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2022-07-22T07:35:45Z",
        "date_published": "2022-07-22T07:50:18Z",
        "html_url": "https://github.com/MannLabs/alphapeptdeep/releases/tag/0.1.3",
        "name": "Release version 0.1.3",
        "release_id": 72592116,
        "tag": "0.1.3",
        "tarball_url": "https://api.github.com/repos/MannLabs/alphapeptdeep/tarball/0.1.3",
        "type": "Release",
        "url": "https://api.github.com/repos/MannLabs/alphapeptdeep/releases/72592116",
        "value": "https://api.github.com/repos/MannLabs/alphapeptdeep/releases/72592116",
        "zipball_url": "https://api.github.com/repos/MannLabs/alphapeptdeep/zipball/0.1.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2022-07-14T18:04:11Z",
        "date_published": "2022-07-16T05:25:46Z",
        "html_url": "https://github.com/MannLabs/alphapeptdeep/releases/tag/0.1.2",
        "name": "Release version 0.1.2",
        "release_id": 72138359,
        "tag": "0.1.2",
        "tarball_url": "https://api.github.com/repos/MannLabs/alphapeptdeep/tarball/0.1.2",
        "type": "Release",
        "url": "https://api.github.com/repos/MannLabs/alphapeptdeep/releases/72138359",
        "value": "https://api.github.com/repos/MannLabs/alphapeptdeep/releases/72138359",
        "zipball_url": "https://api.github.com/repos/MannLabs/alphapeptdeep/zipball/0.1.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jalew188",
          "type": "User"
        },
        "date_created": "2022-05-11T14:11:50Z",
        "date_published": "2022-06-28T13:30:31Z",
        "description": "Pre-trained MS2/RT/CCS models\r\n\r\n### Change log:\r\n\r\n[2022-11-28] For timsTOF data, fragment intensities for training are no longer extracted from MaxQuant's msms.txt. We extracted fragments of AlphaPept PSMs against the ms_data.hdf, this should be more stable than msms.txt for timsTOF. The previous model is still available on https://datashare.biochem.mpg.de/s/RDSZlAnCRvxfLfk.\r\n\r\n[2024-06-29] Add the pretrained LSTM-based HLA-I model (hla_model.zip) for peptide binding prediciton.",
        "html_url": "https://github.com/MannLabs/alphapeptdeep/releases/tag/pre-trained-models",
        "name": "Pre-trained models",
        "release_id": 70742368,
        "tag": "pre-trained-models",
        "tarball_url": "https://api.github.com/repos/MannLabs/alphapeptdeep/tarball/pre-trained-models",
        "type": "Release",
        "url": "https://api.github.com/repos/MannLabs/alphapeptdeep/releases/70742368",
        "value": "https://api.github.com/repos/MannLabs/alphapeptdeep/releases/70742368",
        "zipball_url": "https://api.github.com/repos/MannLabs/alphapeptdeep/zipball/pre-trained-models"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-04 10:46:34",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 108
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Use GPU",
        "parent_header": [
          "AlphaPeptDeep (PeptDeep)",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "To enable GPU, GPU version of PyTorch is required, it can be installed\nwith:\n\n``` bash\npip install torch --extra-index-url https://download.pytorch.org/whl/cu116 --upgrade\n```\n\nNote that this may depend on your NVIDIA driver version. Run the command\nto check your NVIDIA driver:\n\n``` bash\nnvidia-smi\n```\n\nFor latest pytorch version, see [pytorch.org](https://pytorch.org/get-started/locally/).\n"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "AlphaPeptDeep (PeptDeep)"
        ],
        "type": "Text_excerpt",
        "value": "There are three ways to use peptdeep:\n\n- [**GUI**](#gui)\n- [**CLI**](#cli)\n- [**Python**](#python-and-jupyter-notebooks)\n\nNOTE: The first time you use a fresh installation of peptdeep, it is\noften quite slow because some functions might still need compilation on\nyour local operating system and architecture. Subsequent use should be a\nlot faster.\n"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "GUI",
        "parent_header": [
          "AlphaPeptDeep (PeptDeep)",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "If the GUI was not installed through a one-click GUI installer, it can\nbe launched with the following `bash` command:\n\n``` bash\npeptdeep gui\n```\n\nThis command will start a web server and automatically open the default\nbrowser:\n![](https://user-images.githubusercontent.com/4646029/189301730-ac1f92cc-0e9d-4ba3-be1d-07c4d66032cd.jpg)\n\nThere are several options in the GUI (left panel):\n\n- Server: Start/stop the task server, check tasks in the task queue\n- Settings: Configure common settings, load/save current settings\n- Model: Configure DL models for prediction or transfer learning\n- Transfer: Refine the models\n- Library: Predict a library\n- Rescore: Perform ML feature extraction and Percolator\n\n------------------------------------------------------------------------\n"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "CLI",
        "parent_header": [
          "AlphaPeptDeep (PeptDeep)",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "The CLI can be run with the following command (after activating the\n`conda` environment with `conda activate peptdeep` or if an alias was\nset to the peptdeep executable):\n\n``` bash\npeptdeep -h\n```\n\nIt is possible to get help about each function and their (required)\nparameters by using the `-h` flag. AlphaPeptDeep provides several\ncommands for different tasks:\n\n- [**export-settings**](#export-settings)\n- [**cmd-flow**](#cmd-flow)\n- [**library**](#library)\n- [**transfer**](#transfer)\n- [**rescore**](#rescore)\n- [**install-models**](#install-models)\n- [**gui**](#gui)\n\nRun a command to check usages:\n\n``` bash\npeptdeep $command -h\n```\n\nFor example:\n\n``` bash\npeptdeep library -h\n```\n"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "export-settings",
        "parent_header": [
          "AlphaPeptDeep (PeptDeep)",
          "Usage",
          "CLI"
        ],
        "type": "Text_excerpt",
        "value": "``` bash\npeptdeep export-settings C:/path/to/settings.yaml\n```\n\nThis command will export the default settings into the `settings.yaml`\nas a template, users can edit the yaml file to run other commands.\n\nHere is a section of the yaml file which controls global parameters for\ndifferent tasks:\n\n```\nmodel_url: \"https://github.com/MannLabs/alphapeptdeep/releases/download/pre-trained-models/pretrained_models.zip\"\n\ntask_type: library\ntask_type_choices:\n  - library\n  - train\n  - rescore\nthread_num: 8\ntorch_device:\n  device_type: gpu\n  device_type_choices:\n    - gpu\n    - mps\n    - cpu\n  device_ids: []\n\nlog_level: info\nlog_level_choices:\n  - debug\n  - info\n  - warning\n  - error\n  - critical\n\ncommon:\n  modloss_importance_level: 1.0\n  user_defined_modifications: {}\n  # For example,\n  # user_defined_modifications:\n  #   \"Dimethyl2@Any_N-term\":\n  #     composition: \"H(2)2H(2)C(2)\"\n  #     modloss_composition: \"H(0)\" # can be without if no modloss\n  #   \"Dimethyl2@K\":\n  #     composition: \"H(2)2H(2)C(2)\"\n  #   \"Dimethyl6@Any_N-term\":\n  #     composition: \"2H(4)13C(2)\"\n  #   \"Dimethyl6@K\":\n  #     composition: \"2H(4)13C(2)\"\n\npeak_matching:\n  ms2_ppm: True\n  ms2_tol_value: 20.0\n  ms1_ppm: True\n  ms1_tol_value: 20.0\n\nmodel_mgr:\n  default_nce: 30.0\n  default_instrument: Lumos\n  mask_modloss: True\n  model_type: generic\n  model_choices:\n  - generic\n  - phos\n  - hla # same as generic\n  - digly\n  external_ms2_model: ''\n  external_rt_model: ''\n  external_ccs_model: ''\n  instrument_group:\n    ThermoTOF: ThermoTOF\n    Astral: ThermoTOF\n    Lumos: Lumos\n    QE: QE\n    timsTOF: timsTOF\n    SciexTOF: SciexTOF\n    Fusion: Lumos\n    Eclipse: Lumos\n    Velos: Lumos # not important\n    Elite: Lumos # not important\n    OrbitrapTribrid: Lumos\n    ThermoTribrid: Lumos\n    QE+: QE\n    QEHF: QE\n    QEHFX: QE\n    Exploris: QE\n    Exploris480: QE\n  predict:\n    batch_size_ms2: 512\n    batch_size_rt_ccs: 1024\n    verbose: True\n    multiprocessing: True\n```\n\nThe `model_mgr` section in the yaml defines the common settings for\nMS2/RT/CCS prediction.\n\n------------------------------------------------------------------------\n"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "cmd-flow",
        "parent_header": [
          "AlphaPeptDeep (PeptDeep)",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "``` bash\npeptdeep cmd-flow ...\n```\n\nSupport CLI parameters to control `global_settings` for CLI users. It supports three workflows: `train`, `library` or `train library`, controlled by CLI parameter `--task_workflow`, for example, `--task_workflow train library`. All settings in [global_settings](peptdeep/constants/default_settings.yaml) are converted to CLI parameters using `--` as the dict level indicator, for example, `global_settings[\"library\"][\"var_mods\"]` corresponds to `--library--var_mods`. See [test_cmd_flow.sh](tests/test_cmd_flow.sh) for example.\n\nThere are three kinds of parameter types:\n  1. value type (int, float, bool, str): The CLI parameter only has a single value, for instance: `--model_mgr--default_instrument 30.0`.\n  2. list type (list): The CLI parameter has a list of values seperated by a space, for instance `--library--var_mods \"Oxidation@M\" \"Acetyl@Protein_N-term\"`.\n  3. dict type (dict): Only three parameters are `dict type`, `--library--labeling_channels`, `--model_mgr--transfer--psm_modification_mapping`, and `--common--user_defined_modifications`. Here are the examples:\n    - `--library--labeling_channels`: labeling channels for the library. Example: `--library--labeling_channels \"0:Dimethyl@Any_N-term;Dimethyl@K\" \"4:xx@Any_N-term;xx@K\"`\n    - `--model_mgr--transfer--psm_modification_mapping`: converting other search engines' modification names to alphabase modifications for transfer learning. Example: `--model_mgr--transfer--psm_modification_mapping \"Dimethyl@Any_N-term:_(Dimethyl-n-0);_(Dimethyl)\" \"Dimethyl@K:K(Dimethyl-K-0);K(Dimethyl)\"`. Note that `X(UniMod:id)` format can directly be recognized by alphabase.\n    - `--common--user_defined_modification`: user defined modifications. Example:`--common--user_defined_modification \"NewMod1@Any_N-term:H(2)2H(2)C(2)\" \"NewMod2@K:H(100)O(2)C(2)\"`\n"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "library",
        "parent_header": [
          "AlphaPeptDeep (PeptDeep)",
          "Usage",
          "cmd-flow"
        ],
        "type": "Text_excerpt",
        "value": "``` bash\npeptdeep library settings_yaml\n```\n\nThis command will predict a spectral library for given settings_yaml\nfile (exported by [export-settings](#export-settings)). All the\nessential settings are in the `library` section in the settings_yaml\nfile:\n\n```\nlibrary:\n  infile_type: fasta\n  infile_type_choices:\n  - fasta\n  - sequence_table\n  - peptide_table # sequence with mods and mod_sites\n  - precursor_table # peptide with charge state\n  infiles:\n  - xxx.fasta\n  fasta:\n    protease: 'trypsin'\n    protease_choices:\n    - 'trypsin'\n    - '([KR])'\n    - 'trypsin_not_P'\n    - '([KR](?=[^P]))'\n    - 'lys-c'\n    - 'K'\n    - 'lys-n'\n    - '\\w(?=K)'\n    - 'chymotrypsin'\n    - 'asp-n'\n    - 'glu-c'\n    max_miss_cleave: 2\n    add_contaminants: False\n  fix_mods:\n  - Carbamidomethyl@C\n  var_mods:\n  - Acetyl@Protein_N-term\n  - Oxidation@M\n  special_mods: [] # normally for Phospho or GlyGly@K\n  special_mods_cannot_modify_pep_n_term: False\n  special_mods_cannot_modify_pep_c_term: False\n  labeling_channels: {}\n  # For example,\n  # labeling_channels:\n  #   0: ['Dimethyl@Any_N-term','Dimethyl@K']\n  #   4: ['Dimethyl:2H(2)@Any_N-term','Dimethyl:2H(2)@K']\n  #   8: [...]\n  min_var_mod_num: 0\n  max_var_mod_num: 2\n  min_special_mod_num: 0\n  max_special_mod_num: 1\n  min_precursor_charge: 2\n  max_precursor_charge: 4\n  min_peptide_len: 7\n  max_peptide_len: 35\n  min_precursor_mz: 200.0\n  max_precursor_mz: 2000.0\n  decoy: pseudo_reverse\n  decoy_choices:\n  - pseudo_reverse\n  - diann\n  - None\n  max_frag_charge: 2\n  frag_types:\n  - b\n  - y\n  rt_to_irt: True\n  generate_precursor_isotope: False\n  output_folder: \"{PEPTDEEP_HOME}/spec_libs\"\n  output_tsv:\n    enabled: False\n    min_fragment_mz: 200\n    max_fragment_mz: 2000\n    min_relative_intensity: 0.001\n    keep_higest_k_peaks: 12\n    translate_batch_size: 1000000\n    translate_mod_to_unimod_id: False\n```\n\npeptdeep will load sequence data based on `library:infile_type`\nand `library:infiles` for library prediction.\n`library:infiles` contains the list of files with\n`library:infile_type` defined in\n`library:infile_type_choices`:\n\n- fasta: Protein fasta files, peptdeep will digest the protein sequences\n  into peptide sequences.\n- [sequence_table](#sequence_table): Tab/comma-delimited txt/tsv/csv\n  (text) files which contain the column `sequence` for peptide\n  sequences.\n- [peptide_table](#peptide_table): Tab/comma-delimited txt/tsv/csv\n  (text) files which contain the columns `sequence`, `mods`, and\n  `mod_sites`. peptdeep will not add modifications for peptides of this\n  file type.\n- [precursor_table](#precursor_table): Tab/comma-delimited txt/tsv/csv\n  (text) files which contain the columns `sequence`, `mods`,\n  `mod_sites`, and `charge`. peptdeep will not add modifications and\n  charge states for peptides of this file type.\n\nSee examples:\n\n``` python\nimport pandas as pd\ndf = pd.DataFrame({\n    'sequence': ['ACDEFGHIK','LMNPQRSTVK','WYVSTR'],\n    'mods': ['Carbamidomethyl@C','Acetyl@Protein_N-term;Phospho@S',''],\n    'mod_sites': ['2','0;7',''],\n    'charge': [2,3,1],\n})\n```\n"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "sequence_table",
        "parent_header": [
          "AlphaPeptDeep (PeptDeep)",
          "Usage",
          "cmd-flow",
          "library"
        ],
        "type": "Text_excerpt",
        "value": "``` python\ndf[['sequence']]\n```\n\n|  | sequence |\n| --- | --- |\n| 0 | ACDEFGHIK |\n| 1 | LMNPQRSTVK |\n| 2 | WYVSTR |\n\n"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "peptide_table",
        "parent_header": [
          "AlphaPeptDeep (PeptDeep)",
          "Usage",
          "cmd-flow",
          "library"
        ],
        "type": "Text_excerpt",
        "value": "``` python\ndf[['sequence','mods','mod_sites']]\n```\n\n|  | sequence | mods | mod_sites |\n| --- | --- | --- | --- |\n| 0 | ACDEFGHIK | Carbamidomethyl@C | 2 |\n| 1 | LMNPQRSTVK | Acetyl@Protein_N-term;Phospho@S | 0;7 |\n| 2 | WYVSTR | | |\n"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "precursor_table",
        "parent_header": [
          "AlphaPeptDeep (PeptDeep)",
          "Usage",
          "cmd-flow",
          "library"
        ],
        "type": "Text_excerpt",
        "value": "``` python\ndf\n```\n\n|  | sequence | mods | mod_sites | charge |\n| --- | --- | --- | --- | --- |\n| 0 | ACDEFGHIK | Carbamidomethyl@C | 2 | 2 |\n| 1 | LMNPQRSTVK | Acetyl@Protein_N-term;Phospho@S | 0;7 | 3 |\n| 2 | WYVSTR | | | 1 |\n\n> Columns of `proteins` and `genes` are optional for these txt/tsv/csv\n> files.\n\npeptdeep supports multiple files for library prediction, for example (in\nthe yaml file):\n\n```\nlibrary:\n  ...\n  infile_type: fasta\n  infiles:\n  - /path/to/fasta/human.fasta\n  - /path/to/fasta/yeast.fasta\n  ...\n```\n\nThe library in HDF5 (.hdf) format will be saved into\n`library:output_folder`. If `library:output_tsv:enabled` is True, a TSV\nspectral library that can be processed by DIA-NN and Spectronaut will\nalso be saved into `library:output_folder`.\n\n------------------------------------------------------------------------\n"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "transfer",
        "parent_header": [
          "AlphaPeptDeep (PeptDeep)",
          "Usage",
          "cmd-flow"
        ],
        "type": "Text_excerpt",
        "value": "``` bash\npeptdeep transfer settings_yaml\n```\n\nThis command will apply transfer learning to refine RT/CCS/MS2 models\nbased on `model_mgr:transfer:psm_files` and\n`model_mgr:transfer:psm_type`. All yaml settings (exported by\n[export-settings](#export-settings)) related to this command are:\n\n```\nmodel_mgr:\n  transfer:\n    model_output_folder: \"{PEPTDEEP_HOME}/refined_models\"\n    epoch_ms2: 20\n    warmup_epoch_ms2: 10\n    batch_size_ms2: 512\n    lr_ms2: 0.0001\n    epoch_rt_ccs: 40\n    warmup_epoch_rt_ccs: 10\n    batch_size_rt_ccs: 1024\n    lr_rt_ccs: 0.0001\n    verbose: False\n    grid_nce_search: False\n    grid_nce_first: 15.0\n    grid_nce_last: 45.0\n    grid_nce_step: 3.0\n    grid_instrument: ['Lumos']\n    psm_type: alphapept\n    psm_type_choices:\n      - alphapept\n      - pfind\n      - maxquant\n      - diann\n      - speclib_tsv\n    psm_files: []\n    ms_file_type: alphapept_hdf\n    ms_file_type_choices:\n      - alphapept_hdf\n      - thermo_raw\n      - mgf\n      - mzml\n    ms_files: []\n    psm_num_to_train_ms2: 100000000\n    psm_num_per_mod_to_train_ms2: 50\n    psm_num_to_test_ms2: 0\n    psm_num_to_train_rt_ccs: 100000000\n    psm_num_per_mod_to_train_rt_ccs: 50\n    psm_num_to_test_rt_ccs: 0\n    top_n_mods_to_train: 10\n    psm_modification_mapping: {}\n    # alphabase modification to modifications of other search engines\n    # For example,\n    # psm_modification_mapping:\n    #   Dimethyl@Any_N-term:\n    #     - _(Dimethyl-n-0)\n    #     - _(Dimethyl)\n    #   Dimethyl:2H(2)@K:\n    #     - K(Dimethyl-K-2)\n    #   ...\n```\nFor DDA data, peptdeep can also extract MS2 intensities from the\nspectrum files from `model_mgr:transfer:ms_files` and\n`model_mgr:transfer:ms_file_type` for all PSMs. This will enable the\ntransfer learning of the MS2 model.\n\nFor DIA data, only RT and CCS (if timsTOF) models will be refined.\n\nFor example of the settings yaml:\n\n```\nmodel_mgr:\n  transfer:\n    ...\n    psm_type: pfind\n    psm_files:\n    - /path/to/pFind.spectra\n    - /path/to/other/pFind.spectra\n\n    ms_file_type: thermo_raw\n    ms_files:\n    - /path/to/raw1.raw\n    - /path/to/raw2.raw\n    ...\n```\n\nThe refined models will be saved in\n`model_mgr:transfer:model_output_folder`. After transfer learning, users\ncan apply the new models by replacing `model_mgr:external_ms2_model`,\n`model_mgr:external_rt_model` and `model_mgr:external_ccs_model` with\nthe saved `ms2.pth`, `rt.pth` and `ccs.pth` in\n`model_mgr:transfer:model_output_folder`. This is useful to perform\nsample-specific library prediction.\n\n------------------------------------------------------------------------\n"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "rescore",
        "parent_header": [
          "AlphaPeptDeep (PeptDeep)",
          "Usage",
          "cmd-flow"
        ],
        "type": "Text_excerpt",
        "value": "This command will apply Percolator to rescore DDA PSMs in\n`percolator:input_files:psm_files` and\n`percolator:input_files:psm_type`. All yaml settings (exported by\n[export-settings](#export-settings)) related to this command are:\n\n```\npercolator:\n  require_model_tuning: True\n  raw_num_to_tune: 8\n\n  require_raw_specific_tuning: True\n  raw_specific_ms2_tuning: False\n  psm_num_per_raw_to_tune: 200\n  epoch_per_raw_to_tune: 5\n\n  multiprocessing: True\n\n  top_k_frags_to_calc_spc: 10\n  calibrate_frag_mass_error: False\n  max_perc_train_sample: 1000000\n  min_perc_train_sample: 100\n\n  percolator_backend: sklearn\n  percolator_backend_choices:\n    - sklearn\n    - pytorch\n  percolator_model: linear\n  percolator_model_choices:\n    pytorch_as_backend:\n      - linear # not fully tested, performance may be unstable\n      - mlp # not implemented yet\n    sklearn_as_backend:\n      - linear # logistic regression\n      - random_forest\n  lr_percolator_torch_model: 0.1 # learning rate, only used when percolator_backend==pytorch\n  percolator_iter_num: 5 # percolator iteration number\n  cv_fold: 1\n  fdr: 0.01\n  fdr_level: psm\n  fdr_level_choices:\n    - psm\n    - precursor\n    - peptide\n    - sequence\n  use_fdr_for_each_raw: False\n  frag_types: ['b_z1','b_z2','y_z1','y_z2']\n  input_files:\n    psm_type: alphapept\n    psm_type_choices:\n      - alphapept\n      - pfind\n    psm_files: []\n    ms_file_type: alphapept_hdf\n    ms_file_type_choices:\n      - alphapept_hdf\n      - thermo_raw # if alpharaw is installed\n      - mgf\n      - mzml\n    ms_files: []\n    other_score_column_mapping:\n      alphapept: {}\n      pfind:\n        raw_score: Raw_Score\n      msfragger:\n        hyperscore: hyperscore\n        nextscore: nextscore\n      maxquant: {}\n  output_folder: \"{PEPTDEEP_HOME}/rescore\"\n```\n\nTransfer learning will be applied when rescoring if `percolator:require_model_tuning`\nis True.\n\nThe corresponding MS files (`percolator:input_files:ms_files` and\n`percolator:input_files:ms_file_type`) must be provided to extract\nexperimental fragment intensities.\n\n------------------------------------------------------------------------\n"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "install-models",
        "parent_header": [
          "AlphaPeptDeep (PeptDeep)",
          "Usage",
          "cmd-flow"
        ],
        "type": "Text_excerpt",
        "value": "``` bash\npeptdeep install-models [--model-file url_or_local_model_zip] --overwrite True\n```\n\nRunning peptdeep for the first time, it will download and install models\nfrom [models on github](https://github.com/MannLabs/alphapeptdeep/releases/download/pre-trained-models/pretrained_models.zip)\ndefined in \u2018model_url\u2019 in the default yaml settings. This command will\nupdate `pretrained_models.zip` from `--model-file url_or_local_model_zip`.\n\nIt is also possible to use other models instead of the pretrained_models by providing `model_mgr:external_ms2_model`,\n`model_mgr:external_rt_model` and `model_mgr:external_ccs_model`.\n\n------------------------------------------------------------------------\n"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Python and Jupyter notebooks",
        "parent_header": [
          "AlphaPeptDeep (PeptDeep)",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Using peptdeep from Python script or notebook provides the most flexible\nway to access all features in peptdeep.\n\nWe will introduce several usages of peptdeep via Python notebook:\n\n- [**global_settings**](#global_settings)\n- [**Pipeline APIs**](#pipeline-apis)\n- [**ModelManager**](#modelmanager)\n- [**Library Prediction**](#library-prediction)\n- [**DDA Rescoring**](#dda-rescoring)\n- [**HLA Peptide Prediction**](#hla-peptide-prediction)\n\n------------------------------------------------------------------------\n"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "global_settings",
        "parent_header": [
          "AlphaPeptDeep (PeptDeep)",
          "Usage",
          "Python and Jupyter notebooks"
        ],
        "type": "Text_excerpt",
        "value": "Most of the default parameters and attributes peptdeep functions and\nclasses are controlled by `peptdeep.settings.global_settings` which is a\n`dict`.\n\n``` python\nfrom peptdeep.settings import global_settings\n```\n\nThe default values of `global_settings` is defined in\n[default_settings.yaml](https://github.com/MannLabs/alphapeptdeep/blob/main/peptdeep/constants/default_settings.yaml).\n"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Pipeline APIs",
        "parent_header": [
          "AlphaPeptDeep (PeptDeep)",
          "Usage",
          "Python and Jupyter notebooks"
        ],
        "type": "Text_excerpt",
        "value": "Pipeline APIs provides the same functionalities with [CLI](#cli),\nincluding [library prediction](#library), [transfer\nlearning](#transfer), and [rescoring](#rescore).\n\n``` python\nfrom peptdeep.pipeline_api import (\n    generate_library,\n    transfer_learn,\n    rescore,\n)\n```\n\nAll these functionalities take a `settings_dict` as the inputs, the dict\nstructure is the same as the settings yaml file. See the documatation of `generate_library`, `transfer_learn`, `rescore` in https://alphapeptdeep.readthedocs.io/en/latest/module_pipeline_api.html.\n"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "ModelManager",
        "parent_header": [
          "AlphaPeptDeep (PeptDeep)",
          "Usage",
          "Python and Jupyter notebooks"
        ],
        "type": "Text_excerpt",
        "value": "``` python\nfrom peptdeep.pretrained_models import ModelManager\n```\n\n[`ModelManager`](https://alphapeptdeep.readthedocs.io/en/latest/module_pretrained_models.html#peptdeep.pretrained_models.ModelManager) class is the main entry to access MS2/RT/CCS models. It provides functionalities to train/refine the models and then use the new models to predict the data.\n\nCheck [tutorial_model_manager.ipynb](https://github.com/MannLabs/alphapeptdeep/blob/main/nbs/docs/tutorial_model_manager.ipynb) for details.\n"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Library Prediction",
        "parent_header": [
          "AlphaPeptDeep (PeptDeep)",
          "Usage",
          "Python and Jupyter notebooks"
        ],
        "type": "Text_excerpt",
        "value": "``` python\nfrom peptdeep.protein.fasta import PredictSpecLibFasta\n```\n\n[`PredictSpecLibFasta`](https://alphapeptdeep.readthedocs.io/en/latest/protein/fasta.html#peptdeep.protein.fasta.PredictSpecLibFasta) class provides functionalities to deal with fasta files or protein\nsequences and spectral libraries.\n\nCheck out\n[tutorial_speclib_from_fasta.ipynb](https://github.com/MannLabs/alphapeptdeep/blob/main/docs/nbs/tutorial_speclib_from_fasta.ipynb)\nfor details.\n"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "DDA Rescoring",
        "parent_header": [
          "AlphaPeptDeep (PeptDeep)",
          "Usage",
          "Python and Jupyter notebooks"
        ],
        "type": "Text_excerpt",
        "value": "``` python\nfrom peptdeep.rescore.percolator import Percolator\n```\n\n`Percolator` class provides functionalities to rescore DDA PSMs search by `pFind` and\n`AlphaPept`, (and `MaxQuant` if output FDR=100%), \u2026\n\nCheck out [test_percolator.ipynb](https://github.com/MannLabs/alphapeptdeep/blob/main/nbs_tests/test_percolator.ipynb)\nfor details.\n"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "HLA Peptide Prediction",
        "parent_header": [
          "AlphaPeptDeep (PeptDeep)",
          "Usage",
          "Python and Jupyter notebooks"
        ],
        "type": "Text_excerpt",
        "value": "``` python\nfrom peptdeep.model.model_interface import ModelInterface\nimport peptdeep.model.generic_property_prediction # model shop\n```\n\nBuilding new DL models for peptide property prediction is one of the key features of AlphaPeptDeep. The key functionalities are [`ModelInterface`](https://alphapeptdeep.readthedocs.io/en/latest/model/model_interface.html#peptdeep.model.model_interface.ModelInterface) and the pre-designed models and model interfaces in the model shop (module [`peptdeep.model.generic_property_prediction`](https://alphapeptdeep.readthedocs.io/en/latest/model/generic_property_prediction.html)).\n\nFor example, we can built a HLA classifier that distinguishes HLA peptides from non-HLA peptides, see https://github.com/MannLabs/PeptDeep-HLA for details.\n\n------------------------------------------------------------------------\n"
      },
      "source": "https://raw.githubusercontent.com/MannLabs/alphapeptdeep/main/README.md",
      "technique": "header_analysis"
    }
  ]
}