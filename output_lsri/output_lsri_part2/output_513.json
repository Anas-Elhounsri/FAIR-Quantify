{
  "acknowledgement": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Thanks and Acknowledgment",
        "type": "Text_excerpt",
        "value": "We would like to thank everybody who's developing code for [Nipype](https://github.com/nipy/nipype), [fmriprep](https://fmriprep.readthedocs.io/en/stable/), [Nilearn](https://github.com/nipy/nipype), [PyMVPA](http://www.pymvpa.org/) and many other related open-source toolboxes. We were able to integrate their knowledge, code and approaches in `fMRIflows`, because their code is open.\n\nThanks also to all the contributors, tester, bug reporter and feedback giver to `fMRIflows`. And a special thanks to [Faruk](https://github.com/ofgulban) who created the great `fMRIflows` logo.\n"
      },
      "source": "https://raw.githubusercontent.com/miykael/fmriflows/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "application_domain": [
    {
      "confidence": 50.58,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_of_conduct": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Code of Conduct\n\nWe value the participation of every member of our community and want to ensure an that every contributer has an enjoyable and fulfilling experience. Accordingly, everyone who participates in the BIDSonym project is expected to show respect and courtesy to other community members at all time.\n\nThe lead maintainers of fMRIflows [Michael Notter](https://github.com/miykael) and (to a super small extent) [Peer Herholz](https://github.com/peerherholz) are dedicated to a ***harassment-free experience for everyone***, regardless of gender, gender identity and expression, sexual orientation, disability, physical appearance, body size, race, age or religion. **We do not tolerate harassment by and/or of members of our community in any form**.\n\n*We are particularly motivated to support new and/or anxious collaborators, people who are looking to learn and develop their skills, and anyone who has experienced discrimination in the past.*\n\n## Our expectations\n\nTo make clear what is expected, we ask all members of the community to conform to the following Code of Conduct.\n\n* All communication - online and in person - should be appropriate for a professional audience including people of many different backgrounds. Sexual language and imagery is not appropriate at any time.\n\n* Be kind to others. Do not insult or put down other contributors.\n\n* Behave professionally. Remember that harassment and sexist, racist, or exclusionary jokes are not appropriate.\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nHarassment includes offensive verbal comments related to gender, sexual orientation, disability, physical appearance, body size, race, religion, sexual images in public spaces, deliberate intimidation, stalking, following, harassing photography or recording, sustained disruption of discussions, inappropriate physical contact, and unwelcome sexual attention.\n\nExamples of unacceptable behavior by community members include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n***Participants asked to stop any harassing behavior are expected to comply immediately.***\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Enforcement\n\nMembers of the community who violate these rules - no matter how much they have contributed to the BIDS Starter Kit, or how specialised their skill set - will be approached by Peer or Rita. If inappropriate behaviour persists after this discussion, the contributer will be asked to discontinue their participation in the BIDSonym project.\n\n**To report an issue you have with community interactions** please contact [Michael](https://github.com/miykael) or [Peer](https://github.com/peerherholz). All communication will be treated as confidential.\n\n## Attribution\n\nThis Code of Conduct was built on top of the [Mozilla Science Lab's][mozilla-science-home] [Code of Conduct][mozilla-science-coc] which is in the public domain under a [CC0 license][cc0-link]. It also incorporates part of the [Contributor Covenant][contributor-covenant-home], version 1.4, available at [http://contributor-covenant.org/version/1/4][contributor-covenant-version] and used under a [CC-BY 4.0][ccby-link] license.\n\nThe fMRIflows Code of Conduct is based on the one developed by [Kirstie Whitaker][kirstie-github], originally for the [Brain Networks in Python][bnip-repo] project and provided under a [CC-BY 4.0][ccby-link] license, which means that anyone can remix and reuse the content provided here, without seeking additional permission, so long as it is attributed back to the [fMRIflows][fmriflows-repo] project. Please remember to also attribute the [Contributor Covenant][contributor-covenant-home].\n\n\n[contributor-covenant-home]: http://contributor-covenant.org\n[contributor-covenant-version]: http://contributor-covenant.org/version/1/4\n[ccby-link]: https://creativecommons.org/licenses/by/4.0\n[cc0-link]: https://creativecommons.org/publicdomain/zero/1.0\n[kirstie-github]: https://github.com/kirstiejane\n[bnip-repo]: https://github.com/WhitakerLab/BrainNetworksInPython\n[fmriflows-repo]: https://github.com/miykael/fmriflows\n[mozilla-science-home]: https://science.mozilla.org/\n[mozilla-science-coc]: https://github.com/mozillascience/code_of_conduct\n"
      },
      "source": "https://raw.githubusercontent.com/miykael/fmriflows/master/code_of_conduct.md",
      "technique": "file_exploration"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/miykael/fmriflows"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Contributing to fMRIflows\n\nWelcome to the fMRIflows repository! We're excited you're here and want to contribute.\n\nThese guidelines are designed to make it as easy as possible to get involved. If you have any questions that aren't discussed below, please let us know by opening an [issue][https://github.com/miykael/fmriflows/issues]!\n\nBefore you start you'll need to set up a free [GitHub][https://github.com] account and sign in. Here are some [instructions][https://help.github.com/articles/signing-up-for-a-new-github-account/].\nIf you are not familiar with version control systems such as git,\n [introductions and tutorials](http://www.reproducibleimaging.org/module-reproducible-basics/02-vcs/)\n may be found on [ReproducibleImaging.org](https://www.reproducibleimaging.org).\n\nAlready know what you're looking for in this guide? Jump to the following sections:\n- [Contributing to fMRIflows](#contributing-to-fmriflows)\n  - [Issue labels](#issue-labels)\n  - [Making a change](#making-a-change)\n  - [Notes for New Code](#notes-for-new-code)\n      - [Catching exceptions](#catching-exceptions)\n      - [Testing](#testing)\n  - [Recognizing contributions](#recognizing-contributions)\n  - [Thank you!](#thank-you)\n\n## Issue labels\n\n* [![Bugs](https://img.shields.io/badge/-bugs-fc2929.svg)][link_bugs] *These issues point to problems in the project.*\n\n    If you find new a bug, please provide as much information as possible to recreate the error.\n    The [issue template][link_issue_template] will automatically populate any new issue you open, and contains information we've found to be helpful in addressing bug reports.\n    Please fill it out to the best of your ability!\n\n    If you experience the same bug as one already listed in an open issue, please add any additional information that you have as a comment.\n\n* [![Help Wanted](https://img.shields.io/badge/-help%20wanted-c2e0c6.svg)][link_helpwanted] *These issues contain a task that a member of the team has determined we need additional help with.*\n\n    If you feel that you can contribute to one of these issues, we especially encourage you to do so!\n    Issues that are also labelled as [good-first-issue][link_good_first_issue] are a great place to start if you're looking to make your first contribution.\n\n* [![Enhancement](https://img.shields.io/badge/-enhancement-00FF09.svg)][link_enhancement] *These issues are asking for new features to be added to the project.*\n\n    Please try to make sure that your requested enhancement is distinct from any others that have already been requested or implemented.\n    If you find one that's similar but there are subtle differences, please reference the other request in your issue.\n\n* [![Orphaned](https://img.shields.io/badge/-orphaned-9baddd.svg)][link_orphaned] *These pull requests have been closed for inactivity.*\n\n    Before proposing a new pull request, browse through the \"orphaned\" pull requests.\n    You may find that someone has already made significant progress toward your goal, and you can re-use their\n    unfinished work.\n    An adopted PR should be updated to merge or rebase the current master, and a new PR should be created (see\n    below) that references the original PR.\n\n## Making a change\n\nWe appreciate all contributions to fMRIflows, but those accepted fastest will follow a workflow similar to the following:\n\n**1. Comment on an existing issue or open a new issue referencing your addition.**\n\nThis allows other members of the fMRIflows development team to confirm that you aren't overlapping with work that's currently underway and that everyone is on the same page with the goal of the work you're going to carry out.\n\n[This blog][https://www.igvita.com/2011/12/19/dont-push-your-pull-requests/] is a nice explanation of why putting this work in up front is so useful to everyone involved.\n\n**2. [Fork][https://help.github.com/articles/fork-a-repo/] the [fMRIflows repository][https://github.com/miykael/fmriflows] to your profile.**\n\nThis is now your own unique copy of the fMRIflows repository.\nChanges here won't affect anyone else's work, so it's a safe space to explore edits to the code!\n\nYou can clone your fMRIflows repository in order to create a local copy of the code on your machine.\nTo install your version of fMRIflows, and the dependencies needed for development,\nin your Python environment, run `pip install -e \".[dev]\"` from your local fMRIflows\ndirectory.\n\nMake sure to keep your fork up to date with the original fMRIflows repository.\nOne way to do this is to [configure a new remote named \"upstream\"](https://help.github.com/articles/configuring-a-remote-for-a-fork/)\n and to [sync your fork with the upstream repository][https://help.github.com/articles/syncing-a-fork/].\n\n**3. Make the changes you've discussed.**\n\nBefore pushing your changes to GitHub, run `make check-before-commit`. This will remove trailing spaces, create new auto tests,\ntest the entire package, and build the documentation.\nIf you get no errors, you're ready to submit your changes!\n\nIt's a good practice to create [a new branch](https://help.github.com/articles/about-branches/)\nof the repository for a new set of changes.\n\n\n**4. Submit a [pull request][link_pullrequest].**\n\nA new pull request for your changes should be created from your fork of the repository.\n\nWhen opening a pull request, please use one of the following prefixes:\n\n\n* **[ENH]** for enhancements\n* **[FIX]** for bug fixes\n* **[TST]** for new or updated tests\n* **[DOC]** for new or updated documentation\n* **[STY]** for stylistic changes\n* **[REF]** for refactoring existing code\n\n<br>\nPull requests should be submitted early and often (please don't mix too many unrelated changes within one PR)!\nIf your pull request is not yet ready to be merged, please also include the **[WIP]** prefix (you can remove it once your PR is ready to be merged).\nThis tells the development team that your pull request is a \"work-in-progress\", and that you plan to continue working on it.\n\nReview and discussion on new code can begin well before the work is complete, and the more discussion the better!\nThe development team may prefer a different path than you've outlined, so it's better to discuss it and get approval at the early stage of your work.\n\nOne your PR is ready a member of the development team will review your changes to confirm that they can be merged into the main codebase.\n\n## Notes for New Code\n\n#### Catching exceptions\nIn general, do not catch exceptions without good reason.\nFor non-fatal exceptions, log the exception as a warning and add more information about what may have caused the error.\n\nIf you do need to catch an exception, raise a new exception using ``raise_from(NewException(\"message\"), oldException)`` from ``future``.\nDo not log this, as it creates redundant/confusing logs.\n\n#### Testing\nNew code should be tested, whenever feasible.\nBug fixes should include an example that exposes the issue.\nAny new features should have tests that show at least a minimal example.\nIf you're not sure what this means for your code, please ask in your pull request.\n\n## Recognizing contributions\n\nWe welcome and recognize all contributions from documentation to testing to code development.\n\nThe development team member who accepts/merges your pull request will update the CHANGES file to reference your contribution.\n\n## Thank you!\n\nYou're awesome. :wave::smiley:\n\n<br>\n\n*&mdash; Based on contributing guidelines from the [STEMMRoleModels][link_stemmrolemodels] project.*\n"
      },
      "source": "https://raw.githubusercontent.com/miykael/fmriflows/master/contributing.md",
      "technique": "file_exploration"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-06-25T21:38:55Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-07-24T05:39:22Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "fmriflows is a consortium of many (dependent) fMRI analysis pipelines, including anatomical and functional pre-processing, univariate 1st and 2nd-level analysis, as well as multivariate pattern analysis."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9927655143961968,
      "result": {
        "original_header": "fMRIflows",
        "type": "Text_excerpt",
        "value": "**`fMRIflows`** is a collection of fully autonomous uni- & multivariate fMRI processing pipelines. This comprises anatomical and functional preprocessing, estimation of singal confounds, as well as univariate and multivariate analysis on the subject and group level. \nAs is rather obvious, `fMRIflows` was greatly inspired by [fmriprep](https://github.com/poldracklab/fmriprep) and other open source projects and borrows strongly from their ideas and solutions. But while [fmriprep](https://github.com/poldracklab/fmriprep) can be described as a \"glass\" box software, `fMRIflows` is more like a shoebox. Simple to open, easy to understand what's inside and uncomplicated to replace and change components inside. This is all due to the fact that all the source code of `fMRIflows` is stored within the notebooks. \nIf you are using **`fMRIflows`** in your publication, please contact the author [Michael Notter](https://github.com/miykael) to get further information about how to cite this toolbox, as the publication is currently *in preparation for submission*.\n \n"
      },
      "source": "https://raw.githubusercontent.com/miykael/fmriflows/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9889233943887372,
      "result": {
        "original_header": "`fMRIflows` pipelines",
        "type": "Text_excerpt",
        "value": "`fMRIflows` contains many different pipelines. The following is a short summary and explanation of each individual notebook.\n \n"
      },
      "source": "https://raw.githubusercontent.com/miykael/fmriflows/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.915767272763361,
      "result": {
        "original_header": "01_spec_preparation.ipynb",
        "type": "Text_excerpt",
        "value": "The notebook [01_spec_preparation.ipynb](https://nbviewer.jupyter.org/github/miykael/fmriflows/blob/master/notebooks/01_spec_preparation.ipynb) helps you to create the `JSON` files that contain the specifiation to run `fMRIflows`. This is the most direct way to specify the processing parameters for `fMRIflows`. Open the notebook, run it, change a few parameters as you want and you're good to go. Alternatively, you can also directly change the `JSON` specification file within your dataset folder (but you need to run `01_spec_preparation.ipynb` for this to work at least once).\n \n"
      },
      "source": "https://raw.githubusercontent.com/miykael/fmriflows/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.906113235957989,
      "result": {
        "original_header": "02_preproc_anat.ipynb",
        "type": "Text_excerpt",
        "value": " - `subject_list_anat`: List of subject identifier to preprocess\n - `session_list_anat`: List of session identifier to preprocess (set to `[]` if dataset doesn't contain session identifiers)\n - `T1w_id`: T1-image identifier, usually `T1w`. For MP2RAGE acquisiton, this can for example be changed to `T1w_UNI-DEN`\n - `res_norm`: Requested voxel resolution after normalization\n - `norm_accuracy`: Precision accuracy of the normalization. This can be either `precise` or `fast` \nThe simplified workflow of the anatomical preprocessing looks as follows: \n"
      },
      "source": "https://raw.githubusercontent.com/miykael/fmriflows/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9943120371663978,
      "result": {
        "original_header": "Tissue Segmentation of T1w",
        "type": "Text_excerpt",
        "value": "This panel shows quality of the T1-weighted image segmentation, with brain tissues highlighted in green for Gray Matter (GM), in beige for White Matter (WM) and in blue for Cerebrospinal Fluid (CSF). \n"
      },
      "source": "https://raw.githubusercontent.com/miykael/fmriflows/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9641746342056347,
      "result": {
        "original_header": "Brain Extraction of T1w",
        "type": "Text_excerpt",
        "value": "This panel shows the quality of the brain extraction. The brain highlighted in red is overlayed on the subject specific T1-weighted image in gray. \n"
      },
      "source": "https://raw.githubusercontent.com/miykael/fmriflows/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9827547416362384,
      "result": {
        "original_header": "T1w to MNI registration",
        "type": "Text_excerpt",
        "value": "This panel shows the quality of the nonlinear template registration. The normalized brain highlighted in yellow is overlayed on the ICBM T1-weighted template image in gray. Regions in red and blue show negative and positive deformation discrepancy between the normalized subject image and the template. \n"
      },
      "source": "https://raw.githubusercontent.com/miykael/fmriflows/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.989717347237604,
      "result": {
        "original_header": "03_preproc_func.ipynb",
        "type": "Text_excerpt",
        "value": " - `subject_list_func`: List of subject identifier to preprocess\n - `session_list_func`: List of session identifier to preprocess (set to `[]` if dataset doesn't contain session identifiers)\n - `task_list`: List of task identifier to preprocess\n - `run_list`: List of run identifiers (`int`) to preprocess (set to `[]` if dataset doesn't contain session identifiers)\n - `ref_timepoint`: Reference timepoint for slicetime correction, in milliseconds\n - `res_func`: Isometric resample resolution for after image coregistration\n - `filters_spatial`: List of spatial filters to apply. Use `LP` for lowpass, `HP` for highpass and `BP` for bandpass spatial filtering. For example [[`LP`, 6.0], [`HP`, 2.0]] will run the analysis once with a spatial lowpass filter of FWHM=6mm and once with a spatial highpass filter of FWHM=2mm.\n - `filters_temporal`: List of temporal filters to apply. First element will define lowpass, second highpass cutoff. Use `null` to not use given filter. For example `[[5.0, 100.0], [null, 100.0]]` will run the analysis once with a temporal lowpass filter of 5Hz and highpass filter of 100Hz, and once with a temporal filter of only a highpass filter of 100Hz.,\n - `n_compcor_confounds`: Number of anatomical and functional CompCor componenets to compute. Defautl is 5.\n - `outlier_thresholds`: Thresholds used to performe outlier detection on FD, DVARS, TV, GM, WM and CSF. Use `None` if parameter shouldn't be used for outlier detection.\n - `n_independent_components`: Number of ICA components that should be estimaed. Default is 10. \nAdditionally to the preprocessing, the following signal confounds are computed:\n - Friston's 24-parameter model for motion parameters\n - Framewise Displacement (FD) and DVARS\n - Average signal in total volume (TV), in GM, in WM and in CSF\n - Anatomical and temporal CompCor components\n - Independent components in image before smoothing \n"
      },
      "source": "https://raw.githubusercontent.com/miykael/fmriflows/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9556125144018314,
      "result": {
        "original_header": "Mean Image and CompCor Masks",
        "type": "Text_excerpt",
        "value": "This panel shows the mean functional image in gray, and the brainmask (red) that was used to compute DVARS and the temporal (green) and anatomical (blue) CompCor mask. \n"
      },
      "source": "https://raw.githubusercontent.com/miykael/fmriflows/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9618025471313995,
      "result": {
        "original_header": "Carpet plot of the temporal filtered functional image",
        "type": "Text_excerpt",
        "value": "This panel shows the signal for (almost) every voxel (y-axis), over time in volumes (x-axis). The panel shows voxel in the gray matter (top part), white matter (between blue and red line) and CSF (bottom section). The data was standardized to the global signal, and ordered within a given region according to correlation coefficient to the average signal. \n"
      },
      "source": "https://raw.githubusercontent.com/miykael/fmriflows/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.970722875958351,
      "result": {
        "original_header": "Main confounds with highlighted outliers",
        "type": "Text_excerpt",
        "value": "This panel shows the main confounds. Shown are FD (Framewise Displacement) and DVARS, as well as the average signal in TV (total brain volume), GM (gray matter), WM (white matter) and CSF (cerebral spinal fluid). Vertical lines in black indicate outliers, as defined by threshold values. \n"
      },
      "source": "https://raw.githubusercontent.com/miykael/fmriflows/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8371760637252085,
      "result": {
        "original_header": "Motion Parameters",
        "type": "Text_excerpt",
        "value": "This panel shows the motion parameters (3 rotation and 3 translation parameters). Colored lines are motion parameters after the application of a temporal low-pass filter at 5Hz. Gray lines indicate motion parameters before temporal filter were applied. \n"
      },
      "source": "https://raw.githubusercontent.com/miykael/fmriflows/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9155080150351242,
      "result": {
        "original_header": "ICA Components",
        "type": "Text_excerpt",
        "value": "This panel shows the ICA components. Left side of the figure shows the correlation between the component and the functional image, over time. The right panel shows the power spectrum density of this component, with values in Hz on the x-axis. \n"
      },
      "source": "https://raw.githubusercontent.com/miykael/fmriflows/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/miykael/fmriflows/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/miykael/fmriflows/master/notebooks/02_preproc_anat.ipynb"
      },
      "source": "https://raw.githubusercontent.com/miykael/fmriflows/master/notebooks/02_preproc_anat.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/miykael/fmriflows/master/notebooks/01_spec_preparation.ipynb"
      },
      "source": "https://raw.githubusercontent.com/miykael/fmriflows/master/notebooks/01_spec_preparation.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/miykael/fmriflows/master/notebooks/06_analysis_multivariate.ipynb"
      },
      "source": "https://raw.githubusercontent.com/miykael/fmriflows/master/notebooks/06_analysis_multivariate.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/miykael/fmriflows/master/notebooks/04_analysis_1st-level.ipynb"
      },
      "source": "https://raw.githubusercontent.com/miykael/fmriflows/master/notebooks/04_analysis_1st-level.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/miykael/fmriflows/master/notebooks/03_preproc_func.ipynb"
      },
      "source": "https://raw.githubusercontent.com/miykael/fmriflows/master/notebooks/03_preproc_func.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/miykael/fmriflows/master/notebooks/05_analysis_2nd-level.ipynb"
      },
      "source": "https://raw.githubusercontent.com/miykael/fmriflows/master/notebooks/05_analysis_2nd-level.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/miykael/fmriflows/master/paper/02_validation/plot_estimaed_fwhm.ipynb"
      },
      "source": "https://raw.githubusercontent.com/miykael/fmriflows/master/paper/02_validation/plot_estimaed_fwhm.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 20
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/miykael/fmriflows/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "miykael/fmriflows"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "fMRIflows"
      },
      "source": "https://raw.githubusercontent.com/miykael/fmriflows/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/miykael/fmriflows/master/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/miykael/fmriflows/master/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/miykael/fmriflows/master/generate.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/miykael/fmriflows/master/paper/02_validation/TR2000/script_01_FWHMx.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/miykael/fmriflows/master/paper/02_validation/TR1000/script_01_FWHMx.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/miykael/fmriflows/master/paper/02_validation/TR600/script_01_FWHMx.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/miykael/fmriflows/master/paper/01_preprocessing/fsl_feat_TR1000.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/miykael/fmriflows/master/paper/01_preprocessing/fmriprep_TR2000.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/miykael/fmriflows/master/paper/01_preprocessing/fsl_feat_TR600.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/miykael/fmriflows/master/paper/01_preprocessing/fsl_feat_TR2000.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/miykael/fmriflows/master/paper/01_preprocessing/fmriprep_TR600.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/miykael/fmriflows/master/paper/01_preprocessing/fmriprep_TR1000.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github-basic-badges.herokuapp.com/commits/miykael/fmriflows.svg"
      },
      "source": "https://raw.githubusercontent.com/miykael/fmriflows/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github-size-badge.herokuapp.com/miykael/fmriflows.svg"
      },
      "source": "https://raw.githubusercontent.com/miykael/fmriflows/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/miykael/fmriflows/master/static/preproc_anat.png"
      },
      "source": "https://raw.githubusercontent.com/miykael/fmriflows/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/miykael/fmriflows/master/static/outputs/preproc_anat_segmentation.png"
      },
      "source": "https://raw.githubusercontent.com/miykael/fmriflows/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/miykael/fmriflows/master/static/outputs/preproc_anat_brain.png"
      },
      "source": "https://raw.githubusercontent.com/miykael/fmriflows/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/miykael/fmriflows/master/static/outputs/preproc_anat_normalized.png"
      },
      "source": "https://raw.githubusercontent.com/miykael/fmriflows/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/miykael/fmriflows/master/static/preproc_func.png"
      },
      "source": "https://raw.githubusercontent.com/miykael/fmriflows/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/miykael/fmriflows/master/static/outputs/preproc_func_overlays.png"
      },
      "source": "https://raw.githubusercontent.com/miykael/fmriflows/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/miykael/fmriflows/master/static/outputs/preproc_func_carpet_nofilt.png"
      },
      "source": "https://raw.githubusercontent.com/miykael/fmriflows/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/miykael/fmriflows/master/static/outputs/preproc_func_confounds_main_nofilt.png"
      },
      "source": "https://raw.githubusercontent.com/miykael/fmriflows/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/miykael/fmriflows/master/static/outputs/preproc_func_confounds_motion_filt.png"
      },
      "source": "https://raw.githubusercontent.com/miykael/fmriflows/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/miykael/fmriflows/master/static/outputs/preproc_func_confounds_compA_nofilt.png"
      },
      "source": "https://raw.githubusercontent.com/miykael/fmriflows/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/miykael/fmriflows/master/static/outputs/preproc_func_confounds_compT_nofilt.png"
      },
      "source": "https://raw.githubusercontent.com/miykael/fmriflows/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/miykael/fmriflows/master/static/outputs/preproc_func_ICA_comp_signal_nofilt.png"
      },
      "source": "https://raw.githubusercontent.com/miykael/fmriflows/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/miykael/fmriflows/master/static/outputs/preproc_func_ICA_comp_brain_nofilt.png"
      },
      "source": "https://raw.githubusercontent.com/miykael/fmriflows/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Using Containers",
        "parent_header": [
          "Installation and Usage"
        ],
        "type": "Text_excerpt",
        "value": "The best way to use `fMRIflows` is to run it directly within the corresponding container ([Docker](https://www.docker.com/) or [Singularity](https://www.sylabs.io)). The docker image for this can be downloaded from [Docker Hub](https://hub.docker.com/r/miykael/fmriflows/) with the command `docker pull miykael/fmriflows`, and can be run with the command:\n\n```\ndocker run -it --rm -p 9999:8888 -v /home/user/ds001:/data miykael/fmriflows\n```\n\n- The **`-it`** means that docker will be run in an interactive mode.\n- The **`--rm`** means that the docker container (not the image!) will be removed from your system, once you close the container.\n- The **`-p`** flag specifies which port should be used to access the jupyter notebook inside the docker container. The first 4 numbers can be changed (we recommend `9999`), but the second half needs to be fixed to `:8888`.\n- The **`-v`** flag tells docker which folder to mount within the docker container. The path `/home/user/ds001` should therefore point to your BIDS conform dataset.\n\nOnce this command has been executed (note: the terminal will not go back to a new input prompt, but rather stays on this command) you need to copy paste/open the link [http://127.0.0.1:9999/?token=fmriflows](http://127.0.0.1:9999/?token=fmriflows) or [http://localhost:9999/?token=fmriflows](http://localhost:9999/?token=fmriflows) in your web browser to access the jupyter notebooks required to run fMRIflows.\n\n**Note**: Should you by any chance encounter a web page that asks you for \"Password or token\", use the token `fmriflows` to login.\n"
      },
      "source": "https://raw.githubusercontent.com/miykael/fmriflows/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Using your native environment",
        "parent_header": [
          "Installation and Usage"
        ],
        "type": "Text_excerpt",
        "value": "It is also possible to run `fMRIflows` outside of a container. All the important code is stored within the [notebooks](https://github.com/miykael/fmriflows/tree/master/notebooks). But for this, you need to make sure that all necessary neuroimaging and python dependencies are installed on your system. For a list of what needs to be done, see the [generating](https://github.com/miykael/fmriflows/blob/master/generate.sh) file.\n"
      },
      "source": "https://raw.githubusercontent.com/miykael/fmriflows/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9994300476682169,
      "result": {
        "original_header": "01_spec_preparation.ipynb",
        "type": "Text_excerpt",
        "value": "The notebook [01_spec_preparation.ipynb](https://nbviewer.jupyter.org/github/miykael/fmriflows/blob/master/notebooks/01_spec_preparation.ipynb) helps you to create the `JSON` files that contain the specifiation to run `fMRIflows`. This is the most direct way to specify the processing parameters for `fMRIflows`. Open the notebook, run it, change a few parameters as you want and you're good to go. Alternatively, you can also directly change the `JSON` specification file within your dataset folder (but you need to run `01_spec_preparation.ipynb` for this to work at least once).\n \n"
      },
      "source": "https://raw.githubusercontent.com/miykael/fmriflows/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8010591583266955,
      "result": {
        "original_header": "02_preproc_anat.ipynb",
        "type": "Text_excerpt",
        "value": "<img src=\"static/preproc_anat.png\" width=\"400px\"  class=\"center\"> \n"
      },
      "source": "https://raw.githubusercontent.com/miykael/fmriflows/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8010591583266955,
      "result": {
        "original_header": "03_preproc_func.ipynb",
        "type": "Text_excerpt",
        "value": "<img src=\"static/preproc_func.png\" width=\"500px\"  class=\"center\"> \n"
      },
      "source": "https://raw.githubusercontent.com/miykael/fmriflows/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/miykael/fmriflows/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bids, fmri, neuroimaging, python"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "BSD 3-Clause \"New\" or \"Revised\" License",
        "spdx_id": "BSD-3-Clause",
        "type": "License",
        "url": "https://api.github.com/licenses/bsd-3-clause",
        "value": "https://api.github.com/licenses/bsd-3-clause"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "BSD 3-Clause License\n\nCopyright (c) 2018, Michael Notter and the fMRIflows developers\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of the copyright holder nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
      },
      "source": "https://raw.githubusercontent.com/miykael/fmriflows/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/miykael/fmriflows/master/notebooks/templates/logo_fmriflows.gif"
      },
      "source": "https://raw.githubusercontent.com/miykael/fmriflows/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "fmriflows"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "miykael"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "MATLAB",
        "size": 832653,
        "type": "Programming_language",
        "value": "MATLAB"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 306132,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 167089,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 27582,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 19827,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Singularity",
        "size": 16585,
        "type": "Programming_language",
        "value": "Singularity"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 11712,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/miykael/fmriflows/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://fmriprep.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/miykael/fmriflows/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "identifier"
  ],
  "somef_provenance": {
    "date": "2024-10-04 10:58:57",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 60
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Feedback, Help &amp; Support",
        "type": "Text_excerpt",
        "value": "If you want to help with this project or have any questions, fell free to fork the repo, send us a pull request or open a new [issue on github](https://github.com/miykael/fmriflows/issues). Every help is highly appreciated, every feature request or bug report is very welcomed.\n\n"
      },
      "source": "https://raw.githubusercontent.com/miykael/fmriflows/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Using Containers",
        "parent_header": [
          "Installation and Usage"
        ],
        "type": "Text_excerpt",
        "value": "The best way to use `fMRIflows` is to run it directly within the corresponding container ([Docker](https://www.docker.com/) or [Singularity](https://www.sylabs.io)). The docker image for this can be downloaded from [Docker Hub](https://hub.docker.com/r/miykael/fmriflows/) with the command `docker pull miykael/fmriflows`, and can be run with the command:\n\n```\ndocker run -it --rm -p 9999:8888 -v /home/user/ds001:/data miykael/fmriflows\n```\n\n- The **`-it`** means that docker will be run in an interactive mode.\n- The **`--rm`** means that the docker container (not the image!) will be removed from your system, once you close the container.\n- The **`-p`** flag specifies which port should be used to access the jupyter notebook inside the docker container. The first 4 numbers can be changed (we recommend `9999`), but the second half needs to be fixed to `:8888`.\n- The **`-v`** flag tells docker which folder to mount within the docker container. The path `/home/user/ds001` should therefore point to your BIDS conform dataset.\n\nOnce this command has been executed (note: the terminal will not go back to a new input prompt, but rather stays on this command) you need to copy paste/open the link [http://127.0.0.1:9999/?token=fmriflows](http://127.0.0.1:9999/?token=fmriflows) or [http://localhost:9999/?token=fmriflows](http://localhost:9999/?token=fmriflows) in your web browser to access the jupyter notebooks required to run fMRIflows.\n\n**Note**: Should you by any chance encounter a web page that asks you for \"Password or token\", use the token `fmriflows` to login.\n"
      },
      "source": "https://raw.githubusercontent.com/miykael/fmriflows/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Using your native environment",
        "parent_header": [
          "Installation and Usage"
        ],
        "type": "Text_excerpt",
        "value": "It is also possible to run `fMRIflows` outside of a container. All the important code is stored within the [notebooks](https://github.com/miykael/fmriflows/tree/master/notebooks). But for this, you need to make sure that all necessary neuroimaging and python dependencies are installed on your system. For a list of what needs to be done, see the [generating](https://github.com/miykael/fmriflows/blob/master/generate.sh) file.\n"
      },
      "source": "https://raw.githubusercontent.com/miykael/fmriflows/master/README.md",
      "technique": "header_analysis"
    }
  ]
}