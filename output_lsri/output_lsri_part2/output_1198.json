{
  "application_domain": [
    {
      "confidence": 53.77,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/royerlab/cytoself"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-04-27T05:29:13Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-13T22:56:41Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Self-supervised models for encoding protein localization patterns from microscopy images"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9301449931679326,
      "result": {
        "original_header": "cytoself",
        "type": "Text_excerpt",
        "value": "cytoself in pytorch implementation. \nThe original cytoself implemented in tensorflow is archived in the branch [cytoself-tensorflow](https://github.com/royerlab/cytoself/tree/cytoself-tensorflow). \ncytoself is a self-supervised platform for learning features of protein subcellular localization from microscopy \nimages [[1]](https://www.nature.com/articles/s41592-022-01541-z).\nThe representations derived from cytoself encapsulate highly specific features that can derive functional insights for \nproteins on the sole basis of their localization. \nApplying cytoself to images of endogenously labeled proteins from the recently released \n[OpenCell](https://opencell.czbiohub.org) database creates a highly resolved protein localization atlas\n[[2]](https://www.science.org/doi/10.1126/science.abi6983).  \n[1] Kobayashi, Hirofumi, _et al._ \"Self-Supervised Deep-Learning Encodes High-Resolution Features of Protein \nSubcellular Localization.\" _Nature Methods_ (2022).\nhttps://www.nature.com/articles/s41592-022-01541-z <br />\n[2] Cho, Nathan H., _et al._ \"OpenCell: Endogenous tagging for the cartography of human cellular organization.\" \n_Science_ 375.6585 (2022): eabi6983.\nhttps://www.science.org/doi/10.1126/science.abi6983 \n"
      },
      "source": "https://raw.githubusercontent.com/royerlab/cytoself/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9925061172085436,
      "result": {
        "original_header": "How cytoself works",
        "type": "Text_excerpt",
        "value": "cytoself uses images (cell images where only single type of protein is fluorescently labeled) and its identity \ninformation (protein ID) as a label to learn the localization patterns of proteins. \n"
      },
      "source": "https://raw.githubusercontent.com/royerlab/cytoself/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8972184600968012,
      "result": {
        "original_header": "Known Issues",
        "type": "Text_excerpt",
        "value": "There seems to be compatibility issues of python multiprocessing on Windows, \ncausing a DataLoader unable to load data ([issue](https://github.com/royerlab/cytoself/issues/32), [issue](https://github.com/royerlab/cytoself/issues/33)). \nPlease try [the temporal workaround](https://github.com/royerlab/cytoself/issues/32#issuecomment-1815910434). \n"
      },
      "source": "https://raw.githubusercontent.com/royerlab/cytoself/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8832083570519654,
      "result": {
        "original_header": "Data Availability",
        "type": "Text_excerpt",
        "value": "The full data used in this work can be found here.\nThe image data have the shape of `[batch, 100, 100, 4]`, in which the last channel dimension corresponds to `[target \nprotein, nucleus, nuclear distance, nuclear segmentation]`. \nDue to the large size, the whole data is split to 10 files. The files are intended to be concatenated together to \nform one large numpy file or one large csv. \n"
      },
      "source": "https://raw.githubusercontent.com/royerlab/cytoself/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/royerlab/cytoself/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/royerlab/cytoself/main/example_scripts/simple_example.ipynb"
      },
      "source": "https://raw.githubusercontent.com/royerlab/cytoself/main/example_scripts/simple_example.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 15
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/royerlab/cytoself/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "royerlab/cytoself"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "cytoself"
      },
      "source": "https://raw.githubusercontent.com/royerlab/cytoself/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "identifier": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://doi.org/10.1038/s41592-022-01541-z"
      },
      "source": "https://raw.githubusercontent.com/royerlab/cytoself/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://zenodo.org/doi/10.5281/zenodo.13761237"
      },
      "source": "https://raw.githubusercontent.com/royerlab/cytoself/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/royerlab/cytoself/main/images/3DUMAP.gif"
      },
      "source": "https://raw.githubusercontent.com/royerlab/cytoself/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/royerlab/cytoself/main/images/workflow.jpg"
      },
      "source": "https://raw.githubusercontent.com/royerlab/cytoself/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://colab.research.google.com/assets/colab-badge.svg"
      },
      "source": "https://raw.githubusercontent.com/royerlab/cytoself/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/royerlab/cytoself/main/images/UMAP_vqvec2.png"
      },
      "source": "https://raw.githubusercontent.com/royerlab/cytoself/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "cytoself"
        ],
        "type": "Text_excerpt",
        "value": "Recommended: create a new environment and install cytoself on the environment from pypi\n\n(Optional) To run cytoself on GPUs, it is recommended to install pytorch GPU version before installing cytoself \nfollowing the [official instruction](https://pytorch.org/get-started/locally/). The way to install pytorch GPU may vary upon your OS and CUDA version.\n```shell script\nconda create -y -n cytoself python=3.9\nconda activate cytoself\n# (Optional: Install pytorch GPU following the official instruction)\npip install -e .\n```\n"
      },
      "source": "https://raw.githubusercontent.com/royerlab/cytoself/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "(For the developers) Install from this repository",
        "parent_header": [
          "cytoself",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "Install development dependencies\n\n```bash\npip install -r requirements/development.txt\npre-commit install\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/royerlab/cytoself/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1. Prepare Data",
        "parent_header": [
          "cytoself",
          "How to use cytoself on the sample data"
        ],
        "type": "Text_excerpt",
        "value": "```python\nfrom cytoself.datamanager.opencell import DataManagerOpenCell\n\ndata_ch = ['pro', 'nuc']\ndatapath = 'sample_data'  # path to download sample data\nDataManagerOpenCell.download_sample_data(datapath)  # donwload data\ndatamanager = DataManagerOpenCell(datapath, data_ch, fov_col=None)\ndatamanager.const_dataloader(batch_size=32, label_name_position=1)\n```\nA folder, `sample_data`, will be created and sample data will be downloaded to this folder.\nThe `sample_data` folder will be created in the \"current working directory,\" which is where you are running the code. \nUse `os.getcwd()` to check where the current working directory is.\n\n9 sets of data with 4 files for each protein (in total 36 files) will be downloaded. \nThe file name is in the form of `<protein_name>_<channel or label>.npy`.  \n\n* **`*_label.npy` file**:\nContains label information in 3 columns, i.e. Ensembl ID, protein name and localization.\n* **`*_pro.npy` file**:\nImage data of protein channel. Size 100x100. Images were cropped with nucleus being centered \n(see details in [paper](https://doi.org/10.1038/s41592-022-01541-z)).\n* **`*_nuc.npy` file**:\nImage data of nucleus channel. Size 100x100. Images were cropped with nucleus being centered \n(see details in [paper](https://doi.org/10.1038/s41592-022-01541-z)).\n* **`*_nucdist.npy` file**:\nData of nucleus distance map. Size 100x100. Images were cropped with nucleus being centered \n(see details in [paper](https://doi.org/10.1038/s41592-022-01541-z)).\n\n"
      },
      "source": "https://raw.githubusercontent.com/royerlab/cytoself/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9413668294136054,
      "result": {
        "original_header": "cytoself",
        "type": "Text_excerpt",
        "value": "**Note: Branch names have been changed.** `cytoself-pytorch` -> `main`, the previous `main` -> `cytoself-tensorflow`. \n"
      },
      "source": "https://raw.githubusercontent.com/royerlab/cytoself/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.99999999999946,
      "result": {
        "original_header": "Tested Environments",
        "type": "Text_excerpt",
        "value": "Rocky Linux 8.6, NVIDIA A100, CUDA 11.7 (GPU)<br/>\nUbuntu 20.04.3 LTS, NVIDIA 3090, CUDA 11.4 (GPU)<br/>\nUbuntu 22.04.3 LTS, NVIDIA 4090, CUDA 12.2 (GPU) \n"
      },
      "source": "https://raw.githubusercontent.com/royerlab/cytoself/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9682483690141205,
      "result": {
        "original_header": "Known Issues",
        "type": "Text_excerpt",
        "value": "There seems to be compatibility issues of python multiprocessing on Windows, \ncausing a DataLoader unable to load data ([issue](https://github.com/royerlab/cytoself/issues/32), [issue](https://github.com/royerlab/cytoself/issues/33)). \nPlease try [the temporal workaround](https://github.com/royerlab/cytoself/issues/32#issuecomment-1815910434). \n"
      },
      "source": "https://raw.githubusercontent.com/royerlab/cytoself/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/royerlab/cytoself/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "autoencoder, deep-learning, fluorescence, imaging, microscopy, opencell, protein, pytorch, self-supervised, self-supervised-learning, tensorflow"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "BSD 3-Clause \"New\" or \"Revised\" License",
        "spdx_id": "BSD-3-Clause",
        "type": "License",
        "url": "https://api.github.com/licenses/bsd-3-clause",
        "value": "https://api.github.com/licenses/bsd-3-clause"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "BSD 3-Clause License\n\nCopyright (c) 2022, Royer Lab\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its\n   contributors may be used to endorse or promote products derived from\n   this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
      },
      "source": "https://raw.githubusercontent.com/royerlab/cytoself/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "cytoself"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "royerlab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 237391,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 8833,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/royerlab/cytoself/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "royerloic",
          "type": "User"
        },
        "date_created": "2023-11-20T03:03:44Z",
        "date_published": "2024-09-13T22:54:34Z",
        "description": "to get DOI",
        "html_url": "https://github.com/royerlab/cytoself/releases/tag/0.1.0.0",
        "name": "Version 0.1.0.0",
        "release_id": 175048573,
        "tag": "0.1.0.0",
        "tarball_url": "https://api.github.com/repos/royerlab/cytoself/tarball/0.1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/royerlab/cytoself/releases/175048573",
        "value": "https://api.github.com/repos/royerlab/cytoself/releases/175048573",
        "zipball_url": "https://api.github.com/repos/royerlab/cytoself/zipball/0.1.0.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "li-li-github",
          "type": "User"
        },
        "date_created": "2022-09-29T21:09:31Z",
        "date_published": "2022-09-29T21:26:23Z",
        "description": "This is the final release for Tensorflow and Keras implementation. cytoself will be migrated to pytorch implementation from the next release.",
        "html_url": "https://github.com/royerlab/cytoself/releases/tag/0.0.1.4",
        "name": "Final release for Tensorflow/Keras",
        "release_id": 78636842,
        "tag": "0.0.1.4",
        "tarball_url": "https://api.github.com/repos/royerlab/cytoself/tarball/0.0.1.4",
        "type": "Release",
        "url": "https://api.github.com/repos/royerlab/cytoself/releases/78636842",
        "value": "https://api.github.com/repos/royerlab/cytoself/releases/78636842",
        "zipball_url": "https://api.github.com/repos/royerlab/cytoself/zipball/0.0.1.4"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-04 13:32:52",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 73
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "How to use cytoself on the sample data",
        "parent_header": [
          "cytoself"
        ],
        "type": "Text_excerpt",
        "value": "Download one set of the image and label data from [Data Availability](#data-availability).\n[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/royerlab/cytoself/blob/main/example_scripts/simple_example.ipynb)\nis available.\n\n"
      },
      "source": "https://raw.githubusercontent.com/royerlab/cytoself/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2. Create and train a cytoself model",
        "parent_header": [
          "cytoself",
          "How to use cytoself on the sample data"
        ],
        "type": "Text_excerpt",
        "value": "```python\nfrom cytoself.trainer.cytoselflite_trainer import CytoselfFullTrainer\n\nmodel_args = {\n    'input_shape': (2, 100, 100),\n    'emb_shapes': ((25, 25), (4, 4)),\n    'output_shape': (2, 100, 100),\n    'fc_output_idx': [2],\n    'vq_args': {'num_embeddings': 512, 'embedding_dim': 64},\n    'num_class': len(datamanager.unique_labels),\n    'fc_input_type': 'vqvec',\n}\ntrain_args = {\n    'lr': 1e-3,\n    'max_epoch': 1,\n    'reducelr_patience': 3,\n    'reducelr_increment': 0.1,\n    'earlystop_patience': 6,\n}\ntrainer = CytoselfFullTrainer(train_args, homepath='demo_output', model_args=model_args)\ntrainer.fit(datamanager, tensorboard_path='tb_logs')\n```\n"
      },
      "source": "https://raw.githubusercontent.com/royerlab/cytoself/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3. Plot UMAP",
        "parent_header": [
          "cytoself",
          "How to use cytoself on the sample data"
        ],
        "type": "Text_excerpt",
        "value": "```python\nfrom cytoself.analysis.analysis_opencell import AnalysisOpenCell\n\nanalysis = AnalysisOpenCell(datamanager, trainer)\numap_data = analysis.plot_umap_of_embedding_vector(\n    data_loader=datamanager.test_loader,\n    group_col=2,\n    output_layer=f'{model_args[\"fc_input_type\"]}2',\n    title=f'UMAP {model_args[\"fc_input_type\"]}2',\n    xlabel='UMAP1',\n    ylabel='UMAP2',\n    s=0.3,\n    alpha=0.5,\n    show_legend=True,\n)\n```\nThe output UMAP plot will be saved at `demo_output/analysis/umap_figures/UMAP_vqvec2.png` by default.\n\n![Result_UMAP](images/UMAP_vqvec2.png)\n\n"
      },
      "source": "https://raw.githubusercontent.com/royerlab/cytoself/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "4. Plot feature spectrum",
        "parent_header": [
          "cytoself",
          "How to use cytoself on the sample data"
        ],
        "type": "Text_excerpt",
        "value": "```python\n# Compute bi-clustering heatmap\nanalysis.plot_clustermap(num_workers=4)\n\n# Prepare image data\nimg = next(iter(datamanager.test_loader))['image'].detach().cpu().numpy()[:1]\n\n# Compute index histogram\nvqindhist1 = trainer.infer_embeddings(img, 'vqindhist1')\n\n# Reorder the index histogram according to the bi-clustering heatmap\nft_spectrum = analysis.compute_feature_spectrum(vqindhist1)\n\n# Generate a plot\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nx_max = ft_spectrum.shape[1] + 1\nx_ticks = np.arange(0, x_max, 50)\nfig, ax = plt.subplots(figsize=(10, 3))\nax.stairs(ft_spectrum[0], np.arange(x_max), fill=True)\nax.spines[['right', 'top']].set_visible(False)\nax.set_xlabel('Feature index')\nax.set_ylabel('Counts')\nax.set_xlim([0, x_max])\nax.set_xticks(x_ticks, analysis.feature_spectrum_indices[x_ticks])\nfig.tight_layout()\nfig.show()\n```\n"
      },
      "source": "https://raw.githubusercontent.com/royerlab/cytoself/main/README.md",
      "technique": "header_analysis"
    }
  ]
}