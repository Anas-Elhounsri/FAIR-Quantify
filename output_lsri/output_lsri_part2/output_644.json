{
  "application_domain": [
    {
      "confidence": 26.85,
      "result": {
        "type": "String",
        "value": "Natural Language Processing"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "author": "Nguyen, Ngoc-Quang and Jang, Gwanghoon and Kim, Hajung and Kang, Jaewoo",
        "doi": "10.1093/bioinformatics/btac731",
        "format": "bibtex",
        "title": "{Perceiver CPI: A nested cross-attention network for compound-protein interaction prediction}",
        "type": "Text_excerpt",
        "url": "https://doi.org/10.1093/bioinformatics/btac731",
        "value": "@article{10.1093/bioinformatics/btac731,\n    eprint = {https://academic.oup.com/bioinformatics/advance-article-pdf/doi/10.1093/bioinformatics/btac731/47214739/btac731.pdf},\n    note = {btac731},\n    url = {https://doi.org/10.1093/bioinformatics/btac731},\n    doi = {10.1093/bioinformatics/btac731},\n    issn = {1367-4803},\n    abstract = {{Compound-protein interaction (CPI) plays an essential role in drug discovery and is performed via expensive molecular docking simulations. Many artificial intelligence-based approaches have been proposed in this regard. Recently, two types of models have accomplished promising results in exploiting molecular information: graph convolutional neural networks that construct a learned molecular representation from a graph structure (atoms and bonds), and neural networks that can be applied to compute on descriptors or fingerprints of molecules. However, the superiority of one method over the other is yet to be determined. Modern studies have endeavored to aggregate information that is extracted from compounds and proteins to form the CPI task. Nonetheless, these approaches have used a simple concatenation to combine them, which cannot fully capture the interaction between such information.We propose the Perceiver CPI network, which adopts a cross-attention mechanism to improve the learning ability of the representation of drug and target interactions and exploits the rich information obtained from extended-connectivity fingerprints to improve the performance. We evaluated Perceiver CPI on three main datasets, Davis, KIBA, and Metz, to compare the performance of our proposed model with that of state-of-the-art methods. The proposed method achieved satisfactory performance and exhibited significant improvements over previous approaches in all experiments.Perceiver CPI is available at https://github.com/dmis-lab/PerceiverCPISupplementary data are available at Bioinformatics online.}},\n    month = {11},\n    year = {2022},\n    journal = {Bioinformatics},\n    title = {{Perceiver CPI: A nested cross-attention network for compound-protein interaction prediction}},\n    author = {Nguyen, Ngoc-Quang and Jang, Gwanghoon and Kim, Hajung and Kang, Jaewoo},\n}"
      },
      "source": "https://raw.githubusercontent.com/dmis-lab/PerceiverCPI/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/dmis-lab/PerceiverCPI"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-04-04T23:48:20Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-02T01:53:52Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Bioinformatics'2022 PerceiverCPI: A nested cross-attention network for compound-protein interaction prediction"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9833797232831691,
      "result": {
        "original_header": "Perceiver CPI (Version 1.0)",
        "type": "Text_excerpt",
        "value": "A Pytorch Implementation of paper: \n\nNgoc-Quang Nguyen , Gwanghoon Jang , Hajung Kim and Jaewoo Kang \nMotivation: Compound-protein interaction (CPI) plays an essential role in drug discovery and is\nperformed via expensive molecular docking simulations. Many artificial intelligence-based approaches\nhave been proposed in this regard. Recently, two types of models have accomplished promising results in\nexploiting molecular information: graph convolutional neural networks that construct a learned molecular\nrepresentation from a graph structure (atoms and bonds), and neural networks that can be applied to\ncompute on descriptors or fingerprints of molecules. However, the superiority of one method over the\nother is yet to be determined. Modern studies have endeavored to aggregate information that is extracted\nfrom compounds and proteins to form the CPI task. Nonetheless, these approaches have used a simple\nconcatenation to combine them, which cannot fully capture the interaction between such information. \nResults: We propose the Perceiver CPI network, which adopts a cross-attention mechanism to improve\nthe learning ability of the representation of drug and target interactions and exploits the rich information\nobtained from extended-connectivity fingerprints to improve the performance. We evaluated Perceiver CPI\non three main datasets, Davis, KIBA, and Metz, to compare the performance of our proposed model with\nthat of state-of-the-art methods. The proposed method achieved satisfactory performance and exhibited\nsignificant improvements over previous approaches in all experiments\n \n"
      },
      "source": "https://raw.githubusercontent.com/dmis-lab/PerceiverCPI/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8155293950893325,
      "result": {
        "original_header": "1.**Dataset and supplementary experiments**",
        "type": "Text_excerpt",
        "value": "The data should be in the format csv: 'smiles','sequences','label'!\n \n"
      },
      "source": "https://raw.githubusercontent.com/dmis-lab/PerceiverCPI/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.919851369715142,
      "result": {
        "original_header": "4.**To train YOUR model:**",
        "type": "Text_excerpt",
        "value": "Your data should be in the format csv, and the column names are: 'smiles','sequences','label'. \n"
      },
      "source": "https://raw.githubusercontent.com/dmis-lab/PerceiverCPI/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9935952288004545,
      "result": {
        "original_header": "5.**Citations**",
        "type": "Text_excerpt",
        "value": "~~~\n@article{10.1093/bioinformatics/btac731,\n    author = {Nguyen, Ngoc-Quang and Jang, Gwanghoon and Kim, Hajung and Kang, Jaewoo},\n    title = \"{Perceiver CPI: A nested cross-attention network for compound-protein interaction prediction}\",\n    journal = {Bioinformatics},\n    year = {2022},\n    month = {11},\n    abstract = \"{Compound-protein interaction (CPI) plays an essential role in drug discovery and is performed via expensive molecular docking simulations. Many artificial intelligence-based approaches have been proposed in this regard. Recently, two types of models have accomplished promising results in exploiting molecular information: graph convolutional neural networks that construct a learned molecular representation from a graph structure (atoms and bonds), and neural networks that can be applied to compute on descriptors or fingerprints of molecules. However, the superiority of one method over the other is yet to be determined. Modern studies have endeavored to aggregate information that is extracted from compounds and proteins to form the CPI task. Nonetheless, these approaches have used a simple concatenation to combine them, which cannot fully capture the interaction between such information.We propose the Perceiver CPI network, which adopts a cross-attention mechanism to improve the learning ability of the representation of drug and target interactions and exploits the rich information obtained from extended-connectivity fingerprints to improve the performance. We evaluated Perceiver CPI on three main datasets, Davis, KIBA, and Metz, to compare the performance of our proposed model with that of state-of-the-art methods. The proposed method achieved satisfactory performance and exhibited significant improvements over previous approaches in all experiments.Perceiver CPI is available at https://github.com/dmis-lab/PerceiverCPISupplementary data are available at Bioinformatics online.}\",\n    issn = {1367-4803},\n    doi = {10.1093/bioinformatics/btac731},\n    url = {https://doi.org/10.1093/bioinformatics/btac731},\n    note = {btac731},\n    eprint = {https://academic.oup.com/bioinformatics/advance-article-pdf/doi/10.1093/bioinformatics/btac731/47214739/btac731.pdf},\n}\n~~~\n \n"
      },
      "source": "https://raw.githubusercontent.com/dmis-lab/PerceiverCPI/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/dmis-lab/PerceiverCPI/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 6
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/dmis-lab/PerceiverCPI/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "dmis-lab/PerceiverCPI"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Perceiver CPI (Version 1.0)"
      },
      "source": "https://raw.githubusercontent.com/dmis-lab/PerceiverCPI/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/dmis-lab/PerceiverCPI/main/run.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://user-images.githubusercontent.com/32150689/169429361-cee1031f-fef3-43a6-9220-943fa21de233.png"
      },
      "source": "https://raw.githubusercontent.com/dmis-lab/PerceiverCPI/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://user-images.githubusercontent.com/32150689/167998111-f73c2fee-3ea4-49d4-8f60-8338e0acca00.PNG"
      },
      "source": "https://raw.githubusercontent.com/dmis-lab/PerceiverCPI/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://user-images.githubusercontent.com/32150689/163341766-3115ffa6-0cfe-437e-be75-670de1b4da43.png"
      },
      "source": "https://raw.githubusercontent.com/dmis-lab/PerceiverCPI/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9563133792120881,
      "result": {
        "original_header": "0.**Overview of Perceiver CPI**",
        "type": "Text_excerpt",
        "value": "\nSet up the environment: \nIn our experiment we use, Python 3.9 with PyTorch 1.7.1 + CUDA 10.1.\n```bash\ngit clone https://github.com/dmis-lab/PerceiverCPI.git\nconda env create -f environment.yml\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/dmis-lab/PerceiverCPI/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9326011406615,
      "result": {
        "original_header": "4.**To train YOUR model:**",
        "type": "Text_excerpt",
        "value": "You can freely tune the hyperparameter for your best performance (but highly recommend using the Bayesian optimization package).\n \n"
      },
      "source": "https://raw.githubusercontent.com/dmis-lab/PerceiverCPI/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.9600823571226642,
      "result": {
        "original_header": "2.**To train the model:**",
        "type": "Text_excerpt",
        "value": "```bash\npython train.py --data_path \"datasetpath\" --separate_val_path \"validationpath\" --separate_test_path \"testpath\" --metric mse --dataset_type regression --save_dir \"checkpointpath\" --target_columns label\n```\n_Usage Example:_\n~~~\npython train.py --data_path ./toy_dataset/novel_pair_0_train.csv --separate_val_path ./toy_dataset/novel_pair_0_val.csv --separate_test_path ./toy_dataset/novel_pair_0_test.csv --metric mse --dataset_type regression --save_dir regression_150_newprot_pre --target_columns label --epochs 150 --ensemble_size 3 --num_folds 1 --batch_size 50 --aggregation mean --dropout 0.1 --save_preds\n~~~ \n"
      },
      "source": "https://raw.githubusercontent.com/dmis-lab/PerceiverCPI/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9670383356842611,
      "result": {
        "original_header": "3.**To take the inferrence:**",
        "type": "Text_excerpt",
        "value": "```bash\npython predict.py --test_path \"testdatapath\" --checkpoint_dir \"checkpointpath\" --preds_path \"predictionpath.csv\"\n```\n_Usage Example:_\n~~~\npython predict.py --test_path ./toy_dataset/novel_pair_0_test.csv --checkpoint_dir regression_150_newprot_pre --preds_path newnew_fold0.csv\n~~~ \n"
      },
      "source": "https://raw.githubusercontent.com/dmis-lab/PerceiverCPI/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/dmis-lab/PerceiverCPI/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PerceiverCPI"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "dmis-lab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 623486,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 514,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/dmis-lab/PerceiverCPI/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 11:28:23",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 34
      },
      "technique": "GitHub_API"
    }
  ]
}