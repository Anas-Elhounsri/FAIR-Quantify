{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "How do I cite Codetta?",
        "parent_header": [
          "Codetta v2.0"
        ],
        "type": "Text_excerpt",
        "value": "Y. Shulgina, S. R. Eddy. (2023). Codetta: predicting the genetic code from nucleotide \n\tsequence. **Bioinformatics**, 39:btac802. doi: [10.1093/bioinformatics/btac802](https://doi.org/10.1093/bioinformatics/btac802)\n\nY. Shulgina, S. R. Eddy. (2021). A computational screen for alternative genetic codes \n\tin over 250,000 genomes. **eLife**, 10:e71402. doi: [10.7554/eLife.71402](https://doi.org/10.7554/eLife.71402)\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/kshulgina/codetta/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/kshulgina/codetta"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-04-13T21:50:37Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-18T07:36:54Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Description",
        "parent_header": [
          "Codetta v2.0"
        ],
        "type": "Text_excerpt",
        "value": "Codetta is a Python program for predicting the genetic code (codon table) of \nan organism from nucleotide sequence data.   \n\nThe analysis consists of three steps:\n\n1. Aligning the input nucleotide sequence to a database of profile Hidden \nMarkov models (HMMs) of proteins (such as the Pfam database)\n2. Collating the resulting alignments into a single output file\n3. Inferring the genetic code from the alignment output file\n\nA detailed explanation of the underlying probability model can be found in \n[Shulgina & Eddy (2021)](https://elifesciences.org/articles/71402). If you \nare looking to reproduce results from Shulgina & Eddy (2021), please follow \nthe README for \n[Codetta v1.0](https://github.com/kshulgina/codetta/releases/tag/v1.0).\n\nIf you encounter any problems in the installation or usage of Codetta, please \nleave a Github issue or email me at shulgina@g.harvard.edu\n\n"
      },
      "source": "https://raw.githubusercontent.com/kshulgina/codetta/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Summary, with one more example",
        "parent_header": [
          "Codetta v2.0",
          "Tutorials"
        ],
        "type": "Text_excerpt",
        "value": "Now let's pull it all together by predicting the genetic code of the \n_P. provasolii_ mitochondrial genome:\n\n\t./codetta_download.py NC_013935.1 c --sequence_file examples/NC_013935.1.fna\n\t./codetta.py examples/NC_013935.1.fna -m\n\nNotice how we specified the `-m` argument to indicate that we do not want to \nexclude Pfam domains associated with mitochondrial genomes, which is expected to have two codon reassignments. \n\nAlternatively, we could also run the same analysis as \n\n\t./codetta_download.py NC_013935.1 c --sequence_file examples/NC_013935.1.fna\n\t./codetta_align.py examples/NC_013935.1.fna --align_output examples/Pprovasolii_mito\n\t./codetta_summary.py examples/Pprovasolii_mito\n\t./codetta_infer.py examples/Pprovasolii_mito -m \\\n\t\t\t   --inference_output examples/Pprovasolii_mito_Pfam_genetic_code.out\n\nHere we are also showing how to use the `--align_output` argument to write \nthe alignment output files with the more informative prefix `Pprovasolii_mito`\n and the `--inference_output` argument to write the inference output file \n `examples/Pprovasolii_mito_Pfam_genetic_code.out`.\n\nThe output genetic code is:\n\n\tFF??SSSSYY??CCWWLLLLPPPPHHQQRRRRIIMMTTTTNNKKSSR?V?VVAAAADDEEGGGG\n\t\nComparing to the standard genetic code (below), you can see that two codons \nhave alternative meanings: the stop codon UGA is now tryptophan codon and the \nisoleucine codon AUA is now a methionine codon. Some codons are uninferred \n(?) due to few aligned Pfam consensus columns (look at the inference output \nfile for more detail).\n\n\tP mt code : FF??SSSSYY??CCWWLLLLPPPPHHQQRRRRIIMMTTTTNNKKSSR?V?VVAAAADDEEGGGG\n\tstd code  : FFLLSSSSYY**CC*WLLLLPPPPHHQQRRRRIIIMTTTTNNKKSSRRVVVVAAAADDEEGGGG\n\t                          ^                   ^\n\nThis alternative genetic code in _Pycnococcus_ mitochondria is summarized in \n[Noutahi et al (2019)](https://pubmed.ncbi.nlm.nih.gov/30698742/).\n\n"
      },
      "source": "https://raw.githubusercontent.com/kshulgina/codetta/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Download and setup",
        "parent_header": [
          "Codetta v2.0"
        ],
        "type": "Text_excerpt",
        "value": "Codetta was developed for Python versions 3.5+ on Linux and MacOS. Required \nPython packages are `numpy` and `scipy`.\n\nOnce inside the Codetta directory, run the setup script\n\t\n\t./setup.sh\n\nThis script will check Codetta requirements and set up a local version of \nHMMER. If you are missing `wget` or `gzip`, on MacOS, you can use \n`brew install`. (For Linux, you'll have to use your system's package \nmanagement tool.) Note that on MacOS, you'll also need XCode installed so \nthat HMMER can compile.\n\n"
      },
      "source": "https://raw.githubusercontent.com/kshulgina/codetta/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Bonus: downloading nucleotide sequences from GenBank",
        "parent_header": [
          "Codetta v2.0",
          "Tutorials"
        ],
        "type": "Text_excerpt",
        "value": "We have also provided a simple program for a downloading FASTA file from \nGenBank by specifying either a genome assembly accession or a nucleotide \naccession. \n\n- `codetta_download`: Download a genome assembly or nucleotide sequence from \nGenBank\n\nWe can download the _Nasuia deltocephalinicola_ genome using the Genbank \ngenome assembly accession by\n\n\t./codetta_download.py GCA_014211875.1 a --sequence_file examples/GCA_014211875.1.fna\n\nThis will download a FASTA file containing the GCA_014211875.1 sequence into \n`examples/GCA_014211875.1.fna`. The argument `a` specifies that this is an \nassembly database accession and not a nucleotide accession (which would be \n`c`).\n\nWe can download the mitochondrial genome of the green algae \n_Pycnococcus provasolii_, which is under NCBI nucleotide accession \nNC_013935.1 by\n\n\t./codetta_download.py NC_013935.1 c --sequence_file examples/NC_013935.1.fna\n\nNotice the argument `c` specifying that this is a nucleotide database \naccession.\n\n"
      },
      "source": "https://raw.githubusercontent.com/kshulgina/codetta/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/kshulgina/codetta/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "faq": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Potential sources of error",
        "parent_header": [
          "Codetta v2.0"
        ],
        "type": "Text_excerpt",
        "value": "Occasionally, Codetta will make an incorrect codon inference. This usually\noccurs when an assumption made by the method is broken. \n\nCommon situations to look out for:\n\n- Stop codons erroneously aligning to profile HMMs. A common cause of this are\npseudogenes that maintain enough homology for profile HMM alignment, but \nhave acquired in-frame stop codons, causing alignment between stop codons and \nconsensus columns of a profile HMM. This may lead to stop codons erroneously \ninferred to code for an amino acid. This could also occur due to profile HMMs \naligning over intron boundaries, and stop codons that are readthrough / \nframeshifted over (often seen in viruses).\n- The input sequence contaminated by another organism. This can lead to \nincorrect genetic code prediction if the contaminating organism uses a \ndifferent genetic code. A common source of such contamination are \n_Mycoplasma_ bacteria.\n- The input nucleotide sequence not being representative of the mature mRNA\ncoding sequence. In some mitochondrial genomes (plants, trypanosomes, etc), \nthere is pervasive mRNA editing such that some codons in the genome are \nsystematically converted to another codon in the mature mRNA. This may lead \nto incorrect codon inference by Codetta. \n- The composition of the input sequence significantly deviating from the \nprofile HMMs used. If there is a significant difference in amino acid \ncomposition, it may appear that a codon has systematically substituted \ninto sites conserved for another amino acid in the profile HMMs. To Codetta,\nthis resembles the signature of codon reassignment, leading to incorrect \ninferences. A way around this is to use a custom profile HMM database matched \nfor amino acid composition / GC content.\n\nTo further validate a predicted genetic code, some approaches are:\n\n- Try predicting the genetic code again with different Codetta parameters \nor with a different profile HMM database. The predicted genetic code should \nbe robust to such changes.\n- Genes for translational components. Does the genome encode tRNAs / release \nfactors consistent with the predicted genetic code?\n- High-quality multiple sequence alignments of single-copy conserved genes. \nDoes the codon occur at positions where the predicted amino acid occurs in \noutgroups?\n- Experimental validation. If possible, proteomic mass spectrometry or other \nmethods that show that the predicted amino acid is inserted at codon \npositions would provide definitive validation.\n\n"
      },
      "source": "https://raw.githubusercontent.com/kshulgina/codetta/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 9
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/kshulgina/codetta/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "kshulgina/codetta"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Codetta v2.0"
      },
      "source": "https://raw.githubusercontent.com/kshulgina/codetta/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kshulgina/codetta/main/setup.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kshulgina/codetta/main/resources/template_jobarray.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Download and setup",
        "parent_header": [
          "Codetta v2.0"
        ],
        "type": "Text_excerpt",
        "value": "Codetta was developed for Python versions 3.5+ on Linux and MacOS. Required \nPython packages are `numpy` and `scipy`.\n\nOnce inside the Codetta directory, run the setup script\n\t\n\t./setup.sh\n\nThis script will check Codetta requirements and set up a local version of \nHMMER. If you are missing `wget` or `gzip`, on MacOS, you can use \n`brew install`. (For Linux, you'll have to use your system's package \nmanagement tool.) Note that on MacOS, you'll also need XCode installed so \nthat HMMER can compile.\n\n"
      },
      "source": "https://raw.githubusercontent.com/kshulgina/codetta/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Setting up a profile HMM database",
        "parent_header": [
          "Codetta v2.0"
        ],
        "type": "Text_excerpt",
        "value": "Codetta aligns the input sequence to a database of protein profile HMMs. \n\nBy default, Codetta will use the Pfam database. You can download a version of \nPfam 35.0 specially built for Codetta from our website. From the `codetta`\ndirectory, use these commands to download and uncompress it (note: this will\n take about 3 Gb of disk space)\n\n\tcd resources/\n\twget http://eddylab.org/publications/Shulgina21/Pfam-A_enone.tar.gz\n\ttar xf Pfam-A_enone.tar.gz\n\trm Pfam-A_enone.tar.gz\n\tcd ..\n\nIf you want to build your own custom profile HMM database, this is be described in a later section. \n\n"
      },
      "source": "https://raw.githubusercontent.com/kshulgina/codetta/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/kshulgina/codetta/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Codetta is distributed as open source under the terms of the BSD \nthree-clause license:\n\n   Redistribution and use in source and binary forms, with or without\n   modification, are permitted provided that the following conditions\n   are met:\n\n   1. Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n\n   2. Redistributions in binary form must reproduce the above\n      copyright notice, this list of conditions and the following\n      disclaimer in the documentation and/or other materials provided\n      with the distribution.\n\n   3. Neither the name of any copyright holder nor the names of \n      contributors may be used to endorse or promote products derived\n      from this software without specific prior written permission.\n\n   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n   \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\n   FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n   COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n   SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n   HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n   STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n   OF THE POSSIBILITY OF SUCH DAMAGE.\n"
      },
      "source": "https://raw.githubusercontent.com/kshulgina/codetta/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "codetta"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "kshulgina"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 77275,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 1318,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kshulgina/codetta/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "kshulgina",
          "type": "User"
        },
        "date_created": "2022-02-01T21:00:03Z",
        "date_published": "2022-02-01T21:18:21Z",
        "description": "Codetta v2.0 is a substantial change from Codetta v1.0. \r\n\r\nChanges introduced include:\r\n- streamlined requirements and setup process\r\n- added the ability to specify a custom profile HMM database\r\n- improved sensitivity of hmmscan alignment on genomes with biased composition\r\n- added an argument for simpler parallelization of the hmmscan alignment step for SLURM schedulers\r\n- updated names and format of intermediate and output files; improved content of output written to terminal",
        "html_url": "https://github.com/kshulgina/codetta/releases/tag/v2.0",
        "name": "Codetta v2.0",
        "release_id": 58467298,
        "tag": "v2.0",
        "tarball_url": "https://api.github.com/repos/kshulgina/codetta/tarball/v2.0",
        "type": "Release",
        "url": "https://api.github.com/repos/kshulgina/codetta/releases/58467298",
        "value": "https://api.github.com/repos/kshulgina/codetta/releases/58467298",
        "zipball_url": "https://api.github.com/repos/kshulgina/codetta/zipball/v2.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 11:09:57",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 48
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "Codetta v2.0"
        ],
        "type": "Text_excerpt",
        "value": "The program `codetta.py` rolls the three main analysis steps into a single \nscript. Usage for `codetta.py` is\n\n\t./codetta.py [input sequence file] [optional arguments]\n\nThe three steps can also be run separately using the programs:\n\n- `codetta_align.py`: Align profile HMMs to the input nucleotide sequence.\n- `codetta_summary.py`: Summarize profile HMM alignments into an alignment \noutput file.\n- `codetta_infer.py`: Infer the genetic code from the alignment output file.\n\nGeneral usage for these programs is\n\n\t./[program name] [input file or prefix] [optional arguments]\n\nFor any of these programs, type `./[program name] --help` for complete usage \ndetails.\n\n"
      },
      "source": "https://raw.githubusercontent.com/kshulgina/codetta/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Starting out...",
        "parent_header": [
          "Codetta v2.0",
          "Tutorials"
        ],
        "type": "Text_excerpt",
        "value": "The simplest way to run Codetta is by using the `codetta.py` program. \n\nThis program performs the three analysis steps in order. All you have to do \nis specify a nucleotide sequence input file. This file should contain \nnucleotide sequences from a single organism in FASTA format. This can be a \ngenome, transcriptome, collection of genes, etc.\n\nMake sure you have first set up a profile HMM database (see above)!\n\nIn the `examples/` directory, you will find the file `GCA_014211875.1.fna`\n which contains the genome of the bacterium _Nasuia deltocephalinicola_.\n\nWe can predict the genetic code of this bacterium simply by running\n\n\t./codetta.py examples/GCA_014211875.1.fna\n\nYou will see outputs written to the terminal indicating that each of the \nthree Codetta steps is executing. Codetta will create five files in the \ndirectory containing the input sequence file.\n\n- Processed sequence file: `examples/GCA_014211875.1.fna.sequence_pieces.fna`\n- Preliminary translation file + ssi index: \n`examples/GCA_014211875.1.fna.preliminary_translation.faa`\n- Alignment output file: \n`examples/GCA_014211875.1.fna.Pfam-A_enone.hmm.alignment_output.txt`\n- Inference output file: \n`examples/GCA_014211875.1.fna.Pfam-A_enone.hmm.1e-10_0.9999_0.01_excl-mtvuy.genetic_code.out`\n\nAt the end, the inferred genetic code is printed to the terminal\n\n\tGenetic code: FFLLSSSSYY??CCWWL?LLPPPPHHQQ????I?IMTTTTNNKKSSRRVVVVAAAADDEEGGGG\n\nThis corresponds to the inferred translation of each of the 64 codons, in \norder of 'UUU, UUC, UUA, UUG, UCU, UCC, ..., GGA, GGG' (iterating 3rd, 2nd, \nthen 1st base through UCAG).\n\nThe ?s correspond to codons that had no inferred amino acid meaning-- this \nmeans that there was insufficient or ambiguous information about the codon to \nmake a confident inference. This is also the expected inference for stop \ncodons (since Codetta does not explicitly predict stop codons).\n\nA detailed overview of the analysis can be found at \n`examples/GCA_014211875.1.fna.Pfam-A_enone.hmm.1e-10_0.9999_0.01_excl-mtvuy.genetic_code.out`. \nThe long file extension specifies the inference parameters. You can specify \nyour own (simpler) name for the inference output file using the \n`--inference_output` argument.\n\n\nThis file contains a detailed overview of the genetic code inference results:\n\n\t# Analysis arguments\n\talignment_prefix   examples/GCA_014211875.1.fna\n\tprofile_database   Pfam-A_enone.hmm\n\tresults_summary    None\n\tevalue_threshold   1e-10\n\tprob_threshold     0.9999\n\tmax_fraction       0.01\n\texcluded_pfams     mtvuy\n\t#\n\t# Codon inferences                      Consensus columns\n\t# codon   inference  std code  diff?    N aligned  N used\n\tTTT       F          F         N        546        546       \n\tTTC       F          F         N        48         48        \n\tTTA       L          L         N        703        703       \n\tTTG       L          L         N        82         82        \n\tTCT       S          S         N        307        307      \n\t...\n\tGGA       G          G         N        248        248       \n\tGGG       G          G         N        73         72        \n\t#\n\t# Log decoding probabilities\n\t# codon      logP(A)      logP(C)      logP(D)      logP(E)      logP(F)      logP(G)     ...\n\tTTT         -1250.3530   -1453.8418   -2107.4121   -1850.9243       0.0000   -2034.8423   ...\n\t...\n\t#\n\t# Final genetic code inference\n\tFFLLSSSSYY??CCWWL?LLPPPPHHQQ????I?IMTTTTNNKKSSRRVVVVAAAADDEEGGGG\n\nYou might choose to change some parameters of the analysis. Some commonly \nused options are\n\n- Use the `-p` argument to specify a different profile HMM database. Note \nthat the database must be located in the `resources/` directory.\n- The `excluded_pfams` line in the above output file refers to which groups \nof problematic Pfam domains are excluded from the analysis (`m` \nmitochondrial, `t` transposon and other mobile genetic element, `v` viral, `u`\n selenocysteine-containing, and `y` pyrrolysine-containing). By default, all \nof these groups are excluded. Use `-m -t -v -u -y` to include these groups. \nFor instance, if you're analyzing a mitochondrial genome you will want to use \n`-m`  to include Pfams commonly found in mitochondrial genomes. Likewise, use \nthe `-v` and `-t` flags when analyzing a viral genome. \n- You can also specify a custom list of profiles to exclude from the analysis \nusing the `--bad_profiles` argument.\n- You can specify your own name for the inference output file with the \n`--inference_output` argument.\n- Use `-e` to change the profile HMM hit e-value threshold (default is \n1e-10). Use `-r` to change the probability threshold to call an amino acid \nmeaning for a codon (default is 0.9999). Use `-f` to change the maximum \nfraction of observations for a codon coming from a single profile HMM \nposition (default is 0.01).\n- If you're running several Codetta analyses, you can use `--results_summary` \nto specify a file to which a one-line summary of the results will be appended \nto.\n\nSee the full list of options with `./codetta.py --help`\n\n"
      },
      "source": "https://raw.githubusercontent.com/kshulgina/codetta/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Now that you're comfortable...",
        "parent_header": [
          "Codetta v2.0",
          "Tutorials"
        ],
        "type": "Text_excerpt",
        "value": "The basic usage of Codetta is to use `codetta.py`, which rolls the three main \nsteps of the analysis into a single program. See the \"Starting out...\" \nsection above for an example and description of the output.\n\nIf, for any reason, you want to run the three Codetta analysis steps \nseparately, you can use the programs `codetta_align.py`, `codetta_summary.py`\n, and `codetta_infer.py`.\n\nThe example in the previous section\n\n\t./codetta.py examples/GCA_014211875.1.fna\n\ncan be also run by breaking the steps up as\n\n\t./codetta_align.py examples/GCA_014211875.1.fna\n\t./codetta_summary.py examples/GCA_014211875.1.fna\n\t./codetta_infer.py examples/GCA_014211875.1.fna\n\t\nYou might want to do this if:\n\n- You want to infer the genetic code multiple times using different \nparameters without having to re-align the profile HMMs to your input \nsequence. In this case, you would run `codetta_align.py` and \n`codetta_summary.py` once and then `codetta_infer.py` several times with \ndifferent parameters.\n- You want to parallelize the computationally intensive alignment step on a \ncomputing cluster. See the next section.\n\n"
      },
      "source": "https://raw.githubusercontent.com/kshulgina/codetta/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Parallelizing the alignment step on a computing cluster",
        "parent_header": [
          "Codetta v2.0",
          "Tutorials"
        ],
        "type": "Text_excerpt",
        "value": "Codetta is default set up to run locally. However, the `codetta_align` step \ncan start to take a long time for longer genomes. For instance, a 4 Mb \nbacterial genome takes about 10 minutes on a MacBook Pro (3.5 GHz \nprocessor). If you're analyzing a large genome or many sequences, we \nrecommended parallelizing the `codetta_align` step on a computing cluster.\n\nThis is simple for clusters using a SLURM job scheduler. Install Codetta \nfollowing the usual steps. Then, manually edit the \n`resources/template_jobarray.sh` file to have the right parameters for your \ncomputing cluster. The `template_jobarray.sh` file looks like this:\n\n\t#!/bin/bash\n\t\n\t#SBATCH -p [SPECIFY PARTITION NAME]      # partition\n\t#SBATCH --time=8:30:00                   # wall-clock time (mins:secs)\n\t#SBATCH -c 1                             # requesting 1 core\n\t#SBATCH --mem=4000M\n\t#SBATCH -o /dev/null                     # file to which STDOUT + STDERR will be written\n\nYou'll probably only need to specify a partition name.\n\nThen, when you run the `codetta_align` step, add the argument \n`--parallelize_hmmscan 's'`. This will cause the `hmmscan` jobs to be sent as \na SLURM job array to the specified partition instead of being executed \nlocally. Make sure to wait for the SLURM jobs to finish before proceeding to \n`codetta_summary`. That's it!\n\nIf your cluster uses a different job scheduler, you will have to manually \nmodify the job array template file and the code in `codetta.py` \n(`processing_genome` function) that writes and sends the job array file.\n\n"
      },
      "source": "https://raw.githubusercontent.com/kshulgina/codetta/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Building a custom profile HMM database",
        "parent_header": [
          "Codetta v2.0",
          "Tutorials"
        ],
        "type": "Text_excerpt",
        "value": "Pfam domains are expected to align to \n[about ~50% of coding sequence](https://pubmed.ncbi.nlm.nih.gov/30357350/). \nIf you're focused on a specific clade, you could increase the proportion of \naligned sequence by using a customized profile HMM database. Starting from a \nset of multiple sequence alignments of expected proteins in the organism of \ninterest, you can build a custom profile HMM database.\n\nIn this example, we will build a profile HMM database tailored for metazoan \nmitochondria which have only 13 protein-coding genes. In the \n`examples/mito-db/` directory, you can find multiple sequence alignment files \nin Stockholm format for each of the 13 genes. *  \n\nThe first step is to use `hmmbuild` to create profile HMMs from each of the \nalignment files.\n\n\tcd examples/mito-db/\n\tls metazoan_mito*.msa | xargs -I {} ../../hmmer-3.3.2/bin/hmmbuild --enone {}.hmm {}\n\nThen we concatenate all of these `.hmm` files into a single database and \nfinally run `hmmpress` to finish\n\n\tcat metazoan_mito*.hmm > metazoan_mito_proteins.hmm\n\t../../hmmer-3.3.2/bin/hmmpress metazoan_mito_proteins.hmm\n\tmv metazoan_mito_proteins.hmm* ../../resources/.\n\nAt the end, the profile HMM database is moved into the resources directory, \nwhere Codetta expects to find all profile HMM databases. When running a \nCodetta analysis, you will have to specify the custom profile HMM database \nwith `-p [name of profile HMM db]`.\n\n\\*These alignments were created by searching the human mitochondrial protein \nsequences against SwissProt with `jackhmmer`\n\n"
      },
      "source": "https://raw.githubusercontent.com/kshulgina/codetta/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Summary, with one more example",
        "parent_header": [
          "Codetta v2.0",
          "Tutorials"
        ],
        "type": "Text_excerpt",
        "value": "Now let's pull it all together by predicting the genetic code of the \n_P. provasolii_ mitochondrial genome:\n\n\t./codetta_download.py NC_013935.1 c --sequence_file examples/NC_013935.1.fna\n\t./codetta.py examples/NC_013935.1.fna -m\n\nNotice how we specified the `-m` argument to indicate that we do not want to \nexclude Pfam domains associated with mitochondrial genomes, which is expected to have two codon reassignments. \n\nAlternatively, we could also run the same analysis as \n\n\t./codetta_download.py NC_013935.1 c --sequence_file examples/NC_013935.1.fna\n\t./codetta_align.py examples/NC_013935.1.fna --align_output examples/Pprovasolii_mito\n\t./codetta_summary.py examples/Pprovasolii_mito\n\t./codetta_infer.py examples/Pprovasolii_mito -m \\\n\t\t\t   --inference_output examples/Pprovasolii_mito_Pfam_genetic_code.out\n\nHere we are also showing how to use the `--align_output` argument to write \nthe alignment output files with the more informative prefix `Pprovasolii_mito`\n and the `--inference_output` argument to write the inference output file \n `examples/Pprovasolii_mito_Pfam_genetic_code.out`.\n\nThe output genetic code is:\n\n\tFF??SSSSYY??CCWWLLLLPPPPHHQQRRRRIIMMTTTTNNKKSSR?V?VVAAAADDEEGGGG\n\t\nComparing to the standard genetic code (below), you can see that two codons \nhave alternative meanings: the stop codon UGA is now tryptophan codon and the \nisoleucine codon AUA is now a methionine codon. Some codons are uninferred \n(?) due to few aligned Pfam consensus columns (look at the inference output \nfile for more detail).\n\n\tP mt code : FF??SSSSYY??CCWWLLLLPPPPHHQQRRRRIIMMTTTTNNKKSSR?V?VVAAAADDEEGGGG\n\tstd code  : FFLLSSSSYY**CC*WLLLLPPPPHHQQRRRRIIIMTTTTNNKKSSRRVVVVAAAADDEEGGGG\n\t                          ^                   ^\n\nThis alternative genetic code in _Pycnococcus_ mitochondria is summarized in \n[Noutahi et al (2019)](https://pubmed.ncbi.nlm.nih.gov/30698742/).\n\n"
      },
      "source": "https://raw.githubusercontent.com/kshulgina/codetta/main/README.md",
      "technique": "header_analysis"
    }
  ]
}