{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "author": "Firtina, Can and Park, Jisung and Alser, Mohammed and Kim, Jeremie S and Cali, Damla Senol and Shahroodi, Taha and Ghiasi, Nika Mansouri and Singh, Gagandeep and Kanellopoulos, Konstantinos and Alkan, Can and Mutlu, Onur",
        "doi": "10.1093/nargab/lqad004",
        "format": "bibtex",
        "title": "{BLEND}: a fast, memory-efficient and accurate mechanism to find fuzzy seed matches in genome analysis",
        "type": "Text_excerpt",
        "value": "@article{firtina_blend_2023,\n    pages = {lqad004},\n    year = {2023},\n    month = {mar},\n    author = {Firtina, Can and Park, Jisung and Alser, Mohammed and Kim, Jeremie S and Cali, Damla Senol and Shahroodi, Taha and Ghiasi, Nika Mansouri and Singh, Gagandeep and Kanellopoulos, Konstantinos and Alkan, Can and Mutlu, Onur},\n    journal = {NAR Genomics and Bioinformatics},\n    number = {1},\n    doi = {10.1093/nargab/lqad004},\n    issn = {2631-9268},\n    volume = {5},\n    title = {{BLEND}: a fast, memory-efficient and accurate mechanism to find fuzzy seed matches in genome analysis},\n}"
      },
      "source": "https://raw.githubusercontent.com/CMU-SAFARI/BLEND/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_of_conduct": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "## Contributor Code of Conduct\n\nAs contributors and maintainers of this project, we pledge to respect all\npeople who contribute through reporting issues, posting feature requests,\nupdating documentation, submitting pull requests or patches, and other\nactivities.\n\nWe are committed to making participation in this project a harassment-free\nexperience for everyone, regardless of level of experience, gender, gender\nidentity and expression, sexual orientation, disability, personal appearance,\nbody size, race, age, or religion.\n\nExamples of unacceptable behavior by participants include the use of sexual\nlanguage or imagery, derogatory comments or personal attacks, trolling, public\nor private harassment, insults, or other unprofessional conduct.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct. Project maintainers or\ncontributors who do not follow the Code of Conduct may be removed from the\nproject team.\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by opening an issue or contacting the maintainer via email.\n\nThis Code of Conduct is adapted from the [Contributor Covenant][cc], [version\n1.0.0][v1].\n\n[cc]: http://contributor-covenant.org/\n[v1]: http://contributor-covenant.org/version/1/0/0/\n"
      },
      "source": "https://raw.githubusercontent.com/CMU-SAFARI/BLEND/master/code_of_conduct.md",
      "technique": "file_exploration"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/CMU-SAFARI/BLEND"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-12-12T15:43:24Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-08T08:03:53Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "BLEND is a mechanism that can efficiently find fuzzy seed matches between sequences to significantly improve the performance and accuracy while reducing the memory space usage of two important applications: 1) finding overlapping reads and 2) read mapping. Described by Firtina et al. (published in NARGAB https://doi.org/10.1093/nargab/lqad004)"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9566818370892557,
      "result": {
        "original_header": "BLEND: A Fast, Memory-Efficient, and Accurate Mechanism to Find Fuzzy Seed Matches in Genome Analysis",
        "type": "Text_excerpt",
        "value": "BLEND is a mechanism that can generate the same hash value for highly similar seeds to find fuzzy (approximate) seed matches between sequences with a single lookup from their hash values. By replacing the hash functions with BLEND, any seeding technique can integrate BLEND to enable the fuzzy seed matching mechanism. \nBy efficiently finding fuzzy seed matches with a single lookup, BLEND can significantly improve the performance and accuracy while reducing the memory footprint of two important applications: 1) read overlapping and 2) read mapping. Apart from these two applications, we envision that any application that uses seeds can exploit BLEND. Latest version of BLEND is described in [bioRxiv](https://doi.org/10.1101/2022.11.23.517691). \n**We strongly recommend using BLEND for overlapping and mapping long and highly accurate reads (e.g., PacBio HiFi). We demonstrate in our manuscript that BLEND can run significantly faster, generate more accurate results, and use less memory space than minimap2 when using these long and accurate reads.** \nFor proof of work, we integrate the BLEND mechanism into [minimap2](https://github.com/lh3/minimap2/tree/7358a1ead1adfa89a2d3d0e72ffddd05732f9850). We show the benefits of BLEND when used with the minimizer and strobemer seeding techniques. We make the following changes in the original minimap2 implementation: \n- We modify the original minimap2 implementation so that minimap2 can assign the same hash values for highly similar seeds it finds. To this end, we change the [sketch.c](https://github.com/lh3/minimap2/blob/7358a1ead1adfa89a2d3d0e72ffddd05732f9850/sketch.c) implementation of minimap2 to 1) generate the hash values of k-mers and 2) decide the minimizer k-mer based on the hash values BLEND generates.\n- We implement a simple version of the strobemer seeds in minimap2 in three steps. First, we find minimizer k-mers using the [original hash function](https://github.com/lh3/minimap2/blob/7358a1ead1adfa89a2d3d0e72ffddd05732f9850/sketch.c#L28-L38) that minimap2 uses. Second, we link each `n` consecutive minimizer k-mer in a strobemer seeds. Third, we use the BLEND mechanism for generating the hash value of the strobemer seed based on the hash values of linked k-mers.\n- We enable the minimap2 implementation to use seeds longer than 256 characters so that it can store longer seeds when using BLEND. The current implementation of minimap2 allocates 8 bits to store seed lengths up to 256 characters. We change this requirement in various places of the implementation (e.g., [line 112 in sketch.c](https://github.com/lh3/minimap2/blob/7358a1ead1adfa89a2d3d0e72ffddd05732f9850/sketch.c#L112) and [line 239 in index.c](https://github.com/lh3/minimap2/blob/7358a1ead1adfa89a2d3d0e72ffddd05732f9850/index.c#L239)) so that BLEND can use 14 bits to store seed lengths up to 16384 characters. We do this because BLEND merges many k-mers into a single seed, which can be much larger than a 256 character-long seed. \nOur code that we have used for generating the results in our manuscript is available at Zenodo:\n[![DOI](https://zenodo.org/badge/437586354.svg)](https://zenodo.org/badge/latestdoi/437586354)\n \n"
      },
      "source": "https://raw.githubusercontent.com/CMU-SAFARI/BLEND/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8894069660449384,
      "result": {
        "type": "Text_excerpt",
        "value": "If you use BLEND in your work, please cite: \n"
      },
      "source": "https://raw.githubusercontent.com/CMU-SAFARI/BLEND/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/CMU-SAFARI/BLEND/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/CMU-SAFARI/BLEND/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CMU-SAFARI/BLEND"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "BLEND: A Fast, Memory-Efficient, and Accurate Mechanism to Find Fuzzy Seed Matches in Genome Analysis"
      },
      "source": "https://raw.githubusercontent.com/CMU-SAFARI/BLEND/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/CMU-SAFARI/BLEND/master/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/CMU-SAFARI/BLEND/master/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "identifier": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://zenodo.org/badge/latestdoi/437586354"
      },
      "source": "https://raw.githubusercontent.com/CMU-SAFARI/BLEND/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "BLEND can be installed from its source code, Docker, or conda.\n"
      },
      "source": "https://raw.githubusercontent.com/CMU-SAFARI/BLEND/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "<a href=\"https://github.com/CMU-SAFARI/BLEND\">Source Code</a>",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "* Download the code from its GitHub repository:\n\n```bash\ngit clone https://github.com/CMU-SAFARI/BLEND.git blend\n```\n\nCompilation process is similar to minimap2's compilation as also explained in more detail [here](https://github.com/lh3/minimap2/tree/7358a1ead1adfa89a2d3d0e72ffddd05732f9850#installation).\n\n* Compile (Make sure you have a C compiler and GNU make):\n\n```bash\ncd blend && make\n```\n\nIf the compilation is successful, the binary will be in `bin/blend`.\n"
      },
      "source": "https://raw.githubusercontent.com/CMU-SAFARI/BLEND/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "<a href=\"https://anaconda.org/bioconda/blend-bio\">Conda</a>",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "* Install BLEND from the bioconda channel\n\n```bash\nconda install -c bioconda blend-bio\n```\n"
      },
      "source": "https://raw.githubusercontent.com/CMU-SAFARI/BLEND/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "<a href=\"https://hub.docker.com/r/firtinac/blend\">Docker</a>",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "**Important** Your docker version should be at least 20.10.12. For the older versions, unexpected behaviors may occur.\n\n* Build and running from the local Dockerfile:\n\n```bash\n#Build\ndocker build --rm -f \"Dockerfile\" -t blend \".\"\n\n#Note: If your network connection is behind a proxy, you can define the following variables to set the proxy and build\n# docker build --build-arg http_proxy=\"YOUR_HTTP_PROXY\" --build-arg https_proxy=\"YOUR_HTTPS_PROXY\" --no-cache --rm -f \"Dockerfile\" -t blend \".\"\n\n#Example run\ndocker run -v $PWD/e.coli-pb-sequelii/:/input -v $PWD/output/:/output blend -x ava-hifi -o /output/output.paf /input/Ecoli.PB.HiFi.100X.fasta /input/Ecoli.PB.HiFi.100X.fasta\n\n#You can also work from the docker image after executing the following (interactive usage):\ndocker run --rm -it --entrypoint /bin/bash blend\n```\n\n* Build from DockerHub:\n\n```bash\n#Build\ndocker pull firtinac/blend\n\n#Example run\ndocker run -v $PWD/e.coli-pb-sequelii/:/input -v $PWD/output/:/output firtinac/blend -x ava-hifi -o /output/output.paf /input/Ecoli.PB.HiFi.100X.fasta /input/Ecoli.PB.HiFi.100X.fasta\n\n#You can also work from the docker image after executing the following (interactive usage):\ndocker run --rm -it --entrypoint /bin/bash firtinac/blend\n```\n"
      },
      "source": "https://raw.githubusercontent.com/CMU-SAFARI/BLEND/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/CMU-SAFARI/BLEND/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bioinformatics, blend, de-novo-assembly, fuzzy-seeds, genome-analysis, genome-assembly, minimizers, read-mapping, read-overlapping, seed-matching, spaced-seeds, strobemers"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "The MIT License\n\nCopyright (c) 2018-     Dana-Farber Cancer Institute\n              2017-2018 Broad Institute, Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\nBE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\nACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/CMU-SAFARI/BLEND/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "BLEND"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "CMU-SAFARI"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 518561,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 115358,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "JavaScript",
        "size": 103007,
        "type": "Programming_language",
        "value": "JavaScript"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 41972,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 4840,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Gnuplot",
        "size": 2057,
        "type": "Programming_language",
        "value": "Gnuplot"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 1575,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 512,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/CMU-SAFARI/BLEND/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "canfirtina",
          "type": "User"
        },
        "date_created": "2022-11-22T14:09:08Z",
        "date_published": "2022-11-22T14:48:26Z",
        "description": "The initial release of BLEND.",
        "html_url": "https://github.com/CMU-SAFARI/BLEND/releases/tag/v.1.0.0",
        "name": "BLEND-1.0.0",
        "release_id": 83881276,
        "tag": "v.1.0.0",
        "tarball_url": "https://api.github.com/repos/CMU-SAFARI/BLEND/tarball/v.1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/CMU-SAFARI/BLEND/releases/83881276",
        "value": "https://api.github.com/repos/CMU-SAFARI/BLEND/releases/83881276",
        "zipball_url": "https://api.github.com/repos/CMU-SAFARI/BLEND/zipball/v.1.0.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 10:09:13",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 41
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Getting Help",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Since we integrate the BLEND mechanism into minimap2, most portion of the parameters are the same as explained in the [man page of minimap2](https://github.com/lh3/minimap2/blob/7358a1ead1adfa89a2d3d0e72ffddd05732f9850/minimap2.1) or as explained in the public page of [minimap2.1](https://lh3.github.io/minimap2/minimap2.html), which is subject to change as the new versions of minimap2 role out. We explain the parameters unique to the BLEND implementation below. \n\nThe following option (i.e., `neighbors`) defines the number of k-mers that BLEND uses to generate a seed.\n\n```bash\n--neighbors INT Combines INT amount of k-mers to generate a seed. [10]\n```\n\nThe following option (i.e., `fixed-bits`) defines the number of bits that BLEND uses when generating the hash values of seeds. By default, it uses 2 bits per character of a k-mer and, thus, 2*k bits for a hash value of a seed. This value can be decreased to increase the collision rate for assigning the same hash values for similar seeds, but also may start assigning the same hash value for slightly dissimilar seeds.\n \n```bash\n--fixed-bits INT BLEND uses INT number of bits when generating hash values of seeds rather than using 2*k number of bits. Useful when collision rate needs to be decreased than 2*k bits. Setting this option to 0 uses 2*k bits for hash values. [0]\n```\n\nThe following option (i.e., `--strobemers`) tells BLEND that it should link consecutive `neighbors` many minimizer k-mers to generate a strobemer sequence as seed and use the hash values of these minimizer k-mers to generate a hash value for the strobemer sequence using the SimHash hashing strategy as suggested in the BLEND paper.\n\n```bash\n----strobemers link minimizers rather than the preceding k-mers of a single minimizer. (Number of minimizers to link is defined by --neighbors.)\n```\n\nThe following option (i.e., `immediate`) tells BLEND that it should link consecutive `neighbors` many overlapping k-mers to generate a seed sequence and use the hash values of these k-mers to generate a hash value for the seed sequence using the SimHash hashing strategy as suggested in the BLEND paper.\n\n```bash\n--immediate use the hash values of consecutive k-mers to generate the hash values of seeds (defualt behavior).\n```\n\nBLEND provides the following preset options:\n\n```bash\n-x map-ont (-k7 -w10 --fixed-bits=32 --neighbors=11)\n-x ava-ont (-k15 -w10 --fixed-bits=30 --neighbors=5 -e0 -m100 -r2k)\n-x map-pb (-Hk7 -w10 --fixed-bits=32 --neighbors=15)\n-x ava-pb (-Hk19 -Xw10 --fixed-bits=38 --neighbors=5 -e0 -m100)\n-x map-hifi (--strobemers -k19 -w50 --fixed-bits=38 --neighbors=5 -U50,500 -g10k -A1 -B4 -O6,26 -E2,1 -s200)\n-x ava-hifi (--strobemers -k25 -Xw200 --fixed-bits=50 --neighbors=7 -e0 -m100)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/CMU-SAFARI/BLEND/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "type": "Text_excerpt",
        "value": "You can print the help message to learn how to use `blend`:\n\n```bash\nblend -h\n```\n\nBelow we show how to use blend for 1) finding overlapping reads and 2) read mapping when using the default preset parameters for each use application and genome.\n\nBLEND provides the preset parameters depending on:\n\n* The application: 1) Finding overlapping reads and 2) read mapping.\n* Sequencing Technology: 1) Accurate long reads (e.g., PacBio HiFi reads), 2) erroneous long reads (e.g., PacBio CLR reads), and 2) short reads (i.e., Illumina paired-end reads). \n"
      },
      "source": "https://raw.githubusercontent.com/CMU-SAFARI/BLEND/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Finding Overlapping Reads",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Assume that you would like to perform `all-vs-all` overlapping between all pairs of HiFi reads from a human genome located in file `reads.fastq`. To find overlapping reads and store them in the [PAF](https://github.com/lh3/miniasm/blob/master/PAF.md) file `output.paf`:\n\n```bash\nblend -x ava-hifi reads.fastq reads.fastq > output.paf\n```\n"
      },
      "source": "https://raw.githubusercontent.com/CMU-SAFARI/BLEND/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Read Mapping",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Assume that you would like to map PacBio CLR reads in file `reads.fastq` to a reference genome in file `ref.fasta`. To generate the read mapping with the CIGAR output in the [SAM](https://samtools.github.io/hts-specs/SAMv1.pdf) file `output.sam`:\n\n```bash\nblend -ax map-pb ref.fasta reads.fastq > output.sam\n```\n"
      },
      "source": "https://raw.githubusercontent.com/CMU-SAFARI/BLEND/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Getting Help",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Since we integrate the BLEND mechanism into minimap2, most portion of the parameters are the same as explained in the [man page of minimap2](https://github.com/lh3/minimap2/blob/7358a1ead1adfa89a2d3d0e72ffddd05732f9850/minimap2.1) or as explained in the public page of [minimap2.1](https://lh3.github.io/minimap2/minimap2.html), which is subject to change as the new versions of minimap2 role out. We explain the parameters unique to the BLEND implementation below. \n\nThe following option (i.e., `neighbors`) defines the number of k-mers that BLEND uses to generate a seed.\n\n```bash\n--neighbors INT Combines INT amount of k-mers to generate a seed. [10]\n```\n\nThe following option (i.e., `fixed-bits`) defines the number of bits that BLEND uses when generating the hash values of seeds. By default, it uses 2 bits per character of a k-mer and, thus, 2*k bits for a hash value of a seed. This value can be decreased to increase the collision rate for assigning the same hash values for similar seeds, but also may start assigning the same hash value for slightly dissimilar seeds.\n \n```bash\n--fixed-bits INT BLEND uses INT number of bits when generating hash values of seeds rather than using 2*k number of bits. Useful when collision rate needs to be decreased than 2*k bits. Setting this option to 0 uses 2*k bits for hash values. [0]\n```\n\nThe following option (i.e., `--strobemers`) tells BLEND that it should link consecutive `neighbors` many minimizer k-mers to generate a strobemer sequence as seed and use the hash values of these minimizer k-mers to generate a hash value for the strobemer sequence using the SimHash hashing strategy as suggested in the BLEND paper.\n\n```bash\n----strobemers link minimizers rather than the preceding k-mers of a single minimizer. (Number of minimizers to link is defined by --neighbors.)\n```\n\nThe following option (i.e., `immediate`) tells BLEND that it should link consecutive `neighbors` many overlapping k-mers to generate a seed sequence and use the hash values of these k-mers to generate a hash value for the seed sequence using the SimHash hashing strategy as suggested in the BLEND paper.\n\n```bash\n--immediate use the hash values of consecutive k-mers to generate the hash values of seeds (defualt behavior).\n```\n\nBLEND provides the following preset options:\n\n```bash\n-x map-ont (-k7 -w10 --fixed-bits=32 --neighbors=11)\n-x ava-ont (-k15 -w10 --fixed-bits=30 --neighbors=5 -e0 -m100 -r2k)\n-x map-pb (-Hk7 -w10 --fixed-bits=32 --neighbors=15)\n-x ava-pb (-Hk19 -Xw10 --fixed-bits=38 --neighbors=5 -e0 -m100)\n-x map-hifi (--strobemers -k19 -w50 --fixed-bits=38 --neighbors=5 -U50,500 -g10k -A1 -B4 -O6,26 -E2,1 -s200)\n-x ava-hifi (--strobemers -k25 -Xw200 --fixed-bits=50 --neighbors=7 -e0 -m100)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/CMU-SAFARI/BLEND/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Reproducing the results in the paper",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "We explain how to reproduce the results we show in the BLEND paper in the [test directory](./test/).\n"
      },
      "source": "https://raw.githubusercontent.com/CMU-SAFARI/BLEND/master/README.md",
      "technique": "header_analysis"
    }
  ]
}