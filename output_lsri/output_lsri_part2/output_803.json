{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/wangguoguoa/DLoopCaller"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-04-24T05:19:45Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-10-18T12:10:13Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A deep learning approach for predicting genome-wide chromatin loops by integrating open chromatin landscapes"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "type": "Text_excerpt",
        "value": "DLoopCaller: A deep learning approach for predicting genome-wide chromatin loops by integrating open chromatin landscapes"
      },
      "source": "https://raw.githubusercontent.com/wangguoguoa/DLoopCaller/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Generate positive and negative samples",
        "parent_header": [
          "Introduction",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "```\npython gendata.py -p file.cool -b training.bedpe -a accessible .bigWig -o ./data/\n```"
      },
      "source": "https://raw.githubusercontent.com/wangguoguoa/DLoopCaller/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Training model",
        "parent_header": [
          "Introduction",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": " \n```\npython train.py -d ./training data/ -g 0 -b 128 -lr 0.001 -e 30 -w 0.0005 -c ./models\n```"
      },
      "source": "https://raw.githubusercontent.com/wangguoguoa/DLoopCaller/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Score",
        "parent_header": [
          "Introduction",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "```\npython score_chromosome.py -p file.cool -o ./scores -m ./model/chr.pth -a accessible.bigWig\n```"
      },
      "source": "https://raw.githubusercontent.com/wangguoguoa/DLoopCaller/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Question",
        "parent_header": [
          "Introduction",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "If you have any questions, please send an email to siguo_wang@163.com\n"
      },
      "source": "https://raw.githubusercontent.com/wangguoguoa/DLoopCaller/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/wangguoguoa/DLoopCaller/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/wangguoguoa/DLoopCaller/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "wangguoguoa/DLoopCaller"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Introduction"
      },
      "source": "https://raw.githubusercontent.com/wangguoguoa/DLoopCaller/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "Introduction"
        ],
        "type": "Text_excerpt",
        "value": "DLoopCaller requires Python3 and several scientific packages to run. It is best to set up a conda environment then install from github. Copy and paste the command snippets below:  \nconda config --add channels defaults  \nconda config --add channels bioconda  \nconda config --add channels conda-forge  \nconda create -n DLoopCaller python=3.6 scikit-learn=0.20.2 numpy scipy pandas h5py cooler  \nsource activate DLoopCaller  \npip install hic-straw  \ngit clone https://github.com/tariks/peakachu  "
      },
      "source": "https://raw.githubusercontent.com/wangguoguoa/DLoopCaller/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Data preparation",
        "parent_header": [
          "Introduction",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "DLoopCAller requires the contact map to be a .cool file or a .hic file and any training input to be a text file in bedpe format.   \nTraining data can be found at my paper data preparation . Cooler files may be found at the 4DN data portal. "
      },
      "source": "https://raw.githubusercontent.com/wangguoguoa/DLoopCaller/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/wangguoguoa/DLoopCaller/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DLoopCaller"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "wangguoguoa"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 53664,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/wangguoguoa/DLoopCaller/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 12:04:42",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Generate positive and negative samples",
        "parent_header": [
          "Introduction",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "```\npython gendata.py -p file.cool -b training.bedpe -a accessible .bigWig -o ./data/\n```"
      },
      "source": "https://raw.githubusercontent.com/wangguoguoa/DLoopCaller/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Training model",
        "parent_header": [
          "Introduction",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": " \n```\npython train.py -d ./training data/ -g 0 -b 128 -lr 0.001 -e 30 -w 0.0005 -c ./models\n```"
      },
      "source": "https://raw.githubusercontent.com/wangguoguoa/DLoopCaller/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Score",
        "parent_header": [
          "Introduction",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "```\npython score_chromosome.py -p file.cool -o ./scores -m ./model/chr.pth -a accessible.bigWig\n```"
      },
      "source": "https://raw.githubusercontent.com/wangguoguoa/DLoopCaller/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Question",
        "parent_header": [
          "Introduction",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "If you have any questions, please send an email to siguo_wang@163.com\n"
      },
      "source": "https://raw.githubusercontent.com/wangguoguoa/DLoopCaller/main/README.md",
      "technique": "header_analysis"
    }
  ]
}