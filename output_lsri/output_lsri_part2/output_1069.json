{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/haiyang1986/TVAR"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-11-07T09:16:56Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-04-22T15:22:04Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "a deep learning approach for assessing tissue-specific functional effects of non-coding variants"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.8991289433910635,
      "result": {
        "original_header": "TVAR",
        "type": "Text_excerpt",
        "value": "TVAR is a tissue-specific functional annotation tool of non-coding variants based on multi-label deep learning. The framework's input is the vcf profiles of non-coding variants. The output is the corresponding functional score vectors across the GTEx 49 tissues. TVAR is mainly divided into two components: Feature extraction and result analysis module running on the CPU (TVAR-CPU). 2. Model training and scoring module running on GPU (TVAR-GPU).\n```{r}\n# The input data file is the vcf file of non-coding variants. The following command is used to finish the feature extraction process: \npython TVar_cpu.py -m fea -i ./input/input.vcf\n# The feature extraction program requires downloading a large number of genome-wide annotation files. For details, see the paper \"TVAR: Assessing Tissue-specific Functional Effects of Non-coding Variants with Deep Learning\".\n```\nBASH2*\nBASH3*\nBASH4*  \nBASH5*  \n \n```{r}\nThe PCA method used in the feature extraction  can be replaced with autoencoder (AE) and embedding (EMB): \npython TVar_ae_embedding.py -d AE -m fea  -i ./input/input.gz\npython TVar_ae_embedding.py -d EMB -m fea  -i ./input/input.gz\n```   \nWe used TVAR to obtain the tissue-specific annotation scores of all the 176,673 variants from the GWAS catalog (version e105) and constituted the GWAS functional non-coding variants atlas (GFNCVA.score.gz and GFNCVA.score.gz.tbi).\n```{r}\nThe tabix can be used to score the variants in the GFNCVA: \ntabix GFNCVA.score.gz 1:10000000-20000000\n```   \n"
      },
      "source": "https://raw.githubusercontent.com/haiyang1986/TVAR/main/readme.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/haiyang1986/TVAR/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/haiyang1986/TVAR/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "haiyang1986/TVAR"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "TVAR"
      },
      "source": "https://raw.githubusercontent.com/haiyang1986/TVAR/main/readme.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/haiyang1986/TVAR/main/run.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/haiyang1986/TVAR/main/run_eval.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 0.9069370431051667,
      "result": {
        "original_header": "TVAR",
        "type": "Text_excerpt",
        "value": "We used TVAR to obtain the tissue-specific annotation scores of all the 176,673 variants from the GWAS catalog (version e105) and constituted the GWAS functional non-coding variants atlas (GFNCVA.score.gz and GFNCVA.score.gz.tbi).\n```{r}\nThe tabix can be used to score the variants in the GFNCVA: \ntabix GFNCVA.score.gz 1:10000000-20000000\n```   \nTVAR was based on open-source Python 3.6 libraries. The deep learning network's implementation was based on Numpy 1.15.4, Scipy 1.1.0, Tensorlayer 1.11.1 (GPU version) and Tensorflow 1.11.0 (GPU version). After the testing, TVAR has been working correctly on Ubuntu Linux release 20.04. We used the NVIDIA Tesla T4 for model training and testing.\nWe provided a list of packages (tvar.yml) required by the TVAR runtime environment. The command: conda env create -f tvar.yml can complete the configuration of the TVAR operating environment.\n \n"
      },
      "source": "https://raw.githubusercontent.com/haiyang1986/TVAR/main/readme.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/haiyang1986/TVAR/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "TVAR"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "haiyang1986"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 192053,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 1422,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 841,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/haiyang1986/TVAR/main/readme.md"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/haiyang1986/TVAR/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 13:04:05",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ]
}