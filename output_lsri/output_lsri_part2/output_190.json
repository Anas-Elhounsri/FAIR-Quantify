{
  "application_domain": [
    {
      "confidence": 62.25,
      "result": {
        "type": "String",
        "value": "Natural Language Processing"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "Clinical-GAN: Trajectory forecasting model for clinical events using Transformer and Generative Adversarial Network (*<a href=\"https://doi.org/10.1016/j.artmed.2023.102507\">paper</a>*)",
          "Inference"
        ],
        "type": "Text_excerpt",
        "value": "Also check out the *[paper](https://doi.org/10.1016/j.artmed.2023.102507)*, and please cite it if you use in your work.\n\n```\n@article{Shankar_ClinicalGAN,\ntitle = {Clinical-GAN: Trajectory Forecasting of Clinical Events using Transformer and Generative Adversarial Networks},\njournal = {Artificial Intelligence in Medicine},\nvolume = {138},\npages = {102507},\nyear = {2023},\nissn = {0933-3657},\ndoi = {https://doi.org/10.1016/j.artmed.2023.102507},\nurl = {https://www.sciencedirect.com/science/article/pii/S0933365723000210},\nauthor = {Vignesh Shankar and Elnaz Yousefi and Alireza Manashty and Dayne Blair and Deepika Teegapuram},\n\n}\n```\n"
      },
      "source": "https://raw.githubusercontent.com/vigi30/Clinical-GAN/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Vignesh Shankar and Elnaz Yousefi and Alireza Manashty and Dayne Blair and Deepika Teegapuram",
        "doi": "https://doi.org/10.1016/j.artmed.2023.102507",
        "format": "bibtex",
        "title": "Clinical-GAN: Trajectory Forecasting of Clinical Events using Transformer and Generative Adversarial Networks",
        "type": "Text_excerpt",
        "url": "https://www.sciencedirect.com/science/article/pii/S0933365723000210",
        "value": "@article{Shankar_ClinicalGAN,\n    author = {Vignesh Shankar and Elnaz Yousefi and Alireza Manashty and Dayne Blair and Deepika Teegapuram},\n    url = {https://www.sciencedirect.com/science/article/pii/S0933365723000210},\n    doi = {https://doi.org/10.1016/j.artmed.2023.102507},\n    issn = {0933-3657},\n    year = {2023},\n    pages = {102507},\n    volume = {138},\n    journal = {Artificial Intelligence in Medicine},\n    title = {Clinical-GAN: Trajectory Forecasting of Clinical Events using Transformer and Generative Adversarial Networks},\n}"
      },
      "source": "https://raw.githubusercontent.com/vigi30/Clinical-GAN/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/vigi30/Clinical-GAN"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-08-05T17:54:33Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-05-10T08:30:54Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9987922674486865,
      "result": {
        "original_header": "Clinical-GAN: Trajectory forecasting model for clinical events using Transformer and Generative Adversarial Network (*<a href=\"https://doi.org/10.1016/j.artmed.2023.102507\">paper</a>*)",
        "type": "Text_excerpt",
        "value": "\nPredicting the trajectory of a disease at an early stage can aid physicians in offering effective treatment, prompt care to patients, and also avoid misdiagnosis. However, forecasting patient trajectories is challenging due to long-range dependencies, irregular intervals between consecutive admissions, and non-stationarity data. To address these challenges, we propose a novel method called Clinical-GAN, a Transformer-based Generative Adversarial Networks (GAN) to forecast the patients\u2019 medical codes for subsequent visits. First, we represent the patients\u2019 medical codes as a time-ordered sequence of tokens akin to language models. Then, a Transformer mechanism is used as a Generator to learn from existing patients\u2019 medical history and is trained adversarially against a Transformer-based Discriminator. We address the above mentioned challenges based on our data modeling and Transformer-based GAN architecture. Additionally, we enable the local interpretation of the model\u2019s prediction using a multi-head attention mechanism. We evaluated our method using a publicly available dataset, Medical Information Mart for Intensive Care IV v1.0 (MIMIC-IV), with more than 500,000 visits completed by around 196,000 adult patients over an 11-year period from 2008\u20132019. Clinical-GAN significantly outperforms baseline methods and existing works, as demonstrated through various experiments. \n"
      },
      "source": "https://raw.githubusercontent.com/vigi30/Clinical-GAN/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.87190604599118,
      "result": {
        "original_header": "Loading the data",
        "type": "Text_excerpt",
        "value": "Replace the path in  `QUERIES.SQL` to the current working directory. More specifically, replace the following `current_working_directory` to your path where you have stored this project.\nPlease do not change the filenames.\n```\nCOPY 'query' To current_working_directory/Clinical-GAN/data/*.csv\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/vigi30/Clinical-GAN/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9223508924972874,
      "result": {
        "original_header": "Training",
        "type": "Text_excerpt",
        "value": "To train the model, Run the following command:\n```\npython train.py --task TF --scenario S1 --fileName myAwesomeModel.pt\n```\nFollowing are the required arguments.\n- `--scenario`: which type of scenario based data needs to be loaded- S1 (F<sub>D</sub>), S2 (F<sub>DP</sub>), S3 (F<sub>DPR</sub>). Scenarios as mentioned in the paper. Default=S1\n- `--task`: Two types of task SDP and TF. Default=TF\n- `--fileName`: fileName for the model which is going to be stored in the 'model' folder. Default=myAwesomeModel.pt\n \nFollowing are the optional arguments involving hyperparameters.\n- `--learning_rate` : learning rate of the model. Default=4e-4.\n- `--epochs`: Total number of epochs. Default=100\n- `--gen_layers`: Total number of generator's Encoder and Decoder layers. Default=3\n- `--disc_layers`: Total number of discriminator's Encoder layers. Default=1\n- `--dropout`: Dropout value to be applied forreducing overfitting. Default=0.1\n- `--clip`: Discriminator's cliping value for gradient clipping. Default=0.1\n- `--gen_clip`:Generator's cliping value for gradient clipping. Default=1.0\n- `--alpha`:alpha value for Generator's loss. Default=0.3\n- `--gen_heads`: Total number of multi-head in Generator. Default=8\n- `--disc_heads`:Total number of multi-head in Discriminator. Default=4.\n- `--batch_size` : batch size to be used for training the model. Default=8\n- `--isdataparallel`: if you have more than one gpu, you could use dataparallization. Default=False\n- `--hid_dim`: Embedding dimension of both Generator and discriminator. Default=256\n- `--pf_dim`: Hidden dimension of both Generator and discriminator. Default=512\n- `--warmup_steps`: warmp up steps for learning rate. Default=30\n- `--labelSmoothing`:label smoothing value for reducing overfitting. Default=0.0\n- `--factor`: factor by which the learning rate value should increase or decrease. Default=1\n- `--checkpoint_dir`: If you want to run the model for more epochs after terminating the training, Provide the path of the saved model. Default=None\n- `--valid_data_ratio`:How much data should be allocated to valid set in percentage. Default=0.05\n- `--test_data_ratio`: How much data should be allocated to test set in percentage. Default=0.05\n \n"
      },
      "source": "https://raw.githubusercontent.com/vigi30/Clinical-GAN/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9886440653451667,
      "result": {
        "original_header": "Evaluation",
        "type": "Text_excerpt",
        "value": "- `--scenario`: Which type of scenario based data needs to be loaded- S1 (F<sub>D</sub>), S2 (F<sub>DP</sub>), S3 (F<sub>DPR</sub>). Scenarios as mentioned in the paper. Default=S1\n- `--task`: Two types of task SDP and TF. Default=TF\n- `--fileName`:Load the saved model from the 'models/ClinicalGAN' folder. Default=myAwesomeModel.pt\n \n"
      },
      "source": "https://raw.githubusercontent.com/vigi30/Clinical-GAN/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/vigi30/Clinical-GAN/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 6
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/vigi30/Clinical-GAN/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "vigi30/Clinical-GAN"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Clinical-GAN: Trajectory forecasting model for clinical events using Transformer and Generative Adversarial Network (paper)"
      },
      "source": "https://raw.githubusercontent.com/vigi30/Clinical-GAN/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/vigi30/Clinical-GAN/master/PullFigure_1-1.png"
      },
      "source": "https://raw.githubusercontent.com/vigi30/Clinical-GAN/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Preparing the data",
        "parent_header": [
          "Clinical-GAN: Trajectory forecasting model for clinical events using Transformer and Generative Adversarial Network (*<a href=\"https://doi.org/10.1016/j.artmed.2023.102507\">paper</a>*)"
        ],
        "type": "Text_excerpt",
        "value": "To prepare the data as mentioned in the paper, Run the following command:\n\n```\npython process_data.py\n```\nFollowing are the optional arguments.\n\n- `--mimic3_path`: Path of mimic IV CSV files where the queried data is stored. Default is 'data'.\n- `--CCSRDX_file`: Path of diagnosis based CCSR files. Default is 'DXCCSR_v2021-2/DXCCSR_v2021-2.csv'\n- `--CCSRPCS_file`: Path of procedure based CCSR files. Default is 'PRCCSR_v2021-1/PRCCSR_v2021-1.csv'\n- `--D_CCSR_Ref_file`: Path of diagnosis based CCSR Reference file. Default is 'DXCCSR_v2021-2/DXCCSR-Reference-File-v2021-2.xlsx'\n- `--P_CCSR_Ref_file`: Path of procedure based CCSR Reference file. Default is 'PRCCSR_v2021-1/PRCCSR-Reference-File-v2021-1.xlsx'\n- `--CCSDX_file`: Path of diagnosis based CCS files. Default is 'Single_Level_CCS_2015/$dxref 2015.csv'\n- `--CCSPX_file`: Path of procedure based CCS files. Default is 'Single_Level_CCS_2015/$prref 2015.csv'\n- `--min_dx`: Minimum diagnosis code assigned per visit. Default is 80\n- `--min_px`: Minimum procedure code assigned per visit. Default is 80\n- `--min_drg`: Minimum drug/medication code assigned per visit. Default is 80\n- `--threshold`: Remove the code whose frequency  is less than the threshold. Default is 5\n- `--seqLength`: maximum sequence length of each sequence in input and output. Default is 500\n"
      },
      "source": "https://raw.githubusercontent.com/vigi30/Clinical-GAN/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9999435534202127,
      "result": {
        "original_header": "Loading the data",
        "type": "Text_excerpt",
        "value": "Replace the path in  `QUERIES.SQL` to the current working directory. More specifically, replace the following `current_working_directory` to your path where you have stored this project.\nPlease do not change the filenames.\n```\nCOPY 'query' To current_working_directory/Clinical-GAN/data/*.csv\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/vigi30/Clinical-GAN/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9858407421961842,
      "result": {
        "original_header": "Evaluation",
        "type": "Text_excerpt",
        "value": "To evaluate the model, Run the following command:\n```\neval.py --task TF --scenario S1 --fileName myAwesomeModel.pt\n```\nFollowing are the required arguments\n \n"
      },
      "source": "https://raw.githubusercontent.com/vigi30/Clinical-GAN/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9995884886204676,
      "result": {
        "original_header": "Inference",
        "type": "Text_excerpt",
        "value": "For Inference, Run the following command:\n```\ninfer.py --task TF --scenario S1 --modelFileName myAwesomeModel\n```\nFollowing are the required arguments\n \n"
      },
      "source": "https://raw.githubusercontent.com/vigi30/Clinical-GAN/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8316692933068516,
      "result": {
        "original_header": "Evaluation",
        "type": "Text_excerpt",
        "value": "To evaluate the model, Run the following command:\n```\neval.py --task TF --scenario S1 --fileName myAwesomeModel.pt\n```\nFollowing are the required arguments\n \n"
      },
      "source": "https://raw.githubusercontent.com/vigi30/Clinical-GAN/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/vigi30/Clinical-GAN/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Clinical-GAN"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "vigi30"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 112019,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/vigi30/Clinical-GAN/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirements",
        "parent_header": [
          "Clinical-GAN: Trajectory forecasting model for clinical events using Transformer and Generative Adversarial Network (*<a href=\"https://doi.org/10.1016/j.artmed.2023.102507\">paper</a>*)"
        ],
        "type": "Text_excerpt",
        "value": "The `Requirement.txt` file  lists all Python libraries that this project needs, install using the below command.\n\n```\npip install -r Requirement.txt\n```\nPlease install postgresql 13.1 [from postgresql](https://www.postgresql.org/download/). \n\nWe do not provide the MIMIC-IV data. In order to access the data, one must be an credentialied user on Physionet. Please visit  [physionet](https://mimic.mit.edu/docs/gettingstarted/) for more instructions.\nWe also do not provide the CCS and CCSR mapping data. Please visit [HCUP](https://www.hcup-us.ahrq.gov/) to download [CCS (Single level CCS)](https://www.hcup-us.ahrq.gov/toolssoftware/ccs/ccs.jsp) , [CCSR for Diagnosis](https://www.hcup-us.ahrq.gov/toolssoftware/ccsr/dxccsr.jsp)  and [CCSR for procedure](https://www.hcup-us.ahrq.gov/toolssoftware/ccsr/prccsr.jsp) files. After that, Move the downloaded folders to the current working directory.\n```\n/Clinical-GAN/DXCCSR_v2021-2\n/Clinical-GAN/PRCCSR_v2021-1\n/Clinical-GAN/Single_Level_CCS_2015\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/vigi30/Clinical-GAN/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 09:43:21",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ]
}