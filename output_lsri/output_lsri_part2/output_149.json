{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/zhangwei2015/IMperm"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-03-13T06:12:38Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-04-03T07:29:51Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9432500914588705,
      "result": {
        "original_header": "IMperm",
        "type": "Text_excerpt",
        "value": "Program:        IMpair: Merging Paired-end Reads of Immune Repertoire Data \n        General Optional Parameters:\n        -Q      <int>    The value is used to decode the sequencing quality score for each nucleotide. Generally, 33 and 64 are common used values [64]\n        -L      <int>    The mimimum length of merged sequence [50]\n        -T      <int>    cutff of base quality: The bases at the end of read will be trimmed if the base quality is less than -T [0] \n        Step I Optional Parameters:\n        -k      <int>    The length of seed(k-mer). One read is splitted into many k-mers that are used to identify the overlapped positions of paired reads [3]\n        -n      <int>    The number of top [-n] overlapped position candidates that are ranked by the number of mapped k-mers to another read [3]\n        -f      <float>  The piror probability(frequency) of four nucleotides:A/T/G/C that will be used for score calculation of overlapped region. The default value is: [0.25/0.25/0.25/0.25]\n        -m      <float>  The threshold of match score for overlapped region [0.85]\n        -l      <int>    The threshold of length(bp) for overlapped region [10] \n        Step II Optional Parameters:\n        -C       use step II to merge the remaining reads from above step\n        -S      <int>    The length of subsequence extracted from the begining of reads.The subsequence is used to find the merged sequences [10]\n        -M      <float>  The threshold of match score for overlapped region [0.6]\n        -X      <float>  The threshold of match rate for other region(except overlap and subsequences) [0.9] \n        Step III Optional Parameters:\n        -D       use step III to merge the remaining reads from above steps\n        -F      <str>    The file contains Germline V reference sequences(*.fa: each sequence has two lines: ID(first)+sequence(second)).The default file is human Germline data, including TCRs and BCRs\n        -G      <float>  The threshold of match rate between read and Germline sequence [0.85]\n        -W      <int>    The threshold of length(bp) for overlapped region. if -W=0, it means no overlap is required [0] \n        -Y      <float>  The threshold of match rate for overlapped region [0.5]\n        -N or -R         if -W=0, there may be a gap between the paired reads. The gap is filled with -N:(base = 'n' && quality=5) or -R:(base(lowercase) from Germline sequence && quality=20). if -W>0, -N and -R are invalid.[-N] \n\nStep I: mgering paired reads by its overlapped region\nStep II: for the reads failed to merge in step I, we use the successful merged sequences(step I) to aid for connection\nStep III: for the reads failed to merged in step I or II, we use Germline sequences of V genes to aid for connection \n1. only use the Step I ot merge PE reads\n        IMpair -a -b -o -1 -2 [options]\n2. use Step I and  Step II to merge PE reads\n        IMpair -a -b -o -1 -2 -C [options]; here -C is compulsory\n3. use Step I and Step III to merge PE reads\n        IMpair -a -b -o -1 -2 -D [options]; here -D is compulsory\n4. use Step I, Step II and Step III to merge PE reads\n        IMpair -a -b -o -1 -2 -C -D [options]; here -C and -D are compulsory\nif we use Step III to merge PE reads and -W=0, the paired reads maybe no overlap, then:\n        -D -w=0 -N(optional): to output merged sequence, the gap(between the paired reads) will be filled with 'n'\n        -D -w=0 -R: to output merged sequences,the gap(between the paired reads) will be filled with matched Germline V sequences\n        \nThere are test data(Test/\\*.fq.gz) and example for running(Test/test.sh) \n\nNote: the directory \"Simulated_data\" is not associated with IMperm itself, and so this directory is not neccessary to download if you want to use IMperm. However, the data in this directory could be used to test IMperm.\n \n"
      },
      "source": "https://raw.githubusercontent.com/zhangwei2015/IMperm/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/zhangwei2015/IMperm/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/zhangwei2015/IMperm/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "zhangwei2015/IMperm"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "IMperm"
      },
      "source": "https://raw.githubusercontent.com/zhangwei2015/IMperm/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/zhangwei2015/IMperm/main/src/make.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 0.9449500571884372,
      "result": {
        "original_header": "IMperm",
        "type": "Text_excerpt",
        "value": "Version         V1.0.0 \n        Compulsory Parametors for Input/Output:\n        -a      <str>    Query read1 file with FASTQ format(*.fq or *.fq.gz)\n        -b      <str>    Query read2 file with FASTQ format(*.fq or *.fq.gz)\n        -o      <str>    Output the merged file (*.fq.gz)\n        -1      <str>    Output the failed read1 (*.fq.gz)\n        -2      <str>    Output the failed read2 (*.fq.gz) \n\n--------------------- Note --------------------- \n1. only use the Step I ot merge PE reads\n        IMpair -a -b -o -1 -2 [options]\n2. use Step I and  Step II to merge PE reads\n        IMpair -a -b -o -1 -2 -C [options]; here -C is compulsory\n3. use Step I and Step III to merge PE reads\n        IMpair -a -b -o -1 -2 -D [options]; here -D is compulsory\n4. use Step I, Step II and Step III to merge PE reads\n        IMpair -a -b -o -1 -2 -C -D [options]; here -C and -D are compulsory\nif we use Step III to merge PE reads and -W=0, the paired reads maybe no overlap, then:\n        -D -w=0 -N(optional): to output merged sequence, the gap(between the paired reads) will be filled with 'n'\n        -D -w=0 -R: to output merged sequences,the gap(between the paired reads) will be filled with matched Germline V sequences\n        \nThere are test data(Test/\\*.fq.gz) and example for running(Test/test.sh) \n\nNote: the directory \"Simulated_data\" is not associated with IMperm itself, and so this directory is not neccessary to download if you want to use IMperm. However, the data in this directory could be used to test IMperm.\n \n"
      },
      "source": "https://raw.githubusercontent.com/zhangwei2015/IMperm/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/zhangwei2015/IMperm/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2022 Zhang Wei\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/zhangwei2015/IMperm/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "IMperm"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "zhangwei2015"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 161460,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 784,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/zhangwei2015/IMperm/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 09:33:27",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ]
}