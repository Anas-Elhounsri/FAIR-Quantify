{
  "application_domain": [
    {
      "confidence": 19.94,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/kakarotcq/Con-AAE"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-05-19T07:22:01Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-03-12T13:47:42Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9673422177170813,
      "result": {
        "original_header": "Con-AAE: Contrastive Cycle Adversarial Autoencoders for Single-cell Multi-omics Alignment and Integration",
        "type": "Text_excerpt",
        "value": "This model can integrate and align multi-omics data.\n \n"
      },
      "source": "https://raw.githubusercontent.com/kakarotcq/Con-AAE/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/kakarotcq/Con-AAE/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kakarotcq/Con-AAE/main/Demo.ipynb"
      },
      "source": "https://raw.githubusercontent.com/kakarotcq/Con-AAE/main/Demo.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kakarotcq/Con-AAE/main/sensitivity_analysis.ipynb"
      },
      "source": "https://raw.githubusercontent.com/kakarotcq/Con-AAE/main/sensitivity_analysis.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kakarotcq/Con-AAE/main/visualization/visualization.ipynb"
      },
      "source": "https://raw.githubusercontent.com/kakarotcq/Con-AAE/main/visualization/visualization.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kakarotcq/Con-AAE/main/visualization/.ipynb_checkpoints/visualization-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/kakarotcq/Con-AAE/main/visualization/.ipynb_checkpoints/visualization-checkpoint.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kakarotcq/Con-AAE/main/experiments/MOFA.ipynb"
      },
      "source": "https://raw.githubusercontent.com/kakarotcq/Con-AAE/main/experiments/MOFA.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/kakarotcq/Con-AAE/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "kakarotcq/Con-AAE"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Con-AAE: Contrastive Cycle Adversarial Autoencoders for Single-cell Multi-omics Alignment and Integration"
      },
      "source": "https://raw.githubusercontent.com/kakarotcq/Con-AAE/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Setup",
        "parent_header": [
          "Con-AAE: Contrastive Cycle Adversarial Autoencoders for Single-cell Multi-omics Alignment and Integration"
        ],
        "type": "Text_excerpt",
        "value": "Con-AAE is a deep learning framework based on Pytorch. All experiments of Con-AAE are implemented with **python version=3.7.7** and **pytorch version=1.4.0**.\nWe exported the environment, so users can create environment with:\n```\nconda env create -f conAAE_env.yaml\n```\n"
      },
      "source": "https://raw.githubusercontent.com/kakarotcq/Con-AAE/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/kakarotcq/Con-AAE/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2023 cedar_wang\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/kakarotcq/Con-AAE/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Con-AAE"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "kakarotcq"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 2727168,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 62936,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kakarotcq/Con-AAE/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "kakarotcq",
          "type": "User"
        },
        "date_created": "2023-03-20T09:25:55Z",
        "date_published": "2023-03-20T09:32:03Z",
        "html_url": "https://github.com/kakarotcq/Con-AAE/releases/tag/v1.0.0",
        "name": "First release",
        "release_id": 96175848,
        "tag": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/kakarotcq/Con-AAE/tarball/v1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/kakarotcq/Con-AAE/releases/96175848",
        "value": "https://api.github.com/repos/kakarotcq/Con-AAE/releases/96175848",
        "zipball_url": "https://api.github.com/repos/kakarotcq/Con-AAE/zipball/v1.0.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-04 09:02:43",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 9
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "Con-AAE: Contrastive Cycle Adversarial Autoencoders for Single-cell Multi-omics Alignment and Integration"
        ],
        "type": "Text_excerpt",
        "value": "Required Files:\n1. gene count matrix file (rna.csv): rows are cells and columns are genes.\n2. scATAC matrix file (atac.csv): rows care cells and columns are peaks.\n3. annotations for cells (label.csv): used to annotate the cell type for each cell.\n\nParameters:\n```\n    options.add_argument('-sd', '--save-dir', action=\"store\", dest=\"save_dir\")\n    options.add_argument('-i', '--input-dir', action=\"store\", dest=\"input_dir\")\n    options.add_argument('--save-freq', action=\"store\", dest=\"save_freq\", default=10, type=int)\n    options.add_argument('--pretrained-file', action=\"store\")\n\n    # training parameters\n    options.add_argument('-bs', '--batch-size', action=\"store\", dest=\"batch_size\", default=32, type=int) #batch size in training process\n    options.add_argument('-nz', '--latent-dimension', action=\"store\", dest=\"nz\", default=50, type=int)  #dimension of embeddings\n    \n    options.add_argument('-lrD', '--learning-rate-D', action=\"store\", dest=\"learning_rate_D\", default=1e-4, type=float) # learning rate for discriminator network\n    options.add_argument('-e', '--max-epochs', action=\"store\", dest=\"max_epochs\", default=101, type=int) # max epoch\n    options.add_argument('-wd', '--weight-decay', action=\"store\", dest=\"weight_decay\", default=0, type=float) # weight decay in training process\n    options.add_argument('--contrastive-loss',action=\"store_true\") # whether calculate contrastive loss when training the model\n    options.add_argument('--consistency-loss',action=\"store_true\") # whether calculate cycle consistency loss when training the model\n    options.add_argument('--anchor-loss',action=\"store_true\") # whether introducing pairwise information in training process\n    options.add_argument('--MMD-loss',action=\"store_true\") # whether introducing mmd loss in embedding space\n    options.add_argument('--augmentation',action=\"store_true\") # whether implementing augmentation for data\n\n    # hyperparameters\n    options.add_argument('-lrAE', '--learning-rate-AE', action=\"store\", dest=\"learning_rate_AE\", default=1e-4, type=float) #learning rate for coupled autoencoders\n    options.add_argument('--margin', action=\"store\", default=0.3, type=float) # margin in contrastive loss\n    options.add_argument('--alpha', action=\"store\", default=10.0, type=float) # weight of contrastive loss, discriminative loss and cycle consistency loss \n    options.add_argument('--beta', action=\"store\", default=1., type=float) # weight of simple classifier\n    options.add_argument('--beta1', action=\"store\", default=0.5, type=float) # parameter in Adam optimizer\n    options.add_argument('--beta2', action=\"store\", default=0.999, type=float) # parameter in Adam optimizer\n```"
      },
      "source": "https://raw.githubusercontent.com/kakarotcq/Con-AAE/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example",
        "parent_header": [
          "Con-AAE: Contrastive Cycle Adversarial Autoencoders for Single-cell Multi-omics Alignment and Integration"
        ],
        "type": "Text_excerpt",
        "value": "An example is placed as **Demo.ipynb**. Please run the example to get familiar with Con-AAE.\nIt may take 10 mins with one NVIDIA tesla v100 GPU or 50 mins with only CPU.\n"
      },
      "source": "https://raw.githubusercontent.com/kakarotcq/Con-AAE/main/README.md",
      "technique": "header_analysis"
    }
  ]
}