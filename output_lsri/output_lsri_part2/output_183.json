{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation:",
        "type": "Text_excerpt",
        "value": "If you use GPMeta in your research, please cite:\n\n[Xuebin Wang, Taifu Wang, et al, GPMeta: a GPU-accelerated method for ultrarapid pathogen identification from metagenomic sequences, Briefings in Bioinformatics, 2023;bbad092, https://doi.org/10.1093/bib/bbad092.](https://doi.org/10.1093/bib/bbad092)\n"
      },
      "source": "https://raw.githubusercontent.com/Bgi-LUSH/GPMeta/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Index the reference database",
        "parent_header": [
          "Citation:",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "```\nhost database:      GPMetaIndex human.fasta index_step 0\npathogen database:  GPMetaIndex pmseq.fasta index_step 1\n\n    index_step:INT step number [3]\n\nIndex and generate refhash.bin.\n```"
      },
      "source": "https://raw.githubusercontent.com/Bgi-LUSH/GPMeta/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "load the reference database to GPU",
        "parent_header": [
          "Citation:",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "```\nhost database:      GPMetaMemServer_host human.fasta index.conf\n    index.conf:\n    /human_index/refHash.bin\n\nThe index.conf file stores the human index path.\n\npathogen database:  GPMetaMemServer_pathogen ref.conf index.conf\n    ref.conf:\n    /pmseq/fasta1.fa\n    /pmseq/fasta2.fa\n    index.conf:\n    /pmseq/1/refHash.bin\n    /pmseq/2/refHash.bin\n    /pmseq/get_species_genus.xls\n\nAccording to the number of ref splits, the ref.conf file stores the ref path.The index.conf file stores the corresponding index path and species relationship file.\n```"
      },
      "source": "https://raw.githubusercontent.com/Bgi-LUSH/GPMeta/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Alignement to host DB",
        "parent_header": [
          "Citation:",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "```\n[info] single mate\nUsage: GPMeta_host <required> [options]\n\nAlgorithm required:\n\n    --ref              -r FILE reference file path\n    --fastq            -1 FILE fastq file path\n\nAlgorithm options:\n\n    --output           -o FILE bam file to output results to [stdout]\n    --fq_out           -f No compare file path\n    --reads_out        -h Human reads statistics file path\n    --batchSize        -b INT batch size of GPU memory [10000]\n    --gpuRes           -g INT GPU resource number [32]\n    --cpuRes           -c INT CPU resource number [2]\n\nNote: Please read the man page for detailed description of the command line and options.\nExample:./GPMeta_host -r /data/hg19.fasta -1 /data/test.fq\n```"
      },
      "source": "https://raw.githubusercontent.com/Bgi-LUSH/GPMeta/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Alignement to pathogen DB",
        "parent_header": [
          "Citation:",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "```\n[info] single mate\nUsage: GPMeta_pathogen <required> [options]\n\nAlgorithm required:\n\n    --ref              -r FILE reference file path\n    --fastq            -1 FILE fastq file path\n\nAlgorithm options:\n\n    --output           -o FILE bam file to output results to [stdout]\n    --statistics       -I output Contig_Species_Genus or not\n    --pmseq_out        -P Pmseq data statistics file path\n    --reads_out        -p Pmseq reads statistics file path\n    --ref_out          -R Ref contig statistics file path\n    --ref_limit        -n Ref contig statistics out limit\n    --batchSize        -b INT batch size of GPU memory [10000]\n    --gpuRes           -g INT GPU resource number [32]\n    --cpuRes           -c INT CPU resource number [2]\n\nNote: Please read the man page for detailed description of the command line and options.\nExample:./GPMeta_pathogen -r /data/hg19.fasta -1 /data/test.fq\n```\n"
      },
      "source": "https://raw.githubusercontent.com/Bgi-LUSH/GPMeta/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1. outputs in host-flitering:",
        "parent_header": [
          "Citation:",
          "Results"
        ],
        "type": "Text_excerpt",
        "value": "`*.sam / *.bam`:  The SAM/BAM file containing alignments.  \n`*.Human_reads.stat`: Statistical results for host filtering.  \nfor example:  \n```\ntotal_reads:111777654\nhost_reads:99836961\nnon_human_reads:11940693\nnon_human_rate:10.682540%\n```\n`*.rmhost.fq`: FASTQ file containing reads that fail to align.  \n"
      },
      "source": "https://raw.githubusercontent.com/Bgi-LUSH/GPMeta/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2. outputs in pathogen identification:",
        "parent_header": [
          "Citation:",
          "Results"
        ],
        "type": "Text_excerpt",
        "value": "`*.sam / *.bam`:  The SAM/BAM file containing alignments.  \n`pmseq_out.xls`: a report with aggregrate counts at genus and species levels.  \nfor example:  \n```\nSpeciesLatin    GenusLatin      SpeciesSMRN     GenusSMRN       SSRN    GSRN    S_count G_count SRPM    GRPM\nBuchnera aphidicola     Buchnera        3314    3314    3129    3129    3314    3314    279.617188      279.617188\nBorreliella burgdorferi Borreliella     76      67767   0       30909   78      67771   6.581213        5718.145996\nBorrelia hermsii        Borrelia        43321   50586   20449   21921   43322   50587   3655.273193     4268.254395\nTreponema denticola     Treponema       5059    26974   66      17023   5060    26975   426.935089      2276.002930\n```\nThe field descriptions are as follows:  \n```\nSpeciesLatin: Latin name of the species.  \nGenusLatin: Latin name of the genus.   \nSpeciesSMRN:  Number of strictly reads of the species. Strictly reads are defined as Alignment_score>=30 and match_rate>=0.9 and mismatch_rate<=0.08.  \nGenusSMRN: Number of strictly reads of the genus. Strictly reads are defined as Alignment_score>=30 and match_rate>=0.9 and mismatch_rate<=0.08.    \nSSRN: Number of unique mapping reads at species level.  \nGSRN: Number of unique mapping reads at genus level.   \nS_count: Number of total mapping reads at species level.   \nG_count: Number of total mapping reads at genus level.  \nSRPM: RPM (Reads per million mapped reads) at species level.   \nGRPM: RPM (Reads per million mapped reads) at genus level.  \n```\n\n`*.reads_out.txt`: Statistical results for pathogen identification.  \nfor example:   \n```\nmapped_reads:11851918\nmapped_reads rate:99.256531\nunknown_reads:88775\nreads_total:11940693\n```\n`*.ref_out.xls`: Depth information of the identified pathogen genome.  \nfor example:  \n```\nRefID   Length  mapped_reads    depth\nNC_009614.1     5163189 98867   0.957422\nNC_017355.1     1588278 83445   2.626902\nNC_017986.1     6085449 81191   0.667091\nNC_015167.1     3765936 75001   0.995782\nNC_015177.1     4635236 75000   0.809020\n```\nThe field descriptions are as follows: \n```\nRefID: ID of the reference sequence.    \nLength: The length of this reference sequence.   \nmapped_reads: Number of reads aligned to this reference sequence.   \ndepth: The average sequencing depth. \n```\n\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/Bgi-LUSH/GPMeta/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Bgi-LUSH/GPMeta"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-09-19T07:31:32Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-06-04T02:33:39Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A GPU-accelerated method for ultrarapid pathogen identification from metagenomic sequences."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "parent_header": [
          "GPMeta"
        ],
        "type": "Text_excerpt",
        "value": "GPMeta is a GPU-accelerated method for ultrarapid pathogen identification from metagenomic sequences. GPMeta can rapidly and accurately remove host contamination, isolate microbial reads, and identify potential disease-causing pathogens. GPMeta is much faster than existing CPU-based tools, being 5-40x faster than Kraken2 and Centrifuge and 25-68x faster than Bwa and Bowtie2 by using a GPU-computing technique.\n![GPMeta](https://user-images.githubusercontent.com/19549825/166857024-a8b9bd9c-7457-4e09-a4fd-2b63725c8258.png)\n"
      },
      "source": "https://raw.githubusercontent.com/Bgi-LUSH/GPMeta/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.8269120713623502,
      "result": {
        "original_header": "GPMeta",
        "type": "Text_excerpt",
        "value": "A GPU-accelerated method for ultrarapid pathogen identification from metagenomic sequences.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Bgi-LUSH/GPMeta/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Bgi-LUSH/GPMeta/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Bgi-LUSH/GPMeta/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Bgi-LUSH/GPMeta"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/Bgi-LUSH/GPMeta/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Bgi-LUSH/GPMeta/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Apache License 2.0",
        "spdx_id": "Apache-2.0",
        "type": "License",
        "url": "https://api.github.com/licenses/apache-2.0",
        "value": "https://api.github.com/licenses/apache-2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
      },
      "source": "https://raw.githubusercontent.com/Bgi-LUSH/GPMeta/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://user-images.githubusercontent.com/19549825/166857024-a8b9bd9c-7457-4e09-a4fd-2b63725c8258.png"
      },
      "source": "https://raw.githubusercontent.com/Bgi-LUSH/GPMeta/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "GPMeta"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "Bgi-LUSH"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 32566,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 13343,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Bgi-LUSH/GPMeta/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirements",
        "parent_header": [
          "Citation:"
        ],
        "type": "Text_excerpt",
        "value": "GPMeta requires NVIDIA's GPUs\uff0cwhich the sum of the graphics memory of the graphics card needs to be greater than the database size."
      },
      "source": "https://raw.githubusercontent.com/Bgi-LUSH/GPMeta/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "installation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 09:42:07",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 21
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "Citation:"
        ],
        "type": "Text_excerpt",
        "value": "GPMeta requires database files in a specific format for sequence alignment. These files can be generated from FASTA formmated DNA sequence files.To generate multiple pathogen databases, you need to split the FASTA file evenly according to the number of GPU graphics cards(the minimum granularity is chromosomes).Database index can take step interval.Users have to prepare a database file in FASTA format and convert it into GPMeta format database files by using \"Index the reference database\" command at first.The database needs to be loaded into GPU video memory before sequence alignment."
      },
      "source": "https://raw.githubusercontent.com/Bgi-LUSH/GPMeta/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Alignement to host DB",
        "parent_header": [
          "Citation:",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "```\n[info] single mate\nUsage: GPMeta_host <required> [options]\n\nAlgorithm required:\n\n    --ref              -r FILE reference file path\n    --fastq            -1 FILE fastq file path\n\nAlgorithm options:\n\n    --output           -o FILE bam file to output results to [stdout]\n    --fq_out           -f No compare file path\n    --reads_out        -h Human reads statistics file path\n    --batchSize        -b INT batch size of GPU memory [10000]\n    --gpuRes           -g INT GPU resource number [32]\n    --cpuRes           -c INT CPU resource number [2]\n\nNote: Please read the man page for detailed description of the command line and options.\nExample:./GPMeta_host -r /data/hg19.fasta -1 /data/test.fq\n```"
      },
      "source": "https://raw.githubusercontent.com/Bgi-LUSH/GPMeta/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Alignement to pathogen DB",
        "parent_header": [
          "Citation:",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "```\n[info] single mate\nUsage: GPMeta_pathogen <required> [options]\n\nAlgorithm required:\n\n    --ref              -r FILE reference file path\n    --fastq            -1 FILE fastq file path\n\nAlgorithm options:\n\n    --output           -o FILE bam file to output results to [stdout]\n    --statistics       -I output Contig_Species_Genus or not\n    --pmseq_out        -P Pmseq data statistics file path\n    --reads_out        -p Pmseq reads statistics file path\n    --ref_out          -R Ref contig statistics file path\n    --ref_limit        -n Ref contig statistics out limit\n    --batchSize        -b INT batch size of GPU memory [10000]\n    --gpuRes           -g INT GPU resource number [32]\n    --cpuRes           -c INT CPU resource number [2]\n\nNote: Please read the man page for detailed description of the command line and options.\nExample:./GPMeta_pathogen -r /data/hg19.fasta -1 /data/test.fq\n```\n"
      },
      "source": "https://raw.githubusercontent.com/Bgi-LUSH/GPMeta/master/README.md",
      "technique": "header_analysis"
    }
  ]
}