{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/seansolari/expam"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-02-07T23:13:08Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-19T03:32:41Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9190623332217018,
      "result": {
        "original_header": "<span style=\"color:red\">Important bug notice:</span>",
        "type": "Text_excerpt",
        "value": "There was a bug identified in the taxonomic mapping modules due to the pressence of multiple NCBI taxa with the name *\"environmental samples\"*. This bug has been fixed in version 1.4.0.0, however versions previous to this may contain errors in the taxonomic output. **Please update to at least version 1.4.0.0.** Note phylogenetic output can be re-mapped using the `expam to_taxonomy` command. \n"
      },
      "source": "https://raw.githubusercontent.com/seansolari/expam/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9982944549173208,
      "result": {
        "original_header": "Updates since version 1.2",
        "type": "Text_excerpt",
        "value": "- Now using ETE3 for interfacing with NCBI taxonomy. This fixes a bug with taxonomic conversion of phylogenetic results. **This is a critical bug - results from any version behind Expam 1.4 may contain errors with current versions of the NCBI taxonomy. Please update to Expam 1.4.**\n- Added \u2018total\u2019 counts column to phylogenetic and taxonomic output \u2013 combines SL and ML counts.\n- Create cumulative cutoff summary file, which combines sample outputs after accumulation and cutoff into a single table.\n    - This occurs for both phylogenetic and taxonomic output. The taxonomic output also contains taxonomic metadata in the final column.\n- Employ cutoff based on total counts, not SL and ML separately.\n- Taxonomic IDs for each input sequence must now be specified manually in the third column of \u2018accession_ids.csv\u2019 after a successful database build.\n- Fixed a bug in employing cutoff in phylogenetic output.\n- Only the taxonomic name associated with the ID is reported in taxonomic sample summaries, where previously the entire lineage was reported.\n- Removed `--phyla` flag.\n- Fixed bug in `expam tree ... --sourmash` which would not check for presence of signatures file before attempting distance matrix calculation.\n- Added `CountUniqueKmers.py` script.\n- Remove the `--cutoff` flag. Automated cutoffs can now only be applied in terms of `--cpm`.\n \n"
      },
      "source": "https://raw.githubusercontent.com/seansolari/expam/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Documentation",
        "type": "Text_excerpt",
        "value": "View our online documentation!\n\n[https://expam.readthedocs.io/en/latest/index.html](https://expam.readthedocs.io/en/latest/index.html)\n\nSee the Quick Start Tutorial for a guide to expam's basic usage and download links for pre-built databases.\n\n[Quick Start Tutorial](https://expam.readthedocs.io/en/latest/quickstart.html)\n\n\n<hr style=\"border:1px solid #ADD8E6\"> </hr>\n"
      },
      "source": "https://raw.githubusercontent.com/seansolari/expam/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://expam.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/seansolari/expam/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/seansolari/expam/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "faq": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Problems during installation",
        "parent_header": [
          "FAQ"
        ],
        "type": "Text_excerpt",
        "value": "**error: g++: Command not found**\n\nThis is simply a matter of updating the compiler.\n```console\nsudo apt-get install build-essential\n```\n\n<hr>\n\n**fatal error: Python.h: No such file or directory**\n\nThis simply means you need to install/update the Python development files for version 3.\n```console\nsudo apt-get install python3-dev\n```\n\n(Reference - [SO](https://stackoverflow.com/questions/21530577/fatal-error-python-h-no-such-file-or-directory/21530768))\n\n<hr>\n\n**ERROR:: Could not find a local HDF5 installation** (Mac)\n\nEnsure you have HDF5 installed using Homebrew:\n\n```console\nbrew install pkg-config\nbrew install hdf5\n```\n\nIf you see\n```console\nYou may need to explicitly state where your local HDF5 headers and library can be found by setting the ''HDF5_DIR'' environment variable or by using the ''--hdf5'' command-line option.\n```\nyou will need to explicitly set the `HDF5_DIR` environment variable. To see where HDF5 has been installed, run\n```console\nbrew info hdf5\n```\nYou should see something like `/usr/local/Cellar/hdf5/VERSION...` or `/opt/local/Cellar/hdf5/VERSION...` (ie. ignore everything after the complete version, which will have numbers separated by dots). Then set this environment variable with\n```console\nHDF5_DIR=/opt/local/Cellar/hdf5/VERSION,\n```\nreplacing this path with your output from `brew info`.\n\nNow retry the installation having set this environment variable.\n\n<hr>\n\n**ete3 importing errors**\n\nFor instance, `ImportError: cannot import name 'NodeStyle'`.\n\nThe *ete3* module depends on Qt to draw things, and there are two stages to getting this to work: first, Qt needs to be installed, and then you need to let Python know that Qt is installed. Follow the following instructions depending on your OS.\n\n***Mac***\n\nInstall qt5 using brew.\n\n```bash\nbrew install qt5\nbrew list --versions qt5\n```\n\nThis should show you the precise version that brew installed. We now tell Python which version of Qt5 to link up with. Say we have `qt@5 5.15.3` from the above command, then we would run\n\n```bash\npython3 -m pip install pyqt5==5.15\n```\n\nHad the output been `qt@5 5.12.0`, we would run \n\n```bash\npython3 -m pip install pyqt5==5.12\n```\n\nie. the first two parts of the version from brew. This should remedy the problem.\n\n\n***Linux***\n\nFirst update the local installation of Qt.\n```bash\nsudo apt-get install qt5-default\n```\n\nNow double-check which version of Qt has been installed.\n```bash\ndpkg -l | grep \"pyqt5\"\n```\n\nTake the first two parts of the version output from this, and pass it to this following install with Pip. For instance, if we have `qt5 5.12.0`, take the `5.12` component. Install the corresponding Python interface to Qt.\n```bash\npython3 -m pip install pyqt5==5.12\n```\n"
      },
      "source": "https://raw.githubusercontent.com/seansolari/expam/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "OOM Killer",
        "parent_header": [
          "FAQ"
        ],
        "type": "Text_excerpt",
        "value": "If you run into the unlikely circumstance where the OOM killer has been invoked and the program experiences an ungraceful exit, the operating system may not have cleaned all shared memory resources expam used, leading to potentially problematic memory leaks.\n\nTo prevent this occurring, make prudent use of the `expam_limit` functionality (see documentation), and don't use an extremely high number of processes (particularly for large databases). Within the range of 10-30 processes will likely be suitable for high-memory machines.\n\nIf you suspect that OOM killer has been invoked, this can be confirmed using the following command:\n\n```bash\ndmesg -T | egrep -i 'killed process'\n```\n\nIn the event OOM killer has been called, it is prudent to check\nhow much shared memory is currently being used by the system.\n\n```bash\ndf -h /dev/shm\n```\n\nIf the amount of shared memory used is higher than you would expect, you can first check if there are any residual resources that need to be cleaned up.\n\n```bash\nls -lah /dev/shm\n```\n\nIf there are files starting with 'psm' and owned by you, these may be residual files that need to be cleaned up. Contact your systems administrator to remove these files.\n\nIt may also be the case that OOM killer has killed some child process, leaving the parent process sleeping (and therefore holding onto resources). You will need your system administrator's assistance to clean this up. \n\nTo check for sleeping (expam) processes, run \n\n```bash\nsudo lsof /dev/shm | grep \"expam\"\n```\n\nThese sleeping processes should then be killed by running\n\n```bash\nkill -9 <PID>\n```\n\nConfirm that the leaked memory has been freed by running `df -h /dev/shm`.\n\n\n<hr style=\"border:1px solid #ADD8E6\"> </hr>\n"
      },
      "source": "https://raw.githubusercontent.com/seansolari/expam/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/seansolari/expam/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "seansolari/expam"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/seansolari/expam/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/seansolari/expam/main/recipes/docker/conda/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/seansolari/expam/main/recipes/docker/conda/Dockerfile",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/seansolari/expam/main/recipes/docker/github/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/seansolari/expam/main/recipes/docker/github/Dockerfile",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/seansolari/expam/main/recipes/docker/pip/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/seansolari/expam/main/recipes/docker/pip/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/seansolari/expam/main/recipes/docker/conda/entrypoint.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/seansolari/expam/main/recipes/docker/pip/run.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "From Bioconda (Recommended)",
        "parent_header": [
          "**Install**."
        ],
        "type": "Text_excerpt",
        "value": "Conda installation is recommended, and best practise is to install *expam* in a new environment. Some users may wish to use the ETE3 toolkit for plotting, while others may prefer the iTOL tool. Both commands are included in respective order.\n\n**With ETE3**\n```console\nconda create -n expam -c conda-forge -c bioconda -c etetoolkit expam ete3\n```\n\n**Without ETE3**\n```console\nconda create -n expam -c conda-forge -c bioconda expam\n```\n"
      },
      "source": "https://raw.githubusercontent.com/seansolari/expam/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "From PyPI",
        "parent_header": [
          "**Install**."
        ],
        "type": "Text_excerpt",
        "value": "***Mac***\n\nYou will need a local installation of HDF5. This may already be installed on your machine, but can be installed using Homebrew with the following commands.\n\n```console\nbrew install pkg-config\nbrew install hdf5\n```\n\nIf you encounter any errors, check the FAQ section on GitHub for solutions.\n\nThen **upgrade pip** and install expam.\n\n```console\npython3 -m pip install --upgrade pip\npython3 -m pip install expam\n```\n\n***Linux***\n\nYou may need to update g++ resources on your local machine. For linux, you can run the following.\n\n```console\napt update\napt-get install build-essential\n```\n\nThen **upgrade pip** and install expam.\n\n```console\npython3 -m pip install --upgrade pip\npython3 -m pip install expam\n```\n"
      },
      "source": "https://raw.githubusercontent.com/seansolari/expam/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "From GitLab source",
        "parent_header": [
          "**Install**."
        ],
        "type": "Text_excerpt",
        "value": "To install from source, you need a local installation of `Python >=3.8`, as well as `numpy`\nand `cython`. There are some commonly encountered problems when installing on Linux, the\nmost common of which are outlined in the FAQ section below.\n\nYou may need to update g++ resources on your local machine. For linux, you can run the following.\n\n```console\napt update\napt-get install build-essential\n```\n\nFirst download the source code from the GitLab repository.\n```console\ngit clone https://github.com/seansolari/expam.git\n\n```\n\nThis can then be installed locally by executing the following command from the\nsource code root:\n```console\ncd expam\npython3 -m pip install --upgrade pip\npython3 -m pip install -r requirements.txt\npython3 setup.py install\n```\n\n<hr style=\"border:1px solid #ADD8E6\"> </hr>\n"
      },
      "source": "https://raw.githubusercontent.com/seansolari/expam/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Problems during installation",
        "parent_header": [
          "FAQ"
        ],
        "type": "Text_excerpt",
        "value": "**error: g++: Command not found**\n\nThis is simply a matter of updating the compiler.\n```console\nsudo apt-get install build-essential\n```\n\n<hr>\n\n**fatal error: Python.h: No such file or directory**\n\nThis simply means you need to install/update the Python development files for version 3.\n```console\nsudo apt-get install python3-dev\n```\n\n(Reference - [SO](https://stackoverflow.com/questions/21530577/fatal-error-python-h-no-such-file-or-directory/21530768))\n\n<hr>\n\n**ERROR:: Could not find a local HDF5 installation** (Mac)\n\nEnsure you have HDF5 installed using Homebrew:\n\n```console\nbrew install pkg-config\nbrew install hdf5\n```\n\nIf you see\n```console\nYou may need to explicitly state where your local HDF5 headers and library can be found by setting the ''HDF5_DIR'' environment variable or by using the ''--hdf5'' command-line option.\n```\nyou will need to explicitly set the `HDF5_DIR` environment variable. To see where HDF5 has been installed, run\n```console\nbrew info hdf5\n```\nYou should see something like `/usr/local/Cellar/hdf5/VERSION...` or `/opt/local/Cellar/hdf5/VERSION...` (ie. ignore everything after the complete version, which will have numbers separated by dots). Then set this environment variable with\n```console\nHDF5_DIR=/opt/local/Cellar/hdf5/VERSION,\n```\nreplacing this path with your output from `brew info`.\n\nNow retry the installation having set this environment variable.\n\n<hr>\n\n**ete3 importing errors**\n\nFor instance, `ImportError: cannot import name 'NodeStyle'`.\n\nThe *ete3* module depends on Qt to draw things, and there are two stages to getting this to work: first, Qt needs to be installed, and then you need to let Python know that Qt is installed. Follow the following instructions depending on your OS.\n\n***Mac***\n\nInstall qt5 using brew.\n\n```bash\nbrew install qt5\nbrew list --versions qt5\n```\n\nThis should show you the precise version that brew installed. We now tell Python which version of Qt5 to link up with. Say we have `qt@5 5.15.3` from the above command, then we would run\n\n```bash\npython3 -m pip install pyqt5==5.15\n```\n\nHad the output been `qt@5 5.12.0`, we would run \n\n```bash\npython3 -m pip install pyqt5==5.12\n```\n\nie. the first two parts of the version from brew. This should remedy the problem.\n\n\n***Linux***\n\nFirst update the local installation of Qt.\n```bash\nsudo apt-get install qt5-default\n```\n\nNow double-check which version of Qt has been installed.\n```bash\ndpkg -l | grep \"pyqt5\"\n```\n\nTake the first two parts of the version output from this, and pass it to this following install with Pip. For instance, if we have `qt5 5.12.0`, take the `5.12` component. Install the corresponding Python interface to Qt.\n```bash\npython3 -m pip install pyqt5==5.12\n```\n"
      },
      "source": "https://raw.githubusercontent.com/seansolari/expam/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9974721333118224,
      "result": {
        "original_header": "<span style=\"color:red\">Important bug notice:</span>",
        "type": "Text_excerpt",
        "value": "There was a bug identified in the taxonomic mapping modules due to the pressence of multiple NCBI taxa with the name *\"environmental samples\"*. This bug has been fixed in version 1.4.0.0, however versions previous to this may contain errors in the taxonomic output. **Please update to at least version 1.4.0.0.** Note phylogenetic output can be re-mapped using the `expam to_taxonomy` command. \n"
      },
      "source": "https://raw.githubusercontent.com/seansolari/expam/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.998701423608206,
      "result": {
        "original_header": "Commands",
        "type": "Text_excerpt",
        "value": "A complete list of available commands can by found by using the `-h`/`--help`\nflags.\n```console\nexpam --version\nexpam --help\n...\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/seansolari/expam/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/seansolari/expam/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "New BSD License\n\nCopyright (c) 2020 Sean Solari.\nAll rights reserved.\n\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n  a. Redistributions of source code must retain the above copyright notice,\n     this list of conditions and the following disclaimer.\n  b. Redistributions in binary form must reproduce the above copyright\n     notice, this list of conditions and the following disclaimer in the\n     documentation and/or other materials provided with the distribution.\n  c. Neither the name of the memory_profiler developers nor the names of\n     its contributors may be used to endorse or promote products\n     derived from this software without specific prior written\n     permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\nOUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH\nDAMAGE."
      },
      "source": "https://raw.githubusercontent.com/seansolari/expam/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/seansolari/expam/main/docs/source/expam-logo.png"
      },
      "source": "https://raw.githubusercontent.com/seansolari/expam/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "expam"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "seansolari"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 325301,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Cython",
        "size": 20186,
        "type": "Programming_language",
        "value": "Cython"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 15235,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 1514,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 582,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/seansolari/expam/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "usage",
    "identifier",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 13:11:37",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Bug Reports",
        "type": "Text_excerpt",
        "value": "Please raise any bug reports at https://github.com/seansolari/expam/issues\naccompanied by any error messages, a rough description of the database/setup and\nparameters used to create the database.\n"
      },
      "source": "https://raw.githubusercontent.com/seansolari/expam/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ]
}