{
  "application_domain": [
    {
      "confidence": 0.9834103695421146,
      "result": {
        "type": "String",
        "value": "Semantic web"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "Syllable-PBWT"
        ],
        "type": "Text_excerpt",
        "value": "If you found our work useful in your research, please consider citing the following paper:\n```\n@article{10.1093/bioinformatics/btac734,\n    author = {Wang, Victor and Naseri, Ardalan and Zhang, Shaojie and Zhi, Degui},\n    title = \"{Syllable-PBWT for space-efficient haplotype long-match query}\",\n    journal = {Bioinformatics},\n    volume = {39},\n    number = {1},\n    pages = {btac734},\n    year = {2022},\n    month = {11},\n    issn = {1367-4811},\n    doi = {10.1093/bioinformatics/btac734},\n    url = {https://doi.org/10.1093/bioinformatics/btac734},\n    eprint = {https://academic.oup.com/bioinformatics/article-pdf/39/1/btac734/48448727/btac734.pdf},\n}\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ZhiGroup/Syllable-PBWT/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Wang, Victor and Naseri, Ardalan and Zhang, Shaojie and Zhi, Degui",
        "doi": "10.1093/bioinformatics/btac734",
        "format": "bibtex",
        "title": "{Syllable-PBWT for space-efficient haplotype long-match query}",
        "type": "Text_excerpt",
        "url": "https://doi.org/10.1093/bioinformatics/btac734",
        "value": "@article{10.1093/bioinformatics/btac734,\n    eprint = {https://academic.oup.com/bioinformatics/article-pdf/39/1/btac734/48448727/btac734.pdf},\n    url = {https://doi.org/10.1093/bioinformatics/btac734},\n    doi = {10.1093/bioinformatics/btac734},\n    issn = {1367-4811},\n    month = {11},\n    year = {2022},\n    pages = {btac734},\n    number = {1},\n    volume = {39},\n    journal = {Bioinformatics},\n    title = {{Syllable-PBWT for space-efficient haplotype long-match query}},\n    author = {Wang, Victor and Naseri, Ardalan and Zhang, Shaojie and Zhi, Degui},\n}"
      },
      "source": "https://raw.githubusercontent.com/ZhiGroup/Syllable-PBWT/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ZhiGroup/Syllable-PBWT"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-06-21T15:07:01Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-04-22T03:05:39Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "parent_header": [
          "Syllable-PBWT"
        ],
        "type": "Text_excerpt",
        "value": "Syllable-PBWT is a space-efficient variation of the PBWT data structure introduced by Richard Durbin. In this repository, you'll find an implementation of Syllable-Query, an algorithm for querying long haplotype matches using the lightweight Syllable-PBWT data structures.\n"
      },
      "source": "https://raw.githubusercontent.com/ZhiGroup/Syllable-PBWT/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9712836528341797,
      "result": {
        "original_header": "Benchmarking",
        "type": "Text_excerpt",
        "value": "For reference, the `benchmark` folder includes our implementation for Algorithm 3 of [Sanaullah et al.](https://academic.oup.com/bioinformatics/article/37/16/2390/6149123) against which we benchmarked Syllable-Query.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ZhiGroup/Syllable-PBWT/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ZhiGroup/Syllable-PBWT/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ZhiGroup/Syllable-PBWT/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ZhiGroup/Syllable-PBWT"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Syllable-PBWT"
      },
      "source": "https://raw.githubusercontent.com/ZhiGroup/Syllable-PBWT/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ZhiGroup/Syllable-PBWT/master/benchmark/call_caller64M.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ZhiGroup/Syllable-PBWT/master/benchmark/call_fullM.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ZhiGroup/Syllable-PBWT/master/benchmark/call_caller128.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ZhiGroup/Syllable-PBWT/master/benchmark/call_caller128M.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ZhiGroup/Syllable-PBWT/master/benchmark/call_select.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ZhiGroup/Syllable-PBWT/master/benchmark/call_caller64N.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ZhiGroup/Syllable-PBWT/master/benchmark/call_fullN.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ZhiGroup/Syllable-PBWT/master/benchmark/call_full.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ZhiGroup/Syllable-PBWT/master/benchmark/call_caller64.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ZhiGroup/Syllable-PBWT/master/benchmark/call_prefix.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ZhiGroup/Syllable-PBWT/master/benchmark/call_stride.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ZhiGroup/Syllable-PBWT/master/benchmark/call_caller128N.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "Syllable-PBWT"
        ],
        "type": "Text_excerpt",
        "value": "Clone the repository:\n\n`git clone https://github.com/ZhiGroup/Syllable-PBWT`\n\nEnter the repository and compile the code:\n\n`cd Syllable-PBWT`\n\n`make`\n"
      },
      "source": "https://raw.githubusercontent.com/ZhiGroup/Syllable-PBWT/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ZhiGroup/Syllable-PBWT/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2023 The University of Texas Health Science Center at Houston and The University of Central Florida\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/ZhiGroup/Syllable-PBWT/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Syllable-PBWT"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "ZhiGroup"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 51372,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 2220,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 847,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ZhiGroup/Syllable-PBWT/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependencies",
        "parent_header": [
          "Syllable-PBWT"
        ],
        "type": "Text_excerpt",
        "value": "- Linux\n- C++ (at least GCC 5)\n"
      },
      "source": "https://raw.githubusercontent.com/ZhiGroup/Syllable-PBWT/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 11:41:27",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 9
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage Instructions",
        "parent_header": [
          "Syllable-PBWT"
        ],
        "type": "Text_excerpt",
        "value": "Our code allows multiple client users to query from one server program as long as they are on the same host. The server help page can be viewed by running\n`./server`:\n|              Flag             |      Description         |        Details         |\n|:-----------------------------:|:------------------------:|:---------------------:|\n| `-h` or `--help`  | Show this help message   |  |\n| `-f <FILE>` or `--fifo <FILE>`  | File path to create named pipe | For communication with clients |\n| `-i <FILE>` or `--input_panel <FILE>` | Path to VCF input file | |\n| `-b <VALUE>` or `--bits <VALUE>` | Value of B | B must be 64 or 128, by default 128. B is the number of sites to be grouped into one syllable. |\n| `-s` or `--save` | Will save panel data | For fast loading when rerunning this program with `--load`. You will be told the save file upon creation. |\n| `-l <FILE>` or `--load <FILE>` | Path to load file | Must be the save file of a previous successful run |\n| `-g <FILE>` or `--gen_map <FILE>` | Path to genetic map file | The genetic map will be used when the query length unit is cM. Format: Sites described by one line each with genetic location as the last tab-delimited field. To accommodate header lines, lines with a non-numeric last field will be ignored. |\n\nThe client program should be run with the server's named pipe (specified with `--fifo`) as the only parameter (you will be told so if you run `./client` with no parameters). When the server is done preprocessing, the client will be prompted with directions on how to query as well as the output format. Below are the flags used to query:\n|             Flag              |     Description         |\n|:-----------------------------:|:-----------------------:|\n| `-q <FILE>` or `--query_panel <FILE>` | Path to VCF query file |\n| `-l <VALUE>` or `--length <VALUE>` | Minimum length of desired matches |\n| `-u <STRING>` or `--units <STRING>` | Unit of query length: sites (default), cM, or bps |\n"
      },
      "source": "https://raw.githubusercontent.com/ZhiGroup/Syllable-PBWT/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Sample Use",
        "parent_header": [
          "Syllable-PBWT"
        ],
        "type": "Text_excerpt",
        "value": "The server and client programs are to be run from different terminals on the same host. In this example, we will use the data found in the `sample_data` folder. On terminal 1, run\n\n`./server -f fifo -i sample_data/sample_panel.vcf`\n\nOn terminal 2, run\n\n`./client fifo`\n\nand when prompted to enter a query, type\n\n`-q sample_data/sample_query.vcf -l 255`\n\nand then you will be told the file location of your match results.\n"
      },
      "source": "https://raw.githubusercontent.com/ZhiGroup/Syllable-PBWT/master/README.md",
      "technique": "header_analysis"
    }
  ]
}