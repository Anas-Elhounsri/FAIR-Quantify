{
  "application_domain": [
    {
      "confidence": 19.24,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "V. References",
        "type": "Text_excerpt",
        "value": "[Griottes: a generalist tool for network generation from segmented tissue images](https://www.biorxiv.org/content/10.1101/2022.01.14.476345v1), Gustave Ronteix, Andrey Aristov, Valentin Bonnet, Sebastien Sart, Jeremie Sobel, Elric Esposito &  Charles N. Baroud.\n"
      },
      "source": "https://raw.githubusercontent.com/BaroudLab/Griottes/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/BaroudLab/Griottes"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-01-12T10:59:33Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-12-20T10:23:12Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Python program to generate NetworkX graphs from segmented images."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "I. Project description",
        "type": "Text_excerpt",
        "value": "**Griottes** is an easy-to-use, one-stop, Python library to extract single-cell information from your images and return the data in a networkx graph recapitulating the tissue structure.\n\n - It works on segmented **2D** and **3D** images, no extra fuss required! We like to use [CellPose](https://cellpose.readthedocs.io/en/latest/index.html) for our image segmentation - but that's just a question of taste. You can also use dataframes as inputs.\n\n - On both **2D** and **3D** images you can easily insert extra information from supplementary fluorescence channels and embed the information on the graph.\n\n**Griottes** allows you to easily generate networks from your image data as shown in the image below.\n\n![](images/griottes_example.png)\n"
      },
      "source": "https://raw.githubusercontent.com/BaroudLab/Griottes/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9830559650680084,
      "result": {
        "original_header": "\ud83c\udf52  `Griottes` \ud83c\udf52",
        "type": "Text_excerpt",
        "value": "This is **\ud83c\udf52  Griottes\ud83c\udf52** a tool to maximize the amount of information you can extract from your microscopy images.\n \n"
      },
      "source": "https://raw.githubusercontent.com/BaroudLab/Griottes/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "III. Documentation",
        "type": "Text_excerpt",
        "value": "The full documentation is available at [Griottes documentation](https://griottes.readthedocs.io/en/latest/).\n"
      },
      "source": "https://raw.githubusercontent.com/BaroudLab/Griottes/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Generating networks from labeled images or dataframes",
        "parent_header": [
          "III. Documentation"
        ],
        "type": "Text_excerpt",
        "value": "The standard API for generating graphs is very similar for Delaunay, geometric and contact-based graphs. To generate a Delaunay graph the following function is available:\n```\ngriottes.graphmaker.graph_generation_func.generate_delaunay_graph(user_entry,\n    descriptors: list = [],\n    image_is_2D=False,\n    min_area=0,\n    analyze_fluo_channels=False,\n    fluo_channel_analysis_method=\"basic\",\n    radius=30,\n    distance=30,\n    mask_channel=None,\n)\n\n    \"\"\"\n    Creates a Delaunay graph.\n\n    This function creates a Delaunay graph from an\n    image or a dataframe object.\n\n    Parameters\n    ----------\n    user_entry : pandas.DataFrame or numpy.ndarray\n        contains the information on the cells.\n    descriptors : list, optional\n        contains the cell information included in the\n        network nodes.\n    distance : float, optional\n        the maximum distance between two nodes.\n    fluo_channel_analysis_method : str, optional\n        the method used to analyze the fluorescence channels.\n        'basic' measures the fluorescence properties within\n        the cell mask, 'local_sphere' within a sphere of\n        radius 'radius' and 'local_voronoi' within the \n        Voronoi tesselation of the cell.\n    radius: float, optional\n        radius of the sphere within the which the fluorescence\n        is analyzed. Irrelevant for the 'basic' fluorescence \n        analysis method.\n    image_is_2D : bool, optional\n        if True, the image is analyzed as a 2D image.\n        The default is False.\n    min_area : int, optional\n        the minimum area of a cell. The default is 0.\n    analyze_fluo_channels : bool, optional\n        if True, the fluorescence channels are analyzed.\n        The default is False.\n    mask_channel : int, optional\n        The channel containing the cell masks\n        The default is None.\n\n    Returns\n    -------\n    nx.Graph\n        The graph representation of the input.\n    \"\"\"\n\n```\n\nSimilarly, for geometric graphs the user can call `griottes.graphmaker.graph_generation_func.generate_geometric_graph` to make a geometric graph and `griottes.graphmaker.graph_generation_func.generate_contact_graph` to make a contact graph.\n"
      },
      "source": "https://raw.githubusercontent.com/BaroudLab/Griottes/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://griottes.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/BaroudLab/Griottes/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/BaroudLab/Griottes/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BaroudLab/Griottes/main/example_notebooks/Figure_4.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BaroudLab/Griottes/main/example_notebooks/Figure_4.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BaroudLab/Griottes/main/example_notebooks/Figure_3.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BaroudLab/Griottes/main/example_notebooks/Figure_3.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BaroudLab/Griottes/main/example_notebooks/Figure_2.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BaroudLab/Griottes/main/example_notebooks/Figure_2.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BaroudLab/Griottes/main/docs/source/Figure_4.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BaroudLab/Griottes/main/docs/source/Figure_4.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BaroudLab/Griottes/main/docs/source/Figure_3.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BaroudLab/Griottes/main/docs/source/Figure_3.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BaroudLab/Griottes/main/docs/source/Figure_2.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BaroudLab/Griottes/main/docs/source/Figure_2.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://mybinder.org/v2/gh/BaroudLab/Griottes.git/main"
      },
      "source": "https://raw.githubusercontent.com/BaroudLab/Griottes/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/BaroudLab/Griottes/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "BaroudLab/Griottes"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "\ud83c\udf52  Griottes \ud83c\udf52"
      },
      "source": "https://raw.githubusercontent.com/BaroudLab/Griottes/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BaroudLab/Griottes/main/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/BaroudLab/Griottes/main/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BaroudLab/Griottes/main/images/griottes_example.png"
      },
      "source": "https://raw.githubusercontent.com/BaroudLab/Griottes/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "From source",
        "parent_header": [
          "II. Installation"
        ],
        "type": "Text_excerpt",
        "value": "For the moment, only installation via the repository is possible, so you'll have to download it from the command line. In the command prompt enter:\n\n```\ngit clone https://github.com/BaroudLab/Griottes.git\n```\n\nThis should download the project. Then install the required packages. In the terminal, navigate to the package directory and type:\n\n```\npip install .\n```\n\nThe library is now installed on your computer. An example of the library can be accessed [here](./example_notebooks/).\n"
      },
      "source": "https://raw.githubusercontent.com/BaroudLab/Griottes/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "From docker image",
        "parent_header": [
          "II. Installation"
        ],
        "type": "Text_excerpt",
        "value": "``` docker run -it -p 8888:8888 ghcr.io/baroudlab/griottes:latest ```\n\nThis will open jupyter lab in the folder with the sample notebooks (/home/jovyan/Griottes/example_notebooks) also containing paper figures.\n\nIf you want to customize starting folder, just run \n\n``` docker run -it -p 8888:8888 ghcr.io/baroudlab/griottes:latest jupyter lab --notebook-dir /home/jovyan/```\n\nIn order to provide your own data to the notebooks, bind your local folder as follows:\n\n``` docker run -it -p 8892:8888 -v \"${PWD}\":/home/jovyan/work ghcr.io/baroudlab/griottes:latest jupyter lab --notebook-dir /home/jovyan/work```\n"
      },
      "source": "https://raw.githubusercontent.com/BaroudLab/Griottes/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Try in on Binder",
        "parent_header": [
          "II. Installation"
        ],
        "type": "Text_excerpt",
        "value": "[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/BaroudLab/Griottes.git/main)\n"
      },
      "source": "https://raw.githubusercontent.com/BaroudLab/Griottes/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/BaroudLab/Griottes/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) [year] [fullname]\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
      },
      "source": "https://raw.githubusercontent.com/BaroudLab/Griottes/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Griottes"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "BaroudLab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 1170331,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 62292,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 237,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BaroudLab/Griottes/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://cellpose.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/BaroudLab/Griottes/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "gronteix",
          "type": "User"
        },
        "date_created": "2022-03-21T17:12:38Z",
        "date_published": "2022-03-22T11:22:51Z",
        "description": "We include data to reproduce examples in the Jupyter Notebooks. The 3D MSC spheroid imaging data will be included shortly.\r\n\r\n# Zebrafish telencephalon image\r\n\r\nMultichannel labeled image including fluorescence intensities for DAPI, ZO1, GFAP and PCNA. The structure of the image is available immediately below:\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nfrom tifffile import imread\r\n\r\nimage_path = 'zebrafish_brain_cell_labels.tiff'\r\nimage = imread(image_path)\r\n\r\ntitle = ['DAPI',\r\n       'ZO1',\r\n       'GFAP',\r\n       'PCNA',\r\n       'labels']\r\n\r\nfig, ax  = plt.subplots(1,5, figsize = (10,3))\r\n\r\nfor i in range(5):\r\n    \r\n    ax[i].imshow(image[...,i], cmap = 'gray')\r\n    ax[i].set_title(title[i])\r\n    ax[i].axis('off')\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/17712175/159466174-9f80e421-babf-4c94-90ad-53519a6907b7.png)\r\n\r\n# Data tables\r\n\r\nThe release contains two relevant CSV files with information on single-cell positions (x and y coordinates), cell types etc. from which to build the network.\r\n\r\n## Zebrafish telencephalon data\r\n\r\nThis data table contains single cell information (cell position and cell type) based on manual analysis of imaging data.\r\n\r\n```python\r\nimport pandas\r\n\r\nzebrafish_cell_data = pandas.read_csv('zebrafish_cell_properties.csv')\r\nprint(zebrafish_cell_data.head().to_markdown(index=False))\r\n```\r\n\r\n|       x |       y |       z |   cell_type | cell_properties   |   label |   GFAP |   PCNA |\r\n|--------:|--------:|--------:|------------:|:------------------|--------:|-------:|-------:|\r\n| 584.728 | 338.906 | 46.6292 |           2 | GFAP- ,PCNA+      |       0 |      0 |      1 |\r\n| 334.194 | 355.575 | 49.7991 |           2 | GFAP- ,PCNA+      |       1 |      0 |      1 |\r\n| 307.509 | 498.21  | 42.75   |           2 | GFAP- ,PCNA+      |       2 |      0 |      1 |\r\n| 289.072 | 477.537 | 47.75   |           2 | GFAP- ,PCNA+      |       3 |      0 |      1 |\r\n| 338.631 | 371.499 | 47.6411 |           2 | GFAP- ,PCNA+      |       4 |      0 |      1 |\r\n\r\n## MSC spheroid data\r\n\r\nThis data table contains single cell information (cell position and cell type) from MSC spheroids. The single-cell data have been extracted from the 3D_spheroid_multichannel_image.tiff image using `cell_property_extraction.get_cell_properties` method from `Griottes`. An example snippet is included below:\r\n\r\n```python\r\nimport tifffile\r\nimport pandas\r\nfrom griottes.analyse import cell_property_extraction\r\n\r\nspheroid_image = tifffile.imread('3D_spheroid_multichannel_image.tiff')\r\n\r\nprop = cell_property_extraction.get_cell_properties(\r\n    spheroid_image,\r\n    mask_channel = 3,\r\n    analyze_fluo_channels = True,\r\n    fluo_channel_analysis_method = 'local_voronoi',\r\n    cell_geometry_properties = True,\r\n    radius = 35,\r\n    labeled_voronoi_tesselation = False,\r\n    percentile = 95,\r\n    min_area = 400\r\n    )\r\n```\r\nThis yields the following data table:\r\n\r\n|   z |   x |   y |   area |   label |       vec_0 |      vec_1 |     vec_2 |     theta |         psi |   eccentricity |   mean_intensity_channel_0 |   percentile_intensity_channel_0 |   mean_intensity_channel_1 |   percentile_intensity_channel_1 |   mean_intensity_channel_2 |   percentile_intensity_channel_2 |\r\n|----:|----:|----:|-------:|--------:|------------:|-----------:|----------:|----------:|------------:|---------------:|---------------------------:|---------------------------------:|---------------------------:|---------------------------------:|---------------------------:|---------------------------------:|\r\n|   1 |  92 | 367 |    707 |     107 | -0.00339815 | -0.847943  |  0.530077 | -1.0121   | -0.00339816 |        4.36504 |                          0 |                                0 |                          0 |                                0 |                          0 |                                0 |\r\n|   3 |   1 | 392 |    424 |     113 | -0.364766   |  0.112381  | -0.924292 |  3.0206   | -0.373382   |        3.62718 |                          0 |                                0 |                          0 |                                0 |                          0 |                                0 |\r\n|   2 |  44 | 371 |   2128 |     119 | -0.015851   |  0.763084  | -0.646105 |  2.27337  | -0.0158516  |        9.26529 |                          0 |                                0 |                          0 |                                0 |                          0 |                                0 |\r\n|   3 |  10 | 174 |   3213 |     122 | -0.121095   |  0.634749  |  0.763171 |  0.693789 | -0.121393   |        4.66191 |                          0 |                                0 |                          0 |                                0 |                          0 |                                0 |\r\n|   2 |  17 | 237 |   1414 |     123 | -0.0417044  | -0.0517952 | -0.997787 | -3.08973  | -0.0417165  |        5.23785 |                          0 |                                0 |                          0 |                                0 |                          0 |                                0 |",
        "html_url": "https://github.com/BaroudLab/Griottes/releases/tag/v1.0-alpha",
        "name": "Revision v1",
        "release_id": 62434003,
        "tag": "v1.0-alpha",
        "tarball_url": "https://api.github.com/repos/BaroudLab/Griottes/tarball/v1.0-alpha",
        "type": "Release",
        "url": "https://api.github.com/repos/BaroudLab/Griottes/releases/62434003",
        "value": "https://api.github.com/repos/BaroudLab/Griottes/releases/62434003",
        "zipball_url": "https://api.github.com/repos/BaroudLab/Griottes/zipball/v1.0-alpha"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier"
  ],
  "somef_provenance": {
    "date": "2024-10-04 13:12:03",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 14
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "From a segmented image",
        "parent_header": [
          "IV. Example"
        ],
        "type": "Text_excerpt",
        "value": "`Griottes` makes it easy to generate a network from segmented images. The resulting graph object is a networkx graph. Detailed examples can be found at this [link](https://github.com/BaroudLab/Griottes_paper).\n\n```python\nfrom griottes.graphmaker import graph_generation_func\ntest_image # segmented image\n\nG = graph_generation_func.generate_contact_graph(test_image)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/BaroudLab/Griottes/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "From a dataframe",
        "parent_header": [
          "IV. Example"
        ],
        "type": "Text_excerpt",
        "value": "It is also possible to rapidly generate Delaunay or geometric graphs from a pandas dataframe containing single-cell information. It is necessary that the columns indicating the cell positions be named `x`, `y` (and `z` if the cells are distributed in 3D). Also, all the elemets in the `descriptors` list must be contained in the dataframe columns.\n\n```python\nfrom griottes.graphmaker import graph_generation_func\ndataframe # dataframe containing single-cell data\n\n# List of properties we wish to include in the graph\ndescriptors = ['x', 'y', 'z']\n\nG_delaunay = graph_generation_func.generate_delaunay_graph(dataframe, \n                                                  descriptors = descriptors)\n\nG_geometric = graph_generation_func.generate_geometric_graph(dataframe, \n                                                  descriptors = descriptors)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/BaroudLab/Griottes/main/README.md",
      "technique": "header_analysis"
    }
  ]
}