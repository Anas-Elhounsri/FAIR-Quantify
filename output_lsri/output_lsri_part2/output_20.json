{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/aa-publications/gsel_vec"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-02-21T17:29:21Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-08-16T23:51:50Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.998207551995142,
      "result": {
        "original_header": "Evolutionary signatures from GWAS",
        "type": "Text_excerpt",
        "value": "This pipeline detects enrichment and depletion of evolutionary signatures from GWAS summary statistics.<br>\n**Note: this pipeline is currently under development.** \n"
      },
      "source": "https://raw.githubusercontent.com/abraham-abin13/gsel_vec/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/abraham-abin13/gsel_vec/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/aa-publications/gsel_vec/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "aa-publications/gsel_vec"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Evolutionary signatures from GWAS"
      },
      "source": "https://raw.githubusercontent.com/abraham-abin13/gsel_vec/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/abraham-abin13/gsel_vec/master/download_data.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/abraham-abin13/gsel_vec/master/gsel_vec/demo.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/abraham-abin13/gsel_vec/master/gsel_vec/create_annotations/run_make_anno.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/abraham-abin13/gsel_vec/master/gsel_vec/create_annotations/intersect.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/abraham-abin13/gsel_vec/master/schematic/for_repo.jpg"
      },
      "source": "https://raw.githubusercontent.com/abraham-abin13/gsel_vec/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://render.githubusercontent.com/render/math?math=enrichment = \\frac{trait_{mean} - matched_{mean}}{Genome\\:wide_{std}}"
      },
      "source": "https://raw.githubusercontent.com/abraham-abin13/gsel_vec/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Install",
        "parent_header": [
          "Evolutionary signatures from GWAS"
        ],
        "type": "Text_excerpt",
        "value": "**Please install these dependecies.**\n<br>1. [PLINK 1.90 beta](https://www.cog-genomics.org/plink2)<br>2. [Anaconda](https://www.anaconda.com/products/individual) <br>\n- _note: the shell should have path access to run the plink command_ \n\n**Run the** `commands` **as shown.** <br>\n1) clone git repository: `git clone https://github.com/abraham-abin13/gsel_vec.git` <br>\n2) change directory: `cd gsel_vec` <br>\n3) *run download_data.sh: `./download_data.sh` <br>\n- _note: requires the the 'wget' utility; if on a mac, install wget using brew (`brew install wget`)_\n\n4) create conda env: `conda env create -f conda_env_manual_dask.yml` <br>\n5) activate conda env: `source activate evo_dask` <br>\n5) install package: `pip install .` <br>\n\n"
      },
      "source": "https://raw.githubusercontent.com/abraham-abin13/gsel_vec/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Test Suite After Installation <br>",
        "parent_header": [
          "Evolutionary signatures from GWAS"
        ],
        "type": "Text_excerpt",
        "value": "1) activate conda env `source activate evo_dask` <br>\n2) run the command `top_gsel_vec.py`\n3) outputs are saved to a folder called 'testing' in the current directory. \n4) See Outputs section and Details sections below for interpreting output files. \n\n"
      },
      "source": "https://raw.githubusercontent.com/abraham-abin13/gsel_vec/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/aa-publications/gsel_vec/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "python"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2021 Abin Abraham\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
      },
      "source": "https://raw.githubusercontent.com/abraham-abin13/gsel_vec/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "gsel_vec"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "aa-publications"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 240656,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 3159,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/abraham-abin13/gsel_vec/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Inputs",
        "parent_header": [
          "Evolutionary signatures from GWAS",
          "Run"
        ],
        "type": "Text_excerpt",
        "value": "The main command is `top_gsel_vec.py <analysis_name>   <gwas_summary_file>   <output_path>`:\n- **analysis_name**: a label describing the analysis <br>\n- **gwas_summary_file**: full path to the gwas summary statistics file <br>\n-  **output_path**: full path to create output directory which will have the same name as **analysis_name**.\n"
      },
      "source": "https://raw.githubusercontent.com/abraham-abin13/gsel_vec/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Outputs",
        "parent_header": [
          "Evolutionary signatures from GWAS",
          "Run"
        ],
        "type": "Text_excerpt",
        "value": "Outputs are saved to **output_path** in a folder with the name **analysis_name**. The final outputs of the analyses are stored in the folder **final_outputs** with the following folders:\n- **trait_enrichments/trait_enrichment.tsv**:  enrichment for each evolutionary measure at the trait level\n-**pval_zscore_per_anno/*.tsv**: Z-score and empirical p-value for each trait associated locus compared to matched background; one file per evolutionary measure\n- **plot_outputs/**: \n\n\n"
      },
      "source": "https://raw.githubusercontent.com/abraham-abin13/gsel_vec/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Details",
        "parent_header": [
          "Evolutionary signatures from GWAS",
          "Run"
        ],
        "type": "Text_excerpt",
        "value": "A. GWAS Summary Statistics File Format\n- should be a tab separated file with one row per SNP\n- coordinates should be in GRChg37\n- should have the following headers in this order: ['snp', 'chr', 'pos', 'p']\n\nB. Interpreting **trait_enrichment.tsv** output\n- one row per evolutionary measure\n\n| Column  | Description |\n| ------------- | ------------- |\n| annotation  | name of evolutionary measure  |\n| mean_trait_loci  | mean across all trait associated loci  |\n| median_trait_loci  | median across all trait associated loci  |\n| emp_pvalue  |  p-value from comparing to matched background   |\n| \\*_matched_*  |  matched distributions mean, median, std, 5th, & 95th percentiles   |\n| n_lead_loci  |  number of trait associated regions after LD clumping   |\n| enrich_per_mean_diff_by_genomstd  |  enrichment calculated as described below   |\n\n* For each evolutionary measure, enrichment is calculated by subtracting the mean across trait-associated loci from mean across matched loci and dividing this by the genome-wide standard deviation for that evolutoinary measure:<br> <br><img src=\"https://render.githubusercontent.com/render/math?math=enrichment = \\frac{trait_{mean} - matched_{mean}}{Genome\\:wide_{std}}\">\n\nC. Interpreting **pval_zscore_per_anno/*.tsv** output\n- one file per evolutionary measure\n- one row per LD independent trait-assocaited region\n\n| Column  | Description |\n| ------------- | ------------- |\n| lead_snp  | SNP with lowest P-value for a trait-associated region  |\n| z_score  | z-score of trait-associated region compared to matched background  |\n| lead_snp_anno  | mean of evolutionary measure of SNPs in a trait-associated region  |\n| mean_controls  | mean of evolutionary measure of matched background  |\n| pvalue  | empirical p-value from comparing evolutinoary measure at a trait-associated region (lead_snp_anno) to matched background   |\n| corrected_pval_benj_hoch  | empirical p-value corrected for number of trait-associated regions  |\n| annotation  | name of evoluationary measure   |\n| final_qc_include  | if False, remove trait-associated region from downstream analysis  |\n\nD. Methods\n- For details please see manuscript.\n"
      },
      "source": "https://raw.githubusercontent.com/abraham-abin13/gsel_vec/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Running one chromosome at a time",
        "parent_header": [
          "Evolutionary signatures from GWAS",
          "Run"
        ],
        "type": "Text_excerpt",
        "value": "For GWAS with a large number of trait-associated regions, this pipeline can be run on individual chromosomes. \n\nA. Instructions\n1. split summary statistics into files for each chromosome\n2. per chromosome summary stats files should be named chr<#>_<analysis_name>\n3. create a folder for output_path named <analysis_name>\n4. run `top_gsel_vec.py -a <analysis_name> -g <path_to_per_chromosome_summary_stats_file> -o <output_path> --run_by_chr` for each chromosome\n    * note the `--run_by_chr` flag is added\n    * note the <output_path> should be the full path to the folder named <analysis_name> created in step 3.\n    * repeat this command with each chromosome file (changing the -g flag input) \n5. run `top_gsel_vec.py -a <analysis_name> -o <output_path> --run_by_chr_enrich`.\n    * This will calculate trait wide enrichments.  \n7. Trait-wide enrichment will saved to `<analysis_name>_extreme_regions_mean_enrichment_all_annotation.tsv`\n\n"
      },
      "source": "https://raw.githubusercontent.com/abraham-abin13/gsel_vec/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Adding a new evolutionary measure to GSEL",
        "parent_header": [
          "Evolutionary signatures from GWAS",
          "Run"
        ],
        "type": "Text_excerpt",
        "value": "1. Create a tab separated file with annotation values \n- To add an evolutionary measure, create a tab separated file with two columns. \n- Columns names have to be: \u201cchr_pos\u201d and \u201cvalue\u201d. \n- \"chr_pos\" column is the  position of SNPs formatted as \u201c<chromosome#>:<basepair_position>\u201d Note: The coordinates should be in GRChg37. \n- \"value\" column should be the value of your evolutionary measure for each SNP\n\n2. Convert annotation value file to a python pickled dictionary \n- Run the script below to convert annotation value file to a python pickled dictionary. It takes one input argument which is the full path to the file from step 1. This script will write to the current directory a pickled dictionary named: \u201c<full_path_to_annotation_tsv_file>.pickle\u201d Run the command as shown below: \n\n`python ./gsel_vec/gsel_vec/create_annotations/make_anno_dict.py <full_path_to_annotation_tsv_file>` \n\n\n3. Move pickled file to \u2018anno_dict\u201d folder \n- Move the pickled to the following location ./gsel_vec/gsel_vec/data/anno_dict. Here is an example command:  <br>\n\u00a0\n`mv <pickled_file_full_path> ./gsel_vec/gsel_vec/data/anno_dict` \n\u00a0\n4. Modify the file anno_description.txt to include new evolutionary measure \n- Open the file anno_description.txt located at \u201cgsel_vec/gsel_vec/data/anno_dict/anno_description.txt\u201d. \n- Add a line at the bottom with three values separated by commas. \n- The first value is the name of the evolutionary measure, the second value is the name of the pickled file, the third column can only be True or False. \n   - This third column specifies whether two-sided P-value or one-sided P-values should be calculated. See example of a line that should be added: \n\u00a0\n`evo_measure_name,evo_measure_values.pickle,True` \n\u00a0\n5. Reinstall GSEL. \n- uninstall GSEL if you already have it installed. Run `pip uninstall gsel_vec`\n- make sure you are in the ./gsel_vec directory. Then run `pip install .` \n\n6. GSEL can be run using the instruction given above and it will now include the new evolutionary measure. \n\u00a0\n\n"
      },
      "source": "https://raw.githubusercontent.com/abraham-abin13/gsel_vec/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Running GSEL on non-European populations",
        "parent_header": [
          "Evolutionary signatures from GWAS",
          "Run"
        ],
        "type": "Text_excerpt",
        "value": "To run GSEL on non European population requires two modifications. (1) The 1000 Genomes SNP data used for LD clumping and (2) the SNPSnap database should be changed to the population of interest. \n\n\n(1)  1000 Genomes Phase 3   \n1. In PLINK (*.bim, *.bed, *.fam) format, you can download 1000 Genomes Phase 3 for the population of interest at this link: https://www.internationalgenome.org/data/. \n2. Make sure each file is named using this format: \u201cchr<#>.bed\u201d,\u201cchr<#>.bim\u201d or \u201cchr<#>.fam\u201d \n3. Move all files for chromosomes 1-22 to this location. `gsel_vec/gsel_vec/data/1kg`\n\n(2) SNPSnap provides a dataset used for matching in the GSEL pipeline. Currently, datasets for the European, East Asian, and West African super populations can be downloaded from `https://data.broadinstitute.org/mpg/snpsnap/database_download.html`. If you require a different population, then you must create the SNSnap dataset yourself. See SNSnap website for details. \n\n1. Download snpsnap dataset using distance type of \u201cLD\u201d and distance cut-off of r2=0.9 and your population of interest. \n2. Ensure that the downloaded file is named \u201csnpsnap_database_ld0.9.tab.gz\u201d. \n3. Move this file to `gsel_vec/gsel_vec/data/snpsnap_database`   \n\n\n3. Run GSEL using instructions given above. \n\n\n"
      },
      "source": "https://raw.githubusercontent.com/abraham-abin13/gsel_vec/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 09:01:04",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ]
}