{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "type": "Text_excerpt",
        "value": "[1] Abdurrahman Elbasir, Ying Ye, Daniel E. Sch\u00e4ffer, Xue Hao, Jayamanna Wickramasinghe, Konstantinos Tsingas, Paul M. Lieberman, Qi Long, Quaid Morris, Rugang Zhang, Alejandro A. Sch\u00e4ffer & Noam Auslander. [A deep learning approach reveals unexplored landscape of viral expression in cancer](https://www.nature.com/articles/s41467-023-36336-z)\n"
      },
      "source": "https://raw.githubusercontent.com/AuslanderLab/virnatrap/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/AuslanderLab/virnatrap"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contact",
        "type": "Text_excerpt",
        "value": "If you have any questions or encounter any difficulties, please create an issue on Github or email us at either aelbasir@wistar.org or nauslander@wistar.org.\n\n"
      },
      "source": "https://raw.githubusercontent.com/AuslanderLab/virnatrap/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-10-16T20:44:17Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-06-13T01:30:04Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Parameters description:",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "| Parameter | type | description | default |\n| :---: | :---: | :---: | :---: |\n| input | path (txt) | path to directory where input fastq is located  | - |\n| output | path (txt) | path to directory where output fasta will be generated  | - |\n| fastmode | present/absent | run with fast mode (calling C function to assemble viral contigs)  | False (no argument) |\n| multi_proc | present/absent | run with multi-processing (if multiple files are in the input directory)  | False (no argument) |\n| num_threads | integer | number of threads to use  | Integer (no argument or 48 if multi_proc is True) |\n| model_path | path (txt) | path to Tensorflow model to predict viral reads | `/model/model_lr_0.005_pool_5_emb_25_l2_0.02_64.hdf5` |\n"
      },
      "source": "https://raw.githubusercontent.com/AuslanderLab/virnatrap/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9923370788572308,
      "result": {
        "original_header": "Overview",
        "type": "Text_excerpt",
        "value": "This file describes the software package viRNAtrap [1], an alignment-free method to identify viral reads in RNAseq datasets based on a deep learning model and to assemble predicted viral contigs. There are four key steps in viRNAtrap: \n1. Building a Tensorflow model to predict whether reads of a fixed length come from viruses or not; this has been precomputed based on 48bp reads. \n2. Given one or more input files of RNAseq reads (could be paired or unpaired), map reads to the human genome; this is performed independently by the user.\n3. Use the Tensorflow model to predict which of the unmapped reads are viral; this is performed by the included software.\n4. Assemble the predicted viral reads into longer contigs; this is performed by the included software using either slow (native Python implementation) or fast (C implementation) modes. \n"
      },
      "source": "https://raw.githubusercontent.com/AuslanderLab/virnatrap/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9407555473812497,
      "result": {
        "original_header": "Model",
        "type": "Text_excerpt",
        "value": "The neural network to predict viral sequnces based on 48bp reads is found in the `model` directory (`model/model_lr_0.005_pool_5_emb_25_l2_0.02_64.hdf5`). A user provided trained Tensorflow model may replace this model, but this will require modification of other functions in virnatrap. \n \n"
      },
      "source": "https://raw.githubusercontent.com/AuslanderLab/virnatrap/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9798407027264732,
      "result": {
        "type": "Text_excerpt",
        "value": "viRNAtrap is a package to generate predicted viral contigs from unmapped RNAseq reads \n"
      },
      "source": "https://raw.githubusercontent.com/AuslanderLab/virnatrap/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/AuslanderLab/virnatrap/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/AuslanderLab/virnatrap/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "AuslanderLab/virnatrap"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/AuslanderLab/virnatrap/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/AuslanderLab/virnatrap/main/scripts/align_extract_reads_script.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "Typical install time on a \"normal\" desktop computer: less than 30 minutes (depending on the number of packages already installed)\n"
      },
      "source": "https://raw.githubusercontent.com/AuslanderLab/virnatrap/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Install with pip",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "To install the current version of this Github repo, run the following commands\n```\ngit clone https://github.com/AuslanderLab/virnatrap.git\ncd virnatrap\npip install .\n```\n"
      },
      "source": "https://raw.githubusercontent.com/AuslanderLab/virnatrap/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Install with conda",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "1- Get anaconda (64 bit)installer python3.x for linux : https://www.anaconda.com/download/#linux <br />\n2- Run the installer : bash Anaconda3-2021.11-Linux-x86_64.sh, and follow the instructions to install anaconda at your preferred directory\n"
      },
      "source": "https://raw.githubusercontent.com/AuslanderLab/virnatrap/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "To deactivate viRNAtrap environment: <br />",
        "parent_header": [
          "Installation",
          "Install with conda"
        ],
        "type": "Text_excerpt",
        "value": "```\nconda deactivate virnatrap\n```\n"
      },
      "source": "https://raw.githubusercontent.com/AuslanderLab/virnatrap/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Python packages and modules used: <br />",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "Among the publicly available packages or modules used in viRNAtrap are:\n\n* ctypes (https://docs.python.org/3/library/ctypes.html)\n* keras (Chollet et al. 2015)\n* numpy (Harris et al. 2020)\n* tensorflow (Abadi et al. 2015)\n\nMart\u00edn Abadi, Ashish Agarwal, Paul Barham, Eugene Brevdo, Zhifeng Chen, Craig Citro, Greg S. Corrado, Andy Davis, Jeffrey Dean, Matthieu Devin, Sanjay Ghemawat, Ian Goodfellow,\nAndrew Harp, Geoffrey Irving, Michael Isard, Rafal Jozefowicz, Yangqing Jia, Lukasz Kaiser, Manjunath Kudlur, Josh Levenberg, Dan Man\u00e9, Mike Schuster, Rajat Monga, Sherry Moore, Derek Murray, Chris Olah, Jonathon Shlens, Benoit Steiner, Ilya Sutskever, Kunal Talwar, Paul Tucker, Vincent Vanhoucke, Vijay Vasudevan, Fernanda Vi\u00e9gas, Oriol Vinyals, Pete Warden, Martin Wattenberg, Martin Wicke, Yuan Yu, and Xiaoqiang Zheng. TensorFlow: Large-scale machine learning on heterogeneous systems, 2015. Software available from tensorflow.org.\n\nFrancois Chollet et al., keras, GitHub. (https://github.com/fchollet/keras) (2015)\n\nCharles R. Harris, K. Jarrod Millman, Stefan J. van der Walt, Ralf Gommers, Pauli Virtanen, David Cournapeau, Eric Wieser, Julian Taylor, Sebastia Berg, Nathaniel J. Smith, Robert Kern, Matti Picus, Stephan Hoyer, Marten H. van Kerkwijk, Matthew Brett, Allan Haldane, Jaime Fernandez del Rio, Mark Wiebe, Pearu Peterson, Pierre Gerard-Marchant, Kevin Sheppard, Tyler Reddy, Warren Weckesser, Hameer Abbasi, Christoph Gohke, Travis E. Oliphant. Array programming with NumPy. Nature 585:357-362 (2020)\n"
      },
      "source": "https://raw.githubusercontent.com/AuslanderLab/virnatrap/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9925392022378148,
      "result": {
        "original_header": "Overview",
        "type": "Text_excerpt",
        "value": "Operating systems tested: Linux (CentOS version 7 and Ubuntu 20.04 LTS) and MacOS. \nPython versions tested: Python 3.6, 3.7, 3.8 and 3.9\n \n"
      },
      "source": "https://raw.githubusercontent.com/AuslanderLab/virnatrap/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/AuslanderLab/virnatrap/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2022 Abdurrahman Elbasir and others\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/AuslanderLab/virnatrap/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://user-images.githubusercontent.com/85499012/154709951-8a742d2b-17ee-4a95-aeab-ea277a698435.png"
      },
      "source": "https://raw.githubusercontent.com/AuslanderLab/virnatrap/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "virnatrap"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "AuslanderLab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 70768,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 9968,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 2026,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/AuslanderLab/virnatrap/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Run the following commands: <br />",
        "parent_header": [
          "Installation",
          "Install with conda"
        ],
        "type": "Text_excerpt",
        "value": "```\ngit clone https://github.com/AuslanderLab/virnatrap.git\ncd virnatrap\nconda create --name virnatrap python=3.7 pip\nconda activate virnatrap\npip install .\n```\n"
      },
      "source": "https://raw.githubusercontent.com/AuslanderLab/virnatrap/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Running example (Demo):",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Expected run time for demo on a \"normal\" desktop computer: less than 10 minutes\n\na. To run with an example input fastq file (```input_fastq/example_unmapped.fastq```) run\n\n```\nvirnatrap-predict --input input_fastq/ --output output_contigs/ \n```\n\nAnd evaluate the output file generated in ```output_contigs/``` using the expected output in  ```expected_output/output_py.txt```\n\nThere is a one-to-one correspondence between input files in directory input_fastq/ and output files in directory output_contigs (or whatever subdirectories the user specifies). If an input file leads to zero predicted viral contigs, then the corresponding output file will be created but will be empty.\nThe output files are in FASTA format but have the suffix .txt because experience has shown that Mac user prefer the suffix .txt\nIf one wants to rerun the command with the same  input files and the same output_contigs/ output directory, one should first remove the previous output files. virrnatrap-predict will not overwrite output files that already exist. \n\nThe package comes with a small example that is intended to be used to test if one has installed viRNAtrap correctly. The expected output is in subdirectory expected_output. To test if the above command worked as expected, run the additional command\n\n ```\n diff expected_output/output_py.txt output_contigs/example_contigs.txt\n ```\n to compare the output in the new installation to the expected output. The installation is correct if the above diff command retruns either no differences or small differences in the less significant digits for the scores in brackets, such as:\n ```\n 5c5\n < >contig2[0.8009399]\n ---\n > >contig2[0.8009398]\n ```\n\n\nb. To run viRNAtrap in fast mode, The fast mode calls a C library to assemble the viral contigs from the model-predicted viral reads. The C library is located at ```virnatrap/src/assemble_read_c.c``` and must first be compiled using the command \n\n```\ngcc -o src/assemble_read_c.so -shared -fPIC -O3 src/assemble_read_c.c\n```\n\nThe library can also be compiled using an equivalent command for other C compilers.\n\nThen, to run viRNatrap in fast mode, run the command as shown below:\n\n```\nvirnatrap-predict --input input_fastq/ --output output_contigs/ --fastmode 1 \n```\n\nAnd evaluate the output file generated in ```output_contigs/``` using the expected output in ```expected_output/output_c.txt```\n\nc. It is possible to run viRNAtrap using multiple threads, to process multiple input files in parallel. To run in parrallel using 28 threads run the command as shown below:\n\n\n```\nvirnatrap-predict --input input_fastq/ --output output_contigs/ --multi_proc 1 --num_threads 28\n```\n\nIn multitreaded mode, viRNAtrap will use one thread per file, up to the minimum of the number of available threads and num_threads, where the default num_threads is 48.\n\n"
      },
      "source": "https://raw.githubusercontent.com/AuslanderLab/virnatrap/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "requirements",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 10:49:53",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "type": "Text_excerpt",
        "value": "To use viRNAtrap, a user must provide an input directory continaing one or more input FASTQ files of unmapped reads with file names ending in  *\\*_unmapped.fastq*, and a path to an output directory, where a FASTA containing predicted viral contigs will be generated for each FASTQ of unmapped reads in the input directory. For pairs of files with paired reads from the same sample, which may be stored separately for other sequence analysis, the user is advised to concatenate the two files into one combined file for input to viRNAtrap because viRNAtrap treats each distinct input file as if it comes from a distinct sample.\n\n"
      },
      "source": "https://raw.githubusercontent.com/AuslanderLab/virnatrap/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Running example (Demo):",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Expected run time for demo on a \"normal\" desktop computer: less than 10 minutes\n\na. To run with an example input fastq file (```input_fastq/example_unmapped.fastq```) run\n\n```\nvirnatrap-predict --input input_fastq/ --output output_contigs/ \n```\n\nAnd evaluate the output file generated in ```output_contigs/``` using the expected output in  ```expected_output/output_py.txt```\n\nThere is a one-to-one correspondence between input files in directory input_fastq/ and output files in directory output_contigs (or whatever subdirectories the user specifies). If an input file leads to zero predicted viral contigs, then the corresponding output file will be created but will be empty.\nThe output files are in FASTA format but have the suffix .txt because experience has shown that Mac user prefer the suffix .txt\nIf one wants to rerun the command with the same  input files and the same output_contigs/ output directory, one should first remove the previous output files. virrnatrap-predict will not overwrite output files that already exist. \n\nThe package comes with a small example that is intended to be used to test if one has installed viRNAtrap correctly. The expected output is in subdirectory expected_output. To test if the above command worked as expected, run the additional command\n\n ```\n diff expected_output/output_py.txt output_contigs/example_contigs.txt\n ```\n to compare the output in the new installation to the expected output. The installation is correct if the above diff command retruns either no differences or small differences in the less significant digits for the scores in brackets, such as:\n ```\n 5c5\n < >contig2[0.8009399]\n ---\n > >contig2[0.8009398]\n ```\n\n\nb. To run viRNAtrap in fast mode, The fast mode calls a C library to assemble the viral contigs from the model-predicted viral reads. The C library is located at ```virnatrap/src/assemble_read_c.c``` and must first be compiled using the command \n\n```\ngcc -o src/assemble_read_c.so -shared -fPIC -O3 src/assemble_read_c.c\n```\n\nThe library can also be compiled using an equivalent command for other C compilers.\n\nThen, to run viRNatrap in fast mode, run the command as shown below:\n\n```\nvirnatrap-predict --input input_fastq/ --output output_contigs/ --fastmode 1 \n```\n\nAnd evaluate the output file generated in ```output_contigs/``` using the expected output in ```expected_output/output_c.txt```\n\nc. It is possible to run viRNAtrap using multiple threads, to process multiple input files in parallel. To run in parrallel using 28 threads run the command as shown below:\n\n\n```\nvirnatrap-predict --input input_fastq/ --output output_contigs/ --multi_proc 1 --num_threads 28\n```\n\nIn multitreaded mode, viRNAtrap will use one thread per file, up to the minimum of the number of available threads and num_threads, where the default num_threads is 48.\n\n"
      },
      "source": "https://raw.githubusercontent.com/AuslanderLab/virnatrap/main/README.md",
      "technique": "header_analysis"
    }
  ]
}