{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/wlloyduw/ContainerProfiler"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-08-26T21:47:43Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-09-26T20:29:51Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Metrics Description",
        "parent_header": [
          "MANUAL"
        ],
        "type": "Text_excerpt",
        "value": "=======\n\nThe text below describes the metrics captured by the script **rudataall.sh** for profiling resource utilization on the \nvirtual machine (VM) level, container level and process level. A complete metrics description spreadsheet can be found at \nhttps://github.com/wlloyduw/ContainerProfiler/blob/master/metrics_description_for_rudataall.xlsx \n"
      },
      "source": "https://raw.githubusercontent.com/wlloyduw/ContainerProfiler/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.843100974363001,
      "result": {
        "original_header": "How do I build a new container that integrates the ContainerProfiler into on an existing container",
        "type": "Text_excerpt",
        "value": "You will need access to the Dockerfile used to build your container.\nThe idea is that your container will already be configured to run a specified task or application, and \nwe simply want to integrate the container profiler so it is easy to profile.\nThe idea is to point to the folder containing your Dockerfile and any other dependencies.\n```bash\nsudo ./build.sh -d DOCKER_FILE_PATH\n```\nFor example:\n```bash\nsudo ./build.sh -d docker/sysbench.docker\n```\ndocker/sysbench.docker:\n```\nFROM ubuntu:20.04\nMAINTAINER varikmp<varikmp@uw.edu>\nENV DEBIAN_FRONTEND noninteractive\nRUN apt-get -y update \\\n    && apt-get install -y sysbench \\\n    && rm -rf /var/lib/apt/lists/*\nENTRYPOINT [\"sysbench\"]\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/wlloyduw/ContainerProfiler/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/wlloyduw/ContainerProfiler/tree/main/docs"
      },
      "technique": "file_exploration"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/wlloyduw/ContainerProfiler/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/wlloyduw/ContainerProfiler/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "wlloyduw/ContainerProfiler"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Container Profiler"
      },
      "source": "https://raw.githubusercontent.com/wlloyduw/ContainerProfiler/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/wlloyduw/ContainerProfiler/main/build.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/wlloyduw/ContainerProfiler/main/docker/execute_sysbench.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/wlloyduw/ContainerProfiler/main/docker/execute.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/wlloyduw/ContainerProfiler/main/docker/install.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/wlloyduw/ContainerProfiler/main/docker/install_sysbench.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/wlloyduw/ContainerProfiler/main/docker/entrypoint.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/wlloyduw/ContainerProfiler/main/script/aggregate.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/wlloyduw/ContainerProfiler/main/script/profiler.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/wlloyduw/ContainerProfiler/main/script/delta.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Container Profiler",
        "parent_header": [
          "MANUAL"
        ],
        "type": "Text_excerpt",
        "value": "University of Washington Tacoma\n\n<img src=\"./docs/logo.png\" alt=\"drawing\" width=\"400\"/>\n"
      },
      "source": "https://raw.githubusercontent.com/wlloyduw/ContainerProfiler/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "GENERAL INFORMATION",
        "parent_header": [
          "MANUAL"
        ],
        "type": "Text_excerpt",
        "value": "The Container Profiler can be used as a tool to profile an application or workflow by taking interval snapshots of a collection of linux resource utilization metrics throughout the course of the job. These snapshots are then stored as JSON data which can then be used to see how the metrics changed once the job is finished.\n\nIn order to use the Container Profiler, a container with an application/workflow/script to be run and profiled is needed.  Use of Linux as the Docker host operating system is recommended."
      },
      "source": "https://raw.githubusercontent.com/wlloyduw/ContainerProfiler/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Video Demonstration",
        "parent_header": [
          "MANUAL"
        ],
        "type": "Text_excerpt",
        "value": "**Video Channel:**     https://www.youtube.com/@containerprofiler6371 \n\n1. Getting Started with the Container Profiler tool - [Part 1](https://www.youtube.com/watch?v=KK6kKfMkKuc) & [Part 2](https://www.youtube.com/watch?v=Tj3Zyje0DjY)\n2. Profiling a bash script with the Container Profiler - [Link](https://www.youtube.com/watch?v=mGZkmXWJAGw)\n3. Profiling applications with the Container Profiler using the install script - [Link](https://www.youtube.com/watch?v=L0qrtodC4j0)\n4. Graphing Resource Utilization with the Container Profiler tool - [Link](https://www.youtube.com/watch?v=PFkETPfZI9g)\n5. Profiling and graphing resource utilization of pgbench, the postgresql database benchmark - [Link](https://www.youtube.com/watch?v=cI8D4JRuyjw)\n"
      },
      "source": "https://raw.githubusercontent.com/wlloyduw/ContainerProfiler/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Install the Container Profiler",
        "parent_header": [
          "MANUAL"
        ],
        "type": "Text_excerpt",
        "value": "```bash\ngit clone https://github.com/wlloyduw/ContainerProfiler\n```\n"
      },
      "source": "https://raw.githubusercontent.com/wlloyduw/ContainerProfiler/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "How do I build a container that integrates the ContainerProfiler to profile software where I provide an installation script",
        "type": "Text_excerpt",
        "value": "Here the installation script should install all software dependencies required to run the application.\nIt is not necessary to preface installation commands with 'sudo'.\n\n```bash\nsudo ./build.sh -i INSTALL_SCRIPT_PATH\n```\n\nFor example:\n\n```bash\nsudo ./build.sh -i docker/install.sh\n```\n\ndocker/install.sh:\n\n```\n# do NOT remove this command\napt-get update\n\n# fill up your additional steps for the package installation\napt-get install -y build-essential gcc nano git \\\n\tsysbench && echo \"test\"\n\n# remove unnecessary build packages for execution\napt-get remove -y gcc build-essential nano git\n\n# clean up the installation\napt-get autoclean -y && apt-get autoremove -y --purge && rm -rf /var/lib/apt/lists/* && rm -rf /var/cache/apk*\n```\n\nYou will be asked to enter an entry point based on the software you attempt to install in your install script.\nThe entry point is the name of the command (without any arguments) that will be run.\nFor example, if the installation script installs sysbench, then the name of the command will be 'sysbench'.\nLater, when running the container you do not need to specify the command again, but just the arguments that are to be passed to the command.\n"
      },
      "source": "https://raw.githubusercontent.com/wlloyduw/ContainerProfiler/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "5. How do I profile a task or application installed using the installation script",
        "parent_header": [
          "How do I build a container that integrates the ContainerProfiler to profile software where I provide an installation script"
        ],
        "type": "Text_excerpt",
        "value": "After the container name 'profiler:sysbench' you will need to specify the command line arguments\nfor the application being profiled.\n\nShort Name | Long Name | Optional | Descriptions\n--- | --- | --- | ---\n-o | --output-directory | No | specify the output directory for profiling files in JSON format\n-m | --metric-level | Yes | specify the metric levels (v: virtual machine, c: container, p: process)\n-t | --time-steps | Yes | specify the time steps between two instance times\n-c | --clean-up | Yes | clean up the profiling files from the previous run\n\n```bash\nsudo docker run --rm \\\n    -e TOOL=profile \\\n    -e TOOL_ARGUMENTS=\"-o /data\" \\\n    -v ${PWD}:/data \\\n    profiler:CONTAINER_TAG YOUR_ARUMENTS_GO_HERE\n```\n\nFor example:\n\n```bash\nsudo docker run --rm \\\n\t-e TOOL=profile \\\n\t-e TOOL_ARGUMENTS=\"-o /data\" \\\n\t-v ${PWD}:/data \\\n\t profiler:sysbench --test=cpu --cpu-max-prime=20000 --max-requests=4000 run\n```\n"
      },
      "source": "https://raw.githubusercontent.com/wlloyduw/ContainerProfiler/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "6. How do I perform time series sampling of the task or application installed using the installation script",
        "parent_header": [
          "How do I build a container that integrates the ContainerProfiler to profile software where I provide an installation script"
        ],
        "type": "Text_excerpt",
        "value": "After the container name 'profiler:sysbench' you will need to specify the command line arguments\nfor the application being profiled.\n\nIn addition, add the '-t' argument to specify a time series sampling interval.  (e.g. '-t 1' for 1-second sampling)\n\n```bash\nsudo docker run --rm \\\n    -e TOOL=profile \\\n    -e TOOL_ARGUMENTS=\"-t TIME_INTERVAL -o /data\" \\\n    -v ${PWD}:/data \\\n    profiler:CONTAINER_TAG YOUR_ARUMENTS_GO_HERE\n```\n\nFor example:\n\n```bash\nsudo docker run --rm \\\n\t-e TOOL=profile \\\n\t-e TOOL_ARGUMENTS=\"-t 1 -o /data\" \\\n\t-v ${PWD}:/data \\\n\t profiler:sysbench --test=cpu --cpu-max-prime=20000 --max-requests=4000 run\n```\n"
      },
      "source": "https://raw.githubusercontent.com/wlloyduw/ContainerProfiler/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Graph: a tool is to make graph based on the statistic CSV file",
        "parent_header": [
          "How do I build a container that integrates the ContainerProfiler to profile software where I provide an installation script"
        ],
        "type": "Text_excerpt",
        "value": "The tool generate the graphs based on the statistic file in CSV format. Also, we can provide the metric configuration file for the graphs.\n\nShort Name | Long Name | Optional | Descriptions\n--- | --- | --- | ---\n-r | --csv-input-file | No | specify the aggregate CSV file\n-m | --metric-input-file | Yes | specify the metric file specifying metrics for graphing\n-g | --graph-output-directory | No | specify the output directory for graph images\n-s | --single-plot | Yes | plot single curve on a graph\n\n\n```bash\nsudo docker run --rm \\\n\t-e TOOL=graph \\\n\t-e TOOL_ARGUMENTS=\"-i /data -o /data\" \\\n\t-v ${PWD}:/data \\\n\t profiler:sysbench\n```"
      },
      "source": "https://raw.githubusercontent.com/wlloyduw/ContainerProfiler/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1.0,
      "result": {
        "original_header": "How do I build a new container that integrates the ContainerProfiler into on an existing container",
        "type": "Text_excerpt",
        "value": "You will need access to the Dockerfile used to build your container.\nThe idea is that your container will already be configured to run a specified task or application, and \nwe simply want to integrate the container profiler so it is easy to profile.\nThe idea is to point to the folder containing your Dockerfile and any other dependencies.\n```bash\nsudo ./build.sh -d DOCKER_FILE_PATH\n```\nFor example:\n```bash\nsudo ./build.sh -d docker/sysbench.docker\n```\ndocker/sysbench.docker:\n```\nFROM ubuntu:20.04\nMAINTAINER varikmp<varikmp@uw.edu>\nENV DEBIAN_FRONTEND noninteractive\nRUN apt-get -y update \\\n    && apt-get install -y sysbench \\\n    && rm -rf /var/lib/apt/lists/*\nENTRYPOINT [\"sysbench\"]\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/wlloyduw/ContainerProfiler/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9763066870073274,
      "result": {
        "original_header": "3. How do I profile my container once I've integrated the ContainerProfiler",
        "type": "Text_excerpt",
        "value": "```bash\nsudo docker run --rm \\\n    -e TOOL=profile \\\n    -e TOOL_ARGUMENTS=\"-o /data\" \\\n    -v ${PWD}:/data \\\n    profiler:CONTAINER_TAG YOUR_ARUMENTS_GO_HERE\n``` \nFor example:\n```bash\nsudo docker run --rm \\\n    -e TOOL=profile \\\n    -e TOOL_ARGUMENTS=\"-o /data\" \\\n    -v ${PWD}:/data \\\n    profiler:sysbench --test=cpu --cpu-max-prime=20000 --max-requests=4000 run\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/wlloyduw/ContainerProfiler/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999987462343157,
      "result": {
        "original_header": "4. How do I perform time series sampling on my container once I've integrated the ContainerProfiler",
        "type": "Text_excerpt",
        "value": "The idea is to add the '-t' argument to specify a time series sampling interval.  (e.g. '-t 1' for 1-second sampling)\n```bash\nsudo docker run --rm \\\n    -e TOOL=profile \\\n    -e TOOL_ARGUMENTS=\"-t TIME_INTERVAL -o /data\" \\\n    -v ${PWD}:/data \\\n    profiler:CONTAINER_TAG YOUR_ARUMENTS_GO_HERE\n```\nFor example:\n```bash\nsudo docker run --rm \\\n    -e TOOL=profile \\\n    -e TOOL_ARGUMENTS=\"-t 1 -o /data\" \\\n    -v ${PWD}:/data \\\n    profiler:sysbench --test=cpu --cpu-max-prime=20000 --max-requests=4000 run\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/wlloyduw/ContainerProfiler/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8612905231195337,
      "result": {
        "original_header": "3. How do I profile my container once I've integrated the ContainerProfiler",
        "type": "Text_excerpt",
        "value": "```bash\nsudo docker run --rm \\\n    -e TOOL=profile \\\n    -e TOOL_ARGUMENTS=\"-o /data\" \\\n    -v ${PWD}:/data \\\n    profiler:CONTAINER_TAG YOUR_ARUMENTS_GO_HERE\n``` \nFor example:\n```bash\nsudo docker run --rm \\\n    -e TOOL=profile \\\n    -e TOOL_ARGUMENTS=\"-o /data\" \\\n    -v ${PWD}:/data \\\n    profiler:sysbench --test=cpu --cpu-max-prime=20000 --max-requests=4000 run\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/wlloyduw/ContainerProfiler/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8155596069833204,
      "result": {
        "original_header": "4. How do I perform time series sampling on my container once I've integrated the ContainerProfiler",
        "type": "Text_excerpt",
        "value": "The idea is to add the '-t' argument to specify a time series sampling interval.  (e.g. '-t 1' for 1-second sampling)\n```bash\nsudo docker run --rm \\\n    -e TOOL=profile \\\n    -e TOOL_ARGUMENTS=\"-t TIME_INTERVAL -o /data\" \\\n    -v ${PWD}:/data \\\n    profiler:CONTAINER_TAG YOUR_ARUMENTS_GO_HERE\n```\nFor example:\n```bash\nsudo docker run --rm \\\n    -e TOOL=profile \\\n    -e TOOL_ARGUMENTS=\"-t 1 -o /data\" \\\n    -v ${PWD}:/data \\\n    profiler:sysbench --test=cpu --cpu-max-prime=20000 --max-requests=4000 run\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/wlloyduw/ContainerProfiler/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/wlloyduw/ContainerProfiler/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2023 Varik Hoang\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/wlloyduw/ContainerProfiler/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/wlloyduw/ContainerProfiler/main/./docs/logo.png"
      },
      "source": "https://raw.githubusercontent.com/wlloyduw/ContainerProfiler/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ContainerProfiler"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "wlloyduw"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 41854,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 32392,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 78,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/wlloyduw/ContainerProfiler/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_papers": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/2005.11491\n\n**Prerequisite:** Linux host operating system (recommended"
      },
      "source": "https://raw.githubusercontent.com/wlloyduw/ContainerProfiler/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Prerequisites",
        "parent_header": [
          "MANUAL"
        ],
        "type": "Text_excerpt",
        "value": "The Container Profiler has been designed to operating where Linux is the host operating system. The tool may be operable on other platforms besides Linux but has not been tested.  For best results, use of a Linux host operating system is recommended.\n"
      },
      "source": "https://raw.githubusercontent.com/wlloyduw/ContainerProfiler/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 09:53:20",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "How do I use the Container Profiler on my own container?",
        "parent_header": [
          "FAQ",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "1\\. Install the Container Profiler\n\n2\\. Here the common [use cases](docs/build.md) for applying the Container Profiler to profile a container \n"
      },
      "source": "https://raw.githubusercontent.com/wlloyduw/ContainerProfiler/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "How do I build the ContainerProfiler to profile the total resource utilization",
        "type": "Text_excerpt",
        "value": "Building the ContainerProfiler should be completed using a Linux environment where Docker has been preinstalled.\n\n```bash\nsudo ./build.sh\n```\n"
      },
      "source": "https://raw.githubusercontent.com/wlloyduw/ContainerProfiler/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1. How do I profile a task or application",
        "parent_header": [
          "How do I build the ContainerProfiler to profile the total resource utilization"
        ],
        "type": "Text_excerpt",
        "value": "```bash\nsudo docker run --rm -v ${PWD}:/OUTPUT_DIR  profiler:custom profile -o /OUTPUT_DIR SET_OF_TASKS\n```\n\nFor example:\n\n```bash\nsudo docker run --rm -v ${PWD}:/data  profiler:custom profile -o /data \"sleep 5; ls -al\"\n```\n\nOUTPUT_DIR: the directory that holds profiling files in JSON format\n"
      },
      "source": "https://raw.githubusercontent.com/wlloyduw/ContainerProfiler/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2. How do I perform time series profiling of a task or application",
        "parent_header": [
          "How do I build the ContainerProfiler to profile the total resource utilization"
        ],
        "type": "Text_excerpt",
        "value": "The idea is to add the '-t' argument to specify a time series sampling interval.  (e.g. '-t 1' for 1-second sampling)\n\n```bash\nsudo docker run --rm\n    -v ${PWD}:/OUTPUT_DIR\n    profiler:custom profile -t TIME_INTERVAL -o /OUTPUT_DIR SET_OF_TASKS\n```\n\nFor example:\n\n```bash\nsudo docker run --rm -v ${PWD}:/data  profiler:custom profile -t 1 -o /data \"sleep 5; ls -al\"\n```\n"
      },
      "source": "https://raw.githubusercontent.com/wlloyduw/ContainerProfiler/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Delta: a tool is to compute the delta statistics of resource utilization between time instances",
        "parent_header": [
          "How do I build a container that integrates the ContainerProfiler to profile software where I provide an installation script"
        ],
        "type": "Text_excerpt",
        "value": "After receiving profiling files from the previous step, we run the delta option to generate delta statistics in JSON format.\n\nShort Name | Long Name | Optional | Descriptions\n--- | --- | --- | ---\n-i | --input-directory | No | specify the input directory for calculating aggregate values in JSON format\n-o | --output-directory | No | specify the output directory for calculating aggregate values in JSON format\n-a | --aggregate-config-file | Yes | specify the aggregate configuration file\n-c | --clean-up | Yes | clean up the aggregate files from the previous run\n\n```bash\nsudo docker run --rm \\\n\t-e TOOL=delta \\\n\t-e TOOL_ARGUMENTS=\"-i /data -o /data\" \\\n\t-v ${PWD}:/data \\\n\t profiler:sysbench\n```\n"
      },
      "source": "https://raw.githubusercontent.com/wlloyduw/ContainerProfiler/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "CSV generator: a tool is to generate the statistics of resource utilization in JSON format",
        "parent_header": [
          "How do I build a container that integrates the ContainerProfiler to profile software where I provide an installation script"
        ],
        "type": "Text_excerpt",
        "value": "We need to specify the directory that holds statistic files. Those files are generated from the delta tool.\n\nShort Name | Long Name | Optional | Descriptions\n--- | --- | --- | ---\n-i | --input-directory | No | specify the input directory of aggregate files\n-o | --csv-output-file | No | specify the output file for CSV file generation\n-w | --overwrite | Yes | overwrite the CSV file from the previous run\n\n```bash\nsudo docker run --rm \\\n\t-e TOOL=csv \\\n\t-e TOOL_ARGUMENTS=\"-i /data -o /data/delta.csv\" \\\n\t-v ${PWD}:/data \\\n\t profiler:sysbench\n```\n"
      },
      "source": "https://raw.githubusercontent.com/wlloyduw/ContainerProfiler/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Sysbench profiling example",
        "type": "Text_excerpt",
        "value": "Starting from a fresh checkout of the ContainerProfiler sources, here is how to build a separate Container with a benchmark application (sysbench), and then use the ContainerProfiler to profile resource utilization.\n\n```bash\n# From ContainerProfiler checkout directory\n\n# build ContainerProfiler\nsudo ./build.sh\n\n# Create a new Docker container to encapsulate sysbench for benchmarking:\nmkdir sysb\n\n# Create Dockerfile for sysbench container:\ngedit sysb/sysbench\n```\n\nHere is the content of the sysbench Docker container:\n```bash\nFROM ubuntu\nRUN apt-get update\nRUN apt-get install -y sysbench\n```\n\nNext build the sysbench Docker container integrating the ContainerProfiler tool:\n\n```bash\n# build sysbench container integrating ContainerProfiler\nsudo ./build.sh -d docker/sysbench.docker\n```\n\ndocker/sysbench.docker:\n```\nFROM ubuntu:20.04\nMAINTAINER varikmp<varikmp@uw.edu>\nENV DEBIAN_FRONTEND noninteractive\nRUN apt-get -y update \\\n    && apt-get install -y sysbench \\\n    && rm -rf /var/lib/apt/lists/*\nENTRYPOINT [\"sysbench\"]\n```\n\nNow perform delta resource utilization profiling to measure resource consumption of running sysbench.\nAll output files will go under local data directory.\n\n```bash\n# make data directory\nmkdir data\n\n# profile sysbench\nsudo docker run --rm -e TOOL=profile -e TOOL_ARGUMENTS=\"-o /data\" -v ${PWD}/data:/data profiler:sysbench \\\n'sysbench --test=cpu --cpu-max-prime=2000000 --num-threads=2 --max-requests=10 run'\n\n# calculate delta values\nsudo docker run --rm -e TOOL=delta -e TOOL_ARGUMENTS=\"-i /data -o /data\" -v ${PWD}/data:/data profiler:sysbench\n\n# create csv output\nsudo docker run --rm -e TOOL=csv -e TOOL_ARGUMENTS=\"-w -i /data -o /data/output.csv\" -v ${PWD}/data:/data \\\nprofiler:sysbench\n```\n\nUnder the data directory, inspect the raw resource utilization sampling files which should be named using unique date/time stamps.  Also you will find the delta JSON and delta CSV output files. Static.json contains attributes sampled by the ContainerProfiler that do not change.\n\n"
      },
      "source": "https://raw.githubusercontent.com/wlloyduw/ContainerProfiler/main/README.md",
      "technique": "header_analysis"
    }
  ]
}