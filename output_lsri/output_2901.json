{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "References",
        "parent_header": [
          "Introduction to FastPG"
        ],
        "type": "Text_excerpt",
        "value": "Chen, Hao, Mai Chan Lau, Michael Thomas Wong, Evan W Newell, Michael Poidinger, and Jinmiao Chen. 2016. *\u201cCytofkit: A Bioconductor Package for an Integrated Mass Cytometry Data Analysis Pipeline.\u201d* PLoS Comput Biol 12 (9).\n\nLevine, Jacob H, Erin F Simonds, Sean C Bendall, Kara L Davis, El-ad D Amir, Michelle D Tadmor, Oren Litvin, et al. 2015. \u201cData-Driven Phenotypic Dissection of Aml Reveals Progenitor-Like Cells That Correlate with Prognosis.\u201d *Cell* 162 (1): 184\u201397. https://doi.org/10.1016/j.cell.2015.05.047.\n\nLu, Hao, Mahantesh Halappanavar, and Ananth Kalyanaraman. 2015. \u201cParallel Heuristics for Scalable Community Detection.\u201d *Parallel Computing* 47: 19\u201337. https://doi.org/https://doi.org/10.1016/j.parco.2015.03.003.\n\nMalkov, Yury A., and D. A. Yashunin. 2016. \u201cEfficient and Robust Approximate Nearest Neighbor Search Using Hierarchical Navigable Small World Graphs.\u201d *CoRR* abs/1603.09320. http://arxiv.org/abs/1603.09320.\n\n"
      },
      "source": "https://raw.githubusercontent.com/sararselitsky/FastPG/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/sararselitsky/FastPG"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-11-15T19:51:32Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-06-30T00:43:41Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Fast phenograph, CyTOF"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction to FastPG",
        "type": "Text_excerpt",
        "value": "Fast phenograph-like clustering of millions of items with scores of features.\n\nSee our preprint article introducing FastPG:\n\nThomas Bodenheimer, Mahantesh Halappanavar, Stuart Jefferys, Ryan Gibson, Siyao Liu, Peter J Mucha, Natalie Stanley, Joel S Parker, Sara R Selitsky. FastPG: Fast clustering of millions of single cells. bioRxiv 2020.06.19.159749; doi: https://doi.org/10.1101/2020.06.19.159749\n"
      },
      "source": "https://raw.githubusercontent.com/sararselitsky/FastPG/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Building your own Docker container",
        "parent_header": [
          "Introduction to FastPG",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "If you want to build your own container instead of pulling a pre-build one, you can use the `Dockerfile` included in the repository in the `Docker/` directory as a guide. The `build.sh` file in the same directory automatically builds and tags the container with the name and tags used by the pre-built container at DockerHub, you should change the tags by editing the parameters in the `build.sh` file, or by manually building it and tagging it yourself.\n\n```{bash}\ngit clone --single-branch https://github.com/sararselitsky/FastPG.git\ncd FastPG/Docker\n# Edit Docker tags in build.sh for your use\n./build.sh --no-cache\n```\n\nYou can just use this with Docker as above, but you can't just use a local Docker container with singularity versions less than 3.0. You have to push the container to some Docker registry before you can run it. With 3.0+ you can pull a local container directly by using `docker-daemon://` instead of `docker://` to get a local container.\n"
      },
      "source": "https://raw.githubusercontent.com/sararselitsky/FastPG/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Extending the Docker container",
        "parent_header": [
          "Introduction to FastPG",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "If you want to add additional things to the container, you should build your own. You can extend the existing container either by editing the provided  `Dockerfile` or by using the existing container as the `FROM` that your own Docker container is based on.\n"
      },
      "source": "https://raw.githubusercontent.com/sararselitsky/FastPG/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Clustering with FastPG",
        "parent_header": [
          "Introduction to FastPG"
        ],
        "type": "Text_excerpt",
        "value": "Clustering is as simple as:\n\n```{r}\nclusters <- FastPG::fastCluster( data, k, num_threads )\n```\n\nThe `fastCluster()` function takes a number of additional tuning parameters, but\nthose have reasonable defaults.\n"
      },
      "source": "https://raw.githubusercontent.com/sararselitsky/FastPG/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "The `data` parameter",
        "parent_header": [
          "Introduction to FastPG",
          "Clustering with FastPG"
        ],
        "type": "Text_excerpt",
        "value": "The main input is the numeric data to cluster as a matrix, where rows are elements to cluster and columns are the features that make elements similar or different. Any data matrix will do, for this example we extract a 265,627 x 32 numeric data matrix from the GitHub-published [clustering benchmark mass cytometry data set](https://github.com/lmweber/benchmark-data-Levine-32-dim), sourced from the phenograph paper [@Levine-2015].\n\n```{r}\nurl <- \"https://github.com/lmweber/benchmark-data-Levine-32-dim/raw/master/data/Levine_32dim.fcs\"\nfile <- \"Levine_32dim.fcs\"\ndownload.file( url, file, mode=\"wb\") # This downloads a 41.5 MB binary file\ndataColumns <- c( 5:36 ) # extract only the data columns, whatever they are\ndata <-  flowCore::exprs( flowCore::read.FCS( file, truncate_max_range= FALSE ))\ndata <- data[ , dataColumns ]\n```\n"
      },
      "source": "https://raw.githubusercontent.com/sararselitsky/FastPG/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "The `k` parameter",
        "parent_header": [
          "Introduction to FastPG",
          "Clustering with FastPG"
        ],
        "type": "Text_excerpt",
        "value": "To cluster a data set, a local neighborhood size needs to be specified as a parameter.\n\n```{r}\nk <- 30\n```\n"
      },
      "source": "https://raw.githubusercontent.com/sararselitsky/FastPG/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "The `num_threads` parameter",
        "parent_header": [
          "Introduction to FastPG",
          "Clustering with FastPG"
        ],
        "type": "Text_excerpt",
        "value": "The number of cpus to use should be specified, it defaults to 1. However, it will only limit the k nearest neighbors part of the clustering (see [Internal algorithm](internal-algorithm)). The rest of the clustering will use all available cpus regardless of what this is set to. \n\n```{r}\nnum_threads <- 4\n```\n"
      },
      "source": "https://raw.githubusercontent.com/sararselitsky/FastPG/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Results",
        "parent_header": [
          "Introduction to FastPG",
          "Clustering with FastPG"
        ],
        "type": "Text_excerpt",
        "value": "`fastCluster()` returns a list with two elements\n\n* `$modularity` = The modularity of the network created from the overlapping nearest neighbor graphs.\n* `$communities` = An integer vector where the nth element is the nth element from the input data. The value is the cluster that each input element has been assigned to. `table(clusters$communities)` shows a count by cluster id. Note that these id's are arbitrary and not deterministic.\n\nCaution: -1 indicates a point that was not clustered; each can be considered their own cluster, even though they are all labeled \u201c-1\u201d. It is probable that you will not have any singleton clusters, but they can occur.\n"
      },
      "source": "https://raw.githubusercontent.com/sararselitsky/FastPG/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Internal algorithm",
        "parent_header": [
          "Introduction to FastPG"
        ],
        "type": "Text_excerpt",
        "value": "FastPG utilizes the same three main steps as the phenograph algorithm [@Levine-2015, @Chen-2016], but uses fast, parallel implementations.\n\n* The k nearest neighbors determining step is implemented using hierarchical navigable small world graphs [@Malkov-2016] via the  [RcppHNSW](https://cran.rstudio.com/web/packages/RcppHNSW) library.\n* The nearest-neighbor distances are generated using an included parallel Jaccard metric function.\n* Clustering is implemented as community detection in the graph formed from the overlapping \"k best friends\" for each element. This is done using a parallel Louvain algorithm as implemented by Grappolo [@Lu-2015]. Code for Grappolo has been included within this package; the standalone application with additional functionality is available for download as described in the license section above.\n  \nCalling `fastCluster()`  is equivalent to and is essentially implemented as the following sequence of commands:\n\n```{r}\n# Approximate k nearest neighbors\nall_knn <- RcppHNSW::hnsw_knn( data, k= k, distance= 'l2',\n                               n_threads= num_threads )\n\nind <- all_knn$idx\n\n# Parallel Jaccard metric\nlinks <- FastPG::rcpp_parallel_jce(ind)\nlinks <- FastPG::dedup_links(links)\n\n# Parallel Louvain clustering\nclusters <- FastPG::parallel_louvain( links )\n```\n\nNote that RcppHNSW::hnsw_knn() and FastPG::parallel_louvain( links ) have numerous additional parameters; only the parameters used that are different from the defaults are shown above. The FastPG::fastCluster() wrapper allows setting all applicable parameters. See the function documentation for additional details.\n"
      },
      "source": "https://raw.githubusercontent.com/sararselitsky/FastPG/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/sararselitsky/FastPG/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 6
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/sararselitsky/FastPG/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "sararselitsky/FastPG"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Introduction to FastPG"
      },
      "source": "https://raw.githubusercontent.com/sararselitsky/FastPG/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sararselitsky/FastPG/master/Docker/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/sararselitsky/FastPG/master/Docker/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sararselitsky/FastPG/master/Docker/build.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "Introduction to FastPG"
        ],
        "type": "Text_excerpt",
        "value": "You can install locally from GitHub, or use the Docker container from DockerHub:\n"
      },
      "source": "https://raw.githubusercontent.com/sararselitsky/FastPG/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Local install",
        "parent_header": [
          "Introduction to FastPG",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "Before installing, you must have R, of course, but also:\n\n* If you are on Windows you will need the version of Rtools appropriate for the version of R (and need to set the path correctly), see https://cran.r-project.org/bin/windows/Rtools/. If you upgraded from R 3 to R 4 and have not already done so, you should uninstall the old and install the new Rtools.\n\n* If you are on Mac OS X, you will need the x-code command line tools and probably need to install the OpenMP library, which Apple no longer distributes as part of x-code. One way to do that is to install the data.table package as described here: https://firas.io/post/data.table_openmp/. Afterwards, FastPG and any other programs that use OpenMP should work.\n\nYou can install the `FastPG` package from GitHub using the Bioconductor installation manager. If you don't have Bioconductor you need to install the `BiocManager` and `remotes` packages from CRAN. Then you can install using:\n\n```{r}\n# Requires the CRAN packages \"remotes\" and \"BiocManager\" to be installed.\nBiocManager::install(\"sararselitsky/FastPG\")\n```\n\nTo install the latest code from a branch or a specific tagged version, append \"@<source>\" to the repository string used above, e.g `BiocManager::install(\"sararselitsky/FastPG@dev\")` or `BiocManager::install(\"sararselitsky/FastPG@0.0.8\")`\n"
      },
      "source": "https://raw.githubusercontent.com/sararselitsky/FastPG/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Building your own Docker container",
        "parent_header": [
          "Introduction to FastPG",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "If you want to build your own container instead of pulling a pre-build one, you can use the `Dockerfile` included in the repository in the `Docker/` directory as a guide. The `build.sh` file in the same directory automatically builds and tags the container with the name and tags used by the pre-built container at DockerHub, you should change the tags by editing the parameters in the `build.sh` file, or by manually building it and tagging it yourself.\n\n```{bash}\ngit clone --single-branch https://github.com/sararselitsky/FastPG.git\ncd FastPG/Docker\n# Edit Docker tags in build.sh for your use\n./build.sh --no-cache\n```\n\nYou can just use this with Docker as above, but you can't just use a local Docker container with singularity versions less than 3.0. You have to push the container to some Docker registry before you can run it. With 3.0+ you can pull a local container directly by using `docker-daemon://` instead of `docker://` to get a local container.\n"
      },
      "source": "https://raw.githubusercontent.com/sararselitsky/FastPG/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Extending the Docker container",
        "parent_header": [
          "Introduction to FastPG",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "If you want to add additional things to the container, you should build your own. You can extend the existing container either by editing the provided  `Dockerfile` or by using the existing container as the `FROM` that your own Docker container is based on.\n"
      },
      "source": "https://raw.githubusercontent.com/sararselitsky/FastPG/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/sararselitsky/FastPG/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "YEAR: 2020\nCOPYRIGHT HOLDER: UNC - Chapel Hill\n"
      },
      "source": "https://raw.githubusercontent.com/sararselitsky/FastPG/master/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "parent_header": [
          "Introduction to FastPG"
        ],
        "type": "Text_excerpt",
        "value": "This package is licensed under the MIT license, except for the Grappolo C++ library by Mahantesh Halappanavar (hala@pnnl.gov) which is included and licensed under the BSD-3 license as described in the headings of the relevant *.cpp files. Some alterations to the original Grappolo source have been made to support installation and use within an R package. The original Grappolo C++ library is available at https://hpc.pnl.gov/people/hala/grappolo.html\n"
      },
      "source": "https://raw.githubusercontent.com/sararselitsky/FastPG/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "FastPG"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "sararselitsky"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 477831,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 12196,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 9196,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 2126,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 706,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sararselitsky/FastPG/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 10:44:39",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 25
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Use a pre-built Docker container",
        "parent_header": [
          "Introduction to FastPG",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "Another way to use FastPG is via a Docker container, `jefferys/fastpg:latest`, that is already set up and has the package pre-installed. You can just run it interactively, using the R command line inside it. To use the pre-built [FastPG container from DockerHub](https://hub.docker.com/repository/docker/jefferys/fastpg) you should be running on a 64 bit Intel/AMD compatible machine.\n\n```{bash}\ndocker pull jefferys/fastpg:latest\ndocker run -it --rm -v $PWD:$PWD -w $PWD jefferys/fastpg:latest\nR\n   # or (singularity < 3.0)\nsingularity pull docker://jefferys/fastpg:latest\nsingularity shell -B $PWD --pwd $PWD -C fastpg-latest.simg\nR\n   # or (singularity 3.0+)\nsingularity pull docker://jefferys/fastpg:latest\nsingularity shell -B $PWD --pwd $PWD -C fastpg_latest.sif\n```\n\nNote that you should consider this container version like an \"application\" and not an environment. You may have problems installing additional packages into it. To do that, see [Extending the Docker container](#extending-the-docker-container).\n"
      },
      "source": "https://raw.githubusercontent.com/sararselitsky/FastPG/master/README.md",
      "technique": "header_analysis"
    }
  ]
}