{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/sansubs/vcf2pop"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-05-11T17:21:27Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-06-29T13:18:12Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9463761565980302,
      "result": {
        "type": "Text_excerpt",
        "value": "VCF2PopTree is a client-side software written in Javascript and it runs\npurely within the user\u2019s computer/browser.  VCF2PopTree is compatible\nwith all population browsers including Chrome, Opera, Edge and Firefox\nand works equally efficient in Mac, Windows and Linux (Ubuntu). \nFurthermore, it displays the tree in a mobile phone (iPhone and Android)\nif the input file size is small. \nFEATURES \nReading a VCF file The main web page of VCF2PopTree has three major\nsections.  First section primarily performs file reading and pairwise\ndistance calculations.  VCF2PopTree reads VCF or compressed (gzipped)\nVCF files by selecting appropriate radio button.  The user has options\nto filter SNPs based on quality (Phred) scores and depth of coverage.\nThe threshold values have to be entered before loading the input file.\nIf the user changes the threshold values, the input file has to be \nreloaded again.  After the input file is chosen a progress bar is \ndisplayed to inform whether the file is being read or the pairwise \ndistance is being calculated.  Once the above steps are completed the \ndistance matrix is kept in the memory and hence users now could use the \nmatrix to construct and draw trees and display pairwise distances in \nMEGA/PHYLIP format or the tree in the newick (parenthetical) format. \nAn alert window will show up if correct VCF files formats are not \nselected. \nOptions available The phylogeny could be inferred using all genomes or\nonly a set of selected genomes (at least four) by entering the names in\nthe text area, which appears only if the latter option is selected.  Note \nthat at least four genomes are required to build a tree.  If no names are \nentered in the text area for genome selection the program will use all \ngenomes.  Incorrect names (including spellings) of genomes will invoke a \nwindows alert.  The program calculates genetic and drift distances (please \nrefer the publication for details) upon choosing the relevant radio buttons.  \nPairwise matrices could be calculated using the number of differences, \np-distance or with Jukes-Cantor correction. This is achieved by checking \nthe relevant radio buttons and the genome size has to be provided in the \ntextbox to compute p- and JC distances - fail enter this will in result \nin the invocation of a warning alert window.  The textbox will appear only \nif p- or JC distances are selected. \nThere are two radio buttons to infer phylogenetic relationship between\npopulations using UPGMA and Neighbour-Joining algorithms and the latter\nmethod produces an unrooted tree.  Two more radio buttons are provided\nto draw the phylogenetic tree in a rectangular or circular style.  Apart\nfrom drawing trees VCF2PopTree also produces the tree file in the\npopular newick format by checking the radio button \u201cNewick format\u201d. \nFinally, this program produces pairwise diversity matrix in the popular\nMEGA and PHYLIP formats and the last two radio buttons should be used\nfor this purpose respectively. \n"
      },
      "source": "https://raw.githubusercontent.com/sansubs/vcf2pop/master/README.txt",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/sansubs/vcf2pop/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 11
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/sansubs/vcf2pop/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "sansubs/vcf2pop"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/sansubs/vcf2pop/master/README.txt",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9999476868185203,
      "result": {
        "type": "Text_excerpt",
        "value": "INSTALLATION Since this is a client-side software, VCF2PopTree.html has\nto be downloaded to the local computer as \u201cDownload Zip\u201d from the github\nserver (https://github.com/sansubs/vcf2pop) or could be cloned to run on\nthe desktop.  To run the program a simple double click on\nVCF2PopTree.html link will result in opening the program in the default\nweb browser. \n"
      },
      "source": "https://raw.githubusercontent.com/sansubs/vcf2pop/master/README.txt",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/sansubs/vcf2pop/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "vcf2pop"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "sansubs"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 284418,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sansubs/vcf2pop/master/README.txt"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 18:18:34",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 25
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "static-website"
      },
      "technique": "software_type_heuristics"
    }
  ]
}