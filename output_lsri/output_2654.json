{
  "application_domain": [
    {
      "confidence": 38.0,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/CAG-CNV/DeepCNV"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-08-07T17:27:31Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-24T08:49:32Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DeepCNV: A Deep Learning Approach for Authenticating Copy Number Variants"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Description",
        "parent_header": [
          "DeepCNV: A Deep Learning Approach for Authenticating Copy Number Variants"
        ],
        "type": "Text_excerpt",
        "value": "We propose a deep learning approach to remove the false positive CNV calls from SNP array and sequencing CNV detection programs. This repo constains the model code and an executable script with five sample inputs. Since the pre-trained model file exceeds the upload size of Github, it can be accessed by this external [link](https://drive.google.com/file/d/1NxfcEw07Rce5rBZ4CT8Aznwf605fLM4F/view?usp=sharing). The dataset of this project is not for public. blended_learning.py is the training script. You can feed your own dataset to train the model using blended_learning.py.\n"
      },
      "source": "https://raw.githubusercontent.com/CAG-CNV/DeepCNV/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.826718673836297,
      "result": {
        "original_header": "DeepCNV: A Deep Learning Approach for Authenticating Copy Number Variants",
        "type": "Text_excerpt",
        "value": "For any question about this repo, please contact Joe Glessner (glessner@chop.edu).  \n \n"
      },
      "source": "https://raw.githubusercontent.com/CAG-CNV/DeepCNV/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8213673321051409,
      "result": {
        "original_header": "Generate plot images for script",
        "type": "Text_excerpt",
        "value": "```perl visualize_cnv.pl -format plot -signal 200477520001_R06C01.baflrr 200477520001_R06C01.rawcnv```;  \nTypically the baflrr signal file has header: Name Chr Position sample.B Allele Freq sample.Log R Ratio;  \nBASH2* can be added if only \"Name sample.B Allele Freq sample.Log R Ratio\" columns provided in baflrr signal files;  \nPennCNV-Seq can be run on sequencing BAM/CRAM to generate baflrr files;  \nRawcnv input file is: chr:start-stop numsnp=1 length=1 state2,cn=1 200477520001_R06C01.baflrr startsnp=a endsnp=b;  \nchr:start-stop and 200477520001_R06C01.baflrr are the only critical fields to be specified, making it easily adaptable to most CNV call output formats;  \n \n"
      },
      "source": "https://raw.githubusercontent.com/CAG-CNV/DeepCNV/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8572293029650874,
      "result": {
        "original_header": "Different Script Purposes and Iterations",
        "type": "Text_excerpt",
        "value": "The 3 .py files in the main directory and script directory are the first version script implementations (except for visualize_cnv.pl which remains constant).  \nArray (Initial Implementation): ./blended_learning.py and ./script/run.py  \nArray (Published in Briefings in Bioinformatics Implementation): ./DeepCNVv2/blend.py and ./DeepCNVv2/blend_pred.py  \nSequencing (Initial Implementation): ./predict.py  \nSequencing (Published in Briefings in Bioinformatics Implementation): ./DeepCNV_Seqv2/train.py and ./DeepCNV_Seqv2/predict.py   \nThe command line arguments differ. Array has blended learning using both JPGs with manual PASS/FAIL labeling and CNV Calling Quality Control Metric Values metadata from PennCNV detect_cnv.pl log file summary lines. Sequencing does not have blended learning, just training based on only JPGs with manual PASS/FAIL labeling and prediction of additional JPGs. See the column Command (Argument Descriptions) below.   \n| DeepCNV Python Scripts      | InputDataType | Command (Argument Descriptions)                                                                                                                                                                                                                                                                                                                      | Comment                                                                                                                       |\n| --------------------------- | ------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------- |\n| ./blended\\_learning.py      | Array         | python blended\\_learning.py ./data/JPG ./data/samples.csv ./DeepCNV.hdf5 ./output (1st argument: JPG\\_dir,2nd argument: metadata\\_dir,3rd argument: model\\_name, 4th argument: result\\_name)                                                                                                                                                         | Train and Test New Model and output performance statistics                                                                    |\n| ./script/run.py             | Array         | python script/run.py ./data/JPG ./data/samples.csv ./output ./DeepCNV.hdf5 (1st argument: image\\_dir, 2nd argument: metadata\\_dir, 3rd argument: output\\_dir, 4th argument: model\\_path)                                                                                                                                                             | Array Genotyping (Original)                                                                                                   |\n| ./predict.py                | Sequencing    | python predict.py ./input\\_x10 ./input\\_x10\\_output (1st argument: folder with input JPGs generated by visualize\\_cnv.pl, 2nd argument: output folder where res.csv is generated with pos and neg folders where corresponding JPGs are copied, NOTE: model\\_name defined in code as model/best\\_model\\_1\\_1.hdf5 but could be modified)              | Sequencing Data (BAF/LRR signal files for each sample compiled by PennCNV-Seq convert\\_map2signal.pl based on the 1KG CRAMs.) |\n| ./DeepCNVv2/blend.py        | Array         | python blend.py data/JPG/ data/ metadata.csv train\\_sample.csv val\\_sample.csv DeepCNV\\\\(v.2\\\\)/best\\_model\\_0.hdf5 res/res.csv (1st argument: img\\_folder, 2nd argument: metadata\\_folder, 3rd argument: metadata\\_file, 4th argument: train\\_id\\_file, 5th argument: val\\_id\\_file, 6th argument: saved\\_model\\_name, 7th argument: results\\_file) | To train the model, version Cheng Zhong used for the BIB paper                                                                |\n| ./DeepCNVv2/blend\\_pred.py  | Array         | python blend\\_pred.py data/JPG/ data/ metadata.csv val\\_sample.csv DeepCNV\\\\(v.2\\\\)/best\\_model\\_0.hdf5 res/res.csv (1st argument: img\\_folder, 2nd argument: metadata\\_folder, 3rd argument: metadata\\_file, 4th argument: val\\_id\\_file, 5th argument: saved\\_model\\_name, 6th argument: results\\_file)                                            | To make prediction with a pretrained model, version Cheng Zhong used for the BIB paper                                        |\n| ./DeepCNV\\_Seqv2/train.py   | Sequencing    | python blend.py data/ DeepCNV\\_Seq(v.2)/best\\_model\\_seq.hdf5 res/res.csv (1st argument: img\\_folder, 2nd argument: saved\\_model\\_name, 3rd argument: results\\_file)                                                                                                                                                                                 | To train the model, version Cheng Zhong used for the BIB paper                                                                |\n| ./DeepCNV\\_Seqv2/predict.py | Sequencing    | python predict.py data/ DeepCNV\\_Seq(v.2)/best\\_model\\_seq.hdf5 res/res.csv (1st argument: img\\_folder, 2nd argument: saved\\_model\\_name, 3rd argument: results\\_file)                                                                                                                                                                               | To make prediction with a pretrained model, version Cheng Zhong used for the BIB paper                                        |\n   \n"
      },
      "source": "https://raw.githubusercontent.com/CAG-CNV/DeepCNV/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9871916569303278,
      "result": {
        "original_header": "Array vs. Sequencing based input impact on algorithm convolution blocks",
        "type": "Text_excerpt",
        "value": "This Array with metadata (./DeepCNVv2/blend.py) and Sequencing without metadata (./DeepCNV_Seqv2/train.py ) difference is why the CNN part of the model described in the article has two convolution blocks with 64, and then two more blocks with 128 feature layers (Array with metadata) vs. the model in ./DeepCNV_Seqv2/train.py only has one convolution block of these (Sequencing without metadata).  \nOptionally, if PennCNV-Seq convert_map2signal.pl is used on the BAMs/CRAMs of samples you have to make BAF/LRR signal files for each sample, then PennCNV detect_cnv.pl can be run on the sequencing data to produce CNV Calling Quality Control Metric Values metadata from PennCNV detect_cnv.pl log file summary lines. Then DeepCNV blended learning could be applied to the sequencing data in a more highly similar way to array data.  \n \n"
      },
      "source": "https://raw.githubusercontent.com/CAG-CNV/DeepCNV/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9555876267295742,
      "result": {
        "original_header": "Image Dimensions",
        "type": "Text_excerpt",
        "value": "The JPG output from PennCNV visualize_cnv.pl is Size 900x900. We initially scaled that down to Size 300x300 to limit computational requirements and runtime.  \nIn Code predict.py, DeepCNV_Seqv2/train.py, and DeepCNV_Seqv2/predict.py:  \ntarget_size = (300, 300)  \nIn Subsequent code optimization and hdf5 model file size minimization, the image dimension downsizing was no longer needed as shown in Code blended_learning.py, DeepCNVv2/blend.py, DeepCNVv2/blend_pred.py:  \ndim=(900,900)  \n   \n"
      },
      "source": "https://raw.githubusercontent.com/CAG-CNV/DeepCNV/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Download Miniconda2 installer",
        "parent_header": [
          "DeepCNV: A Deep Learning Approach for Authenticating Copy Number Variants"
        ],
        "type": "Text_excerpt",
        "value": "wget\u00a0https://repo.anaconda.com/miniconda/Miniconda2-latest-Linux-x86_64.sh\u00a0"
      },
      "source": "https://raw.githubusercontent.com/CAG-CNV/DeepCNV/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/CAG-CNV/DeepCNV/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 6
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/CAG-CNV/DeepCNV/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CAG-CNV/DeepCNV"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DeepCNV: A Deep Learning Approach for Authenticating Copy Number Variants"
      },
      "source": "https://raw.githubusercontent.com/CAG-CNV/DeepCNV/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Install in Silent Mode",
        "parent_header": [
          "DeepCNV: A Deep Learning Approach for Authenticating Copy Number Variants"
        ],
        "type": "Text_excerpt",
        "value": "bash Miniconda2-latest-Linux-x86_64.sh -b -p $HOME/miniconda2\u00a0"
      },
      "source": "https://raw.githubusercontent.com/CAG-CNV/DeepCNV/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Install required python libraries",
        "parent_header": [
          "DeepCNV: A Deep Learning Approach for Authenticating Copy Number Variants"
        ],
        "type": "Text_excerpt",
        "value": "pip install pandas numpy tensorflow==1.12.0 keras==2.2.4 opencv-python"
      },
      "source": "https://raw.githubusercontent.com/CAG-CNV/DeepCNV/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Alternative Install required python libraries (strict version definition to prevent possibility of future version incompatibility)",
        "parent_header": [
          "DeepCNV: A Deep Learning Approach for Authenticating Copy Number Variants"
        ],
        "type": "Text_excerpt",
        "value": "pip install\u00a0pandas==0.17.1 numpy==1.11.0 tensorflow==1.12.0 keras==2.2.4 cv2==2.4.9.1\n\n|     DeepCNV Python Script       |     DeepCNV hdf5 Model File                                                                  |     Command (Full)                                                                                                                |     Command (Short)                                                                                                                                                                                                                                           |     Comment                                                                                                                             |     Date Modified    |\n|---------------------------------|----------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------|----------------------|\n|     run_DeepCNV_3.py            |     Joe_Batch1To6_model.h5 (also named   DeepCNV.hdf5)                                       |     python run_DeepCNV_3.py ./input_x10   ./input_x10_output                                                                      |     python run_DeepCNV_3.py ./input_x10   ./input_x10_output (1st argument: folder with input JPGs generated by   visualize_cnv.pl, 2nd argument: output folder where res.csv is generated with   pos and neg folders where corresponding JPGs are copied)    |     Array Genotyping (Original)                                                                                                         |     9/4/2019         |\n|     predict.py                  |     model/best_model_1_1.hdf5 (also   named DeepCNVSeq.hdf5) (model_name defined in code)    |     python predict.py ./input_x10 ./input_x10_output   (Put positive images in input_x10/1 and negative images in input_x10/0)    |     python predict.py ./input_x10   ./input_x10_output (1st argument: folder with input JPGs generated by   visualize_cnv.pl, 2nd argument: output folder where res.csv is generated with   pos and neg folders where corresponding JPGs are copied)          |     Sequencing Data (BAF/LRR signal   files for each sample compiled by PennCNV-Seq convert_map2signal.pl based on   the 1KG CRAMs.)    |     8/7/2020         |\n|     script/run.py               |     DeepCNV.hdf5                                                                             |     python script/run.py ./data/JPG   ./data/samples.csv ./output ./DeepCNV.hdf5                                                  |     python script/run.py ./data/JPG   ./data/samples.csv ./output ./DeepCNV.hdf5 (1st argument: image_dir, 2nd   argument: metadata_dir, 3rd argument: output_dir, 4th argument: model_path)                                                                  |     .                                                                                                                                   |     11/22/2019       |\n|     blended_learning.py         |     NA                                                                                       |     python blended_learning.py   ./data/JPG ./data/samples.csv ./DeepCNV.hdf5 ./output                                            |     python blended_learning.py   ./data/JPG ./data/samples.csv ./DeepCNV.hdf5 ./output (1st argument:   JPG_dir,2nd argument: metadata_dir,3rd argument: model_name, 4th argument:   result_name)                                                             |     .                                                                                                                                   |     11/22/2019       |\n|     DeepCNVv2/blend.py          |     DeepCNVv2/best_model_0.hdf5                                                              |     python blend.py data/JPG/ data/   metadata.csv train_sample.csv val_sample.csv res/bmodel.hdf5 res/res.csv                    |     python blend.py img_folder   metadata_folder metadata_file train_id_file val_id_file saved_model_name   results_file                                                                                                                                      |     version Cheng Zhong used for the   BIB paper                                                                                        |     11/7/2020        |\n|     DeepCNVv2/blend_pred.py     |     DeepCNVv2/best_model_0.hdf5                                                              |     python blend_pred.py data/JPG/   data/ metadata.csv val_sample.csv best_model_0.hdf5 res/res.csv                              |     python blend_pred.py img_folder   metadata_folder metadata_file val_id_file saved_model_name results_file                                                                                                                                                 |     version Cheng Zhong used for the   BIB paper                                                                                        |     11/6/2020        |\n|     DeepCNV_Seqv2/train.py      |     DeepCNV_Seqv2/best_model_seq.hdf5                                                        |     python blend.py data/   res/model.hdf5 res/res.csv                                                                            |     python train.py img_folder   saved_model_name results_file                                                                                                                                                                                                |     version Cheng Zhong used for the   BIB paper                                                                                        |     11/9/2020        |\n|     DeepCNV_Seqv2/predict.py    |     DeepCNV_Seqv2/best_model_seq.hdf5                                                        |     python predict.py data/   res/model.hdf5 res/res.csv                                                                          |     python predict.py img_folder   saved_model_name results_file                                                                                                                                                                                              |     version Cheng Zhong used for the   BIB paper                                                                                        |     11/8/2020        |\n\n\n|     Model File                |     Size    |     Month    |     Day    |     Year    |\n|-------------------------------|-------------|--------------|------------|-------------|\n|     Joe_Batch1To6_model.h5    |     65M     |     Apr      |     8      |     2019    |\n|     Batch4_train_on_all.h5    |     149M    |     Nov      |     20     |     2018    |\n|     Batch4_2.h5               |     149M    |     Nov      |     20     |     2018    |\n|     DeepCNVSeq.hdf5           |     4.8M    |     Aug      |     7      |     2020    |\n|     Batch4_2.h5               |     149M    |     Nov      |     20     |     2018    |\n|     model6.h5                 |     149M    |     Sep      |     13     |     2018    |\n|     best_model_0.hdf5         |     19M     |     Nov      |     6      |     2020    |\n|     best_model_seq.hdf5       |     3.2M    |     Mar      |     26     |     2020    |\n"
      },
      "source": "https://raw.githubusercontent.com/CAG-CNV/DeepCNV/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9950773784123326,
      "result": {
        "original_header": "Package Requirments",
        "type": "Text_excerpt",
        "value": "python  2.7.12  \npandas  0.17.1  \nnumpy  1.11.0  \ntensorflow  1.12.0  \nkeras  2.2.4  \ncv2  2.4.9.1  \n \n"
      },
      "source": "https://raw.githubusercontent.com/CAG-CNV/DeepCNV/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8506303857198358,
      "result": {
        "original_header": "Generate plot images for script",
        "type": "Text_excerpt",
        "value": "```perl visualize_cnv.pl -format plot -signal 200477520001_R06C01.baflrr 200477520001_R06C01.rawcnv```;  \nTypically the baflrr signal file has header: Name Chr Position sample.B Allele Freq sample.Log R Ratio;  \nBASH2* can be added if only \"Name sample.B Allele Freq sample.Log R Ratio\" columns provided in baflrr signal files;  \nPennCNV-Seq can be run on sequencing BAM/CRAM to generate baflrr files;  \nRawcnv input file is: chr:start-stop numsnp=1 length=1 state2,cn=1 200477520001_R06C01.baflrr startsnp=a endsnp=b;  \nchr:start-stop and 200477520001_R06C01.baflrr are the only critical fields to be specified, making it easily adaptable to most CNV call output formats;  \n \n"
      },
      "source": "https://raw.githubusercontent.com/CAG-CNV/DeepCNV/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8961198298342717,
      "result": {
        "original_header": "Different Script Purposes and Iterations",
        "type": "Text_excerpt",
        "value": "The 3 .py files in the main directory and script directory are the first version script implementations (except for visualize_cnv.pl which remains constant).  \nArray (Initial Implementation): ./blended_learning.py and ./script/run.py  \nArray (Published in Briefings in Bioinformatics Implementation): ./DeepCNVv2/blend.py and ./DeepCNVv2/blend_pred.py  \nSequencing (Initial Implementation): ./predict.py  \nSequencing (Published in Briefings in Bioinformatics Implementation): ./DeepCNV_Seqv2/train.py and ./DeepCNV_Seqv2/predict.py   \n| DeepCNV Python Scripts      | InputDataType | Command (Argument Descriptions)                                                                                                                                                                                                                                                                                                                      | Comment                                                                                                                       |\n| --------------------------- | ------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------- |\n| ./blended\\_learning.py      | Array         | python blended\\_learning.py ./data/JPG ./data/samples.csv ./DeepCNV.hdf5 ./output (1st argument: JPG\\_dir,2nd argument: metadata\\_dir,3rd argument: model\\_name, 4th argument: result\\_name)                                                                                                                                                         | Train and Test New Model and output performance statistics                                                                    |\n| ./script/run.py             | Array         | python script/run.py ./data/JPG ./data/samples.csv ./output ./DeepCNV.hdf5 (1st argument: image\\_dir, 2nd argument: metadata\\_dir, 3rd argument: output\\_dir, 4th argument: model\\_path)                                                                                                                                                             | Array Genotyping (Original)                                                                                                   |\n| ./predict.py                | Sequencing    | python predict.py ./input\\_x10 ./input\\_x10\\_output (1st argument: folder with input JPGs generated by visualize\\_cnv.pl, 2nd argument: output folder where res.csv is generated with pos and neg folders where corresponding JPGs are copied, NOTE: model\\_name defined in code as model/best\\_model\\_1\\_1.hdf5 but could be modified)              | Sequencing Data (BAF/LRR signal files for each sample compiled by PennCNV-Seq convert\\_map2signal.pl based on the 1KG CRAMs.) |\n| ./DeepCNVv2/blend.py        | Array         | python blend.py data/JPG/ data/ metadata.csv train\\_sample.csv val\\_sample.csv DeepCNV\\\\(v.2\\\\)/best\\_model\\_0.hdf5 res/res.csv (1st argument: img\\_folder, 2nd argument: metadata\\_folder, 3rd argument: metadata\\_file, 4th argument: train\\_id\\_file, 5th argument: val\\_id\\_file, 6th argument: saved\\_model\\_name, 7th argument: results\\_file) | To train the model, version Cheng Zhong used for the BIB paper                                                                |\n| ./DeepCNVv2/blend\\_pred.py  | Array         | python blend\\_pred.py data/JPG/ data/ metadata.csv val\\_sample.csv DeepCNV\\\\(v.2\\\\)/best\\_model\\_0.hdf5 res/res.csv (1st argument: img\\_folder, 2nd argument: metadata\\_folder, 3rd argument: metadata\\_file, 4th argument: val\\_id\\_file, 5th argument: saved\\_model\\_name, 6th argument: results\\_file)                                            | To make prediction with a pretrained model, version Cheng Zhong used for the BIB paper                                        |\n| ./DeepCNV\\_Seqv2/train.py   | Sequencing    | python blend.py data/ DeepCNV\\_Seq(v.2)/best\\_model\\_seq.hdf5 res/res.csv (1st argument: img\\_folder, 2nd argument: saved\\_model\\_name, 3rd argument: results\\_file)                                                                                                                                                                                 | To train the model, version Cheng Zhong used for the BIB paper                                                                |\n| ./DeepCNV\\_Seqv2/predict.py | Sequencing    | python predict.py data/ DeepCNV\\_Seq(v.2)/best\\_model\\_seq.hdf5 res/res.csv (1st argument: img\\_folder, 2nd argument: saved\\_model\\_name, 3rd argument: results\\_file)                                                                                                                                                                               | To make prediction with a pretrained model, version Cheng Zhong used for the BIB paper                                        |\n   \n"
      },
      "source": "https://raw.githubusercontent.com/CAG-CNV/DeepCNV/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/CAG-CNV/DeepCNV/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DeepCNV"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "CAG-CNV"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 40928,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 27232,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/CAG-CNV/DeepCNV/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Run script",
        "parent_header": [
          "DeepCNV: A Deep Learning Approach for Authenticating Copy Number Variants"
        ],
        "type": "Text_excerpt",
        "value": "1. Download the pre-trained model file from this [link](https://drive.google.com/file/d/1NxfcEw07Rce5rBZ4CT8Aznwf605fLM4F/view?usp=sharing);\n2. Download script folder;\n3. Copy model file into script folder;\n4. Enter script folder from Terminal;\n5. Check the package requirments. Different package may generate different results;\n6. Create output folder by ```mkdir output```;\n7. Run ```python run.py ./data/JPG ./data/samples.csv ./output ./DeepCNV.hdf5```;\n8. Check the results from output folder.\n"
      },
      "source": "https://raw.githubusercontent.com/CAG-CNV/DeepCNV/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 09:46:38",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 8
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ]
}