{
  "application_domain": [
    {
      "confidence": 0.9526744570347384,
      "result": {
        "type": "String",
        "value": "Graphs"
      },
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.972445585821335,
      "result": {
        "type": "String",
        "value": "Semantic web"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Kingsford-Group/variantstore"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contributing",
        "parent_header": [
          "VariantStore"
        ],
        "type": "Text_excerpt",
        "value": "------------\nContributions via GitHub pull requests are welcome.\n\n"
      },
      "source": "https://raw.githubusercontent.com/Kingsford-Group/variantstore/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-12-22T09:39:29Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-06-30T09:57:02Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "VariantStore: A Large-Scale Genomic Variant Search Index"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.998049667692317,
      "result": {
        "original_header": "Overview",
        "type": "Text_excerpt",
        "value": "VariantStore is a system for efficiently indexing and querying genomic\ninformation (genomic variants and phasing information) from thousands of samples\ncontaining millions of variants. VariantStore builds a variant-oriented index by\nmapping each variant to the list of samples that contain the variant.  Variants\nare indexed based on the positions where they occur. It supports querying\nvariants occurring between two positions across a chromosome based on the\nreference or a sample coordinate. VariantStore can scale to tens of millions of\nvariants and thousands of samples and can efficiently scale out-of-RAM to\nstorage devices to enable memory-efficient construction and query.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Kingsford-Group/variantstore/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8638136764364374,
      "result": {
        "original_header": "API",
        "type": "Text_excerpt",
        "value": "--------\n* `variantstore construct`: construct a variation graph and position index.\n* `variantstore query`: query variation graph for variants using the position index.\n* `variantstore draw`:  output a subgraph of the variation graph in the dot format.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Kingsford-Group/variantstore/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8481383998734089,
      "result": {
        "original_header": "Build",
        "type": "Text_excerpt",
        "value": "The usage for this command are as follows:\n```bash\nSYNOPSIS\n        variantstore query -p <output-prefix> -t <query-type> -r <region> -m <mode> [-o <outfile>] [-s <sample-name>] [-a <alt-seq>] [-b <ref-seq>] [-v]\n\nOPTIONS\n        <output-prefix>\n                    output directory\n\n        <query-type>\n                    Types of query.\n                   1. Get sample's sequence in reference coordinates.\n                   2. Get sample's sequence in sample coordinates.\n                   3. Return closest variant in reference coordinates.\n                   4. Get sample's variants in reference coordinates.\n                   5. Get sample's variants in sample coordinates.\n                   6. Get variants in reference coordinates.\n                   7. Return samples with a given mutation.\n\n        <region>    region in format <start>:<end>, regions separated by ','\n        <mode>      READ_INDEX_ONLY: 0, READ_COMPLETE_GRAPH:1\n        <outfile>   output_file\n\n        <sample-name>\n                    sample name\n\n        <alt-seq>   alternative sequences, separated by ','\n        <ref-seq>   reference sequences, separated by ','\n\n        -v, --verbose\n                    print vcf\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/Kingsford-Group/variantstore/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Kingsford-Group/variantstore/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Kingsford-Group/variantstore/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Kingsford-Group/variantstore"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "VariantStore"
      },
      "source": "https://raw.githubusercontent.com/Kingsford-Group/variantstore/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Kingsford-Group/variantstore/master/scripts/bm_vs_query_analysis.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Kingsford-Group/variantstore/master/scripts/download.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Kingsford-Group/variantstore/master/scripts/merge_into_master.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Kingsford-Group/variantstore/master/scripts/multi_ref.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Kingsford-Group/variantstore/master/scripts/bm_vs_query_mem.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Kingsford-Group/variantstore/master/scripts/merge_into_develop.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Kingsford-Group/variantstore/master/scripts/bm_bcftools_query.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Kingsford-Group/variantstore/master/scripts/bm_query.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Kingsford-Group/variantstore/master/scripts/run_query_gtc.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Kingsford-Group/variantstore/master/scripts/run_query.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Kingsford-Group/variantstore/master/scripts/bm_gtc_query.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Kingsford-Group/variantstore/master/scripts/run_query_analysis.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Kingsford-Group/variantstore/master/scripts/bm_vs_query.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Kingsford-Group/variantstore/master/scripts/run_query_mem.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Kingsford-Group/variantstore/master/eval_data_records/combine_parts.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Kingsford-Group/variantstore/master/eval_data_records/compress_index_vcf.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Kingsford-Group/variantstore/master/eval_data_records/fix_tcga.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Kingsford-Group/variantstore/master/eval_data_records/combine_compress_index.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Kingsford-Group/variantstore/master/eval_data_records/combine_parts_compress_index.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 0.9766738925152012,
      "result": {
        "original_header": "Build",
        "type": "Text_excerpt",
        "value": "-------\nLibrary dependencies (given version or higher):\n- g++ 7.5.0 (VariantStore needs C++17. C++17 features are available since GCC 5. Also tested on 7.3.0 but not other versions.)\n- [protobuf 3.7.1](https://github.com/protocolbuffers/protobuf), C++ installation and trouble shooting, see [here](https://github.com/protocolbuffers/protobuf/blob/master/src/README.md)\n- [sdsl-lite](https://github.com/simongog/sdsl-lite)\n- zlib1g-dev 1:1.2.11.dfsg-0ubuntu2, or zlib-devel on CentOS\n- libbz2-dev 1.0.6-8.1ubuntu0.2, or bzip2-devel on CentOS\n- liblzma-dev 5.2.2-1.3, or xz-devel on CentOS\n- gperftools-devel on CentO\nS\n```bash\n$ git clone https://github.com/Kingsford-Group/variantstore\n$ cd variantstore\n$ make proto\n$ make variantstore\n``` \nConstruct variation graph\n```bash\n$ mkdir ser/ # make output folder\n$ ./variantstore construct -r data/x.fa -v data/x.vcf.gz -p ser/\n```\n \nThe usage for this command are as follows:\n```bash\nSYNOPSIS\n        variantstore construct -r <reference-file> -v <vcf-file> -p <output-prefix>\n\nOPTIONS\n        <reference-file>\n                    reference file\n\n        <vcf-file>  variant call format file\n\n        <output-prefix>\n                    output directory\n```\nVariant queries\n```bash\n$ ./variantstore query -p ser/ -t 6 -r 10:105 -m 0 -s 1 -o variant.txt -v\n```\n \nExpected output\n```bash\n[2021-03-14 15:23:18.632] [info] Loading Index ...\n[2021-03-14 15:23:18.632] [info] Loading variant graph ...\n[2021-03-14 15:23:18.632] [info] Read complete graph ..\n[2021-03-14 15:23:18.682] [info] Graph stats:\n[2021-03-14 15:23:18.682] [info] Chromosome: x #Vertices: 212 #Edges: 0 Seq length: 1074\n[2021-03-14 15:23:18.682] [info] Looking up vertex corresponding to the queried region\n``` \nThe usage for this command are as follows:\n```bash\nSYNOPSIS\n        variantstore draw -p <output-prefix> -r <region> -h <hops> [-s <sample-name>] [-o <outfile>]\n\nOPTIONS\n        <output-prefix>\n                    output directory\n\n        <region>    region in format <start>:<end>, regions separated by ','\n        <hops>      radius of the subgraph\n\n        <sample-name>\n                    sample name (default: REF)\n\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/Kingsford-Group/variantstore/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8413931811880332,
      "result": {
        "original_header": "Build",
        "type": "Text_excerpt",
        "value": "The usage for this command are as follows:\n```bash\nSYNOPSIS\n        variantstore construct -r <reference-file> -v <vcf-file> -p <output-prefix>\n\nOPTIONS\n        <reference-file>\n                    reference file\n\n        <vcf-file>  variant call format file\n\n        <output-prefix>\n                    output directory\n```\nVariant queries\n```bash\n$ ./variantstore query -p ser/ -t 6 -r 10:105 -m 0 -s 1 -o variant.txt -v\n```\n \nThe usage for this command are as follows:\n```bash\nSYNOPSIS\n        variantstore query -p <output-prefix> -t <query-type> -r <region> -m <mode> [-o <outfile>] [-s <sample-name>] [-a <alt-seq>] [-b <ref-seq>] [-v]\n\nOPTIONS\n        <output-prefix>\n                    output directory\n\n        <query-type>\n                    Types of query.\n                   1. Get sample's sequence in reference coordinates.\n                   2. Get sample's sequence in sample coordinates.\n                   3. Return closest variant in reference coordinates.\n                   4. Get sample's variants in reference coordinates.\n                   5. Get sample's variants in sample coordinates.\n                   6. Get variants in reference coordinates.\n                   7. Return samples with a given mutation.\n\n        <region>    region in format <start>:<end>, regions separated by ','\n        <mode>      READ_INDEX_ONLY: 0, READ_COMPLETE_GRAPH:1\n        <outfile>   output_file\n\n        <sample-name>\n                    sample name\n\n        <alt-seq>   alternative sequences, separated by ','\n        <ref-seq>   reference sequences, separated by ','\n\n        -v, --verbose\n                    print vcf\n```\n \nThe usage for this command are as follows:\n```bash\nSYNOPSIS\n        variantstore draw -p <output-prefix> -r <region> -h <hops> [-s <sample-name>] [-o <outfile>]\n\nOPTIONS\n        <output-prefix>\n                    output directory\n\n        <region>    region in format <start>:<end>, regions separated by ','\n        <hops>      radius of the subgraph\n\n        <sample-name>\n                    sample name (default: REF)\n\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/Kingsford-Group/variantstore/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Kingsford-Group/variantstore/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "BSD 2-Clause \"Simplified\" License",
        "spdx_id": "BSD-2-Clause",
        "type": "License",
        "url": "https://api.github.com/licenses/bsd-2-clause",
        "value": "https://api.github.com/licenses/bsd-2-clause"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Copyright <2019> <Prashant Pandey, Yinjie Gao, Carl Kingsford>\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\nlist of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimer in the documentation and/or\nother materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
      },
      "source": "https://raw.githubusercontent.com/Kingsford-Group/variantstore/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "variantstore"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "Kingsford-Group"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 1107517,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 501843,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 13746,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 5471,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 1553,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Kingsford-Group/variantstore/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 17:06:16",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 39
      },
      "technique": "GitHub_API"
    }
  ]
}