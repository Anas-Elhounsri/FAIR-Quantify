{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Reference",
        "parent_header": [
          "pyBedGraph"
        ],
        "type": "Text_excerpt",
        "value": "[pyBedGraph: a Python package for fast operations on 1-dimensional genomic signal tracks](https://academic.oup.com/bioinformatics/advance-article/doi/10.1093/bioinformatics/btaa061/5733724), Zhang et al., Bioinformatics, 2020\n"
      },
      "source": "https://raw.githubusercontent.com/TheJacksonLaboratory/pyBedGraph/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/TheJacksonLaboratory/pyBedGraph"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-07-09T22:22:49Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-06-06T18:40:06Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A Python package for fast operations on 1-dimensional genomic signal tracks"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9525636557083177,
      "result": {
        "original_header": "Features",
        "type": "Text_excerpt",
        "value": "- Finds the mean, approx. mean, max, min, coverage, or standard deviation for a given interval in a bedGraph file\n- Partly written in Cython for speed improvements\n- Can look up exact statistics of 1 million regions in ~0.26 second on a conventional laptop\n- An approximate mean for 10,000 regions can be computed in ~0.0012 second w/ error rate of less than 5 percent\n \n"
      },
      "source": "https://raw.githubusercontent.com/TheJacksonLaboratory/pyBedGraph/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8618671910488134,
      "result": {
        "original_header": "Drawbacks",
        "type": "Text_excerpt",
        "value": "- Uses memory to load files\n    - 16 bytes per line in bedGraph file\n    - 4 bytes per basePair in every chromosome loaded\n- Loading the bedGraph file can take up to a minute or two\n- Only works with sorted bedgraph files\n \n"
      },
      "source": "https://raw.githubusercontent.com/TheJacksonLaboratory/pyBedGraph/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9558376360537847,
      "result": {
        "original_header": "Benchmarking pyBedGraph",
        "type": "Text_excerpt",
        "value": "Actual values are found from the `stats` function in pyBigWig with the `exact` argument being `True`. The error for exact stats will be ~1e-8 due to rounding error of conversion of bigWig and bedGraph files. \n"
      },
      "source": "https://raw.githubusercontent.com/TheJacksonLaboratory/pyBedGraph/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Download the test files here:",
        "parent_header": [
          "pyBedGraph",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "https://thejacksonlaboratory.ent.box.com/s/3jglutwf3d54pnomnp33ivo7a9546vhe\n\nTest files are also included in this Github repository: `test/test_files`.\n\nEnter the directory with the test files.\n"
      },
      "source": "https://raw.githubusercontent.com/TheJacksonLaboratory/pyBedGraph/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/TheJacksonLaboratory/pyBedGraph/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "faq": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Common Errors",
        "parent_header": [
          "pyBedGraph"
        ],
        "type": "Text_excerpt",
        "value": "```\npyBedGraph/include_missing_bp.pyx in pyBedGraph.include_missing_bp.get_exact_means()\npyBedGraph/include_missing_bp.pyx in pyBedGraph.include_missing_bp.get_exact_means()\nIndexError: Out of bounds on buffer access (axis 0)\n```\nThis is frequently caused by giving an interval that is outside the chromosome size.\n\nNote that bedgraph files need to be sorted.  To do so, try\n``` sort -k1,1 -k2,2 example.bedgraph > example.sorted.bedgraph```\n"
      },
      "source": "https://raw.githubusercontent.com/TheJacksonLaboratory/pyBedGraph/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/TheJacksonLaboratory/pyBedGraph/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "TheJacksonLaboratory/pyBedGraph"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "pyBedGraph"
      },
      "source": "https://raw.githubusercontent.com/TheJacksonLaboratory/pyBedGraph/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/TheJacksonLaboratory/pyBedGraph/master/graphs/run_benchmark.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/TheJacksonLaboratory/pyBedGraph/master/graphs/v-1_graphs/format_results.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "pyBedGraph"
        ],
        "type": "Text_excerpt",
        "value": "Dependency requirements:\n- Numpy >= v1.16.4\n- pyBigWig >= v0.3.16 (For reading bigWig files)\n    - pyBigWig == 0.3.16 (For Benchmarking)\n\nWith pip:\n```bash\npip3 install pyBedGraph\npip3 install pyBigWig # if using bigwig files\n```\n\nWith conda:\n```bash\nconda create -n test\nconda activate test\nconda install -c bioconda pyBedGraph\nconda install -c bioconda pyBigWig # if using bigwig files\n```\n"
      },
      "source": "https://raw.githubusercontent.com/TheJacksonLaboratory/pyBedGraph/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9578351414841744,
      "result": {
        "original_header": "Benchmarking pyBedGraph",
        "type": "Text_excerpt",
        "value": "Alternatively, one can make actual values be pyBedGraph's exact statistics. \n"
      },
      "source": "https://raw.githubusercontent.com/TheJacksonLaboratory/pyBedGraph/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9898901281317725,
      "result": {
        "original_header": "Testing pyBedGraph",
        "type": "Text_excerpt",
        "value": "Some tests are provided in `test/test.py`. Additional bedgraph and bigwig files for ENCFF376VCU are needed to run extensive_test.py. Build badge comes from a forked repository, [https://github.com/c0ver/pyBedGraph](https://github.com/c0ver/pyBedGraph), that has the same version as this repository.\n \n"
      },
      "source": "https://raw.githubusercontent.com/TheJacksonLaboratory/pyBedGraph/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8547216958895487,
      "result": {
        "original_header": "Benchmarking pyBedGraph",
        "type": "Text_excerpt",
        "value": "Enter the `graphs` folder in the Github project repository.\n```python\nfrom pyBedGraph import BedGraph\nfrom Benchmark import Benchmark\n\n# These files can be downloaded from the link given above\nbedGraph = BedGraph('mm10.chrom.sizes', 'ENCFF376VCU.bedGraph', 'chr1')\n\n# Alternatively using a bigwig file\n# bedGraph = BedGraph('mm10.chrom.sizes', 'ENCFF376VCU.bigWig', 'chr1')\n\nbedGraph.load_chrom_data('chr1')\nbedGraph.load_chrom_bins('chr1', 100)\n\n# arg1 - BedGraph object\n# arg2 - bigwig file\nbench = Benchmark(bedGraph, 'ENCFF376VCU.bigWig')\n\n# arg1 - num_tests\n# arg2 - interval_size\n# arg3 - chrom_nam\n# arg4 - bin_size\n# arg5 - stats (optional) (Default is all stats)\n# arg6 - just_runtime (optional) (Default is False)\n# arg6 - bench_pyBigWig_approx (optional) (Default is True)\n# arg6 - make_pyBigWig_baseline (optional) (Default is True)\n# Test all statistics\nresult = bench.benchmark(10000, 5000, 'chr1', 100)\n\nfor key in result:\n    print(key, result[key])\n\n# mean {'run_time': 0.008324861526489258, 'error': {'percent_error': 0.0, 'ms_error': 0.0, 'abs_error': 0.0, 'not_included': 0}}\n# pyBigWig_mean {'approx_run_time': 1.4333949089050293, 'exact_run_time': 0.7698564529418945, 'error': {'percent_error': 0.06567272540694802, 'ms_error': 0.001222419386871348, 'abs_error': 0.023540340949669364, 'not_included': 79}}\n# approx_mean {'run_time': 0.002111673355102539, 'error': {'percent_error': 0.006529644707171326, 'ms_error': 7.858080037556034e-06, 'abs_error': 0.001824641073039555, 'not_included': 4}}\n# max {'run_time': 0.005040645599365234, 'error': {'percent_error': 0.0, 'ms_error': 0.0, 'abs_error': 0.0, 'not_included': 0}}\n# pyBigWig_max {'approx_run_time': 1.2673799991607666, 'exact_run_time': 0.7933700084686279, 'error': {'percent_error': 0.10220448242023446, 'ms_error': 1.2678718593032368, 'abs_error': 0.25865022624731066, 'not_included': 79}}\n# min {'run_time': 0.005083560943603516, 'error': {'percent_error': 0.0, 'ms_error': 0.0, 'abs_error': 0.0, 'not_included': 0}}\n# pyBigWig_min {'approx_run_time': 1.2120039463043213, 'exact_run_time': 0.7468140125274658, 'error': {'percent_error': 0.0001, 'ms_error': 7.109862619931795e-07, 'abs_error': 8.432000130414962e-06, 'not_included': 0}}\n# coverage {'run_time': 0.0063626766204833984, 'error': {'percent_error': 0.0, 'ms_error': 0.0, 'abs_error': 0.0, 'not_included': 0}}\n# pyBigWig_coverage {'approx_run_time': 1.2101118564605713, 'exact_run_time': 0.7483360767364502, 'error': {'percent_error': 0.0, 'ms_error': 0.0, 'abs_error': 0.0, 'not_included': 0}}\n# std {'run_time': 0.0422673225402832, 'error': {'percent_error': 9.690484548456011e-05, 'ms_error': 4.764358150024449e-09, 'abs_error': 6.25265457158463e-05, 'not_included': 0}}\n# pyBigWig_std {'approx_run_time': 1.219078540802002, 'exact_run_time': 0.7484426498413086, 'error': {'percent_error': 0.04560011737269686, 'ms_error': 0.005008324729263816, 'abs_error': 0.02569405301725115, 'not_included': 79}}\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/TheJacksonLaboratory/pyBedGraph/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/TheJacksonLaboratory/pyBedGraph/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "atac-seq, bedgraph, bedgraph-files, bioinformatics, chip-seq"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2019 Henry Zhang\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
      },
      "source": "https://raw.githubusercontent.com/TheJacksonLaboratory/pyBedGraph/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "pyBedGraph"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "TheJacksonLaboratory"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 107240,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 1681,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/TheJacksonLaboratory/pyBedGraph/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 15:37:24",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 24
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Bug reports",
        "parent_header": [
          "pyBedGraph"
        ],
        "type": "Text_excerpt",
        "value": "To report bugs, contact Henry (henrybzhang.99@gmail.com) and Minji (minji.kim@jax.org) or visit the [Issues](https://github.com/TheJacksonLaboratory/pyBedGraph/issues) page. \n"
      },
      "source": "https://raw.githubusercontent.com/TheJacksonLaboratory/pyBedGraph/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Create the object:",
        "parent_header": [
          "pyBedGraph",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "```python\nfrom pyBedGraph import BedGraph\n\n# arg1 - chromosome sizes file\n# arg2 - bedgraph file\n# arg3 - (optional) chromosome_name\n# Just load chromosome 'chr1' (uses less memory and takes less time)\nbedGraph = BedGraph('myChrom.sizes', 'random_test.bedGraph', 'chr1')\n\n# Load the whole bedGraph file\nbedGraph = BedGraph('myChrom.sizes', 'random_test.bedGraph')\n\n# Option to not ignore missing basePairs when calculating statistics\n# Used the exact same way but produces slightly different results\ninclusive_bedGraph = BedGraph('myChrom.sizes', 'random_test.bedGraph', ignore_missing_bp=False)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/TheJacksonLaboratory/pyBedGraph/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Choose and load a chromosome to search for:",
        "parent_header": [
          "pyBedGraph",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "```python\nbedGraph.load_chrom_data('chr1')\ninclusive_bedGraph.load_chrom_data('chr1')\n```"
      },
      "source": "https://raw.githubusercontent.com/TheJacksonLaboratory/pyBedGraph/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Load bins for finding mean:",
        "parent_header": [
          "pyBedGraph",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "For approx_mean:\n1. Smaller bin size -> more accurate but slower\n2. Larger bin size -> less accurate but faster\n```python\nbedGraph.load_chrom_bins('chr1', 3)\ninclusive_bedGraph.load_chrom_bins('chr1', 3)\n```"
      },
      "source": "https://raw.githubusercontent.com/TheJacksonLaboratory/pyBedGraph/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Choose a specific statistic to search for:",
        "parent_header": [
          "pyBedGraph",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "  - `'mean'`\n  - `'approx_mean'` - an approximate mean is faster than exact mean, with < 5% error rate\n  - `'max'`\n  - `'min'`\n  - `'coverage'`\n  - `'std'` - (population standard deviation)\n  - `'sum'`\n"
      },
      "source": "https://raw.githubusercontent.com/TheJacksonLaboratory/pyBedGraph/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Search from a list of intervals:",
        "parent_header": [
          "pyBedGraph",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "```python\nimport numpy as np\n\n# Option 1\ntest_intervals = [\n    ['chr1', 24, 26],\n    ['chr1', 12, 15],\n    ['chr1', 8, 12],\n    ['chr1', 9, 10],\n    ['chr1', 0, 5]\n]\nvalues = bedGraph.stats(intervals=test_intervals)\n\n# [-1.          0.9         0.1        -1.          0.82        0.72222222]\nprint(values)\n\n# Option 2\nstart_list = np.array([24, 12, 8, 9, 0], dtype=np.int32)\nend_list = np.array([26, 15, 12, 10, 5], dtype=np.int32)\nchrom_name = 'chr1'\n\n# arg1 - (optional) stat (default is 'mean')\n# arg2 - intervals\n# arg3 - start_list\n# arg4 - end_list\n# arg5 - chrom_name\n# must have either intervals or start_list, end_list, chrom_name\n# returns a numpy array of values\nresult = bedGraph.stats(start_list=start_list, end_list=end_list, chrom_name=chrom_name)\n\n# [-1.          0.9         0.1        -1.          0.82        0.72222222]\nprint(result)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/TheJacksonLaboratory/pyBedGraph/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Search from a file:",
        "parent_header": [
          "pyBedGraph",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "```python\n# arg1 - interval file\n# arg2 - (optional) output_to_file (default is True and outputs to 'chr1_out.txt'\n# arg3 - (optional) stat (default is 'mean')\n# returns a dictionary; keys are chromosome names, values are numpy arrays\nresult = bedGraph.stats_from_file('test_intervals.txt', output_to_file=False, stat='mean')\n\n# {'chr1': array([-1.        ,  0.9       ,  0.1       , -1.        ,  0.82      ,\n#        0.72222222])}\nprint(result)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/TheJacksonLaboratory/pyBedGraph/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Sample Tests (from included test files):",
        "parent_header": [
          "pyBedGraph",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "```python\n# [-1.    0.9   0.1  -1.    0.82    0.72222222]\nbedGraph.stats('mean', test_intervals)\n\n# [-1.          0.9         0.1        -1.          0.80769231  0.72222222]\nbedGraph.stats('approx_mean', test_intervals)\n\n# [0.         0.33333333 0.25       0.         1.         0.3       ]\nbedGraph.stats('coverage', test_intervals)\n\n# [-1.   0.9  0.1 -1.   0.7  0.1]\nbedGraph.stats('min', test_intervals)\n\n# [-1.   0.9  0.1 -1.   0.9  1. ]\nbedGraph.stats('max', test_intervals)\n\n# [-1.          0.          0.         -1.          0.09797959  0.27799991]\nbedGraph.stats('std', test_intervals)\n```\n\n```python\n# [0.         0.3        0.025      0.         0.82       0.21666667]\ninclusive_bedGraph.stats('mean', test_intervals)\n\n# [0.         0.3        0.00833333 0.         0.7        0.21666667]\ninclusive_bedGraph.stats('approx_mean', test_intervals)\n\n# [0.         0.33333333 0.25       0.         1.         0.3       ]\ninclusive_bedGraph.stats('coverage', test_intervals)\n\n# [0.  0.  0.1 0.  0.7 0.1]\ninclusive_bedGraph.stats('min', test_intervals)\n\n# [0.  0.9 0.1 0.  0.9 1. ]\ninclusive_bedGraph.stats('max', test_intervals)\n\n# [0.         0.42426407 0.04330127 0.         0.09797959 0.36431061]\ninclusive_bedGraph.stats('std', test_intervals)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/TheJacksonLaboratory/pyBedGraph/master/README.md",
      "technique": "header_analysis"
    }
  ]
}