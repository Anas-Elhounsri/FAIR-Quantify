{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Scientific references",
        "type": "Text_excerpt",
        "value": "This code was explicitly used in the following scientific publications:\n\n- \"OpenEP: an open-source simulator for electroporation-based tumor treatments\". Scientific Reports, Nature. Authors: M. Marino, E. Luj\u00e1n, E. Mocskos, G. Marshall. 2019.\n- \"Towards an optimal dose-response relationship in gene electrotransfer protocols\". Electrochimica Acta. E. Luj\u00e1n, M. Marino, N. Olaiz, G. Marshall. 2019.\n\nThis code implements the standard electroporation model used in scientific publications such as:\n\n- \"The Role of Additional Pulses in Electropermeabilization Protocols\". Authors: C. Su\u00e1rez, A. Soba, F. Maglietti, N. Olaiz, G. Marshall. 2014.\n- \"A Three-Dimensional In Vitro Tumor Platform for Modeling Therapeutic Irreversible Electroporation\". Authors: C. B. Arena, C. S. Szot, P. A. Garcia, M. N. Rylander and R. V. Davalos. 2012.\n- \"Three-dimensional Finite-element Analysis of Joule Heating in Electrochemotherapy and in vivo Gene Electrotransfer\". Authors: Igor Lackovi\u0107, Ratko Magjarevi\u0107 and Damijan Miklav\u010di\u010d. 2009.\n"
      },
      "source": "https://raw.githubusercontent.com/LSC-UBA/OpenEP/master/Readme.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/LSC-UBA/OpenEP"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-08-27T19:38:02Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-08-16T14:28:21Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "An open source electrical-thermal simulator for electroporation-based treatments."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Code file descriptions",
        "parent_header": [
          "More about the software..."
        ],
        "type": "Text_excerpt",
        "value": "| Source file |  Description  |\n|---------------|---------------|\n| main.cpp  |  Main simulation process is implemented in this file. | \n| electrics_calc.h, electrics_calc.cpp |  All electric variables (Phi, **E**, sigma, **j**, i, Q) are calculated in these files. Only Phi requires the solution of an equation system. | \n| temp_calc.h, temp_calc.cpp |  Temperature transient solution is solved in these files. | \n| par.h |  Biological, physical and numerical paramenters are declared and/or initialized in this file. | \n| mesh.h, mesh.cpp |   Mesh class keeps information about geometry and domain discretization. Instances of this class are used in the ScalarField class and VectorField class. | \n| scalar_field.h, scalar_field.cpp |   ScalarField class is defined in these files. Instances of this class are used in main.cpp, electrics_calc.h, temp_calc.h for depicting  Phi, |**E**|, |**j**| and sigma. | \n| vector_field.h, vector_field.cpp |   VectorField class is defined in these files. Instances of this class are used in main.cpp, electrics_calc.h and temp_calc.h for depicting **E** and **j**.  | \n| save.h, save.cpp |   Saving of the different scalar and vector fields as well as the log, are implemented in these files.| \n\n\n"
      },
      "source": "https://raw.githubusercontent.com/LSC-UBA/OpenEP/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9998688006687593,
      "result": {
        "original_header": "OpenEP: an open source electrical-thermal simulator for electroporation-based tumor treatments",
        "type": "Text_excerpt",
        "value": "The application of short electric pulses to biological tissues have spread across several scientific and industrial sectors, such as medical, food processing, biotechnology, and environmental science. In medicine, gene electrotransfer has proven to be a powerful method for DNA delivery. Besides, electrochemotherapy and irreversible EP have evidenced high efficacy and low side effects as antitumoral therapies, representing an alternative to traditional methods such\nas surgery, radiotherapy or chemotherapy. The knowledge of key physical magnitudes involved in electroporation or pulsed electric field treatments (i.e. electric potential, electric field, electrical conductivity, current density, electric current, electric charge, electroporated area or electric field threshold variation in time, and heat distribution) is necessary to develop improved strategies to plan and optimize the application of this family of techniques. Despite the availability of several general-purpose tools that model and/or optimize EP-based therapies, currently, there are no openly-available tools specifically designed to describe the complex physical phenomena underlying EP which can also be used as a platform for therapy optimization. To address those goals, here we present OpenEP, an EP-based treatment simulator under a free/libre user license, which models EP electrical and thermal phenomena. It allows the customization of\nseveral parameters such as types of tissue, electrode material and geometry, pulse length and frequency, number of pulses, field intensity, among many others. OpenEP solves, based on first principles, non-linear PDEs in three-dimensional space and time. It provides a highly efficient shared memory implementation which allows the analysis of complex scenarios taking advantage of parallel resources. This code was utilized in our previous works for modeling three main EP therapies: Electrochemotherapy (ECT), Irreversible Electroporation (IRE) and Gene Electro-Transfer (GET). By making this application freely available, it is expected to contribute to the EP-based treatment research as well as to promote industrial applications. \n"
      },
      "source": "https://raw.githubusercontent.com/LSC-UBA/OpenEP/master/Readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9694487374862204,
      "result": {
        "original_header": "Features",
        "type": "Text_excerpt",
        "value": "- It is an in-silico lab, allows modeling, planning and optimizing electroporation-based treatments, including\n    - Electrochemotherapy (ECT)\n    - Irreversible Electroporation (IRE)\n    - Gene Electro-Transfer (GET)\n- It provides support for variable-pulse protocols, including\n    - Combined high-voltage (short), low-voltage (long) pulse regimens.\n    - Multiple pulse trains consisting of bursts of the same (amplitude, duration, repetition rate) pulse.\n- It models the dynamic of crucial physical variables involved in EP treatments\n    - Electric Field, Electric Potential, Electric Current, Electric Conductivity, Current Density, Electric Charge, and Temperature.\n- It models two types of electrode geometries\n    - Needles, and plates (electrode length, width, thickness, anode-cathode distances, etc.) \n- It models three-dimensional domains\n- It runs in parallel in your notebook or in a computer cluster, using shared memory.\n- Is OpenSource Software! \n   \n   \n"
      },
      "source": "https://raw.githubusercontent.com/LSC-UBA/OpenEP/master/Readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9249145046895827,
      "result": {
        "original_header": "run.sh options",
        "type": "Text_excerpt",
        "value": "| Compilation option | Description |\n|---------------|---------------|\n| STD | Standard compilation. |\n| O3 | Compilation with O3 optimizations. |\n| FAST | Compilation with Ofast optimizations. |\n| DBG | Compilation with debug mode. |\n| OMP | Compilation with OpenMP. |\n| O3 OMP | Compilation with O3 optimizations and OpenMP. |\n| FAST OMP | Compilation with Ofast optimizations and OpenMP. |\n \n"
      },
      "source": "https://raw.githubusercontent.com/LSC-UBA/OpenEP/master/Readme.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/LSC-UBA/OpenEP/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/LSC-UBA/OpenEP/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "LSC-UBA/OpenEP"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/LSC-UBA/OpenEP/master/Readme.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/LSC-UBA/OpenEP/master/run.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/LSC-UBA/OpenEP/master/temp-a.gif"
      },
      "source": "https://raw.githubusercontent.com/LSC-UBA/OpenEP/master/Readme.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/LSC-UBA/OpenEP/master/temp-b.gif"
      },
      "source": "https://raw.githubusercontent.com/LSC-UBA/OpenEP/master/Readme.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/LSC-UBA/OpenEP/master/varpulse-voltage-current.jpg"
      },
      "source": "https://raw.githubusercontent.com/LSC-UBA/OpenEP/master/Readme.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation instructions",
        "type": "Text_excerpt",
        "value": "To install OpenEP in GNU/Linux follow the next steps:\n\n1. Install GCC (GNU Compiler Collection), version 7.4.0+\n    - Note: to install in Ubuntu 18.04+, type in the console ```sudo apt-get update``` and then ```sudo apt-get install build-essential```\n2. Download OpenEP code from [here](https://github.com/LSC-UBA/OpenEP/archive/master.zip \"OpenEP code\"), and uncompress the zip file.\n3. Download and install Paraview following the instructions in [here](https://www.paraview.org/download/ \"Paraview\").\n\n"
      },
      "source": "https://raw.githubusercontent.com/LSC-UBA/OpenEP/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "How to setup and run your experiment",
        "type": "Text_excerpt",
        "value": "1. **OpenEP** can be adapted to your specific in-silico experiment by modifiyng the configuration file *par.h*. Different illustrative examples can be found in the cases folder.\n\n&nbsp;&nbsp;&nbsp;&nbsp; Aside from regular monopolar pulses, **OpenEP** provides the abiliy to simulate bipolar pulses protocols with variable pulse amplitude and pulse length. For this purpose, five parameters must be set:\n\n```c++\n  const double volt_to_dist[]     // V/m\n  const double on_pulse_times[]   // s\n  const double off_pulse_times[]  // s\n  const int pulse_repetitions[]\n  const int no_cycles\n```\n\n&nbsp;&nbsp;&nbsp;&nbsp; The *i*-th position in *volt_to_dist* array indicates the voltage to distance ratio (in volt per meter) for the *i*-th pulse or *set of pulses*. The *on_pulse_times* and *off_pulse_times* arrays behave in the same way: ON and OFF time duration for the *i*-th pulse or *set of pulses*, respectively. The reason behind the term *set of pulses* is explained by the *pulse_repetitions* array. This array indicates how many pulses have to be applied with the characteristics described in the *i*-th position of the parameters explained above (voltage, ON and OFF). When the last pulse is running (last position in the arrays), the variable *no_cycles* decides whether the simulation has to return to the position 0 of the arrays. If *no_cycles = 1*, the simulation will finish. Otherwise, it will start over.\n\n&nbsp;&nbsp;&nbsp;&nbsp; To clarify, some examples are sketched below:\n\n   * First example (taken from [Zorec 2013](https://www.sciencedirect.com/science/article/pii/S0378517313008557)). The simulation consists of a combination of high voltage and low voltage pulses (HV-LV). The parameters of the HV pulses are: 250000 V/m, 0.0005 sec. ON, and 0.0005 sec. OFF. The parameters of LV pulses are: 22500 V/m, 0.250 sec. ON and 0.1 sec OFF. If we want to apply 3 x HV + 3 x LV (three high-voltage pulses followed by three low-voltage pulses), we must set the five parameters in the following way:\n\n``` c++\n  const double volt_to_dist[] = {250000, 22500};  // V/m\n  const double on_pulse_times[] = {5e-4, 0.250};  // s\n  const double off_pulse_times[] = {5e-4, 0};     // s\n  const int pulse_repetitions[] = {3, 3};\n  const int no_cycles = 1;\n```\n\n&nbsp;&nbsp;&nbsp;&nbsp; On the other hand, if we want to apply (HV + LV) x 3:\n\n``` c++\n  const double volt_to_dist[] = {250000, 22500};  // V/m\n  const double on_pulse_times[] = {5e-4, 0.250};  // s\n  const double off_pulse_times[] = {5e-4, 0.1};   // s\n  const int pulse_repetitions[] = {1, 1};\n  const int no_cycles = 3;\n```\n\n   * Second example (taken from [Sano 2017](https://www.nature.com/articles/srep40747)). We want to simulate 100 burst of symmetric bipolar pulses: 2 *us* of positive pulse (300000 V/m), 1 *us* delay (OFF time) and 2 *us* of negative pulse (- 300000 V/m). The paramaters must be set as follows:\n\n```c++\n  const double volt_to_dist[] = {300000, -300000};  // V/m\n  const double on_pulse_times[] = {2e-6, 2e-6};     // s\n  const double off_pulse_times[] = {1e-6, 1e-6};    // s\n  const int pulse_repetitions[] = {1, 1};\n  const int no_cycles = 100;\n```\n\n   * Third example (taken from [Lackovic 2009](https://ieeexplore.ieee.org/abstract/document/5293947)). In-silico experiment of a monopolar protocol with constant pulse length and pulse amplitude: 8 x 0.250 sec., 25000 V/m at 1 Hz.\n\n```c++\n  const double volt_to_dist[] = {25000};      // V/m\n  const double on_pulse_times[] = {0.250};    // s\n  const double off_pulse_times[] = {0.750};   // s\n  const int pulse_repetitions[] = {8};        \n  const int no_cycles = 1;\n```\n&nbsp;&nbsp;&nbsp;&nbsp; Apart from treatment parameters, other variables regarding geometry, electrode shape and tissue characteristics can be found in the configuration file *par.h*. For instance:\n\n\n* Electrode:\n  - **electrode_length** = 0.007\n  - **electrode_width** = 0.0007\n  - **electrode_thickness** = 0.0007\n  - **gap_anode_cathode** = 0.008\n  - **electrode_type** = \"needles\"\n  - **gap_elect_elect** = 0.005\n  - **no_electrodes** = 1\n  \n* Domain dimension:\n  - **x_max** = 0.032\n  - **y_max** = 0.032\n  - **z_max** = 0.017\n  \n2. After modifying the configuration file (```src/par.h```), compilation and execution can be done effortlessly typing in the linux terminal: ```./run.sh```. The complete set of options of the bash script are described in the following section. The script will create a directory named ```simulation-1``` with three subdirectories in it: ```bin```, ```data``` and ```src```, which stores the simulation executable file, the output data (Paraview-compliant or csv output files) and the source code of this particular simulation, respectively. Next time the script is executed the simulation directory will be named with the following natural number with regard to the last simulation, i.e. ```simulation-2```.\n  \n3. In ```simulation-1/data/``` folder you will find vtk and/or csv output files (depending on the selected configuration in ```src/par.h```). Output formats were selected to be compatible with the powerful visualization tool: Paraview. You can find tutorials about Paraview use in [here](https://www.paraview.org/tutorials/ \"Paraview Tutorials\").\n  \n  "
      },
      "source": "https://raw.githubusercontent.com/LSC-UBA/OpenEP/master/Readme.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/LSC-UBA/OpenEP/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "OpenEP"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "LSC-UBA"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 104416,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 3926,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 1360,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 1015,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/LSC-UBA/OpenEP/master/Readme.md"
      },
      "technique": "file_exploration"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "How to setup and run your experiment",
        "type": "Text_excerpt",
        "value": "1. **OpenEP** can be adapted to your specific in-silico experiment by modifiyng the configuration file *par.h*. Different illustrative examples can be found in the cases folder.\n\n&nbsp;&nbsp;&nbsp;&nbsp; Aside from regular monopolar pulses, **OpenEP** provides the abiliy to simulate bipolar pulses protocols with variable pulse amplitude and pulse length. For this purpose, five parameters must be set:\n\n```c++\n  const double volt_to_dist[]     // V/m\n  const double on_pulse_times[]   // s\n  const double off_pulse_times[]  // s\n  const int pulse_repetitions[]\n  const int no_cycles\n```\n\n&nbsp;&nbsp;&nbsp;&nbsp; The *i*-th position in *volt_to_dist* array indicates the voltage to distance ratio (in volt per meter) for the *i*-th pulse or *set of pulses*. The *on_pulse_times* and *off_pulse_times* arrays behave in the same way: ON and OFF time duration for the *i*-th pulse or *set of pulses*, respectively. The reason behind the term *set of pulses* is explained by the *pulse_repetitions* array. This array indicates how many pulses have to be applied with the characteristics described in the *i*-th position of the parameters explained above (voltage, ON and OFF). When the last pulse is running (last position in the arrays), the variable *no_cycles* decides whether the simulation has to return to the position 0 of the arrays. If *no_cycles = 1*, the simulation will finish. Otherwise, it will start over.\n\n&nbsp;&nbsp;&nbsp;&nbsp; To clarify, some examples are sketched below:\n\n   * First example (taken from [Zorec 2013](https://www.sciencedirect.com/science/article/pii/S0378517313008557)). The simulation consists of a combination of high voltage and low voltage pulses (HV-LV). The parameters of the HV pulses are: 250000 V/m, 0.0005 sec. ON, and 0.0005 sec. OFF. The parameters of LV pulses are: 22500 V/m, 0.250 sec. ON and 0.1 sec OFF. If we want to apply 3 x HV + 3 x LV (three high-voltage pulses followed by three low-voltage pulses), we must set the five parameters in the following way:\n\n``` c++\n  const double volt_to_dist[] = {250000, 22500};  // V/m\n  const double on_pulse_times[] = {5e-4, 0.250};  // s\n  const double off_pulse_times[] = {5e-4, 0};     // s\n  const int pulse_repetitions[] = {3, 3};\n  const int no_cycles = 1;\n```\n\n&nbsp;&nbsp;&nbsp;&nbsp; On the other hand, if we want to apply (HV + LV) x 3:\n\n``` c++\n  const double volt_to_dist[] = {250000, 22500};  // V/m\n  const double on_pulse_times[] = {5e-4, 0.250};  // s\n  const double off_pulse_times[] = {5e-4, 0.1};   // s\n  const int pulse_repetitions[] = {1, 1};\n  const int no_cycles = 3;\n```\n\n   * Second example (taken from [Sano 2017](https://www.nature.com/articles/srep40747)). We want to simulate 100 burst of symmetric bipolar pulses: 2 *us* of positive pulse (300000 V/m), 1 *us* delay (OFF time) and 2 *us* of negative pulse (- 300000 V/m). The paramaters must be set as follows:\n\n```c++\n  const double volt_to_dist[] = {300000, -300000};  // V/m\n  const double on_pulse_times[] = {2e-6, 2e-6};     // s\n  const double off_pulse_times[] = {1e-6, 1e-6};    // s\n  const int pulse_repetitions[] = {1, 1};\n  const int no_cycles = 100;\n```\n\n   * Third example (taken from [Lackovic 2009](https://ieeexplore.ieee.org/abstract/document/5293947)). In-silico experiment of a monopolar protocol with constant pulse length and pulse amplitude: 8 x 0.250 sec., 25000 V/m at 1 Hz.\n\n```c++\n  const double volt_to_dist[] = {25000};      // V/m\n  const double on_pulse_times[] = {0.250};    // s\n  const double off_pulse_times[] = {0.750};   // s\n  const int pulse_repetitions[] = {8};        \n  const int no_cycles = 1;\n```\n&nbsp;&nbsp;&nbsp;&nbsp; Apart from treatment parameters, other variables regarding geometry, electrode shape and tissue characteristics can be found in the configuration file *par.h*. For instance:\n\n\n* Electrode:\n  - **electrode_length** = 0.007\n  - **electrode_width** = 0.0007\n  - **electrode_thickness** = 0.0007\n  - **gap_anode_cathode** = 0.008\n  - **electrode_type** = \"needles\"\n  - **gap_elect_elect** = 0.005\n  - **no_electrodes** = 1\n  \n* Domain dimension:\n  - **x_max** = 0.032\n  - **y_max** = 0.032\n  - **z_max** = 0.017\n  \n2. After modifying the configuration file (```src/par.h```), compilation and execution can be done effortlessly typing in the linux terminal: ```./run.sh```. The complete set of options of the bash script are described in the following section. The script will create a directory named ```simulation-1``` with three subdirectories in it: ```bin```, ```data``` and ```src```, which stores the simulation executable file, the output data (Paraview-compliant or csv output files) and the source code of this particular simulation, respectively. Next time the script is executed the simulation directory will be named with the following natural number with regard to the last simulation, i.e. ```simulation-2```.\n  \n3. In ```simulation-1/data/``` folder you will find vtk and/or csv output files (depending on the selected configuration in ```src/par.h```). Output formats were selected to be compatible with the powerful visualization tool: Paraview. You can find tutorials about Paraview use in [here](https://www.paraview.org/tutorials/ \"Paraview Tutorials\").\n  \n  "
      },
      "source": "https://raw.githubusercontent.com/LSC-UBA/OpenEP/master/Readme.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 09:54:19",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 10
      },
      "technique": "GitHub_API"
    }
  ]
}