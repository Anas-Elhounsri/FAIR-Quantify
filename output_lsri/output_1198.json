{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Reference Manual",
        "type": "Text_excerpt",
        "value": "For the reference manual see the WISH.pdf file\n"
      },
      "source": "https://raw.githubusercontent.com/QSG-Group/WISH/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "References",
        "type": "Text_excerpt",
        "value": "Lisette J.A. Kogelman and Haja N.Kadarmideen (2014). \nWeighted Interaction SNP Hub (WISH) network method for building genetic \nNetworks for complex diseases and traits using whole genome genotype data. \nBMC Systems Biology 8(Suppl 2):S5.  \nhttp://www.biomedcentral.com/1752-0509/8/S2/S5.\n\nVictor A. O. Carmelo, Lisette J. A. Kogelman, Majbritt Busk Madsen & Haja N. Kadarmideen(2018)\nWISH-R\u2013 a fast and efficient tool for construction of epistatic networks for complex traits and diseases\nBMC Bioinformatics volume 19, Article number: 277 \nhttps://bmcbioinformatics.biomedcentral.com/articles/10.1186/s12859-018-2291-2\n"
      },
      "source": "https://raw.githubusercontent.com/QSG-Group/WISH/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/QSG-Group/WISH"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contact",
        "type": "Text_excerpt",
        "value": "Haja Kadarmideen, hajak@dtu.dk\nVictor A. O Carmelo, vaocar@dtu.dk\nQuantitative genomics, bioinformatics and computational biology group\nDepartment of Applied Mathematics and Computer Science\nTechnical University of Denmark\n"
      },
      "source": "https://raw.githubusercontent.com/QSG-Group/WISH/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2016-12-14T13:34:48Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-09-18T05:24:51Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/QSG-Group/WISH/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/QSG-Group/WISH/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "QSG-Group/WISH"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "WISH"
      },
      "source": "https://raw.githubusercontent.com/QSG-Group/WISH/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "First install WGCNA and dependencies:\n\n```\n### Installing WGCNA first\ninstall.packages(c(\"matrixStats\", \"Hmisc\", \"splines\", \"foreach\", \"doParallel\", \"fastcluster\", \"dynamicTreeCut\", \"survival\"))\nsource(\"http://bioconductor.org/biocLite.R\")\nbiocLite()\nbiocLite(c(\"GO.db\", \"preprocessCore\", \"impute\"))\ninstall.packages(\"WGCNA\")\n```\n\nThen use simple installation using source:\n\n```\nsource(\"https://install-github.me/QSG-Group/WISH\")\n```\n\n\nYou can also install using devtools install_github():\n\n```\n### Instaling devtools\ninstall.packages(c(\"devtools\",\"curl\", \"httr\"))\n### Install WISH\nlibrary(\"devtools\")\ninstall_github(\"QSG-Group/WISH\")\n```\n\nFinally if none of that works install dependencies manually:\n\n```\n### Instaling devtools\ninstall.packages(c(\"devtools\",\"curl\", \"httr\"))\n\n### Install Rest of Dependencies\ninstall.packages(c(\"doParallel\", \"foreach\",\"fastcluster\", \"Rcpp\", \"RcppEigen\", \"data.table\", \"corrplot\", \"heatmap3\", \"flashClust\", \"bigmemory\", \"parallel\", \"ggplot2\"))\n\n### Install WISH\nsource(\"https://install-github.me/QSG-Group/WISH\")\n# or\nlibrary(\"devtools\")\ninstall_github(\"QSG-Group/WISH\")\n\n```\n"
      },
      "source": "https://raw.githubusercontent.com/QSG-Group/WISH/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Reference Manual",
        "type": "Text_excerpt",
        "value": "For the reference manual see the WISH.pdf file\n"
      },
      "source": "https://raw.githubusercontent.com/QSG-Group/WISH/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.8029030028142292,
      "result": {
        "original_header": "Test files",
        "type": "Text_excerpt",
        "value": "The files test.ped, test.tped and test_pheno.txt show how you have to structure your input files\nand allow you to test the comands.\n \n"
      },
      "source": "https://raw.githubusercontent.com/QSG-Group/WISH/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8036734105871106,
      "result": {
        "original_header": "Test files",
        "type": "Text_excerpt",
        "value": "The files test.ped, test.tped and test_pheno.txt show how you have to structure your input files\nand allow you to test the comands.\n \n"
      },
      "source": "https://raw.githubusercontent.com/QSG-Group/WISH/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/QSG-Group/WISH/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "WISH"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "QSG-Group"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 120967,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/QSG-Group/WISH/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "description",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 03:58:17",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick Start",
        "type": "Text_excerpt",
        "value": "For using WISH you need to have your genotype data in the plink format.\nSee here for information on the plink data format:\n\nhttp://pngu.mgh.harvard.edu/~purcell/plink/data.shtml#ped\n\nOnce you have a ped file you must make sure that is is 0,1,2 coded.\nThis can be done using the plink recode function:\n\nplink --file \\<input ped file\\> --recode12\n\nFurther you need a transposed ped file. This is create with the following\ncommand:\n\nplink --file \\<input 0,1,2 coded ped file\\> --recode --transpose\n\nThe next step is to generat a genotype matrix in R using thegenerat.genotype() function. \nThis will transform the alleles into single genotypes. Note that at this stage \nyou should give a list of selected SNPs IDs or associated p-values for filtering\nif you have not previously filtered your data (see the generate.genotype() documentation for\ndetails on filtering. We would recomend to somewhat maximise the number of interactions calculated, \nwith 10.000-20.000 SNPs being fairly easy with to run with ~10-15 cores, and more is possible\nwith strong computing facilities.\n\n***Data Pre-filtering***\n\nWe recommend prefiltering your data using a main effect filter. For example you can run a simple GWAS using plink:\n\nplink --file \\<ped file basename\\> --linear --o \\<output basename\\>\n\nThe computed p-values can be used in later steps as filter. \n\n***Loading data into R***\n\nThe functions in the WISH R package accept both filepaths or data frames as input. To load the data easily into R\nuse following commands:\n```\nlibrary(data.table)\nped <- fread(<filepath to pedfile>, data.table = F)\ntped <- fread(<filepath to tpedfile>, data.table = F)\n```\nIf memory load is a problem it is recommended to use the file paths, as the working enviroment\nis duplicated when using multiple threads.\nThere is no strict guideline for the p-value threshold, but \ngiven fairly standard server computing facilites using a p-value that filters down to 10.000-20.000 variants is reasonable.\n\n```\ngenotype <-generate.genotype(<input ped>,<input tped>,gwas.id=<selected list of id>,gwas.p=<p-values of input SNPs>)\n```\n\n***warning*** If you have more than about 1 million SNPs you must either fast.read = F which will slow down the loading time significantly.  You can also increase your stacklimit using ulimit in the command line,but do this only if you know what you are doing. \n\n\n***LD-Filtetring***\n\nThere is the option of applying LD filtering using the LD_blocks function after generating the genotype matrix.\nNote that this requires that the input data is sorted by chromosome and coordinate to work properly. Read the \nmanual discription of the function for more detail.\n```\nLD_genotype<-LD_blocks(genotype)\ngenotype <- LD_genotype$genotype\n```\n\n***Epistatic Analysis***\n\nAfter generating the genotypes file it is recomended to run a test run to estimate run time\nof the epistatic interaction calculation based on available computing setup:\n```\nepistatic.correlation(<phenotype dataframe>, genotype,threads = <number of cores available> ,test=T)\n```\n\nThis will give you an order of magnitude of the expected run time given your input, but not exact time. The next step is to run the analysis:\nWe recommend using simple=F for better results:\n```\ncorrelations<-epistatic.correlation(<phenotype dataframe>, genotype,threads = <number of cores available> ,test=F,simple=F)\n```\nOnce you have calculated epistatic correlations you can get a coarse grained overview of the results using\nthe genome.interaction() function:\n```\ngenome.interaction(<input tped file>, correlations)\n```\n\nFinally to create modules of interacting markers use the generate.modules function:\n```\nmodules <-generate.modules(correlations)\n```\n\nThe modules object includes a large range of outputs from the network analysis. \n\n***warning*** If you have epistatic correlation coefficients values that are strong outliers this can heavily affect\nthis step or even make it fail. Thus it is recommended to set those coefficients to 0, for example if we only want \ncoefficients between 1000 and -1000:\n```\ncorrelations$Coefficients[correlations$Coefficients > 1000 |  correlations$Coefficients < -1000] <-0\n```\nThe range of desired values is individual depending on the properties of each dataset.\nIt is also a good idea to set NA values to 0, as sometimes the linear models are not computable.\n```\ncorrelations$Coefficients[(is.na(correlations$Coefficients))]<-0\ncorrelations$Pvalues[(is.na(correlations$Pvalues))]<-1\n```\nTo do trait module correlation fist extract eigen values:\n```\nME<-moduleEigengenes(genotype, colors= modules$modulecolors,softPower = modules$power.estimate)\n```\nThen we can calculate the module trait correlations:\n```\ncor(<pheotype>,ME$eigengenes)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/QSG-Group/WISH/master/README.md",
      "technique": "header_analysis"
    }
  ]
}