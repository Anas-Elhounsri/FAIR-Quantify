{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Roth-Lab/pyclone-vi"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-12-28T00:09:12Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-07-02T17:50:43Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Fast method for inferring cancer clonal population structure from SNV data."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9748583037245456,
      "result": {
        "original_header": "Overview",
        "type": "Text_excerpt",
        "value": "PyClone-VI is a fast method for inferring clonal population structure. \n"
      },
      "source": "https://raw.githubusercontent.com/Roth-Lab/pyclone-vi/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Roth-Lab/pyclone-vi/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 10
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Roth-Lab/pyclone-vi/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Roth-Lab/pyclone-vi"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Overview"
      },
      "source": "https://raw.githubusercontent.com/Roth-Lab/pyclone-vi/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "Overview"
        ],
        "type": "Text_excerpt",
        "value": "PyClone-Vi is currently in development so the following proceedure has a few steps.\n\n1. Ensure you have a working `conda` installation.\nYou can do this by installing [Miniconda](https://conda.io/miniconda.html)\n\n2. Install the required dependencies using conda.\nWe will create a new `conda` environment with the dependencies.\nFrom inside the checked out PyClone-VI repository folder run the following.\n```\nconda create -c conda-forge -n pyclone-vi --file requirements.txt --yes\n```\n\n3. Activate the `conda` environment.\n```\nsource activate pyclone-vi\n```\n> Note: You will have to do this whenever you open a new terminal and want to run PyClone-VI.\n\n4. Install PyClone-VI\n```\npip install git+https://github.com/Roth-Lab/pyclone-vi.git\n```\n\n5. If everything worked PyClone-VI should be available on the command line.\n```\npyclone-vi --help\n```\n"
      },
      "source": "https://raw.githubusercontent.com/Roth-Lab/pyclone-vi/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9999999996070414,
      "result": {
        "original_header": "Troubleshooting",
        "type": "Text_excerpt",
        "value": "If step 4 fails, try installing from the setup.py from within the pyclone-vi folder\n```\npython setup.py install\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/Roth-Lab/pyclone-vi/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Roth-Lab/pyclone-vi/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "GNU General Public License v3.0",
        "spdx_id": "GPL-3.0",
        "type": "License",
        "url": "https://api.github.com/licenses/gpl-3.0",
        "value": "https://api.github.com/licenses/gpl-3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "type": "Text_excerpt",
        "value": "PyClone-VI is licensed under the GPL v3, see the LICENSE.txt file for details.\n"
      },
      "source": "https://raw.githubusercontent.com/Roth-Lab/pyclone-vi/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "pyclone-vi"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "Roth-Lab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 24197,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Roth-Lab/pyclone-vi/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "aroth85",
          "type": "User"
        },
        "date_created": "2020-12-12T18:34:01Z",
        "date_published": "2021-01-22T21:40:17Z",
        "description": "- Numba deprecation of jitclass fixed",
        "html_url": "https://github.com/Roth-Lab/pyclone-vi/releases/tag/0.1.1",
        "release_id": 36791091,
        "tag": "0.1.1",
        "tarball_url": "https://api.github.com/repos/Roth-Lab/pyclone-vi/tarball/0.1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/Roth-Lab/pyclone-vi/releases/36791091",
        "value": "https://api.github.com/repos/Roth-Lab/pyclone-vi/releases/36791091",
        "zipball_url": "https://api.github.com/repos/Roth-Lab/pyclone-vi/zipball/0.1.1"
      },
      "technique": "GitHub_API"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running PyClone-VI",
        "parent_header": [
          "Overview",
          "Quick start"
        ],
        "type": "Text_excerpt",
        "value": "PyClone-VI has two sub-commands `fit` and `write-results-file`.\nTypical usage is to run `fit` to perform inference and then `write-results-file` to select the best fit and post-process the results.\n"
      },
      "source": "https://raw.githubusercontent.com/Roth-Lab/pyclone-vi/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "`fit` command",
        "parent_header": [
          "Overview",
          "Quick start",
          "Running PyClone-VI"
        ],
        "type": "Text_excerpt",
        "value": "The `fit` command is used for performing the inference step.\nIt supports performing multiple restarts, the best of which will be selected by the `write-results-file` command.\n\nThere are a few mandatory arguments:\n\n* `-i, --in-file` - Path where the input file is located.\nThis file should be in the format specified above.\n\n* `-o, --out-file` - Path where the output file will be written.\nThe output file is in HDF5 file format.\nMost users will execute the `write-results-file` to extract the final results from this file.\n\nThere are several optional arguments:\n\n* `-c, --num-clusters` - The number of clusters to use while fitting.\nThis should be set to a value larger than the expected number of clusters.\nThe software will then automatically determine how many to use.\nUsually a value of 10-40 will work.\nIn general this value should increase if as more samples are used.\n\n* `-d, --density` - The probability density used to model the read count data.\nChoices are `beta-binomial` and `binomial`.\n`binomial` is a common choice for sequencing data.\n`beta-binomial` is useful when the data is over-dispersed which has been observed frequently in sequencing data.\n\n* `-g, --num-grid-points` - Number of grid points used for approximating the posterior distribution.\nHigher values should be used for deeply sequenced data.\nThe default value of 100 will likely work for most users.\n\n* `-r, --num-restarts` - Number of random restarts of variational inference.\nMore restarts will have a higher probability of finding the optimal variational approximation.\nThis also increases running time.\nUsually a value of 10-100 will work.\n\nAdditional arguments can be viewed by running `pyclone-vi fit --help`\n"
      },
      "source": "https://raw.githubusercontent.com/Roth-Lab/pyclone-vi/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "`write-results-file` command",
        "parent_header": [
          "Overview",
          "Quick start",
          "Running PyClone-VI"
        ],
        "type": "Text_excerpt",
        "value": "The `write-results-file` will select the best solution found by the `fit` command and post-process the results.\nThe output format is tab delimited file which an be imported and manipulated using tools such as R and Python.\n\nThe are two mandatory arguments:\n\n* `-i, --in-file` - Path to the output file generated by the `fit` command.\n\n* `-o, --out-file` - Path where the final results will be written in tab delimited format.\n\nThere is one optional argument:\n\n* `-c, --compress` - If set the output will be compressed using gzip.\nThis is useful where a large number mutations are input to reduce the size of the results file.\n\n"
      },
      "source": "https://raw.githubusercontent.com/Roth-Lab/pyclone-vi/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 15:36:37",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 49
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick start",
        "parent_header": [
          "Overview"
        ],
        "type": "Text_excerpt",
        "value": "1. Activate the `conda` environment\n```\nsource activate pyclone-vi\n```\n\n2. Fit the model to the data here we use the TRACERx file provided in the `examples` folder.\nThis assumes you are running in the base directory of the git repo.\nHere we run allowing for up to 40 clusters (clones), using the Beta-Binomial distribution and performing 10 random restarts.\nThis should take a under five minutes.\n```\npyclone-vi fit -i examples/tracerx.tsv -o tracerx.h5 -c 40 -d beta-binomial -r 10\n```\n\n3. Next we output the final results from the best random restart.\n```\npyclone-vi write-results-file -i tracerx.h5 -o tracerx.tsv\n```\n"
      },
      "source": "https://raw.githubusercontent.com/Roth-Lab/pyclone-vi/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Input format",
        "parent_header": [
          "Overview",
          "Quick start"
        ],
        "type": "Text_excerpt",
        "value": "To run a PyClone-VI analysis you will need to prepare an input file.\nThe file should be in tab delimited format and have the following columns.\n> Note: There is an example file in examples/data/tracerx.tsv\n\n1. mutation_id - Unique identifier for the mutation.\nThis is free form but should match across all samples.\n> Note: PyClone-VI will remove any mutations without entries for all detected samples.\nIf you have mutations with no data in some samples set their ref/alt counts to 0 for the corresponding sample.\n\n2. sample_id - Unique identifier for the sample.\n\n3. ref_counts - Number of reads matching the reference allele.\n\n4. alt_counts - Number of reads matching the alternate allele.\n\n5. major_cn - Major copy number of segment overlapping mutation.\n\n6. minor_cn - Minor copy number of segment overlapping mutation.\n\n7. normal_cn - Total copy number of segment in healthy tissue.\nFor autosome this will be two and male sex chromosomes one.\n\nYou can include the following optional columns.\n\n1. tumour_content - The tumour content (cellularity) of the sample.\nDefault value is 1.0 if column is not present.\n> Note: In principle this could be different for each mutations/sample.\nHowever it most cases it should be the same for all mutations in a sample.\n\n2. error_rate - Sequencing error rate.\nDefault value is 0.001 if column is not present.\n> Note: Most users will not need to change this value.\n"
      },
      "source": "https://raw.githubusercontent.com/Roth-Lab/pyclone-vi/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Output format",
        "parent_header": [
          "Overview",
          "Quick start"
        ],
        "type": "Text_excerpt",
        "value": "The results file output by `write-results-file` is in tab delimited format.\nThere six columns:\n\n1. mutation_id - Mutation identifier as used in the input file.\n\n2. sample_id - Unique identifier for the sample as used in the input file.\n\n3. cluster_id - Most probable cluster or clone the mutation was assigned to.\n\n4. cellular_prevalence - Proportion of malignant cells with the mutation in the sample.\nThis is also called cancer cell fraction (CCF) in the literature.\n\n5. cellular_prevalence_std - Standard error of the cellular_prevalence estimate.\n\n6. cluster_assignment_prob - Posterior probability the mutation is assigned to the cluster.\nThis can be used as a confidence score to remove mutations with low probability of belonging to a cluster.\n\n"
      },
      "source": "https://raw.githubusercontent.com/Roth-Lab/pyclone-vi/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "`fit` command",
        "parent_header": [
          "Overview",
          "Quick start",
          "Running PyClone-VI"
        ],
        "type": "Text_excerpt",
        "value": "The `fit` command is used for performing the inference step.\nIt supports performing multiple restarts, the best of which will be selected by the `write-results-file` command.\n\nThere are a few mandatory arguments:\n\n* `-i, --in-file` - Path where the input file is located.\nThis file should be in the format specified above.\n\n* `-o, --out-file` - Path where the output file will be written.\nThe output file is in HDF5 file format.\nMost users will execute the `write-results-file` to extract the final results from this file.\n\nThere are several optional arguments:\n\n* `-c, --num-clusters` - The number of clusters to use while fitting.\nThis should be set to a value larger than the expected number of clusters.\nThe software will then automatically determine how many to use.\nUsually a value of 10-40 will work.\nIn general this value should increase if as more samples are used.\n\n* `-d, --density` - The probability density used to model the read count data.\nChoices are `beta-binomial` and `binomial`.\n`binomial` is a common choice for sequencing data.\n`beta-binomial` is useful when the data is over-dispersed which has been observed frequently in sequencing data.\n\n* `-g, --num-grid-points` - Number of grid points used for approximating the posterior distribution.\nHigher values should be used for deeply sequenced data.\nThe default value of 100 will likely work for most users.\n\n* `-r, --num-restarts` - Number of random restarts of variational inference.\nMore restarts will have a higher probability of finding the optimal variational approximation.\nThis also increases running time.\nUsually a value of 10-100 will work.\n\nAdditional arguments can be viewed by running `pyclone-vi fit --help`\n"
      },
      "source": "https://raw.githubusercontent.com/Roth-Lab/pyclone-vi/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "`write-results-file` command",
        "parent_header": [
          "Overview",
          "Quick start",
          "Running PyClone-VI"
        ],
        "type": "Text_excerpt",
        "value": "The `write-results-file` will select the best solution found by the `fit` command and post-process the results.\nThe output format is tab delimited file which an be imported and manipulated using tools such as R and Python.\n\nThe are two mandatory arguments:\n\n* `-i, --in-file` - Path to the output file generated by the `fit` command.\n\n* `-o, --out-file` - Path where the final results will be written in tab delimited format.\n\nThere is one optional argument:\n\n* `-c, --compress` - If set the output will be compressed using gzip.\nThis is useful where a large number mutations are input to reduce the size of the results file.\n\n"
      },
      "source": "https://raw.githubusercontent.com/Roth-Lab/pyclone-vi/master/README.md",
      "technique": "header_analysis"
    }
  ]
}