{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "How to cite CNApy",
        "parent_header": [
          "CNApy: An integrated environment for metabolic modeling"
        ],
        "type": "Text_excerpt",
        "value": "If you use CNApy in your scientific work, please consider to cite CNApy's publication:\n\nThiele et al. (2022). CNApy: a CellNetAnalyzer GUI in Python for analyzing and designing metabolic networks.\n*Bioinformatics* 38, 1467-1469, [doi.org/10.1093/bioinformatics/btab828](https://doi.org/10.1093/bioinformatics/btab828).\n"
      },
      "source": "https://raw.githubusercontent.com/cnapy-org/CNApy/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/cnapy-org/CNApy"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Contributing\n\nThank you for considering contributing to CNApy! This file contains instructions that will help you to make a contribution.\n\n## How to make a contribution\n\n* (optional) Open an [issue](https://github.com/cnapy-org/CNApy/issues/new) describing what you want to do.\n* Fork the [cnapy-org/cnapy](https://github.com/cnapy-org/CNApy/) repo and create a branch for your changes.\n* Submit a pull request to master with your changes.\n* Respond to feedback on your pull request.\n* If everything is fine your pull request is merged.\n\n## License\n\nAny contribution intentionally submitted for inclusion in the work by you, shall be licensed under the terms of the [Apache 2.0 license](https://github.com/cnapy-org/CNApy/blob/master/LICENSE) without any additional terms or conditions.\n"
      },
      "source": "https://raw.githubusercontent.com/cnapy-org/CNApy/master/CONTRIBUTING.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Contribute to the CNApy development",
        "parent_header": [
          "CNApy: An integrated environment for metabolic modeling"
        ],
        "type": "Text_excerpt",
        "value": "Everyone is welcome to contribute to CNApy's development. [See our contribution file for more detailed instructions](https://github.com/cnapy-org/CNApy/blob/master/CONTRIBUTING.md).\n"
      },
      "source": "https://raw.githubusercontent.com/cnapy-org/CNApy/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-11-15T14:45:40Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-25T10:44:28Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "An integrated visual environment for metabolic modeling with common methods such as FBA, FVA and Elementary Flux Modes, and advanced features such as thermodynamic methods, extended Minimal Cut Sets, OptKnock, RobustKnock, OptCouple and more!"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "parent_header": [
          "CNApy: An integrated environment for metabolic modeling"
        ],
        "type": "Text_excerpt",
        "value": "**If you have questions, suggestions or bug reports regarding CNApy, you can use either of the [CNApy GitHub issues](https://github.com/cnapy-org/CNApy/issues), the [CNApy GitHub discussions](https://github.com/cnapy-org/CNApy/discussions) or the [CNApy Gitter chat room](https://gitter.im/cnapy-org/community).**\n\nCNApy is a Python-based graphical user interface for a) many common methods of Constraint-Based Reconstruction and Analysis (COBRA) with stoichiometric metabolic models, b) the visualization of COBRA calculation results and c) the creation and editing of metabolic models.\n\nSupported COBRA methods (partly provided by [cobrapy](https://opencobra.github.io/cobrapy/)) include:\n\n- Flux Balance Analysis (FBA)\n- Flux Variability Analysis (FVA)\n- Making measured flux scenarios stoichiometrically feasible\n- Elementary Flux Modes (EFM)\n- Thermodynamic methods based on [OptMDFpathway](https://doi.org/10.1371/journal.pcbi.1006492)\n- Many advanced strain design algorithms such as [OptKnock](https://doi.org/10.1002/bit.10803), [RobustKnock](https://doi.org/10.1093/bioinformatics/btp704), [OptCouple](https://doi.org/10.1016/j.mec.2019.e00087) and [advanced Minimal Cut Sets](https://doi.org/10.1371/journal.pcbi.1008110) through its integration of the [StrainDesign](https://github.com/klamt-lab/straindesign) package\n- Yield optimization (based on linear-fractional programming)\n- Phase plane analysis\n\nAll calculation results can be visualized in CNApy's interactive and editable metabolic maps. These maps can also use vector-based (SVG) backgrounds. [Escher maps](https://escher.github.io/#/) are also natively supported and can be created and edited inside CNApy.\n\nAside of performing calculations on metabolic models, CNApy can also be used to create and/or edit metabolic models. This includes all important aspects of the model's reactions, metabolites and genes. For model loading and export, CNApy supports the widely used [SBML standard format](https://sbml.org/).\n\n**For more details on CNApy's many more features, see section [Documentation and Tutorials](#documentation-and-tutorials).**\n\n**For information about how to install CNApy, see section [Installation Options](#installation-options).**\n\n**For information about how to contribute to CNApy as a developer, see section [Contribute to the CNApy development](#contribute-to-the-cnapy-development).**\n\n**If you want to cite CNApy, see section [How to cite CNApy](#how-to-cite-cnapy).**\n\n*Associated project note*: If you want to use the well-known MATLAB-based *CellNetAnalyzer* (CNA), *which is not compatible with CNApy*, you can download it from [CNA's website](https://www2.mpi-magdeburg.mpg.de/projects/cna/cna.html).\n"
      },
      "source": "https://raw.githubusercontent.com/cnapy-org/CNApy/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.8310976107974419,
      "result": {
        "original_header": "Using the Windows installer",
        "type": "Text_excerpt",
        "value": "1. Download the zipped CNApy Windows installer [from here](https://github.com/cnapy-org/CNApy/releases/download/v1.2.1/cnapy-windows-installer.zip).\n2. Unzip the file into your desired location. You can do this by right-clicking on the file and selecting the option to extract the files.\n3. In the location where you unzipped the file, click on \"INSTALL_CNAPY.bat\"; This installation procedure only works with an active internet conncection. As soon as the installation is finished, the appearing window closes and you can start CNApy either by double-clicking on the newly created CNApy shortcut on your desktop (which also shows CNApy's logo) or the newly created RUN_CNAPY.bat in the folder where INSTALL_CNAPY.bat lies. If CNApy is not starting, this might have been caused by an internet connection problem; Running \"INSTALL_CNAPY.bat\" again might solve the problem. To uninstall CNApy, double-click on the UNINSTALL_CNAPY.bat in the same folder.\n \n"
      },
      "source": "https://raw.githubusercontent.com/cnapy-org/CNApy/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/cnapy-org/CNApy/tree/master/docs"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Documentation and Tutorials",
        "parent_header": [
          "CNApy: An integrated environment for metabolic modeling"
        ],
        "type": "Text_excerpt",
        "value": "- The [CNApy guide](https://cnapy-org.github.io/CNApy-guide/) contains information for all major functions of CNApy.\n- Our [CNApy YouTube channel](https://www.youtube.com/channel/UCRIXSdzs5WnBE3_uukuNMlg) provides some videos of working with CNApy.\n- We also provide directly usable [CNApy example projects](https://github.com/cnapy-org/CNApy-projects/releases/latest) which include some of the most common *E. coli* models. These projects can also be downloaded within CNApy at its first start-up or via CNApy's File menu.\n"
      },
      "source": "https://raw.githubusercontent.com/cnapy-org/CNApy/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/cnapy-org/CNApy/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 7
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/cnapy-org/CNApy/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "cnapy-org/CNApy"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CNApy: An integrated environment for metabolic modeling"
      },
      "source": "https://raw.githubusercontent.com/cnapy-org/CNApy/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/cnapy-org/CNApy/master/constructor/linux/post_install.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://flat.badgen.net/github/release/cnapy-org/cnapy/stable"
      },
      "source": "https://raw.githubusercontent.com/cnapy-org/CNApy/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://flat.badgen.net/github/last-commit/cnapy-org/cnapy"
      },
      "source": "https://raw.githubusercontent.com/cnapy-org/CNApy/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://flat.badgen.net/github/open-issues/cnapy-org/cnapy"
      },
      "source": "https://raw.githubusercontent.com/cnapy-org/CNApy/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://flat.badgen.net/gitter/members/cnapy-org/community"
      },
      "source": "https://raw.githubusercontent.com/cnapy-org/CNApy/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/cnapy-org/CNApy/master/screenshot.png"
      },
      "source": "https://raw.githubusercontent.com/cnapy-org/CNApy/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation Options",
        "parent_header": [
          "CNApy: An integrated environment for metabolic modeling"
        ],
        "type": "Text_excerpt",
        "value": "There are 4 alternative ways to install CNApy:\n\n1. If you use Windows, the easiest way is to use our Windows installer, see section [Using the Windows installer](#using-the-windows-installer).\n2. If you have Python 3.10 on your computer you can directly install CNApy from PyPI with: ```pip install cnapy```.\n3. If you have installed [Anaconda](https://www.anaconda.com/), [Miniconda](https://docs.anaconda.com/free/miniconda/index.html) or [Miniforge](https://github.com/conda-forge/miniforge) on your computer, you can directly install CNApy as a conda package as described in section [Install CNApy as conda package](#install-cnapy-as-conda-package). *Note*: If you're on MacOS and want to use CPLEX as solver, you have to use the x86 version of Anaconda as the Apple Silicon one is not supported by CPLEX yet.\n4. If you use Linux or Apple MacOS X, the easiest installation producure is our assisted installation protocol, see [Assisted installation under Linux and MacOS X](#assisted-installation-under-linux-and-macos-x).\n5. If you want to develop CNApy, follow the instruction for the cloning and setup of the CNApy repository using git and conda or mamba in section [Setup the CNApy development environment](#setup-the-cnapy-development-environment).\n"
      },
      "source": "https://raw.githubusercontent.com/cnapy-org/CNApy/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Assisted installation under Linux and MacOS X",
        "parent_header": [
          "CNApy: An integrated environment for metabolic modeling"
        ],
        "type": "Text_excerpt",
        "value": "Click on the operating system you use:\n\n- [Linux](#assisted-linux-installation)\n- [Apple MacOS X](#assisted-macos-x-installation)\n"
      },
      "source": "https://raw.githubusercontent.com/cnapy-org/CNApy/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Assisted Linux installation",
        "parent_header": [
          "CNApy: An integrated environment for metabolic modeling",
          "Assisted installation under Linux and MacOS X"
        ],
        "type": "Text_excerpt",
        "value": "1. Download Miniforge [from here](https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-x86_64.sh).\n2. Install Miniforge by double-clicking the downloaded file. If the script does not run, right-click on the file, open its settings and select the option to make it executable (alternative: run 'chmod u+x ./Miniconda3-latest-Linux-x86_64.sh' in your terminal). Follow the appearing installation instructions and remember in which folder you install Miniconda. *Note*: If you already have installed Anaconda on your computer before (for which we also directly provide a conda CNApy package, [see here](#install-cnapy-as-conda-package)), deactivate all installation options which put Miniconda to your console or system PATH to avoid possible problems.\n3. Using your file manager, go to the folder where you installed Miniforge. Then, open the appearing sub-folder \"condabin\".\n4. Download the CNApy installation assistant script [from here](https://github.com/cnapy-org/CNApy/releases/download/v1.2.1/cnapy-assistant-script.sh) into the mentioned \"condabin\" folder.\n5. In the file manager, double-click on the newly downloaded installation assistant script which is called \"cnapy-assistant-script.sh\". If the script does not run, right-click on the file, open its settings and select the option to make it executable or, alternatively, run 'chmod u+x ./cnapy-assistant-script.sh' in your terminal in the mentioned \"condabin\" folder. Wait until CNApy is downloaded and installed.\n6. You can now run CNApy by executing the following two terminal instructions in the mentioned \"condabin\" folder:\n\n```sh\n./conda activate cnapy-1.2.1\ncnapy\n```\n\nIf you installed Miniforge system-wide, it's also possible to run these commands in any other terminal folder.\n"
      },
      "source": "https://raw.githubusercontent.com/cnapy-org/CNApy/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Assisted MacOS X installation",
        "parent_header": [
          "CNApy: An integrated environment for metabolic modeling",
          "Assisted installation under Linux and MacOS X"
        ],
        "type": "Text_excerpt",
        "value": "*Note*: Currently, if you want to use the CPLEX solver within CNApy, you have to install the Intel processor version of Miniconda regardless of your Mac's processor. This is caused by the lack of a CPLEX ARM Python package ([see also this issue for more details](https://github.com/cnapy-org/CNApy/issues/491)).\n\n1. If you have a (new) Mac with an ARM processor, such as the M1, M2 or M3, download Miniconda [from here](https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-arm64.pkg). If you have an (older) Mac with an Intel processor, download Miniconda [from here](https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.pkg). If you are unsure which processor your Mac has, click on the Apple menu in the upper-left of your screen and choose \"About This Mac\".\n2. Install Miniconda by double-clicking the downloaded file. Follow the appearing installation instructions and remember in which folder you install Miniconda. *Note*: If you already use Anaconda on your computer (for which we directly provide a conda CNApy package, [see here](#install-cnapy-as-conda-package)), deactivate all installation options which put Miniconda to your console or system PATH to avoid possible problems\n3. Using Finder, go to the folder where you installed Miniconda. Then, open the appearing sub-folder \"condabin\".\n4. Download the CNApy installation assistant script [from here](https://github.com/cnapy-org/CNApy/releases/download/v1.2.1/cnapy-assistant-script.sh) into the mentioned \"condabin\" folder.\n5. In the file manager, double-click on the newly downloaded installation assistant script which is called \"cnapy-installation-script.sh\". If the script does not run, right-click on the file, open its settings and select the option to make it executable (alternative: run 'chmod u+x ./cnapy-assistant-script.sh' in your terminal). Wait until CNApy is downloaded and installed.\n6. Open the terminal in the mentioned \"condabin\" folder. You can now run CNApy by executing the following two terminal instructions:\n\n```sh\n./conda activate cnapy-1.2.1\ncnapy\n```\n"
      },
      "source": "https://raw.githubusercontent.com/cnapy-org/CNApy/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Install CNApy as conda package",
        "parent_header": [
          "CNApy: An integrated environment for metabolic modeling"
        ],
        "type": "Text_excerpt",
        "value": "*Note for Mac users (does not affect Windows or Linux users)*: Currently, if you want to use the CPLEX solver within CNApy, you have to install the Intel processor version of Anaconda/Miniconda/Miniforge regardless of your Mac's processor. This is caused by the lack of a CPLEX ARM Python package ([see also this issue for more details](https://github.com/cnapy-org/CNApy/issues/491)).\n\n*Note for all users*: If you've installed mamba on your system (e.g., with [Miniforge](https://github.com/conda-forge/miniforge)), it is the recommended way to install CNApy as it is much faster than conda. To use mamba, just replace the \"conda\" command in the following steps with \"mamba\".\n\n1. Create a conda environment with all dependencies\n\n    ```sh\n    conda create -n cnapy-1.2.1 -c Gurobi -c IBMDecisionOptimization -c conda-forge -c cnapy cnapy=1.2.1 --yes\n    ```\n\n2. Activate the cnapy conda environment\n\n    ```sh\n    conda activate cnapy-1.2.1\n    ```\n\n3. Run CNApy within you activated conda environment\n\n    ```sh\n    cnapy\n    ```\n\nFurthermore, you can also perform the following optional steps:\n\n4. (optional and only possible if you have already installed CNApy by using conda) If you already have a cnapy environment, e.g., cnapy-1.X.X, you can delete it with the command\n\n    ```sh\n    # Here, the Xs stand for the last CNApy version you've installed by using conda\n    conda env remove -n cnapy-1.X.X\n    ```\n\n5. (optional, but recommended if you also use other Python distributions or Anaconda environments) In order to solve potential package version problems, set a systems variable called \"PYTHONNOUSERSITE\" to the value \"True\".\n\n   Under Linux systems, you can do this with the following command:\n\n   ```sh\n   export PYTHONNOUSERSITE=True\n   ```\n\n   Under Windows systems, you can do this by searching for your system's \"environmental variables\" and adding\n   the variable PYTHONNOUSERSITE with the value True using Window's environmental variables setting window.\n"
      },
      "source": "https://raw.githubusercontent.com/cnapy-org/CNApy/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Setup the CNApy development environment",
        "parent_header": [
          "CNApy: An integrated environment for metabolic modeling"
        ],
        "type": "Text_excerpt",
        "value": "We use conda as package manager to install all dependencies. You can use [miniconda](https://docs.conda.io/en/latest/miniconda.html).\nIf you have conda installed you can:\n\n1. Create a conda development environment with all dependencies\n\n    ```sh\n    conda env create -n cnapy-dev -f environment.yml\n    ```\n\n2. Activate the development environment\n\n    ```sh\n    conda activate cnapy-dev\n    ```\n\n3. Checkout the latest cnapy development version using git\n\n    ```sh\n    git clone https://github.com/cnapy-org/CNApy.git\n    ```\n\n4. Change into the source directory and run CNApy\n\n    ```sh\n    cd CNApy\n    python cnapy.py\n    ```\n\nAny contribution intentionally submitted for inclusion in the work by you, shall be licensed under the terms of the Apache 2.0 license without any additional terms or conditions.\n"
      },
      "source": "https://raw.githubusercontent.com/cnapy-org/CNApy/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9999999911146915,
      "result": {
        "original_header": "Using the Windows installer",
        "type": "Text_excerpt",
        "value": "1. Download the zipped CNApy Windows installer [from here](https://github.com/cnapy-org/CNApy/releases/download/v1.2.1/cnapy-windows-installer.zip).\n2. Unzip the file into your desired location. You can do this by right-clicking on the file and selecting the option to extract the files.\n3. In the location where you unzipped the file, click on \"INSTALL_CNAPY.bat\"; This installation procedure only works with an active internet conncection. As soon as the installation is finished, the appearing window closes and you can start CNApy either by double-clicking on the newly created CNApy shortcut on your desktop (which also shows CNApy's logo) or the newly created RUN_CNAPY.bat in the folder where INSTALL_CNAPY.bat lies. If CNApy is not starting, this might have been caused by an internet connection problem; Running \"INSTALL_CNAPY.bat\" again might solve the problem. To uninstall CNApy, double-click on the UNINSTALL_CNAPY.bat in the same folder.\n \n"
      },
      "source": "https://raw.githubusercontent.com/cnapy-org/CNApy/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/cnapy-org/CNApy/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bioinformatics, cobra, computational-biology, constraint-based-analysis, constraint-based-modeling, constraint-based-reconstruction, constraint-programming, fba, flux-balance-analysis, flux-variability, fva, metabolic-engineering, metabolic-models, metabolic-networks, metabolic-reconstruction, sbml, stoichiometric-modeling, systems-biology"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Apache License 2.0",
        "spdx_id": "Apache-2.0",
        "type": "License",
        "url": "https://api.github.com/licenses/apache-2.0",
        "value": "https://api.github.com/licenses/apache-2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
      },
      "source": "https://raw.githubusercontent.com/cnapy-org/CNApy/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CNApy"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "cnapy-org"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 1786937,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 12781,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Batchfile",
        "size": 671,
        "type": "Programming_language",
        "value": "Batchfile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 142,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/cnapy-org/CNApy/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "Paulocracy",
          "type": "User"
        },
        "date_created": "2024-08-16T11:31:33Z",
        "date_published": "2024-08-16T11:32:30Z",
        "description": "*Important note for those who are using the cnapy-dev Anaconda environment: Since CNApy's Anaconda environment requirements are changed with this release, it is recommended to create CNApy's Anaconda enviroment again, e.g. by deleting the old environment and creating a new one.*\r\n\r\n# Major changes\r\n\r\nThis release bumps CNApy's Python requirement from Python 3.8 to Python 3.10. While this makes CNApy a bit more performant and easier to delevop, this also means that external solver versions that do not support Python 3.10 will not work with CNApy anymore.\r\nFurthermore, this release includes a multitude of important bug fixes (see below) as well as a much better Escher map integration and small quality-of-life enhancements.\r\n\r\n# Installation Options\r\n\r\nThere are 4 alternative ways to install CNApy:\r\n\r\n1. If you use Windows, the easiest way is to use our Windows installer, see section [Using the Windows installer](https://github.com/cnapy-org/CNApy#using-the-windows-installer).\r\n2. If you use Linux or Apple MacOS X, the easiest installation producure is our assisted installation protocol, see [Assisted installation under Linux and MacOS X](https://github.com/cnapy-org/CNApy#assisted-installation-under-linux-and-macos-x).\r\n3. If you already have installed Anaconda or Miniconda on your computer, you can directly install CNApy as a conda package as described in section [Install CNApy as conda package](https://github.com/cnapy-org/CNApy#install-cnapy-as-conda-package).\r\n4. If you want to develop CNApy, follow the instruction for the cloning and set-up of the CNApy repository using git and conda in section [Setup the CNApy development environment](https://github.com/cnapy-org/CNApy#setup-the-cnapy-development-environment).\r\n\r\n\r\n## Changes in this release\r\n\r\n## What's Changed\r\n* File management by @axelvonkamp in https://github.com/cnapy-org/CNApy/pull/510\r\n* Fix annoying OptMDFpathway bugs by @Paulocracy in https://github.com/cnapy-org/CNApy/pull/511\r\n* Scenario in clipboard  by @Paulocracy in https://github.com/cnapy-org/CNApy/pull/512\r\n* Push to Python 3.10 by @Paulocracy in https://github.com/cnapy-org/CNApy/pull/514\r\n* fix #515 and ensure that a changed objective is always set by @axelvonkamp in https://github.com/cnapy-org/CNApy/pull/518\r\n* improved Escher integration by @axelvonkamp in https://github.com/cnapy-org/CNApy/pull/513\r\n* Per default use system font size by @sthiele in https://github.com/cnapy-org/CNApy/pull/517\r\n* Store EFMs as JSON by @Paulocracy in https://github.com/cnapy-org/CNApy/pull/522\r\n* possible fix for #520 by @axelvonkamp in https://github.com/cnapy-org/CNApy/pull/521\r\n* unified strain design by @axelvonkamp in https://github.com/cnapy-org/CNApy/pull/519\r\n* Bump to 1.2.1 by @Paulocracy in https://github.com/cnapy-org/CNApy/pull/523\r\n\r\n\r\n**Full Changelog**: https://github.com/cnapy-org/CNApy/compare/v1.1.11...v1.2.1",
        "html_url": "https://github.com/cnapy-org/CNApy/releases/tag/v1.2.1",
        "name": "1.2.1",
        "release_id": 170522824,
        "tag": "v1.2.1",
        "tarball_url": "https://api.github.com/repos/cnapy-org/CNApy/tarball/v1.2.1",
        "type": "Release",
        "url": "https://api.github.com/repos/cnapy-org/CNApy/releases/170522824",
        "value": "https://api.github.com/repos/cnapy-org/CNApy/releases/170522824",
        "zipball_url": "https://api.github.com/repos/cnapy-org/CNApy/zipball/v1.2.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "Paulocracy",
          "type": "User"
        },
        "date_created": "2024-03-01T13:31:34Z",
        "date_published": "2024-03-01T13:32:20Z",
        "description": "# Main changes\r\n\r\nThis update provides a multitude of bug fixes, including the solution for a crash during plotting when it was installed using the Windows installer. Furthermore, one can now easily take a map screenshot under the respective options in the \"Map\" menu, EFMs can now be easily normalized and scenario-dependent annotations were added (e.g., for scenario-dependent variances or thermodynamic parameter values).\r\n\r\n# Installation Options\r\n\r\nThere are 4 alternative ways to install CNApy:\r\n\r\n1. If you use Windows, the easiest way is to use our Windows installer, see section [Using the Windows installer](https://github.com/cnapy-org/CNApy#using-the-windows-installer).\r\n2. If you use Linux or Apple MacOS X, the easiest installation producure is our assisted installation protocol, see [Assisted installation under Linux and MacOS X](https://github.com/cnapy-org/CNApy#assisted-installation-under-linux-and-macos-x).\r\n3. If you already have installed Anaconda or Miniconda on your computer, you can directly install CNApy as a conda package as described in section [Install CNApy as conda package](https://github.com/cnapy-org/CNApy#install-cnapy-as-conda-package).\r\n4. If you want to develop CNApy, follow the instruction for the cloning and set-up of the CNApy repository using git and conda in section [Setup the CNApy development environment](https://github.com/cnapy-org/CNApy#setup-the-cnapy-development-environment).\r\n\r\n\r\n**If you have questions or suggestions regarding CNApy, you can use either of the [CNApy GitHub issues](https://github.com/cnapy-org/CNApy/issues), the [CNApy GitHub discussions](https://github.com/cnapy-org/CNApy/discussions) or the [CNApy Gitter chat room](https://gitter.im/cnapy-org/community).**\r\n\r\n## What's Changed\r\n* Fix SDS loading by @Paulocracy in https://github.com/cnapy-org/CNApy/pull/500\r\n* Addressing #489 by @Paulocracy in https://github.com/cnapy-org/CNApy/pull/502\r\n* Add screenshot capability for CNApy maps by @Paulocracy in https://github.com/cnapy-org/CNApy/pull/501\r\n* Add EFM normalization button (#503) by @Paulocracy in https://github.com/cnapy-org/CNApy/pull/504\r\n* Add Scenario annotations by @Paulocracy in https://github.com/cnapy-org/CNApy/pull/506\r\n* explicitaly show unchanged IDs as such by @axelvonkamp in https://github.com/cnapy-org/CNApy/pull/507\r\n* Improved installation guide by @Paulocracy in https://github.com/cnapy-org/CNApy/pull/508\r\n\r\n\r\n**Full Changelog**: https://github.com/cnapy-org/CNApy/compare/v1.1.10...v1.1.11",
        "html_url": "https://github.com/cnapy-org/CNApy/releases/tag/v1.1.11",
        "name": "CNApy 1.1.11",
        "release_id": 144369966,
        "tag": "v1.1.11",
        "tarball_url": "https://api.github.com/repos/cnapy-org/CNApy/tarball/v1.1.11",
        "type": "Release",
        "url": "https://api.github.com/repos/cnapy-org/CNApy/releases/144369966",
        "value": "https://api.github.com/repos/cnapy-org/CNApy/releases/144369966",
        "zipball_url": "https://api.github.com/repos/cnapy-org/CNApy/zipball/v1.1.11"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "Paulocracy",
          "type": "User"
        },
        "date_created": "2024-01-26T12:04:38Z",
        "date_published": "2024-01-26T12:07:21Z",
        "description": "*Important note for those who are using the cnapy-dev Anaconda environment: Since CNApy's Anaconda environment requirements are changed with this release, it is recommended to create CNApy's Anaconda enviroment again, e.g. by deleting the old environment and creating a new one.*\r\n\r\n# Main changes\r\n\r\nThis update provides a multitude of bug fixes and several small enhancements such as an improved Compute MCS dialog with a reaction auto-completion and the ability to use the \"-\" sign.\r\n\r\n# Installation Options\r\n\r\nThere are 4 alternative ways to install CNApy:\r\n\r\n1. If you use Windows, the easiest way is to use our Windows installer, see section [Using the Windows installer](https://github.com/cnapy-org/CNApy#using-the-windows-installer).\r\n2. If you use Linux or Apple MacOS X, the easiest installation producure is our assisted installation protocol, see [Assisted installation under Linux and MacOS X](https://github.com/cnapy-org/CNApy#assisted-installation-under-linux-and-macos-x).\r\n3. If you already have installed Anaconda or Miniconda on your computer, you can directly install CNApy as a conda package as described in section [Install CNApy as conda package](https://github.com/cnapy-org/CNApy#install-cnapy-as-conda-package).\r\n4. If you want to develop CNApy, follow the instruction for the cloning and set-up of the CNApy repository using git and conda in section [Setup the CNApy development environment](https://github.com/cnapy-org/CNApy#setup-the-cnapy-development-environment).\r\n\r\n\r\n**If you have questions or suggestions regarding CNApy, you can use either of the [CNApy GitHub issues](https://github.com/cnapy-org/CNApy/issues), the [CNApy GitHub discussions](https://github.com/cnapy-org/CNApy/discussions) or the [CNApy Gitter chat room](https://gitter.im/cnapy-org/community).**\r\n\r\n## What's Changed\r\n* Fix several bugs by @Paulocracy in https://github.com/cnapy-org/CNApy/pull/492\r\n* small improvements by @axelvonkamp in https://github.com/cnapy-org/CNApy/pull/493\r\n* sequential editing of scenario values using up/down arrow keys in sce\u2026 by @axelvonkamp in https://github.com/cnapy-org/CNApy/pull/497\r\n* Multiple MCS dialog improvements by @Paulocracy in https://github.com/cnapy-org/CNApy/pull/496\r\n* Version 1.1.10 by @Paulocracy in https://github.com/cnapy-org/CNApy/pull/494\r\n\r\n\r\n**Full Changelog**: https://github.com/cnapy-org/CNApy/compare/v1.1.9...v1.1.10",
        "html_url": "https://github.com/cnapy-org/CNApy/releases/tag/v1.1.10",
        "name": "v1.1.10",
        "release_id": 138653665,
        "tag": "v1.1.10",
        "tarball_url": "https://api.github.com/repos/cnapy-org/CNApy/tarball/v1.1.10",
        "type": "Release",
        "url": "https://api.github.com/repos/cnapy-org/CNApy/releases/138653665",
        "value": "https://api.github.com/repos/cnapy-org/CNApy/releases/138653665",
        "zipball_url": "https://api.github.com/repos/cnapy-org/CNApy/zipball/v1.1.10"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "Paulocracy",
          "type": "User"
        },
        "date_created": "2023-09-26T07:30:03Z",
        "date_published": "2023-09-26T07:34:18Z",
        "description": "# Main changes\r\n\r\nThis update provides a multitude of bug fixes and several small enhancements such as the new \"Apply\" button for calculated MCS (which directly sets them as a scenario) and the new ability to export an XLSX spreadsheet file with extensive in/out flux data for all metabolites of a model.\r\n\r\n# Installation Options\r\n\r\nThere are 4 alternative ways to install CNApy:\r\n\r\n1. If you use Windows, the easiest way is to use our Windows installer, see section [Using the Windows installer](https://github.com/cnapy-org/CNApy#using-the-windows-installer).\r\n2. If you use Linux or Apple MacOS X, the easiest installation producure is our assisted installation protocol, see [Assisted installation under Linux and MacOS X](https://github.com/cnapy-org/CNApy#assisted-installation-under-linux-and-macos-x).\r\n3. If you already have installed Anaconda or Miniconda on your computer, you can directly install CNApy as a conda package as described in section [Install CNApy as conda package](https://github.com/cnapy-org/CNApy#install-cnapy-as-conda-package).\r\n4. If you want to develop CNApy, follow the instruction for the cloning and set-up of the CNApy repository using git and conda in section [Setup the CNApy development environment](https://github.com/cnapy-org/CNApy#setup-the-cnapy-development-environment).\r\n\r\n\r\n**If you have questions or suggestions regarding CNApy, you can use either of the [CNApy GitHub issues](https://github.com/cnapy-org/CNApy/issues), the [CNApy GitHub discussions](https://github.com/cnapy-org/CNApy/discussions) or the [CNApy Gitter chat room](https://gitter.im/cnapy-org/community).**\r\n\r\n## What's Changed\r\n* Unify scenario_file_name label and load scenario_button by @sthiele in https://github.com/cnapy-org/CNApy/pull/476\r\n* Schedule old MapViews for deletion by @sthiele in https://github.com/cnapy-org/CNApy/pull/477\r\n* Escher profile by @axelvonkamp in https://github.com/cnapy-org/CNApy/pull/479\r\n* if a loaded scenario is modified mark the displayed filename as changed by @axelvonkamp in https://github.com/cnapy-org/CNApy/pull/482\r\n* Apply button by @axelvonkamp in https://github.com/cnapy-org/CNApy/pull/483\r\n* Misc by @axelvonkamp in https://github.com/cnapy-org/CNApy/pull/485\r\n* Small fixes by @Paulocracy in https://github.com/cnapy-org/CNApy/pull/484\r\n* Bump to version 1.1.9 by @Paulocracy in https://github.com/cnapy-org/CNApy/pull/486\r\n\r\n\r\n**Full Changelog**: https://github.com/cnapy-org/CNApy/compare/v1.1.8...v1.1.9",
        "html_url": "https://github.com/cnapy-org/CNApy/releases/tag/v1.1.9",
        "name": "v1.1.9",
        "release_id": 122559657,
        "tag": "v1.1.9",
        "tarball_url": "https://api.github.com/repos/cnapy-org/CNApy/tarball/v1.1.9",
        "type": "Release",
        "url": "https://api.github.com/repos/cnapy-org/CNApy/releases/122559657",
        "value": "https://api.github.com/repos/cnapy-org/CNApy/releases/122559657",
        "zipball_url": "https://api.github.com/repos/cnapy-org/CNApy/zipball/v1.1.9"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "Paulocracy",
          "type": "User"
        },
        "date_created": "2023-05-16T13:05:54Z",
        "date_published": "2023-05-16T13:08:06Z",
        "description": "*Important note if you're using the cnapy-dev Anaconda environment: Since CNApy's Anaconda environment requirements are changed with this release, it is recommended to create CNApy's Anaconda enviroment again, e.g. by deleting the old environment and creating a new one.*\r\n\r\n# Main changes\r\n\r\nThis updates provides an improved GUI experience including a history of viewed model items, a multitude of bug fixes and now officially supports the new easier way to install CNApy on Windows.\r\n\r\n# Installation Options\r\n\r\nThere are 4 alternative ways to install CNApy:\r\n\r\n1. If you use Windows, the easiest way is to use our Windows installer, see section [Using the Windows installer](https://github.com/cnapy-org/CNApy#using-the-windows-installer).\r\n2. If you use Linux or Apple MacOS X, the easiest installation producure is our assisted installation protocol, see [Assisted installation under Linux and MacOS X](https://github.com/cnapy-org/CNApy#assisted-installation-under-linux-and-macos-x).\r\n3. If you already have installed Anaconda or Miniconda on your computer, you can directly install CNApy as a conda package as described in section [Install CNApy as conda package](https://github.com/cnapy-org/CNApy#install-cnapy-as-conda-package).\r\n4. If you want to develop CNApy, follow the instruction for the cloning and set-up of the CNApy repository using git and conda in section [Setup the CNApy development environment](https://github.com/cnapy-org/CNApy#setup-the-cnapy-development-environment).\r\n\r\n\r\n**If you have questions or suggestions regarding CNApy, you can use either of the [CNApy GitHub issues](https://github.com/cnapy-org/CNApy/issues), the [CNApy GitHub discussions](https://github.com/cnapy-org/CNApy/discussions) or the [CNApy Gitter chat room](https://gitter.im/cnapy-org/community).**\r\n\r\n## What's Changed\r\n* fix #434 and other minor enhancements by @axelvonkamp in https://github.com/cnapy-org/CNApy/pull/458\r\n* Fix small bugs and expanded search features by @Paulocracy in https://github.com/cnapy-org/CNApy/pull/457\r\n* Enhanced readme by @Paulocracy in https://github.com/cnapy-org/CNApy/pull/459\r\n* some bug fixes by @axelvonkamp in https://github.com/cnapy-org/CNApy/pull/460\r\n* Add default concentration ranges in thermodynamic dialog by @Paulocracy in https://github.com/cnapy-org/CNApy/pull/461\r\n* popup list with recently viewed model items, various small GUI improvemets by @axelvonkamp in https://github.com/cnapy-org/CNApy/pull/464\r\n* Add new installation instructions by @Paulocracy in https://github.com/cnapy-org/CNApy/pull/465\r\n* Misc updates by @axelvonkamp in https://github.com/cnapy-org/CNApy/pull/469\r\n* replace deprecated add_reaction with add_reactions by @axelvonkamp in https://github.com/cnapy-org/CNApy/pull/474\r\n* Bump to 1.1.8 by @Paulocracy in https://github.com/cnapy-org/CNApy/pull/475\r\n\r\n**Full Changelogs**:\r\n* https://github.com/cnapy-org/CNApy/compare/v1.1.6...v1.1.7 (version 1.1.7 is skipped due to blocking errors fixed in 1.1.8)\r\n* https://github.com/cnapy-org/CNApy/compare/v1.1.7...v1.1.8",
        "html_url": "https://github.com/cnapy-org/CNApy/releases/tag/v1.1.8",
        "name": "CNApy 1.1.8",
        "release_id": 103158513,
        "tag": "v1.1.8",
        "tarball_url": "https://api.github.com/repos/cnapy-org/CNApy/tarball/v1.1.8",
        "type": "Release",
        "url": "https://api.github.com/repos/cnapy-org/CNApy/releases/103158513",
        "value": "https://api.github.com/repos/cnapy-org/CNApy/releases/103158513",
        "zipball_url": "https://api.github.com/repos/cnapy-org/CNApy/zipball/v1.1.8"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "Paulocracy",
          "type": "User"
        },
        "date_created": "2023-05-09T14:19:01Z",
        "date_published": "2023-05-09T14:21:13Z",
        "description": "*Important note if you're using the cnapy-dev Anaconda environment: Since CNApy's Anaconda environment requirements are changed with this release, it is recommended to create CNApy's Anaconda enviroment again, e.g. by deleting the old environment and creating a new one.*\r\n\r\n# Main changes\r\n\r\nThis updates provides an improved GUI experience including a history of viewed model items, a multitude of bug fixes and now officially supports the new easier way to install CNApy on Windows.\r\n\r\n# Installation Options\r\n\r\nThere are 4 alternative ways to install CNApy:\r\n\r\n1. If you use Windows, the easiest way is to use our Windows installer, see section [Using the Windows installer](https://github.com/cnapy-org/CNApy#using-the-windows-installer).\r\n2. If you use Linux or Apple MacOS X, the easiest installation producure is our assisted installation protocol, see [Assisted installation under Linux and MacOS X](https://github.com/cnapy-org/CNApy#assisted-installation-under-linux-and-macos-x).\r\n3. If you already have installed Anaconda or Miniconda on your computer, you can directly install CNApy as a conda package as described in section [Install CNApy as conda package](https://github.com/cnapy-org/CNApy#install-cnapy-as-conda-package).\r\n4. If you want to develop CNApy, follow the instruction for the cloning and set-up of the CNApy repository using git and conda in section [Setup the CNApy development environment](https://github.com/cnapy-org/CNApy#setup-the-cnapy-development-environment).\r\n\r\n\r\n**If you have questions or suggestions regarding CNApy, you can use either of the [CNApy GitHub issues](https://github.com/cnapy-org/CNApy/issues), the [CNApy GitHub discussions](https://github.com/cnapy-org/CNApy/discussions) or the [CNApy Gitter chat room](https://gitter.im/cnapy-org/community).**\r\n\r\n## What's Changed\r\n* fix #434 and other minor enhancements by @axelvonkamp in https://github.com/cnapy-org/CNApy/pull/458\r\n* Fix small bugs and expanded search features by @Paulocracy in https://github.com/cnapy-org/CNApy/pull/457\r\n* Enhanced readme by @Paulocracy in https://github.com/cnapy-org/CNApy/pull/459\r\n* some bug fixes by @axelvonkamp in https://github.com/cnapy-org/CNApy/pull/460\r\n* Add default concentration ranges in thermodynamic dialog by @Paulocracy in https://github.com/cnapy-org/CNApy/pull/461\r\n* popup list with recently viewed model items, various small GUI improvemets by @axelvonkamp in https://github.com/cnapy-org/CNApy/pull/464\r\n* Add new installation instructions by @Paulocracy in https://github.com/cnapy-org/CNApy/pull/465\r\n* Misc updates by @axelvonkamp in https://github.com/cnapy-org/CNApy/pull/469\r\n* Version 1.1.7 by @Paulocracy in https://github.com/cnapy-org/CNApy/pull/471\r\n\r\n\r\n**Full Changelog**: https://github.com/cnapy-org/CNApy/compare/v1.1.6...v1.1.7",
        "html_url": "https://github.com/cnapy-org/CNApy/releases/tag/v1.1.7",
        "name": "CNApy 1.1.7",
        "release_id": 102354067,
        "tag": "v1.1.7",
        "tarball_url": "https://api.github.com/repos/cnapy-org/CNApy/tarball/v1.1.7",
        "type": "Release",
        "url": "https://api.github.com/repos/cnapy-org/CNApy/releases/102354067",
        "value": "https://api.github.com/repos/cnapy-org/CNApy/releases/102354067",
        "zipball_url": "https://api.github.com/repos/cnapy-org/CNApy/zipball/v1.1.7"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "Paulocracy",
          "type": "User"
        },
        "date_created": "2023-01-27T13:37:38Z",
        "date_published": "2023-01-27T13:40:54Z",
        "description": "*Important note if you're using the cnapy-dev Anaconda environment: Since CNApy's Anaconda environment requirements are changed with this release, it is recommended to create CNApy's Anaconda enviroment again, e.g. by deleting the old environment and creating a new one.*\r\n\r\nThis is a **major new release** containing many new and novel features, as well as many important bug fixes:\r\n\r\n# New features\r\n\r\n* You can now set *free linear constraints in scenarios and scenario-specific reactions* in CNApy under the \"Scenario\" tab (#445). E.g., aside from many other new possibilities, you can now set linear constraints such that a minimal yield is reached or add import/export reactions for a specific scenario.\r\n* The thermodynamics-based method *OptMDFpathway and a derived thermodynamic FBA as well as bottleneck reaction analysis are now integrated into CNApy* (#441). You can find the functionality under the \"Analysis\" menu entry. To use OptMDFpathway, you have to provide dG'\u00b0 values and metabolite concentration ranges, which can be manually added as annotations or loaded from a respective Excel XLSX or JSON file.\r\n* You can now perform the flux feasibility analysis with customizable biomass reaction modifications (#450).\r\n* You can now copy the content of the reaction (#438) and metabolite (#446) lists in an Excel or text file by right-clicking on the respective heading and copying it to the clipboard. For the reactions list, this is directly possible (as JSON or Excel XLSX) through the \"Clipboard\" menu tab (#449).\r\n* Added ability to set exact box positions in the interactive maps (#433).\r\n\r\n# Bug fixes\r\n\r\n* Circumvent \"numpy.float is not defined\" error (#442)\r\n* Fix parsing of annotation values which are Python list strings (#436)\r\n* Fix error message when multiple empty annotations are created (#440)\r\n\r\n# Installation Options\r\n\r\nThere are three ways to install CNApy:\r\n\r\n1. As the easiest way only under Windows, you can use the .exe installer attached to the assets at the bottom of [CNApy's latest release](https://github.com/cnapy-org/CNApy/releases/latest).\r\n2. Under any operating system, you can install CNApy as a conda package as described in section [Install CNApy as conda package](https://github.com/cnapy-org/CNApy#install-cnapy-as-conda-package).\r\n3. If you want to clone and/or develop CNApy, follow the instruction in section [Setup the CNApy development environment](https://github.com/cnapy-org/CNApy#setup-the-cnapy-development-environment).\r\n\r\n**If you have questions or suggestions regarding CNApy, you can use either of the [CNApy GitHub issues](https://github.com/cnapy-org/CNApy/issues), the [CNApy GitHub discussions](https://github.com/cnapy-org/CNApy/discussions) or the [CNApy Gitter chat room](https://gitter.im/cnapy-org/community).**\r\n\r\n## What's Changed\r\n* Fix #432 by @Paulocracy in https://github.com/cnapy-org/CNApy/pull/433\r\n* set Qt version to 5.15 (LTS) by @axelvonkamp in https://github.com/cnapy-org/CNApy/pull/431\r\n* parse lists of annotation values as lists by @axelvonkamp in https://github.com/cnapy-org/CNApy/pull/436\r\n* Copy reaction table to UI clipboard by @axelvonkamp in https://github.com/cnapy-org/CNApy/pull/438\r\n* Scenario constraints by @axelvonkamp in https://github.com/cnapy-org/CNApy/pull/445\r\n* Visual OptMDFpathway by @Paulocracy in https://github.com/cnapy-org/CNApy/pull/441\r\n* Fix #439 (error with multiple empty annotations) by @Paulocracy in https://github.com/cnapy-org/CNApy/pull/440\r\n* Add automatic blank background with reaction addition by @Paulocracy in https://github.com/cnapy-org/CNApy/pull/447\r\n* Add free linear constraints to OptMDFpathway and thermodynamic bottleneck analysis by @Paulocracy in https://github.com/cnapy-org/CNApy/pull/446\r\n* Scenario tab updates by @axelvonkamp in https://github.com/cnapy-org/CNApy/pull/448\r\n* Add menu entry for storing reaction list content by @Paulocracy in https://github.com/cnapy-org/CNApy/pull/449\r\n* Move website data to master branch by @sthiele in https://github.com/cnapy-org/CNApy/pull/444\r\n* In out fluxes additions by @Paulocracy in https://github.com/cnapy-org/CNApy/pull/451\r\n* Flux feasibility with biomass modification by @axelvonkamp in https://github.com/cnapy-org/CNApy/pull/450\r\n* Bump to 1.1.5 by @Paulocracy in https://github.com/cnapy-org/CNApy/pull/452\r\n* Fix concentration setting by @Paulocracy in https://github.com/cnapy-org/CNApy/pull/453\r\n\r\n**Full Changelog**: https://github.com/cnapy-org/CNApy/compare/v1.1.4...v1.1.5\r\nand\r\n**Full Changelog**: https://github.com/cnapy-org/CNApy/compare/v1.1.5...v1.1.6",
        "html_url": "https://github.com/cnapy-org/CNApy/releases/tag/v1.1.6",
        "name": "CNApy 1.1.6",
        "release_id": 90421773,
        "tag": "v1.1.6",
        "tarball_url": "https://api.github.com/repos/cnapy-org/CNApy/tarball/v1.1.6",
        "type": "Release",
        "url": "https://api.github.com/repos/cnapy-org/CNApy/releases/90421773",
        "value": "https://api.github.com/repos/cnapy-org/CNApy/releases/90421773",
        "zipball_url": "https://api.github.com/repos/cnapy-org/CNApy/zipball/v1.1.6"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "Paulocracy",
          "type": "User"
        },
        "date_created": "2023-01-24T14:02:01Z",
        "date_published": "2023-01-24T14:07:02Z",
        "description": "*Important note if you're using the cnapy-dev Anaconda environment: Since CNApy's Anaconda environment requirements are changed with this release, it is recommended to create CNApy's Anaconda enviroment again, e.g. by deleting the old environment and creating a new one.*\r\n\r\nThis is a **major new release** containing many new and novel features, as well as many important bug fixes:\r\n\r\n# New features\r\n\r\n* You can now set *free linear constraints in scenarios and scenario-specific reactions* in CNApy under the \"Scenario\" tab (#445). E.g., aside from many other new possibilities, you can now set linear constraints such that a minimal yield is reached or add import/export reactions for a specific scenario.\r\n* The thermodynamics-based method *OptMDFpathway is now integrated into CNApy* (#441). You can find the functionality under the \"Analysis\" menu entry. To use OptMDFpathway, you have to provide dG'\u00b0 values and metabolite concentration ranges, which can be manually added as annotations or loaded from a respective Excel XLSX or JSON file.\r\n* You can now perform the flux feasibility analysis with customizable biomass reaction modifications (#450).\r\n* You can now copy the content of the reaction (#438) and metabolite (#446) lists in an Excel or text file by right-clicking on the respective heading and copying it to the clipboard. For the reactions list, this is directly possible (as JSON or Excel XLSX) throuch the \"Clipboard\" menu tab (#449).\r\n* Added ability to set exact box positions in the interactive maps (#433).\r\n\r\n# Bug fixes\r\n\r\n* Circumvent \"numpy.float is not defined\" error (#442)\r\n* Fix parsing of annotation values which are Python list strings (#436)\r\n* Fix error message when multiple empty annotations are created (#440)\r\n\r\n# Installation Options\r\n\r\nThere are three ways to install CNApy:\r\n\r\n1. As the easiest way only under Windows, you can use the .exe installer attached to the assets at the bottom of [CNApy's latest release](https://github.com/cnapy-org/CNApy/releases/latest).\r\n2. Under any operating system, you can install CNApy as a conda package as described in section [Install CNApy as conda package](https://github.com/cnapy-org/CNApy#install-cnapy-as-conda-package).\r\n3. If you want to clone and/or develop CNApy, follow the instruction in section [Setup the CNApy development environment](https://github.com/cnapy-org/CNApy#setup-the-cnapy-development-environment).\r\n\r\n**If you have questions or suggestions regarding CNApy, you can use either of the [CNApy GitHub issues](https://github.com/cnapy-org/CNApy/issues), the [CNApy GitHub discussions](https://github.com/cnapy-org/CNApy/discussions) or the [CNApy Gitter chat room](https://gitter.im/cnapy-org/community).**\r\n\r\n## What's Changed\r\n* Fix #432 by @Paulocracy in https://github.com/cnapy-org/CNApy/pull/433\r\n* set Qt version to 5.15 (LTS) by @axelvonkamp in https://github.com/cnapy-org/CNApy/pull/431\r\n* parse lists of annotation values as lists by @axelvonkamp in https://github.com/cnapy-org/CNApy/pull/436\r\n* Copy reaction table to UI clipboard by @axelvonkamp in https://github.com/cnapy-org/CNApy/pull/438\r\n* Scenario constraints by @axelvonkamp in https://github.com/cnapy-org/CNApy/pull/445\r\n* Visual OptMDFpathway by @Paulocracy in https://github.com/cnapy-org/CNApy/pull/441\r\n* Fix #439 (error with multiple empty annotations) by @Paulocracy in https://github.com/cnapy-org/CNApy/pull/440\r\n* Add automatic blank background with reaction addition by @Paulocracy in https://github.com/cnapy-org/CNApy/pull/447\r\n* Add free linear constraints to OptMDFpathway and thermodynamic bottleneck analysis by @Paulocracy in https://github.com/cnapy-org/CNApy/pull/446\r\n* Scenario tab updates by @axelvonkamp in https://github.com/cnapy-org/CNApy/pull/448\r\n* Add menu entry for storing reaction list content by @Paulocracy in https://github.com/cnapy-org/CNApy/pull/449\r\n* Move website data to master branch by @sthiele in https://github.com/cnapy-org/CNApy/pull/444\r\n* In out fluxes additions by @Paulocracy in https://github.com/cnapy-org/CNApy/pull/451\r\n* Flux feasibility with biomass modification by @axelvonkamp in https://github.com/cnapy-org/CNApy/pull/450\r\n* Bump to 1.1.5 by @Paulocracy in https://github.com/cnapy-org/CNApy/pull/452\r\n\r\n\r\n**Full Changelog**: https://github.com/cnapy-org/CNApy/compare/v1.1.4...v1.1.5",
        "html_url": "https://github.com/cnapy-org/CNApy/releases/tag/v1.1.5",
        "name": "CNApy 1.1.5",
        "release_id": 90047044,
        "tag": "v1.1.5",
        "tarball_url": "https://api.github.com/repos/cnapy-org/CNApy/tarball/v1.1.5",
        "type": "Release",
        "url": "https://api.github.com/repos/cnapy-org/CNApy/releases/90047044",
        "value": "https://api.github.com/repos/cnapy-org/CNApy/releases/90047044",
        "zipball_url": "https://api.github.com/repos/cnapy-org/CNApy/zipball/v1.1.5"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "Paulocracy",
          "type": "User"
        },
        "date_created": "2022-10-18T13:00:24Z",
        "date_published": "2022-10-18T13:01:14Z",
        "description": "***CNApy has got a [Gitter chat room](https://gitter.im/cnapy-org/community) where you can talk to CNApy's developers and stay informed about new releases***\r\n\r\nThis is primarily a maintenance release with some new small features and many bug fixes.\r\n\r\n# New features\r\n\r\n* Annotation values can now be searched in the search bar if selected (#412).\r\n* Annotations can now be deleted using a \"-\" button and can be directly opened in the web browser by using identifiers.org (#412)\r\n* Gene annotations are now shown and can be edited (#412)\r\n\r\n# Bug fixes\r\n\r\n* Fix model saving problem (#427).\r\n* Fix error when editing scenario using backspace (#424).\r\n* Various error messages when opening files and performing calculations are now catched (#413, #414)\r\n\r\n# Further changes\r\n\r\n* Reactions selected in the reaction list are now automatically highlighted in the map (#418).\r\n* The most recent opened .cna files are now shown as a File menu entry (#415, #419).\r\n\r\n## Installation Options\r\n\r\nThere are three ways to install CNApy:\r\n\r\n1. As the easiest installation way which only works under Windows, you can use the .exe installer attached to the assets at the bottom of [CNApy's latest release](https://github.com/cnapy-org/CNApy/releases/latest).\r\n2. Under any operating system, you can install CNApy as a conda package as described in section [Install CNApy as conda package](https://github.com/cnapy-org/CNApy#install-cnapy-as-conda-package).\r\n3. If you want to develop CNApy, follow the instruction for the successful cloning of CNApy in section [Setup the CNApy development environment](https://github.com/cnapy-org/CNApy#setup-the-cnapy-development-environment).",
        "html_url": "https://github.com/cnapy-org/CNApy/releases/tag/v1.1.4",
        "name": "CNApy 1.1.4",
        "release_id": 80205656,
        "tag": "v1.1.4",
        "tarball_url": "https://api.github.com/repos/cnapy-org/CNApy/tarball/v1.1.4",
        "type": "Release",
        "url": "https://api.github.com/repos/cnapy-org/CNApy/releases/80205656",
        "value": "https://api.github.com/repos/cnapy-org/CNApy/releases/80205656",
        "zipball_url": "https://api.github.com/repos/cnapy-org/CNApy/zipball/v1.1.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "Paulocracy",
          "type": "User"
        },
        "date_created": "2022-09-22T12:22:01Z",
        "date_published": "2022-09-22T12:24:05Z",
        "description": "***CNApy has got a new [Gitter chat room](https://gitter.im/cnapy-org/community) where you can talk to CNApy's developers and stay informed about new releases***\r\n\r\n# Major new feature\r\n\r\n* CNApy can now use **interactive Escher maps**, including the ability to load, save and edit them thanks to @axelvonkamp's integration of the Escher in CNApy. From now on, Escher maps are the 2nd type of possible interactive metabolic model maps in CNApy, together with the \"traditional\" CNApy maps (#401). If you encounter any problems with Escher maps in CNApy, please let us know through [our GitHub issues](https://github.com/cnapy-org/CNApy/issues).\r\n\r\n# Bug fixes\r\n\r\n* Editing a GPR rule does not create many new orphaned genes anymore (#329)\r\n* CNApy now always downloads the latest CNApy projects version (#398)\r\n* Scenario objectives are not deleted when using flux history values (#404)\r\n* [StrainDesign](https://github.com/klamt-lab/straindesign) now comes in version 1.9, fixing some crashes with GLPK.\r\n* Escher also works within cobra packages and the .exe installer version (#406)\r\n\r\n# Further changes\r\n\r\n* Again, some vertical space is saved by rearranging the reaction view's content, making it more readable with smaller screens (#402)\r\n* Various optimizing refactorings (#396, #400)\r\n\r\n## Installation Options\r\n\r\nThere are three ways to install CNApy:\r\n\r\n1. As the easiest installation way which only works under Windows, you can use the .exe installer attached to the assets at the bottom of [CNApy's latest release](https://github.com/cnapy-org/CNApy/releases/latest).\r\n2. Under any operating system, you can install CNApy as a conda package as described in section [Install CNApy as conda package](https://github.com/cnapy-org/CNApy#install-cnapy-as-conda-package).\r\n3. If you want to develop CNApy, follow the instruction for the successful cloning of CNApy in section [Setup the CNApy development environment](https://github.com/cnapy-org/CNApy#setup-the-cnapy-development-environment).",
        "html_url": "https://github.com/cnapy-org/CNApy/releases/tag/v1.1.3",
        "name": "CNApy 1.1.3",
        "release_id": 77875858,
        "tag": "v1.1.3",
        "tarball_url": "https://api.github.com/repos/cnapy-org/CNApy/tarball/v1.1.3",
        "type": "Release",
        "url": "https://api.github.com/repos/cnapy-org/CNApy/releases/77875858",
        "value": "https://api.github.com/repos/cnapy-org/CNApy/releases/77875858",
        "zipball_url": "https://api.github.com/repos/cnapy-org/CNApy/zipball/v1.1.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "Paulocracy",
          "type": "User"
        },
        "date_created": "2022-09-21T09:53:03Z",
        "date_published": "2022-09-21T09:53:42Z",
        "description": "*Beta release*",
        "html_url": "https://github.com/cnapy-org/CNApy/releases/tag/v1.1.2",
        "name": "CNApy 1.1.2",
        "release_id": 77752219,
        "tag": "v1.1.2",
        "tarball_url": "https://api.github.com/repos/cnapy-org/CNApy/tarball/v1.1.2",
        "type": "Release",
        "url": "https://api.github.com/repos/cnapy-org/CNApy/releases/77752219",
        "value": "https://api.github.com/repos/cnapy-org/CNApy/releases/77752219",
        "zipball_url": "https://api.github.com/repos/cnapy-org/CNApy/zipball/v1.1.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "Paulocracy",
          "type": "User"
        },
        "date_created": "2022-08-04T08:13:20Z",
        "date_published": "2022-08-04T08:17:48Z",
        "description": "*Important note if you're using the cnapy-dev Anaconda environment: Since the CNApy's Anaconda environment requirements are changed with this release, it is recommended to create CNApy's Anaconda enviroment again, e.g. by deleting the old environment and creating a new one.*\r\n\r\n# New features\r\n\r\n* Scenarios can now get an optional objective and description (#388)\r\n* Separate objective tab added (#388)\r\n* Scenario-bound reactions can now be pinned in the reaction list (#388)\r\n* The flux feasibility routine now shows all made changes for feasibility in the iPython console (#385)\r\n* New first start-up routine specifically asking for the download of CNApy's example projects (#388)\r\n\r\n# Bug fixes\r\n\r\n* Resolve CNApy installer issue, which led to no CNApy start-up, by using @sthiele's JVM-searching routine (#386) \r\n* Resolve CNApy installer issue in common folders (#386)\r\n* Resolve update_item() error when changing reaction elements (#390)\r\n* Resolve error with in/out metabolite fluxes on some devices (#389)\r\n\r\n# Further changes\r\n\r\n* Reordered Scenario menu tab for more consistency (#388)\r\n* Some vertical space is saved by rearranging the reaction view's content (#388), making it more readable with smaller screens\r\n* @VonAlphaBisZulu's StrainDesign package was updated to its latest version 1.6\r\n\r\n# Install\r\n\r\nThere are two ways to install CNApy:\r\n\r\n1. Under any operating system, by installing CNApy as a conda package (see [https://github.com/cnapy-org/CNApy#install-cnapy-with-conda](https://github.com/cnapy-org/CNApy#install-cnapy-with-conda))\r\n2. As an alternative installation way under Windows, by using the .exe installer attached to [CNApy's latest release](https://github.com/cnapy-org/CNApy/releases/latest).",
        "html_url": "https://github.com/cnapy-org/CNApy/releases/tag/v1.1.1",
        "name": "CNApy 1.1.1",
        "release_id": 73616013,
        "tag": "v1.1.1",
        "tarball_url": "https://api.github.com/repos/cnapy-org/CNApy/tarball/v1.1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/cnapy-org/CNApy/releases/73616013",
        "value": "https://api.github.com/repos/cnapy-org/CNApy/releases/73616013",
        "zipball_url": "https://api.github.com/repos/cnapy-org/CNApy/zipball/v1.1.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "Paulocracy",
          "type": "User"
        },
        "date_created": "2022-08-03T13:32:41Z",
        "date_published": "2022-08-03T13:34:01Z",
        "description": "*Beta release*",
        "html_url": "https://github.com/cnapy-org/CNApy/releases/tag/v1.1.0",
        "name": "CNApy 1.1.0",
        "release_id": 73540094,
        "tag": "v1.1.0",
        "tarball_url": "https://api.github.com/repos/cnapy-org/CNApy/tarball/v1.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/cnapy-org/CNApy/releases/73540094",
        "value": "https://api.github.com/repos/cnapy-org/CNApy/releases/73540094",
        "zipball_url": "https://api.github.com/repos/cnapy-org/CNApy/zipball/v1.1.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "Paulocracy",
          "type": "User"
        },
        "date_created": "2022-06-09T13:27:38Z",
        "date_published": "2022-06-09T13:47:15Z",
        "description": "*Important note if you're using the cnapy-dev Anaconda environment: Since the CNApy's Anaconda environment requirements are changed with this release, it is recommended to create CNApy's Anaconda enviroment again, e.g. by deleting the old environment and creating a new one.*\r\n\r\nThis is a major update which contains many significant changes and additional features:\r\n\r\n# New features\r\n\r\n* **@VonAlphaBisZulu's [StrainDesign ](https://github.com/klamt-lab/straindesign) package is now integrated within CNApy**. You can access it under CNApy's GUI under the \"Analysis\" menu entry. By using StrainDesign's GUI and functions, one can easily create powerful combinations of several strain design methods such as OptKnock, RobustKnock and generalized Minimal Cut Sets (MCS). StrainDesign makes use of state-of-the-art model compression algorithms in order to minimize the computational complexity of all calculations as much as currently possible, thus making calculations faster and less memory-intensive. Further major features are: One can also define knock-ins instead of knock-outs; Aside of reaction-based knock-outs, one can also define gene-based knock-outs.\r\n* Right now only for the StrainDesign features, the open-source solver **[SCIP](https://scipopt.org/) is now usable with CNApy**. You still have to install and configure SCIP by yourself. In the future, this will be facilitated and SCIP will be usable with all CNApy functions.\r\n* Since almost all legacy functions are now programmed in Python, **all *CellNetAnalyzer* legacy bindings are now removed**, so that no MATLAB or Octave is needed for them anymore.\r\n* The **community versions of IBM CPLEX and Gurobi** are now installed by default. These community versions are restricted to models up to 1000 variables. In order to facilitate the integration of both solver's full versions (usable for big versions), wizards were added to CNApy which you may find under the \"Config\" menu entry.\r\n* The **standard [CNApy projects](https://github.com/cnapy-org/CNApy-projects) can now be downloaded** under the respective field in the \"Projects\" menu entry even after the first start.\r\n\r\n# Bug fixes\r\n\r\n* GLPK is now the standard solver in order to prevent typical IBM CPLEX or Gurobi errors (#376)\r\n* Numerous potential IBM CPLEX and Gurobi errors are now catched (#368, #373)\r\n* WIth the newest [CNApy projects](https://github.com/cnapy-org/CNApy-projects) release, a map resolution error under Linux affecting the map's text was resolved (#377)\r\n* An error while using the Escher SVG integration was resolved (#355)\r\n* Maps are now automatically zoomed in the start-up such that no scroll bars have to appear (#354)\r\n\r\n# Install\r\n\r\nThere are two ways to install CNApy:\r\n\r\n1. Under any operating system, by installing CNApy as a conda package (see [https://github.com/cnapy-org/CNApy#install-cnapy-with-conda](https://github.com/cnapy-org/CNApy#install-cnapy-with-conda))\r\n2. As an alternative installation way under Windows, by using the .exe installer attached to [CNApy's latest release](https://github.com/cnapy-org/CNApy/releases/latest).",
        "html_url": "https://github.com/cnapy-org/CNApy/releases/tag/v1.0.9",
        "name": "CNApy 1.0.9",
        "release_id": 69061377,
        "tag": "v1.0.9",
        "tarball_url": "https://api.github.com/repos/cnapy-org/CNApy/tarball/v1.0.9",
        "type": "Release",
        "url": "https://api.github.com/repos/cnapy-org/CNApy/releases/69061377",
        "value": "https://api.github.com/repos/cnapy-org/CNApy/releases/69061377",
        "zipball_url": "https://api.github.com/repos/cnapy-org/CNApy/zipball/v1.0.9"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "Paulocracy",
          "type": "User"
        },
        "date_created": "2022-06-07T11:42:28Z",
        "date_published": "2022-06-07T11:43:32Z",
        "description": "*Beta release*",
        "html_url": "https://github.com/cnapy-org/CNApy/releases/tag/v1.0.8",
        "name": "CNApy 1.0.8",
        "release_id": 68814828,
        "tag": "v1.0.8",
        "tarball_url": "https://api.github.com/repos/cnapy-org/CNApy/tarball/v1.0.8",
        "type": "Release",
        "url": "https://api.github.com/repos/cnapy-org/CNApy/releases/68814828",
        "value": "https://api.github.com/repos/cnapy-org/CNApy/releases/68814828",
        "zipball_url": "https://api.github.com/repos/cnapy-org/CNApy/zipball/v1.0.8"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "Paulocracy",
          "type": "User"
        },
        "date_created": "2022-06-03T10:40:31Z",
        "date_published": "2022-06-03T10:42:29Z",
        "description": "*Beta release*",
        "html_url": "https://github.com/cnapy-org/CNApy/releases/tag/v1.0.7",
        "name": "CNApy 1.0.7",
        "release_id": 68534972,
        "tag": "v1.0.7",
        "tarball_url": "https://api.github.com/repos/cnapy-org/CNApy/tarball/v1.0.7",
        "type": "Release",
        "url": "https://api.github.com/repos/cnapy-org/CNApy/releases/68534972",
        "value": "https://api.github.com/repos/cnapy-org/CNApy/releases/68534972",
        "zipball_url": "https://api.github.com/repos/cnapy-org/CNApy/zipball/v1.0.7"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "Paulocracy",
          "type": "User"
        },
        "date_created": "2021-11-30T09:17:40Z",
        "date_published": "2021-11-30T09:23:39Z",
        "description": "*Important note if you're using the CNApy-dev Anaconda environment: Since the CNApy's Anaconda environment requirements are changed with this release, it is recommended to create CNApy's Anaconda enviroment again, e.g. by deleting the old environment and creating a new one.*\r\n\r\n# New features\r\n* Auto-FBA now also works when a reaction's flux bounds are changed (#344)\r\n* Whenever a new metabolite is going to be created after a reaction equation is changed, the user is now asked if this should happen or not\r\n\r\n# Bug fixes\r\n* Add instructional error message when CellNetAnalyzer is not up-to-date or incorrectly configured (#348)\r\n* A rare MCS computation error with optlang under Windows is now solved (#341)\r\n* Fixed error on SBML export (#321)\r\n* Fixed error by clicking on a metabolite in a reaction navigation text line (#345)\r\n\r\n# Install\r\n\r\nThere are two ways to install CNApy:\r\n\r\n1. Under any operating system, by installing CNApy as a conda package (see [https://github.com/cnapy-org/CNApy#install-cnapy-with-conda](https://github.com/cnapy-org/CNApy#install-cnapy-with-conda))\r\n2. As an alternative installation way under Windows, by using the .exe installer attached to [CNApy's latest release](https://github.com/cnapy-org/CNApy/releases/latest).",
        "html_url": "https://github.com/cnapy-org/CNApy/releases/tag/v1.0.6",
        "name": "CNApy 1.0.6",
        "release_id": 54304379,
        "tag": "v1.0.6",
        "tarball_url": "https://api.github.com/repos/cnapy-org/CNApy/tarball/v1.0.6",
        "type": "Release",
        "url": "https://api.github.com/repos/cnapy-org/CNApy/releases/54304379",
        "value": "https://api.github.com/repos/cnapy-org/CNApy/releases/54304379",
        "zipball_url": "https://api.github.com/repos/cnapy-org/CNApy/zipball/v1.0.6"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "Paulocracy",
          "type": "User"
        },
        "date_created": "2021-11-10T12:44:58Z",
        "date_published": "2021-11-10T12:50:44Z",
        "description": "# New features\r\n* Added a Genes tab which shows all genes of the currently loaded model. Once a gene is selcted, the user can change the name (not the ID) of the shown gene. In addition, all gene-associated reactions and their reaction strings are shown.\r\n* In the Reaction list view, an editable \"scenario\" column is added where one can directly enter a scenario value, even if the reaction doesn't occur on any map.\r\n* Added the \"Auto FBA\" mode which allows one to automatically perform an FBA whenever the current scenario is changed.\r\n* Added a QLP FBA which makes a currently infeasible scenario feasible using a quadratic linear programming approach.\r\n\r\n# Bug fixes\r\n* Fixed further potential errors when opening the MCS calculation window.\r\n\r\n# Install\r\n\r\nThere are two ways to install CNApy:\r\n\r\n1. Under any operating system, by installing CNApy as a conda package (see [https://github.com/cnapy-org/CNApy#install-cnapy-with-conda](https://github.com/cnapy-org/CNApy#install-cnapy-with-conda))\r\n2. As an alternative installation way under Windows, by using the .exe installer attached to [CNApy's latest release](https://github.com/cnapy-org/CNApy/releases/latest).",
        "html_url": "https://github.com/cnapy-org/CNApy/releases/tag/v1.0.5",
        "name": "CNApy 1.0.5",
        "release_id": 53084624,
        "tag": "v1.0.5",
        "tarball_url": "https://api.github.com/repos/cnapy-org/CNApy/tarball/v1.0.5",
        "type": "Release",
        "url": "https://api.github.com/repos/cnapy-org/CNApy/releases/53084624",
        "value": "https://api.github.com/repos/cnapy-org/CNApy/releases/53084624",
        "zipball_url": "https://api.github.com/repos/cnapy-org/CNApy/zipball/v1.0.5"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "Paulocracy",
          "type": "User"
        },
        "date_created": "2021-10-05T08:41:01Z",
        "date_published": "2021-10-05T08:43:39Z",
        "description": "*Note if you're using the CNApy-dev Anaconda environment: Since the CNApy's Anaconda environment requirements are changed with this release, it is recommended to create CNApy's Anaconda enviroment again, e.g. by deleting the old environment and creating a new one.*\r\n\r\n# New features\r\n* In the reactions view, lower and upper bounds are now shown in respective columns. After performing an FVA, the FVA results are shown in these columns.\r\n* In a metabolite's view, the metabolite-associated reactions are now listed with their full reaction string. By double-clicking on any metabolite in the reaction string, the view automatically switches to the metabolite. By double-clicking on the reaction name, the view switches to the reaction.\r\n* Reaction and metabolite identifiers can now be checked using the identifiers.org API. If a key or an identifier is invalid according to identifiers.org, it is marked red. Note: Sometimes, identifiers.org's API marks obviously invalid IDs as valid.\r\n* Scenarios can now be merged using the \"Merge scenario...\" option in the Scenario menu tab.\r\n\r\n# Bug fixes\r\n* Fixed a potential error when opening the MCS calculation window.\r\n* Fixed issues with multi-reaction selection.\r\n\r\n# Further changes\r\n* optlang is now the default solver interface for MCS calculations\r\n\r\n# Install\r\n\r\nThere are two ways to install CNApy:\r\n\r\n1. Under any operating system, by installing CNApy as a conda package (see [https://github.com/cnapy-org/CNApy#install-cnapy-with-conda](https://github.com/cnapy-org/CNApy#install-cnapy-with-conda))\r\n2. As an alternative installation way under Windows, by using the .exe installer attached to [CNApy's latest release](https://github.com/cnapy-org/CNApy/releases/latest).",
        "html_url": "https://github.com/cnapy-org/CNApy/releases/tag/v1.0.4",
        "name": "CNApy 1.0.4",
        "release_id": 50797495,
        "tag": "v1.0.4",
        "tarball_url": "https://api.github.com/repos/cnapy-org/CNApy/tarball/v1.0.4",
        "type": "Release",
        "url": "https://api.github.com/repos/cnapy-org/CNApy/releases/50797495",
        "value": "https://api.github.com/repos/cnapy-org/CNApy/releases/50797495",
        "zipball_url": "https://api.github.com/repos/cnapy-org/CNApy/zipball/v1.0.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "Paulocracy",
          "type": "User"
        },
        "date_created": "2021-08-30T14:06:19Z",
        "date_published": "2021-08-30T14:13:53Z",
        "description": "### New features\r\n* The README is extended and now including the setting of the PYTHONNOUSERSITE variable\r\n* Errors in written target/desired regions of MCS will now be printed to the user in a pop-up window with a detailed error description\r\n\r\n### Bug fixes for the following issues\r\n#311, #310, #307 and #305",
        "html_url": "https://github.com/cnapy-org/CNApy/releases/tag/v1.0.3",
        "name": "CNApy 1.0.3",
        "release_id": 48677458,
        "tag": "v1.0.3",
        "tarball_url": "https://api.github.com/repos/cnapy-org/CNApy/tarball/v1.0.3",
        "type": "Release",
        "url": "https://api.github.com/repos/cnapy-org/CNApy/releases/48677458",
        "value": "https://api.github.com/repos/cnapy-org/CNApy/releases/48677458",
        "zipball_url": "https://api.github.com/repos/cnapy-org/CNApy/zipball/v1.0.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "Paulocracy",
          "type": "User"
        },
        "date_created": "2021-08-25T15:39:50Z",
        "date_published": "2021-08-25T15:49:40Z",
        "description": "* Better Elementary Mode and Minimal Cut Set navigation (as described in the manual)\r\n* Added abort option for EFMtool computation\r\n* New metabolic models\r\n* Fix reaction bound setting bug\r\n* Fix MCS window setting bug\r\n* Several further bug fixes",
        "html_url": "https://github.com/cnapy-org/CNApy/releases/tag/v1.0.2",
        "name": "CNApy 1.0.2",
        "release_id": 48440257,
        "tag": "v1.0.2",
        "tarball_url": "https://api.github.com/repos/cnapy-org/CNApy/tarball/v1.0.2",
        "type": "Release",
        "url": "https://api.github.com/repos/cnapy-org/CNApy/releases/48440257",
        "value": "https://api.github.com/repos/cnapy-org/CNApy/releases/48440257",
        "zipball_url": "https://api.github.com/repos/cnapy-org/CNApy/zipball/v1.0.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "Paulocracy",
          "type": "User"
        },
        "date_created": "2021-08-20T13:31:31Z",
        "date_published": "2021-08-20T13:34:45Z",
        "description": "*Beta release*",
        "html_url": "https://github.com/cnapy-org/CNApy/releases/tag/v1.0.1",
        "name": "CNApy 1.0.1",
        "release_id": 48182069,
        "tag": "v1.0.1",
        "tarball_url": "https://api.github.com/repos/cnapy-org/CNApy/tarball/v1.0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/cnapy-org/CNApy/releases/48182069",
        "value": "https://api.github.com/repos/cnapy-org/CNApy/releases/48182069",
        "zipball_url": "https://api.github.com/repos/cnapy-org/CNApy/zipball/v1.0.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sthiele",
          "type": "User"
        },
        "date_created": "2021-06-24T12:59:17Z",
        "date_published": "2021-06-11T12:03:00Z",
        "description": "# Install\r\n\r\nThe easiest way to install CNApy is using [conda](https://docs.conda.io/en/latest/). First [install conda](https://docs.conda.io/projects/conda/en/latest/user-guide/install/index.html) and then:\r\n\r\n* Create a conda environment with all dependencies\r\n```\r\nconda create -n cnapy-1.0.0 -c conda-forge -c cnapy cnapy=1.0.0\r\n```\r\n\r\n* Activate the cnapy conda environment\r\n```\r\nconda activate cnapy-1.0.0\r\n```\r\n* Run CNApy\r\n```\r\ncnapy\r\n```\r\n\r\nOn windows you may also use the [graphical installer](https://github.com/cnapy-org/CNApy/releases/download/v1.0.0/CNApy-1.0.0-Windows-x86_64.exe).\r\n\r\nPlease make sure you have a steady internet connection while the installer downloads all dependencies.\r\n\r\nA collection of CNApy projects is available at [https://github.com/cnapy-org/CNApy-projects/releases/latest/](https://github.com/cnapy-org/CNApy-projects/releases/latest/).\r\n\r\n",
        "html_url": "https://github.com/cnapy-org/CNApy/releases/tag/v1.0.0",
        "name": "CNApy 1.0.0",
        "release_id": 44475545,
        "tag": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/cnapy-org/CNApy/tarball/v1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/cnapy-org/CNApy/releases/44475545",
        "value": "https://api.github.com/repos/cnapy-org/CNApy/releases/44475545",
        "zipball_url": "https://api.github.com/repos/cnapy-org/CNApy/zipball/v1.0.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 01:04:17",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 44
      },
      "technique": "GitHub_API"
    }
  ],
  "support_channels": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://gitter.im/cnapy-org/community"
      },
      "source": "https://raw.githubusercontent.com/cnapy-org/CNApy/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Documentation and Tutorials",
        "parent_header": [
          "CNApy: An integrated environment for metabolic modeling"
        ],
        "type": "Text_excerpt",
        "value": "- The [CNApy guide](https://cnapy-org.github.io/CNApy-guide/) contains information for all major functions of CNApy.\n- Our [CNApy YouTube channel](https://www.youtube.com/channel/UCRIXSdzs5WnBE3_uukuNMlg) provides some videos of working with CNApy.\n- We also provide directly usable [CNApy example projects](https://github.com/cnapy-org/CNApy-projects/releases/latest) which include some of the most common *E. coli* models. These projects can also be downloaded within CNApy at its first start-up or via CNApy's File menu.\n"
      },
      "source": "https://raw.githubusercontent.com/cnapy-org/CNApy/master/README.md",
      "technique": "header_analysis"
    }
  ]
}