{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "How to cite VarGen:",
        "parent_header": [
          "VarGen"
        ],
        "type": "Text_excerpt",
        "value": "Corentin Molitor, Matt Brember, Fady Mohareb, VarGen: An R package for disease-associated variant discovery and annotation, Bioinformatics, Early Online, btz930, https://doi.org/10.1093/bioinformatics/btz930\n"
      },
      "source": "https://raw.githubusercontent.com/MCorentin/VarGen/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/MCorentin/vargen"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-09-19T14:16:09Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-05T09:36:17Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "VarGen is an R package designed to get a list of variants related to a disease. It just need an OMIM morbid ID as input  and optionally a list of tissues / gwas traits of interest to complete the results. You can also use your own customised list of genes. VarGen is capable of annotating the variants to help you identify the most  impactful ones."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9327396943318069,
      "result": {
        "original_header": "VarGen",
        "type": "Text_excerpt",
        "value": "VarGen is an R package designed to get a list of variants related to a disease. It just need an OMIM morbid ID as input \nand optionally a list of tissues / gwas traits of interest to complete the results. You can use your own customised list \nof genes instead of an OMIM ID. VarGen is also capable of annotating the variants to help you rank and identify the most \nimpactful ones. \nAll the coordinates are based on the hg38 version of the human genome. \nVarGen is open-source and available on [GitHub](https://github.com/MCorentin/vargen \"GitHub VarGen page\")\n \n"
      },
      "source": "https://raw.githubusercontent.com/MCorentin/VarGen/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9322015140820261,
      "result": {
        "original_header": "Funding",
        "type": "Text_excerpt",
        "value": "Vargen was developed as part of the European Union\u2019s Horizon 2020-funded project Nutrishield (GA 818110). For more information about the Nutrishield project, please visit [the Nutrishield Webpage](https://nutrishield-project.eu)\n \n"
      },
      "source": "https://raw.githubusercontent.com/MCorentin/VarGen/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.966981974680055,
      "result": {
        "original_header": "VarGen workflow",
        "type": "Text_excerpt",
        "value": "This pipeline is centred on the genes linked to the disease of interest in the Online Mendelian Inheritance in Man \n(subsequently called the \"OMIM genes\"). VarGen is designed as a discovery tool, if you want a more specific pipeline see\n\"VarPhen\" in \"Alternative pipelines\". \nVarGen outputs variants from the following sources:\n- **OMIM:** Variants located directly on the \"OMIM genes\".\n- **FANTOM5:** Variants located on the enhancers / promoters of the \"OMIM genes\".\n- **GTEx:** Variants associated with a change in expression for the \"OMIM genes\", in certain tissues. Currently GTEx v7 \nand v8 are supported.\n- **GWAS catalog:** Variants associated with the phenotype of interest. \n"
      },
      "source": "https://raw.githubusercontent.com/MCorentin/VarGen/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9430895460134229,
      "result": {
        "original_header": "VarPhen",
        "type": "Text_excerpt",
        "value": "A more specific, alternative pipeline is available as part of this package, called \"VarPhen\", it outputs a smaller list \nof variants, but directly related to the disease of interest. It relies on biomaRt to link variants to phenotypes. \nExample with obesity:\n````\n# First connect to snp ensembl\nsnp_mart <- connect_to_snp_ensembl()\n\nobesity_phens <- get_phenotype_terms(keyword = \"obesity\", \n                                     snp_mart = snp_mart)\n\nobesity_varphen <- get_variants_from_phenotypes(phenotypes = obesity_phens, \n                                                snp_mart = snp_mart)\n\nobesity_varphen_annotation <- annotate_variants(obesity_varphen$refsnp_id)\n\n# /!\\ contrary to vargen, here you need to specify which columns to merge\n# \"refsnp_id\" for varphen, and \"rsid\" for the annotation.\nobesity_varphen_annotated <- merge(obesity_varphen, \n                                   obesity_varphen_annotation, \n                                   by.x = \"refsnp_id\", by.y = \"rsid\")\n```` \n"
      },
      "source": "https://raw.githubusercontent.com/MCorentin/VarGen/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9905752080623107,
      "result": {
        "original_header": "Customised list of genes",
        "type": "Text_excerpt",
        "value": "If instead of an OMIM id you are interested in a specific list of genes, you can use the *vargen_custom* function with a \nlist of ensembl gene ids. This take the same input as vargen_pipeline (except the omim id) and follow the same workflow\n(variants on genes, promoters, gtex and gwas). \n"
      },
      "source": "https://raw.githubusercontent.com/MCorentin/VarGen/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.980074086389256,
      "result": {
        "original_header": "How to plot the gwas variants",
        "type": "Text_excerpt",
        "value": "The two thresholds, suggestive and significant, correspond to the definition given by Lander and Kruglyak:\n````\nLander E, Kruglyak L. Genetic dissection of complex traits: guidelines for interpreting and reporting linkage results. Nat Genet. 1995;11(3):241-7.\n````\n \n"
      },
      "source": "https://raw.githubusercontent.com/MCorentin/VarGen/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9602763009109698,
      "result": {
        "original_header": "ensembl mirrors",
        "type": "Text_excerpt",
        "value": "It means that the ensembl server you are trying to access is not available (by \ndefault VarGen tries to access the \"www\" mirror of ensembl). \nTo solve this issue, you can try to connect with a different mirror (\"useast\", \"uswest\" or \"asia\"):\n````\ngene_ensembl <- connect_to_gene_ensembl(mirror = \"useast\")\n````\n \n"
      },
      "source": "https://raw.githubusercontent.com/MCorentin/VarGen/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9106179590767928,
      "result": {
        "original_header": "GTEx InDels (prior to VarGen v0.1.6)",
        "type": "Text_excerpt",
        "value": "Since VarGen was using the position to translate the GTEx id to rsid, \"convert_gtex_to_rsids\" did not work for InDels. \nThis was corrected in VarGen v0.1.3 (commit: 2ed3488d5976275104647eeae2c87a5f759a0c1a) and now the correct rsids are \nretrieved.  \n**Update:** Since VarGen v0.1.6, the GTEx rsids are retrieved from a lookup table, so this issue is now irrelevant.\n \n"
      },
      "source": "https://raw.githubusercontent.com/MCorentin/VarGen/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/MCorentin/VarGen/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/MCorentin/vargen/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MCorentin/vargen"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "VarGen"
      },
      "source": "https://raw.githubusercontent.com/MCorentin/VarGen/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MCorentin/VarGen/master/./images/Example_output_VarGen.PNG?raw=true"
      },
      "source": "https://raw.githubusercontent.com/MCorentin/VarGen/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MCorentin/VarGen/master/./images/VarPhen_workflow.png?raw=true"
      },
      "source": "https://raw.githubusercontent.com/MCorentin/VarGen/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MCorentin/VarGen/master/./images/Example_output_VarPhen.PNG?raw=true"
      },
      "source": "https://raw.githubusercontent.com/MCorentin/VarGen/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MCorentin/VarGen/master/./images/manhattan_alzheimer.png?raw=true"
      },
      "source": "https://raw.githubusercontent.com/MCorentin/VarGen/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MCorentin/VarGen/master/./images/SIM1_ENSG00000112246_GVIZ.png?raw=true"
      },
      "source": "https://raw.githubusercontent.com/MCorentin/VarGen/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MCorentin/VarGen/master/./images/SIM1_ENSG00000112246_GVIZ_highlighted.png?raw=true"
      },
      "source": "https://raw.githubusercontent.com/MCorentin/VarGen/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Install VarGen with devtools",
        "parent_header": [
          "VarGen",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "The easiest way to get VarGen is to install it directly from R using \u201cdevtools\u201d:\n````\ninstall.packages(\"devtools\")\nlibrary(devtools)\ninstall_github(repo = \"MCorentin/vargen\", dependencies = TRUE)\nlibrary(vargen)\n````\n"
      },
      "source": "https://raw.githubusercontent.com/MCorentin/VarGen/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Install VarGen from source",
        "parent_header": [
          "VarGen",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "Alternatively you can clone the GitHub repository:\n````\ngit clone https://github.com/MCorentin/vargen\n````\nThen open R and install the package script from source:\n````\nlibrary(utils)\ninstall.packages(\"./vargen/\", repos = NULL, type = \"source\")\n````\n"
      },
      "source": "https://raw.githubusercontent.com/MCorentin/VarGen/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Obtaining the local files",
        "parent_header": [
          "VarGen",
          "Preparing the input"
        ],
        "type": "Text_excerpt",
        "value": "VarGen is fetching data from public databases, it needs the following files (they should all be in the same folder). \nThe easiest way to get them is to use the *vargen_install* function from this package. The list of files obtained by \nthe function is available below (with their approximate sizes and the links to download them manually).\n**note:** The installation can take a while, especially for the GTEx files.\n\n````\nvargen_install(install_dir = \"./vargen_data\", gtex_version = \"v8\", verbose = T)\n````\n\nAlternatively, they can be installed manually (the approximate size of every file is written in parenthesis next to the filename):\n\n - __enhancer_tss_associations.bed__ (~10 Mb), this is the enhancer to transcript start site association file from FANTOM5. \n (available at:  http://enhancer.binf.ku.dk/presets/enhancer_tss_associations.bed)\n \n - __hg19ToHg38.over.chain__ (~500 kb), some databases are still using information from the human reference genome \"hg19\". VarGen \n will use this file to liftover the information to \"hg38\" (available at: http://hgdownload.cse.ucsc.edu/goldenPath/hg19/liftOver/hg19ToHg38.over.chain.gz)\n\n- __GTEx_Analysis_v8_eQTL__ (~1.45 Gb), a folder containing the significant variant gene pairs from the Genotype-Tissues Expression \ndatabase (GTEx) (available at: https://gtexportal.org/home/datasets). v7 and v8 are supported by VarGen.\n    \n    Direct link for v7: https://storage.googleapis.com/gtex_analysis_v7/single_tissue_eqtl_data/GTEx_Analysis_v7_eQTL.tar.gz\n\n    Direct link for v8: https://storage.googleapis.com/gtex_analysis_v8/single_tissue_qtl_data/GTEx_Analysis_v8_eQTL.tar\n\n- __GTEx_Analysis_2017-06-05_v8_WholeGenomeSeq_838Indiv_Analysis_Freeze.lookup_table.txt.gz__ (~800 Mb), this is a lookup table between GTEx ids and rsids. Contains GTEx ids for v7 and v8.\n\n    Direct link: https://storage.googleapis.com/gtex_analysis_v8/reference/GTEx_Analysis_2017-06-05_v8_WholeGenomeSeq_838Indiv_Analysis_Freeze.lookup_table.txt.gz\n\n- __gwas catalog file__ (~90 Mb), this is an optional file. Depending on your connection, creating the lastest gwas catalog using \n*makeCurrentGwascat* function can take a long time. You can instead download a gwas catalog file from http://www.ebi.ac.uk/gwas/api/search/downloads/alternative \nand give it as input for the VarGen pipeline. \n\n**note:** VarGen will use the name of the file to get the extract date, so it needs to be in the format: \n\\[filename\\]_r**YYYYY**-**MM**-**DD**.tsv\n"
      },
      "source": "https://raw.githubusercontent.com/MCorentin/VarGen/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9944652900088422,
      "result": {
        "original_header": "VarPhen",
        "type": "Text_excerpt",
        "value": "**note:** You will need to specify the columns to merge the results from VarPhen (\"redsnp_id\") and the annotation (\"rsid\").\ncf: the example below. \n"
      },
      "source": "https://raw.githubusercontent.com/MCorentin/VarGen/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9209365351811194,
      "result": {
        "original_header": "ensembl mirrors",
        "type": "Text_excerpt",
        "value": "If you come accross the following error when trying to use VarGen:\n````\nError in bmRequest(request = request, ssl.verifypeer = ssl.verifypeer,  : \n  Internal Server Error (HTTP 500).\n```` \nTo solve this issue, you can try to connect with a different mirror (\"useast\", \"uswest\" or \"asia\"):\n````\ngene_ensembl <- connect_to_gene_ensembl(mirror = \"useast\")\n````\n \n"
      },
      "source": "https://raw.githubusercontent.com/MCorentin/VarGen/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8374124763588849,
      "result": {
        "original_header": "GTEx InDels (prior to VarGen v0.1.6)",
        "type": "Text_excerpt",
        "value": "**Update:** Since VarGen v0.1.6, the GTEx rsids are retrieved from a lookup table, so this issue is now irrelevant.\n \n"
      },
      "source": "https://raw.githubusercontent.com/MCorentin/VarGen/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.896828315056629,
      "result": {
        "original_header": "VarPhen",
        "type": "Text_excerpt",
        "value": "Output example:\n![VarPhen output](./images/Example_output_VarPhen.PNG?raw=true)\n \n"
      },
      "source": "https://raw.githubusercontent.com/MCorentin/VarGen/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8677982509526866,
      "result": {
        "original_header": "Customised list of genes",
        "type": "Text_excerpt",
        "value": "Example:\n````\nadipose_tissues <- select_gtex_tissues(\"./vargen_data/GTEx_Analysis_v8_eQTL/\", \n                                       \"adipose\")\n\ngwas_cat <- create_gwas(\"./vargen_data\")\nobesity_traits <- list_gwas_traits(\"obesity\", gwas_cat)\n\nobesity_custom <- vargen_custom(vargen_dir = \"./vargen_data/\", \n                                gene_ids = c(\"ENSG00000155846\", \"ENSG00000115138\"), \n                                outdir = \"./\", \n                                gtex_tissues = adipose_tissues, \n                                gwas_traits = obesity_traits, \n                                verbose = T)\n````\n \n"
      },
      "source": "https://raw.githubusercontent.com/MCorentin/VarGen/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/MCorentin/vargen/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2019 Molitor Corentin\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/MCorentin/VarGen/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MCorentin/VarGen/master/./images/VarGen_workflow.png?raw=true"
      },
      "source": "https://raw.githubusercontent.com/MCorentin/VarGen/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "vargen"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "MCorentin"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 93214,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MCorentin/VarGen/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependencies",
        "parent_header": [
          "VarGen",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "VarGen needs the following:\n- **R** (tested on version 3.6)\n- **An internet connection**\n- **The following R libraries:** (The number is the version tested during development)\n```` \n    Bioconductor (3.9)      biomaRt (2.40.3)        gtools (3.8.1)         \n    gwascat (2.16.0)        jsonlite (1.6)          GenomeInfoDb (1.20.0)\n    IRanges (2.18.1)        httr (1.4.1)            BiocGenerics (0.30.0)\n    stringr (1.4.0)         utils (3.6.0)           splitstackshape (1.4.8)\n    ggplot2 (3.2.1)         rtracklayer (1.44.2)    BiocManager (1.30.4)\n    R.utils (2.9.0)         myvariant (1.14.0)      GenomicRanges (1.36.0)\n    data.table (1.12.8)\n````\n\n- Optional R libraries (needed for the visualisation functions: *vargen_visualisation* and *plot_manhattan_gwas*):\n````\n    Gviz (1.28.1)           ggbio (>= 1.32.0)\n````\n\nTo install the dependencies you can use the following command in R (it might take a while depending on your connection):\n````\n# If not already installed\ninstall.packages(\"BiocManager\")\n\nBiocManager::install(c(\"biomaRt\", \"gtools\", \"GenomicRanges\", \"gwascat\", \"jsonlite\",\n                       \"GenomeInfoDb\", \"IRanges\", \"httr\", \"BiocGenerics\", \"stringr\",\n                       \"utils\", \"splitstackshape\", \"ggplot2\", \"rtracklayer\",\n                       \"R.utils\", \"myvariant\", \"data.table\"), dependencies = TRUE)\n````\n**note:** \"R.methodsS3\" and \"R.oo\" will be installed as dependencies of \"R.utils\"\n"
      },
      "source": "https://raw.githubusercontent.com/MCorentin/VarGen/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 17:06:24",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 14
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Getting the OMIM id",
        "parent_header": [
          "VarGen",
          "Preparing the input"
        ],
        "type": "Text_excerpt",
        "value": "The OMIM morbid ID is the starting point of the pipeline, from it VarGen will get the genes associated to the disease. You \ncan obtain it from the OMIM website https://omim.org/ or using the *list_omim_accessions* function. In our case we will \nuse \u201cobesity leanness included\u201d (OMIM id: 601665).\n\n````\ngene_mart <- connect_to_gene_ensembl()\nView(list_omim_accessions(gene_mart))\n\n# You can search using list of keywords as well:\nlist_omim_accessions(gene_mart, c(\"alzheimer\", \"neurodegeneration\"))\n\n#>      mim_morbid_accession    mim_morbid_description\n#> [1]  606889                  ALZHEIMER DISEASE 4;;AD4;;ALZHEIMER DISEASE, FAMILIAL, 4\n#> [2]  618476                  BRAIN ABNORMALITIES, NEURODEGENERATION, AND DYSOSTEOSCLEROSIS;BANDDOS\n#> [3]  615643                  NEURODEGENERATION WITH BRAIN IRON ACCUMULATION 6; NBIA6\n#> [4]  618276                  NEURODEGENERATION, CHILDHOOD-ONSET, WITH CEREBELLAR ATROPHY; CONDCA\n#> [5]  618278                  FIBROSIS, NEURODEGENERATION, AND CEREBRAL ANGIOMATOSIS; FINCA\n#> ...\n````\n"
      },
      "source": "https://raw.githubusercontent.com/MCorentin/VarGen/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Getting the GTEx tissues",
        "parent_header": [
          "VarGen",
          "Preparing the input"
        ],
        "type": "Text_excerpt",
        "value": "This database will be used to get tissue-specific variants that are affecting the expression of the genes related to the \ndisease. You can obtain the list of files with the *list_gtex_tissues* function.\n\n````\nlist_gtex_tissues(gtex_dir = \"./vargen_data/GTEx_Analysis_v8_eQTL/\")\n\n#>      keywords                     filepaths\n#> [1]  Adipose_Subcutaneous         vargen_data/GTEx_Analysis_v8_eQTL/Adipose_Subcutaneous.v8.signif_variant_gene_pairs.txt.gz\n#> [2]  Adipose_Visceral_Omentum     vargen_data/GTEx_Analysis_v8_eQTL/Adipose_Visceral_Omentum.v8.signif_variant_gene_pairs.txt.gz\n#> [3]  Adrenal_Gland                vargen_data/GTEx_Analysis_v8_eQTL/Adrenal_Gland.v8.signif_variant_gene_pairs.txt.gz\n#> [4]  Artery_Aorta                 vargen_data/GTEx_Analysis_v8_eQTL/Artery_Aorta.v8.signif_variant_gene_pairs.txt.gz\n#> ...\n````\n\nTo select the GTEx tissues of interest you can use the *select_gtex_tissues* function, for our case we will use the \nadipose tissues (subcutaneous and visceral): \n\n````\nadipose_tissues <- select_gtex_tissues(\"./vargen_data/GTEx_Analysis_v8_eQTL/\", \"adipose\")\nadipose_tissues\n\n#> [1] \"./vargen_data/GTEx_Analysis_v8_eQTL/Adipose_Subcutaneous.v8.signif_variant_gene_pairs.txt.gz\"    \n#> [2] \"./vargen_data/GTEx_Analysis_v8_eQTL/Adipose_Visceral_Omentum.v8.signif_variant_gene_pairs.txt.gz\"\n````\n"
      },
      "source": "https://raw.githubusercontent.com/MCorentin/VarGen/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Getting the gwas traits",
        "parent_header": [
          "VarGen",
          "Preparing the input"
        ],
        "type": "Text_excerpt",
        "value": "The gwas traits will be used to get associated variants in the gwas catalog (https://www.ebi.ac.uk/gwas/). \nYou can search the available gwas traits by keyword with the *list_gwas_traits* function. Here we are going to use a local \ngwas catalog file. \n\n````\ngwas_cat <- create_gwas(\"./vargen_data\")\nobesity_traits <- list_gwas_traits(\"obesity\", gwas_cat)\nobesity_traits\n\n#>  [1] \"Obesity (extreme)\"\n#>  [2] \"Obesity-related traits\"\n#>  [3] \"Obesity\"\n#>  [4] \"Obesity (early onset extreme)\"\n#>  [5] \"Obesity in adult survivors of childhood cancer exposed to cranial radiation\"\n#>  [6] \"Obesity in adult survivors of childhood cancer not exposed to cranial radiation\"\n#>  [7] \"Bilirubin levels in extreme obesity\"\n#>  [8] \"Type 2 diabetes (young onset) and obesity\"\n#>  [9] \"Obesity and osteoporosis\"\n#> [10] \"Hepatic lipid content in extreme obesity\"\n#> [11] \"Hyperinsulinemia in obesity\"\n````\n"
      },
      "source": "https://raw.githubusercontent.com/MCorentin/VarGen/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Launching the pipeline",
        "parent_header": [
          "VarGen",
          "How to use VarGen"
        ],
        "type": "Text_excerpt",
        "value": "VarGen main entry point is the *vargen_pipeline* function.\n\nThe mandatory inputs are:\n- The folder with the installed files, \"./vargen_data/\" in our case (see \"Obtaining the local files\")\n- A OMIM morbid id, \u201c601665\u201d in our case (see \"Getting the OMIM id\").\n- An output directory, where information about the variants and the genes will be written. The default is the current directory \u201c./\u201d.\n\nThe optional inputs are:\n- A fantom5 correlation threshold, the higher it is, the stricter you are about association between genes and enhancers. \nThe default is 0.25\n- A list of GTEx tissues (see \"Getting the GTEx tissues\")\n- A list of gwas traits (see \"Getting the gwas traits\")\n\nNow we can launch the pipeline with all the input data:\n````\nadipose_tissues <- select_gtex_tissues(\"./vargen_data/GTEx_Analysis_v8_eQTL/\", \n                                       \"adipose\")\n\ngwas_cat <- create_gwas(\"./vargen_data\")\nobesity_traits <- list_gwas_traits(\"obesity\", gwas_cat)\n\nobesity_variants <- vargen_pipeline(vargen_dir = \"./vargen_data/\", \n                                    omim_morbid_ids = \"601665\", \n                                    gtex_tissues = adipose_tissues, \n                                    gwas_traits = obesity_traits, \n                                    verbose = T)\n````\n\nYou will obtain a data.frame with the list of variants, their position on GRCh38, the ensembl id and hgnc gene symbol of\nthe gene associated with the variant and the source (omim, fantom5, gtex or gwas). For gtex, the name of the tissue from\nwhich the variant was found is written in parenthesis, for example: \"gtex (Adipose_Subcutaneous)\"\n\n````\n#  chr     pos         rsid           ensembl_gene_id    hgnc_symbol  source\n#> chr2    25160855    rs777983882    ENSG00000115138    POMC         omim\n#> chr2    25160866    rs1480805741   ENSG00000115138    POMC         omim\n#> chr2    25160871    rs1245939527   ENSG00000115138    POMC         omim\n#> chr2    25160872    rs1219237056   ENSG00000115138    POMC         omim\n#> chr2    25160877    rs1453226041   ENSG00000115138    POMC         omim\n#> chr2    25160879    rs566456581    ENSG00000115138    POMC         omim\n...\n#> chr5    96442329    rs6879048      ENSG00000175426    PCSK1        gtex (Adipose_Visceral_Omentum)\n````\n"
      },
      "source": "https://raw.githubusercontent.com/MCorentin/VarGen/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Annotating the variants",
        "parent_header": [
          "VarGen",
          "How to use VarGen"
        ],
        "type": "Text_excerpt",
        "value": "This pipeline is designed as a discovery analysis, to identify potential new variants, **you should not expect every variants from the pipeline to have an effect on the phenotype**. \nAnnotating the variants will help you defining which variants to keep or discard. To annotate the variants you can use \nthe *annotate_variants* function with the list of rsids obtained with the vargen pipeline. This uses [myvariant.info](https://myvariant.info/, \"myvariant.info main page\") \nto annotate the variants and may take some time depending on your internet connection.\n\nThe annotation contains:\n - **ref**: the reference allele in the human reference (GRCh38)\n - **alt**: the alternative reference for this rsid. Some rsid are multi-allelic and\n can have more than one alternative allele. In this case VarGen creates one line \n per alternative allele and annotates them separately (as some alleles are more \n deleterious than others for a single rsid).\n - [CADD Phred score](https://cadd.gs.washington.edu/ \"CADD main page\"): ranging from 1 to 99, based on the rank of each variant relative to all possible 8.6 billion substitutions in the human reference genome.  A higher value means a more deleterious variant. (above 10 means the variant is in the top 10%, above 20 in the top 1%).\n - [fathmm-xf score](https://academic.oup.com/bioinformatics/article/34/3/511/4104409 \"fathmm-xf manuscript\"): between 0 and 1, a higher value means a more deleterious variant. (more confidence closer to 0 or 1)\n - [fathmm-xf prediction](https://academic.oup.com/bioinformatics/article/34/3/511/4104409 \"fathmm-xf manuscript\"): \"D\" (DAMAGING) if score > 0.5 or \"N\" (NEUTRAL) otherwise.\n - **Annotation type**: information about the variant location (eg: coding, non-coding, regulatory region...)\n - **Consequence**: gives more information on the functional effect (eg: REGULATORY, DOWNSTREAM, STOP_GAINED, SPLICE-SITE...)\n - [ClinVar clinical significance](https://www.ncbi.nlm.nih.gov/clinvar/docs/clinsig/ \"Representation of clinical significance in ClinVar and other variation resources at NCBI\"): standard to report the clinical significance of certain variants (eg: \"benign\", \"pathogenic\", \"drug response\" etc....). \n - [snpEff impact](http://snpeff.sourceforge.net/SnpEff_manual.html \"snpEff Manual\"): assessment of the putative impact of the variant (HIGH, MODERATE, MODIFIER or LOW).\n\n**/!\\ The alternative allele is not always the risk allele (it can be the reference allele, meaning that the majority of the population is carrying the risk).**\n\n````\nobesity_annotation <- annotate_variants(obesity_variants$rsid, verbose = T)\n\n# Merging the output of the annotation with VarGen output, using the \"rsid\" column\nobesity_ann <- merge(obesity_variants, obesity_annotation)\n\n# We advise you to write the variants in a file, so you will not have to run the pipeline again.\nwrite.table(x = obesity_ann, quote = FALSE, row.names = FALSE,\n            file = \"./OMIM_601665/vargen_variants_annotated.tsv\", sep = \"\\t\")\n````\n\nOutput after annotation:\n![Output after annotation](./images/Example_output_VarGen.PNG?raw=true)\n"
      },
      "source": "https://raw.githubusercontent.com/MCorentin/VarGen/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Filtering the variants",
        "parent_header": [
          "VarGen",
          "How to use VarGen"
        ],
        "type": "Text_excerpt",
        "value": "As VarGen is outputting a lot of variants, you may want to filter the results. The filtering strategy is dependent on \nyour preferences. VarGen outputs an R data.frame containing information about each variant. You can focus on clinically \nsignificant variants (\"pathogenic\", \"likely pathogenic\" etc...), on variants with a high phred score etc...\n\nYou can even combine different filtering, for example we found that keeping all the variants from the gwas catalog and\nwith clinical significance while removing the variants with a cadd phred score lower than 10 was removing a lot of \npotentially false positive results:\n````\nvargen_phred_10 <- obesity_ann [obesity_ann$cadd_phred > 10,]\nvargen_phred_10 <- vargen_phred_10[!is.na(vargen_phred_10$cadd_phred),]\n\nvargen_clinVar <- obesity_ann [obesity_ann$clinical_significance != \"\",]\n\nvargen_gwas <- obesity_ann[obesity_ann$source == \"gwas\",]\n\n#Concatenating the different filtering\nobesity_filtered <- rbind(vargen_phred_10, vargen_clinVar, vargen_gwas)\t\n````\n"
      },
      "source": "https://raw.githubusercontent.com/MCorentin/VarGen/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "How to get gwas variants only",
        "parent_header": [
          "VarGen",
          "Tips"
        ],
        "type": "Text_excerpt",
        "value": "If you are only interested in the gwas variants, you can use the following commands:\n\n````\ngwas_cat <- create_gwas()\n\n# This will list the gwas traits with \"alzheimer\":\nlist_gwas_traits(keywords = \"alzheimer\", gwas_cat = gwas_cat)\n\n# Selecting some gwas traits of interest:\nalzheimer_traits <- c(\"Alzheimer's disease\", \"Alzheimer's disease (late onset)\", \"Alzheimer's disease (cognitive decline)\")\n\n# This will get the variants from the selected traits:\ngwas_variants <- get_gwas_variants(gwas_cat = gwas_cat, gwas_traits = alzheimer_traits)\n\n# If you want more details about the variants you can annotate them:\ngwas_variants_annotated <- annotate_variants(rsid = gwas_variants$rsid)\n````\n"
      },
      "source": "https://raw.githubusercontent.com/MCorentin/VarGen/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Some examples",
        "parent_header": [
          "VarGen"
        ],
        "type": "Text_excerpt",
        "value": "In the following example we are assuming that the files described in \"Installation\" have been installed in the folder \n\"./vargen_data\", either manually or by running:\n````\n vargen_install(\"./vargen_data\")\n````\n\n - Example 1: \"Simple query for Type 1 Diabetes Mellitus\"\n````\nT1DM_variants <- vargen_pipeline(vargen_dir = \"./vargen_data\",\n                                 omim_morbid_ids = \"222100\")\n````\n\n - Example 2: \"Type 1 Diabetes Mellitus with GTEx\"\n````\n# First select the tissues of interest (here pancreas)\n# it is possible to select more than one tissue (eg: c(\"pancreas\", \"adipose\"))\npancreas_gtex <- select_gtex_tissues(gtex_dir = \"./vargen_data/GTEx_Analysis_v8_eQTL/\",\n                                     tissues_query = \"pancreas\")\n\nT1DM_variants <- vargen_pipeline(vargen_dir = \"./vargen_data\", \n                                 omim_morbid_ids = \"222100\", \n                                 gtex_tissues = pancreas_gtex)\n````\n\n - Example 3: \"Obesity with GTEx, GWAS and annotation\"\n````\n# First select the tissues of interest (here adipose) \n# it is possible to select more than one tissue (eg: c(\"pancreas\", \"adipose\"))\nadipose_gtex <- select_gtex_tissues(gtex_dir = \"./vargen_data/GTEx_Analysis_v8_eQTL/\", \n                                    tissues_query = \"adipose\")\n\n# List the available gwas traits:\nlist_gwas_traits(keywords = \"obesity\")\n\n# Select gwas traits of interest\ngwas_obesity <- c(\"Obesity (extreme)\", \"Obesity-related traits\", \"Obesity\", \"Obesity (early onset extreme)\")\n\nObesity_variants <- vargen_pipeline(vargen_dir = \"./vargen_data\",\n                                    omim_morbid_ids = \"601665\", \n                                    gtex_tissues = adipose_gtex,\n                                    gwas_traits = gwas_obesity,\n                                    fantom_corr = 0.25, \n                                    verbose = TRUE)\n\n# Annotation of the variants obtained with the previous command:\nObesity_annotation <- annotate_variants(rsid = Obesity_variants$rsid)\n\n# Merging the original output with the annotation:\nObesity_variants_annotated <- merge(Obesity_variants, Obesity_annotation)\nView(Obesity_variants_annotated)\n````\n"
      },
      "source": "https://raw.githubusercontent.com/MCorentin/VarGen/master/README.md",
      "technique": "header_analysis"
    }
  ]
}