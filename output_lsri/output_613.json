{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/MNStokholm/GEDI"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-06-22T19:36:19Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-08-18T06:01:56Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "An R package to enable transcriptomic data integration."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9819688644956661,
      "result": {
        "original_header": "GEDI",
        "type": "Text_excerpt",
        "value": "\r\n\r\n\r\n\r\nThe aim of GEDI (Gene Expression Data Integration) is to make it easier\r\nand more straightforward to write transcriptomic data integration\r\npipelines using only four functions.\r\n\r \n"
      },
      "source": "https://raw.githubusercontent.com/MNStokholm/GEDI/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/MNStokholm/GEDI/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/MNStokholm/GEDI/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MNStokholm/GEDI"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "GEDI"
      },
      "source": "https://raw.githubusercontent.com/MNStokholm/GEDI/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MNStokholm/GEDI/main/./man/figures/flow.png"
      },
      "source": "https://raw.githubusercontent.com/MNStokholm/GEDI/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MNStokholm/GEDI/main/man/figures/README-BatchCorrection-1.png"
      },
      "source": "https://raw.githubusercontent.com/MNStokholm/GEDI/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "GEDI"
        ],
        "type": "Text_excerpt",
        "value": "\r\nYou can install the released version of GEDI from\r\n[GitHub](https://www.github.com/MNStokholm/GEDI) with:\r\n\r\n``` r\r\nlibrary(devtools)\r\n\r\n# Use devtools to install GEDI from github\r\ninstall_github(\"MNStokholm/GEDI\")\r\n```\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/MNStokholm/GEDI/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Gene Expression Datasets",
        "parent_header": [
          "GEDI",
          "Setting up the data"
        ],
        "type": "Text_excerpt",
        "value": "\r\nAll the datasets must be located in the same directory to read the gene\r\nexpression datasets with the `ReadGE()` function.\r\n\r\nA subdirectory for each dataset contains the data files. The\r\nsubdirectories\u2019 content depends on whether the dataset in question\r\ncontains Affymetrix, Agilent or RNA sequencing data (summarised in the\r\ntable below). In Affymetrix datasets, a .CEL or .CEL.gz file represents\r\nan individual sample. In Agilent datasets, the GEDI package assumes all\r\n.txt or .txt.gz files to represent a sample. The filenames `\"annot.txt\"`\r\nand `\"targets.txt\"` are exceptions to this rule. The GEDI package does\r\nnot use `\"targets.txt\"`, and `\"annot.txt\"` is an annotation file\r\ndescribed later in this section. In RNA sequencing datasets, a file\r\ncalled `\"RawCounts.txt\"` contains a table of raw counts where each\r\ncolumn is a sample. The GEDI package transforms the counts when reading\r\nthe data, so `\"RawCounts.txt\"` should not contain transformed or\r\nnormalised RNA-seq data.\r\n\r\n| Data type  | Filenames        | Description              |\r\n|:-----------|:-----------------|:-------------------------|\r\n| Affymetrix | .CEL and .CEL.gz | One file for each sample |\r\n| Agilent    | .txt and .txt.gz | One file for each sample |\r\n| RNA-seq    | \u201cRawCounts.txt\u201d  | Each column is a sample  |\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/MNStokholm/GEDI/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Annotation tables",
        "parent_header": [
          "GEDI",
          "Setting up the data"
        ],
        "type": "Text_excerpt",
        "value": "\r\nOne of the steps in transcriptomic data integration is to map all\r\nreporter IDs to gene IDs, which the `GEDI()` function does. If a dataset\r\ncontains reporter IDs not covered by the *biomaRt* package , the\r\n`GEDI()` function uses an annotation table to map the reporter IDs. A\r\nmissing or invalid annotation table results in skipping the dataset in\r\nquestion. The annotation table is a tab-separated file called\r\n`\"annot.txt\"`. This file should be in the same subdirectory as the\r\ncorresponding data files.\r\n\r\nThe annotation table in the `\"annot.txt\"` file contains two columns; see\r\nthe table below. The first column contains the reporter IDs used as row\r\nnames in the dataset. The second column contains the corresponding\r\nEnsembl or Entrez gene IDs or another type of reporter ID with a BioMart\r\nattribute. The second column\u2019s name must correspond to the BioMart\r\nattribute, e.g.\u00a0`\"ensembl_gene_id\"`. All valid BioMart attributes can be\r\nfound using the `BM_attributes()` function.\r\n\r\n| ID             | ensembl\\_gene\\_id  |\r\n|:---------------|:-------------------|\r\n| A\\_73\\_112733  | ENSBTAG00000000005 |\r\n| A\\_73\\_109892  | ENSBTAG00000000008 |\r\n| A\\_73\\_P066806 | ENSBTAG00000000009 |\r\n| A\\_73\\_113020  | ENSBTAG00000000010 |\r\n| \u2026              | \u2026                  |\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/MNStokholm/GEDI/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9063603109188699,
      "result": {
        "original_header": "Authors",
        "type": "Text_excerpt",
        "value": "\r\n-   [Mathias N. Stokholm](https://github.com/MNStokholm)\r\n    (<MNStokholm@gmail.com>)\r\n-   Maria B. Rabaglino\r\n-   Haja N. Kadarmideen (<hajak@dtu.dk>)\r\n\r \n"
      },
      "source": "https://raw.githubusercontent.com/MNStokholm/GEDI/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/MNStokholm/GEDI/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "GEDI"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "MNStokholm"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 76891,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "TeX",
        "size": 1374,
        "type": "Programming_language",
        "value": "TeX"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MNStokholm/GEDI/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 01:42:56",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "GEDI"
        ],
        "type": "Text_excerpt",
        "value": "\r\nGEDI can be used to create a transcriptomic data integration pipeline\r\nthat reads, re-annotates and merges the datasets after which the batch\r\neffect is removed. Unsupervised and supervised machine learning methods\r\nensure that the batch correction and data integration was successful.\r\nThe pipeline is visually represented by the figure below.\r\n\r\n![GEDI package flow chart](./man/figures/flow.png)\r\n\r\nThe GEDI package saves time for the user by partially automating\r\ntranscriptomic data integration and making writing a pipeline\r\nstraightforward using only four functions; `ReadGE()`, `GEDI()`,\r\n`BatchCorrection()` and `VerifyGEDI()`. The `ReadGE()` function reads\r\nall the gene expression datasets and stores them in a list. It can read\r\ndata from RNA sequencing and Affymetrix- and Agilent microarrays. The\r\n`GEDI()` function maps reporter IDs to Ensembl or Entrez gene IDs using\r\nthe *biomaRt* package and integrates the datasets into one data table.\r\nHere, reporter IDs refer to both probe IDs in microarray data and read\r\nIDs in RNA-seq data. Reporter IDs covered by the *biomaRt* package have\r\na corresponding BioMart attribute. All attributes can be found using the\r\n`BM_attributes()` function. The `BatchCorrection()` function removes the\r\nbatch effect from the integrated dataset. The BatchCorrection function\r\nverifies itself by calculating and printing the mean and standard\r\ndeviations of the gene expressions for each batch before and after the\r\nbatch correction. If the means of the batches are similar, then the\r\nbatch effect has been removed. Optionally, the verification can be\r\nsupported visually with a before/after comparison of Principal Component\r\nAnalysis (PCA) plots and RLE plots. A PCA plot is constructed to check\r\nif the data aggregates in batches, and an RLE plot is used to show the\r\ndistribution of the data. Finally, the `VerifyGEDI()` function verifies\r\nthe transcriptomic data integration using one of two classifiers to\r\npredict the samples\u2019 status in one batch based on the remaining batches\u2019\r\nsamples. Here, a sample\u2019s status refers to a variable that describes,\r\ne.g.\u00a0if the sample is sick or healthy. The status variable does not have\r\nto be binary.\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/MNStokholm/GEDI/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example pipeline",
        "parent_header": [
          "GEDI"
        ],
        "type": "Text_excerpt",
        "value": "\r\nThis section presents an example pipeline that demonstrate how to use\r\nthe GEDI package. Three datasets will be integrated; A RNA-sequencing\r\ndataset, an Affymetrix dataset and an Agilent dataset. This data used\r\ncan be seen in `\"man/examples\"` in the GitHub repository of the GEDI\r\npackage. The datasets are intentionally very small for the sake of a\r\nquick example.\r\n\r\nThe first step is to read the datasets. This is done with the `ReadGE()`\r\nfunction.\r\n\r\n``` r\r\nlibrary(GEDI)\r\n#> \r\n# Names of folders with data\r\ndataFolders <- c(\"RNAseq_data\", \"affy_data\", \"agilent_data\")\r\n# Which type of data is each dataset\r\nsources <- c(\"RNAseq\", \"affy\", \"agilent\")\r\n\r\n# Read the data\r\nPATH_TO_DATA_FOLDERS <- \"man/examples\"\r\ndatasets <- ReadGE(dataFolders, sources, path = PATH_TO_DATA_FOLDERS)\r\n#> Reading RNAseq_data...\r\n#> Reading affy_data...\r\n#> Reading agilent_data...\r\n```\r\n\r\nNext, the three datasets are integrated with the `GEDI()` function. In\r\nthis example, the datasets are re-annotated to Ensembl Gene IDs using\r\nannotation tables instead of BioMart. These annotation tables can be\r\nfound in the relevant data folders.\r\n\r\nIf we had used BioMart, the GEDI function would require BioMart\r\nattributes for each dataset as input. The RNA-sequencing dataset is\r\nalready annotated with Ensembl gene IDs, therefore it should not be\r\nre-annotated and the attribute is `\"ensembl_gene_id\"`. The BioMart\r\nattribute for the Affymetrix dataset is `\"affy_bovine\"`, but there are\r\nno attribute for the agilent dataset.\r\n\r\n``` r\r\nattr <- c(\"ensembl_gene_id\", \"affy_bovine\", NA)\r\n```\r\n\r\nTherefore, even if we used BioMart, an annotation table is required to\r\nmap this Agilent dataset. The annotation table is shown below.\r\n\r\n| ID             | ensembl\\_gene\\_id  |\r\n|:---------------|:-------------------|\r\n| A\\_73\\_112733  | ENSBTAG00000000005 |\r\n| A\\_73\\_109892  | ENSBTAG00000000008 |\r\n| A\\_73\\_P066806 | ENSBTAG00000000009 |\r\n| A\\_73\\_113020  | ENSBTAG00000000010 |\r\n| \u2026              | \u2026                  |\r\n\r\nThis table is located in the `\"agilent_data\"` folder. Now the datasets\r\ncan be integrated.\r\n\r\n``` r\r\n# The datasets are integrated. The species Bos taurus is used\r\ndat <- GEDI(datasets, attributes = attr, BioMart = TRUE,\r\n            species = \"btaurus\", path = PATH_TO_DATA_FOLDERS)\r\n#> Warning in if (!mapTo %in% validMapTo) {: the condition has length > 1 and only\r\n#> the first element will be used\r\n#> Warning in .onlyFirstElement(mapTo): 'mapTo' has length > 1. Only the first\r\n#> element, \"ensembl_gene_id\", is used\r\n#> Connecting to BioMart...\r\n#> Ensembl site unresponsive, trying useast mirror\r\n#> Ensembl site unresponsive, trying useast mirror\r\n#> Invalid BioMart attribute, NA in agilent_data\r\n#> Reading annotation file ('annot.txt') for agilent_data\r\ndim(dat)\r\n#> [1] 8328   20\r\n```\r\n\r\nThe datasets have now been integrated into one data table with 20\r\nsamples with gene expression values for 8328 Ensembl gene IDs. The next\r\nstep is to remove the batch effect. Each dataset is a batch. The RNA-seq\r\ndataset is Batch 1 (B1), Affymetrix is B2 and Agilent is B3. Each sample\r\nis either treated or a control. The `BatchCorrection()` function is used\r\nto remove the batch effect. A figure is constructed to visually verify\r\nthe batch correction.\r\n\r\n``` r\r\n# Batch and Status variables\r\nsummary(as.factor(batch))\r\n#> B1 B2 B3 \r\n#>  8  6  6\r\nsummary(as.factor(status))\r\n#> control treated \r\n#>      10      10\r\n\r\n# The batch effect is removed\r\ncData <- BatchCorrection(dat, batch, status = status)\r\n#> Found3batches\r\n#> Adjusting for0covariate(s) or covariate level(s)\r\n#> Standardizing Data across genes\r\n#> Fitting L/S model and finding priors\r\n#> Finding parametric adjustments\r\n#> Adjusting the Data\r\n#>    Before                  After                 \r\n#> B1 \"M (SD) = 8.86 (0.02)\"  \"M (SD) = 9.06 (0.02)\"\r\n#> B2 \"M (SD) = 8.06 (0.02)\"  \"M (SD) = 9.06 (0.02)\"\r\n#> B3 \"M (SD) = 10.34 (0.00)\" \"M (SD) = 9.06 (0.00)\"\r\n```\r\n\r\n<img src=\"man/figures/README-BatchCorrection-1.png\" width=\"100%\" />\r\n\r\nThe output of the BatchCorrection function clearly shows that the mean\r\ngene expression for every batch is similar after the batch correction.\r\nThe figure above shows the resulting figure from the BatchCorrection\r\nfunction. Here, the data is aggregated in batches in the Principal\r\nComponent Analysis (PCA) plot before the batch correction, and the data\r\ndistribution is uneven in the RLE plot. After the batch correction, the\r\ndata no longer aggregate in clusters, and all the samples have a similar\r\ndistribution. Based on the numeric output and the figure, the batch\r\neffect have successfully been removed.\r\n\r\nFinally, the `VerifyGEDI()` function is used to verify that the\r\nintegration of the three transcriptomic datasets have been successful.\r\nThe `VerifyGEDI()` function will attempt to predict the samples\u2019 status\r\nin on batch based on a logistic regression model trained on the\r\nremaining batches. The features (genes) used in the model are selected\r\nwith a forward stepwise selection (FSS) algorithm.\r\n\r\n``` r\r\nres <- VerifyGEDI(X = cData, y = status, batch = batch, model = \"logistic\")\r\n#> Number of features:  2 \r\n#> ENSBTAG00000003530, ENSBTAG00000000476 \r\n#> Worst score across batches:  1\r\n#> Warning: glm.fit: algorithm did not converge\r\n#> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred\r\n#> Warning: glm.fit: algorithm did not converge\r\n#> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred\r\n#> Warning: glm.fit: algorithm did not converge\r\n#> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred\r\n```\r\n\r\nThe warnings are a result of the small data size. These can be ignored\r\nfor now since it is just an example. The FSS algorithm chose a two genes\r\nas features for the logistic regression model. These genes have the\r\nEnsembl Gene IDs, ENSBTAG00000003530 and ENSBTAG00000000476. This\r\nclassifier can successfully predict a sample\u2019s status with an accuracy\r\nof 100%. Since the accuracy is high, it is concluded that the data\r\nintegration was successful.\r\n"
      },
      "source": "https://raw.githubusercontent.com/MNStokholm/GEDI/main/README.md",
      "technique": "header_analysis"
    }
  ]
}