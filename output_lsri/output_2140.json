{
  "application_domain": [
    {
      "confidence": 20.97,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ycui1-mda/abstcal"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-07-18T05:15:09Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-03-05T01:13:47Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A Python package for abstinence calculation in substance use research"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Visit Date Creation Tool",
        "parent_header": [
          "Abstinence Calculator",
          "Additional Features",
          "Pre-Processing Tools"
        ],
        "type": "Text_excerpt",
        "value": "Sometimes, we need to create extra \"virtual visit\" dates that use existing visits plus a specific number of days' difference. This is possible with that `add_additional_visit_dates` function.\n```python\nabstcal_utils.add_additional_visit_dates(\"path_to_visit.csv\", [('TQD', 'v0', 7), ('v7', 'v8', -5)], use_raw_date=True)\n```\n\nThe above example will read the long-format visit data from the specified path and add two new visit variables. The first one will be named TQD, which is equal to each subject's v0 date plus 7 days, and the other will be named v7, which is each subject's v8 date plus -5 days. The `use_raw_date` parameter just specifies whether the visit data uses raw dates or day counters.\n\n"
      },
      "source": "https://raw.githubusercontent.com/ycui1-mda/abstcal/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9955712175745987,
      "result": {
        "original_header": "Overview of the Package",
        "type": "Text_excerpt",
        "value": "This package is developed to score abstinence using the Timeline Followback (TLFB) and \nvisit data in clinical substance use research. It provides functionalities to preprocess \nthe datasets to remove duplicates and outliers. In addition, it can impute missing data \nusing various criteria.  \nIt supports the calculation of abstinence of varied definitions, \nincluding continuous, point-prevalence, and prolonged using either intent-to-treat (ITT) \nor responders-only assumption. It can optionally integrate biochemical verification data. \n"
      },
      "source": "https://raw.githubusercontent.com/ycui1-mda/abstcal/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9488657586988296,
      "result": {
        "original_header": "I. Integration of Biochemical Verification Data",
        "type": "Text_excerpt",
        "value": "If your study has collected biochemical verification data, such as carbon monoxide for smoking or breath alcohol \nconcentration for alcohol intervention, these biochemical data can be integrated into the TLFB data. In this way,\nnon-honest reporting can be identified (e.g., self-reported of no use, but biochemically un-verified), the \nself-reported value will be overridden, and the updated record will be used in later abstinence calculation. \nThe following code shows you a possible work flow. Please note that the biochemical measures dataset should have the \nsame data structure as you TLFB dataset. In other words, it should have three columns: __*id*__, __*date*__, and \n__*amount*__. The biochemical data model shares the same data model with the TLFB data, both of which uses the\nTLFBData class.\n__Note:__ If day counters are used for the date column, please set `use_raw_date` to `True` when you create the `biochemical_data` variable below.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ycui1-mda/abstcal/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9025500800422473,
      "result": {
        "original_header": "Data Converision Tool (wide to long format)",
        "type": "Text_excerpt",
        "value": "The package is best to work with datasets in the long format. If your datasets are in the wide format (one subject per row with columns storing data), you can use the following function.\n```python\n# import the module if you've not done this yet\nfrom abstcal import abstcal_utils\n\nlong_df = abstcal_utils.from_wide_to_long(\"filepath_to_wide.csv\", data_source_type=\"tlfb\", subject_col_name=\"id\")\n# data_source_type: specify the data source is tlfb or visit, using which the function will use the desired column names after the transformation\n# subject_col_name: the original name for the subject column\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/ycui1-mda/abstcal/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9564351817078147,
      "result": {
        "original_header": "Date Masking Tool",
        "type": "Text_excerpt",
        "value": "For privacy concerns, you may want to mask the dates in the datasets. To provide consistent mapping between all related datasets, you need to map TLFB, Visit, and Biochemical (optional) datasets altogether.\n```python\n# Use a particular visit as reference (each subject's date for the visit will be used)\nabstcal_utils.mask_dates(\"path_to_tlfb.csv\", \"path_to_bio.csv\", \"path_to_visit.csv\", 0)\n\n# Use a date (mm/dd/yyyy) as reference for all subjects\nabstcal_utils.mask_dates(\"path_to_tlfb.csv\", \"path_to_bio.csv\", \"path_to_visit.csv\", \"12/29/2020\")\n\n# If you don't have biochemical data, please specify the second parameter as None\nabstcal_utils.mask_dates(\"path_to_tlfb.csv\", None, \"path_to_visit.csv\", 0)\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/ycui1-mda/abstcal/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.858143110452791,
      "result": {
        "original_header": "Output DataFrame to Files",
        "type": "Text_excerpt",
        "value": "Many of these data processing functions produce DataFrame objects as the return value. If you want to save these DataFrame objects to external files on your computer, use the `write_data_to_path` function.\n```python\nabstcal_utils.write_data_to_path(df, \"filepath_to_output.csv\", index=False)\n# index: when True, the output speadsheet will keep the index column, while False, it won't\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/ycui1-mda/abstcal/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9383115297243575,
      "result": {
        "original_header": "Questions or Comments",
        "type": "Text_excerpt",
        "value": "If you have any questions about this package or would like to contribute to this project, please feel free to leave comments here or\nsend me an email to ycui1@mdanderson.org.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ycui1-mda/abstcal/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ycui1-mda/abstcal/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ycui1-mda/abstcal/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ycui1-mda/abstcal"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Abstinence Calculator"
      },
      "source": "https://raw.githubusercontent.com/ycui1-mda/abstcal/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ycui1-mda/abstcal/master//tests/TLFB_imputation_examples.png?raw=true"
      },
      "source": "https://raw.githubusercontent.com/ycui1-mda/abstcal/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ycui1-mda/abstcal/master//tests/visit_imputation_examples.png?raw=true"
      },
      "source": "https://raw.githubusercontent.com/ycui1-mda/abstcal/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Web App Interface",
        "parent_header": [
          "Abstinence Calculator",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "If you don't want to use the non-GUI environment, you can use the package's web app, please go to \n[abstcal Hosted by Streamlit](https://share.streamlit.io/ycui1-mda/abstcal/abstcal/calculator_web_app.py). The web app provides the\ncore functionalities of the package. You can find more detailed instructions on the web page.\n\nIf you're concerned about data privacy and security associated with using the web app hosted online, you can use the \nweb app hosted locally on your computer. However, it requires the installation of Python and Python packages on your\ncomputer. Here's the overall instruction.\n1. Install Python 3.6+ on your computer ([Official Python Downloads](https://www.python.org/downloads/)).\n2. Install abstcal on your computer (Using the command line tool, run `pip install abstcal`).\n3. Download the entire package's zip file from the GitHub page.\n4. Unzip the file to the desired directory on your computer.\n5. Locate the web app file named _calculator_web_app.py_ and get its full path.   \n6. Launch the web app locally (Using your command line tool, run `streamlit run the_full_path_to_the_web_app`.\n\n*********\n"
      },
      "source": "https://raw.githubusercontent.com/ycui1-mda/abstcal/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Ia. Prepare the Biochemical Dataset",
        "parent_header": [
          "Abstinence Calculator",
          "Additional Features",
          "I. Integration of Biochemical Verification Data"
        ],
        "type": "Text_excerpt",
        "value": "A key operation to prepare the biochemical dataset is to interpolate extra meaningful records based on the exiting \nrecords using the `interpolate_biochemical_data` function, as shown below.\n```python\n# First read the biochemical verification data\nbiochemical_data = TLFBData(\"test_co.csv\", included_subjects=included_subjects, abst_cutoff=4)\nbiochemical_data.profile_data()\n\n# Interpolate biochemical records based on the half-life\nbiochemical_data.interpolate_biochemical_data(half_life_in_days=0.5, maximum_days_to_interpolate=1)\n# half_life_in_days: the half life of the biochemical measure in days\n# maximum_days_to_interpolate: the maximum number of days to interpolate before the measurement day\n\n# Other data cleaning steps\nbiochemical_data.drop_na_records()\nbiochemical_data.check_duplicates()\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ycui1-mda/abstcal/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9998923319739209,
      "result": {
        "original_header": "Using the raw date",
        "type": "Text_excerpt",
        "value": "id | date | amount \n------------ | ------------- | -------------\n1000 | 02/03/2019 | 10\n1000 | 02/04/2019 | 8\n1000 | 02/05/2019 | 12\n1000 | 02/06/2019 | 9\n1000 | 02/07/2019 | 10\n1000 | 02/08/2019 | 8\n \n"
      },
      "source": "https://raw.githubusercontent.com/ycui1-mda/abstcal/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999997104140299,
      "result": {
        "original_header": "The Biochemical Measures Dataset (Optional)",
        "type": "Text_excerpt",
        "value": "id | date | amount \n------------ | ------------- | -------------\n1000 | 02/03/2019 | 4\n1000 | 02/11/2019 | 6\n1000 | 03/04/2019 | 10\n1000 | 03/22/2019 | 8\n1000 | 03/28/2019 | 6\n1000 | 04/15/2019 | 5 \n"
      },
      "source": "https://raw.githubusercontent.com/ycui1-mda/abstcal/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999940220454734,
      "result": {
        "original_header": "The Visit Data (Required)",
        "type": "Text_excerpt",
        "value": "id | visit | date \n------------ | ------------- | -------------\n1000 | 0 | 02/03/2019\n1000 | 1 | 02/10/2019\n1000 | 2 | 02/17/2019\n1000 | 3 | 03/09/2019 \n1000 | 4 | 04/07/2019 \n1000 | 5 | 05/06/2019 \nid | v0 | v1 | v2 | v3 | v4 | v5\n----- | ----- | ----- | ----- | ----- | ----- | ----- |\n1000 | 02/03/2019 | 02/10/2019 | 02/17/2019 | 03/09/2019 | 04/07/2019 | 05/06/2019\n1001 | 02/05/2019 | 02/13/2019 | 02/20/2019 | 03/11/2019 | 04/06/2019 | 05/09/2019 \n"
      },
      "source": "https://raw.githubusercontent.com/ycui1-mda/abstcal/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8065566174351174,
      "result": {
        "original_header": "II. Calculate Retention Rates",
        "type": "Text_excerpt",
        "value": "You can also calculate the retention rate with the visit data with a simple function call, as shown below. \nIf a filepath is specified, it will write to a file.\n```python\n# Just show the retention rates results\nvisit_data.get_retention_rates()\n\n# Write the retention rates to an external file\nvisit_data.get_retention_rates('retention_rates.csv')\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/ycui1-mda/abstcal/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ycui1-mda/abstcal/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "parent_header": [
          "Abstinence Calculator"
        ],
        "type": "Text_excerpt",
        "value": "MIT License"
      },
      "source": "https://raw.githubusercontent.com/ycui1-mda/abstcal/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "abstcal"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "ycui1-mda"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 262631,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 49777,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ycui1-mda/abstcal/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 07:50:26",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Use the package in Python",
        "parent_header": [
          "Abstinence Calculator",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "Install the package using the pip tool. If you need instruction on how to install Python, you \ncan find information at the [Python](https://www.python.org/) website. The pip tool is the most \ncommon Python package management tool, and you can find information about its use instruction at the \n[pypa](https://pip.pypa.io/en/stable/installing/) website. The pip tool will be pre-installed\nif you download Python 3.6+ from [python.org](python.org) directly.\n\nOnce your computer has Python and pip installed, \nyou can run the following command in your command line tool, which will install abstcal and its required \ndependencies, mainly the [pandas](https://pandas.pydata.org/) (for data processing) and the \n[streamlit](https://streamlit.io/) (for the web app development).\n\n```commandline\npip install abstcal\n```\n\nIf you're not familiar with Python coding, you can run the \n[Jupyter Notebook](https://github.com/ycui1-mda/abstcal/blob/88543f99044dfd0566168e922bab3d81dfb76a14/tests/abstcal_use_example.ipynb) \nincluded on this page on [Google Colab](https://colab.research.google.com), which is an online platform \nto run your Python code remotely on a server hosted by Google without any cost. \nWith this option, you don't have to worry about installing Python and any Python packages on your local computer.\n"
      },
      "source": "https://raw.githubusercontent.com/ycui1-mda/abstcal/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Use Example",
        "parent_header": [
          "Abstinence Calculator"
        ],
        "type": "Text_excerpt",
        "value": "Once you have installed abstcal and prepared your datasets according to the format \nrequirements listed above, you can start to use the tool.\n"
      },
      "source": "https://raw.githubusercontent.com/ycui1-mda/abstcal/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1. Import the Package",
        "parent_header": [
          "Abstinence Calculator",
          "Use Example"
        ],
        "type": "Text_excerpt",
        "value": "```python\nfrom abstcal import TLFBData, VisitData, AbstinenceCalculator, abstcal_utils\n```\nThe `abstcal_utils` is an optional module, which provides some utility functions as\ndiscussed in the Optional Features section.\n"
      },
      "source": "https://raw.githubusercontent.com/ycui1-mda/abstcal/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2a. Read the TLFB data",
        "parent_header": [
          "Abstinence Calculator",
          "Use Example",
          "2. Process the TLFB Data"
        ],
        "type": "Text_excerpt",
        "value": "You can either specify the full path of the TLFB data or just the filename if the dataset \nis in your current work directory. Supported file formats include comma-separated (.csv), \ntab-delimited (.txt), and Excel spreadsheets (.xls, .xlsx).\n\n__Note:__ If the date column uses day counters, don't forget to set `False` to the `use_raw_date` parameter.\n\n```python\n# Use the default settings\ntlfb_data = TLFBData('path_to_tlfb.csv')\n\n# Use additional parameters\ntlfb_data = TLFBData('path_to_tlfb.csv', abst_cutoff=0, included_subjects=\"all\", use_raw_date=True)\n# abst_cutoff: set the custom abstinence cutoff, default=0\n# included_subjects: set the list of subject ids to include in the processed data, default using all subjects\n# use_raw_date: the TLFB dataset uses the raw dates for the date column when True, if the date column uses day counters, set it to False\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ycui1-mda/abstcal/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2b. Profile the TLFB data",
        "parent_header": [
          "Abstinence Calculator",
          "Use Example",
          "2. Process the TLFB Data"
        ],
        "type": "Text_excerpt",
        "value": "In this step, you will see a report of the data summary, such as the number of records, \nthe number of subjects, and any applicable abnormal data records, including duplicates \nand outliers. In terms of outliers, you can specify the minimal and maximal values for \nthe substance use amounts. Those values outside the range are considered outliers \nand are shown in the summary report.\n```python\n# No outlier identification\ntlfb_data.profile_data()\n\n# Identify outliers that are outside of the range\ntlfb_data.profile_data(0, 100)\n\n# Use the returned values of the function\ntlfb_summary_overall, tlfb_summary_subject, tlfb_hist_plot = tlfb_data.profile_data()\n# tlfb_summary_overall: the overall summary of the TLFB data\n# tlfb_summary_subject: the data summary by subject\n# tlfb_hist_plot: a histogram of the TLFB amount records\n\n# to show the histogram, you can use the utility function, which is just a convenience method to use matplotlib to show the image\nabstcal_utils.show_figure()\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ycui1-mda/abstcal/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2c. Drop data records with any missing values",
        "parent_header": [
          "Abstinence Calculator",
          "Use Example",
          "2. Process the TLFB Data"
        ],
        "type": "Text_excerpt",
        "value": "Those records with missing *id*, *date*, or *amount* will be removed. The number of removed\nrecords will be reported.\n```python\ntlfb_data.drop_na_records()\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ycui1-mda/abstcal/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2d. Check and remove any duplicate records",
        "parent_header": [
          "Abstinence Calculator",
          "Use Example",
          "2. Process the TLFB Data"
        ],
        "type": "Text_excerpt",
        "value": "Duplicate records are identified based on __*id*__ and __*date*__. There are different \nways to remove duplicates: *min*, *max*, or *mean*, which keep the minimal, maximal, \nor mean of the duplicate records. You can also have the options to remove all duplicates. \nYou can also simply view the duplicates and handle these duplicates manually.\n```python\n# Check only, no actions for removing duplicates\ntlfb_data.check_duplicates(None)\n\n# Check and remove duplicates by keeping the minimal\ntlfb_data.check_duplicates(\"min\")\n\n# Check and remove duplicates by keeping the maximal\ntlfb_data.check_duplicates(\"max\")\n\n# Check and remove duplicates by keeping the computed mean (all originals will be removed)\ntlfb_data.check_duplicates(\"mean\")\n\n# Check and remove all duplicates\ntlfb_data.check_duplicates(False)\n```\n\nThe `check_duplicates` function will return any duplicate records.\n"
      },
      "source": "https://raw.githubusercontent.com/ycui1-mda/abstcal/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2e. Recode outliers (optional)",
        "parent_header": [
          "Abstinence Calculator",
          "Use Example",
          "2. Process the TLFB Data"
        ],
        "type": "Text_excerpt",
        "value": "Those values outside the specified range are considered outliers. All these outliers will \nbe removed by default. However, if the users set the drop_outliers argument to be False, \nthe values lower than the minimal will be recoded as the minimal, while the values higher \nthan the maximal will be recoded as the maximal.\n\n```python\n# Set the minimal and maximal values for outlier detection, by default, the outliers will be dropped\ntlfb_data.recode_outliers(0, 100)\n\n# Alternatively, we can recode outliers by replacing them with bounding values\ntlfb_data.recode_outliers(0, 100, False)\n```\n\nThe `recode_outliers` function returns the summary of the identified outliers.\n"
      },
      "source": "https://raw.githubusercontent.com/ycui1-mda/abstcal/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2f. Impute the missing TLFB data",
        "parent_header": [
          "Abstinence Calculator",
          "Use Example",
          "2. Process the TLFB Data"
        ],
        "type": "Text_excerpt",
        "value": "To calculate the ITT abstinence, the TLFB data will be imputed for the missing records.\nAll contiguous missing intervals will be identified. Each of the intervals will be imputed\nbased on the two values, the one before and the one after the interval. \n\nYou can choose to impute the missing values for the interval using the mean of these two values or\ninterpolate the missing values for the interval using the linear values generated from the\ntwo values. Alternatively, you can specify a fixed value, which will be used to impute all\nmissing values.\n\n|Imputation Mode | Parameters | Imputed Values \n|------------ | ------------- | -------------\n|Uniform | uniform | Q<sub>t</sub> = (Q<sub>0</sub> + Q<sub>1</sub>) / 2\n|Linear | linear | Q<sub>t</sub> = m * (t - t<sub>0</sub>) + Q<sub>0</sub> where m is (Q<sub>1</sub> - Q<sub>0</sub>) / (t<sub>1</sub> - t<sub>0</sub>)\n|Fixed | a numeric value | Use the numeric value to fill all missing gaps\n\nNote. Q<sub>0</sub> and Q<sub>1</sub> represent the substance use amount before (t<sub>0</sub>) and after (t<sub>1</sub>) the missing TLFB interval. Q<sub>t</sub> represents the interpolated substance use amount at the time t.\n\nThe following figure shows you some examples of these different imputation modes.\n![Alt text](/tests/TLFB_imputation_examples.png?raw=true \"TLFB Imputation Examples\")\n\n```python\n# Use the mean\ntlfb_data.impute_data(\"uniform\")\n\n# Use the linear interpolation\ntlfb_data.impute_data(\"linear\")\n\n# Use a fixed value, whichever is appropriate to your research question\ntlfb_data.impute_data(1)\ntlfb_data.impute_data(5)\n\n# A calling that uses all possible features\ntlfb_data.impute_data(\"linear\", last_record_action=\"ffill\", maximum_allowed_gap_days=30, biochemical_data=bio_data, overridden_amount=\"infer\")\n# last_record_action: how you interpolate TLFB records using each subject's last record, default=\"ffill\", fill forward\n# maximum_allowed_gap_days: the maximum allowed days for TLFB data imputation\n# biochemical_data: the biochemical dataset for abstinence verification (details will be provided later)\n# overridden_amount: with the presence of biochemical data, how false negative TLFB records will be overridden\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ycui1-mda/abstcal/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3a. Read the visit data",
        "parent_header": [
          "Abstinence Calculator",
          "Use Example",
          "3. Process the Visit Data"
        ],
        "type": "Text_excerpt",
        "value": "Similar to reading the TLFB data, you can read files in .csv, .txt, .xls, or .xlsx format.\nIt's also supported if your visit dataset is in the univariate format, which means that\neach subject has only one row of data, and the columns are the visits and their dates.\n\nImportantly, it will also detect if any subjects have their visits with the dates that\nare out of the order. By default, the order is inferred using the numeric or alphabetic \norder of the visits. These records with incorrect data may result in wrong\nabstinence calculations.\n```python\n# Read the visit data in the long format (the default option)\nvisit_data = VisitData(\"file_path.csv\")\n\n# Read the visit data in the wide format\nvisit_data = VisitData(\"file_path.csv\", \"wide\")\n\n# Read the visit data and specify the order of the visit\nvisit_data = VisitData(\"file_path.csv\", expected_ordered_visits=[1, 2, 3, 5, 6])\n```\n\n__Note:__ The name of this visit dataset is nominal. It does not only refer to actual in-person and telephone visits, it also refers to other important milestones or timepoints (e.g., Target Quit Day) in clinical cessation trials. Thus, the visit dataset should incluse all these visits that you need to calculate abstinence. Relatedly, this package has a pre-processing tool that allows you to create \"virtual\" visits based on existing visits. You can find the instruction on this feature at the end of this page.\n\nIf you prefer referring to the visit data as time points or milestones, you can do so by creating the visit dataset as following:\n```python\n# If you prefer using time points\ntimepoint_data = TimePointData(\"file_path.csv\")\n\n# If you prefer using milestones\nmilestone_data = MilestoneData(\"file_path.csv\")\n```\n\n__Note:__ If the date column uses the day counters, you'll have to set the `use_raw_date` to `False`, just as processing the TLFB data.\n```python\n# When the dates are day counters\nvisit_data = VisitData(\"file_path.csv\", expected_ordered_visits=[1, 2, 3, 5, 6], use_raw_data=False)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ycui1-mda/abstcal/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3b. Profile the visit data",
        "parent_header": [
          "Abstinence Calculator",
          "Use Example",
          "3. Process the Visit Data"
        ],
        "type": "Text_excerpt",
        "value": "You will see a report of the data summary, such as the number of records, the number of \nsubjects, and any applicable abnormal data records, including duplicates and outliers. \nIn terms of outliers, you can specify the minimal and maximal values for the dates. The\ndates will be inferred from strings. Please use the format *mm/dd/yyyy*.\n```python\n# No outlier identification\nvisit_data.profile_data()\n\n# Outlier identification\nvisit_data.profile_data(\"07/01/2000\", \"12/08/2020\")\n\n# Use the returned values of the function\nvisit_summary_overall, visit_summary_subject, visit_hist_plot = visit_data.profile_data()\n# visit_summary_overall: the overall summary of the TLFB data\n# visit_summary_subject: the data summary by subject\n# visit_hist_plot: a histogram of the visit records\n\n# to show the histogram, you can use the utility function, which is just a convenience method to use matplotlib to show the image\nabstcal_utils.show_figure()\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ycui1-mda/abstcal/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3c. Drop data records with any missing values",
        "parent_header": [
          "Abstinence Calculator",
          "Use Example",
          "3. Process the Visit Data"
        ],
        "type": "Text_excerpt",
        "value": "Those records with missing *id*, *visit*, or *date* will be removed. The number of removed\nrecords will be reported.\n```python\nvisit_data.drop_na_records()\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ycui1-mda/abstcal/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3d. Check and remove any duplicate records",
        "parent_header": [
          "Abstinence Calculator",
          "Use Example",
          "3. Process the Visit Data"
        ],
        "type": "Text_excerpt",
        "value": "Duplicate records are identified based on __*id*__ and __*visit*__. There are different \nways to remove duplicates: *min*, *max*, or *mean*, which keep the minimal, maximal, \nor mean of the duplicate records. The options are the same as how you deal with duplicates\nin the TLFB data. Calling this function will return the duplicate records.\n```python\n# Check only, no actions for removing duplicates\nvisit_data.check_duplicates(None)\n\n# Check and remove duplicates by keeping the minimal\nvisit_data.check_duplicates(\"min\")\n\n# Check and remove duplicates by keeping the maximal\nvisit_data.check_duplicates(\"max\")\n\n# Check and remove duplicates by keeping the computed mean (all originals will be removed)\nvisit_data.check_duplicates(\"mean\")\n\n# Check and remove all duplicates\nvisit_data.check_duplicates(False)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ycui1-mda/abstcal/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3e. Recode outliers (optional)",
        "parent_header": [
          "Abstinence Calculator",
          "Use Example",
          "3. Process the Visit Data"
        ],
        "type": "Text_excerpt",
        "value": "Those values outside the specified range are considered outliers. The syntax and usage is\nthe same as what you deal with the TLFB dataset\n```python\n# Set the minimal and maximal, and outliers will be removed by default\nvisit_data.recode_outliers(\"07/01/2000\", \"12/08/2020\")\n\n# Set the minimal and maximal, but keep the outliers by replacing them with bounding values\nvisit_data.recode_outliers(\"07/01/2000\", \"12/08/2020\", False)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ycui1-mda/abstcal/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3f. Impute the missing visit data",
        "parent_header": [
          "Abstinence Calculator",
          "Use Example",
          "3. Process the Visit Data"
        ],
        "type": "Text_excerpt",
        "value": "To calculate the ITT abstinence, the visit data will be imputed for the missing records.\nThe program will first find the earliest visit date as the anchor visit, which should be \nnon-missing for all subjects. Then it will calculate the difference in \ndays between the later visits and the anchor visit. Based on these difference values, the\nfollowing two imputation options are available. The *\"freq\"* option will use the most\nfrequent difference value, which is the default option. The *\"mean\"* option will use the\nmean difference value.\n\n|Imputation Mode | Parameters | Interpolated Values\n|------------ | ------------- | -------------\n|Frequent | freq | Reference visit\u2019s date + The most frequent interval\n|Mean | mean | Reference visit\u2019s date + The mean interval \n|Dictionary | a dict object | Reference visit\u2019s date + The specified days of interval\n\nNote. The reference visit is specified by the user, for which all subjects have valid dates. When it is not specified, the calculator will infer the earliest visit as the anchor visit.\n\nThe following figure illustrates the different options for imputation. For the sake of a better illustration, the tables use the wide format of the visit data. You don't need to transform you visit data, and everything will be handled under the hood for you.\n![Alt text](/tests/visit_imputation_examples.png?raw=true \"Visit Imputation Examples\")\n\n\n```python\n# Use the most frequent difference value between the missing visit and the anchor visit\nvisit_data.impute_data(impute=\"freq\")\n\n# Use the mean difference value between the missing visit and the anchor visit\nvisit_data.impute_data(impute=\"mean\")\n\n# Specify which visit should serve as the anchor or reference visit\nvisit_data.impute_data(anchor_visit=1)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ycui1-mda/abstcal/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "4a. Create the abstinence calculator using the TLFB and visit data",
        "parent_header": [
          "Abstinence Calculator",
          "Use Example",
          "4. Calculate Abstinence"
        ],
        "type": "Text_excerpt",
        "value": "To calculate abstinence, you instantiate the calculator by setting the TLFB and visit data. By default,\nonly those who have both TLFB and visit data will be scored.\n```python\nabst_cal = AbstinenceCalculator(tlfb_data, visit_data)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ycui1-mda/abstcal/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "4b. Check data availability (optional)",
        "parent_header": [
          "Abstinence Calculator",
          "Use Example",
          "4. Calculate Abstinence"
        ],
        "type": "Text_excerpt",
        "value": "You can find out how many subjects have the TLFB data and how many have the visit data.\n```python\nabst_cal.check_data_availability()\n```\nThe `check_data_availability` function returns the data availablility summary.\n"
      },
      "source": "https://raw.githubusercontent.com/ycui1-mda/abstcal/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "4c. Calculate abstinence",
        "parent_header": [
          "Abstinence Calculator",
          "Use Example",
          "4. Calculate Abstinence"
        ],
        "type": "Text_excerpt",
        "value": "For all the function calls to calculate abstinence, you can request the calculation to be\nITT (intent-to-treat) or RO (responders-only). You can optionally specify the calculated\nabstinence variable names. By default, the abstinence names will be inferred. Another shared\nargument is whether you want to include the ending date. Notably, each method will generate\nthe abstinence dataset and a dataset logging first lapses that make a subject nonabstinent\nfor a particular abstinence calculation.\n\n|shared parameter | default value | implication\n|----|----|----\n|abst_var_names | 'infer' | calculated abstinence variables will have names generated automatically based on input\n|including_end | False | the time window used for abstinence calculation will not include the end visit date\n|mode | 'itt' | use ITT assumption, if set as 'ro', the responders-only assumption will be used\n"
      },
      "source": "https://raw.githubusercontent.com/ycui1-mda/abstcal/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Continuous abstinence",
        "parent_header": [
          "Abstinence Calculator",
          "Use Example",
          "4. Calculate Abstinence",
          "4c. Calculate abstinence"
        ],
        "type": "Text_excerpt",
        "value": "To calculate the continuous abstinence, you need to specify the visit when the window starts\nand the visit when the window ends. To provide greater flexibility, you can specify a series\nof visits to generate multiple time windows.\n```python\n# Calculate only one window\nabst_df, lapse_df = abst_cal.abstinence_cont(2, 5)\n\n# Calculate two windows\nabst_df, lapse_df = abst_cal.abstinence_cont(2, [5, 6])\n\n# Calculate three windows with abstinence names specified\nabst_df, lapse_df = abst_cal.abstinence_cont(2, [5, 6, 7], [\"abst_var1\", \"abst_var2\", \"abst_var3\"])\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ycui1-mda/abstcal/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Point-prevalence abstinence",
        "parent_header": [
          "Abstinence Calculator",
          "Use Example",
          "4. Calculate Abstinence",
          "4c. Calculate abstinence"
        ],
        "type": "Text_excerpt",
        "value": "To calculate the point-prevalence abstinence, you need to specify the visits. You'll need to\nspecify the number of days preceding the time points. To provide greater flexibility, you\ncan specify multiple visits and multiple numbers of days.\n```python\n# Calculate only one time point, 7-d point-prevalence\nabst_df, lapse_df = abst_cal.abstinence_pp(5, 7)\n\n# Calculate multiple time points, multiple day conditions\nabst_df, lapse_df = abst_cal.abstinence_pp([5, 6], [7, 14, 21, 28])\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ycui1-mda/abstcal/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Prolonged abstinence",
        "parent_header": [
          "Abstinence Calculator",
          "Use Example",
          "4. Calculate Abstinence",
          "4c. Calculate abstinence"
        ],
        "type": "Text_excerpt",
        "value": "To calculate the prolonged abstinence, you need to specify the quit visit and the number of\ndays for the grace period (the default length is 14 days). You can calculate abstinence for\nmultiple time points. There are several options regarding how a lapse is defined. See below\nfor some examples.\n```python\n# Lapse isn't allowed\nabst_df, lapse_df = abst_cal.abstinence_prolonged(3, [5, 6], False)\n\n# Lapse is defined as exceeding a defined amount of substance use\nabst_df, lapse_df = abst_cal.abstinence_prolonged(3, [5, 6], '5 cigs')\n\n# Lapse is defined as exceeding a defined number of substance use days\nabst_df, lapse_df = abst_cal.abstinence_prolonged(3, [5, 6], '3 days')\n\n# Lapse is defined as exceeding a defined amount of substance use over a time window\nabst_df, lapse_df = abst_cal.abstinence_prolonged(3, [5, 6], '5 cigs/7 days')\n\n# Lapse is defined as exceeding a defined number of substance use days over a time window\nabst_df, lapse_df = abst_cal.abstinence_prolonged(3, [5, 6], '3 days/7 days')\n\n# Combination of these criteria\nabst_df, lapse_df = abst_cal.abstinence_prolonged(3, [5, 6], ('5 cigs', '3 days/7 days'))\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ycui1-mda/abstcal/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "4d. Responders-only abstinence calculation",
        "parent_header": [
          "Abstinence Calculator",
          "Use Example",
          "4. Calculate Abstinence"
        ],
        "type": "Text_excerpt",
        "value": "By default, the calculation of the above-mentioned abstinence is based on the ITI assumption. To calculate responders-only abstinence, you need to set the mode parameter to \"ro\" when you call these calculation-related functions.\n```python\nabst_cal.abstinence_pp(5, 7, mode=\"ro\")\n```\nThe above function call will calculate visit=5's 7-day point-prevalance abstinence with the assumption of responders-only. Under the hood, the calculator will consider abstinent only if 1) the subject had 7 TLFB data records before v5 2) the subject did not smoke at all in these 7 days. If a subject had less than 7 TLFB data records before v5, he or she is considered a non-responder, and the abstinence outcome will be N/A. If a subject had 7 TLFB data records and smoked any day, he or she is considered non-abstinent.\n"
      },
      "source": "https://raw.githubusercontent.com/ycui1-mda/abstcal/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "5a. The abstinence datasets",
        "parent_header": [
          "Abstinence Calculator",
          "Use Example",
          "5. Output Datasets"
        ],
        "type": "Text_excerpt",
        "value": "To output the abstinence datasets that you have created from calling the abstinence calculation\nmethods, you can use the following method to create a combined dataset, something like below.\n\nid | itt_abst_cont_v5_v2 | itt_abst_cont_v6_v2 | itt_abst_pp7_v5 | itt_abst_pp7_v6\n------------ | ------------- | ------------- | ------------ | -------------\n1000 | 1 | 1 | 1 | 1\n1001 | 1 | 0 | 1 | 0\n1002 | 1 | 1 | 1 | 1\n1003 | 0 | 0 | 1 | 1\n1004 | 0 | 0 | 1 | 0 \n1005 | 0 | 0 | 0 | 1\n```python\n# The output data will merge these individual DataFrame objects, and save it to the file that you specify.\nabst_cal.merge_abst_data([abst_df0, abst_df1, abst_df2], \"merged_abstinence_data.csv\")\n\n# Merge DataFrame objects only, no data will be saved to your computer\nabst_cal.merge_abst_data([abst_df0, abst_df1, abst_df2])\n```"
      },
      "source": "https://raw.githubusercontent.com/ycui1-mda/abstcal/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "5b. The lapse datasets",
        "parent_header": [
          "Abstinence Calculator",
          "Use Example",
          "5. Output Datasets"
        ],
        "type": "Text_excerpt",
        "value": "To output the lapse datasets that you have created from calling the abstinence calculation\nmethods, you can use the following method to create a combined dataset, something like below.\n\nid | date | amount | abst_name\n------------ | ------------- | ------------- | -------------\n1000 | 02/03/2019 | 10 | itt_abst_cont_v5\n1001 | 03/05/2019 | 8 | itt_abst_cont_v5\n1002 | 04/06/2019 | 12 | itt_abst_cont_v5\n1000 | 02/06/2019 | 9 | itt_abst_cont_v6\n1001 | 04/07/2019 | 10 | itt_abst_cont_v6\n1002 | 05/08/2019 | 8 | itt_abst_cont_v6\n```python\n# The output data will merge these individual DataFrame objects, and save it to the file that you specify.\nabst_cal.merge_lapse_data([lapse_df0, lapse_df1, lapse_df2], \"merged_lapse_data.csv\")\n\n# Merge DataFrame objects only, no data will be saved to your computer\nabst_cal.merge_abst_data([abst_df0, abst_df1, abst_df2])\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ycui1-mda/abstcal/master/README.md",
      "technique": "header_analysis"
    }
  ]
}