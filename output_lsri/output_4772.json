{
  "application_domain": [
    {
      "confidence": 12.75,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/AIM-Harvard/pyradiomics"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contact",
        "parent_header": [
          "pyradiomics v3.1.0",
          "Radiomics feature extraction in Python"
        ],
        "type": "Text_excerpt",
        "value": "We are happy to help you with any questions. Please contact us on the [Radiomics community section of the 3D Slicer Discourse](https://discourse.slicer.org/c/community/radiomics/23).\n\nWe welcome contributions to PyRadiomics. Please read the [contributing guidelines](CONTRIBUTING.rst) on how to\ncontribute to PyRadiomics.\n\n**This work was supported in part by the US National Cancer Institute grants: \nU24CA194354 - QUANTITATIVE RADIOMICS SYSTEM DECODING THE TUMOR PHENOTYPE and U01CA190234 - TUMOR GENOTYPE AND RADIOMIC PHENOTYPE IN LUNG CANCER**\n"
      },
      "source": "https://raw.githubusercontent.com/Radiomics/pyradiomics/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2015-09-15T15:11:28Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-06T11:06:07Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Open-source python package for the extraction of Radiomics features from 2D and 3D images and binary masks. Support: https://discourse.slicer.org/c/community/radiomics"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.960256888085127,
      "result": {
        "original_header": "Radiomics feature extraction in Python",
        "type": "Text_excerpt",
        "value": "This is an open-source python package for the extraction of Radiomics features from medical imaging. \nWith this package we aim to establish a reference standard for Radiomic Analysis, and provide a tested and maintained\nopen-source platform for easy and reproducible Radiomic Feature extraction. By doing so, we hope to increase awareness\nof radiomic capabilities and expand the community. \nThe platform supports both the feature extraction in 2D and 3D and can be used to calculate single values per feature\nfor a region of interest (\"segment-based\") or to generate feature maps (\"voxel-based\").  \n**Not intended for clinical use.** \n"
      },
      "source": "https://raw.githubusercontent.com/Radiomics/pyradiomics/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.832763641150643,
      "result": {
        "original_header": "3D Slicer",
        "type": "Text_excerpt",
        "value": "PyRadiomics is also available as an [extension](https://github.com/AIM-Harvard/SlicerRadiomics) to [3D Slicer](slicer.org). \nDownload and install the 3D slicer [nightly build](http://download.slicer.org/), the extension is then available in the\nextension manager under \"SlicerRadiomics\".\n \n"
      },
      "source": "https://raw.githubusercontent.com/Radiomics/pyradiomics/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9511587837597124,
      "result": {
        "original_header": "Developers",
        "type": "Text_excerpt",
        "value": " - [Joost van Griethuysen](https://github.com/JoostJM)<sup>1,3,4</sup>\n - [Andriy Fedorov](https://github.com/fedorov)<sup>2</sup>\n - [Nicole Aucoin](https://github.com/naucoin)<sup>2</sup>\n - [Jean-Christophe Fillion-Robin](https://github.com/jcfr)<sup>5</sup>\n - [Ahmed Hosny](https://github.com/ahmedhosny)<sup>1</sup>\n - [Steve Pieper](https://github.com/pieper)<sup>6</sup>\n - [Hugo Aerts (PI)](https://github.com/hugoaerts)<sup>1,2</sup>\n \n<sup>1</sup>Department of Radiation Oncology, Dana-Farber Cancer Institute, Brigham and Women's Hospital, Harvard Medical School, Boston, MA,\n<sup>2</sup>Department of Radiology, Brigham and Women's Hospital, Harvard Medical School, Boston, MA,\n<sup>3</sup>Department of Radiology, Netherlands Cancer Institute, Amsterdam, The Netherlands, \n<sup>4</sup>GROW-School for Oncology and Developmental Biology, Maastricht University Medical Center, Maastricht, The Netherlands,\n<sup>5</sup>Kitware,\n<sup>6</sup>Isomics\n \n"
      },
      "source": "https://raw.githubusercontent.com/Radiomics/pyradiomics/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Documentation",
        "parent_header": [
          "pyradiomics v3.1.0",
          "Radiomics feature extraction in Python"
        ],
        "type": "Text_excerpt",
        "value": "For more information, see the sphinx generated documentation available [here](http://pyradiomics.readthedocs.io/).\n\nAlternatively, you can generate the documentation by checking out the master branch and running from the root directory:\n\n    python setup.py build_sphinx\n\nThe documentation can then be viewed in a browser by opening `PACKAGE_ROOT\\build\\sphinx\\html\\index.html`. \n\nFurthermore, an instruction video is available [here](http://radiomics.io/pyradiomics.html).\n"
      },
      "source": "https://raw.githubusercontent.com/Radiomics/pyradiomics/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "http://pyradiomics.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/Radiomics/pyradiomics/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://pyradiomics.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/Radiomics/pyradiomics/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Radiomics/pyradiomics/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Radiomics/pyradiomics/master/notebooks/RadiomicsExample.ipynb"
      },
      "source": "https://raw.githubusercontent.com/Radiomics/pyradiomics/master/notebooks/RadiomicsExample.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Radiomics/pyradiomics/master/notebooks/PyRadiomicsExample.ipynb"
      },
      "source": "https://raw.githubusercontent.com/Radiomics/pyradiomics/master/notebooks/PyRadiomicsExample.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Radiomics/pyradiomics/master/notebooks/helloFeatureClass.ipynb"
      },
      "source": "https://raw.githubusercontent.com/Radiomics/pyradiomics/master/notebooks/helloFeatureClass.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Radiomics/pyradiomics/master/notebooks/helloRadiomics.ipynb"
      },
      "source": "https://raw.githubusercontent.com/Radiomics/pyradiomics/master/notebooks/helloRadiomics.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Radiomics/pyradiomics/master/notebooks/FeatureVisualizationWithClustering.ipynb"
      },
      "source": "https://raw.githubusercontent.com/Radiomics/pyradiomics/master/notebooks/FeatureVisualizationWithClustering.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Radiomics/pyradiomics/master/notebooks/FilteringEffects.ipynb"
      },
      "source": "https://raw.githubusercontent.com/Radiomics/pyradiomics/master/notebooks/FilteringEffects.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Radiomics/pyradiomics/master/notebooks/FeatureVisualization.ipynb"
      },
      "source": "https://raw.githubusercontent.com/Radiomics/pyradiomics/master/notebooks/FeatureVisualization.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Radiomics/pyradiomics/master/labs/pyradiomics-reproduce/notebooks/USF_repeats.ipynb"
      },
      "source": "https://raw.githubusercontent.com/Radiomics/pyradiomics/master/labs/pyradiomics-reproduce/notebooks/USF_repeats.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 495
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/AIM-Harvard/pyradiomics/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "AIM-Harvard/pyradiomics"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "pyradiomics v3.1.0"
      },
      "source": "https://raw.githubusercontent.com/Radiomics/pyradiomics/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Radiomics/pyradiomics/master/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/Radiomics/pyradiomics/master/Dockerfile",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Radiomics/pyradiomics/master/labs/pyradiomics-dcm/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/Radiomics/pyradiomics/master/labs/pyradiomics-dcm/Dockerfile",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Radiomics/pyradiomics/master/docker/cli/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/Radiomics/pyradiomics/master/docker/cli/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Radiomics/pyradiomics/master/conda/configure_conda.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Radiomics/pyradiomics/master/conda/build.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://dl.circleci.com/status-badge/img/gh/AIM-Harvard/pyradiomics/tree/master.svg?style=shield"
      },
      "source": "https://raw.githubusercontent.com/Radiomics/pyradiomics/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://ci.appveyor.com/api/projects/status/kvu7897q0v4imwdc?svg=true"
      },
      "source": "https://raw.githubusercontent.com/Radiomics/pyradiomics/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "pyradiomics v3.1.0",
          "Radiomics feature extraction in Python"
        ],
        "type": "Text_excerpt",
        "value": "PyRadiomics is OS independent and compatible with Python >= 3.5. Pre-built binaries are available on\nPyPi and Conda. To install PyRadiomics, ensure you have python\ninstalled and run:\n\n    `python -m pip install pyradiomics`\n\nDetailed installation instructions, as well as instructions for building PyRadiomics from source, are available in the \n[documentation](http://pyradiomics.readthedocs.io/en/latest/installation.html).\n"
      },
      "source": "https://raw.githubusercontent.com/Radiomics/pyradiomics/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9998642566224385,
      "result": {
        "original_header": "Build Status",
        "type": "Text_excerpt",
        "value": "| Linux / MacOS                 | Windows                       |\n| ----------------------------- | ----------------------------- |\n| [![][circleci]][circleci-lnk] | [![][appveyor]][appveyor-lnk] | \n\n[appveyor]: https://ci.appveyor.com/api/projects/status/kvu7897q0v4imwdc?svg=true\n[appveyor-lnk]: https://ci.appveyor.com/project/AIM-Harvard/pyradiomics-k4sto \n[circleci]: https://dl.circleci.com/status-badge/img/gh/AIM-Harvard/pyradiomics/tree/master.svg?style=shield\n[circleci-lnk]: https://circleci.com/gh/AIM-Harvard/pyradiomics\n \n"
      },
      "source": "https://raw.githubusercontent.com/Radiomics/pyradiomics/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9032613431611874,
      "result": {
        "original_header": "Docker",
        "type": "Text_excerpt",
        "value": "The first one is a [Jupyter notebook](http://jupyter.org/) with PyRadiomics pre-installed with example Notebooks.  \n    docker pull radiomics/pyradiomics:latest \n    docker run --rm -it --publish 8888:8888 -v `pwd`:/data radiomics/notebook \n    docker run --rm -it --publish 8888:8888 -v `pwd`:/data radiomics/notebook start-notebook.sh --NotebookApp.token='' \nYou can then use the PyRadiomics CLI as follows: \n"
      },
      "source": "https://raw.githubusercontent.com/Radiomics/pyradiomics/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999999999959641,
      "result": {
        "original_header": "3rd-party packages used in pyradiomics:",
        "type": "Text_excerpt",
        "value": " - SimpleITK (Image loading and preprocessing)\n - numpy (Feature calculation)\n - PyWavelets (Wavelet filter)\n - pykwalify (Enabling yaml parameters file checking)\n - six (Python 3 Compatibility)\n - scipy (Only for LBP filter, install separately to enable this filter)\n - scikit-image (Only for LBP filter, install separately to enable this filter)\n - trimesh (Only for LBP filter, install separately to enable this filter) \n"
      },
      "source": "https://raw.githubusercontent.com/Radiomics/pyradiomics/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9910891258031912,
      "result": {
        "original_header": "3D Slicer",
        "type": "Text_excerpt",
        "value": "PyRadiomics is also available as an [extension](https://github.com/AIM-Harvard/SlicerRadiomics) to [3D Slicer](slicer.org). \nDownload and install the 3D slicer [nightly build](http://download.slicer.org/), the extension is then available in the\nextension manager under \"SlicerRadiomics\".\n \n"
      },
      "source": "https://raw.githubusercontent.com/Radiomics/pyradiomics/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8526536507870756,
      "result": {
        "original_header": "Docker",
        "type": "Text_excerpt",
        "value": "    docker run --rm -it --publish 8888:8888 -v `pwd`:/data radiomics/notebook \n    docker run --rm -it --publish 8888:8888 -v `pwd`:/data radiomics/notebook start-notebook.sh --NotebookApp.token='' \n    docker run radiomics/pyradiomics:CLI --help \n"
      },
      "source": "https://raw.githubusercontent.com/Radiomics/pyradiomics/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/AIM-Harvard/pyradiomics/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "cancer-imaging-research, computational-imaging, docker, feature-extraction, ibsi, medical-imaging, nci-itcr, nci-qin, python, radiomics, radiomics-feature-extraction, radiomics-features, tcia-dac"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "BSD 3-Clause \"New\" or \"Revised\" License",
        "spdx_id": "BSD-3-Clause",
        "type": "License",
        "url": "https://api.github.com/licenses/bsd-3-clause",
        "value": "https://api.github.com/licenses/bsd-3-clause"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "parent_header": [
          "pyradiomics v3.1.0",
          "Radiomics feature extraction in Python"
        ],
        "type": "Text_excerpt",
        "value": "This package is covered by the open source [3-clause BSD License](LICENSE.txt).\n"
      },
      "source": "https://raw.githubusercontent.com/Radiomics/pyradiomics/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "pyradiomics"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "AIM-Harvard"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 4347504,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 450627,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 102950,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 6516,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 600,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Batchfile",
        "size": 354,
        "type": "Programming_language",
        "value": "Batchfile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Radiomics/pyradiomics/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "JoostJM",
          "type": "User"
        },
        "date_created": "2023-05-17T11:14:40Z",
        "date_published": "2023-05-17T11:24:19Z",
        "description": "# Bug Fixes\r\n\r\n- Fix bug to allow a full-mask. (#660)\r\n- Fix label assignment in batch-processing example. (#756)\r\n- Fix bug in label_channel selection for voxel-based extraction. (54a37822)\r\n- Force label and label_channel datatype to int. (efb9756e)\r\n\r\n# Testing / Continuous Integration\r\n\r\n- Remove Python < 3.7 support, update support to Python versions 3.7, 3.8 and 3.9. (#825)\r\n- Switch to pytest instead of nose and nose parameterized. (#825)\r\n- Move MacOS CI to CircleCI, remove TravisCI. (#825)\r\n\r\n# Documentation\r\n\r\n- Update community link. (038f8a8b)\r\n- Update usage.rst to reflect new notebooks folder location. (#734)\r\n- Update ReadMe to reflect updated CI. (0c53d1dd)\r\n- Refactor project description to rely mainly on pyproject.toml and setup.cfg. (c341b31f)\r\n- Fix typos\r\n\r\n# Labs\r\n\r\n- Expose mask correction and geometry tolerance settings in pyradiomics-dcm CLI. (#724)",
        "html_url": "https://github.com/AIM-Harvard/pyradiomics/releases/tag/v3.1.0",
        "name": "v3.1.0",
        "release_id": 103298427,
        "tag": "v3.1.0",
        "tarball_url": "https://api.github.com/repos/AIM-Harvard/pyradiomics/tarball/v3.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/AIM-Harvard/pyradiomics/releases/103298427",
        "value": "https://api.github.com/repos/AIM-Harvard/pyradiomics/releases/103298427",
        "zipball_url": "https://api.github.com/repos/AIM-Harvard/pyradiomics/zipball/v3.1.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "JoostJM",
          "type": "User"
        },
        "date_created": "2020-10-11T09:52:26Z",
        "date_published": "2020-10-11T10:26:55Z",
        "description": "# Bug Fixes\r\n\r\n- Fix bug causing ``IndexError`` when no gray levels are 'empty'. (#592)\r\n- Fail initialization of feature extractor when the passed parameter file path\r\n  does not point to existing file. (#587)\r\n- Fix out-of-range check in GLSZM C calculation. (#635)\r\n- Fix bug in Travis CI testing (MacOS platform). (#643, #646)\r\n- Fix cmake URL and remove python2 support from DockerFiles. (#645)\r\n\r\n# Examples\r\n\r\n- Add example settings for forced-2D extraction in MR. (#613, #644)\r\n\r\n# Documentation\r\n\r\n- Fix typos in documentation.  (9d26a6b8, 896682d7, e100f1d0, #639)\r\n- Further clarify resampling. (#599)\r\n\r\n# Internal API\r\n\r\n- Fail gracefully when grayvalues < 1 are encountered in the discretized image. (#602)\r\n- Add optional progress reporting for voxel-based extraction. (#636)",
        "html_url": "https://github.com/AIM-Harvard/pyradiomics/releases/tag/v3.0.1",
        "name": "v3.0.1",
        "release_id": 32418046,
        "tag": "v3.0.1",
        "tarball_url": "https://api.github.com/repos/AIM-Harvard/pyradiomics/tarball/v3.0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/AIM-Harvard/pyradiomics/releases/32418046",
        "value": "https://api.github.com/repos/AIM-Harvard/pyradiomics/releases/32418046",
        "zipball_url": "https://api.github.com/repos/AIM-Harvard/pyradiomics/zipball/v3.0.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "JoostJM",
          "type": "User"
        },
        "date_created": "2020-02-11T20:27:59Z",
        "date_published": "2020-10-11T10:31:40Z",
        "description": "## Note!\r\nIn this release, the main interface class, `RadiomicsFeaturesExtractor()`, was renamed to `RadiomicsFeatureExtractor()` (no 's' between 'Feature' and 'Extractor'). This was done to avoid confusion between the module and class name. (#481 )\r\n\r\n# Bug Fixes\r\n\r\n- Fix broken Conda deployment (51c5849)\r\n- Fix error in IBSI mapping (labs/pyradiomics-dcm) (54d6689)\r\n- Fix resampling error when spacing is correct, but sizes are different (ac7458e)\r\n- Fix label channel selection (54a3782)\r\n- Use local scope of settings, preventing race conditions in parallel extraction (43578f7)\r\n- Fix resampling for 2D input (#545)\r\n\r\n# Internal API\r\n\r\n- Update C API to use large datatype for index pointers (#500, #501)\r\n- Update docker CLI to use python 3.6.9 and fix bugs to allow integration with pyradiomics-dcm lab (#527)\r\n- Add option to force path to UNIX style paths, even on windows (3c0708a)\r\n- Removed deprecated code (fedaa5e)\r\n\r\n# Testing\r\n\r\n- Remove testing and deployment for python 2.7 (a5a7e61)\r\n\r\n# Documentation\r\n\r\n- Refactor documentation (#536)\r\n- Fix various typos/wording\r\n- Clarify use of force2D, and add example settings file (#558)\r\n",
        "html_url": "https://github.com/AIM-Harvard/pyradiomics/releases/tag/v3.0",
        "name": "v3.0",
        "release_id": 32418094,
        "tag": "v3.0",
        "tarball_url": "https://api.github.com/repos/AIM-Harvard/pyradiomics/tarball/v3.0",
        "type": "Release",
        "url": "https://api.github.com/repos/AIM-Harvard/pyradiomics/releases/32418094",
        "value": "https://api.github.com/repos/AIM-Harvard/pyradiomics/releases/32418094",
        "zipball_url": "https://api.github.com/repos/AIM-Harvard/pyradiomics/zipball/v3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "JoostJM",
          "type": "User"
        },
        "date_created": "2019-05-06T14:58:47Z",
        "date_published": "2019-05-16T12:45:10Z",
        "description": "> In this release, the main interface class, `RadiomicsFeaturesExtractor`, was renamed to `RadiomicsFeatureExtractor` (no 's' between 'Feature' and 'Extractor'). This was done to avoid confusion between the module and class name. (#481)\r\n\r\n# New Features\r\n\r\n- Add 2D shape features (#442)\r\n- Expose voxel-based feature extraction on the PyRadiomics command line interface. (#457)\r\n\r\n# Labs\r\n\r\n- Add notebook investigating reproducibility between PyRadiomics and USF tool (ITK-based; #458)\r\n\r\n# Bug Fixes\r\n\r\n- Flatten array when applying gray value discretization of the entire image (voxel-based, full kernel; f87abcf)\r\n- Fix incorrect removal of 'empty gray levels' in GLDM and GLRLM (voxel-based; 4b18ce2)\r\n- Fix incorrect instantiation of firstorder voxel-based extraction. (81e713a)\r\n- Force cast coefficients to float. Prevents overflow and type errors in feature calculation. (e9d60c7)\r\n\r\n# Tests\r\n\r\n- Removed support and continuous integration for Python 3.4 (not maintained since March 2019). Added support and CI for Python 3.7. (#486)\r\n\r\n# Internal API\r\n\r\n- Update C-extensions:\r\n\r\n  - Rewrite C code to work with N-Dimensional input. (#463)\r\n  - Add batch-calculation of kernels and vectorized feature calculation to improve voxel-based extraction duration.  (#466)\r\n\r\n- Add support for segmentation objects (multi-layer labelmaps; #445)\r\n\r\n- Refactor the commandline interface (#481)\r\n\r\n  - Extractor instantiated once (resulting in only 1 validation of the parameter file, outside of paralellization loop)\r\n  - Simplify construction of the python generator of the cases that are to be extracted\r\n  - Remove now unnecessary functions\r\n\r\n# [Documentation](https://pyradiomics.readthedocs.io/en/2.2.0/)\r\n\r\n- Update documentation (#446, 690891d)\r\n- Fix some rendering errors (723d868, e3eb427)",
        "html_url": "https://github.com/AIM-Harvard/pyradiomics/releases/tag/2.2.0",
        "name": "v2.2.0",
        "release_id": 17394964,
        "tag": "2.2.0",
        "tarball_url": "https://api.github.com/repos/AIM-Harvard/pyradiomics/tarball/2.2.0",
        "type": "Release",
        "url": "https://api.github.com/repos/AIM-Harvard/pyradiomics/releases/17394964",
        "value": "https://api.github.com/repos/AIM-Harvard/pyradiomics/releases/17394964",
        "zipball_url": "https://api.github.com/repos/AIM-Harvard/pyradiomics/zipball/2.2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "JoostJM",
          "type": "User"
        },
        "date_created": "2018-12-05T12:16:10Z",
        "date_published": "2018-12-05T13:34:02Z",
        "description": "# Labs\r\n\r\n- Include algorithm details in dcm output. (f03145b)\r\n",
        "html_url": "https://github.com/AIM-Harvard/pyradiomics/releases/tag/2.1.2",
        "name": "v2.1.2",
        "release_id": 14362386,
        "tag": "2.1.2",
        "tarball_url": "https://api.github.com/repos/AIM-Harvard/pyradiomics/tarball/2.1.2",
        "type": "Release",
        "url": "https://api.github.com/repos/AIM-Harvard/pyradiomics/releases/14362386",
        "value": "https://api.github.com/repos/AIM-Harvard/pyradiomics/releases/14362386",
        "zipball_url": "https://api.github.com/repos/AIM-Harvard/pyradiomics/zipball/2.1.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "JoostJM",
          "type": "User"
        },
        "date_created": "2018-11-16T15:54:49Z",
        "date_published": "2018-11-16T16:23:09Z",
        "description": "# New Features\r\n\r\n- Implement validation of commandline input. (#433)\r\n- Implement thread-safe logging for python >= 3.2. (#441, d8db675)\r\n\r\n# Labs\r\n\r\n- Add script to support extraction of radiomics features directly from DICOM (segmentation should be defined as a DICOM Segmentation object), and saving the result directly as a DICOM Structured Reporting object conforming to [TID 1500](http://dicom.nema.org/medical/dicom/current/output/chtml/part16/chapter_A.html#sect_TID_1500). The script utilizes external tools for conversion of DICOM image series into volumes ([plastimatch](http://plastimatch.org/) and [dcm2niix](https://github.com/rordenlab/dcm2niix)), conversion of DICOM Segmentation segments into volumes ([dcmqi](https://github.com/QIICR/dcmqi)), and conversion of pyradiomics output features into DICOM SR ([dcmqi](https://github.com/QIICR/dcmqi)). (#434)\r\n\r\n# Bug Fixes\r\n\r\n- Fix memory error in calculation of GLCM-MCC. (167888b)\r\n- Fix error in serialization for JSON output. (9d992fe)\r\n\r\n# Tests\r\n\r\n- Expand testing to include more parts of PyRadiomics. (#410)\r\n\r\n# Internal API\r\n\r\n- Force cast the mask to an integer datatype on load. (#431)\r\n\r\n# Dependencies\r\n\r\n- Fix PyWavelets version to > 0.4.0, <= 1.0.0, due to compilation issue in SlicerRadiomics. (c828b99, [SlicerRadiomics#50](https://github.com/Radiomics/SlicerRadiomics/issues/50))\r\n",
        "html_url": "https://github.com/AIM-Harvard/pyradiomics/releases/tag/2.1.1",
        "name": "v2.1.1",
        "release_id": 14048146,
        "tag": "2.1.1",
        "tarball_url": "https://api.github.com/repos/AIM-Harvard/pyradiomics/tarball/2.1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/AIM-Harvard/pyradiomics/releases/14048146",
        "value": "https://api.github.com/repos/AIM-Harvard/pyradiomics/releases/14048146",
        "zipball_url": "https://api.github.com/repos/AIM-Harvard/pyradiomics/zipball/2.1.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "JoostJM",
          "type": "User"
        },
        "date_created": "2018-09-28T14:33:05Z",
        "date_published": "2018-11-16T16:21:26Z",
        "description": "# Feature Calculation Changes\r\n\r\n- Switch Shape - Volume calculation to a mesh-based instead of a voxel-based one. This also affects all features derived from Volume. Original Volume calculation is retained as ``VoxelVolume``. Also switch calculation of maximum diameter to mesh based. Only PCA-derived are not affected. (#427)\r\n\r\n# New Features\r\n\r\n- Add GLCM - Maximal Correlation Coefficient. (#411)\r\n\r\n# New Parameters\r\n\r\n- Update resegmentation function, add support for single (lower) threshold and new modes ``relative`` and ``sigma``, customizable in parameter ``resegmentMode``. (#420)\r\n- Add ``resegmentShape``. Default ``False``, if set to ``True``, the resegmented mask (intensity mask) will also be used for shape calculation. Otherwise, the non-resegmented mask (morphological mask) is used for shape. (#428)\r\n\r\n# Bug fixes\r\n\r\n- Fix bug in dimension checking in ``checkMask``. (623b836)\r\n- Fix some errors in the testUtils and baseline generation script. (c285c15)\r\n- Prevent division by 0 in NGTDM - Coarseness. Return 0 instead. (a59861e)\r\n- Remove duplicate key in settings file example. (828a7ac)\r\n- Prevent duplicate log entries in parallel batch extraction. (8cedd8f)\r\n- Build PyWavelets from source for AppVeyor (Windows) python 3.4 testing. Requires pre-installation of numpy and cython. (6223d35)\r\n\r\n# Tests\r\n\r\n- Integrate automatic distribution to conda upon release. (#422)\r\n\r\n# Documentation\r\n\r\n- Update README and Setup.py with additional classifiers, urls. Update section in README on Docker usage. (0fe737e)\r\n\r\n# Internal API\r\n\r\n- Use ``ValueError`` exceptions when feature extraction pipeline fails (exceptions of individual features). (#420)\r\n- Update generation and names of general info features (provenance information). (#420, #426)\r\n- Rewrite signatures of pre-processing functions to accept all customization arguments in 1 ``**kwargs`` dict. Necessary parameters are obtained using ``kwargs.get`` inside the function. Full settings are passed to the function. (#425)",
        "html_url": "https://github.com/AIM-Harvard/pyradiomics/releases/tag/2.1.0",
        "name": "v2.1.0",
        "release_id": 14048113,
        "tag": "2.1.0",
        "tarball_url": "https://api.github.com/repos/AIM-Harvard/pyradiomics/tarball/2.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/AIM-Harvard/pyradiomics/releases/14048113",
        "value": "https://api.github.com/repos/AIM-Harvard/pyradiomics/releases/14048113",
        "zipball_url": "https://api.github.com/repos/AIM-Harvard/pyradiomics/zipball/2.1.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "JoostJM",
          "type": "User"
        },
        "date_created": "2018-08-29T08:29:02Z",
        "date_published": "2018-11-16T16:19:35Z",
        "description": "# New Features\r\n\r\n- Add Center of Mass to general info output. (#416)\r\n\r\n# Bug fixes\r\n\r\n- Fix invocation of numpy.histogram when using a fixed bin count. (2a9fd79)\r\n- Fix assignment of x and y pixelspacing in shape (no changes in results). (#404)\r\n- Fix generation of approximation name (LLL or LL) in wavelet. (#405)\r\n- Add missing requirements for new filters in Docker CLI file. (#409)\r\n- Fix memory leak in C extensions. (#419)\r\n- Fix Label column parsing in batch processing. (217a840)\r\n\r\n# Documentation\r\n\r\n- Fix math rendering in GLCM. (c6a1f21)\r\n- Add reference to GLDM feature class. (9f9361a)\r\n- Correct typo in IMC1 and 2 formulas. (4ba909a)\r\n- Update warning message in ROI check.  (1f16b9e)\r\n- Update usage section in documentation on command line usage. (fe0e2c3)\r\n\r\n# Internal API\r\n\r\n- Simplify calculation of various GLCM features (no changes in results). (#407)",
        "html_url": "https://github.com/AIM-Harvard/pyradiomics/releases/tag/2.0.1",
        "name": "v2.0.1",
        "release_id": 14048073,
        "tag": "2.0.1",
        "tarball_url": "https://api.github.com/repos/AIM-Harvard/pyradiomics/tarball/2.0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/AIM-Harvard/pyradiomics/releases/14048073",
        "value": "https://api.github.com/repos/AIM-Harvard/pyradiomics/releases/14048073",
        "zipball_url": "https://api.github.com/repos/AIM-Harvard/pyradiomics/zipball/2.0.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "JoostJM",
          "type": "User"
        },
        "date_created": "2018-07-05T14:01:34Z",
        "date_published": "2018-11-16T16:09:09Z",
        "description": "# Feature Calculation Changes\r\n\r\n- Change calculation of filter coefficients to reflect absolute maximum (take into account negative values). (#319)\r\n- Mark duplicate features as 'deprecated' and document mathematical proof of the equality. (#321)\r\n- Fix error in calculation of NGTDM's Complexity and Contrast features. (#351)\r\n\r\n# New Features\r\n\r\n- Add ``preCrop``, which crops the image onto the bounding box with an additional padding specified in ``padDistance``. This is similar to cropping as performed during resampling and serves to decrease memory consumption and computation time. N.B. To ensure calculated values are not changed, a sufficient padding is required when using filters which include values outside of ROI (e.g. Wavelet, LoG). (#317)\r\n- Add ``skip-nans`` as a commandline argument. If specified, features that compute NaN are removed from the output. In batch mode, NaN is replaced by an empty string. (#318)\r\n- Add support to configure the feature extractor using a JSON structured string. (#334)\r\n- Add Gradient Magnitude Filter. (#356)\r\n- Add Local Binary Pattern Filter (2D/3D). (#357)\r\n- Add support for Gray Value discretization using a fixed bin count. (#386)\r\n\r\n# Bug fixes\r\n\r\n- Ensure PyKwalify has a log handler, which is needed when parameter file validation fails. (#309)\r\n- Fix bug in error handling in :py:func:`~radiomics.imageoperations.checkMask` (compatibility issue between python 2 and 3).\r\n- Fix bug in GLCM (incorrect use of ``self.maskArray``). (#322)\r\n- Fix bug in error handling during geometry checks of image and mask. (0257217)\r\n- Fix broken continuous testing integration due to unavailability of pip script. (#333)\r\n- Fix incorrect path separator in example scripts. (c7c5d2e)\r\n- Fix bug in the calculation of Wavelet. (#346)\r\n- Fix machine-precision errors in Eigenvalue calculation (Shape). (#355)\r\n- Update validation rule for image filters (remove hardcoded filters by package-detected filters). (#364)\r\n- Add missing requirements for LBP filters in the dockerfile. (#389)\r\n- Fix deprecation error in feature extractor. (da1fc16)\r\n- Fix axis definition in wavelet. (4027a52)\r\n- Fix erroneous double return of wavelet approximation. (c8ceee2)\r\n\r\n# Tests\r\n\r\n- Improve testing badge layout. (#312)\r\n- Remove unused testing configuration files. (#313)\r\n- Add testing for wavelet output. (#387)\r\n- Integrate publication to PyPi into the Continuous Integration, revise the CI workflow to test python 2.7, 3.4, 3.5 and 3.6 for all 3 platforms (Windows, Mac and Linux). **N.B. This makes PyRadiomics installable via pip**. (#394)\r\n\r\n# Documentation\r\n\r\n- Update documentation of ``base.py``. (#306)\r\n- Update notebooks to reflect most recent version of PyRadiomics. (ac66e6c)\r\n- Add documentation detailing rationale of enforcing a fixed bin width. (#320)\r\n- Update reference to official publication. (b395904)\r\n- Update installation instructions for docker. (#329)\r\n- Add version of NumPy, SimpleITK and PyWavelet to the additional information in the output. (#342)\r\n- Add documentation for the calculation of Laplacian of Gaussian. (#345)\r\n- Add refrences for the newly implemented filters. (4464d1c)\r\n- Fix an error in the firstorder-Uniformity documentation. (da7321d)\r\n\r\n# Examples\r\n\r\n- Add example for batchprocessing using a multithreaded approach. (#305)\r\n\r\n# Internal API\r\n\r\n- Update batch script for the commandline interface. Ensures all required input is available and relative filepaths are relative to the input file, not the current working directory. (#307)\r\n- Remove support for 32-bits python, as memory errors can arise when extracting from many or large images in 32-bits python. (#310)\r\n- Simplify Calculation of Wavelet Filter. Does not change output. (#323)\r\n- Refactor commandline interface to work with only 1 entry point (``pyradiomics``). Also add parallel-processing option for batch-processing (argument ``-j``, which specifies number of CPU cores to use). (#347)\r\n- Reconfigure testing to allow the removal of testcases from the repository itself (still available as binary data attached to release 1.0.0) and store the baseline in a different format (allowing for easier change-tracking). (#353)\r\n- Add a check for number of bins generated (preventing construction of too large matrices in C) (#391)",
        "html_url": "https://github.com/AIM-Harvard/pyradiomics/releases/tag/2.0.0",
        "name": "v2.0.0",
        "release_id": 14047855,
        "tag": "2.0.0",
        "tarball_url": "https://api.github.com/repos/AIM-Harvard/pyradiomics/tarball/2.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/AIM-Harvard/pyradiomics/releases/14047855",
        "value": "https://api.github.com/repos/AIM-Harvard/pyradiomics/releases/14047855",
        "zipball_url": "https://api.github.com/repos/AIM-Harvard/pyradiomics/zipball/2.0.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "JoostJM",
          "type": "User"
        },
        "date_created": "2017-10-06T15:51:40Z",
        "date_published": "2017-10-06T15:53:26Z",
        "description": "# Feature Calculation Changes\r\n\r\n- Remove feature *Sum Variance*, as this is mathematically equal to *Cluster Tendency*. (#300)\r\n\r\n# New Features\r\n\r\n- Add a row by row customization of the extraction label in the batch processing command line script, as well as both batchprocessing examples. (#262)\r\n- Allow value 0 for a resampled pixel spacing (per dimension). Values of 0 are replaced by the spacing for that dimension as it is in the original (non-resampled) mask. This allows resampling over a subset of dimension (e.g. only in-plane resampling when out-of-plane spacing is set to 0). (#299)\r\n- Add optional resegmentation of mask based on customizable threshold. (#302)\r\n- Add Neighbouring Gray Tone Difference Matrix (NGTDM) (#296)\r\n- Add Add Gray Level Dependence Matrix (GLDM) (#295)\r\n- Add a docker file that exposes the PyRadiomics commandline tools. (#297, #301)\r\n\r\n# Bug fixes\r\n\r\n- In GLCM, the matrix is made symmetrical by adding the transposed matrix. However, `numpy.transpose` returns a view and not a copy of the array, causing erroneous results when adding it to the original array. use `numpy.ndarray.copy` to prevent this bug. **N.B. This affects the feature values calculated by GLCM when symmetrical matrix is enabled (as is the default setting).** (#261)\r\n- Use a python implementation to compute eigenvalues for `shape.py` instead of SimpleITK. The implementation in SimpleITK assumes segmented voxels to be consecutive on the x-axis lines. Furthermore, it also assumes that all voxels on a given line of x have the same values for y and z (which is not necessarily the case). (#264)\r\n- Removal of outliers was not applied to returned object in `normalizeImage`. (#277)\r\n- Fix python 3 incompatibility when using `urllib`. (#285)\r\n- Fix broken URL link in feature visualization notebooks.\r\n- Update docker manually install python2 support (since recently not supported by default in\r\n  jupyter/datascience-notebook). (#287)\r\n- For GLRLM and GLSZM, force2D keyword is passed manually, but was incorrectly named and therefore ignored. Fix name to enable forced 2D extraction for GLRLM and GLSZM. (26b9ef3)\r\n\r\n# Tests\r\n\r\n- Update the C Matrices test, so that the C and python calculated matrices will have the same dimensions when compared (In the previous implementation, the `_calculateCoefficients` function was applied to the C calculated matrix, but not in the python calculated matrix, for some texture matrices, this function can change the dimension of the matrix). This update ensures that `_calculateCoefficients` is applied to neither matrix. (#265)\r\n- Add a test to check validity of parameter files included in `examples/exampleSettings`. (#294)\r\n\r\n# Documentation\r\n\r\n[version 1.3.0 docs](http://pyradiomics.readthedocs.io/en/1.3.0)\r\n\r\n- Update reference. (#271)\r\n- Move section \"Customizing the Extraction\" to the top level, to make it more visible. (#271)\r\n- Change License to 3-clause BSD (#272)\r\n- Document the extend of compliance between PyRadiomics and the IBSI feature definitions (#289)\r\n- Fix typos in documentation.\r\n- Expand documentation on customizing the extraction. (#291)\r\n- Include contributing guidelines in sphinx-generated documentation and add a section on sharing parameter files. (#294)\r\n- Insert missing line to enable all features in documentation on using the feature classes directly. (5ce9f48)\r\n\r\n# Examples\r\n\r\n- Add example settings for CT, MR (3 scenarios). (#273)\r\n\r\n# Internal API\r\n\r\n- Remove unnecessary rows and columns from texture matrices prior to feature calculation. This does not affect the value of the calculated features, as the i and j vectors are updated accordingly, but it does reduce both computation time and memory requirements. This is especially the case when calculating GLSZM on large segmentations, where there may be many 'empty' zone sizes (i.e. no zones of that size are present in the ROI). This reduces the size of the matrix, which therefore reduces the memory needed and the number of calculations performed in the vectorized operations. (#265)\r\n- Remove circular import statement in `__init__.py` (circular with `radiomics.base`).  (#270)\r\n- Revise initialization of the feature class. (#274)\r\n- Rename parts of the customization variables and functions to better reflect their definition (#291)\r\n\r\n# License\r\n\r\n- Switch to 3-clause BSD license. (#272)",
        "html_url": "https://github.com/AIM-Harvard/pyradiomics/releases/tag/1.3.0",
        "name": "v1.3.0",
        "release_id": 8026954,
        "tag": "1.3.0",
        "tarball_url": "https://api.github.com/repos/AIM-Harvard/pyradiomics/tarball/1.3.0",
        "type": "Release",
        "url": "https://api.github.com/repos/AIM-Harvard/pyradiomics/releases/8026954",
        "value": "https://api.github.com/repos/AIM-Harvard/pyradiomics/releases/8026954",
        "zipball_url": "https://api.github.com/repos/AIM-Harvard/pyradiomics/zipball/1.3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "JoostJM",
          "type": "User"
        },
        "date_created": "2017-05-30T08:12:25Z",
        "date_published": "2017-05-30T08:13:32Z",
        "description": "# Feature Calculation Changes\r\n\r\n- Remove feature *SumVariance*, rename *SumVariance2*  to *SumVariance*. *SumVariance* reflected the formula as is defined in the paper by Haralick et al [1]_. However, the variance is calculated by subtracting the entropy as opposed to subtracting the average, most likely due to a typo('f8' instead of 'f6'). *SumVariance2* reflected the formula where the average is subtracted and is retrained as the only *SumVariance*.\r\n  (#233)\r\n- Redefine features *Elongation* and *Flatness* as the inverse of the original definition. This prevents a returned\r\n  value of NaN when the shape is completely flat. (#234)\r\n- In certain edge cases, the calculated maximum diameters may be too small when calculating using the python\r\n  implementation. This is corrected by the C extension and a warning is now logged when calculating these \r\nfeatures in  python. **N.B. As of this change, maximum diameter is not available for calculation in full-python mode** (#257)\r\n- For certain formulas, a NaN value is returned in some edge cases. Catch this and return a predefined value instead. Document this behaviour in the docstrings of the features affected.  (#248)\r\n\r\n# New Features\r\n\r\n- Add Region of Interest checks. (#223, #227)\r\n- Add variable column support for batch input file (#228)\r\n- Add Docker support (#236)\r\n\r\n# Bug fixes\r\n\r\n- Instantiate output with input in `commandlinebatch`\r\n- Correct `Np` when weighting is applied in GLRLM (#229)\r\n- Update CSV generators to reflect variable number of columns for input CSV in batch processing (#246)\r\n- Return corrected mask when it had to be resampled due to geometry mismatch errors (#260)\r\n\r\n# Requirements\r\n\r\n- Remove `tqdm` requirement (#232)\r\n- Reorganize requirements, with requirements only needed during development moved to `requirements-dev.txt` (#231)\r\n\r\n# Documentation\r\n\r\n[version 1.2.0 docs](http://pyradiomics.readthedocs.io/en/1.2.0)\r\n\r\n- Update feature docstrings, making them more easily adaptable for article supplements (#233)\r\n- Add FAQ concerning the cmatrices lib path (#233)\r\n- Add developer install step to documentation (#245)\r\n- Remove use of `sudo` (#233)\r\n- Fix subclass name in feature class signature (section \"Developers\")\r\n- Add subsection on customizing the extraction to the \"Usage\" section (#252)\r\n- Remove SimpleITK installation workaround, this is no longer needed (#249)\r\n- Add a changelog to keep track of changes and integrate this into the auto generated documentation (#255)\r\n\r\n# Examples\r\n\r\n- Add `pandas` example, showing how to process PyRadiomics output/input using the `pandas` library (#228)\r\n\r\n# Internal API\r\n\r\n- Add function to get or download test case (#235)\r\n- Rewrite C Extension algorithm for GSLZM. Instead of searching over the image for the next voxel when\r\n  growing a region, store all unprocessed voxels in a stack. This yields a significant increase in performance,\r\n  especially in large ROIs. Requires slightly more memory (1 array, type integer, size equal to number of voxels in\r\n  the ROI) (#257)\r\n- Implement C extension for calculation of maximum diameters. (#257)\r\n\r\n# Cleanups\r\n\r\n- Restructure repository (#254)\r\n  - Move jupyter notebooks to separate root folder (`root/notebooks`)\r\n  - Move example script to separate root folder (`root/examples`), with example settings in separate subfolder\r\n    (`root/examples/exampleSettings`)\r\n  - `bin` folder now only contains support scripts for the core code (i.e. generators for input files for batch\r\n    processing and scripts to generate new baselines or to resample a mask to the image geometry)",
        "html_url": "https://github.com/AIM-Harvard/pyradiomics/releases/tag/1.2.0",
        "name": "v1.2.0",
        "release_id": 6540752,
        "tag": "1.2.0",
        "tarball_url": "https://api.github.com/repos/AIM-Harvard/pyradiomics/tarball/1.2.0",
        "type": "Release",
        "url": "https://api.github.com/repos/AIM-Harvard/pyradiomics/releases/6540752",
        "value": "https://api.github.com/repos/AIM-Harvard/pyradiomics/releases/6540752",
        "zipball_url": "https://api.github.com/repos/AIM-Harvard/pyradiomics/zipball/1.2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "JoostJM",
          "type": "User"
        },
        "date_created": "2017-03-23T09:06:48Z",
        "date_published": "2017-03-22T17:49:35Z",
        "description": "# Feature changes\r\n\r\n- Correct error in formula for `Compactness1`. `N.B. Baseline updated!` #218 \r\n- Remove feature `Roundness`, as this feature is identical to feature `sphericity`, but uses different implementation for surface area calculation (all implemented in SimpleITK) #218 \r\n\r\n# Documentation\r\n\r\nRestructure documentation #216 \r\n- Split package documentation into \"Pipeline Modules\" (all non-feature-class modules) and \"Feature Definitions\" (feature class modules)\r\n- Add developers section with documentation on how to implement new filters, feature and feature classes.\r\n- Add FAQ section with some trouble shooting tips\r\n- *Rename some GLSZM features*, this is to make them more consistent with GLRLM features, which are similar, but calculated on a different matrix\r\n- Add documentation for `Elongation` and `Flatness`\r\n- Document mathematical correlation between various Shape features.\r\n- The version specific documentation is available [here](http://pyradiomics.readthedocs.io/en/1.1.1/).\r\n\r\n# Bugfixes\r\n\r\n- Add some missing python 3 compatibility lines to the supporting script `addClassToBaseline` and command line script  `pyradiomicsbatch` #210 #214\r\n- Fix bug when loading image as file path and mask as SimpleITK object. #211\r\n- Add sphinx_rtd_theme to requirements (needed to build documentation). #222 \r\n- Change location of parameter schema files. These files are otherwise not included in the wheel distribution. #221 \r\n\r\n# Enhancements\r\n\r\n- Update logging with more extensive debug logging and more informative info log messages. #220 \r\n- Replace parameter `verbose` with output printing implemented in logging. Control verbosity level to output (stderr) by calling `radiomics.setVerbosity(level)`, where level determines the verbosity level (as defined in python logging). This prints out the requested levels of the log messaging, where process reports with parameter `verbose` are now classified as INFO-level messages (i.e. specify INFO or DEBUG to enable these). **N.B. parameter `verbose` is not longer supported and will throw an error if passed in the parameter file** #220\r\n- Add feature class and input image type checks in `featureextractor` when changing these settings. #213 \r\n- Remove usage of `eval` (replaced by implementations of `getattr`), this is a more secure approach. #216 \r\n- Change handling of cases where max(X) mod `binwidth` = 0 during image discretization. These used to be assigned to topmost bin, but this produces unexpected behaviour (i.e. in range 1, 2, 3, 4, 5 with binwidth 1, value 5 would be discretized to 4 in stead of 5). Value now assigned is topmost bin + 1 (in concordance with default behavior of `numpy.digitize`) #219 \r\n- Add forced 2D extraction (as alternative to resampling for handling anisotropy in voxels spacing) #215\r\n- Enable specification of distances between neighbors for texture matrices. #215 \r\n- Change default value for `voxelArrayShift` (from 2000 to 0), this is to prevent unknowingly using a too large shift when not necessary. Document effect of this parameter in the first order formulas affected. #219 \r\n\r\n# Style\r\n\r\n- Remove unused variable (`self.provenance_on` in `featureextractor`, this value is now replaced by a customizable setting)\r\n- Define default settings in `featureextractor` in a separate function. This is to ensure consistency in applied default settings, as well as make them easily available outside of `featureextractor` #224 216\r\n- Update reference in documentation. #224 \r\n",
        "html_url": "https://github.com/AIM-Harvard/pyradiomics/releases/tag/1.1.1",
        "name": "v1.1.1",
        "release_id": 5834920,
        "tag": "1.1.1",
        "tarball_url": "https://api.github.com/repos/AIM-Harvard/pyradiomics/tarball/1.1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/AIM-Harvard/pyradiomics/releases/5834920",
        "value": "https://api.github.com/repos/AIM-Harvard/pyradiomics/releases/5834920",
        "zipball_url": "https://api.github.com/repos/AIM-Harvard/pyradiomics/zipball/1.1.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "JoostJM",
          "type": "User"
        },
        "date_created": "2017-02-22T21:40:49Z",
        "date_published": "2017-02-22T22:03:30Z",
        "description": "# Implementation of C Extensions\n\n## Stats:\n\nProfiling 5 testcases using python 2.7\n- GLCM 6913 ms -> 3 ms\n- GLSZM 12064 ms -> 58 ms\n- GLRLM 1850 ms -> 10 ms\n- Surface Area 3241 -> 1 ms\n\n## Code:\n- _cmatrices: C implementation for matrix computation associated with GLCM, GLSZM and GLRLM features.\n- _cshape: C implementation for Shape surface computation.\n- tests/test_cmatrices: testing for matrix equality: Tests whether the python generated matrix is equal to the matrix generated by the C implementations (allows for machine precision errors). Also compares the python and C generated surface computations similarly.\n\n## Details\n- Standardize function names for calculating matrices in python and with C extensions to `_calculateMatrix` and `_calculateCMatrix`, respectively.\n- Add docstring to C modules.\n- Use of C implementation optional. At initialization, the package tries to use C, but if loading has failed, or calculation is forced to python, python is used. Note that the import of _cmatrices is done after initialization of logger. This ensures error will be logged if import fails. This can be controlled through the `enableCExtensions` setting, which can be provided in a parameter file or as part of the `kwargs` dictionary in `featureextractor`.\n- GLSZM: Use \"char\" datatype for mask. (It is signed char in GLSZM).\n- C code is consistent with C89 convention. All variables (pointers for python objects) are initialized at top of each block.\n- GLSZM: Use `calloc` and `free` for the temporary array holding the calculated zones.\n\n## Optimizations\n- GLSZM:\n  - Define temporary array for holding the calculated zones. During calculation, the matrix must be able to store all possible zones, ranging from zone size 1 to total number of voxels (Ns), for each gray level (Ng). In this case, the GLSZM would be initialized with size Ng \\* Ns, which is very memory intensive. Instead, use a temporary array of size (Ns \\* 2) + 1, which stores all calculated zones in pairs of 2  elements: the first element holds the gray level, the second the size of the calculated zone. The first element after the last zone is set to -1 to serve as a stop sign for the second function, which translates the temporary array into the final GLSZM, which can be directly initialized at optimum size.\n  - Uses \"while\" loops. This allows to reduce the memory usage. We observed that with recursive functions it was 'unexpectedly' failing.\n  - Optimized search that finds a new index to process in the region growing.\n\nAssociated issues: #106 \n\nAssociated PRs: #158, #200, #202 \n\n# Python 3 Compatibility:\n- As of this version, PyRadiomics is compatible with python 2.7 and python >= 3.4. This is acchieved through use of third-party package six (added to requirements.txt). The changes to ensure this compatibility do not change the user interface. \n\nAssociated issues: #178, #204\n\nAssociated PRs: #188, #194, #196, #205\n\n# Normalization\n- Add functionality to `imageoperations` for normalizing image intensity values. If enabled, the image is normalized by centering it at the mean with standard deviation. Normalization is based on all gray values in the image, not just those inside the segementation. It is enabled or disabled by setting the parameter `normalize`. \n- Values can be scaled using parameter `normalizeScale`, which multiplies the normalized intensity values by the value of this paramter.\n- Outliers can be removed by setting the `removeOutliers` parameter. If set, all values differing more than `n * (standard deviation)` from the mean are set to `n * (standard deviation)`, where `n` is equal to the value of this parameter. This is done after normalizing and before applying the scale. If this last parameter is omitted, no outliers are removed.\n- If enabled, normalization is applied after loading the image, before any resampling or application of filters.\n\nAssociated PRs: #209 \n\n# Parameterization:\n- Add parameter for controlling the additional output (enable/disable by setting `additionalInfo` parameter)\n- Add parameter for controlling whether or not to calculate in full-python mode (enable/disable by setting `enableCExtensions` parameter).\n\nAssociated PRs: #190, #202\n\n# Documentation:\n- Documentation on installation and usage is upgraded, with the addition of an embedded instruction video (in section \"Usage\", cued at the section on usage examples).\n- Updated contact information to point to the google groups.\n- Updated the classifiers in the setup script to reflect the more advanced status of Pyradiomics.\n- The version specific documentation is available [here](http://pyradiomics.readthedocs.io/en/1.1.0/).\n\nAssociated PRs: #187, #193\n\n# Continuous Testing:\n\nUpgrade to include other python versions and platforms\n- Tests are passed for Linux, Windows and Mac, using python 2.7, 3.4 and 3.5, in 32- and 64-bit builds.\n\nAssociated PRs: #183, #191, #199 \n\n# Style:\n- Testing output is upgraded to ensure unique feature names.\n- `getFeatureClasses()` and `getInputImageTypes()` functions are moved from `featureextractor` to global radiomics namespace. This enumerates the possible feature classes and filters at initialization of the toolbox, and ensures feature classes are imported at initialization.\n\nAssociated PRs: #190, #195, #197, #198\n",
        "html_url": "https://github.com/AIM-Harvard/pyradiomics/releases/tag/1.1.0",
        "name": "v1.1.0",
        "release_id": 5541083,
        "tag": "1.1.0",
        "tarball_url": "https://api.github.com/repos/AIM-Harvard/pyradiomics/tarball/1.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/AIM-Harvard/pyradiomics/releases/5541083",
        "value": "https://api.github.com/repos/AIM-Harvard/pyradiomics/releases/5541083",
        "zipball_url": "https://api.github.com/repos/AIM-Harvard/pyradiomics/zipball/1.1.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "JoostJM",
          "type": "User"
        },
        "date_created": "2017-02-01T22:40:08Z",
        "date_published": "2017-02-06T20:55:41Z",
        "description": "### Additional Functionality:\n- Added 2 commandline scripts: pyradiomics and pyradiomicsbatch, which enable feature extraction directly from the commandline. For help on usage, run script with \u201c-h\u201d argument.\n\n### Changed Functionality:\n- Different implementation of the various filters. No changes to calculation, but has a changed signature. \n  \n  **N.B. This results in inputImages to be differently defined (different capitalization, e.g. \"orginal\" should now be \"Original\"). See documentation for definition of inputImages (featureextractor section).**\n\n### Bugfixes:\n- Bugfix of a numpy slicing error in application of wavelet filters. This error caused the derived image to be erroneously rotated and flipped, with misaligned mask as a result.\n\n### [Documentation](http://pyradiomics.readthedocs.io/en/v1.0.1/):\n- Update on the documentation, reflecting recent changes in the code. \n- Added additional references and updated installation and usage section.\n",
        "html_url": "https://github.com/AIM-Harvard/pyradiomics/releases/tag/v1.0.1",
        "name": "v1.0.1",
        "release_id": 5375383,
        "tag": "v1.0.1",
        "tarball_url": "https://api.github.com/repos/AIM-Harvard/pyradiomics/tarball/v1.0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/AIM-Harvard/pyradiomics/releases/5375383",
        "value": "https://api.github.com/repos/AIM-Harvard/pyradiomics/releases/5375383",
        "zipball_url": "https://api.github.com/repos/AIM-Harvard/pyradiomics/zipball/v1.0.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "JoostJM",
          "type": "User"
        },
        "date_created": "2016-12-22T23:12:06Z",
        "date_published": "2017-01-23T14:47:21Z",
        "description": "- Initial release of PyRadiomics\r\n- Full python calculation (C matrices branch not stable and reserved for later release)\r\n- Published documentation at [readthedocs](http://pyradiomics.readthedocs.io/en/v1.0/)\r\n",
        "html_url": "https://github.com/AIM-Harvard/pyradiomics/releases/tag/v1.0",
        "name": "v1.0",
        "release_id": 5239393,
        "tag": "v1.0",
        "tarball_url": "https://api.github.com/repos/AIM-Harvard/pyradiomics/tarball/v1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/AIM-Harvard/pyradiomics/releases/5239393",
        "value": "https://api.github.com/repos/AIM-Harvard/pyradiomics/releases/5239393",
        "zipball_url": "https://api.github.com/repos/AIM-Harvard/pyradiomics/zipball/v1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contributors",
    "faq",
    "identifier"
  ],
  "somef_provenance": {
    "date": "2024-10-06 17:38:30",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1147
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Supporting reproducible extraction",
        "parent_header": [
          "pyradiomics v3.1.0",
          "Radiomics feature extraction in Python"
        ],
        "type": "Text_excerpt",
        "value": "Aside from calculating features, the pyradiomics package includes provenance information in the\noutput. This information contains information on used image and mask, as well as applied settings\nand filters, thereby enabling fully reproducible feature extraction.\n"
      },
      "source": "https://raw.githubusercontent.com/Radiomics/pyradiomics/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "pyradiomics v3.1.0",
          "Radiomics feature extraction in Python"
        ],
        "type": "Text_excerpt",
        "value": "PyRadiomics can be easily used in a Python script through the `featureextractor`\nmodule. Furthermore, PyRadiomics provides a commandline script, `pyradiomics`, for both single image extraction and \nbatchprocessing. Finally, a convenient front-end interface is provided as the 'Radiomics'\nextension for 3D Slicer, available [here](https://github.com/AIM-Harvard/SlicerRadiomics).\n"
      },
      "source": "https://raw.githubusercontent.com/Radiomics/pyradiomics/master/README.md",
      "technique": "header_analysis"
    }
  ]
}