{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/yhhshb/yalff"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-03-06T12:53:24Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-07-19T03:28:13Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Yet Another Lossy Fastq Filter"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "type": "Text_excerpt",
        "value": "YALFF (Yet Another Lossy FASTQ Filter) is a smoother for FASTQ files which uses an FM-Index to store the k-mer database.\nThe compressed index greatly reduces the amount of memory required compared to other tools such as [QUARTZ][1]. This is because the dictionary of k-mers can be linearized into contigs.\n\nThe actual compression is achieved by standard lossless compressors such as gzip, bzip2 and xz. The compression ratio is increased by the smoothing procedure which basically reduces entropy by replacing most of the quality values with a fixed value. The algorithm guarantees that the most relevant qualities for downstream analysis are kept untouched.\n"
      },
      "source": "https://raw.githubusercontent.com/yhhshb/yalff/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9953562520318822,
      "result": {
        "original_header": "<a href=\"https://doi.org/10.1186/s12859-019-2883-5\">Smoothing by using a reference</a>",
        "type": "Text_excerpt",
        "value": "The most easy way to have a reliable set of k-mers to work with is by indexing an already available reference genome. This option is recommended if one doesn't have a list of known SNPs and/or a reassembly procedure of all the k-mers coming from real datasets would be too expensive to carry on.\n \n"
      },
      "source": "https://raw.githubusercontent.com/yhhshb/yalff/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9834093455616923,
      "result": {
        "original_header": "<a href=\"https://doi.org/10.1142/S0219720019400110\">SNPs-Aware solution</a>",
        "type": "Text_excerpt",
        "value": "If a set of SNPs is known it is possible to add the mutated k-mers into the reference to smooth a larger number of values and to signal the correctness of a base to downstream analysis.\nAll the reassebled indeces used in our studies can be found at: [![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.2637994.svg)](https://doi.org/10.5281/zenodo.2637994)  \nThe results produced by this type of indeces are better in terms of overall compression, Precision and Recall than the standard reference, similarly to what happens in [GeneCodeq][13].\nIt is also possible to reassemble a k-mer dictionary with the [assembler][4] developed for the [ProPhyle][5] package.\nFor this purpose the script folder contains the utility print_mitdb.c to print the k-mers of the dictionaries generated by [Quartz][1] and [LAVA][6] which can then be redirected to the assembler. \n"
      },
      "source": "https://raw.githubusercontent.com/yhhshb/yalff/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.943540810451369,
      "result": {
        "original_header": "Evaluation",
        "type": "Text_excerpt",
        "value": "The Precision, Recall and F-Measure are computed by aligning the smoothed dataset to the reference and comparing the quality of the resulting alignment to a standard ground truth. The dataset used for comparison in our study is the Platinum genome NA12878 and relative vcf files downloaded from the Illumina ftp (which is open access and if it asks for a password just continue). \nA [script](scripts/evaluation.job) is available containing the whole pipeline used for evaluation.\n \n"
      },
      "source": "https://raw.githubusercontent.com/yhhshb/yalff/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8292889150271902,
      "result": {
        "original_header": "Availability",
        "type": "Text_excerpt",
        "value": "YALFF is licenced under the [MIT](./LICENSE) licence.\nBe aware that the final executable **will be GPL-ed** because of the linking at object level with bwa. \n"
      },
      "source": "https://raw.githubusercontent.com/yhhshb/yalff/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/yhhshb/yalff/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/yhhshb/yalff/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "yhhshb/yalff"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/yhhshb/yalff/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "identifier": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://doi.org/10.5281/zenodo.2637994"
      },
      "source": "https://raw.githubusercontent.com/yhhshb/yalff/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://zenodo.org/badge/latestdoi/124078095"
      },
      "source": "https://raw.githubusercontent.com/yhhshb/yalff/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "YALFF links statically to **bwa** to use its FM-Index implementation and shared memory capabilities. This has the implicit advantage of not requiring a separate construction step if an index is already available.\nThe [zlib][15] library is the only system-wide dependency required.\n\n```sh\ngit clone --recursive https://github.com/yhhshb/yalff.git\ncd yalff\nmake\n```\n\nThe current stable version can be found at: [![DOI](https://zenodo.org/badge/124078095.svg)](https://zenodo.org/badge/latestdoi/124078095) but it does not comprehend a copy of [bwa][3] nor a copy of the [CTPL][17] library which must be downloaded and added separately.\n"
      },
      "source": "https://raw.githubusercontent.com/yhhshb/yalff/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1.0,
      "result": {
        "original_header": "Availability",
        "type": "Text_excerpt",
        "value": "[1]: http://cb.csail.mit.edu/cb/quartz\n[2]: http://bioinformatics.it/bits2018\n[3]: http://bio-bwa.sourceforge.net/\n[4]: https://github.com/prophyle/prophasm\n[5]: https://prophyle.github.io\n[6]: http://cb.csail.mit.edu/cb/lava/\n[7]: http://giant.csail.mit.edu/quartz/dec200.bin.sorted.gz\n[8]: http://giant.csail.mit.edu/quartz/dec200.bin.sorted.swapped.gz\n[9]: https://github.com/arshajii/lava/\n[10]: http://cb.csail.mit.edu/cb/lava/data/hg19.fa.gz\n[11]: http://cb.csail.mit.edu/cb/lava/data/SNPs142_hg19_Common.filt.txt\n[12]: http://cb.csail.mit.edu/cb/lava/data/Affymetrix_6_SNPs.txt\n[13]: https://www.ncbi.nlm.nih.gov/pubmed/27354700\n[14]: http://en.wikipedia.org/wiki/GNU_General_Public_License\n[15]: http://zlib.net\n[16]: http://www.bioinformatics.biostec.org/\n[17]: https://github.com/vit-vit/CTPL \n"
      },
      "source": "https://raw.githubusercontent.com/yhhshb/yalff/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/yhhshb/yalff/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "The MIT License\n\nCopyright (c) 2018 Yoshihiro Shibuya\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
      },
      "source": "https://raw.githubusercontent.com/yhhshb/yalff/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "yalff"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "yhhshb"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 82303,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 15719,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 5642,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 952,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/yhhshb/yalff/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "yhhshb",
          "type": "User"
        },
        "date_created": "2019-04-12T12:14:12Z",
        "date_published": "2019-04-12T12:35:12Z",
        "description": "Version 0.1.0 of YALFF. \r\nIt is stable enough to be extensively used everyday. It is not a major version because I want to wait for some feedback before releasing the first major version, just to avoid to do another release to fix some missed minor problem in the API.",
        "html_url": "https://github.com/yhhshb/yalff/releases/tag/v0.1.0",
        "name": "YALFF v0.1.0",
        "release_id": 16725647,
        "tag": "v0.1.0",
        "tarball_url": "https://api.github.com/repos/yhhshb/yalff/tarball/v0.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/yhhshb/yalff/releases/16725647",
        "value": "https://api.github.com/repos/yhhshb/yalff/releases/16725647",
        "zipball_url": "https://api.github.com/repos/yhhshb/yalff/zipball/v0.1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 17:56:44",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "type": "Text_excerpt",
        "value": "YALFF preserves the orders of the reads of the input files so there is no need for a paired-end mode.\n\n* Smoothing a fastq file:\n    \n        cat file.fastq | ./yalff -d index.fa > file_smoothed.fastq\n    \n* Smoothing a gzipped fastq file:\n\n        zcat file.fastq.gz | ./yalff -d index.fa | gzip > file_smoothed.fastq.gz\n        \n* Smoothing using an index loaded in shared memory:\n\n        bwa shm index.fa\n        zcat file.fastq.gz | ./yalff -shm index.fa | gzip > file_smoothed.fastq.gz\n        bwa shm -d\n        \n* All the options available are:\n\n        -d STR\t Reference file in fasta format.\n\n        -k NUM\t k-mer length. [32] (max = 255 excluded)\n\n        -m NUM\t Number of mismatches allowed per k-mer. [1]\n\n        -c NUM\t Chunk size. The number of reads read at once on each iteration. [10000]\n\n        -b CHAR\t Sanger threshold for a quality score to be considered. [$]\n\n        -g CHAR\t Sanger threshold for a quality score to be considered correct independently from the dictionary. [I]\n\n        -s NUM\t Number of bases to skip after each k-mer. A value of 0 checks all the k-mers. [0]\n\n        -q CHAR\t Sanger value used as replacement during smoothing. [I]\n\n        -e CHAR\t Sanger value used as an eventual replacement when a k-mer aligns badly. [j]\n\n        -t NUM\t Number of threads available. [Hardware concurrency - 1]\n\n        -sst NUM\t Smoothing algorithm. 0 checks all and only the k-mers considered. 1 applies a seed and extend search if a k-mer has no mismatches. [0]\n\n        -shm STR\t Reference file loaded into shared memory.\n\n        -h       See this help.\n"
      },
      "source": "https://raw.githubusercontent.com/yhhshb/yalff/master/README.md",
      "technique": "header_analysis"
    }
  ]
}