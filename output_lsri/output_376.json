{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/zbirenbaum/SealFaceRecognition"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-06-22T08:44:34Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-02-27T23:23:34Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9367384382353876,
      "result": {
        "original_header": "SEALNET",
        "type": "Text_excerpt",
        "value": "This document is intended as a detailed guide to help with\ninstallation and running of\nSealNet, a face recognition software for Harbor Seals. The\ninstructions are intended to\nrun the software on Amazon Web Services (AWS) EC2 cluster running\nLinux but they can be\nmodified for use on other setups running Linux or other Unix-like\nsystems.\nTo run a command, type it out on the terminal and hit enter. \nThe instruction here is an example of how to access the terminal for user named Krista Ingram.\nIf you have your own account, please replace kingram with your account name (for instance, Ahmet Ay should be aay).\n \n"
      },
      "source": "https://raw.githubusercontent.com/zbirenbaum/SealFaceRecognition/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9956926245701286,
      "result": {
        "original_header": "Data",
        "type": "Text_excerpt",
        "value": "SealNet is a face recognition software that is trained using photos.\nAs of now, the software expects files of png, jpg and jpeg formats.\nThe directories must be structured as follows:\n```\n.\n\u251c\u2500\u2500 SealFaceRecognition\n    \u251c\u2500\u2500\u2500data\n        \u251c\u2500\u2500processed\n            |-- train\n            |-- probe\n        \u251c\u2500\u2500unprocessed \n            |-- train\n               \u251c\u2500\u2500Final_Training_Dataset\n                  \u251c\u2500\u2500 seal_1\n                  \u2502   \u251c\u2500\u2500 photo1.png\n                  \u2502   \u2514\u2500\u2500 photo2.png\n                  \u251c\u2500\u2500 seal_2\n                  \u2502   \u251c\u2500\u2500 photo1.jpg\n                  \u2502   \u2514\u2500\u2500 photo2.jpg\n                  \u2514\u2500\u2500 seal_3\n                      \u251c\u2500\u2500 photo1.png\n                      \u251c\u2500\u2500 photo2.png\n                      \u2514\u2500\u2500 photo3.jpg\n            |-- probe\n                \u251c\u2500\u2500Your_Probe_Set\n\n\n```\nIn the ./data folder, there should be a processed and an unprocessed folder. All initial data should be placed in the unprocessed folder. From the SealFaceRecognition root directory run `python zprocess.py` which will create processed counterparts in 'data/processed' for each of the datasets contained in unprocessed. We have included our dataset as an example under 'final_dataset'. To run the model on this example, simply move final_dataset/Final_Data to data/unprocessed/\nWe will show you how to upload your data to AWS in step 3 of setting up SEALNET\n \n"
      },
      "source": "https://raw.githubusercontent.com/zbirenbaum/SealFaceRecognition/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9036274328593208,
      "result": {
        "original_header": "Connect to AWS for new user",
        "type": "Text_excerpt",
        "value": "If this is your first time connecting to AWS, you can follow the instructions\nbelow to set up your workspace.  \nNOTE: If you try to log in to AWS and you encounter an error that says:\n    WARNING: UNPROTECTED PRIVATE KEY FILE!\nRun this command `chmod 400 kingram_id_rsa.txt` in the Downloads folder to\nchange permissions on your key. \nAt this step, you are now connected to the AWS cluster. \nNote: To end the AWS session type in 'sudo poweroff' and hit enter\nor visit http://hpc-aws-launcher.colgate.edu/ and clicking stop. \nThe upcoming instructions assume the EC2 instance has been configured by\nColgate ITS. You will need git and latest python3 installed. \n7. Run `cd /data` to access the data directory\n8. Run `mkdir kingram_workspace` to create your workspace. This will be\nthe primary working directory.\n9. Run `cd kingram_workspace`\nNow you have created your own workspace on the AWS cluster. Whenever you\nconnect to AWS next time, please cd to this workspace to run your code.\n \n"
      },
      "source": "https://raw.githubusercontent.com/zbirenbaum/SealFaceRecognition/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9104118631132427,
      "result": {
        "original_header": "Accessing SEALNET for returning user",
        "type": "Text_excerpt",
        "value": "1. Start the aws instance by visiting http://hpc-aws-launcher.colgate.edu/ and clicking start.\n2. Open VS Code, then open the Terminal on VS Code by clicking Terminal. Connect to the AWS server by clicking the icon >< in the bottom right of VS Code, then choose \"Connect to Host\", and click on \"gpu-1.colgte.edu\"\n3. Navigate to your SealNet workspace in the folder /data/kingram_workspace/SealFaceRecognition.\n4. On the terminal, checking for the latest version of the software by running `git pull` \n5. **[ONLY DO THIS STEP IF YOU ARE TRAINING WITH NEW DATA]** Run `sh ./clean.sh`, this will delete all training and probe folders on the AWS cluster. Then you can drag your training folder from your local laptop into the data/unprocessed/train folder on the AWS cluster. Likewise, drag your probe folder from your local laptop into the data/unprocessed/probe folder on the AWS cluster.\n6. Activate your virtual environment by running `source ./py37/bin/activate`.\n7. Run `source ../cuda.sh`  \n \n"
      },
      "source": "https://raw.githubusercontent.com/zbirenbaum/SealFaceRecognition/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8563503509852957,
      "result": {
        "original_header": "Additional info:",
        "type": "Text_excerpt",
        "value": "1. The result.json file will be used in https://github.com/hieudo-hn/recognitionGUI.git.\n2. How to open a separate terminal: Right Click on the Terminal Icon and choose New Window.\n3. Tips on terminal: Use Tab to autocomplete pathing in your terminal and arrow up to view your previous command \n \n"
      },
      "source": "https://raw.githubusercontent.com/zbirenbaum/SealFaceRecognition/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/zbirenbaum/SealFaceRecognition/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/zbirenbaum/SealFaceRecognition/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "zbirenbaum/SealFaceRecognition"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SEALNET"
      },
      "source": "https://raw.githubusercontent.com/zbirenbaum/SealFaceRecognition/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/zbirenbaum/SealFaceRecognition/master/clean.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/zbirenbaum/SealFaceRecognition/master/generatePrediction.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/zbirenbaum/SealFaceRecognition/master/examplecmd.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/zbirenbaum/SealFaceRecognition/master/train_open_set.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/zbirenbaum/SealFaceRecognition/master/train.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Setting up SEALNET for new user",
        "parent_header": [
          "SEALNET"
        ],
        "type": "Text_excerpt",
        "value": "The following instructions assume that you are currently in your workspace\non the AWS instance. If you have set up SEALNET before, you can skip this \nstep.\n\n1. Run `git clone https://github.com/zbirenbaum/SealFaceRecognition.git` to\ndownload SealNet and run `cd ./SealFaceRecognition`\n2. Setting up the data folder: \n```\nmkdir data && mkdir data/processed && mkdir data/unprocessed && mkdir data/unprocessed/train && mkdir data/unprocessed/probe && mkdir data/processed/train && mkdir data/processed/probe\n```\n3. Make sure that your training data is in the Download folder and is named 'Final_Training_Dataset'. You should also make sure that no files/folders within Final_Training_Dataset has a space in their names. \nIn a SEPARATE terminal window, run `cd ~/Downloads/` to change\ndirectory. Run \n```\nscp -i kingram_id_rsa.txt -r Final_Training_Dataset kingram@gpu-1.colgate.edu:/data/kingram_workspace/SealFaceRecognition/data/unprocessed/train\n```\nto copy the photos to AWS.\nSimilarly, if you have new probe folders, make sure that it is named probe_folder_test and is located in the Downloads folder on your local laptop. Then run:\n```\nscp -i kingram_id_rsa.txt -r probe_folder_test kingram@gpu-1.colgate.edu:/data/kingram_workspace/SealFaceRecognition/data/unprocessed/probe\n```\n\n4. In the other terminal window still logged into AWS, run `cd SealFaceRecognition` to change directory\n5. Create a virtual environment by running:\n`python3 -m venv py37`\nThe AWS instance has python 3.7 as the global python3 version.\n6. Activate your virtual environment by running `source ./py37/bin/activate`\n7. Install all dependencies by running `pip install -r requirements.txt`. If it gives an error,\nrun `./py37/bin/python3 -m pip install --upgrade pip` to update pip and run the previous command again.\nWhen you are done with the virtual environment, run `deactivate`\n"
      },
      "source": "https://raw.githubusercontent.com/zbirenbaum/SealFaceRecognition/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Setting up VS Code",
        "parent_header": [
          "SEALNET"
        ],
        "type": "Text_excerpt",
        "value": "1. Open Terminal in VS Code by clicking the Terminal button.\n2. Copy your rsa_file into .ssh folder:\n```\ncp ~/Downloads/kingram_id_rsa.txt ~/.ssh/\n```\n3. Install remote-ssh extension on VS Code: you can do so by clicking on the 4-square icon on the left sidebar and search for Remote - SSH. Then click install.\n4. Then Open the VS Code's command palette by doing Command-Shift-P and search for Remote - SSH: Open SSH Configuration File and paste the following into the config file:\n```\nHost gpu-1.colgate.edu\n    HostName gpu-1.colgate.edu\n    User kingram\n    IdentityFile ~/.ssh/kingram_id_rsa.txt\n    IdentitiesOnly yes\n```\n"
      },
      "source": "https://raw.githubusercontent.com/zbirenbaum/SealFaceRecognition/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9982713354556333,
      "result": {
        "original_header": "SEALNET",
        "type": "Text_excerpt",
        "value": "This document is intended as a detailed guide to help with\ninstallation and running of\nSealNet, a face recognition software for Harbor Seals. The\ninstructions are intended to\nrun the software on Amazon Web Services (AWS) EC2 cluster running\nLinux but they can be\nmodified for use on other setups running Linux or other Unix-like\nsystems.\nTo run a command, type it out on the terminal and hit enter. \n"
      },
      "source": "https://raw.githubusercontent.com/zbirenbaum/SealFaceRecognition/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9996736546365421,
      "result": {
        "original_header": "Connect to AWS for new user",
        "type": "Text_excerpt",
        "value": "If this is your first time connecting to AWS, you can follow the instructions\nbelow to set up your workspace.  \nThe instructions assume you are running MacOs or some other Unix-like\nsystem. If you have\nWindows installed, you may need to download and install OpenSSH\nhttps://docs.microsoft.com/en-us/windows-server/administration/openssh/openssh_install_firstuse.\n1. Download the ssh key kingram_id_rsa to your Downloads folder.\n2. If you are not on the Colgate network, make sure you are connected\nto the VPN\n3. Start the aws instance by visiting http://hpc-aws-launcher.colgate.edu/ and clicking start.\n4. Open terminal application from the applications folder\n5. Run `cd ~/Downloads/` to change the directory\n6. Run `ssh -i kingram_id_rsa.txt kingram@gpu-1.colgate.edu` \nNOTE: If you try to log in to AWS and you encounter an error that says:\n    WARNING: UNPROTECTED PRIVATE KEY FILE!\nRun this command `chmod 400 kingram_id_rsa.txt` in the Downloads folder to\nchange permissions on your key. \nThe upcoming instructions assume the EC2 instance has been configured by\nColgate ITS. You will need git and latest python3 installed. \n7. Run `cd /data` to access the data directory\n8. Run `mkdir kingram_workspace` to create your workspace. This will be\nthe primary working directory.\n9. Run `cd kingram_workspace`\nNow you have created your own workspace on the AWS cluster. Whenever you\nconnect to AWS next time, please cd to this workspace to run your code.\n \n"
      },
      "source": "https://raw.githubusercontent.com/zbirenbaum/SealFaceRecognition/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 1.0,
      "result": {
        "original_header": "Accessing SEALNET for returning user",
        "type": "Text_excerpt",
        "value": "1. Start the aws instance by visiting http://hpc-aws-launcher.colgate.edu/ and clicking start.\n2. Open VS Code, then open the Terminal on VS Code by clicking Terminal. Connect to the AWS server by clicking the icon >< in the bottom right of VS Code, then choose \"Connect to Host\", and click on \"gpu-1.colgte.edu\"\n3. Navigate to your SealNet workspace in the folder /data/kingram_workspace/SealFaceRecognition.\n4. On the terminal, checking for the latest version of the software by running `git pull` \n5. **[ONLY DO THIS STEP IF YOU ARE TRAINING WITH NEW DATA]** Run `sh ./clean.sh`, this will delete all training and probe folders on the AWS cluster. Then you can drag your training folder from your local laptop into the data/unprocessed/train folder on the AWS cluster. Likewise, drag your probe folder from your local laptop into the data/unprocessed/probe folder on the AWS cluster.\n6. Activate your virtual environment by running `source ./py37/bin/activate`.\n7. Run `source ../cuda.sh`  \n \n"
      },
      "source": "https://raw.githubusercontent.com/zbirenbaum/SealFaceRecognition/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999979489949739,
      "result": {
        "original_header": "Training SEALNET",
        "type": "Text_excerpt",
        "value": "To train SealNet, make sure you are in the SealNet workspace and is \ncurrently in the py39 virtual environment.\n        \n1. Run `sh ./train.sh` to start training\nthe network with the pre-processed data. Do not close the\nterminal window or log out while the program is running.\nAlternatively, you can also run `sh ./train.sh 5`\nto run a 5 fold cross-validation on your data.\n \n"
      },
      "source": "https://raw.githubusercontent.com/zbirenbaum/SealFaceRecognition/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999999994951736,
      "result": {
        "original_header": "Using SEALNET for prediction",
        "type": "Text_excerpt",
        "value": "1. If you have uploaded the probe photos, you can ignore this step. Otherwise, drag your probe folder from your local laptop into the data/unprocessed/probe folder on the AWS cluster.\n2. On the terminal connected to AWS, run `sh ./generatePrediction.sh` to run the recognition model on your probe data. It will output a result.json file that you will use to open the GUI.\n3. Back on the Desktop terminal, run \n```\ncd ~/Downloads\nscp -i kingram_id_rsa.txt kingram@gpu-1.colgate.edu:/data/kingram_workspace/SealFaceRecognition/result.json ./\n```\nto download the result files into Download folders.\n \n"
      },
      "source": "https://raw.githubusercontent.com/zbirenbaum/SealFaceRecognition/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9745919769149388,
      "result": {
        "original_header": "Close the program",
        "type": "Text_excerpt",
        "value": "1. When you are done with the program, close the virtual environment by running `deactivate`.\n2. Stop the aws instance by visiting http://hpc-aws-launcher.colgate.edu/ and clicking stop.\n \n"
      },
      "source": "https://raw.githubusercontent.com/zbirenbaum/SealFaceRecognition/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999999993194137,
      "result": {
        "original_header": "Additional info:",
        "type": "Text_excerpt",
        "value": "1. The result.json file will be used in https://github.com/hieudo-hn/recognitionGUI.git.\n2. How to open a separate terminal: Right Click on the Terminal Icon and choose New Window.\n3. Tips on terminal: Use Tab to autocomplete pathing in your terminal and arrow up to view your previous command \n \n"
      },
      "source": "https://raw.githubusercontent.com/zbirenbaum/SealFaceRecognition/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8244545825532789,
      "result": {
        "original_header": "Data",
        "type": "Text_excerpt",
        "value": "SealNet is a face recognition software that is trained using photos.\nAs of now, the software expects files of png, jpg and jpeg formats.\nThe directories must be structured as follows:\n```\n.\n\u251c\u2500\u2500 SealFaceRecognition\n    \u251c\u2500\u2500\u2500data\n        \u251c\u2500\u2500processed\n            |-- train\n            |-- probe\n        \u251c\u2500\u2500unprocessed \n            |-- train\n               \u251c\u2500\u2500Final_Training_Dataset\n                  \u251c\u2500\u2500 seal_1\n                  \u2502   \u251c\u2500\u2500 photo1.png\n                  \u2502   \u2514\u2500\u2500 photo2.png\n                  \u251c\u2500\u2500 seal_2\n                  \u2502   \u251c\u2500\u2500 photo1.jpg\n                  \u2502   \u2514\u2500\u2500 photo2.jpg\n                  \u2514\u2500\u2500 seal_3\n                      \u251c\u2500\u2500 photo1.png\n                      \u251c\u2500\u2500 photo2.png\n                      \u2514\u2500\u2500 photo3.jpg\n            |-- probe\n                \u251c\u2500\u2500Your_Probe_Set\n\n\n```\nIn the ./data folder, there should be a processed and an unprocessed folder. All initial data should be placed in the unprocessed folder. From the SealFaceRecognition root directory run `python zprocess.py` which will create processed counterparts in 'data/processed' for each of the datasets contained in unprocessed. We have included our dataset as an example under 'final_dataset'. To run the model on this example, simply move final_dataset/Final_Data to data/unprocessed/\nWe will show you how to upload your data to AWS in step 3 of setting up SEALNET\n \n"
      },
      "source": "https://raw.githubusercontent.com/zbirenbaum/SealFaceRecognition/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8160101884076344,
      "result": {
        "original_header": "Using SEALNET for prediction",
        "type": "Text_excerpt",
        "value": "1. If you have uploaded the probe photos, you can ignore this step. Otherwise, drag your probe folder from your local laptop into the data/unprocessed/probe folder on the AWS cluster.\n2. On the terminal connected to AWS, run `sh ./generatePrediction.sh` to run the recognition model on your probe data. It will output a result.json file that you will use to open the GUI.\n3. Back on the Desktop terminal, run \n```\ncd ~/Downloads\nscp -i kingram_id_rsa.txt kingram@gpu-1.colgate.edu:/data/kingram_workspace/SealFaceRecognition/result.json ./\n```\nto download the result files into Download folders.\n \n"
      },
      "source": "https://raw.githubusercontent.com/zbirenbaum/SealFaceRecognition/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/zbirenbaum/SealFaceRecognition/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2018 Debayan Deb\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/zbirenbaum/SealFaceRecognition/master/facepy/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SealFaceRecognition"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "zbirenbaum"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 303693,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 1286,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/zbirenbaum/SealFaceRecognition/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "zbirenbaum",
          "type": "User"
        },
        "date_created": "2022-04-05T20:32:04Z",
        "date_published": "2022-04-05T20:36:15Z",
        "description": "SealNet v1.1: Final copy with post-review materials included",
        "html_url": "https://github.com/zbirenbaum/SealFaceRecognition/releases/tag/v1.1",
        "name": "SealNet v1.1",
        "release_id": 63674651,
        "tag": "v1.1",
        "tarball_url": "https://api.github.com/repos/zbirenbaum/SealFaceRecognition/tarball/v1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/zbirenbaum/SealFaceRecognition/releases/63674651",
        "value": "https://api.github.com/repos/zbirenbaum/SealFaceRecognition/releases/63674651",
        "zipball_url": "https://api.github.com/repos/zbirenbaum/SealFaceRecognition/zipball/v1.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "zbirenbaum",
          "type": "User"
        },
        "date_created": "2022-01-03T23:14:28Z",
        "date_published": "2022-01-03T23:28:34Z",
        "description": "SealNet v1.0.1\r\n\r\nImproved clarity of README.md instructions regarding data management and changed zprocess.py defaults to be more intuitive.\r\n\r\n**Full Changelog**: https://github.com/zbirenbaum/SealFaceRecognition/compare/v1.0.0...v1.0.1",
        "html_url": "https://github.com/zbirenbaum/SealFaceRecognition/releases/tag/v1.0.1",
        "name": "v1.0.1",
        "release_id": 56341554,
        "tag": "v1.0.1",
        "tarball_url": "https://api.github.com/repos/zbirenbaum/SealFaceRecognition/tarball/v1.0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/zbirenbaum/SealFaceRecognition/releases/56341554",
        "value": "https://api.github.com/repos/zbirenbaum/SealFaceRecognition/releases/56341554",
        "zipball_url": "https://api.github.com/repos/zbirenbaum/SealFaceRecognition/zipball/v1.0.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "zbirenbaum",
          "type": "User"
        },
        "date_created": "2022-01-03T21:05:08Z",
        "date_published": "2022-01-03T23:15:20Z",
        "description": "### SealNet v1.0.0\r\n\r\n**Full Changelog**: https://github.com/zbirenbaum/SealFaceRecognition/commits/v1.0.0",
        "html_url": "https://github.com/zbirenbaum/SealFaceRecognition/releases/tag/v1.0.0",
        "name": "SealNet v1.0.0",
        "release_id": 56341201,
        "tag": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/zbirenbaum/SealFaceRecognition/tarball/v1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/zbirenbaum/SealFaceRecognition/releases/56341201",
        "value": "https://api.github.com/repos/zbirenbaum/SealFaceRecognition/releases/56341201",
        "zipball_url": "https://api.github.com/repos/zbirenbaum/SealFaceRecognition/zipball/v1.0.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Prerequisite",
        "parent_header": [
          "SEALNET"
        ],
        "type": "Text_excerpt",
        "value": "To run this program we need python 3.7 installed. You can check your python version\nby typing `python3 -V`. If you don't have python 3.7, you can download it here:\nhttps://www.python.org/downloads/release/python-379/.\n\nIf you are using the AWS cluster, it is already installed for you.\n\nYou will also need to have Visual Studio Code installed. If you do not have VS Code, you can download it from here:\nhttps://code.visualstudio.com/download\n"
      },
      "source": "https://raw.githubusercontent.com/zbirenbaum/SealFaceRecognition/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 00:41:31",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 6
      },
      "technique": "GitHub_API"
    }
  ]
}