{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/kimmo1019/DeepCAGE"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-11-18T08:03:47Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-10-16T02:33:29Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Incorporating Transcription Factors in Genome-wide Prediction of Chromatin Accessibility"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9605589815960589,
      "result": {
        "original_header": "DeepCAGE",
        "type": "Text_excerpt",
        "value": "Incorporating Transcription Factors in Genome-wide Prediction of Chromatin Accessibility. \n \n ![model](https://github.com/kimmo1019/DeepCAGE/blob/master/model.png)\n \n DeepCAGE contains a deep densely connected convolutional network and a joint module for incorporating TF gene expression and motif score.\n \n # Requirements\n- Keras==2.1.4\n- TensorFlow==1.13.1\n- hickle >= 2.1.0\n \n"
      },
      "source": "https://raw.githubusercontent.com/kimmo1019/DeepCAGE/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9101877978818268,
      "result": {
        "original_header": "Instructions",
        "type": "Text_excerpt",
        "value": "We provide detailed step-by-step instructions for running DeepCAGE model including data preprocessing, model training, and model test.\n \n"
      },
      "source": "https://raw.githubusercontent.com/kimmo1019/DeepCAGE/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9243515235342092,
      "result": {
        "original_header": "Data preprocessing",
        "type": "Text_excerpt",
        "value": "**Step 1**: Download raw DNase-seq and RNA-seq data \n```\ndata/\n    |-- raw_data/\n    |   |-- 1/\n    |   |   |-- dseq/\n    |   |   |   |-- ENCSR000EIE/\n    |   |   |   |   |-- ENCFF953HEA.bed.gz\n    |   |   |   |   |-- ENCFF983PML.bam\n    |   |   |   |-- ENCSR000ELW/\n    |   |   |   |   |...\n    |   |   |-- rseq/\n    |   |   |   |-- ENCSR000BXY/\n    |   |   |   |   |-- ENCFF110IED.tsv\n    |   |   |   |   |-- ENCFF219FVQ.tsv\n    |   |   |   |-- ENCSR000BYH/\n    |   |   |   |   |...\n``` \n**Step 2**: Merge multiple replicates of DNase-seq and RNA-seq data \nWe merge multiple replicate of RNA-seq data by taking the average expression of each gene across replicates in a cell type. As for DNase-seq data, we only keep bins that appear in more than half of the replicates with respect to a cell type. One can run the following scripts to merge relicates of both DNase-seq and RNA-seq data. Note that the referece genome (`hg19`) will be automatically downloaded.\n```python\npython 2.Merge_multi_rep_data  <CELL_ID> \nCELLID: pre-defined cell ID (from 1 to 55)\n```\nThe merged data (`e.g. 1.TPM.tsv and 1.peak.bins.bed`) will be located in `data/processed_RNA_DNase` folder.\n \n**Step 3**: Loci filtering and candidate regulatory regions selection \nThe TF gene expression matrix size is `N x C` where N is the number of TFs and C is the number of cell lines. \n```python\npython 3.1.Generate_tf_exp.py <CELL_SET> <OUTPUT>\nCELL_SET: cell id set\nOUTPUT: output expression matrix file\n```\n**Step 5**: Generating motif score matrix (L x N)\nThe motif score matrix size is `L x N` where L is the number of candidate regulatory loci and N is the number of the coresponding TFs.\n```python\npython 3.2.Generate_motif_score.py <PEAK_FILE> <MOTIF_FILE> <OUTPUT>\nPEAK_FILE: the generated union peak file in `Step 3` (e.g. `union.peaks.bed`)\nMOTIF_FILE: motif file in homer format\nOUTPUT: output motif score matrix file\n```\n**Step 6**: Generating label matrix (L x C)\n \nWe provide scripts for generating both binary label matrix (classification) and continuous label matrix (regression) here. \nThe label matrix size is `L X C` where L is the number of candidate regulatory loci and C is the number of cell lines. \nFor reads count across different cell line, we normalize it by log transformation.\n```python\npython 3.5.Normalize_readscount.py <CELL_SET> <OUTPUT>\nCELL_SET: cell id set\nOUTPUT: output normalized reads count matrix file\n```\n**NOTES**: If one need to run DeepCAGE with custom data, what he/she needs to do is to generate three matrices (`TF expression matrix`, `motif score matrix` and `label matrix`) by own. \n \n"
      },
      "source": "https://raw.githubusercontent.com/kimmo1019/DeepCAGE/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8670208255408134,
      "result": {
        "original_header": "Model training and test",
        "type": "Text_excerpt",
        "value": "We provide `4.classification.py` and `5.Regression.py` for run DeepCAGE in a classication and regression settings, respectively.\n```python\npython 4.classification.py <GPU_ID> <FOLD_ID>\nGPU_ID: GPU card id, default: 0\nFOLD_ID: cross validation fold id, from 0-4\n```\nBASH2*\nNote that the deault setting will be multi-gpu model. The trained model will be saved in `data/models` folder and prediction outcome will be saved in `data` folder. \n"
      },
      "source": "https://raw.githubusercontent.com/kimmo1019/DeepCAGE/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/kimmo1019/DeepCAGE/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/kimmo1019/DeepCAGE/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "kimmo1019/DeepCAGE"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DeepCAGE"
      },
      "source": "https://raw.githubusercontent.com/kimmo1019/DeepCAGE/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kimmo1019/DeepCAGE/master/prog/1.Download_raw_data.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kimmo1019/DeepCAGE/master/prog/3.0.Generate_peak_bin.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kimmo1019/DeepCAGE/master/model.png"
      },
      "source": "https://raw.githubusercontent.com/kimmo1019/DeepCAGE/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "DeepCAGE can be downloaded by\n```shell\ngit clone https://github.com/kimmo1019/DeepCAGE\n```\nInstallation has been tested in a Linux/MacOS platform.\n"
      },
      "source": "https://raw.githubusercontent.com/kimmo1019/DeepCAGE/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9999998633620728,
      "result": {
        "original_header": "Data preprocessing",
        "type": "Text_excerpt",
        "value": "We provided `1.Download_raw_data.sh` for download RNA-seq data (.tsv) and DNase-seq data (.narrowPeak and .bam) from the ENCODE project\nWe pre-defined cell type ID from 1-55. After downloading the meta data from ENCODE website (`head -n 1 files.txt|xargs -L 1 curl -O -L`), one can run the following script:\n```python\nbash 1.Download_raw_data.bash  -c <CELL_ID> -r -p -b\n-c  CELLID: pre-defined cell ID (from 1 to 55)\n-r  download RNA-seq data (.tsv)\n-p  download chromatin accessible peaks from DNase-seq data (.narrowPeak)\n-b  download chromatin accessible readscount from DNase-seq data (.bam)\n```\none can also run BASH2* to show the script instructions. Note that `.bam` files downloading may take time. After downloading the raw data, the raw data folder will be organized by `cell-assay-experiment-file` order. Note that each experiment may contain multiple replicates. See an example of the folder tree:\n \n"
      },
      "source": "https://raw.githubusercontent.com/kimmo1019/DeepCAGE/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.865472637566459,
      "result": {
        "original_header": "Data preprocessing",
        "type": "Text_excerpt",
        "value": "We provided `1.Download_raw_data.sh` for download RNA-seq data (.tsv) and DNase-seq data (.narrowPeak and .bam) from the ENCODE project\nWe pre-defined cell type ID from 1-55. After downloading the meta data from ENCODE website (`head -n 1 files.txt|xargs -L 1 curl -O -L`), one can run the following script:\n```python\nbash 1.Download_raw_data.bash  -c <CELL_ID> -r -p -b\n-c  CELLID: pre-defined cell ID (from 1 to 55)\n-r  download RNA-seq data (.tsv)\n-p  download chromatin accessible peaks from DNase-seq data (.narrowPeak)\n-b  download chromatin accessible readscount from DNase-seq data (.bam)\n```\none can also run BASH2* to show the script instructions. Note that `.bam` files downloading may take time. After downloading the raw data, the raw data folder will be organized by `cell-assay-experiment-file` order. Note that each experiment may contain multiple replicates. See an example of the folder tree:\n \nUse the following two scripts for generating binary label matrix\n```python\npython 3.3.Generate_label.py <PEAK_FILE> <CELL_SET> <OUTPUT> / 3.4.Generate_label.py <PEAK_FILE> <CELL_SET> <OUTPUT>\nPEAK_FILE: the generated union peak file in `Step 3` (e.g. `union.peaks.bed`)\nCELL_SET: cell id set\nOUTPUT: output label matrix file\n```\n**Step 7**: Normalizing reads count \n"
      },
      "source": "https://raw.githubusercontent.com/kimmo1019/DeepCAGE/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8634218752145401,
      "result": {
        "original_header": "Model training and test",
        "type": "Text_excerpt",
        "value": "We provide `4.classification.py` and `5.Regression.py` for run DeepCAGE in a classication and regression settings, respectively.\n```python\npython 4.classification.py <GPU_ID> <FOLD_ID>\nGPU_ID: GPU card id, default: 0\nFOLD_ID: cross validation fold id, from 0-4\n```\nBASH2*\nNote that the deault setting will be multi-gpu model. The trained model will be saved in `data/models` folder and prediction outcome will be saved in `data` folder. \n"
      },
      "source": "https://raw.githubusercontent.com/kimmo1019/DeepCAGE/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/kimmo1019/DeepCAGE/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2018 Qiao Liu\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/kimmo1019/DeepCAGE/master/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "type": "Text_excerpt",
        "value": "This project is licensed under the MIT License - see the LICENSE.md file for details\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/kimmo1019/DeepCAGE/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DeepCAGE"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "kimmo1019"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 40594,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 6197,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kimmo1019/DeepCAGE/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 00:27:16",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 8
      },
      "technique": "GitHub_API"
    }
  ]
}