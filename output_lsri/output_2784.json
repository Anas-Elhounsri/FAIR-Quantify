{
  "acknowledgement": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Acknowledgements",
        "type": "Text_excerpt",
        "value": "OncoGEMINI is being developed in the [Quinlan lab](http://quinlanlab.org/) at the University\nof Utah and is led by Tom Nicholas.\n"
      },
      "source": "https://raw.githubusercontent.com/fakedrtom/oncogemini/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "type": "Text_excerpt",
        "value": "If you use OncoGEMINI in your research, please cite [this manuscript](https://www.biorxiv.org/content/10.1101/2020.03.10.979591v1).\n\n"
      },
      "source": "https://raw.githubusercontent.com/fakedrtom/oncogemini/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/fakedrtom/oncogemini"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-04-10T18:40:36Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-07-14T02:11:42Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Database Creation",
        "parent_header": [
          "Documentation"
        ],
        "type": "Text_excerpt",
        "value": "Properly prepared and annotated VCFs can be used to create OncoGEMINI databases with [vcf2db](https://github.com/quinlan-lab/vcf2db).\nThe creation of a database with vcf2db also requires a pedigree-like file, referred to as a \nsample manifest, to be included. The structure of this file is similar to a more traditional\npedigree file, but inlcudes additional columns corresponding to a patient\nidentifier, the sequential point in which that sample was obtained (to reflect longitudinal\ndata across multiple timepoints where time = 0 reflect a normal or non-tumor sample and time > 0 indicates\ntumor samples with different sampling times), and any sample purity values (optional), if known.\n```\n#family_id      name    paternal_id     maternal_id     sex     phenotype       patient_id      time    purity\n1               A0      0               0               2       1               A               0       0\n1               A1      0               0               2       2               A               1       0.1\n1               A2      0               0               2       2               A               2       0.3\n1               B0      0               0               2       1               B               0       0\n1               B1      0               0               2       2               B               1       0.5\n```\nTogether, the annotated VCF and sample manifest file are used by the vcf2db script to generate\nthe OncoGEMINI database:\n```\nvcf2db.py annotated.vcf.gz sample.manifest database.db\n```\n"
      },
      "source": "https://raw.githubusercontent.com/fakedrtom/oncogemini/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9990981051671688,
      "result": {
        "original_header": "Overview",
        "type": "Text_excerpt",
        "value": "OncoGEMINI is an adaptation of [GEMINI](https://github.com/arq5x/gemini) intended for the improved identification of\nbiologically and clincally relevant tumor variants from multi-sample and longitudinal\ntumor sequencing data. Using a GEMINI-compatible database (generated from an annotated \nVCF file), OncoGEMINI is able to filter tumor variants based on included genomic\nannotations and various allele frequency signatures.  \n"
      },
      "source": "https://raw.githubusercontent.com/fakedrtom/oncogemini/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Documentation",
        "type": "Text_excerpt",
        "value": "Since OncoGEMINI retains much of the functionality of GEMINI, it may also be \nhelpful to refer to GEMINI's official documentation which can be found [here](http://gemini.readthedocs.org/en/latest/).\n"
      },
      "source": "https://raw.githubusercontent.com/fakedrtom/oncogemini/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "*query*",
        "parent_header": [
          "Documentation",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "from GEMINI and further details can be found [here](https://gemini.readthedocs.io/en/latest/content/querying.html#basic-queries).\nThe *query* command is highly flexible and specific. For example, to search for all\nvariants on chromosome 13 that have a 'HIGH' impact severity, the following *query*\ncommand would return the chromosome, start and end positions, reference and alternate\nalleles and gene for all variants that meet those requirements (if any exist):\n```\noncogemini query -q \"select chrom, start, end, ref, alt, gene from variants where chrom == 13 and impact_severity == 'HIGH'\" database.db\n```"
      },
      "source": "https://raw.githubusercontent.com/fakedrtom/oncogemini/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "*bottleneck*",
        "parent_header": [
          "Documentation",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "sampling timepoints. By default, *bottleneck* will require the slope made by all included allele\nfrequencies to be greater than 0.05, and the R correlation coefficient for all allele frequencies\nto be greater than 0.5. If a normal sample has been included, it will also require that variant\nallele frequencies for that sample be 0. Please note that the *bottleneck* tool will also require\nthat all included tumor samples have a positive (> 0) slope. These and other parameters can be\nadjusted with the following usage options:\n```\noptional arguments:\n  --maxNorm FLOAT   Specify a maximum normal sample AF to allow (default is 0)\n  --minSlope FLOAT  Minimum slope required for the AFs across samples (default\n                    is 0.05)\n  --minR FLOAT      Minimum r correlation coefficient required for AFs\n                    (default is 0.5)\n  --minEnd FLOAT    Minimum AF required of the sample representing the final\n                    timepoint (default is 0)\n  --endDiff FLOAT   Minimum required AF difference between the samples\n                    representing the first and final timepoints (default is 0)\n```\nFor example, to find variants that are increasing in allele frequency across all included\nsamples, but that exhibit a steeper slope and high correlation coefficient, the following\ncommand could be used:\n```\noncogemini bottleneck --minSlope 0.4 --minR 0.8 database.db\n```"
      },
      "source": "https://raw.githubusercontent.com/fakedrtom/oncogemini/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "*loh*",
        "parent_header": [
          "Documentation",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "in the normal samples, but as homozygotes in the tumor samples. A normal sample must be\nincluding for the *loh* tool to function properly. Default settings expect an\nallele frequency between 0.3 and 0.7 in the normal samples and exceeded that of 0.8 for\nthe tumor samples. These values can be adjusted from their defaults with the following\nusage options:\n```\noptional arguments:\n  --maxNorm FLOAT    Specify a maximum normal sample AF to allow (default is\n                     0.7)\n  --minNorm FLOAT    Specify a minimum normal sample AF to allow (default is\n                     0.3)\n  --minTumor FLOAT   Specify a minimum AF for tumor samples to require\n                     (default is 0.8)\n  --specific STRING  Search for LOH variants in a single sample compared to\n                     the sample(s) that precede it (must specify single sample\n                     included among --samples, also --minNorm, --maxNorm will\n                     now apply to the preceding sample)\n```\nTo more narrowly define heterozygozity in the normal samples and increase the\nhomozygozity threshold in the tumor samples, the defaults can be changed:\n```\noncogemini loh --maxNorm 0.6 --minNorm 0.4 --minTumor 0.9 database.db\n```\nTo identify a loss of heterozygozity variant in a single sample rather than across\nall tumor samples compared to the normal samples, the `--specific` parameter can be used.\nIn this case, the *loh* tool will focus on the specified sample and compare it to the\nsample(s) that most immediately precede it, as indicated in the sample manifest's time\ncolumn. Heterozygozity in this preceding sample(s) is defined by the `--maxNorm` and\n`--minNorm` parameters (or their defaults). For example, if the samples A0, A1, A2, and\nA3 (with times indicated as 0, 1, 2, and 3) were loaded into the database, to identify\nloss of heterozygozity variants in only A3, the following command is used:\n```\noncogemini loh --specific A3 --maxNorm 0.55 --minNorm 0.45 database.db\n```\nIn this example case, the `--maxNorm` and `--minNorm` parameters would be applied to\nthe A2 sample.\n"
      },
      "source": "https://raw.githubusercontent.com/fakedrtom/oncogemini/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "*truncal*",
        "parent_header": [
          "Documentation",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "samples, but absent from all normal samples. A normal sample muct be included for\nthe *truncal* tool to work. By default it will require that the allele frequency of\nany variant be 0 in the normal samples, but greater than that in all tumor samples.\nThese requirements can be adjusted with the following usage options:\n```\noptional arguments:\n  --maxNorm FLOAT   Optional: specify a maximum normal sample AF to allow\n                    (default is 0)\n  --increase FLOAT  Optional: add amount to increase truncal AF filter between\n                    normal and tumor samples (default is 0)\n```\nHere is a command that would allow for variants with non-zero allele frequencies in\nthe normal sample(s) and require that the tumor samples have allele frequencies that\nare at least 0.2 greater than the maximum allowed allele frequencies in the normal\nsample(s):\n```\noncogemini truncal --maxNorm 0.05 --increase 0.2 database.db\n```"
      },
      "source": "https://raw.githubusercontent.com/fakedrtom/oncogemini/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "*unique*",
        "parent_header": [
          "Documentation",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "*unique* tool can be used. By default this tool expects the allele frequency of all other\nnon-specified samples that are included to be 0, while all specified samples have an\nallele frequency greater than 0. These parameters can be adjusted with the following\nusage options:\n```\noptional arguments:\n  --specific STRING  Identify unique variants that exist only in samples from\n                     this comma-separated list\n  --maxOthers FLOAT  Specify a maximum sample AF to allow in other samples\n                     (default is 0)\n  --increase FLOAT   Add amount to increase AF filter between unique and other\n                     samples (default is 0)\n```\nIf the database contains samples B0, B1, and B2, the *unique* tool can identify variants\nthat are only found in B2:\n```\noncogemini unique --specific B2 database.db\n```"
      },
      "source": "https://raw.githubusercontent.com/fakedrtom/oncogemini/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Common Parameters",
        "parent_header": [
          "Documentation",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "```\noptional arguments:\n  -h, --help         show this help message and exit\n  --minDP INTEGER    Minimum depth required in all samples default is 0)\n  --minGQ INTEGER    Minimum genotype quality required in all samples (default\n                     is 0)\n  --patient STRING   Specify a patient to filter (should correspond to a\n                     patient_id in ped file)\n  --samples STRING   Rather than including all samples, enter a string of\n                     comma-separated specified samples to use (default is\n                     \"All\")\n  --columns STRING   A comma-separated list of columns that you would like\n                     returned (default is \"*\", which returns every column)\n  --filter STRING    Restrictions to apply to variants (SQL syntax)\n  --purity           Using purity estimates in cancer manifest file, make\n                     corrections to AF to be used\n  --somatic_only    Only include variants that have been marked as somatic via\n                    the set_somatic command\n  --cancers STRING  Restrict results to variants/genes associated with\n                    specific cancer types by entering a comma-separated string\n                    of cancer type abbreviations (see documents for \n                    abbreviations) REQUIRES that db include\n                    civic_gene_abbrevations and/or cgi_gene_abbreviations\n```\nOf particular note are the `--columns` and `--filter` parameters. With `--columns` the desired\noutput is specified while `--filter` allows for the listing of variant requirements. For example,\n`--columns \"chrom, start, end, ref, alt, gene\"` and `--filter \"impact_severity != 'LOW' and gene ==\n'BRCA2'\"` will return the chromosome, start and end positions, reference and alternate allele, \nand gene name for any variants that have an impact severity of 'MED' or 'HIGH' and are located \nwithin the *BRCA2* gene. These are both highly customizable. If `--columns` is not invoked, all \ninformation for a given variant that is stored in the database will be returned and if `--filter` \nis not used, the variants will not be filtered with any criteria other than those that are built \ninto provided tools.\n\nThe `--cancers` parameter allows filtered results to be limited to variants in genes with\nreported associations with specific cancer types. Currently this is intended to be used alongside\nannotations from CIViC and CGI and is not available for use without these annotations (please refer\nto the [CRAB](https://github.com/fakedrtom/crab) to include these annotations). For a list of cancer\ntypes and their accepted abbreviations, please refer to [this](https://github.com/fakedrtom/crab/blob/master/cancer_names_abbreviations.txt).\n"
      },
      "source": "https://raw.githubusercontent.com/fakedrtom/oncogemini/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Somatic Mutations",
        "parent_header": [
          "Documentation",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "and annotation filter requirements. Thus, if the VCF used to create the database contained both\ngermline and somatic mutations, both mutation types would be considered by OncoGEMINI commands. To\nfocus solely on somatic mutations, it is recommended that the VCF used for the creation of a OncoGEMINI\ndatabase be pre-filtered to only include somatic mutations or that somatic mutations be clearly labeled\nin the VCF so they are incorporated as a filterable annotation within the database. If that is not\npossible, the *set_somatic* tool may be employed which allows for variants within a OncoGEMINI database\nto be \u201cflagged\u201d as somatic based on user defined criteria regarding normal and tumor genotypes or sample sequencing\ndepths and allele frequencies. OncoGEMINI tools may then take advantage of the `--somatic-only`\nparameter to restrict variant evaluations to only those variants that have been marked as somatic in\nthe database by the *set_somatic* tool.\n"
      },
      "source": "https://raw.githubusercontent.com/fakedrtom/oncogemini/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "*set_somatic*",
        "parent_header": [
          "Documentation",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "as homozygous for the reference allele and at least one of the included tumor samples is genotyped as\nheterozygous or homozygous for the alternate allele. Users may override these defaults by providing more\ndetailed requirements regarding allele frequencies, sequencing depths, and alternate read counts in both\nthe normal and tumor samples, thus allowing more specific designation of variants that should be flagged\nas somatic or not. The following parameters are available to *set_somatic* for defining potential somatic\nmutations:\n```\noptional arguments:\n  -h, --help            show this help message and exit\n  --minDP MINDP         Minimum depth required in all samples (default is 0)\n  --minGQ MINGQ         Minimum genotype quality required in all samples\n                        (default is 0)\n  --normAF NORMAF       The maximum frequency of the alternate allele in the\n                        normal sample (default 0).\n  --normCount NORMCOUNT\n                        The maximum count of the alternate allele in the\n                        normal sample (default 0).\n  --normDP NORMDP       The minimum depth allowed in the normal sample to\n                        believe somatic (default 0).\n  --tumAF TUMAF         The minimum frequency of the alternate allele in the\n                        tumor sample (default 0).\n  --tumCount TUMCOUNT   The minimum count of the alternate allele in the tumor\n                        sample (default 0).\n  --tumDP TUMDP         The minimum depth allowed in the tumor sample to\n                        believe somatic (default 0).\n  --dry-run             Don't set the is_somatic flag, just report what\n                        _would_ be set. For testing parameters.\n```\nIf none of the additional normal sample parameters are invoked (`--normAF`, `--normCount`, or `--normDP`)\nthen the default of all normal samples must be genotyped as homozygous reference for the given variant will\nbe used. Similarly, if none of the additional tumor sample parameters are invoked (`--tumAF`, `--tumCount`,\nor `--tumDP`) then the default of at least one tumor sample being genotyped as heterozygous or homozygous for\nthe alternate allele is used. For example, the following command will use genotype defaults for both the normal\nand tumor samples included in the database and only variants that are entirely genotyped as homozygous for the\nreference allele in the normal samples and at least one of the included tumor samples is genotyped as heterozygous\nor homozygous for the alternate allele will be flagged as somatic by the *set_somatic* tool:\n\n```\noncogemini set_somatic database.db\n```\nBy invoking any of the normal or tumor sample parameters, the genotype defaults can be replaced with more\nspecific criteria. For example, to require that somatic variants include at least a single tumor sample with\na higher alternate allele frequency (AF >= 0.2), but otherwise keep the genotype defaults for the normal samples,\nwe can include the `--tumAF` parameter:\n\n```\noncogemini set_somatic --tumAF 0.2 database.db\n```\nSimilarly we can replace the genotype defaults for the normal and tumor samples all at once. With the following\ncommand we can allow that variants be flagged as somatic while exhibiting greater than 0 alternate allele\nfrequencies in normal samples, while also requiring a specific read depth for all normal samples and create a\nminimum AF to be found in at least a single tumor sample. Using *set_somatic* with the following options will mark\nvariants in the database as somatic if these criteria are met:\n\n```\noncogemini set_somatic --normAF 0.05 --normDP 20 --tumAF 0.2 database.db\n```\nIt is important to note that *set_somatic* is **NOT** a somatic variant caller. However, in the absence of proper somatic\nvariant calls, the *set_somatic* tool enables users to define criteria that is acceptable to them as being consistent\nwith their expectations for a somatic variant.\n"
      },
      "source": "https://raw.githubusercontent.com/fakedrtom/oncogemini/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/fakedrtom/oncogemini/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/fakedrtom/oncogemini/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "fakedrtom/oncogemini"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "OncoGEMINI"
      },
      "source": "https://raw.githubusercontent.com/fakedrtom/oncogemini/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/fakedrtom/oncogemini/master/master-test.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/fakedrtom/oncogemini/master/docs/build.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/fakedrtom/oncogemini/master/oncogemini/annotation_provenance/make-cancer-census.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/fakedrtom/oncogemini/master/oncogemini/annotation_provenance/make-encode-tfbs-clustering.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/fakedrtom/oncogemini/master/oncogemini/annotation_provenance/make-exac.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/fakedrtom/oncogemini/master/oncogemini/annotation_provenance/make-esp-variants.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/fakedrtom/oncogemini/master/oncogemini/annotation_provenance/make-cse.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/fakedrtom/oncogemini/master/oncogemini/annotation_provenance/make-cosmic.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/fakedrtom/oncogemini/master/oncogemini/annotation_provenance/make-fitcons.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/fakedrtom/oncogemini/master/oncogemini/annotation_provenance/make-stam-125-cells-dnase1-clusters.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/fakedrtom/oncogemini/master/oncogemini/annotation_provenance/make-repeats.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/fakedrtom/oncogemini/master/oncogemini/annotation_provenance/make-29way-conservation.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/fakedrtom/oncogemini/master/oncogemini/annotation_provenance/make-pfam-ucsc.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/fakedrtom/oncogemini/master/oncogemini/annotation_provenance/make-rmsk-meta.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/fakedrtom/oncogemini/master/oncogemini/annotation_provenance/make-geno2mp.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/fakedrtom/oncogemini/master/oncogemini/annotation_provenance/make-encode-chrom-segs.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/fakedrtom/oncogemini/master/oncogemini/annotation_provenance/make-gnomad.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/fakedrtom/oncogemini/master/oncogemini/annotation_provenance/make-vista-enhancers.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/fakedrtom/oncogemini/master/oncogemini/annotation_provenance/make-recombination.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/fakedrtom/oncogemini/master/oncogemini/annotation_provenance/make-cadd.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/fakedrtom/oncogemini/master/oncogemini/annotation_provenance/make-clinvar.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/fakedrtom/oncogemini/master/oncogemini/annotation_provenance/make-dbsnp.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/fakedrtom/oncogemini/master/oncogemini/annotation_provenance/make-1000G.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/fakedrtom/oncogemini/master/oncogemini/annotation_provenance/KEGG/make_path_files/format.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/fakedrtom/oncogemini/master/images/overview.png"
      },
      "source": "https://raw.githubusercontent.com/fakedrtom/oncogemini/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "To create an `oncogemini` executable, first make sure the proper conda channels are added:\n```\n$ conda config --add channels defaults\n$ conda config --add channels bioconda\n$ conda config --add channels conda-forge\n```\nThen simply install `oncogemini`:\n```\nconda install -c bioconda oncogemini\n```\nThis will also create executables for `vcfanno` and `vcf2db.py`, which OncoGEMINI is designed to work with.\n\nFor all OncoGEMINI scripts and files, clone this repo:\n```\ngit clone https://github.com/fakedrtom/oncogemini.git\n```\nThe `setup.py` can also create an `oncogemini` executable, but will not create executables for `vcfanno`\nand `vcf2db.py` like the the conda installer will.\n```\npython setup.py install\n```\nTest the executable by running the `master-test.sh` script:\n```\ncd oncogemini\n./master-test.sh\n```\nThis will first create several test OncoGEMINI databases and then run through a series of tests that will\nsee if basic functionalities of various OncoGEMINI tools and commands are functioning as expected. All tests\nthat pass will be indicated with an ok or the lack of an error. If all tests pass, the test databases and\ntemporary files generated throughout the tests will then be removed.\n"
      },
      "source": "https://raw.githubusercontent.com/fakedrtom/oncogemini/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "VCF Preparation",
        "parent_header": [
          "Documentation"
        ],
        "type": "Text_excerpt",
        "value": "Like GEMINI, multi-allelic sites need to be decomposed and normalized using [vt](https://genome.sph.umich.edu/wiki/Vt).\nA more thorough explanation and guide for doing this can be found at the [GEMINI documentation](https://gemini.readthedocs.io/en/latest/#new-gemini-workflow).\nProvided that vt is available and in your path, the following from the GEMINI docs\nshould be sufficient for decomposing and normalizing a VCF:\n```\n# setup\nVCF=your.vcf.gz\nNORMVCF=your.norm.vcf.gz\nREF=your_reference.fasta\n\n# decompose, normalize and annotate VCF with snpEff.\n# NOTE: can also swap snpEff with VEP\nzless $VCF \\\n   | sed 's/ID=AD,Number=./ID=AD,Number=R/' \\\n   | vt decompose -s - \\\n   | vt normalize -r $REF - \\\n   | bgzip -c > $NORMVCF\ntabix -p vcf $NORMVCF\n```\nSimilarly, it is recommended that a VCF be annotated with either VEP or SnpEff before\nadditional annotations are included.\n\nOncoGEMINI relies upon VCF annotations for the creation of searchable fields within \na database. Therefore it is important that a VCF be annotated with all information that\na user desires for filtering. With that in mind, OncoGEMINI was designed to be used \nalongside [vcfanno](https://github.com/brentp/vcfanno) to accomplish all VCF annotation needs. \nPlease consult the vcfanno link for details regarding its proper usage, but in short, with\na completed vcfanno configuration file, VCFs can be annotated quite simply:\n```\nvcfanno vcfanno.config prepared.vcf.gz > annotated.vcf\n```\nOncoGEMINI was also developed alongside [CRAB](https://github.com/fakedrtom/cancer_annotations) and many useful, cancer-relevant\nannotations can be found and downloaded there, including a vcfanno configuration for many\nof the included annotations.\n"
      },
      "source": "https://raw.githubusercontent.com/fakedrtom/oncogemini/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/fakedrtom/oncogemini/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "The MIT License (MIT)\nCopyright \u00a9 2013 Aaron Quinlan, http://quinlanlab.org\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this \nsoftware and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without \nrestriction, including without limitation the rights to use, copy, modify, merge, publish, \ndistribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the \nSoftware is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or \nsubstantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING \nBUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND \nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, \nDAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
      },
      "source": "https://raw.githubusercontent.com/fakedrtom/oncogemini/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "oncogemini"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "fakedrtom"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 347559,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 212717,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 55413,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 5684,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CSS",
        "size": 130,
        "type": "Programming_language",
        "value": "CSS"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/fakedrtom/oncogemini/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://gemini.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/fakedrtom/oncogemini/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "fakedrtom",
          "type": "User"
        },
        "date_created": "2021-01-28T20:42:44Z",
        "date_published": "2021-01-28T19:24:37Z",
        "description": "First release for publication",
        "html_url": "https://github.com/fakedrtom/oncogemini/releases/tag/v1.0.0",
        "name": "1.0.0",
        "release_id": 37048026,
        "tag": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/fakedrtom/oncogemini/tarball/v1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/fakedrtom/oncogemini/releases/37048026",
        "value": "https://api.github.com/repos/fakedrtom/oncogemini/releases/37048026",
        "zipball_url": "https://api.github.com/repos/fakedrtom/oncogemini/zipball/v1.0.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "fakedrtom",
          "type": "User"
        },
        "date_created": "2019-12-17T18:43:45Z",
        "date_published": "2019-12-17T18:49:19Z",
        "description": "First release of OncoGEMINI",
        "html_url": "https://github.com/fakedrtom/oncogemini/releases/tag/v0.1.0",
        "name": "0.1.0",
        "release_id": 22299337,
        "tag": "v0.1.0",
        "tarball_url": "https://api.github.com/repos/fakedrtom/oncogemini/tarball/v0.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/fakedrtom/oncogemini/releases/22299337",
        "value": "https://api.github.com/repos/fakedrtom/oncogemini/releases/22299337",
        "zipball_url": "https://api.github.com/repos/fakedrtom/oncogemini/zipball/v0.1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 10:18:20",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 7
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "Documentation"
        ],
        "type": "Text_excerpt",
        "value": "OncoGEMINI utilizes SQL queries in combination with tool commands to search the \ndatabase for variants that match requested filters. Some of the more prominant\ntools, and examples for using them, are listed below.\n"
      },
      "source": "https://raw.githubusercontent.com/fakedrtom/oncogemini/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "*query*",
        "parent_header": [
          "Documentation",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "from GEMINI and further details can be found [here](https://gemini.readthedocs.io/en/latest/content/querying.html#basic-queries).\nThe *query* command is highly flexible and specific. For example, to search for all\nvariants on chromosome 13 that have a 'HIGH' impact severity, the following *query*\ncommand would return the chromosome, start and end positions, reference and alternate\nalleles and gene for all variants that meet those requirements (if any exist):\n```\noncogemini query -q \"select chrom, start, end, ref, alt, gene from variants where chrom == 13 and impact_severity == 'HIGH'\" database.db\n```"
      },
      "source": "https://raw.githubusercontent.com/fakedrtom/oncogemini/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "*bottleneck*",
        "parent_header": [
          "Documentation",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "sampling timepoints. By default, *bottleneck* will require the slope made by all included allele\nfrequencies to be greater than 0.05, and the R correlation coefficient for all allele frequencies\nto be greater than 0.5. If a normal sample has been included, it will also require that variant\nallele frequencies for that sample be 0. Please note that the *bottleneck* tool will also require\nthat all included tumor samples have a positive (> 0) slope. These and other parameters can be\nadjusted with the following usage options:\n```\noptional arguments:\n  --maxNorm FLOAT   Specify a maximum normal sample AF to allow (default is 0)\n  --minSlope FLOAT  Minimum slope required for the AFs across samples (default\n                    is 0.05)\n  --minR FLOAT      Minimum r correlation coefficient required for AFs\n                    (default is 0.5)\n  --minEnd FLOAT    Minimum AF required of the sample representing the final\n                    timepoint (default is 0)\n  --endDiff FLOAT   Minimum required AF difference between the samples\n                    representing the first and final timepoints (default is 0)\n```\nFor example, to find variants that are increasing in allele frequency across all included\nsamples, but that exhibit a steeper slope and high correlation coefficient, the following\ncommand could be used:\n```\noncogemini bottleneck --minSlope 0.4 --minR 0.8 database.db\n```"
      },
      "source": "https://raw.githubusercontent.com/fakedrtom/oncogemini/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "*loh*",
        "parent_header": [
          "Documentation",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "in the normal samples, but as homozygotes in the tumor samples. A normal sample must be\nincluding for the *loh* tool to function properly. Default settings expect an\nallele frequency between 0.3 and 0.7 in the normal samples and exceeded that of 0.8 for\nthe tumor samples. These values can be adjusted from their defaults with the following\nusage options:\n```\noptional arguments:\n  --maxNorm FLOAT    Specify a maximum normal sample AF to allow (default is\n                     0.7)\n  --minNorm FLOAT    Specify a minimum normal sample AF to allow (default is\n                     0.3)\n  --minTumor FLOAT   Specify a minimum AF for tumor samples to require\n                     (default is 0.8)\n  --specific STRING  Search for LOH variants in a single sample compared to\n                     the sample(s) that precede it (must specify single sample\n                     included among --samples, also --minNorm, --maxNorm will\n                     now apply to the preceding sample)\n```\nTo more narrowly define heterozygozity in the normal samples and increase the\nhomozygozity threshold in the tumor samples, the defaults can be changed:\n```\noncogemini loh --maxNorm 0.6 --minNorm 0.4 --minTumor 0.9 database.db\n```\nTo identify a loss of heterozygozity variant in a single sample rather than across\nall tumor samples compared to the normal samples, the `--specific` parameter can be used.\nIn this case, the *loh* tool will focus on the specified sample and compare it to the\nsample(s) that most immediately precede it, as indicated in the sample manifest's time\ncolumn. Heterozygozity in this preceding sample(s) is defined by the `--maxNorm` and\n`--minNorm` parameters (or their defaults). For example, if the samples A0, A1, A2, and\nA3 (with times indicated as 0, 1, 2, and 3) were loaded into the database, to identify\nloss of heterozygozity variants in only A3, the following command is used:\n```\noncogemini loh --specific A3 --maxNorm 0.55 --minNorm 0.45 database.db\n```\nIn this example case, the `--maxNorm` and `--minNorm` parameters would be applied to\nthe A2 sample.\n"
      },
      "source": "https://raw.githubusercontent.com/fakedrtom/oncogemini/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "*truncal*",
        "parent_header": [
          "Documentation",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "samples, but absent from all normal samples. A normal sample muct be included for\nthe *truncal* tool to work. By default it will require that the allele frequency of\nany variant be 0 in the normal samples, but greater than that in all tumor samples.\nThese requirements can be adjusted with the following usage options:\n```\noptional arguments:\n  --maxNorm FLOAT   Optional: specify a maximum normal sample AF to allow\n                    (default is 0)\n  --increase FLOAT  Optional: add amount to increase truncal AF filter between\n                    normal and tumor samples (default is 0)\n```\nHere is a command that would allow for variants with non-zero allele frequencies in\nthe normal sample(s) and require that the tumor samples have allele frequencies that\nare at least 0.2 greater than the maximum allowed allele frequencies in the normal\nsample(s):\n```\noncogemini truncal --maxNorm 0.05 --increase 0.2 database.db\n```"
      },
      "source": "https://raw.githubusercontent.com/fakedrtom/oncogemini/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "*unique*",
        "parent_header": [
          "Documentation",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "*unique* tool can be used. By default this tool expects the allele frequency of all other\nnon-specified samples that are included to be 0, while all specified samples have an\nallele frequency greater than 0. These parameters can be adjusted with the following\nusage options:\n```\noptional arguments:\n  --specific STRING  Identify unique variants that exist only in samples from\n                     this comma-separated list\n  --maxOthers FLOAT  Specify a maximum sample AF to allow in other samples\n                     (default is 0)\n  --increase FLOAT   Add amount to increase AF filter between unique and other\n                     samples (default is 0)\n```\nIf the database contains samples B0, B1, and B2, the *unique* tool can identify variants\nthat are only found in B2:\n```\noncogemini unique --specific B2 database.db\n```"
      },
      "source": "https://raw.githubusercontent.com/fakedrtom/oncogemini/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Common Parameters",
        "parent_header": [
          "Documentation",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "```\noptional arguments:\n  -h, --help         show this help message and exit\n  --minDP INTEGER    Minimum depth required in all samples default is 0)\n  --minGQ INTEGER    Minimum genotype quality required in all samples (default\n                     is 0)\n  --patient STRING   Specify a patient to filter (should correspond to a\n                     patient_id in ped file)\n  --samples STRING   Rather than including all samples, enter a string of\n                     comma-separated specified samples to use (default is\n                     \"All\")\n  --columns STRING   A comma-separated list of columns that you would like\n                     returned (default is \"*\", which returns every column)\n  --filter STRING    Restrictions to apply to variants (SQL syntax)\n  --purity           Using purity estimates in cancer manifest file, make\n                     corrections to AF to be used\n  --somatic_only    Only include variants that have been marked as somatic via\n                    the set_somatic command\n  --cancers STRING  Restrict results to variants/genes associated with\n                    specific cancer types by entering a comma-separated string\n                    of cancer type abbreviations (see documents for \n                    abbreviations) REQUIRES that db include\n                    civic_gene_abbrevations and/or cgi_gene_abbreviations\n```\nOf particular note are the `--columns` and `--filter` parameters. With `--columns` the desired\noutput is specified while `--filter` allows for the listing of variant requirements. For example,\n`--columns \"chrom, start, end, ref, alt, gene\"` and `--filter \"impact_severity != 'LOW' and gene ==\n'BRCA2'\"` will return the chromosome, start and end positions, reference and alternate allele, \nand gene name for any variants that have an impact severity of 'MED' or 'HIGH' and are located \nwithin the *BRCA2* gene. These are both highly customizable. If `--columns` is not invoked, all \ninformation for a given variant that is stored in the database will be returned and if `--filter` \nis not used, the variants will not be filtered with any criteria other than those that are built \ninto provided tools.\n\nThe `--cancers` parameter allows filtered results to be limited to variants in genes with\nreported associations with specific cancer types. Currently this is intended to be used alongside\nannotations from CIViC and CGI and is not available for use without these annotations (please refer\nto the [CRAB](https://github.com/fakedrtom/crab) to include these annotations). For a list of cancer\ntypes and their accepted abbreviations, please refer to [this](https://github.com/fakedrtom/crab/blob/master/cancer_names_abbreviations.txt).\n"
      },
      "source": "https://raw.githubusercontent.com/fakedrtom/oncogemini/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Somatic Mutations",
        "parent_header": [
          "Documentation",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "and annotation filter requirements. Thus, if the VCF used to create the database contained both\ngermline and somatic mutations, both mutation types would be considered by OncoGEMINI commands. To\nfocus solely on somatic mutations, it is recommended that the VCF used for the creation of a OncoGEMINI\ndatabase be pre-filtered to only include somatic mutations or that somatic mutations be clearly labeled\nin the VCF so they are incorporated as a filterable annotation within the database. If that is not\npossible, the *set_somatic* tool may be employed which allows for variants within a OncoGEMINI database\nto be \u201cflagged\u201d as somatic based on user defined criteria regarding normal and tumor genotypes or sample sequencing\ndepths and allele frequencies. OncoGEMINI tools may then take advantage of the `--somatic-only`\nparameter to restrict variant evaluations to only those variants that have been marked as somatic in\nthe database by the *set_somatic* tool.\n"
      },
      "source": "https://raw.githubusercontent.com/fakedrtom/oncogemini/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "*set_somatic*",
        "parent_header": [
          "Documentation",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "as homozygous for the reference allele and at least one of the included tumor samples is genotyped as\nheterozygous or homozygous for the alternate allele. Users may override these defaults by providing more\ndetailed requirements regarding allele frequencies, sequencing depths, and alternate read counts in both\nthe normal and tumor samples, thus allowing more specific designation of variants that should be flagged\nas somatic or not. The following parameters are available to *set_somatic* for defining potential somatic\nmutations:\n```\noptional arguments:\n  -h, --help            show this help message and exit\n  --minDP MINDP         Minimum depth required in all samples (default is 0)\n  --minGQ MINGQ         Minimum genotype quality required in all samples\n                        (default is 0)\n  --normAF NORMAF       The maximum frequency of the alternate allele in the\n                        normal sample (default 0).\n  --normCount NORMCOUNT\n                        The maximum count of the alternate allele in the\n                        normal sample (default 0).\n  --normDP NORMDP       The minimum depth allowed in the normal sample to\n                        believe somatic (default 0).\n  --tumAF TUMAF         The minimum frequency of the alternate allele in the\n                        tumor sample (default 0).\n  --tumCount TUMCOUNT   The minimum count of the alternate allele in the tumor\n                        sample (default 0).\n  --tumDP TUMDP         The minimum depth allowed in the tumor sample to\n                        believe somatic (default 0).\n  --dry-run             Don't set the is_somatic flag, just report what\n                        _would_ be set. For testing parameters.\n```\nIf none of the additional normal sample parameters are invoked (`--normAF`, `--normCount`, or `--normDP`)\nthen the default of all normal samples must be genotyped as homozygous reference for the given variant will\nbe used. Similarly, if none of the additional tumor sample parameters are invoked (`--tumAF`, `--tumCount`,\nor `--tumDP`) then the default of at least one tumor sample being genotyped as heterozygous or homozygous for\nthe alternate allele is used. For example, the following command will use genotype defaults for both the normal\nand tumor samples included in the database and only variants that are entirely genotyped as homozygous for the\nreference allele in the normal samples and at least one of the included tumor samples is genotyped as heterozygous\nor homozygous for the alternate allele will be flagged as somatic by the *set_somatic* tool:\n\n```\noncogemini set_somatic database.db\n```\nBy invoking any of the normal or tumor sample parameters, the genotype defaults can be replaced with more\nspecific criteria. For example, to require that somatic variants include at least a single tumor sample with\na higher alternate allele frequency (AF >= 0.2), but otherwise keep the genotype defaults for the normal samples,\nwe can include the `--tumAF` parameter:\n\n```\noncogemini set_somatic --tumAF 0.2 database.db\n```\nSimilarly we can replace the genotype defaults for the normal and tumor samples all at once. With the following\ncommand we can allow that variants be flagged as somatic while exhibiting greater than 0 alternate allele\nfrequencies in normal samples, while also requiring a specific read depth for all normal samples and create a\nminimum AF to be found in at least a single tumor sample. Using *set_somatic* with the following options will mark\nvariants in the database as somatic if these criteria are met:\n\n```\noncogemini set_somatic --normAF 0.05 --normDP 20 --tumAF 0.2 database.db\n```\nIt is important to note that *set_somatic* is **NOT** a somatic variant caller. However, in the absence of proper somatic\nvariant calls, the *set_somatic* tool enables users to define criteria that is acceptable to them as being consistent\nwith their expectations for a somatic variant.\n"
      },
      "source": "https://raw.githubusercontent.com/fakedrtom/oncogemini/master/README.md",
      "technique": "header_analysis"
    }
  ]
}