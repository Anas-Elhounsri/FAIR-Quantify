{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/xypan1232/node2loc"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-11-14T18:49:57Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-05-26T15:31:43Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Predicting protein subcellular location using node embedding"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9942400722866018,
      "result": {
        "original_header": "node2loc",
        "type": "Text_excerpt",
        "value": "To identify the functions of a protein, we first need know where this protein is located. Interacting proteins tend to locate in the same subcellular location. Thus, it is imperative to take the protein-protein interactions into account for computational identification of protein subcellular locations. <br>\nwe present a deep learning based method, node2loc, to predict protein subcellular location. node2loc first learns distributed representations of proteins in a protein-protein network, which acquires representations from unlabeled data for downstream tasks. Then the learned representations are further fed into a recurrent neural network (RNN) to predict subcellular locations. \n \n"
      },
      "source": "https://raw.githubusercontent.com/xypan1232/node2loc/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9439377850166849,
      "result": {
        "original_header": "2. Train a LSTM classifier using learned embedding, including version with Synthetic Minority Over-sampling Technique (SMOTE) and without SMOTE, which is integrated in imbalanced-learn.",
        "type": "Text_excerpt",
        "value": "In this study, node2loc mainly consists of the following three components: 1) learned embedding from a protein-protein network using node2vec; 2) SMOTE for oversampling minority classes; 3) a LSTM classifier for classifying 16 subcellular locations. Please refer to 2.2 for how to run node2loc for classifying and predicting protein subcellular locations.<br> \nHere we provided the learned embedding with 500-D learned from a human protein-protein network. To yield higher performance, you can use Minimum redundancy maximum relevance (<a href=\"http://home.penglab.com/proj/mRMR/index.htm\">mRMR</a>) to reorder the embedding, then train and evaluate each feature subset using IFS with RNN, and select the feature subset with the best performance. <br> \nThe dataset with 500-D embedding as reprenstations for proteins and subcellular locaitons as labels is given in this repository, including training and test set file. The training file is \"train_dataset.zip\", and you can decompress it to \"train_dataset.csv\" that is the embedding of proteins, and \"train_sample.txt\" that is the protein IDs as sample names. The mapping between label ID and subcellular locations is given in file labelID_to_locations. The test file test_dataset.zip contains the embedding for other proteins not in the benchmakr set and protein names correpsond to the embedding, and we want to predict the locations for them. <br> \n"
      },
      "source": "https://raw.githubusercontent.com/xypan1232/node2loc/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9870063285407844,
      "result": {
        "original_header": "2.1 Train and test LSTM classifier without SMOTE for oversampling.",
        "type": "Text_excerpt",
        "value": "1. Train the LSTM classifier without SMOTE for over-sampling:<br>\n``` python3 rnn-kfold-run.py -c 16 --datapath train_dataset.csv -e 500 -u 400 -k 10``` <br>\nwhere -c is the number of classes, --datapath is the training file with embedding as features, locations as the labels, -e is the dimension of embedding, -u is number of neurons in the hidden layer of LSTM, k is k-fold cross-validation. This program will evaluate the node2loc using k-fold cross-validation. <br>\n2. Train the LSTM classifier without SMOTE for over-sampling and predict subcellular locations for new proteins: <br>\nBASH2* <br>\nwhere --train is the input training data, and --test is the input test data. This program will predict the locaitons for all proteins in test set using the trained node2loc model on train set.<br>\n \n"
      },
      "source": "https://raw.githubusercontent.com/xypan1232/node2loc/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9887356013484949,
      "result": {
        "original_header": "2.2 Train and test LSTM classifier with SMOTE for oversampling.",
        "type": "Text_excerpt",
        "value": "1. Train the LSTM classifier with SMOTE for over-sampling:<br>\n``` python3 rnn-kfold-smote-run.py -c 16 --datapath train_dataset.csv -e 500 -u 400 -k 10``` <br>\nwhere -c is the number of classes, --datapath is the training file with embedding as features, locations as the labels, -e is the dimension of embedding, -u is number of neurons in the hidden layer of LSTM, k is k-fold cross-validation. This program will evaluate the node2loc using k-fold cross-validation. <br>\n2. Train the LSTM classifier with SMOTE for over-sampling and predict subcellular locations for new proteins: <br>\nBASH2* <br>\nwhere --train is the input training data, and --test is the input test data. This program will predict the locaitons for all proteins in test set using the trained node2loc model on train set.<br> \n"
      },
      "source": "https://raw.githubusercontent.com/xypan1232/node2loc/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/xypan1232/node2loc/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/xypan1232/node2loc/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "xypan1232/node2loc"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "node2loc"
      },
      "source": "https://raw.githubusercontent.com/xypan1232/node2loc/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9998406191130271,
      "result": {
        "original_header": "1. Learn node embedding from a protein-protein network using node2vec",
        "type": "Text_excerpt",
        "value": "1. Download the human protein-protein network from STRING database v9.1, and download the compressed file <a href=\"http://string91.embl.de/newstring_cgi/show_download_page.pl?UserId=wOOpKXCrcQGf&sessionId=fcg4u2oXFFYd\">protein.links.v9.1.txt.gz</a>. Here only human protein-protein interactions are extracted. It needs be transfered to the below described support format. <br>\n2. Download the node2vec software from the website <a href=\"https://snap.stanford.edu/node2vec/\">node2vec</a>. you can directly download the source code from <a href=\"https://github.com/aditya-grover/node2vec\">node2vec github </a> to working directory. <br>\n3. Run the python script to generate the node embedding: <br>\n```python src/main.py --input STRING_9.1_edge.txt --output STRING_9.1_edge_500D.emd --dimensions 500```\n<br>\nwhere STRING_9.1_edge.txt is the human protein-protein network, STRING_9.1_edge_500D.emd is the learned embedding for all proteins in the network, and 500 is the specified dimension of the learned embedding. <br>\n<br>\nPlease refer to <a href=\"https://github.com/aditya-grover/node2vec\">node2vec github </a> for more details about how to prepare the input.<br>\n \n"
      },
      "source": "https://raw.githubusercontent.com/xypan1232/node2loc/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8845167543916925,
      "result": {
        "original_header": "2. Train a LSTM classifier using learned embedding, including version with Synthetic Minority Over-sampling Technique (SMOTE) and without SMOTE, which is integrated in imbalanced-learn.",
        "type": "Text_excerpt",
        "value": "You can test node2loc on the uploaded train_dataset.zip using k-fold crossvalidation. <br>\nYou can also predict the location for the proteins in test_dataset.zip using the trained node2loc model on train_dataset.zip. The output file gives the predicted locations for all proteins in the test set. <br>\n \n"
      },
      "source": "https://raw.githubusercontent.com/xypan1232/node2loc/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8483773686913559,
      "result": {
        "original_header": "3. Visualize the learned embedding using TSNE, which is implemented in sklearn.",
        "type": "Text_excerpt",
        "value": "You can  run ```python3 vis_embedding.py ``` <br>\nhere we visualize the learned embedding (train_dataset.csv decompressed from train_dataset.zip) for proteins in the benchmark set. <br> \n"
      },
      "source": "https://raw.githubusercontent.com/xypan1232/node2loc/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/xypan1232/node2loc/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "node2loc"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "xypan1232"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 52794,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/xypan1232/node2loc/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Package dependencies",
        "parent_header": [
          "Dependencies and development enviroment"
        ],
        "type": "Text_excerpt",
        "value": "  * <a href=https://github.com/scikit-learn/scikit-learn>sklearn 0.20.0</a> , and also its dependency numpy, pandas and scipy. <br>\n  * <a href=https://github.com/scikit-learn-contrib/imbalanced-learn>imbalanced-learn</a> <br>\n  * <a href=https://www.tensorflow.org/> TensorFlow 1.10+ </a> <br>\n  * Python 3.6 <br>\n  "
      },
      "source": "https://raw.githubusercontent.com/xypan1232/node2loc/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "OS Requirements",
        "parent_header": [
          "Dependencies and development enviroment"
        ],
        "type": "Text_excerpt",
        "value": "This package is supported for *Linux* operating systems. The package has been tested on the following systems: <br>\nLinux: Ubuntu 16.04  <br>\n  "
      },
      "source": "https://raw.githubusercontent.com/xypan1232/node2loc/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 18:06:35",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ]
}