{
  "application_domain": [
    {
      "confidence": 0.8388601163398601,
      "result": {
        "type": "String",
        "value": "Graphs"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ZhangZhenmiao/METAMVGL"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-10-16T02:27:06Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-07-19T10:11:08Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "METAMVGL: a multi-view graph-based metagenomic contig binning algorithm by integrating assembly and paired-end graphs"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9559836223337577,
      "result": {
        "original_header": "Environment variables",
        "type": "Text_excerpt",
        "value": "- HTSlib: After compiling, there would be ```include``` and BASH2* under your specified folder. You need append BASH3* to BASH4*, and add BASH5* to both BASH6* and BASH7*.\n- MaxBin2 : BASH8* should be avalible.\n- MetaBat2: BASH9* and BASH10* should be avalible.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ZhangZhenmiao/METAMVGL/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9039229983881425,
      "result": {
        "original_header": "Assembly Graph",
        "type": "Text_excerpt",
        "value": "For metaSPAdes, the assembly graph (assembly_graph.fastg) is already in the output folder. \nFor MEGAHIT, the assembly graph is derived from final.contigs.fa:\n```\nmegahit_toolkit contig2fastg <k_mer> final.contigs.fa > final.contigs.fastg\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/ZhangZhenmiao/METAMVGL/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9876477390641883,
      "result": {
        "original_header": "Output",
        "type": "Text_excerpt",
        "value": "In the output folder, we provide two types of binning results:\n- ```binning_result.csv```, each line is contig_name, cluster_id\n- BASH2*, the contigs in fasta format of each cluster\n \n"
      },
      "source": "https://raw.githubusercontent.com/ZhangZhenmiao/METAMVGL/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9581647786518852,
      "result": {
        "original_header": "Time and Memory comparing with GraphBin (v1.3)",
        "type": "Text_excerpt",
        "value": "- The comparison results can be accessed [here](https://drive.google.com/drive/folders/11U4YwiLLrcTCwpWy7Vax9n5Pk99E_8WL?usp=sharing).\n- The machine used for comparison is CentOS 8.2 (64-bit), with Dual 26-core Intel Xeon Gold 6230R 2.10GHz CPU and 768GB RAM.\n- The measured time and memory include GraphBin/METAMVGL binning on MaxBin2/MetaBAT2 initial binning results from metaSPAdes/MEGAHIT assembly on BMock12, SYNTH64 and Sharon datasets.\n- The `time_memory/README.md` has the commands for binning, the evaluation results are in `time_memory/*/*/*.time` and generated by `time_memory/run_compare.sh`.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ZhangZhenmiao/METAMVGL/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ZhangZhenmiao/METAMVGL/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ZhangZhenmiao/METAMVGL/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ZhangZhenmiao/METAMVGL"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "METAMVGL"
      },
      "source": "https://raw.githubusercontent.com/ZhangZhenmiao/METAMVGL/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Install METAMVGL",
        "parent_header": [
          "METAMVGL"
        ],
        "type": "Text_excerpt",
        "value": "Download and compile:\n```\ngit clone https://github.com/ZhangZhenmiao/METAMVGL.git\ncd METAMVGL && make && chmod +x *.py\n```\nAdd components of METAMVGL to $PATH:\n```\nexport PATH=/path/to/METAMVGL:$PATH\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ZhangZhenmiao/METAMVGL/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Prepare graphs",
        "parent_header": [
          "METAMVGL",
          "Run METAMVGL",
          "Run METAMVGL Step by Step"
        ],
        "type": "Text_excerpt",
        "value": "We generate the assembly graph (.ag) and PE graph (.pe) by ```prep_graph```:\n```\nusage: prep_graph --assembler=string --assembly-graph=string --bam=string --output=string [options] ...\noptions:\n  -a, --assembler          the assembler used to produce contigs, currently support metaSPAdes and MEGAHIT (string)\n  -c, --contigs            the path to the contigs, only needed for MEGAHIT (string [=final.contigs.fa])\n  -p, --paths              the path to the .paths file, only needed for metaSPAdes (string [=contigs.paths])\n  -g, --assembly-graph     the path to the assembly graph in fastg (string)\n  -b, --bam                the path to the alignment bam file (string)\n  -m, --mapping-quality    the threshold of mapping quality (double [=10])\n  -i, --identity           the threshold of identity (double [=0.95])\n  -s, --insert-size        the insert size of paired-end reads (int [=270])\n  -n, --pe                 the minimum number of paired-end reads to support a link (int [=3])\n  -o, --output             the prefix to output (string)\n  -?, --help               print this message\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ZhangZhenmiao/METAMVGL/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ZhangZhenmiao/METAMVGL/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "METAMVGL"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "ZhangZhenmiao"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 50153,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 29132,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 226,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ZhangZhenmiao/METAMVGL/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "ZhangZhenmiao",
          "type": "User"
        },
        "date_created": "2021-05-13T07:40:46Z",
        "date_published": "2021-05-13T07:50:57Z",
        "description": "This is the first release.",
        "html_url": "https://github.com/ZhangZhenmiao/METAMVGL/releases/tag/v1.0",
        "name": "METAMVGL v1.0",
        "release_id": 42888645,
        "tag": "v1.0",
        "tarball_url": "https://api.github.com/repos/ZhangZhenmiao/METAMVGL/tarball/v1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/ZhangZhenmiao/METAMVGL/releases/42888645",
        "value": "https://api.github.com/repos/ZhangZhenmiao/METAMVGL/releases/42888645",
        "zipball_url": "https://api.github.com/repos/ZhangZhenmiao/METAMVGL/zipball/v1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependencies",
        "parent_header": [
          "METAMVGL"
        ],
        "type": "Text_excerpt",
        "value": "- GCC with C++11, [HTSlib](https://github.com/samtools/htslib).\n- Python3 with [numpy](https://numpy.org/install), [scipy](https://www.scipy.org/install.html), [networkx](http://networkx.github.io) and [Bio](https://biopython.org/wiki/Getting_Started).\n- Initial binning tools [MaxBin2](https://sourceforge.net/projects/maxbin2) and [MetaBat2](https://bitbucket.org/berkeleylab/metabat/src/master).\n- Alignment tools [bwa](https://github.com/lh3/bwa) and [samtools](https://github.com/samtools/samtools).\n"
      },
      "source": "https://raw.githubusercontent.com/ZhangZhenmiao/METAMVGL/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "The Wrapper",
        "parent_header": [
          "METAMVGL",
          "Run METAMVGL"
        ],
        "type": "Text_excerpt",
        "value": "The simplest way to run METAMVGL is the wrapper, that runs initial binning (MetaBat2 or MaxBin2), paired-end graph extraction, and METAMVGL in one command:\n```\nusage: run_METAMVGL.py [-h] -a ASSEMBLER [-b INITIAL_BINNING] -r1 READS1 -r2\n                       READS2 -c CONTIGS [-p PATHS] -g ASSEMBLY_GRAPH\n                       [-m MAPPING_QUALITY] [-s IDENTITY] [-i INSERT_SIZE]\n                       [-n PE] [-u MAX_ITER] [-d THRESHOLD] [-t THREADS] -o\n                       OUTPUT\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -a ASSEMBLER, --assembler ASSEMBLER\n                        the assembler that was used to generate contigs\n                        (choose from metaSPAdes and MEGAHIT)\n  -b INITIAL_BINNING, --initial_binning INITIAL_BINNING\n                        the initial binning tool to create initial binning\n                        results (choose from MetaBat2 and MaxBin2, default\n                        MetaBat2)\n  -r1 READS1, --reads1 READS1\n                        the path to reads1\n  -r2 READS2, --reads2 READS2\n                        the path to reads2\n  -c CONTIGS, --contigs CONTIGS\n                        the path to the contigs\n  -p PATHS, --paths PATHS\n                        the path to the contigs.paths file under metaSPAdes\n                        output folder, needed for metaSPAdes\n  -g ASSEMBLY_GRAPH, --assembly_graph ASSEMBLY_GRAPH\n                        the path to the assembly_graph.fastg file under\n                        metaSPAdes output folder (metaSPAdes), or fastg format\n                        file ceretad by megahit_toolkit (MEGAHIT)\n  -m MAPPING_QUALITY, --mapping_quality MAPPING_QUALITY\n                        the threshold of mapping quality for reads alignment\n                        (default 10)\n  -s IDENTITY, --identity IDENTITY\n                        the threshold of alignment identity for reads\n                        alignment (default 0.95)\n  -i INSERT_SIZE, --insert_size INSERT_SIZE\n                        the insert size of paired-end reads (default 270)\n  -n PE, --pe PE        the minimum number of paired-end reads to support a PE\n                        link (default 3)\n  -u MAX_ITER, --max_iter MAX_ITER\n                        the maximun number of iteration of label propagation\n                        (default 100)\n  -d THRESHOLD, --threshold THRESHOLD\n                        the threshold to stop iteration of label propagation\n                        (default 0.00000001)\n  -t THREADS, --threads THREADS\n                        the number of threads for initial binning tools\n                        (default 16)\n  -o OUTPUT, --output OUTPUT\n                        output dir\n```\nExample 1:\nTo run METAMVGL for metaSPAdes assembly, and use MetaBat2 to initial bin:\n```\nrun_METAMVGL.py -a metaspades -r1 /path/to/reads1.fq.gz -r2 /path/to/reads2.fq.gz -c metaspades/contigs.fasta -p metaspades/contigs.paths -g metaspades/assembly_graph.fastg -o METAMVGL_output -t 100\n```\nExample2:\nTo run METAMVGL for MEGAHIT assembly, and use MaxBin2 to initial bin:\n```\nrun_METAMVGL.py -a megahit -b maxbin2 -r1 /path/to/reads1.fq.gz -r2 /path/to/reads2.fq.gz -c megahit/final.contigs.fa -g megahit/final.contigs.fastg -o METAMVGL_output -t 100\n```\nThe results would be in ```METAMVGL_output/METAMVGL```.\n"
      },
      "source": "https://raw.githubusercontent.com/ZhangZhenmiao/METAMVGL/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Assembly",
        "parent_header": [
          "METAMVGL",
          "Run METAMVGL",
          "Run METAMVGL Step by Step"
        ],
        "type": "Text_excerpt",
        "value": "We support [metaSPAdes](https://github.com/ablab/spades) and [MEGAHIT](https://github.com/voutcn/megahit).\n"
      },
      "source": "https://raw.githubusercontent.com/ZhangZhenmiao/METAMVGL/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Initial binning",
        "parent_header": [
          "METAMVGL",
          "Run METAMVGL",
          "Run METAMVGL Step by Step"
        ],
        "type": "Text_excerpt",
        "value": "Initial binning can use any binning tools. To convert the initial binning results to the input format of METAMVGL, we modified [prepResult.py](https://github.com/Vini2/GraphBin/tree/master/support), and the usage is:\n```\nprepResult.py --binned /path/to/initial_binning_result --assembler assembler_type_(SPAdes/MEGAIHT) --output /path/to/output_folder\n```\nIt will create ```initial_contig_bins.csv``` in ```/path/to/output_folder```. It is the input to METAMVGL.py (--binned).\n"
      },
      "source": "https://raw.githubusercontent.com/ZhangZhenmiao/METAMVGL/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Multi-view graph-based binning",
        "parent_header": [
          "METAMVGL",
          "Run METAMVGL",
          "Run METAMVGL Step by Step"
        ],
        "type": "Text_excerpt",
        "value": "We create the binning results by ```METAMVGL.py```:\n```\nusage: METAMVGL.py [-h] --contigs CONTIGS --assembler ASSEMBLER\n                   --assembly_graph ASSEMBLY_GRAPH --PE_graph PE_GRAPH\n                   --binned BINNED [--max_iter MAX_ITER] [--thresh THRESH]\n                   --output OUTPUT\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --contigs CONTIGS     path to contigs file\n  --assembler ASSEMBLER\n                        assembler used (metaSPAdes or MEGAHIT)\n  --assembly_graph ASSEMBLY_GRAPH\n                        path to the .ag file\n  --PE_graph PE_GRAPH   path to the .pe file\n  --binned BINNED       path to the .csv file as initial binning\n  --max_iter MAX_ITER   max iteration (default 100)\n  --thresh THRESH       stop threshold (default 0.00000001)\n  --output OUTPUT       output folder\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ZhangZhenmiao/METAMVGL/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "contact",
    "contributors",
    "documentation",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 12:44:14",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ]
}