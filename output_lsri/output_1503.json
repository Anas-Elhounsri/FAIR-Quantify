{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citations",
        "parent_header": [
          "EukMetaSanity"
        ],
        "type": "Text_excerpt",
        "value": "\"The high-throughput gene prediction of more than 1,700 eukaryote genomes using the software package EukMetaSanity\" by Neely, Hu, Alexander, and Tully, 2021.\n\nAlso cite all dependencies that you used, as **EukMetaSanity** would not be possible were it not for the developers of \nthese programs.\n\n(citation list upcoming)\n"
      },
      "source": "https://raw.githubusercontent.com/cjneely10/EukMetaSanity/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/cjneely10/EukMetaSanity"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-07-03T15:03:14Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-08-12T04:19:55Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Structural and functional annotation of eukaryotic metagenome-assembled genomes"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9928149756201117,
      "result": {
        "original_header": "About",
        "type": "Text_excerpt",
        "value": "Eukaryotic genome annotation is a laborious and time-intensive process. **EukMetaSanity** provides a structural and \nfunctional annotation of MAGs in a highly-parallel fashion, allowing for quick and in-depth analyses. \nThis software suite is broken up into several sub-programs\n \n"
      },
      "source": "https://raw.githubusercontent.com/cjneely10/EukMetaSanity/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8994461093321672,
      "result": {
        "original_header": "Using yapim configuration files",
        "type": "Text_excerpt",
        "value": "EukMetaSanity is built using the [YAPIM](https://github.com/cjneely10/YAPIM) library, which operates through a configuration file that is provided with each pipeline. \nRunning a YAPIM pipeline typically consists of copying a default configuration file to your working directory,\nmaking edits to fit your resource and analysis needs, and running the pipeline on a folder of input files. \nProvide the maximum threads and memory to allot towards the analysis. \nWithin each section of the configuration file, set the resources to allot **to each input genome** \n```yaml\nTaxonomy:\n  # Number of threads task will use\n  threads: 5\n  # Amount of memory task will use (in GB)\n  memory: 10\n  time: \"8:00:00\"\n```\n \nWhen launched using SLURM, the maximum resources can be set quite high, and the task-level resources can be set to match\nnode resource limits that exist on your systems. \nWe have provided a test set of data for use in validating installation, or as a means of better understanding the EukMetaSanity implementation. \nThese files are present in the directory `tests/data`:\n```\ntests/\n  |-- data/\n    |-- NAO-all-DCM-20-180-00_bin-1.fna\n    |-- NAO-all-DCM-20-180-00_bin-2.fna\n    |-- NAO-all-DCM-20-180-00_bin-19.fna\n```\nIf you are using your own input set, ensure that your FASTA files' extensions are one of the following:\n```\n.fna\n.fa\n.fasta\n.faa\n.fas\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/cjneely10/EukMetaSanity/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8956984800011055,
      "result": {
        "original_header": "Refine (optional)",
        "type": "Text_excerpt",
        "value": "For the `Refine` pipeline, we do not provide transcriptomic data for testing. If you wish to test this installation, you must provide your own set of test data. \nAs before, set resource usage in the `GLOBAL` settings as well as for each subsequent section. Also set the `SLURM` settings, if needed. \nPay close attention to the input format\nfor RNA-seq and transcriptomes that is required by the config file:\n```\n# Paths to RNA-seq should be contained in a file with the format (excluding spaces around tab):\ngenome-file-basename \\t /path/to/r1.fq,/path/to/r2.fq;/path/to/r3.fq,/path/to/r4.fq\n# Transcriptomes should be contained in a file with the format (excluding spaces around tab):\ngenome-file-basename \\t /path/to/tr1.fna,/path/to/tr2.fna\n``` \nThe listed paired-end or single-end reads will be mapped to the file that begins with `file-basename`, as will the list \nof transcriptomes.\n```yaml\n---  # document start\n\n###########################################\n## Pipeline input section\nINPUT:\n  run: all\n\n## Global settings\nGLOBAL:\n  # Maximum threads/cpus to use in analysis\n  MaxThreads: 24\n  # Maximum memory to use (in GB)\n  MaxMemory: 100\n\n###########################################\n\nSLURM:\n  ## Set to true if using SLURM\n  USE_CLUSTER: false\n  ## Pass any flags you wish below\n  ## DO NOT PASS the following:\n  ## --nodes, --ntasks, --mem, --cpus-per-task\n  --qos: unlim\n  --job-name: EukMS\n  user-id: uid\n\nCollectInput:\n  # Number of threads task will use\n  threads: 1\n  # Amount of memory task will use (in GB)\n  memory: 8\n  time: \"4:00:00\"\n  # Should be in format (excluding spaces around tab):\n  # genome-file-basename \\t /path/To/tr1.fna[,/path/To/tr2.fna]\n  transcriptomes: /path/To/transcriptome-mapping-file\n  # Should be in format (excluding spaces around tab):\n  # genome-file-basename \\t /path/To/r1.fq[,/path/To/r2.fq][;/path/To/r3.fq[,/path/To/r4.fq]]\n  rnaseq: /path/To/rnaseq-mapping-file\n\nGatherProteins:\n  # Number of threads task will use\n  threads: 8\n  # Amount of memory task will use (in GB)\n  memory: 8\n  time: \"4:00:00\"\n  dependencies:\n    MMSeqsFilterTaxSeqDB:\n      program: mmseqs\n      level: order\n      data:\n        /path/to/odb-mmetsp_db\n\nTranscriptomes:\n  # Number of threads task will use\n  threads: 8\n  # Amount of memory task will use (in GB)\n  memory: 8\n  time: \"4:00:00\"\n  dependencies:\n    GMAPBuild:\n      threads: 1\n      program: gmap_build\n\n    GMAP:\n      program: gmap\n      FLAGS:\n        -B 5\n        --input-buffer-size 1000000\n        --output-buffer-size 1000000\n        -f samse\n\nRNASeq:\n  # Number of threads task will use\n  threads: 8\n  # Amount of memory task will use (in GB)\n  memory: 8\n  time: \"4:00:00\"\n  dependencies:\n    Hisat2Build:\n      threads: 1\n      program: hisat2-build\n\n    Hisat2:\n      program: hisat2\n      FLAGS:\n        \"\"\n\nMergeSams:\n  # Number of threads task will use\n  threads: 1\n  # Amount of memory task will use (in GB)\n  memory: 8\n  time: \"4:00:00\"\n\nProcessMapping:\n  # Number of threads task will use\n  threads: 8\n  # Amount of memory task will use (in GB)\n  memory: 60\n  time: \"4:00:00\"\n  dependencies:\n    SambambaSort:\n      program: sambamba\n\nRunBraker:\n  # Number of threads task will use\n  threads: 4\n  # Amount of memory task will use (in GB)\n  memory: 100\n  time: \"4:00:00\"\n  dependencies:\n    Braker:\n      program: braker.pl\n      FLAGS:\n        # Provide flags as desired\n        # Currently, `exonerate` is the only supported protein mapper\n        \"--prg=exonerate\"\n\n...  # document end\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/cjneely10/EukMetaSanity/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/cjneely10/EukMetaSanity/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/cjneely10/EukMetaSanity/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "cjneely10/EukMetaSanity"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "EukMetaSanity"
      },
      "source": "https://raw.githubusercontent.com/cjneely10/EukMetaSanity/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/cjneely10/EukMetaSanity/main/INSTALL.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Installation\n\n`sed`, `grep`, `conda`, and `git` should be available on your system `PATH`.\n\nEnsure that the drive in which your conda installation is contained has ~80GB of extra space.\n\nClone this repository to a drive with >100GB of storage space:\n\n```\ngit clone https://github.com/cjneely10/EukMetaSanity.git\ncd EukMetaSanity\n```\n\nEnsure that you have `conda`&ge;4.9 installed, that you have conda activated, and that you are in your `(base)` conda environment.\n\n\nA typical installation can be run using:\n\n```shell\n./INSTALL.sh -t <num-threads>\n```\n\nExpect ~4 hours to complete the installation and database downloads.\n\nAfter running the `INSTALL.sh` script, you must restart your shell.\n\n### Updating from existing installation\n\nPrior to updating to the most recent version of this software, users should edit their `~/.bashrc` file and remove old\nEukMetaSanity-related export and `PATH` update statements. Additionally, remove old database and `bin` directories.\nNext, restart your shell.\n\nThen, either update this repository:\n\n```shell\ngit restore .\ngit pull\n```\n\nOr clone it (as described above), and then run the installation script:\n```shell\n./INSTALL.sh -t <num-threads> --upgrade\n```\n\n## Installing dependencies\n\n**EukMetaSanity**'s `conda` installation is packaged with all (most) of the required dependencies.\nUsers who wish to use [GeneMark](http://topaz.gatech.edu/GeneMark/license_download.cgi), \n[eggnog-mapper](https://github.com/eggnogdb/eggnog-mapper), or [kofamscan](https://www.genome.jp/tools/kofamkoala/) \nmust install them separately. We highly suggest using of these software suites (especially GeneMark), \nbut they are not directly required.\n\nEggNOG users should download the software and its required databases using `pip` with their `EukMS_report` environment loaded.\n\n### Configuring GeneMark &ge;4.65_lic\n\nEukMetaSanity is packaged with all dependencies that are needed to run GeneMark.\nIf you choose to include GeneMark in your analysis pipeline, follow the installation instructions [on their webpage](http://topaz.gatech.edu/GeneMark/license_download.cgi) to download their software and accept their license agreements.\n\nEnsure that your `.gm_key` file is present in your home directory. \nYou also may need to run their accessory script from within your activated `EukMS_run` environment:\n\n```shell\nperl change_path_in_perl_scripts.pl \"/usr/bin/env perl\"\n```\n\nEnsure that your `gmes.cfg` file has parameters that are sufficient for your dataset (min contig, etc.).\n\nThe `gmes_linux_64` directory and its enclosed `ProtHint` directory should both be on your system path:\n\n```shell\n~$ echo $PATH | tr \":\" \"\\n\"\n...\n/path/to/gmes_linux_64\n/path/to/gmes_linux_64/ProtHint/bin\n/path/to/gmes_linux_64/ProtHint/dependencies\n/path/to/gmes_linux_64/ProtHint\n...\n```\n\n## **Your installation is complete!**\n \nIf you wish to download additional databases to use in the `report` step, use the \n`mmseqs databases` command to download and install them prior to running **EukMetaSanity**, and add their location to your \n`report-config.yaml` file in the `mmseqs.dependencies` section under `MMSeqs.MMSeqsSearch.data` and \n`MMSeqs.Convertalis.data`.\n\n\n## Uninstalling EukMetaSanity\n\n```shell\n./INSTALL.sh --uninstall\n```\n\nOptionally, remove the installer library\n\n```shell\nconda remove mamba -y\n```\n\nYou will also need to remove the 7 lines added to your `.bashrc` file. You may also wish to delete this repository.\n"
      },
      "source": "https://raw.githubusercontent.com/cjneely10/EukMetaSanity/main/INSTALLATION.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "EukMetaSanity"
        ],
        "type": "Text_excerpt",
        "value": "See <a href=\"https://github.com/cjneely10/EukMetaSanity/blob/main/INSTALLATION.md\" target=\"_blank\">INSTALLATION.md</a> \nfor detailed installation instructions.\n"
      },
      "source": "https://raw.githubusercontent.com/cjneely10/EukMetaSanity/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Config setup",
        "parent_header": [
          "EukMetaSanity",
          "Report (optional)"
        ],
        "type": "Text_excerpt",
        "value": "Copy and edit the `run-config.yaml` config file to fit your analysis needs.\n\n```shell\ncp $EukMS_run/run-config.yaml ./\n```\n\nIn the `GLOBAL` section, you will want to set the number of `MaxThreads` you will use to run the analysis, as well as the `MaxMemory` to be used. If using `SLURM`, set this to be appropriately high (> 100 threads, etc.).\n\nIn the `SLURM` section, set `USE_CLUSTER` to `true` if needed, and provide run configuration details (such as qos, job_name, partition, account, etc.). Make sure the id listed in `user-id` matches your linux id.\n\nIn each subsequent section, you may adjust the `threads`, `memory`, and `FLAGS` that are passed to the program. Be sure to set the\ntime allocation for each step if running pipeline on `SLURM`.\n\nIf you choose to omit running `AbinitioAugustus` or `AbinitioGeneMark`, set its respective `skip` flag to be `true`.\n\n```yaml\n---  # document start\n\n###########################################\n## Pipeline input section\nINPUT:\n  root: all\n\n## Global settings\nGLOBAL:\n  # Maximum threads/cpus to use in analysis\n  MaxThreads: 20\n  # Maximum memory to use (in GB)\n  MaxMemory: 120\n\n###########################################\n\nSLURM:\n  ## Set to true if using SLURM\n  USE_CLUSTER: false\n  ## Pass any flags you wish below\n  ## DO NOT PASS the following:\n  ## --nodes, --ntasks, --mem, --cpus-per-task\n  --qos: unlim\n  --job-name: EukMS\n  user-id: uid\n\nMetaEukEV:\n  # Number of threads task will use\n  threads: 16\n  # Amount of memory task will use (in GB)\n  memory: 100\n  time: \"12:00:00\"\n  dependencies:\n    MetaEuk:\n      program: metaeuk\n      data:\n        /path/to/odb-mmetsp_db\n      # Pass any flags to metaeuk required\n      FLAGS:\n        --min-length 30\n        --metaeuk-eval 0.0001\n        -s 5\n        --cov-mode 0\n        -c 0.3\n        -e 100\n        --max-overlap 0\n        --remove-tmp-files\n\nTaxonomy:\n  # Number of threads task will use\n  threads: 16\n  # Amount of memory task will use (in GB)\n  memory: 100\n  time: \"8:00:00\"\n  dependencies:\n    MMSeqsCreateDB:\n      program: mmseqs\n      threads: 1\n\n    MMSeqsTaxonomy:\n      program: mmseqs\n      cutoff: 8.0  # Minimum % of mapped reads to tax level\n      data:\n        /path/to/odb-mmetsp_db\n      # Pass any flags to mmseqs required\n      FLAGS:\n        --remove-tmp-files\n        -s 6.5\n        --min-seq-id 0.40\n        -c 0.3\n        --cov-mode 0\n\nRepeats:\n  # Number of threads task will use\n  threads: 16\n  # Amount of memory task will use (in GB)\n  memory: 16\n  time: \"24:00:00\"\n  dependencies:\n    RModBuildDatabase:\n      time: \"10:00\"\n      threads: 1\n      program: BuildDatabase\n\n    RModRepeatModeler:\n      program: RepeatModeler\n      skip: false\n\n    RMaskRepeatMasker:\n      program: RepeatMasker\n      level: family\n      data:\n        \"\" # Comma-separated list of repeat models to incorporate\n      FLAGS:\n        -nolow\n\n    RMaskProcessRepeats:\n      time: \"30:00\"\n      threads: 1\n      program: ProcessRepeats\n      FLAGS:\n        -nolow\n\n    RMaskRMOut:\n      time: \"10:00\"\n      threads: 1\n      program: rmOutToGFF3.pl\n\nAbinitioGeneMark:\n  # Number of threads task will use\n  threads: 16\n  # Amount of memory task will use (in GB)\n  memory: 16\n  time: \"16:00:00\"\n  skip: false\n  dependencies:\n    MMSeqsFilterTaxSeqDB:\n      threads: 1\n      time: \"10:00\"\n      program: mmseqs\n      level: order\n      data:\n        /path/to/odb-mmetsp_db\n\n    GeneMarkProtHint:\n      program: prothint.py\n\n    GeneMarkPETAP:\n      program: gmes_petap.pl\n      FLAGS:\n        --min_contig 100\n        --max_contig 1000000000\n        --max_gap 5000\n        --max_mask 5000\n        --min_contig_in_predict 100\n        --min_gene_in_predict 10\n        --gc_donor 0.001\n        --max_intron 10000\n        --max_intergenic 50000\n        --soft_mask auto\n\nAbinitioAugustus:\n  # Number of threads task will use\n  threads: 16\n  # Amount of memory task will use (in GB)\n  memory: 8\n  time: \"24:00:00\"\n  skip: false\n  dependencies:\n    Augustus:\n      program: augustus\n      cutoff: 25.0\n      rounds: 2\n\nTier:\n  # Number of threads task will use\n  threads: 1\n  # Amount of memory task will use (in GB)\n  memory: 2\n  time: \"10:00\"\n  program: locus_solver\n  tier: 1\n\n...  # document end\n```\n"
      },
      "source": "https://raw.githubusercontent.com/cjneely10/EukMetaSanity/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation check:",
        "parent_header": [
          "EukMetaSanity",
          "Run"
        ],
        "type": "Text_excerpt",
        "value": "To confirm proper GeneMark installation, users should run the following command:\n```shell\nls out/wdir/*/AbinitioGeneMark.GeneMarkPETAP/*.sh\n```\n\nYou should see the following files:\n\n```shell\nout/wdir/NAO-all-DCM-20-180-00_bin-19/AbinitioGeneMark.GeneMarkPETAP/gmep.sh\nout/wdir/NAO-all-DCM-20-180-00_bin-19/AbinitioGeneMark.GeneMarkPETAP/gmes.sh\nout/wdir/NAO-all-DCM-20-180-00_bin-1/AbinitioGeneMark.GeneMarkPETAP/gmep.sh\nout/wdir/NAO-all-DCM-20-180-00_bin-2/AbinitioGeneMark.GeneMarkPETAP/gmep.sh\n```\n\nIf you do not see files named `gmep.sh`, there may be an issue with your ProtHint installation.\nCheck your `PATH` to confirm that GeneMark-related directories are present, and check the version of `diamond` that is \npresent in the `gmes_linux64/ProtHint/dependencies` and confirm that it runs as expected.\n"
      },
      "source": "https://raw.githubusercontent.com/cjneely10/EukMetaSanity/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9743992421808397,
      "result": {
        "original_header": "Refine (optional)",
        "type": "Text_excerpt",
        "value": "For the `Refine` pipeline, we do not provide transcriptomic data for testing. If you wish to test this installation, you must provide your own set of test data. \n### Config setup \nCopy and edit the `refine-config.yaml` config file to fit your analysis needs.\n```shell\ncp $EukMS_refine/refine-config.yaml ./\n```\n \nActivate your `EukMS_refine` conda environment.\n```shell\nconda activate EukMS_refine\n```\nRun pipeline with the command:\n```\nyapim run -i /path/to/EukMetaSanity/tests/data -c refine-config.yaml -p $EukMS_refine\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/cjneely10/EukMetaSanity/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8129696555032755,
      "result": {
        "original_header": "Using yapim configuration files",
        "type": "Text_excerpt",
        "value": "## Run\n \n"
      },
      "source": "https://raw.githubusercontent.com/cjneely10/EukMetaSanity/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8508642210005276,
      "result": {
        "original_header": "Refine output",
        "type": "Text_excerpt",
        "value": "This will update the directory structure:\n```\nout/\n  |-- input/\n  |-- wdir/\n  |-- refine-eukmetasanity.log\n  |-- run-eukmetasanity.log\n  |-- results/\n      |-- refine/\n          |-- refine.pkl\n          |-- mag1/\n              |-- mag1.nr.gff3  # Final predictions\n              |-- mag1.cds.fna  # CDS sequences\n              |-- mag1.faa  # Protein sequences\n              |-- augustus.hints.gtf  # Augustus predictions\n              |-- genemark.gtf  # GeneMark predictions\n          |-- mag2/\n              ...\n      |-- run/\n          ...\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/cjneely10/EukMetaSanity/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/cjneely10/EukMetaSanity/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "GNU General Public License v3.0",
        "spdx_id": "GPL-3.0",
        "type": "License",
        "url": "https://api.github.com/licenses/gpl-3.0",
        "value": "https://api.github.com/licenses/gpl-3.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "EukMetaSanity"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "cjneely10"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 122636,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 715,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/cjneely10/EukMetaSanity/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "cjneely10",
          "type": "User"
        },
        "date_created": "2021-07-26T05:29:36Z",
        "date_published": "2021-07-26T05:31:06Z",
        "description": "EukMetaSanity v1.0.0 release",
        "html_url": "https://github.com/cjneely10/EukMetaSanity/releases/tag/v1.0.0",
        "name": "EukMetaSanity-v1.0.0-20210725",
        "release_id": 46745927,
        "tag": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/cjneely10/EukMetaSanity/tarball/v1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/cjneely10/EukMetaSanity/releases/46745927",
        "value": "https://api.github.com/repos/cjneely10/EukMetaSanity/releases/46745927",
        "zipball_url": "https://api.github.com/repos/cjneely10/EukMetaSanity/zipball/v1.0.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "cjneely10",
          "type": "User"
        },
        "date_created": "2021-07-23T00:32:31Z",
        "date_published": "2021-07-23T00:37:21Z",
        "description": "EukMetaSanity first release",
        "html_url": "https://github.com/cjneely10/EukMetaSanity/releases/tag/v0.1.0",
        "name": "EukMetaSanity-v0.1.0-20210722",
        "release_id": 46644800,
        "tag": "v0.1.0",
        "tarball_url": "https://api.github.com/repos/cjneely10/EukMetaSanity/tarball/v0.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/cjneely10/EukMetaSanity/releases/46644800",
        "value": "https://api.github.com/repos/cjneely10/EukMetaSanity/releases/46644800",
        "zipball_url": "https://api.github.com/repos/cjneely10/EukMetaSanity/zipball/v0.1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Run output",
        "parent_header": [
          "EukMetaSanity",
          "Run"
        ],
        "type": "Text_excerpt",
        "value": "This will create a directory structure with **non-empty files** resembling:\n```\nout/\n  |-- wdir/\n  |-- input/\n  |-- run-eukmetasanity.log\n  |-- results/\n    |-- run/\n        |-- run.pkl\n        |-- NAO-all-DCM-20-180-00_bin-1\n          |-- NAO-all-DCM-20-180-00_bin-1.n.Tier.gff3  # Tier n final results (GFF3)\n          |-- NAO-all-DCM-20-180-00_bin-1.n.Tier.faa  # Tier n final results (FASTA)\n          |-- NAO-all-DCM-20-180-00_bin-1.AbinitioAugustus.gff3  # Augustus results (GFF3)\n          |-- NAO-all-DCM-20-180-00_bin-1.AbinitioAugustus.faa  # Augustus results (FASTA)\n          |-- NAO-all-DCM-20-180-00_bin-1.AbinitioGeneMark.gff3  # GeneMark results (GFF3)\n          |-- NAO-all-DCM-20-180-00_bin-1.AbinitioGeneMark.faa  # GeneMark results (FASTA)\n          |-- NAO-all-DCM-20-180-00_bin-1.MetaEukEV.gff3  # MetaEuk results (GFF3)\n          |-- NAO-all-DCM-20-180-00_bin-1.MetaEukEV.faa  # MetaEuk results (FASTA)\n          |-- NAO-all-DCM-20-180-00_bin-1.Repeats.gff3  # Repeats locations (GFF3)\n          |-- NAO-all-DCM-20-180-00_bin-1.Repeats.tbl  # Summary of repeats annotation\n          |-- NAO-all-DCM-20-180-00_bin-1.Repeats.fna  # Masked input genome (FASTA)\n          |-- NAO-all-DCM-20-180-00_bin-1.Taxonomy.txt  # Taxonomy assignment summary\n        |-- NAO-all-DCM-20-180-00_bin-19/\n          ...\n        |-- NAO-all-DCM-20-180-00_bin-2/\n          ...\n```\n"
      },
      "source": "https://raw.githubusercontent.com/cjneely10/EukMetaSanity/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Note on running:",
        "parent_header": [
          "EukMetaSanity",
          "Run",
          "Installation check:"
        ],
        "type": "Text_excerpt",
        "value": "**EukMetaSanity** will not re-run already completed steps within a given pipeline. If you would like to re-do a particular\nportion of the pipeline, simply delete its directories in the project structure. For example, to redo the `Taxonomy` step\nof the `run` pipeline for all MAGs, run the following command to delete all existing data:\n\n```\nyapim clean -p $EukMS_run Taxonomy -o out\n```\n\nThe preceding command will not only delete the results generated by the `Taxonomy` step, but will also remove all other steps\nin the pipeline that use these results. If you only wish to delete a step and nothing else, run:\n\n```shell\nrm -r out/wdir/*/Taxonomy*\n```\n\n---\n"
      },
      "source": "https://raw.githubusercontent.com/cjneely10/EukMetaSanity/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 05:13:49",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 21
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Report",
        "parent_header": [
          "EukMetaSanity",
          "About"
        ],
        "type": "Text_excerpt",
        "value": "Search KEGG, EggNOG, and any MMseqs2 database for functional annotation of putative proteins.\n\nCheck the quality of your annotation using BUSCO.\n"
      },
      "source": "https://raw.githubusercontent.com/cjneely10/EukMetaSanity/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Call pipeline",
        "parent_header": [
          "EukMetaSanity",
          "Report (optional)"
        ],
        "type": "Text_excerpt",
        "value": "---\n\n**Note on HPC usage**: EukMetaSanity launches multiple SLURM jobs to complete its analysis, similar to SLURM job arrays. \nThe node on which EukMetaSanity is launched manages these jobs - RAM and CPU usage is minimal.\nUsers should follow their institution's best practices for selecting a node on which to launch this program.\n\n---\n\nActivate your `EukMS_run` conda environment.\n\n```shell\nconda activate EukMS_run\n```\n\nEnsure your input FASTA sequences do not have the pipe (`|`) character present.\n\nRun the pipeline using the command:\n\n```\nyapim run -i /path/to/EukMetaSanity/tests/data -c run-config.yaml -p $EukMS_run\n```\n\nIf run with default config parameters, the analysis should complete within about 4 hours. This can be sped up by running the analysis on `SLURM` and/or increasing the thread count.\n"
      },
      "source": "https://raw.githubusercontent.com/cjneely10/EukMetaSanity/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Report output",
        "parent_header": [
          "EukMetaSanity",
          "Report (optional)"
        ],
        "type": "Text_excerpt",
        "value": "This will update the directory structure:\n```\nout/\n  |-- wdir/\n  |-- input/\n  |-- report-eukmetasanity.log\n  |-- refine-eukmetasanity.log\n  |-- run-eukmetasanity.log\n  |-- results/\n      |-- report/\n          |-- report.pkl\n          |-- NAO-all-DCM-20-180-00_bin-1/\n              ... (results based on annotation programs run)\n          |-- NAO-all-DCM-20-180-00_bin-19/\n              ...\n          |-- NAO-all-DCM-20-180-00_bin-2/\n              ...\n      |-- refine/\n          ...\n      |-- run/\n          ...\n```\n"
      },
      "source": "https://raw.githubusercontent.com/cjneely10/EukMetaSanity/main/README.md",
      "technique": "header_analysis"
    }
  ]
}