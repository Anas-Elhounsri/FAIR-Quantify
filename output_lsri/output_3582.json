{
  "acknowledgement": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citations &amp; Acknowledgement",
        "parent_header": [
          "Cuttlefish"
        ],
        "type": "Text_excerpt",
        "value": "If you use Cuttlefish or Cuttlefish 2 in your work, please include the following citations, as appropriate:\n"
      },
      "source": "https://raw.githubusercontent.com/COMBINE-lab/Cuttlefish/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "<a href=\"https://doi.org/10.1093/bioinformatics/btab309\">Cuttlefish (original)</a>",
        "parent_header": [
          "Cuttlefish",
          "Citations &amp; Acknowledgement"
        ],
        "type": "Text_excerpt",
        "value": "> Jamshed Khan, Rob Patro, Cuttlefish: fast, parallel and low-memory compaction of de Bruijn graphs from large-scale genome collections, Bioinformatics, Volume 37, Issue Supplement_1, July 2021, Pages i177\u2013i186, <https://doi.org/10.1093/bioinformatics/btab309>\n"
      },
      "source": "https://raw.githubusercontent.com/COMBINE-lab/Cuttlefish/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "<a href=\"https://doi.org/10.1186/s13059-022-02743-6\">Cuttlefish 2</a>",
        "parent_header": [
          "Cuttlefish",
          "Citations &amp; Acknowledgement"
        ],
        "type": "Text_excerpt",
        "value": "> Khan, J., Kokot, M., Deorowicz, S. et al. Scalable, ultra-fast, and low-memory construction of compacted de Bruijn graphs with Cuttlefish 2. Genome Biol 23, 190 (2022). <https://doi.org/10.1186/s13059-022-02743-6>\n\nThis work is supported by _NIH R01 HG009937_, and by _NSF CCF-1750472_, and _CNS-1763680_.\n"
      },
      "source": "https://raw.githubusercontent.com/COMBINE-lab/Cuttlefish/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "application_domain": [
    {
      "confidence": 18.15,
      "result": {
        "type": "String",
        "value": "Natural Language Processing"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citations &amp; Acknowledgement",
        "parent_header": [
          "Cuttlefish"
        ],
        "type": "Text_excerpt",
        "value": "If you use Cuttlefish or Cuttlefish 2 in your work, please include the following citations, as appropriate:\n"
      },
      "source": "https://raw.githubusercontent.com/COMBINE-lab/Cuttlefish/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "<a href=\"https://doi.org/10.1093/bioinformatics/btab309\">Cuttlefish (original)</a>",
        "parent_header": [
          "Cuttlefish",
          "Citations &amp; Acknowledgement"
        ],
        "type": "Text_excerpt",
        "value": "> Jamshed Khan, Rob Patro, Cuttlefish: fast, parallel and low-memory compaction of de Bruijn graphs from large-scale genome collections, Bioinformatics, Volume 37, Issue Supplement_1, July 2021, Pages i177\u2013i186, <https://doi.org/10.1093/bioinformatics/btab309>\n"
      },
      "source": "https://raw.githubusercontent.com/COMBINE-lab/Cuttlefish/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "<a href=\"https://doi.org/10.1186/s13059-022-02743-6\">Cuttlefish 2</a>",
        "parent_header": [
          "Cuttlefish",
          "Citations &amp; Acknowledgement"
        ],
        "type": "Text_excerpt",
        "value": "> Khan, J., Kokot, M., Deorowicz, S. et al. Scalable, ultra-fast, and low-memory construction of compacted de Bruijn graphs with Cuttlefish 2. Genome Biol 23, 190 (2022). <https://doi.org/10.1186/s13059-022-02743-6>\n\nThis work is supported by _NIH R01 HG009937_, and by _NSF CCF-1750472_, and _CNS-1763680_.\n"
      },
      "source": "https://raw.githubusercontent.com/COMBINE-lab/Cuttlefish/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_of_conduct": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we, as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n* Being respectful of differing viewpoints and experiences\n* Using welcoming and inclusive language\n* Gracefully accepting constructive criticism\n\n\nExamples of unacceptable behavior by participants include:\n\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n address (or real name if they are choosing to use a pseudonym), without explicit permission (doxing)\n* The use of sexualized language or imagery and unwelcome sexual attention or\n advances\n* Other conduct which could reasonably be considered inappropriate in a\n professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at salmon_maintainers@gmail.com. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n"
      },
      "source": "https://raw.githubusercontent.com/COMBINE-lab/Cuttlefish/master/CODE_OF_CONDUCT.md",
      "technique": "file_exploration"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/COMBINE-lab/cuttlefish"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "## Contributing code\n\nAny code that you contribute will be licensed under the BSD 3-clause license adopted by cuttlefish.\n\nCode contributions should be made via pull requests.  Please make all PRs to the _develop_ branch \nof the repository.  PRs made to the _master_ branch may be rejected if they cannot be cleanly rebased \non _develop_.  Before you make a PR, please check that:\n\n * commit messages should be made using [*conventional commits*](https://www.conventionalcommits.org/en/v1.0.0/) \u2014 please format all of your commit messages as such.\n * any non-obvious code is documented (we don't yet have formal documentation guidelines, so use common sense)\n"
      },
      "source": "https://raw.githubusercontent.com/COMBINE-lab/Cuttlefish/master/CONTRIBUTING.md",
      "technique": "file_exploration"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-04-08T18:32:57Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-03T10:31:18Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Building the compacted de Bruijn graph efficiently from references or reads."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9965406516441608,
      "result": {
        "original_header": "Cuttlefish",
        "type": "Text_excerpt",
        "value": "Cuttlefish is a fast, parallel, and very lightweight memory tool to construct the compacted de Bruijn graph from sequencing reads or reference sequences. It is highly scalable in terms of the size of the input data.\n \n"
      },
      "source": "https://raw.githubusercontent.com/COMBINE-lab/Cuttlefish/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.917521107624924,
      "result": {
        "original_header": "Overview",
        "type": "Text_excerpt",
        "value": "Cuttlefish is a program to produce the compacted de Bruijn graph from sequencing reads or reference sequences. \n"
      },
      "source": "https://raw.githubusercontent.com/COMBINE-lab/Cuttlefish/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.900940340131744,
      "result": {
        "original_header": "Cuttlefish 2 output",
        "type": "Text_excerpt",
        "value": "The currently supported output format is \n- The set of the maximal unitigs (non-branching paths) of the de Bruijn graph, in FASTA \n"
      },
      "source": "https://raw.githubusercontent.com/COMBINE-lab/Cuttlefish/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9870816075122437,
      "result": {
        "original_header": "Cuttlefish 1 output",
        "type": "Text_excerpt",
        "value": "- The set of the maximal unitigs (non-branching paths) of the de Bruijn graph, in FASTA\n- The compacted de Bruijn graph in the [GFA 1.0](https://github.com/GFA-spec/GFA-spec/blob/master/GFA1.md) and the [GFA 2.0](https://github.com/GFA-spec/GFA-spec/blob/master/GFA2.md) formats\n- The compacted de Bruijn graph in a ''reduced'' GFA format. It consists of two files, with the extensions: `.cf_seg` and `.cf_seq`:\n  - The `.cf_seg` file contains all the maximal unitig fragments of the graph (the segment outputs from GFA, i.e. the `S`-tagged entries), each one with a unique id.\n  This file is a list of pairs `<id segment>`.\n  - The `.cf_seq` file contains the ''tiling'' of each input sequence, made by the maximal unitig fragments (the paths in GFA 1 / ordered groups in GFA 2, i.e. the `P`- / `O`-tagged entries).\n  Each line of the file is of the format `<id tiling>`, where `id` is a unique identifier (name) of this sequence, and `tiling` is a space-separated list of the unitig ids, completely covering the sequence.\n  Each unitig id also has a `+` or `-` sign following it, depending on whether the corresponding unitig is present in the canonical or the reverse-complemented form in this tiling order. \n  The only GFA information missing _explictly_ in this format is the links (GFA 1) / edges and gaps (GFA 2), i.e. the `L`- or the `E`- and the `G`-tagged entries.\n  These can be readily inferred from the sequence-tilings.\n  For example, a tiling <code><seq_id u<sub>0</sub> u<sub>1</sub> ... u<sub>n</sub>></code> corresponds to the edge and gap multi-set <code>{(u<sub>0</sub>, u<sub>1</sub>), (u<sub>1</sub> u<sub>2</sub>), ... , (u<sub>n-1</sub>, u<sub>n</sub>)}</code>.\n  Whether a pair <code>(u<sub>i</sub>, u<sub>i+1</sub>)</code> is an edge or a gap can be inferred by checking the suffix and the prefix (of length `k - 1`) of the unitigs <code>u<sub>i</sub></code> and <code>u<sub>i+1</sub></code>, respectively (in their correct orientations, based on their following `+`/`-` signs).\n  Note that, a gap is possible in a sequence-tiling only if the sequence contains characters outside of `A`, `C`, `G`, and `T`.\n  \n  For moderate to large sized genomes, this output format is preferrable to the GFA ones as the GFA formats can be quite verbose for this particular scenario, while the reduced representation provides effitively the same information, while taking much less space.\n  For example, for the 7-human genome dataset (experimented with in the manuscripts) and using `k = 31`, the compacted graph takes 112 GB in GFA2, but only 29.3 GB in this reduced format.\n \n"
      },
      "source": "https://raw.githubusercontent.com/COMBINE-lab/Cuttlefish/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9546394295181043,
      "result": {
        "original_header": "''Colored'' output for Cuttlefish 1",
        "type": "Text_excerpt",
        "value": "In the [GFA](https://github.com/GFA-spec/GFA-spec) output formats for the compacted de Bruijn graph, the graph is represented as a list of the vertices (i.e. the maximal unitigs) and the adjacencies between them.\nThe output also includes a path-tiling for each individual sequence in the input references, i.e. an ordered list of the maximal unitig ids that completely tile that sequence.\nPut differently, the GFA outputs describe a colored de Bruijn graph in the sense that the color information for each vertex (maximal unitig) is encoded in the `P` (GFA 1.0) or the `O` (GFA 2.0) entries (or the tilings in the `.cf_seq` file, in the reduced output). \nThroughout the [manuscript (Cuttlefish 1)](https://academic.oup.com/bioinformatics/article/37/Supplement_1/i177/6319696), when we mention the colored de Bruijn graph, we refer to a specific definition of colors.\nWhile this definition is intuitive and natural when constructing the compacted colored de Bruijn graph from a set of reference genomes, it is not the case that the Cuttlefish algorithm allows arbitrary coloring of the _k_-mers in the de Bruijn graph.\nSpecifically, in the definition adopted herein, the color set of a unitig is the subset of input references <code>s<sub>i<sub>1</sub></sub>, s<sub>i<sub>2</sub></sub>, ..., s<sub>i<sub>l</sub></sub></code> in which the unitig appears.\nThis color information is implicitly encoded in the path entries of the output GFA files (the `P` entries in GFA 1.0 and the `O` entries in GFA 2.0).\nAs a result, all unitigs produced by Cuttlefish are ''monochromatic'' under this coloring definition, as a change to the color set internally to a unitig would imply either a branch (which would terminate the unitig) or the start or end of some reference string and a sentinel _k_-mer (which would also terminate the unitig).\nIf one were constructing the compacted colored de Bruijn graph from raw sequencing reads or from highly-fractured assemblies, then one may wish to adopt a different notion of color, wherein color sets may vary across an individual unitig.\n \n"
      },
      "source": "https://raw.githubusercontent.com/COMBINE-lab/Cuttlefish/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9559924845347535,
      "result": {
        "original_header": "Larger *k*-mer sizes",
        "type": "Text_excerpt",
        "value": "The default maximum _k_-mer size supported with the installation from source is `63`.\nTo set the maximum _k_-mer size capacity to some `MAX_K`, add `-DINSTANCE_COUNT=<instance_count>` with the `cmake` command\u2014where `<instance_count>` is the number of `k`-values that are to be supported by Cuttlefish, and should be set to `(MAX_K + 1) / 2`.\nFor example, to support a `MAX_K` of 127, use the following:\n```bash\ncmake -DINSTANCE_COUNT=64 ..\n```\n \nCuttlefish supports only the odd `k` values within `MAX_K` due to theoretical reasons.\nCurrently, `MAX_K` is supported upto 255.\nPlease contact the authors if support for a larger `MAX_K` is required. \nNote that, Cuttlefish uses only as many bytes as required (rounded up to multiples of 8) for a _k_-mer. Thus, increasing the maximum _k_-mer size capacity through setting large values for `MAX_K` does not affect the performance for smaller _k_-mer sizes.\n \n"
      },
      "source": "https://raw.githubusercontent.com/COMBINE-lab/Cuttlefish/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9940770080730752,
      "result": {
        "original_header": "Differences between Cuttlefish 1 &amp; 2",
        "type": "Text_excerpt",
        "value": "- Cuttlefish 1 is applicable only for assembled reference sequences.\nWhereas Cuttlefish 2 is applicable for both sequencing reads and reference sequences.\n- For reference sequences, Cuttlefish 1 supports outputting the compacted graph in the GFA formats, whereas Cuttlefish 2 does not support this _yet_.\n- Cuttlefish 2 can be used by passing either one of the following arguments to the `cuttlefish build` command: `--read` or `--ref`.\nPassing neither of these invokes Cuttlefish 1.\n \n"
      },
      "source": "https://raw.githubusercontent.com/COMBINE-lab/Cuttlefish/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/COMBINE-lab/Cuttlefish/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 9
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/COMBINE-lab/cuttlefish/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "COMBINE-lab/cuttlefish"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Cuttlefish"
      },
      "source": "https://raw.githubusercontent.com/COMBINE-lab/Cuttlefish/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/COMBINE-lab/Cuttlefish/master/scripts/merge_into_master.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/COMBINE-lab/Cuttlefish/master/scripts/merge_into_develop.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "Cuttlefish"
        ],
        "type": "Text_excerpt",
        "value": "- From [Bioconda](https://bioconda.github.io/user/install.html):\n\n  ```bash\n  conda install -c bioconda cuttlefish\n  ```\n\n  The Conda package supports _k_ values up-to 127.\n  To use larger _k_ values, please install Cuttlefish from the source.\n\n- From source:\n\n  ```bash\n  git clone https://github.com/COMBINE-lab/cuttlefish.git\n  cd cuttlefish/\n  mkdir build && cd build/\n  cmake -DCMAKE_INSTALL_PREFIX=../ ..\n  make -j 8 install\n  cd ..\n  ```\n\n  You may replace `8` in `make -j 8` with the preferred count of threads to use in the installation process.\n\n  This installs Cuttlefish in a sub-directory named `bin`, inside the project root directory.\n  To specify a different installation directory, its path may be passed as the value of `-DCMAKE_INSTALL_PREFIX` with the `cmake` command, i.e. you may use `cmake -DCMAKE_INSTALL_PREFIX=<custom_path>/ ..` .\n  Then the installed Cuttlefish executable will be found in `<custom_path>/bin/`.\n  Skipping `-DCMAKE_INSTALL_PREFIX` entirely will install Cuttlefish in `/usr/local/bin/`, for which `sudo` access might be required (i.e. `sudo make -j 8 install`).\n\n  This installation supports _k_ values up-to `63`.\n  To ensure support for larger values, please compile the source with the slight modification described in [Larger _k_-mer sizes](#larger-k-mer-sizes).\n"
      },
      "source": "https://raw.githubusercontent.com/COMBINE-lab/Cuttlefish/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.886224288346438,
      "result": {
        "original_header": "Larger *k*-mer sizes",
        "type": "Text_excerpt",
        "value": "The default maximum _k_-mer size supported with the installation from source is `63`.\nTo set the maximum _k_-mer size capacity to some `MAX_K`, add `-DINSTANCE_COUNT=<instance_count>` with the `cmake` command\u2014where `<instance_count>` is the number of `k`-values that are to be supported by Cuttlefish, and should be set to `(MAX_K + 1) / 2`.\nFor example, to support a `MAX_K` of 127, use the following:\n```bash\ncmake -DINSTANCE_COUNT=64 ..\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/COMBINE-lab/Cuttlefish/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8029577205158637,
      "result": {
        "original_header": "Cuttlefish 1 output",
        "type": "Text_excerpt",
        "value": "  <table>\n  <tr><th>Segments file</th><th>Sequence tilings file</th></tr>\n  <tr>\n  <td> \n"
      },
      "source": "https://raw.githubusercontent.com/COMBINE-lab/Cuttlefish/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/COMBINE-lab/cuttlefish/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "BSD 3-Clause \"New\" or \"Revised\" License",
        "spdx_id": "BSD-3-Clause",
        "type": "License",
        "url": "https://api.github.com/licenses/bsd-3-clause",
        "value": "https://api.github.com/licenses/bsd-3-clause"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "BSD 3-Clause License\n\nCopyright (c) 2020, COMBINE lab\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its\n   contributors may be used to endorse or promote products derived from\n   this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
      },
      "source": "https://raw.githubusercontent.com/COMBINE-lab/Cuttlefish/master/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Licenses",
        "parent_header": [
          "Cuttlefish"
        ],
        "type": "Text_excerpt",
        "value": "- The [BBHash](https://github.com/rizkg/BBHash) library is MIT licensed.\n- The [Boost C++ Metaprogramming](https://www.boost.org/doc/libs/1_31_0/libs/mpl/doc/index.html) library is Boost Software licensed.\n- The [compact_vector](https://github.com/gmarcais/compact_vector) library is MIT licensed.\n- The [cxxopts](https://github.com/jarro2783/cxxopts) library is MIT licensed.\n- The [fmt](https://github.com/fmtlib/fmt) library is MIT licensed.\n- The [KMC](https://github.com/refresh-bio/KMC) software is GNU GPL 3 licensed.\n- The [kseq](http://lh3lh3.users.sourceforge.net/kseq.shtml) library is MIT licensed.\n- The [spdlog](https://github.com/gabime/spdlog) library is MIT licensed.\n- The [xxHash](https://github.com/Cyan4973/xxHash) library is BSD licensed.\n- Cuttlefish itself is Revised BSD licensed.\n"
      },
      "source": "https://raw.githubusercontent.com/COMBINE-lab/Cuttlefish/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "cuttlefish"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "COMBINE-lab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 5311138,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 300254,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 15980,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 1888,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/COMBINE-lab/Cuttlefish/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jamshed",
          "type": "User"
        },
        "date_created": "2023-01-29T15:25:10Z",
        "date_published": "2023-02-08T18:12:53Z",
        "description": "# New Features\r\n\r\n- Introduces option `--poly-N-stretch` to cuttlefish 1 usage, specifying which would include information of poly-N stretches in the tiling output of the GFA-reduced format.\r\n\r\n# Enhancements\r\n\r\n- Can now build and run on M1 and M2 machines (thanks to @theJasonFan).\r\n\r\n**Full Changelog**: https://github.com/COMBINE-lab/cuttlefish/compare/v2.1.1...v2.2.0",
        "html_url": "https://github.com/COMBINE-lab/cuttlefish/releases/tag/v2.2.0",
        "name": "Cuttlefish 2.2.0",
        "release_id": 91775719,
        "tag": "v2.2.0",
        "tarball_url": "https://api.github.com/repos/COMBINE-lab/cuttlefish/tarball/v2.2.0",
        "type": "Release",
        "url": "https://api.github.com/repos/COMBINE-lab/cuttlefish/releases/91775719",
        "value": "https://api.github.com/repos/COMBINE-lab/cuttlefish/releases/91775719",
        "zipball_url": "https://api.github.com/repos/COMBINE-lab/cuttlefish/zipball/v2.2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jamshed",
          "type": "User"
        },
        "date_created": "2022-12-05T18:36:52Z",
        "date_published": "2022-12-05T18:49:33Z",
        "description": "# Fixes\r\n- A bug in outputting the compacted graph in the [''reduced'' GFA format](https://github.com/COMBINE-lab/cuttlefish#output-formats) has been fixed. The bug would freeze the process at completion of the GFA-reduced output, when the input contains sequences with length >= _k_ but with no unitig.\r\n\r\n**Full Changelog**: https://github.com/COMBINE-lab/cuttlefish/compare/v2.1.0...v2.1.1",
        "html_url": "https://github.com/COMBINE-lab/cuttlefish/releases/tag/v2.1.1",
        "name": "Cuttlefish 2.1.1",
        "release_id": 85034980,
        "tag": "v2.1.1",
        "tarball_url": "https://api.github.com/repos/COMBINE-lab/cuttlefish/tarball/v2.1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/COMBINE-lab/cuttlefish/releases/85034980",
        "value": "https://api.github.com/repos/COMBINE-lab/cuttlefish/releases/85034980",
        "zipball_url": "https://api.github.com/repos/COMBINE-lab/cuttlefish/zipball/v2.1.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jamshed",
          "type": "User"
        },
        "date_created": "2022-09-09T20:18:15Z",
        "date_published": "2022-09-09T22:39:37Z",
        "description": "# New features\r\n\r\n- Introduces option `--track-short-seqs` to cuttlefish 1 usage, specifying which would make it track the existence of sequences shorter than `k` bases, in the output `.json` file.\r\n\r\n# Enhancements\r\n\r\n- Upgraded the bit-vector library to [v0.1.1](https://github.com/gmarcais/compact_vector/releases/tag/v0.1.1).\r\n- Using `std::filesystem` moving forward.\r\n\r\n**Full Changelog**: https://github.com/COMBINE-lab/cuttlefish/compare/v2.0.0...v2.1.0",
        "html_url": "https://github.com/COMBINE-lab/cuttlefish/releases/tag/v2.1.0",
        "name": "Cuttlefish 2.1.0",
        "release_id": 76745189,
        "tag": "v2.1.0",
        "tarball_url": "https://api.github.com/repos/COMBINE-lab/cuttlefish/tarball/v2.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/COMBINE-lab/cuttlefish/releases/76745189",
        "value": "https://api.github.com/repos/COMBINE-lab/cuttlefish/releases/76745189",
        "zipball_url": "https://api.github.com/repos/COMBINE-lab/cuttlefish/zipball/v2.1.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jamshed",
          "type": "User"
        },
        "date_created": "2022-02-02T22:53:31Z",
        "date_published": "2022-02-03T01:53:10Z",
        "description": "# New features\r\n\r\n- Cuttlefish is now able to construct compacted de Bruijn graphs from short read sets, along with reference sequences. This is made possible through the design of a new algorithm, Cuttlefish 2, that works on both forms of input. An associated [pre-print](https://doi.org/10.1101/2021.12.14.472718) describing this new algorithm is available on bioRxiv.\r\n\r\n# Enhancements\r\n\r\nThe earlier Cuttlefish [algorithm](https://academic.oup.com/bioinformatics/article/37/Supplement_1/i177/6319696) (also referred to as Cuttlefish 1) implementation has been enhanced in a number of ways:\r\n\r\n- An explicitly built [KMC](https://github.com/refresh-bio/KMC)-database is not required as an input to Cuttlefish anymore. The database construction has been incorporated into the Cuttlefish execution.\r\n- The plain-text output has been replaced with the FASTA format.\r\n- A meta-information file is also output along with the compacted graph, containing summary statistics of the graph.\r\n- The memory-usage can now be traded-off for faster execution time, through providing a (soft) memory-bound, or lifting off any strict-memory requirements.\r\n\r\nAll these features are also available under execution of the Cuttlefish 2 algorithm as well.\r\n\r\n# Fixes\r\n\r\n- A bug in outputting the compacted graph in the [GFA 1](https://github.com/GFA-spec/GFA-spec/blob/master/GFA1.md) format has been fixed (reported in #8, #9). The bug would produce an extra pre-pending overlap value in the ''Overlaps'' field of a [''Path'' line](https://github.com/GFA-spec/GFA-spec/blob/master/GFA1.md#p-path-line).\r\n\r\n# Other changes\r\n\r\n- The default `k` value is bumped to `27` from `25`.\r\n- The default thread-count `t` is set to a quarter of the number of concurrent threads supported, instead of just `1`.\r\n\r\n\r\n**Full Changelog**: https://github.com/COMBINE-lab/cuttlefish/compare/v1.0.0...v2.0.0",
        "html_url": "https://github.com/COMBINE-lab/cuttlefish/releases/tag/v2.0.0",
        "name": "Cuttlefish 2.0.0",
        "release_id": 58394727,
        "tag": "v2.0.0",
        "tarball_url": "https://api.github.com/repos/COMBINE-lab/cuttlefish/tarball/v2.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/COMBINE-lab/cuttlefish/releases/58394727",
        "value": "https://api.github.com/repos/COMBINE-lab/cuttlefish/releases/58394727",
        "zipball_url": "https://api.github.com/repos/COMBINE-lab/cuttlefish/zipball/v2.0.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jamshed",
          "type": "User"
        },
        "date_created": "2021-07-01T20:47:53Z",
        "date_published": "2021-07-02T16:14:51Z",
        "description": "First release of the associated software implementation for the algorithm proposed in _Cuttlefish: Fast, parallel, and low-memory compaction of de Bruijn graphs from large-scale genome collections_.\r\n\r\nPublication: https://doi.org/10.1093/bioinformatics/btab309",
        "html_url": "https://github.com/COMBINE-lab/cuttlefish/releases/tag/v1.0.0",
        "name": "Cuttlefish 1.0.0",
        "release_id": 45633485,
        "tag": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/COMBINE-lab/cuttlefish/tarball/v1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/COMBINE-lab/cuttlefish/releases/45633485",
        "value": "https://api.github.com/repos/COMBINE-lab/cuttlefish/releases/45633485",
        "zipball_url": "https://api.github.com/repos/COMBINE-lab/cuttlefish/zipball/v1.0.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependencies",
        "parent_header": [
          "Cuttlefish"
        ],
        "type": "Text_excerpt",
        "value": "Cuttlefish can be installed using Bioconda (check [Installation](#installation)).\nIf installing _from source_, the following are required:\n\n- [GCC](https://gcc.gnu.org/) **or** [Clang](https://clang.llvm.org) compilers for C++17 and C11\n- [CMake](https://cmake.org/) (version >= 3.14)\n- [zlib](https://zlib.net/)\n- [bzip2](https://www.sourceware.org/bzip2/)\n\nThese should already be available in your platform; and if not, then these can be easily installed from their sources.\nBesides, these should also be available via some package manager for your operating system:\n\n- **Linux**\n  \n  ```bash\n  sudo apt-get install build-essential cmake zlib1g-dev libbz2-dev\n  ```\n\n- **MacOS**\n  \n  ```bash\n  brew install --with-toolchain llvm\n  brew install cmake zlib bzip2\n  ```\n"
      },
      "source": "https://raw.githubusercontent.com/COMBINE-lab/Cuttlefish/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 13:17:24",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 81
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "Cuttlefish"
        ],
        "type": "Text_excerpt",
        "value": "`cuttlefish build --help` displays the following message (the default `threads` argument is machine-configuration specific):\n\n```txt\nEfficiently construct the compacted de Bruijn graph from sequencing reads or reference sequences\nUsage:\n  cuttlefish build [OPTION...]\n\n common options:\n  -s, --seq arg            input files\n  -l, --list arg           input file lists\n  -d, --dir arg            input file directories\n  -k, --kmer-len arg       k-mer length (default: 27)\n  -t, --threads arg        number of threads to use (default: 22)\n  -o, --output arg         output file\n  -w, --work-dir arg       working directory (default: .)\n  -m, --max-memory arg     soft maximum memory limit in GB (default: 3)\n      --unrestrict-memory  do not impose memory usage restriction\n  -h, --help               print usage\n\n cuttlefish_1 options:\n  -f, --format arg  output format (0: FASTA, 1: GFA 1.0, 2: GFA 2.0, 3:\n                    GFA-reduced)\n\n cuttlefish_2 options:\n      --read        construct a compacted read de Bruijn graph (for FASTQ\n                    input)\n      --ref         construct a compacted reference de Bruijn graph (for\n                    FASTA input)\n  -c, --cutoff arg  frequency cutoff for (k + 1)-mers (default: refs: 1,\n                    reads: 2)\n      --path-cover  extract a maximal path cover of the de Bruijn graph\n\n debug options:\n      --vertex-set arg  set of vertices, i.e. k-mers (KMC database) prefix\n                        (default: \"\")\n      --edge-set arg    set of edges, i.e. (k + 1)-mers (KMC database) prefix\n                        (default: \"\")\n\n specialized options:\n      --save-mph       save the minimal perfect hash (BBHash) over the vertex\n                       set\n      --save-buckets   save the DFA-states collection of the vertices\n      --save-vertices  save the vertex set of the graph\n\n```\n\nIt supports GNU style arguments, `--` for long options, and `-` for short options.\nLong options `opt` taking a parameter can be written as `--opt=parameter` or as `--opt parameter`.\nShort options `o` taking a parameter is written as `-o parameter`.\n\nThe common arguments (for Cuttlefish 1 and 2) are set as following.\n\n- The input files can be passed in any of the following ways (and the options may be mixed together).\n  - `-s <data files>`\n  - `-l <newline-separated list files of data files>`\n  - `-d <directories containing only the data files>`\n\n  Multiple values for each option can be passed as `--seq=s1,s2,...`, `--seq s1 --seq s2 ...`, `-s s1,s2 ...`, or `-s s1 -s s2` (similarly for `list` and `dir`).\n\n  In case of using sequencing reads as input, the files should be in the FASTQ format.\n  For reference sequences, those should be in the FASTA format.\n  The input files can also be gzipped.\n- The _k_-mer length `k` must be odd and within `127` (and `63` if installed from source; see [Larger _k_-mer sizes](#larger-k-mer-sizes) to increase the _k_-mer size capacity beyond these).\nThe default value is `27`.\n- The number of threads `t` is set to a quarter of the number of concurrent threads supported, by default.\nThe use of high-enough values is recommended.\n- Cuttlefish generates two output files:\n  - A FASTA / GFA1 / GFA2 file containing the maximal unitigs of the de Bruijn graph (with the extension `.fa` / `.gfa1` / `.gfa2`).\n  The GFA output formats are exclusive for Cuttlefish 1.\n  - A metadata file containing some structural characteristics of the de Bruijn graph and its compacted form (with the extension `.json`).\n- The working directory `w` is used for temporary files created by the process\u2014it is not created by Cuttlefish, and must exist beforehand.\nThe current directory is set as the default working directory.\n- A soft maximum memory-limit `m` (in GB) can be provided to trade-off the RAM usage for faster execution time;\nthis will only be adhered to if the provided limit is at least the minimum required memory for Cuttlefish, determined internally.\n- Memory-usage restrictions can be lifted by using `unrestrict-memory`, trading off extra RAM usage for faster execution time.\n\nCuttlefish 1 specific arguments are set as following.\n\n- The output formats (`f`) are \u2014\n  - `0`: only the maximal unitig (non-branching path) fragments, in FASTA;\n  - `1`: the maximal unitigs, their connectivities, and the input sequence tilings, in GFA 1.0;\n  - `2`: the maximal unitigs, their connectivities, and the input sequence tilings, in GFA 2.0; and\n  - `3`: the maximal unitigs and the input sequence tilings, in GFA-reduced (see [I/O formats](#io-formats)).\n\nCuttlefish 2 specific arguments are set as following.\n\n- `read` and `ref` are ''input type'' arguments, based on whether you are providing sequencing reads or reference sequences as input, respectively.\n- The frequency threshold `c` (of (k + 1)-mers) is set to `2` for read inputs, and `1` for reference inputs, by default.\n- `path-cover` is used to construct a maximal vertex-disjoint path cover of the de Bruijn graph, instead of its compacted variant.\n"
      },
      "source": "https://raw.githubusercontent.com/COMBINE-lab/Cuttlefish/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Note",
        "parent_header": [
          "Cuttlefish",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "The edge- and / or the vertex-set generation step could produce a high number of temporary files in disk, up-to 2000.\nFailure to ensure the capability of opening this many files could produce error messages of the following form:\n> Error: Cannot open temporary file ./kmc_00000.bin\n\nThe concurrently open file-handle limit for the user running the process can be raised with the following command:\n\n  ```bash\n  ulimit -n 2048\n  ```\n"
      },
      "source": "https://raw.githubusercontent.com/COMBINE-lab/Cuttlefish/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example usage",
        "parent_header": [
          "Cuttlefish"
        ],
        "type": "Text_excerpt",
        "value": "We use _k_ = 3, and 4 CPU threads, with a working directory named `temp` in the following examples.\n"
      },
      "source": "https://raw.githubusercontent.com/COMBINE-lab/Cuttlefish/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Using Cuttlefish 2",
        "parent_header": [
          "Cuttlefish",
          "Example usage"
        ],
        "type": "Text_excerpt",
        "value": "- **From FASTQ files**\n\nTo construct the maximal unitigs of the example FASTQ file `reads.fq` (provided in the `data` directory) with frequency cutoff `c = 1`, the following may be used.\n\n```bash\ncuttlefish build -s reads.fq -k 3 -t 4 -o cdbg -w temp/ --read -c 1\n```\n\n- **From FASTA files**\n\nTo construct the maximal unitigs of the example FASTA file `refs1.fa` (provided in the `data` directory), the following may be used.\n\n```bash\ncuttlefish build -s refs1.fa -k 3 -t 4 -o cdbg -w temp/ --ref\n```\n\nThese executions will produce two output files each: `cdbg.fa`, containing the maximal unitigs of the graph; and `cdbg.json`, a metadata file with some structural characteristics of the graph.\n\nMultiple seq-files, lists of seq-files, or directories of seq-files may also be passed, as described in [Usage](#usage).\n"
      },
      "source": "https://raw.githubusercontent.com/COMBINE-lab/Cuttlefish/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Using Cuttlefish 1",
        "parent_header": [
          "Cuttlefish",
          "Example usage"
        ],
        "type": "Text_excerpt",
        "value": "To output the compacted de Bruijn graph (in GFA 2.0) for the example FASTA files `refs1.fa` and `refs2.fa` (provided in the `data` directory), the following may be used:\n\n```bash\ncuttlefish build -s refs1.fa,refs2.fa -k 3 -t 4 -o cdbg.gfa2 -f 2 -w temp/\n```\n\nYou may also provide lists or directories of reference files as input, as described in [Usage](#usage).\n"
      },
      "source": "https://raw.githubusercontent.com/COMBINE-lab/Cuttlefish/master/README.md",
      "technique": "header_analysis"
    }
  ]
}