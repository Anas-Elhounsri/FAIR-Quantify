{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/LewisLabUCSD/StanDep"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-10-04T22:04:54Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-04-01T21:53:14Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Code for StanDep Paper"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.8998897991870928,
      "result": {
        "original_header": "Loading transcriptomics data (rnaData)",
        "type": "Text_excerpt",
        "value": "1. The transcriptomics data is required as a MATLAB structure containing following fields:   \n  a. gene: list of gene names    \n  b. value: a matrix whose each column contains the expression of genes across a tissue/context and each row contains expression of a gene across all tissues/contexts     \n  c. genesymbols (optional): any alternative gene names that the user may want to keep track of   \n  d. Tissue: names of conditions    \n2. You must have access to the genome-scale model you want to use for integration.\n \n"
      },
      "source": "https://raw.githubusercontent.com/LewisLabUCSD/StanDep/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/LewisLabUCSD/StanDep/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/LewisLabUCSD/StanDep/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "LewisLabUCSD/StanDep"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "StanDep"
      },
      "source": "https://raw.githubusercontent.com/LewisLabUCSD/StanDep/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9933226992990263,
      "result": {
        "original_header": "StanDep",
        "type": "Text_excerpt",
        "value": "Codes for \"StanDep: capturing transcriptomic variability improves context-specific metabolic models \"   \nChintan J. Joshi, Song-Min Schinn, Anne Richelle, Isaac Shamie, Eyleen J. O\u2019Rourke, Nathan E. Lewis\nhttps://www.biorxiv.org/content/10.1101/594861v2\n \n"
      },
      "source": "https://raw.githubusercontent.com/LewisLabUCSD/StanDep/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999969238577497,
      "result": {
        "original_header": "NOTES:",
        "type": "Text_excerpt",
        "value": "1. Do not add depreicated folder  \n2. You must have cobra toolbox on MATLAB  \n3. ```geneExprDist_hierarchy``` uses CubeHelix from MATLAB FileExchange by Stephen Cobeldick (https://www.mathworks.com/matlabcentral/fileexchange/43700-cubehelix-colormap-generator-beautiful-and-versatile)\n \n"
      },
      "source": "https://raw.githubusercontent.com/LewisLabUCSD/StanDep/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8666804521191518,
      "result": {
        "original_header": "Loading transcriptomics data (rnaData)",
        "type": "Text_excerpt",
        "value": "2. You must have access to the genome-scale model you want to use for integration.\n \n"
      },
      "source": "https://raw.githubusercontent.com/LewisLabUCSD/StanDep/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/LewisLabUCSD/StanDep/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "StanDep"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "LewisLabUCSD"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "MATLAB",
        "size": 111481,
        "type": "Programming_language",
        "value": "MATLAB"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/LewisLabUCSD/StanDep/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 12:46:12",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "non-software"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "To get the active core reaction lists for the conditions follow the code below:",
        "type": "Text_excerpt",
        "value": "**initialize COBRA toolbox**  \n```\ninitCobraToolbox\n```\n\n**extract expression data of the genes in the model**   \n```\nmodelData = getModelData(rnaData,model);\n```\n\n**calculate enzymes in the model**  \n```\nspec = getSpecialistEnzymes(model);  \nprom = getPromEnzymes(model);\n```\n\n**calculate enzyme expression**   \n```\nenzymeData = comparePromiscuousSpecific(spec,prom,modelData);\n```\n\n**other inputs needed**  \n```\nedgeX = [-2 -1 0 1 2 2.5 3 4]; % bins  \ndistMethod = 'euclidean'; % distance method  \nlinkageMethod = 'complete'; % linkage metric for hierarchical clustering\n```\n\n**calculate clusters of enzyme expression**   \n```\nclustObj = geneExprDist_hierarchy(enzymeData,[],edgeX,k,distMethod,linkageMethod);\n```\n\n**calculate active reaction lists as binary matrix**    \n```\ncoreRxnMat = models4mClusters1(clustObj,enzymeData.Tissue,model,edgeX,[],[],true,0,[1 1]); \n```\n**calculate Jaccard similarity between core reaction lists**   \n```\ncalcJaccardSimilarity(coreRxnMat,enzymeData.Tissue,'matrix',true);\n```\n**prepare model using mCADRE**   \n```\nubiScore = getUbiquityScore(clustObj,edgeX,model); % calculate ubiquity score\n```\nrun mCADRE by using the above value for the input variable \"ubiquityScore\"  \n\n**Similarly other extraction methods can be tailored as well.**  \n"
      },
      "source": "https://raw.githubusercontent.com/LewisLabUCSD/StanDep/master/README.md",
      "technique": "header_analysis"
    }
  ]
}