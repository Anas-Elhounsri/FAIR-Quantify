{
  "application_domain": [
    {
      "confidence": 10.26,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/jacksonloper/bardensr"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-06-18T14:44:21Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-23T16:31:57Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "barcode demixing through nonnegative spatial regression"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9808278556860155,
      "result": {
        "original_header": "What is it for?",
        "type": "Text_excerpt",
        "value": "This package is a collection of tools for dealing with spatial multiplexed data.  Specifically, we assume the following setup. \n- There are `J` different \"barcodes\" (e.g. 300 different barcodes labeling 300 RNA transcripts)\n- There is a grid of `M0 x M1 x M2` \"voxels\" (e.g. 2048 x 2048 x 150 voxels)\n- There are `N` different \"frames\" (e.g. 7 imaging rounds and 4 channels = 28 frames)\n- There is an unobservable `M0 x M1 x M2 x J` \"density\" giving a nonnegative value for each barcodes (`j`) at each voxel (`m0,m1,m2`), indicating where the \"**rolonies**\" are. \n- There is a `N x J` \"codebook\" matrix full of nonnegative numbers, indicating how much we expect a given barcode (`j`) to contribute to the observations at given frame (`n`).\n- We observe a `N x M0 x M1 x M2` \"imagestack\" giving a nonnegative value for each frame (`n`) at each voxel (`m0,m1,m2`).\n- Given the density, we assume the imagestack can be modelled by the following process: blur along the spatial dimensions, apply the codebook along the barcodes dimensions, and add noise.\n \n"
      },
      "source": "https://raw.githubusercontent.com/jacksonloper/bardensr/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9159391273867407,
      "result": {
        "original_header": "What can BarDensr do?",
        "type": "Text_excerpt",
        "value": "- Spot-calling\n    - Given an imagestack, the codebook, and the point-spread function, attempt to guess the density.\n    - Given a density, attempt to identify bumps (e.g. individual rolonies).\n- Registration\n    - Generate movies which can help identify if the imagestack has registration issues.\n    - Find transformation of an imagestack so that for each frame the same voxel corresponds to the same physical location on the slices.\n- Preprocessing\n    - GPU-accelerated background subtraction via Lucy-Richardson\n    - Generate figures which can help identify colorbleed in the imagestack (and suggest a correction) \nWe are working on a few additional algorithms for the following tasks.  These can be found if you dig into this code, but they are not really ready for public use. \n- Given an imagestack, try to guess the codebook.\n- Correct vignetting artifacts in an imagestack.\n- Stitch several imagestacks together from different fields of view. \n"
      },
      "source": "https://raw.githubusercontent.com/jacksonloper/bardensr/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/jacksonloper/bardensr/tree/master/docs"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Documentation of functionality",
        "parent_header": [
          "BarDensr",
          "How do I use it?"
        ],
        "type": "Text_excerpt",
        "value": "The public API (at [readthedocs](http://bardensr.readthedocs.io)) and the [example notebook](https://github.com/jacksonloper/bardensr/blob/master/examples/basics.ipynb) should be enough to get started.   We welcome any requests or suggestions for improved documentations; submit an issue to this github repo.\n"
      },
      "source": "https://raw.githubusercontent.com/jacksonloper/bardensr/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/jacksonloper/bardensr/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jacksonloper/bardensr/master/examples/basics.ipynb"
      },
      "source": "https://raw.githubusercontent.com/jacksonloper/bardensr/master/examples/basics.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/jacksonloper/bardensr/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "jacksonloper/bardensr"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "BarDensr"
      },
      "source": "https://raw.githubusercontent.com/jacksonloper/bardensr/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "BarDensr",
          "How do I use it?"
        ],
        "type": "Text_excerpt",
        "value": "```\npip install --upgrade git+https://github.com/jacksonloper/bardensr.git\n```\n"
      },
      "source": "https://raw.githubusercontent.com/jacksonloper/bardensr/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9283473033226246,
      "result": {
        "original_header": "What is it for?",
        "type": "Text_excerpt",
        "value": "This package is a collection of tools for dealing with spatial multiplexed data.  Specifically, we assume the following setup. \n"
      },
      "source": "https://raw.githubusercontent.com/jacksonloper/bardensr/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/jacksonloper/bardensr/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2020 Jackson Loper\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/jacksonloper/bardensr/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bardensr"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "jacksonloper"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 242225,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jacksonloper/bardensr/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "I ran out of RAM :(",
        "parent_header": [
          "BarDensr",
          "FAQ"
        ],
        "type": "Text_excerpt",
        "value": "Several options for dealing with memory limitations --\n\n1. Create minitiles from your imagestack, and process each separately.\n2. Use CPU (GPUs almost always have less RAM).\n3. Use lower precision (e.g. convert numpy array to float16)\n4. Use a bigger machine!\n\n"
      },
      "source": "https://raw.githubusercontent.com/jacksonloper/bardensr/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-06 15:23:31",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 6
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Data structures",
        "parent_header": [
          "BarDensr",
          "How do I use it?"
        ],
        "type": "Text_excerpt",
        "value": "To use this python package, you will need to store your data with the following conventions.\n- An imagestack should be a numpy array of shape N x M0 x M1 x M2.  Here M0, M1, M2 refer to the spatial dimensions of the tissue.  If the tissue is measured only in two-dimensions, one can set one of these values to unity (i.e. a numpy array of shape N x M0 x M1 x 1).\n- A codebook should be a numpy array of dimension N x J.\n"
      },
      "source": "https://raw.githubusercontent.com/jacksonloper/bardensr/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "How do I make bardensr use GPUs?  How do I  make it use CPUs?",
        "parent_header": [
          "BarDensr",
          "FAQ"
        ],
        "type": "Text_excerpt",
        "value": "The heavy lifting of this package is all performed by tensorflow.  As such, if you want to insist that the lifting is run on a GPU or CPU, you can wrap function calls with `tf.device`.  The simplest version of this pattern is as follows:\n\n```\ndevicename = 'GPU' # <-- or 'CPU'\nwith tf.device(devicename):\n    interesting_result=bardensr.foo(my_cool_data)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/jacksonloper/bardensr/master/README.md",
      "technique": "header_analysis"
    }
  ]
}