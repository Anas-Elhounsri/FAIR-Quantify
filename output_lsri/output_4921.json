{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/NWPU-903PR/DMDeepm6A1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-03-11T02:46:51Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-11-28T03:44:28Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A R package used to identify single base resolution m6A and differential m6A methylation site from MeRIP-seq data version 1.0."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9884395077703875,
      "result": {
        "original_header": "DMDeepm6A1.0",
        "type": "Text_excerpt",
        "value": "A R package used to identify single base resolution m6A and differential m6A methylation site from MeRIP-seq data version 1.0. \nThe package is developed for the single base resolution m6A sites identification and differential analysis for MeRIP-seq data of two experimental conditions to unveil the dynamics in post-transcriptional regulation of the RNA methylome. This is to our knowledge the first tool to identify single base m6A and differential m6A methylation (DmM) sites using a deep learning and statistic test. The statistic test employed the same rhtest as exomePeak or alternatively used QNB \uff08QNB is currently unavailable, we will try to solve this soon\uff09 which is more strict so that sacrifice some sensitivity. Please feel free to contact Songyao Zhang zsynwpu@gmail.com if you have any questions. Many thanks to Jia Meng for the exomePeak R package (Meng, Jia, et al. \"Exome-based analysis for RNA epigenome sequencing data.\" Bioinformatics 29.12 (2013): 1565-1567.), which provides the base for DMDeepm6A. \n"
      },
      "source": "https://raw.githubusercontent.com/NWPU-903PR/DMDeepm6A1.0/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/NWPU-903PR/DMDeepm6A1.0/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/NWPU-903PR/DMDeepm6A1.0/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "NWPU-903PR/DMDeepm6A1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DMDeepm6A1.0"
      },
      "source": "https://raw.githubusercontent.com/NWPU-903PR/DMDeepm6A1.0/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "1. Installation",
        "parent_header": [
          "DMDeepm6A1.0"
        ],
        "type": "Text_excerpt",
        "value": "DMDeepm6A depends on exomePeak, keras, DESeq, TxDb.Hsapiens.UCSC.hg19.knownGene, BSgenome.Hsapiens.UCSC.hg19, org.Hs.eg.dbr R packages and please make sure install them before installing DMDeepm6A.\n\n1.\tKeras installation    \nMake sure Anaconda is installed for windows system for Python 3.x (https://www.anaconda.com/download/#windows) before installing Keras (\"Anaconda3-5.3.0-Windows-x86_64\" is suggested). Then follow the instruction on web (https://keras.rstudio.com/) to install keras (please do not install the current version, tensorflow version 1.10 and keras version 2.2.0 is suggested) or install in R as following:\n\n```{r, eval=FALSE}\nif (!requireNamespace(\"devtools\", quietly = TRUE))    \n    install.packages(\"devtools\")\n\ndevtools::install_version(\"reticulate\", version = \"1.10\",repos = \"https://cloud.r-project.org/\")\ndevtools::install_version(\"tensorflow\", version = \"1.10\",repos = \"https://cloud.r-project.org/\")\ndevtools::install_version(\"keras\", version = \"2.2.0\",repos = \"https://cloud.r-project.org/\")\n\n```\n\nYou may set your convenient CRAN mirrors by setting `repos`.    \nThen create the required virtual environment and install corresponding version of keras and tensorflow (e.g., tensorflow1.10, keras2.2.0) using conda, for Windows users, you can set this in Anaconda Prompt:\n\n```\nconda create -n r-tensorflow tensorflow==1.10 keras==2.2.0 numpy==1.14.5\n```\n\n` r-tensorflow ` is the name of your virtual environment will be used by keras in R. For windows users, please make sure your Anaconda path is added to environment variable. Then open R to check whether the keras is available:\n\n```\nlibrary(keras)\nis_keras_available()\n\n[1] TRUE\n```\nFor Linux/ubuntu users, ` reticulate ` will firstly search ` ~/.virtualenvs ` for python, then to make sure your R use the python installed in your conda env, you may need to firstly setup the ` RETICULATE_PYTHON ` before library and use ` keras ` and ` DMDeepm6A `:\n\n```\nSys.setenv(RETICULATE_PYTHON = \"Path_To_conda/envs/r-tensorflow/bin/python\")\nlibrary(keras)\nis_keras_available()\n\n[1] TRUE\n```\n\n2.\tOther required Bioconductor packages\n```{r, eval=FALSE}\nif (!requireNamespace(\"BiocManager\", quietly = TRUE))    \n    install.packages(\"BiocManager\")\n\nBiocManager::install(c(\"exomePeak\", \"DESeq\", \"TxDb.Hsapiens.UCSC.hg19.knownGene\",    \n                       \"BSgenome.Hsapiens.UCSC.hg19\", \"org.Hs.eg.db\"))\n```\n\nThe \"exomePeak\" and \"DESeq\" packages are not available in Bioconductor3.10 for R>=4.0. If you are using R4.0 or above, Please install \"exomePeak\" from https://github.com/ZW-xjtlu/exomePeak. And install the \"DESeq\" package by:\n\n```{r, eval=FALSE}\n##for Linux installation\ninstall.packages(\"https://www.bioconductor.org/packages/3.11/bioc/src/contrib/DESeq_1.39.0.tar.gz\", repos = NULL, type=\"source\")\n##for Windows installation\ninstall.packages(\"https://www.bioconductor.org/packages/3.11/bioc/bin/windows/contrib/4.0/DESeq_1.39.0.zip\", repos = NULL, type=\"source\")\n```\n\n3.\tDMDeepm6A installation    \n```\nif (!requireNamespace(\"devtools\", quietly = TRUE))    \n    install.packages(\"devtools\")\n\ndevtools::install_github(\"NWPU-903PR/DMDeepm6A1.0\")\n```\n"
      },
      "source": "https://raw.githubusercontent.com/NWPU-903PR/DMDeepm6A1.0/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9339610997880186,
      "result": {
        "original_header": "DMDeepm6A1.0",
        "type": "Text_excerpt",
        "value": "Version: 1.0.6 \nDepends: exomePeak, keras, DESeq, TxDb.Hsapiens.UCSC.hg19.knownGene, BSgenome.Hsapiens.UCSC.hg19, org.Hs.eg.db \n"
      },
      "source": "https://raw.githubusercontent.com/NWPU-903PR/DMDeepm6A1.0/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/NWPU-903PR/DMDeepm6A1.0/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DMDeepm6A1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "NWPU-903PR"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 54038,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/NWPU-903PR/DMDeepm6A1.0/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 18:05:15",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "2. Toy Example diff sites calling",
        "parent_header": [
          "DMDeepm6A1.0"
        ],
        "type": "Text_excerpt",
        "value": "\\# example for default hg19 genome\n\n\\# get input bam\n\n```\nSys.setenv(RETICULATE_PYTHON = \"Path_To_conda/envs/r-tensorflow/bin/python\") ## For Linux/ubuntu\nlibrary(DMDeepm6A)\nlibrary(keras)\n\nip_bam1 <- system.file(\"extdata\", \"treated_ip1.bam\", package=\"DMDeepm6A\")  \nip_bam2 <- system.file(\"extdata\", \"treated_ip2.bam\", package=\"DMDeepm6A\")  \nip_bam3 <- system.file(\"extdata\", \"untreated_ip1.bam\", package=\"DMDeepm6A\")  \nip_bam4 <- system.file(\"extdata\", \"untreated_ip2.bam\", package=\"DMDeepm6A\")  \ninput_bam1 <- system.file(\"extdata\", \"treated_input1.bam\", package=\"DMDeepm6A\")  \ninput_bam2 <- system.file(\"extdata\", \"treated_input2.bam\", package=\"DMDeepm6A\")  \ninput_bam3 <- system.file(\"extdata\", \"untreated_input1.bam\", package=\"DMDeepm6A\")  \ninput_bam4 <- system.file(\"extdata\", \"untreated_input2.bam\", package=\"DMDeepm6A\")  \n\nip_bams <- c(ip_bam1, ip_bam2, ip_bam3, ip_bam4)  \ninput_bams <- c(input_bam1, input_bam2, input_bam3, input_bam4)  \n```\n\n\\# get sample condition\n\n```\nsample_condition <- c(\"treated\", \"treated\", \"untreated\", \"untreated\")\n```\n\n\\# get genome annotation, generally, you can leave this default if you use the default hg19 genome\n\n\\# we use a toy gtf here to make this example run faster.\n\n```\ngft_genome <- system.file(\"extdata\", \"genes.gtf\", package=\"DMDeepm6A\")\n```\n\n\\# diff peak calling\n\n```\nre <- dmdeepm6A(ip_bams = ip_bams,  \n                input_bams = input_bams,  \n                sample_conditions = sample_condition,    \n                gft_genome = gft_genome,\n                BSgenome = BSgenome.Hsapiens.UCSC.hg19,\n                egSYMBOL = org.Hs.egSYMBOL)  \n```\nPlease note that, if you are not using default hg19 genome, you need to input at least both the genome annotation (txdb or gft_genome) and sequence (BSgenome). Please see section 4 for more details.\n"
      },
      "source": "https://raw.githubusercontent.com/NWPU-903PR/DMDeepm6A1.0/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3. Toy Example m6A site calling",
        "parent_header": [
          "DMDeepm6A1.0"
        ],
        "type": "Text_excerpt",
        "value": "\\# do only peak calling for several replicates\n\n\\# get input bam\n\n```\nip_bam1 <- system.file(\"extdata\", \"treated_ip1.bam\", package=\"DMDeepm6A\")  \nip_bam2 <- system.file(\"extdata\", \"treated_ip2.bam\", package=\"DMDeepm6A\")  \ninput_bam1 <- system.file(\"extdata\", \"treated_input1.bam\", package=\"DMDeepm6A\")  \ninput_bam2 <- system.file(\"extdata\", \"treated_input2.bam\", package=\"DMDeepm6A\")  \n\nip_bams <- c(ip_bam1, ip_bam2)  \ninput_bams <- c(input_bam1, input_bam2)\n```\n\n\\# peak calling. sample_conditions should leave default (NA) or set all rep as \"untreated\".\n\n```\nre <- dmdeepm6A(ip_bams = ip_bams,  \n                input_bams = input_bams,  \n                gft_genome = gft_genome,\n                BSgenome = BSgenome.Hsapiens.UCSC.hg19,\n                egSYMBOL = org.Hs.egSYMBOL)  \n```\nPlease note that, if you are not using default hg19 genome, you need to input at least both the genome annotation (txdb or gft_genome) and sequence (BSgenome). Please see section 4 for more details.\n"
      },
      "source": "https://raw.githubusercontent.com/NWPU-903PR/DMDeepm6A1.0/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "4. Example code for other species",
        "parent_header": [
          "DMDeepm6A1.0"
        ],
        "type": "Text_excerpt",
        "value": "\\# An genome input formate example for rat rn5 genome\n\n\\# not run\n\n\\# get genome annotation\n\n```\nlibrary(TxDb.Rnorvegicus.UCSC.rn5.refGene)  \ntxdb <- TxDb.Rnorvegicus.UCSC.rn5.refGene  \n\nlibrary(BSgenome.Rnorvegicus.UCSC.rn5)  \nBSgenome <- BSgenome.Rnorvegicus.UCSC.rn5  \n```\n` BSgenome ` is necessary if the genome is not hg19. If there is no public BSgenome data package for your own genome sequence, you can forge a BSgenome data package following the instruction of \"BSgenome\" package, or input your \".fa/.fasta\" genome sequence file using readDNAStringSet function as following:\n```\nBSgenome <- readDNAStringSet(\"My_Genome_Sequence.fa\")\nnames(BSgenome) <- sub(\" .*\", \"\", names(BSgenome)) ## Please make sure the names of chrome sequences are consistent with your genome annotation and input bams. \n```\nThen input the ` egSYMBOL `, it can be set as NA, if there is no public egSYMBOL data package for your own species.\n```\nlibrary(org.Rn.eg.db)  \negSYMBOL <- org.Rn.egSYMBOL  \n```\nFinally calling differential sites with ` dmdeepm6A ` function.\n```\nsigpeak <- dmdeepm6A(ip_bam,  \n                     input_bam,  \n                     sample_conditions = sample_conditions,  \n                     default_genome = FALSE,  \n                     txdb = txdb,  \n                     BSgenome = BSgenome,  \n                     egSYMBOL = egSYMBOL)  \n```\n"
      },
      "source": "https://raw.githubusercontent.com/NWPU-903PR/DMDeepm6A1.0/master/README.md",
      "technique": "header_analysis"
    }
  ]
}