{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/wangbingbo2019/CBP-JMF"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-01-29T02:06:55Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-01-29T02:09:41Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CBP-JMF: An Improved Joint Matrix tri-Factorization Method for Characterizing Complex Biological Processes of Disease"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9794742686344705,
      "result": {
        "original_header": "Abstract",
        "type": "Text_excerpt",
        "value": "__Motivation:__ Matrix factorization techniques can integrative analysis multi-dimensional genomic data across the same samples. We present CBP-JMF, a framework for discovering complex biological processes (CBPs) that underlying sample groups. Different from existing methods, CBP-JMF is based on a de novo semi-supervised matrix tri-factorization that take labeled samples as prior information, classify the unlabeled samples, and devote to identify the underlying CBPs of groups.  \n__Methods:__ CBP-JMF factorization decomposes several **non-negative matrix X<sub>i</sub>** into three matrices: **Molecular Coefficient Matrix U<sub>i</sub>**, **Factor Absorbing W<sub>i</sub>**, **Sample Basis Matrix V**. We use euclidean distance as cost function(so it's an optimization problem) to measure the distance between X<sub>i</sub>  and reconstructed  U<sub>i</sub>W<sub>i</sub>V. Besides, we incorporate samples\u2019 label information into NMF through a graph embedding constraint and we give different input X<sub>i</sub> a unique weight to donate its contribution in optimization. Given input matrices  X<sub>i</sub> , labeled samples' subgroup and a correlation matrix of labeled samples, CBP-JMF integrate MG data (e.g., copy number variation, gene expression, microRNA expression, and/or gene network) to classify the unlabeled samples into groups and identify the underlying CBPs which characterize functional properties of each group. \n__Results:__ We evaluate CBP-JMF on breast cancer, classify unlabeled samples into four subtypes (Lumina A, Luminal B, Basal like, Her2) and  highlight characteristic heterogeneous molecular pathways driving subtypes.  \n\u200b    \n \n"
      },
      "source": "https://raw.githubusercontent.com/wangbingbo2019/CBP-JMF/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9501055559571339,
      "result": {
        "original_header": "Analysis scripts",
        "type": "Text_excerpt",
        "value": "* BRCA_example.ipynb\tRun the CBP_JMF package on BRCA's mRNA data and miRNA data.    \n"
      },
      "source": "https://raw.githubusercontent.com/wangbingbo2019/CBP-JMF/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/wangbingbo2019/CBP-JMF/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/wangbingbo2019/CBP-JMF/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "wangbingbo2019/CBP-JMF"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CBP-JMF: An Improved Joint Matrix tri-Factorization Method for Characterizing Complex Biological Processes of Disease"
      },
      "source": "https://raw.githubusercontent.com/wangbingbo2019/CBP-JMF/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9999999954877126,
      "result": {
        "original_header": "The package",
        "type": "Text_excerpt",
        "value": "* CBP_JMF.py\tThis software package contains all the functions of CBP-JMF.Users can use command line 'pip install CBP_JMF' to install or download CBP_JMF.py and import it.  \n* [__pypi.org__](https://pypi.org/project/CBP-JMF/#files) Our Package can also be downloaded here. \n"
      },
      "source": "https://raw.githubusercontent.com/wangbingbo2019/CBP-JMF/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/wangbingbo2019/CBP-JMF/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CBP-JMF"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "wangbingbo2019"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 25656,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/wangbingbo2019/CBP-JMF/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 07:36:14",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ]
}