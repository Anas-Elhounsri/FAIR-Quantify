{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/nygctech/PySeq2500"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-09-25T15:23:37Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-07-10T05:51:38Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Control an Illumina HiSeq 2500 System"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9315718615551669,
      "result": {
        "original_header": "Initializing HiSeq",
        "type": "Text_excerpt",
        "value": "Note that the `pyseq.HiSeq()` constructor accepts serial ports assignments in case your setup is different, i.e:\n```python\nhs = pyseq.HiSeq(xCOM='COM67', yCOM='COM68', fpgaCOM=['COM10', 'COM11'], laser1COM='COM12', laser2COM='COM13')\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/nygctech/PySeq2500/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9652383895362163,
      "result": {
        "original_header": "Image acquisition",
        "type": "Text_excerpt",
        "value": "The following code takes a picture from each of the cameras, splits each image into 2, saves all 4 images as tiffs, and writes a metadata textfile.\nImages and metafile are saved in the directory set in `hs.image_path`.\n```python\n# Image destination path\nhs.image_path = 'C:\\\\Users\\\\Public\\\\Documents\\\\PySeq2500\\\\Images\\\\'\n\n# Take an image\nhs.take_picture(32, 128) # take_picture(# frames, bundle height, image_name)\n```\n \nNames of the images are `hs.cam1.left_emission + image_name`. The name of the metafile is just `image_name`. The `image_name`\nargument is optional, if not used it defaults to a time stamp. \nCurrently all of the image prefixes (`camN.L/R_emission`) are set to the emission wavelength in `hs.InitializeCams()` \nThe images are `# frames` x `bundle height` rows of pixels (length of scan) and 2048 columns of pixels.\nChanging the `# frames` is the best way to change the length of the scan.\nOnly certain values are acceptable for the bundle height, the default, which Illumina uses, is 128. \n"
      },
      "source": "https://raw.githubusercontent.com/nygctech/PySeq2500/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.925678913059519,
      "result": {
        "original_header": "Moving the stage",
        "type": "Text_excerpt",
        "value": "```python\n# Positioning the stage\n# Currently all of the stages move to absolute positions that are defined in steps\nhs.y.move(Y)         # Y should be between -7000000 and 7500000\nhs.x.move(X)         # X should be between 1000 and 50000\nhs.z.move([Z, Z, Z]) # Z should be between 0 and 25000\n\nhs.obj.move(31000)   # Objective should be between 0 and 65000\n``` \nTo move the stage out to load slides onto it is `hs.move_stage_out()`. \nDuring `hs.intializeInstruments()`, the staged is homed to **Y=0, X=30000, Z=0, and O=30000** (although there is no homing for the objective).\n \n"
      },
      "source": "https://raw.githubusercontent.com/nygctech/PySeq2500/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8179276617608912,
      "result": {
        "original_header": "Method Config",
        "type": "Text_excerpt",
        "value": "Useful if running the same method repeatedly and only some of the ports change from each experiment.\n- N: port number (integer)\n- Name: name of reagent (string)\n```\n[valve24]\n1 = PBS\n2 = water\n3 = elution\n4 = blocking\n5 = imaging\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/nygctech/PySeq2500/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://pyseq2500.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/nygctech/PySeq2500/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/nygctech/PySeq2500/wiki"
      },
      "source": "https://raw.githubusercontent.com/nygctech/PySeq2500/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/nygctech/PySeq2500/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 11
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/nygctech/PySeq2500/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "nygctech/PySeq2500"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PySeq2500"
      },
      "source": "https://raw.githubusercontent.com/nygctech/PySeq2500/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "PC Specs",
        "parent_header": [
          "Installation",
          "Requirements"
        ],
        "type": "Text_excerpt",
        "value": "- Windows 7 64 bit\n- Dual Intel Xeon CPU 2.00 GHx\n- 64 GB RAM\n- Active Silicon Phoenix Camera Link Frame Grabbers (D48CL PE4)\n\nNewer operating systems have not been tried yet because the [drivers](https://dcam-api.com/downloads/#archive) for the cameras/frame grabber are not compatible.\n"
      },
      "source": "https://raw.githubusercontent.com/nygctech/PySeq2500/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "PySeq2500 Installation",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "```\npip install pyseq2500\n\npip remove qtpy\n\npip install qtpy==1.11.2\n\npip install pyqt5==5.15.4\n```\n"
      },
      "source": "https://raw.githubusercontent.com/nygctech/PySeq2500/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Verify Installation",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "```\npyseq -h\n\nusage: pyseq [-h] [-config PATH] [-name NAME] [-output PATH] [-list]\n             [-method METHOD] [-virtual] [-settings] [-ports] [-diagnostics]\n\noptional arguments:\n  -h, --help      show this help message and exit\n  -config PATH    path to config file\n  -name NAME      experiment name\n  -output PATH    directory to save data\n  -list           list installed methods\n  -method METHOD  print method details\n  -virtual        use virtual HiSeq\n  -settings       print optional HiSeq settings\n  -ports          view com ports\n  -diagnostics    perform a diagnostics run\n```\n"
      },
      "source": "https://raw.githubusercontent.com/nygctech/PySeq2500/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Issues",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "PySeq2500 relies on napari for manual focusing and displaying images with the\nimage analysis module. However the dependencies for napari do not get installed\ncorrectly so there are some additional pip install commands.\n"
      },
      "source": "https://raw.githubusercontent.com/nygctech/PySeq2500/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Basic setup of HiSeq",
        "type": "Text_excerpt",
        "value": "```python\nhs.lasers['green'].set_power(100)   #Set green laser power to 100 mW\nhs.lasers['red'].set_power(100)     #Set red laser power to 100 mW\n\nhs.y.move(-180000)                  #Move stage to top right corner of Flow Cell A\nhs.x.move(17571)\nhs.z.move([21250, 21250, 21250])    #Raise z stage\n\nhs.obj.move(30000)                  #Move objective to middle-ish\n\nhs.move_ex('green','open')                #Move excitation filter 1 to open position\nhs.move_ex('red','open')                #Move excitation filter 2 to open position\n\nhs.lasers['green'].get_power()      #Get green laser power (mW i think)\nhs.lasers['red'].get_power()        #Get red laser power   (mW i think)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/nygctech/PySeq2500/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Setting up optics",
        "type": "Text_excerpt",
        "value": "Before taking a picture, the laser power should be set, the excitation filters should be set, and the emission filter should be in the light path.\n"
      },
      "source": "https://raw.githubusercontent.com/nygctech/PySeq2500/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Lasers",
        "parent_header": [
          "Setting up optics"
        ],
        "type": "Text_excerpt",
        "value": "```python\nhs.lasers['green'].set_power(100)  # sets laser 1 (green) to 100 mW\nhs.lasers['red'].set_power(100)    # sets laser 2 (red) to 100 mW\n\nhs.lasers['green'].get_power()     # returns the power of laser 1 and stores it in hs.lasers['green'].power\nhs.lasers['red'].get_power()       # returns the power of laser 2 and stores it in hs.lasers['red'].power\n```\n\nDuring `hs.initializeInstruments()`, both lasers are set to 10 mW\n"
      },
      "source": "https://raw.githubusercontent.com/nygctech/PySeq2500/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Filters",
        "parent_header": [
          "Setting up optics"
        ],
        "type": "Text_excerpt",
        "value": "During `hs.initializeInstruments()`, the excitation filters are homed to the block position and the emission filter is moved into the light path.\n\n```python\nhs.optics.move_ex(color, filter)\t\t #  moves the excitation filter wheel in the color ('green' or 'red') light path to the filter.\nhs.optics.ex_dict \t\t\t\t\t      # stores the positions and names of the filters in a dictionary\nhs.optics.move_em_in(True/False) \t# \"True\" moves the emission filter into the light path, False moves it out.\n```\n"
      },
      "source": "https://raw.githubusercontent.com/nygctech/PySeq2500/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "See installed methods",
        "parent_header": [
          "Run an automated experiment"
        ],
        "type": "Text_excerpt",
        "value": "```\npyseq -l\n```\n"
      },
      "source": "https://raw.githubusercontent.com/nygctech/PySeq2500/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "See an installed method config and method recipe",
        "parent_header": [
          "Run an automated experiment"
        ],
        "type": "Text_excerpt",
        "value": "The example here is to see the config and recipe for a method called 4i.\n```\npyseq -m 4i\n```\n"
      },
      "source": "https://raw.githubusercontent.com/nygctech/PySeq2500/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9738810480085242,
      "result": {
        "original_header": "Initializing HiSeq",
        "type": "Text_excerpt",
        "value": "Note that the `pyseq.HiSeq()` constructor accepts serial ports assignments in case your setup is different, i.e:\n```python\nhs = pyseq.HiSeq(xCOM='COM67', yCOM='COM68', fpgaCOM=['COM10', 'COM11'], laser1COM='COM12', laser2COM='COM13')\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/nygctech/PySeq2500/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8997617320482194,
      "result": {
        "original_header": "Automate a method/recipe on a HiSeq2500",
        "type": "Text_excerpt",
        "value": "The following files are necessary to automate a method on a HiSeq 2500 System.\n 1. experiment config\n 1. method recipe\n 1. method config (optional)\n \n"
      },
      "source": "https://raw.githubusercontent.com/nygctech/PySeq2500/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8671769270005517,
      "result": {
        "original_header": "[`method name`]",
        "type": "Text_excerpt",
        "value": "See **Method Config** below for details.\n \n"
      },
      "source": "https://raw.githubusercontent.com/nygctech/PySeq2500/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9697700148481451,
      "result": {
        "original_header": "Method Config",
        "type": "Text_excerpt",
        "value": "### [reagents]\nSpecify method required ports (optional). \n"
      },
      "source": "https://raw.githubusercontent.com/nygctech/PySeq2500/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/nygctech/PySeq2500/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PySeq2500"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "nygctech"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 492333,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Batchfile",
        "size": 3078,
        "type": "Programming_language",
        "value": "Batchfile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 719,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nygctech/PySeq2500/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirements",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "PySeq2500 has only been tested on PCs that were previously used to control the HiSeq2500s with the Illumina Control Software.\n"
      },
      "source": "https://raw.githubusercontent.com/nygctech/PySeq2500/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "PC Specs",
        "parent_header": [
          "Installation",
          "Requirements"
        ],
        "type": "Text_excerpt",
        "value": "- Windows 7 64 bit\n- Dual Intel Xeon CPU 2.00 GHx\n- 64 GB RAM\n- Active Silicon Phoenix Camera Link Frame Grabbers (D48CL PE4)\n\nNewer operating systems have not been tried yet because the [drivers](https://dcam-api.com/downloads/#archive) for the cameras/frame grabber are not compatible.\n"
      },
      "source": "https://raw.githubusercontent.com/nygctech/PySeq2500/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Software Requirements",
        "parent_header": [
          "Installation",
          "Requirements"
        ],
        "type": "Text_excerpt",
        "value": "- Windows 7\n- Python 3.7\n- compiler such as Build Tools for Visual Studio 2019 (version 16.11)\n"
      },
      "source": "https://raw.githubusercontent.com/nygctech/PySeq2500/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Run an automated experiment",
        "type": "Text_excerpt",
        "value": "Start a method on a HiSeq2500 System from the command line.\nAll arguments are optional.\n```\nusage: pyseq [-h] [-config PATH] [-name NAME] [-output PATH] [-list]\n             [-method METHOD] [-virtual]\n```\n- **h**: **See usage of pyseq**\n- **config**: path to the configuration file, default is config.cfg in the current working directory\n- **name**: name of the experiment, default is a YYYYMMDD_HHMMSS time stamp.\n- **output**: path to the output directory to save images and logs, default is the current working directory\n- **list**: **See installed methods**\n- **method**: **See an installed method config and method recipe**\n- **virtual**: **Run a virtual experiment**\n- **settings**: **See available configuration options**\n- **ports**: **List COM port identifier of instruments**\n- **diagnostics**: **Perform a simple diagnostics run**\n"
      },
      "source": "https://raw.githubusercontent.com/nygctech/PySeq2500/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Run an experiment",
        "parent_header": [
          "Run an automated experiment"
        ],
        "type": "Text_excerpt",
        "value": "Assumes an experiment file, config.cfg, is in the current working directory.\n```\npyseq -n MyFirstHiSeqExperiment\n```\n"
      },
      "source": "https://raw.githubusercontent.com/nygctech/PySeq2500/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Run a virtual experiment",
        "parent_header": [
          "Run an automated experiment"
        ],
        "type": "Text_excerpt",
        "value": "Assumes an experiment file, config.cfg, is in the current working directory.\nUseful for building and testing new methods.\n```\npyseq -n TestCustomExperiment -v\n```\n"
      },
      "source": "https://raw.githubusercontent.com/nygctech/PySeq2500/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 03:16:03",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 18
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "See usage of pyseq",
        "parent_header": [
          "Run an automated experiment"
        ],
        "type": "Text_excerpt",
        "value": "```\npyseq -h, --help\n```\n"
      },
      "source": "https://raw.githubusercontent.com/nygctech/PySeq2500/master/README.md",
      "technique": "header_analysis"
    }
  ]
}