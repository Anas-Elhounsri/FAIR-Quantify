{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ImperialCardioGenetics/UTRannotator"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-05-16T19:34:16Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-01T17:05:29Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "VEP Plugin to annotate high-impact five prime UTR variants"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9327490340156984,
      "result": {
        "original_header": "Update on Aug 2024",
        "type": "Text_excerpt",
        "value": "To apply the plugin with the newest version of VEP, please use the plugin version provided by Ensembl (as the compatibility is maintained by Ensembl now): https://github.com/Ensembl/VEP_plugins/blob/release/112/UTRAnnotator.pm.  \nThis repository is an archive for the original version.   \n  \nCurrently, it will annotate whether a small variation (1-5bp) including SNVs, indels and MNVs in 5'UTR would have any of the following molecular consequences:   \nThe annotation output is transcript-specific not restricted to canonical transcript. \nThe plugin is applicable to annotate 5'UTR in eukaroyotes.   \n"
      },
      "source": "https://raw.githubusercontent.com/ImperialCardioGenetics/UTRannotator/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9595181460030632,
      "result": {
        "original_header": "Background",
        "type": "Text_excerpt",
        "value": " [Background](#background)\n \n [Requirements](#requirements)\n \n [Installation](#installation)\n \n [Usage](#usage)\n \n [Translated small ORF files](#translated-small-orf-files)\n \n [Annotation output](#annotation-output)\n \n [Caveats](#caveats)\n \n# Background \n  \nAbout the role of 5'UTR variants in human genetic disease:  \n"
      },
      "source": "https://raw.githubusercontent.com/ImperialCardioGenetics/UTRannotator/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.908325040010856,
      "result": {
        "original_header": "Annotation Output",
        "type": "Text_excerpt",
        "value": "**Field 2 - existing_OutOfFrame_oORFs** : The number of existing out-of-frame overlapping ORFs (OutOfFrame_oORF) already within the 5 prime UTR  \nIf this 5'UTR is uORF-perturbing, the plugin will output the consequence and detailed annotation of each consequence. Otherwise it will output `-` :    \nIf a 5'UTR variant perturbs multiple uORFs, the annotation of each uORF will be concatenated with a logical and symbol `&` for fields **five_prime_UTR_variant_consequence** and **five_prime_UTR_variant_annotation**. \n \n"
      },
      "source": "https://raw.githubusercontent.com/ImperialCardioGenetics/UTRannotator/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9454609059690012,
      "result": {
        "original_header": "uAUG gained",
        "type": "Text_excerpt",
        "value": "| Annotations              | Data type | Description                                                                                                                                     |\n|--------------------------|-----------|-------------------------------------------------------------------------------------------------------------------------------------------------|\n| uAUG_gained_type            | String    | The type of of 5\u2019 UTR ORF created, described by one of the following: uORF(with a stop codon in 5\u2019UTR), inframe_oORF (inframe and overlapping  with CDS),OutOfFrame_oORF (out of frame and overlapping with CDS)   |\n| uAUG_gained_KozakContext    | String    | The Kozak context sequence of the gained uAUG                                                                                                                                                                      |\n| uAUG_gained_KozakStrength   | String    | The Kozak strength of the gained uAUG, described by one of the following values: Weak, Moderate or Strong.                                                                                                           |\n| uAUG_gained_DistanceToCDS   | Integer   | The distance (number of nucleotides) between the gained  uAUG to CDS                                                                                                                                               |\n| uAUG_gained_CapDistanceToStart | Integer   | The distance (number of nucleotides) between the gained uAUG to the start of 5\u2019UTR                                                                                                                                 |\n| uAUG_gained_DistanceToSTOP  | Integer   | The distance (number of nucleotides) between the gained uAUG to STOP codon (scanning through both the 5\u2019UTR and its downstream CDS). If there is no STOP codon found, it would output NA.                          |\n \n"
      },
      "source": "https://raw.githubusercontent.com/ImperialCardioGenetics/UTRannotator/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8481400232470058,
      "result": {
        "original_header": "uFrameShift",
        "type": "Text_excerpt",
        "value": "| Annotations                     | Data type | Description                                                                                                        |\n|---------------------------------|-----------|--------------------------------------------------------------------------------------------------------------------|\n| uFrameshift_ref_type            | String    | The type of uORF with the reference allele, described by one of following: uORF, inframe_oORF or OutOfFrame_oORF   |\n| uFrameshift_ref_type_length | Integer | The length of uORF with the reference allele. Output NA if there is no stop codon. |\n| uFrameshift_StartDistanceToCDS  | Integer   | The distance between the start codon of the disrupting uORF and CDS                                                |\n| uFrameshift_alt_type            | String    | The type of uORF with the alternative allele, described by one of following: uORF, inframe_oORF or OutOfFrame_oORF |\n| uFrameshift_alt_type_length | Integer | The length of uORF with the alt allele. Output NA if there is no stop codon. |\n| uFrameshift_KozakContext        | String    | The Kozak context sequence of the disrupted uORF                                                                   |\n| uFrameshift_KozakStrength       | String    | The Kozak strength of the disrupted uORF, described by one of the following values: Weak, Moderate or Strong.        |\n| uFrameshift_evidence            | Boolean   | Whether the disrupted uORF has any translation evidence. Output NA if no evidence file provided                                                          | \n"
      },
      "source": "https://raw.githubusercontent.com/ImperialCardioGenetics/UTRannotator/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ImperialCardioGenetics/UTRannotator/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ImperialCardioGenetics/UTRannotator/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ImperialCardioGenetics/UTRannotator"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "UTRannotator"
      },
      "source": "https://raw.githubusercontent.com/ImperialCardioGenetics/UTRannotator/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "To use the plugin with VEP, you would need to add the plugin module in Perl's library path. To do this, you could either:   \n  \n(1) download all the files of this repository to the VEP default path `$HOME/.vep/Plugins` or  \n  \n(2) download the repository and add its path to environment variable `$PERL5LIB`.   \n  \ne.g. Add this line `export PERL5LIB=$PERL5LIB:/path/to/UTRannotator` to `~/.bash_profile`.  \n  "
      },
      "source": "https://raw.githubusercontent.com/ImperialCardioGenetics/UTRannotator/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9999998254991606,
      "result": {
        "original_header": "Update on Aug 2024",
        "type": "Text_excerpt",
        "value": "To apply the plugin with the newest version of VEP, please use the plugin version provided by Ensembl (as the compatibility is maintained by Ensembl now): https://github.com/Ensembl/VEP_plugins/blob/release/112/UTRAnnotator.pm.  \n"
      },
      "source": "https://raw.githubusercontent.com/ImperialCardioGenetics/UTRannotator/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ImperialCardioGenetics/UTRannotator/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "The MIT License (MIT)\n\nCopyright (c) 2020, Xiaolei Zhang, Matthew Wakeling, James Ware and Nicola Whiffin\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE."
      },
      "source": "https://raw.githubusercontent.com/ImperialCardioGenetics/UTRannotator/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "UTRannotator"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "ImperialCardioGenetics"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 53625,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 49480,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 487,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ImperialCardioGenetics/UTRannotator/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirements",
        "type": "Text_excerpt",
        "value": "- VEP (tested on release-99/202001 and release-100/202005)  \n- PERL (tested on version 5.26.2)  \n  "
      },
      "source": "https://raw.githubusercontent.com/ImperialCardioGenetics/UTRannotator/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 15:47:09",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 24
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "type": "Text_excerpt",
        "value": "A written document can be found in this [tutorial](https://github.com/ImperialCardioGenetics/UTRannotator/blob/master/Supplementary_Information.pdf). \n  "
      },
      "source": "https://raw.githubusercontent.com/ImperialCardioGenetics/UTRannotator/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Basic Usage",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "  \nTo run the plugin with VEP, you could the following command line:    \n  \n`vep -i test.vcf --tab -plugin UTRannotator -o test.output`  \n\nIf you are using offline version of VEP, it is essential to use reference genome. \n\n`vep -i test.vcf --cache --assembly GRCh38 --fasta /path/to/GRCh38.fa --offline --plugin UTRannotator -o test.output`\n\n\nNote, it's necessary to add option `--minimal` to transform the alleles into minimal representations if it hasn't been transformed beforehand, especially for variants represented with rs IDs from dbSNP.   \n  "
      },
      "source": "https://raw.githubusercontent.com/ImperialCardioGenetics/UTRannotator/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Output format",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Currently, the output format supports [default VEP output format](https://www.ensembl.org/info/docs/tools/vep/vep_formats.html#defaultout), [tab-delimited output](https://www.ensembl.org/info/docs/tools/vep/vep_formats.html#tab) and [VCF output](https://www.ensembl.org/info/docs/tools/vep/vep_formats.html#vcfout). \n\nIf a variant disrupts multiple uORFs, we will output the annotation for each uORF. The output for each uORF will be concatenated with a logical and symbol `&`; \n"
      },
      "source": "https://raw.githubusercontent.com/ImperialCardioGenetics/UTRannotator/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Optional Usage",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "  \nThe plugin could also check whether an input variant disrupts a verified translated uORF.  \n  \nTo use this option, users would pass an evidence file of a list of verified translated uORFs as input.   \n  "
      },
      "source": "https://raw.githubusercontent.com/ImperialCardioGenetics/UTRannotator/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Human (GRCh37/GRCh38)",
        "parent_header": [
          "Usage",
          "Optional Usage",
          "Translated small ORF files"
        ],
        "type": "Text_excerpt",
        "value": "For translated small ORFs in human, we have curated a list of uORFs previously identified with ribosome profiling from the online repository of small ORFs (www.sorfs.org)  \n  \nThis list is available in the repository:   \n  \nGenome build GRCh37: `uORF_5UTR_GRCh37_PUBLIC.txt`  \n  \nGenome build GRCh38: `uORF_5UTR_GRCh38_PUBLIC.txt`  \n\nThe command to use the file is \n\n`vep -i test.vcf --tab -plugin UTRannotator,/path/to/uORF_5UTR_GRCh37_PUBLIC.txt -o test.output`\n  \nTo use a customized list of translated uORF, users would curate a tab-delimited txt file with the following columns:  \n  \nFor example:  \n  \n`CHR    START_POS GENE    STRAND  TYPE    STOP_POS`  \n  \n`19  45971469    FOSB    forward five_prime_utr  45971714`  \n\n`START_POS` and `STOP_POS` are the start genomic position and end genomics position of a small ORF respectively. \n\n\nThe following list is a collection of curated translated small ORF files for other species: \n"
      },
      "source": "https://raw.githubusercontent.com/ImperialCardioGenetics/UTRannotator/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Mouse(mm10)",
        "parent_header": [
          "Usage",
          "Optional Usage",
          "Translated small ORF files"
        ],
        "type": "Text_excerpt",
        "value": "https://github.com/AhmedArslan/orf_mm10 curated by Ahmed Arslan from www.sorfs.org.   \n\n"
      },
      "source": "https://raw.githubusercontent.com/ImperialCardioGenetics/UTRannotator/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example output (default VEP output)",
        "parent_header": [
          "Annotation Output"
        ],
        "type": "Text_excerpt",
        "value": "\n`#Uploaded_variation     Location        Allele  Gene    Feature Feature_type    Consequence     cDNA_position   CDS_position    Protein_position        Amino_acids     Codons  Existing_variation      Extra`\n\n`5_36877039_CC/A 5:36877039-36877040     A       25836   NM_015384.5     Transcript      5_prime_UTR_variant     169-170 -       -       -\n       -       -       IMPACT=MODIFIER;STRAND=1;REFSEQ_MATCH=rseq_mrna_match;existing_InFrame_oORFs=0;existing_OutOfFrame_oORFs=0;existing_uORFs=5;five_prime_UTR_variant_annotation=uFrameShift_Evidence:False,uFrameShift_KozakContext:GCGATGC,uFrameShift_KozakStrength:Moderate,uFrameShift_alt_type:uORF,uFrameShift_alt_type_length:189,uFrameShift_ref_StartDistanceToCDS:324,uFrameShift_ref_type:uORF,uFrameShift_ref_type_length:15;five_prime_UTR_variant_consequence=uFrameShift`\n\n  "
      },
      "source": "https://raw.githubusercontent.com/ImperialCardioGenetics/UTRannotator/master/README.md",
      "technique": "header_analysis"
    }
  ]
}