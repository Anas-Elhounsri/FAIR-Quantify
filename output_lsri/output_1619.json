{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ramics/HIVIntact"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-06-14T11:42:40Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-04-22T09:35:03Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A proviral intactness pipeline."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9019758019047477,
      "result": {
        "original_header": "git flow",
        "type": "Text_excerpt",
        "value": "We're using `git flow` for this project. The package `git-flow` can be installed on most OSes. To get started, go to the `provirus-pipeline` repo on your machine and type:\n```\ngit flow init\n```\nPress enter until you hit the command line again. Then, to develop a feature, say the ability to detect long deletions, type:\n```\ngit flow feature start long-deletions\n```\nYou'll now be on a feature branch. If you'd like other people to collborate on your feature branch, you'll need to publish it.  Type:\n```\ngit flow feature publish long-deletions\n```\nHack away until you're satisfied, then type:\n```\ngit flow feature finish long-deletions\n```\n \nFollow the instructions, and this will merge your feature into develop.  You can then `git push` to develop, and your feature will be included in the next release.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ramics/HIVIntact/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9004319196045459,
      "result": {
        "original_header": "Releases",
        "type": "Text_excerpt",
        "value": "A release is a merge to master.  The `master` branch of this github repo is blocked with a review guard, meaning before you merge `develop` into `master`, you need to open a **pull request** on github from `develop` into `master` and get it reviewed by another contributor.  This is to keep code quality high. \nPlease bump at least the minor version in `setup.py` with every release.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ramics/HIVIntact/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ramics/HIVIntact/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ramics/HIVIntact/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ramics/HIVIntact"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "HIVIntact"
      },
      "source": "https://raw.githubusercontent.com/ramics/HIVIntact/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation instructions",
        "type": "Text_excerpt",
        "value": "The pipeline is written in Python 3. The below installation instructions assume that Python 3 is already present on the system. If not, it can be installed via a package manager, e.g. for Debian-based systems:\n\n```\nsudo apt install python3\n```\n\nor for RedHat-based systems:\n\n```\nsudo yum install python3\n```\n\nor for Macintosh-based systems:\n\n```\nsudo port install python3\n```\n\nInstallation on Windows systems is not recommended.\n\nIn addition, for local installations, `pip` and `virtualenv` are also required, and can be installed using the commands listed above.\n\nFinally, the pipeline requires that the MAFFT multiple sequence aligner be installed. Again, one of:\n\n```\nsudo apt install mafft\nsudo yum install mafft\nsudo port install mafft\n```\n\ndepending on your operating system, should get you there.\n"
      },
      "source": "https://raw.githubusercontent.com/ramics/HIVIntact/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Local install (recommended)",
        "parent_header": [
          "Installation instructions"
        ],
        "type": "Text_excerpt",
        "value": "Install with:\n\n```\ngit clone --recurse-submodules git@github.com:ramics/intactness-pipeline\ncd intactness-pipeline\nvirtualenv -p python3 env\nenv/bin/pip install .\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ramics/HIVIntact/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Global install",
        "parent_header": [
          "Installation instructions"
        ],
        "type": "Text_excerpt",
        "value": "Install with:\n\n```\ngit clone --recurse-submodules git@github.com/ramics/intactness-pipeline\ncd intactness-pipeline\npython3 setup.py build\nsudo python3 setup.py install\n```\n\nWhichever way you choose to install, you'll get a number of warnings if tools needed by the pipeline or one of its dependencies aren't in your path, along with links to download and install those dependencies. \n"
      },
      "source": "https://raw.githubusercontent.com/ramics/HIVIntact/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9999968747474979,
      "result": {
        "original_header": "git flow",
        "type": "Text_excerpt",
        "value": "We're using `git flow` for this project. The package `git-flow` can be installed on most OSes. To get started, go to the `provirus-pipeline` repo on your machine and type:\n```\ngit flow init\n```\nPress enter until you hit the command line again. Then, to develop a feature, say the ability to detect long deletions, type:\n```\ngit flow feature start long-deletions\n```\nYou'll now be on a feature branch. If you'd like other people to collborate on your feature branch, you'll need to publish it.  Type:\n```\ngit flow feature publish long-deletions\n```\nHack away until you're satisfied, then type:\n```\ngit flow feature finish long-deletions\n```\n \nFollow the instructions, and this will merge your feature into develop.  You can then `git push` to develop, and your feature will be included in the next release.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ramics/HIVIntact/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.998793231950746,
      "result": {
        "original_header": "Releases",
        "type": "Text_excerpt",
        "value": "A release is a merge to master.  The `master` branch of this github repo is blocked with a review guard, meaning before you merge `develop` into `master`, you need to open a **pull request** on github from `develop` into `master` and get it reviewed by another contributor.  This is to keep code quality high. \nPlease bump at least the minor version in `setup.py` with every release.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ramics/HIVIntact/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999999999987352,
      "result": {
        "original_header": "Other tips",
        "type": "Text_excerpt",
        "value": "To reinstall locally without reinstalling dependencies or bumping the version, run:\n```\nenv/bin/pip install --force-reinstall --no-deps --upgrade .\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/ramics/HIVIntact/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ramics/HIVIntact/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "HIVIntact"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "ramics"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 38718,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ramics/HIVIntact/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running the pipeline",
        "type": "Text_excerpt",
        "value": "If you've installed locally, you need to activate the Python environment by running `source env/bin/activate`.\n\nThen run on a set of FASTA sequences with:\n\n```\nproviral intact --subtype B sequences.fasta\n```\n\nSee help (including how to switch various intactness tests on and off) at:\n\n```\nproviral intact --help\n```\n\nCurrently available subtypes can be seen by listing the `util/subtype_alignments` folder.\n\nThis will return four files:\n\n* `intact.fasta`: all consensus sequences considered to be intact.\n* `nonintact.fasta`: all consensus sequences not considered to be intact.\n* `orfs.json`: locations of ORFs in all sequences.\n* `errors.json`: a JSON dump of the reasons why some sequences were considered not intact.\n"
      },
      "source": "https://raw.githubusercontent.com/ramics/HIVIntact/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 05:38:42",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 9
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ]
}