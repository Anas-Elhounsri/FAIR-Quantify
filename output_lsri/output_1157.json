{
  "application_domain": [
    {
      "confidence": 19.5,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/hallz/massPix"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2017-04-10T16:11:24Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-04-15T06:25:47Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Brief introduction",
        "parent_header": [
          "massPix"
        ],
        "type": "Text_excerpt",
        "value": "massPix is run from the R scripting interface (function: massPix), however a detailed knowledge of R is not required to install and use the software. Those with advanced knowledge of R programming can adapt the source code. massPix outputs high quality images, a dataframe of the final normalised and annotated image which can be further manipulated in R, and csv files for spectra corresponding to cluster centers, PCA loadings, and lipid annotations. The massPix R package (\"massPix_1.2.tar.gz\"), all R scripts (wrapper, and individual functions), library files (for creating the lipid database for annotations) and the imzML Converter are available here. A more detailed step-by-step presentation on software use (\"massPix_quickstart.pptx\") and instructions on file conversion (\"raw_to_imzML_quickstart.pptx\") are also available here. Test data (.ibd and .imzML files) is available on the MetaboLights repository (accession number MTBLS487; https://www.ebi.ac.uk/metabolights/MTBLS487). \n\nThe overall data processing workflow consists of initial data pre-processing, filtering, image subsetting, deisotoping, annotation, normalisation, scaling, image \u201cslicing\u201d and multivariate statistics. Data in imzML format is parsed to R. Ions with intensities greater than a threshold, from each spectra, are extracted and grouped to user-adjustable mass bins (function: mzextractor). Spectral features are defined by the median m/z value in each bin, and only features detected above a threshold proportion of spectra are retained (function: peakpicker.bin). Average intensities for all features from a random subset of pixels are computed and used to perform deisotoping (function: subsetImage). The deisotoping algorithm identifies the molecular ion (M) and removes isotopes at m/z (M+1) and (M+2) which are within a calculated proportion of the intensity of M (function: filtered and deisotope). \n\nPutative lipid annotation by accurate mass is achieved by searching deisotoped ions against a generated library of lipid m/z ratios computed for all combinations of common fatty acids, lipid head-groups and anticipated adducts in each ionisation mode (functions: makelibrary and annotate). The criteria for a match can be adjusted according to different MS performance capabilities. Lipid classes searched in positive ion mode are diacylglycerides (DAG), triacylglycerides (TAG), phosphatidylcholines (PC), phosphatidylethanolamines (PE), phosphatidylserines (PS), LysoPC, cholesteryl esters (CE), sphingomyelins (SM) and ceramides (Cer). In negative ion mode, lipid classes searched are PC, phosphatidic acid (PA), PE, PS, phosphatidylglycerols (PG), phosphatidylinositols (PI), and free fatty acids (FFA). Whilst this list is not exhaustive, it does cover the most common lipid classes. Possible adducts considered are [M+K]+, [M+H]+, [M+Na]+, [M+NH4]+ in positive ion mode and [M\u2013H]-, [M+Cl]-, [M+OAc]- in negative ion mode. It is important to point out that a database hit based on accurate mass should only be considered the first step in metabolite identification, and confirmation carried out using MS/MS is required, where this appropriate. \n\nmassPix has the further capability to perform difference matching on deisotoped features to search for mass differences associated with measurement-introduced alternation (e.g. loss of headgroup, loss of water) or biological modifications (e.g. oxidation). The final image is constructed, based on all pixels (function: constructImage). Ion intensities are then normalised either to the median or total ion count, or to the average intensity of a set of standard ions (function: normalise). Single ion images can be produced (function: imageSlice) , or normalised intensities used to create multivariate statistical images based on k-means clustering (function: cluster) or PCA following centering and Pareto scaling (function: centreScale and imagePca). The analysis can be readily customised by replacing default parameters for filtering, normalisation and scaling, library composition, lipid assignment and image reporting.\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/hallz/massPix/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9640280675571936,
      "result": {
        "original_header": "massPix",
        "type": "Text_excerpt",
        "value": "This is the initial README file for the massPix repository.  \nmassPix processes high resolution mass spectrometry imaging data, performs multivariate statistics (PCA, clustering) and lipid identification. \nmassPix is an R package which can be called by a single function using \"processing_script.R\". Currently massPix processes one file at a time. massPix supports .imzML files - if your files are not currently in this format see instructions on on converting raw data files to imzML format (\"raw_to_imzML_quickstart.pptx\"). \n"
      },
      "source": "https://raw.githubusercontent.com/hallz/massPix/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9819316661438736,
      "result": {
        "original_header": "Notes",
        "type": "Text_excerpt",
        "value": "The latest version of imzMLConverter can also be downloaded from http://www.cs.bham.ac.uk/~ibs/imzMLConverter/# (Race et al, J Proteomics, 2012)  - ensure this is saved in massPix master folder, where the \"data/\" and \"libraries/\" folders are located. Ensure folder name is \"imzMLConverter/\". \nTest data is comprised of two files: test_POS.idb and test_POS.imzML file. These are available to download on MetaboLights repository (study ID MTBLS487; https://www.ebi.ac.uk/metabolights/MTBLS487)  \nKeep both .imzML and .ibd data files together in the \"data/\" folder.  \n"
      },
      "source": "https://raw.githubusercontent.com/hallz/massPix/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9932363700158434,
      "result": {
        "original_header": "massPix Step-by-Step",
        "type": "Text_excerpt",
        "value": "For troubleshooting and/or adapting the source code.\n```\n\n############################  massPix step by step ##################################################\n\n\n######## setting up directories #####\n\n## Set your working directory and ensure this has three folders:\n## 1. \"libraries\" with the library files inside\n## 2. \"data\" with your data file to be processed inside: this should be two files (.imzML and .ibd)\n## 3. \"imzMLConverter\" with the imzML converter subfolders and files inside\n## \n\nlibrary(massPix)\n\nhome_dir <- paste(getwd(), \"/\", sep=\"\") \nlib_dir <- paste(home_dir,\"libraries\",sep=\"\") # library files\nspectra_dir <-  paste(home_dir,\"data\",sep=\"\") # spectra files\nimzMLparse <- paste(home_dir,\"imzMLConverter/imzMLConverter.jar\",sep=\"\") # imzML converter\n\n\n##### setting parameters #####\n\n  # some important general settings\n  ionisation_mode = \"positive\"\n  thres.int = 100000\n  thres.low = 200\n  thres.high = 1000\n  bin.ppm = 10\n  thres.filter = 11\n  ppm.annotate = 10\n  res.spatial = 50\n  \n  # settings for PCA, clustering and ion slicing \n  PCnum = 5\n  row = 12\n  cluster.type = \"kmeans\"\n  clusters = 5\n  \n  # settings for deisotoping\n  ppm = 3\n  no_isotopes = 2\n  prop.1 = 0.9\n  prop.2 = 0.5\n  \n  # some general settings which can probably be left as they are\n  search.mod = T\n  mod = c(NL = T, label = F, oxidised = F, desat = F)\n  fixed = F\n  percentage.deiso = 3\n  steps = seq(0, 1, 0.05)\n  norm.type = \"TIC\"\n  standards = NULL\n  scale.type = \"cs\"\n  transform = F\n  scale = 100\n  nlevels = 50\n  name = \"\"\n  subname = \"\"\n  rem.outliers = \"only\"\n  summary = T\n  title = T\n  offset=4\n\n####################################################################################################################\n\n\n########## massPix function broken down into composite functions ################\n\n\n## read and process very large files\n\n  options(java.parameters = \"Xmx4g\")\n\n  library(rJava)\n\n  \n  ## read in library files\n\n  setwd(lib_dir)\n  read <- read.csv('lib_FA.csv', sep=\",\", header=T);lookup_FA <- read[,2:4]; row.names(lookup_FA) <- read[,1]\n  read <- read.csv('lib_class.csv', sep=\",\", header=T);lookup_lipid_class <- read[,2:3]; row.names(lookup_lipid_class) <- read[,1]\n  read <- read.csv('lib_element.csv', sep=\",\", header=T);lookup_element <- read[,2:3]; row.names(lookup_element) <- read[,1]\n  read <- read.csv('lib_modification.csv', sep=\",\", header=T);lookup_mod <- read[,2:ncol(read)]; row.names(lookup_mod ) <- read[,1]\n\n\n  ### parsing the data and getting x and y dimensions\n\n  imzMLparse<-  paste(home_dir,\"imzMLConverter/imzMLConverter.jar\",sep=\"\") # spectra files\n\n  setwd(spectra_dir)\n  files <- list.files(, recursive = TRUE, full.names = TRUE,pattern = \".imzML\")\n\n  setwd(spectra_dir)\n  .jinit()\n  .jaddClassPath(path=imzMLparse)\n  imzML <- J(\"imzMLConverter.ImzMLHandler\")$parseimzML(paste(getwd(),substr(files,2,100),sep=''))\n  x.cood <- J(imzML, 'getWidth')\n  y.cood <- J(imzML, 'getHeight')\n\n\n\n###################################################################################################################################\n\n###  main script ###\n\n  # make library\n\n  dbase <-makelibrary(ionisation_mode, sel.class, fixed, fixed_FA, lookup_lipid_class,lookup_FA, lookup_element) \n  print(paste(\"library containing\", ncol(dbase),\"entries was made\",sep=\" \"))\n\n\n  # extract m/z and pick peaks\n\n  setwd(spectra_dir)\n  extracted<-mzextractor(files, spectra_dir, imzMLparse,thres.int, thres.low, thres.high)\n  peaks <- peakpicker.bin(extracted, bin.ppm) #pick peaks\n\n\n  # perform deisotoping on a subset of the image\n\n  temp.image <-  subsetImage(extracted, peaks, percentage.deiso,thres.int, thres.low, thres.high, files, spectra_dir,imzMLparse)\n  temp.image.filtered <- filter(imagedata.in=temp.image, steps, thres.filter, offset = 1)\n  deisotoped<-deisotope(ppm, no_isotopes, prop.1, prop.2, peaks=list(\"\",temp.image.filtered[,1]), image.sub=temp.image.filtered, search.mod, mod, lookup_mod)\n  \n\n# perform annotation of lipids using library\n\n  annotated<-annotate(ionisation_mode, deisotoped, adducts,ppm.annotate, dbase)\n\n\n  # make full image and add lipid ids\n\n  final.image<-contructImage(extracted, deisotoped, peaks, imzMLparse, spectra_dir, thres.int, thres.low, thres.high, files)\n  ids<-cbind(deisotoped[[2]][,1],annotated,deisotoped[[2]][,3:4])\n  image.ann <- cbind(ids, final.image[,2:ncol(final.image)]) # create annotated image\n\n\n  # normalise image \n\n  image.norm<-normalise(imagedata.in=image.ann, norm.type, standards,offset=4)\n  write.csv(image.norm[,], \"image.norm.csv\")\n  write.csv(image.norm[,1:3], \"image.norm_short.csv\")\n  image.process = image.norm\n\n\n  # perform PCA if requested\n\n  image.scale<-centreScale(imagedata.in = image.process, scale.type,transform, offset = 4)\n  imagedata.in=image.scale\n  imagePca(imagedata.in=image.scale, offset=4,  PCnum, scale, x.cood, y.cood, nlevels, res.spatial, summary,title,rem.outliers)\n  pca <-princomp(t(imagedata.in[,(offset+1):ncol(imagedata.in)]), cor = FALSE, scores = TRUE, covmat = NULL)\n  labs.all<-as.numeric(as.vector(imagedata.in[,1]))\n  for (i in 1:PCnum){\n    loadings <- pca$loadings[,i]\n    loadings <- cbind(loadings, labs.all)\n    write.csv(loadings, paste(\"loadings_PC\",i,\".csv\"))\n  }\n  \n  \n  # make ion slice if requested\n\n  imageSlice(row, imagedata.in=image.process, scale, x.cood, y.cood, nlevels,name=image.process[row,1],subname=image.process[row,2], offset=4, res.spatial, rem.outliers, summary,title)\n  \n  \n  # perform clustering if requested\n\n  cluster(cluster.type, imagedata.in=image.process, offset, width=x.cood, res.spatial, height=y.cood, clusters)\n    \n\n \n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/hallz/massPix/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/hallz/massPix/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/hallz/massPix/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "hallz/massPix"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "massPix"
      },
      "source": "https://raw.githubusercontent.com/hallz/massPix/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hallz/massPix/master/imzMLConverter/run.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 0.9984881005007419,
      "result": {
        "original_header": "massPix",
        "type": "Text_excerpt",
        "value": "Detailed step-by-step instructions on get started with using massPix are available in the \"massPix_quickstart.pptx\" file. \n"
      },
      "source": "https://raw.githubusercontent.com/hallz/massPix/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9485856108218119,
      "result": {
        "original_header": "Notes",
        "type": "Text_excerpt",
        "value": "Download files from Github.  \nThe latest version of imzMLConverter can also be downloaded from http://www.cs.bham.ac.uk/~ibs/imzMLConverter/# (Race et al, J Proteomics, 2012)  - ensure this is saved in massPix master folder, where the \"data/\" and \"libraries/\" folders are located. Ensure folder name is \"imzMLConverter/\". \nTest data is comprised of two files: test_POS.idb and test_POS.imzML file. These are available to download on MetaboLights repository (study ID MTBLS487; https://www.ebi.ac.uk/metabolights/MTBLS487)  \n"
      },
      "source": "https://raw.githubusercontent.com/hallz/massPix/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/hallz/massPix/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "massPix"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "hallz"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 60315,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 51,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Batchfile",
        "size": 44,
        "type": "Programming_language",
        "value": "Batchfile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hallz/massPix/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 03:47:02",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 8
      },
      "technique": "GitHub_API"
    }
  ]
}