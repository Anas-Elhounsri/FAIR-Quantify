{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Reference",
        "parent_header": [
          "Visualization and Comparing the non alignment and alignment results"
        ],
        "type": "Text_excerpt",
        "value": "1. J. M. Zones,  I.  K.  Blaby,  S.  S.  Merchant,  J.  G.  Umen,  High-Resolution  Profiling  of  a  Synchronized  Diurnal  Transcriptome  from  Chlamydomonas  reinhardtii  Reveals  Continuous  Cell  and  Metabolic  Differentiation.  *Plant  Cell* **27**,  2743-2769  (2015). \n2. Erik L.L.Sonnhammer and Gabriel \u00d6stlund. InParanoid 8: orthology analysis between 273 proteomes, mostly eukaryotic Nucleic Acids Res. 43:D234-D239 (2015)\n"
      },
      "source": "https://raw.githubusercontent.com/daifengwanglab/ManiNetCluster/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/daifengwanglab/ManiNetCluster"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-12-05T22:13:52Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-08-04T12:24:15Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A novel manifold learning approach to reveal the functional links between gene networks"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "type": "Text_excerpt",
        "value": "ManiNetCluster is a package that takes as input two or more gene expression profiles, and the gene correspondences  (i.e. orthologs) for  cross-species  comparison. ManiNetCluster has 3 essential steps:\n\n1. Construct gene co-expression networks from gene expression data\n\n2. Align the networks incrementally in pseudo-time using manifold alignment and warping techniques \n\n3. Cluster genes into modules of four different types (type I: conserved modules, type II, type III: specific-specific modules, type IV: functional connectivity modules).\n\nIncluded  in  our  package  is  an  example dataset. These  data are published  in (1) and  describe  a light/dark  timecourse  of  synchronized  cultures  of  a  green  alga.\n\nWe provided here the sample data of time series gene expression data of Chlamydomonas reinhardtii. The full dataset includes more than 17000 genes but in this example, to demonstrate cross-species comparison, we have limited the data to genes which have orthologs (as determined by InParanoid8 (2)) by taking genes being orthologous to Arabidopsis thaliana. Users can find the data (in .csv format) in the github repository (namtk/ManiNetCluster/data/).\n\nThe first step is to load the data:\n\n```r\nX <- as.matrix(read.csv(\"Downloads/dayOrthoExpr.csv\", row.names=1))\nY <- as.matrix(read.csv(\"Downloads/nightOrthoExpr.csv\", row.names=1))\n```\n"
      },
      "source": "https://raw.githubusercontent.com/daifengwanglab/ManiNetCluster/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.8979061547707217,
      "result": {
        "original_header": "ManiNetCluster",
        "type": "Text_excerpt",
        "value": "---\nTo use this package, you will need both the R statistical computing environment (version 3.4.1 or later) and Python (version 3.6.1 or later). The Python environment depends on numpy, scipy, matplotlib, and scikit-learn. \nThe following license governs the use of ManiNetCluster in academic and educational environments. Commercial use requires a commercial license from the Owner of the copyright. \n"
      },
      "source": "https://raw.githubusercontent.com/daifengwanglab/ManiNetCluster/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9896140543283621,
      "result": {
        "original_header": "Abstract",
        "type": "Text_excerpt",
        "value": "The coordination of genomic functions is a critical and complex process across biological systems such as phenotypes or states (e.g., time, disease, organism, environmental perturbation). Understanding how the complexity of genomic function relates to these states remains a challenge. To address this, we have developed a novel computational method, ManiNetCluster, which simultaneously aligns and clusters gene networks (e.g., co-expression) to systematically reveal the links of genomic function between different conditions. Specifically, ManiNetCluster employs manifold learning to uncover and match local and non-linear structures among networks, and identifies cross-network functional links. We demonstrated that ManiNetCluster better aligns the orthologous genes from their developmental expression profiles across model organisms, than state-of-the-art methods. This indicates the potential non-linear interactions of evolutionarily conserved genes across species in development. Furthermore, we applied ManiNetCluster to time series transcriptome data measured in the green alga Chlamydomonas reinhardtii, to discover the genomic functions linking various metabolic processes between the light and dark periods of a diurnally cycling culture. We identified a number of genes putatively regulating processes across each lighting regime. \nThe  following text provides an overview of gene expression analysis workflow with ManiNetCluster describing both gene clustering and  alignment. The workflow of ManiNetCluster is depicted in the figure below: \n|![](figs/tut/fig1.png \"ManiNetCluster Schematic Workflow\")|\n|:--:| \n| *<p align=\"left\">ManiNetCluster Workflow Schematic. (A) The inputs of the workflow are the two time series gene expression datasets collected from different conditions (as in this example) or from two different organisms. The number of genes and/or the number of timepoints need not be the same in each dataset. (B) From the input data, gene co-expression neighborhood networks are constructed, which approximate the manifolds where the datasets are concentrated. (C) Using manifold alignment and manifold warping methods, the two gene expression profiles are aligned across time series in a common manifold. The outcome of this step is a multilayer network consisting of two types of links: the inter-links (between the two co-expression neighborhood networks) showing the correspondence (e.g., shared genes) between the two datasets, and the intra-links showing the co-expression relationships. (D) The multilayer network is clustered into modules. Four distinct types of modules are revealed in this step: conserved modules containing high proportion of shared genes, dataset 1-specific modules containing a high proportion of genes from dataset 1, dataset 2-specific modules containing a high proportion of genes from dataset 2, and function linkage modules containing near equal numbers of genes from both datasets, which are the same gene (if conditions are compared from the same organism) or orthologs (if the organism differs between the two compared datasets).</p>* |\n \n"
      },
      "source": "https://raw.githubusercontent.com/daifengwanglab/ManiNetCluster/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9440696093136548,
      "result": {
        "original_header": "Main Function: ManiNetCluster",
        "type": "Text_excerpt",
        "value": "In our package, we provide multiple functions that users can use for separately constructing networks, detecting modules, projecting data into a manifold. But, for convenience, we provide the wrapper function, called ManiNetCluster, which takes two matrices describing the gene expression time series (where rows are genes and columns are timepoints) as inputs and output the projected data in a common manifold and the modules into which the genes are clustered. Users must also provide the corresponding matrix encapsulating the correspondence between two datasets (such as ortholog information). To specify such a corresponding matrix, users must use the class Correspondence provided in our package. The usage is easy as follow: (Here, we use an identity matrix for correspondence since the datasets include the same set of genes in different timepoints)\n```r\nn <- nrow(X) # the number of genes in the dataset\ncorr <- Correspondence(matrix=diag(n))\n```\nOther parameters could be tunes are the names of datasets, the dimension of manifold to output, the method, the number of nearest neighbors for approximated graph construction, and the number of modules users want to output. The example use of the function is as follow:\n```r\ndf <- ManiNetCluster(X,Y,nameX='light',nameY='dark',corr=corr,d=3L,method='linear manifold',k_NN=6L,k_medoids=60L)\n```\nThen we could add the locid of genes to the output dataframe by using this line of code:\n```r\ndf$id <- c(read.csv(\"Downloads/dayOrthoExpr.csv\")[,1], read.csv(\"Downloads/nightOrthoExpr.csv\")[,1])\n```\n \nIn the code above, we would like to specify the names of datasets as \u2018light\u2019 and \u2018dark\u2019, the correspondence matrix is identity as calculated previously; the dimension is 3, the method using is linear manifold alignment; number of nearest neighbors is 6; and numbers of modules is 60. Other methods could be used are:\n* 'cca':  canonical-correlation analysis\n* 'manifold warping': manifold warping \n* 'nonlinear manifold aln': nonlinear manifold alignment\n* 'nonlinear manifold warp': nonlinear manifold warping \nThe output is the dataframe as follow: \n"
      },
      "source": "https://raw.githubusercontent.com/daifengwanglab/ManiNetCluster/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9492172109553386,
      "result": {
        "original_header": "Visualization and Comparing the non alignment and alignment results",
        "type": "Text_excerpt",
        "value": "One method to visualize the alignment result is to use gradient color to capture the local alignment. In this method, same genes from two dataset (or genes which has correspondence to each other) are depicted by the same color. We fix one dataset and color the genes by sorting the expression level of genes by increasing order as in this code:\n```r\ndf1 <- df[df$data == 'light',]\ndf2 <- df[df$data == 'dark',]\ndf1 <- df1[order(df1$Val1,df1$Val2,df1$Val3), ]\ndf2 <- df2[match(df1$id, df2$id), ]\n```\nWe use the rgl library for live visualization of data points by points:\n```r\npal <- rainbow(n)\nlibrary(rgl)\nfor (i in 1:n) {\n  with(df1[i,],points3d(Val1,Val2,Val3,size=7,col=pal[i], alpha=.1))\n}\n```\n \nIf the two datasets are well aligned, we will see the two things: (1) the range of color will keep the same order, and (2) the scale of the plot will approximate the scale of dataset 1 plot. This is because the objective function of manifold alignment/warping tries to minimize both local similarity (depicted by color of the neighborhood) and the global distance between two datasets (depicted by the range of plot). The code and the plot are as follows:\n```r\nfor (i in 1:n) {\n  with(df2[i,],points3d(Val1,Val2,Val3,size=7,col=pal[i]))\n}\n```\n \nAdditionally, we can plot them in the same coordinators as follow: \nFrom these plots, it is apparent that the alignment is good because the range of color (local similarity) and the scale of plot (global distance) is preserved. We can compare this alignment result with unalignment one. To plot the original datasets we use PCA, the code is as follows:\n```r\npca_coordinatesX=prcomp(X)$x\ndf1 <- data.frame(pca_coordinatesX[,1:3])\nnames(df1) <- c('Val1', 'Val2', 'Val3')\ndf1$id <- read.csv(\"Downloads/dayOrthoExpr.csv\")[,1]\n\npca_coordinatesY=prcomp(Y)$x\ndf2 <- data.frame(pca_coordinatesY[,1:3])\nnames(df2) <- c('Val1', 'Val2', 'Val3')\ndf2$id <- read.csv(\"Downloads/nightOrthoExpr.csv\")[,1]\n\ndf1 <- df1[order(df1$Val1,df1$Val2,df1$Val3), ]\ndf2 <- df2[match(df1$id, df2$id), ]\n\nfor (i in 1:n) {\n  with(df1[i,],points3d(Val1,Val2,Val3,size=7,col=pal[i], alpha=.1))\n}\n\nfor (i in 1:n) {\n  with(df2[i,],points3d(Val1,Val2,Val3,size=7,col=pal[i]))\n}\n```\n \nBelow is the plot of dataset 1: \nAnd dataset 2 is as follows: \nThis plot demonstrates poor alignment as indicated by absence of scale and color gradient preservation. Thus, the results of alignment, inspected by visualization, is proved to be better than pure PCA.\n \n"
      },
      "source": "https://raw.githubusercontent.com/daifengwanglab/ManiNetCluster/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/daifengwanglab/ManiNetCluster/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/daifengwanglab/ManiNetCluster/master/inst/python/Untitled2.ipynb"
      },
      "source": "https://raw.githubusercontent.com/daifengwanglab/ManiNetCluster/master/inst/python/Untitled2.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/daifengwanglab/ManiNetCluster/master/inst/python/Untitled.ipynb"
      },
      "source": "https://raw.githubusercontent.com/daifengwanglab/ManiNetCluster/master/inst/python/Untitled.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/daifengwanglab/ManiNetCluster/master/inst/python/Untitled-Copy1.ipynb"
      },
      "source": "https://raw.githubusercontent.com/daifengwanglab/ManiNetCluster/master/inst/python/Untitled-Copy1.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/daifengwanglab/ManiNetCluster/master/inst/python/Untitled1.ipynb"
      },
      "source": "https://raw.githubusercontent.com/daifengwanglab/ManiNetCluster/master/inst/python/Untitled1.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/daifengwanglab/ManiNetCluster/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "daifengwanglab/ManiNetCluster"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ManiNetCluster"
      },
      "source": "https://raw.githubusercontent.com/daifengwanglab/ManiNetCluster/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/daifengwanglab/ManiNetCluster/master/figs/tut/fig1.png"
      },
      "source": "https://raw.githubusercontent.com/daifengwanglab/ManiNetCluster/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/daifengwanglab/ManiNetCluster/master/figs/tut/Screen%20Shot%202018-05-03%20at%2012.58.19%20AM.png"
      },
      "source": "https://raw.githubusercontent.com/daifengwanglab/ManiNetCluster/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/daifengwanglab/ManiNetCluster/master/figs/tut/Screen%20Shot%202018-05-03%20at%2012.59.20%20AM.png"
      },
      "source": "https://raw.githubusercontent.com/daifengwanglab/ManiNetCluster/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/daifengwanglab/ManiNetCluster/master/figs/tut/Screen%20Shot%202018-05-03%20at%201.01.55%20AM.png"
      },
      "source": "https://raw.githubusercontent.com/daifengwanglab/ManiNetCluster/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/daifengwanglab/ManiNetCluster/master/figs/tut/Screen%20Shot%202018-05-03%20at%201.06.02%20AM.png"
      },
      "source": "https://raw.githubusercontent.com/daifengwanglab/ManiNetCluster/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/daifengwanglab/ManiNetCluster/master/figs/tut/Screen%20Shot%202018-05-03%20at%201.07.02%20AM.png"
      },
      "source": "https://raw.githubusercontent.com/daifengwanglab/ManiNetCluster/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/daifengwanglab/ManiNetCluster/master/figs/tut/Screen%20Shot%202018-05-03%20at%201.09.37%20AM.png"
      },
      "source": "https://raw.githubusercontent.com/daifengwanglab/ManiNetCluster/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9615444789323102,
      "result": {
        "original_header": "ManiNetCluster",
        "type": "Text_excerpt",
        "value": "date: February 16, 2019 \n---\nTo use this package, you will need both the R statistical computing environment (version 3.4.1 or later) and Python (version 3.6.1 or later). The Python environment depends on numpy, scipy, matplotlib, and scikit-learn. \nManiNetCluster has been tested with Mac and Linux operating systems. \n"
      },
      "source": "https://raw.githubusercontent.com/daifengwanglab/ManiNetCluster/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/daifengwanglab/ManiNetCluster/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ManiNetCluster"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "daifengwanglab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 1721424,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 67796,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 15058,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/daifengwanglab/ManiNetCluster/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-06 13:10:52",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 6
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "To begin",
        "type": "Text_excerpt",
        "value": "First you will need to download the package from github. To seamlessly integrate both Python and R in the same environment, you will need to install the reticulate package. \n\n```r\ninstall.packages(\"reticulate\")\n```\n\nThen, you can start by installing the devtools package from CRAN and load it. Installation should take less than one minute.\n\n```r\ninstall.packages(\"devtools\")\n```\n\nNow, you specify the Python library for reticulate:\n\n```r\nreticulate::use_python(\"/Users/tkn/anaconda3/bin/python\")\nreticulate::py_config()\n```\n\nFinally, install ManiNetCluster and load it:\n\n```r\ndevtools::install_github(\"namtk/ManiNetCluster\")\nlibrary(ManiNetCluster)\n```\n\nThe following demo is provided to walk through the basic functionality of ManiNetCluster. It should take less than 10 minutes to complete on a standard desktop computer.\n"
      },
      "source": "https://raw.githubusercontent.com/daifengwanglab/ManiNetCluster/master/README.md",
      "technique": "header_analysis"
    }
  ]
}