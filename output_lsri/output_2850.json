{
  "application_domain": [
    {
      "confidence": 0.8743508524337071,
      "result": {
        "type": "String",
        "value": "Semantic web"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Please Cite",
        "type": "Text_excerpt",
        "value": "If you use FRAGTE in your publication, please cite: \n\nZhou, Y., et al., A completeness-independent method for pre-selection of closely related genomes for species delineation in prokaryotes. BMC Genomics, 2020. 21(1): p. 183.\n"
      },
      "source": "https://raw.githubusercontent.com/Yizhuangzhou/FRAGTE/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Yizhuangzhou/FRAGTE"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-12-16T01:34:42Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-07-09T06:14:57Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A completeness-independent method for pre-selection of closely related genomes for species delineation in prokaryotes"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Description",
        "type": "Text_excerpt",
        "value": "FRAGTE and TETRA programs are in Bin directory; all tested data are in Data directory; other scripts are in Scripts directory.\n"
      },
      "source": "https://raw.githubusercontent.com/Yizhuangzhou/FRAGTE/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.973884018542101,
      "result": {
        "original_header": "Simulated genome",
        "type": "Text_excerpt",
        "value": "1. FRAGTE Performance\n\t\n\tperl Scripts/Simulated_FRAGTE_Performance.pl [Data/Simulated_IntraSpecies.xls][indir][output|Sensitivity][output|NumStat][specificity]\n\t\n\tNote: the output file of determining phase should be named as: Ref_P*_Query_P#_Pairs_byFRAGTE.xls (*, % of reference genomes; #, % of query genome). For example, for references extrating 10% of genomes and queries extrating 20% of genomes, the output file of determining phase is Ref_P10_Query_P20_Pairs_byFRAGTE.xls. All Pairs by FRAGTE are within [indir]. \n\t\n2. TETRA Performance\n\t\n\tperl Scripts/Simulated_TETRA_Performance.pl [Data/Simulated_IntraSpecies.xls][TETRA.list][FRAGTE_Sensitivity.xls][output|Sensitivity][output|numstat][output|specificity]\n\t\n\tNote: the output file of TETRA should be named as: Ref_P*_Query_P#_TETRA.xls (*, % of reference genomes; #, % of query genome). For example, for references extrating 10% of genomes and queries extrating 20% of genomes, the output file of determining phase is Ref_P10_Query_P20_TETRA.xls.\n\t\n\t[TETRA.list] contaning the files for all output files for TETRA; one line for one file.\n\t\n\t[FRAGTE_Sensitivity.xls] the output file for FRAGTE sensitivity\n \n"
      },
      "source": "https://raw.githubusercontent.com/Yizhuangzhou/FRAGTE/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.805050606394206,
      "result": {
        "original_header": "MAGs",
        "type": "Text_excerpt",
        "value": "\t[MAG_Pairs_byFRAGTE.xls] the output fie of FRAGTE \n"
      },
      "source": "https://raw.githubusercontent.com/Yizhuangzhou/FRAGTE/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Yizhuangzhou/FRAGTE/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Yizhuangzhou/FRAGTE/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Yizhuangzhou/FRAGTE"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "FRAGTE"
      },
      "source": "https://raw.githubusercontent.com/Yizhuangzhou/FRAGTE/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "FRAGTE was developed in Perl language. Therefore, it just needs to install the obove four Perl modules. If these Perl modules have been installed, you directly use FRAGTE. Otherwise, please type:\n./autobuild_auxiliary\n"
      },
      "source": "https://raw.githubusercontent.com/Yizhuangzhou/FRAGTE/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.8821401132334169,
      "result": {
        "original_header": "Developer",
        "type": "Text_excerpt",
        "value": "Yizhuang Zhou (zhouyizhuang3@163.com)\n \n"
      },
      "source": "https://raw.githubusercontent.com/Yizhuangzhou/FRAGTE/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Yizhuangzhou/FRAGTE/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "FRAGTE"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "Yizhuangzhou"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 33433,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 1366,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Yizhuangzhou/FRAGTE/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Prerequisite",
        "type": "Text_excerpt",
        "value": "1. Perl5 with CPAN, FindBin, File::Basename,POSIX and Time::Local modules\n(./autobuild_auxiliary will use CPAN to check and install the other four Perl modules)\n"
      },
      "source": "https://raw.githubusercontent.com/Yizhuangzhou/FRAGTE/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 10:33:13",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Support platform",
        "type": "Text_excerpt",
        "value": "FRAGTE was developed and maintained on Linux platform.\n"
      },
      "source": "https://raw.githubusercontent.com/Yizhuangzhou/FRAGTE/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Support",
        "type": "Text_excerpt",
        "value": "If you need some other scripts and other materials or encounter bugs, problems, or have any suggestions, please contact me via zhouyizhuang3@163.com\n"
      },
      "source": "https://raw.githubusercontent.com/Yizhuangzhou/FRAGTE/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "FRAGTE",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "A completeness-independent method for pre-selection of closely related genomes for species delineation in prokaryotes\n"
      },
      "source": "https://raw.githubusercontent.com/Yizhuangzhou/FRAGTE/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "TETRA",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "1. Calculate z-values for references/Queries\n\t\n\tperl Bin/Zvalue.pl [GenomeInfo file] [output]\n\t\n\t[GenomeInfo file] has 7 fields, including:\n\tAssembly_assession\\tspecies_taxid\\torganism_name\\tinfraspecific_name\\tassembly_level\\tGenome size\\tfile for Genome\n\n\tNote: file for Genome,the file containing sequences in fasta format; one line for one genome.\n\n2. Calculate PCCDs for queries against references\n\t\n\tperl Bin/Pairs_byTETRA.pl [Ref_Zvalue.xls][Query_Zvalue.xls][output]\n\t\n\t[Ref_Zvalue.xls] Zvalue for references\n\t\n\t[Query_Zvalue.xls] Zvalue for queries\n\t\n\t[output] output file\n\t"
      },
      "source": "https://raw.githubusercontent.com/Yizhuangzhou/FRAGTE/master/README.md",
      "technique": "header_analysis"
    }
  ]
}