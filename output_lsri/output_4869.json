{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/HCBravoLab/yanagi"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2017-07-10T05:18:38Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-09-16T05:03:52Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Transcript Segment Library Construction for RNA-Seq Quantification"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9994090243466388,
      "result": {
        "original_header": "Abstract",
        "type": "Text_excerpt",
        "value": "Analysis of differential alternative splicing from RNA-seq data is complicated by the fact that many RNA-seq reads map to multiple transcripts, and that annotated transcripts from a given gene are often a small subset of many possible complete transcripts for that gene. Here we describe Yanagi, a tool which segments a transcriptome into disjoint regions to create a segments library from a complete transcriptome annotation that preserves all of its consecutive regions of a given length L while distinguishing annotated alternative splicing events in the transcriptome. In this paper, we formalize this concept of transcriptome segmentation and propose an efficient algorithm for generating segment libraries based on a length parameter dependent on specific RNA-Seq library construction. The resulting segment sequences can be used with pseudo-alignment tools to quantify expression at the segment level. We characterize the segment libraries for the reference transcriptomes of Drosophila melanogaster and Homo sapiens. Finally, we demonstrate the utility of quantification using a segment library based on an analysis of differential exon skipping in Drosophila melanogaster and Homo sapiens. The notion of transcript segmentation as introduced here and implemented in Yanagi will open the door for the application of lightweight, ultra-fast pseudo-alignment algorithms in a wide variety of analyses of transcription variation.\n \n"
      },
      "source": "https://raw.githubusercontent.com/HCBravoLab/yanagi/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9337859943186776,
      "result": {
        "original_header": "**Command and subcommand structure**",
        "type": "Text_excerpt",
        "value": "- **preprocess**    : Preprocesses transcriptome annotation by breaking exons into disjoint exonic bins and find their transcript mapping.\n- **segment**       : Generates a set of maximal L-disjoint segments from the preprocessed transcriptome annotation.\n- **align**         : Pseudo aligns reads (single or paired-end) into the segments and obtain segment counts (single segment or segment pair counts).\n- **psiCalc**       : Calculates PSI values of alternative splicing events based on their segment mappings. \n"
      },
      "source": "https://raw.githubusercontent.com/HCBravoLab/yanagi/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8995453466420191,
      "result": {
        "original_header": "**Output files**",
        "type": "Text_excerpt",
        "value": "Another output file ``exons2bins.tsv`` is generated from that step. That extra file contains a mapping between the exons/introns annotated in the .gtf file and the disjoint exonic bins (reported in disjoint_bins.tsv file) that are used as the building blocks for the splice graph used inside of yanagi.\n \n"
      },
      "source": "https://raw.githubusercontent.com/HCBravoLab/yanagi/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9649494022811395,
      "result": {
        "original_header": "**Alternative Splicing Events Generation**",
        "type": "Text_excerpt",
        "value": "If the downstream analysis involves studying alternative splicing events present in the transcriptome. Then this step is needed to prepared the annotation of those events (Skip this step otherwise).\nYanagi uses the same events definition and code used in [SUPPA](https://github.com/comprna/SUPPA)(eventGenerator command). \nTo generate the list of events given the GTF (unzipped) of the transcriptome one can run that command:\n```\npython eventGenerator.py -i <gtf-file> -o <output-directory-and-prefix> -f ioe -e <list-of-event-types-space-separated>\n```\nList of options available:\n- **-e**  | **--event-type**: (only used for local AS events) space separated list of events to generate from the following list: \nNote that a description of each event type and definition can be found on [SUPPA](https://github.com/comprna/SUPPA)'s page.\nThe command generates a separate .ioe file of the list of events of each event type provided in the event-type option.\nThe shell script ```merge_ioe_files.sh``` can be edited for use to merge the separate .ioe files into one file, or to filter out events outside of the primary transcriptome assembly. \n"
      },
      "source": "https://raw.githubusercontent.com/HCBravoLab/yanagi/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/HCBravoLab/yanagi/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/HCBravoLab/yanagi/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "HCBravoLab/yanagi"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Yanagi: Transcript Segment Library Construction for RNA-Seq Quantification"
      },
      "source": "https://raw.githubusercontent.com/HCBravoLab/yanagi/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/HCBravoLab/yanagi/master/run_segAlign.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/HCBravoLab/yanagi/master/merge_ioe_files.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/mgunady/yanagi/master/geneViz.png"
      },
      "source": "https://raw.githubusercontent.com/HCBravoLab/yanagi/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9947839529087731,
      "result": {
        "original_header": "**Command and subcommand structure**",
        "type": "Text_excerpt",
        "value": "**Note: This tutorial assumes that all commands are excuted from inside the directory where yanagi is downloaded (refer to the previous Download section).** \n"
      },
      "source": "https://raw.githubusercontent.com/HCBravoLab/yanagi/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999317635415171,
      "result": {
        "original_header": "**Command and options**",
        "type": "Text_excerpt",
        "value": "To preprocess the transcriptome annotation subject to segmentation one has to run the following command in the following format:\n```\npython yanagi.py preprocess -gtf <gtf-file> -fa <fasta-file> -o <work-directory>\n```\nNote that throughout this tutorial, we will use the same directory <output-directory> as the working directory when needed in different commands.\n \n"
      },
      "source": "https://raw.githubusercontent.com/HCBravoLab/yanagi/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8175530273726064,
      "result": {
        "original_header": "**Alternative Splicing Events Generation**",
        "type": "Text_excerpt",
        "value": "If the downstream analysis involves studying alternative splicing events present in the transcriptome. Then this step is needed to prepared the annotation of those events (Skip this step otherwise).\nYanagi uses the same events definition and code used in [SUPPA](https://github.com/comprna/SUPPA)(eventGenerator command). \n"
      },
      "source": "https://raw.githubusercontent.com/HCBravoLab/yanagi/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8013607817738218,
      "result": {
        "original_header": "**Command and subcommand structure**",
        "type": "Text_excerpt",
        "value": "Yanagi works with a command/subcommand structure:\n```\nyanagi.py subcommand options\n```\nwhere the subcommand can be one of these options:\n \n"
      },
      "source": "https://raw.githubusercontent.com/HCBravoLab/yanagi/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8059803094648504,
      "result": {
        "original_header": "**Command and options**",
        "type": "Text_excerpt",
        "value": "To preprocess the transcriptome annotation subject to segmentation one has to run the following command in the following format:\n```\npython yanagi.py preprocess -gtf <gtf-file> -fa <fasta-file> -o <work-directory>\n```\nNote that throughout this tutorial, we will use the same directory <output-directory> as the working directory when needed in different commands.\n \n"
      },
      "source": "https://raw.githubusercontent.com/HCBravoLab/yanagi/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/HCBravoLab/yanagi/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/mgunady/yanagi/master/yanagi_example.png"
      },
      "source": "https://raw.githubusercontent.com/HCBravoLab/yanagi/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "yanagi"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "HCBravoLab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 167339,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 24302,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 935,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/HCBravoLab/yanagi/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "**Requirements**",
        "parent_header": [
          "**SET UP**"
        ],
        "type": "Text_excerpt",
        "value": "----------------\n\nYanagi has been developed and tested in Python 3.7 and R 3.5.\nYanagi uses the following modules:\n* Python:\n  - tqdm\n\n* R (Bioconductor):\n  - GenomicFeatures\n  - Biostrings\n \n----------------------------"
      },
      "source": "https://raw.githubusercontent.com/HCBravoLab/yanagi/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 17:56:15",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 8
      },
      "technique": "GitHub_API"
    }
  ]
}