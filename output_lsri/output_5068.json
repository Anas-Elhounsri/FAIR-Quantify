{
  "acknowledgement": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Acknowledgements",
        "type": "Text_excerpt",
        "value": "We would like to thank:\n* The Kinghorn Centre for Clinical Genomics and collaborators, who helped with feedback for running `mity`.\n* The Genome in a Bottle consortium for providing the test data used here \n* Eric Talevich who's CNVkit helped us structure `mity` as a package\n* Erik Garrison for developing `FreeBayes` and his early feedback in optimising `FreeBayes` for sensitive variant detection.\n* Brent Pederson for developing `gsort`\n"
      },
      "source": "https://raw.githubusercontent.com/KCCG/mity/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Human",
        "parent_header": [
          "Reference genomes"
        ],
        "type": "Text_excerpt",
        "value": "`mity` natively supports the analysis of the revised Cambridge Reference Sequence (rCRS, RefSeq ID NC_012920.1). The\nrCRS used in most human reference genomes from NCBI (GRCh37, hs37d5, GRCh38) and hg38 from UCSC, where it is either \nnamed `chrM`, or `MT`. The main exception in common use is the `hg19` reference genome from UCSC, which used a different\nsequence (RefSeq NC_001807) which differs in length by 2bp, and sharing 99% sequence homology (16530/16572 identities) \nand 4 gaps. For now, `mity call` supports the hg19 reference, but `mity report` will not annotate variants properly, so \nyou should not use this part of the pipeline. We strongly recommend that for mitochondrial analysis, to use a reference\ngenome that uses the rCRS sequence. \n\n> - the mitochondrial genome: since the release of the UCSC hg19\n> assembly, the Homo sapiens mitochondrion sequence (represented as \"chrM\" in the\n> Genome Browser) has been replaced in GenBank with the record NC_012920, the\n> revised Cambridge Reference Sequence (rCRS).  We have not replaced the original\n> sequence, NC_001807, as chrM in the hg19 Genome Browser.  However, files in the\n> subdirectory p13.plusMT include NC_012920 as \"chrMT\", in addition to the original\n> \"chrM\".\n\n| Reference   | contig name | RefSeq ID   | length   | rCRS | \n| ----------- | ----------- | ----------- | ---------| ---- |\n| GRCh37      | chrM        | NC_012920.1 | 16569 bp | rCRS |\n| hs37d5      | MT          | NC_012920.1 | 16569 bp | rCRS |\n| hg19 (UCSC) | chrM        | NC_001807.4 | 16571 bp | no   |\n| GRCh38      | chrM        | NC_012920.1 | 16569 bp | rCRS |\n"
      },
      "source": "https://raw.githubusercontent.com/KCCG/mity/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Mouse",
        "parent_header": [
          "Reference genomes"
        ],
        "type": "Text_excerpt",
        "value": "`mity` `call` and `normalise` support the analysis of the mouse genome (`mity call --reference mm10 ...`). `mity report`\ncurrently only supports variant annotation to the human rCRS sequence.\n"
      },
      "source": "https://raw.githubusercontent.com/KCCG/mity/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/KCCG/mity"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-11-18T00:39:27Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-08-30T19:25:23Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "mity: A highly sensitive mitochondrial variant analysis pipeline for whole genome sequencing data"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9982569090821911,
      "result": {
        "original_header": "mity",
        "type": "Text_excerpt",
        "value": "`mity` is a bioinformatic analysis pipeline designed to call mitochondrial SNV and INDEL variants from Whole Genome Sequencing (WGS) data. `mity` can:\n* identify very low-heteroplasmy variants, even <1% heteroplasmy when there is sufficient read-depth (eg >1000x)\n* filter out common artefacts that arise from high-depth sequencing\n* easily integrate with existing nuclear DNA analysis pipelines (mity merge)\n* provide an annotated report, designed for clinicians and researchers to interrogate\n \n"
      },
      "source": "https://raw.githubusercontent.com/KCCG/mity/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9707658229236543,
      "result": {
        "original_header": "Base quality score recalibration (BQSR)",
        "type": "Text_excerpt",
        "value": "Most of the development of `mity` was tested on BAM files that had undergone GATK's BQSR method, which improves the \nbase qualities of each read. \nIn our experience, this reduced the quality score of most bases by ~10 points, indicating that the base qualities \nstraight out of the sequencer are generally inflated. As the GATK best practices guide no longer recommends BQSR, it's \nreasonable to ask whether `mity` can be run on BAM files straight out of the aligner.\n`mity` has a custom QUAL score, which depends on the base qualities of only the reads that support the alternative \nallele.  \nFor tier 1 or 2 variants, there will be so many supporting reads, that any miscalibration of base quality scores will\nhave no material effect. Tier 3 variants with very few supporting reads may be impacted, where a variant with only 3 or\n4 supporting reads may end up having a stronger mity QUAL score than after BQSR. The comment above regarding how you\nshould interpret and validate tier 3 variant still holds. \nWe would appreciate any feedback you may have on this.\n \n"
      },
      "source": "https://raw.githubusercontent.com/KCCG/mity/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/KCCG/mity/tree/master/docs"
      },
      "technique": "file_exploration"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/KCCG/mity/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/KCCG/mity/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "KCCG/mity"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "mity"
      },
      "source": "https://raw.githubusercontent.com/KCCG/mity/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KCCG/mity/master/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/KCCG/mity/master/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KCCG/mity/master/tools/testpypi-keyring.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KCCG/mity/master/tools/testpypi-nokeyring.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# INSTALL\n\n## Installing via Docker\n\nThe simplest way to run `mity` is via `docker`:\n\n```\ndocker run drmjc/mity -h\n```\n\n## Installing via Pip\n\nIf you have `freebayes` >=1.2 and Brent Pederson's `gsort` installed, then `pip` should work well.\n\n```\npip3 install mitywgs\n```\n\n## Manual Installation\n\nAll of these commands are available as \n\nInstall homebrew (skip if you have already installed homebrew):\n```\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/Linuxbrew/install/master/install.sh)\"\nexport PATH=/home/linuxbrew/.linuxbrew/bin:$PATH\n```\n\nInstall dependencies:\n```\nsudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev \\\n  libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev \\\n  xz-utils tk-dev libffi-dev liblzma-dev python3-openssl git\n```\n\n> Note that `python-openssl` has been replaced with `python3-openssl`\n\nUpgrade pip and export path:\n```\npip3 install --upgrade pip\nexport PATH=$PATH:.local/bin:$HOME/.pyenv/versions/3.7.4/bin\n```\n\nInstall dependencies: `freebayes` (>=1.2.0), `htslib` (tabix+bgzip), `gsort` and `tabix`:\n\n```\nbrew tap brewsci/bio\nbrew install freebayes\nbrew install htslib\nsudo apt-get install -y tabix\n\ncurl -s https://api.github.com/repos/brentp/gsort/releases/latest \\\n  | grep browser_download_url \\\n  | grep -i $(uname) \\\n  | cut -d '\"' -f 4 \\\n  | wget -O gsort -qi -\nchmod +x gsort\nexport PATH=.:$PATH\n```\n\nInstall mity globally with: \n```\nexport PYTHONPATH=/usr/local/lib/python3.7/dist-packages:/usr/lib/python3/dist-packages\npip3 install mitywgs\n```\n\nOr install with a virtual environment:\n```\nsudo apt-get install python3-venv\nunset PYTHONPATH\npython3 -m venv .\nsource bin/activate\n./bin/pip install wheel\n./bin/pip install mitywgs\n```\n"
      },
      "source": "https://raw.githubusercontent.com/KCCG/mity/master/docs/INSTALL.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "Installation instructions via Docker, pip, or manually are available in [INSTALL.md](docs/INSTALL.md)\n"
      },
      "source": "https://raw.githubusercontent.com/KCCG/mity/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/KCCG/mity/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bioinformatics, genomics, mitochondria, precision-medicine, whole-genome-sequencing"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KCCG/mity/master/res/logos/mity-logo-red-white.png"
      },
      "source": "https://raw.githubusercontent.com/KCCG/mity/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "mity"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "KCCG"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 72036,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 836,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 664,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KCCG/mity/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "christianfares",
          "type": "User"
        },
        "date_created": "2024-06-07T03:49:10Z",
        "date_published": "2024-06-07T03:50:33Z",
        "description": "- Fixed an issue where the `report-config.yaml` and `vcfanno-config.toml` files where not being found by mity.\r\n- Added options to specify custom report and vcfanno config files.\r\n- Added `--contig` as an option to `mity report` to specify the contig.\r\n- Added annotations for `MT` and `chrM`. `mity` will default to using `MT` if the `--contig` option is not provided.\r\n- Added vcfanno as a dependency to the `Dockerfile`.\r\n- Added a `runall` option to run `mity call`, `mity normalise`, and `mity report` sequentially. This option supports all options from `call` and `report`.",
        "html_url": "https://github.com/KCCG/mity/releases/tag/1.1.0",
        "name": "1.1.0",
        "release_id": 159302527,
        "tag": "1.1.0",
        "tarball_url": "https://api.github.com/repos/KCCG/mity/tarball/1.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/KCCG/mity/releases/159302527",
        "value": "https://api.github.com/repos/KCCG/mity/releases/159302527",
        "zipball_url": "https://api.github.com/repos/KCCG/mity/zipball/1.1.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "christianfares",
          "type": "User"
        },
        "date_created": "2024-01-21T23:57:28Z",
        "date_published": "2024-01-22T00:01:14Z",
        "description": "- Refactored all modules of mity to support newer versions of python and other dependencies.\r\n- Updated mity to use pysam for all vcf / bam / cram file manipulation\r\n- Updated mity report to use vcfanno for annotating variants.\r\n- Updated mity merge to use pysam concat and pysam isec for merging the files.\r\n- General performance enhancements across all mity modules",
        "html_url": "https://github.com/KCCG/mity/releases/tag/1.0.0",
        "name": "1.0.0",
        "release_id": 137906468,
        "tag": "1.0.0",
        "tarball_url": "https://api.github.com/repos/KCCG/mity/tarball/1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/KCCG/mity/releases/137906468",
        "value": "https://api.github.com/repos/KCCG/mity/releases/137906468",
        "zipball_url": "https://api.github.com/repos/KCCG/mity/zipball/1.0.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "drmjc",
          "type": "User"
        },
        "date_created": "2022-05-06T11:17:38Z",
        "date_published": "2022-05-06T11:24:04Z",
        "description": "Includes x38 support, CRAM, mitomap scores and pathogenic variant annotations from MitoTip\r\n\r\n## What's Changed\r\n**Full Changelog**: https://github.com/KCCG/mity/compare/0.3.1...0.4.0",
        "html_url": "https://github.com/KCCG/mity/releases/tag/0.4.0",
        "name": "0.4.0",
        "release_id": 66217369,
        "tag": "0.4.0",
        "tarball_url": "https://api.github.com/repos/KCCG/mity/tarball/0.4.0",
        "type": "Release",
        "url": "https://api.github.com/repos/KCCG/mity/releases/66217369",
        "value": "https://api.github.com/repos/KCCG/mity/releases/66217369",
        "zipball_url": "https://api.github.com/repos/KCCG/mity/zipball/0.4.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "drmjc",
          "type": "User"
        },
        "date_created": "2019-11-11T06:35:14Z",
        "date_published": "2019-11-18T11:08:54Z",
        "html_url": "https://github.com/KCCG/mity/releases/tag/0.1.0",
        "release_id": 21549681,
        "tag": "0.1.0",
        "tarball_url": "https://api.github.com/repos/KCCG/mity/tarball/0.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/KCCG/mity/releases/21549681",
        "value": "https://api.github.com/repos/KCCG/mity/releases/21549681",
        "zipball_url": "https://api.github.com/repos/KCCG/mity/zipball/0.1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependencies",
        "type": "Text_excerpt",
        "value": "* python3 (tested on 3.7.4)\n* freebayes >= 1.2.0\n* bgzip + tabix\n* gsort (https://github.com/brentp/gsort)\n* pyvcf\n* xlsxwriter\n* pandas\n"
      },
      "source": "https://raw.githubusercontent.com/KCCG/mity/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "run",
    "download",
    "contact",
    "contributors",
    "faq",
    "identifier",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 18:40:53",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 36
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "mity report",
        "parent_header": [
          "Example Usage"
        ],
        "type": "Text_excerpt",
        "value": "We can create a `mity report` on the normalised VCF:\n```bash\nmity report \\\n--prefix ashkenazim \\\n--min_vaf 0.01 \\\n--output-dir test_out \\\ntest_out/ashkenazim.mity.vcf.gz\n```\nThis will create: `test_out/ashkenazim.annotated_variants.csv` and `test_out/ashkenazim.annotated_variants.xlsx`.\n"
      },
      "source": "https://raw.githubusercontent.com/KCCG/mity/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Recommendations for interpreting the report",
        "type": "Text_excerpt",
        "value": "Assuming that you are looking for a pathogenic variant underlying a patient with a rare genetic disorder potentially \ncaused by a Mitochondrial mutation, then we recommend the following strategy:\n1. tier 1 or 2 variants included in the 'commercial_panels' column \n2. tier 1 or 2 variants that match the clinical presentation and the phenotype in 'disease_mitomap', preferably \nthose that are annotated with Confirmed evidence in the 'status_mitomap' column\n3. exclude common variants: anything linked to 'phylotree_haplotype', high 'phylotree_haplotype', high \n'MGRB_frequency', high 'GenBank_frequency_mitomap'.\n4. consider any remaining tier 1 or 2 variants that may have a predicted impact on tRNA\n5. consider any remaining variants with high numbers of 'variant_references_mitomap'\n5. if you have analysed multiple family members, consider variants who's level of 'variant_heteroplasmy' match the\ndisease burden \n6. tier 3 variants have low numbers of supporting reads, and should be considered with caution. However we have observed\nnumerous tier 3 variants, especially in WGS from blood, that match the pathogenic allele known to be at much higher \nheteroplasmy in the affected tissue (this phenomenon is well established in the literature). Thus, if there are any \ntier 3 variants identified that match the patient's clinical presentation, then we recommend considering these\nas candidate variants and validating using an orthogonal clinically validated assay, preferably on the disease \naffected tissue.\n"
      },
      "source": "https://raw.githubusercontent.com/KCCG/mity/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "CRAM support",
        "parent_header": [
          "Commonly asked Questions"
        ],
        "type": "Text_excerpt",
        "value": "CRAM support was added to `mity call` in v0.4.0.\n"
      },
      "source": "https://raw.githubusercontent.com/KCCG/mity/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "type": "Text_excerpt",
        "value": "    mity -h\n\nMore detailed usage can be found [docs/commands.md](docs/commands.md)\n"
      },
      "source": "https://raw.githubusercontent.com/KCCG/mity/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example Usage",
        "type": "Text_excerpt",
        "value": "This is an example of calling variants in the Ashkenazim Trio.\n"
      },
      "source": "https://raw.githubusercontent.com/KCCG/mity/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "mity call",
        "parent_header": [
          "Example Usage"
        ],
        "type": "Text_excerpt",
        "value": "First run `mity call` on three MT BAMs provided in [docs/test-files.md](docs/test-files.md). CRAM files are supported.\n\nWe recommend always using `--normalise`, or `mity report` won't work:\n```bash\nmity call \\\n--prefix ashkenazim \\\n--output-dir test_out \\\n--region MT:1-500 \\\n--normalise \\\ntest_in/HG002.hs37d5.2x250.small.MT.RG.bam \\\ntest_in/HG003.hs37d5.2x250.small.MT.RG.bam \\\ntest_in/HG004.hs37d5.2x250.small.MT.RG.bam \n```\nThis will create `test_out/normalised/ashkenazim.mity.vcf.gz` (and tbi file).\n\nor, if using Docker:\n```bash\ndocker run -w \"$PWD\" -v \"$PWD\":\"$PWD\" drmjc/mity call \\\n--prefix ashkenazim \\\n--output-dir test_out \\\n--region MT:1-500 \\\n--normalise \\\ntest_in/HG002.hs37d5.2x250.small.MT.RG.bam \\\ntest_in/HG003.hs37d5.2x250.small.MT.RG.bam \\\ntest_in/HG004.hs37d5.2x250.small.MT.RG.bam \n```\n"
      },
      "source": "https://raw.githubusercontent.com/KCCG/mity/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "mity normalise",
        "parent_header": [
          "Example Usage"
        ],
        "type": "Text_excerpt",
        "value": "High-depth sequencing and sensitive variant calling can create many variants with more than 2 alleles, and in some\ncases, joins two nearby variants separated by shared `REF` sequence into a multi-nucleotide polymorphism \nas discussed in the manuscript. Here, variant normalisation relates to decomposing the multi-allelic variants and \nwhere possible, splitting multi-nucleotide polymorphisms into their cognate smaller variants. At the time of writing,\nall variant decomposition tools we used failed to propagate the metadata in a multi-allelic variant to the split\nvariants which caused problems when reporting the quality scores associated with each variant.\n  \nTechnically you can run `mity call` and `mity normalise` separately, but since `mity report` requires a normalised \nvcf file, we recommend running `mity call --normalise`. \n"
      },
      "source": "https://raw.githubusercontent.com/KCCG/mity/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "mity merge",
        "parent_header": [
          "Example Usage"
        ],
        "type": "Text_excerpt",
        "value": "You can merge a nuclear vcf.gz file and a mity.vcf.gz file thereby replacing the MT calls from the nuclear VCF (\npresumably from a caller like HaplotypeCaller which is not able to sensitively call mitochondrial variants) with\nthe calls from `mity`.\n\n```bash\nmity merge \\\n--prefix ashkenazim \\\n--mity_vcf test_out/ashkenazim.mity.vcf.gz \\\n--nuclear_vcf todo-create-example-nuclear.vcf.gz\n```\n"
      },
      "source": "https://raw.githubusercontent.com/KCCG/mity/master/README.md",
      "technique": "header_analysis"
    }
  ]
}