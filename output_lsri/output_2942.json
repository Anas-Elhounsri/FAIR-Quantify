{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/unistbig/netGO"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": ":blush: Contact",
        "type": "Text_excerpt",
        "value": "* Comments / suggestions and questions will be greatly appreciated,\n\n* :octocat: Jinhwan Kim [@jhk0530](http://github.com/jhk0530) *kjh0530@unist.ac.kr*\n\n* prof. Dougu Nam *dougnam@unist.ac.kr*\n"
      },
      "source": "https://raw.githubusercontent.com/unistbig/netGO/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-03-08T11:03:37Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-06-21T08:25:58Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "R/Shiny package for network-integrated pathway enrichment analysis "
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.997653244291015,
      "result": {
        "original_header": "**Data Formats**",
        "type": "Text_excerpt",
        "value": "netGO is an R/Shiny package for network-integrated pathway enrichment analysis.<br>\nnetGO provides user-interactive visualization of enrichment analysis results and related networks.<br> \nCurrently, netGO supports analysis for four species (*[Human](https://github.com/unistbig/netGO-Data/tree/master/Human), [Mouse](https://github.com/unistbig/netGO-Data/tree/master/Mouse), [Arabidopsis thaliana](https://github.com/unistbig/netGO-Data/tree/master/Arabidopsis),and [Yeast](https://github.com/unistbig/netGO-Data/tree/master/Yeast)*)<br>\nThese data are available from [netGO-Data](https://github.com/unistbig/netGO-Data) repository.<br> \n"
      },
      "source": "https://raw.githubusercontent.com/unistbig/netGO/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9879860964914903,
      "result": {
        "original_header": ":clipboard: Prerequisites",
        "type": "Text_excerpt",
        "value": "* Note that netGO is not supported for centOS 8, because V8 is not available in centOS 8.<br> \n"
      },
      "source": "https://raw.githubusercontent.com/unistbig/netGO/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8698885817925766,
      "result": {
        "original_header": ":wrench: Running with an example data",
        "type": "Text_excerpt",
        "value": "Here are codes to run netGO for the breast tumor dataset (*GEO [GSE3744](https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE3744).*)<br>\n```r  \nlibrary(devtools)\ninstall_github('unistbig/netGO') # install netGO library\n\nlibrary(netGO) # load netGO library\nDownloadExampleData() # Download and load the breast tumor data\nobj = netGO(genes = brca[1:30], genesets, network, genesetV) \n\n# The user may also load the pre-calculated result using the following command\n# load(\"brcaresult.RData\")   \n```\nFor custom data analysis, \n```r\nlibrary(netGO)\nuserGenesetV = BuildGenesetV(genesets = userGenesets, network = userNetwork)\nobj = netGO(genes = userGenes, genesets = userGenesets, network = userNetwork, genesetV = userGenesetV)\n```\nRunning this example takes 5 to 25 minutes depending on the system used. The analysis results of netGO is shown below.<br>\n \n<img src ='https://user-images.githubusercontent.com/6457691/70370939-f5f68880-190f-11ea-9615-b11fb789fd0e.png'></img>\n \n"
      },
      "source": "https://raw.githubusercontent.com/unistbig/netGO/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9527452121173212,
      "result": {
        "original_header": "**Data Formats**",
        "type": "Text_excerpt",
        "value": "## :memo: Data \n"
      },
      "source": "https://raw.githubusercontent.com/unistbig/netGO/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8955972133161298,
      "result": {
        "original_header": "Human",
        "type": "Text_excerpt",
        "value": "|Data|genes|genesets|network|genesetV|\n|:---:|:---:|:---:|:---:|:---:|\n|Breast Tumor|brca.RData|c2gs.RData|networkString.RData networkHumannet.RData|genesetVString1,2.RData genesetVHumannet1,2.RData|\n|P53|p53.RData|c2gs.RData|networkString.RData networkHumannet.RData|genesetVString1,2.RData genesetVHumannet1,2.RData|\n|Diabetes|dg.RData|cpGenesets.RData|networkString.RData networkHumannet.RData|cpgenesetV1,2.RData| \n"
      },
      "source": "https://raw.githubusercontent.com/unistbig/netGO/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8856752707784113,
      "result": {
        "original_header": "**Data Formats**",
        "type": "Text_excerpt",
        "value": "|Data|genes|genesets|network|genesetV|\n|:---:|:---:|:---:|:---:|:---:|\n|ShadowResponse|Aragenes.RData|KEGGara.RData|networkAranet.RData|AragenesetV.RData| \n#### Mouse & Yeast ( gene-set and networks available ) \n"
      },
      "source": "https://raw.githubusercontent.com/unistbig/netGO/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9712128229659985,
      "result": {
        "original_header": "Mouse &amp; Yeast ( gene-set and networks available )",
        "type": "Text_excerpt",
        "value": "### <b>Data Formats</b> \nnetGO requires the follwoing four data types.<br>\n- *genes* : a character vector of input genes (e.g., differentially expressed genes).<br>\n- *genesets* : a named list of gene-sets consisting of groups of genes to be tested.<br>\n- *network* : a numeric matrix of network data. The network scores are normalized to the unit interval [0,1] by dividing each score by the maximum score<br>\n- *genesetV* : A numeric matrix of pre-calculated interaction data between gene and gene-sets.<br>\n  The dimension of matrix must be [{number of genes} , {number of gene-sets}]. <br>\n  It can be built by using *BuildGenesetV* function with network and genesets objects as the input arguments. \n"
      },
      "source": "https://raw.githubusercontent.com/unistbig/netGO/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9768357489598936,
      "result": {
        "original_header": "1. netGO",
        "type": "Text_excerpt",
        "value": "netGO function tests the significance of the gene-sets for the input gene list<br>\nand returns a data frame of gene-sets, their *p*-values, *q*-values derived from netGO+, Fisher\u2019s exact test and netGO (optional) as well as the scores for the network interaction and overlap.<br> \n"
      },
      "source": "https://raw.githubusercontent.com/unistbig/netGO/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9392261951063494,
      "result": {
        "original_header": "Mouse &amp; Yeast ( gene-set and networks available )",
        "type": "Text_excerpt",
        "value": "<b>Input arguments</b>\n \n* genes: a character vector of input genes (e.g., differentially expressed genes).<br>\n* genesets: a list of gene-sets consisting of groups of genes.<br>\n* network: A numeric matrix of network data. The network scores are normalized to the unit interval [0,1]. 1 represents strong interaction and 0 for no interaction<br>\n  \n  | |A|B|C|\n  |:--:|:--:|:--:|:--:|\n  |A|0|0.1|0.76|\n  |B|0.1|0|0.324|\n  |C|0.76|0.324|0|\n  \n* genesetV: a numeric matrix of pre-calculated interaction data between genes and gene-sets.<br>\n  This object can be built with *BuildGenesetV* function.\n  \n  | |Gene-set1|Gene-set2|Gene-set3|\n  |:--:|:--:|:--:|:--:|\n  |A|0.837|1.647|0.074|\n  |B|0|1.75|0.113|\n  |C|0.464|0.486|2.442|\n    \n* alpha (optional): a numeric parameter ( \u2265 1; the default is 20) that weights the contribution of network connections in enrichment analysis.<br>\n  \n* beta (optional): a numeric parameter (\u2208[0,1]; the default is 0.5) that balances the weights between the relative and absolute network scores.<br> \n* nperm (optional): a numeric parameter to determine the bin size (number of genes) to be used during resampling. The default is NULL which assigns approximately 2000 genes to each bin<br>  \n* pvalue (optional): a boolean parameter to determine whether to return Q-values only ( FALSE ) or both P-values and Q-values (TRUE)<br>\n* plus (optional): a boolean parameter to determine whether to run both netGO and netGO+ (plus = FALSE) or netGO+ only ( plus = TRUE, default )<br>\n* verbose (optional) : a boolean parameter whether to show more process of netGO as follows.<br> \n**Notice** the input genes should be represented in **gene symbols** when using the default networks and gene-sets (STRING and MSigDB). <br>\nOther types of gene names are also allowed if the corresponding customized data (networks and gene-set data) are used. <br> \nnetGOVis function visualizes the analysis results on the web browser (google chrome is recommended).<br> \nThe resulting graphs (svg format) and table are downloadable from the web browser.<br> \n* obj: the data frame of analysis results obtained by running **netGO** function.<br>\nIt consists of multiple columns including <br> \n1.\tgene-set name and p, q-values evaluated using netGO (optional), netGO+, and Fisher\u2019s exact test as well as the scores for the overlap and networks.<Br> \n* genes, genesets, network: the same as those in the *netGO* function.<br> \n* R (optional): gene-set rank threshold, The default is 50 (Top 50 gene-sets in either method will be shown).<br>\n* Q (optional): Gene-set Q-value threshold, The default is 0.25. (gene-sets with Q-value \u2264 0.25 will be used)<br> \nBuildGenesetV function will build genesetV object using the given *network* and *genesets*. <br>\ngenesetV is pre-calculated interaction files used to reduce the running time of netGO. \nThis function will download example data in the user's working directory and load the data ( breast tumor, [GSE3744](https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE3744) ) in user's R environment.<br>\nNote that, if objects exist in the working directory, this function will not download the data again, so we recommand removing and downloading them again if netGO package is updated. <br> \n* geneset : a character vector of gene symbols (e.g., member of genesets object in *netGO*).<br> \nthe exported data are shown as \n'Inter' means geneB belongs to the intersection of *genes* and *genesets*.\n'Inner' means geneB belongs to the differenced set *genesets* \u2013 *genes*. \nexportTable will export the result object of netGO as table or data.table. \nThe netGO analysis results are visualized through three panels: interaction networks, list of significant gene-sets, and the bubble chart.<br> \n* This panel contains the list of significant gene-sets as well as their Q-values ( or P-values ) evaluated from netGO, netGO+ and Fisher\u2019s exact test. It is downloadable by clicking the \u2018Download Table\u2019 button in the upper right corner of the table <br> \n <img src ='https://user-images.githubusercontent.com/6457691/70425051-c84a4480-1ab3-11ea-8eb4-4b45385943fe.png'></img>\n \n### <b>Bubble chart</b>\n \n* This module plots the bubble chart of significant gene-sets for the netGO+ results.\n* The overlap (x-axis) and network (y-axis) scores of the significant gene-sets are represented.\n*\tThe size of bubbles represents the significance level of each gene-set in -log10 scale (Qvalue).\n* Hovering/Click on each bubble will show corresponding statistical values.\n \n<img src ='https://user-images.githubusercontent.com/6457691/70425757-1c095d80-1ab5-11ea-99f6-4198fa48b384.png'></img>\n \n## :blush: Contact \nThis project is [MIT](https://opensource.org/licenses/MIT) licensed \n### 1. netGO\nnetGO function tests the significance of the gene-sets for the input gene list<br>\nand returns a data frame of gene-sets, their *p*-values, *q*-values derived from netGO+, Fisher\u2019s exact test and netGO (optional) as well as the scores for the network interaction and overlap.<br> \n## :blue_book: Visualization and exploration of netGO analysis results \n"
      },
      "source": "https://raw.githubusercontent.com/unistbig/netGO/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9428774657266942,
      "result": {
        "original_header": "**Bubble chart**",
        "type": "Text_excerpt",
        "value": " <img src ='https://user-images.githubusercontent.com/6457691/70425051-c84a4480-1ab3-11ea-8eb4-4b45385943fe.png'></img>\n \n### <b>Bubble chart</b>\n \n* This module plots the bubble chart of significant gene-sets for the netGO+ results.\n* The overlap (x-axis) and network (y-axis) scores of the significant gene-sets are represented.\n*\tThe size of bubbles represents the significance level of each gene-set in -log10 scale (Qvalue).\n* Hovering/Click on each bubble will show corresponding statistical values.\n \n<img src ='https://user-images.githubusercontent.com/6457691/70425757-1c095d80-1ab5-11ea-99f6-4198fa48b384.png'></img>\n  \n"
      },
      "source": "https://raw.githubusercontent.com/unistbig/netGO/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.997653244291015,
      "result": {
        "type": "Text_excerpt",
        "value": "netGO is an R/Shiny package for network-integrated pathway enrichment analysis.\nnetGO provides user-interactive visualization of enrichment analysis results and related networks. \nCurrently, netGO supports analysis for four species (*, , ,and *)\nThese data are available from  repository. \n"
      },
      "source": "https://raw.githubusercontent.com/unistbig/netGO/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/unistbig/netGO/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/unistbig/netGO/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "unistbig/netGO"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/unistbig/netGO/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://placehold.it/15/48dbfb/000000?text=+"
      },
      "source": "https://raw.githubusercontent.com/unistbig/netGO/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://placehold.it/15/48dbfb/000000?text=+"
      },
      "source": "https://raw.githubusercontent.com/unistbig/netGO/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://placehold.it/15/48dbfb/000000?text=+"
      },
      "source": "https://raw.githubusercontent.com/unistbig/netGO/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://placehold.it/15/48dbfb/000000?text=+"
      },
      "source": "https://raw.githubusercontent.com/unistbig/netGO/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://placehold.it/15/48dbfb/000000?text=+"
      },
      "source": "https://raw.githubusercontent.com/unistbig/netGO/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://placehold.it/15/48dbfb/000000?text=+"
      },
      "source": "https://raw.githubusercontent.com/unistbig/netGO/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://placehold.it/15/48dbfb/000000?text=+"
      },
      "source": "https://raw.githubusercontent.com/unistbig/netGO/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://placehold.it/15/48dbfb/000000?text=+"
      },
      "source": "https://raw.githubusercontent.com/unistbig/netGO/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://placehold.it/15/feca57/000000?text=+"
      },
      "source": "https://raw.githubusercontent.com/unistbig/netGO/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://placehold.it/15/1dd1a1/000000?text=+"
      },
      "source": "https://raw.githubusercontent.com/unistbig/netGO/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/unistbig/netGO/master/etGO is an R/Shiny package for network-integrated pathway enrichment analysis.<br>\nnetGO provides user-interactive visualization of enrichment analysis results and related networks.<br></p>\n<p>Currently, netGO supports analysis for four species (<em><a href="
      },
      "source": "https://raw.githubusercontent.com/unistbig/netGO/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/unistbig/netGO/master/etGO is an R/Shiny package for network-integrated pathway enrichment analysis.<br>\nnetGO provides user-interactive visualization of enrichment analysis results and related networks.<br></p>\n<p>Currently, netGO supports analysis for four species (<em><a href="
      },
      "source": "https://raw.githubusercontent.com/unistbig/netGO/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9999514127073229,
      "result": {
        "original_header": "**Data Formats**",
        "type": "Text_excerpt",
        "value": "## :clipboard: Prerequisites\nThe R packages listed below are required to be installed before running netGO.(Alphabetical order)<br> \n"
      },
      "source": "https://raw.githubusercontent.com/unistbig/netGO/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9946685453075991,
      "result": {
        "original_header": ":clipboard: Prerequisites",
        "type": "Text_excerpt",
        "value": "* Most of the packages are avaiable from [CRAN](https://cran.r-project.org/), but [shinyCyJS](https://github.com/unistbig/shinyCyJS) should be installed from github.<br> \n* Linux user has to install V8 after installing the other packages.<br> \nOn Debian / Ubuntu : libv8-dev or libnode-dev. <br>\nOn Fedora : v8-devel <br>\n[more information](https://cran.r-project.org/web/packages/V8/index.html) \n\nThe user may want to use the following codes to install the required packages.\n``` R\ninstall.packages('devtools') # 2.2.1\nlibrary(devtools) # check Rcpp package is installed.\ninstall_github('unistbig/shinyCyJS')\ninstall.packages('doParallel') # 1.0.15\ninstall.packages('doSNOW') # 1.0.18\ninstall.packages('DT') # 0.11\ninstall.packages('foreach') # 1.4.7\ninstall.packages('googleVis') # 0.6.4\ninstall.packages('htmlwidgets') # 1.5.1\ninstall.packages('shiny') # 1.4.0\ninstall.packages('shinyjs') # 1.0\ninstall.packages('V8') # 2.3\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/unistbig/netGO/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9835733502155177,
      "result": {
        "original_header": ":wrench: Running with an example data",
        "type": "Text_excerpt",
        "value": "<br>  \n<img src = 'https://user-images.githubusercontent.com/6457691/70369640-09015c80-1900-11ea-9eb3-f825e2cbf511.png'></img> \n"
      },
      "source": "https://raw.githubusercontent.com/unistbig/netGO/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9432666161263474,
      "result": {
        "original_header": "Mouse &amp; Yeast ( gene-set and networks available )",
        "type": "Text_excerpt",
        "value": "<img src = 'https://user-images.githubusercontent.com/6457691/71439289-61c45800-273c-11ea-86db-a06bec993486.png' width = 500></img> \n<img src='https://user-images.githubusercontent.com/6457691/71439716-0e530980-273e-11ea-8b27-3621c90416cc.png'></img> \nAfter running the netGO function, the user may see the following logs in the R console. \n<img src = 'https://user-images.githubusercontent.com/6457691/71439835-6a1d9280-273e-11ea-922a-06bf35c45658.png'></img>\n            \nand user's default web browser (<b>netGO was built based on chrome environment</b>) will return the following interactive visualization: \n<img src = 'https://user-images.githubusercontent.com/6457691/71439882-946f5000-273e-11ea-952f-6eda92b3f090.png' width = 700></img>\n                        \n<hr> \n<img src='https://user-images.githubusercontent.com/6457691/71440782-eb2a5900-2741-11ea-99ad-1e147e5e142b.gif' width = 500></img>\n<hr> \n <img src = 'https://user-images.githubusercontent.com/6457691/70425850-4e1abf80-1ab5-11ea-96a3-84ac3e82d9f9.png' width = 900></img> \n"
      },
      "source": "https://raw.githubusercontent.com/unistbig/netGO/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8632712698697479,
      "result": {
        "original_header": "**Data Formats**",
        "type": "Text_excerpt",
        "value": "## :wrench: Running with an example data \n"
      },
      "source": "https://raw.githubusercontent.com/unistbig/netGO/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/unistbig/netGO/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "enrichment-analysis, netgo, network-analysis, protein-protein-interaction, r, shinyapps"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2019 jhk0530\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
      },
      "source": "https://raw.githubusercontent.com/unistbig/netGO/master/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": ":memo: License",
        "type": "Text_excerpt",
        "value": "This project is [MIT](https://opensource.org/licenses/MIT) licensed\n\n"
      },
      "source": "https://raw.githubusercontent.com/unistbig/netGO/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/unistbig/netGO/master/etGO is an R/Shiny package for network-integrated pathway enrichment analysis.<br>\nnetGO provides user-interactive visualization of enrichment analysis results and related networks.<br></p>\n<p>Currently, netGO supports analysis for four species (<em><a href="
      },
      "source": "https://raw.githubusercontent.com/unistbig/netGO/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "netGO"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "unistbig"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 54204,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "SCSS",
        "size": 41837,
        "type": "Programming_language",
        "value": "SCSS"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Less",
        "size": 41289,
        "type": "Programming_language",
        "value": "Less"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "JavaScript",
        "size": 25655,
        "type": "Programming_language",
        "value": "JavaScript"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CSS",
        "size": 3685,
        "type": "Programming_language",
        "value": "CSS"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/unistbig/netGO/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": ":clipboard: Prerequisites",
        "type": "Text_excerpt",
        "value": "The R packages listed below are required to be installed before running netGO.(Alphabetical order)<br>\n\n*devtools, doParallel, doSNOW, DT, foreach, googleVis, htmlwidgets, shiny, shinyCyJS, shinyjs, V8*\n\n* Most of the packages are avaiable from [CRAN](https://cran.r-project.org/), but [shinyCyJS](https://github.com/unistbig/shinyCyJS) should be installed from github.<br>\n\n* Linux user has to install V8 after installing the other packages.<br>\n\n* Note that netGO is not supported for centOS 8, because V8 is not available in centOS 8.<br>\n\nOn Debian / Ubuntu : libv8-dev or libnode-dev. <br>\nOn Fedora : v8-devel <br>\n[more information](https://cran.r-project.org/web/packages/V8/index.html)\n\n\nThe user may want to use the following codes to install the required packages.\n\n``` R\ninstall.packages('devtools') # 2.2.1\nlibrary(devtools) # check Rcpp package is installed.\ninstall_github('unistbig/shinyCyJS')\ninstall.packages('doParallel') # 1.0.15\ninstall.packages('doSNOW') # 1.0.18\ninstall.packages('DT') # 0.11\ninstall.packages('foreach') # 1.4.7\ninstall.packages('googleVis') # 0.6.4\ninstall.packages('htmlwidgets') # 1.5.1\ninstall.packages('shiny') # 1.4.0\ninstall.packages('shinyjs') # 1.0\ninstall.packages('V8') # 2.3\n```\n"
      },
      "source": "https://raw.githubusercontent.com/unistbig/netGO/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": ":wrench: Running with an example data",
        "type": "Text_excerpt",
        "value": "Here are codes to run netGO for the breast tumor dataset (*GEO [GSE3744](https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE3744).*)<br>\n\n```r  \nlibrary(devtools)\ninstall_github('unistbig/netGO') # install netGO library\n\nlibrary(netGO) # load netGO library\nDownloadExampleData() # Download and load the breast tumor data\nobj = netGO(genes = brca[1:30], genesets, network, genesetV) \n\n# The user may also load the pre-calculated result using the following command\n# load(\"brcaresult.RData\")   \n```\n\nFor custom data analysis, \n\n```r\nlibrary(netGO)\nuserGenesetV = BuildGenesetV(genesets = userGenesets, network = userNetwork)\nobj = netGO(genes = userGenes, genesets = userGenesets, network = userNetwork, genesetV = userGenesetV)\n```\nRunning this example takes 5 to 25 minutes depending on the system used. The analysis results of netGO is shown below.<br>\n \n<img src ='https://user-images.githubusercontent.com/6457691/70370939-f5f68880-190f-11ea-9615-b11fb789fd0e.png'></img>\n\nThe analysis result can be visualized using the following codes:<br>  \n```r  \nnetGOVis(obj, genes = brca[1:30], genesets, network, R = 50, Q = 0.25 ) # visualize netGO's result\n```\n\n<br>  \n<img src = 'https://user-images.githubusercontent.com/6457691/70369640-09015c80-1900-11ea-9eb3-f825e2cbf511.png'></img>\n\nIf user wants to access result without shinyweb-application, the following functions can be used to export the result as text files<br>\n\n```r \n# exportGraphTxt\ntable = exportGraphTxt(gene = brca[1:30], geneset = \ngenesets[['SMID_BREAST_CANCER_NORMAL_LIKE_UP']], network) # table\nhead(table)\n\n# exportGraph\ngraph = exportGraph(brca[1:30], geneset = \ngenesets[['SMID_BREAST_CANCER_NORMAL_LIKE_UP']], network) # shinyCyJS graph object\nshinyCyJS(graph)\n\n# exportTable\ntable = exportTable(obj, R = 50, Q = 0.25) # table\nhead(table)\n\ndtable = exportTable(obj, type='D', R = 50, Q = 0.25) # data.table\ndtable\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/unistbig/netGO/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 10:58:05",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 14
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": ":wrench: Running with an example data",
        "type": "Text_excerpt",
        "value": "Here are codes to run netGO for the breast tumor dataset (*GEO [GSE3744](https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE3744).*)<br>\n\n```r  \nlibrary(devtools)\ninstall_github('unistbig/netGO') # install netGO library\n\nlibrary(netGO) # load netGO library\nDownloadExampleData() # Download and load the breast tumor data\nobj = netGO(genes = brca[1:30], genesets, network, genesetV) \n\n# The user may also load the pre-calculated result using the following command\n# load(\"brcaresult.RData\")   \n```\n\nFor custom data analysis, \n\n```r\nlibrary(netGO)\nuserGenesetV = BuildGenesetV(genesets = userGenesets, network = userNetwork)\nobj = netGO(genes = userGenes, genesets = userGenesets, network = userNetwork, genesetV = userGenesetV)\n```\nRunning this example takes 5 to 25 minutes depending on the system used. The analysis results of netGO is shown below.<br>\n \n<img src ='https://user-images.githubusercontent.com/6457691/70370939-f5f68880-190f-11ea-9615-b11fb789fd0e.png'></img>\n\nThe analysis result can be visualized using the following codes:<br>  \n```r  \nnetGOVis(obj, genes = brca[1:30], genesets, network, R = 50, Q = 0.25 ) # visualize netGO's result\n```\n\n<br>  \n<img src = 'https://user-images.githubusercontent.com/6457691/70369640-09015c80-1900-11ea-9eb3-f825e2cbf511.png'></img>\n\nIf user wants to access result without shinyweb-application, the following functions can be used to export the result as text files<br>\n\n```r \n# exportGraphTxt\ntable = exportGraphTxt(gene = brca[1:30], geneset = \ngenesets[['SMID_BREAST_CANCER_NORMAL_LIKE_UP']], network) # table\nhead(table)\n\n# exportGraph\ngraph = exportGraph(brca[1:30], geneset = \ngenesets[['SMID_BREAST_CANCER_NORMAL_LIKE_UP']], network) # shinyCyJS graph object\nshinyCyJS(graph)\n\n# exportTable\ntable = exportTable(obj, R = 50, Q = 0.25) # table\nhead(table)\n\ndtable = exportTable(obj, type='D', R = 50, Q = 0.25) # data.table\ndtable\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/unistbig/netGO/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Human",
        "parent_header": [
          ":memo: Data",
          "**Example Datasets** <a href=\"https://github.com/unistbig/netGO-Data\">(netGO-Data repository)</a> <br>"
        ],
        "type": "Text_excerpt",
        "value": "|Data|genes|genesets|network|genesetV|\n|:---:|:---:|:---:|:---:|:---:|\n|Breast Tumor|brca.RData|c2gs.RData|networkString.RData networkHumannet.RData|genesetVString1,2.RData genesetVHumannet1,2.RData|\n|P53|p53.RData|c2gs.RData|networkString.RData networkHumannet.RData|genesetVString1,2.RData genesetVHumannet1,2.RData|\n|Diabetes|dg.RData|cpGenesets.RData|networkString.RData networkHumannet.RData|cpgenesetV1,2.RData|\n\nThe user can download the  breast tumor data using *DownloadExampleData* function(Recommended)\n"
      },
      "source": "https://raw.githubusercontent.com/unistbig/netGO/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Arabidopsis thaliana",
        "parent_header": [
          ":memo: Data",
          "**Example Datasets** <a href=\"https://github.com/unistbig/netGO-Data\">(netGO-Data repository)</a> <br>"
        ],
        "type": "Text_excerpt",
        "value": "|Data|genes|genesets|network|genesetV|\n|:---:|:---:|:---:|:---:|:---:|\n|ShadowResponse|Aragenes.RData|KEGGara.RData|networkAranet.RData|AragenesetV.RData|\n"
      },
      "source": "https://raw.githubusercontent.com/unistbig/netGO/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Mouse &amp; Yeast ( gene-set and networks available )",
        "parent_header": [
          ":memo: Data",
          "**Example Datasets** <a href=\"https://github.com/unistbig/netGO-Data\">(netGO-Data repository)</a> <br>"
        ],
        "type": "Text_excerpt",
        "value": "|Species|genesets|network|\n|:----:|:----:|:----:|\n|Mouse|KEGGmouse.Rdata|networkMousenet.Rdata|\n|Yeast|KEGGyeast.Rdata|networkYeastnet.Rdata|\n\n### <b>Data Formats</b>\n\nnetGO requires the follwoing four data types.<br>\n- *genes* : a character vector of input genes (e.g., differentially expressed genes).<br>\n- *genesets* : a named list of gene-sets consisting of groups of genes to be tested.<br>\n- *network* : a numeric matrix of network data. The network scores are normalized to the unit interval [0,1] by dividing each score by the maximum score<br>\n- *genesetV* : A numeric matrix of pre-calculated interaction data between gene and gene-sets.<br>\n  The dimension of matrix must be [{number of genes} , {number of gene-sets}]. <br>\n  It can be built by using *BuildGenesetV* function with network and genesets objects as the input arguments.\n\n  ```r\n  genesetV = BuildGenesetV(network, genesets)\n  ```  \n\n## :white_circle: Functions\n<hr>\n\n### 1. netGO\nnetGO function tests the significance of the gene-sets for the input gene list<br>\nand returns a data frame of gene-sets, their *p*-values, *q*-values derived from netGO+, Fisher\u2019s exact test and netGO (optional) as well as the scores for the network interaction and overlap.<br>\n\n<b>Input arguments</b>\n \n* genes: a character vector of input genes (e.g., differentially expressed genes).<br>\n* genesets: a list of gene-sets consisting of groups of genes.<br>\n* network: A numeric matrix of network data. The network scores are normalized to the unit interval [0,1]. 1 represents strong interaction and 0 for no interaction<br>\n  \n  | |A|B|C|\n  |:--:|:--:|:--:|:--:|\n  |A|0|0.1|0.76|\n  |B|0.1|0|0.324|\n  |C|0.76|0.324|0|\n  \n* genesetV: a numeric matrix of pre-calculated interaction data between genes and gene-sets.<br>\n  This object can be built with *BuildGenesetV* function.\n  \n  | |Gene-set1|Gene-set2|Gene-set3|\n  |:--:|:--:|:--:|:--:|\n  |A|0.837|1.647|0.074|\n  |B|0|1.75|0.113|\n  |C|0.464|0.486|2.442|\n    \n* alpha (optional): a numeric parameter ( \u2265 1; the default is 20) that weights the contribution of network connections in enrichment analysis.<br>\n  \n* beta (optional): a numeric parameter (\u2208[0,1]; the default is 0.5) that balances the weights between the relative and absolute network scores.<br>\n\n<img src = 'https://user-images.githubusercontent.com/6457691/71439289-61c45800-273c-11ea-86db-a06bec993486.png' width = 500></img>\n\n* nperm (optional): a numeric parameter to determine the bin size (number of genes) to be used during resampling. The default is NULL which assigns approximately 2000 genes to each bin<br>  \n* pvalue (optional): a boolean parameter to determine whether to return Q-values only ( FALSE ) or both P-values and Q-values (TRUE)<br>\n* plus (optional): a boolean parameter to determine whether to run both netGO and netGO+ (plus = FALSE) or netGO+ only ( plus = TRUE, default )<br>\n* verbose (optional) : a boolean parameter whether to show more process of netGO as follows.<br>\n\n<img src='https://user-images.githubusercontent.com/6457691/71439716-0e530980-273e-11ea-8b27-3621c90416cc.png'></img>\n\n**Notice** the input genes should be represented in **gene symbols** when using the default networks and gene-sets (STRING and MSigDB). <br>\nOther types of gene names are also allowed if the corresponding customized data (networks and gene-set data) are used. <br>\n\n<hr>\n\n### 2. netGOVis \n\nnetGOVis function visualizes the analysis results on the web browser (google chrome is recommended).<br> \nThe resulting graphs (svg format) and table are downloadable from the web browser.<br>\n\n<b>Input arguments</b>\n\n* obj: the data frame of analysis results obtained by running **netGO** function.<br>\nIt consists of multiple columns including <br>\n\n1.\tgene-set name and p, q-values evaluated using netGO (optional), netGO+, and Fisher\u2019s exact test as well as the scores for the overlap and networks.<Br>\n\n* genes, genesets, network: the same as those in the *netGO* function.<br> \n* R (optional): gene-set rank threshold, The default is 50 (Top 50 gene-sets in either method will be shown).<br>\n* Q (optional): Gene-set Q-value threshold, The default is 0.25. (gene-sets with Q-value \u2264 0.25 will be used)<br>\n\nAfter running the netGO function, the user may see the following logs in the R console.\n\n<img src = 'https://user-images.githubusercontent.com/6457691/71439835-6a1d9280-273e-11ea-922a-06bf35c45658.png'></img>\n            \nand user's default web browser (<b>netGO was built based on chrome environment</b>) will return the following interactive visualization:\n\n<img src = 'https://user-images.githubusercontent.com/6457691/71439882-946f5000-273e-11ea-952f-6eda92b3f090.png' width = 700></img>\n                        \n<hr>\n\n### 3. BuildGenesetV\n\nBuildGenesetV function will build genesetV object using the given *network* and *genesets*. <br>\ngenesetV is pre-calculated interaction files used to reduce the running time of netGO.\n\n<b>Input arguments</b>\n\n* genesets, network: the same as those in the *netGO* function.<br> \n<hr>\n\n### 4. DownloadExampleData\n\nThis function will download example data in the user's working directory and load the data ( breast tumor, [GSE3744](https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE3744) ) in user's R environment.<br>\nNote that, if objects exist in the working directory, this function will not download the data again, so we recommand removing and downloading them again if netGO package is updated. <br>\n\n<b>Input arguments</b>\n* none\n* R object named *brca, genesets, genesetV, network, obj* will be loaded. \n<hr>\n\n### 5. exportGraph\n\nexportGraph function will export network data from the netGO analsysis result as graph object that can be accessed using shinyCyJS function<br>\n\n<b>Input arguments</b>\n* genes, network : the same as those in the *netGO* function.<br> \n\n* geneset : a character vector of gene symbols (e.g., member of genesets object in *netGO*).<br>\n\nfor example, \n\n``` R\ngeneset = genesets[['SMID_BREAST_CANCER_NORMAL_LIKE_UP']]\ngraph = exportGraph(brca[1:30], geneset = \ngenesets[['SMID_BREAST_CANCER_NORMAL_LIKE_UP']], network) # shinyCyJS graph object\n\nshinyCyJS(graph)\n```\n\nHowever, the default viewer of R (not web browser) will not use the layout functions as shown below.<br>\n\n<img src='https://user-images.githubusercontent.com/6457691/71440782-eb2a5900-2741-11ea-99ad-1e147e5e142b.gif' width = 500></img>\n<hr>\n\n### 6. exportGraphTxt\n\nexportGraphTxt function will export network data from the netGO analysis result as table format.<br>\n\n<b>Input arguments</b>\n* genes, network, geneset : the same as those in the *exportGraph* function.<br> \n\nFor example, \n\n``` R\ntable = exportGraphTxt(brca[1:30], geneset, network)\nhead(table)\n```\n\nthe exported data are shown as\n\n|geneA|geneB|strength|type|\n|:---:|:---:|:---:|:---:|\n|A|B|0.1|Inter|\n|C|D|0.82|Inner|\n\n'Inter' means geneB belongs to the intersection of *genes* and *genesets*.\n'Inner' means geneB belongs to the differenced set *genesets* \u2013 *genes*.\n\n<hr>\n\n### 7. exportTable\n\nexportTable will export the result object of netGO as table or data.table.\n\n<b>Input arguments</b>\n* obj, R, Q : the same as those in the *netGOVis* function.<br> \n\nfor example, \n\n```R\ntable = exportTable(obj, R = 50, Q = 0.25) # table\nhead(table)\n\ndtable = exportTable(obj, type='D', R = 50, Q = 0.25) # data.table\ndtable\n```\n\nThe exported data have the format as follows:<br>\n\n|geneset name|netGO+ q-value| Fisher q-value |\n|:---:|:---:|:---:|\n|genesetA|0.11|0.2|\n\n<hr>\n\n## :blue_book: Visualization and exploration of netGO analysis results\n\nThe netGO analysis results are visualized through three panels: interaction networks, list of significant gene-sets, and the bubble chart.<br>\n\n### <b>Interaction Network</b>\n\n* The network panel displays the input genes, selected gene-set, and the network connections between the two.\n* ![#48dbfb](https://placehold.it/15/48dbfb/000000?text=+) Sky blue nodes represent input genes (e.g., differentially expressed genes) \n* ![#feca57](https://placehold.it/15/feca57/000000?text=+) Yellow nodes represent genes in the selected gene-set \n* ![#1dd1a1](https://placehold.it/15/1dd1a1/000000?text=+) Green nodes represent the intersection of input genes and the gene-set. \n* The edge width represents the strength of interaction between two nodes. \n* Genes without edges will be not be displayed.\n*\tThe gene-set can be selected by clicking on the gene-set name on the upper-right panel.\n*\tThe user can download the graph image as SVG format.\n\n <img src = 'https://user-images.githubusercontent.com/6457691/70425850-4e1abf80-1ab5-11ea-96a3-84ac3e82d9f9.png' width = 900></img>\n\n### <b>Significant gene-sets</b>\n\n* This panel contains the list of significant gene-sets as well as their Q-values ( or P-values ) evaluated from netGO, netGO+ and Fisher\u2019s exact test. It is downloadable by clicking the \u2018Download Table\u2019 button in the upper right corner of the table <br>\n\n <img src ='https://user-images.githubusercontent.com/6457691/70425051-c84a4480-1ab3-11ea-8eb4-4b45385943fe.png'></img>\n \n### <b>Bubble chart</b>\n \n* This module plots the bubble chart of significant gene-sets for the netGO+ results.\n* The overlap (x-axis) and network (y-axis) scores of the significant gene-sets are represented.\n*\tThe size of bubbles represents the significance level of each gene-set in -log10 scale (Qvalue).\n* Hovering/Click on each bubble will show corresponding statistical values.\n \n<img src ='https://user-images.githubusercontent.com/6457691/70425757-1c095d80-1ab5-11ea-99f6-4198fa48b384.png'></img>\n \n## :blush: Contact\n\n* Comments / suggestions and questions will be greatly appreciated,\n\n* :octocat: Jinhwan Kim [@jhk0530](http://github.com/jhk0530) *kjh0530@unist.ac.kr*\n\n* prof. Dougu Nam *dougnam@unist.ac.kr*\n\n## :memo: License\n\nThis project is [MIT](https://opensource.org/licenses/MIT) licensed\n\n"
      },
      "source": "https://raw.githubusercontent.com/unistbig/netGO/master/README.md",
      "technique": "header_analysis"
    }
  ]
}