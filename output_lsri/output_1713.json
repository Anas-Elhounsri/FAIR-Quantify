{
  "application_domain": [
    {
      "confidence": 48.31,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "Deep Network IP Protection"
        ],
        "type": "Text_excerpt",
        "value": "If you find this work useful for your research, please cite\n```bibtex\n@article{Deepipr,\n  title={DeepIPR: Deep Neural Network Ownership Verification with Passports},\n  author={Fan, Lixin and Ng, Kam Woh and Chan, Chee Seng and Qiang, Yang},\n  journal={IEEE Transactions on Pattern Analysis and Machine Intelligence},\n  year={2022},\n  volume={44},\n  number={10},\n  pages={6122-6139},\n  doi = {10.1109/TPAMI.2021.3088846}\n}\n```\n"
      },
      "source": "https://raw.githubusercontent.com/kamwoh/DeepIPR/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Fan, Lixin and Ng, Kam Woh and Chan, Chee Seng and Qiang, Yang",
        "doi": "10.1109/TPAMI.2021.3088846",
        "format": "bibtex",
        "title": "DeepIPR: Deep Neural Network Ownership Verification with Passports",
        "type": "Text_excerpt",
        "value": "@article{Deepipr,\n    doi = {10.1109/TPAMI.2021.3088846},\n    pages = {6122-6139},\n    number = {10},\n    volume = {44},\n    year = {2022},\n    journal = {IEEE Transactions on Pattern Analysis and Machine Intelligence},\n    author = {Fan, Lixin and Ng, Kam Woh and Chan, Chee Seng and Qiang, Yang},\n    title = {DeepIPR: Deep Neural Network Ownership Verification with Passports},\n}"
      },
      "source": "https://raw.githubusercontent.com/kamwoh/DeepIPR/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/kamwoh/DeepIPR"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-09-16T12:52:57Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-07-12T11:02:04Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "[NeurIPS 2019] This is the code repo of our novel passport-based DNN ownership verification schemes, i.e. we embed passport layer into various deep learning architectures (e.g. AlexNet, ResNet) for Intellectual Property Right (IPR) protection."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Description",
        "parent_header": [
          "Deep Network IP Protection"
        ],
        "type": "Text_excerpt",
        "value": "<p align=\"justify\"> With the rapid development of deep neural networks (DNN), there emerges an urgent need to protect the trained DNN models from being illegally copied, redistributed, or abused without respecting the intellectual properties of legitimate owners. This work proposes novel passport-based DNN ownership verification schemes which are both robust to network modifications and resilient to ambiguity attacks. The gist of embedding digital passports is to design and train DNN models in a way such that, the DNN model performance of an original task will be significantly deteriorated due to forged passports (see Figure 1). In other words genuine passports are not only verified by looking for predefined signatures, but also reasserted by the unyielding DNN model performances. </p>\n\n<p align=\"center\"> <img src=\"Ex2.gif\" width=\"25%\">   <img src=\"Ex1.gif\" width=\"25%\"> </p>\n<p align=\"center\"> Figure 1: Example of ResNet performance on CIFAR10 when (left) Random Attack and (right) Ambiguity Attack </p>\n"
      },
      "source": "https://raw.githubusercontent.com/kamwoh/DeepIPR/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.8488744205207072,
      "result": {
        "original_header": "Updates",
        "type": "Text_excerpt",
        "value": "1. Fix bugs\n2. Added training and attack bash scripts (see `training.sh` and `attacking.sh`)\n3. Added flipping attack (see `flip_attack.py`)\n4. Added ImageNet experiment\n5. Our framework on GAN IP protection is accepted in CVPR 2021, see [here](https://github.com/dingsheng-ong/ipr-gan).\n6. Our framework on RNN IP protection is accepted in AACL IJCNLP 2022, see [here](https://github.com/zhiqin1998/RecurrentIPR).\n7. Our framework on Multi-modal IP protection is accepted in Pattern Recognition 2022, see [here](https://github.com/jianhanlim/ipr-imagecaptioning).\n \n"
      },
      "source": "https://raw.githubusercontent.com/kamwoh/DeepIPR/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8619125325602502,
      "result": {
        "original_header": "Dataset",
        "type": "Text_excerpt",
        "value": "Most of the datasets will be automatically downloaded except the `trigger set` data. \n"
      },
      "source": "https://raw.githubusercontent.com/kamwoh/DeepIPR/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8121553593337627,
      "result": {
        "original_header": "Attack",
        "type": "Text_excerpt",
        "value": "`passport_attack_1.py`, `passport_attack_2.py`, and `passport_attack_3.py` are the scripts to run fake attack 1, 2 and 3 respectively, as mentioned in our paper. \n"
      },
      "source": "https://raw.githubusercontent.com/kamwoh/DeepIPR/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9273991334941627,
      "result": {
        "original_header": "How to embed passport &amp; signature into a desired layer",
        "type": "Text_excerpt",
        "value": "To set a passport layer for Alexnet or ResNet18, simply changing `false` to `true` or a `string`. \nIf `string` is deployed as the signature, please make sure that the length of the string is less than the number of channels in the specific layer. \nThe example below is AlexNet with the last 3 layers as the passport layer, i.e we embed random signature into the 4th and 5th layer and embed `this is my signature` into the last layer (6th).\n```\n{\n  \"0\": false,\n  \"2\": false,\n  \"4\": true,\n  \"5\": true,\n  \"6\": \"this is my signature\"\n}\n```\n \nFor passport in our experiments, we randomly choose 20 images from the test data. Passports in the intermediate layer will be the activation map of 20 images computed from pretrained model.\n \n"
      },
      "source": "https://raw.githubusercontent.com/kamwoh/DeepIPR/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/kamwoh/DeepIPR/tree/master/docs"
      },
      "technique": "file_exploration"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/kamwoh/DeepIPR/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 18
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/kamwoh/DeepIPR/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "kamwoh/DeepIPR"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Deep Network IP Protection"
      },
      "source": "https://raw.githubusercontent.com/kamwoh/DeepIPR/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kamwoh/DeepIPR/master/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/kamwoh/DeepIPR/master/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kamwoh/DeepIPR/master/training.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kamwoh/DeepIPR/master/attacking.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kamwoh/DeepIPR/master/Ex2.gif"
      },
      "source": "https://raw.githubusercontent.com/kamwoh/DeepIPR/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kamwoh/DeepIPR/master/Ex1.gif"
      },
      "source": "https://raw.githubusercontent.com/kamwoh/DeepIPR/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9505855739873875,
      "result": {
        "original_header": "- Rethinking Deep Neural Network Ownership Verification: Embedding Passports to Defeat Ambiguity Attacks",
        "type": "Text_excerpt",
        "value": "(Released on September 16, 2019) \n"
      },
      "source": "https://raw.githubusercontent.com/kamwoh/DeepIPR/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9950199533919778,
      "result": {
        "original_header": "Dataset",
        "type": "Text_excerpt",
        "value": "To download the default `trigger set` data, kindly refer to https://github.com/adiyoss/WatermarkNN \n"
      },
      "source": "https://raw.githubusercontent.com/kamwoh/DeepIPR/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9364937350229429,
      "result": {
        "original_header": "Attack",
        "type": "Text_excerpt",
        "value": "Please refer to `--help` on how to setup the arguments.\n \n"
      },
      "source": "https://raw.githubusercontent.com/kamwoh/DeepIPR/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/kamwoh/DeepIPR/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "deep-ipr, deep-learning, intellectual-property, ipr, neural-network-ownership, neurips, neurips-2019, nn-ownership, ownership-verification, passport, passport-layer"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "original_header": "License and Copyright",
        "parent_header": [
          "Deep Network IP Protection"
        ],
        "type": "Text_excerpt",
        "value": "The project is open source under BSD-3 license (see the ``` LICENSE ``` file).\n\n&#169;2019 Webank and Universiti Malaya.\n"
      },
      "source": "https://raw.githubusercontent.com/kamwoh/DeepIPR/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DeepIPR"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "kamwoh"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 185188,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 1058,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 592,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kamwoh/DeepIPR/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_papers": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/1909.07830"
      },
      "source": "https://raw.githubusercontent.com/kamwoh/DeepIPR/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "How to run",
        "parent_header": [
          "Deep Network IP Protection"
        ],
        "type": "Text_excerpt",
        "value": "For compability issue, please run the code using `python 3.6` and `pytorch 1.2`. Also, please see `requirements.txt` or `Dockerfile` to check out the environment.\n\nIf you wish to use a real image as the passport, please ensure that you have a pre-trained model before training the passport layer. \n\nTo see more arguments, please run the script with `--help`.\n\nThe example below is running on default arguments.\n"
      },
      "source": "https://raw.githubusercontent.com/kamwoh/DeepIPR/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "To train a normal model (without passport)",
        "parent_header": [
          "Deep Network IP Protection",
          "How to run"
        ],
        "type": "Text_excerpt",
        "value": "Skip `--train-passport` as follow:\n```\npython train_v1.py\n```\n"
      },
      "source": "https://raw.githubusercontent.com/kamwoh/DeepIPR/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "To train a V1 model (scheme 1 passport)",
        "parent_header": [
          "Deep Network IP Protection",
          "How to run"
        ],
        "type": "Text_excerpt",
        "value": "Run `--train-passport` as follow:\n```\npython train_v1.py --train-passport --pretrained-path path/to/pretrained.pth\n```\n"
      },
      "source": "https://raw.githubusercontent.com/kamwoh/DeepIPR/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "To train a V2 model (scheme 2 passport)",
        "parent_header": [
          "Deep Network IP Protection",
          "How to run"
        ],
        "type": "Text_excerpt",
        "value": "Skip `--train-private`, it is true by default.\n```\npython train_v23.py --pretrained-path path/to/pretrained.pth\n```\n"
      },
      "source": "https://raw.githubusercontent.com/kamwoh/DeepIPR/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "To train a V3 model (scheme 3 passport)",
        "parent_header": [
          "Deep Network IP Protection",
          "How to run"
        ],
        "type": "Text_excerpt",
        "value": "Run `--train-backdoor` as follow:\n```\npython train_v23.py --train-backdoor --pretrained-path path/to/pretrained.pth\n```\n"
      },
      "source": "https://raw.githubusercontent.com/kamwoh/DeepIPR/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "usage",
    "faq",
    "support",
    "identifier",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 05:59:22",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 77
      },
      "technique": "GitHub_API"
    }
  ]
}