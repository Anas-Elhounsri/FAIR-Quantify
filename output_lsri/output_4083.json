{
  "application_domain": [
    {
      "confidence": 30.34,
      "result": {
        "type": "String",
        "value": "Natural Language Processing"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "References",
        "parent_header": [
          "BingleSeq"
        ],
        "type": "Text_excerpt",
        "value": "Alvarez M.J., Shen Y., Giorgi F.M., Lachmann A., Ding B.B., Ye B.H., Califano A. (2016). \u201cFunctional characterization of somatic mutations in cancer using network-based inference of protein activity.\u201d Nature genetics, 48(8), 838\u201347.\n\nAlvarez MJ, Shen Y, Giorgi FM, Lachmann A, Ding BB, Ye BH, Califano A (2016). \u201cFunctional characterization of somatic mutations in cancer using network-based inference of protein activity.\u201d Nature genetics, 48(8), 838\u201347.\n\nBowden J, Ross J, Oytam Y (2019). HarmanData: Data for the Harman package. R package version 1.12.0, http://www.bioinformatics.csiro.au/harman/.\n\nCarlson, M. Falcon, S., Pages, H., Li, N., 2019. GO.db: A set of annotation maps describing the entire Gene Ontology. R package version 3.8.2.\n\nFinak, G., McDavid, A., Yajima, M., Deng, J., Gersuk, V., Shalek, A.K., Slichter, C.K., Miller, H.W., McElrath, M.J., Prlic, M. and Linsley, P.S., 2015. MAST: a flexible statistical framework for assessing transcriptional changes and characterizing heterogeneity in single-cell RNA sequencing data. Genome biology, 16(278) doi: 10.1186/s13059-015-0844-5.\n\nGarcia-Alonso L, Holland CH, Ibrahim MM, Turei D, Saez-Rodriguez J. \"Benchmark and integration of resources for the estimation of human transcription factor activities.\" Genome Research. 2019. DOI: \n\nHolland CH, Szalai B, Saez-Rodriguez J. \"Transfer of regulatory knowledge from human to mouse for functional genomics analysis.\" Biochimica et Biophysica Acta (BBA) - Gene Regulatory Mechanisms. 2019. DOI: 10.1016/j.bbagrm.2019.194431.\n\nHolland CH, Tanevski J, Perales-Pat\u00f3n J, Gleixner J, Kumar MP, Mereu E, Joughin BA, Stegle O, Lauffenburger DA, Heyn H, Szalai B, Saez-Rodriguez, J. \"Robustness and applicability of transcription factor and pathway analysis tools on single-cell RNA-seq data.\" Genome Biology. 2020. DOI: 10.1186/s13059-020-1949-z.\n\nKiselev, V.Y., Kirschner, K., Schaub, M.T., Andrews, T., Yiu, A., Chandra, T., Natarajan, K.N., Reik, W., Barahona, M., Green, A.R. and Hemberg, M., 2017. SC3: consensus clustering of single-cell RNA-seq data. Nature methods, 14(5), pp. 483\u2013486.\n\nKucukural, A., Yukselen, O., Ozata, D.M., Moore, M.J. and Garber, M., 2019. DEBrowser: interactive differential expression analysis and visualization tool for count data. BMC genomics, 20(6). DOI: https://doi.org/10.1186/s12864-018-5362-x\n\nLeek JT, Johnson WE, Parker HS, Fertig EJ, Jaffe AE, Storey JD, Zhang Y, Torres LC (2019). sva: Surrogate Variable Analysis. R package version 3.32.1.\n\nLi, Y. and Andrade, J., 2017. DEApp: an interactive web interface for differential expression analysis of next generation sequence data. Source code for biology and medicine, 12(2), doi: 10.1186/s13029-017-0063-4\n\nLove, M.I., Huber, W. and Anders, S., 2014. Moderated estimation of fold change and dispersion for RNA-seq data with DESeq2. Genome biology, 15(12). doi:10.1186/s13059-014-0550-8\n\nMcFarlane, S., Orr, A., Roberts, A.P., Conn, K.L., Iliev, V., Loney, C., da Silva Filipe, A., Smollett, K., Gu, Q., Robertson, N. and Adams, P.D., 2019. The histone chaperone HIRA promotes the induction of host innate immune defences in response to HSV-1 infection. PLoS pathogens, 15(3). doi:10.1371/journal.ppat.1007667\n\nOytam Y, Sobhanmanesh F, Duesing K, Bowden JC, Osmond-McLeod M, Ross J (2016). \u201cRisk-conscious correction of batch effects: maximising information extraction from high-throughput genomic datasets.\u201d BMC Bioinformatics, 17(1), 1\u201317. doi: 10.1186/s12859-016-1212-5, http://dx.doi.org/10.1186/s12859-016-1212-5.\n\nRitchie, M.E., Phipson, B., Wu, D., Hu, Y., Law, C.W., Shi, W. and Smyth, G.K., 2015. limma powers differential expression analyses for RNA-sequencing and microarray studies. Nucleic acids research, 43(7), pp.e47-e47.\n\nRobinson, M.D., McCarthy, D.J. and Smyth, G.K., 2010. edgeR: a Bioconductor package for differential expression analysis of digital gene expression data. Bioinformatics, 26(1), pp.139-140.\n\nSatija, R., Farrell, J.A., Gennert, D., Schier, A.F. and Regev, A., 2015. Spatial reconstruction of single-cell gene expression data. Nature biotechnology, 33(5), pp.495-502.\n\nSchubert M, Klinger B, Kl\u00fcnemann M, Sieber A, Uhlitz F, Sauer S, Garnett MJ, Bl\u00fcthgen N, Saez-Rodriguez J (2018). \u201cPerturbation-response genes reveal signaling footprints in cancer gene expression.\u201d Nature communications, 9(20).\n\nSoneson, C., 2014. compcodeR\u2014an R package for benchmarking differential expression methods for RNA-seq data, Bioinformatics, 30(17), pp.2517\u20132518.\n\nTrapnell, C., Cacchiarelli, D., Grimsby, J., Pokharel, P., Li, S., Morse, M., Lennon, N.J., Livak, K.J., Mikkelsen, T.S. and Rinn, J.L., 2014. The dynamics and regulators of cell fate decisions are revealed by pseudotemporal ordering of single cells. Nature biotechnology, 32(4), pp. 381\u2013386.\n\nYoung, M.D., Wakefield, M.J., Smyth, G.K. and Oshlack, A., 2010. Gene ontology analysis for RNA-seq: accounting for selection bias. Genome biology, 11(R14). doi: https://doi.org/10.1186/gb-2010-11-2-r14.\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/dbdimitrov/BingleSeq"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-07-18T13:52:46Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-04-11T08:23:16Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "BingleSeq - A user-friendly R package for Bulk and Single-cell RNA-Seq data analyses"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9948241825295581,
      "result": {
        "original_header": "BingleSeq",
        "type": "Text_excerpt",
        "value": "BingleSeq - A user-friendly R package for Bulk and Single-cell RNA-Seq data analyses. \n"
      },
      "source": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9840206445123356,
      "result": {
        "original_header": "About",
        "type": "Text_excerpt",
        "value": "BingleSeq provides a comprehesnive solution to both Bulk and scRNA-Seq analyses, as such it is best to look at BingleSeq as two separate parts. \n"
      },
      "source": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.985576690888675,
      "result": {
        "original_header": "Bulk RNA-Seq",
        "type": "Text_excerpt",
        "value": "The Bulk RNA-Seq part follows the structure of a typical pipeline used for the DE analysis of Bulk RNA-Seq count data and it makes use of differential expression packages DESeq2 (Love, Huber, and Anders, 2014), edgeR (Robinson et al., 2010), and Limma (Ritchie et al., 2015). \n"
      },
      "source": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9472012803690074,
      "result": {
        "original_header": "Metadata table format",
        "type": "Text_excerpt",
        "value": "A metadata table is also required and its appropriate formating is key for the acquisition of correct results using the Bulk RNA-Seq part of the application. Metadata tables must be in this specific format: \n*The use of metadata tables was insipired by similar applications preceding BingleSeq - DEapp and DEBrowser (Li and Andrade, 2017; Kucukural et al., 2019).* \n"
      },
      "source": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8880271736237169,
      "result": {
        "original_header": "scRNA-Seq",
        "type": "Text_excerpt",
        "value": "The scRNA-Seq part is based on Seurat\u2019s pipeline (Satija et al., 2015) and follows a typical scRNA-Seq count analysis structure. Furthermore, clustering can be performed with monocle and SC3 packages (Trapnell et al., 2014; Kiselev et al., 2017).  \nBingleSeq's scRNA-Seq pipeline accepts 10x genomics data as well as count tables in the following format: \n"
      },
      "source": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8886792444433669,
      "result": {
        "original_header": "0. Data used",
        "type": "Text_excerpt",
        "value": "For the purpose of representation, a simulated two-group dataset with 4 replicates was generated with compcodeR package (Soneson, 2014).\n \n"
      },
      "source": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9911965286768839,
      "result": {
        "original_header": "1. Load Count Table and Metadata Table",
        "type": "Text_excerpt",
        "value": "To begin DE analysis of Bulk RNA-Seq data, first a count table with a specific format (shown above) must be loaded. BingleSeq allows some flexibility in terms of the \u2018separator\u2019 used. Once a count table is loaded, it is displayed to allow the user to check whether it was loaded appropriately. A metadata table is also required in a specific format (shown above). \n"
      },
      "source": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9825556884683008,
      "result": {
        "original_header": "2. Quality Control",
        "type": "Text_excerpt",
        "value": "When a count table is uploaded the \u2018Quality Control\u2019 tab is generated. This tab enables the user to filter genes below certain counts per million (CPM), Max, or Median thresholds. The results of the filtering and the raw data are displayed as summary tables, alongside histograms. \n"
      },
      "source": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9581643788873756,
      "result": {
        "original_header": "3. Differential Expression",
        "type": "Text_excerpt",
        "value": "Subsequent to filtering is the \u2018Differential Expression\u2019 tab, where the user is given the option to run DESeq2, edgeR, and limma pipelines. Upon DE pipeline completion, the results are displayed as a table that contains the log2 expression fold-change (logFC), package specific test statistics, p-value, and multiple-testing adjusted p-value (FDR). \n*Note that normalization between samples is done automatically with DE analysis using the package-specific methods for DESeq2 and edgeR, while limma also uses edgeR\u2019s TMM normalization approach.* \n"
      },
      "source": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9627992144482083,
      "result": {
        "original_header": "4. Visualization",
        "type": "Text_excerpt",
        "value": "In a typical DE analysis workflow, the next stage following DE analysis would be to proceed to the various visualization techniques. BingleSeq offers this functionality within the \u2018Visualize Data\u2019 tab, which allows users to pick from several key plotting techniques. Including A) Barchart plot presenting the number of up- and downregulated genes B) PCA plot, C) Volcano plot, and D) MA plot. Note that these results were generated with limma using real data taken from McFarlane et al., 2019. \n\nBingleSeq's visualization techniques were implemented with customization in mind, as users can specify parameters such as p-value threshold, fold-change threshold, and contrast of interest. Due to their versatility, heatmaps were designed as BingleSeq\u2019s most customizable plotting component. Furthemore, users can download the genes displayed in the heatmap. \n"
      },
      "source": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9601127740670955,
      "result": {
        "original_header": "5a.   Over-representation Analysis",
        "type": "Text_excerpt",
        "value": "# BingleSeq\nBingleSeq - A user-friendly R package for Bulk and Single-cell RNA-Seq data analyses. \n\n## About\nBingleSeq provides a comprehesnive solution to both Bulk and scRNA-Seq analyses, as such it is best to look at BingleSeq as two separate parts. \n\n### Bulk RNA-Seq\nThe Bulk RNA-Seq part follows the structure of a typical pipeline used for the DE analysis of Bulk RNA-Seq count data and it makes use of differential expression packages DESeq2 (Love, Huber, and Anders, 2014), edgeR (Robinson et al., 2010), and Limma (Ritchie et al., 2015). \n#### Metadata table format\nA metadata table is also required and its appropriate formating is key for the acquisition of correct results using the Bulk RNA-Seq part of the application. Metadata tables must be in this specific format: \n### scRNA-Seq\nThe scRNA-Seq part is based on Seurat\u2019s pipeline (Satija et al., 2015) and follows a typical scRNA-Seq count analysis structure. Furthermore, clustering can be performed with monocle and SC3 packages (Trapnell et al., 2014; Kiselev et al., 2017).  \n### Bulk RNA-Seq Data analysis typical workflow. \n#### 0. Data used\nFor the purpose of representation, a simulated two-group dataset with 4 replicates was generated with compcodeR package (Soneson, 2014). \n#### 1.\tLoad Count Table and Metadata Table\nTo begin DE analysis of Bulk RNA-Seq data, first a count table with a specific format (shown above) must be loaded. BingleSeq allows some flexibility in terms of the \u2018separator\u2019 used. Once a count table is loaded, it is displayed to allow the user to check whether it was loaded appropriately. A metadata table is also required in a specific format (shown above). \n\n#### 2.\tQuality Control\nWhen a count table is uploaded the \u2018Quality Control\u2019 tab is generated. This tab enables the user to filter genes below certain counts per million (CPM), Max, or Median thresholds. The results of the filtering and the raw data are displayed as summary tables, alongside histograms. \n\n#### 3.\tDifferential Expression \nSubsequent to filtering is the \u2018Differential Expression\u2019 tab, where the user is given the option to run DESeq2, edgeR, and limma pipelines. Upon DE pipeline completion, the results are displayed as a table that contains the log2 expression fold-change (logFC), package specific test statistics, p-value, and multiple-testing adjusted p-value (FDR). \n#### 4.\tVisualization\nIn a typical DE analysis workflow, the next stage following DE analysis would be to proceed to the various visualization techniques. BingleSeq offers this functionality within the \u2018Visualize Data\u2019 tab, which allows users to pick from several key plotting techniques. Including A) Barchart plot presenting the number of up- and downregulated genes B) PCA plot, C) Volcano plot, and D) MA plot. Note that these results were generated with limma using real data taken from McFarlane et al., 2019. \n#### Functional Annotation\n##### 5a.\tOver-representation Analysis\nFollowing DE analysis, BingleSeq enables the Functional Annotation analysis of DE results within the \u2018Functional Annotation\u2019 tab via GOseq package (Young et al., 2010). The GOseq pipeline enables users to obtain results from KEGG pathway analysis and three types of GO categories, including \u2018Cellular Component\u2019, \u2018Molecular Function\u2019, and \u2018Biological Function\u2019. To run the pipeline users are first prompted to filter the DEGs according to logFC and adjusted p-value (FDR). Users can then select several parameters before running the pipeline with the previously obtained subset of DEGs. These parameters include the GO category, multiple-testing corrected or uncorrected p-value, gene symbol type, and genome of interest. \n"
      },
      "source": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.949899181188599,
      "result": {
        "original_header": "As of v3.6, BingleSeq implements the following GOSeq Model organisms:",
        "type": "Text_excerpt",
        "value": "Homo sapiens, Mus musculus, Danio rerio, Drosophila melanogaster, E. coli K12.\nPlease do not hesitate to contact us or open a GitHub issue if you want us to include additional model organism.\nHowever, it should be noted that GOSeq requires gene lengths for its usual functions and not all model organisms' genomes have such available.\nRefer to the GOSeq manual for further information as well as a way to obtain  \nOnce the GOseq pipeline is run and completed, a table with results is returned. \n##### 5b.\tFootprint Analysis\nBingleSeq also enables the use of footprint analysis tools DoRothEA and PROGENy\n(Schubert et al., 2018; Garcia-Alonso, et al., 2019; Holland et al., 2019,\nHolland et al., 2020). These tools are used infer the activity of TFs and\npathways, respectively. Footprint-based strategies such as the aforementioned\npackages infer TF/pathway activity from the expression of molecules considered\nto be downstream of a given TF or pathway (in the case of these tools). \nDoRothEA is a gene set resource containing signed TF-target interactions that \ncan be coupled with different statistical methods to estimate TF activity.\nIn BingleSeq, DoRothEA is coupled to the statistical method VIPER\n(Alvarez et al., 2016).\nPROGENy is based on downstream gene signatures observed to be consistently\nderegulated in pertrubation experiments. PROGENy estimates the activity of 14\nsignalling pathways from gene expression using a linear model.\nFor more information, please refer to the cited publications.\nDoRothEA and PROGENy are available for mouse and human data. \n![BingleSeq Bulk RNA-Seq Footprint Analysis Results](/figures/footprint.PNG)\nA) TF activities (using DE method statistic - e.g. t-value) and B) TF activities per sample (using normalized gene counts) estimated with DoRothEA and viper.\nPathway activity estimation with PROGENy showing C) the Normalized Enrichment Scores (NES) for each pathway and D) PROGENy pathway scores per sample. \n#### 6.\tDE Package Comparison\nBingleSeq supplies users with an option to assess the agreement between the different DE analysis packages. This is done using a Venn diagram which represents the overlap of DE analysis results obtained using DESeq2, edgeR, and limma on the same dataset. Moreover, users can download the genes from the different intersects of the Venn Diagram.  \nFurthermore, the DE results from the same packages are used to generate a **Rank-based consensus**. The Rank-based consensus is displayed as a table, alongside adjusted p-values and the ranks for each gene as calculated by the different packages. \n\n### Single-Cell RNA-Seq Data analysis typical workflow. \n#### 0. Data used\nFor the purpose of representation, a 10x genomics dataset was utilized (https://bit.ly/2Z3IUUk), which is also used in the Seurat package tutorial (https://bit.ly/2HlBfKx).\n  \n  \n#### 1.\tLoad Count Data\nTo begin the analysis of scRNA-Seq data, users can supply gene count data in two input types. The first input type is \u201810x Genomics data\u2019 in the form of a directory containing 10x Genomics protocol output files. These files include a matrix.mtx, barcodes.tsv, and genes.tsv files which represent the expression matrix, cell barcodes, and gene symbols, respectively. The second input type is a count table which must follow a specific format (shown above).\n  \n  \n#### 2.\tQuality Control\nOnce the data is loaded, the \u2018Quality Control\u2019 tab is generated which enables users to filter unwanted cells and features. Users can filter genes detected below a certain number of cells and cells with less than a certain number of expressed genes. These parameters are used when creating the initial Seurat object. Cell outliers can then be filtered according to the number of expressed features (i.e. genes) per cell. Visual aid is provided for filtering in terms of Violin plots which represent the number of genes (nFeature) and unique molecules (nCount_RNA) per cell. \n![BingleSeq Bulk RNA-Seq sc qcData](/figures/sc_qcData.PNG)\n  \n  \n#### 3.\tNormalization\nAfter excluding unwanted cells and features from the dataset, the next step is to normalize the data. BingleSeq provides two Seurat-based global-scaling normalization options. The first one is the \u201cLogNormalize\u201d method in which gene counts for each cell are divided by the total counts for that cell, multiplied by a \u2018scale factor\u2019, and then natural-log transformed. The second method is \u201cRelative Counts\u201d which follows the same procedure excluding the log transformation. Seurat's authors recommend using the former method when working with integer counts and the latter when working with relative counts. 10e4 is the recommended and default scale factor option, but when using CPM values the scale factor should be set to 10e6. \nSimultaneously with normalization, the highly variable features within the dataset are identified and these features are later used when clustering with Seurat. \nOnce normalization and feature selection methods are complete, a Variable Features plot is returned and displayed. Seurat\u2019s \u2018Feature Selection\u2019 methods include \u201cVST\u201d, \u201cMean Variance Plot\u201d, and \u201cDispersion\u201d. \n![BingleSeq Bulk RNA-Seq sc varPlot](/figures/sc_variancePlot.PNG)\n*This plot was genered using the recommended/default settings and the \"VST\" variance estimation method.*\n  \n*Note that \u2018Feature selection\u2019 does not apply to monocle and SC3 clustering approaches and hence their inbuilt pre-clustering filter procedures were implemented. These procedures have a similar purpose to Seurat\u2019s \u2018Feature Selection\u2019, as they can be used to filter out unwanted noise.*\n  \n  \n#### 4.\tClustering\nFollowing normalization, the \u2018Clustering\u2019 tab is generated which implements functionality for scaling of the data, dimensionality reduction with PCA, PC selection, and unsupervised clustering. The former three are done simultaneously and Seurat\u2019s \u2018PCElbowPlot\u2019 is used to generate and return an elbow plot. The returned elbow plot serves as a heuristic method for determining the true dimensionality of the dataset (i.e. PC Selection). Selecting which PCs to include in Seurat and monocle clustering methods is an essential step as it enables a large portion of technical noise to be excluded. \n*A) represents the 1st PC Heatmap with the top 10 most variable Genes and it is highly likely to represent part of the true dimensionality of the dataset. In contrast, B) represents the 15th PC Heatmap which likely represent mainly noise and not true signal.* \nOnce the count data is scaled and linear dimensionality reduction performed, users can proceed to unsupervised clustering with Seurat, SC3, and monocle.  \nWhen using Seurat for unsupervised clustering, users must specify the number of PCs to be included in the analysis as well as the value of its \u2018Resolution\u2019 parameter. The latter parameter is used to set the \u2018granularity\u2019 of the clustering and as such it controls the number of clusters. The authors suggest that the optimal Resolution for datasets with ~3000 cells is 0.6-1.2 and it is typically higher for larger datasets. Users can also choose from Seurat\u2019s inbuilt algorithms including Louvain and SLM algorithms. \n*tSNE plot produced using 0.5 as granularity parameter and the first 10 PCs.*\n  \n  \nWhen clustering with monocle, users are requested to specify the number of PCs to be included in the analysis. Also, if required users can further minimize noise by filtering the gene counts according to the minimum expression level via the \u2018Lower Detection Parameter\u2019. Users can also pick from monocle\u2019s inbuilt algorithms, which include Density Peak and Louvain algorithms. Furthermore, Monocle enables the number of clusters to be explicitly specified as well as to be estimated.\n  \n  \n![BingleSeq Bulk RNA-Seq sc clustMono](/figures/sc_clustMonocle.PNG) \n*tSNE plot produced by explicitly setting the number of clusters to 9 and using the first 10 PCs (without any additional filtering).* \n\nUnsupervised clustering with SC3 in BingleSeq utilizes SC3's k-means-based clusering approach. Users must specify the number of random initial centroid selections (sets). A larger number of initial centroid configurations (nStart) is likely to produce a better clustering result, but has a high toll on computational time. By default, this parameter is set to 1000 when working with less than 2000 cells and to 50 when working with more than 2000 cells, in accordance to the authors recommendantions.\nUsers can also use SC3\u2019s inbuilt filtering options to further reduce noise by filtering out genes below and above certain dropout (zero value) percentage thresholds. Similarly to monocle, the number of clusters can be supplied by user or estimated with SC3.\nIt is worth noting that the k-means approach of SC3 is likely too computationally demanding when working with large datasets (e.g. when N=2000, computational time is ~20 mins), hence future updates of BingleSeq are likely to also implement SC3's SVM-hybrid approach as an alternative solution.  \n*tSNE plot produced by explicitly setting the number of clusters to 9 and 50 random initial centroid sets (without any additional filtering).*\n  \n  \n*Each tSNE plot in BingleSeq is generated using the package with which clustering was performed.\nAlso, when performing clustering with SC3 or monocle, the data used to create the required objects to run these pipelines is the same data that was previously filtered, normalized, and scaled using Seurat\u2019s pipeline.* \n\n#### 5.\tDifferential Expression\nFollowing clustering, DE analysis can be conducted using Seurat\u2019s inbuilt functionality to identify marker genes. Users can perform marker gene identification using the following inbuilt DE testing methods: Student\u2019s T test, Wilcoxon Rank Sum test, and Logistic regression. Additionally, DE analysis can also be performed with DESEq2 and MAST packages (Love, Huber, and Anders, 2014; Finak et al., 2015). Prior to running DE analysis, users are prompted to enter the following filtering parameters: genes expressed in a minimum fraction of cells, fold-change, and adjusted p-value. \nFurthermore, by using Seurat\u2019s inbuilt visualization options, BingleSeq provides tools for the exploration of DE results. These tools include cluster heatmap with user-specified gene number as well as exploration of specific genes via Violin, Feature, and Ridge plots. \n*A) Heatmap showing the top 10 genes for each cluster in the 2700 PBMCs dataset, while Violin B), Feature C), and Ridge D) plots are shown for MS4A1 gene \u2013 a biomarker of B lymphocytes.* \n\n#### 6.\tFunctional Annotation\nThe scRNA-Seq pipeline of BingleSeq incorporates functional annotation in an analogous manner to its Bulk RNA-Seq counterpart. The only difference is that the subsets of DEGs to be used in the GOseq pipeline can be filtered according to the cluster they belong to; thus, allowing users to assess each cluster independently. Accordingly, it also implements both PROGENy and Dorothea-Viper which were implemented to estimate Pathway and TF activity per cell cluster, respectively.\n  \n  \n#### 7.\tDE Method Comparison\nThe scRNA-Seq part also implements a \u2018DE Method Comparison\u2019 tab analogous to the \u2018DE Package Comparison\u2019 tab in Bulk RNA-Seq. The only difference is that scRNA-Seq Overlap functionality enables filtering according to the same parameters used in marker gene identification. Furthermore, rather than comparing the different packages, it compares the DE Methods implemented within Seurat. These include: DE testing with MAST, Wilcoxon Rank Sum Test, and Student\u2019s T test. \n"
      },
      "source": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9831043738936522,
      "result": {
        "original_header": "7. DE Method Comparison",
        "type": "Text_excerpt",
        "value": "*Also, note that Rank-based consensus is yet to be implemented for the scRNA-Seq pipeline.*\n \n"
      },
      "source": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9420148122484534,
      "result": {
        "original_header": "As of v3.6, BingleSeq implements the following GOSeq Model organisms:",
        "type": "Text_excerpt",
        "value": "## Test Data\nAs of v0.3.2 BingleSeq features test data for both Bulk- and scRNA-Seq.\nBulk data - contrast between HSV-1 infected control and interferon B treatment (taken from McFarlane et al., 2019) \nSingle cell data - Cell Ranger 10x Genomics public dataset looking at filtered data of 2700 PBMCs\n[10x Genomics link](https://support.10xgenomics.com/single-cell-multiome-atac-gex/datasets/1.0.0/pbmc_unsorted_3k) \n## Built With \n\n## References\nAlvarez M.J., Shen Y., Giorgi F.M., Lachmann A., Ding B.B., Ye B.H., Califano A. (2016). \u201cFunctional characterization of somatic mutations in cancer using network-based inference of protein activity.\u201d Nature genetics, 48(8), 838\u201347. \nAlvarez MJ, Shen Y, Giorgi FM, Lachmann A, Ding BB, Ye BH, Califano A (2016). \u201cFunctional characterization of somatic mutations in cancer using network-based inference of protein activity.\u201d Nature genetics, 48(8), 838\u201347. \nBowden J, Ross J, Oytam Y (2019). HarmanData: Data for the Harman package. R package version 1.12.0, http://www.bioinformatics.csiro.au/harman/. \nCarlson, M. Falcon, S., Pages, H., Li, N., 2019. GO.db: A set of annotation maps describing the entire Gene Ontology. R package version 3.8.2. \nFinak, G., McDavid, A., Yajima, M., Deng, J., Gersuk, V., Shalek, A.K., Slichter, C.K., Miller, H.W., McElrath, M.J., Prlic, M. and Linsley, P.S., 2015. MAST: a flexible statistical framework for assessing transcriptional changes and characterizing heterogeneity in single-cell RNA sequencing data. Genome biology, 16(278) doi: 10.1186/s13059-015-0844-5. \nGarcia-Alonso L, Holland CH, Ibrahim MM, Turei D, Saez-Rodriguez J. \"Benchmark and integration of resources for the estimation of human transcription factor activities.\" Genome Research. 2019. DOI:  \nHolland CH, Szalai B, Saez-Rodriguez J. \"Transfer of regulatory knowledge from human to mouse for functional genomics analysis.\" Biochimica et Biophysica Acta (BBA) - Gene Regulatory Mechanisms. 2019. DOI: 10.1016/j.bbagrm.2019.194431. \nHolland CH, Tanevski J, Perales-Pat\u00f3n J, Gleixner J, Kumar MP, Mereu E, Joughin BA, Stegle O, Lauffenburger DA, Heyn H, Szalai B, Saez-Rodriguez, J. \"Robustness and applicability of transcription factor and pathway analysis tools on single-cell RNA-seq data.\" Genome Biology. 2020. DOI: 10.1186/s13059-020-1949-z. \nKiselev, V.Y., Kirschner, K., Schaub, M.T., Andrews, T., Yiu, A., Chandra, T., Natarajan, K.N., Reik, W., Barahona, M., Green, A.R. and Hemberg, M., 2017. SC3: consensus clustering of single-cell RNA-seq data. Nature methods, 14(5), pp. 483\u2013486. \nKucukural, A., Yukselen, O., Ozata, D.M., Moore, M.J. and Garber, M., 2019. DEBrowser: interactive differential expression analysis and visualization tool for count data. BMC genomics, 20(6). DOI: https://doi.org/10.1186/s12864-018-5362-x \nLi, Y. and Andrade, J., 2017. DEApp: an interactive web interface for differential expression analysis of next generation sequence data. Source code for biology and medicine, 12(2), doi: 10.1186/s13029-017-0063-4 \nLove, M.I., Huber, W. and Anders, S., 2014. Moderated estimation of fold change and dispersion for RNA-seq data with DESeq2. Genome biology, 15(12). doi:10.1186/s13059-014-0550-8 \nRitchie, M.E., Phipson, B., Wu, D., Hu, Y., Law, C.W., Shi, W. and Smyth, G.K., 2015. limma powers differential expression analyses for RNA-sequencing and microarray studies. Nucleic acids research, 43(7), pp.e47-e47. \nRobinson, M.D., McCarthy, D.J. and Smyth, G.K., 2010. edgeR: a Bioconductor package for differential expression analysis of digital gene expression data. Bioinformatics, 26(1), pp.139-140. \nSatija, R., Farrell, J.A., Gennert, D., Schier, A.F. and Regev, A., 2015. Spatial reconstruction of single-cell gene expression data. Nature biotechnology, 33(5), pp.495-502. \nSoneson, C., 2014. compcodeR\u2014an R package for benchmarking differential expression methods for RNA-seq data, Bioinformatics, 30(17), pp.2517\u20132518. \nTrapnell, C., Cacchiarelli, D., Grimsby, J., Pokharel, P., Li, S., Morse, M., Lennon, N.J., Livak, K.J., Mikkelsen, T.S. and Rinn, J.L., 2014. The dynamics and regulators of cell fate decisions are revealed by pseudotemporal ordering of single cells. Nature biotechnology, 32(4), pp. 381\u2013386. \nThis project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details \n"
      },
      "source": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9676798158161091,
      "result": {
        "original_header": "5b.   Footprint Analysis",
        "type": "Text_excerpt",
        "value": "##### As of v3.6, BingleSeq implements the following GOSeq Model organisms:\nHomo sapiens, Mus musculus, Danio rerio, Drosophila melanogaster, E. coli K12.\nPlease do not hesitate to contact us or open a GitHub issue if you want us to include additional model organism.\nHowever, it should be noted that GOSeq requires gene lengths for its usual functions and not all model organisms' genomes have such available.\nRefer to the GOSeq manual for further information as well as a way to obtain  \n"
      },
      "source": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8461641733812778,
      "result": {
        "original_header": "6. DE Package Comparison",
        "type": "Text_excerpt",
        "value": "BingleSeq supplies users with an option to assess the agreement between the different DE analysis packages. This is done using a Venn diagram which represents the overlap of DE analysis results obtained using DESeq2, edgeR, and limma on the same dataset. Moreover, users can download the genes from the different intersects of the Venn Diagram.  \n"
      },
      "source": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9991873198623188,
      "result": {
        "original_header": "1. Load Count Data",
        "type": "Text_excerpt",
        "value": "To begin the analysis of scRNA-Seq data, users can supply gene count data in two input types. The first input type is \u201810x Genomics data\u2019 in the form of a directory containing 10x Genomics protocol output files. These files include a matrix.mtx, barcodes.tsv, and genes.tsv files which represent the expression matrix, cell barcodes, and gene symbols, respectively. The second input type is a count table which must follow a specific format (shown above).\n  \n  \n#### 2.\tQuality Control\nOnce the data is loaded, the \u2018Quality Control\u2019 tab is generated which enables users to filter unwanted cells and features. Users can filter genes detected below a certain number of cells and cells with less than a certain number of expressed genes. These parameters are used when creating the initial Seurat object. Cell outliers can then be filtered according to the number of expressed features (i.e. genes) per cell. Visual aid is provided for filtering in terms of Violin plots which represent the number of genes (nFeature) and unique molecules (nCount_RNA) per cell. \n"
      },
      "source": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9627234480150566,
      "result": {
        "original_header": "3. Normalization",
        "type": "Text_excerpt",
        "value": "After excluding unwanted cells and features from the dataset, the next step is to normalize the data. BingleSeq provides two Seurat-based global-scaling normalization options. The first one is the \u201cLogNormalize\u201d method in which gene counts for each cell are divided by the total counts for that cell, multiplied by a \u2018scale factor\u2019, and then natural-log transformed. The second method is \u201cRelative Counts\u201d which follows the same procedure excluding the log transformation. Seurat's authors recommend using the former method when working with integer counts and the latter when working with relative counts. 10e4 is the recommended and default scale factor option, but when using CPM values the scale factor should be set to 10e6. \n![BingleSeq Bulk RNA-Seq sc varPlot](/figures/sc_variancePlot.PNG)\n*This plot was genered using the recommended/default settings and the \"VST\" variance estimation method.*\n  \n*Note that \u2018Feature selection\u2019 does not apply to monocle and SC3 clustering approaches and hence their inbuilt pre-clustering filter procedures were implemented. These procedures have a similar purpose to Seurat\u2019s \u2018Feature Selection\u2019, as they can be used to filter out unwanted noise.*\n  \n   \n"
      },
      "source": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9987990720085883,
      "result": {
        "original_header": "4. Clustering",
        "type": "Text_excerpt",
        "value": "Following normalization, the \u2018Clustering\u2019 tab is generated which implements functionality for scaling of the data, dimensionality reduction with PCA, PC selection, and unsupervised clustering. The former three are done simultaneously and Seurat\u2019s \u2018PCElbowPlot\u2019 is used to generate and return an elbow plot. The returned elbow plot serves as a heuristic method for determining the true dimensionality of the dataset (i.e. PC Selection). Selecting which PCs to include in Seurat and monocle clustering methods is an essential step as it enables a large portion of technical noise to be excluded. \n"
      },
      "source": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8413828756969047,
      "result": {
        "original_header": "5. Differential Expression",
        "type": "Text_excerpt",
        "value": "Following clustering, DE analysis can be conducted using Seurat\u2019s inbuilt functionality to identify marker genes. Users can perform marker gene identification using the following inbuilt DE testing methods: Student\u2019s T test, Wilcoxon Rank Sum test, and Logistic regression. Additionally, DE analysis can also be performed with DESEq2 and MAST packages (Love, Huber, and Anders, 2014; Finak et al., 2015). Prior to running DE analysis, users are prompted to enter the following filtering parameters: genes expressed in a minimum fraction of cells, fold-change, and adjusted p-value. \n"
      },
      "source": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9739413655610125,
      "result": {
        "original_header": "6. Functional Annotation",
        "type": "Text_excerpt",
        "value": "The scRNA-Seq pipeline of BingleSeq incorporates functional annotation in an analogous manner to its Bulk RNA-Seq counterpart. The only difference is that the subsets of DEGs to be used in the GOseq pipeline can be filtered according to the cluster they belong to; thus, allowing users to assess each cluster independently. Accordingly, it also implements both PROGENy and Dorothea-Viper which were implemented to estimate Pathway and TF activity per cell cluster, respectively.\n  \n   \n"
      },
      "source": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9019990533347502,
      "result": {
        "original_header": "7. DE Method Comparison",
        "type": "Text_excerpt",
        "value": "The scRNA-Seq part also implements a \u2018DE Method Comparison\u2019 tab analogous to the \u2018DE Package Comparison\u2019 tab in Bulk RNA-Seq. The only difference is that scRNA-Seq Overlap functionality enables filtering according to the same parameters used in marker gene identification. Furthermore, rather than comparing the different packages, it compares the DE Methods implemented within Seurat. These include: DE testing with MAST, Wilcoxon Rank Sum Test, and Student\u2019s T test. \n"
      },
      "source": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9971449791741508,
      "result": {
        "original_header": "Test Data",
        "type": "Text_excerpt",
        "value": "As of v0.3.2 BingleSeq features test data for both Bulk- and scRNA-Seq.\nBulk data - contrast between HSV-1 infected control and interferon B treatment (taken from McFarlane et al., 2019) \nSingle cell data - Cell Ranger 10x Genomics public dataset looking at filtered data of 2700 PBMCs\n[10x Genomics link](https://support.10xgenomics.com/single-cell-multiome-atac-gex/datasets/1.0.0/pbmc_unsorted_3k) \n"
      },
      "source": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/dbdimitrov/BingleSeq/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 9
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/dbdimitrov/BingleSeq/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "dbdimitrov/BingleSeq"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "BingleSeq"
      },
      "source": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq//master//figures/Bulk.png"
      },
      "source": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq//master//figures/Bulk_format.jpg"
      },
      "source": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq//master//figures/meta_format.jpg"
      },
      "source": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq//master//figures/sc.jpg"
      },
      "source": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq//master//figures/sc_format.jpg"
      },
      "source": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq//master//figures/bulk_loadData.PNG"
      },
      "source": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq//master//figures/bulk_qcData.PNG"
      },
      "source": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq//master//figures/batchCorrected.jpg"
      },
      "source": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq//master//figures/bulk_deData.PNG"
      },
      "source": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq//master//figures/bulk_visData.PNG"
      },
      "source": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq//master//figures/bulk_heatmap.PNG"
      },
      "source": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq//master//figures/bulk_GOhist.jpg"
      },
      "source": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq//master//figures/bulk_GOquery.PNG"
      },
      "source": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq//master//figures/bulk_GOtab.PNG"
      },
      "source": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq//master//figures/bulk_GOresults.PNG"
      },
      "source": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq//master//figures/footprint.PNG"
      },
      "source": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq//master//figures/bulk_compVenn.PNG"
      },
      "source": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq//master//figures/bulk_compRank.PNG"
      },
      "source": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq//master//figures/sc_qcData.PNG"
      },
      "source": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq//master//figures/sc_normData.PNG"
      },
      "source": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq//master//figures/sc_variancePlot.PNG"
      },
      "source": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq//master//figures/sc_clustElbow.PNG"
      },
      "source": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq//master//figures/sc_clustHeat.PNG"
      },
      "source": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq//master//figures/sc_clustSeurat.PNG"
      },
      "source": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq//master//figures/sc_clustMonocle.PNG"
      },
      "source": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq//master//figures/sc_clustSC3.PNG"
      },
      "source": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq//master//figures/sc_deTab.PNG"
      },
      "source": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq//master//figures/sc_deFigs.PNG"
      },
      "source": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "BingleSeq"
        ],
        "type": "Text_excerpt",
        "value": "BingleSeq can be installed directly from GitHub using the following code:\n\n```\nlibrary(\"devtools\")\ninstall_github(\"dbdimitrov/BingleSeq\")\n\n# Start the application\nlibrary(BingleSeq)\nstartBingleSeq()\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9383925327239928,
      "result": {
        "original_header": "5a.   Over-representation Analysis",
        "type": "Text_excerpt",
        "value": "**Note that a metadata table must also be provided for the Bulk RNA-Seq pipeline.** \n\n### Installation \n"
      },
      "source": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9998442947988526,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "BingleSeq can be installed directly from GitHub using the following code:\n```\nlibrary(\"devtools\")\ninstall_github(\"dbdimitrov/BingleSeq\")\n\n# Start the application\nlibrary(BingleSeq)\nstartBingleSeq()\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8228844468530963,
      "result": {
        "original_header": "5a.   Over-representation Analysis",
        "type": "Text_excerpt",
        "value": "\n### Prerequisites \n"
      },
      "source": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8228844468530963,
      "result": {
        "original_header": "Prerequisites",
        "type": "Text_excerpt",
        "value": "BingleSeq requires R>= 3.6.3 \n"
      },
      "source": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9747642860252586,
      "result": {
        "original_header": "As of v3.6, BingleSeq implements the following GOSeq Model organisms:",
        "type": "Text_excerpt",
        "value": "Bowden J, Ross J, Oytam Y (2019). HarmanData: Data for the Harman package. R package version 1.12.0, http://www.bioinformatics.csiro.au/harman/. \nLeek JT, Johnson WE, Parker HS, Fertig EJ, Jaffe AE, Storey JD, Zhang Y, Torres LC (2019). sva: Surrogate Variable Analysis. R package version 3.32.1. \n## R Session Info:\n```r\n\u2500 Session info \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n setting  value                       \n version  R version 4.0.3 (2020-10-10)\n os       Ubuntu 20.04.2 LTS          \n system   x86_64, linux-gnu           \n ui       RStudio                     \n language (EN)                        \n collate  en_US.UTF-8                 \n ctype    en_US.UTF-8                 \n tz       Europe/Berlin               \n date     2021-07-11                  \n\n\u2500 Packages \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n ! package              * version  date       lib source        \n   abind                  1.4-5    2016-07-21 [1] CRAN (R 4.0.2)\n   annotate               1.68.0   2020-10-27 [1] Bioconductor  \n   AnnotationDbi        * 1.52.0   2020-10-27 [1] Bioconductor  \n   askpass                1.1      2019-01-13 [1] CRAN (R 4.0.2)\n   assertthat             0.2.1    2019-03-21 [1] CRAN (R 4.0.2)\n   backports              1.2.1    2020-12-09 [1] CRAN (R 4.0.2)\n   bcellViper             1.26.0   2020-10-29 [1] Bioconductor  \n   beachmat               2.6.4    2020-12-20 [1] Bioconductor  \n   beeswarm               0.2.3    2016-04-25 [1] CRAN (R 4.0.2)\n   BiasedUrn            * 1.07     2015-12-28 [1] CRAN (R 4.0.2)\n P BingleSeq            * 0.3.6    2021-02-06 [?] local         \n   Biobase              * 2.50.0   2020-10-27 [1] Bioconductor  \n   BiocFileCache          1.14.0   2020-10-27 [1] Bioconductor  \n   BiocGenerics         * 0.36.0   2020-10-27 [1] Bioconductor  \n   BiocNeighbors          1.8.2    2020-12-07 [1] Bioconductor  \n   BiocParallel         * 1.24.1   2020-11-06 [1] Bioconductor  \n   BiocSingular           1.6.0    2020-10-27 [1] Bioconductor  \n   biomaRt                2.46.3   2021-02-09 [1] Bioconductor  \n   Biostrings             2.58.0   2020-10-27 [1] Bioconductor  \n   bit                    4.0.4    2020-08-04 [1] CRAN (R 4.0.2)\n   bit64                  4.0.5    2020-08-30 [1] CRAN (R 4.0.2)\n   bitops                 1.0-6    2013-08-17 [1] CRAN (R 4.0.2)\n   blob                   1.2.1    2020-01-20 [1] CRAN (R 4.0.2)\n   bluster                1.0.0    2020-10-27 [1] Bioconductor  \n   broom                  0.7.8    2021-06-24 [1] CRAN (R 4.0.3)\n   bslib                  0.2.4    2021-01-25 [1] CRAN (R 4.0.3)\n   cachem                 1.0.4    2021-02-13 [1] CRAN (R 4.0.3)\n   Cairo                  1.5-12.2 2020-07-07 [1] CRAN (R 4.0.3)\n   callr                  3.5.1    2020-10-13 [1] CRAN (R 4.0.2)\n   car                    3.0-10   2020-09-29 [1] CRAN (R 4.0.2)\n   carData                3.0-4    2020-05-22 [1] CRAN (R 4.0.2)\n   cellranger             1.1.0    2016-07-27 [1] CRAN (R 4.0.2)\n   class                  7.3-17   2020-04-26 [4] CRAN (R 4.0.0)\n   cli                    2.5.0    2021-04-26 [1] CRAN (R 4.0.3)\n   cluster                2.1.0    2019-06-19 [4] CRAN (R 4.0.0)\n   codetools              0.2-16   2018-12-24 [4] CRAN (R 4.0.0)\n   colorspace             2.0-0    2020-11-11 [1] CRAN (R 4.0.2)\n   combinat               0.0-8    2012-10-29 [1] CRAN (R 4.0.2)\n   cowplot                1.1.1    2020-12-30 [1] CRAN (R 4.0.3)\n   crayon                 1.4.1    2021-02-08 [1] CRAN (R 4.0.3)\n   crosstalk              1.1.1    2021-01-12 [1] CRAN (R 4.0.3)\n   curl                   4.3      2019-12-02 [1] CRAN (R 4.0.2)\n   data.table             1.14.0   2021-02-21 [1] CRAN (R 4.0.3)\n   DBI                    1.1.1    2021-01-15 [1] CRAN (R 4.0.3)\n   dbplyr                 2.1.0    2021-02-03 [1] CRAN (R 4.0.3)\n   DDRTree              * 0.1.5    2017-04-30 [1] CRAN (R 4.0.2)\n   DelayedArray           0.16.1   2021-01-22 [1] Bioconductor  \n   DelayedMatrixStats     1.12.3   2021-02-03 [1] Bioconductor  \n   deldir                 0.2-10   2021-02-16 [1] CRAN (R 4.0.3)\n   densityClust           0.3      2017-10-24 [1] CRAN (R 4.0.2)\n   DEoptimR               1.0-8    2016-11-19 [1] CRAN (R 4.0.2)\n   desc                   1.2.0    2018-05-01 [1] CRAN (R 4.0.2)\n   DESeq2               * 1.30.1   2021-02-19 [1] Bioconductor  \n   devtools               2.3.2    2020-09-18 [1] CRAN (R 4.0.3)\n   digest                 0.6.27   2020-10-24 [1] CRAN (R 4.0.2)\n   docopt                 0.7.1    2020-06-24 [1] CRAN (R 4.0.2)\n   doParallel             1.0.16   2020-10-16 [1] CRAN (R 4.0.2)\n   doRNG                  1.8.2    2020-01-27 [1] CRAN (R 4.0.2)\n   dorothea             * 1.2.1    2021-02-11 [1] Bioconductor  \n   dplyr                * 1.0.7    2021-06-18 [1] CRAN (R 4.0.3)\n   dqrng                  0.2.1    2019-05-17 [1] CRAN (R 4.0.2)\n   DT                   * 0.17     2021-01-06 [1] CRAN (R 4.0.3)\n   e1071                  1.7-4    2020-10-14 [1] CRAN (R 4.0.2)\n   edgeR                * 3.32.1   2021-01-14 [1] Bioconductor  \n   ellipsis               0.3.2    2021-04-29 [1] CRAN (R 4.0.3)\n   factoextra           * 1.0.7    2020-04-01 [1] CRAN (R 4.0.2)\n   fansi                  0.4.2    2021-01-15 [1] CRAN (R 4.0.3)\n   farver                 2.0.3    2020-01-16 [1] CRAN (R 4.0.2)\n   fastcluster          * 1.1.25   2018-06-07 [1] CRAN (R 4.0.2)\n   fastICA                1.2-2    2019-07-08 [1] CRAN (R 4.0.2)\n   fastmap                1.1.0    2021-01-25 [1] CRAN (R 4.0.3)\n   fitdistrplus           1.1-3    2020-12-05 [1] CRAN (R 4.0.2)\n   FNN                    1.1.3    2019-02-15 [1] CRAN (R 4.0.2)\n   forcats              * 0.5.1    2021-01-27 [1] CRAN (R 4.0.3)\n   foreach                1.5.1    2020-10-15 [1] CRAN (R 4.0.2)\n   foreign                0.8-80   2020-05-24 [1] CRAN (R 4.0.2)\n   formatR                1.7      2019-06-11 [1] CRAN (R 4.0.2)\n   fs                     1.5.0    2020-07-31 [1] CRAN (R 4.0.2)\n   futile.logger        * 1.4.3    2016-07-10 [1] CRAN (R 4.0.2)\n   futile.options         1.0.1    2018-04-20 [1] CRAN (R 4.0.2)\n   future                 1.21.0   2020-12-10 [1] CRAN (R 4.0.3)\n   future.apply           1.7.0    2021-01-04 [1] CRAN (R 4.0.3)\n   genefilter           * 1.72.1   2021-01-21 [1] Bioconductor  \n   geneLenDataBase      * 1.26.0   2020-10-29 [1] Bioconductor  \n   geneplotter            1.68.0   2020-10-27 [1] Bioconductor  \n   generics               0.1.0    2020-10-31 [1] CRAN (R 4.0.2)\n   GenomeInfoDb         * 1.26.2   2020-12-08 [1] Bioconductor  \n   GenomeInfoDbData       1.2.4    2020-12-14 [1] Bioconductor  \n   GenomicAlignments      1.26.0   2020-10-27 [1] Bioconductor  \n   GenomicFeatures        1.42.1   2020-11-12 [1] Bioconductor  \n   GenomicRanges        * 1.42.0   2020-10-27 [1] Bioconductor  \n   ggbeeswarm             0.6.0    2017-08-07 [1] CRAN (R 4.0.2)\n   ggplot2              * 3.3.3    2020-12-30 [1] CRAN (R 4.0.3)\n   ggpubr                 0.4.0    2020-06-27 [1] CRAN (R 4.0.2)\n   ggrepel              * 0.9.1    2021-01-15 [1] CRAN (R 4.0.3)\n   ggridges               0.5.3    2021-01-08 [1] CRAN (R 4.0.3)\n   ggsignif               0.6.0    2019-08-08 [1] CRAN (R 4.0.2)\n   globals                0.14.0   2020-11-22 [1] CRAN (R 4.0.2)\n   glue                   1.4.2    2020-08-27 [1] CRAN (R 4.0.2)\n   GO.db                * 3.12.1   2021-02-21 [1] Bioconductor  \n   goftest                1.2-2    2019-12-02 [1] CRAN (R 4.0.2)\n   goseq                * 1.42.0   2020-10-27 [1] Bioconductor  \n   gridExtra            * 2.3      2017-09-09 [1] CRAN (R 4.0.2)\n   gtable                 0.3.0    2019-03-25 [1] CRAN (R 4.0.2)\n   Harman               * 1.18.0   2020-10-27 [1] Bioconductor  \n   haven                  2.3.1    2020-06-01 [1] CRAN (R 4.0.2)\n   hms                    1.0.0    2021-01-13 [1] CRAN (R 4.0.3)\n   HSMMSingleCell         1.10.0   2020-10-29 [1] Bioconductor  \n   htmltools              0.5.1.1  2021-01-22 [1] CRAN (R 4.0.3)\n   htmlwidgets            1.5.3    2020-12-10 [1] CRAN (R 4.0.2)\n   httpuv                 1.5.5    2021-01-13 [1] CRAN (R 4.0.3)\n   httr                   1.4.2    2020-07-20 [1] CRAN (R 4.0.2)\n   ica                    1.0-2    2018-05-24 [1] CRAN (R 4.0.2)\n   igraph                 1.2.6    2020-10-06 [1] CRAN (R 4.0.2)\n   IRanges              * 2.24.1   2020-12-12 [1] Bioconductor  \n   irlba                * 2.3.3    2019-02-05 [1] CRAN (R 4.0.2)\n   iterators              1.0.13   2020-10-15 [1] CRAN (R 4.0.2)\n   jquerylib              0.1.3    2020-12-17 [1] CRAN (R 4.0.3)\n   jsonlite               1.7.2    2020-12-09 [1] CRAN (R 4.0.2)\n   kernlab                0.9-29   2019-11-12 [1] CRAN (R 4.0.2)\n   KernSmooth             2.23-17  2020-04-26 [4] CRAN (R 4.0.0)\n   labeling               0.4.2    2020-10-20 [1] CRAN (R 4.0.2)\n   lambda.r               1.2.4    2019-09-18 [1] CRAN (R 4.0.2)\n   later                  1.1.0.1  2020-06-05 [1] CRAN (R 4.0.2)\n   lattice                0.20-41  2020-04-02 [4] CRAN (R 4.0.0)\n   lazyeval               0.2.2    2019-03-15 [1] CRAN (R 4.0.2)\n   leiden                 0.3.7    2021-01-26 [1] CRAN (R 4.0.3)\n   lifecycle              1.0.0    2021-02-15 [1] CRAN (R 4.0.3)\n   limma                * 3.46.0   2020-10-27 [1] Bioconductor  \n   listenv                0.8.0    2019-12-05 [1] CRAN (R 4.0.2)\n   lmtest                 0.9-38   2020-09-09 [1] CRAN (R 4.0.2)\n   locfit                 1.5-9.4  2020-03-25 [1] CRAN (R 4.0.2)\n   lubridate              1.7.9.2  2020-11-13 [1] CRAN (R 4.0.2)\n   magrittr               2.0.1    2020-11-17 [1] CRAN (R 4.0.2)\n   MASS                   7.3-53   2020-09-09 [4] CRAN (R 4.0.2)\n   MAST                 * 1.16.0   2020-10-27 [1] Bioconductor  \n   Matrix               * 1.3-4    2021-06-01 [1] CRAN (R 4.0.3)\n   MatrixGenerics       * 1.2.1    2021-01-30 [1] Bioconductor  \n   matrixStats          * 0.58.0   2021-01-29 [1] CRAN (R 4.0.3)\n   memoise                2.0.0    2021-01-26 [1] CRAN (R 4.0.3)\n   mgcv                 * 1.8-33   2020-08-27 [4] CRAN (R 4.0.2)\n   mime                   0.10     2021-02-13 [1] CRAN (R 4.0.3)\n   miniUI                 0.1.1.1  2018-05-18 [1] CRAN (R 4.0.2)\n   mixtools               1.2.0    2020-02-07 [1] CRAN (R 4.0.2)\n   modelr                 0.1.8    2020-05-19 [1] CRAN (R 4.0.2)\n   monocle              * 2.18.0   2020-10-27 [1] Bioconductor  \n   munsell                0.5.0    2018-06-12 [1] CRAN (R 4.0.2)\n   mvtnorm                1.1-1    2020-06-09 [1] CRAN (R 4.0.2)\n   nlme                 * 3.1-149  2020-08-23 [4] CRAN (R 4.0.2)\n   openssl                1.4.3    2020-09-18 [1] CRAN (R 4.0.2)\n   openxlsx               4.2.3    2020-10-27 [1] CRAN (R 4.0.2)\n   org.Hs.eg.db         * 3.12.0   2021-02-21 [1] Bioconductor  \n   org.Mm.eg.db         * 3.12.0   2021-02-21 [1] Bioconductor  \n   parallelly             1.24.0   2021-03-14 [1] CRAN (R 4.0.3)\n   patchwork              1.1.1    2020-12-17 [1] CRAN (R 4.0.3)\n   pbapply                1.4-3    2020-08-18 [1] CRAN (R 4.0.2)\n   pcaPP                  1.9-73   2018-01-14 [1] CRAN (R 4.0.2)\n   pheatmap             * 1.0.12   2019-01-04 [1] CRAN (R 4.0.2)\n   pillar                 1.6.1    2021-05-16 [1] CRAN (R 4.0.3)\n   pkgbuild               1.2.0    2020-12-15 [1] CRAN (R 4.0.3)\n   pkgconfig              2.0.3    2019-09-22 [1] CRAN (R 4.0.2)\n   pkgload                1.1.0    2020-05-29 [1] CRAN (R 4.0.2)\n   plotly               * 4.9.3    2021-01-10 [1] CRAN (R 4.0.3)\n   plyr                   1.8.6    2020-03-03 [1] CRAN (R 4.0.2)\n   png                    0.1-7    2013-12-03 [1] CRAN (R 4.0.2)\n   polyclip               1.10-0   2019-03-14 [1] CRAN (R 4.0.2)\n   prettyunits            1.1.1    2020-01-24 [1] CRAN (R 4.0.2)\n   processx               3.4.5    2020-11-30 [1] CRAN (R 4.0.2)\n   progeny              * 1.12.0   2020-10-27 [1] Bioconductor  \n   progress               1.2.2    2019-05-16 [1] CRAN (R 4.0.2)\n   promises               1.2.0.1  2021-02-11 [1] CRAN (R 4.0.3)\n   ps                     1.5.0    2020-12-05 [1] CRAN (R 4.0.2)\n   purrr                * 0.3.4    2020-04-17 [1] CRAN (R 4.0.2)\n   qlcMatrix              0.9.7    2018-04-20 [1] CRAN (R 4.0.2)\n   R6                     2.5.0    2020-10-28 [1] CRAN (R 4.0.2)\n   RANN                   2.6.1    2019-01-08 [1] CRAN (R 4.0.2)\n   rappdirs               0.3.3    2021-01-31 [1] CRAN (R 4.0.3)\n   RColorBrewer           1.1-2    2014-12-07 [1] CRAN (R 4.0.2)\n   Rcpp                   1.0.6    2021-01-15 [1] CRAN (R 4.0.3)\n   RcppAnnoy              0.0.18   2020-12-15 [1] CRAN (R 4.0.3)\n   RCurl                  1.98-1.3 2021-03-16 [1] CRAN (R 4.0.3)\n   readr                * 1.4.0    2020-10-05 [1] CRAN (R 4.0.2)\n   readxl                 1.3.1    2019-03-13 [1] CRAN (R 4.0.2)\n   remotes                2.2.0    2020-07-21 [1] CRAN (R 4.0.2)\n   reprex                 1.0.0    2021-01-27 [1] CRAN (R 4.0.3)\n   reshape2             * 1.4.4    2020-04-09 [1] CRAN (R 4.0.2)\n   reticulate             1.18     2020-10-25 [1] CRAN (R 4.0.2)\n   rio                    0.5.16   2018-11-26 [1] CRAN (R 4.0.2)\n   rlang                  0.4.10   2020-12-30 [1] CRAN (R 4.0.3)\n   rngtools               1.5      2020-01-23 [1] CRAN (R 4.0.2)\n   robustbase             0.93-7   2021-01-04 [1] CRAN (R 4.0.3)\n   ROCR                   1.0-11   2020-05-02 [1] CRAN (R 4.0.2)\n   rpart                  4.1-15   2019-04-12 [4] CRAN (R 4.0.0)\n   rprojroot              2.0.2    2020-11-15 [1] CRAN (R 4.0.2)\n   rrcov                  1.5-5    2020-08-03 [1] CRAN (R 4.0.2)\n   Rsamtools              2.6.0    2020-10-27 [1] Bioconductor  \n   RSQLite                2.2.3    2021-01-24 [1] CRAN (R 4.0.3)\n   rstatix                0.7.0    2021-02-13 [1] CRAN (R 4.0.3)\n   rstudioapi             0.13     2020-11-12 [1] CRAN (R 4.0.2)\n   rsvd                   1.0.3    2020-02-17 [1] CRAN (R 4.0.2)\n   rtracklayer            1.50.0   2020-10-27 [1] Bioconductor  \n   Rtsne                  0.15     2018-11-10 [1] CRAN (R 4.0.2)\n   rvest                  0.3.6    2020-07-25 [1] CRAN (R 4.0.2)\n   S4Vectors            * 0.28.1   2020-12-09 [1] Bioconductor  \n   sass                   0.3.1    2021-01-24 [1] CRAN (R 4.0.3)\n   SC3                  * 1.18.0   2020-10-27 [1] Bioconductor  \n   scales                 1.1.1    2020-05-11 [1] CRAN (R 4.0.2)\n   scater                 1.18.5   2021-02-16 [1] Bioconductor  \n   scattermore            0.7      2020-11-24 [1] CRAN (R 4.0.3)\n   scran                * 1.18.5   2021-02-04 [1] Bioconductor  \n   sctransform            0.3.2    2020-12-16 [1] CRAN (R 4.0.3)\n   scuttle                1.0.4    2020-12-17 [1] Bioconductor  \n   segmented              1.3-2    2021-02-09 [1] CRAN (R 4.0.3)\n   sessioninfo            1.1.1    2018-11-05 [1] CRAN (R 4.0.2)\n   Seurat               * 4.0.3    2021-06-10 [1] CRAN (R 4.0.3)\n   SeuratObject         * 4.0.2    2021-06-09 [1] CRAN (R 4.0.3)\n   shiny                * 1.6.0    2021-01-25 [1] CRAN (R 4.0.3)\n   shinyFiles           * 0.9.0    2020-11-09 [1] CRAN (R 4.0.2)\n   shinyjs              * 2.0.0    2020-09-09 [1] CRAN (R 4.0.2)\n   shinyWidgets         * 0.5.7    2021-02-03 [1] CRAN (R 4.0.3)\n   SingleCellExperiment * 1.12.0   2020-10-27 [1] Bioconductor  \n   slam                   0.1-48   2020-12-03 [1] CRAN (R 4.0.2)\n   sparseMatrixStats      1.2.1    2021-02-02 [1] Bioconductor  \n   sparsesvd              0.2      2019-07-15 [1] CRAN (R 4.0.2)\n   spatstat.core          2.0-0    2021-03-23 [1] CRAN (R 4.0.3)\n   spatstat.data          2.1-0    2021-03-21 [1] CRAN (R 4.0.3)\n   spatstat.geom          2.0-1    2021-03-22 [1] CRAN (R 4.0.3)\n   spatstat.sparse        2.0-0    2021-03-16 [1] CRAN (R 4.0.3)\n   spatstat.utils         2.1-0    2021-03-15 [1] CRAN (R 4.0.3)\n   statmod                1.4.35   2020-10-19 [1] CRAN (R 4.0.2)\n   stringi                1.5.3    2020-09-09 [1] CRAN (R 4.0.2)\n   stringr              * 1.4.0    2019-02-10 [1] CRAN (R 4.0.2)\n   SummarizedExperiment * 1.20.0   2020-10-27 [1] Bioconductor  \n   survival               3.2-7    2020-09-28 [1] CRAN (R 4.0.2)\n   sva                  * 3.38.0   2020-10-27 [1] Bioconductor  \n   tensor                 1.5      2012-05-05 [1] CRAN (R 4.0.2)\n   testthat               3.0.2    2021-02-14 [1] CRAN (R 4.0.3)\n   tibble               * 3.1.2    2021-05-16 [1] CRAN (R 4.0.3)\n   tidyr                * 1.1.3    2021-03-03 [1] CRAN (R 4.0.3)\n   tidyselect             1.1.0    2020-05-11 [1] CRAN (R 4.0.2)\n   tidyverse            * 1.3.0    2019-11-21 [1] CRAN (R 4.0.3)\n   tinytex                0.29     2021-01-21 [1] CRAN (R 4.0.3)\n   usethis                2.0.1    2021-02-10 [1] CRAN (R 4.0.3)\n   utf8                   1.1.4    2018-05-24 [1] CRAN (R 4.0.2)\n   uwot                   0.1.10   2020-12-15 [1] CRAN (R 4.0.3)\n   vctrs                  0.3.8    2021-04-29 [1] CRAN (R 4.0.3)\n   VennDiagram          * 1.6.20   2018-03-28 [1] CRAN (R 4.0.2)\n   VGAM                 * 1.1-5    2021-01-14 [1] CRAN (R 4.0.3)\n   viper                * 1.24.0   2020-10-27 [1] Bioconductor  \n   vipor                  0.4.5    2017-03-22 [1] CRAN (R 4.0.2)\n   viridis                0.5.1    2018-03-29 [1] CRAN (R 4.0.2)\n   viridisLite            0.3.0    2018-02-01 [1] CRAN (R 4.0.2)\n   waiter               * 0.2.0    2021-01-14 [1] CRAN (R 4.0.3)\n   withr                  2.4.1    2021-01-26 [1] CRAN (R 4.0.3)\n   WriteXLS               6.1.0    2020-11-23 [1] CRAN (R 4.0.2)\n   xfun                   0.21     2021-02-10 [1] CRAN (R 4.0.3)\n   XML                    3.99-0.5 2020-07-23 [1] CRAN (R 4.0.2)\n   xml2                   1.3.2    2020-04-23 [1] CRAN (R 4.0.2)\n   xtable                 1.8-4    2019-04-21 [1] CRAN (R 4.0.2)\n   XVector                0.30.0   2020-10-27 [1] Bioconductor  \n   yaml                   2.2.1    2020-02-01 [1] CRAN (R 4.0.2)\n   zip                    2.1.1    2020-08-27 [1] CRAN (R 4.0.2)\n   zlibbioc               1.36.0   2020-10-27 [1] Bioconductor  \n   zoo                    1.8-8    2020-05-02 [1] CRAN (R 4.0.2)\n\n[1] /home/dbdimitrov/R/x86_64-pc-linux-gnu-library/4.0\n[2] /usr/local/lib/R/site-library\n[3] /usr/lib/R/site-library\n[4] /usr/lib/R/library\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 1.0,
      "result": {
        "original_header": "R Session Info:",
        "type": "Text_excerpt",
        "value": "```r\n\u2500 Session info \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n setting  value                       \n version  R version 4.0.3 (2020-10-10)\n os       Ubuntu 20.04.2 LTS          \n system   x86_64, linux-gnu           \n ui       RStudio                     \n language (EN)                        \n collate  en_US.UTF-8                 \n ctype    en_US.UTF-8                 \n tz       Europe/Berlin               \n date     2021-07-11                  \n\n\u2500 Packages \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n ! package              * version  date       lib source        \n   abind                  1.4-5    2016-07-21 [1] CRAN (R 4.0.2)\n   annotate               1.68.0   2020-10-27 [1] Bioconductor  \n   AnnotationDbi        * 1.52.0   2020-10-27 [1] Bioconductor  \n   askpass                1.1      2019-01-13 [1] CRAN (R 4.0.2)\n   assertthat             0.2.1    2019-03-21 [1] CRAN (R 4.0.2)\n   backports              1.2.1    2020-12-09 [1] CRAN (R 4.0.2)\n   bcellViper             1.26.0   2020-10-29 [1] Bioconductor  \n   beachmat               2.6.4    2020-12-20 [1] Bioconductor  \n   beeswarm               0.2.3    2016-04-25 [1] CRAN (R 4.0.2)\n   BiasedUrn            * 1.07     2015-12-28 [1] CRAN (R 4.0.2)\n P BingleSeq            * 0.3.6    2021-02-06 [?] local         \n   Biobase              * 2.50.0   2020-10-27 [1] Bioconductor  \n   BiocFileCache          1.14.0   2020-10-27 [1] Bioconductor  \n   BiocGenerics         * 0.36.0   2020-10-27 [1] Bioconductor  \n   BiocNeighbors          1.8.2    2020-12-07 [1] Bioconductor  \n   BiocParallel         * 1.24.1   2020-11-06 [1] Bioconductor  \n   BiocSingular           1.6.0    2020-10-27 [1] Bioconductor  \n   biomaRt                2.46.3   2021-02-09 [1] Bioconductor  \n   Biostrings             2.58.0   2020-10-27 [1] Bioconductor  \n   bit                    4.0.4    2020-08-04 [1] CRAN (R 4.0.2)\n   bit64                  4.0.5    2020-08-30 [1] CRAN (R 4.0.2)\n   bitops                 1.0-6    2013-08-17 [1] CRAN (R 4.0.2)\n   blob                   1.2.1    2020-01-20 [1] CRAN (R 4.0.2)\n   bluster                1.0.0    2020-10-27 [1] Bioconductor  \n   broom                  0.7.8    2021-06-24 [1] CRAN (R 4.0.3)\n   bslib                  0.2.4    2021-01-25 [1] CRAN (R 4.0.3)\n   cachem                 1.0.4    2021-02-13 [1] CRAN (R 4.0.3)\n   Cairo                  1.5-12.2 2020-07-07 [1] CRAN (R 4.0.3)\n   callr                  3.5.1    2020-10-13 [1] CRAN (R 4.0.2)\n   car                    3.0-10   2020-09-29 [1] CRAN (R 4.0.2)\n   carData                3.0-4    2020-05-22 [1] CRAN (R 4.0.2)\n   cellranger             1.1.0    2016-07-27 [1] CRAN (R 4.0.2)\n   class                  7.3-17   2020-04-26 [4] CRAN (R 4.0.0)\n   cli                    2.5.0    2021-04-26 [1] CRAN (R 4.0.3)\n   cluster                2.1.0    2019-06-19 [4] CRAN (R 4.0.0)\n   codetools              0.2-16   2018-12-24 [4] CRAN (R 4.0.0)\n   colorspace             2.0-0    2020-11-11 [1] CRAN (R 4.0.2)\n   combinat               0.0-8    2012-10-29 [1] CRAN (R 4.0.2)\n   cowplot                1.1.1    2020-12-30 [1] CRAN (R 4.0.3)\n   crayon                 1.4.1    2021-02-08 [1] CRAN (R 4.0.3)\n   crosstalk              1.1.1    2021-01-12 [1] CRAN (R 4.0.3)\n   curl                   4.3      2019-12-02 [1] CRAN (R 4.0.2)\n   data.table             1.14.0   2021-02-21 [1] CRAN (R 4.0.3)\n   DBI                    1.1.1    2021-01-15 [1] CRAN (R 4.0.3)\n   dbplyr                 2.1.0    2021-02-03 [1] CRAN (R 4.0.3)\n   DDRTree              * 0.1.5    2017-04-30 [1] CRAN (R 4.0.2)\n   DelayedArray           0.16.1   2021-01-22 [1] Bioconductor  \n   DelayedMatrixStats     1.12.3   2021-02-03 [1] Bioconductor  \n   deldir                 0.2-10   2021-02-16 [1] CRAN (R 4.0.3)\n   densityClust           0.3      2017-10-24 [1] CRAN (R 4.0.2)\n   DEoptimR               1.0-8    2016-11-19 [1] CRAN (R 4.0.2)\n   desc                   1.2.0    2018-05-01 [1] CRAN (R 4.0.2)\n   DESeq2               * 1.30.1   2021-02-19 [1] Bioconductor  \n   devtools               2.3.2    2020-09-18 [1] CRAN (R 4.0.3)\n   digest                 0.6.27   2020-10-24 [1] CRAN (R 4.0.2)\n   docopt                 0.7.1    2020-06-24 [1] CRAN (R 4.0.2)\n   doParallel             1.0.16   2020-10-16 [1] CRAN (R 4.0.2)\n   doRNG                  1.8.2    2020-01-27 [1] CRAN (R 4.0.2)\n   dorothea             * 1.2.1    2021-02-11 [1] Bioconductor  \n   dplyr                * 1.0.7    2021-06-18 [1] CRAN (R 4.0.3)\n   dqrng                  0.2.1    2019-05-17 [1] CRAN (R 4.0.2)\n   DT                   * 0.17     2021-01-06 [1] CRAN (R 4.0.3)\n   e1071                  1.7-4    2020-10-14 [1] CRAN (R 4.0.2)\n   edgeR                * 3.32.1   2021-01-14 [1] Bioconductor  \n   ellipsis               0.3.2    2021-04-29 [1] CRAN (R 4.0.3)\n   factoextra           * 1.0.7    2020-04-01 [1] CRAN (R 4.0.2)\n   fansi                  0.4.2    2021-01-15 [1] CRAN (R 4.0.3)\n   farver                 2.0.3    2020-01-16 [1] CRAN (R 4.0.2)\n   fastcluster          * 1.1.25   2018-06-07 [1] CRAN (R 4.0.2)\n   fastICA                1.2-2    2019-07-08 [1] CRAN (R 4.0.2)\n   fastmap                1.1.0    2021-01-25 [1] CRAN (R 4.0.3)\n   fitdistrplus           1.1-3    2020-12-05 [1] CRAN (R 4.0.2)\n   FNN                    1.1.3    2019-02-15 [1] CRAN (R 4.0.2)\n   forcats              * 0.5.1    2021-01-27 [1] CRAN (R 4.0.3)\n   foreach                1.5.1    2020-10-15 [1] CRAN (R 4.0.2)\n   foreign                0.8-80   2020-05-24 [1] CRAN (R 4.0.2)\n   formatR                1.7      2019-06-11 [1] CRAN (R 4.0.2)\n   fs                     1.5.0    2020-07-31 [1] CRAN (R 4.0.2)\n   futile.logger        * 1.4.3    2016-07-10 [1] CRAN (R 4.0.2)\n   futile.options         1.0.1    2018-04-20 [1] CRAN (R 4.0.2)\n   future                 1.21.0   2020-12-10 [1] CRAN (R 4.0.3)\n   future.apply           1.7.0    2021-01-04 [1] CRAN (R 4.0.3)\n   genefilter           * 1.72.1   2021-01-21 [1] Bioconductor  \n   geneLenDataBase      * 1.26.0   2020-10-29 [1] Bioconductor  \n   geneplotter            1.68.0   2020-10-27 [1] Bioconductor  \n   generics               0.1.0    2020-10-31 [1] CRAN (R 4.0.2)\n   GenomeInfoDb         * 1.26.2   2020-12-08 [1] Bioconductor  \n   GenomeInfoDbData       1.2.4    2020-12-14 [1] Bioconductor  \n   GenomicAlignments      1.26.0   2020-10-27 [1] Bioconductor  \n   GenomicFeatures        1.42.1   2020-11-12 [1] Bioconductor  \n   GenomicRanges        * 1.42.0   2020-10-27 [1] Bioconductor  \n   ggbeeswarm             0.6.0    2017-08-07 [1] CRAN (R 4.0.2)\n   ggplot2              * 3.3.3    2020-12-30 [1] CRAN (R 4.0.3)\n   ggpubr                 0.4.0    2020-06-27 [1] CRAN (R 4.0.2)\n   ggrepel              * 0.9.1    2021-01-15 [1] CRAN (R 4.0.3)\n   ggridges               0.5.3    2021-01-08 [1] CRAN (R 4.0.3)\n   ggsignif               0.6.0    2019-08-08 [1] CRAN (R 4.0.2)\n   globals                0.14.0   2020-11-22 [1] CRAN (R 4.0.2)\n   glue                   1.4.2    2020-08-27 [1] CRAN (R 4.0.2)\n   GO.db                * 3.12.1   2021-02-21 [1] Bioconductor  \n   goftest                1.2-2    2019-12-02 [1] CRAN (R 4.0.2)\n   goseq                * 1.42.0   2020-10-27 [1] Bioconductor  \n   gridExtra            * 2.3      2017-09-09 [1] CRAN (R 4.0.2)\n   gtable                 0.3.0    2019-03-25 [1] CRAN (R 4.0.2)\n   Harman               * 1.18.0   2020-10-27 [1] Bioconductor  \n   haven                  2.3.1    2020-06-01 [1] CRAN (R 4.0.2)\n   hms                    1.0.0    2021-01-13 [1] CRAN (R 4.0.3)\n   HSMMSingleCell         1.10.0   2020-10-29 [1] Bioconductor  \n   htmltools              0.5.1.1  2021-01-22 [1] CRAN (R 4.0.3)\n   htmlwidgets            1.5.3    2020-12-10 [1] CRAN (R 4.0.2)\n   httpuv                 1.5.5    2021-01-13 [1] CRAN (R 4.0.3)\n   httr                   1.4.2    2020-07-20 [1] CRAN (R 4.0.2)\n   ica                    1.0-2    2018-05-24 [1] CRAN (R 4.0.2)\n   igraph                 1.2.6    2020-10-06 [1] CRAN (R 4.0.2)\n   IRanges              * 2.24.1   2020-12-12 [1] Bioconductor  \n   irlba                * 2.3.3    2019-02-05 [1] CRAN (R 4.0.2)\n   iterators              1.0.13   2020-10-15 [1] CRAN (R 4.0.2)\n   jquerylib              0.1.3    2020-12-17 [1] CRAN (R 4.0.3)\n   jsonlite               1.7.2    2020-12-09 [1] CRAN (R 4.0.2)\n   kernlab                0.9-29   2019-11-12 [1] CRAN (R 4.0.2)\n   KernSmooth             2.23-17  2020-04-26 [4] CRAN (R 4.0.0)\n   labeling               0.4.2    2020-10-20 [1] CRAN (R 4.0.2)\n   lambda.r               1.2.4    2019-09-18 [1] CRAN (R 4.0.2)\n   later                  1.1.0.1  2020-06-05 [1] CRAN (R 4.0.2)\n   lattice                0.20-41  2020-04-02 [4] CRAN (R 4.0.0)\n   lazyeval               0.2.2    2019-03-15 [1] CRAN (R 4.0.2)\n   leiden                 0.3.7    2021-01-26 [1] CRAN (R 4.0.3)\n   lifecycle              1.0.0    2021-02-15 [1] CRAN (R 4.0.3)\n   limma                * 3.46.0   2020-10-27 [1] Bioconductor  \n   listenv                0.8.0    2019-12-05 [1] CRAN (R 4.0.2)\n   lmtest                 0.9-38   2020-09-09 [1] CRAN (R 4.0.2)\n   locfit                 1.5-9.4  2020-03-25 [1] CRAN (R 4.0.2)\n   lubridate              1.7.9.2  2020-11-13 [1] CRAN (R 4.0.2)\n   magrittr               2.0.1    2020-11-17 [1] CRAN (R 4.0.2)\n   MASS                   7.3-53   2020-09-09 [4] CRAN (R 4.0.2)\n   MAST                 * 1.16.0   2020-10-27 [1] Bioconductor  \n   Matrix               * 1.3-4    2021-06-01 [1] CRAN (R 4.0.3)\n   MatrixGenerics       * 1.2.1    2021-01-30 [1] Bioconductor  \n   matrixStats          * 0.58.0   2021-01-29 [1] CRAN (R 4.0.3)\n   memoise                2.0.0    2021-01-26 [1] CRAN (R 4.0.3)\n   mgcv                 * 1.8-33   2020-08-27 [4] CRAN (R 4.0.2)\n   mime                   0.10     2021-02-13 [1] CRAN (R 4.0.3)\n   miniUI                 0.1.1.1  2018-05-18 [1] CRAN (R 4.0.2)\n   mixtools               1.2.0    2020-02-07 [1] CRAN (R 4.0.2)\n   modelr                 0.1.8    2020-05-19 [1] CRAN (R 4.0.2)\n   monocle              * 2.18.0   2020-10-27 [1] Bioconductor  \n   munsell                0.5.0    2018-06-12 [1] CRAN (R 4.0.2)\n   mvtnorm                1.1-1    2020-06-09 [1] CRAN (R 4.0.2)\n   nlme                 * 3.1-149  2020-08-23 [4] CRAN (R 4.0.2)\n   openssl                1.4.3    2020-09-18 [1] CRAN (R 4.0.2)\n   openxlsx               4.2.3    2020-10-27 [1] CRAN (R 4.0.2)\n   org.Hs.eg.db         * 3.12.0   2021-02-21 [1] Bioconductor  \n   org.Mm.eg.db         * 3.12.0   2021-02-21 [1] Bioconductor  \n   parallelly             1.24.0   2021-03-14 [1] CRAN (R 4.0.3)\n   patchwork              1.1.1    2020-12-17 [1] CRAN (R 4.0.3)\n   pbapply                1.4-3    2020-08-18 [1] CRAN (R 4.0.2)\n   pcaPP                  1.9-73   2018-01-14 [1] CRAN (R 4.0.2)\n   pheatmap             * 1.0.12   2019-01-04 [1] CRAN (R 4.0.2)\n   pillar                 1.6.1    2021-05-16 [1] CRAN (R 4.0.3)\n   pkgbuild               1.2.0    2020-12-15 [1] CRAN (R 4.0.3)\n   pkgconfig              2.0.3    2019-09-22 [1] CRAN (R 4.0.2)\n   pkgload                1.1.0    2020-05-29 [1] CRAN (R 4.0.2)\n   plotly               * 4.9.3    2021-01-10 [1] CRAN (R 4.0.3)\n   plyr                   1.8.6    2020-03-03 [1] CRAN (R 4.0.2)\n   png                    0.1-7    2013-12-03 [1] CRAN (R 4.0.2)\n   polyclip               1.10-0   2019-03-14 [1] CRAN (R 4.0.2)\n   prettyunits            1.1.1    2020-01-24 [1] CRAN (R 4.0.2)\n   processx               3.4.5    2020-11-30 [1] CRAN (R 4.0.2)\n   progeny              * 1.12.0   2020-10-27 [1] Bioconductor  \n   progress               1.2.2    2019-05-16 [1] CRAN (R 4.0.2)\n   promises               1.2.0.1  2021-02-11 [1] CRAN (R 4.0.3)\n   ps                     1.5.0    2020-12-05 [1] CRAN (R 4.0.2)\n   purrr                * 0.3.4    2020-04-17 [1] CRAN (R 4.0.2)\n   qlcMatrix              0.9.7    2018-04-20 [1] CRAN (R 4.0.2)\n   R6                     2.5.0    2020-10-28 [1] CRAN (R 4.0.2)\n   RANN                   2.6.1    2019-01-08 [1] CRAN (R 4.0.2)\n   rappdirs               0.3.3    2021-01-31 [1] CRAN (R 4.0.3)\n   RColorBrewer           1.1-2    2014-12-07 [1] CRAN (R 4.0.2)\n   Rcpp                   1.0.6    2021-01-15 [1] CRAN (R 4.0.3)\n   RcppAnnoy              0.0.18   2020-12-15 [1] CRAN (R 4.0.3)\n   RCurl                  1.98-1.3 2021-03-16 [1] CRAN (R 4.0.3)\n   readr                * 1.4.0    2020-10-05 [1] CRAN (R 4.0.2)\n   readxl                 1.3.1    2019-03-13 [1] CRAN (R 4.0.2)\n   remotes                2.2.0    2020-07-21 [1] CRAN (R 4.0.2)\n   reprex                 1.0.0    2021-01-27 [1] CRAN (R 4.0.3)\n   reshape2             * 1.4.4    2020-04-09 [1] CRAN (R 4.0.2)\n   reticulate             1.18     2020-10-25 [1] CRAN (R 4.0.2)\n   rio                    0.5.16   2018-11-26 [1] CRAN (R 4.0.2)\n   rlang                  0.4.10   2020-12-30 [1] CRAN (R 4.0.3)\n   rngtools               1.5      2020-01-23 [1] CRAN (R 4.0.2)\n   robustbase             0.93-7   2021-01-04 [1] CRAN (R 4.0.3)\n   ROCR                   1.0-11   2020-05-02 [1] CRAN (R 4.0.2)\n   rpart                  4.1-15   2019-04-12 [4] CRAN (R 4.0.0)\n   rprojroot              2.0.2    2020-11-15 [1] CRAN (R 4.0.2)\n   rrcov                  1.5-5    2020-08-03 [1] CRAN (R 4.0.2)\n   Rsamtools              2.6.0    2020-10-27 [1] Bioconductor  \n   RSQLite                2.2.3    2021-01-24 [1] CRAN (R 4.0.3)\n   rstatix                0.7.0    2021-02-13 [1] CRAN (R 4.0.3)\n   rstudioapi             0.13     2020-11-12 [1] CRAN (R 4.0.2)\n   rsvd                   1.0.3    2020-02-17 [1] CRAN (R 4.0.2)\n   rtracklayer            1.50.0   2020-10-27 [1] Bioconductor  \n   Rtsne                  0.15     2018-11-10 [1] CRAN (R 4.0.2)\n   rvest                  0.3.6    2020-07-25 [1] CRAN (R 4.0.2)\n   S4Vectors            * 0.28.1   2020-12-09 [1] Bioconductor  \n   sass                   0.3.1    2021-01-24 [1] CRAN (R 4.0.3)\n   SC3                  * 1.18.0   2020-10-27 [1] Bioconductor  \n   scales                 1.1.1    2020-05-11 [1] CRAN (R 4.0.2)\n   scater                 1.18.5   2021-02-16 [1] Bioconductor  \n   scattermore            0.7      2020-11-24 [1] CRAN (R 4.0.3)\n   scran                * 1.18.5   2021-02-04 [1] Bioconductor  \n   sctransform            0.3.2    2020-12-16 [1] CRAN (R 4.0.3)\n   scuttle                1.0.4    2020-12-17 [1] Bioconductor  \n   segmented              1.3-2    2021-02-09 [1] CRAN (R 4.0.3)\n   sessioninfo            1.1.1    2018-11-05 [1] CRAN (R 4.0.2)\n   Seurat               * 4.0.3    2021-06-10 [1] CRAN (R 4.0.3)\n   SeuratObject         * 4.0.2    2021-06-09 [1] CRAN (R 4.0.3)\n   shiny                * 1.6.0    2021-01-25 [1] CRAN (R 4.0.3)\n   shinyFiles           * 0.9.0    2020-11-09 [1] CRAN (R 4.0.2)\n   shinyjs              * 2.0.0    2020-09-09 [1] CRAN (R 4.0.2)\n   shinyWidgets         * 0.5.7    2021-02-03 [1] CRAN (R 4.0.3)\n   SingleCellExperiment * 1.12.0   2020-10-27 [1] Bioconductor  \n   slam                   0.1-48   2020-12-03 [1] CRAN (R 4.0.2)\n   sparseMatrixStats      1.2.1    2021-02-02 [1] Bioconductor  \n   sparsesvd              0.2      2019-07-15 [1] CRAN (R 4.0.2)\n   spatstat.core          2.0-0    2021-03-23 [1] CRAN (R 4.0.3)\n   spatstat.data          2.1-0    2021-03-21 [1] CRAN (R 4.0.3)\n   spatstat.geom          2.0-1    2021-03-22 [1] CRAN (R 4.0.3)\n   spatstat.sparse        2.0-0    2021-03-16 [1] CRAN (R 4.0.3)\n   spatstat.utils         2.1-0    2021-03-15 [1] CRAN (R 4.0.3)\n   statmod                1.4.35   2020-10-19 [1] CRAN (R 4.0.2)\n   stringi                1.5.3    2020-09-09 [1] CRAN (R 4.0.2)\n   stringr              * 1.4.0    2019-02-10 [1] CRAN (R 4.0.2)\n   SummarizedExperiment * 1.20.0   2020-10-27 [1] Bioconductor  \n   survival               3.2-7    2020-09-28 [1] CRAN (R 4.0.2)\n   sva                  * 3.38.0   2020-10-27 [1] Bioconductor  \n   tensor                 1.5      2012-05-05 [1] CRAN (R 4.0.2)\n   testthat               3.0.2    2021-02-14 [1] CRAN (R 4.0.3)\n   tibble               * 3.1.2    2021-05-16 [1] CRAN (R 4.0.3)\n   tidyr                * 1.1.3    2021-03-03 [1] CRAN (R 4.0.3)\n   tidyselect             1.1.0    2020-05-11 [1] CRAN (R 4.0.2)\n   tidyverse            * 1.3.0    2019-11-21 [1] CRAN (R 4.0.3)\n   tinytex                0.29     2021-01-21 [1] CRAN (R 4.0.3)\n   usethis                2.0.1    2021-02-10 [1] CRAN (R 4.0.3)\n   utf8                   1.1.4    2018-05-24 [1] CRAN (R 4.0.2)\n   uwot                   0.1.10   2020-12-15 [1] CRAN (R 4.0.3)\n   vctrs                  0.3.8    2021-04-29 [1] CRAN (R 4.0.3)\n   VennDiagram          * 1.6.20   2018-03-28 [1] CRAN (R 4.0.2)\n   VGAM                 * 1.1-5    2021-01-14 [1] CRAN (R 4.0.3)\n   viper                * 1.24.0   2020-10-27 [1] Bioconductor  \n   vipor                  0.4.5    2017-03-22 [1] CRAN (R 4.0.2)\n   viridis                0.5.1    2018-03-29 [1] CRAN (R 4.0.2)\n   viridisLite            0.3.0    2018-02-01 [1] CRAN (R 4.0.2)\n   waiter               * 0.2.0    2021-01-14 [1] CRAN (R 4.0.3)\n   withr                  2.4.1    2021-01-26 [1] CRAN (R 4.0.3)\n   WriteXLS               6.1.0    2020-11-23 [1] CRAN (R 4.0.2)\n   xfun                   0.21     2021-02-10 [1] CRAN (R 4.0.3)\n   XML                    3.99-0.5 2020-07-23 [1] CRAN (R 4.0.2)\n   xml2                   1.3.2    2020-04-23 [1] CRAN (R 4.0.2)\n   xtable                 1.8-4    2019-04-21 [1] CRAN (R 4.0.2)\n   XVector                0.30.0   2020-10-27 [1] Bioconductor  \n   yaml                   2.2.1    2020-02-01 [1] CRAN (R 4.0.2)\n   zip                    2.1.1    2020-08-27 [1] CRAN (R 4.0.2)\n   zlibbioc               1.36.0   2020-10-27 [1] Bioconductor  \n   zoo                    1.8-8    2020-05-02 [1] CRAN (R 4.0.2)\n\n[1] /home/dbdimitrov/R/x86_64-pc-linux-gnu-library/4.0\n[2] /usr/local/lib/R/site-library\n[3] /usr/lib/R/site-library\n[4] /usr/lib/R/library\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/dbdimitrov/BingleSeq/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2019 dbdimitrov\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "parent_header": [
          "BingleSeq"
        ],
        "type": "Text_excerpt",
        "value": "This project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "BingleSeq"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "dbdimitrov"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 189801,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Prerequisites",
        "parent_header": [
          "BingleSeq"
        ],
        "type": "Text_excerpt",
        "value": "BingleSeq requires R>= 3.6.3\n\n"
      },
      "source": "https://raw.githubusercontent.com/dbdimitrov/BingleSeq/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 15:06:01",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 21
      },
      "technique": "GitHub_API"
    }
  ]
}