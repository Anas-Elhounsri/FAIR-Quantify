{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Package Overview and References",
        "parent_header": [
          "MFAssignR"
        ],
        "type": "Text_excerpt",
        "value": "The MFAssignR package was designed for multi-element molecular formula (MF) assignment of ultrahigh resolution mass spectrometry measurements. A number of tools for internal mass recalibration, MF assignment, signal-to-noise evaluation, and unambiguous MF assignments are provided. This package contains MFAssign(), MFAssign_RMD(), MFAssignCHO(), MFAssignCHO_RMD(), SNplot(), HistNoise(), KMDNoise(), RecalList(), Recal(), and IsoFiltR() described in the sections below. Note, the functions with \u201cRMD\u201d were designed to be run within an R Markdown file and are otherwise identical to the corresponding non-\u201dRMD\u201d versions. To learn more, please see the section titled \u201cSemi-Automated MFAssignR Functions\u201d in the User Manual.  User caution with the function parameter settings and output evaluation is required; thus, several function outputs are provided to assist the user with these evaluations.\n"
      },
      "source": "https://raw.githubusercontent.com/skschum/MFAssignR/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "References",
        "parent_header": [
          "Function Examples"
        ],
        "type": "Text_excerpt",
        "value": "Green, N. W. and Perdue, E. M.: Fast Graphically Inspired Algorithm for Assignment of Molecular Formulae in Ultrahigh Resolution Mass Spectrometry, Anal Chem, 87(10), 5086\u20135094, doi:10.1021/ac504166t, 2015.\n\nGross, J. H.: Mass Spectrometry, doi:10.1007/978-3-319-54398-7, 2017. \n\nHerzsprung, P., Hertkorn, N., Tumpling, W. von, Harir, M., Friese, K. and Schmitt-Kopplin, P.: Understanding molecular formula assignment of Fourier transform ion cyclotron resonance mass spectrometry data of natural organic matter from a chemical point of view, Anal Bioanal Chem, 406(30), 7977\u20137987, doi:10.1007/s00216-014-8249-y, 2014.\n\nKoch, B. P., Dittmar, T., Witt, M. and Kattner, G.: Fundamentals of Molecular Formula Assignment to Ultrahigh Resolution Mass Data of Natural Organic Matter, Anal Chem, 79(4), 1758\u20131763, doi:10.1021/ac061949s , 2007.\n\nKozhinov, A. N., Zhurov, K. O. and Tsybin, Y. O.: Iterative Method for Mass Spectra Recalibration via Empirical Estimation of the Mass Calibration Function for Fourier Transform Mass Spectrometry-Based Petroleomics, Anal Chem, 85(13), 6437\u20136445, doi:10.1021/ac400972y, 2013.\n\nKujawinski, E. B. and Behn, M. D.: Automated Analysis of Electrospray Ionization Fourier Transform Ion Cyclotron Resonance Mass Spectra of Natural Organic Matter, Anal Chem, 78(13), 4363\u20134373, doi:10.1021/ac0600306 , 2006.\n\nLobodin, V. V., Marshall, A. G. and Hsu, C. S.: Compositional Space Boundaries for Organic Compounds, Anal Chem, 84(7), 3410\u20133416, doi:10.1021/ac300244f, 2012.\n\nOhno, T. and Ohno, P. E.: Influence of heteroatom pre-selection on the molecular formula assignment of soil organic matter components determined by ultrahigh resolution mass spectrometry, Anal Bioanal Chem, 405(10), 3299\u20133306, doi:10.1007/s00216-013-6734-3, 2013.\n\nPerdue, E. M. and Green, N. W.: Isobaric Molecular Formulae of C, H, and O: A View from the Negative Quadrants of van Krevelen Space, Anal Chem, 87(10), 5079\u20135085, doi:10.1021/ac504165k, 2015.\n\nSavory, J. J., Kaiser, N. K., McKenna, A. M., Xian, F., Blakney, G. T., Rodgers, R. P., Hendrickson, C. L., and Marshall, A. G.: Parts-Per-Billion Fourier Transform Ion Cyclotron Resonance Mass Measurement Accuracy with a \"Walking\" Calibration Equation, Anal Chem, 83, 1732-1736, doi:10.1021/ac102943z, 2011.\n\nZheng, Q., Morimoto, M., Sato, H. and Fouquet, T.: Resolution-enhanced Kendrick mass defect plots for the data processing of mass spectra from wood and coal hydrothermal extracts, Fuel, 235, 944\u2013953, doi:10.1016/j.fuel.2018.08.085, 2019.\n\nZhurov, K. O., Kozhinov, A. N., Fornelli, L. and Tsybin, Y. O.: Distinguishing Analyte from Noise Components in Mass Spectra of Complex Samples: Where to Cut the Noise, Anal Chem, 86(7), 3308\u20133316, doi:10.1021/ac403278t, 2014. \n"
      },
      "source": "https://raw.githubusercontent.com/skschum/MFAssignR/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/skschum/MFAssignR"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-10-17T20:37:40Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-17T21:03:55Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "The MFAssignR package was designed for multi-element molecular formula (MF) assignment of ultrahigh resolution mass spectrometry measurements. A number of tools for internal mass recalibration, MF assignment, signal-to-noise evaluation, and unambiguous formula selections are provided."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9804538339481768,
      "result": {
        "original_header": "Molecular Formula (MF) Assignment",
        "type": "Text_excerpt",
        "value": "The MF assignment algorithm in MFAssign was adapted from the low mass moiety CHOFIT assignment algorithm developed by Green and Perdue (2015). Briefly, the CHOFIT algorithm uses low mass moieties such as CH4O-1 and C4O-3 to move around in the O/C and H/C space to assign MF with C, H, and O without conventional loops. The MFAssignCHO function uses the CHOFIT strategy to assign MF with C, H, and O. Additional combinatorial assignments with various heteroatoms are made using nested loops that subtract the mass of a heteroatom from the measured ion mass, creating a CHO \u201ccore\u201d mass, which can then be assigned using the low mass moiety CHOFIT approach. The MFAssign function uses this latter approach with several additional heteroatoms. Further information is available in Green and Perdue (2015) and Perdue and Green (2015). \n \n"
      },
      "source": "https://raw.githubusercontent.com/skschum/MFAssignR/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9718321112764594,
      "result": {
        "original_header": "MFAssign()",
        "type": "Text_excerpt",
        "value": "MFAssign can be used to assign molecular formulas to two-column or three-column dataframes where the first column is ion mass, the second column is intensity, and the third column can be anything else, but was designed for retention time, allowing better formula assignment of LC-MS data.  \nUsing the low mass moiety and combinatorial assignment approach, MFAssign can be used to assign MF with 12C, 1H, and 16O and a variety of heteroatoms and isotopes, including 2H, 13C, 14N, 15N, 31P, 32S, 34S, 35Cl, 37Cl, 19F, 79Br, 81Br, and 126I. It can also assign Na+ adducts, which are common in positive ion mode. Due to the increasing number of chemically reasonable MF with the increasing number of possible elements and increasing molecular weight, the output will provide a list of ambiguous and unambiguous MF.  \nIn MFAssignR, we use a de novo concept for MF assignment, where de novo means the first in series. This approach takes advantage of the naturally occurring mass spectral patterns typically observed in natural organic matter. The most frequent mass difference patterns include: 2.01565, 14.01565, and 15.99491 that correspond to H2, CH2, and O. Thus, these patterns are used to restrain the number of chemically reasonable MF assigned to ions above the user defined \u2018de novo\u2019 cutoff (e.g., m/z 300). In MFAssign, this is done using Kendrick mass defects and z* sorting. First, Kendrick mass defects (KMD) and z* values are calculated with a CH2 Kendrick base to sort the measured masses into CH2 homologous series (Stenson et al., 2003). The function then selects 1 to 3 members of each CH2 homologous series with ions below the user defined cutoff and attempts to assign MF. The ambiguous MF are then returned to the unassigned list. Then, the unambiguous MF are used as seeds for additional assignments using CH2, O, H2, H2O, and CH2O MF extensions (Kujawinski and Behn, 2006). To do the formula extensions, the KMD and z* values for each of these bases are calculated and then used to assign MF through the addition or subtraction of the series bases.  \n\u201cMFAssign\u201d functions track how many \u201cpaths\u201d can be used to assign each MF and if a single mass has multiple MF. By default, the functions will choose the MF that has the largest number of paths that intercept with it. For example, if a single mass has two possible MF and one has 20 potential \u201cpaths\u201d to it, while the other has 4, the function will choose the MF with 20 paths. Work is ongoing to track these paths and the associated MF in the data frame output of these functions. Overall, the multi-path MF extension approach greatly reduces the number of ambiguous assignments and provides an increased level of confidence in the final MF list because the MF are related to unambiguous MF assigned below the user defined cutoff. To reduce the number of ambiguous sulfur assignments, sulfur containing MF used as seeds must be unambiguous and have a matching 34S peak.  \nTo allow ambiguity in the formula assignments there is the \"Ambig\" parameter which can be turned \"on\" or \"off\". This option turns off the path frequency prioritization step for the formula assignments as described above, which allows all chemically reasonably MF assignments to be retained for each mass. Additionally, an \"MSMS\" parameter is available, which can be used to assign MF in a data set that is not very continuous (e.g., MS/MS data). In this case, no pre-filtering of the ions below the \u201cDeNovo\u201d threshold is done, meaning that all ions below the threshold will be assigned directly. This causes the function to run somewhat slower, but can improve assignment coverage in some situations. These parameters replace the MFAssignAll and MFAssignMSMS functions from previous versions (<= v.0.0.3).\n \n"
      },
      "source": "https://raw.githubusercontent.com/skschum/MFAssignR/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9970755690699691,
      "result": {
        "original_header": "MFAssignCHO()",
        "type": "Text_excerpt",
        "value": "MFAssignCHO is a simplified version of MFAssign used only to assign MF with CHO elements. MFAssignCHO runs faster than MFAssign and can be used for preliminary MF assignments prior to the selection of internal recalibration ions in conjunction with RecalList and Recal, which are described below. \n \n"
      },
      "source": "https://raw.githubusercontent.com/skschum/MFAssignR/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9348216232100629,
      "result": {
        "original_header": "Isotope Filtering",
        "type": "Text_excerpt",
        "value": "The IsoFiltR function can identify prospective 13C and 34S isotope ions. This is done to avoid incorrect monoisotopic MF assignments. This function operates on a two-column or three-column data frame using the same structure as the MFAssign function.  \n1. First the mass list is transformed to identify mass difference pairs appropriate for the element under investigation (delta mass for C (1.003355) or S (1.995797), with +/- 5 ppm mass error). Only those that meet this criterion move on to step 2. \n2. Using the mass difference between 12C/13C (1.003355) or 32S/34S (1.995797), the KMD value can be calculated for a specific isotope. This means that the 12C (32S) monoisotopic peak will be in a KMD homologous series with its matching 13C (34S) isotopic peak, analogous to homologous series of CH2. If the KMD values are equivalent for the candidate pair, the masses can be considered to be in a series and the pair will move on to the third step. The equations for 13C are: KM = 1/1.003355 * m/z and KMD = nominal mass - KM. Then, 2/1.995797 replaces 1/1.003355 for 34S. \n3. Isotope pairs are separated using a \u201cResolution Enhanced KMD\u201d approach adapted from Zheng et al. 2019. Resolution enhanced KMD values are calculated by dividing the mass of some homologous series base (in this case CH2) by an integer that is experimentally determined to accomplish the desired separation. This value is then used in the typical KM and KMD calculation in order to calculate the \u201cresolution enhanced\u201d KMD (re-KMD). For example, the integer 21 is used to adjust the CH2 base mass in the following KMD calculation: BaseMass_adj = 14.01565 / 21  and then re-KM = (round(BaseMass_adj) / BaseMass_adj) * m/z, followed by re-KMD = round(re-KM) - re-KM yields a resolution enhanced KMD.  \nFor 13C, the integer 21 is used in the resolution-enhanced KMD, while for 34S it is 12. Then, the masses that are 12/13 C or 32/34 S pairs will have specific re-KMD difference values, which are used to select the pairs of masses that are most likely to be isotope pairs. The re-KMD differences (polyisotope \u2013 monoisotope) are both positive and negative because the re-KM and re-KMr values were rounded off. The values are -0.291 and 0.709 for 32/34 S and -0.496 and 0.503 for 12/13 C. If the masses meet these criteria, they can move on to step four. Using CH2 KMD values that are divided by an experimentally derived integer, the isotope pairs are separated into two specific values. If the difference in the enhanced KMD for the candidate pair matches one of those values, it will move to the fourth step. \n4. The abundance ratios are used to constrain the remaining isotope pairs to ensure that the isotope masses are not too large or too small relative to the intensity of the monoisotopic peak. The limits on this are loose due to the variation in the polyisotope abundance with analyte signal (similar to isotope dilution) as observed in ultrahigh resolution Orbitrap and FT-ICR measurements. \nThe candidate pairs that make it through these four steps are put into two data frames, Mono and Iso, which contain the monoisotopic and isotopic masses respectively. Then all of the masses that were not flagged as possible mono/iso pairs are returned to the Mono output data frame. In complex mixtures, some masses can be flagged as both monoisotopic and isotopic. In these cases, the masses are included in both outputs and are classified as either monoistopic or isotopic after the MF assignment.\n  \nWhen the two data frame outputs from IsoFiltR() are put into MFAssign(), the function will match the assigned monoisotopic masses to their corresponding isotopic masses. Additional work would be needed to use the isotopes to reduce ambiguous MF assignments assigned to a single mass. Thus IsoFiltR() should not be considered as definitive proof of the presence or absence of 13C or 34S in a MF, but it does identify most MF with these naturally occurring isotopes and limit the chances that they are incorrectly assigned with a monoisotopic MF.\n \n"
      },
      "source": "https://raw.githubusercontent.com/skschum/MFAssignR/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9915620455248781,
      "result": {
        "original_header": "Molecular Formula (MF) Quality Assurance",
        "type": "Text_excerpt",
        "value": "MFAssign includes a number of quality assurance (QA) steps to ensure output of chemically reasonable MF. In general, the default settings are relatively lenient to yield a wide range of chemically reasonable MF for a broad range of experiments. However, many of the parameters are customizable, including DBE-O limits (Herzsprung et al. Anal. and Bioanal. Chem. 2014), O/C ratio limits, H/C ratio limits, and minimum number of O. The HetCut parameter can be used to select the MF with the lowest number of heteroatoms, if more than one MF is assigned to a single mass (Ohno and Ohno, 2013). The NMScut parameter identifies the CH4 vs O exchange series in each nominal mass as described in Koch et al. (2007), which can be used to limit ambiguous assignments. Additional non-adjustable QA parameters are used in all of the \u201cMFAssign\u201d functions, including the nitrogen rule, large atom rule, the maximum number of H rule, maximum DBE rule (Lobodin et al., 2012), and the Senior rules (Kind et al. 2007).\n \n"
      },
      "source": "https://raw.githubusercontent.com/skschum/MFAssignR/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9362589249187142,
      "result": {
        "original_header": "Noise Assessment",
        "type": "Text_excerpt",
        "value": "Noise level assessment can be accomplished using the either the HistNoise or KMDNoise functions in conjunction with the SNplot functions. The HistNoise method is based on the method developed by Zhurov et al. (2014), and KMDNoise is a new custom method based on our observations of raw data Kendrick mass defect analysis.  \nThe Zhurov et al. (2014) method uses a histogram distribution of the natural log intensities in the measured raw mass spectrum to determine the point where noise peaks give way to analyte signal. The HistNoise function attempts to identify this point and reports the noise level so that the signal-to-noise threshold can be determined. The threshold is shown in the output plot with red and blue colors, where red indicates noise. If the function does not predict a reasonable noise level, the threshold can be set manually by the user. We frequently observed this function to fail to separate the distributions when the analyte signal tapers into the noise. For this reason, we developed the KMDNoise function described below. \nThe KMDNoise method is based on the observation that the CH2 based KMD values of noise and analyte masses are naturally separated in a KMD plot, allowing the function to select a region with only noise to calculate the average intensity. We refer to this as the KMD slice method. In principle, this is similar to what was described in Reidel and Dittmar (2014), but instead of using a static range of normal mass defects (0.3-0.9), our method uses a mass dependent KMD region, which avoids potentially doubly charged masses with a mass defect of ~0.5, which would be considered as noise in the Reidel and Dittmar method.  Additionally, the user can set limits on the mass range to use to estimate the noise, if that is necessary to avoid specific high intensity peaks. \nAt least one of these noise estimation functions should be run on the mass list prior to MF assignment with MFAssign or isotope filtering with IsoFiltR. Setting a reasonable S/N threshold greatly increases the speed of the functions and improves the output quality.   \nThe SNplot function is used to show the mass spectrum with the masses below and above the threshold shown in the output plot with red to blue colors, where red indicates noise.\n \n"
      },
      "source": "https://raw.githubusercontent.com/skschum/MFAssignR/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9326650181152601,
      "result": {
        "original_header": "Internal Mass Recalibration",
        "type": "Text_excerpt",
        "value": "The internal mass recalibration method in MFAssignR was adapted from Kozhinov et al. (2013) and Savory et al. (2011). It uses a polynomial central moving average to estimate the weights used to recalibrate the measured ion masses (Kozhinov et al., 2013) applied to spectral segments (Savory et al., 2011) to perform a walking recalibration.  \nFirst, the function RecalList can be used with the output of MFAssign or MFAssignCHO to generate a data frame containing potential recalibrant CH2 homologous series. There are a variety of metrics included in the output of this function to aid the user in picking suitable recalibrant mass series. Some of the more useful parameters for ensuring complete coverage of the spectrum are \u201cNumber Observed\u201d, \u201cMass Range\u201d, and \u201cTall Peak\u201d. The quality of the series with regard to whether the series has gaps in it, how tall the tallest peak is relative to other peaks in the region, and how close the two tallest peaks are to each other are estimated with the \u201cSeries Score\u201d, \u201cPeak Distance\u201d, and \u201cAbundance Score\u201d respectively. Please see the User Manual/Vignette for more information about each parameter in RecalList. Combined, these series should cover the full mass spectral range to provide the best overall recalibration. The best series to choose are generally long and combined have a \u201cTall Peak\u201d at least every 100 m/z.  \nUp to ten of these series can be chosen to be used in the Recal function, which recalibrates the spectrum. Choosing appropriate recalibrants is a critical aspect of recalibrating a mass spectrum effectively. After selecting the recalibrant series and entering them to the Recal function, the parameter in Recal most likely to be changed is \u201cmzRange\u201d which sets the recalibration segment length and has a default value of 30. If this value does not work a warning will be printed to the R console telling the user to increase the value. Formula extension via H2 and O homologous series uses the user defined recalibrant series as a base to find additional recalibrant ions. It is limited to a user defined number of steps (\u00b1 H2 or O) and generates a pool of potential recalibrant ions. Formula extension occurs between the assigned unambiguous molecular formulas and then each of the potential recalibrant ions are checked for a matching 13C peak. If there is a matching 13C then it is also added to the pool of recalibrant ions to be used. This pool of recalibrant ions are separated into each user defined segment and used to calculate a mass error correction term based on Kozhinov et al. (2013). These mass correction terms are then used to recalibrate each segment independently, removing the systematic error present in a mass spectrum.\n \n"
      },
      "source": "https://raw.githubusercontent.com/skschum/MFAssignR/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Additional Documentation",
        "parent_header": [
          "MFAssignR"
        ],
        "type": "Text_excerpt",
        "value": "This package is the focus of a peer-reviewed journal article in Environmental Research. The citation is:\nSchum S.K., Brown L.E., Mazzoleni L.R., MFAssignR: Molecular formula assignment software for ultrahigh resolution mass spectrometry analysis of environmental complex mixtures, Environmental Research, https://doi.org/10.1016/j.envres.2020.11011, volume 191, (2020). \n\nIf you use this package please refer to this publication as well.\n"
      },
      "source": "https://raw.githubusercontent.com/skschum/MFAssignR/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/skschum/MFAssignR/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 24
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/skschum/MFAssignR/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "skschum/MFAssignR"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MFAssignR"
      },
      "source": "https://raw.githubusercontent.com/skschum/MFAssignR/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/skschum/MFAssignR/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "GNU General Public License v2.0",
        "spdx_id": "GPL-2.0",
        "type": "License",
        "url": "https://api.github.com/licenses/gpl-2.0",
        "value": "https://api.github.com/licenses/gpl-2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 2, June 1991\n\n Copyright (C) 1989, 1991 Free Software Foundation, Inc.,\n 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  This\nGeneral Public License applies to most of the Free Software\nFoundation's software and to any other program whose authors commit to\nusing it.  (Some other Free Software Foundation software is covered by\nthe GNU Lesser General Public License instead.)  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must show them these terms so they know their\nrights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License applies to any program or other work which contains\na notice placed by the copyright holder saying it may be distributed\nunder the terms of this General Public License.  The \"Program\", below,\nrefers to any such program or work, and a \"work based on the Program\"\nmeans either the Program or any derivative work under copyright law:\nthat is to say, a work containing the Program or a portion of it,\neither verbatim or with modifications and/or translated into another\nlanguage.  (Hereinafter, translation is included without limitation in\nthe term \"modification\".)  Each licensee is addressed as \"you\".\n\nActivities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning the Program is not restricted, and the output from the Program\nis covered only if its contents constitute a work based on the\nProgram (independent of having been made by running the Program).\nWhether that is true depends on what the Program does.\n\n  1. You may copy and distribute verbatim copies of the Program's\nsource code as you receive it, in any medium, provided that you\nconspicuously and appropriately publish on each copy an appropriate\ncopyright notice and disclaimer of warranty; keep intact all the\nnotices that refer to this License and to the absence of any warranty;\nand give any other recipients of the Program a copy of this License\nalong with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) You must cause the modified files to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n    when run, you must cause it, when started running for such\n    interactive use in the most ordinary way, to print or display an\n    announcement including an appropriate copyright notice and a\n    notice that there is no warranty (or else, saying that you provide\n    a warranty) and that users may redistribute the program under\n    these conditions, and telling the user how to view a copy of this\n    License.  (Exception: if the Program itself is interactive but\n    does not normally print such an announcement, your work based on\n    the Program is not required to print an announcement.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Program,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Program, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\nwith the Program (or with a work based on the Program) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may copy and distribute the Program (or a work based on it,\nunder Section 2) in object code or executable form under the terms of\nSections 1 and 2 above provided that you also do one of the following:\n\n    a) Accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n    distributed under the terms of Sections 1 and 2 above on a medium\n    customarily used for software interchange; or,\n\n    c) Accompany it with the information you received as to the offer\n    to distribute corresponding source code.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form with such\n    an offer, in accord with Subsection b above.)\n\nThe source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\noperating system on which the executable runs, unless that component\nitself accompanies the executable.\n\nIf distribution of executable or object code is made by offering\naccess to copy from a designated place, then offering equivalent\naccess to copy the source code from the same place counts as\ndistribution of the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  4. You may not copy, modify, sublicense, or distribute the Program\nexcept as expressly provided under this License.  Any attempt\notherwise to copy, modify, sublicense or distribute the Program is\nvoid, and will automatically terminate your rights under this License.\nHowever, parties who have received copies, or rights, from you under\nthis License will not have their licenses terminated so long as such\nparties remain in full compliance.\n\n  5. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Program or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Program (or any work based on the\nProgram), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\n  7. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Program.\n\nIf any portion of this section is held invalid or unenforceable under\nany particular circumstance, the balance of the section is intended to\napply and the section as a whole is intended to apply in other\ncircumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system, which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  8. If the distribution and/or use of the Program is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Program under this License\nmay add an explicit geographical distribution limitation excluding\nthose countries, so that distribution is permitted only in or among\ncountries not thus excluded.  In such case, this License incorporates\nthe limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of this License which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthis License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n                            NO WARRANTY\n\n  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License along\n    with this program; if not, write to the Free Software Foundation, Inc.,\n    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) year name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, the commands you use may\nbe called something other than `show w' and `show c'; they could even be\nmouse-clicks or menu items--whatever suits your program.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThis General Public License does not permit incorporating your program into\nproprietary programs.  If your program is a subroutine library, you may\nconsider it more useful to permit linking proprietary applications with the\nlibrary.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.\n"
      },
      "source": "https://raw.githubusercontent.com/skschum/MFAssignR/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MFAssignR"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "skschum"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 2223573,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 1001341,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/skschum/MFAssignR/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "skschum",
          "type": "User"
        },
        "date_created": "2022-06-16T15:09:46Z",
        "date_published": "2022-06-16T15:15:54Z",
        "description": "This release of MFAssignR includes all the minor changes made during the lifetime of v.1.0.1 (described in Package Updates) and a couple of additional fixes. \r\n\r\nThe primary bug fix solves the problems experienced by users who use the newest version of R (v.4.2.0) while still being functional in older version of R. \r\n\r\nA secondary bug fix is related to the visualization of the VK and MZgroups plots from the MFAssign family functions, limiting the number of groups represented in the legend to those that are actually present in the data.",
        "html_url": "https://github.com/skschum/MFAssignR/releases/tag/v1.0.2",
        "name": "6th Release of MFAssignR (v. 1.0.2)",
        "release_id": 69630999,
        "tag": "v1.0.2",
        "tarball_url": "https://api.github.com/repos/skschum/MFAssignR/tarball/v1.0.2",
        "type": "Release",
        "url": "https://api.github.com/repos/skschum/MFAssignR/releases/69630999",
        "value": "https://api.github.com/repos/skschum/MFAssignR/releases/69630999",
        "zipball_url": "https://api.github.com/repos/skschum/MFAssignR/zipball/v1.0.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "skschum",
          "type": "User"
        },
        "date_created": "2020-08-14T13:26:20Z",
        "date_published": "2020-08-14T13:36:47Z",
        "description": "This announcement regards the release of MFAssignR version 1.0.1, which works with R version >= 4.0.0.\r\n\r\nThis new version also adds new heteroatoms for assignment (79Br, 81Br, and 126I), and the ability to use 2 or 3 column data frames, allowing users to assign formulas to LC-MS data and keep the retention time connected to the mass and abundance.\r\n\r\nThere are also a variety of more \"under-the-hood\" changes that improve the functionality of many of the functions in the package and are described in more detail in \"Package Updates\".\r\n\r\nAdditionally, this release archives MFAssignR 1.0.0, which is directly related to the version described in the publication: \r\nSchum SK, LE Brown, LR Mazzoleni, MFAssignR: Molecular Formula Assignment Software for Ultrahigh Resolution Mass Spectrometry Analysis of Environmental Complex Mixtures, Revised and Re-Submitted, Environmental Research, 2020.\r\n\r\n",
        "html_url": "https://github.com/skschum/MFAssignR/releases/tag/v1.0.1",
        "name": "Fifth Release of MFAssignR (Version 1.0.1)",
        "release_id": 29700235,
        "tag": "v1.0.1",
        "tarball_url": "https://api.github.com/repos/skschum/MFAssignR/tarball/v1.0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/skschum/MFAssignR/releases/29700235",
        "value": "https://api.github.com/repos/skschum/MFAssignR/releases/29700235",
        "zipball_url": "https://api.github.com/repos/skschum/MFAssignR/zipball/v1.0.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "skschum",
          "type": "User"
        },
        "date_created": "2020-03-11T12:37:01Z",
        "date_published": "2020-06-11T15:40:51Z",
        "description": "This is the version of MFAssignR that was uploaded in February 2020. It has improvements to the formula extension mechanism, accounting for situations where the Kendrick mass defect \"wraps\" around the plot.  New parameters have been added to give the user control of the mass defect \"break points\" for this wrapping.\r\n\r\nAdditionally, there has been a major overhaul of the Recal() function which removes the four optional methods of recalibration and replaces them with a single and improved method, relying on the same principles, but restricts recalibrant ions to only those selected by the chosen series and a small formula extension on the O and H2 series.\r\n\r\nAdditional, minor internal improvements have been made as well. If you downloaded this package after February 2020, this release notification applies to the version that you have and there is no need to download it again.",
        "html_url": "https://github.com/skschum/MFAssignR/releases/tag/1.0.0",
        "name": "Fifth Release of MFAssignR",
        "release_id": 27460359,
        "tag": "1.0.0",
        "tarball_url": "https://api.github.com/repos/skschum/MFAssignR/tarball/1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/skschum/MFAssignR/releases/27460359",
        "value": "https://api.github.com/repos/skschum/MFAssignR/releases/27460359",
        "zipball_url": "https://api.github.com/repos/skschum/MFAssignR/zipball/1.0.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "skschum",
          "type": "User"
        },
        "date_created": "2019-10-10T22:31:52Z",
        "date_published": "2019-10-10T22:41:03Z",
        "description": "This is the release for version 0.0.5 of MFAssignR. It includes improvements to IsoFiltR(), allowing more user control. Also, the four versions of recalibration have been rolled into a single function. Miscellaneous improvements to MFAssign and MFAssignCHO have also been done. See \"Package Updates\", ReadMe, or User Manual Vignette for more information.",
        "html_url": "https://github.com/skschum/MFAssignR/releases/tag/v0.0.5",
        "name": "Fourth Release of MFAssignR",
        "release_id": 20626029,
        "tag": "v0.0.5",
        "tarball_url": "https://api.github.com/repos/skschum/MFAssignR/tarball/v0.0.5",
        "type": "Release",
        "url": "https://api.github.com/repos/skschum/MFAssignR/releases/20626029",
        "value": "https://api.github.com/repos/skschum/MFAssignR/releases/20626029",
        "zipball_url": "https://api.github.com/repos/skschum/MFAssignR/zipball/v0.0.5"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "skschum",
          "type": "User"
        },
        "date_created": "2019-05-13T19:00:52Z",
        "date_published": "2019-05-13T19:18:01Z",
        "description": "This version of MFAssignR contains several updates to the MFAssign functions and recalibration functions.  Improvements to IsoFiltR and the addition of the Recal_2() were part of v0.0.3, though there wasn't an official release for that version of the package.\r\n\r\nv0.0.4 includes:\r\nRemoval of MFAssignAll() and MFAssignAll_MSMS(), and the addition of their functionality to MFAssign() and MFAssignCHO() with the addition of the \"Ambig\" and \"MSMS\" parameters. \r\n\r\nMaking the sulfur isotope check for formula assignment optional via the \"SulfCheck\" parameter.\r\n\r\nAddition of two new recalibration functions, RecalX() and Recal_2X().\r\n\r\nGeneral improvements to the flexibility and transparency of molecular formula assignment and the other functions in this package.\r\n\r\nSee the documentation for further detail.\r\n",
        "html_url": "https://github.com/skschum/MFAssignR/releases/tag/v0.0.4",
        "name": "Third Release of MFAssignR",
        "release_id": 15058933,
        "tag": "v0.0.4",
        "tarball_url": "https://api.github.com/repos/skschum/MFAssignR/tarball/v0.0.4",
        "type": "Release",
        "url": "https://api.github.com/repos/skschum/MFAssignR/releases/15058933",
        "value": "https://api.github.com/repos/skschum/MFAssignR/releases/15058933",
        "zipball_url": "https://api.github.com/repos/skschum/MFAssignR/zipball/v0.0.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "skschum",
          "type": "User"
        },
        "date_created": "2018-10-25T12:22:17Z",
        "date_published": "2018-10-25T12:26:16Z",
        "description": "This is an update to MFAssignR, the changes are as follows:\r\n\r\n- Positive odd electron formula assignment (POEx) now works.\r\n- Negative odd electron formula assignment (NOEx) has been implemented.\r\n- Fluorine (Flx) has been added as another possible heteroatom for assignment.",
        "html_url": "https://github.com/skschum/MFAssignR/releases/tag/v0.0.2",
        "name": "Second Release MFAssignR",
        "release_id": 13653821,
        "tag": "v0.0.2",
        "tarball_url": "https://api.github.com/repos/skschum/MFAssignR/tarball/v0.0.2",
        "type": "Release",
        "url": "https://api.github.com/repos/skschum/MFAssignR/releases/13653821",
        "value": "https://api.github.com/repos/skschum/MFAssignR/releases/13653821",
        "zipball_url": "https://api.github.com/repos/skschum/MFAssignR/zipball/v0.0.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "skschum",
          "type": "User"
        },
        "date_created": "2018-10-17T21:47:14Z",
        "date_published": "2018-10-18T12:46:55Z",
        "description": "This is the first public release of MFAssignR.",
        "html_url": "https://github.com/skschum/MFAssignR/releases/tag/v0.0.1",
        "name": "First release of MFAssignR",
        "release_id": 13506964,
        "tag": "v0.0.1",
        "tarball_url": "https://api.github.com/repos/skschum/MFAssignR/tarball/v0.0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/skschum/MFAssignR/releases/13506964",
        "value": "https://api.github.com/repos/skschum/MFAssignR/releases/13506964",
        "zipball_url": "https://api.github.com/repos/skschum/MFAssignR/zipball/v0.0.1"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "installation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 12:40:09",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 22
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Recommended Order of Operations",
        "parent_header": [
          "Function Examples"
        ],
        "type": "Text_excerpt",
        "value": "The functions will be described in the order that they are most effectively used. The functions do not have to be run in this order, but often the best results will likely be obtained in this way. A list of the functions in the recommended order is given below:\n\n1. Run KMDNoise() to determine the noise level for the data.\n \n2. Check effectiveness of S/N threshold using SNplot().\n \n3. Use IsoFiltR() to identify potential 13C and 34S isotope masses.\n \n4. Using the S/N threshold, and the two data frames output from IsoFiltR(), run MFAssignCHO() to assign MF with C, H, and O to assess the mass accuracy.\n \n5. Use RecalList() to generate a list of the potential recalibrant series.\n \n6. After choosing recalibrant series, use Recal() to recalibrate the mass lists.\n \n7. Assign MF to the recalibrated mass list using MFAssign().\n \n8. Check the output plots from MFAssign() to evaluate the quality of the assignments.\n\nThe functions in the MFAssignR package were developed by adapting methods and algorithms from the peer reviewed literature. The following references were referred to in this document:\n"
      },
      "source": "https://raw.githubusercontent.com/skschum/MFAssignR/master/README.md",
      "technique": "header_analysis"
    }
  ]
}