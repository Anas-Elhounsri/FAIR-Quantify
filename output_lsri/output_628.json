{
  "application_domain": [
    {
      "confidence": 21.98,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/rhysf/HaplotypeTools"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-12-21T15:09:26Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-03-29T19:45:07Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A toolkit for identifying recombination and recombinant genotypes"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "HaplotypeTools Description",
        "type": "Text_excerpt",
        "value": "HaplotypeTools is a set of scripts designed to phase aligned WGS data, whereby\nhaplotypes are constructed from sufficient numbers of reads overlapping two or\nmore bi-allelic heterozygous position. Both haplotypes will need to be recovered\naccording to a cutoff (-c) in HaplotypeTools.pl. HaplotypeTools.pl can take a \nlond time when not submitted in parallel to a cluster, so where available it should\nbe run in parallel (via settings -g, -a and -q). Once phased, the VCF can be compared \nto consensus genomes belonging to relatives in order to identify possible parental\nstrains, or can be compared to other phased VCF's (or if multi VCF, samples within)\nto look for crossovers.\n\nGenomic regions that are phased in >=1 VCF (or multiple samples within a VCF) \nare called 'phased in any/all; PIA'. Phased in any (-p 1) is the default, while \nphased in all (-p 2) will output only regions phased in every sample.\nPIA in either setting serve as an intermediate file needed to \nextract haplotypes in FASTA format, as well as HaplotypePlacer. For comparing\nhaplotypes to consensus genomes, phased in any (-p 1) is best, as it will maximise\nthe number of genomic regions, or phased in just a single sample for fewer sites\nthat are most informative to that sample. Some applications may require identifying\nregions that are phased in 2+ samples, in which case phased in all (-p 2) should\nbe used.\n\nHaplotype_placer.pl will compare haplotypes from a phased VCF and consensus\ngenomes for other isolates, and iteratively construct trees using FastTree to\nidentify the nearest relative of each haplotype, which can be useful for identifying\nparents of recombinants or hybrids, as well as visualising breakpoints. The output\nincludes both summaries and window files that can be plotted using the script XXX.\n\nVCF_phased_compare_to_VCF_phased.pl can be used to compare two phased VCFs and\ndirectly identify genomic regions that contain crossovers between them.\n"
      },
      "source": "https://raw.githubusercontent.com/rhysf/HaplotypeTools/main/README",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9214307314185958,
      "result": {
        "original_header": "Individual script details:",
        "type": "Text_excerpt",
        "value": "HaplotypeTools.pl \nParameters: -v <VCF> \n            -b <BAM (sorted) separated by comma if phasing multiple samples in a multi VCF> \n            -f <reference fasta>\n\t    -u VCF sample names in order of input BAM files (separated by comma if phasing multiple samples)\nOptional:   -c Cut-off percent reads supporting phase group [90]\n            -m Minimum read depth overlapping two heterozygous SNPs [4]\n\t    -r Max phase length [10000]\n\t    -s Steps (1=process VCF, 2=process BAM, 3=assign read info to VCF, 4=validate and assign phase groups, 5=concatenate) [12345]\nParallel:   -g Run commands on the grid (y/n) [n]\n            -a Platform (UGER, LSF, GridEngine) [UGER]\n\t    -q Queue name [short]\nOutputs:    -o Output folder for tmp files [opt_v-HaplotypeTools-phased-r-opt_r]\n\t    -p Phased VCF [opt_v-Phased-m-opt_m-c-opt_c-r-opt_r.vcf]\n            -y Phased summary [opt_v-Phased-m-opt_m-c-opt_c-r-opt_r-summary.tab] \nFASTA_compare_sequences.pl\nParameters: -f <FASTA>\nOptional:   -o Output (p=pairwise within opt_f, s=summary of pairwise within opt_f, a=additional FASTA: 1:1 order) [p]\n            -g Exclude if gaps percent is greater than this [100]\n\t    -a <Additional FASTA in same order> [] \nHaplotype_placer.pl \nParameters: -p <phased in any/all; PIA>\n            -a <Haplotype file 1 FASTA>\n            -b <Haplotype file 2 FASTA>\n            -n <Name tab Type tab Location for consensus genomes>\nOptional:   -f Folder for output FASTA and Trees [HaplotypeTools_output]\n            -c Clades/Lineages/Metadata to cluster isolates by. Format (Name tab Clades/Lineages/Metadata) []\n            -t Location of FastTree [/seq/annotation/bio_tools/FastTree/current/FastTreeMP]\n            -m Mimimum length of haplotypes [100]\n            -v Verbose (y/n) [n]\nWindows:    -d Calculate windows (y/n) [n]\n            -l <Reference FASTA> []\n            -z Window length [10000]\nOutput:     -f Output folder for genomic FASTA files and Trees [HaplotypeTools_output]\n            -s Output summary [HaplotypeTools_summary]\n\t    -w Output windows [HaplotypeTools_windows] \n\nVCF_and_FASTA_to_consensus_FASTA.pl \nParameters: -v <VCF> \n            -r <reference FASTA>\nOptional:   -i Include homozygous indels (y/n) [n]\n            -h Include bi-allelic heterozygous positions if ref base not included (y/n) [y]\n            -a For heterozygous positions, use ambiguity code (a) or first position for haploid consensus (f) [f]\n\t    -n Character for ambiguous [N]\n\t    -s Restrict to only this supercontig [n]\n\t    -t Restrict to only this isolate [n]\nNotes: Prints to opt_v-isolate-name-consensus.fasta \nVCF_phase.pl\nParameters: -v <VCF from step 1 of HaplotypeTools>\n            -a <alignment file from step 2 of HaplotypeTools> \nVCF_phased_to_PIA.pl\nParameters: -v <VCF's (separated by comma)> \n            -f <reference FASTA>\nOptional:   -c Length cut-off for minimum haplotype to be considered [10]\n            -p Phased in any (1), Phased in all (2) [1]\n            -s Sample names to restrict analysis too (separated by comma)\n            -t Phase Tag (HaplotypeTools uses PID, Whatshap uses PS or HP etc) [PID]\nOutput:     -u Summary [opt-v-PIA-p-Opt_p-c-Opt_c-s-Opt_s.summary]\n            -o Output [opt-v-PIA-p-Opt_p-c-Opt_c-s-Opt_s.tab] \nVCF_phased_validate_and_assign_phase_groups.pl\nParameters: -v <VCF-phased-Sample_Number (from VCF_phase.pl)>\nOptional:   -c Cut-off percent reads supporting phase group [90]\n            -m Minimum read depth overlapping two heterozygous SNPs [4]\n            -z Verbose for error checking (y/n) [n]\nOutput:     -o Output VCF [opt_v-and-assigned.tab]\n            -l Tallies for percent of reads agreeing with phases [opt_v-Tally-agree-disagree-opt_m-MD-opt_c-pc_cutoff.tab] \nWindows_haplotypes_to_R_figure.pl\nParameters: -w <Windows haplotypes dataframe>\nOptional    -s Scaling factor for width (nucleotides per mm) [20000]\n            -h Scaling factor for height (genome per mm) [70]\n            -r Resolution (The nominal resolution in ppi) [100]\n            -c Minimum contig length to include label [1000000]\n            -g Optional size of axis text [2]\n            -l Legend size [2]\n            -x X-min [0]\n \n"
      },
      "source": "https://raw.githubusercontent.com/rhysf/HaplotypeTools/main/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9933832291970384,
      "result": {
        "type": "Text_excerpt",
        "value": "HaplotypeTools is a set of tools that can phase DNAseq data into haplotypes\nfor the purposes of identifying recombination (crossovers between samples),\nidentifying parental isolates or clades, or various population genetic tests.\nThe tools require BioPerl and Bio::DB::HTS modules (installed via cpan or cpanm.)\nInputs are Samtools indexed BAM, VCF, and reference FASTA. \n"
      },
      "source": "https://raw.githubusercontent.com/rhysf/HaplotypeTools/main/README",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/rhysf/HaplotypeTools/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/rhysf/HaplotypeTools/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "rhysf/HaplotypeTools"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/rhysf/HaplotypeTools/main/README",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.94198109193932,
      "result": {
        "original_header": "Individual script details:",
        "type": "Text_excerpt",
        "value": "Haplotype_placer.pl \nParameters: -p <phased in any/all; PIA>\n            -a <Haplotype file 1 FASTA>\n            -b <Haplotype file 2 FASTA>\n            -n <Name tab Type tab Location for consensus genomes>\nOptional:   -f Folder for output FASTA and Trees [HaplotypeTools_output]\n            -c Clades/Lineages/Metadata to cluster isolates by. Format (Name tab Clades/Lineages/Metadata) []\n            -t Location of FastTree [/seq/annotation/bio_tools/FastTree/current/FastTreeMP]\n            -m Mimimum length of haplotypes [100]\n            -v Verbose (y/n) [n]\nWindows:    -d Calculate windows (y/n) [n]\n            -l <Reference FASTA> []\n            -z Window length [10000]\nOutput:     -f Output folder for genomic FASTA files and Trees [HaplotypeTools_output]\n            -s Output summary [HaplotypeTools_summary]\n\t    -w Output windows [HaplotypeTools_windows] \n\nVCF_and_FASTA_to_consensus_FASTA.pl \nParameters: -v <VCF> \n            -r <reference FASTA>\nOptional:   -i Include homozygous indels (y/n) [n]\n            -h Include bi-allelic heterozygous positions if ref base not included (y/n) [y]\n            -a For heterozygous positions, use ambiguity code (a) or first position for haploid consensus (f) [f]\n\t    -n Character for ambiguous [N]\n\t    -s Restrict to only this supercontig [n]\n\t    -t Restrict to only this isolate [n]\nNotes: Prints to opt_v-isolate-name-consensus.fasta \nVCF_phased_and_PIA_to_FASTA.pl \nParameters: -v <VCF file> \n            -l <PIA file (contig tab start tab stop)> \n            -r <Reference FASTA>\nOptional:   -u Sample name in VCF to pull haplotypes from [WGS]\n            -p Printing option (o=outfile, s=split to opt_l_1 and _2) [s]\n            -e Exclude printing if haplotypes are identical (y/n) [n]\n\t    -m min length [10]\n\t    -i Include indels (y/n) [n]\n\t    -z Verbose for testing (y/n) [n] \nVCF_phased_calculate_haplotype_lengths.pl <Phased VCF file (with optional additional VCFs separated by comma)>\nOptional:  -s Sample name (with optional additional sample names separated by comma)\n           -e Output results for every sample (y/n) [n] \nVCF_phased_compare_to_VCF_phased.pl\nParameters: -a <VCF file 1>\n            -b <VCF file 2>\n\t    or\n\t    -a <VCF>\n\t    -c Sample ID 1\n\t    -d Sample ID 2\nOptional:   -o Outfile extension [HaplotypeTools_VCF1_vs_VCF2] \n"
      },
      "source": "https://raw.githubusercontent.com/rhysf/HaplotypeTools/main/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.998083881578065,
      "result": {
        "type": "Text_excerpt",
        "value": "https://github.com/rhysf/HaplotypeTools \n"
      },
      "source": "https://raw.githubusercontent.com/rhysf/HaplotypeTools/main/README",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8397204448266467,
      "result": {
        "original_header": "Individual script details:",
        "type": "Text_excerpt",
        "value": "HaplotypeTools.pl \nParameters: -v <VCF> \n            -b <BAM (sorted) separated by comma if phasing multiple samples in a multi VCF> \n            -f <reference fasta>\n\t    -u VCF sample names in order of input BAM files (separated by comma if phasing multiple samples)\nOptional:   -c Cut-off percent reads supporting phase group [90]\n            -m Minimum read depth overlapping two heterozygous SNPs [4]\n\t    -r Max phase length [10000]\n\t    -s Steps (1=process VCF, 2=process BAM, 3=assign read info to VCF, 4=validate and assign phase groups, 5=concatenate) [12345]\nParallel:   -g Run commands on the grid (y/n) [n]\n            -a Platform (UGER, LSF, GridEngine) [UGER]\n\t    -q Queue name [short]\nOutputs:    -o Output folder for tmp files [opt_v-HaplotypeTools-phased-r-opt_r]\n\t    -p Phased VCF [opt_v-Phased-m-opt_m-c-opt_c-r-opt_r.vcf]\n            -y Phased summary [opt_v-Phased-m-opt_m-c-opt_c-r-opt_r-summary.tab] \nOptional:   -s Sample number\nOutput:     -o Output [opt_v-phased-opt_s] \nVCF_phase_haploid.pl <VCF file 1> > outfile.vcf \nVCF_phased_append_name_to_phase_group.pl <VCF file 1> > outfile.vcf \nVCF_phased_compare_to_VCF_phased.pl\nParameters: -a <VCF file 1>\n            -b <VCF file 2>\n\t    or\n\t    -a <VCF>\n\t    -c Sample ID 1\n\t    -d Sample ID 2\nOptional:   -o Outfile extension [HaplotypeTools_VCF1_vs_VCF2] \n"
      },
      "source": "https://raw.githubusercontent.com/rhysf/HaplotypeTools/main/README",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/rhysf/HaplotypeTools/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "HaplotypeTools"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "rhysf"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 165994,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 17172,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rhysf/HaplotypeTools/main/README"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Prerequisites:",
        "type": "Text_excerpt",
        "value": "R (plyr, RColorBrewer)\nPerl\nBioPerl\nBio::DB::HTS\nHash::Merge\nSamtools v0.1.10 or higher (samtools.sourceforge.net)\nFastTree (http://www.microbesonline.org/fasttree/)\n"
      },
      "source": "https://raw.githubusercontent.com/rhysf/HaplotypeTools/main/README",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 01:45:30",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 20
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Getting started / example pipeline for phasing individual sample",
        "type": "Text_excerpt",
        "value": "git clone git@github.com:rhysf/HaplotypeTools.git\ncd HaplotypeTools/\nperl HaplotypeTools.pl -v <vcf> -b <sorted BAM> -u <VCF sample name> -f <reference.fasta>\nperl util/VCF_phased_to_PIA.pl \\\n\t-v <vcf-Phased-m-4-c-90-r-10000.vcf> \\\n\t-f <reference.fasta>\nperl util/VCF_phased_and_PIA_to_FASTA.pl \\\n\t-v <vcf-Phased-m-4-c-90-r-10000.vcf> \\\n\t-l <vcf-Phased-m-4-c-90-r-10000.vcf-PIA-p-1-c-10-s-all.tab> \\\n\t-r <reference.fasta>\nperl util/FASTA_compare_sequences.pl \\\n\t-f <vcf-Phased-m-4-c-90-r-10000.vcf-PIA-p-1-c-10-s-all.tab_1.fasta> \\\n\t-a <vcf-Phased-m-4-c-90-r-10000.vcf-PIA-p-1-c-10-s-all.tab_2.fasta> \\ \n\t-o a > summary\n"
      },
      "source": "https://raw.githubusercontent.com/rhysf/HaplotypeTools/main/README",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example pipeline for phasing multi sample VCF",
        "type": "Text_excerpt",
        "value": "perl HaplotypeTools.pl -v <multi sample vcf> \\\n\t-b <sorted BAMs (separated by comma)> \\\n\t-u <VCF sample names in order of input BAM files (separated by comma)> \\\n\t-f <reference.fasta>\nperl util/VCF_phased_to_PIA.pl \\\n\t-v <vcf-Phased-m-4-c-90-r-10000.vcf> \\\n\t-f <reference.fasta>\n\t[if PIA is only for subset of samples] -s <VCF sample names to restrict analysis to>\nperl util/VCF_phased_and_PIA_to_FASTA.pl \\\n\t-v <vcf-Phased-m-4-c-90-r-10000.vcf> \\\n\t-l <vcf-Phased-m-4-c-90-r-10000.vcf-PIA-p-1-c-10-s-all.tab> \\\n\t-r <reference.fasta>\n\t-u <sample name in VCF to pull haplotypes from>\nperl util/FASTA_compare_sequences.pl \\\n\t-f <vcf-Phased-m-4-c-90-r-10000.vcf-PIA-p-1-c-10-s-<opt_u>.tab_1.fasta> \\\n\t-a <vcf-Phased-m-4-c-90-r-10000.vcf-PIA-p-1-c-10-s-<opt_u>.tab_2.fasta> \\ \n\t-o a > summary\n"
      },
      "source": "https://raw.githubusercontent.com/rhysf/HaplotypeTools/main/README",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example pipeline for comparing haplotypes to other genomes",
        "type": "Text_excerpt",
        "value": "perl util/VCF_and_FASTA_to_consensus_FASTA.pl \\\n\t-v <sample1.vcf> \\\n\t-r <reference.fasta>\n\nWill make your consensus genomes. Next, we need to make a tabular file in the \nfollowing format (Name_Type_Location.tab) E.g.:\n\nSample1\tFASTA\t/dir/with/your/consensus/FASTA/sample1.vcf-WGS-s-n-i-n-n-N-consensus.fasta\nSample2\tFASTA\t/dir/with/your/consensus/FASTA/sample2.vcf-WGS-s-n-i-n-n-N-consensus.fasta\nSample3\tFASTA\t/dir/with/your/consensus/FASTA/sample3.vcf-WGS-s-n-i-n-n-N-consensus.fasta\n...\n\nAnd an optional tabular file for clades/lineages E.g.:\nSample1\tclade1\nSample2\tclade1\nSample3\tclade2\n\nperl util/VCF_phased_to_PIA.pl \\\n\t-v <phased_sample1.vcf>,<phased_sample2.vcf>,<phased_sample3.vcf> \\\n\t-f <reference.fasta>\nperl util/VCF_phased_and_PIA_to_FASTA.pl \\\n\t-v <phased_sample1.vcf> \\\n\t-l <phased_sample1.vcf-plus_other_VCFs-PIA-p-1-c-10-s-all.tab> \\\n\t-r <reference.fasta> \nperl util/Haplotype_placer.pl \\\n\t-p <phased_sample1-plus_other_VCFs-PIA-p-1-c-10-s-all.tab> \\\n\t-a <phased_sample1.vcf-plus_other_VCFs-PIA-p-1-c-10-s-all.tab_1.fasta> \\\n\t-b <phased_sample1.vcf-plus_other_VCFs-PIA-p-1-c-10-s-all.tab_2.fasta> \\\n\t-n <Name_Type_Location.tab>\n"
      },
      "source": "https://raw.githubusercontent.com/rhysf/HaplotypeTools/main/README",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example pipeline to identify crossovers",
        "type": "Text_excerpt",
        "value": "perl util/VCF_phased_compare_to_VCF_phased.pl \\\n\t-a <phased_sample1.vcf> \\\n\t-b <phased_sample2.vcf> \\\n\t-o sample1_vs_sample2\n\nor\n\nperl util/VCF_phased_compare_to_VCF_phased.pl \\\n\t-a <phased.vcf> \\\n\t-c <sample ID 1 from VCF>\n\t-d <sample ID 2 from VCF>\n\t-o sample1_vs_sample2\n"
      },
      "source": "https://raw.githubusercontent.com/rhysf/HaplotypeTools/main/README",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example pipeline using test data (chr1 Bd) to phase individual sample and plot haploytpe windows",
        "type": "Text_excerpt",
        "value": "cd HaplotypeTools/example\nperl ../HaplotypeTools.pl \\\n\t-v Hybrid-SA.vcf-chr1.vcf \\\n\t-b Hybrid-SA.vcf-chr1.bam \\\n\t-u Hybrid-SA-EC3 \\\n\t-f Hybrid-SA.vcf-chr1.fasta\n\n[note] if you can submit jobs to a cluster, use options -g, -a and -q to speed this step up.\n\nperl ../util/VCF_phased_to_PIA.pl \\\n\t-v Hybrid-SA.vcf-chr1.vcf-Phased-m-4-c-90-r-10000.vcf \\\n\t-f Hybrid-SA.vcf-chr1.fasta\n\nperl ../util/VCF_phased_and_PIA_to_FASTA.pl \\\n\t-v Hybrid-SA.vcf-chr1.vcf-Phased-m-4-c-90-r-10000.vcf \\\n\t-l Hybrid-SA.vcf-chr1.vcf-Phased-m-4-c-90-r-10000.vcf-PIA-p-1-c-10-s-all.tab \\\n\t-r Hybrid-SA.vcf-chr1.fasta\n\nperl ../util/FASTA_compare_sequences.pl \\\n\t-f Hybrid-SA.vcf-chr1.vcf-Phased-m-4-c-90-r-10000.vcf-PIA-p-1-c-10-s-all.tab_1.fasta \\\n\t-a Hybrid-SA.vcf-chr1.vcf-Phased-m-4-c-90-r-10000.vcf-PIA-p-1-c-10-s-all.tab_2.fasta \\\n\t-o a > summary\n\nperl ../util/Haplotype_placer.pl \\\n\t-p Hybrid-SA.vcf-chr1.vcf-Phased-m-4-c-90-r-10000.vcf-PIA-p-1-c-10-s-all.tab \\\n\t-a Hybrid-SA.vcf-chr1.vcf-Phased-m-4-c-90-r-10000.vcf-PIA-p-1-c-10-s-all.tab_1.fasta \\\n\t-b Hybrid-SA.vcf-chr1.vcf-Phased-m-4-c-90-r-10000.vcf-PIA-p-1-c-10-s-all.tab_2.fasta \\\n\t-n Name_Type_Location_consensus_genomes.tab \\\n\t-d y \\\n\t-l Hybrid-SA.vcf-chr1.fasta\n\nperl util/Windows_haplotypes_to_R_figure.pl \\\n\t-w HaplotypeTools_windows -s 7000\n\n[note] This should produce windows_plot-for-Haplotypes.R.pdf. For reference, an example copy is saved as Example-windows_plot-for-Haplotypes.R.pdf\n"
      },
      "source": "https://raw.githubusercontent.com/rhysf/HaplotypeTools/main/README",
      "technique": "header_analysis"
    }
  ]
}