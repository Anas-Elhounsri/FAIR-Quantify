{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/bychen9/eQTL_colocalizer"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-05-15T00:36:48Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-03-09T05:05:01Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Pipeline for running colocalization tests between GTEx version 8 single-tissue eQTLs or sQTLs and GWAS signals using COLOC."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9729413021326534,
      "result": {
        "original_header": "ColocQuiaL",
        "type": "Text_excerpt",
        "value": "**Note: The most up-to-date and actively maintained version of ColocQuiaL is located here: https://github.com/bvoightlab/ColocQuiaL** \nThis repository contains the code needed to generate dependency files and run ColocQuiaL. Given GWAS signals of your choosing, this pipeline will run COLOC on your signals and all eQTL or sQTL summary statistics that you have available to you. For example, this pipeline will work with the single-tissue eQTL or sQTL datasets available from GTEx or eQTL Catalogue.\n \n"
      },
      "source": "https://raw.githubusercontent.com/bychen9/eQTL_colocalizer/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.971450593116386,
      "result": {
        "original_header": "Additional Notes",
        "type": "Text_excerpt",
        "value": "- For entries in configuration files that are not pertinent to your available data, set to empty string. \n- The pipeline is currently set up to work with Pulit et al. BMI data. Directions on how to download the Pulit et al. data and example ``qtl_config.sh`` and lead SNP files are provided in the ``test_data/`` directory. \n- The version of this code used in Bellomo et al. (https://doi.org/10.3389/fgene.2021.787545) is in the ```Atherosclerosis_Multi_Trait_GWAS/``` directory. \n- The most up-to-date and actively maintained version of ColocQuiaL is located here: https://github.com/bvoightlab/ColocQuiaL\n \n"
      },
      "source": "https://raw.githubusercontent.com/bychen9/eQTL_colocalizer/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Download files",
        "parent_header": [
          "ColocQuiaL",
          "Preparing the pipeline"
        ],
        "type": "Text_excerpt",
        "value": "- Download GRCh38 dbSNP BED files from here: https://ftp.ncbi.nih.gov/snp/organisms/human_9606_b151_GRCh38p7/BED/\n\n- Download tissue specific eQTL or sQTL dataset (e.g., all SNPs tissue specific GTEx v8 files from the GTEx website: https://www.gtexportal.org/home/datasets)\n  "
      },
      "source": "https://raw.githubusercontent.com/bychen9/eQTL_colocalizer/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/bychen9/eQTL_colocalizer/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/bychen9/eQTL_colocalizer/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bychen9/eQTL_colocalizer"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ColocQuiaL"
      },
      "source": "https://raw.githubusercontent.com/bychen9/eQTL_colocalizer/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bychen9/eQTL_colocalizer/main/create_tabix_gtex_eqtl_allpairs.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bychen9/eQTL_colocalizer/main/setup_config.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bychen9/eQTL_colocalizer/main/create_tabix_eqtl_catalogue.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bychen9/eQTL_colocalizer/main/summarize_qtl_results.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bychen9/eQTL_colocalizer/main/create_tabix_gtex_sqtl_allpairs.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bychen9/eQTL_colocalizer/main/create_tabix_gtex_eqtl_sigpairs.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bychen9/eQTL_colocalizer/main/create_tabix_gtex_sqtl_sigpairs.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bychen9/eQTL_colocalizer/main/colocquial_wrapper.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bychen9/eQTL_colocalizer/main/qtl_config.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bychen9/eQTL_colocalizer/main/qtl_colocalizer_in_series/summarize_qtl_results.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bychen9/eQTL_colocalizer/main/qtl_colocalizer_in_series/qtl_colocalizer_wrapper_in_series.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bychen9/eQTL_colocalizer/main/qtl_colocalizer_in_series/qtl_config.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Modify path to files",
        "parent_header": [
          "ColocQuiaL",
          "Preparing the pipeline"
        ],
        "type": "Text_excerpt",
        "value": "- In ``colocquial_wrapper.sh``, update ``colocquial_dir`` to the path to the directory containing ``colocquial.R``, ``qtl_coloc_template.bsub``, and ``QTL_config_template.R``. \n"
      },
      "source": "https://raw.githubusercontent.com/bychen9/eQTL_colocalizer/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9902768233846566,
      "result": {
        "original_header": "ColocQuiaL",
        "type": "Text_excerpt",
        "value": "**Note: The most up-to-date and actively maintained version of ColocQuiaL is located here: https://github.com/bvoightlab/ColocQuiaL** \nThis repository contains the code needed to generate dependency files and run ColocQuiaL. Given GWAS signals of your choosing, this pipeline will run COLOC on your signals and all eQTL or sQTL summary statistics that you have available to you. For example, this pipeline will work with the single-tissue eQTL or sQTL datasets available from GTEx or eQTL Catalogue.\n \n"
      },
      "source": "https://raw.githubusercontent.com/bychen9/eQTL_colocalizer/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9078382292088193,
      "result": {
        "original_header": "Additional Notes",
        "type": "Text_excerpt",
        "value": "- For entries in configuration files that are not pertinent to your available data, set to empty string. \n- The most up-to-date and actively maintained version of ColocQuiaL is located here: https://github.com/bvoightlab/ColocQuiaL\n \n"
      },
      "source": "https://raw.githubusercontent.com/bychen9/eQTL_colocalizer/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/bychen9/eQTL_colocalizer/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "eQTL_colocalizer"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "bychen9"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 101376,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 21424,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 3438,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bychen9/eQTL_colocalizer/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Generate dependency files",
        "parent_header": [
          "ColocQuiaL",
          "Preparing the pipeline"
        ],
        "type": "Text_excerpt",
        "value": "- Run ``dbsnp_hash_table_maker.py`` to create hash tables from the GRCh38 dbSNP BED files in the directory containing the files.\n  ```\n  python dbsnp_hash_table_maker.py\n  ```\n\n- If necessary, create significant pair files from all pairs files. Note that this step is not required for GTEx as significant pair files are provided. An example of how to create significant pair files for a dataset downloaded from eQTL Catalogue is provided in ``make_significant_pairs_files.R``.\n  ```\n  Rscript make_significant_pairs_files.R GENCORD_ge_fibroblast.all.tsv.gz\n  ```\n  \n- Generate tabix index files for the significant pair files and all pairs files. Examples of how to generate the files for GTEx datasets and eQTL Catalogue datasets are provided in ``create_tabix_gtex_eqtl_allpairs.sh``, ``create_tabix_gtex_eqtl_sigpairs.sh``, ``create_tabix_gtex_sqtl_allpairs.sh``, ``create_tabix_gtex_sqtl_sigpairs.sh``, and ``create_tabix_eqtl_catalogue.sh``.\n  ```\n  bash create_tabix_gtex_eqtl_sigpairs.sh Adipose_Subcutaneous.v8.signif_variant_gene_pairs.txt\n  ```\n\n- Create a tissue summary CSV file (e.g., ``GTEx_v8_Tissue_Summary_with_filenames.csv`` and ``GTEx_v8_sQTL_Tissue_Summary_with_filenames.csv``) containing the tissue names, sample sizes, and file names of the tabix files corresponding to your QTL dataset.\n\n- Create a configuration file for each downloaded QTL dataset based on ``setup_config.R`` and ``setup_config.sh``.\n\n- LD and recombination rate reference files: need to have merge plink files (.bed, .bim, .fam) files, a filie of which samples to use, and recombination rates to generate the regional association.\n  - Recombination rate files can be downloaded from here: http://ftp.1000genomes.ebi.ac.uk/vol1/ftp/technical/working/20130507_omni_recombination_rates\n  "
      },
      "source": "https://raw.githubusercontent.com/bychen9/eQTL_colocalizer/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running the pipeline",
        "parent_header": [
          "ColocQuiaL"
        ],
        "type": "Text_excerpt",
        "value": "Create an analysis directory, and add ``colocquial_wrapper.sh`` and a ``qtl_config.sh`` file modified to correspond to the GWAS signals on which you would like to perform eQTL or sQTL colocalization analysis.\n\n- The provided example ``qtl_config.sh`` file provides further detail on what is required in this file and what the expected entries are for user defined parameters.\n\n- In ``qtl_config.sh``, make sure to set ``setup_config_sh`` and ``setup_config_R`` to the configuration files of the dataset you want to use. \n\nThen, execute ``colocquial_wrapper.sh`` in that directory.\n```\nbash colocquial_wrapper.sh\n```\n"
      },
      "source": "https://raw.githubusercontent.com/bychen9/eQTL_colocalizer/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Running the pipeline on a single locus",
        "parent_header": [
          "ColocQuiaL",
          "Running the pipeline"
        ],
        "type": "Text_excerpt",
        "value": "Create an analysis directory, and add ``colocquial.R`` and a ``QTL_config.R`` file modified from ``QTL_config_template.R`` to correspond to the GWAS signal on which you would like to perform eQTL or sQTL colocalization analysis.\n\nImport the necessary tools.\n```\nmodule load R/3.6.3\nmodule load plink/1.90Beta4.5\nmodule load tabix\nmodule load liftOver\n```\n\nThen, execute ``colocquial.R`` in that directory.\n```\nRscript colocquial.R\n```\n"
      },
      "source": "https://raw.githubusercontent.com/bychen9/eQTL_colocalizer/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "contact",
    "contributors",
    "documentation",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 01:59:29",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ]
}