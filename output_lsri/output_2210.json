{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/biobakery/graphlan"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-01-17T10:41:36Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-23T08:52:25Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "High-quality circular representations of taxonomic and phylogenetic trees"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.8597850364051389,
      "result": {
        "original_header": "Command and syntsx of the annotation file",
        "type": "Text_excerpt",
        "value": "The annotation file is a tab-delimited file listing the graphical options for\nclades. Usually each line has three fields: the name of the clade, the name of\nthe option, and the value to assign to the option. Lines can however have two\nfields (typically for \"global\" option not referred to a specific clade) or \nfour fields when the external rings (a sort of circular heatmap) is specified. \nBelow we report and describe all available options and their syntax subdivided\nby option types.\n \n"
      },
      "source": "https://raw.githubusercontent.com/biobakery/graphlan/master/readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8788311435387952,
      "result": {
        "original_header": "GLOBAL TREE OPTIONS:",
        "type": "Text_excerpt",
        "value": "`ignore_branch_len [def. 0 = False]` : specify whether to display the tree with\n    fixed branch length (i.e. 0) or with the values specified in the input \n    tree. If the input tree is not containing branch length information, branch \n    lengths will not be showed regardless of this option  \n`clade_separation [def 0.0]` : specify a fractional separation between clades \n    which is proportional to the branch distance between subtrees. It option can\n    be used to visually separate more clades that are reciprocally deep \n    branching.   \n`branch_bracket_depth [def 0.25]` : the relative position of the branch bracket \n    which is the radial segment from which the child taxa branches originate.   \n`branch_bracket_width [def 1.0]` : the width of the branch bracket relative to \n    the position of the most separated child roots \n`branch_color_from_ancestor [def 1]` : whether to use the color of the closest\n    ancestor colored taxa for the downstream branches \n"
      },
      "source": "https://raw.githubusercontent.com/biobakery/graphlan/master/readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9646249371982554,
      "result": {
        "original_header": "GLOBAL GRAPHICAL OPTIONS:",
        "type": "Text_excerpt",
        "value": "`annotation_background_width [def. 0.1]` : set the width of the annotation, you\n    can think of it as inserting a space before and after the label of the\n    annotation \n"
      },
      "source": "https://raw.githubusercontent.com/biobakery/graphlan/master/readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8582768798671468,
      "result": {
        "original_header": "GRAPHICAL TREE OPTIONS:",
        "type": "Text_excerpt",
        "value": "The graphical tree options are the most common way of personalizing the trees.\nThey can be referred to specific clade, to set of clades, or to all clade. The\nsyntax is the following:\n```\n[clade_name{+|*|^}]\tgraphical_tree_option\tgraphical_tree_option_value\n```\n \nIf the `clade name` is omitted the option is applied to ALL clades. The clade\ncan be specified with the full label comprising all names from the root of the\ntree or with the last level only (if last level names are not unique, multiple\nmatching clades will be affected by the command). Optionally, at the end of the\nclade name, one of the following character can be added (see below for the\nmeaning of these symbols): `+, *, ^` \n`clade_marker_edge_width [def. 0.5]` : the thickness of the border for clade \n    markers \n"
      },
      "source": "https://raw.githubusercontent.com/biobakery/graphlan/master/readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8644005579693369,
      "result": {
        "original_header": "ANNOTATION OPTIONS",
        "type": "Text_excerpt",
        "value": "`annotation_font_stretch [def. 0]` : horizontal font compactness (0 is minimal) \n`annotation_rotation [def. 0]` : the rotation of the label. As default the rotation\n    is perpendicular to the radial position of the label. It can be changed to \n    90 so that the labels are less likely to overlap \n`annotation_background_edge_color [def annotation_background_color]` : the color \n    of the edge for the annotation background. NOT IMPLEMENTED YET \n"
      },
      "source": "https://raw.githubusercontent.com/biobakery/graphlan/master/readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8401764467589982,
      "result": {
        "original_header": "INTERNAL ANNOTATION OPTIONS",
        "type": "Text_excerpt",
        "value": "Internal annotations are used to label the levels in a tree (e.g. specify the\nlevel of bacterial species in a taxonomic tree). `annotation_r` specifies the\nradial distance from the center (i.e. the number of levels). Currently,\nannotation_option can be: \n"
      },
      "source": "https://raw.githubusercontent.com/biobakery/graphlan/master/readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9283838574119773,
      "result": {
        "original_header": "RING OPTIONS",
        "type": "Text_excerpt",
        "value": "We call rings the graphical elements external to the tree itself that can be\nseen as \"circular heatmaps\", \"circular barplots\", and actually more (like\nindicator elements). These \"rings\" are linked directly to the internal tree as\neach segment of the rings correspond to a tree leaf (and potentially to internal\nnodes as well). Multiple rings can be specified for the same image and each must\nhave a progressive associated number (level \"1\" being the most internal ring). \nThe general syntax for rings is:\n```\n[clade_name]\tring_option\tring_level\tring_option_value\n``` \nIf `clade_name` is not present or if it is `\"*\"` the ring option is applied to all\nthe ring sectors in the `ring_level`. The `ring_level` is a integer number that\nmust always be specified. \n`ring_height [def. highest height for the rings in the same level, or 0.1 if no\n    heights are specific]` : the height of the circular segment. If not specific \n    the same default height (0.1*size of the tree) is applied for all ring \n    segment in the level, otherwise the height is equal to the biggest height \n    value in the level. \n`ring_shape [def. R]`: the shape of the ring. Default is 'R' for rectangular which\n    means that the whole available area is used. The alternatives are currently \n    'v' or '^' which mean triangular shape (with opposite directions) that can \n    be used as pointing arrow for highlighting specific clades.  \n`ring_label [def. None]`: the label to be displayed at \"stat_rotation\" position \n    for the rings. total_plotted_degrees should be less than 360 to make space \n    for these labels \n`ring_internal_separator_thickness [def.  0.0 which means absent]`: the thickness \n    of the circular line separating different ring levels. This is referred \n    to the most internal of the two sides of each ring. \n`ring_external_separator_thickness [def.  0.0 which means absent]`: the thickness\n    of the circular line separating different ring levels. This is referred to \n    the most external of the two sides of each ring. \n`ring_separator_color [def. 'k' for black]`: the color of the circular line \n    separating different ring levels. \n"
      },
      "source": "https://raw.githubusercontent.com/biobakery/graphlan/master/readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9234402771823489,
      "result": {
        "original_header": "COLORS",
        "type": "Text_excerpt",
        "value": "- a RGB color code in the hexadecimal format: `#rrggbb`, for example `#FF0000`\n    corresponds to (full) red \n"
      },
      "source": "https://raw.githubusercontent.com/biobakery/graphlan/master/readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9742348353868994,
      "result": {
        "original_header": "MARKER SHAPES:",
        "type": "Text_excerpt",
        "value": "As of August 2012 we support the marker types available in matplotlib version\n1.1.1. Specifically here are the codes for the markers. Note that some of them\nare shapes with internal color-filled space, other are edge- or point-only\nmarkers. \n"
      },
      "source": "https://raw.githubusercontent.com/biobakery/graphlan/master/readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9974566829168662,
      "result": {
        "type": "Text_excerpt",
        "value": "GraPhlAn is a software tool for producing high-quality circular \nrepresentations of taxonomic and phylogenetic trees. GraPhlAn focuses on \nconcise, integrative, informative, and publication-ready representations of \nphylogenetically- and taxonomically-driven investigation. \n"
      },
      "source": "https://raw.githubusercontent.com/biobakery/graphlan/master/readme.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/biobakery/graphlan/wiki"
      },
      "source": "https://raw.githubusercontent.com/biobakery/graphlan/master/readme.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/biobakery/graphlan/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 28
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/biobakery/graphlan/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "biobakery/graphlan"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/biobakery/graphlan/master/readme.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/biobakery/graphlan/master/examples/kegg/run.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/biobakery/graphlan/master/examples/simple/run.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/biobakery/graphlan/master/examples/phylo_small/run.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/biobakery/graphlan/master/examples/HMP_tree_simple/run.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/biobakery/graphlan/master/examples/archaea/run.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/biobakery/graphlan/master/examples/IBD_biogeography/run.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/biobakery/graphlan/master/examples/hmp_metahit/PIPELINE.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/biobakery/graphlan/master/examples/vaginal_microbiota/PIPELINE.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/biobakery/graphlan/master/examples/hmp_metahit_functional/PIPELINE.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/biobakery/graphlan/master/examples/internal_labels/step0.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/biobakery/graphlan/master/examples/internal_labels/step4.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/biobakery/graphlan/master/examples/internal_labels/step2.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/biobakery/graphlan/master/examples/internal_labels/step3.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/biobakery/graphlan/master/examples/internal_labels/step1.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/biobakery/graphlan/master/examples/saliva_microbiome/PIPELINE.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/biobakery/graphlan/master/examples/HMP_tree/run.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/biobakery/graphlan/master/examples/gut_microbiome/run.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/biobakery/graphlan/master/examples/guide/step0.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/biobakery/graphlan/master/examples/guide/step4.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/biobakery/graphlan/master/examples/guide/step2.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/biobakery/graphlan/master/examples/guide/step3.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/biobakery/graphlan/master/examples/guide/step1.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/biobakery/graphlan/master/examples/metaref_fams/run.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/biobakery/graphlan/master/examples/PhyloPhlAn/run.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/biobakery/graphlan/master/examples/DisappearingMicrobiome/run.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "GraPhlAn is available in Bioconda and via pip, you can install it by running:\n\n- Bioconda: `conda install -c bioconda graphlan`\n- Pip : `pip install graphlan`\n\nOtherwise, you can fetch it from GitHub (https://github.com/biobakery/graphlan)\nIn a Unix environment, this means you have to type:\n```bash\n$ git clone https://github.com/biobakery/graphlan.git\n```\nand install it using\n```bash\npip install .\n```\n\nThis will install GraPhlAn in your default Python distribution, it is advised to use virtual environment such as Anaconda.\n\nFor Windows or MacOS systems a similar procedure should be followed. Is is also\npossible to obtain the software using the releases page at\nhttps://github.com/biobakery/graphlan/releases.\n\n"
      },
      "source": "https://raw.githubusercontent.com/biobakery/graphlan/master/readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.8403116953152624,
      "result": {
        "original_header": "Command and syntsx of the annotation file",
        "type": "Text_excerpt",
        "value": "Below we report and describe all available options and their syntax subdivided\nby option types.\n \n"
      },
      "source": "https://raw.githubusercontent.com/biobakery/graphlan/master/readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9186436579653894,
      "result": {
        "original_header": "ANNOTATION OPTIONS",
        "type": "Text_excerpt",
        "value": "We call annotations the shadings highlighting clades and the corresponding\nsubtree. Annotations can be colored, their alpha-channel can be globally\nregulated, and have a label associated with them. Specifically, the options\navailable for annotations are: \n"
      },
      "source": "https://raw.githubusercontent.com/biobakery/graphlan/master/readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8310700605770325,
      "result": {
        "original_header": "RING OPTIONS",
        "type": "Text_excerpt",
        "value": "`ring_alpha [def. 1.0]`: the transparency value. 0.0 means completely transparent\n    (thus invisible), 1.0 means completely opaque (no transparencies)  \nSpecifically, the ring options can be: \n"
      },
      "source": "https://raw.githubusercontent.com/biobakery/graphlan/master/readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999999048841107,
      "result": {
        "type": "Text_excerpt",
        "value": "You can find below the instruction for installing and using the software.\nIf you have any questions or comment please refer to the project home page at\nhttps://github.com/biobakery/graphlan\nor to thebioBakery help forum:\nhttps://forum.biobakery.org/ \n"
      },
      "source": "https://raw.githubusercontent.com/biobakery/graphlan/master/readme.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/biobakery/graphlan/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "biobakery, circular-visualization, phylogenetic-trees, python, taxonomic-trees, tools"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "graphlan"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "biobakery"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 89559,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/biobakery/graphlan/master/readme.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sagun98",
          "type": "User"
        },
        "date_created": "2018-06-05T19:52:32Z",
        "date_published": "2020-06-27T03:52:57Z",
        "html_url": "https://github.com/biobakery/graphlan/releases/tag/1.1.3",
        "release_id": 27980917,
        "tag": "1.1.3",
        "tarball_url": "https://api.github.com/repos/biobakery/graphlan/tarball/1.1.3",
        "type": "Release",
        "url": "https://api.github.com/repos/biobakery/graphlan/releases/27980917",
        "value": "https://api.github.com/repos/biobakery/graphlan/releases/27980917",
        "zipball_url": "https://api.github.com/repos/biobakery/graphlan/zipball/1.1.3"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Prerequisites",
        "type": "Text_excerpt",
        "value": "Required Python packages are automatically installed when GraPhlAn is installed via Conda or pip.\n\nIf you want to install it from the repository, you need to have the following programs and libraries installed:\n- python 2.7 or higher ( http://www.python.org/ )\n- the biopython python library 1.76 ( http://biopython.org )\n- the matplotlib python library 1.1 or higher \n  ( http://matplotlib.sourceforge.net )\n"
      },
      "source": "https://raw.githubusercontent.com/biobakery/graphlan/master/readme.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 08:10:32",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 87
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "type": "Text_excerpt",
        "value": "The GraPhlAn package consists in two main scripts:\n1- `graphlan.py`\n2- `graphlan_annotate.py`\n\nThe first produces graphical output of an input tree in any of the three most\npopular format: Newick, PhyloXML, or text format. The second modifies any \ninput tree (in any of the three standard format) adding additional \ninformation regarding structural or graphical aspects of the tree (like colors \nand style of the taxa, labels, shadows, heatmaps, ...); \n`graphlan_annotate.py` generates PhyloXML files that can be converted into images by `graphlan.py`.\n\n\nMore specifically, here are all the options one can set for `graphlan.py`:\n\n```\nusage: graphlan.py [-h] [--format ['output_image_format']]\n                   [--warnings WARNINGS] [--positions POSITIONS]\n                   [--dpi image_dpi] [--size image_size] [--pad pad_in]\n                   [--external_legends] [--avoid_reordering] [-v]\n                   input_tree output_image\n\nGraPhlAn 1.1.3 (5 June 2018) AUTHORS: Nicola Segata (nsegata@hsph.harvard.edu)\n\npositional arguments:\n  input_tree            the input tree in PhyloXML format\n  output_image          the output image, the format is guessed from the\n                        extension unless --format is given. Available file\n                        formats are: png, pdf, ps, eps, svg\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --format ['output_image_format']\n                        set the format of the output image (default none\n                        meaning that the format is guessed from the output\n                        file extension)\n  --warnings WARNINGS   set whether warning messages should be reported or not\n                        (default 1)\n  --positions POSITIONS\n                        set whether the absolute position of the points should\n                        be reported on the standard output. The two\n                        cohordinates are r and theta\n  --dpi image_dpi       the dpi of the output image for non vectorial formats\n  --size image_size     the size of the output image (in inches, default 7.0)\n  --pad pad_in          the distance between the most external graphical\n                        element and the border of the image\n  --external_legends    specify whether the two external legends should be put\n                        in separate file or keep them along with the image\n                        (default behavior)\n  --avoid_reordering    specify whether the tree will be reorder or not\n                        (default the tree will be reordered)\n  -v, --version         Prints the current GraPhlAn version and exit\n```\n\n\n\nInput tree files for `graphlan.py` can be generated, personalized, and annotated\nusing the graphlan_annotate.py module. In addition to the tree topology and\n(possibly) branch lengths, graphlan_annotate.py reads an \"annotation file\" \n(`--annot` option) which specifies the graphical options for the tree. The\nsyntax of the annotation file is described comprehensively below. Here is the\ncommand line invocation syntax.\n\n\n```\nusage: graphlan_annotate.py [-h] [--annot annotation_file] [-v]\n                            input_tree [output_tree]\n\nGraPhlAn annotate module 1.1.3 (5 June 2018) AUTHORS: Nicola Segata\n(nsegata@hsph.harvard.edu)\n\npositional arguments:\n  input_tree            the input tree in Newick, Nexus, PhyloXML or plain\n                        text format\n  output_tree           the output tree in PhyloXML format containing the\n                        newly added annotations. If not specified, the input\n                        tree file will be overwritten\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --annot annotation_file\n                        specify the annotation file\n  -v, --version         Prints the current GraPhlAn version and exit\n```\n"
      },
      "source": "https://raw.githubusercontent.com/biobakery/graphlan/master/readme.md",
      "technique": "header_analysis"
    }
  ]
}