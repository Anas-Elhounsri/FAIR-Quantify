{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/kap-devkota/GLIDER"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-01-30T22:03:11Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-09-22T03:22:54Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Computing DSD matrix",
        "parent_header": [
          "GLIDETOOLS: A python based package for computing Diffusion State Distance and GLIDE",
          "Package Description"
        ],
        "type": "Text_excerpt",
        "value": "This can be done by using the function  `glidetools.algorithm.dsd:compute_dsd_embedding` \n\n```\ndef compute_dsd_embedding(A, \n                        t = -1, \n                        gamma = 1, \n                        is_normalized = True)\n```\n\nWhere,\n- A: a numpy adjacency matrix (N x N)\n- t: The number of random walks to get the DSD matrix. Setting `t` to a negative value implies `t` is infinity.\n- gamma: Set it to 1 to get the default cDSD embedding\n- is_normalized: If set to True, a normalized form of cDSD (by the steady state vector) is returned\n\nThis function returns a (N x N) cDSD embedding. **Note:** The output is an embedding, not a distance. To compute the cDSD distance,\ndo the following\n\n```\nfrom scipy.spatial.distance import squareform, pdist\nsquareform(pdist(X))\n```\n\nWhere, `X` is the output from the `compute_dsd_embedding` function.\n\n"
      },
      "source": "https://raw.githubusercontent.com/kap-devkota/GLIDER/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Computing the GLIDE Matrix",
        "parent_header": [
          "GLIDETOOLS: A python based package for computing Diffusion State Distance and GLIDE",
          "Package Description"
        ],
        "type": "Text_excerpt",
        "value": "This can be done by using the function  `glidetools.algorithm.glide:glide`\n\n```\ndef glide(A, \n          alpha = 0.1,\n          beta  = 1000,\n          delta = 1,\n          gamma = 1,\n          normalize_dsd = False,\n          local = \"\",\n          **kwargs)\n```\n\nWhere,\n- A : A N x N numpy matrix\n- alpha, beta, delta, gamma => glide parameters: For more information, see :\n- normalize_dsd: If set to True, generates the normalized version of DSD embedding\n- local: Can be either `cw`(common weighted) or [`l3`](https://www.nature.com/articles/s41467-019-09177-y).  \n    \n    \nYou can also provide your own local and global functions for GLIDE\n    \n- localf: a custom function that takes in adjacency matrix and returns the local pairwise score\n- globalf: a custom function that takes in adjacency matrix and returns the global pairwise score\n"
      },
      "source": "https://raw.githubusercontent.com/kap-devkota/GLIDER/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Using `glide_compute`",
        "parent_header": [
          "GLIDETOOLS: A python based package for computing Diffusion State Distance and GLIDE",
          "Package Description"
        ],
        "type": "Text_excerpt",
        "value": "If you have installed the pip package, you can the entrypoint `glide_compute` to obtain both the DSD and GLIDE outputs. \n\n```\nusage: glide-compute [-h] [--network NETWORK] [--output OUTPUT] [-v] [--return-dsd-emb] [--return-dsd-dist] [--dsd-dist-norm {l1,l2}] [--normalized] [--reduced-dims REDUCED_DIMS] [--gamma GAMMA] [--get-glide-neighbors]\n                     [--glide-neighbors-k GLIDE_NEIGHBORS_K] [--neighbors-return-format {dataframe,graph,map}] [--alpha ALPHA] [--beta BETA] [--delta DELTA] [--local {cw,l3}] [--normalize-local] [--weighted-local] [--scale-local]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --network NETWORK     A Tab-delimited network file\n  --output OUTPUT       The output URL. If the output is a matrix, it is always saved in a pickle format along with the name-to-index mapping dictionary\n  -v                    Verbose mode\n  --return-dsd-emb      If set to True, only returns the DSD embedding, else returns the GLIDE matrix\n  --return-dsd-dist     If set to True, bypasses the --return-dsd-emb command to return the pairwise distance matrix from the dsd embedding\n  --dsd-dist-norm {l1,l2}\n                        Only used in conjunction with the --return-dsd-dist argument. Decides whether to use the `l1` or `l2` norm while computing distance\n  --normalized          If set to false, returns the classic cDSD, else returns normalized cDSD embedding.\n  --reduced-dims REDUCED_DIMS\n                        If set to a positive value, the output is a reduced normalized DSD with reduced dimensions given by --reduced_dims\n  --gamma GAMMA         DSD gamma parameter\n  --get-glide-neighbors\n                        If set to true, --get_glide_neighbors returns glide neighbors instead of glide matrix\n  --glide-neighbors-k GLIDE_NEIGHBORS_K\n                        If --get_glide_neighbors is set to true, the code uses --glide_neighbors to decide on the number of neighbors\n  --neighbors-return-format {dataframe,graph,map}\n                        This parameter decides the output format for the GLIDE neighbors. If `dataframe` is selected, the code returns output as a panda DataFrame.If `graph` is selected, the code returns output as a networkx graph,\n                        otherwise the output is returned as a simple dictionary {NODE: LIST[NODE]}, where LIST[NODE]is the list of neighbors for the particular node\n  --alpha ALPHA         GLIDE alpha parameter\n  --beta BETA           GLIDE beta parameter\n  --delta DELTA         GLIDE delta parameter\n  --local {cw,l3}       The local parameter for GLIDE\n  --normalize-local     If set to False, the local measures are not normalized\n  --weighted-local      If set to False, the adjacency matrix is converted to a unweighted form (setting every non-zero elements to 1)before applying local measures\n  --scale-local         If set to True, scales the local measures by their max value before returning it\n```\n\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/kap-devkota/GLIDER/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9837876867707808,
      "result": {
        "original_header": "Licensing",
        "type": "Text_excerpt",
        "value": "This code is copyrighted under the MIT License. \n \n"
      },
      "source": "https://raw.githubusercontent.com/kap-devkota/GLIDER/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9137070655379973,
      "result": {
        "original_header": "Publications",
        "type": "Text_excerpt",
        "value": "**GLIDE:** Devkota, Kapil, James M. Murphy, and Lenore J. Cowen. \"GLIDE: combining local methods and diffusion state embeddings to predict missing interactions in biological networks.\" Bioinformatics 36.Supplement_1 (2020): i464-i473. \n**GLIDER:** Devkota, K., Schmidt, H., Werenski, M., Murphy, J.M., Erden, M., Arsenescu, V. and Cowen, L.J., 2022. GLIDER: Function Prediction from GLIDE-based Neigborhoods. Bioinformatics. \n**DSD:** Cao, Mengfei, et al. \"New directions for diffusion-based network prediction of protein function: incorporating pathways with confidence.\" Bioinformatics 30.12 (2014): i219-i227. \n \n"
      },
      "source": "https://raw.githubusercontent.com/kap-devkota/GLIDER/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/kap-devkota/GLIDER/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kap-devkota/GLIDER/main/notebooks/get_glide_neighbors.ipynb"
      },
      "source": "https://raw.githubusercontent.com/kap-devkota/GLIDER/main/notebooks/get_glide_neighbors.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kap-devkota/GLIDER/main/notebooks/dsd_computations.ipynb"
      },
      "source": "https://raw.githubusercontent.com/kap-devkota/GLIDER/main/notebooks/dsd_computations.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kap-devkota/GLIDER/main/notebooks/glide_main.ipynb"
      },
      "source": "https://raw.githubusercontent.com/kap-devkota/GLIDER/main/notebooks/glide_main.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kap-devkota/GLIDER/main/notebooks/glide_computations.ipynb"
      },
      "source": "https://raw.githubusercontent.com/kap-devkota/GLIDER/main/notebooks/glide_computations.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/kap-devkota/GLIDER/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "kap-devkota/GLIDER"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "GLIDETOOLS: A python based package for computing Diffusion State Distance and GLIDE"
      },
      "source": "https://raw.githubusercontent.com/kap-devkota/GLIDER/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "How to install",
        "parent_header": [
          "GLIDETOOLS: A python based package for computing Diffusion State Distance and GLIDE"
        ],
        "type": "Text_excerpt",
        "value": "You can install the package using `pip`. \n\n```\npip install glidetools\n```\n\nYou can also go to the glidetools repository at `https://github.com/kap-devkota/GLIDER` and clone the latest version under the `main branch`.\nAfter you enter the `glidetools` folder, run \n\n```\npython -m pip install glidetools\n```\n"
      },
      "source": "https://raw.githubusercontent.com/kap-devkota/GLIDER/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/kap-devkota/GLIDER/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "GLIDER"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "kap-devkota"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 428823,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 111200,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 9550,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 2899,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "TeX",
        "size": 2283,
        "type": "Programming_language",
        "value": "TeX"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 367,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kap-devkota/GLIDER/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependencies",
        "parent_header": [
          "GLIDETOOLS: A python based package for computing Diffusion State Distance and GLIDE"
        ],
        "type": "Text_excerpt",
        "value": "This package requires the following dependencies:\n\n1. numpy\n2. scipy\n3. pandas\n4. matplotlib\n5. json\n6. networkx\n"
      },
      "source": "https://raw.githubusercontent.com/kap-devkota/GLIDER/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-05 23:29:21",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ]
}