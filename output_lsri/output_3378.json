{
  "application_domain": [
    {
      "confidence": 22.86,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/sdomanskyi/DigitalCellSorter"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-04-19T19:06:21Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-07-05T08:21:14Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Digital Cell Sorter (DCS): single cell RNA-seq analysis toolkit. Documentation:"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.8860446518990579,
      "result": {
        "original_header": "Digital Cell Sorter",
        "type": "Text_excerpt",
        "value": "Digital Cell Sorter (DCS): a single cell RNA-seq analysis toolkit for clustering, cell type identification, and anomaly detection. \n> [Digital Cell Sorter (DCS): a cell type identification, anomaly detection, and Hopfield landscapes toolkit for single-cell transcriptomics](https://doi.org/10.7717/peerj.10670 \"Digital Cell Sorter (DCS): a cell type identification, anomaly detection, and Hopfield landscapes toolkit for single-cell transcriptomics.\"), \n> Sergii Domanskyi, Alex Hakansson, Thomas Bertus, Giovanni Paternostro & Carlo Piermarocchi, \n> *PeerJ*, 9:e10670 (**2021**).  \n\n> **The previous publication describing the methodology of cell types identification:**\n> [Polled Digital Cell Sorter (p-DCS): Automatic identification of hematological cell types from single cell RNA-sequencing clusters](\n> https://doi.org/10.1186/s12859-019-2951-x \n> \"Polled Digital Cell Sorter (p-DCS): Automatic identification of hematological cell types from single cell RNA-sequencing clusters\"),\n> Sergii Domanskyi, Anthony Szedlak, Nathaniel T Hawkins, Jiayin Wang, Giovanni Paternostro & Carlo Piermarocchi, \n> *BMC Bioinformatics* volume 20, Article number: 369 (**2019**). \n> **Note:** If you want to access the package detailed in our 2019 publication of Polled Digital Cell Sorter\n> go to https://zenodo.org/record/2603265 and download the package (v1.1). \n"
      },
      "source": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9709253920189824,
      "result": {
        "original_header": "Visualization",
        "type": "Text_excerpt",
        "value": "Function ```visualize()``` will produce most of the necessary files for post-analysis of the data.  \n\n<details closed><summary>The visualization tools include:</summary><p>\n \n- ```makeMarkerExpressionPlot()```: a heatmap that shows all markers and their expression levels in the clusters, \nin addition this figure contains relative (%) and absolute (cell counts) cluster sizes \n- ```makeVotingResultsMatrixPlot()```: z-scores of the voting results for each input cell type and each cluster, \nin addition this figure contains relative (%) and absolute (cell counts) cluster sizes \n- ```makeHistogramNullDistributionPlot()```: null distribution for each cluster and each cell type illustrating \nthe \"machinery\" of the Digital Cell Sorter \n- ```makeProjectionPlot()```: 2D layout colored by number of unique genes expressed, \nnumber of counts measured, and a faraction of mitochondrial genes.. \nEffect of batch correction demostrated on combining BM1, BM2, BM3 and processing the data jointly without (left) and with (right) batch correction option: \n- ```makeStackedBarplot()```: plot with fractions of various cell types \nCalculate and plot anomaly scores for an arbitrary cell type or cluster: \n"
      },
      "source": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/sdomanskyi/DigitalCellSorter/tree/master/docs"
      },
      "technique": "file_exploration"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/sdomanskyi/DigitalCellSorter/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 10
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/sdomanskyi/DigitalCellSorter/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "sdomanskyi/DigitalCellSorter"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Digital Cell Sorter"
      },
      "source": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "identifier": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://badge.fury.io/gh/sdomanskyi%2FDigitalCellSorter"
      },
      "source": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://pypi.org/project/DigitalCellSorter"
      },
      "source": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://digital-cell-sorter.readthedocs.io/en/latest/?badge=latest"
      },
      "source": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://doi.org/10.5281/zenodo.2533377"
      },
      "source": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/docs/examples/output/BM1/BM1_marker_expression.png?raw=true"
      },
      "source": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/docs/examples/output/BM1/marker_subplots/BM1_CD19_(B4_CVID3_CD19).png?raw=true"
      },
      "source": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/docs/examples/output/BM1/marker_subplots/BM1_CD33_(SIGLEC-3_CD33_p67_SIGLEC3).png?raw=true"
      },
      "source": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/docs/examples/output/BM1/BM1_scores_matrix.png?raw=true"
      },
      "source": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/docs/examples/output/BM1/BM1_null_distributions.png?raw=true"
      },
      "source": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/docs/examples/output/BM1/QC_plots/BM1_number_of_genes_histogram.png?raw=true"
      },
      "source": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/docs/examples/output/BM1/QC_plots/BM1_count_depth_histogram.png?raw=true"
      },
      "source": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/docs/examples/output/BM1/QC_plots/BM1_fraction_of_mitochondrialGenes_histogram.png?raw=true"
      },
      "source": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/docs/examples/output/BM1/BM1_clusters_by_number_of_genes.png?raw=true"
      },
      "source": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/docs/examples/output/BM1/BM1_clusters_by_count_depth.png?raw=true"
      },
      "source": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/docs/examples/output/BM1/BM1_clusters_by_fraction_of_mitochondrialGenes.png?raw=true"
      },
      "source": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/docs/examples/output/BM1/BM1_clusters_by_is_quality_cell.png?raw=true"
      },
      "source": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/docs/examples/output/BM1/BM1_clusters_by_clusters.png?raw=true"
      },
      "source": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/docs/examples/output/BM1/BM1_clusters_by_patients.png?raw=true"
      },
      "source": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/docs/examples/BM123_no_corr_clusters_by_patients.png?raw=true"
      },
      "source": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/docs/examples/BM123_with_corr_clusters_by_patients.png?raw=true"
      },
      "source": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/docs/examples/output/BM1/BM1_clusters_by_clusters_annotated.png?raw=true"
      },
      "source": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/docs/examples/output/BM1/BM1_subclustering_stacked_barplot_BM1.png?raw=true"
      },
      "source": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/docs/examples/Sankey_example.png?raw=true"
      },
      "source": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/docs/examples/output/BM1/BM1_clusters_by_anomaly_score_All.png?raw=true"
      },
      "source": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/docs/examples/output/BM1/BM1_clusters_by_anomaly_score_B_cells.png?raw=true"
      },
      "source": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/docs/examples/output/BM1/BM1_clusters_by_anomaly_score_T_cells.png?raw=true"
      },
      "source": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/docs/examples/output/BM1/BM1_clusters_by_anomaly_score_cluster_7.0.0.png?raw=true"
      },
      "source": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/docs/examples/output/BM1/BM1_ttest_CD4_(CD4_CD4mut).png?raw=true"
      },
      "source": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/docs/examples/output/BM1/BM1_new_markers.png?raw=true"
      },
      "source": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Environment setup",
        "parent_header": [
          "Digital Cell Sorter",
          "Getting Started",
          "Prerequisites"
        ],
        "type": "Text_excerpt",
        "value": "The software runs in Python >= 3.7\n\nIt is highly recommended to install Anaconda.\nInstallers are available at https://www.anaconda.com/distribution/\nWhether you already had Anaconda installed or just installed it we recommend to\nupdate all packages by running:\n\n\tconda update conda\n\nWith conda, you can create, export, list, remove, and update environments that \nhave different versions of Python and/or packages installed in them. \nSwitching or moving between environments is called activating the environment.\n\n\tconda create --name DCS\n\tconda activate DCS\n\nNow, in your new environment, the packages can be installed or updated without affecting\nyour other environments. Note, environments use is not necessary, and the \ndefault ```(base)``` is used if you dont set up any other. For more information see\nhttps://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html\n\n\n> Note: use of conda environments (for instance DCS exemplified above)\n> with a high performance computer\n> such as MSU HPCC in a batch job, i.e. not on a development node but \n> submitted to a SLURM queue, requires the following steps. In the slurm \n> script, before line calling your python script, \n> add ```conda deactivate``` to deactivate base environnment\n> and ```conda activate DCS```. After calling the script \n> do ```conda deactivate```. The example testing script is shown below.\n\n\n<details closed><summary>SLURM script example:</summary><p>\n\n\t#!/bin/bash --login\n\t########## Define Resources Needed with SBATCH Lines ##########\n\t#SBATCH --time=00:01:00             # limit of wall clock time - how long the job will run (same as -t)\n\t#SBATCH --ntasks=1                  # number of tasks - how many tasks (nodes) that you require (same as -n)\n\t#SBATCH --cpus-per-task=1           # number of CPUs (or cores) per task (same as -c)\n\t#SBATCH --mem=1G                    # memory required per node - amount of memory (in bytes)\n\t##SBATCH --job-name Name_of_Job     # you can give your job a name for easier identification (same as -J)\n  \n\t########## Command Lines to Run ##########\n\tconda deactivate\n\tconda activate DCS \n\tcd ./                               ### change to the directory where your code is located \n\tpython test.py        \t\t    ### call your executable\n\tscontrol show job $SLURM_JOB_ID     ### write job information to output file\n\tconda deactivate\n\nwhere ```test.py``` is the python script where you import and use \n```DigitalCellSorter```.\n\n</p></details>\n\n"
      },
      "source": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation of the DigitalCellSorter package",
        "parent_header": [
          "Digital Cell Sorter",
          "Getting Started",
          "Prerequisites"
        ],
        "type": "Text_excerpt",
        "value": "Install ```DigitalCellSorter``` with ```pip```. Most of the dependencies packages \nare automatically installed with installation of the  latest release \nof ```DigitalCellSorter```:\n\n\tpip install DigitalCellSorter\n\nAlternatively, you can clone and install this module directly from GitHub using:\n\n\tpip install git+https://github.com/sdomanskyi/DigitalCellSorter\n\nSimilarly, one can create a local copy of this project for development purposes, and \ninstall the package from the cloned directory:\n\n\tgit clone https://github.com/sdomanskyi/DigitalCellSorter\n\tpython setup.py install\n\nOur software uses packages ```numpy```, ```pandas```, ```matplotlib```, \n```scikit-learn```, ```scipy```, ```mygene```, ```fftw```, \n```fitsne```, ```adjustText``` and a few other standard Python packages. \nSome of the packages used in ```DigitalCellSorter``` are not installed by default, \nand should by installed by separately if using certain functionality with \nDigital Cell Sorter. For example, for network-based clustering\ninstall packages ```pynndescent```, ```networkx```, ```python-louvain```. \nOther packages that have to be installed separately are ```fitsne```, ```umap```, \n```phate``` and ```orca```. The detailed instructions are below.\n"
      },
      "source": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9717999673479623,
      "result": {
        "original_header": "Digital Cell Sorter",
        "type": "Text_excerpt",
        "value": "> **Note:** If you want to access the package detailed in our 2019 publication of Polled Digital Cell Sorter\n> go to https://zenodo.org/record/2603265 and download the package (v1.1). \n\nThe documentation is available at https://digital-cell-sorter.readthedocs.io/. \n"
      },
      "source": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9995168773254526,
      "result": {
        "original_header": "Visualization",
        "type": "Text_excerpt",
        "value": "<p align=\"middle\">\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/output/BM1/BM1_marker_expression.png?raw=true\" width=\"1000\"/>\n</p> \n<p align=\"middle\">\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/output/BM1/marker_subplots/BM1_CD19_(B4_CVID3_CD19).png?raw=true\" width=\"400\"/>\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/output/BM1/marker_subplots/BM1_CD33_(SIGLEC-3_CD33_p67_SIGLEC3).png?raw=true\" width=\"400\"/>\n</p> \n<p align=\"middle\">\n <img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/output/BM1/BM1_scores_matrix.png?raw=true\" height=\"700\"/>\n</p> \n<p align=\"middle\">\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/output/BM1/BM1_null_distributions.png?raw=true\" width=\"800\"/>\n</p> \n<p align=\"middle\">\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/output/BM1/QC_plots/BM1_number_of_genes_histogram.png?raw=true\" width=\"250\"/>\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/output/BM1/QC_plots/BM1_count_depth_histogram.png?raw=true\" width=\"250\"/>\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/output/BM1/QC_plots/BM1_fraction_of_mitochondrialGenes_histogram.png?raw=true\" width=\"250\"/>\n</p> \n<p align=\"middle\">\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/output/BM1/BM1_clusters_by_number_of_genes.png?raw=true\" width=\"250\"/>\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/output/BM1/BM1_clusters_by_count_depth.png?raw=true\" width=\"250\"/>\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/output/BM1/BM1_clusters_by_fraction_of_mitochondrialGenes.png?raw=true\" width=\"250\"/>\n</p> \n<p align=\"middle\">\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/output/BM1/BM1_clusters_by_is_quality_cell.png?raw=true\" width=\"500\"/>\n</p> \n<p align=\"middle\">\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/output/BM1/BM1_clusters_by_clusters.png?raw=true\" width=\"375\"/>\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/output/BM1/BM1_clusters_by_patients.png?raw=true\" width=\"375\"/>\n</p> \n<p align=\"middle\">\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/BM123_no_corr_clusters_by_patients.png?raw=true\" width=\"375\"/>\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/BM123_with_corr_clusters_by_patients.png?raw=true\" width=\"375\"/>\n</p> \n<p align=\"middle\">\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/output/BM1/BM1_clusters_by_clusters_annotated.png?raw=true\" width=\"500\"/>\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/output/BM1/BM1_subclustering_stacked_barplot_BM1.png?raw=true\" height=\"500\"/>\n</p> \n<p align=\"middle\">\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/Sankey_example.png?raw=true\" width=\"800\"/>\n</p> \n<p align=\"middle\">\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/output/BM1/BM1_clusters_by_anomaly_score_All.png?raw=true\" width=\"750\"/>\n</p> \n<p align=\"middle\">\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/output/BM1/BM1_clusters_by_anomaly_score_B_cells.png?raw=true\" width=\"250\"/>\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/output/BM1/BM1_clusters_by_anomaly_score_T_cells.png?raw=true\" width=\"250\"/>\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/output/BM1/BM1_clusters_by_anomaly_score_cluster_7.0.0.png?raw=true\" width=\"250\"/>\n</p> \n<p align=\"middle\">\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/output/BM1/BM1_ttest_CD4_(CD4_CD4mut).png?raw=true\" width=\"500\"/>\n</p> \n<p align=\"middle\">\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/output/BM1/BM1_new_markers.png?raw=true\" width=\"1000\"/>\n</p> \n"
      },
      "source": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8178882817109934,
      "result": {
        "original_header": "Visualization",
        "type": "Text_excerpt",
        "value": "<p align=\"middle\">\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/output/BM1/BM1_marker_expression.png?raw=true\" width=\"1000\"/>\n</p> \n<p align=\"middle\">\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/output/BM1/marker_subplots/BM1_CD19_(B4_CVID3_CD19).png?raw=true\" width=\"400\"/>\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/output/BM1/marker_subplots/BM1_CD33_(SIGLEC-3_CD33_p67_SIGLEC3).png?raw=true\" width=\"400\"/>\n</p> \n<p align=\"middle\">\n <img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/output/BM1/BM1_scores_matrix.png?raw=true\" height=\"700\"/>\n</p> \n<p align=\"middle\">\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/output/BM1/BM1_null_distributions.png?raw=true\" width=\"800\"/>\n</p> \n<p align=\"middle\">\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/output/BM1/QC_plots/BM1_number_of_genes_histogram.png?raw=true\" width=\"250\"/>\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/output/BM1/QC_plots/BM1_count_depth_histogram.png?raw=true\" width=\"250\"/>\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/output/BM1/QC_plots/BM1_fraction_of_mitochondrialGenes_histogram.png?raw=true\" width=\"250\"/>\n</p> \n<p align=\"middle\">\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/output/BM1/BM1_clusters_by_number_of_genes.png?raw=true\" width=\"250\"/>\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/output/BM1/BM1_clusters_by_count_depth.png?raw=true\" width=\"250\"/>\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/output/BM1/BM1_clusters_by_fraction_of_mitochondrialGenes.png?raw=true\" width=\"250\"/>\n</p> \n<p align=\"middle\">\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/output/BM1/BM1_clusters_by_clusters.png?raw=true\" width=\"375\"/>\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/output/BM1/BM1_clusters_by_patients.png?raw=true\" width=\"375\"/>\n</p> \n<p align=\"middle\">\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/output/BM1/BM1_clusters_by_anomaly_score_All.png?raw=true\" width=\"750\"/>\n</p> \n<p align=\"middle\">\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/output/BM1/BM1_clusters_by_anomaly_score_B_cells.png?raw=true\" width=\"250\"/>\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/output/BM1/BM1_clusters_by_anomaly_score_T_cells.png?raw=true\" width=\"250\"/>\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/output/BM1/BM1_clusters_by_anomaly_score_cluster_7.0.0.png?raw=true\" width=\"250\"/>\n</p> \n<p align=\"middle\">\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/output/BM1/BM1_new_markers.png?raw=true\" width=\"1000\"/>\n</p> \n"
      },
      "source": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/sdomanskyi/DigitalCellSorter/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "anomaly-detection, automatic-cell-identification, batch-correction, cancer-heterogeneity, clustering, gene, identification, python, quality-control, single-cell-sequencing-analysis, transcriptomics, visualization"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2019 S. Domanskyi\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n***Additional Licensing Information***\nPlease review the LICENSES folder distributed with the package with regards to \nadditional licensing information for accessing of web resources and content through PyIOmica. \nThese licensing information is applicable to all users of PyIOmica that\naccess any of the associated web resources and content through PyIOmica.\n"
      },
      "source": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DigitalCellSorter"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "sdomanskyi"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 303670,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Batchfile",
        "size": 164,
        "type": "Programming_language",
        "value": "Batchfile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://digital-cell-sorter.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sdomanskyi",
          "type": "User"
        },
        "date_created": "2020-11-26T19:17:57Z",
        "date_published": "2020-11-26T19:30:57Z",
        "description": "Digital Cell Sorter (DCS): single cell RNA-seq analysis toolkit",
        "html_url": "https://github.com/sdomanskyi/DigitalCellSorter/releases/tag/1.3.7",
        "name": "DigitalCellSorter",
        "release_id": 34479771,
        "tag": "1.3.7",
        "tarball_url": "https://api.github.com/repos/sdomanskyi/DigitalCellSorter/tarball/1.3.7",
        "type": "Release",
        "url": "https://api.github.com/repos/sdomanskyi/DigitalCellSorter/releases/34479771",
        "value": "https://api.github.com/repos/sdomanskyi/DigitalCellSorter/releases/34479771",
        "zipball_url": "https://api.github.com/repos/sdomanskyi/DigitalCellSorter/zipball/1.3.7"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sdomanskyi",
          "type": "User"
        },
        "date_created": "2020-07-13T19:56:04Z",
        "date_published": "2020-07-15T22:04:35Z",
        "description": "Digital Cell Sorter (DCS): single cell RNA-seq analysis toolkit",
        "html_url": "https://github.com/sdomanskyi/DigitalCellSorter/releases/tag/1.3.6",
        "name": "DigitalCellSorter",
        "release_id": 28608357,
        "tag": "1.3.6",
        "tarball_url": "https://api.github.com/repos/sdomanskyi/DigitalCellSorter/tarball/1.3.6",
        "type": "Release",
        "url": "https://api.github.com/repos/sdomanskyi/DigitalCellSorter/releases/28608357",
        "value": "https://api.github.com/repos/sdomanskyi/DigitalCellSorter/releases/28608357",
        "zipball_url": "https://api.github.com/repos/sdomanskyi/DigitalCellSorter/zipball/1.3.6"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sdomanskyi",
          "type": "User"
        },
        "date_created": "2020-06-24T17:56:19Z",
        "date_published": "2020-06-24T17:59:04Z",
        "description": "Digital Cell Sorter (DCS): single cell RNA-seq analysis toolkit",
        "html_url": "https://github.com/sdomanskyi/DigitalCellSorter/releases/tag/1.3.5",
        "name": "DigitalCellSorter",
        "release_id": 27885352,
        "tag": "1.3.5",
        "tarball_url": "https://api.github.com/repos/sdomanskyi/DigitalCellSorter/tarball/1.3.5",
        "type": "Release",
        "url": "https://api.github.com/repos/sdomanskyi/DigitalCellSorter/releases/27885352",
        "value": "https://api.github.com/repos/sdomanskyi/DigitalCellSorter/releases/27885352",
        "zipball_url": "https://api.github.com/repos/sdomanskyi/DigitalCellSorter/zipball/1.3.5"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sdomanskyi",
          "type": "User"
        },
        "date_created": "2020-04-13T15:59:38Z",
        "date_published": "2020-04-13T16:06:08Z",
        "description": "Digital Cell Sorter (DCS): single cell RNA-seq analysis toolkit",
        "html_url": "https://github.com/sdomanskyi/DigitalCellSorter/releases/tag/1.3.0",
        "name": "DigitalCellSorter",
        "release_id": 25453324,
        "tag": "1.3.0",
        "tarball_url": "https://api.github.com/repos/sdomanskyi/DigitalCellSorter/tarball/1.3.0",
        "type": "Release",
        "url": "https://api.github.com/repos/sdomanskyi/DigitalCellSorter/releases/25453324",
        "value": "https://api.github.com/repos/sdomanskyi/DigitalCellSorter/releases/25453324",
        "zipball_url": "https://api.github.com/repos/sdomanskyi/DigitalCellSorter/zipball/1.3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sdomanskyi",
          "type": "User"
        },
        "date_created": "2019-11-11T21:09:27Z",
        "date_published": "2019-11-11T21:16:24Z",
        "description": "Digital Cell Sorter (DCS): single cell RNA-seq analysis toolkit",
        "html_url": "https://github.com/sdomanskyi/DigitalCellSorter/releases/tag/1.2.3",
        "name": "DigitalCellSorter",
        "release_id": 21381378,
        "tag": "1.2.3",
        "tarball_url": "https://api.github.com/repos/sdomanskyi/DigitalCellSorter/tarball/1.2.3",
        "type": "Release",
        "url": "https://api.github.com/repos/sdomanskyi/DigitalCellSorter/releases/21381378",
        "value": "https://api.github.com/repos/sdomanskyi/DigitalCellSorter/releases/21381378",
        "zipball_url": "https://api.github.com/repos/sdomanskyi/DigitalCellSorter/zipball/1.2.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sdomanskyi",
          "type": "User"
        },
        "date_created": "2019-10-02T15:12:54Z",
        "date_published": "2019-10-02T15:14:45Z",
        "description": "New numerous features added. The code is prepared as a stand-alone package.",
        "html_url": "https://github.com/sdomanskyi/DigitalCellSorter/releases/tag/1.2.1",
        "name": "DigitalCellSorter",
        "release_id": 20418181,
        "tag": "1.2.1",
        "tarball_url": "https://api.github.com/repos/sdomanskyi/DigitalCellSorter/tarball/1.2.1",
        "type": "Release",
        "url": "https://api.github.com/repos/sdomanskyi/DigitalCellSorter/releases/20418181",
        "value": "https://api.github.com/repos/sdomanskyi/DigitalCellSorter/releases/20418181",
        "zipball_url": "https://api.github.com/repos/sdomanskyi/DigitalCellSorter/zipball/1.2.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sdomanskyi",
          "type": "User"
        },
        "date_created": "2019-09-25T19:58:57Z",
        "date_published": "2019-09-25T20:05:47Z",
        "html_url": "https://github.com/sdomanskyi/DigitalCellSorter/releases/tag/1.2.0",
        "name": "DigitalCellSorter",
        "release_id": 20257092,
        "tag": "1.2.0",
        "tarball_url": "https://api.github.com/repos/sdomanskyi/DigitalCellSorter/tarball/1.2.0",
        "type": "Release",
        "url": "https://api.github.com/repos/sdomanskyi/DigitalCellSorter/releases/20257092",
        "value": "https://api.github.com/repos/sdomanskyi/DigitalCellSorter/releases/20257092",
        "zipball_url": "https://api.github.com/repos/sdomanskyi/DigitalCellSorter/zipball/1.2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sdomanskyi",
          "type": "User"
        },
        "date_created": "2019-03-22T19:19:48Z",
        "date_published": "2019-03-22T20:55:18Z",
        "description": "Polled Digital Cell Sorter (p-DCS): Automatic identification of hematological cell types from single cell RNA-sequencing clusters",
        "html_url": "https://github.com/sdomanskyi/DigitalCellSorter/releases/tag/v1.1",
        "name": "DigitalCellSorter",
        "release_id": 16295152,
        "tag": "v1.1",
        "tarball_url": "https://api.github.com/repos/sdomanskyi/DigitalCellSorter/tarball/v1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/sdomanskyi/DigitalCellSorter/releases/16295152",
        "value": "https://api.github.com/repos/sdomanskyi/DigitalCellSorter/releases/16295152",
        "zipball_url": "https://api.github.com/repos/sdomanskyi/DigitalCellSorter/zipball/v1.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sdomanskyi",
          "type": "User"
        },
        "date_created": "2018-11-28T18:41:17Z",
        "date_published": "2019-01-07T19:57:55Z",
        "description": "Polled Digital Cell Sorter (p-DCS): Automatic identification of hematological cell types from single cell RNA-sequencing clusters",
        "html_url": "https://github.com/sdomanskyi/DigitalCellSorter/releases/tag/v1.0",
        "name": "DigitalCellSorter",
        "release_id": 14840888,
        "tag": "v1.0",
        "tarball_url": "https://api.github.com/repos/sdomanskyi/DigitalCellSorter/tarball/v1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/sdomanskyi/DigitalCellSorter/releases/14840888",
        "value": "https://api.github.com/repos/sdomanskyi/DigitalCellSorter/releases/14840888",
        "zipball_url": "https://api.github.com/repos/sdomanskyi/DigitalCellSorter/zipball/v1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "t-SNE",
        "parent_header": [
          "Digital Cell Sorter",
          "Getting Started",
          "Prerequisites"
        ],
        "type": "Text_excerpt",
        "value": "With datasets containing less than 2000 cells ```sklearn.manifold.TSNE``` is used.\nFor large datasets Fast Fourier Transform-accelerated Interpolation-based t-SNE (FIt-SNE)\nimplemented by **KlugerLab** is used (https://github.com/KlugerLab/FIt-SNE).\nTo use FIt-SNE the following need to be installed. First update ```cython``` by\n\n\tpip install --upgrade cython\n\nThen install ```fftw``` from the ```conda-forge``` channel \nadd ```conda-forge``` to your channels, and install ```fftw```:\n\n\tconda config --add channels conda-forge\n\tconda install fftw\n\nThe next installation step is platform specific. To install FI-tSNE for Linux:\n\n\tpip install fitsne\n\nOn macOS Mojave C++ compiler has to be specified explicitly:\n\n\tenv CC=clang CXX=clang++ pip install fitsne\n\nOn Windows the FI-tSNE wrapper and executable are already \nincluded with ```DigitalCellSorter```. \n"
      },
      "source": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Other layouts",
        "parent_header": [
          "Digital Cell Sorter",
          "Getting Started",
          "Prerequisites"
        ],
        "type": "Text_excerpt",
        "value": "To use UMAP layout\n\n\tpip install umap-learn\n\nTo use PHATE \n\n\tpip install phate\n\n> Note, if neither ```fitsne```, ```umap``` nor ```phate``` are installed \n> ```DigitalCellSorter``` defaults to PCA two largest principal components for \n> visualization layout.\n"
      },
      "source": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Interactive HTML figures",
        "parent_header": [
          "Digital Cell Sorter",
          "Getting Started",
          "Prerequisites"
        ],
        "type": "Text_excerpt",
        "value": "To use Sankey diagrams that are part of Digital Cell Sorter \ninstall ```plotly``` and ```orca```:\n\n    conda install -c plotly plotly-orca\n    conda install -c anaconda psutil\n\nSee \n[interactive Hopfield landscape figure](http://htmlpreview.github.io/?https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/dataName_energy_landscape_PC1_vs_PC0.html \"Hopfield attractors figure\")\nand \n[interactive Sankey diagram figure](http://htmlpreview.github.io/?https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/PanglaoDB_Sankey_SRS3296611.html \"Sankey diagram of cell annotation\") \nin a browser.\n\n```orca\t``` is necessary to convert Sankey diagrams to static images.\nIf for any reason ```orca``` is unavailable the Sankey diagrams will be saved as \nineractive HTML figure, that can be opened in a browser (Chrome, Firefox etc.) and \nsaved as static image. The visualization of ```DigitalCellSorter``` are implemented \nwith ```matplotlib```, allowing all the figures to be saved in either raster or \nvactor format. Since ```plotly``` can convert simple ```matplotlib``` figures \n(scatter, line, bar plots, but not heatmaps, splines or other complex patch objects) to\nineractive HTML format ```DigitalCellSorter``` can attempt to save any of its figures\nas HTML. This is particulatly useful with ```Projection``` plots, even though the color\nbars are not rendered in HTML figures.\n"
      },
      "source": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "faq",
    "support",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 12:33:50",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 23
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Getting Started",
        "parent_header": [
          "Digital Cell Sorter"
        ],
        "type": "Text_excerpt",
        "value": "These instructions will get you a copy of the project up and running on your machine for data analysis, development or testing purposes.\n"
      },
      "source": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "t-SNE",
        "parent_header": [
          "Digital Cell Sorter",
          "Getting Started",
          "Prerequisites"
        ],
        "type": "Text_excerpt",
        "value": "With datasets containing less than 2000 cells ```sklearn.manifold.TSNE``` is used.\nFor large datasets Fast Fourier Transform-accelerated Interpolation-based t-SNE (FIt-SNE)\nimplemented by **KlugerLab** is used (https://github.com/KlugerLab/FIt-SNE).\nTo use FIt-SNE the following need to be installed. First update ```cython``` by\n\n\tpip install --upgrade cython\n\nThen install ```fftw``` from the ```conda-forge``` channel \nadd ```conda-forge``` to your channels, and install ```fftw```:\n\n\tconda config --add channels conda-forge\n\tconda install fftw\n\nThe next installation step is platform specific. To install FI-tSNE for Linux:\n\n\tpip install fitsne\n\nOn macOS Mojave C++ compiler has to be specified explicitly:\n\n\tenv CC=clang CXX=clang++ pip install fitsne\n\nOn Windows the FI-tSNE wrapper and executable are already \nincluded with ```DigitalCellSorter```. \n"
      },
      "source": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Other layouts",
        "parent_header": [
          "Digital Cell Sorter",
          "Getting Started",
          "Prerequisites"
        ],
        "type": "Text_excerpt",
        "value": "To use UMAP layout\n\n\tpip install umap-learn\n\nTo use PHATE \n\n\tpip install phate\n\n> Note, if neither ```fitsne```, ```umap``` nor ```phate``` are installed \n> ```DigitalCellSorter``` defaults to PCA two largest principal components for \n> visualization layout.\n"
      },
      "source": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Interactive HTML figures",
        "parent_header": [
          "Digital Cell Sorter",
          "Getting Started",
          "Prerequisites"
        ],
        "type": "Text_excerpt",
        "value": "To use Sankey diagrams that are part of Digital Cell Sorter \ninstall ```plotly``` and ```orca```:\n\n    conda install -c plotly plotly-orca\n    conda install -c anaconda psutil\n\nSee \n[interactive Hopfield landscape figure](http://htmlpreview.github.io/?https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/dataName_energy_landscape_PC1_vs_PC0.html \"Hopfield attractors figure\")\nand \n[interactive Sankey diagram figure](http://htmlpreview.github.io/?https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/PanglaoDB_Sankey_SRS3296611.html \"Sankey diagram of cell annotation\") \nin a browser.\n\n```orca\t``` is necessary to convert Sankey diagrams to static images.\nIf for any reason ```orca``` is unavailable the Sankey diagrams will be saved as \nineractive HTML figure, that can be opened in a browser (Chrome, Firefox etc.) and \nsaved as static image. The visualization of ```DigitalCellSorter``` are implemented \nwith ```matplotlib```, allowing all the figures to be saved in either raster or \nvactor format. Since ```plotly``` can convert simple ```matplotlib``` figures \n(scatter, line, bar plots, but not heatmaps, splines or other complex patch objects) to\nineractive HTML format ```DigitalCellSorter``` can attempt to save any of its figures\nas HTML. This is particulatly useful with ```Projection``` plots, even though the color\nbars are not rendered in HTML figures.\n"
      },
      "source": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Loading the package",
        "parent_header": [
          "Digital Cell Sorter",
          "Getting Started"
        ],
        "type": "Text_excerpt",
        "value": "Use the latest release of PyPI package. \n\nFor a quick-start demo with a dataset of ~5k PBMCs execute \nin the terminal and follow prompts:\n\n\tpython -m DigitalCellSorter\n\nThe second, more detailed demonstration analysis with step-by-step \nexplanation is discussed here\nand in the demo section at the end of this README.\nIn your script import the package:\n\n\timport DigitalCellSorter\n\nCreate an instance of class ```DigitalCellSorter```. Here, for simplicity, we use Default parameter values:\n\n\tDCS = DigitalCellSorter.DigitalCellSorter()\n\nDuring the initialization a number of parameters can be specified. For detailed list see documentation.\nMany of these parameters are transfered to DCS attributes thus can be modified after initialization using, e.g.:\n\n\tDCS.toggleMakeStackedBarplot = False\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Gene Expression Data Format",
        "parent_header": [
          "Digital Cell Sorter",
          "Getting Started"
        ],
        "type": "Text_excerpt",
        "value": "The input gene expression data is expected in one of the following formats:\n\n1. Spreadsheet of comma-separated values ```csv``` containing condensed matrix in a form ```('cell', 'gene', 'expr')```. \nIf there are batches in the data the matrix has to be of the form ```('batch', 'cell', 'gene', 'expr')```. Columns order can be arbitrary.\n\n<details closed><summary>Examples:</summary><p>\n\n| cell | gene | expr |\n|------|------|------|\n| C1   | G1   | 3    |\n| C1   | G2   | 2    |\n| C1   | G3   | 1    |\n| C2   | G1   | 1    |\n| C2   | G4   | 5    |\n| ...  | ...  | ...  |\n\nor:\n\n| batch  | cell | gene | expr |\n|--------|------|------|------|\n| batch0 | C1   | G1   | 3    |\n| batch0 | C1   | G2   | 2    |\n| batch0 | C1   | G3   | 1    |\n| batch1 | C2   | G1   | 1    |\n| batch1 | C2   | G4   | 5    |\n| ...    | ...  | ...  | ...  |\n\n</p></details>\n\n\n2. Spreadsheet of comma-separated values ```csv``` where rows are genes, columns are cells with gene expression counts.\nIf there are batches in the data the spreadsheet the first row should be ```'batch'``` and the second ```'cell'```.\n\n<details closed><summary>Examples:</summary><p>\n\n| cell  | C1     | C2     | C3     | C4     |\n|-------|--------|--------|--------|--------|\n| G1    |        | 3      | 1      | 7      |\n| G2    | 2      | 2      |        | 2      |\n| G3    | 3      | 1      |        | 5      |\n| G4    | 10     |        | 5      | 4      |\n| ...   | ...    | ...    | ...    | ...    |\n\nor:\n\n| batch | batch0 | batch0 | batch1 | batch1 |\n|-------|--------|--------|--------|--------|\n| cell  | C1     | C2     | C3     | C4     |\n| G1    |        | 3      | 1      | 7      |\n| G2    | 2      | 2      |        | 2      |\n| G3    | 3      | 1      |        | 5      |\n| G4    | 10     |        | 5      | 4      |\n| ...   | ...    | ...    | ...    | ...    |\n\n</p></details>\n\n3. ```Pandas DataFrame``` where ```axis 0``` is genes and ```axis 1``` are cells.\nIf the are batched in the data then the index of ```axis 1``` should have two levels, e.g. ```('batch', 'cell')```, \nwith the first level indicating patient, batch or expreriment where that cell was sequenced, and the\nsecond level containing cell barcodes for identification.\n\n<details closed><summary>Examples:</summary><p>\n\n    df = pd.DataFrame(data=[[2,np.nan],[3,8],[3,5],[np.nan,1]], \n                      index=['G1','G2','G3','G4'], \n                      columns=pd.MultiIndex.from_arrays([['batch0','batch1'],['C1','C2']], names=['batch', 'cell']))    \n\n\n</p></details>\n\n4. ```Pandas Series ``` where index should have two levels, e.g. ```('cell', 'gene')```. If there are batched in the data\nthe first level should be indicating patient, batch or expreriment where that cell was sequenced, the second level cell barcodes for \nidentification and the third level gene names.\n\n<details closed><summary>Examples:</summary><p>\n\n    se = pd.Series(data=[1,8,3,5,5], \n                   index=pd.MultiIndex.from_arrays([['batch0','batch0','batch1','batch1','batch1'],\n                                                    ['C1','C1','C1','C2','C2'],\n                                                    ['G1','G2','G3','G1','G4']], names=['batch', 'cell', 'gene']))\n\n\n</p></details>\n\nAny of the data types outlined above need to be prepared/validated with a function ```prepare()```. \nLet us demonstrate this on the input of type 1:\n\n\tdf_expr = DCS.prepare('data/testData/dataFileCondensedWithBatches.tsv')\n"
      },
      "source": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Other Data",
        "parent_header": [
          "Digital Cell Sorter",
          "Getting Started"
        ],
        "type": "Text_excerpt",
        "value": "```markersDCS.xlsx```: An excel book with marker data. Rows are markers and columns are cell types. \n'1' means that the gene is a marker for that cell type, '-1' means that this gene is not expressed in this cell type, and '0' otherwise.\nThis gene marker file included in the package is used by Default. \nIf you use your own file it has to be prepared in the same format (including the two-line header). Note that only the first worksheet will be read,\nand its name can be arbitrary. The first column should contain gene names. The second row should contain cell types, and the first row how \nthose cell types are grouped. If any of the cell types need to be skipped, have \"NA\" in the corresponding cell of the first row of that cell type.\n\n<details closed><summary>Example:</summary><p>\n\n|A       |B            |C             |D           |E          |F                |G                         |H                           |I                        |J                         |K                  |L               |M                 |...      |\n|--------|-------------|--------------|------------|-----------|-----------------|--------------------------|----------------------------|-------------------------|--------------------------|-------------------|----------------|------------------|---------|\n|        |B cells      |B cells       |B cells     |T cells    |T cells          |T cells                   |T cells                     |T cells                  |T cells                   |T cells            |NK cells        |NK cells          |...      |\n|Marker  |B cells naive|B cells memory|Plasma cells|T cells CD8|T cells CD4 naive|T cells CD4 memory resting|T cells CD4 memory activated|T cells follicular helper|T cells regulatory (Tregs)|T cells gamma delta|NK cells resting|NK cells activated|...      |\n|ABCB4   |1            |0             |0           |0          |0                |0                         |0                           |0                        |0                         |0                  |0               |0                 |...      |\n|ABCB9   |0            |0             |1           |0          |0                |0                         |0                           |0                        |0                         |0                  |0               |0                 |...      |\n|ACAP1   |0            |0             |0           |0          |1                |0                         |0                           |0                        |0                         |0                  |0               |0                 |...      |\n|ACHE    |0            |0             |0           |0          |0                |0                         |0                           |0                        |0                         |0                  |0               |0                 |...      |\n|ACP5    |0            |0             |0           |0          |0                |0                         |0                           |0                        |0                         |0                  |0               |0                 |...      |\n|ADAM28  |1            |1             |0           |0          |0                |0                         |0                           |0                        |0                         |0                  |0               |0                 |...      |\n|ADAMDEC1|0            |0             |0           |0          |0                |0                         |0                           |0                        |0                         |0                  |0               |0                 |...      |\n|ADAMTS3 |0            |0             |0           |0          |0                |0                         |0                           |0                        |0                         |0                  |0               |0                 |...      |\n|ADRB2   |0            |0             |0           |0          |0                |0                         |0                           |0                        |0                         |0                  |0               |0                 |...      |\n|AIF1    |0            |0             |0           |0          |0                |0                         |0                           |0                        |0                         |0                  |0               |0                 |...      |\n|AIM2    |0            |1             |0           |0          |0                |0                         |0                           |0                        |0                         |0                  |0               |0                 |...      |\n|ALOX15  |0            |0             |0           |0          |0                |0                         |0                           |0                        |0                         |0                  |0               |0                 |...      |\n|ALOX5   |0            |1             |0           |0          |0                |0                         |0                           |0                        |0                         |0                  |0               |0                 |...      |\n|AMPD1   |0            |0             |1           |0          |0                |0                         |0                           |0                        |0                         |0                  |0               |0                 |...      |\n|ANGPT4  |0            |0             |1           |0          |0                |0                         |0                           |0                        |0                         |0                  |0               |0                 |...      |\n|...     |...          |...           |...         |...        |...              |...                       |...                         |...                      |...                       |...                |...             |...               |...      |\n\n</p></details>\n\n```Human.MitoCarta2.0.csv```: An ```csv``` spreadsheet with human mitochondrial genes, created within work \n[MitoCarta2.0: an updated inventory of mammalian mitochondrial proteins](https://doi.org/10.1093/nar/gkv1003 \"MitoCarta2.0\")\nSarah E. Calvo, Karl R. Clauser, Vamsi K. Mootha, *Nucleic Acids Research*, Volume 44, Issue D1, 4 January 2016.\n\n"
      },
      "source": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "Digital Cell Sorter",
          "Demo"
        ],
        "type": "Text_excerpt",
        "value": "We have made an example execution file ```demo.py``` that shows how to use ```DigitalCellSorter```.\n\nIn the demo, folder ```data``` is intentionally left empty. \nThe data file (cc95ff89-2e68-4a08-a234-480eca21ce79.homo_sapiens.mtx.zip) is about 2.4Gb in size and\nwill be downloaded with the ```demo.py``` script.\n\n> Previously the HCA preview data was consolidated in file ```ica_bone_marrow_h5.h5``` and downloadable  \n> from https://preview.data.humancellatlas.org/ (Raw Counts Matrix - Bone Marrow). \n> That file was ~485Mb and containing 378000 cells from 8 bone marrow donors (BM1-BM8). \n\nSee details of the script ```demo.py``` at:\n\n> [Example walkthrough of demo.py script](https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/ \"Examples\")\n\n\nTo execute the complete script ```demo.py``` run:\n\n\tpython demo.py\n\n*Note that the HCA BM1 data contains ~50000 sequenced cells, requiring more than 60Gb of RAM (we recommend to use High Performance Computers).\nIf you want to run our example on a regular PC or a laptop, you can use a randomly chosen number of cells:\n\n    df_expr.sample(n=5000, axis=1)\n\n"
      },
      "source": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Output",
        "parent_header": [
          "Digital Cell Sorter",
          "Demo"
        ],
        "type": "Text_excerpt",
        "value": "All the output files are saved in ```output``` directory inside the directory where the ```demo.py``` script is. \nIf you specify any other directory, the results will be generetaed in it.\nIf you do not provide any directory the results will appear in the root where the script was executed.\n"
      },
      "source": "https://raw.githubusercontent.com/sdomanskyi/DigitalCellSorter/master/README.md",
      "technique": "header_analysis"
    }
  ]
}