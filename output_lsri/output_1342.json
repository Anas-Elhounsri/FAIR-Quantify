{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/hullahalli/stampr_rtisan"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-04-18T18:03:25Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-02T19:53:42Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Code for reproducing data from STAMPR experiments"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9477013752226312,
      "result": {
        "type": "Text_excerpt",
        "value": "This repository contains the code and data to calculate STAMPR measurements from barcode frequency counts. If you have a question or are having trouble running the code, don't hesitate to email me at hullahalli[at]g.harvard.edu.  \nPapers that have deposited code into this repository include: \nThe basic table you need (or will be generated) should be called *ReadsTable*. This is a data frame with the first column specifying the barcode identifier and other columns representing counts for each sample. See *1_to_54_OrderedFrequencies.csv* for a formatting example. \n\n**CompareMutants.R** accepts tables of reads counts across barcodes and outputs the change in barcode frequencies from inocula.  \n**ImportSamples.R** takes separate read count files (csv files of one column containing the barcode ID and the second column containing the read count) and merges them into one. Optional plotting function is below the importing function \n**IdentifyTopBarcodes.R** is used to compare the top barcodes between two samples. Have one table of reads (output of ImportSamples, plus any reference samples you need to add) called ReadsTable and specify the name of the columns in quotes  \n**MajorityDistance.R** computes GD and RD from *ReadsTable* files \n**FinalResiliencyWithCFU.R** is the Resiliency Algorithm. Set plots = FALSE if you want to just get Nr/Nb for a bunch of samples, or to TRUE if you want to see the underlying Resiliency plots for a single sample. If you want the latter, set plots to TRUE and load the function called \"ResiliencyIndices\". All you then need to do is execute the code above the start of the function, and you can run the ResiliencyIndices on any sample in ReadsTable by specifying the column name in quotes.  \nThe **ExPEC** folder contains the ReadsTable and CFUtable files to reproduce much of our analysis. Some new organ codes are l (entire liver), s (entire spleen) and u (lungs) \n*1_to_54_OrderedFrequencies* is the barcode counts for the 32 mice across 12 organs, described in Figure S2-S4 and S6-S11. *CompleteTimecourse_CFU* is the CFU values for these animals. The animal codes are described in the text \n*Clod1and2_Frequencies* is barcode counts from the clodonate experiments, and the CFU values are provided as well. 1-4 and 13-16 were given control liposomes, and 6-8 and 17-20 were given clodronate liposomes.  \n*Mut1and2_Frequencies* is barcode counts from Figure 7. 1-8 were from 1 dpi and 9-16 were from 5 dpi. \nThe **TIS_TAtally** folder contains the read counts across TA sites for all animals in Figure S12 and the replated input. These can be directly input into *CompareTA_NewSim.R* in the **RTISAN_Scripts** folder for comparative analyses.  \n"
      },
      "source": "https://raw.githubusercontent.com/hullahalli/stampr_rtisan/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/hullahalli/stampr_rtisan/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/hullahalli/stampr_rtisan/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "hullahalli/stampr_rtisan"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/hullahalli/stampr_rtisan/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9742514569317449,
      "result": {
        "type": "Text_excerpt",
        "value": "1) [The description of STAMPR](https://journals.asm.org/doi/10.1128/mSystems.00887-21) (**STAMPR Scripts** folder - note that newer folders used updated versions of these scripts)\n2) [Population dynamics of E. coli systemic infection](https://elifesciences.org/articles/70910) (**ExPEC** folder)\n3) [Barcoded V. cholerae challenge strains](https://journals.asm.org/doi/10.1128/mbio.00539-22) (**ZChol** folder)\n4) [C. rodentium colonization bottlenecks](https://www.biorxiv.org/content/10.1101/2022.10.11.511778v2) (**Campbell 2023** folder)\n5) [TLR4 and dose response during E. coli systemic infection](https://www.biorxiv.org/content/10.1101/2023.06.09.543079v1) (**DoseScalingTLR4** folder)\n6) [Klebsiella dissemination during bacteremic pneumonia](https://www.biorxiv.org/content/10.1101/2024.04.03.587919v1) (**Holmes2024** folder) \n**FinalResiliencyWithCFU.R** is the Resiliency Algorithm. Set plots = FALSE if you want to just get Nr/Nb for a bunch of samples, or to TRUE if you want to see the underlying Resiliency plots for a single sample. If you want the latter, set plots to TRUE and load the function called \"ResiliencyIndices\". All you then need to do is execute the code above the start of the function, and you can run the ResiliencyIndices on any sample in ReadsTable by specifying the column name in quotes.  \n"
      },
      "source": "https://raw.githubusercontent.com/hullahalli/stampr_rtisan/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/hullahalli/stampr_rtisan/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "stampr_rtisan"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "hullahalli"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 165750,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hullahalli/stampr_rtisan/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "hullahalli",
          "type": "User"
        },
        "date_created": "2023-01-10T15:41:35Z",
        "date_published": "2023-01-10T15:44:36Z",
        "html_url": "https://github.com/hullahalli/stampr_rtisan/releases/tag/v1.1",
        "name": "v1.1",
        "release_id": 88465951,
        "tag": "v1.1",
        "tarball_url": "https://api.github.com/repos/hullahalli/stampr_rtisan/tarball/v1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/hullahalli/stampr_rtisan/releases/88465951",
        "value": "https://api.github.com/repos/hullahalli/stampr_rtisan/releases/88465951",
        "zipball_url": "https://api.github.com/repos/hullahalli/stampr_rtisan/zipball/v1.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "hullahalli",
          "type": "User"
        },
        "date_created": "2022-10-21T20:28:52Z",
        "date_published": "2023-01-09T21:07:00Z",
        "html_url": "https://github.com/hullahalli/stampr_rtisan/releases/tag/v1.0",
        "name": "v1.0",
        "release_id": 88369140,
        "tag": "v1.0",
        "tarball_url": "https://api.github.com/repos/hullahalli/stampr_rtisan/tarball/v1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/hullahalli/stampr_rtisan/releases/88369140",
        "value": "https://api.github.com/repos/hullahalli/stampr_rtisan/releases/88369140",
        "zipball_url": "https://api.github.com/repos/hullahalli/stampr_rtisan/zipball/v1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 04:40:07",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ]
}