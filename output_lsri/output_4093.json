{
  "application_domain": [
    {
      "confidence": 0.958698265318749,
      "result": {
        "type": "String",
        "value": "Graphs"
      },
      "technique": "supervised_classification"
    },
    {
      "confidence": 18.27,
      "result": {
        "type": "String",
        "value": "Natural Language Processing"
      },
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9938542809589557,
      "result": {
        "type": "String",
        "value": "Semantic web"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "Bifrost"
        ],
        "type": "Text_excerpt",
        "value": "```\n@article{holley2020bifrost,\n   title=\"{Bifrost: highly parallel construction and indexing of colored and compacted de Bruijn graphs}\",\n   author={Holley, Guillaume and Melsted, P{\\'a}ll},\n   journal={Genome Biology},\n   volume={21},\n   article={249},\n   year={2020}\n}\n```\n"
      },
      "source": "https://raw.githubusercontent.com/pmelsted/bifrost/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Holley, Guillaume and Melsted, P{\\'a}ll",
        "format": "bibtex",
        "title": "{Bifrost: highly parallel construction and indexing of colored and compacted de Bruijn graphs}",
        "type": "Text_excerpt",
        "value": "@article{holley2020bifrost,\n    year = {2020},\n    article = {249},\n    volume = {21},\n    journal = {Genome Biology},\n    author = {Holley, Guillaume and Melsted, P{\\'a}ll},\n    title = {{Bifrost: highly parallel construction and indexing of colored and compacted de Bruijn graphs}},\n}"
      },
      "source": "https://raw.githubusercontent.com/pmelsted/bifrost/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/pmelsted/bifrost"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contact",
        "parent_header": [
          "Bifrost"
        ],
        "type": "Text_excerpt",
        "value": "For any question, feedback or problem, please feel free to file an issue on this GitHub repository and we will get back to you as soon as possible.\n"
      },
      "source": "https://raw.githubusercontent.com/pmelsted/bifrost/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2013-05-16T14:44:43Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-24T06:50:46Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Bifrost: Highly parallel construction and indexing of colored and compacted de Bruijn graphs"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9754665947331478,
      "result": {
        "original_header": "Parallel construction, indexing and querying of colored and compacted de Bruijn graphs",
        "type": "Text_excerpt",
        "value": "* **Build**, **index**, **color** and **query** the compacted de Bruijn graph\n* **Reads** or **assembled genomes** as input\n* Output **graph in GFA** (can be visualized with [Bandage](https://github.com/rrwick/Bandage)), **FASTA** or **binary**\n* **Graph cleaning**: short tip clipping, etc.\n* **Multi-threaded**\n* **No parameters to estimate** with other tools\n* **Exact** or **approximate** *k*-mer search of queries\n* **C++ API** available:\n    * Associate **your data with vertices**\n    * **Add** or **remove** (sub-)sequences / *k*-mers / colors\n    * **Find unitigs** containing **queried k-mers**\n \nOther tools integrating or using Bifrost: [Kallisto](https://github.com/pachterlab/kallisto), [Ratatosk](https://github.com/DecodeGenetics/Ratatosk), [ggCaller](https://github.com/bacpop/ggCaller), [popIns2](https://github.com/kehrlab/PopIns2), [PLAST](https://gitlab.ub.uni-bielefeld.de/gi/plast) and more.\n \n"
      },
      "source": "https://raw.githubusercontent.com/pmelsted/bifrost/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9454332867923289,
      "result": {
        "original_header": "Benchmarking",
        "type": "Text_excerpt",
        "value": "  Bifrost is an end-to-end workflow: the input data are sequences and the output data is a (colored) compacted de Bruijn graph. When comparing Bifrost to tool X which delegate preprocessing (such as computing *k*-mers and their multiplicites) to tool Y, time/memory for X+Y must be reported (not just X). \n* **Compare the same type of output data** \n  Bifrost outputs the compacted de Bruijn graph in [GFA](https://gfa-spec.github.io/GFA-spec/GFA1.html) format, a plain-text file format for graphs adopted by the community. A valid comparison of the output of tool X to Bifrost's GFA output is if the output of X is plain-text (not a binary file) and it contains vertices and edges. If needed, Bifrost can output the vertices without the edges in FASTA format with `-f`. \n"
      },
      "source": "https://raw.githubusercontent.com/pmelsted/bifrost/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9607296610898675,
      "result": {
        "original_header": "Troubleshooting",
        "type": "Text_excerpt",
        "value": "* executing the binary of Bifrost fails because *libbifrost.so* or *libbifrost.a* is not found \n  You are most likely running Bifrost on a different machine than the one used to compile it. By default, Bifrost is compiled in native mode such to target architecture instructions specific to the machine it is compiled on. Using Bifrost on a different machine with a different architecture might result in this error. To solve this issue, Bifrost must be recompiled with native architecture compilation disabled, as explained in the Advanced options of Section [Installation](#installation).\n \n"
      },
      "source": "https://raw.githubusercontent.com/pmelsted/bifrost/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Documentation",
        "parent_header": [
          "Bifrost",
          "API"
        ],
        "type": "Text_excerpt",
        "value": "Documentation for the Bifrost library is available in the */doc/doxygen* folder. The following command generates the documentation files:\n```\ncd <bifrost_directory>\ndoxygen Doxyfile\n```\nThen, open *html/index.html*. The documentation contains a description of all the functions and structures of the library.\n"
      },
      "source": "https://raw.githubusercontent.com/pmelsted/bifrost/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/pmelsted/bifrost/wiki"
      },
      "source": "https://raw.githubusercontent.com/pmelsted/bifrost/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/pmelsted/bifrost/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "faq": [
    {
      "confidence": 1,
      "result": {
        "original_header": "FAQ",
        "parent_header": [
          "Bifrost"
        ],
        "type": "Text_excerpt",
        "value": "**Can I provide multiple files in input?**\n\nYes, use parameter `-r` or `-s` for each file to input.\n\n**Can I provide a list of files in input?**\n\nYes, a text file containing one input filename per line with no empty lines can be used in input.\n\n**What are the accepted input file formats?**\n\nFASTA, FASTQ, GFA and Bifrost binary file format. Input FASTA, FASTQ and GFA can be compressed with gzip (extension .gz). If you input a GFA file for the construction, use the `-r` parameter.\n\n**Can I use different file formats in input?**\n\nYes.\n\n**If I input a GFA file for building the de Bruijn graph, does it need to contain an already compacted de Bruijn graph?**\n\nNo, it can contain any type of sequence graph (like an uncompacted de Bruijn graph or a sequence graph).\n\n**Can I build a compacted (colored) de Bruijn graph from assembled genomes and reads?**\n\nYes. Input your assembled genomes with parameter `-r` and your reads with parameter `-s`.\n\n**Can I use a graph file without its color file ?**\n\nYes. Just do not input the color file and Bifrost will consider it is an **un**colored compacted de Bruijn graph.\n\n**In which order are inserted the colors?**\n\nA color corresponds to an input file the graph was built/updated from. The order in which the colors are inserted is the same as the order of the files given by parameter `-r` and parameter `-s`. However, in case both parameters `-r` and `-s` are used, no assumption can be made on whether the files given by parameter `-s` will be inserted before or after the ones given by parameter `-r`.\n\n**Different runs of Bifrost on the same dataset with the same parameters produces graphs with different unitigs. Which graph is correct?**\n\nAll of them. The difference between the graphs resides in circular unitigs (unitigs connecting to themselves) which are their own connected components (\"isolated\"). These unitigs can have a different sequence from one run to another because the starting position will be different, yet they represent exactly the same sequence. As an example, circular unitig ATAT composed of 3-mers can also be represented with sequence TATA. The number of unitigs will remain the same from one graph to another.\n\n**Is it possible to get the colors per *k*-mer in a parsable (non-binary) file format?**\n\nYes, please see [this solution](https://github.com/pmelsted/bifrost/issues/50#issuecomment-1719799619)\n"
      },
      "source": "https://raw.githubusercontent.com/pmelsted/bifrost/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 25
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/pmelsted/bifrost/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "pmelsted/bifrost"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Bifrost"
      },
      "source": "https://raw.githubusercontent.com/pmelsted/bifrost/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pmelsted/bifrost/master/doc/snippets/compile_test.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "Bifrost"
        ],
        "type": "Text_excerpt",
        "value": "* From source\n\n  ```\n  git clone https://github.com/pmelsted/bifrost.git\n  cd bifrost && mkdir build && cd build\n  cmake ..\n  make\n  make install\n  ```\n  \n  By default, the installation creates:\n  * a binary (*Bifrost*)\n  * a dynamic library (*libbifrost.so* for Unix or *libbifrost.dylib* for MacOS)\n  * a static library (*libbifrost.a*)\n\n  **Advanced**\n  * `make install` might require `sudo` (`sudo make install`) to proceed.\n  * To install in a non-default path `/some/path/`, add the option `-DCMAKE_INSTALL_PREFIX=/some/path/` to the `cmake` command.\n  * Bifrost compiles by default with `-march=native`: the compiler targets architecture instructions specific to the machine Bifrost is compiled on. Hence, the binary and library produced might not work on a different machine. Native compilation can be disabled by adding the option `-DCOMPILATION_ARCH=OFF` to the `cmake` command (disables all AVX2 optimizations too). Alternatively, you can use this option to specify the architecture you want to target: `x86-64`, `knl`, etc. Default is `-DCOMPILATION_ARCH=native`.\n  * Bifrost uses AVX2 instructions during graph construction which can be disabled by adding the option `-DENABLE_AVX2=OFF` to the `cmake` command.\n\n  If you encounter any problem during the installation, see the [Troubleshooting](#troubleshooting) section.\n\n* From [Bioconda](https://bioconda.github.io):\n\n  Compared to the source install, the Conda package might not have the latest Bifrost version, does not support *k>31* nor native compilation. **Do not use the Conda installation for benchmarking Bifrost.**\n  ```\n  conda install -c bioconda bifrost\n  ```\n"
      },
      "source": "https://raw.githubusercontent.com/pmelsted/bifrost/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Large *k*-mers",
        "parent_header": [
          "Bifrost",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "The default maximum *k*-mer size supported is 31. To work with larger *k* in the binary, you must install Bifrost from source and replace *MAX_KMER_SIZE* with a larger multiple of 32. This can be done in two ways:\n\n* By adding the following option to the `cmake` command:\n```\n-DMAX_KMER_SIZE=64\n```\n\n* By replacing *MAX_KMER_SIZE* in *CMakeLists.txt*:\n```\nSET(MAX_KMER_SIZE \"64\" CACHE STRING \"MAX_KMER_SIZE\")\n```\n\nActual maximum k-mer size is *MAX_KMER_SIZE-1*, e.g maximum *k* is 63 for *MAX_KMER_SIZE=64*. Increasing *MAX_KMER_SIZE* increases Bifrost memory usage (*k*=31 uses 8 bytes of memory per *k*-mer while *k*=63 uses 16 bytes of memory per *k*-mer).\n\nThe maximum size of minimizers (*g*-mers) *MAX_GMER_SIZE* can be adjusted the same way as *MAX_KMER_SIZE*. This is especially useful if you want to use a large *k*-mer size but a small *g*-mer size. By default, *MAX_GMER_SIZE* is equal to *MAX_KMER_SIZE*.\n\nTo work with larger *k* when using the Bifrost API, the new value *MAX_KMER_SIZE* must be given to the compiler and linker as explained in Section [API](#api)\n"
      },
      "source": "https://raw.githubusercontent.com/pmelsted/bifrost/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9934845214291816,
      "result": {
        "original_header": "Benchmarking",
        "type": "Text_excerpt",
        "value": "* **Do not used the conda installation for benchmarking** \n  Compared to the source install, the Conda package might not have the latest Bifrost version, does not support *k>31* nor native compilation. \n"
      },
      "source": "https://raw.githubusercontent.com/pmelsted/bifrost/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/pmelsted/bifrost/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "BSD 2-Clause \"Simplified\" License",
        "spdx_id": "BSD-2-Clause",
        "type": "License",
        "url": "https://api.github.com/licenses/bsd-2-clause",
        "value": "https://api.github.com/licenses/bsd-2-clause"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "BSD 2-Clause License\n\nCopyright (c) [2018], [Pall Melsted, Guillaume Holley]\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
      },
      "source": "https://raw.githubusercontent.com/pmelsted/bifrost/master/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "parent_header": [
          "Bifrost"
        ],
        "type": "Text_excerpt",
        "value": "* [Bifrost](https://github.com/pmelsted/bifrost/blob/master/LICENSE) is BSD2 licensed\n* The [wyhash](https://github.com/wangyi-fudan/wyhash) library is Unlicense licensed\n* The [popcount](https://github.com/kimwalisch/libpopcnt) library is BSD licensed\n* The [fastmod](https://github.com/lemire/fastmod) library is Apache 2.0 licensed\n* The [kseq](http://lh3lh3.users.sourceforge.net/kseq.shtml) library is copyrighted by Heng Li and released under the MIT license\n* The [CRoaring](https://github.com/RoaringBitmap/CRoaring) library is Apache 2.0 licensed\n* The [zstr](https://github.com/mateidavid/zstr) library is MIT licensed\n* The GetRSS library is Creative Commons Attribution 3.0 licensed\n"
      },
      "source": "https://raw.githubusercontent.com/pmelsted/bifrost/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bifrost"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "pmelsted"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 1419943,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 762225,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 3810,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pmelsted/bifrost/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "GuillaumeHolley",
          "type": "User"
        },
        "date_created": "2024-03-15T15:20:17Z",
        "date_published": "2024-03-15T16:02:43Z",
        "description": "**New querying options**\r\n\r\n- `-Q, --files-as-queries`: It is now possible to use a file containing one or multiple sequences as one query.\r\n- `-E, --min-nb-colors`: Requires that a query occurs in a user-provided minimum number of colors to report the query as present in the graph\r\n\r\n**Bug fixes**\r\n\r\n- Fix bug with incorrect read positions in input files causing suboptimal construction time\r\n- Fix bug with the resizing of `MinimizerIndex` and `KmerHashtable` causing program hanging for very small input data\r\n\r\n**Refactor**\r\n\r\n- CLI updated. Querying works a little differently from previous versions. Default behavior for previous versions was to report presence/absence of each query. New behavior is to report the number of k-mers from each query shared with the graph or with its colors, unless parameter  `-e` is used explicitly in which case presence/absence is reported. Parameter `-p` will make the querying report a ratio of found k-mers (with respect to the number of k-mers in each query) rather than a number\r\n- README updated: New \"Benchmarking\" section provides guidelines on how to properly compare other tools to Bifrost, use cases updated, citation updated, installation description simplified, etc.",
        "html_url": "https://github.com/pmelsted/bifrost/releases/tag/v1.3.5",
        "name": "v1.3.5",
        "release_id": 146809164,
        "tag": "v1.3.5",
        "tarball_url": "https://api.github.com/repos/pmelsted/bifrost/tarball/v1.3.5",
        "type": "Release",
        "url": "https://api.github.com/repos/pmelsted/bifrost/releases/146809164",
        "value": "https://api.github.com/repos/pmelsted/bifrost/releases/146809164",
        "zipball_url": "https://api.github.com/repos/pmelsted/bifrost/zipball/v1.3.5"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "GuillaumeHolley",
          "type": "User"
        },
        "date_created": "2023-11-20T08:37:43Z",
        "date_published": "2023-11-20T08:55:51Z",
        "description": "Minor upgrade to 1.3.0:\r\n- Fix compilation issues for MacOS and FreeBSD\r\n- Fix issue with reporting the ratio of k-mers found in each query for colored dBGs\r\n- Fix issue with the inexact k-mer search in colored dBGs",
        "html_url": "https://github.com/pmelsted/bifrost/releases/tag/v1.3.1",
        "name": "v1.3.1",
        "release_id": 130307983,
        "tag": "v1.3.1",
        "tarball_url": "https://api.github.com/repos/pmelsted/bifrost/tarball/v1.3.1",
        "type": "Release",
        "url": "https://api.github.com/repos/pmelsted/bifrost/releases/130307983",
        "value": "https://api.github.com/repos/pmelsted/bifrost/releases/130307983",
        "zipball_url": "https://api.github.com/repos/pmelsted/bifrost/zipball/v1.3.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "GuillaumeHolley",
          "type": "User"
        },
        "date_created": "2023-10-10T13:54:08Z",
        "date_published": "2023-10-10T14:01:14Z",
        "description": "**Bifrost memory usage and running time has improved by up to 30%** (depending on the input dataset)\r\n- The minimizer index and kmer hash-table use now robin-hood hashing instead of linear probing. They default to 95% maximum bucket occupancy instead of 80% in previous versions. Furthermore, hash table resizing uses now a 20% memory increase instead of doubling the size.\r\n- Blocked Bloom Filter uses a default 24 bits per key to enable a much faster joining step.\r\n- Extracting the exact unitigs from the Blocked Bloom Filter is done in 3 steps instead of 2: approximate unitigs are extracted to disk, read from disk and indexed in memory before annotating *k*-mers with their respective counts. Reader-writer locks can be avoided this way. However, Bifrost now uses a bit of disk space.\r\n- Code refactoring\r\n\r\n**New options for querying**\r\n- `-p, --nb-found-km`: Output the number of found k-mers for each query (disable parameter -e)\r\n- `-P, --ratio-found-km`: Output the ratio of found k-mers for each query (disable parameter -e)\r\n- Fix rounding issue in https://github.com/pmelsted/bifrost/issues/67\r\n\r\nThis version breaks Bifrost Index File (.bfi) compatibility with previous Bifrost versions, i.e. v1.3.0 cannot read .bfi files generated by v1.2.1 and older versions.",
        "html_url": "https://github.com/pmelsted/bifrost/releases/tag/v1.3.0",
        "name": "v1.3.0",
        "release_id": 124433797,
        "tag": "v1.3.0",
        "tarball_url": "https://api.github.com/repos/pmelsted/bifrost/tarball/v1.3.0",
        "type": "Release",
        "url": "https://api.github.com/repos/pmelsted/bifrost/releases/124433797",
        "value": "https://api.github.com/repos/pmelsted/bifrost/releases/124433797",
        "zipball_url": "https://api.github.com/repos/pmelsted/bifrost/zipball/v1.3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "GuillaumeHolley",
          "type": "User"
        },
        "date_created": "2023-06-30T13:39:42Z",
        "date_published": "2023-06-30T13:43:33Z",
        "description": "Update kseq to latest version:\r\n- Faster reading from FASTA/FASTQ\r\n- Reads sequences larger than 2 GB\r\n- Experiments show lower memory usage",
        "html_url": "https://github.com/pmelsted/bifrost/releases/tag/v1.2.1",
        "name": "v1.2.1",
        "release_id": 110503661,
        "tag": "v1.2.1",
        "tarball_url": "https://api.github.com/repos/pmelsted/bifrost/tarball/v1.2.1",
        "type": "Release",
        "url": "https://api.github.com/repos/pmelsted/bifrost/releases/110503661",
        "value": "https://api.github.com/repos/pmelsted/bifrost/releases/110503661",
        "zipball_url": "https://api.github.com/repos/pmelsted/bifrost/zipball/v1.2.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "GuillaumeHolley",
          "type": "User"
        },
        "date_created": "2022-11-02T09:53:26Z",
        "date_published": "2022-11-02T10:04:45Z",
        "description": "- GFA and FASTA output are now compressed by default. Compressed GFA/FASTA can be read by Bifrost.\r\n- Optional Bifrost binary output (instead of GFA/FASTA). Uses less disk space than GFA/FASTA and loads faster in memory.\r\n- Bifrost index output by default. Enables to load a Bifrost graph (GFA/FASTA or binary) **much** faster in memory.\r\n- Time and memory reduction on some datasets.\r\n- Minor bug fixes.\r\n\r\nAPI and CLI compatibility breaks with previous versions but only minor changes (see Changelog). GCC version minimum requirement changes to 5.1 (from 4.8). ",
        "html_url": "https://github.com/pmelsted/bifrost/releases/tag/v1.2.0",
        "name": "v1.2.0",
        "release_id": 81792149,
        "tag": "v1.2.0",
        "tarball_url": "https://api.github.com/repos/pmelsted/bifrost/tarball/v1.2.0",
        "type": "Release",
        "url": "https://api.github.com/repos/pmelsted/bifrost/releases/81792149",
        "value": "https://api.github.com/repos/pmelsted/bifrost/releases/81792149",
        "zipball_url": "https://api.github.com/repos/pmelsted/bifrost/zipball/v1.2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "GuillaumeHolley",
          "type": "User"
        },
        "date_created": "2022-04-27T16:47:52Z",
        "date_published": "2022-04-27T16:49:30Z",
        "description": "- Major bugfix for single-threaded construction\r\n- Minor bugfixes ",
        "html_url": "https://github.com/pmelsted/bifrost/releases/tag/v1.0.6.5",
        "name": "v1.0.6.5",
        "release_id": 65492720,
        "tag": "v1.0.6.5",
        "tarball_url": "https://api.github.com/repos/pmelsted/bifrost/tarball/v1.0.6.5",
        "type": "Release",
        "url": "https://api.github.com/repos/pmelsted/bifrost/releases/65492720",
        "value": "https://api.github.com/repos/pmelsted/bifrost/releases/65492720",
        "zipball_url": "https://api.github.com/repos/pmelsted/bifrost/zipball/v1.0.6.5"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "GuillaumeHolley",
          "type": "User"
        },
        "date_created": "2022-03-10T13:15:05Z",
        "date_published": "2022-03-10T13:16:47Z",
        "description": "Minor update to 1.0.6.3:\r\n- Remove XXHash dependency from install which had been put back by mistake in the cmake files.",
        "html_url": "https://github.com/pmelsted/bifrost/releases/tag/v1.0.6.4",
        "name": "v1.0.6.4",
        "release_id": 61493649,
        "tag": "v1.0.6.4",
        "tarball_url": "https://api.github.com/repos/pmelsted/bifrost/tarball/v1.0.6.4",
        "type": "Release",
        "url": "https://api.github.com/repos/pmelsted/bifrost/releases/61493649",
        "value": "https://api.github.com/repos/pmelsted/bifrost/releases/61493649",
        "zipball_url": "https://api.github.com/repos/pmelsted/bifrost/zipball/v1.0.6.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "GuillaumeHolley",
          "type": "User"
        },
        "date_created": "2022-02-21T15:36:12Z",
        "date_published": "2022-02-21T15:41:21Z",
        "description": "Minor update to v1.0.6.2:\r\n- Add *MAX_GMER_SIZE* compile variable to choose the maximum size of *g*-mers (minimizers). Works exactly the same as *MAX_KMER_SIZE*.  By default, *MAX_GMER_SIZE* is equal to *MAX_KMER_SIZE*.\r\n- Fix an issue with the `update` function where the k-mer size of the input graph was not used to make the output graph (default k-mer size was used instead).",
        "html_url": "https://github.com/pmelsted/bifrost/releases/tag/v1.0.6.3",
        "name": "v1.0.6.3",
        "release_id": 60058953,
        "tag": "v1.0.6.3",
        "tarball_url": "https://api.github.com/repos/pmelsted/bifrost/tarball/v1.0.6.3",
        "type": "Release",
        "url": "https://api.github.com/repos/pmelsted/bifrost/releases/60058953",
        "value": "https://api.github.com/repos/pmelsted/bifrost/releases/60058953",
        "zipball_url": "https://api.github.com/repos/pmelsted/bifrost/zipball/v1.0.6.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "GuillaumeHolley",
          "type": "User"
        },
        "date_created": "2022-01-25T16:15:46Z",
        "date_published": "2022-01-25T16:16:47Z",
        "description": "Overall, Bifrost is now much faster and a lot more memory efficient compared to v1.0.5.\r\n\r\n- Improvement on the rolling hash-function RepHash (much less collisions for small values).\r\n- Blocked Bloom Filter cannot use over-loaded blocks anymore. When using the 2-blocks hashing method, if the 2 blocks are at >65% capacity, the minimizer is rehashed to find 2 new blocks which are hopefully not over-loaded. After 8 iterations of 2-overloaded blocks, the k-mer hash is stored in an unsorted_set.\r\n- AVX2 version of the Blocked Bloom Filter is disabled at the moment. It doesn't bring any performance gain over the non-AVX2 version anymore. Need some rework.\r\n- XXHash replaced with Wyhash",
        "html_url": "https://github.com/pmelsted/bifrost/releases/tag/v1.0.6.2",
        "name": "v1.0.6.2",
        "release_id": 57936792,
        "tag": "v1.0.6.2",
        "tarball_url": "https://api.github.com/repos/pmelsted/bifrost/tarball/v1.0.6.2",
        "type": "Release",
        "url": "https://api.github.com/repos/pmelsted/bifrost/releases/57936792",
        "value": "https://api.github.com/repos/pmelsted/bifrost/releases/57936792",
        "zipball_url": "https://api.github.com/repos/pmelsted/bifrost/zipball/v1.0.6.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "GuillaumeHolley",
          "type": "User"
        },
        "date_created": "2020-09-16T23:05:38Z",
        "date_published": "2020-09-16T23:07:33Z",
        "description": "Fix major problem with unitig deletion in colored dBGs",
        "html_url": "https://github.com/pmelsted/bifrost/releases/tag/v1.0.5",
        "release_id": 31432785,
        "tag": "v1.0.5",
        "tarball_url": "https://api.github.com/repos/pmelsted/bifrost/tarball/v1.0.5",
        "type": "Release",
        "url": "https://api.github.com/repos/pmelsted/bifrost/releases/31432785",
        "value": "https://api.github.com/repos/pmelsted/bifrost/releases/31432785",
        "zipball_url": "https://api.github.com/repos/pmelsted/bifrost/zipball/v1.0.5"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "GuillaumeHolley",
          "type": "User"
        },
        "date_created": "2020-06-03T22:36:05Z",
        "date_published": "2020-07-14T22:21:11Z",
        "description": "Fix a bench of minor (but annoying) issues\r\nNew implementation for unitigs that are single k-mers",
        "html_url": "https://github.com/pmelsted/bifrost/releases/tag/v1.0.4",
        "release_id": 28564214,
        "tag": "v1.0.4",
        "tarball_url": "https://api.github.com/repos/pmelsted/bifrost/tarball/v1.0.4",
        "type": "Release",
        "url": "https://api.github.com/repos/pmelsted/bifrost/releases/28564214",
        "value": "https://api.github.com/repos/pmelsted/bifrost/releases/28564214",
        "zipball_url": "https://api.github.com/repos/pmelsted/bifrost/zipball/v1.0.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "GuillaumeHolley",
          "type": "User"
        },
        "date_created": "2020-03-18T10:52:05Z",
        "date_published": "2020-03-18T10:55:45Z",
        "html_url": "https://github.com/pmelsted/bifrost/releases/tag/v1.0.3",
        "release_id": 24628701,
        "tag": "v1.0.3",
        "tarball_url": "https://api.github.com/repos/pmelsted/bifrost/tarball/v1.0.3",
        "type": "Release",
        "url": "https://api.github.com/repos/pmelsted/bifrost/releases/24628701",
        "value": "https://api.github.com/repos/pmelsted/bifrost/releases/24628701",
        "zipball_url": "https://api.github.com/repos/pmelsted/bifrost/zipball/v1.0.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "GuillaumeHolley",
          "type": "User"
        },
        "date_created": "2020-03-12T00:10:26Z",
        "date_published": "2020-03-12T00:11:44Z",
        "description": "Release for bioconda",
        "html_url": "https://github.com/pmelsted/bifrost/releases/tag/v1.0.2",
        "release_id": 24446990,
        "tag": "v1.0.2",
        "tarball_url": "https://api.github.com/repos/pmelsted/bifrost/tarball/v1.0.2",
        "type": "Release",
        "url": "https://api.github.com/repos/pmelsted/bifrost/releases/24446990",
        "value": "https://api.github.com/repos/pmelsted/bifrost/releases/24446990",
        "zipball_url": "https://api.github.com/repos/pmelsted/bifrost/zipball/v1.0.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "GuillaumeHolley",
          "type": "User"
        },
        "date_created": "2020-03-08T12:40:46Z",
        "date_published": "2020-03-08T12:41:53Z",
        "html_url": "https://github.com/pmelsted/bifrost/releases/tag/v1.0.1",
        "release_id": 24325172,
        "tag": "v1.0.1",
        "tarball_url": "https://api.github.com/repos/pmelsted/bifrost/tarball/v1.0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/pmelsted/bifrost/releases/24325172",
        "value": "https://api.github.com/repos/pmelsted/bifrost/releases/24325172",
        "zipball_url": "https://api.github.com/repos/pmelsted/bifrost/zipball/v1.0.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "pmelsted",
          "type": "User"
        },
        "date_created": "2020-03-02T23:25:47Z",
        "date_published": "2020-08-05T16:43:18Z",
        "description": "The exact version used in the paper.",
        "html_url": "https://github.com/pmelsted/bifrost/releases/tag/paper",
        "name": "The exact version used in the paper",
        "release_id": 29372458,
        "tag": "paper",
        "tarball_url": "https://api.github.com/repos/pmelsted/bifrost/tarball/paper",
        "type": "Release",
        "url": "https://api.github.com/repos/pmelsted/bifrost/releases/29372458",
        "value": "https://api.github.com/repos/pmelsted/bifrost/releases/29372458",
        "zipball_url": "https://api.github.com/repos/pmelsted/bifrost/zipball/paper"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "GuillaumeHolley",
          "type": "User"
        },
        "date_created": "2020-02-25T22:13:38Z",
        "date_published": "2020-02-29T17:09:37Z",
        "description": "First release of Bifrost: construct, index and query compacted and/or colored de Bruijn graph.",
        "html_url": "https://github.com/pmelsted/bifrost/releases/tag/v1.0",
        "release_id": 24100787,
        "tag": "v1.0",
        "tarball_url": "https://api.github.com/repos/pmelsted/bifrost/tarball/v1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/pmelsted/bifrost/releases/24100787",
        "value": "https://api.github.com/repos/pmelsted/bifrost/releases/24100787",
        "zipball_url": "https://api.github.com/repos/pmelsted/bifrost/zipball/v1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirements",
        "parent_header": [
          "Bifrost"
        ],
        "type": "Text_excerpt",
        "value": "It is highly recommended to install Bifrost from source. However, a Conda installation is possible (see Section [Installation](#installation)). Bifrost requirements are pre-installed by default on most OS:\n\n* C++11 compiler:\n    * [GCC](https://gcc.gnu.org/) >= 5.1.0\n    * [Clang](http://clang.llvm.org/) >= 3.5\n* [Cmake](https://cmake.org/) >= 2.8.12\n* [Zlib](https://zlib.net/)\n\nIn case you are missing on or more of those: \n\n* **Ubuntu/Debian**:\n```\nsudo apt-get install build-essential cmake zlib1g-dev\n```\n* **MacOS** (with [Homebrew](https://brew.sh/)):\n```\nbrew install --with-toolchain llvm\nbrew install cmake zlib\n```\n* **Windows**:\nBifrost does not run natively on Windows but you can install the [Windows Subsystem for Linux (WSL)](https://learn.microsoft.com/en-us/linux/install) and run it from there. Bifrost will be slower on WSL compare to a native Linux installation. From the WSL:\n```\nsudo apt-get install build-essential cmake zlib1g-dev\n```\n"
      },
      "source": "https://raw.githubusercontent.com/pmelsted/bifrost/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contributors",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 15:08:51",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 203
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Binary usage:",
        "parent_header": [
          "Bifrost"
        ],
        "type": "Text_excerpt",
        "value": "```\nBifrost\n```\n\ndisplays the command line interface:\n```\nBifrost x.y.z\n\nHighly parallel construction, indexing and querying of colored and compacted de Bruijn graphs\n\nUsage: Bifrost [COMMAND] [PARAMETERS]\n\n[COMMAND]:\n\n   build                   Build a compacted de Bruijn graph, with or without colors\n   update                  Update a compacted (colored) de Bruijn graph with new sequences\n   query                   Query a compacted (colored) de Bruijn graph\n\n[PARAMETERS]: build\n\n   > Mandatory with required argument:\n\n   -s, --input-seq-file     Input sequence file in fasta/fastq(.gz) format\n                            Multiple files can be provided as a list in a text file (one file per line)\n                            K-mers with exactly 1 occurrence in the input sequence files will be discarded\n   -r, --input-ref-file     Input reference file in fasta/fastq(.gz) or gfa(.gz) format\n                            Multiple files can be provided as a list in a text file (one file per line)\n                            All k-mers of the input reference files are used\n   -o, --output-file        Prefix for output file(s)\n\n   > Optional with required argument:\n\n   -t, --threads            Number of threads (default: 1)\n   -k, --kmer-length        Length of k-mers (default: 31)\n   -m, --min-length         Length of minimizers (default: auto)\n   -B, --bloom-bits         Number of Bloom filter bits per k-mer (default: 24)\n   -T, --tmp-dir            Path for tmp directory (default: creates tmp directory in output directory)\n   -l, --load-mbbf          Input Blocked Bloom Filter file, skips filtering step (default: no input)\n   -w, --write-mbbf         Output Blocked Bloom Filter file (default: no output)\n\n   > Optional with no argument:\n\n   -c, --colors             Color the compacted de Bruijn graph\n   -i, --clip-tips          Clip tips shorter than k k-mers in length\n   -d, --del-isolated       Delete isolated contigs shorter than k k-mers in length\n   -f, --fasta-out          Output file in fasta format (only sequences) instead of gfa (unless graph is colored)\n   -b, --bfg-out            Output file in bfg/bfi format (Bifrost graph/index) instead of gfa (unless graph is colored)\n   -n, --no-compress-out    Output files must be uncompressed\n   -N, --no-index-out       Do not make index file\n   -v, --verbose            Print information messages during execution\n\n[PARAMETERS]: update\n\n  > Mandatory with required argument:\n\n   -g, --input-graph-file   Input graph file to update in gfa(.gz) or bfg format\n   -s, --input-seq-file     Input sequence file in fasta/fastq(.gz) format\n                            Multiple files can be provided as a list in a text file (one file per line)\n                            K-mers with exactly 1 occurrence in the input sequence files will be discarded\n   -r, --input-ref-file     Input reference file in fasta/fastq(.gz) or gfa(.gz) format\n                            Multiple files can be provided as a list in a text file (one file per line)\n                            All k-mers of the input reference files are used\n   -o, --output-file        Prefix for output file(s)\n\n   > Optional with required argument:\n\n   -I, --input-index-file   Input index file associated with graph to update in bfi format\n   -C, --input-color-file   Input color file associated with graph to update in color.bfg format\n   -t, --threads            Number of threads (default: 1)\n   -k, --kmer-length        Length of k-mers (default: read from input graph file if built with Bifrost or 31)\n   -m, --min-length         Length of minimizers (default: read from input graph if built with Bifrost, auto otherwise)\n   -T, --tmp-dir            Path for tmp directory (default: creates tmp directory in output directory)\n\n   > Optional with no argument:\n\n   -i, --clip-tips          Clip tips shorter than k k-mers in length\n   -d, --del-isolated       Delete isolated contigs shorter than k k-mers in length\n   -f, --fasta-out          Output file in fasta format (only sequences) instead of gfa (unless colors are output)\n   -b, --bfg-out            Output file in bfg/bfi format (Bifrost graph/index) instead of gfa (unless graph is colored)\n   -n, --no-compress-out    Output files must be uncompressed\n   -N, --no-index-out       Do not make index file\n   -v, --verbose            Print information messages during execution\n\n[PARAMETERS]: query\n\n  > Mandatory with required argument:\n\n   -g, --input-graph-file   Input graph file to query in gfa(.gz) or bfg\n   -q, --input-query-file   Input query file in fasta/fastq(.gz). Each record is a query.\n                            Multiple files can be provided as a list in a text file (one file per line)\n   -o, --output-file        Prefix for output file\n\n   > Optional with required argument:\n\n   -e, --min_ratio-kmers    Minimum ratio of k-mers from each query that must occur in the graph\n   -E, --min-nb-colors      Minimum number of colors from each query that must occur in the graph\n   -I, --input-index-file   Input index file associated with graph to query in bfi format\n   -C, --input-color-file   Input color file associated with the graph to query in color.bfg format\n   -t, --threads            Number of threads (default: 1)\n   -k, --kmer-length        Length of k-mers (default: read from input graph if built with Bifrost or 31)\n   -m, --min-length         Length of minimizers (default: read from input graph if built with Bifrost, auto otherwise)\n   -T, --tmp-dir            Path for tmp directory (default: creates tmp directory in output directory)\n\n   > Optional with no argument:\n\n   -Q, --files-as-queries   All fastq/fastq records in each input query file constitute a single query.\n   -p, --ratio-found-km     Output the ratio of found k-mers for each query (disable parameters -e and -E)\n   -a, --approximate        Graph is searched using exact and inexact k-mers (1 substitution or indel allowed per k-mer)\n   -v, --verbose            Print information messages during execution\n```\n"
      },
      "source": "https://raw.githubusercontent.com/pmelsted/bifrost/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Use cases",
        "parent_header": [
          "Bifrost",
          "Binary usage:"
        ],
        "type": "Text_excerpt",
        "value": "The following use cases describe some simple and common usage of the Bifrost CLI. However, many more options are provided by the CLI to perform more specific operations (graph cleaning, approximate querying, etc.).\n\n- **Build**\n\n  1. **Build a compacted de Bruijn graph from read files**\n     ```\n     Bifrost build -t 4 -k 31 -s A.fastq -s B.fastq -o AB\n     ```\n     The compacted de Bruijn graph is built (`build`) using 4 threads (`-t 4`) from the 31-mers (`-k 31`) of files *A.fastq* and *B.fastq* (`-s A.fastq -s B.fastq`). By using parameter `-s`, files *A.fastq* and *B.fastq* are filtered: 31-mers occurring exactly once in *A* and *B* are discarded from the construction. The graph is written to file *AB.gfa.gz* and a Bifrost index is written to file *AB.bfi* (`-o AB`).\n\n  2. **Build a compacted de Bruijn graph from a reference genome file**\n     ```\n     Bifrost build -t 4 -k 31 -r C.fasta -o C\n     ```\n     Same as previous use case but by using parameter `-r`, file *C.fasta* is NOT filtered: all 31-mers occurring in *C* are used during the construction. The graph is written to file *C.gfa.gz* and a Bifrost index is written to file *C.bfi* (`-o C`).\n\n  3. **Build a compacted and colored de Bruijn graph from read files and reference genome files**\n     ```\n     Bifrost build -t 4 -k 31 -c -s A.fastq -s B.fastq -r C.fasta -o ABC \n     ```\n     Combining the two previous use cases, the compacted de Bruijn graph is built (`build`) using 4 threads (`-t 4`) from the filtered 31-mers (`-k 31`) of files *A.fastq* and *B.fastq* (`-s A.fastq -s B.fastq`) and the unfiltered 31-mers of file *C.fasta* (`-r C.fasta`). The graph is colored (`-c`) such that for each k-mer in the unitigs of the graph is recorded whether it occurs in *A*, *B* or *C*. The graph is written to file *ABC.gfa.gz*, its colors are written to file *ABC.color.bfg* and a Bifrost index is written to file *ABC.bfi* (`-o ABC`).\n\n     Additional options of interest for building are:\n     - `-i`: Delete all tips composed of unitigs shorter than *k* *k*-mers\n     - `-d`: Delete all connected components composed of one unitig shorter than *k* *k*-mers\n\n- **Update**\n\n  1. **Update a compacted de Bruijn graph with a reference genome file**\n     ```\n     Bifrost update -t 4 -g A_graph.gfa.gz -r B.fasta -o AB\n     ```\n     The compacted de Bruijn graph *A* (`-g A_graph.gfa.gz`) is updated (`update`) using 4 threads (`-t 4`) with the unfiltered *k*-mers of file *B.fasta* (`-r B.fasta`). The Bifrost index *A_graph.bfi* is automatically loaded if available in the same path as the graph but can also be loaded with `-I`. The graph is written to file *AB.gfa.gz* and a Bifrost index is written to file *AB.bfi* (`-o AB`).\n\n  2. **Update a compacted and colored de Bruijn graph with read files**\n     ```\n     Bifrost update -t 4 -g A.gfa.gz -f A.color.bfg -s B.fastq -s C.fastq -o ABC\n     ```\n     The compacted and colored de Bruijn graph *A* (`-g A.gfa.gz -f A.color.bfg`) is updated (`update`) using 4 threads (`-t 4`) with the filtered *k*-mers of files *B.fastq* and *C.fastq* (`-s B.fastq -s C.fastq`). The Bifrost index *A.bfi* is automatically loaded if available in the same path as the graph but can also be loaded with `-I`. The merged graph is written to file *ABC.gfa.gz*, its colors are written to file *ABC.color.bfg* and a Bifrost index is written to file *ABC.bfi* (`-o ABC`).\n\n        Additional options of interest for merging are:\n     - `-i`: Delete all tips composed of unitigs shorter than *k* *k*-mers\n     - `-d`: Delete all connected components composed of one unitig shorter than *k* *k*-mers\n\n- **Query**\n\n  The default querying behavior is to report the number of *k*-mers shared between the queries and:\n  - the graph if input graph is **not** colored\n  - each color if input graph is colored\n \n  1. **Query a compacted de Bruijn graph for the number of k-mers shared between the queries and the graph**\n     ```\n     Bifrost query -t 4 -g A.gfa.gz -q in_queries.fasta -o out_queries_result \n     ```\n     The compacted de Bruijn graph *A* (`-g A.gfa.gz`) is queried (`query`) using 4 threads (`-t 4`) for the number of *k*-mers shared between the sequences of file *in_queries.fasta* (`-q in_queries.fasta`) and the graph *A*. The Bifrost index *A.bfi* is automatically loaded if available in the same path as the graph but can also be loaded with `-I`. The results are stored in a matrix written to file *out_queries_result.tsv* (`-o out_queries_result`): rows are the queries, column is the graph, intersection of row/column is the number of shared *k*-mers between the query and the graph.\n\n  2. **Query a compacted de Bruijn graph for presence/absence of queries in the graph**\n     ```\n     Bifrost query -t 4 -e 0.8 -g A.gfa.gz -q in_queries.fasta -o out_queries_result \n     ```\n     Same as previous use case but instead of returning a number of shared *k*-mers per query, it returns a binary value indicating whether the query is present in the graph or not (1 if present, 0 if absent). At least 80% of the *k*-mers in each query must be found in the graph to report the query as present (`-e 0.8`).\n\n  3. **Query a colored and compacted de Bruijn graph for the number of k-mers shared between the queries and the colors of the graph**\n     ```\n     Bifrost query -t 4 -g AB.gfa.gz -C AB.color.bfg -q in_queries.fasta -o out_queries_result \n     ```\n     The compacted and colored de Bruijn graph *AB* (`-g AB.gfa.gz -C AB.color.bfg`) is queried (`query`) using 4 threads (`-t 4`) for the number of *k*-mers shared between the sequences of file (`-q in_queries.fasta`). The Bifrost index *AB.bfi* is automatically loaded if available in the same path as the graph but can also be loaded with `-I`. The results are stored in a matrix written to file *out_queries_result.tsv* (`-o out_queries_result`): rows are the queries, columns are the colors, intersection of row/column is an integer indicating the number of *k*-mers from the query occuring in the graph with the corresponding color.\n\n  4. **Query a colored and compacted de Bruijn graph for presence/absence of queries in each color of the graph**\n     ```\n     Bifrost query -t 4 -e 0.8 -g AB.gfa.gz -C AB.color.bfg -q in_queries.fasta -o out_queries_result \n     ```\n     Same as previous use case but instead of returning a number of shared *k*-mers per query and color, it returns a binary value indicating whether the query is present in the graph with the corresponding color or not (1 if present, 0 if absent). At least 80% of the *k*-mers in each query must be found in the graph with corresponding color to report the query as present for that color (`-e 0.8`).\n\n  Additional options of interest for querying are:\n  -  `-p`: Outputs a ratio of shared *k*-mers (w.r.t the number of *k*-mers in each query) instead of the number of *k*-mers\n  -  `-Q`: Performs the querying per file (with multiple sequences) rather than per sequence\n  -  `-a`: Enable approximate *k*-mer matches\n  -  `-E`: A *k*-mer is only reported as present if it is colored by *x* many colors\n      "
      },
      "source": "https://raw.githubusercontent.com/pmelsted/bifrost/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Tutorial",
        "parent_header": [
          "Bifrost",
          "API"
        ],
        "type": "Text_excerpt",
        "value": "The [API tutorial](doc/tutorial/Intro.md) should help you get started with the C++ API.\n"
      },
      "source": "https://raw.githubusercontent.com/pmelsted/bifrost/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "Bifrost",
          "API"
        ],
        "type": "Text_excerpt",
        "value": "The Bifrost C++ API can be used by adding\n```\n#include <bifrost/CompactedDBG.hpp>\n```\nfor uncolored compacted de Bruijn graphs and\n```\n#include <bifrost/ColoredCDBG.hpp>\n```\nfor colored compacted de Bruijn graphs in your C++ headers.\n\nTo compile, we recommend using the following compile flags:\n```\n-O3 -std=c++11\n```\nFurthermore, Bifrost compiles by default with flag `-march=native` so unless native compilation was disabled when installing Bifrost, use flag `-march=native` too.\n\nFinally, use the following flags for linking:\n```\n-lbifrost -pthread -lz\n```\n\nYou can also link to the Bifrost static library (*libbifrost.a*) for better performance:\n```\n<path_to_lib_folder>/libbifrost.a -pthread -lz\n```\n\nThe default maximum *k*-mer size supported is 31. To work with larger *k*, the code using the Bifrost C++ API must be compiled and linked with the flag `-DMAX_KMER_SIZE=x` for compiling and linking where `x` is a larger multiple of 32, such as:\n```\n-DMAX_KMER_SIZE=64\n```\nActual maximum k-mer size is *MAX_KMER_SIZE-1*, e.g maximum *k* is 63 for *MAX_KMER_SIZE=64*. Increasing *MAX_KMER_SIZE* increases Bifrost memory usage (*k*=31 uses 8 bytes of memory per *k*-mer while *k*=63 uses 16 bytes of memory per *k*-mer).\n"
      },
      "source": "https://raw.githubusercontent.com/pmelsted/bifrost/master/README.md",
      "technique": "header_analysis"
    }
  ]
}