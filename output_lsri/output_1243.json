{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/TeamAIRE/RRNPP_detector"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-06-23T12:32:58Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-11-30T11:53:23Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A tool to detect RRNPP-type quorum sensing systems"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9473428841597876,
      "result": {
        "original_header": "1. What does BASH1* do?",
        "type": "Text_excerpt",
        "value": "## 1. What does ```RRNPP_detector``` do?\n```RRNPP_detector``` aims at identifying known and novel RRNPP-type quorum sensing systems in chromosomes, mobile genetic elements and bacteriophages of Firmicutes.\n```RRNPP_detector``` defines candidate RRNPP-type quorum sensing systems as tandems of adjacent ORFs encoding a candidate receptor (250-500aa protein matching HMMs of peptide-binding tetraticopeptide repeats (TPRs)) and a candidate pro-peptide (10-100aa protein predicted to be excreted via the SEC-translocon or matching the amino-acid profile of SHPs) \n```RRNPP_detector``` outputs candidate RRNPP-type systems with 3 different detection strictness:  \n* BASH2*: All receptor-propeptide pairs oriented in a divergent or co-directional context with the propeptide downstream from the receptor, preceded by a RBS_bin > 13 and matching the HMM profile of SHPs or predicted to undergo a SEC/SPI-dependent secretion according to BASH3*\n* BASH4*: All remaining receptor-propeptide pairs in which the propeptide harbors any of the SP(Sec/SPI), TAT(Tat/SPI) or LIPO(Sec/SPII) signal sequence according to BASH5* or BASH3*    \n* BASH6*: All remaining receptor-propeptide pairs in which the propeptide is preceded by a RBS motif with both a high score (according to BASH7*) and a high usage across prokaryotes (according to Omotajo et al.)\n \n### Uncompress SignalP and compile PrediSi \n\n```bash\ntar -xvzf signalp-5.0b.tar.gz\n\n# optional: if you intend to use Predisi in addition to SignalP\ncd predisi\njavac JSPP.java\ncd ../\n```\n```RRNPP_detector``` comes by default with the binary of BASH16*. However, if you want to use another version of SignalP, the software is freely available for academic users at: https://services.healthtech.dtu.dk/software.php\n \nIf you don't provide a nucleotide fasta file but only a proteome file (```faa```) and an annotation file, BASH1* will work only with annotated proteins. The downside of this option is that it won't search for unannotated small ORFs in the vicinity of receptors\n```bash\n# with a gff\npython rrnpp_detector.py --faa bacillus_subtilis/proteome.faa --gff bacillus_subtilis/annotations.gff\n# with a feature table\npython rrnpp_detector.py --faa bacillus_subtilis/proteome.faa --ft bacillus_subtilis/feature_table.txt\n```BASH27*rrnpp_detector/preprocessing.pyBASH28*ncbi_datasetsBASH29*ncbi_datasetsBASH30*bash\nconda activate ncbi_datasets\n \n# will donwload genomes (fna), protein sequences (faa) and annotations (gff3) of complete genomes of Viruses available on Genbank\ndatasets download genome taxon \"Viruses\" \\\n--annotated \\\n--assembly-level complete \\\n--assembly-source genbank \\\n--include genome,protein,gff3 \\\n--filename \"$DOWNLOAD_DIRECTORY\"/assemblies.zip\n```\n\nNext, we will extract the files from this archive and concatenate all genomes in one ```genomes.fnaBASH32*proteomes.faaBASH33*annotations.gffBASH34*bash\ncd \"$DOWNLOAD_DIRECTORY\"\nunzip assemblies.zip\ncd ncbi_dataset/data\nfor ASSEMBLY in GCA_*; do \n  cat \"$ASSEMBLY\"/*.fna >> ../../viral_genomes.fna; rm \"$ASSEMBLY\"/*.fna;\n  cat \"$ASSEMBLY\"/*.faa >> ../../viral_proteomes.faa; rm \"$ASSEMBLY\"/*.faa;\n  cat \"$ASSEMBLY\"/*.gff >> ../../viral_annotations.gff; rm \"$ASSEMBLY\"/*.gff;\ndone\nBASH35*bash\ncd ~/Programs/rrnpp_detector\npython rrnpp_detector.py --fna \"$DOWNLOAD_DIRECTORY\"/viral_genomes.fna --faa \"$DOWNLOAD_DIRECTORY\"/viral_proteomes.faa --gff \"$DOWNLOAD_DIRECTORY\"/viral_annotations.gff -o ~/rrnpp_detector_vs_viruses --cpu 20\nBASH36*--chunk_sizeBASH37*--rbs_binsBASH38*start_codonsBASH39*interproscan-5.56-89.0BASH40*tprpredBASH41*hmmsearchBASH42*v1.0.0BASH43*SPRAT``` for *Small Peptides with RBS Annotation Tool*. This method identifies peptides preceded by a Shine-Dalgarno RBS in the flanking regions of each receptor, using the 27 hierarchical regular expressions introduced by Prodigal to detect SD-RBS motifs. This is justified by the fact that 90% of the canonical genes encoded by Firmicutes have an SD-RBS upstream. Optionally, the user can submit a list of possible start codons to consider for the detection of putative small pepite-coding ORFs (by default, only ATG is considered). \n  - The BASH5* software has been integrated an can be called in complement of BASH3* to increase the sensitivity of the tool\n  - An HMM of SHP propeptides has been built and is now used to identify SHP propeptides since SHPs are not exported via the SEC-translocon and are therefore not returned by BASH3* or BASH5*\n \nInitial push of ```RRNPP_detector```\n \n"
      },
      "source": "https://raw.githubusercontent.com/TeamAIRE/RRNPP_detector/main/readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8277731622918139,
      "result": {
        "original_header": "will donwload genomes (fna), protein sequences (faa) and annotations (gff3) of complete genomes of Viruses available on Genbank",
        "type": "Text_excerpt",
        "value": "datasets download genome taxon \"Viruses\" \\\n--annotated \\\n--assembly-level complete \\\n--assembly-source genbank \\\n--include genome,protein,gff3 \\\n--filename \"$DOWNLOAD_DIRECTORY\"/assemblies.zip\n```\n\nNext, we will extract the files from this archive and concatenate all genomes in one ```genomes.fnaBASH2*proteomes.faaBASH3*annotations.gffBASH4*bash\ncd \"$DOWNLOAD_DIRECTORY\"\nunzip assemblies.zip\ncd ncbi_dataset/data\nfor ASSEMBLY in GCA_*; do \n  cat \"$ASSEMBLY\"/*.fna >> ../../viral_genomes.fna; rm \"$ASSEMBLY\"/*.fna;\n  cat \"$ASSEMBLY\"/*.faa >> ../../viral_proteomes.faa; rm \"$ASSEMBLY\"/*.faa;\n  cat \"$ASSEMBLY\"/*.gff >> ../../viral_annotations.gff; rm \"$ASSEMBLY\"/*.gff;\ndone\nBASH5*RRNPP_detectorBASH6*bash\ncd ~/Programs/rrnpp_detector\npython rrnpp_detector.py --fna \"$DOWNLOAD_DIRECTORY\"/viral_genomes.fna --faa \"$DOWNLOAD_DIRECTORY\"/viral_proteomes.faa --gff \"$DOWNLOAD_DIRECTORY\"/viral_annotations.gff -o ~/rrnpp_detector_vs_viruses --cpu 20\nBASH7*--chunk_sizeBASH8*--rbs_binsBASH9*start_codonsBASH10*interproscan-5.56-89.0BASH11*tprpredBASH12*hmmsearchBASH13*v1.0.0BASH14*SPRATBASH15*PrediSiBASH16*SignalPBASH17*SignalPBASH18*PrediSiBASH19*RRNPP_detector```. If this option increases the sensitivity of the tool, it also increases the risk of false positives\n \n"
      },
      "source": "https://raw.githubusercontent.com/TeamAIRE/RRNPP_detector/main/readme.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/TeamAIRE/RRNPP_detector/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/TeamAIRE/RRNPP_detector/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "TeamAIRE/RRNPP_detector"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "RRNPP_detector"
      },
      "source": "https://raw.githubusercontent.com/TeamAIRE/RRNPP_detector/main/readme.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Create a dedicated and isolated conda environment for BASH1* (recommended but not mandatory)",
        "parent_header": [
          "RRNPP_detector",
          "2. How to install BASH1*?"
        ],
        "type": "Text_excerpt",
        "value": "# RRNPP_detector\n\n## 1. What does ```RRNPP_detector``` do?\n\n```RRNPP_detector``` aims at identifying known and novel RRNPP-type quorum sensing systems in chromosomes, mobile genetic elements and bacteriophages of Firmicutes.\n\n```RRNPP_detector``` defines candidate RRNPP-type quorum sensing systems as tandems of adjacent ORFs encoding a candidate receptor (250-500aa protein matching HMMs of peptide-binding tetraticopeptide repeats (TPRs)) and a candidate pro-peptide (10-100aa protein predicted to be excreted via the SEC-translocon or matching the amino-acid profile of SHPs) \n\n```RRNPP_detector``` outputs candidate RRNPP-type systems with 3 different detection strictness:  \n* ```strict```: All receptor-propeptide pairs oriented in a divergent or co-directional context with the propeptide downstream from the receptor, preceded by a RBS_bin > 13 and matching the HMM profile of SHPs or predicted to undergo a SEC/SPI-dependent secretion according to ```SignalP```\n* ```relaxed```: All remaining receptor-propeptide pairs in which the propeptide harbors any of the SP(Sec/SPI), TAT(Tat/SPI) or LIPO(Sec/SPII) signal sequence according to ```PrediSi``` or ```SignalP```    \n* ```loose```: All remaining receptor-propeptide pairs in which the propeptide is preceded by a RBS motif with both a high score (according to ```Prodigal```) and a high usage across prokaryotes (according to Omotajo et al.)\n\n\n## 2. How to install ```RRNPP_detector```?\n\n### Create a dedicated and isolated conda environment for ```RRNPP_detector``` (recommended but not mandatory)\n\n```bash\nconda create --name rrnpp_detector\nconda activate rrnpp_detector\n````\n"
      },
      "source": "https://raw.githubusercontent.com/TeamAIRE/RRNPP_detector/main/readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Install dependencies",
        "parent_header": [
          "RRNPP_detector",
          "2. How to install BASH1*?"
        ],
        "type": "Text_excerpt",
        "value": "Using conda\n\n```bash\nconda install -c bioconda pandas orfipy prodigal hmmer blast openjdk\n\n```\n\n\n```orfipy``` needs ```sqlite3``` to be compiled. If the installation exits with the \"sqlite3.h: No such file or directory\" error message, please try the following:\n\n```bash\nsudo apt-get install libsqlite3-dev\nconda install -c bioconda pandas orfipy prodigal hmmer blast openjdk\n```\n\nAlternative to installation via conda:\n\n```bash\nsudo apt-get install prodigal hmmer ncbi-blast+\npip3 install pandas orfipy\n```\n"
      },
      "source": "https://raw.githubusercontent.com/TeamAIRE/RRNPP_detector/main/readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Clone the repository",
        "parent_header": [
          "RRNPP_detector",
          "2. How to install BASH1*?"
        ],
        "type": "Text_excerpt",
        "value": "```bash\ncd ~\ngit clone https://github.com/TeamAIRE/RRNPP_detector.git\ncd RRNPP_detector/\n````\n"
      },
      "source": "https://raw.githubusercontent.com/TeamAIRE/RRNPP_detector/main/readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Uncompress SignalP and compile PrediSi",
        "parent_header": [
          "RRNPP_detector",
          "2. How to install BASH1*?"
        ],
        "type": "Text_excerpt",
        "value": "\n```bash\ntar -xvzf signalp-5.0b.tar.gz\n\n# optional: if you intend to use Predisi in addition to SignalP\ncd predisi\njavac JSPP.java\ncd ../\n```\n\n```RRNPP_detector``` comes by default with the binary of ```SignalP version 5.0b Linux x86_64```. However, if you want to use another version of SignalP, the software is freely available for academic users at: https://services.healthtech.dtu.dk/software.php\n\n## 3. How to use ```RRNPP_detector```?\n\n### General usage\n\n```RRNPP_detector``` must be run with python3 against one or multiple contig(s)/(meta)genome(s)\n```\nusage: rrnpp_detector.py [-h] [--version] [-o OUT_DIR] [--fna FNA] [--faa FAA] [--gff GFF] [--ft FEATURE_TBL] [--cpu CPU] [--preserve_ram] [--keep_working_dir] [--min_pl MIN_PROPEPTIDE_LEN]\n                         [--max_pl MAX_PROPEPTIDE_LEN] [--min_rl MIN_RECEPTOR_LEN] [--max_rl MAX_RECEPTOR_LEN] [--min_igd MIN_INTERGEN_DIST] [--max_igd MAX_INTERGEN_DIST] [--expand_to_homologs]\n                         [--tprpred] [--predisi]\n\nRRNPP_detector: a tool to detect RRNPP-Type quorum sensing systems in chromosomes, plasmids and bacteriophages of Firmicutes\n\nMain arguments\n -h, --help               show this help message and exit\n  --version               print version number and exit.\n  -o OUT_DIR              path to output directory (default is current directory)\n  --fna FNA               path to the fasta of the target genome(s) (will run Prodigal to detect CDSs if faa not provided)\n  --faa FAA               path to fasta of the protein sequences of the target genome(s) (requires additional --gff or --ft option)\n  --gff GFF               path to the annotations of the target genome(s) in gff\n  --ft FEATURE_TBL        path to the annotations of the target genome(s) in the NCBI_assembly feature_table format\n  --cpu CPU               number of cpu to use (default is 1)\n  --chunk_size CHUNK_SIZE nb target genomes to be processed altogether to preserve RAM usage \n                          (e.g. if --chunk_size 100, then the program will process 100 genomes by 100 genomes instead of all together)\n  --keep_working_dir      keep the directory of intermediate files\n\nSpecific optional parameters for searching RRNPP systems\n  --min_pl  MIN_PROPEPTIDE_LEN  minimal propeptide length (default=10)\n  --max_pl  MAX_PROPEPTIDE_LEN  maximal propeptide length (default=70)\n  --min_rl  MIN_RECEPTOR_LEN    minimal receptor length (default=250)\n  --max_rl  MAX_RECEPTOR_LEN    maximal receptor length (default=500)\n  --min_igd MIN_INTERGEN_DIST   minimal intergenic distance (default=-20)\n  --max_igd MAX_INTERGEN_DIST   maximal intergenic distance (default=400)\n  --start_codons START_CODONS   comma-separated list of start codons to consider for ORF calling (default=ATG)\n  --rbs_bins RBS_BINS           comma-separated list of Prodigal's RBS bins to consider for ORF calling (default=27,24,23,22,20,19,16,15,14,13,12,6), \n                                to by bypass the filter, use --rbs_bins 27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0\n  --expand_to_homologs          use detected systems as seeds to detect putative homologous systems missed by RRNPP_detector\n  --tprpred                     run tprpred in addition to hmmsearch for TPR motifs detection\n  --predisi                     run predisi in addition to signalp for detection of propeptides with a signal sequence (warning: this increases the risk of false positives)\n\n```\n\n### Best option: Provide one or multiple genome(s) (```fna```) along with annotation(s) (```gff```) and proteome(s) (```faa```)\n\nWhen ```rrnpp_detector``` is fed with one or multiple genome(s) (concatenated in one ```fna``` file) along with their corresponding annotated proteome(s) (concatenated in one ```faa``` file) and annotations (concatenated in one ```gff``` or one NCBI_assembly ```feature_table file```), both annotated proteins and unannotated proteins (searched in the genomic vicinity of annotated receptors) will be present in the output.\n\n```bash\npython rrnpp_detector.py --fna bacillus_subtilis/genome.fna --faa bacillus_subtilis/proteome.faa --gff bacillus_subtilis/annotations.gff\n```\n\n### Alternative 1: Provide one or multiple genome(s) (```fna```)\n\nIf you provide only a nucleotide fasta file (```fna```) to rrnpp_detector, the tool won't work with already annotated proteins. Instead, the proteins will be detected with ```prodigal```. Search for unannotated small ORFs in the vicinity of receptors will be performed.\n\n```bash\npython rrnpp_detector.py --fna bacillus_subtilis/genome.fna\n```\n\n### Alternative 2: Provide all proteins from one or multiple genome(s) (```faa```) + the annotations of the genome(s) (```gff```)\n\nIf you don't provide a nucleotide fasta file but only a proteome file (```faa```) and an annotation file, ```RRNPP_detector``` will work only with annotated proteins. The downside of this option is that it won't search for unannotated small ORFs in the vicinity of receptors\n\n```bash\n# with a gff\npython rrnpp_detector.py --faa bacillus_subtilis/proteome.faa --gff bacillus_subtilis/annotations.gff\n# with a feature table\npython rrnpp_detector.py --faa bacillus_subtilis/proteome.faa --ft bacillus_subtilis/feature_table.txt\n`````` \n\n## 4. Custom search\n\nIf you wish to design a custom search with very specific parameters, you can change the parameters hard coded in ```rrnpp_detector/preprocessing.py```\n\n## 5. Practical example of analysis\n\nIn this example, we will propose to use ```RRNPP_detector``` against all genomes of Viruses available on the NCBI.\n\nFirst, we will use the ```ncbi_datasets``` command line tool to fetch the genomes from the NCBI assembly database.\nHere is a tutorial on how to install ```ncbi_datasets```: https://www.ncbi.nlm.nih.gov/datasets/docs/v2/download-and-install/\n\n```bash\nconda activate ncbi_datasets\n\nDOWNLOAD_DIRECTORY=\"/home/viral_genomes\";\nmkdir \"$DOWNLOAD_DIRECTORY\";\n\n# will donwload genomes (fna), protein sequences (faa) and annotations (gff3) of complete genomes of Viruses available on Genbank\ndatasets download genome taxon \"Viruses\" \\\n--annotated \\\n--assembly-level complete \\\n--assembly-source genbank \\\n--include genome,protein,gff3 \\\n--filename \"$DOWNLOAD_DIRECTORY\"/assemblies.zip\n\n```\n\nNext, we will extract the files from this archive and concatenate all genomes in one ```genomes.fna``` file, all protein fastas in one ```proteomes.faa``` file and all gffs in one ```annotations.gff``` file\n\n```bash\ncd \"$DOWNLOAD_DIRECTORY\"\nunzip assemblies.zip\ncd ncbi_dataset/data\nfor ASSEMBLY in GCA_*; do \n  cat \"$ASSEMBLY\"/*.fna >> ../../viral_genomes.fna; rm \"$ASSEMBLY\"/*.fna;\n  cat \"$ASSEMBLY\"/*.faa >> ../../viral_proteomes.faa; rm \"$ASSEMBLY\"/*.faa;\n  cat \"$ASSEMBLY\"/*.gff >> ../../viral_annotations.gff; rm \"$ASSEMBLY\"/*.gff;\ndone\n```\n\nAll that remains to do is to execute ```RRNPP_detector``` against this dataset. For instance:\n\n```bash\ncd ~/Programs/rrnpp_detector\npython rrnpp_detector.py --fna \"$DOWNLOAD_DIRECTORY\"/viral_genomes.fna --faa \"$DOWNLOAD_DIRECTORY\"/viral_proteomes.faa --gff \"$DOWNLOAD_DIRECTORY\"/viral_annotations.gff -o ~/rrnpp_detector_vs_viruses --cpu 20\n```\n\n## 6. Help improving RRNPP_detector\n\nIf you have suggestions to improve the tool or would like to report bugs, please post your message on the Issues section of this repository.\n\n## 7. Citation.\n\nIf you are using RRNPP_detector, please cite the following paper:\n\n* Bernard C, Li Y, Lopez P, Bapteste E: Large-scale identification of known and novel RRNPP quorum sensing systems by RRNPP_detector captures novel features of bacterial, plasmidic and viral co-evolution. Molecular Biology and Evolution. 2023. doi: 10.1093/molbev/msad062\n\nWe strongly encourage you to cite the following 3rd party dependencies:\n\n* Almagro Armenteros JJ, Tsirigos KD, S\u00f8nderby CK, Petersen TN, Winther O, Brunak S, von Heijne G, Nielsen H. 2019. Signalp 5.0 improves signal peptide predictions using deep neural networks. Nat Biotechnol. 37:420\u2013423.\n* Eddy SR. 2011. Accelerated profile HMM searches. PLoS Comput Biol. 7:e1002195.\n* Hyatt D, Chen GL, LoCascio PF, Land ML, Larimer FW, Hauser LJ. 2010. Prodigal: prokaryotic gene recognition and translation initiation site identification. BMC Bioinform. 11:119.\n* Singh U, Wurtele ES. 2021. Orfipy: a fast and flexible tool for extracting ORFs. Bioinformatics 37:3019\u20133020.\n\n\n## 8. Historic of versions\n\n### v1.1.0\n* Receptor detection:\n  - A filter of >65% coverage of the query HMM has been introduced to minimize false positives\n  - The Com_TPR (PF18710) HMM has been added to the library of HMMs for TPRs\n\n* RAM Usage:\n  - the ```--chunk_size``` option has been introduced, which enables to divide the target dataset into chunks of N genomes in an effort to preserve RAM usage. \n\n* Search options:\n  - the ```--rbs_bins``` and ```start_codons``` options have been introduced, which enable to explictily specify the RBS motifs and start codons to consider for the detection of small ORFs encoded in the vicinity of candidate receptors\n\n* Strictness levels:\n  - QSSs with an unannotated propeptide preceded by a RBS_bin <= 13 are no longer included in the 'strict' output\n\n\n### v1.0.0\n* Receptor detection: \n  - The library of HMMs for TPRs has been updated using the HMMs present in ```interproscan-5.56-89.0```\n  - 20 additional HMMs of TPRs from Pfam have been included: TPR_1 (PF00515.30), TPR_2 (PF07719.19), TPR_3 (PF07720.14), TPR_4 (PF07721.16), TPR_5 (PF12688.9), TPR_6 (PF13174.8), TPR_7 (PF13176.8), TPR_9 (PF13371.8), TPR_10 (PF13374.8), TPR_11 (PF13414.8), TPR_14 (PF13428.8), TPR_15 (PF13429.8), TPR_16 (PF13432.8), TPR_17 (PF13431.8), TPR_18 (PF13512.8), TPR_19 (PF14559.8), TPR_20 (PF14561.8), TPR_21 (PF09976.11), TPR_22 (PF18833.3) and TPR_MalT (PF17874.3)\n  - The ```tprpred``` software has been integrated and can be called in complement of ```hmmsearch``` to increase the sensitivity of the tool\n  - An HMM of the AimR family has been built and is now used to identify these receptors with more sensitivity\n\n* Propeptide detection:\n  - The main improvement of ```v1.0.0``` lies in a new algorithm to detect small peptides encoded in the vicinity of receptors, as such small peptides are typically absent from annotation files. We called this method ```SPRAT``` for *Small Peptides with RBS Annotation Tool*. This method identifies peptides preceded by a Shine-Dalgarno RBS in the flanking regions of each receptor, using the 27 hierarchical regular expressions introduced by Prodigal to detect SD-RBS motifs. This is justified by the fact that 90% of the canonical genes encoded by Firmicutes have an SD-RBS upstream. Optionally, the user can submit a list of possible start codons to consider for the detection of putative small pepite-coding ORFs (by default, only ATG is considered). \n  - The ```PrediSi``` software has been integrated an can be called in complement of ```SignalP``` to increase the sensitivity of the tool\n  - An HMM of SHP propeptides has been built and is now used to identify SHP propeptides since SHPs are not exported via the SEC-translocon and are therefore not returned by ```SignalP``` or ```PrediSi```\n\n* Iterative Search:\n  - When the target database is large, it may be relevant to use the detected systems as baits to fish homologous systems that did not pass the conservative thresholds of ```RRNPP_detector```. If this option increases the sensitivity of the tool, it also increases the risk of false positives\n\n\n### v0.0.1\n\nInitial push of ```RRNPP_detector```\n"
      },
      "source": "https://raw.githubusercontent.com/TeamAIRE/RRNPP_detector/main/readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9533802002866983,
      "result": {
        "original_header": "1. What does BASH1* do?",
        "type": "Text_excerpt",
        "value": "\n## 2. How to install ```RRNPP_detector```? \n### Create a dedicated and isolated conda environment for ```RRNPP_detector``` (recommended but not mandatory)\n```bash\nconda create --name rrnpp_detector\nconda activate rrnpp_detector\n````\n \n### Install dependencies  \nUsing conda\n```bash\nconda install -c bioconda pandas orfipy prodigal hmmer blast openjdk\n\n```\n \n\n```orfipy``` needs BASH11* to be compiled. If the installation exits with the \"sqlite3.h: No such file or directory\" error message, please try the following:\n```bash\nsudo apt-get install libsqlite3-dev\nconda install -c bioconda pandas orfipy prodigal hmmer blast openjdk\n```\n \nAlternative to installation via conda:\n```bash\nsudo apt-get install prodigal hmmer ncbi-blast+\npip3 install pandas orfipy\n```\n### Clone the repository\n```bash\ncd ~\ngit clone https://github.com/TeamAIRE/RRNPP_detector.git\ncd RRNPP_detector/\n````\n \n### Uncompress SignalP and compile PrediSi \n\n```bash\ntar -xvzf signalp-5.0b.tar.gz\n\n# optional: if you intend to use Predisi in addition to SignalP\ncd predisi\njavac JSPP.java\ncd ../\n```\n```RRNPP_detector``` comes by default with the binary of BASH16*. However, if you want to use another version of SignalP, the software is freely available for academic users at: https://services.healthtech.dtu.dk/software.php\n \n### General usage\n```RRNPP_detector``` must be run with python3 against one or multiple contig(s)/(meta)genome(s)\nBASH17*\n \n### Best option: Provide one or multiple genome(s) (```fna```) along with annotation(s) (BASH19*) and proteome(s) (BASH20*) \n### Alternative 1: Provide one or multiple genome(s) (```fna```) \nIf you provide only a nucleotide fasta file (```fna```) to rrnpp_detector, the tool won't work with already annotated proteins. Instead, the proteins will be detected with BASH24*. Search for unannotated small ORFs in the vicinity of receptors will be performed.\n```bash\npython rrnpp_detector.py --fna bacillus_subtilis/genome.fna\n```\n \n### Alternative 2: Provide all proteins from one or multiple genome(s) (```faa```) + the annotations of the genome(s) (BASH19*) \nIf you don't provide a nucleotide fasta file but only a proteome file (```faa```) and an annotation file, BASH1* will work only with annotated proteins. The downside of this option is that it won't search for unannotated small ORFs in the vicinity of receptors\n```bash\n# with a gff\npython rrnpp_detector.py --faa bacillus_subtilis/proteome.faa --gff bacillus_subtilis/annotations.gff\n# with a feature table\npython rrnpp_detector.py --faa bacillus_subtilis/proteome.faa --ft bacillus_subtilis/feature_table.txt\n```BASH27*rrnpp_detector/preprocessing.pyBASH28*ncbi_datasetsBASH29*ncbi_datasetsBASH30*bash\nconda activate ncbi_datasets\n \nDOWNLOAD_DIRECTORY=\"/home/viral_genomes\";\nmkdir \"$DOWNLOAD_DIRECTORY\"; \n\n### v0.0.1 \n"
      },
      "source": "https://raw.githubusercontent.com/TeamAIRE/RRNPP_detector/main/readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999997686373076,
      "result": {
        "original_header": "will donwload genomes (fna), protein sequences (faa) and annotations (gff3) of complete genomes of Viruses available on Genbank",
        "type": "Text_excerpt",
        "value": "datasets download genome taxon \"Viruses\" \\\n--annotated \\\n--assembly-level complete \\\n--assembly-source genbank \\\n--include genome,protein,gff3 \\\n--filename \"$DOWNLOAD_DIRECTORY\"/assemblies.zip\n```\n\nNext, we will extract the files from this archive and concatenate all genomes in one ```genomes.fnaBASH2*proteomes.faaBASH3*annotations.gffBASH4*bash\ncd \"$DOWNLOAD_DIRECTORY\"\nunzip assemblies.zip\ncd ncbi_dataset/data\nfor ASSEMBLY in GCA_*; do \n  cat \"$ASSEMBLY\"/*.fna >> ../../viral_genomes.fna; rm \"$ASSEMBLY\"/*.fna;\n  cat \"$ASSEMBLY\"/*.faa >> ../../viral_proteomes.faa; rm \"$ASSEMBLY\"/*.faa;\n  cat \"$ASSEMBLY\"/*.gff >> ../../viral_annotations.gff; rm \"$ASSEMBLY\"/*.gff;\ndone\nBASH5*RRNPP_detectorBASH6*bash\ncd ~/Programs/rrnpp_detector\npython rrnpp_detector.py --fna \"$DOWNLOAD_DIRECTORY\"/viral_genomes.fna --faa \"$DOWNLOAD_DIRECTORY\"/viral_proteomes.faa --gff \"$DOWNLOAD_DIRECTORY\"/viral_annotations.gff -o ~/rrnpp_detector_vs_viruses --cpu 20\nBASH7*--chunk_sizeBASH8*--rbs_binsBASH9*start_codonsBASH10*interproscan-5.56-89.0BASH11*tprpredBASH12*hmmsearchBASH13*v1.0.0BASH14*SPRATBASH15*PrediSiBASH16*SignalPBASH17*SignalPBASH18*PrediSiBASH19*RRNPP_detector```. If this option increases the sensitivity of the tool, it also increases the risk of false positives\n \n"
      },
      "source": "https://raw.githubusercontent.com/TeamAIRE/RRNPP_detector/main/readme.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/TeamAIRE/RRNPP_detector/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bioinformatics, genomics, quorum-sensing, rrnpp"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "GNU General Public License v2.0",
        "spdx_id": "GPL-2.0",
        "type": "License",
        "url": "https://api.github.com/licenses/gpl-2.0",
        "value": "https://api.github.com/licenses/gpl-2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 2, June 1991\n\n Copyright (C) 1989, 1991 Free Software Foundation, Inc.,\n 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  This\nGeneral Public License applies to most of the Free Software\nFoundation's software and to any other program whose authors commit to\nusing it.  (Some other Free Software Foundation software is covered by\nthe GNU Lesser General Public License instead.)  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must show them these terms so they know their\nrights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License applies to any program or other work which contains\na notice placed by the copyright holder saying it may be distributed\nunder the terms of this General Public License.  The \"Program\", below,\nrefers to any such program or work, and a \"work based on the Program\"\nmeans either the Program or any derivative work under copyright law:\nthat is to say, a work containing the Program or a portion of it,\neither verbatim or with modifications and/or translated into another\nlanguage.  (Hereinafter, translation is included without limitation in\nthe term \"modification\".)  Each licensee is addressed as \"you\".\n\nActivities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning the Program is not restricted, and the output from the Program\nis covered only if its contents constitute a work based on the\nProgram (independent of having been made by running the Program).\nWhether that is true depends on what the Program does.\n\n  1. You may copy and distribute verbatim copies of the Program's\nsource code as you receive it, in any medium, provided that you\nconspicuously and appropriately publish on each copy an appropriate\ncopyright notice and disclaimer of warranty; keep intact all the\nnotices that refer to this License and to the absence of any warranty;\nand give any other recipients of the Program a copy of this License\nalong with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) You must cause the modified files to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n    when run, you must cause it, when started running for such\n    interactive use in the most ordinary way, to print or display an\n    announcement including an appropriate copyright notice and a\n    notice that there is no warranty (or else, saying that you provide\n    a warranty) and that users may redistribute the program under\n    these conditions, and telling the user how to view a copy of this\n    License.  (Exception: if the Program itself is interactive but\n    does not normally print such an announcement, your work based on\n    the Program is not required to print an announcement.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Program,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Program, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\nwith the Program (or with a work based on the Program) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may copy and distribute the Program (or a work based on it,\nunder Section 2) in object code or executable form under the terms of\nSections 1 and 2 above provided that you also do one of the following:\n\n    a) Accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n    distributed under the terms of Sections 1 and 2 above on a medium\n    customarily used for software interchange; or,\n\n    c) Accompany it with the information you received as to the offer\n    to distribute corresponding source code.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form with such\n    an offer, in accord with Subsection b above.)\n\nThe source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\noperating system on which the executable runs, unless that component\nitself accompanies the executable.\n\nIf distribution of executable or object code is made by offering\naccess to copy from a designated place, then offering equivalent\naccess to copy the source code from the same place counts as\ndistribution of the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  4. You may not copy, modify, sublicense, or distribute the Program\nexcept as expressly provided under this License.  Any attempt\notherwise to copy, modify, sublicense or distribute the Program is\nvoid, and will automatically terminate your rights under this License.\nHowever, parties who have received copies, or rights, from you under\nthis License will not have their licenses terminated so long as such\nparties remain in full compliance.\n\n  5. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Program or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Program (or any work based on the\nProgram), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\n  7. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Program.\n\nIf any portion of this section is held invalid or unenforceable under\nany particular circumstance, the balance of the section is intended to\napply and the section as a whole is intended to apply in other\ncircumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system, which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  8. If the distribution and/or use of the Program is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Program under this License\nmay add an explicit geographical distribution limitation excluding\nthose countries, so that distribution is permitted only in or among\ncountries not thus excluded.  In such case, this License incorporates\nthe limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of this License which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthis License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n                            NO WARRANTY\n\n  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License along\n    with this program; if not, write to the Free Software Foundation, Inc.,\n    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) year name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, the commands you use may\nbe called something other than `show w' and `show c'; they could even be\nmouse-clicks or menu items--whatever suits your program.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThis General Public License does not permit incorporating your program into\nproprietary programs.  If your program is a subroutine library, you may\nconsider it more useful to permit linking proprietary applications with the\nlibrary.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.\n"
      },
      "source": "https://raw.githubusercontent.com/TeamAIRE/RRNPP_detector/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "RRNPP_detector"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "TeamAIRE"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 124399,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 40695,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 36253,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Pascal",
        "size": 6193,
        "type": "Programming_language",
        "value": "Pascal"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Java",
        "size": 1827,
        "type": "Programming_language",
        "value": "Java"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/TeamAIRE/RRNPP_detector/main/readme.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "TeamAIRE",
          "type": "User"
        },
        "date_created": "2022-12-25T14:34:24Z",
        "date_published": "2022-12-26T14:54:10Z",
        "description": "```v1.0.0``` introduces the following major upgrades:\r\n\r\n* Receptor detection: \r\n  - The library of HMMs for TPRs has been updated using the HMMs present in ```interproscan-5.56-89.0```\r\n  - 20 additional HMMs of TPRs from Pfam have been included: TPR_1 (PF00515.30), TPR_2 (PF07719.19), TPR_3 (PF07720.14), TPR_4 (PF07721.16), TPR_5 (PF12688.9), TPR_6 (PF13174.8), TPR_7 (PF13176.8), TPR_9 (PF13371.8), TPR_10 (PF13374.8), TPR_11 (PF13414.8), TPR_14 (PF13428.8), TPR_15 (PF13429.8), TPR_16 (PF13432.8), TPR_17 (PF13431.8), TPR_18 (PF13512.8), TPR_19 (PF14559.8), TPR_20 (PF14561.8), TPR_21 (PF09976.11), TPR_22 (PF18833.3) and TPR_MalT (PF17874.3)\r\n  - The ```tprpred``` software has been integrated and can be called in complement of ```hmmsearch``` to increase the sensitivity of the tool\r\n  - An HMM of the AimR family has been built and is now used to identify these receptors with more sensitivity\r\n\r\n* Propeptide detection:\r\n  - The main improvement of ```v1.0.0``` lies in a new algorithm to detect small peptides encoded in the vicinity of receptors, as such small peptides are typically absent from annotation files. We called this method ```SPRAT``` for *Small Peptides with RBS Annotation Tool*. This method identifies peptides preceded by a Shine-Dalgarno RBS in the flanking regions of each receptor, using the 27 hierarchical regular expressions introduced by Prodigal to detect SD-RBS motifs. This is justified by the fact that 90% of the canonical genes encoded by Firmicutes have an SD-RBS upstream. Optionally, the user can submit a list of possible start codons to consider for the detection of putative small pepite-coding ORFs (by default, only ATG is considered). \r\n  - The ```PrediSi``` software has been integrated an can be called in complement of ```SignalP``` to increase the sensitivity of the tool\r\n  - An HMM of SHP propeptides has been built and is now used to identify SHP propeptides since SHPs are not exported via the SEC-translocon and are therefore not returned by ```SignalP``` or ```PrediSi```\r\n\r\n* Iterative Search:\r\n  - When the target database is large, it may be relevant to use the detected systems as baits to fish homologous systems that did not pass the conservative thresholds of ```RRNPP_detector```. If this option increases the sensitivity of the tool, it also increases the risk of false positives",
        "html_url": "https://github.com/TeamAIRE/RRNPP_detector/releases/tag/v1.0.0",
        "name": "v1.0.0",
        "release_id": 87247667,
        "tag": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/TeamAIRE/RRNPP_detector/tarball/v1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/TeamAIRE/RRNPP_detector/releases/87247667",
        "value": "https://api.github.com/repos/TeamAIRE/RRNPP_detector/releases/87247667",
        "zipball_url": "https://api.github.com/repos/TeamAIRE/RRNPP_detector/zipball/v1.0.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "TeamAIRE",
          "type": "User"
        },
        "date_created": "2021-08-18T21:02:03Z",
        "date_published": "2022-09-02T08:02:33Z",
        "description": "This is the initial release of RRNPP_detector.\r\n\r\n",
        "html_url": "https://github.com/TeamAIRE/RRNPP_detector/releases/tag/v0.0.1",
        "release_id": 76121425,
        "tag": "v0.0.1",
        "tarball_url": "https://api.github.com/repos/TeamAIRE/RRNPP_detector/tarball/v0.0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/TeamAIRE/RRNPP_detector/releases/76121425",
        "value": "https://api.github.com/repos/TeamAIRE/RRNPP_detector/releases/76121425",
        "zipball_url": "https://api.github.com/repos/TeamAIRE/RRNPP_detector/zipball/v0.0.1"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Install dependencies",
        "parent_header": [
          "RRNPP_detector",
          "2. How to install BASH1*?"
        ],
        "type": "Text_excerpt",
        "value": "Using conda\n\n```bash\nconda install -c bioconda pandas orfipy prodigal hmmer blast openjdk\n\n```\n\n\n```orfipy``` needs ```sqlite3``` to be compiled. If the installation exits with the \"sqlite3.h: No such file or directory\" error message, please try the following:\n\n```bash\nsudo apt-get install libsqlite3-dev\nconda install -c bioconda pandas orfipy prodigal hmmer blast openjdk\n```\n\nAlternative to installation via conda:\n\n```bash\nsudo apt-get install prodigal hmmer ncbi-blast+\npip3 install pandas orfipy\n```\n"
      },
      "source": "https://raw.githubusercontent.com/TeamAIRE/RRNPP_detector/main/readme.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 04:17:23",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 7
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "General usage",
        "parent_header": [
          "RRNPP_detector",
          "3. How to use BASH1*?"
        ],
        "type": "Text_excerpt",
        "value": "```RRNPP_detector``` must be run with python3 against one or multiple contig(s)/(meta)genome(s)\n```\nusage: rrnpp_detector.py [-h] [--version] [-o OUT_DIR] [--fna FNA] [--faa FAA] [--gff GFF] [--ft FEATURE_TBL] [--cpu CPU] [--preserve_ram] [--keep_working_dir] [--min_pl MIN_PROPEPTIDE_LEN]\n                         [--max_pl MAX_PROPEPTIDE_LEN] [--min_rl MIN_RECEPTOR_LEN] [--max_rl MAX_RECEPTOR_LEN] [--min_igd MIN_INTERGEN_DIST] [--max_igd MAX_INTERGEN_DIST] [--expand_to_homologs]\n                         [--tprpred] [--predisi]\n\nRRNPP_detector: a tool to detect RRNPP-Type quorum sensing systems in chromosomes, plasmids and bacteriophages of Firmicutes\n\nMain arguments\n -h, --help               show this help message and exit\n  --version               print version number and exit.\n  -o OUT_DIR              path to output directory (default is current directory)\n  --fna FNA               path to the fasta of the target genome(s) (will run Prodigal to detect CDSs if faa not provided)\n  --faa FAA               path to fasta of the protein sequences of the target genome(s) (requires additional --gff or --ft option)\n  --gff GFF               path to the annotations of the target genome(s) in gff\n  --ft FEATURE_TBL        path to the annotations of the target genome(s) in the NCBI_assembly feature_table format\n  --cpu CPU               number of cpu to use (default is 1)\n  --chunk_size CHUNK_SIZE nb target genomes to be processed altogether to preserve RAM usage \n                          (e.g. if --chunk_size 100, then the program will process 100 genomes by 100 genomes instead of all together)\n  --keep_working_dir      keep the directory of intermediate files\n\nSpecific optional parameters for searching RRNPP systems\n  --min_pl  MIN_PROPEPTIDE_LEN  minimal propeptide length (default=10)\n  --max_pl  MAX_PROPEPTIDE_LEN  maximal propeptide length (default=70)\n  --min_rl  MIN_RECEPTOR_LEN    minimal receptor length (default=250)\n  --max_rl  MAX_RECEPTOR_LEN    maximal receptor length (default=500)\n  --min_igd MIN_INTERGEN_DIST   minimal intergenic distance (default=-20)\n  --max_igd MAX_INTERGEN_DIST   maximal intergenic distance (default=400)\n  --start_codons START_CODONS   comma-separated list of start codons to consider for ORF calling (default=ATG)\n  --rbs_bins RBS_BINS           comma-separated list of Prodigal's RBS bins to consider for ORF calling (default=27,24,23,22,20,19,16,15,14,13,12,6), \n                                to by bypass the filter, use --rbs_bins 27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0\n  --expand_to_homologs          use detected systems as seeds to detect putative homologous systems missed by RRNPP_detector\n  --tprpred                     run tprpred in addition to hmmsearch for TPR motifs detection\n  --predisi                     run predisi in addition to signalp for detection of propeptides with a signal sequence (warning: this increases the risk of false positives)\n\n```\n\n### Best option: Provide one or multiple genome(s) (```fna```) along with annotation(s) (```gff```) and proteome(s) (```faa```)\n\nWhen ```rrnpp_detector``` is fed with one or multiple genome(s) (concatenated in one ```fna``` file) along with their corresponding annotated proteome(s) (concatenated in one ```faa``` file) and annotations (concatenated in one ```gff``` or one NCBI_assembly ```feature_table file```), both annotated proteins and unannotated proteins (searched in the genomic vicinity of annotated receptors) will be present in the output.\n\n```bash\npython rrnpp_detector.py --fna bacillus_subtilis/genome.fna --faa bacillus_subtilis/proteome.faa --gff bacillus_subtilis/annotations.gff\n```\n\n### Alternative 1: Provide one or multiple genome(s) (```fna```)\n\nIf you provide only a nucleotide fasta file (```fna```) to rrnpp_detector, the tool won't work with already annotated proteins. Instead, the proteins will be detected with ```prodigal```. Search for unannotated small ORFs in the vicinity of receptors will be performed.\n\n```bash\npython rrnpp_detector.py --fna bacillus_subtilis/genome.fna\n```\n\n### Alternative 2: Provide all proteins from one or multiple genome(s) (```faa```) + the annotations of the genome(s) (```gff```)\n\nIf you don't provide a nucleotide fasta file but only a proteome file (```faa```) and an annotation file, ```RRNPP_detector``` will work only with annotated proteins. The downside of this option is that it won't search for unannotated small ORFs in the vicinity of receptors\n\n```bash\n# with a gff\npython rrnpp_detector.py --faa bacillus_subtilis/proteome.faa --gff bacillus_subtilis/annotations.gff\n# with a feature table\npython rrnpp_detector.py --faa bacillus_subtilis/proteome.faa --ft bacillus_subtilis/feature_table.txt\n`````` \n\n## 4. Custom search\n\nIf you wish to design a custom search with very specific parameters, you can change the parameters hard coded in ```rrnpp_detector/preprocessing.py```\n\n## 5. Practical example of analysis\n\nIn this example, we will propose to use ```RRNPP_detector``` against all genomes of Viruses available on the NCBI.\n\nFirst, we will use the ```ncbi_datasets``` command line tool to fetch the genomes from the NCBI assembly database.\nHere is a tutorial on how to install ```ncbi_datasets```: https://www.ncbi.nlm.nih.gov/datasets/docs/v2/download-and-install/\n\n```bash\nconda activate ncbi_datasets\n\nDOWNLOAD_DIRECTORY=\"/home/viral_genomes\";\nmkdir \"$DOWNLOAD_DIRECTORY\";\n\n# will donwload genomes (fna), protein sequences (faa) and annotations (gff3) of complete genomes of Viruses available on Genbank\ndatasets download genome taxon \"Viruses\" \\\n--annotated \\\n--assembly-level complete \\\n--assembly-source genbank \\\n--include genome,protein,gff3 \\\n--filename \"$DOWNLOAD_DIRECTORY\"/assemblies.zip\n\n```\n\nNext, we will extract the files from this archive and concatenate all genomes in one ```genomes.fna``` file, all protein fastas in one ```proteomes.faa``` file and all gffs in one ```annotations.gff``` file\n\n```bash\ncd \"$DOWNLOAD_DIRECTORY\"\nunzip assemblies.zip\ncd ncbi_dataset/data\nfor ASSEMBLY in GCA_*; do \n  cat \"$ASSEMBLY\"/*.fna >> ../../viral_genomes.fna; rm \"$ASSEMBLY\"/*.fna;\n  cat \"$ASSEMBLY\"/*.faa >> ../../viral_proteomes.faa; rm \"$ASSEMBLY\"/*.faa;\n  cat \"$ASSEMBLY\"/*.gff >> ../../viral_annotations.gff; rm \"$ASSEMBLY\"/*.gff;\ndone\n```\n\nAll that remains to do is to execute ```RRNPP_detector``` against this dataset. For instance:\n\n```bash\ncd ~/Programs/rrnpp_detector\npython rrnpp_detector.py --fna \"$DOWNLOAD_DIRECTORY\"/viral_genomes.fna --faa \"$DOWNLOAD_DIRECTORY\"/viral_proteomes.faa --gff \"$DOWNLOAD_DIRECTORY\"/viral_annotations.gff -o ~/rrnpp_detector_vs_viruses --cpu 20\n```\n\n## 6. Help improving RRNPP_detector\n\nIf you have suggestions to improve the tool or would like to report bugs, please post your message on the Issues section of this repository.\n\n## 7. Citation.\n\nIf you are using RRNPP_detector, please cite the following paper:\n\n* Bernard C, Li Y, Lopez P, Bapteste E: Large-scale identification of known and novel RRNPP quorum sensing systems by RRNPP_detector captures novel features of bacterial, plasmidic and viral co-evolution. Molecular Biology and Evolution. 2023. doi: 10.1093/molbev/msad062\n\nWe strongly encourage you to cite the following 3rd party dependencies:\n\n* Almagro Armenteros JJ, Tsirigos KD, S\u00f8nderby CK, Petersen TN, Winther O, Brunak S, von Heijne G, Nielsen H. 2019. Signalp 5.0 improves signal peptide predictions using deep neural networks. Nat Biotechnol. 37:420\u2013423.\n* Eddy SR. 2011. Accelerated profile HMM searches. PLoS Comput Biol. 7:e1002195.\n* Hyatt D, Chen GL, LoCascio PF, Land ML, Larimer FW, Hauser LJ. 2010. Prodigal: prokaryotic gene recognition and translation initiation site identification. BMC Bioinform. 11:119.\n* Singh U, Wurtele ES. 2021. Orfipy: a fast and flexible tool for extracting ORFs. Bioinformatics 37:3019\u20133020.\n\n\n## 8. Historic of versions\n\n### v1.1.0\n* Receptor detection:\n  - A filter of >65% coverage of the query HMM has been introduced to minimize false positives\n  - The Com_TPR (PF18710) HMM has been added to the library of HMMs for TPRs\n\n* RAM Usage:\n  - the ```--chunk_size``` option has been introduced, which enables to divide the target dataset into chunks of N genomes in an effort to preserve RAM usage. \n\n* Search options:\n  - the ```--rbs_bins``` and ```start_codons``` options have been introduced, which enable to explictily specify the RBS motifs and start codons to consider for the detection of small ORFs encoded in the vicinity of candidate receptors\n\n* Strictness levels:\n  - QSSs with an unannotated propeptide preceded by a RBS_bin <= 13 are no longer included in the 'strict' output\n\n\n### v1.0.0\n* Receptor detection: \n  - The library of HMMs for TPRs has been updated using the HMMs present in ```interproscan-5.56-89.0```\n  - 20 additional HMMs of TPRs from Pfam have been included: TPR_1 (PF00515.30), TPR_2 (PF07719.19), TPR_3 (PF07720.14), TPR_4 (PF07721.16), TPR_5 (PF12688.9), TPR_6 (PF13174.8), TPR_7 (PF13176.8), TPR_9 (PF13371.8), TPR_10 (PF13374.8), TPR_11 (PF13414.8), TPR_14 (PF13428.8), TPR_15 (PF13429.8), TPR_16 (PF13432.8), TPR_17 (PF13431.8), TPR_18 (PF13512.8), TPR_19 (PF14559.8), TPR_20 (PF14561.8), TPR_21 (PF09976.11), TPR_22 (PF18833.3) and TPR_MalT (PF17874.3)\n  - The ```tprpred``` software has been integrated and can be called in complement of ```hmmsearch``` to increase the sensitivity of the tool\n  - An HMM of the AimR family has been built and is now used to identify these receptors with more sensitivity\n\n* Propeptide detection:\n  - The main improvement of ```v1.0.0``` lies in a new algorithm to detect small peptides encoded in the vicinity of receptors, as such small peptides are typically absent from annotation files. We called this method ```SPRAT``` for *Small Peptides with RBS Annotation Tool*. This method identifies peptides preceded by a Shine-Dalgarno RBS in the flanking regions of each receptor, using the 27 hierarchical regular expressions introduced by Prodigal to detect SD-RBS motifs. This is justified by the fact that 90% of the canonical genes encoded by Firmicutes have an SD-RBS upstream. Optionally, the user can submit a list of possible start codons to consider for the detection of putative small pepite-coding ORFs (by default, only ATG is considered). \n  - The ```PrediSi``` software has been integrated an can be called in complement of ```SignalP``` to increase the sensitivity of the tool\n  - An HMM of SHP propeptides has been built and is now used to identify SHP propeptides since SHPs are not exported via the SEC-translocon and are therefore not returned by ```SignalP``` or ```PrediSi```\n\n* Iterative Search:\n  - When the target database is large, it may be relevant to use the detected systems as baits to fish homologous systems that did not pass the conservative thresholds of ```RRNPP_detector```. If this option increases the sensitivity of the tool, it also increases the risk of false positives\n\n\n### v0.0.1\n\nInitial push of ```RRNPP_detector```\n"
      },
      "source": "https://raw.githubusercontent.com/TeamAIRE/RRNPP_detector/main/readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Best option: Provide one or multiple genome(s) (BASH18*) along with annotation(s) (BASH19*) and proteome(s) (BASH20*)",
        "parent_header": [
          "RRNPP_detector",
          "3. How to use BASH1*?"
        ],
        "type": "Text_excerpt",
        "value": "# RRNPP_detector\n\n## 1. What does ```RRNPP_detector``` do?\n\n```RRNPP_detector``` aims at identifying known and novel RRNPP-type quorum sensing systems in chromosomes, mobile genetic elements and bacteriophages of Firmicutes.\n\n```RRNPP_detector``` defines candidate RRNPP-type quorum sensing systems as tandems of adjacent ORFs encoding a candidate receptor (250-500aa protein matching HMMs of peptide-binding tetraticopeptide repeats (TPRs)) and a candidate pro-peptide (10-100aa protein predicted to be excreted via the SEC-translocon or matching the amino-acid profile of SHPs) \n\n```RRNPP_detector``` outputs candidate RRNPP-type systems with 3 different detection strictness:  \n* ```strict```: All receptor-propeptide pairs oriented in a divergent or co-directional context with the propeptide downstream from the receptor, preceded by a RBS_bin > 13 and matching the HMM profile of SHPs or predicted to undergo a SEC/SPI-dependent secretion according to ```SignalP```\n* ```relaxed```: All remaining receptor-propeptide pairs in which the propeptide harbors any of the SP(Sec/SPI), TAT(Tat/SPI) or LIPO(Sec/SPII) signal sequence according to ```PrediSi``` or ```SignalP```    \n* ```loose```: All remaining receptor-propeptide pairs in which the propeptide is preceded by a RBS motif with both a high score (according to ```Prodigal```) and a high usage across prokaryotes (according to Omotajo et al.)\n\n\n## 2. How to install ```RRNPP_detector```?\n\n### Create a dedicated and isolated conda environment for ```RRNPP_detector``` (recommended but not mandatory)\n\n```bash\nconda create --name rrnpp_detector\nconda activate rrnpp_detector\n````\n\n### Install dependencies \n\nUsing conda\n\n```bash\nconda install -c bioconda pandas orfipy prodigal hmmer blast openjdk\n\n```\n\n\n```orfipy``` needs ```sqlite3``` to be compiled. If the installation exits with the \"sqlite3.h: No such file or directory\" error message, please try the following:\n\n```bash\nsudo apt-get install libsqlite3-dev\nconda install -c bioconda pandas orfipy prodigal hmmer blast openjdk\n```\n\nAlternative to installation via conda:\n\n```bash\nsudo apt-get install prodigal hmmer ncbi-blast+\npip3 install pandas orfipy\n```\n\n### Clone the repository\n\n```bash\ncd ~\ngit clone https://github.com/TeamAIRE/RRNPP_detector.git\ncd RRNPP_detector/\n````\n\n### Uncompress SignalP and compile PrediSi\n\n\n```bash\ntar -xvzf signalp-5.0b.tar.gz\n\n# optional: if you intend to use Predisi in addition to SignalP\ncd predisi\njavac JSPP.java\ncd ../\n```\n\n```RRNPP_detector``` comes by default with the binary of ```SignalP version 5.0b Linux x86_64```. However, if you want to use another version of SignalP, the software is freely available for academic users at: https://services.healthtech.dtu.dk/software.php\n\n## 3. How to use ```RRNPP_detector```?\n\n### General usage\n\n```RRNPP_detector``` must be run with python3 against one or multiple contig(s)/(meta)genome(s)\n```\nusage: rrnpp_detector.py [-h] [--version] [-o OUT_DIR] [--fna FNA] [--faa FAA] [--gff GFF] [--ft FEATURE_TBL] [--cpu CPU] [--preserve_ram] [--keep_working_dir] [--min_pl MIN_PROPEPTIDE_LEN]\n                         [--max_pl MAX_PROPEPTIDE_LEN] [--min_rl MIN_RECEPTOR_LEN] [--max_rl MAX_RECEPTOR_LEN] [--min_igd MIN_INTERGEN_DIST] [--max_igd MAX_INTERGEN_DIST] [--expand_to_homologs]\n                         [--tprpred] [--predisi]\n\nRRNPP_detector: a tool to detect RRNPP-Type quorum sensing systems in chromosomes, plasmids and bacteriophages of Firmicutes\n\nMain arguments\n -h, --help               show this help message and exit\n  --version               print version number and exit.\n  -o OUT_DIR              path to output directory (default is current directory)\n  --fna FNA               path to the fasta of the target genome(s) (will run Prodigal to detect CDSs if faa not provided)\n  --faa FAA               path to fasta of the protein sequences of the target genome(s) (requires additional --gff or --ft option)\n  --gff GFF               path to the annotations of the target genome(s) in gff\n  --ft FEATURE_TBL        path to the annotations of the target genome(s) in the NCBI_assembly feature_table format\n  --cpu CPU               number of cpu to use (default is 1)\n  --chunk_size CHUNK_SIZE nb target genomes to be processed altogether to preserve RAM usage \n                          (e.g. if --chunk_size 100, then the program will process 100 genomes by 100 genomes instead of all together)\n  --keep_working_dir      keep the directory of intermediate files\n\nSpecific optional parameters for searching RRNPP systems\n  --min_pl  MIN_PROPEPTIDE_LEN  minimal propeptide length (default=10)\n  --max_pl  MAX_PROPEPTIDE_LEN  maximal propeptide length (default=70)\n  --min_rl  MIN_RECEPTOR_LEN    minimal receptor length (default=250)\n  --max_rl  MAX_RECEPTOR_LEN    maximal receptor length (default=500)\n  --min_igd MIN_INTERGEN_DIST   minimal intergenic distance (default=-20)\n  --max_igd MAX_INTERGEN_DIST   maximal intergenic distance (default=400)\n  --start_codons START_CODONS   comma-separated list of start codons to consider for ORF calling (default=ATG)\n  --rbs_bins RBS_BINS           comma-separated list of Prodigal's RBS bins to consider for ORF calling (default=27,24,23,22,20,19,16,15,14,13,12,6), \n                                to by bypass the filter, use --rbs_bins 27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0\n  --expand_to_homologs          use detected systems as seeds to detect putative homologous systems missed by RRNPP_detector\n  --tprpred                     run tprpred in addition to hmmsearch for TPR motifs detection\n  --predisi                     run predisi in addition to signalp for detection of propeptides with a signal sequence (warning: this increases the risk of false positives)\n\n```\n\n### Best option: Provide one or multiple genome(s) (```fna```) along with annotation(s) (```gff```) and proteome(s) (```faa```)\n\nWhen ```rrnpp_detector``` is fed with one or multiple genome(s) (concatenated in one ```fna``` file) along with their corresponding annotated proteome(s) (concatenated in one ```faa``` file) and annotations (concatenated in one ```gff``` or one NCBI_assembly ```feature_table file```), both annotated proteins and unannotated proteins (searched in the genomic vicinity of annotated receptors) will be present in the output.\n\n```bash\npython rrnpp_detector.py --fna bacillus_subtilis/genome.fna --faa bacillus_subtilis/proteome.faa --gff bacillus_subtilis/annotations.gff\n```\n\n### Alternative 1: Provide one or multiple genome(s) (```fna```)\n\nIf you provide only a nucleotide fasta file (```fna```) to rrnpp_detector, the tool won't work with already annotated proteins. Instead, the proteins will be detected with ```prodigal```. Search for unannotated small ORFs in the vicinity of receptors will be performed.\n\n```bash\npython rrnpp_detector.py --fna bacillus_subtilis/genome.fna\n```\n\n### Alternative 2: Provide all proteins from one or multiple genome(s) (```faa```) + the annotations of the genome(s) (```gff```)\n\nIf you don't provide a nucleotide fasta file but only a proteome file (```faa```) and an annotation file, ```RRNPP_detector``` will work only with annotated proteins. The downside of this option is that it won't search for unannotated small ORFs in the vicinity of receptors\n\n```bash\n# with a gff\npython rrnpp_detector.py --faa bacillus_subtilis/proteome.faa --gff bacillus_subtilis/annotations.gff\n# with a feature table\npython rrnpp_detector.py --faa bacillus_subtilis/proteome.faa --ft bacillus_subtilis/feature_table.txt\n`````` \n\n## 4. Custom search\n\nIf you wish to design a custom search with very specific parameters, you can change the parameters hard coded in ```rrnpp_detector/preprocessing.py```\n\n## 5. Practical example of analysis\n\nIn this example, we will propose to use ```RRNPP_detector``` against all genomes of Viruses available on the NCBI.\n\nFirst, we will use the ```ncbi_datasets``` command line tool to fetch the genomes from the NCBI assembly database.\nHere is a tutorial on how to install ```ncbi_datasets```: https://www.ncbi.nlm.nih.gov/datasets/docs/v2/download-and-install/\n\n```bash\nconda activate ncbi_datasets\n\nDOWNLOAD_DIRECTORY=\"/home/viral_genomes\";\nmkdir \"$DOWNLOAD_DIRECTORY\";\n\n# will donwload genomes (fna), protein sequences (faa) and annotations (gff3) of complete genomes of Viruses available on Genbank\ndatasets download genome taxon \"Viruses\" \\\n--annotated \\\n--assembly-level complete \\\n--assembly-source genbank \\\n--include genome,protein,gff3 \\\n--filename \"$DOWNLOAD_DIRECTORY\"/assemblies.zip\n\n```\n\nNext, we will extract the files from this archive and concatenate all genomes in one ```genomes.fna``` file, all protein fastas in one ```proteomes.faa``` file and all gffs in one ```annotations.gff``` file\n\n```bash\ncd \"$DOWNLOAD_DIRECTORY\"\nunzip assemblies.zip\ncd ncbi_dataset/data\nfor ASSEMBLY in GCA_*; do \n  cat \"$ASSEMBLY\"/*.fna >> ../../viral_genomes.fna; rm \"$ASSEMBLY\"/*.fna;\n  cat \"$ASSEMBLY\"/*.faa >> ../../viral_proteomes.faa; rm \"$ASSEMBLY\"/*.faa;\n  cat \"$ASSEMBLY\"/*.gff >> ../../viral_annotations.gff; rm \"$ASSEMBLY\"/*.gff;\ndone\n```\n\nAll that remains to do is to execute ```RRNPP_detector``` against this dataset. For instance:\n\n```bash\ncd ~/Programs/rrnpp_detector\npython rrnpp_detector.py --fna \"$DOWNLOAD_DIRECTORY\"/viral_genomes.fna --faa \"$DOWNLOAD_DIRECTORY\"/viral_proteomes.faa --gff \"$DOWNLOAD_DIRECTORY\"/viral_annotations.gff -o ~/rrnpp_detector_vs_viruses --cpu 20\n```\n\n## 6. Help improving RRNPP_detector\n\nIf you have suggestions to improve the tool or would like to report bugs, please post your message on the Issues section of this repository.\n\n## 7. Citation.\n\nIf you are using RRNPP_detector, please cite the following paper:\n\n* Bernard C, Li Y, Lopez P, Bapteste E: Large-scale identification of known and novel RRNPP quorum sensing systems by RRNPP_detector captures novel features of bacterial, plasmidic and viral co-evolution. Molecular Biology and Evolution. 2023. doi: 10.1093/molbev/msad062\n\nWe strongly encourage you to cite the following 3rd party dependencies:\n\n* Almagro Armenteros JJ, Tsirigos KD, S\u00f8nderby CK, Petersen TN, Winther O, Brunak S, von Heijne G, Nielsen H. 2019. Signalp 5.0 improves signal peptide predictions using deep neural networks. Nat Biotechnol. 37:420\u2013423.\n* Eddy SR. 2011. Accelerated profile HMM searches. PLoS Comput Biol. 7:e1002195.\n* Hyatt D, Chen GL, LoCascio PF, Land ML, Larimer FW, Hauser LJ. 2010. Prodigal: prokaryotic gene recognition and translation initiation site identification. BMC Bioinform. 11:119.\n* Singh U, Wurtele ES. 2021. Orfipy: a fast and flexible tool for extracting ORFs. Bioinformatics 37:3019\u20133020.\n\n\n## 8. Historic of versions\n\n### v1.1.0\n* Receptor detection:\n  - A filter of >65% coverage of the query HMM has been introduced to minimize false positives\n  - The Com_TPR (PF18710) HMM has been added to the library of HMMs for TPRs\n\n* RAM Usage:\n  - the ```--chunk_size``` option has been introduced, which enables to divide the target dataset into chunks of N genomes in an effort to preserve RAM usage. \n\n* Search options:\n  - the ```--rbs_bins``` and ```start_codons``` options have been introduced, which enable to explictily specify the RBS motifs and start codons to consider for the detection of small ORFs encoded in the vicinity of candidate receptors\n\n* Strictness levels:\n  - QSSs with an unannotated propeptide preceded by a RBS_bin <= 13 are no longer included in the 'strict' output\n\n\n### v1.0.0\n* Receptor detection: \n  - The library of HMMs for TPRs has been updated using the HMMs present in ```interproscan-5.56-89.0```\n  - 20 additional HMMs of TPRs from Pfam have been included: TPR_1 (PF00515.30), TPR_2 (PF07719.19), TPR_3 (PF07720.14), TPR_4 (PF07721.16), TPR_5 (PF12688.9), TPR_6 (PF13174.8), TPR_7 (PF13176.8), TPR_9 (PF13371.8), TPR_10 (PF13374.8), TPR_11 (PF13414.8), TPR_14 (PF13428.8), TPR_15 (PF13429.8), TPR_16 (PF13432.8), TPR_17 (PF13431.8), TPR_18 (PF13512.8), TPR_19 (PF14559.8), TPR_20 (PF14561.8), TPR_21 (PF09976.11), TPR_22 (PF18833.3) and TPR_MalT (PF17874.3)\n  - The ```tprpred``` software has been integrated and can be called in complement of ```hmmsearch``` to increase the sensitivity of the tool\n  - An HMM of the AimR family has been built and is now used to identify these receptors with more sensitivity\n\n* Propeptide detection:\n  - The main improvement of ```v1.0.0``` lies in a new algorithm to detect small peptides encoded in the vicinity of receptors, as such small peptides are typically absent from annotation files. We called this method ```SPRAT``` for *Small Peptides with RBS Annotation Tool*. This method identifies peptides preceded by a Shine-Dalgarno RBS in the flanking regions of each receptor, using the 27 hierarchical regular expressions introduced by Prodigal to detect SD-RBS motifs. This is justified by the fact that 90% of the canonical genes encoded by Firmicutes have an SD-RBS upstream. Optionally, the user can submit a list of possible start codons to consider for the detection of putative small pepite-coding ORFs (by default, only ATG is considered). \n  - The ```PrediSi``` software has been integrated an can be called in complement of ```SignalP``` to increase the sensitivity of the tool\n  - An HMM of SHP propeptides has been built and is now used to identify SHP propeptides since SHPs are not exported via the SEC-translocon and are therefore not returned by ```SignalP``` or ```PrediSi```\n\n* Iterative Search:\n  - When the target database is large, it may be relevant to use the detected systems as baits to fish homologous systems that did not pass the conservative thresholds of ```RRNPP_detector```. If this option increases the sensitivity of the tool, it also increases the risk of false positives\n\n\n### v0.0.1\n\nInitial push of ```RRNPP_detector```\n"
      },
      "source": "https://raw.githubusercontent.com/TeamAIRE/RRNPP_detector/main/readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Alternative 1: Provide one or multiple genome(s) (BASH18*)",
        "parent_header": [
          "RRNPP_detector",
          "3. How to use BASH1*?"
        ],
        "type": "Text_excerpt",
        "value": "# RRNPP_detector\n\n## 1. What does ```RRNPP_detector``` do?\n\n```RRNPP_detector``` aims at identifying known and novel RRNPP-type quorum sensing systems in chromosomes, mobile genetic elements and bacteriophages of Firmicutes.\n\n```RRNPP_detector``` defines candidate RRNPP-type quorum sensing systems as tandems of adjacent ORFs encoding a candidate receptor (250-500aa protein matching HMMs of peptide-binding tetraticopeptide repeats (TPRs)) and a candidate pro-peptide (10-100aa protein predicted to be excreted via the SEC-translocon or matching the amino-acid profile of SHPs) \n\n```RRNPP_detector``` outputs candidate RRNPP-type systems with 3 different detection strictness:  \n* ```strict```: All receptor-propeptide pairs oriented in a divergent or co-directional context with the propeptide downstream from the receptor, preceded by a RBS_bin > 13 and matching the HMM profile of SHPs or predicted to undergo a SEC/SPI-dependent secretion according to ```SignalP```\n* ```relaxed```: All remaining receptor-propeptide pairs in which the propeptide harbors any of the SP(Sec/SPI), TAT(Tat/SPI) or LIPO(Sec/SPII) signal sequence according to ```PrediSi``` or ```SignalP```    \n* ```loose```: All remaining receptor-propeptide pairs in which the propeptide is preceded by a RBS motif with both a high score (according to ```Prodigal```) and a high usage across prokaryotes (according to Omotajo et al.)\n\n\n## 2. How to install ```RRNPP_detector```?\n\n### Create a dedicated and isolated conda environment for ```RRNPP_detector``` (recommended but not mandatory)\n\n```bash\nconda create --name rrnpp_detector\nconda activate rrnpp_detector\n````\n\n### Install dependencies \n\nUsing conda\n\n```bash\nconda install -c bioconda pandas orfipy prodigal hmmer blast openjdk\n\n```\n\n\n```orfipy``` needs ```sqlite3``` to be compiled. If the installation exits with the \"sqlite3.h: No such file or directory\" error message, please try the following:\n\n```bash\nsudo apt-get install libsqlite3-dev\nconda install -c bioconda pandas orfipy prodigal hmmer blast openjdk\n```\n\nAlternative to installation via conda:\n\n```bash\nsudo apt-get install prodigal hmmer ncbi-blast+\npip3 install pandas orfipy\n```\n\n### Clone the repository\n\n```bash\ncd ~\ngit clone https://github.com/TeamAIRE/RRNPP_detector.git\ncd RRNPP_detector/\n````\n\n### Uncompress SignalP and compile PrediSi\n\n\n```bash\ntar -xvzf signalp-5.0b.tar.gz\n\n# optional: if you intend to use Predisi in addition to SignalP\ncd predisi\njavac JSPP.java\ncd ../\n```\n\n```RRNPP_detector``` comes by default with the binary of ```SignalP version 5.0b Linux x86_64```. However, if you want to use another version of SignalP, the software is freely available for academic users at: https://services.healthtech.dtu.dk/software.php\n\n## 3. How to use ```RRNPP_detector```?\n\n### General usage\n\n```RRNPP_detector``` must be run with python3 against one or multiple contig(s)/(meta)genome(s)\n```\nusage: rrnpp_detector.py [-h] [--version] [-o OUT_DIR] [--fna FNA] [--faa FAA] [--gff GFF] [--ft FEATURE_TBL] [--cpu CPU] [--preserve_ram] [--keep_working_dir] [--min_pl MIN_PROPEPTIDE_LEN]\n                         [--max_pl MAX_PROPEPTIDE_LEN] [--min_rl MIN_RECEPTOR_LEN] [--max_rl MAX_RECEPTOR_LEN] [--min_igd MIN_INTERGEN_DIST] [--max_igd MAX_INTERGEN_DIST] [--expand_to_homologs]\n                         [--tprpred] [--predisi]\n\nRRNPP_detector: a tool to detect RRNPP-Type quorum sensing systems in chromosomes, plasmids and bacteriophages of Firmicutes\n\nMain arguments\n -h, --help               show this help message and exit\n  --version               print version number and exit.\n  -o OUT_DIR              path to output directory (default is current directory)\n  --fna FNA               path to the fasta of the target genome(s) (will run Prodigal to detect CDSs if faa not provided)\n  --faa FAA               path to fasta of the protein sequences of the target genome(s) (requires additional --gff or --ft option)\n  --gff GFF               path to the annotations of the target genome(s) in gff\n  --ft FEATURE_TBL        path to the annotations of the target genome(s) in the NCBI_assembly feature_table format\n  --cpu CPU               number of cpu to use (default is 1)\n  --chunk_size CHUNK_SIZE nb target genomes to be processed altogether to preserve RAM usage \n                          (e.g. if --chunk_size 100, then the program will process 100 genomes by 100 genomes instead of all together)\n  --keep_working_dir      keep the directory of intermediate files\n\nSpecific optional parameters for searching RRNPP systems\n  --min_pl  MIN_PROPEPTIDE_LEN  minimal propeptide length (default=10)\n  --max_pl  MAX_PROPEPTIDE_LEN  maximal propeptide length (default=70)\n  --min_rl  MIN_RECEPTOR_LEN    minimal receptor length (default=250)\n  --max_rl  MAX_RECEPTOR_LEN    maximal receptor length (default=500)\n  --min_igd MIN_INTERGEN_DIST   minimal intergenic distance (default=-20)\n  --max_igd MAX_INTERGEN_DIST   maximal intergenic distance (default=400)\n  --start_codons START_CODONS   comma-separated list of start codons to consider for ORF calling (default=ATG)\n  --rbs_bins RBS_BINS           comma-separated list of Prodigal's RBS bins to consider for ORF calling (default=27,24,23,22,20,19,16,15,14,13,12,6), \n                                to by bypass the filter, use --rbs_bins 27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0\n  --expand_to_homologs          use detected systems as seeds to detect putative homologous systems missed by RRNPP_detector\n  --tprpred                     run tprpred in addition to hmmsearch for TPR motifs detection\n  --predisi                     run predisi in addition to signalp for detection of propeptides with a signal sequence (warning: this increases the risk of false positives)\n\n```\n\n### Best option: Provide one or multiple genome(s) (```fna```) along with annotation(s) (```gff```) and proteome(s) (```faa```)\n\nWhen ```rrnpp_detector``` is fed with one or multiple genome(s) (concatenated in one ```fna``` file) along with their corresponding annotated proteome(s) (concatenated in one ```faa``` file) and annotations (concatenated in one ```gff``` or one NCBI_assembly ```feature_table file```), both annotated proteins and unannotated proteins (searched in the genomic vicinity of annotated receptors) will be present in the output.\n\n```bash\npython rrnpp_detector.py --fna bacillus_subtilis/genome.fna --faa bacillus_subtilis/proteome.faa --gff bacillus_subtilis/annotations.gff\n```\n\n### Alternative 1: Provide one or multiple genome(s) (```fna```)\n\nIf you provide only a nucleotide fasta file (```fna```) to rrnpp_detector, the tool won't work with already annotated proteins. Instead, the proteins will be detected with ```prodigal```. Search for unannotated small ORFs in the vicinity of receptors will be performed.\n\n```bash\npython rrnpp_detector.py --fna bacillus_subtilis/genome.fna\n```\n\n### Alternative 2: Provide all proteins from one or multiple genome(s) (```faa```) + the annotations of the genome(s) (```gff```)\n\nIf you don't provide a nucleotide fasta file but only a proteome file (```faa```) and an annotation file, ```RRNPP_detector``` will work only with annotated proteins. The downside of this option is that it won't search for unannotated small ORFs in the vicinity of receptors\n\n```bash\n# with a gff\npython rrnpp_detector.py --faa bacillus_subtilis/proteome.faa --gff bacillus_subtilis/annotations.gff\n# with a feature table\npython rrnpp_detector.py --faa bacillus_subtilis/proteome.faa --ft bacillus_subtilis/feature_table.txt\n`````` \n\n## 4. Custom search\n\nIf you wish to design a custom search with very specific parameters, you can change the parameters hard coded in ```rrnpp_detector/preprocessing.py```\n\n## 5. Practical example of analysis\n\nIn this example, we will propose to use ```RRNPP_detector``` against all genomes of Viruses available on the NCBI.\n\nFirst, we will use the ```ncbi_datasets``` command line tool to fetch the genomes from the NCBI assembly database.\nHere is a tutorial on how to install ```ncbi_datasets```: https://www.ncbi.nlm.nih.gov/datasets/docs/v2/download-and-install/\n\n```bash\nconda activate ncbi_datasets\n\nDOWNLOAD_DIRECTORY=\"/home/viral_genomes\";\nmkdir \"$DOWNLOAD_DIRECTORY\";\n\n# will donwload genomes (fna), protein sequences (faa) and annotations (gff3) of complete genomes of Viruses available on Genbank\ndatasets download genome taxon \"Viruses\" \\\n--annotated \\\n--assembly-level complete \\\n--assembly-source genbank \\\n--include genome,protein,gff3 \\\n--filename \"$DOWNLOAD_DIRECTORY\"/assemblies.zip\n\n```\n\nNext, we will extract the files from this archive and concatenate all genomes in one ```genomes.fna``` file, all protein fastas in one ```proteomes.faa``` file and all gffs in one ```annotations.gff``` file\n\n```bash\ncd \"$DOWNLOAD_DIRECTORY\"\nunzip assemblies.zip\ncd ncbi_dataset/data\nfor ASSEMBLY in GCA_*; do \n  cat \"$ASSEMBLY\"/*.fna >> ../../viral_genomes.fna; rm \"$ASSEMBLY\"/*.fna;\n  cat \"$ASSEMBLY\"/*.faa >> ../../viral_proteomes.faa; rm \"$ASSEMBLY\"/*.faa;\n  cat \"$ASSEMBLY\"/*.gff >> ../../viral_annotations.gff; rm \"$ASSEMBLY\"/*.gff;\ndone\n```\n\nAll that remains to do is to execute ```RRNPP_detector``` against this dataset. For instance:\n\n```bash\ncd ~/Programs/rrnpp_detector\npython rrnpp_detector.py --fna \"$DOWNLOAD_DIRECTORY\"/viral_genomes.fna --faa \"$DOWNLOAD_DIRECTORY\"/viral_proteomes.faa --gff \"$DOWNLOAD_DIRECTORY\"/viral_annotations.gff -o ~/rrnpp_detector_vs_viruses --cpu 20\n```\n\n## 6. Help improving RRNPP_detector\n\nIf you have suggestions to improve the tool or would like to report bugs, please post your message on the Issues section of this repository.\n\n## 7. Citation.\n\nIf you are using RRNPP_detector, please cite the following paper:\n\n* Bernard C, Li Y, Lopez P, Bapteste E: Large-scale identification of known and novel RRNPP quorum sensing systems by RRNPP_detector captures novel features of bacterial, plasmidic and viral co-evolution. Molecular Biology and Evolution. 2023. doi: 10.1093/molbev/msad062\n\nWe strongly encourage you to cite the following 3rd party dependencies:\n\n* Almagro Armenteros JJ, Tsirigos KD, S\u00f8nderby CK, Petersen TN, Winther O, Brunak S, von Heijne G, Nielsen H. 2019. Signalp 5.0 improves signal peptide predictions using deep neural networks. Nat Biotechnol. 37:420\u2013423.\n* Eddy SR. 2011. Accelerated profile HMM searches. PLoS Comput Biol. 7:e1002195.\n* Hyatt D, Chen GL, LoCascio PF, Land ML, Larimer FW, Hauser LJ. 2010. Prodigal: prokaryotic gene recognition and translation initiation site identification. BMC Bioinform. 11:119.\n* Singh U, Wurtele ES. 2021. Orfipy: a fast and flexible tool for extracting ORFs. Bioinformatics 37:3019\u20133020.\n\n\n## 8. Historic of versions\n\n### v1.1.0\n* Receptor detection:\n  - A filter of >65% coverage of the query HMM has been introduced to minimize false positives\n  - The Com_TPR (PF18710) HMM has been added to the library of HMMs for TPRs\n\n* RAM Usage:\n  - the ```--chunk_size``` option has been introduced, which enables to divide the target dataset into chunks of N genomes in an effort to preserve RAM usage. \n\n* Search options:\n  - the ```--rbs_bins``` and ```start_codons``` options have been introduced, which enable to explictily specify the RBS motifs and start codons to consider for the detection of small ORFs encoded in the vicinity of candidate receptors\n\n* Strictness levels:\n  - QSSs with an unannotated propeptide preceded by a RBS_bin <= 13 are no longer included in the 'strict' output\n\n\n### v1.0.0\n* Receptor detection: \n  - The library of HMMs for TPRs has been updated using the HMMs present in ```interproscan-5.56-89.0```\n  - 20 additional HMMs of TPRs from Pfam have been included: TPR_1 (PF00515.30), TPR_2 (PF07719.19), TPR_3 (PF07720.14), TPR_4 (PF07721.16), TPR_5 (PF12688.9), TPR_6 (PF13174.8), TPR_7 (PF13176.8), TPR_9 (PF13371.8), TPR_10 (PF13374.8), TPR_11 (PF13414.8), TPR_14 (PF13428.8), TPR_15 (PF13429.8), TPR_16 (PF13432.8), TPR_17 (PF13431.8), TPR_18 (PF13512.8), TPR_19 (PF14559.8), TPR_20 (PF14561.8), TPR_21 (PF09976.11), TPR_22 (PF18833.3) and TPR_MalT (PF17874.3)\n  - The ```tprpred``` software has been integrated and can be called in complement of ```hmmsearch``` to increase the sensitivity of the tool\n  - An HMM of the AimR family has been built and is now used to identify these receptors with more sensitivity\n\n* Propeptide detection:\n  - The main improvement of ```v1.0.0``` lies in a new algorithm to detect small peptides encoded in the vicinity of receptors, as such small peptides are typically absent from annotation files. We called this method ```SPRAT``` for *Small Peptides with RBS Annotation Tool*. This method identifies peptides preceded by a Shine-Dalgarno RBS in the flanking regions of each receptor, using the 27 hierarchical regular expressions introduced by Prodigal to detect SD-RBS motifs. This is justified by the fact that 90% of the canonical genes encoded by Firmicutes have an SD-RBS upstream. Optionally, the user can submit a list of possible start codons to consider for the detection of putative small pepite-coding ORFs (by default, only ATG is considered). \n  - The ```PrediSi``` software has been integrated an can be called in complement of ```SignalP``` to increase the sensitivity of the tool\n  - An HMM of SHP propeptides has been built and is now used to identify SHP propeptides since SHPs are not exported via the SEC-translocon and are therefore not returned by ```SignalP``` or ```PrediSi```\n\n* Iterative Search:\n  - When the target database is large, it may be relevant to use the detected systems as baits to fish homologous systems that did not pass the conservative thresholds of ```RRNPP_detector```. If this option increases the sensitivity of the tool, it also increases the risk of false positives\n\n\n### v0.0.1\n\nInitial push of ```RRNPP_detector```\n"
      },
      "source": "https://raw.githubusercontent.com/TeamAIRE/RRNPP_detector/main/readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Alternative 2: Provide all proteins from one or multiple genome(s) (BASH20*) + the annotations of the genome(s) (BASH19*)",
        "parent_header": [
          "RRNPP_detector",
          "3. How to use BASH1*?"
        ],
        "type": "Text_excerpt",
        "value": "# RRNPP_detector\n\n## 1. What does ```RRNPP_detector``` do?\n\n```RRNPP_detector``` aims at identifying known and novel RRNPP-type quorum sensing systems in chromosomes, mobile genetic elements and bacteriophages of Firmicutes.\n\n```RRNPP_detector``` defines candidate RRNPP-type quorum sensing systems as tandems of adjacent ORFs encoding a candidate receptor (250-500aa protein matching HMMs of peptide-binding tetraticopeptide repeats (TPRs)) and a candidate pro-peptide (10-100aa protein predicted to be excreted via the SEC-translocon or matching the amino-acid profile of SHPs) \n\n```RRNPP_detector``` outputs candidate RRNPP-type systems with 3 different detection strictness:  \n* ```strict```: All receptor-propeptide pairs oriented in a divergent or co-directional context with the propeptide downstream from the receptor, preceded by a RBS_bin > 13 and matching the HMM profile of SHPs or predicted to undergo a SEC/SPI-dependent secretion according to ```SignalP```\n* ```relaxed```: All remaining receptor-propeptide pairs in which the propeptide harbors any of the SP(Sec/SPI), TAT(Tat/SPI) or LIPO(Sec/SPII) signal sequence according to ```PrediSi``` or ```SignalP```    \n* ```loose```: All remaining receptor-propeptide pairs in which the propeptide is preceded by a RBS motif with both a high score (according to ```Prodigal```) and a high usage across prokaryotes (according to Omotajo et al.)\n\n\n## 2. How to install ```RRNPP_detector```?\n\n### Create a dedicated and isolated conda environment for ```RRNPP_detector``` (recommended but not mandatory)\n\n```bash\nconda create --name rrnpp_detector\nconda activate rrnpp_detector\n````\n\n### Install dependencies \n\nUsing conda\n\n```bash\nconda install -c bioconda pandas orfipy prodigal hmmer blast openjdk\n\n```\n\n\n```orfipy``` needs ```sqlite3``` to be compiled. If the installation exits with the \"sqlite3.h: No such file or directory\" error message, please try the following:\n\n```bash\nsudo apt-get install libsqlite3-dev\nconda install -c bioconda pandas orfipy prodigal hmmer blast openjdk\n```\n\nAlternative to installation via conda:\n\n```bash\nsudo apt-get install prodigal hmmer ncbi-blast+\npip3 install pandas orfipy\n```\n\n### Clone the repository\n\n```bash\ncd ~\ngit clone https://github.com/TeamAIRE/RRNPP_detector.git\ncd RRNPP_detector/\n````\n\n### Uncompress SignalP and compile PrediSi\n\n\n```bash\ntar -xvzf signalp-5.0b.tar.gz\n\n# optional: if you intend to use Predisi in addition to SignalP\ncd predisi\njavac JSPP.java\ncd ../\n```\n\n```RRNPP_detector``` comes by default with the binary of ```SignalP version 5.0b Linux x86_64```. However, if you want to use another version of SignalP, the software is freely available for academic users at: https://services.healthtech.dtu.dk/software.php\n\n## 3. How to use ```RRNPP_detector```?\n\n### General usage\n\n```RRNPP_detector``` must be run with python3 against one or multiple contig(s)/(meta)genome(s)\n```\nusage: rrnpp_detector.py [-h] [--version] [-o OUT_DIR] [--fna FNA] [--faa FAA] [--gff GFF] [--ft FEATURE_TBL] [--cpu CPU] [--preserve_ram] [--keep_working_dir] [--min_pl MIN_PROPEPTIDE_LEN]\n                         [--max_pl MAX_PROPEPTIDE_LEN] [--min_rl MIN_RECEPTOR_LEN] [--max_rl MAX_RECEPTOR_LEN] [--min_igd MIN_INTERGEN_DIST] [--max_igd MAX_INTERGEN_DIST] [--expand_to_homologs]\n                         [--tprpred] [--predisi]\n\nRRNPP_detector: a tool to detect RRNPP-Type quorum sensing systems in chromosomes, plasmids and bacteriophages of Firmicutes\n\nMain arguments\n -h, --help               show this help message and exit\n  --version               print version number and exit.\n  -o OUT_DIR              path to output directory (default is current directory)\n  --fna FNA               path to the fasta of the target genome(s) (will run Prodigal to detect CDSs if faa not provided)\n  --faa FAA               path to fasta of the protein sequences of the target genome(s) (requires additional --gff or --ft option)\n  --gff GFF               path to the annotations of the target genome(s) in gff\n  --ft FEATURE_TBL        path to the annotations of the target genome(s) in the NCBI_assembly feature_table format\n  --cpu CPU               number of cpu to use (default is 1)\n  --chunk_size CHUNK_SIZE nb target genomes to be processed altogether to preserve RAM usage \n                          (e.g. if --chunk_size 100, then the program will process 100 genomes by 100 genomes instead of all together)\n  --keep_working_dir      keep the directory of intermediate files\n\nSpecific optional parameters for searching RRNPP systems\n  --min_pl  MIN_PROPEPTIDE_LEN  minimal propeptide length (default=10)\n  --max_pl  MAX_PROPEPTIDE_LEN  maximal propeptide length (default=70)\n  --min_rl  MIN_RECEPTOR_LEN    minimal receptor length (default=250)\n  --max_rl  MAX_RECEPTOR_LEN    maximal receptor length (default=500)\n  --min_igd MIN_INTERGEN_DIST   minimal intergenic distance (default=-20)\n  --max_igd MAX_INTERGEN_DIST   maximal intergenic distance (default=400)\n  --start_codons START_CODONS   comma-separated list of start codons to consider for ORF calling (default=ATG)\n  --rbs_bins RBS_BINS           comma-separated list of Prodigal's RBS bins to consider for ORF calling (default=27,24,23,22,20,19,16,15,14,13,12,6), \n                                to by bypass the filter, use --rbs_bins 27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0\n  --expand_to_homologs          use detected systems as seeds to detect putative homologous systems missed by RRNPP_detector\n  --tprpred                     run tprpred in addition to hmmsearch for TPR motifs detection\n  --predisi                     run predisi in addition to signalp for detection of propeptides with a signal sequence (warning: this increases the risk of false positives)\n\n```\n\n### Best option: Provide one or multiple genome(s) (```fna```) along with annotation(s) (```gff```) and proteome(s) (```faa```)\n\nWhen ```rrnpp_detector``` is fed with one or multiple genome(s) (concatenated in one ```fna``` file) along with their corresponding annotated proteome(s) (concatenated in one ```faa``` file) and annotations (concatenated in one ```gff``` or one NCBI_assembly ```feature_table file```), both annotated proteins and unannotated proteins (searched in the genomic vicinity of annotated receptors) will be present in the output.\n\n```bash\npython rrnpp_detector.py --fna bacillus_subtilis/genome.fna --faa bacillus_subtilis/proteome.faa --gff bacillus_subtilis/annotations.gff\n```\n\n### Alternative 1: Provide one or multiple genome(s) (```fna```)\n\nIf you provide only a nucleotide fasta file (```fna```) to rrnpp_detector, the tool won't work with already annotated proteins. Instead, the proteins will be detected with ```prodigal```. Search for unannotated small ORFs in the vicinity of receptors will be performed.\n\n```bash\npython rrnpp_detector.py --fna bacillus_subtilis/genome.fna\n```\n\n### Alternative 2: Provide all proteins from one or multiple genome(s) (```faa```) + the annotations of the genome(s) (```gff```)\n\nIf you don't provide a nucleotide fasta file but only a proteome file (```faa```) and an annotation file, ```RRNPP_detector``` will work only with annotated proteins. The downside of this option is that it won't search for unannotated small ORFs in the vicinity of receptors\n\n```bash\n# with a gff\npython rrnpp_detector.py --faa bacillus_subtilis/proteome.faa --gff bacillus_subtilis/annotations.gff\n# with a feature table\npython rrnpp_detector.py --faa bacillus_subtilis/proteome.faa --ft bacillus_subtilis/feature_table.txt\n`````` \n\n## 4. Custom search\n\nIf you wish to design a custom search with very specific parameters, you can change the parameters hard coded in ```rrnpp_detector/preprocessing.py```\n\n## 5. Practical example of analysis\n\nIn this example, we will propose to use ```RRNPP_detector``` against all genomes of Viruses available on the NCBI.\n\nFirst, we will use the ```ncbi_datasets``` command line tool to fetch the genomes from the NCBI assembly database.\nHere is a tutorial on how to install ```ncbi_datasets```: https://www.ncbi.nlm.nih.gov/datasets/docs/v2/download-and-install/\n\n```bash\nconda activate ncbi_datasets\n\nDOWNLOAD_DIRECTORY=\"/home/viral_genomes\";\nmkdir \"$DOWNLOAD_DIRECTORY\";\n"
      },
      "source": "https://raw.githubusercontent.com/TeamAIRE/RRNPP_detector/main/readme.md",
      "technique": "header_analysis"
    }
  ]
}