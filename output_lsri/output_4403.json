{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Reference",
        "parent_header": [
          "Poly(A)-DG"
        ],
        "type": "Text_excerpt",
        "value": "[DeepPolyA](https://github.com/stella-gao/DeepPolyA)\n\n[SANPolyA](https://github.com/yuht4/SANPolyA)\n"
      },
      "source": "https://raw.githubusercontent.com/Szym29/PolyADG/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Szym29/PolyADG"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contact:",
        "parent_header": [
          "Poly(A)-DG"
        ],
        "type": "Text_excerpt",
        "value": "[Yumin Zheng](mailto:zhengyumin529@gmail.com)\n"
      },
      "source": "https://raw.githubusercontent.com/Szym29/PolyADG/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-12-17T02:21:26Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-07-30T05:26:41Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A deep learning model with a domain generalization technique (HEX) to identify Poly(A) signals among cross-species datasets "
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.8315322423022357,
      "result": {
        "original_header": "Poly(A)-DG",
        "type": "Text_excerpt",
        "value": "![Poly(A)-DG](workflow.png)\nExample implementation of the paper: \n"
      },
      "source": "https://raw.githubusercontent.com/Szym29/PolyADG/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9657622451029977,
      "result": {
        "original_header": "Datasets :",
        "type": "Text_excerpt",
        "value": "- Omni Human Poly(A) signal dataset and BL mouse Poly(A) signal datasets come from [DeeReCT-PolyA](https://github.com/likesum/DeeReCT-PolyA). \n- Bovine dataset comes from [DeepGSR](https://academic.oup.com/bioinformatics/article/35/7/1125/5089227). \n- We established a Rat Poly(A) signal dataset which contains 11 Poly(A) signal motifs and the positive signals are built based on the [PolyA DB v3.2 dataset](https://genome.cshlp.org/content/28/10/1427) and we estalished the pesudo PolyA signal following the steps in the [supplementary](https://ndownloader.figstatic.com/files/25407799) in our paper. This dataset consists of roughly 37,000 DNA sequences and the number of true Poly(A) signal sequences is the same as pseudo-ones.  \nDetails of every steps to show how we establish the Rat Poly(A) signal dataset can be found in the supplementary of Our paper. \n"
      },
      "source": "https://raw.githubusercontent.com/Szym29/PolyADG/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Szym29/PolyADG/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Szym29/PolyADG/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Szym29/PolyADG"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Poly(A)-DG"
      },
      "source": "https://raw.githubusercontent.com/Szym29/PolyADG/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Szym29/PolyADG/master/workflow.png"
      },
      "source": "https://raw.githubusercontent.com/Szym29/PolyADG/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Szym29/PolyADG/master/signal_captured_by_CNN_filters.png"
      },
      "source": "https://raw.githubusercontent.com/Szym29/PolyADG/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Ghostscript installation",
        "parent_header": [
          "Poly(A)-DG",
          "Run"
        ],
        "type": "Text_excerpt",
        "value": "the following instructions are generated by ChatGPT-4.0 \n\nFor Windows:\n\n- Download the Ghostscript installer from the official website (https://www.ghostscript.com/download/gsdnld.html) and follow the installation instructions.\n\nFor macOS:\n\n- If you have Homebrew installed, you can run: `brew install ghostscript`\n- Alternatively, you can download the installer from the official website and follow the installation instructions.\n\nFor Linux (Debian/Ubuntu-based):\n- Run: `sudo apt-get install ghostscript`\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/Szym29/PolyADG/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.8846386098003237,
      "result": {
        "original_header": "Environments:",
        "type": "Text_excerpt",
        "value": "```\nPython 3.8-3.11\nTensorflow V2\nGhostscript\nweblogo3 \n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/Szym29/PolyADG/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Szym29/PolyADG/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PolyADG"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "Szym29"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 111938,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Szym29/PolyADG/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Run",
        "parent_header": [
          "Poly(A)-DG"
        ],
        "type": "Text_excerpt",
        "value": "Run `script.py` to run Poly(A)-DG, DeepPolyA, and SANPolyA to perform domain generalization task. (NOTE: DeepPolyA and SANPolyA might meet the environmental requirements from their original github repos. Links can be found in the Reference section. )\n\n```\npython script.py\n```\n\nRunning the `script.py` can also get of cross-species invariant signals captured by conovlution filters in Poly(A)-DG model for each input. You can also simply run `analyze.py` script to fetech the information.\n\nThen run `filters_script.py` to gnerate the plots with weblogo3 to see the patterns the filters are most likely to detect. (e.g. the cross-species invariant signals  info is store in `visualization/example/` and the output folder is `results/example`) \n\nRun\n\n```\npython filters_script.py --source_folder './visualiztion/example' --target_folder './results/example'\n```\n\n\n\n![cross-species invariant signals](signal_captured_by_CNN_filters.png)\n\nThis plot shows species invariant signals the model captured in the target species after learning from two source species. e.g. panel (A) shows that the motif patterns captured by CNN kernel of Poly(A)-DG when it generalizes to bovine and Human after training from mouse and rat data. \n"
      },
      "source": "https://raw.githubusercontent.com/Szym29/PolyADG/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "requirements",
    "contributors",
    "documentation",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 16:19:08",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ]
}