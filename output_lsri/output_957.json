{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation:",
        "parent_header": [
          "Canu"
        ],
        "type": "Text_excerpt",
        "value": " - Koren S, Walenz BP, Berlin K, Miller JR, Phillippy AM. [Canu: scalable and accurate long-read assembly via adaptive k-mer weighting and repeat separation](https://doi.org/10.1101/gr.215087.116). Genome Research. (2017). `doi:10.1101/gr.215087.116`\n - Koren S, Rhie A, Walenz BP, Dilthey AT, Bickhart DM, Kingan SB, Hiendleder S, Williams JL, Smith TPL, Phillippy AM. [De novo assembly of haplotype-resolved genomes with trio binning](http://doi.org/10.1038/nbt.4277).  Nature Biotechnology.  (2018). (If you use trio-binning)\n - Nurk S, Walenz BP, Rhiea A, Vollger MR, Logsdon GA, Grothe R, Miga KH, Eichler EE, Phillippy AM, Koren S. [HiCanu: accurate assembly of segmental duplications, satellites, and allelic variants from high-fidelity long reads](https://doi.org/10.1101/2020.03.14.992248).  biorXiv.  (2020). (If you use -pacbio-hifi)\n \n\n"
      },
      "source": "https://raw.githubusercontent.com/marbl/canu/master/README.licenses",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/marbl/canu"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2015-08-21T03:10:42Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-30T13:36:11Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A single molecule sequence assembler for genomes large and small."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9746240178080473,
      "result": {
        "original_header": "Canu",
        "type": "Text_excerpt",
        "value": "Canu is a fork of the [Celera Assembler](http://wgs-assembler.sourceforge.net/wiki/index.php?title=Main_Page), designed for high-noise single-molecule sequencing (such as the [PacBio](http://www.pacb.com) [RS II](http://www.pacb.com/products-and-services/pacbio-systems/rsii/)/[Sequel](http://www.pacb.com/products-and-services/pacbio-systems/sequel/) or [Oxford Nanopore](https://www.nanoporetech.com/) [MinION](https://nanoporetech.com/products)). \nCanu is a hierarchical assembly pipeline which runs in four steps: \n"
      },
      "source": "https://raw.githubusercontent.com/marbl/canu/master/README.licenses",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "http://canu.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/marbl/canu/master/README.licenses",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/marbl/canu/wiki"
      },
      "source": "https://raw.githubusercontent.com/marbl/canu/master/README.licenses",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/marbl/canu/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 179
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/marbl/canu/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "marbl/canu"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Canu"
      },
      "source": "https://raw.githubusercontent.com/marbl/canu/master/README.licenses",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/marbl/canu/master/src/overlapInCore/liboverlap/prefixEditDistance-matchLimit.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/marbl/canu/master/src/pipelines/layout-to-consensus.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/marbl/canu/master/src/pipelines/parallel-ovl-store-test.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/marbl/canu/master/src/pipelines/dx-trio/src/canu-job-launcher.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/marbl/canu/master/src/pipelines/dx-canu/src/canu-job-launcher.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/marbl/canu/master/documentation/scripts/make-bias-figures.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/marbl/canu/master/scripts/buildRelease-DNAnexus.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/marbl/canu/master/scripts/buildRelease.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/marbl/canu/master/scripts/build-all-compilers.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Install:",
        "parent_header": [
          "Canu"
        ],
        "type": "Text_excerpt",
        "value": "* Do NOT download the .zip source code.  It is missing files and will not compile.  This is a [known flaw](https://github.com/dear-github/dear-github/issues/214) with git itself.\n\n* The easiest way to get started is to download a binary [release](http://github.com/marbl/canu/releases).\n\n* Installing with a 'package manager' is not encouraged, but if you have no other choice:\n  * Conda: `conda install -c conda-forge -c bioconda -c defaults canu`\n  * Homebrew: `brew install brewsci/bio/canu`\n\n* Alternatively, you can use the latest unreleased version from the source\n  code.  This version has not undergone the same testing as a release and so\n  may have unknown bugs or issues generating sub-optimal assemblies. We\n  recommend the release version for most users.\n\n        git clone https://github.com/marbl/canu.git\n        cd canu/src\n        make -j <number of threads>\n\n  * FreeBSD generally requires libboost be installed from packages/ports.  It\n    will compile with either clang (>= 14) or gcc (>= 9).  It requires\n    openjdk18.\n\n        With clang, (default 14) needs libboost from ports.\n\n          gmake\n\n        With gcc (9+), can use the canu-supplied libboost or libboost from ports.\n\n          gmake CC=gcc9 CXX=g++9 BOOST=libboost    #  Canu-supplied boost\n          gmake CC=gcc9 CXX=g++9                   #  Ports/packages supplied boost\n\n  * MacOS Apple Silicon requires libboost, and either openjdk or oracle-jdk\n    to be installed from homebrew (preferred) or MacPorts.  It will compile\n    with either clang (>=14) or gcc (>= 9) but WILL NOT compile with the\n    standard Xcode compiler.\n\n          make CC=gcc-11 CXX=g++-11 BOOST=libboost  #  Ports/packages supplied boost\n          make CC=gcc-11 CXX=g++-11                 #  Ports/packages supplied boost\n\n  * MacOS Intel is probably the same as Apple Silicon, but not tested.\n\n  * Linux does not need a system installed libboost.\n\n* An *unsupported* Docker image made by Frank F\u00f6rster is at https://hub.docker.com/r/greatfireball/canu/.\n"
      },
      "source": "https://raw.githubusercontent.com/marbl/canu/master/README.licenses",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/marbl/canu/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Boost Software License - Version 1.0 - August 17th, 2003\n\nPermission is hereby granted, free of charge, to any person or organization\nobtaining a copy of the software and accompanying documentation covered by\nthis license (the \"Software\") to use, reproduce, display, distribute,\nexecute, and transmit the Software, and to prepare derivative works of the\nSoftware, and to permit third-parties to whom the Software is furnished to\ndo so, all subject to the following:\n\nThe copyright notices in the Software and this entire statement, including\nthe above license grant, this restriction and the following disclaimer,\nmust be included in all copies of the Software, in whole or in part, and\nall derivative works of the Software, unless such copies or derivative\nworks are solely in the form of machine-executable object code generated by\na source language processor.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT\nSHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE\nFOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/marbl/canu/master/src/utgcns/libboost/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "canu"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "marbl"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 4202826,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 1908330,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 630576,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 58426,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 26309,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 14379,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/marbl/canu/master/README.licenses"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/marbl/canu/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "brianwalenz",
          "type": "User"
        },
        "date_created": "2021-08-26T19:57:04Z",
        "date_published": "2021-08-27T02:00:05Z",
        "description": "These are release notes for Canu version 2.2, which was released on August 26th, 2021. Canu is specialized for assembly of single-molecule high-noise sequences. Full documentation can be found at http://canu.readthedocs.org/.\r\n\r\nThis release provides a stable, tested, and documented version of the software.  The binary distributions should work on any relatively recent version of the respective OS and are the recommended way to install Canu. The source code distribution contains everything you need to create a binary distribution for your own specific OS.\r\n\r\n## Citation\r\n* Koren S, Walenz BP, Berlin K, Miller JR, Phillippy AM. [Canu: scalable and accurate long-read assembly via adaptive k-mer weighting and repeat separation](http://doi.org/10.1101/gr.215087.116). Genome Research. (2017).\r\n* Koren S, Rhie A, Walenz BP, Dilthey AT, Bickhart DM, Kingan SB, Hiendleder S, Williams JL, Smith TPL, Phillippy AM. [De novo assembly of haplotype-resolved genomes with trio binning](http://doi.org/10.1038/nbt.4277).  Nature Biotechnology.  (2018).\r\n* Nurk S, Walenz BP, Rhiea A, Vollger MR, Logsdon GA, Grothe R, Miga KH, Eichler EE, Phillippy AM, Koren S. [HiCanu: accurate assembly of segmental duplications, satellites, and allelic variants from high-fidelity long reads](https://doi.org/10.1101/gr.263566.120).  Genome Research.  (2020).\r\n\r\n## Minimum Requirements\r\n* 8GB minimum memory; 16GB strongly suggested\r\n* GCC 4.5 (for compilation only); GCC 7 or newer _strongly_ recommended\r\n* Perl 5.12.0, or File::Path 2.08\r\n* Java SE 8\r\n* macOS 10.10 Yosemite (for macOS/Darwin binaries only)\r\n* gnuplot 5.2 (optional, for generating diagnostic graphs)\r\n\r\n## Installation\r\n\r\nUsers can download Canu as source code or as pre-compiled binaries. The binary distribution is the recommended install method, assuming it is available for your platform. The source code package needs to be compiled and installed before it can be used. \r\n\r\n**Note that the installation directory has changed compared to previous releases.**\r\n\r\n## To install from a binary distribution (recommended):\r\n```\r\ncurl -L https://github.com/marbl/canu/releases/download/v2.2/canu-2.2.<OX>-amd64.tar.xz --output canu-2.2.<OS>.tar.xz \r\ntar -xJf canu-2.2.*.tar.xz\r\n```\r\nreplacing `<OX>` with Darwin or Linux, depending on your platform. Confirm the MD5 matches the expected value.\r\n```\r\n6bd937d31bb9f5f46bf0f9839889c00f  canu-2.2.Darwin.tar.xz\r\n63219165fc45b3dbbeb73ed920a23db5  canu-2.2.Linux.tar.xz\r\n```\r\n\r\nFor recent versions of OS X (10.15+) you may an the error similar to: `\"sqStoreCreate\" cannot be opened because the developer cannot be verified`. If this happens you can remove the quarantine flags from Canu\r\n```\r\nxattr -d com.apple.quarantine ./canu-2.2/bin/*\r\nxattr -d com.apple.quarantine ./canu-2.2/lib/*\r\n```\r\nCanu will be installed at canu-2.2/bin/canu.\r\n\r\n## To install from source code (DO NOT download the Source code files provided by GitHub as these will not compile, use the canu-2.2.tar.gz instead):\r\n```\r\ncurl -L https://github.com/marbl/canu/releases/download/v2.2/canu-2.2.tar.xz --output canu-2.2.tar.xz\r\ntar -xJf canu-2.2.tar.xz\r\ncd canu-2.2/src\r\nmake -j 8\r\ncd ..\r\n```\r\n\r\nCanu will be installed at canu-2.2/build/bin/canu.\r\n\r\n## Changes\r\n\r\nCanu v2.2 **IS** (expected to be) compatible with assemblies started with Canu v2.1 (and v2.1.1) but **NOT** with any earlier version.  However, we **DO NOT** recommend mixing versions.\r\n\r\n* Tweaks to Overlap Error Adjustment to identify real differences near heterozygous alleles, to ignore differences near read ends, and others, mostly for HiFi data.  1ac9dc362b184d88dd319ea975c6f32dffaff5ce through cb94432adf36cbb77c7ec22517a50e3051abd066\r\n* Tweaks to Overlap Based Trimming to use only evidence overlaps that have different spans; that is, overlaps that do not pile-up on themselves.  e540977e1b03b3d53639eebf555543415855d78e\r\n* Read Correction:\r\n  * Decrease corErrorRate from 0.50 to 0.30 for Nanopore and from 0.30 to 0.25 for PacBio.  For Nanopore data, this results in around a 2/3 reduction in 'falconsense' time. See https://canu.readthedocs.io/en/latest/parameter-reference.html#corerrorrate for details.  741911c8ad4bbf20ef39d1e5590cc6f8c6dbac49\r\n  * Pass mhap output (*.mhap files) directly to mhapConvert (.ovb files) using a named pipe, instead of a **large** intermediate file.  Option mhapPipe can be used to switch back to using intermediate files. 4fada27d9e443b67522f649733ca7fd159b263e4\r\n  * Do not convert or load short overlaps into the overlap store during correction. d6b7a1f774a65c37b7b98a8b6c69b7397b059241 and b9826425676a2eb019fd2ad2f240f2eebd79c35a\r\n  * Pass global filter coverage to generateCorrectionLayouts.  When corOutCoverage is changed from the default 40x, the number of reads that can be used to correct another read changes correspondingly. e192966ab956e7f277cca5c9f828aa648fd7d8fe and 07c048125a8953e54a8d4f22044fb713d7e5092b\r\n  * Trim low-quality ends from read-to-template alignments before using them for generating corrected reads.  ea2b03d63352dba819713ad716f4236a9ad93113 \r\n\r\n## Bug Fixes\r\n\r\n* Filter HiFi reads by their homopolymer compressed length.  258941d6fd318142f61cec46c0dcf7ed6cf52062\r\n* Show HiFi read length histograms using their uncompressed length.  f1eadb317cc2731fc4a2a10c222c684d830919cc\r\n* Fix crash trying to compute the error profile of unitigs with billions of overlaps.  Issue #1355.  69e22c99300bf76766c39abf763a739d8def8133\r\n* Fix 'Assertion 'mincoord < maxcoord' failed' in findPotentialOrphans().  Issues #1872 and #1831.  2f7343931bc17404bd04b4305b7aa2d118ed22e7\r\n* Improve detectin of grid resources specified in environment variables.  Issue #1912.  404540a944664cfab00617f4f4fa37be451b34e0\r\n* Fix _rare_ crash when placing reads in abnormally short tigs.   2b70735e256a35e7f697d96dc80e1f40bcf50ae4\r\n\r\n## Known Issues\r\n\r\nSee the [issues](http://github.com/marbl/canu/issues) page for up-to date open issues, or to report a problem.\r\n* Large memory usage and runtime for long reads (e.g., Nanopore) when using the `overlapper=ovl` algorithm, and during Overlap Error Adjustment. The `-fast` option enables a significantly faster algorithm, especially for nanopore data, but may produce slightly less contiguous assemblies.\r\n* No support for trio binning of HiFi data. As a workaround, specify the HiFi data as -pacbio-raw and run only the haplotyping step (-haplotype) followed by assembly of the partitioned reads.\r\n\r\nSee the [FAQ](http://canu.readthedocs.io/en/latest/faq.html) for many suggestions, including suggestions for specific data types, e.g., Nanopore r9 reads.\r\n\r\n## Legal\r\n\r\nCanu is derived from [Celera Assembler](http://wgs-assembler.sourceforge.net) and includes code from many other projects.  Most, but not all, of the code is [GPL](http://github.com/marbl/canu/blob/master/README.license.GPL) licensed.  See the [README.licenses](http://github.com/marbl/canu/blob/master/README.licenses) file and individual source code files for details.\r\n",
        "html_url": "https://github.com/marbl/canu/releases/tag/v2.2",
        "name": "Canu v2.2",
        "release_id": 47216250,
        "tag": "v2.2",
        "tarball_url": "https://api.github.com/repos/marbl/canu/tarball/v2.2",
        "type": "Release",
        "url": "https://api.github.com/repos/marbl/canu/releases/47216250",
        "value": "https://api.github.com/repos/marbl/canu/releases/47216250",
        "zipball_url": "https://api.github.com/repos/marbl/canu/zipball/v2.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "brianwalenz",
          "type": "User"
        },
        "date_created": "2020-10-16T22:21:14Z",
        "date_published": "2020-10-19T07:12:44Z",
        "description": "These are release notes for Canu version 2.1.1, which was released on October 16th, 2020. Canu is specialized for assembly of single-molecule high-noise sequences. Full documentation can be found at http://canu.readthedocs.org/.\r\n\r\nThis release provides a stable, tested, and documented version of the software.  The binary distributions should work on any relatively recent version of the respective OS and are the recommended way to install Canu. The source code distribution contains everything you need to create a binary distribution for your own specific OS.\r\n\r\n## Citation\r\n* Koren S, Walenz BP, Berlin K, Miller JR, Phillippy AM. [Canu: scalable and accurate long-read assembly via adaptive k-mer weighting and repeat separation](http://doi.org/10.1101/gr.215087.116). Genome Research. (2017).\r\n* Koren S, Rhie A, Walenz BP, Dilthey AT, Bickhart DM, Kingan SB, Hiendleder S, Williams JL, Smith TPL, Phillippy AM. [De novo assembly of haplotype-resolved genomes with trio binning](http://doi.org/10.1038/nbt.4277).  Nature Biotechnology.  (2018).\r\n* Nurk S, Walenz BP, Rhiea A, Vollger MR, Logsdon GA, Grothe R, Miga KH, Eichler EE, Phillippy AM, Koren S. [HiCanu: accurate assembly of segmental duplications, satellites, and allelic variants from high-fidelity long reads](https://doi.org/10.1101/gr.263566.120).  Genome Research.  (2020).\r\n\r\n## Minimum Requirements\r\n* 8GB minimum memory; 16GB strongly suggested\r\n* GCC 4.5 (for compilation only); GCC 7 or newer _strongly_ recommended\r\n* Perl 5.12.0, or File::Path 2.08\r\n* Java SE 8\r\n* macOS 10.10 Yosemite (for macOS/Darwin binaries only)\r\n* gnuplot 5.2 (optional, for generating diagnostic graphs)\r\n\r\n## Installation\r\n\r\nUsers can download Canu as source code or as pre-compiled binaries. The binary distribution is the recommended install method, assuming it is available for your platform. The source code package needs to be compiled and installed before it can be used. \r\n\r\n**Note that the installation directory has changed compared to previous releases.**\r\n\r\n## To install from a binary distribution (recommended):\r\n```\r\ntar -xJf canu-2.1.1.*.tar.xz\r\n```\r\nCanu will be installed at canu-2.1.1/bin/canu.\r\n\r\n\r\n## To install from source code (DO NOT download the Source code files provided by GitHub as these will not compile, use the canu-2.1.1.tar.gz instead):\r\n```\r\ntar -xJf canu-2.1.1.tar.xz\r\ncd canu-2.1.1/src\r\nmake -j 8\r\ncd ..\r\n```\r\nCanu will be installed at canu-2.1.1/build/bin/canu.\r\n\r\n## Changes\r\n\r\nCanu v2.1.1 **IS** compatible with assemblies started with Canu v2.1.\r\n\r\nThis minor release adds a small performance enhancement to consensus and fixes two crashes, one in consensus and one in bogart.\r\n\r\n* Add multithreading for the final step of consensus, where it aligns the original reads back to the consensus sequence to find the read layout.\r\n* Fix a systematic crash (on some systems) in utgcns: `Assertion 'idmap.empty() == true' failed.`   https://github.com/marbl/canu/issues/1780.\r\n* Fix a crash in bogart (on PacBio HiFi metagenomic datasets): `Assertion 'isRepeat == true' failed`.  https://github.com/marbl/canu/issues/1806 and https://github.com/marbl/canu/issues/1813.\r\n\r\n## Known Issues\r\n\r\nSee the [issues](http://github.com/marbl/canu/issues) page for up-to date open issues, or to report a problem.\r\n* Large memory usage and runtime for long reads (e.g., Nanopore) when using the `overlapper=ovl` algorithm, and during Overlap Error Adjustment. The `-fast` option enables a significantly faster algorithm, especially for nanopore data, but may produce slightly less contiguous assemblies.\r\n* No support for trio binning of HiFi data. As a workaround, specify the HiFi data as -pacbio-raw and run only the haplotyping step (-haplotype) followed by assembly of the partitioned reads.\r\n\r\nSee the [FAQ](http://canu.readthedocs.io/en/latest/faq.html) for many suggestions, including suggestions for specific data types, e.g., Nanopore r9 reads.\r\n\r\n## Legal\r\n\r\nCanu is derived from [Celera Assembler](http://wgs-assembler.sourceforge.net) and includes code from many other projects.  Most, but not all, of the code is [GPL](http://github.com/marbl/canu/blob/master/README.license.GPL) licensed.  See the [README.licenses](http://github.com/marbl/canu/blob/master/README.licenses) file and individual source code files for details.\r\n",
        "html_url": "https://github.com/marbl/canu/releases/tag/v2.1.1",
        "name": "Canu v2.1.1",
        "release_id": 32689840,
        "tag": "v2.1.1",
        "tarball_url": "https://api.github.com/repos/marbl/canu/tarball/v2.1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/marbl/canu/releases/32689840",
        "value": "https://api.github.com/repos/marbl/canu/releases/32689840",
        "zipball_url": "https://api.github.com/repos/marbl/canu/zipball/v2.1.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "brianwalenz",
          "type": "User"
        },
        "date_created": "2020-08-24T14:52:50Z",
        "date_published": "2020-08-24T18:07:23Z",
        "description": "These are release notes for Canu version 2.1, which was released on August 21st, 2020. Canu is specialized for assembly of single-molecule high-noise sequences. Full documentation can be found at http://canu.readthedocs.org/.\r\n\r\nThis release provides a stable, tested, and documented version of the software.  The binary distributions should work on any relatively recent version of the respective OS and are the recommended way to install Canu.  The source code distribution contains everything you need to create a binary distribution for your own specific OS.\r\n\r\n## Citation\r\n* Koren S, Walenz BP, Berlin K, Miller JR, Phillippy AM. [Canu: scalable and accurate long-read assembly via adaptive k-mer weighting and repeat separation](http://doi.org/10.1101/gr.215087.116). Genome Research. (2017).\r\n* Koren S, Rhie A, Walenz BP, Dilthey AT, Bickhart DM, Kingan SB, Hiendleder S, Williams JL, Smith TPL, Phillippy AM. [De novo assembly of haplotype-resolved genomes with trio binning](http://doi.org/10.1038/nbt.4277).  Nature Biotechnology.  (2018).\r\n* Nurk S, Walenz BP, Rhiea A, Vollger MR, Logsdon GA, Grothe R, Miga KH, Eichler EE, Phillippy AM, Koren S. [HiCanu: accurate assembly of segmental duplications, satellites, and allelic variants from high-fidelity long reads](https://doi.org/10.1101/2020.03.14.992248).  biorXiv.  (2020).\r\n\r\n## Minimum Requirements\r\n* 8GB minimum memory; 16GB strongly suggested\r\n* GCC 4.5 (for compilation only); GCC 7 or newer _strongly_ recommended\r\n* Perl 5.12.0, or File::Path 2.08\r\n* Java SE 8\r\n* macOS 10.10 Yosemite (for macOS/Darwin binaries only)\r\n* gnuplot 5.2 (optional, for generating diagnostic graphs)\r\n\r\n## Installation\r\n\r\nUsers can download Canu as source code or as pre-compiled binaries. The binary distribution is the recommended install method, assuming it is available for your platform. The source code package needs to be compiled and installed before it can be used. \r\n\r\n**Note that the installation directory has changed compared to previous releases.**\r\n\r\n## To install from a binary distribution (recommended):\r\n```\r\ntar -xJf canu-2.1.*.tar.xz\r\n```\r\nCanu will be installed at canu-2.1/bin/canu.\r\n\r\n\r\n## To install from source code (DO NOT download the Source code files provided by GitHub as these will not compile, use the canu-2.1.tar.gz instead):\r\n```\r\ngunzip -dc canu-2.1.tar.gz | tar -xf -\r\ncd canu-2.1/src\r\nmake -j 8\r\ncd ..\r\n```\r\nCanu will be installed at canu-2.1/build/bin/canu.\r\n\r\n## Changes\r\n\r\nCanu v2.1 **IS NOT** compatible with assemblies started with any previous version.\r\n\r\n* Contigs are more correct, but generally smaller - better identification of bad reads, bubbles and ambiguous repeats.\r\n** Avoid labeling true repeats as bubbles.  Some contigs we previously flagged as bubbles are now flagged as repeats and are allowed to break contigs.\r\n** Improve sensitivity of bubble detection.  Some contigs we didn't flag before are now flagged as bubbles and will not break contigs.\r\n** Break repeats at the read end suspected to be incorrectly assembled, instead of at the boundary of the repeat.\r\n** Merge unambiguous small contigs into larger contigs correctly in tandem repeat regions.\r\n* Auto-increase maximum allowed overlap error when defaults are too restrictive.  This applies to all datatypes but is particularly prevalent in HiFi datasets.\r\n** Fix an esoteric error in picking the best overlap between a pair of reads that would sometimes fail to pick the longest overlap when all overlaps are at 100% identity.\r\n* Improve detection of circular contigs and output the coordinates of the non-redundant contig in the FASTA header line.\r\n* Add a report of the quality of overlaps used when building contigs to 'asm.report'.\r\n* Improve consensus quality in repetitive regions.\r\n* Remove support for having read files in spec files; it only worked in limited cases, and would be hard to fix.\r\n* Remove OSTYPE-MACHINETYPE (e.g., Linux-amd64) from the installation path.  This quirk has been present since (almost) the first release of Celera Assembler.  It was needed to support runs on a heterogeneous grid consisting of Intel 32-bit compute nodes (with 2 CPUs and 2 GB memory) and a \"high memory\" DEC Alpha node with 4 CPUs and 32 GB.\r\n* Change ovlStore file names to be POSIX compliant.  Old names should be silently updated.  Issue #1732.\r\n\r\n## Bug Fixes\r\n\r\n* Fix \"Modification of non-creatable array value attempted\" crash after \"Meryl finished successfully.\"  Issue #1632.\r\n* Fix crash in splitReads \"Assertion w->clrBgn >= w->iniBgn failed.\"  Issue #1655.\r\n* Fix failure running meryl-configure.sh on PBSPro.  Issue #1740.\r\n* Fix underestimate of memory needed for consensus.  Issue #1750.\r\n\r\n## Known Issues\r\n\r\nSee the [issues](http://github.com/marbl/canu/issues) page for up-to date open issues, or to report a problem.\r\n* Large memory usage and runtime for long reads (e.g., Nanopore) when using the `overlapper=ovl` algorithm, and during Overlap Error Adjustment. The `-fast` option enables a significantly faster algorithm, but may produce slightly less contiguous assemblies on genomes larger than 1 Gbp in size. It is recommended for nanopore genomes smaller than 1 Gbp.\r\n* No support for trio binning of HiFi data. As a workaround, specify the HiFi data as -pacbio-raw and run only the haplotyping step (-haplotype) followed by assembly of the partitioned reads.\r\n\r\nSee the [FAQ](http://canu.readthedocs.io/en/latest/faq.html) for many suggestions, including suggestions for specific data types, e.g., Nanopore r9 reads.\r\n\r\n## Legal\r\n\r\nCanu is derived from [Celera Assembler](http://wgs-assembler.sourceforge.net) and includes code from many other projects.  Most, but not all, of the code is [GPL](http://github.com/marbl/canu/blob/master/README.license.GPL) licensed.  See the [README.licenses](http://github.com/marbl/canu/blob/master/README.licenses) file and individual source code files for details.",
        "html_url": "https://github.com/marbl/canu/releases/tag/v2.1",
        "name": "Canu v2.1",
        "release_id": 29899805,
        "tag": "v2.1",
        "tarball_url": "https://api.github.com/repos/marbl/canu/tarball/v2.1",
        "type": "Release",
        "url": "https://api.github.com/repos/marbl/canu/releases/29899805",
        "value": "https://api.github.com/repos/marbl/canu/releases/29899805",
        "zipball_url": "https://api.github.com/repos/marbl/canu/zipball/v2.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "brianwalenz",
          "type": "User"
        },
        "date_created": "2020-03-18T07:51:17Z",
        "date_published": "2020-03-18T08:20:14Z",
        "description": "These are release notes for Canu version 2.0, which was released on March 18th, 2020. Canu is specialized for assembly of single-molecule high-noise sequences. Full documentation can be found at http://canu.readthedocs.org/.\r\n\r\nThis release provides a stable, tested, and documented version of the software.  The binary distributions should work on any relatively recent version of the respective OS and are the recommended way to install Canu.  The source code distribution contains everything you need to create a binary distribution for your own specific OS.\r\n\r\n## Citation\r\n* Koren S, Walenz BP, Berlin K, Miller JR, Phillippy AM. [Canu: scalable and accurate long-read assembly via adaptive k-mer weighting and repeat separation](http://doi.org/10.1101/gr.215087.116). Genome Research. (2017).\r\n* Koren S, Rhie A, Walenz BP, Dilthey AT, Bickhart DM, Kingan SB, Hiendleder S, Williams JL, Smith TPL, Phillippy AM. [De novo assembly of haplotype-resolved genomes with trio binning](http://doi.org/10.1038/nbt.4277).  Nature Biotechnology.  (2018).\r\n* Nurk S, Walenz BP, Rhiea A, Vollger MR, Logsdon GA, Grothe R, Miga KH, Eichler EE, Phillippy AM, Koren S. [HiCanu: accurate assembly of segmental duplications, satellites, and allelic variants from high-fidelity long reads](https://doi.org/10.1101/2020.03.14.992248).  biorXiv.  (2020).\r\n\r\n## Minimum Requirements\r\n* 8GB minimum memory; 16GB strongly suggested\r\n* GCC 4.5 (for compilation only); GCC 7 or newer _strongly_ recommended\r\n* Perl 5.12.0, or File::Path 2.08\r\n* Java SE 8\r\n* macOS 10.10 Yosemite (for macOS/Darwin binaries only)\r\n* gnuplot 5.2 (optional, for generating diagnostic graphs)\r\n\r\n## Installation\r\n\r\nUsers can download Canu as source code or as pre-compiled binaries. The binary distribution is the recommended install method, assuming it is available for your platform. The source code package needs to be compiled and installed before it can be used. \r\n\r\nTo install from a binary distribution (recommended installation method):\r\n\r\n```\r\ntar -xJf canu-2.0.*.tar.xz\r\n```\r\n\r\nTo install from source code (the file can be named either `canu-v2.0.tar.gz` or just `v2.0.tar.gz`, depending on how it is downloaded):\r\n\r\n```\r\ngunzip -dc canu-v2.0.tar.gz | tar -xf -\r\ncd canu-2.0/src\r\nmake -j 8\r\ncd ..\r\n```\r\n\r\nIn both cases, canu is installed in directory canu-2.0/<OS>-<ARCHITECTURE>, for example, canu-1.9/Linux-amd64.  You can run the assembler with:\r\n\r\n```\r\ncanu-2.0/*/bin/canu\r\n```\r\n\r\n## Changes\r\n\r\nThis release introduces support for PacBio HiFi assembly and includes several major bug fixes. \r\n\r\nCanu v2.0 **IS NOT** compatible with assemblies started with any previous version.\r\n\r\n* Support for HiFi data using option '-pacbio-hifi'.  Full details in the preprint [HiCanu: accurate assembly of segmental duplications, satellites, and allelic variants from high-fidelity long reads](https://doi.org/10.1101/2020.03.14.992248).\r\n* Numerous improvements to contig construction that make longer more correct contigs:\r\n** Detect bubbles during contig construction and prevent them from shattering heterozygous genomes.\r\n** Detect and remove short branches branches during contig construction.\r\n** Detect reads that are not fully covererd by overlaps and exclude them from contigs.\r\n* Option 'stopOnReadQuality' is enabled by default, but no longer aborts if there are too many short reads.\r\n* Option 'minInputCoverage' will stop the assembly if the input read coverage is below this value, default 10.  This supplements 'stopOnLowCoverage', which stops if read coverage is below some value after input, after correction or after trimming.\r\n* Option 'maxInputCoverage', default 200, will randomly down-sample input reads to this coverage.  It replaces option 'readSamplingCoverage' ('readSamplingBias' still exists).\r\n* Write intermediate Mhap outputs to the `stageDirectory` if it is set.\r\n\r\n## Bug Fixes\r\n\r\n* Multiple fixes to read positioning during contig construction (`Assertion 'cnt > 0' failed.`)\r\n* Possibly fix a weird error reading overlapper output that resulted in out of memory errors (`terminate called after throwing an instance of 'std::bad_alloc'`).\r\n* A variety of bug fixes that nobody will really care about (unless your assembly crashed, in which case you already know it's fixed) and will be tedious to list, so they aren't listed.\r\n\r\n## Known Issues\r\n\r\nSee the [issues](http://github.com/marbl/canu/issues) page for up-to date open issues, or to report a problem.\r\n* Large memory usage and runtime for long reads (e.g., Nanopore) when using the `overlapper=ovl` algorithm, and during Overlap Error Adjustment. The `-fast` option enables a significantly faster algorithm, but may produce slightly less contiguous assemblies on genomes larger than 1 Gbp in size. It is recommended for nanopore genomes smaller than 1 Gbp.\r\n* No support for trio binning of HiFi data. As a workaround, specify the HiFi data as -pacbio-raw and run only the haplotyping step (-haplotype) followed by assembly of the partitioned reads.\r\n\r\nSee the [FAQ](http://canu.readthedocs.io/en/latest/faq.html) for many suggestions, including suggestions for specific data types, e.g., Nanopore r9 reads.\r\n\r\n## Legal\r\n\r\nCanu is derived from [Celera Assembler](http://wgs-assembler.sourceforge.net) and includes code from many other projects.  Most, but not all, of the code is [GPL](http://github.com/marbl/canu/blob/master/README.license.GPL) licensed.  See the [README.licenses](http://github.com/marbl/canu/blob/master/README.licenses) file and individual source code files for details.",
        "html_url": "https://github.com/marbl/canu/releases/tag/v2.0",
        "name": "Canu v2.0",
        "release_id": 24623565,
        "tag": "v2.0",
        "tarball_url": "https://api.github.com/repos/marbl/canu/tarball/v2.0",
        "type": "Release",
        "url": "https://api.github.com/repos/marbl/canu/releases/24623565",
        "value": "https://api.github.com/repos/marbl/canu/releases/24623565",
        "zipball_url": "https://api.github.com/repos/marbl/canu/zipball/v2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "brianwalenz",
          "type": "User"
        },
        "date_created": "2019-11-04T06:18:33Z",
        "date_published": "2019-11-04T07:31:05Z",
        "description": "These are release notes for Canu version 1.9, which was released on November 4th, 2019. Canu is specialized for assembly of single-molecule high-noise sequences. Full documentation can be found at http://canu.readthedocs.org/.\r\n\r\nThis release provides a stable, tested, and documented version of the software.  The binary distributions should work on any relatively recent version of the respective OS and are the recommended way to install Canu.  The source code distribution contains everything you need to create a binary distribution for your own specific OS.\r\n\r\n## Citation\r\n* Koren S, Walenz BP, Berlin K, Miller JR, Phillippy AM. [Canu: scalable and accurate long-read assembly via adaptive k-mer weighting and repeat separation](http://doi.org/10.1101/gr.215087.116). Genome Research. (2017).\r\n* Koren S, Rhie A, Walenz BP, Dilthey AT, Bickhart DM, Kingan SB, Hiendleder S, Williams JL, Smith TPL, Phillippy AM. [De novo assembly of haplotype-resolved genomes with trio binning](http://doi.org/10.1038/nbt.4277).  Nature Biotechnology.  (2018).\r\n\r\n## Minimum Requirements\r\n* 8GB minimum memory; 16GB strongly suggested\r\n* Perl 5.12.0, or File::Path 2.08\r\n* Java SE 8\r\n* GCC 4.5 (for compilation only); GCC 7 or newer _strongly_ recommended\r\n* macOS 10.10 Yosemite (for macOS/Darwin binaries only)\r\n* gnuplot 5.2 (optional, for generating diagnostic graphs)\r\n\r\n## Installation\r\n\r\nUsers can download Canu as source code or as pre-compiled binaries. The binary distribution is the recommended install method, assuming it is available for your platform. The source code package needs to be compiled and installed before it can be used. \r\n\r\nTo install from a binary distribution (recommended installation method):\r\n\r\n```\r\ntar -xJf canu-1.9.*.tar.xz\r\n```\r\n\r\nTo install from source code (the file can be named either `canu-v1.9.tar.gz` or just `v1.9.tar.gz`, depending on how it is downloaded):\r\n\r\n```\r\ngunzip -dc canu-v1.9.tar.gz | tar -xf -\r\ncd canu-1.9/src\r\nmake -j 8\r\ncd ..\r\n```\r\n\r\nIn both cases, canu is installed in directory canu-1.9/<OS>-<ARCHITECTURE>, for example, canu-1.9/Linux-amd64.  You can run the assembler with:\r\n\r\n```\r\ncanu-1.9/*/bin/canu\r\n```\r\n\r\n## Changes\r\n\r\nThis release includes several major bug fixes and improves repeat separation and consensus quality for assemblies. \r\n\r\nCanu v1.9 **IS NOT** compatible with assemblies started with any previous version.\r\n\r\n* Preliminary support for HiFi data using option '-pacbio-hifi'.  This will skip the correction and trimming phases, set options for high quality reads.\r\n* Improved detection of indel errors in overlaps used for creating contigs.  Fix several errors that all but disabled detection of errors in these overlaps.\r\n* Fix an error in consensus generation that was effectively disabling consensus on large contigs.\r\n* Significantly improve speed of reading overlaps during, for example, trimming.\r\n* Trim 'N' bases at either end of a read (as they tended to obscure true overlaps), and treat 'N' bases in the middle of a read as don't-care matches during consensus.\r\n* Support for the DNAnexus platform.\r\n* Output file 'contigs.gfa' was removed because it was misleading.\r\n* Parameter 'saveOverlaps': By default, the 'correction' and 'trimming' overlap stores are removed when they are no longer needed.  Set saveOverlaps=true to retain them.\r\n* Parameter 'purgeOverlaps': Controls when to remove intermediate overlap data: never, normal (when all overlaps are loaded into an overlap store, default), aggressive (as soon as safely possible), dangerous (as soon as possible, even if it's unsafe).\r\n* Parameter 'gridEngineResourceOption': A combination of gridEngineThreadsOption and gridEngineMemoryOption, useful for grid schedulers that use one option for requesting both memory and CPUs.\r\n* Parameter 'hapUnknownFraction': Don't include 'unassigned' reads in the haplotype assemblies if they amount to less than some fraction of the total reads.  Default 0.05 (5%).\r\n* Option '-haplotype': Will stop Canu after haplotyped reads are generated.  No assemblies will be started.\r\n\r\n## Bug Fixes\r\n\r\n* A variety of bug fixes that nobody will really care about (unless your assembly crashed, in which case you already know it's fixed) and will be tedious to list, so they aren't listed.\r\n\r\n## Known Issues\r\n\r\nSee the [issues](http://github.com/marbl/canu/issues) page for up-to date open issues, or to report a problem.\r\n* Large memory usage and runtime for long reads (e.g., Nanopore) when using the `overlapper=ovl` algorithm, and during Overlap Error Adjustment. The `-fast` option enables a significantly faster algorithm, but may produce slightly less contiguous assemblies on genomes larger than 1 Gbp in size. It is recommended for nanopore genomes smaller than 1 Gbp.\r\n* No support for trio binning of HiFi data. As a workaround, specify the HiFi data as -pacbio-raw and run only the haplotyping step (-haplotype) followed by assembly of the partitioned reads.\r\n\r\nSee the [FAQ](http://canu.readthedocs.io/en/latest/faq.html) for many suggestions, including suggestions for specific data types, e.g., Nanopore r9 reads.\r\n\r\n## Legal\r\n\r\nCanu is derived from [Celera Assembler](http://wgs-assembler.sourceforge.net) and includes code from many other projects.  Most, but not all, of the code is [GPL](http://github.com/marbl/canu/blob/master/README.license.GPL) licensed.  See the [README.licenses](http://github.com/marbl/canu/blob/master/README.licenses) file and individual source code files for details.",
        "html_url": "https://github.com/marbl/canu/releases/tag/v1.9",
        "name": "Canu v1.9",
        "release_id": 21043270,
        "tag": "v1.9",
        "tarball_url": "https://api.github.com/repos/marbl/canu/tarball/v1.9",
        "type": "Release",
        "url": "https://api.github.com/repos/marbl/canu/releases/21043270",
        "value": "https://api.github.com/repos/marbl/canu/releases/21043270",
        "zipball_url": "https://api.github.com/repos/marbl/canu/zipball/v1.9"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "brianwalenz",
          "type": "User"
        },
        "date_created": "2018-10-22T16:47:31Z",
        "date_published": "2018-10-22T22:20:30Z",
        "description": "These are release notes for Canu version 1.8, which was released on October 22nd, 2018. Canu is specialized for assembly of single-molecule high-noise sequences. Full documentation can be found at http://canu.readthedocs.org/.\r\n\r\nThis release provides a stable, tested, and documented version of the software.  The binary distributions should work on any relatively recent version of the respective OS and are the recommended way to install Canu.  The source code distribution contains everything you need to create a binary distribution for your own specific OS.\r\n\r\n## Citation\r\n* Koren S, Walenz BP, Berlin K, Miller JR, Phillippy AM. [Canu: scalable and accurate long-read assembly via adaptive k-mer weighting and repeat separation](http://doi.org/10.1101/gr.215087.116). Genome Research. (2017).\r\n* Koren S, Rhie A, Walenz BP, Dilthey AT, Bickhart DM, Kingan SB, Hiendleder S, Williams JL, Smith TPL, Phillippy AM. [De novo assembly of haplotype-resolved genomes with trio binning](http://doi.org/10.1038/nbt.4277).  Nature Biotechnology.  (2018).\r\n\r\n## Minimum Requirements\r\n* 8GB minimum memory; 16GB strongly suggested\r\n* Perl 5.12.0, or File::Path 2.08\r\n* Java SE 8\r\n* GCC 4.5 (for compilation only); GCC 6 recommended\r\n* macOS 10.10 Yosemite (for macOS/Darwin binaries only)\r\n* gnuplot 5.2 (optional, for generating diagnostic graphs)\r\n\r\n## Installation\r\n\r\nUsers can download Canu as source code or as pre-compiled binaries. The source code package needs to be compiled and installed before it can be used. The binary distributions need only be unpacked, but they are not available for all platforms.\r\n\r\nTo install from source code (the file can be named either `canu-v1.8.tar.gz` or just `v1.8.tar.gz`, depending on how it is downloaded):\r\n\r\n```\r\ngunzip -dc canu-v1.8.tar.gz | tar -xf -\r\ncd canu-1.8/src\r\nmake -j 8\r\ncd ..\r\n```\r\n\r\nTo install from a binary distribution (recommended installation method):\r\n\r\n```\r\ntar -xJf canu-1.8.*.tar.xz\r\n\r\n\r\n\r\n```\r\n\r\nIn both cases, canu is installed in directory canu-1.8/<OS>-<ARCHITECTURE>, for example, canu-1.8/Linux-amd64.  You can run the assembler with:\r\n\r\n```\r\ncanu-1.8/*/bin/canu\r\n```\r\n\r\n## Changes\r\n\r\nThis release adds support for trio-binning ([Nature Biotechnology](http://doi.org/10.1038/nbt.4277)), a reimplementation of the [meryl](https://github.com/marbl/meryl/) kmer counter and processor, and improved support for object storage.\r\n\r\nNote, however, that while object storage is supported, there are no methods to run tasks on, e.g., Amazon Web Services or Azure.\r\n\r\nCanu v1.8 **IS NOT** compatible with assemblies started with any previous version.\r\n\r\n* The Canu executive now fully supports trio-binning.  Specifying parental haplotypes with the -haplotype* options enables trio binning.  After the reads are binned into haplotypes, each haplotype assembly is automagically launched.\r\n* The 'meryl' kmer counter was reimplemented for improved performance when counting kmers in reads, and better utilization of grid architectures.  The method for deciding which kmers to ignore when computing overlaps changed, resulting, generally, in more kmers being ignored and thus lower run times for computing overlaps.\r\n* The overlap store was largely reimplemented to reduce file counts and sizes during construction, and to allow the data-parallel store construction method to run without a grid.  It works with object stores now, too.  The sequential construction method runs as its own job, not part of the Canu executive, letting it use more resources than before.\r\n* Decrease the default maximum error rate allowed when finding overlaps in corrected Nanopore reads from 14.4% to 12.0%.  With the over-occurring kmer changes mentioned previously, run times for finding overlaps in Nanopore reads should decrease by 5 to 10 fold.\r\n* Options 'executiveMemory' and 'executiveThreads' can be used to increase the size of the executive task.  If this job is large enough, tasks that would previously run as individual grid jobs will be run from within the executive task, avoiding a submit/execute/submit cycle on heavily loaded grids.\r\n* Options 'readSamplingCoverage' and 'readSamplingBias' can be used to down sample read coverage before starting correction or assembly.\r\n* Option 'stopOnReadQuality', which seemed to just annoy people, was disabled, but option 'stopOnLowCoverage' was added to stop an assembly if read coverage is too low, 10 by default.\r\n* Option 'gnuplotTested' was removed.  Failure to find or run gnuplot is now handled automagically.  Issues #1084 and #1129.\r\n* Better file staging in seqStore and ovlStore when object storage is used.\r\n\r\n## Bug Fixes\r\n\r\n* Various tweaks to job sizes.  overlapInCore overlap jobs are generally larger now.\r\n* Fix truncation of consensus sequence in large contigs due to mis-aligned reads leaving consensus bases with no read coverage.\r\n* Fix correction failures caused by non-ACGT bases in input reads.\r\n\r\n## Known Issues\r\n\r\nSee the [issues](http://github.com/marbl/canu/issues) page for up-to date open issues, or to report a problem.\r\n* Large memory usage and runtime for long reads (e.g., Nanopore) when using the `overlapper=ovl` algorithm, and during Overlap Error Adjustment. The `-fast` option enables a significantly faster algorithm, but may produce slightly less contiguous assemblies on genomes larger than 1 Gbp in size. It is recommended for nanopore genomes smaller than 1 Gbp.\r\n* Bubbles are not captured in the contig graph, but are included in the unitig graph.  No attempt at marking bubbles is made.\r\n\r\nSee the [FAQ](http://canu.readthedocs.io/en/latest/faq.html) for many suggestions, including suggestions for specific data types, e.g., Nanopore r9 reads.\r\n\r\n## Legal\r\n\r\nCanu is derived from [Celera Assembler](http://wgs-assembler.sourceforge.net) and includes code from many other projects.  Most, but not all, of the code is [GPL](http://github.com/marbl/canu/blob/master/README.license.GPL) licensed.  See the [README.licenses](http://github.com/marbl/canu/blob/master/README.licenses) file and individual source code files for details.\r\n",
        "html_url": "https://github.com/marbl/canu/releases/tag/v1.8",
        "name": "Canu v1.8",
        "release_id": 13586546,
        "tag": "v1.8",
        "tarball_url": "https://api.github.com/repos/marbl/canu/tarball/v1.8",
        "type": "Release",
        "url": "https://api.github.com/repos/marbl/canu/releases/13586546",
        "value": "https://api.github.com/repos/marbl/canu/releases/13586546",
        "zipball_url": "https://api.github.com/repos/marbl/canu/zipball/v1.8"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "brianwalenz",
          "type": "User"
        },
        "date_created": "2018-06-22T08:20:52Z",
        "date_published": "2018-06-18T04:40:51Z",
        "description": "These are release notes for Canu version 1.7.1, which was released on June 18th, 2018. Canu is specialized for assembly of single-molecule high-noise sequences. Full documentation can be found at http://canu.readthedocs.org/.\r\n\r\nThis release provides a stable, tested, and documented version of the software.  The binary distributions should work on any relatively recent version of the respective OS.  The source code distribution contains everything you need to create a binary distribution for your own specific OS.\r\n\r\n## Citation\r\n* Koren S, Walenz BP, Berlin K, Miller JR, Phillippy AM. [Canu: scalable and accurate long-read assembly via adaptive k-mer weighting and repeat separation](https://doi.org/10.1101/gr.215087.116). Genome Research. (2017).\r\n* Koren S, Rhie A, Walenz BP, Dilthey AT, Bickhart DM, Kingan SB, Hiendleder S, Williams JL, Smith TPL, Phillippy AM. [Complete assembly of parental haplotypes with trio binning](https://www.biorxiv.org/content/early/2018/02/26/271486).  Biorxiv.  (2018).\r\n\r\n## Minimum Requirements\r\n* Perl 5.12.0, or File::Path 2.08\r\n* Java SE 8\r\n* GCC 4.5 (for compilation only); GCC 6 recommended\r\n* macOS 10.10 Yosemite (for macOS/Darwin binaries only)\r\n* gnuplot 5.2 (optional, for generating diagnostic graphs)\r\n\r\n## Installation\r\n\r\nUsers can download Canu as source code or as pre-compiled binaries. The source code package needs to be compiled and installed before it can be used. The binary distributions need only be unpacked, but they are not available for all platforms.\r\n\r\nTo install from source code (the file can be named either `canu-v1.7.1.tar.gz` or just `v1.7.1.tar.gz`, depending on how it is downloaded):\r\n\r\n```\r\ngunzip -dc canu-v1.7.1.tar.gz | tar -xf -\r\ncd canu-1.7.1/src\r\nmake -j 8\r\ncd ..\r\n```\r\n\r\nTo install from a binary distribution:\r\n\r\n```\r\nxz -dc canu-1.7.1.*.tar.xz |tar -xf -\r\n```\r\n\r\nIn both cases, canu is installed in directory canu-1.7.1/<OS>-<ARCHITECTURE>, for example, canu-1.7.1/Linux-amd64.  You can run the assembler with:\r\n\r\n```\r\ncanu-1.7.1/*/bin/canu\r\n```\r\n\r\n## Changes\r\n\r\nThis release contains only bug fixes made since Canu v1.7 was released.  No featrues were added or removed.\r\n\r\nCanu v1.7.1 is compatible with assemblies started with Canu v1.7.\r\n\r\nCanu v1.7 and v1.7.1 **ARE NOT** compatible with assemblies started with Canu v1.6.\r\n\r\n## Bug Fixes\r\n\r\n*Fix _many_ bogart issues, including the dreaded \"Assertion `cnt > 0' failed\".  Issues #930, #874, #873, #844, #718, #546.  Backported from 6f3c37525c6bf532be8f585daeaf565507c4c3b1.\r\n*Fix Read Error Detection (RED) configuration to prevent single-read jobs.  Issues #935, #854, #831, #815.  Backported from eeef601e046e7551c83f7459fecfe8884936929d.\r\n*Fix excessive memory usage when loading evalues into the ovlStore.  Issues #956, #758, #755.  Backported from 858eff83cf7a2b0c8604889072ba7567d91dfc41.\r\n*Fix a (potential) performance problem when computing overlaps for large assemblies: don't set a one-size-fits-all ovlHashBits, base it on the genome size.  Backported from a580131bdd056d028e457ed78ad8c2dc47dd5703.\r\n*Fix a compilation error with [GCC 8](https://gcc.gnu.org/gcc-8/).  Issue #927.  Backported from f251336b5176c67d10ecbf7e0e4a9df89e8f46fb.\r\n\r\n## Known Issues\r\n\r\n*Downloads before 22 June 2018 incorrectly reported the version as \"1.7\".\r\n\r\nSee the [issues](http://github.com/marbl/canu/issues) page for up-to date open issues, or to report a problem.\r\n* Large memory usage and runtime for long reads (e.g., Nanopore) when using the `overlapper=ovl` algorithm, and during Overlap Error Adjustment. The `-fast` option enables a significantly faster algorithm, but may produce slightly less contiguous assemblies on genomes larger than 1 Gbp in size. It is recommended for nanopore genomes smaller than 1 Gbp.\r\n* TrioCanu is not yet optimized for memory usage, as a result it requires higher than default memory for large genomes, the options ```gridOptionsExecutive=\"--mem=250g\" griodOptionsMeryl='--partition=largemem --mem=1000g'``` (or the equivalent memory request on your grid) should be sufficient for a 3 Gbp genome.\r\n* Bubbles are not captured in the contig graph, but are included in the unitig graph.  No attempt at marking bubbles is made.\r\n\r\nSee the [FAQ](http://canu.readthedocs.io/en/latest/faq.html) for many suggestions, including suggestions for specific data types, e.g., Nanopore r9 reads.\r\n\r\n## Legal\r\n\r\nCanu is derived from [Celera Assembler](http://wgs-assembler.sourceforge.net) and includes code from many other projects.  Most, but not all, of the code is [GPL](http://github.com/marbl/canu/blob/master/README.license.GPL) licensed.  See the [README.licenses](http://github.com/marbl/canu/blob/master/README.licenses) file and individual source code files for details.\r\n",
        "html_url": "https://github.com/marbl/canu/releases/tag/v1.7.1",
        "name": "Canu v1.7.1",
        "release_id": 11520553,
        "tag": "v1.7.1",
        "tarball_url": "https://api.github.com/repos/marbl/canu/tarball/v1.7.1",
        "type": "Release",
        "url": "https://api.github.com/repos/marbl/canu/releases/11520553",
        "value": "https://api.github.com/repos/marbl/canu/releases/11520553",
        "zipball_url": "https://api.github.com/repos/marbl/canu/zipball/v1.7.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "brianwalenz",
          "type": "User"
        },
        "date_created": "2018-02-27T13:46:07Z",
        "date_published": "2018-02-27T15:53:23Z",
        "description": "These are release notes for Canu version 1.7, which was released on February 27th, 2018. Canu is specialized for assembly of single-molecule high-noise sequences. Full documentation can be found at http://canu.readthedocs.org/.\r\n\r\nThis release  provides a stable, tested, and documented version of the software.  The binary distributions should work on any relatively recent version of the respective OS.  The source code distribution contains everything you need to create a binary distribution for your own specific OS.\r\n\r\n## Citation\r\n* Koren S, Walenz BP, Berlin K, Miller JR, Phillippy AM. [Canu: scalable and accurate long-read assembly via adaptive k-mer weighting and repeat separation](https://doi.org/10.1101/gr.215087.116). Genome Research. (2017).\r\n* Koren S, Rhie A, Walenz BP, Dilthey AT, Bickhart DM, Kingan SB, Hiendleder S, Williams JL, Smith TPL, Phillippy AM. [Complete assembly of parental haplotypes with trio binning](https://www.biorxiv.org/content/early/2018/02/26/271486).  Biorxiv.  (2018).\r\n\r\n## Minimum Requirements\r\n* Perl 5.12.0, or File::Path 2.08\r\n* Java SE 8\r\n* GCC 4.5 (for compilation only)\r\n* OS X 10.10 (for binaries only)\r\n* gnuplot (optional, for generating diagnostic graphs)\r\n\r\n## Installation\r\n\r\nUsers can download Canu as source code or as pre-compiled binaries. The source code package needs to be compiled and installed before it can be used. The binary distributions need only be unpacked, but they are not available for all platforms.\r\n\r\nTo install from source code (the file can be named either `canu-v1.7.tar.gz` or just `v1.7.tar.gz`, depending on how it is downloaded):\r\n\r\n```\r\ngunzip -dc canu-v1.7.tar.gz | tar -xf -\r\ncd canu-1.7/src\r\nmake -j 8\r\ncd ..\r\n```\r\n\r\nTo install from a binary distribution:\r\n\r\n```\r\nxz -dc canu-1.7.*.tar.xz |tar -xf -\r\n```\r\n\r\nIn both cases, canu is installed in directory canu-1.7/<OS>-<ARCHITECTURE>, for example, canu-1.7/Linux-amd64.  You can run the assembler with:\r\n\r\n```\r\ncanu-1.7/*/bin/canu\r\n```\r\n\r\n## Changes\r\n\r\nThis release was originally planned to only include changes to read correction, but we opportunistically added: improved support for plasmids via read rescue; an initial implementation of trio binning; a 'fast mode' for Nanopore reads (though not automatic); and sneaked in some major changes to the gkpStore/tigStore read/contig database for future use.  So much for the plan.\r\n\r\nAssemblies started in Canu v1.6 ARE NOT compatible with Canu v1.7.\r\n\r\n* Ensure that every raw read is either corrected or used as evidence for correcting some other raw read.  This serves to rescue short plasmids in high coverage datasets, and it is no longer necessary to set corOutCoverage to achieve the same result.\r\n* Initial support of TrioCanu ([biorxiv](https://www.biorxiv.org/content/early/2018/02/26/271486)) added.\r\n* Add a '-fast' option for using a faster (but still not rigorously validated) overlap method.  Useful for long Nanopore reads.\r\n* In anticipation of future features, all reads - raw, corrected and trimmed versions - are stored in a single gkpStore in the root assembly directory.\r\n* Read correction was almost completely re-engineered.\r\n  * Stability of the computation was increased by removing multiple processes communicating through a pipe.\r\n  * Layouts of the raw reads used to correct a read are saved for future use (e.g., during consensus).  With the gkpStore change above, it is now possible to track a raw read through to the final contig outputs.\r\n  * Only a single corrected read is generated for each raw read.  Previously, PacBio reads containing multiple sub-reads could create multiple (redundant) corrected reads.\r\n* Overlap Error Detection (RED and OEA) memory usage when configuring compute jobs has been reduced.\r\n* Overlap Error Detection (RED and OEA) job sizes were increased to reduce disk contention.\r\n* overlapInCore (OBTOVL and UTGOVL) job sizes were increased to reduce disk contention and to take advantage of generally larger memory sizes available.\r\n* The ovlRefBlockSize parameter was removed; use ovlRefBlockLength instead.\r\n* Update to Snappy v1.1.7.\r\n* Add basic support for RNA by translating input U bases to T bases.  Output files are NOT translated back to U bases.\r\n* Restrict the parallel overlap store creation method to grid runs.  ovsMethod=forceparallel was added to force the usage of the parallel method on non-grid runs.\r\n* Add the preExec option to allow a single command to run before any Canu program is run.  Useful for, e.g., loading a Canu module.\r\n* Use more standard locations for installing binaries and perl modules.\r\n\r\n## Bug Fixes\r\n\r\n* In non-grid mode, Canu was running too many jobs concurrently and exhausting memory.\r\n* Memory needed for consensus jobs is now set based on the largest contig.\r\n* The VN tag in GFA outputs was set, incorrectly, to the name of the program creating the file.  It is now reflecting the format version of the GFA file.\r\n* Numerous not-very-exciting pedantic coding errors resolved.  Stuff like failing to close a single input file, failing to release a block of memory, failing to check if an operation successfully completed, et cetera, that were technically incorrect but not significantly so.\r\n\r\n## Known Issues\r\n\r\nSee the [issues](http://github.com/marbl/canu/issues) page for up-to date open issues, or to report a problem.\r\n* The Overlap Error Adjustment step does not properly configure its memory usage, include `redMemory=8 oeaMemory=8` as a workaround.\r\n* Large memory usage and runtime for long reads (e.g., Nanopore) when using the `overlapper=ovl` algorithm, and during Overlap Error Adjustment. The `-fast` option enables a significantly faster algorithm, but may produce slightly less contiguous assemblies on genomes larger than 1 Gbp in size. It is recommended for nanopore genomes smaller than 1 Gbp.\r\n* TrioCanu is not yet optimized for memory usage, as a result it requires higher than default memory for large genomes, the options ```gridOptionsExecutive=\"--mem=250g\" griodOptionsMeryl='--partition=largemem --mem=1000g'``` (or the equivalent memory request on your grid) should be sufficient for a 3 Gbp genome.\r\n* Bubbles are not captured in the contig graph, but are included in the unitig graph.  No attempt at marking bubbles is made.\r\n\r\nSee the [FAQ](http://canu.readthedocs.io/en/latest/faq.html) for many suggestions, including suggestions for specific data types, e.g., Nanopore r9 reads.\r\n\r\n## Legal\r\n\r\nCanu is derived from [Celera Assembler](http://wgs-assembler.sourceforge.net) and includes code from many other projects.  Most, but not all, of the code is [GPL](http://github.com/marbl/canu/blob/master/README.license.GPL) licensed.  See the [README.licenses](http://github.com/marbl/canu/blob/master/README.licenses) file and individual source code files for details.",
        "html_url": "https://github.com/marbl/canu/releases/tag/v1.7",
        "name": "Canu v1.7",
        "release_id": 9834193,
        "tag": "v1.7",
        "tarball_url": "https://api.github.com/repos/marbl/canu/tarball/v1.7",
        "type": "Release",
        "url": "https://api.github.com/repos/marbl/canu/releases/9834193",
        "value": "https://api.github.com/repos/marbl/canu/releases/9834193",
        "zipball_url": "https://api.github.com/repos/marbl/canu/zipball/v1.7"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "brianwalenz",
          "type": "User"
        },
        "date_created": "2017-08-14T19:39:19Z",
        "date_published": "2017-08-14T19:39:46Z",
        "description": "These are release notes for Canu version 1.6, which was released on August 14th, 2017. Canu is specialized for assembly of single-molecule high-noise sequences. Full documentation can be found at http://canu.readthedocs.org/.\r\n\r\nThis release  provides a stable, tested, and documented version of the software.  The binary distributions should work on any relatively recent version of the respective OS.  The source code distribution contains everything you need to create a binary distribution for your own specific OS.\r\n\r\n## Citation\r\n- Koren S, Walenz BP, Berlin K, Miller JR, Phillippy AM. [Canu: scalable and accurate long-read assembly via adaptive k-mer weighting and repeat separation](https://doi.org/10.1101/gr.215087.116). Genome Research. (2017).\r\n\r\n## Minimum Requirements\r\n- Perl 5.12.0, or File::Path 2.08\r\n- Java SE 8\r\n- GCC 4.5 (for compilation only)\r\n- OS X 10.10 (for binaries only)\r\n- gnuplot (optional, for generating diagnostic graphs)\r\n\r\n## Installation\r\n\r\nUsers can download Canu as source code or as pre-compiled binaries. The source code package needs to be compiled and installed before it can be used. The binary distributions need only be unpacked, but they are not available for all platforms.\r\n\r\nTo install from source code (the file can be named either `canu-v1.6.tar.gz` or just `v1.6.tar.gz`, depending on how it is downloaded):\r\n\r\n```\r\ngunzip -dc canu-v1.6.tar.gz | tar -xf -\r\ncd canu-1.6/src\r\nmake -j 8\r\ncd ..\r\n```\r\n\r\nTo install from a binary distribution:\r\n\r\n```\r\nxz -dc canu-1.6.*.tar.xz |tar -xf -\r\n```\r\n\r\nIn both cases, canu is installed in directory canu-1.6/<OS>-<ARCHITECTURE>, for example, canu-1.6/Linux-amd64.  You can run the assembler with:\r\n\r\n```\r\ncanu-1.6/*/bin/canu\r\n```\r\n\r\n## Changes\r\n\r\n- Improved detection of unitig and contig edges in GFA outputs.\r\n- Repeats that are confirmed correct no longer form unitigs.  This increases unitig length and greatly simplifies the unitig GFA.\r\n- Small plasmids are no longer flagged as 'unassembled' sequences.  **Note that the `contigFilter` option values have changed** and old values run the risk of filtering incorrectly.\r\n- Improved contig consensus accuracy (longer alignments to reference).\r\n- Added a unitig to contig mapping via a BED output.\r\n- Better memory management in bogart should reduce memory footprint slightly and run slightly faster.\r\n- Remove the ovlStore for correction and trimming when those stages are finished.  saveOverlaps=stores will retain them.  The correction overlaps are usually the single largest consumer of disk space during the assembly.\r\n- Remove the partitioned gkpStore copy when consensus is finished.\r\n- Use file names with five digits, instead of four, for overlap error adjustment.\r\n- Options minMemory and minThreads are now implemented.\r\n- Use all overlaps, not just the best, to position reads in unitigs/contigs, resulting in more accurate repeat and edge detection.\r\n- Implement the 'suggestCircular' flag in contigs and unitigs.  It is set to 'true' if the single sequence can be circularized.  Note: the flag is 'false' if two or more contigs are needed to form the circular chromosome.\r\n- Stability improvements to overlap store building when ovsMethod=parallel (the default for large genomes).\r\n- Easier restarts: if restarted from within the assembly directory, the -p, -d and read files can be omitted.\r\n- Improved logging: citations are output at the start of the run for any included software within Canu.\r\n\r\n\r\n## Bug Fixes\r\n\r\n- Fixed CIGAR multithreading bug in unitig and contig graphs which dropped some true edges.\r\n- Fix invalid characters in corrected reads due to out of bounds array access.\r\n- Fix useGrid=remote which failed to output commands when multiple jobs needed to be submitted.\r\n\r\n## Known Issues\r\n\r\nSee the [issues](http://github.com/marbl/canu/issues) page for up-to date open issues, or to report a problem.\r\n- When running each step (correct/trim/assemble) by hand, the assemble step will use corrected not trimmed reads when all steps are run with the same -d option. Run with different -d options as a workaround.\r\n- Large memory usage while unitig consensus calling on unitigs over 100MB in size; a 140Mb contig required approximately 75GB.\r\n- Large memory usage and runtime for long reads (e.g., Nanopore) when using the `overlapper=ovl` algorithm, and during Overlap Error Adjustment. The options `overlapper=mhap utgReAlign=true` is significantly faster but may produce slightly less contiguous assemblies on genomes >200 Mbp in size.\r\n- Bubbles are not captured in the contig graph, but are included in the unitig graph.  No attempt at marking bubbles is made.\r\n\r\nSee the [FAQ](http://canu.readthedocs.io/en/latest/faq.html) for many suggestions, including suggestions for specific data types, e.g., Nanopore r9 reads.\r\n\r\n## Legal\r\n\r\nCanu is derived from [Celera Assembler](http://wgs-assembler.sourceforge.net) and includes code from many other projects.  Most, but not all, of the code is [GPL](http://github.com/marbl/canu/blob/master/README.license.GPL) licensed.  See the [README.licenses](http://github.com/marbl/canu/blob/master/README.licenses) file and individual source code files for details.",
        "html_url": "https://github.com/marbl/canu/releases/tag/v1.6",
        "name": "Canu v1.6",
        "release_id": 7256379,
        "tag": "v1.6",
        "tarball_url": "https://api.github.com/repos/marbl/canu/tarball/v1.6",
        "type": "Release",
        "url": "https://api.github.com/repos/marbl/canu/releases/7256379",
        "value": "https://api.github.com/repos/marbl/canu/releases/7256379",
        "zipball_url": "https://api.github.com/repos/marbl/canu/zipball/v1.6"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "brianwalenz",
          "type": "User"
        },
        "date_created": "2017-04-17T19:32:38Z",
        "date_published": "2017-04-17T20:36:32Z",
        "description": "These are release notes for Canu version 1.5, which was released on April 17th, 2017. Canu is specialized for assembly of single-molecule high-noise sequences. Full documentation can be found at http://canu.readthedocs.org/.\r\n\r\nThis release  provides a stable, tested, and documented version of the software.  The binary distributions should work on any relatively recent version of the respective OS.  The source code distribution contains everything you need to create a binary distribution for your own specific OS.\r\n\r\n## Citation\r\n- Koren S, Walenz BP, Berlin K, Miller JR, Phillippy AM. [Canu: scalable and accurate long-read assembly via adaptive k-mer weighting and repeat separation](https://doi.org/10.1101/gr.215087.116). Genome Research. (2017).\r\n\r\n## Minimum Requirements\r\n- Perl 5.12.0, or File::Path 2.08\r\n- Java SE 8\r\n- GCC 4.5 (for compilation only)\r\n- OS X 10.10 (for binaries only)\r\n- gnuplot (optional, for generating diagnostic graphs)\r\n\r\n## Installation\r\n\r\nUsers can download Canu as source code or as pre-compiled binaries. The source code package needs to be compiled and installed before it can be used. The binary distributions need only be unpacked, but they are not available for all platforms.\r\n\r\nTo install from source code (the file can be named either `canu-v1.5.tar.gz` or just `v1.5.tar.gz`, depending on how it is downloaded):\r\n\r\n```\r\ngunzip -dc canu-v1.5.tar.gz | tar -xf -\r\ncd canu-1.5/src\r\nmake -j 8\r\ncd ..\r\n```\r\n\r\nTo install from a binary distribution:\r\n\r\n```\r\nxz -dc canu-1.5.*.tar.xz |tar -xf -\r\n```\r\n\r\nIn both cases, canu is installed directory in canu-1.5/<OS>-<ARCHITECTURE>, for example, canu-1.5/Linux-amd64.  You can run the assembler with:\r\n\r\n```\r\ncanu-1.5/*/bin/canu\r\n```\r\n\r\n## Changes\r\n\r\n- Add preliminary support for object storage.\r\n- Paths used in the various shell scripts and the diagnostic output are no longer full paths.\r\n- Use [Edlib](https://github.com/Martinsos/edlib) for read alignments during correction and consensus, which is both faster and generates higher quality results compared to the previous alignment algorithms.\r\n- Add options `rawErrorRate` and `correctedErrorRate`, both specifying the expected error in an alignment of two reads.  The previous `errorRate` option is still accepted, and is equivalent to 1/3 * `correctedErrorRate`.  Details are in [the tutorial](http://canu.readthedocs.io/en/latest/tutorial.html#error-rates).\r\n- Add experimental options `overlapper=mhap` and `utgReAlign=true` which are significantly faster on ultra-long sequences.  Both options need to be supplied.  Currently has limited testing and is run at your own risk. On large genomes (>200mb) it can produce a less contiguous assembly than the default.\r\n- The GFA output now has correct CIGAR strings for all links.\r\n- Support [staging](http://canu.readthedocs.io/en/latest/parameter-reference.html#file-staging) of some data on local disk for greatly improved performance during read correction.\r\n- Significantly better support for PBSPro and LSF.  Many thanks to the users that helped us work through problems.\r\n- Fix error when more than 10,000 jobs were created using using the ovsMethod=parallel overlap store creation algorithm.\r\n\r\n## Known Issues\r\n\r\nSee the [issues](http://github.com/marbl/canu/issues) page for up-to date open issues, or to report a problem.\r\n- Large memory usage while unitig consensus calling on unitigs over 100MB in size; a 140Mb contig required approximately 75GB.\r\n- Large memory usage and runtime for long reads (e.g., Nanopore) when using the `overlapper=ovl` algorithm, and during Overlap Error Adjustment.\r\n- Bubbles are not captured in the contig graph, but are included in the unitig graph.  No attempt at marking bubbles is made.\r\n\r\nSee the [FAQ](http://canu.readthedocs.io/en/latest/faq.html) for many suggestions, including suggestions for specific data types, e.g., Nanopore r9 reads.\r\n\r\n## Legal\r\n\r\nAs Canu is derived from the [Celera Assembler](http://wgs-assembler.sourceforge.net), most of the code is [GPL](http://github.com/marbl/canu/blob/master/README.license.GPL) licensed.  This distribution includes code from [Boost](http://www.boost.org), [pbdagcon](http://github.com/PacificBiosciences/pbdagcon), [pbutgcns](http://github.com/pbjd/pbutgcns), and [Falcon](http://github.com/PacificBiosciences/falcon). For a copyright summary see the [README.licenses](http://github.com/marbl/canu/blob/master/README.licenses) file as well as individual component licenses included in the repository ([boost](http://github.com/marbl/canu/blob/master/src/utgcns/libboost/LICENSE), [falcon](http://github.com/marbl/canu/blob/master/src/utgcns/libNDFalcon/LICENSE), [pbdagcon](http://github.com/marbl/canu/blob/master/src/utgcns/libpbutgcns/LICENSE)). For more details, see the header in each source file which details its history.",
        "html_url": "https://github.com/marbl/canu/releases/tag/v1.5",
        "name": "Canu v1.5",
        "release_id": 5549778,
        "tag": "v1.5",
        "tarball_url": "https://api.github.com/repos/marbl/canu/tarball/v1.5",
        "type": "Release",
        "url": "https://api.github.com/repos/marbl/canu/releases/5549778",
        "value": "https://api.github.com/repos/marbl/canu/releases/5549778",
        "zipball_url": "https://api.github.com/repos/marbl/canu/zipball/v1.5"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "brianwalenz",
          "type": "User"
        },
        "date_created": "2016-12-13T02:55:53Z",
        "date_published": "2016-12-13T21:18:29Z",
        "description": "These are release notes for Canu version 1.4, which was released on December 13, 2016. Canu is specialized for assembly of single-molecule high-noise sequences. Full documentation can be found at http://canu.readthedocs.org/.\r\n\r\nThis release  provides a stable, tested, and documented version of the software.  The binary distributions should work on any relatively recent version of the respective OS.  The source code distribution contains everything you need (even the Perl modules!) to create a binary distribution for your own specific OS.\r\n\r\n## Citation\r\n- Koren S, Walenz BP, Berlin K, Miller JR, Phillippy AM. [Canu: scalable and accurate long-read assembly via adaptive k-mer weighting and repeat separation](http://dx.doi.org/10.1101/071282). bioRxiv. (2016).\r\n\r\n## Minimum Requirements\r\n- Perl 5.12.0, or File::Path 2.08\r\n- Java SE 8\r\n- GCC 4.5 (for compilation only)\r\n- OS X 10.10 (for binaries only)\r\n- Gnuplot (optional, for generating diagnostic graphs)\r\n\r\n## Installation\r\nUsers can download Canu as source code or as pre-compiled binaries. The source code package needs to be compiled and installed before it can be used. The binary distributions need only be unpacked, but they are not available for all platforms.\r\n\r\nTo install from source code:\r\n\r\n```\r\ngunzip -dc v1.4.tar.gz |tar -xf -\r\ncd canu-1.4/src\r\nmake -j8\r\ncd ..\r\n```\r\n\r\nTo install from a binary distribution:\r\n\r\n```\r\nxz -dc canu-1.4.*.tar.xz |tar -xf -\r\n```\r\n\r\nIn both cases, canu is installed directory in canu-1.4/<OS>-<ARCHITECTURE>, for example, canu-1.4/Linux-amd64.  You can run the assembler with:\r\n\r\n```\r\ncanu-1.4/*/bin/canu\r\n```\r\n\r\n## Changes\r\n- Removed dependency on Filesys::Df.\r\n- Reduced size of overlap stores by 33 1/3%.\r\n- Added inline [Snappy](http://google.github.io/snappy/) compression overlaps, instead of a separate gzip process.  This greatly reduces resources required for building large overlap stores.\r\n- Memory mapped files are no longer used.  Performance on distributed file systems should be improved.  Virtual memory usage is greatly reduced.\r\n- Fixed a variety of issues in GFA output on unitigs, and added GFA output on contigs.\r\n- Added options `onSuccess` and `onFailure` to run a command when Canu terminates successfully or fails unexpectedly.\r\n- Added support for PBSPro.\r\n- Fixed the usual assortment of random bugs.\r\n- Added other minor improvements.\r\n\r\n## Known Issues\r\n\r\nSee the [issues](http://github.com/marbl/canu/issues) page for up-to date open issues. The currently known issues are:\r\n- For AT/GC rich eukaryotic genomes, it is beneficial to increase the filtering stringency over the default. Specifying corMaxEvidenceErate=0.15 (from the default of 0.2) is generally sufficient.\r\n- As a computational optimization, you can decrease the error rate (errorRate=0.013), especially for inbred strains, on Oxford Nanopore R9 2D data and high-coverage P6 PacBio data.\r\n- LSF support has limited testing\r\n- Large memory usage while unitig consensus calling on unitigs over 100MB in size (140Mb contig uses approximate 75GB).\r\n- Bubbles are not captured in the contig graph, but are included in the unitig graph.  No attempt at marking bubbles is made.\r\n\r\n## Legal\r\n\r\nAs Canu is derived from the [Celera Assembler](http://wgs-assembler.sourceforge.net), most of the code is [GPL](http://github.com/marbl/canu/blob/master/README.license.GPL) licensed.  This distribution includes code from [Boost](http://www.boost.org), [pbdagcon](http://github.com/PacificBiosciences/pbdagcon), [pbutgcns](http://github.com/pbjd/pbutgcns), and [Falcon](http://github.com/PacificBiosciences/falcon). For a copyright summary see the [README.licenses](http://github.com/marbl/canu/blob/master/README.licenses) file as well as individual component licenses included in the repository ([boost](http://github.com/marbl/canu/blob/master/src/utgcns/libboost/LICENSE), [falcon](http://github.com/marbl/canu/blob/master/src/utgcns/libNDFalcon/LICENSE), [pbdagcon](http://github.com/marbl/canu/blob/master/src/utgcns/libpbutgcns/LICENSE)). For more details, see the header in each source file which details its history.",
        "html_url": "https://github.com/marbl/canu/releases/tag/v1.4",
        "name": "Canu v1.4",
        "release_id": 4856440,
        "tag": "v1.4",
        "tarball_url": "https://api.github.com/repos/marbl/canu/tarball/v1.4",
        "type": "Release",
        "url": "https://api.github.com/repos/marbl/canu/releases/4856440",
        "value": "https://api.github.com/repos/marbl/canu/releases/4856440",
        "zipball_url": "https://api.github.com/repos/marbl/canu/zipball/v1.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "skoren",
          "type": "User"
        },
        "date_created": "2016-05-31T18:31:47Z",
        "date_published": "2016-06-08T14:30:40Z",
        "description": "These are release notes for Canu version 1.3, which was released on June 8, 2016. Canu is specialized for assembly of single-molecule high-noise sequences. Full documentation can be found at http://canu.readthedocs.org/.\n\nThis release provides a stable, tested, and documented version of the software.  The binary distributions should work on any relatively recent version of the respective OS.  The source code distribution contains everything you need (even the Perl modules!) to create a binary distribution for your own specific OS.\n\n## Citation\n- Berlin K, Koren S, Chin CS, Drake PJ, Landolin JM, Phillippy AM [Assembling Large Genomes with Single-Molecule Sequencing and Locality Sensitive Hashing](http://www.nature.com/nbt/journal/v33/n6/abs/nbt.3238.html). Nature Biotechnology. (2015).\n- Stay tuned for a Canu-specific citation\n\n## Installation\n\n### Requirements\n- Java SE 8 +\n- GCC 4.5+ (for compilation only)\n- Filesys::Df Perl module (for binaries only, depending on perl version)\n- OS X 10.10 or newer (for binaries only)\n- Gnuplot (optional for generating HTML graphs)\n\nUsers can download Canu as source code or as pre-compiled binaries. The source code package needs to be compiled and installed before it can be used. The binary distributions need only be unpacked, but they are not available for all platforms.\n\nTo install from source code:\n\n```\ngzip -dc canu-1.3.tar.gz | tar -xf -\ncd canu-1.3/src\nmake -j8\ncd ..\n```\n\nTo install from a binary distribution:\n\n```\nbzip2 -dc canu-1.3*.tar.bz2 | tar -xf -\n```\n\nIn both cases, canu is installed directory in canu-1.3/<OS>-<ARCHITECTURE>, for example, canu-1.3/Linux-amd64.  You can run the assembler with:\n\n```\ncanu-1.3/*/bin/canu\n```\n\n## Changes\n- Rewritten bogart algorithm to auto-set error rate and avoid false-breaks due to repeats.\n- Updated GFA output to include all edges in the graph.\n- Updated MHAP release to 2.1 for further speed improvements and improved repeat suppression.\n- Auto-set MHAP and other parameters based on genome coverage.\n- Fix slow 3-overlapErrorAdjustment runtime.\n- Fix memory request for 3-overlapErrorAdjustment.\n- Pipeline bug fixes\n\n## Known Issues\n\nSee the [issues](http://github.com/marbl/canu/issues) page for up-to date open issues. The currently known issues are:\n- For AT/GC rich eukaryotic genomes, it is beneficial to increase the filtering stringency over the default. Specifying corMaxEvidenceErate=0.15 (from the default of 0.2) is generally sufficient.\n- As a computational optimization, you can decrease the error rate (errorRate=0.013), especially for inbred strains, on Oxford Nanopore R9 2D data and high-coverage P6 PacBio data.\n- LSF support has limited testing\n- Large memory usage while unitig consensus calling on unitigs over 100MB in size (140Mb contig uses approximate 75GB).\n- Distributed file systems (such as GPFS) causes issues with memory mapped files, slowing down parts of Canu, including meryl (0-mercounts) and falcon-sense (2-correction).\n\n## Legal\n\nAs Canu is derived from the [Celera Assembler](http://wgs-assembler.sourceforge.net), most of the code is [GPL](http://github.com/marbl/canu/blob/master/README.license.GPL) licensed.  This distribution includes code from [Boost](http://www.boost.org), [pbdagcon](http://github.com/PacificBiosciences/pbdagcon), [pbutgcns](http://github.com/pbjd/pbutgcns), and [Falcon](http://github.com/PacificBiosciences/falcon). For a copyright summary see the [README.licenses](http://github.com/marbl/canu/blob/master/README.licenses) file as well as individual component licenses included in the repository ([boost](http://github.com/marbl/canu/blob/master/src/utgcns/libboost/LICENSE), [falcon](http://github.com/marbl/canu/blob/master/src/utgcns/libNDFalcon/LICENSE), [pbdagcon](http://github.com/marbl/canu/blob/master/src/utgcns/libpbutgcns/LICENSE)). For more details, see the header in each source file which details its history.\n",
        "html_url": "https://github.com/marbl/canu/releases/tag/v1.3",
        "name": "Canu v1.3",
        "release_id": 3340960,
        "tag": "v1.3",
        "tarball_url": "https://api.github.com/repos/marbl/canu/tarball/v1.3",
        "type": "Release",
        "url": "https://api.github.com/repos/marbl/canu/releases/3340960",
        "value": "https://api.github.com/repos/marbl/canu/releases/3340960",
        "zipball_url": "https://api.github.com/repos/marbl/canu/zipball/v1.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "skoren",
          "type": "User"
        },
        "date_created": "2016-03-31T18:29:57Z",
        "date_published": "2016-04-07T22:03:48Z",
        "description": "These are release notes for Canu version 1.2, which was released on April 7, 2016. Canu is specialized for assembly of single-molecule high-noise sequences. Full documentation can be found at http://canu.readthedocs.org/.\n\nThis release provides a stable, tested, and documented version of the software.  The binary distributions should work on any relatively recent version of the respective OS.  The source code distribution contains everything you need (even the Perl modules!) to create a binary distribution for your own specific OS.\n\n## Citation\n- Berlin K, Koren S, Chin CS, Drake PJ, Landolin JM, Phillippy AM [Assembling Large Genomes with Single-Molecule Sequencing and Locality Sensitive Hashing](http://www.nature.com/nbt/journal/v33/n6/abs/nbt.3238.html). Nature Biotechnology. (2015).\n- Stay tuned for a Canu-specific citation\n\n## Installation\n\n### Requirements\n- Java SE 8 +\n- GCC 4.5+ (for compilation only)\n\nUsers can download Canu as source code or as pre-compiled binaries. The source code package needs to be compiled and installed before it can be used. The binary distributions need only be unpacked, but they are not available for all platforms.\n\nTo install from source code:\n\n```\ngzip -dc canu-1.2.tar.gz | tar -xf -\ncd canu-1.1/src\nmake -j8\ncd ..\n```\n\nTo install from a binary distribution:\n\n```\nbzip2 -dc canu-1.2*.tar.bz2 | tar -xf -\n```\n\nIn both cases, canu is installed directory in canu-1.2/<OS>-<ARCHITECTURE>, for example, canu-1.2/Linux-amd64.  You can run the assembler with:\n\n```\ncanu-1.2/*/bin/canu\n```\n\n## Changes\n- Fix bug of not filtering overlaps sufficiently before input to falcon_sense, leading to fewer corrected reads and a low-quality assembly.\n\n## Known Issues\n\nSee the [issues](http://github.com/marbl/canu/issues) page for up-to date open issues. The currently known issues are:\n- **For large high-coverage genomes it is beneficial to use the fast MHAP mode (generally over 70X).**\n- **Bogart (unitigger) has false positives in repeat breaking. Currently, the temporary workaround is to increase the minimum overlap size to avoid detecting false repeats caused by short overlaps. Canu will automatically do this for large (>10MB) genomes while the fixed algorithm is tested.**\n- **For AT/GC rich genomes, it is beneficial to increase the filtering stringency over the default. Specifying corMaxEvidenceErate=0.15 (from the default of 0.2) is generally sufficient.**\n- LSF support has limited testing\n- Large memory usage while unitig consensus calling on unitigs over 100MB in size (140Mb contig uses approximate 75GB).\n- Distributed file systems (such as GPFS) causes issues with memory mapped files, slowing down parts of Canu, including meryl (0-mercounts) and falcon-sense (2-correction).\n\n## Legal\n\nAs Canu is derived from the [Celera Assembler](http://wgs-assembler.sourceforge.net), most of the code is [GPL](http://github.com/marbl/canu/blob/master/README.license.GPL) licensed.  This distribution includes code from [Boost](http://www.boost.org), [pbdagcon](http://github.com/PacificBiosciences/pbdagcon), [pbutgcns](http://github.com/pbjd/pbutgcns), and [Falcon](http://github.com/PacificBiosciences/falcon). For a copyright summary see the [README.licenses](http://github.com/marbl/canu/blob/master/README.licenses) file as well as individual component licenses included in the repository ([boost](http://github.com/marbl/canu/blob/master/src/utgcns/libboost/LICENSE), [falcon](http://github.com/marbl/canu/blob/master/src/utgcns/libNDFalcon/LICENSE), [pbdagcon](http://github.com/marbl/canu/blob/master/src/utgcns/libpbutgcns/LICENSE)). For more details, see the header in each source file which details its history.\n",
        "html_url": "https://github.com/marbl/canu/releases/tag/v1.2",
        "name": "Canu v1.2",
        "release_id": 2965703,
        "tag": "v1.2",
        "tarball_url": "https://api.github.com/repos/marbl/canu/tarball/v1.2",
        "type": "Release",
        "url": "https://api.github.com/repos/marbl/canu/releases/2965703",
        "value": "https://api.github.com/repos/marbl/canu/releases/2965703",
        "zipball_url": "https://api.github.com/repos/marbl/canu/zipball/v1.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "skoren",
          "type": "User"
        },
        "date_created": "2016-03-09T14:43:09Z",
        "date_published": "2016-03-11T16:30:33Z",
        "description": "These are release notes for Canu version 1.1, which was released on March 11, 2016. Canu is specialized for assembly of single-molecule high-noise sequences. Full documentation can be found at http://canu.readthedocs.org/.\n\nThis release provides a stable, tested, and documented version of the software.  The binary distributions should work on any relatively recent version of the respective OS.  The source code distribution contains everything you need (even the Perl modules!) to create a binary distribution for your own specific OS.\n\n## Citation\n- Berlin K, Koren S, Chin CS, Drake PJ, Landolin JM, Phillippy AM [Assembling Large Genomes with Single-Molecule Sequencing and Locality Sensitive Hashing](http://www.nature.com/nbt/journal/v33/n6/abs/nbt.3238.html). Nature Biotechnology. (2015).\n- Stay tuned for a Canu-specific citation\n\n## Installation\n\n### Requirements\n- Java SE 8 +\n- GCC 4.5+ (for compilation only)\n\nUsers can download Canu as source code or as pre-compiled binaries. The source code package needs to be compiled and installed before it can be used. The binary distributions need only be unpacked, but they are not available for all platforms.\n\nTo install from source code:\n\n```\ngzip -dc canu-1.1.tar.gz | tar -xf -\ncd canu-1.1/src\nmake -j8\ncd ..\n```\n\nTo install from a binary distribution:\n\n```\nbzip2 -dc canu-1.1*.tar.bz2 | tar -xf -\n```\n\nIn both cases, canu is installed directory in canu-1.1/<OS>-<ARCHITECTURE>, for example, canu-1.1/Linux-amd64.  You can run the assembler with:\n\n```\ncanu-1.1/*/bin/canu\n```\n\n## Changes\n- Support for reads up to 2Mbp in size (up from 130Kbp).\n- Incorporate MHAP 2.0 which is 5X faster than previous version and has higher specificity\n- Add corMhapSensitivity=fast option which can generate correction overlaps for a human genome in < 2500 CPU hours (full assembly <25,000 CPU hours). This option is recommended for genomes with deeper coverage (60X+).\n- Add GFA output\n- Improve diploid-aware assembly by categorizing output as primary contigs or unmerged bubbles. Annotate repeat and unique contigs in the output.\n- Enable parallel overlap store construction on large genomes\n- Enable minimap as an option for generating overlaps during correction step. Corrected reads are generated as before with falcon_sense.\n- Fix bug using shorter rather than longer reads for corrected reads/consensus computation\n- Fix bug resuming without providing input sequences which would incorrectly set error rates\n- Fix bug in bogart which would demote contained sequences as spurs incorrectly\n- Fix bugs in falcon_sense which would hang when input had N bases and limit corrected reads to 65Kbp\n- Fix falcon_sense support on OSX <10.10.\n- Fix various pipeline bugs\n\n## Known Issues\n\nSee the [issues](http://github.com/marbl/canu/issues) page for up-to date open issues. The currently known issues are:\n- Canu 1.1 is not backwards compatible with Canu 1.0. If you have an in-process assembly, do not upgrade to Canu 1.1 until it completes.\n- **There is a bug with filtering overlaps before passing them to falcon_sense for generating corrected reads on repetitive genomes. If you are assembling large/repetitive genomes (generally >500Mb), you must specify 'corMaxEvidenceErate=0.2' ('corMaxEvidenceErate=0.3' for low-coverage datasets) while the fix is tested.**\n- **For large high-coverage genomes it is beneficial to use the fast MHAP mode (generally over 70X).**\n- **Bogart (unitigger) has false positives in repeat breaking. Currently, the temporary workaround is to increase the minimum overlap size to avoid detecting false repeats caused by short overlaps. Canu will automatically do this for large (>100MB) genomes while the fixed algorithm is tested.**\n- LSF support has limited testing\n- Large memory usage while unitig consensus calling on unitigs over 100MB in size (140Mb contig uses approximate 75GB).\n- Distributed file systems (such as GPFS) causes issues with memory mapped files, slowing down parts of Canu, including meryl (0-mercounts) and falcon-sense (2-correction).\n\n## Legal\n\nAs Canu is derived from the [Celera Assembler](http://wgs-assembler.sourceforge.net), most of the code is [GPL](http://github.com/marbl/canu/blob/master/README.license.GPL) licensed.  This distribution includes code from [Boost](http://www.boost.org), [pbdagcon](http://github.com/PacificBiosciences/pbdagcon), [pbutgcns](http://github.com/pbjd/pbutgcns), and [Falcon](http://github.com/PacificBiosciences/falcon). For a copyright summary see the [README.licenses](http://github.com/marbl/canu/blob/master/README.licenses) file as well as individual component licenses included in the repository ([boost](http://github.com/marbl/canu/blob/master/src/utgcns/libboost/LICENSE), [falcon](http://github.com/marbl/canu/blob/master/src/utgcns/libNDFalcon/LICENSE), [pbdagcon](http://github.com/marbl/canu/blob/master/src/utgcns/libpbutgcns/LICENSE)). For more details, see the header in each source file which details its history.\n",
        "html_url": "https://github.com/marbl/canu/releases/tag/v1.1",
        "name": "Canu v1.1",
        "release_id": 2737156,
        "tag": "v1.1",
        "tarball_url": "https://api.github.com/repos/marbl/canu/tarball/v1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/marbl/canu/releases/2737156",
        "value": "https://api.github.com/repos/marbl/canu/releases/2737156",
        "zipball_url": "https://api.github.com/repos/marbl/canu/zipball/v1.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "skoren",
          "type": "User"
        },
        "date_created": "2015-12-29T19:15:00Z",
        "date_published": "2015-12-29T19:50:24Z",
        "description": "These are release notes for Canu version 1.0, which was released on Dec 29th, 2015. Canu is specialized for assembly of single-molecule high-noise sequences. Full documentation can be found [online](http://canu.readthedocs.org)\n\nThis distribution package provides a stable, tested, documented version of the software. The distribution is usable on most Unix-like platforms, and some platforms have pre-compiled binary distributions ready for installation.\nThe source code package includes full source code, Makefiles, and scripts.\n\n## Citation\n- Berlin K, Koren S, Chin CS, Drake PJ, Landolin JM, Phillippy AM [Assembling Large Genomes with Single-Molecule Sequencing and Locality Sensitive Hashing](http://www.nature.com/nbt/journal/v33/n6/abs/nbt.3238.html). Nature Biotechnology. (2015).\n- Stay tuned for a Canu-specific citation\n\n## Compilation and Installation\n\n### Requirements\n- Java SE 8 +\n- GCC 4.5+ (for compilation only)\n\nUsers can download Canu as source code or as pre-compiled binaries. The source code package needs to be compiled and installed before it can be used. The binary distributions need only be unpacked, but they are not available for all platforms.\nTo use the source code, execute these commands on any unix-like platform:\n\n```\ngzip -dc canu-1.0.tar.gz | tar -xf -\ncd canu-1.0/src\nmake -j8\ncd ..\n```\n\nTo use the binary distributions, choose a platform, download that package, then unpack it with some unix command like this:\n\n```\nbzip2 -dc canu-1.0*.tar.bz2 | tar -xf -\n```\n\nIn both cases, you can run the assembler with:\n\n```\ncanu/*/bin/canu\n```\n\n## Known Issues\n\nSee the [issues](http://github.com/marbl/canu/issues) page for up-to date open issues. The currently known issues are:\n- LSF support is untested\n- Large memory usage while unitig consensus calling on unitigs over 100MB in size (140Mb contig uses approximate 75GB).\n- Distributed file systems (such as GPFS) causes issues with memory mapped files, slowing down parts of Canu, including meryl (0-mercounts) and falcon-sense (2-correction).\n\n## Legal\n\nAs Canu is derived from the [Celera Assembler](http://wgs-assembler.sourceforge.net), most of the code is [GPL](http://github.com/marbl/canu/blob/master/README.license.GPL) licensed.  This distribution includes code from [Boost](http://www.boost.org), [pbdagcon](http://github.com/PacificBiosciences/pbdagcon), [pbutgcns](http://github.com/pbjd/pbutgcns), and [Falcon](http://github.com/PacificBiosciences/falcon). For a copyright summary see the [README.licenses](http://github.com/marbl/canu/blob/master/README.licenses) file as well as individual component licenses included in the repository ([boost](http://github.com/marbl/canu/blob/master/src/utgcns/libboost/LICENSE), [falcon](http://github.com/marbl/canu/blob/master/src/utgcns/libNDFalcon/LICENSE), [pbdagcon](http://github.com/marbl/canu/blob/master/src/utgcns/libpbutgcns/LICENSE)). For more details, see the header in each source file which details its history.\n",
        "html_url": "https://github.com/marbl/canu/releases/tag/v1.0",
        "name": "Canu v1.0",
        "release_id": 2351579,
        "tag": "v1.0",
        "tarball_url": "https://api.github.com/repos/marbl/canu/tarball/v1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/marbl/canu/releases/2351579",
        "value": "https://api.github.com/repos/marbl/canu/releases/2351579",
        "zipball_url": "https://api.github.com/repos/marbl/canu/zipball/v1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Run:",
        "parent_header": [
          "Canu"
        ],
        "type": "Text_excerpt",
        "value": "Brief command line help:\n\n    ../<architecture>/bin/canu\n\nFull list of parameters:\n\n    ../<architecture>/bin/canu -options\n"
      },
      "source": "https://raw.githubusercontent.com/marbl/canu/master/README.licenses",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 03:00:11",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 654
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ]
}