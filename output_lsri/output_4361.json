{
  "application_domain": [
    {
      "confidence": 10.39,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "GREEN-VARAN and the GREEN-DB"
        ],
        "type": "Text_excerpt",
        "value": "When you use GREEN-DB or GREEN-VARAN tools please cite:\n[GREEN-DB: a framework for the annotation and prioritization of non-coding regulatory variants in whole-genome sequencing](https://www.biorxiv.org/content/10.1101/2020.09.17.301960) Giacopuzzi E., Popitsch N., Taylor JC. BiorXiv (2021)\n\nWhen you use GREEN-VARAN workflow for small variants annotation please also cite:\n\n[Vcfanno: fast, flexible annotation of genetic variants](https://genomebiology.biomedcentral.com/articles/10.1186/s13059-016-0973-5)\nBrent S. Pedersen, Ryan M. Layer & Aaron R. Quinlan. Genome Biology volume 17, Article number: 118 (2016)\n\nAdditionally, when you use any prediction score for annotation, please cite the corresponding publication.\n"
      },
      "source": "https://raw.githubusercontent.com/edg1983/GREEN-VARAN/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/edg1983/GREEN-VARAN"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-07-28T11:13:12Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-03T09:04:39Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Annotate non-coding regulatory vars using our GREEN-DB, prediction scores, conservation and pop AF"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.994683276291336,
      "result": {
        "original_header": "GREEN-VARAN and the GREEN-DB",
        "type": "Text_excerpt",
        "value": "This is the home of the GREEN-DB and companion tools (GREEN-VARAN)\n \n"
      },
      "source": "https://raw.githubusercontent.com/edg1983/GREEN-VARAN/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9986363815540096,
      "result": {
        "original_header": "GREEN-DB",
        "type": "Text_excerpt",
        "value": "**Genomic Regulatory Elements ENcyclopedia Database**\nA collection of ~2.4M regulatory regions in the human genome, with information about controlled genes, tissues of activity and associated phenotypes. GREEN-DB is available for free for academic usage in a [Zenodo repository](https://zenodo.org/record/5636209)\n \n"
      },
      "source": "https://raw.githubusercontent.com/edg1983/GREEN-VARAN/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8893953340306613,
      "result": {
        "original_header": "GREEN-VARAN",
        "type": "Text_excerpt",
        "value": "**Genomic Regulatory Elements ENcyclopedia VARiant ANnotation**\nAnnotate non-coding regulatory variants in a VCF with information from GREEN-DB \n- possibly controlled genes\n- overlapping regulatory region IDs and data sources\n- overlapping regulatory regions max constraint value\n \n"
      },
      "source": "https://raw.githubusercontent.com/edg1983/GREEN-VARAN/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9608820539235414,
      "result": {
        "original_header": "GREEN-VARAN workflow",
        "type": "Text_excerpt",
        "value": "**A Nextflow workflow for complete VCF processing**\nGiven a VCF, ideally annotated for gene consequences with snpEff or bcftools, the workflow can be used to automate processing: \n[Detailed documentation](https://green-varan.readthedocs.io/en/latest) on GREEN-DB and GREEN-VARAN tool and workflow is provided in ReadTheDocs\n \n"
      },
      "source": "https://raw.githubusercontent.com/edg1983/GREEN-VARAN/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9978423503829374,
      "result": {
        "original_header": "INFO fields",
        "type": "Text_excerpt",
        "value": "| tag                  | data type | description                                                                                                                                             |\n| -------------------- | --------- | ------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| greendb_id           | String    | Comma-separated list of GREEN-DB IDs identifying the regions that overlap this variant                                                                  |\n| greendb_stdtype      | String    | Comma-separated list of standard region types as annotated in GREEN-DB for regions overlapping the variant                                              |\n| greendb_dbsource     | String    | Comma-separated list of data sources as annotated in GREEN-DB for regions overlapping the variant                                                       |\n| greendb_level        | Integer   | Variant prioritization level computed by GREEN-VARAN. See Prioritization section below                                                                  |\n| greendb_more_support | Integer   | Sum up of the additional pieces of evidence that support this variant as configured in the prioritization JSON                                          |\n| greendb_constraint   | Float     | The maximum constraint value across GREEN-DB regions overlapping the variant                                                                            |\n| greendb_genes        | String    | Possibly controlled genes for regulatory regions overlapping this variant                                                                               |\n| greendb_VOI          | Flag      | When `--genes` option is active this flag is set when any of the input genes is among the possibly controlled genes for overlapping regulatory regions. |\n \n"
      },
      "source": "https://raw.githubusercontent.com/edg1983/GREEN-VARAN/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9359943043262877,
      "result": {
        "original_header": "Updated gene consequences",
        "type": "Text_excerpt",
        "value": "By default, GREEN-VARAN search for the standard ANN (SnpEff), CSQ (VEP) or BCSQ (bcftools csq) annotation fields in the input VCF and update gene consequences in the detected field. If multiple compatible fields are found, only ANN is updated. You can configure a specific annotation field to update using `-q, --csq_field` option. Note that if the configured field is not found in the header, GREEN-VARAN will still search for the default ones.\nIf none is found, GREEN-VARAN will create a new ANN field. To switch off gene consequence update use the `--noupdate` option. \n"
      },
      "source": "https://raw.githubusercontent.com/edg1983/GREEN-VARAN/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.953144871958495,
      "result": {
        "original_header": "Prioritization of small variants",
        "type": "Text_excerpt",
        "value": "GREEN-VARAN will consider GREEN-DB annotations, additional functional regions and non-coding impact prediction scores to provide a prioritization level for each annotated variant. This level is annotated under `greenvaran_level` tag in the INFO field. \nThis fields is an integer from 0 to N which summarize evidences supporting a regulatory impact for the variant. Higher values are associated to a higher support of regulatory impact. \n1. **gnomAD_AF, gnomAD_AF_nfe**: float values describing global and NFE population AF from gnomAD\n2. **ncER, FATHMM-MKL and ReMM**: float values providing scores predictions\n3. **TFBS, DNase and UCNE**: flags describing overlap with additional functional regions \nThe default behaviour is `--prioritization_strategy levels` which reproduce the 4 levels as described in the paper.\nAlternatively, you can chose a \"pile-up\" approach setting `--prioritization_strategy pileup` which simply sum evidences across levels. This means that the criteria described above are tested independently and the level reported is increased by one for each satisfied criteria. \n"
      },
      "source": "https://raw.githubusercontent.com/edg1983/GREEN-VARAN/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://green-varan.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/edg1983/GREEN-VARAN/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/edg1983/GREEN-VARAN/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 6
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/edg1983/GREEN-VARAN/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "edg1983/GREEN-VARAN"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "GREEN-VARAN and the GREEN-DB"
      },
      "source": "https://raw.githubusercontent.com/edg1983/GREEN-VARAN/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/edg1983/GREEN-VARAN/master/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/edg1983/GREEN-VARAN/master/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/edg1983/GREEN-VARAN/master/nim_compile.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/edg1983/GREEN-VARAN/master/local_compile.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/edg1983/GREEN-VARAN/master/resources/prepare_resources.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://www.singularity-hub.org/static/img/hosted-singularity--hub-%23e32929.svg"
      },
      "source": "https://raw.githubusercontent.com/edg1983/GREEN-VARAN/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "GREEN-VARAN and the GREEN-DB"
        ],
        "type": "Text_excerpt",
        "value": "GREEN-VARAN tools are written in Nim. GREEN-VARAN relies on [hts-nim](https://github.com/brentp/hts-nim) by Brent Pedersen for fast VCF processing. The GREEN-DB BED files are needed for annotation (see Download the supporting files)\n"
      },
      "source": "https://raw.githubusercontent.com/edg1983/GREEN-VARAN/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Compile the tool",
        "parent_header": [
          "GREEN-VARAN and the GREEN-DB",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "Alternatively, you can clone the repository\n`git clone https://github.com/edg1983/GREEN-VARAN.git`\n\nAnd then compile the greenvaran using [Nim compiler](https://nim-lang.org/).\nGREEN-VARAN requires\n\n- nim >= 0.10\n- hts-nim >= 0.3.4\n- argparse 0.10.1\n\nIf you have Singularity installed, you can use the script `nim_compile.sh` to create a static binary with no dependencies\nThis uses musl-hts-nim as described in hts-nim repository (see https://github.com/brentp/hts-nim#static-binary-with-singularity)\n\nThe accessory greendb_query tool can be compiled using `nim compile greendb_query.nim`\n"
      },
      "source": "https://raw.githubusercontent.com/edg1983/GREEN-VARAN/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9725557668125665,
      "result": {
        "original_header": "GREEN-VARAN and the GREEN-DB",
        "type": "Text_excerpt",
        "value": "**Genomic Regulatory Elements ENcyclopedia**\n```\n                                              _.-~`  `~-.\n                  _.--~~~---,.__          _.,;; .   -=(@'`\\\n               .-`              ``~~~~--~~` ';;;       ____)\n            _.'            '.              ';;;;;    '`_.'\n         .-~;`               `\\           ' ';;;;;__.~`\n       .' .'          `'.     |           /  /;''\n        \\/      .---'' ``)   /'-._____.--'\\  \\\\\n       _/|    (`        /  /`              `\\ \\__\n',    `/- \\   \\      __/  (_                /-\\-\\-`\n  `;'-..___)   |     `/-\\-\\-`\n    `-.       .'\njgs    `~~~~``\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/edg1983/GREEN-VARAN/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.917195554419675,
      "result": {
        "original_header": "Updated gene consequences",
        "type": "Text_excerpt",
        "value": "By default, GREEN-VARAN search for the standard ANN (SnpEff), CSQ (VEP) or BCSQ (bcftools csq) annotation fields in the input VCF and update gene consequences in the detected field. If multiple compatible fields are found, only ANN is updated. You can configure a specific annotation field to update using `-q, --csq_field` option. Note that if the configured field is not found in the header, GREEN-VARAN will still search for the default ones.\nIf none is found, GREEN-VARAN will create a new ANN field. To switch off gene consequence update use the `--noupdate` option. \n"
      },
      "source": "https://raw.githubusercontent.com/edg1983/GREEN-VARAN/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9887169864628562,
      "result": {
        "original_header": "Prioritization of small variants",
        "type": "Text_excerpt",
        "value": "You need 3 set of information in your input VCF to run prioritization mode when using the default config provided. \nThe prioritization schema can be adjusted by modifying the .json file passed to `--config`. A default file is provided in config folder. \n"
      },
      "source": "https://raw.githubusercontent.com/edg1983/GREEN-VARAN/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/edg1983/GREEN-VARAN/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2020 Edoardo Giacopuzzi\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
      },
      "source": "https://raw.githubusercontent.com/edg1983/GREEN-VARAN/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "GREEN-VARAN"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "edg1983"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 106439,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Nim",
        "size": 56583,
        "type": "Programming_language",
        "value": "Nim"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Nextflow",
        "size": 27344,
        "type": "Programming_language",
        "value": "Nextflow"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 15156,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 5559,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 1539,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/edg1983/GREEN-VARAN/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "edg1983",
          "type": "User"
        },
        "date_created": "2024-09-03T09:04:32Z",
        "date_published": "2024-09-03T09:05:24Z",
        "description": "This release enhances compatibility for consequence annotation fields.\r\n\r\nThe tool now parses the expected annotation format directly from the VCF header as long as the description of the field contains a format: field1|field2|... or xxx: field1|field2|... structure.\r\n\r\nThis ensures support for annotations added by popular tools like SnpEff, bcftools csq, and VEP (solves https://github.com/edg1983/GREEN-VARAN/issues/17), and it can also accommodate any other annotation as long as the schema is parsable from the header.\r\n\r\nA new test file is also provided in the test folder containing all 3 fields (ANN, BCSQ, CSQ).\r\n\r\nAdditional minor improvements to greendb_query.\r\n\r\nGrab the pre-compiled binary to get the new release.",
        "html_url": "https://github.com/edg1983/GREEN-VARAN/releases/tag/v1.3.3",
        "name": "GREEN-VARAN v1.3.3",
        "release_id": 173167340,
        "tag": "v1.3.3",
        "tarball_url": "https://api.github.com/repos/edg1983/GREEN-VARAN/tarball/v1.3.3",
        "type": "Release",
        "url": "https://api.github.com/repos/edg1983/GREEN-VARAN/releases/173167340",
        "value": "https://api.github.com/repos/edg1983/GREEN-VARAN/releases/173167340",
        "zipball_url": "https://api.github.com/repos/edg1983/GREEN-VARAN/zipball/v1.3.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "edg1983",
          "type": "User"
        },
        "date_created": "2024-05-15T14:40:33Z",
        "date_published": "2024-05-15T14:46:57Z",
        "description": "This new release improves the logic in SV interval construction.\r\n\r\n1. Now, CIEND (or any equivalent INFO tag provided by `--ciend`) is used to adjust the end position when constructing the SV interval.\r\n2. The new argument `--maxlen` can be set to limit annotation to variants with length below a specified limit. Note that the length threshold is applied on the SV interval as determined by the tool logic, not on SVLEN field. The default is set to 2Mb.\r\n\r\nGrab the pre-compiled binaries or compile from source to get the new version\r\n",
        "html_url": "https://github.com/edg1983/GREEN-VARAN/releases/tag/v1.3.2",
        "name": "GREEN-VARAN v1.3.2",
        "release_id": 155900894,
        "tag": "v1.3.2",
        "tarball_url": "https://api.github.com/repos/edg1983/GREEN-VARAN/tarball/v1.3.2",
        "type": "Release",
        "url": "https://api.github.com/repos/edg1983/GREEN-VARAN/releases/155900894",
        "value": "https://api.github.com/repos/edg1983/GREEN-VARAN/releases/155900894",
        "zipball_url": "https://api.github.com/repos/edg1983/GREEN-VARAN/zipball/v1.3.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "edg1983",
          "type": "User"
        },
        "date_created": "2024-03-29T13:19:07Z",
        "date_published": "2024-03-29T13:28:04Z",
        "description": "This minor release improves the logic for building structural variant intervals from variants.\r\n\r\nThe procedure to build the interval from a structural variant is now as follows:\r\n\r\nFor DEL, DUP, INV:\r\n\r\n1. When END is present in INFO, this is used as end_position\r\n2. Otherwise, it looks for SVLEN in INFO, takes the absolute value of this, and sets end_position=POS+abs(SVLEN)\r\n3. When both are missing, the variant is skipped\r\n4. When the configured CIPOS field is present in INFO, this is used to correct the start and end positions (if missing, then is set to zero, and no correction on start/end is made)\r\n\r\nSince INS or BND are mostly represented by single positions in VCF, i.e. SVLEN=1 and END=POS+1, you can configure a manual padding value using `--padding`. This padding value is added/subtracted after all previous steps when SVTYPE equals INS or BND.\r\n\r\nSome examples\r\n\r\n| CHROM | POS | SVTYPE | SVLEN | END | CIPOS | PADDING | INTERVAL |\r\n|---------|------|---------|--------|------|-------|-----------|-----------|\r\n| chr1 | 1000 | DEL | -100 | 1100 | -5,10 | 5 | chr1:995-1110 |\r\n| chr1 | 1000 | DEL | -200 | NA | -5,10 | 5 | chr1:995-1210 |\r\n| chr1 | 1000 | DEL | -100 | 1100 | NA | 5 | chr1:1000-1100 |\r\n| chr1 | 1000 | DEL | -200 | NA | NA | 5 | chr1:1000-1200 |\r\n| chr1 | 1000 | INS | 1 | 1001 | -5,10 | 5 | chr1:990-1016 |\r\n| chr1 | 1000 | INS | 1 | 1001 | NA | 20 | chr1:980-1021 |\r\n| chr1 | 1000 | INS | 1 | 1001 | NA | NA | chr1:1000-1001 |",
        "html_url": "https://github.com/edg1983/GREEN-VARAN/releases/tag/v1.3.1",
        "name": "GREEN-VARAN v1.3.1",
        "release_id": 149021253,
        "tag": "v1.3.1",
        "tarball_url": "https://api.github.com/repos/edg1983/GREEN-VARAN/tarball/v1.3.1",
        "type": "Release",
        "url": "https://api.github.com/repos/edg1983/GREEN-VARAN/releases/149021253",
        "value": "https://api.github.com/repos/edg1983/GREEN-VARAN/releases/149021253",
        "zipball_url": "https://api.github.com/repos/edg1983/GREEN-VARAN/zipball/v1.3.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "edg1983",
          "type": "User"
        },
        "date_created": "2024-03-29T10:02:48Z",
        "date_published": "2024-03-29T10:08:00Z",
        "description": "This release introduces an important bug fix for SV annotation. Please update to this version if you use the tool to annotate structural variants.\r\n\r\n- structural variants are now correctly annotated with overlapping regions. In the previous version, the variant regions where not correctly built, resulting in regions distant from POS, but still contained in the SV interval to be missed. Closes #15 \r\n- switched from singularity to docker, new docker image now provided in DockerHub\r\n\r\nGrab the new executables to run the tool.",
        "html_url": "https://github.com/edg1983/GREEN-VARAN/releases/tag/v1.3",
        "name": "GREEN-VARAN v1.3",
        "release_id": 149003912,
        "tag": "v1.3",
        "tarball_url": "https://api.github.com/repos/edg1983/GREEN-VARAN/tarball/v1.3",
        "type": "Release",
        "url": "https://api.github.com/repos/edg1983/GREEN-VARAN/releases/149003912",
        "value": "https://api.github.com/repos/edg1983/GREEN-VARAN/releases/149003912",
        "zipball_url": "https://api.github.com/repos/edg1983/GREEN-VARAN/zipball/v1.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "edg1983",
          "type": "User"
        },
        "date_created": "2023-01-22T10:17:54Z",
        "date_published": "2023-01-22T10:25:50Z",
        "description": "This release introduces an option to select the prioritization strategy (`--prioritization_strategy`) to be used when computing the greendb levels.\r\n\r\nThe user can now select between `levels` (the default) that reproduces the behavior described initially in the paper and `pileup` that simply sums up the number of supporting pieces of evidence. When using pileup, one point is added to greendb_level for each criterion satisfied among those configured in the JSON config file.\r\n\r\nNew binaries are provided as usual for this release.",
        "html_url": "https://github.com/edg1983/GREEN-VARAN/releases/tag/v1.2",
        "name": "GREEN-VARAN v1.2",
        "release_id": 89829862,
        "tag": "v1.2",
        "tarball_url": "https://api.github.com/repos/edg1983/GREEN-VARAN/tarball/v1.2",
        "type": "Release",
        "url": "https://api.github.com/repos/edg1983/GREEN-VARAN/releases/89829862",
        "value": "https://api.github.com/repos/edg1983/GREEN-VARAN/releases/89829862",
        "zipball_url": "https://api.github.com/repos/edg1983/GREEN-VARAN/zipball/v1.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "edg1983",
          "type": "User"
        },
        "date_created": "2022-04-08T14:01:34Z",
        "date_published": "2022-04-08T14:11:15Z",
        "description": "## Fixes \r\n- corrected a few bugs present in the data sources reported in the resources folder so that now all data sources can be downloaded correctly.\r\n- correct a problem in the annotation workflow that resulted in zero vars when using `--regions all` (close #5 )\r\n\r\n## Improvements\r\n- new `--nochr` option in greenvaran to process input VCF files where chromosome names do not contain `chr` prefix even without manually specifying the chromosome names (close #3 )\r\n- greendb_query now works correctly when no `chr` prefix is present in variant string\r\n- new test VCFs are provided without `chr` prefix \r\n\r\nNote that the GREEN-DB bed files must always contain `chr` prefix. The files provided in the zenodo repository as listed in resources are already in this format\r\n\r\nJust download the updated pre-compiled binaries in this release",
        "html_url": "https://github.com/edg1983/GREEN-VARAN/releases/tag/v1.1",
        "name": "GREEN-VARAN v1.1",
        "release_id": 63977286,
        "tag": "v1.1",
        "tarball_url": "https://api.github.com/repos/edg1983/GREEN-VARAN/tarball/v1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/edg1983/GREEN-VARAN/releases/63977286",
        "value": "https://api.github.com/repos/edg1983/GREEN-VARAN/releases/63977286",
        "zipball_url": "https://api.github.com/repos/edg1983/GREEN-VARAN/zipball/v1.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "edg1983",
          "type": "User"
        },
        "date_created": "2021-11-30T13:56:15Z",
        "date_published": "2021-11-30T14:00:44Z",
        "description": "First stable release of GREEN-VARAN annotation tools. This release includes:\r\n\r\n- greenvaran to annotate regulatory variants in VCF files using GREEN-DB information\r\n- greendb_query to extract from GREEN-DB detailed information for variant(s) of interest\r\n- GREEN-VARAN workflow, a Nextflow workflow to automate annotations and prioritization of regulatory variants with greenvaran\r\n\r\nThe tools are provided as static binaries so no dependencies are needed. Download the full release to also get the workflow files.",
        "html_url": "https://github.com/edg1983/GREEN-VARAN/releases/tag/v1.0",
        "name": "GREEN-VARAN v1.0",
        "release_id": 54325376,
        "tag": "v1.0",
        "tarball_url": "https://api.github.com/repos/edg1983/GREEN-VARAN/tarball/v1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/edg1983/GREEN-VARAN/releases/54325376",
        "value": "https://api.github.com/repos/edg1983/GREEN-VARAN/releases/54325376",
        "zipball_url": "https://api.github.com/repos/edg1983/GREEN-VARAN/zipball/v1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Run using singularity",
        "parent_header": [
          "GREEN-VARAN and the GREEN-DB"
        ],
        "type": "Text_excerpt",
        "value": "The tool binaries should work on most linux based system. In case you have any issue, we also provide GREEN-VARAN as Docker image that you can use with Singularity or Docker.\nA Dockerfile recipe is included in the repository or you can pull the image from DockerHub:\n\n`singularity pull docker://htgenomeanalysisunit/greenvaran:1.3`\n\n### Usage\n\nThe image contains both greenvaran and greendb_query tools.\nThe config files are provided in the container in /opt/green-varan/config\nThe general usage is:\n\n```bash\nsingularity exec \\\n  greenvaran.sif \\\n  tool_name [tool arguments]\n```\n"
      },
      "source": "https://raw.githubusercontent.com/edg1983/GREEN-VARAN/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Bind specific folders for resources or data",
        "parent_header": [
          "GREEN-VARAN and the GREEN-DB",
          "Run using singularity"
        ],
        "type": "Text_excerpt",
        "value": "The tool needs access to input VCF file, the GREEN-DB bed file and the config files so remember to bind the corresponding locations in the container\n\nSee the following example where we use the current working directory for input/output, while other files are located\nin the default config / resources folder within greenvaran folder (greenvaran_path). In the example we use GRCh38 genome build\n\n```\nsingularity exec \\\n  --bind /greenvaran_path/resources/GRCh38:/db_files \\\n  --bind /greenvaran_path/config:/config_files \\\n  --bind ${PWD}:/data \\\n  greenvaran.sif \\\n  greenvaran -i /data/input.vcf.gz \\\n  -o /data/output.vcf.gz \\\n  --db /db_files/GRCh38_GREEN-DB.bed.gz \\\n  --dbschema /config_files/greendb_schema_v2.5.json \\\n  --config /config_files/prioritize_smallvars.json\n  [additional tool arguments]\n```\n"
      },
      "source": "https://raw.githubusercontent.com/edg1983/GREEN-VARAN/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 16:09:36",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 17
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Get the tool binaries from the repository",
        "parent_header": [
          "GREEN-VARAN and the GREEN-DB",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "The easiest way to run GREEN-VARAN is to download the pre-compiled binaries from the latest release at https://github.com/edg1983/GREEN-VARAN\n"
      },
      "source": "https://raw.githubusercontent.com/edg1983/GREEN-VARAN/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "GREEN-VARAN and the GREEN-DB",
          "Run using singularity"
        ],
        "type": "Text_excerpt",
        "value": "GREEN-VARAN performs annotation of small variants or structural variants VCF adding information on potential regulatory variants from GREEN-DB. Especially, it can annotate possible controlled genes and a prioritization level (this latter need the presence of some additional annotations, see below)\nIt provides also ability to tag variants linked to genes of interest and update existing gene-level annotations from SnpEff or bcftools.\n"
      },
      "source": "https://raw.githubusercontent.com/edg1983/GREEN-VARAN/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Basic usage",
        "parent_header": [
          "GREEN-VARAN and the GREEN-DB",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "`greenvaran [run mode] [options]`\n\nThe running mode can be one of:\n\n- smallvars\n\n  In this mode the tool will perform annotation for a small variants VCF.\n  It will annotate variants with information on the possible regulatory role based on GREENDB and eventually provide prioritization levels\n\n- sv\n\n  In this mode the tool will perform annotation for a structural variants VCF.\n  Capability in this case is limited to annotation of overlapping GREENDB regions and controlled genes. No prioritization is provided\n\n- querytab\n\n  This mode is a convenient way to automatically prepare input table to be used with the query tool to extract detailed information from GREENDB database.\n\n- version\n\n  Print the tool version\n\n**NB.** To perform prioritization of small variants some additional annotation fields are expected in the input VCF, see the prioritization section below. By default, when these information are not present the prioritization level will be set to zero for all annotated variants.\nWe also provide pre-processed datasets (see [resources](resources/README.md)) and Nextflow workflow to automate the whole process (see [workflow](workflow/README.md)).\n"
      },
      "source": "https://raw.githubusercontent.com/edg1983/GREEN-VARAN/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "smallvars and sv shared options",
        "parent_header": [
          "GREEN-VARAN and the GREEN-DB",
          "Usage",
          "Command line options"
        ],
        "type": "Text_excerpt",
        "value": "| option                  | description                                                                                                                                                                               |\n| ----------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `-i, --invcf INVCF`     | path to indexed input vcf.gz / bcf                                                                                                                                                        |\n| -o, --outvcf OUTVCF     | output vcf / vcf.gz file                                                                                                                                                                  |\n| -d, --db DB             | GREEN-DB bed.gz file for your build (see download section)                                                                                                                                |\n| -s, --dbschema DBSCHEMA | json file containing greendb column mapping <br> A default configuration for GREENDB v2.5 is available in config folder                                                                   |\n| -u, --noupdate          | do not update ANN / BCSQ field in the input VCF                                                                                                                                           |\n| -q, --csq_field         | set a specific consequence field containing gene consequences                                                                                                                                           |\n| -f, --filter            | filter instead of annotate. Only variants with greendb overlap will be written. <br> If --genes is active, the output will contain only variants connected to the input genes of interest |\n| -m, --impact IMPACT     | Which impact to assign when updating snpEff field <br> Possible values: [HIGH, MODERATE, LOWm MODIFIER] (default: MODIFIER)                                                               |\n| --chrom CHROM           | Annotate only for a specific chromosome <br> Useful to parallelize across chromosomes                                                                                                     |\n| --nochr                 | Use this when input VCF does not have chr prefix in chromosome names                                                                                                                      |\n| -g, --genes GENES       | Gene symbols for genes of interest, variants connected to those will be flagged with greendb_VOI tag <br> This can be a comma-separated list or a text file listing genes one per line    |\n| --connection CONNECTION | Region-gene connections accepted for annotation <br> Possible values: [all, closest, annotated] (default: all)                                                                            |\n| --log LOG               | Log file. Default is greenvaran\\_[now].log                                                                                                                                                |\n"
      },
      "source": "https://raw.githubusercontent.com/edg1983/GREEN-VARAN/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "sv specific options",
        "parent_header": [
          "GREEN-VARAN and the GREEN-DB",
          "Usage",
          "Command line options"
        ],
        "type": "Text_excerpt",
        "value": "| option                      | description                                                                                                                       |\n| --------------------------- | --------------------------------------------------------------------------------------------------------------------------------- |\n| -p, --padding PADDING       | Value to add on each side of BND/INS, this override the CIPOS when set                                                            |\n| --cipos CIPOS               | INFO field listing the confidence interval around POS (default: CIPOS) <br> It is expected to have 2 comma-separated values       |\n| --ciend CIEND               | INFO field listing the confidence interval around end of SV (default: CIEND) <br> It is expected to have 2 comma-separated values |\n| --maxlen MAXLEN             | Max size of SV to be annotated (default: 2000000)                                                                                 |\n| -t, --minoverlap MINOVERLAP | Min fraction of GREENDB region to be overlapped by a SV (default: 0.000001)                                                       |\n| -b, --minbp MINBP           | Min number of bases of GREENDB region to be overlapped by a SV (default: 1)                                                       |\n"
      },
      "source": "https://raw.githubusercontent.com/edg1983/GREEN-VARAN/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "smallvars specific options",
        "parent_header": [
          "GREEN-VARAN and the GREEN-DB",
          "Usage",
          "Command line options"
        ],
        "type": "Text_excerpt",
        "value": "| option                    | description                                                                                                                                                                                                                                           |\n| ------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| -c, --config CONFIG       | json config file for prioritization <br> A default configuration for the four level described in the paper is provided in config folder                                                                                                               |\n| --prioritization_strategy | set the strategy used to compute prioritization levels. Possible values are: levels (default) or pileup                                                                                                                                               |\n| -p, --permissive          | Perform prioritization even if one of the INFO fields required by prioritization config is missing <br> By default, when one of the expected fields is not defined in the header, the prioritization is disabled and all variants will get level zero |\n"
      },
      "source": "https://raw.githubusercontent.com/edg1983/GREEN-VARAN/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "small variants test",
        "parent_header": [
          "GREEN-VARAN and the GREEN-DB",
          "Example usage"
        ],
        "type": "Text_excerpt",
        "value": "```\ngreenvaran smallvars \\\n  --invcf test/VCF/GRCh38.test.smallvars.vcf.gz \\\n  --outvcf test/out/smallvars.annotated.vcf.gz \\\n  --config config/prioritize_smallvars.json \\\n  --dbschema config/greendb_schema_v2.5.json \\\n  --db resources/GRCh38/GRCh38_GREEN-DB.bed.gz \\\n  --genes test/VCF/genes_list_example.txt\n```\n"
      },
      "source": "https://raw.githubusercontent.com/edg1983/GREEN-VARAN/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "structural variants test",
        "parent_header": [
          "GREEN-VARAN and the GREEN-DB",
          "Example usage"
        ],
        "type": "Text_excerpt",
        "value": "```\ngreenvaran sv \\\n  --invcf test/VCF/GRCh38.test.SV.vcf.gz \\\n  --outvcf test/out/SV.annotated.vcf.gz \\\n  --dbschema config/greendb_schema_v2.5.json \\\n  --db resources/GRCh38/GRCh38_GREEN-DB.bed.gz \\\n  --minbp 10\n```\n"
      },
      "source": "https://raw.githubusercontent.com/edg1983/GREEN-VARAN/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "workflows": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/edg1983/GREEN-VARAN/master/workflow/main.nf"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/edg1983/GREEN-VARAN/master/workflow/download.nf"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/edg1983/GREEN-VARAN/master/workflow/modules/annotate.nf"
      },
      "technique": "file_exploration"
    }
  ]
}