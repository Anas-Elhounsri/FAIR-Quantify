{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/modsim/mycelyso"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2017-01-05T12:06:45Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-10-06T03:11:22Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MYCEelium anaLYsis SOftware"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.8495230398432019,
      "result": {
        "type": "Text_excerpt",
        "value": "\nInstallation and Analysis Tutorial Videos\n######################################### \nThese videos shows how to download and unpack *mycelyso* as well as to run a test analysis using the pre-packages Windows version of *mycelyso*. \nPublication\n###########\nWhen using *mycelyso* for scientific applications, please cite our publication: \n    Sachs CC, Koepff J, Wiechert W, Gr\u00fcnberger A, N\u00f6h K (2019)\n    mycelyso \u2013 high-throughput analysis of Streptomyces mycelium live cell imaging data\n    BMC Bioinformatics, volume 20, 452, doi: 10.1186/s12859-019-3004-1 \nDocumentation\n#############\nDocumentation can be built using sphinx, but is available online as well at `Read the Docs <https://mycelyso.readthedocs.io/en/latest/>`_. \n"
      },
      "source": "https://raw.githubusercontent.com/modsim/mycelyso/main/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8465296881045262,
      "result": {
        "original_header": "Pre-Bundled Windows Application",
        "type": "Text_excerpt",
        "value": "If you don't have a Python 3 installation ready, and want to just run *mycelyso*, we you can download a pre-packaged version\nfor 64-bit versions of Windows (mycelyso-win64.zip) from `AppVeyor <https://ci.appveyor.com/project/csachs/mycelyso/branch/main/artifacts>`_. \nPlease note, that, instead of :code:`python -m mycelyso` or :code:`python -m mycelyso_inspector`, the calls would then be :code:`mycelyso.exe` or :code:`mycelyso_inspector.exe`.\n \n"
      },
      "source": "https://raw.githubusercontent.com/modsim/mycelyso/main/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8851825030740571,
      "result": {
        "original_header": "Packages for the conda Package manager",
        "type": "Text_excerpt",
        "value": "While *mycelyso* is a pure Python package, it has some dependencies which are a bit more complex to build and might\nnot be present in the PyPI (Python Package Index). Thankfully the conda Package manager / Anaconda environment\nprovides all packages necessary in an easy to use manner. To use it, please `download Anaconda <https://www.continuum.io/downloads>`_ (Miniconda could be downloaded\nas well, but as most packages included in Anaconda are needed anyways, it does hardly provide a size benefit). \n"
      },
      "source": "https://raw.githubusercontent.com/modsim/mycelyso/main/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8318778381097846,
      "result": {
        "original_header": "Packages from PyPI (for advanced users)",
        "type": "Text_excerpt",
        "value": "If you have a working Python 3 installation and can eventually fix missing dependencies, you can as well use the PyPI version: \n"
      },
      "source": "https://raw.githubusercontent.com/modsim/mycelyso/main/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.931610760260172,
      "result": {
        "original_header": "mycelyso Quickstart",
        "type": "Text_excerpt",
        "value": "   If you use this software in a publication, please cite our paper: \n   Sachs CC, Koepff J, Wiechert W, Gr\u00fcnberger A, N\u00f6h K (2019)\n   mycelyso \u2013 high-throughput analysis of Streptomyces mycelium live cell imaging data\n   BMC Bioinformatics, volume 20, 452, doi: 10.1186/s12859-019-3004-1 \nTo run an analysis, just pass the appropriate filename as a parameter. The desired timepoints can be selected via the\n:code:`--timepoints` switch, and if the file contains multiple positions, they can be selected with :code:`--positions`.\nSupported file formats are TIFF, OME-TIFF, Nikon ND2 and Zeiss CZI. \nThe analysis will use all cores present by default. While this is generally desirable, it might lead to consuming\ntoo much memory (as each parallel acting process needs a certain additionally amount of memory).\nIf you notice that *mycelyso* takes up too much memory, try limiting the number of processes via :code:`-n`.\nIf you choose :code:`-n 0`, the code will additionally not use the parallel subsystem (:code:`multiprocessing`). \nTo analyze the example dataset, run:\n(:code:`-t BoxDetection=1` is used, as the spores were grown in rectangular growth chambers, which are to be detected.\nOtherwise, the software will use the whole image, or cropping values as set via :code:`-t CropWidth=...`/:code:`-t CropHeight=...`.\nIf the data is pre-segmented (i.e. input is a binary image stack), choose :code:`-t SkipBinarization=1`. \nOptionally, you can inspect the segmentation and produced graph on a per-frame basis before running a complete analysis, by\nadding the :code:`--interactive` flag, in which case *mycelyso* will start an interactive viewer. \nMultiple datasets/positions can be stored in the same file, it will only make problems if the same position is about\nto be analyzed twice.\nBinary masks/skeletons are stored in the HDF5 file, as well as GraphML representations of the tracking graphs.\nThe HDF5 file can be investigated with standard HDF5 tools, tabular data is to be opened with `pandas <https://pandas.pydata.org>`_, as it is stored with its format. \nHowever, since the raw data is only interesting if you want to perform custom analyses, it is much more straightforward to use the integrated\nvisualization tool *mycelyso Inspector* as a helper to take a look at the results: \nIn *mycelyso Inspector*, you have various information displays: On the top, the HDF5 file / analyzed dataset / position can be selected.\nOn the left, there is a list of graphs available. In the middle, there is the currently selected graph displayed. On the right, there is general information\nabout the whole position (colony level statistics), below the main part is a table with information about individual tracks, and scrolled further down\nis the possibility to show individual graph tracking in 2D or a colony growth oversight in 3D. Sticky at the bottom is binarized or skeletonized timeline of the position. \nThe data to all graphs can be downloaded as tab separated text by pressing the right mouse button on a certain graph link (in the left menu) and choosing 'Save As'. \n**Information**: Occasional warnings in the console about invalid values are due to missing/invalid data points, and are of no particular concern. \nSetting calibration data for TIFF files\n####################################### \nTIFF files provide no standard way to set temporal information per frame. To set these parameters manually, e.g.\na pixel size of 0.09 \u00b5m/pixel and an acquisition interval of 600 s (10 min) use: \nThe analysis' internal workings are dependent upon some tunable parameters.\nAll tunables are listed in the :doc:`tunables <mycelyso.tunables>` documentation subpage. To check their current value, you can\nview them all using the :code:`--tunables-show` command line option, which will as well print documentation.\nTo set individual ones to a different values one can use :code:`-t SomeTunable=NewValue`.\nIndividual tunables are documented within the API documentation as well. \n`Docker <https://www.docker.com/>`_ a tool allowing for software to be run in pre-defined, encapsulated environments called containers.\nTo run *mycelyso* via Docker, an image is used which is a self-contained Linux system with *mycelyso* installed, which can either be preloaded or will be downloaded on the fly. \nGeneral remarks: :code:`--tty` is used to allocate a tty, necessary for interactive usage, like :code:`--interactive` which connects to stdin/stdout.\nThe :code:`--rm` switch tells docker to remove the container (not image) again after use.\nAs aforementioned, docker is containerized, i.e. unless explicitly stated, no communication with the outside is possible.\nTherefore via :code:`--volume` the current working directory is mapped into the container.\n \n"
      },
      "source": "https://raw.githubusercontent.com/modsim/mycelyso/main/README.rst",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://mycelyso.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/modsim/mycelyso/main/README.rst",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/modsim/mycelyso/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/modsim/mycelyso/main/examples/Example_HDF5_Insights.ipynb"
      },
      "source": "https://raw.githubusercontent.com/modsim/mycelyso/main/examples/Example_HDF5_Insights.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/modsim/mycelyso/main/examples/Example_Alternative_Growth_Fit.ipynb"
      },
      "source": "https://raw.githubusercontent.com/modsim/mycelyso/main/examples/Example_Alternative_Growth_Fit.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/modsim/mycelyso/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "modsim/mycelyso"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "mycelyso Readme"
      },
      "source": "https://raw.githubusercontent.com/modsim/mycelyso/main/README.rst",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/modsim/mycelyso/main/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/modsim/mycelyso/main/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/modsim/mycelyso/main/examples/get-dataset.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 0.9990069625049868,
      "result": {
        "original_header": "mycelyso Readme",
        "type": "Text_excerpt",
        "value": ".. image:: https://img.shields.io/pypi/v/mycelyso.svg\n   :target: https://pypi.python.org/pypi/mycelyso \n.. image:: https://img.shields.io/badge/docs-latest-brightgreen.svg?style=flat\n   :target: https://mycelyso.readthedocs.io/en/latest/ \n.. image:: https://travis-ci.org/modsim/mycelyso.svg?branch=main\n   :target: https://travis-ci.org/modsim/mycelyso \n.. image:: https://ci.appveyor.com/api/projects/status/0jcyc25y81tp4iua/branch/main?svg=true\n   :target: https://ci.appveyor.com/project/csachs/mycelyso/branch/main \n.. image:: https://img.shields.io/docker/build/modsim/mycelyso.svg\n   :target: https://hub.docker.com/r/modsim/mycelyso \n.. image:: https://img.shields.io/pypi/l/mycelyso.svg\n   :target: https://opensource.org/licenses/BSD-2-Clause \n"
      },
      "source": "https://raw.githubusercontent.com/modsim/mycelyso/main/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9583614657267598,
      "result": {
        "type": "Text_excerpt",
        "value": ".. image:: https://modsim.github.io/mycelyso/screenshot.png\n   :target: https://modsim.github.io/mycelyso/demo/static/index.htm \n`To quickly get a grasp what results can be generated with mycelyso, please\ntake a look at the static demo page of mycelyso Inspector generated with the example dataset. <https://modsim.github.io/mycelyso/demo/static/>`_ \n.. raw:: html \n    <a href=\"https://modsim.github.io/mycelyso/DemoInstallation.mp4\"><img src=\"https://modsim.github.io/mycelyso/DemoInstallation.png\" width=\"45%\"></a>&nbsp;<a href=\"https://modsim.github.io/mycelyso/DemoAnalysis.mp4\"><img src=\"https://modsim.github.io/mycelyso/DemoAnalysis.png\" width=\"45%\"></a> \nThese videos shows how to download and unpack *mycelyso* as well as to run a test analysis using the pre-packages Windows version of *mycelyso*. \nDocumentation\n#############\nDocumentation can be built using sphinx, but is available online as well at `Read the Docs <https://mycelyso.readthedocs.io/en/latest/>`_. \n"
      },
      "source": "https://raw.githubusercontent.com/modsim/mycelyso/main/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.974601305571019,
      "result": {
        "original_header": "Pre-Bundled Windows Application",
        "type": "Text_excerpt",
        "value": "If you don't have a Python 3 installation ready, and want to just run *mycelyso*, we you can download a pre-packaged version\nfor 64-bit versions of Windows (mycelyso-win64.zip) from `AppVeyor <https://ci.appveyor.com/project/csachs/mycelyso/branch/main/artifacts>`_. \nPlease note, that, instead of :code:`python -m mycelyso` or :code:`python -m mycelyso_inspector`, the calls would then be :code:`mycelyso.exe` or :code:`mycelyso_inspector.exe`.\n \n"
      },
      "source": "https://raw.githubusercontent.com/modsim/mycelyso/main/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9987735024477795,
      "result": {
        "original_header": "Packages for the conda Package manager",
        "type": "Text_excerpt",
        "value": "While *mycelyso* is a pure Python package, it has some dependencies which are a bit more complex to build and might\nnot be present in the PyPI (Python Package Index). Thankfully the conda Package manager / Anaconda environment\nprovides all packages necessary in an easy to use manner. To use it, please `download Anaconda <https://www.continuum.io/downloads>`_ (Miniconda could be downloaded\nas well, but as most packages included in Anaconda are needed anyways, it does hardly provide a size benefit). \nYou have to enable the necessary channels: \n    > conda config --add channels conda-forge\n    > conda config --add channels modsim \n    > conda install -y mycelyso mycelyso-inspector \nPlease note that this readme assumes you are starting with a fresh install of Anaconda/Miniconda.\nIf you start with an existing installation, individual dependency packages might need to be updated.\n \n"
      },
      "source": "https://raw.githubusercontent.com/modsim/mycelyso/main/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999823859431718,
      "result": {
        "original_header": "Packages from PyPI (for advanced users)",
        "type": "Text_excerpt",
        "value": "If you have a working Python 3 installation and can eventually fix missing dependencies, you can as well use the PyPI version: \n    > pip install --user mycelyso mycelyso-inspector \n"
      },
      "source": "https://raw.githubusercontent.com/modsim/mycelyso/main/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999998365944327,
      "result": {
        "original_header": "Directly from github (for advanced users)",
        "type": "Text_excerpt",
        "value": "    > pip install --user https://github.com/modsim/mycelyso/archive/main.zip mycelyso-inspector \n"
      },
      "source": "https://raw.githubusercontent.com/modsim/mycelyso/main/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9553007613655685,
      "result": {
        "original_header": "mycelyso Quickstart",
        "type": "Text_excerpt",
        "value": "*mycelyso* is packaged as a Python module, to run it, use the following syntax: \n                  For more information visit: github.com/modsim/mycelyso \n   usage: __main__.py [-h] [-m MODULES] [-n PROCESSES] [--prompt]\n                      [-tp TIMEPOINTS] [-mp POSITIONS] [-t TUNABLE]\n                      [--tunables-show] [--tunables-load TUNABLES_LOAD]\n                      [--tunables-save TUNABLES_SAVE] [--meta META]\n                      [--interactive] [--output OUTPUT]\n                      input \n   optional arguments:\n     -h, --help            show this help message and exit\n     -m MODULES, --module MODULES\n     -n PROCESSES, --processes PROCESSES\n     --prompt, --prompt\n     -tp TIMEPOINTS, --timepoints TIMEPOINTS\n     -mp POSITIONS, --positions POSITIONS\n     -t TUNABLE, --tunable TUNABLE\n     --tunables-show\n     --tunables-load TUNABLES_LOAD\n     --tunables-save TUNABLES_SAVE\n     --meta META, --meta META\n     --interactive, --interactive\n     --output OUTPUT, --output OUTPUT \n`Docker <https://www.docker.com/>`_ a tool allowing for software to be run in pre-defined, encapsulated environments called containers.\nTo run *mycelyso* via Docker, an image is used which is a self-contained Linux system with *mycelyso* installed, which can either be preloaded or will be downloaded on the fly. \nUse the following commands to run mycelyso via Docker: \n   > docker run --tty --interactive --rm --volume `pwd`:/data --user `id -u` --env DISPLAY=$DISPLAY --volume /tmp/.X11-unix:/tmp/.X11-unix modsim/mycelyso --interactive <parameters ...> \n"
      },
      "source": "https://raw.githubusercontent.com/modsim/mycelyso/main/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9967471482469955,
      "result": {
        "type": "Text_excerpt",
        "value": ".. If you read this on hub.docker.com, maybe visit the github page https://github.com/modsim/mycelyso\n.. as dockerhub currently has problems displaying reStructuredText properly.\n.. image:: docs/_static/mycelyso-banner.png \n"
      },
      "source": "https://raw.githubusercontent.com/modsim/mycelyso/main/README.rst",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8379510282870006,
      "result": {
        "original_header": "mycelyso Quickstart",
        "type": "Text_excerpt",
        "value": "   usage: __main__.py [-h] [-m MODULES] [-n PROCESSES] [--prompt]\n                      [-tp TIMEPOINTS] [-mp POSITIONS] [-t TUNABLE]\n                      [--tunables-show] [--tunables-load TUNABLES_LOAD]\n                      [--tunables-save TUNABLES_SAVE] [--meta META]\n                      [--interactive] [--output OUTPUT]\n                      input \n   optional arguments:\n     -h, --help            show this help message and exit\n     -m MODULES, --module MODULES\n     -n PROCESSES, --processes PROCESSES\n     --prompt, --prompt\n     -tp TIMEPOINTS, --timepoints TIMEPOINTS\n     -mp POSITIONS, --positions POSITIONS\n     -t TUNABLE, --tunable TUNABLE\n     --tunables-show\n     --tunables-load TUNABLES_LOAD\n     --tunables-save TUNABLES_SAVE\n     --meta META, --meta META\n     --interactive, --interactive\n     --output OUTPUT, --output OUTPUT \n   > python -m mycelyso \"the_file.tif?calibration=0.09;interval=600\" \n   > docker run --tty --interactive --rm --volume `pwd`:/data --user `id -u` --publish 8888:8888 --entrypoint python modsim/mycelyso -m mycelyso_inspector <parameters ...> \n"
      },
      "source": "https://raw.githubusercontent.com/modsim/mycelyso/main/README.rst",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/modsim/mycelyso/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bioinformatics, image-analysis, microfluidics, mycelium, python"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "BSD 2-Clause \"Simplified\" License",
        "spdx_id": "BSD-2-Clause",
        "type": "License",
        "url": "https://api.github.com/licenses/bsd-2-clause",
        "value": "https://api.github.com/licenses/bsd-2-clause"
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "mycelyso"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "modsim"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 144078,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 1356,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/modsim/mycelyso/main/README.rst"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier"
  ],
  "somef_provenance": {
    "date": "2024-10-06 18:28:42",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Getting mycelyso and Datasets",
        "parent_header": [
          "mycelyso Readme"
        ],
        "type": "Text_excerpt",
        "value": "Example Datasets\n################\nYou can find an example dataset deposited at zenodo `DOI: 10.5281/zenodo.376281 <https://dx.doi.org/10.5281/zenodo.376281>`_.\n\nWays to install mycelyso\n########################\n"
      },
      "source": "https://raw.githubusercontent.com/modsim/mycelyso/main/README.rst",
      "technique": "header_analysis"
    }
  ]
}