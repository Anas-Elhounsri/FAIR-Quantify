{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/rochoa85/dockECR"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-09-10T19:39:57Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-06-26T12:46:45Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "dockECR: open consensus docking and ranking protocol for virtual screening of small molecules"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9452151792773731,
      "result": {
        "original_header": "dockECR",
        "type": "Text_excerpt",
        "value": "**dockECR: open consensus docking and ranking protocol for virtual screening of small molecules** \n**Authors:** Rodrigo Ochoa, Karen Palacio-Rodriguez, Camila M. Clemente and Natalia Adler\n \n"
      },
      "source": "https://raw.githubusercontent.com/rochoa85/dockECR/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9933994758544614,
      "result": {
        "original_header": "Purpose",
        "type": "Text_excerpt",
        "value": "The goal of dockECR is to implement multiple docking programs to predict scores between a single target or multiple targets (merging and shrinking aproach) and a library of compounds. The molecules are ranked based on the ECR ranking metric using as input the scores obtained by each program. The protocol is open source and requires to install third-party docking software, as well as information of the targets and ligands structures in PDB format\n \n"
      },
      "source": "https://raw.githubusercontent.com/rochoa85/dockECR/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8570609371618106,
      "result": {
        "original_header": "Third-party tools",
        "type": "Text_excerpt",
        "value": "- AutoDock Vina: http://vina.scripps.edu/download.html - stand-alone tools: vina\n- Smina: https://sourceforge.net/projects/smina/files/ - stand-alone tools: smina.static\n- LeDock: http://www.lephar.com/download.htm - stand-alone tools: ledock_linux_x86\n- rDock: https://sourceforge.net/projects/rdock/files/ - stand-alone tools: rbcavity, rbdock and sdsort. **To compile the program it is required gcc > 3 and < 6, plus additional requirements mentioned in the project website**\n- MGL Tools: http://mgltools.scripps.edu/downloads - stand-alone tools: pythonsh and the scripts *prepare_ligand4.py* and *prepare_receptor4.py*\n- RDKit: http://rdkit.org - version for python3.  \nIn addition to these packages, it is required to install OpenBabel (https://sourceforge.net/projects/openbabel/), which can be obtained from the main OS package repository. **The version 2.3 is required (the program called babel instead of obabel).**\n \n"
      },
      "source": "https://raw.githubusercontent.com/rochoa85/dockECR/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/rochoa85/dockECR/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/rochoa85/dockECR/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "rochoa85/dockECR"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "dockECR"
      },
      "source": "https://raw.githubusercontent.com/rochoa85/dockECR/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9999997635532756,
      "result": {
        "original_header": "Third-party tools",
        "type": "Text_excerpt",
        "value": "The script is written in python3 with system calls to the Ubuntu OS. The docking stand-alone programs can be put after installation in the folder `auxiliar/software` **(alternatively, the code can be modified to call the programs without local paths, in case they have been installed in the system path.)**. For instructions about how to download and install each program follow these websites: \n- AutoDock Vina: http://vina.scripps.edu/download.html - stand-alone tools: vina\n- Smina: https://sourceforge.net/projects/smina/files/ - stand-alone tools: smina.static\n- LeDock: http://www.lephar.com/download.htm - stand-alone tools: ledock_linux_x86\n- rDock: https://sourceforge.net/projects/rdock/files/ - stand-alone tools: rbcavity, rbdock and sdsort. **To compile the program it is required gcc > 3 and < 6, plus additional requirements mentioned in the project website**\n- MGL Tools: http://mgltools.scripps.edu/downloads - stand-alone tools: pythonsh and the scripts *prepare_ligand4.py* and *prepare_receptor4.py*\n- RDKit: http://rdkit.org - version for python3.  \n**NOTE:** To facilitate the compilation/installation of rDock and RDKit, it is recommended to create a conda (https://docs.conda.io/en/latest/) virtual environment. The packages can be installed by adding the corresponding channels after the environment is created:\n```\nconda config --add channels bioconda\nconda config --add channels conda-forge\n```\nThen the packages are installed with:\nBASH2*\n \nIn addition to these packages, it is required to install OpenBabel (https://sourceforge.net/projects/openbabel/), which can be obtained from the main OS package repository. **The version 2.3 is required (the program called babel instead of obabel).**\n \n"
      },
      "source": "https://raw.githubusercontent.com/rochoa85/dockECR/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/rochoa85/dockECR/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2020 Rodrigo Ochoa\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/rochoa85/dockECR/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "dockECR"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "rochoa85"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 52320,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 3681,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 3017,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rochoa85/dockECR/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "How to run the consensus docking and ranking script",
        "parent_header": [
          "dockECR"
        ],
        "type": "Text_excerpt",
        "value": "The workspace requires of the following folders:\n\n```\nauxiliar: Folder containing scripts and the stand-alone programs\ntarget: Folder with the targets PDB files\nligands: Folder with the ligands PDB files\n```\n\nAfter running docking and ranking campaigns, the following additional folders will be created:\n\n```\nconfig: Folder that will store the configuration files created per program\nresults: Docking results per program used\nranks: Ranks per each target and docking program used, as well as the final ECR method.\n```\n\nAn example of the script syntax is as follows::\n\n`python dockECR.py [-h] -l LIST_LIGANDS -s LIST_SOFTWARE -m MODE -t LIST_TARGETS`\n                                       \nwhere the arguments are:\n\n```\narguments:\n  -h, --help        show this help message and exit\n  -l LIST_LIGANDS   File with the list of ligands names available in the\n                    ligand folder\n  -s LIST_SOFTWARE  File with the list of software that will be included in\n                    the consensus\n  -m MODE           Mode the script will be run. Options: (i) docking, (ii)\n                    ranking\n  -t LIST_TARGETS   File with the list of the PDB structures used as targets\n ```\n\nThe script has two main modes. One is for running docking with any of the four programs mentioned in the `list_software.txt` file, and the second is for ranking with same list of docking programs. In the following sections we show how to use the main python script. The examples provided in the code were run using the SARS-CoV-2 main protease with PDB id 6y2e and 5re4.\n"
      },
      "source": "https://raw.githubusercontent.com/rochoa85/dockECR/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 03:00:20",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 24
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Support",
        "parent_header": [
          "dockECR"
        ],
        "type": "Text_excerpt",
        "value": "In case the protocol is useful for other research projects and require some advice, please contact us to the email: rodrigo.ochoa@udea.edu.co. If this protocol is implemented, please cite: \n\n- Ochoa, R., Palacio-Rodriguez, K., Clemente, C.M., & Adler, N.S. (2021). dockECR: Open consensus docking and ranking protocol for virtual screening of small molecules. Journal of Molecular Graphics and Modelling, 109, 108023.\n\n- Palacio-Rodriguez, K., Lans, I., Cavasotto, C. N., & Cossio, P. (2019). Exponential consensus ranking improves the outcome in docking and receptor ensemble docking. Scientific reports, 9(1), 1-14.\n"
      },
      "source": "https://raw.githubusercontent.com/rochoa85/dockECR/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Docking example",
        "parent_header": [
          "dockECR"
        ],
        "type": "Text_excerpt",
        "value": "After preparing the `list_software.txt` file, and the `list_ligands.txt` file with the names of the PDB structures located in the `ligands` folder, the command can be run as:\n\n```\npython dockECR.py -m docking -l list_ligands.txt -s list_software.txt -t list_targets.txt\n```\n**NOTE: Examples of all the input files are included in the code.**\n\nFor docking, we require to prepare a configuration file with the box center coordinates and the box size dimensions. The following is an example of a box located in the active site of the MPro structure 6y2e provided in the `target` folder:\n\n```\ncenter_x: -11.6\ncenter_y: 14.5\ncenter_z: 68.3\nsize_x: 30\nsize_y: 30\nsize_z: 30\n```\n**NOTE: The config file should be named config_[TARGET].txt, where the [TARGET] is the name given in the list_targets.txt file.**\n\nAfter running the protocol, the results with 10 poses per program are stored in the folder `results/[program]` as files with extensions depending on the docking program output.\n"
      },
      "source": "https://raw.githubusercontent.com/rochoa85/dockECR/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Ranking example",
        "parent_header": [
          "dockECR"
        ],
        "type": "Text_excerpt",
        "value": "With the docking results available in the workspace, the same script can be called using the *ranking* mode to generate rankings per program from the pool of ligands used in the virtual screening. An example is provided here:\n\n```\npython dockECR.py -m ranking -l list_ligands.txt -s list_software.txt -t list_targets.txt\n```\n\nThe `list_targets.txt` file can contain the names of multiple targets, in order to do the ranking individually, and using a merging and shrinking approach (see Ref. Palacio-Rodriguez et. al. 2019) to combine the results of multiple version of the same target. The ECR ranking is calculated in both cases.\n\nThe ranking results are stored in the `ranks` folder with a three-column format file, where the first column is the ranking position, the second column is the ligand id, and the third column the docking score:\n\n```\n1\tmol3\t-12.0649\n2\tmol2\t-11.8435\n3\tmol1\t-10.6486\n```\n\nWith the rankings per software, it is possible to use the ECR method to generate a final consensus ranking. The results are sorted by the calculated ECR ranking in a file located in the `ranks` folder with the following format:\n\n```\n1 mol1       1.05880939\n2 mol3       0.94259210\n3 mol2       0.66164496\n```\n\n**NOTE: If multiple targets are included, an ECR ranking per target and for the combination of them is generated.**\n\nThis final list can be used to prioritize candidates from a large number of molecules in a virtual screening campaign, using the outputs of multiple docking programs at the same time.\n\nAn example of the docking and ranking results for the two included systems is available in the folder: `example_outputs`\n"
      },
      "source": "https://raw.githubusercontent.com/rochoa85/dockECR/master/README.md",
      "technique": "header_analysis"
    }
  ]
}