{
  "application_domain": [
    {
      "confidence": 13.24,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "author": "Zhang, Ruiyi and Luo, Yunan and Ma, Jianzhu and Zhang, Ming and Wang, Sheng",
        "format": "bibtex",
        "title": "scPretrain: Multi-task self-supervised learning for cell type classification",
        "type": "Text_excerpt",
        "value": "@article{scPretrain,\n    year = {2020},\n    journal = {arXiv preprint arXiv:2011.xxxxx},\n    author = {Zhang, Ruiyi and Luo, Yunan and Ma, Jianzhu and Zhang, Ming and Wang, Sheng},\n    title = {scPretrain: Multi-task self-supervised learning for cell type classification},\n}"
      },
      "source": "https://raw.githubusercontent.com/ruiyi-zhang/scPretrain/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ruiyi-zhang/scPretrain"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-10-31T03:18:01Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-03-24T15:14:15Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "scPretrain: Multi-task self-supervised learning for cell type classification"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9229311985951225,
      "result": {
        "original_header": "scPretrain",
        "type": "Text_excerpt",
        "value": "Pytorch implementation for scPretrain: Multi-task self-supervised learning for cell type classification. \nThis code has been written using PyTorch >= 1.5.1. If you use any source codes or datasets included in this toolkit in your work, please cite the following paper. The bibtex is listed below:\n<pre>\n@article{scPretrain,\n  title={scPretrain: Multi-task self-supervised learning for cell type classification},\n  author={Zhang, Ruiyi and Luo, Yunan and Ma, Jianzhu and Zhang, Ming and Wang, Sheng},\n  journal={arXiv preprint arXiv:2011.xxxxx},\n  year={2020}\n}\n</pre>\n \n"
      },
      "source": "https://raw.githubusercontent.com/ruiyi-zhang/scPretrain/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9979558654417061,
      "result": {
        "original_header": "Abstract",
        "type": "Text_excerpt",
        "value": "Rapidly generated scRNA-seq datasets enable us to understand cellular differences and the function\nof each individual cell at single-cell resolution. Cell type classification, which aims at characterizing\nand labeling groups of cells according to their gene expression, is one of the most important steps for\nsingle-cell analysis. To facilitate the manual curation process, supervised learning methods have been\nused to automatically classify cells. Most of the existing supervised learning approaches only utilize\nannotated cells in the training step while ignoring the more abundant unannotated cells. In this paper,\nwe proposed scPretrain, a multi-task self-supervised learning approach that jointly considers\nannotated and unannotated cells for cell type classification. scPretrain consists of a pre-training step\nand a fine-tuning step. In the pre-training step, scPretrain uses a multi-task learning framework to\ntrain a feature extraction encoder based on each dataset\u2019s pseudo-labels, where only unannotated cells\nare used. In the fine-tuning step, scPretrain fine-tunes this feature extraction encoder using the limited\nannotated cells in a new dataset. We evaluated scPretrain on 60 diverse datasets from different\ntechnologies, species and organs, and obtained a significant improvement on both cell type\nclassification and cell clustering. Moreover, the representations obtained by scPretrain in the\npre-training step also enhanced the performance of conventional classifiers such as random forest,\nlogistic regression and support vector machines. scPretrain is able to effectively utilize the massive\namount of unlabelled data and be applied to annotating increasingly generated scRNA-seq datasets.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ruiyi-zhang/scPretrain/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9920580305681859,
      "result": {
        "original_header": "Model Architecture",
        "type": "Text_excerpt",
        "value": "In the pre-training step, scPretrain assigns a pseudo-label to each\ncell using K-means. These pseudo-labels are used to train a feature extraction encoder, which is\nshared by different datasets and different partitions in a multi-task learning framework. In the\nfine-tuning step, this encoder is used to embed cells in a new dataset to low-dimensional\nrepresentations, which are further used in downstream tasks such as cell clustering and cell type\nclassification. \n \n"
      },
      "source": "https://raw.githubusercontent.com/ruiyi-zhang/scPretrain/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9286478375158221,
      "result": {
        "original_header": "Test with Other Datasets",
        "type": "Text_excerpt",
        "value": "d['exprs']['data']: gene expression data list. \nd['exprs']['indices']: column indices for each data in d['exprs']['data']. \nd['var_names']: gene names of the data matrix. \nd['obs']['cell_ontology_class']: cell type for each gene expression vector. \nThen put the d.h5 file in /dataset/, and add d in data.dataset_name. Then follow the fine-tuning step instruction above.\n(Note that we only support human and mouse gene datasets now). \n"
      },
      "source": "https://raw.githubusercontent.com/ruiyi-zhang/scPretrain/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9821071041885602,
      "result": {
        "original_header": "Questions",
        "type": "Text_excerpt",
        "value": "For questions about the data and code, please contact zhangruiyi@pku.edu.cn. We will do our best to provide support and address any issues. We appreciate your feedback! \n"
      },
      "source": "https://raw.githubusercontent.com/ruiyi-zhang/scPretrain/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ruiyi-zhang/scPretrain/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ruiyi-zhang/scPretrain/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ruiyi-zhang/scPretrain"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "scPretrain"
      },
      "source": "https://raw.githubusercontent.com/ruiyi-zhang/scPretrain/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ruiyi-zhang/scPretrain/main/figs/model.jpg"
      },
      "source": "https://raw.githubusercontent.com/ruiyi-zhang/scPretrain/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ruiyi-zhang/scPretrain/main/figs/sample2.jpeg"
      },
      "source": "https://raw.githubusercontent.com/ruiyi-zhang/scPretrain/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9997860439352554,
      "result": {
        "original_header": "Datasets",
        "type": "Text_excerpt",
        "value": "Automatically download from https://cblast.gao-lab.org/download.\nInside folder: /dataset/\n \n"
      },
      "source": "https://raw.githubusercontent.com/ruiyi-zhang/scPretrain/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9292966177695725,
      "result": {
        "original_header": "Experiments",
        "type": "Text_excerpt",
        "value": "Phase 1: pre-train on pseudo-labels generated by clustering on input. Output model name required by --save_model.\n```console\n python main.py --cuda --is_pretrain --kmeans \n``` \nPhase 2: pre-train on pseudo-labels generated by clustering on output. Pre-trained model name required by --pretrained_model.\n```console\n python main.py --cuda --is_pretrain --kmeans --pretrain_output\n``` \nhttps://drive.google.com/file/d/1OjuxWMm9F-ElA_SQx1kRg00XcSWoI6yQ/view?usp=sharing  \nFine-tuning step: automatically test on 60 datasets. Pre-trained model name required by --pretrained_model.  \n```console \n python main.py --cuda --kmeans \n```\nTest other off-the-shelf classifiers (e.g SVM). Classifier name required by --clf.\n```console\n python rf_svm_lr.py --clf svm \n```\nProduce cluster results using scPretrain generated representations and UMAP reducer.\n \n```console\n python clus.py \n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/ruiyi-zhang/scPretrain/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8523316848609603,
      "result": {
        "original_header": "Test with Other Datasets",
        "type": "Text_excerpt",
        "value": "To use the anndata finetune datasets, set the ann_input argument to the path of the h5ad file.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ruiyi-zhang/scPretrain/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8139991418726727,
      "result": {
        "original_header": "scPretrain",
        "type": "Text_excerpt",
        "value": "<img src=\"figs/pytorch-logo-dark.png\" width=\"10%\"> [![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)  \n"
      },
      "source": "https://raw.githubusercontent.com/ruiyi-zhang/scPretrain/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8725600348091788,
      "result": {
        "original_header": "Model Architecture",
        "type": "Text_excerpt",
        "value": "<p align='center'>\n<img src=\"figs/model.jpg\" height=\"300\"/>\n</p> \n"
      },
      "source": "https://raw.githubusercontent.com/ruiyi-zhang/scPretrain/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8710811281188734,
      "result": {
        "original_header": "Experiments",
        "type": "Text_excerpt",
        "value": "Phase 1: pre-train on pseudo-labels generated by clustering on input. Output model name required by --save_model.\n```console\n python main.py --cuda --is_pretrain --kmeans \n``` \nPhase 2: pre-train on pseudo-labels generated by clustering on output. Pre-trained model name required by --pretrained_model.\n```console\n python main.py --cuda --is_pretrain --kmeans --pretrain_output\n``` \nFine-tuning step: automatically test on 60 datasets. Pre-trained model name required by --pretrained_model.  \n```console \n python main.py --cuda --kmeans \n```\nTest other off-the-shelf classifiers (e.g SVM). Classifier name required by --clf.\n```console\n python rf_svm_lr.py --clf svm \n```\nProduce cluster results using scPretrain generated representations and UMAP reducer.\n \n```console\n python clus.py \n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/ruiyi-zhang/scPretrain/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ruiyi-zhang/scPretrain/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "cell-type-classification, multi-task-learning, self-supervised-learning, single-cell-analysis"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2020 ruiyi-zhang\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/ruiyi-zhang/scPretrain/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ruiyi-zhang/scPretrain/main/figs/pytorch-logo-dark.png"
      },
      "source": "https://raw.githubusercontent.com/ruiyi-zhang/scPretrain/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "scPretrain"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "ruiyi-zhang"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 37084,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ruiyi-zhang/scPretrain/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_papers": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/2011.xxxxx"
      },
      "source": "https://raw.githubusercontent.com/ruiyi-zhang/scPretrain/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirements",
        "type": "Text_excerpt",
        "value": "```\npip install -r requirements.txt\n```"
      },
      "source": "https://raw.githubusercontent.com/ruiyi-zhang/scPretrain/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 13:52:07",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 21
      },
      "technique": "GitHub_API"
    }
  ]
}