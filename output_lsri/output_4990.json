{
  "application_domain": [
    {
      "confidence": 12.97,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "References:",
        "parent_header": [
          "VAPPER V1.1.0"
        ],
        "type": "Text_excerpt",
        "value": "-------------\n\nSilva Pereira, S. et al. (2018) Variant antigen repertoires in Trypanosoma congolense populations and experimental infections can be profiled from deep sequence data with a set of universal protein motifs. Genome Research 28: 1383-1394.\n\nTihon, E. et al. (2017) Discovery and genomic analyses of hybridization between divergent lineages of Trypanosoma congolense, causative agent of Animal African Trypanosomiasis. Mol Ecol. 26(23):6524-6538. \n"
      },
      "source": "https://raw.githubusercontent.com/PGB-LIV/VAPPER/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/PGB-LIV/VAPPER"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-04-23T17:10:08Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-10-13T08:43:35Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Variant Antigen Profiling for Trypanosoma congolense and Trypanosoma vivax"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction:",
        "parent_header": [
          "VAPPER V1.1.0"
        ],
        "type": "Text_excerpt",
        "value": "-------------\nTrypanosomes are important human and veterinary parasites that cause potentially lethal blood \ninfections and a chronic wasting disease (African trypanosomiasis). These organisms use antigenic \nvariation to evade the host immune response, for which their genomes contain many hundreds of \nvariable antigen genes. Making sense of this hypervariable repertoire is a major challenge in genome \nanalysis and a bottleneck in vaccine development.\n\nWe have devised a method for quantitative analysis of antigenic diversity in systems data (genomes, \ntranscriptomes, and proteomes) called Variant Antigen Profiling (VAP). VAP has great potential for \nunderstanding how antigenic diversity relates to clinical outcome, how antigen genes may be used \nas epidemiological markers of virulence, and in measuring gene expression during experimental \ninfections.\n\nWe would like Variant Antigen Profiling to be the standard approach to study this phenomenon and \nwe are making our methods available to the research community to maximize its impact.\n\n\nCurrently two species of trypanosoma are considered, namely T. congolense and T. vivax. The \nantigen variability of these species differ and are examined using different methods. \n\nT. congolense:\nThe Trypanosoma congolense variant antigen repertoire is divided into 15 clades or phylotypes. \nThese phylotypes are present in any T. congolense isolate, but their relative abundance varies \nbetween strains. The purpose of the VAP is to accurately quantify antigen diversity in any T. \ncongolense isolate by calculating the relative frequency of each phylotype. \n\nT. congolense can be examined at the Genomic or Transcriptomic level. (optional [-t] parameter to \nflag the transcriptomic pathway.) \n\nGenomic VAP \nAt the Genomic level the tool takes raw paired NGS reads as input, assembles them de-novo, \nsearches for evidence of each phylotype based on hidden Markov models (HMM), and then \ncalculates their relative abundances. Should the genome be already assembled the contigs file can \nbe indicated using the optional [-con] command line parameter.\nThe results and their respective visualisations are stored in a results directory and include a table \nwith each phylotype and their relative frequencies as proportions of the full repertoire in the given \ngenome; a heat map with dendrogram showing either absolute VAP variation or deviation from the \nmean, using our pilot dataset; and a Principal Component Analysis (PCA) plot showing variation \ndistribution in the given sample compared to our pilot dataset containing isolates described by Silva Pereira et al. (2018) and Tihon et al. (2017).\n\nTranscriptomic VAP\nAt the transcriptomic level the tool takes two NGS paired reads, maps the transcripts and estimates \ntheir abundance. It then searches for evidence of each phylotype based on hidden Markov models \n(HMM) and calculates the relative abundance per phylotype. The result is provided in both tabular \nform and a bar chart for comparison.\n\nT.vivax:\n\nT.vivax Genomic VAP \nThe approach for T. vivax is quite different, it relies on the presence/absence of specific VSG. \nIt takes paired sequencing read files in fastq format and outputs a binary matrix of the presence/absence of each COG/gene for a given sample.\nThe results compare this matrix with a database of 27+ isolates; a heatmap and dendrogram are provided for comparison.\n\nT.vivax Transcriptomic VAP \nThis method takes two NGS paired reads, maps the transcripts against a user-supplied reference file and\nthen estimates the trancript aboundance (using samtools and cufflinks). The output is then binned into \n175 predefined phylotypes based on their greatest blastx similarity (this table is available in the results). A pident of less than 70% is considered unidentified.\nThe results are shown as tabular and graphical phylotype profiles.\nThe user-supplied reference file should contain assembled transcripts. We advise it to be created using Trinity (Grabherr et al. 2013). \n\n"
      },
      "source": "https://raw.githubusercontent.com/PGB-LIV/VAPPER/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9870631028023288,
      "result": {
        "original_header": "VAPPER V1.1.0",
        "type": "Text_excerpt",
        "value": "Variant Antigen Profiling for Trypanosoma congolense and Trypanosoma vivax\n \n"
      },
      "source": "https://raw.githubusercontent.com/PGB-LIV/VAPPER/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9362804165418362,
      "result": {
        "original_header": "Instructions:",
        "type": "Text_excerpt",
        "value": "Vap.py \t- parses command line parameters and selects pathways accordingly \n\timports files \n\t\tTryp_G.py\t- the T.congolense genomic pathway   \t \n\t\tTryp_T.py\t- the T.congolense transcriptomic pathway\n\t\tTryp_V.py\t- the T.vivax analysis via COG assessment\n\t\tTryp_V_T.py - the T.vivax transcriptomic analysis\n\t\tTryp_Multi.py\t- manages multiple samples of the above four pathways\n        \n\tRequires the Data directory for strain comparisons and geographical origins\n\t\tdata/Motifs\t- the hmm files for the 15 phylotypes searched for by hmmer\n\t\tdata/Reference - fasta files for different strains used by T.congolense transcriptomic pathway\n\t\tdata/vivax - Database and geo tags for T.vivax strains\n\t\tdata/congodata.csv - the relative frequency of phylotypes appearing in T.congolense strains so far \n\t\tdata/congodata_deviationfromthemean.csv - as above but holding the deviation from the mean frequency \n\t\t\n\tThe python program Vap.py uses the following packages to analyze the isolates.\n\tPlease ensure that these are installed and available to the python environment (see Installation below)\n\t\n\tpackage\t\t\t\tversion used\t\twebsite\n\tvelvet\t\t\t\t1.2.10\t\t\t\thttps://www.ebi.ac.uk/~zerbino/velvet/\n\tEMBOSS transeq\t\t6.6.0.0         \thttp://emboss.open-bio.org/\n\tHMMER\t\t\t\t3.1b2       \t\thttp://hmmer.org/\n\tbowtie2\t\t\t\t2.2.6\t\t\t\thttp://bowtie-bio.sourceforge.net/bowtie2/index.shtml\n\tsamtools\t\t\t1.6\t\t\t\t\thttp://www.htslib.org/\n\tcufflinks           2.2.1\t\t\t\thttp://cole-trapnell-lab.github.io/cufflinks/\n\tblast\t\t\t\t2.7.1               https://blast.ncbi.nlm.nih.gov/Blast.cgi?CMD=Web&PAGE_TYPE=BlastDocs&DOC_TYPE=Download\n\t\n\tAs well as the usual python libraries Vap.py requires seaborn version 0.8.0 for clustermaps\n \n"
      },
      "source": "https://raw.githubusercontent.com/PGB-LIV/VAPPER/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/PGB-LIV/VAPPER/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/PGB-LIV/VAPPER/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PGB-LIV/VAPPER"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "VAPPER V1.1.0"
      },
      "source": "https://raw.githubusercontent.com/PGB-LIV/VAPPER/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/PGB-LIV/VAPPER/master/emboss.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/PGB-LIV/VAPPER/master/install.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/PGB-LIV/VAPPER/master/setup.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation:",
        "parent_header": [
          "VAPPER V1.1.0"
        ],
        "type": "Text_excerpt",
        "value": "------------\n    To ensure your system has all the required dependencies and before running\n\tthe VAPPER code for the first time, please type:\n\n\tsource install.sh\n               \n\tinstall.sh will:\n\t  1. Temporarily add a path to your system PATH variable\n\t  2. Check for the installation of transeq a required EMBOSS application\n\t  3. If absent, it will download and install it.\n\t  4. Then, in the virtual environment, VAPENV, it will install any required python packages.\n\t   \n\t   This only needs to be done once per installation. However upon each new session before calling VAPPER it will be necessary to set\n\t   the $PATH and the virtual environment again by typing:\n\t   \n\t   $ source setup.sh\n  "
      },
      "source": "https://raw.githubusercontent.com/PGB-LIV/VAPPER/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9619761130615956,
      "result": {
        "original_header": "Instructions:",
        "type": "Text_excerpt",
        "value": "-------------\nRequires Python 2.7 \nVap.py \t- parses command line parameters and selects pathways accordingly \n\timports files \n\t\tTryp_G.py\t- the T.congolense genomic pathway   \t \n\t\tTryp_T.py\t- the T.congolense transcriptomic pathway\n\t\tTryp_V.py\t- the T.vivax analysis via COG assessment\n\t\tTryp_V_T.py - the T.vivax transcriptomic analysis\n\t\tTryp_Multi.py\t- manages multiple samples of the above four pathways\n        \n\tRequires the Data directory for strain comparisons and geographical origins\n\t\tdata/Motifs\t- the hmm files for the 15 phylotypes searched for by hmmer\n\t\tdata/Reference - fasta files for different strains used by T.congolense transcriptomic pathway\n\t\tdata/vivax - Database and geo tags for T.vivax strains\n\t\tdata/congodata.csv - the relative frequency of phylotypes appearing in T.congolense strains so far \n\t\tdata/congodata_deviationfromthemean.csv - as above but holding the deviation from the mean frequency \n\t\t\n\tThe python program Vap.py uses the following packages to analyze the isolates.\n\tPlease ensure that these are installed and available to the python environment (see Installation below)\n\t\n\tpackage\t\t\t\tversion used\t\twebsite\n\tvelvet\t\t\t\t1.2.10\t\t\t\thttps://www.ebi.ac.uk/~zerbino/velvet/\n\tEMBOSS transeq\t\t6.6.0.0         \thttp://emboss.open-bio.org/\n\tHMMER\t\t\t\t3.1b2       \t\thttp://hmmer.org/\n\tbowtie2\t\t\t\t2.2.6\t\t\t\thttp://bowtie-bio.sourceforge.net/bowtie2/index.shtml\n\tsamtools\t\t\t1.6\t\t\t\t\thttp://www.htslib.org/\n\tcufflinks           2.2.1\t\t\t\thttp://cole-trapnell-lab.github.io/cufflinks/\n\tblast\t\t\t\t2.7.1               https://blast.ncbi.nlm.nih.gov/Blast.cgi?CMD=Web&PAGE_TYPE=BlastDocs&DOC_TYPE=Download\n\t\n\tAs well as the usual python libraries Vap.py requires seaborn version 0.8.0 for clustermaps\n \n"
      },
      "source": "https://raw.githubusercontent.com/PGB-LIV/VAPPER/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/PGB-LIV/VAPPER/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "VAPPER"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "PGB-LIV"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 102500,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 19371,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 1885,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 1362,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/PGB-LIV/VAPPER/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 18:20:01",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage:",
        "parent_header": [
          "VAPPER V1.1.0"
        ],
        "type": "Text_excerpt",
        "value": "-------------\n\t\n\tpython Vap.py --help\t\tlists the command line arguments accepted as below\n\t\n\tusage: Vap.py [-h] [-s S] [-con CON] [-t] [-p] [-strain STRAIN] [-dir DIR]\n              [-cdir CDIR] [-f F] [-r R] [-k K] [-i I] [-cov COV]\n              name\n\n\tVariant Antigen Profiler - the VAPPER.\n\n\tpositional arguments:\n\t  name            Prefix for results directory and files therein\n\n\toptional arguments:\n\t  -h, --help      show this help message and exit\n\t  -s S            Species: T.congolense (default) or T.vivax\n\t  -con CON        Contigs File (fasta)\n\t  -t, -T          Transcriptomic Pathway\n\t  -ref\t\t\t  User supplied fastq reference file for T.vivax transciptomic pathway\n\t  -p, -P          Export PDFs of images to results directory as well as .pngs \n\t  -strain STRAIN  Strain for Transcriptomic pathway (defaults to Tc148)\n\t  -dir DIR        Directory that holds multiple paired NGS readfiles for analysis\n\t  -cdir CDIR      Directory that holds multiple pre-assembled contigs (fasta)files for analysis\n\t  -f F            Forward NGS read file\n\t  -r R            Reverse NGS Read File\n\t  -k K            kmers (default = 65) as used in velvet\n\t  -i I            Insert Length (default = 400) as used in velvet\n\t  -cov COV        Coverage cut off (default = 5) as used in velvet\n\n\t\n\t\n\t***** Example of use ***** \n\t\n\t\n\tT.congolense Genomic pathway:\n\t\n\tSingle sample of T.congolense from paired NGS read files. \n\t$ python Vap.py sgtest -f Test1.fastq -r Test2.fastq  \n\tResult images, csv files  and html file will be found in directory results/sgtest/\n\t\n\tMultiple sample of T.congolense from several sets of paired NGS read files place in directory /mydata/\n\tEach set of paired files should have the same name except for trailing 1 or 2 (eg Test1.fastq, Test2.fastq) \n\t$ python Vap.py mgtest -dir mydata\n\tResult images, csv files  and html file will be found in directory results/mgtest/\n\t\n\tSingle sample of T.congolense from a contigs file \n\t$ python Vap.py sctest -con Test.fa \n\tResult images, csv files  and html file will be found in directory results/sctest/\n\t\n\tMultiple sample of T.congolense from several contigs file (*.fa) placed in directory mycdata \n\t$ python Vap.py mctest -cdir mycdata \n\tResult images, csv files  and html file will be found in directory results/mctest/\n\n\tT.congolense Transcriptomic pathway\n\t\n\tSingle sample of T.congolense, transcriptomic pathway from paired Transcript read files \n\t$ python Vap.py sttest -t -f Transcripts.1 -r Transcripts.2 \n\tResult images, csv files  and html file will be found in directory results/sttest/\n\t\n\tMultiple sample of T.congolense from several sets of paired transcript read files place in directory /mytdata/\n\tEach set of paired files should have the same name except for trailing 1 or 2 (eg Transcripts.1, Transcripts.2) \n\t$ python Vap.py mttest -t -dir mytdata\n\tResult images, csv files  and html file will be found in directory results/mttest/\n\n\tT.vivax: Genomic Pathway\n\t\n\tSingle sample of T.vivax from paired NGS read files. \n\t$ python Vap.py svtest -s T.vivax -f Test1.fastq -r Test2.fastq  \n\tResult images, csv files  and html file will be found in directory results/svtest/\n\t\n\tMultiple sample of T.vivax from several sets of paired NGS read files place in directory /myvdata/\n\tEach set of paired files should have the same name except for trailing 1 or 2 (eg Test1.fastq, Test2.fastq) \n\t$ python Vap.py mvtest -s T.vivax -dir myvdata\n\tResult images, csv files  and html file will be found in directory results/mvtest/\n\t\n\tSingle sample of T.vivax from a contigs file \n\t$ python Vap.py scvtest -s T.vivax -con Test.fa \n\tResult images, csv files  and html file will be found in directory results/scvtest/\n\t\n\tMultiple sample of T.vivax from several contigs file (*.fa) placed in directory mycdata \n\t$ python Vap.py mcvtest -s T.vivax -cdir mycdata \n\tResult images, csv files  and html file will be found in directory results/mcvtest/\n\n\tT.vivax: Transcriptomic Pathway\n\n\tSingle sample of T.vivax from paired NGS read files.\n\t$ python Vap.py stvtest -s T.vivax -t -ref reference.fasta -f transcripts.1 - r transcripts.2 \n\tResults image, html and .csv file will be found in results/stvtest/\n\t\n\tMultiple samples of T.Vivax from several sets of pair NGS reads placed in directory /myvdata/\n\t$python Vap.py mtvtest -s T.vivax -t -ref reference.fasta -dir myvdata\n\tResults image, html and .csv files will be found in results/mtvtest/\n"
      },
      "source": "https://raw.githubusercontent.com/PGB-LIV/VAPPER/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Examples:",
        "parent_header": [
          "VAPPER V1.1.0"
        ],
        "type": "Text_excerpt",
        "value": "-------------\nThe directory \"Example_data\" contain examples of the outputs that should be expected. For  T. congolense, this includes \ntwo PDF and PNG heatmaps/dendrograms; a PCA plot; and two CSV files containing the VAP of a test sample, expressed as the\nphylotype relative frequncy and variation (the deviation from the mean). For T. vivax  this includes a cluster map in the \nform of heatmap/dendrogram, and a CSV file with a binary matrix representing a VAP of a test sample. Contained within the \nTranscriptomic folder is the html and associated image.  \n\nAdditionally, we have provided a small test contig file (to keep file size manageable). Type:\n\t\n\t$ python Vap.py tc_test -con test_data/Tc_contigs.fa\n\t\nThe results will be found in results/tc_test.\n\n\t\n  "
      },
      "source": "https://raw.githubusercontent.com/PGB-LIV/VAPPER/master/README.md",
      "technique": "header_analysis"
    }
  ]
}