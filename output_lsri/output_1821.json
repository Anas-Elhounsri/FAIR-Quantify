{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Cite",
        "parent_header": [
          "MUFFIN"
        ],
        "type": "Text_excerpt",
        "value": "```tex\n@article{chen2021muffin,\n  title={MUFFIN: multi-scale feature fusion for drug--drug interaction prediction},\n  author={Chen, Yujie and Ma, Tengfei and Yang, Xixi and Wang, Jianmin and Song, Bosheng and Zeng, Xiangxiang},\n  journal={Bioinformatics},\n  year={2021}\n}\n```\n"
      },
      "source": "https://raw.githubusercontent.com/xzenglab/MUFFIN/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Chen, Yujie and Ma, Tengfei and Yang, Xixi and Wang, Jianmin and Song, Bosheng and Zeng, Xiangxiang",
        "format": "bibtex",
        "title": "MUFFIN: multi-scale feature fusion for drug--drug interaction prediction",
        "type": "Text_excerpt",
        "value": "@article{chen2021muffin,\n    year = {2021},\n    journal = {Bioinformatics},\n    author = {Chen, Yujie and Ma, Tengfei and Yang, Xixi and Wang, Jianmin and Song, Bosheng and Zeng, Xiangxiang},\n    title = {MUFFIN: multi-scale feature fusion for drug--drug interaction prediction},\n}"
      },
      "source": "https://raw.githubusercontent.com/xzenglab/MUFFIN/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/xzenglab/MUFFIN"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contact",
        "parent_header": [
          "MUFFIN"
        ],
        "type": "Text_excerpt",
        "value": "If you have any question, just contact us. \n\nChinese version is provided [here.](https://github.com/chenyujie1127/MUFFIN_publish) \n"
      },
      "source": "https://raw.githubusercontent.com/xzenglab/MUFFIN/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-11-19T06:05:51Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-06-06T10:31:32Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9623036211025389,
      "result": {
        "original_header": "Overview",
        "type": "Text_excerpt",
        "value": "This repository contains source code for our paper \"MUFFIN: Multi-Scale Feature Fusion for Drug\u2013Drug Interaction Prediction\".\n \n"
      },
      "source": "https://raw.githubusercontent.com/xzenglab/MUFFIN/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/xzenglab/MUFFIN/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 10
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/xzenglab/MUFFIN/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "xzenglab/MUFFIN"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MUFFIN"
      },
      "source": "https://raw.githubusercontent.com/xzenglab/MUFFIN/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dataset Preparation",
        "parent_header": [
          "MUFFIN"
        ],
        "type": "Text_excerpt",
        "value": "You need to provide datasets defined as below:\n"
      },
      "source": "https://raw.githubusercontent.com/xzenglab/MUFFIN/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1. Approved Drug SMILES file:",
        "parent_header": [
          "MUFFIN",
          "Dataset Preparation"
        ],
        "type": "Text_excerpt",
        "value": "ALl we want to consider is the FDA-approved drug, the form is look like:\n\n> Compound::DB00119\tCC(=O)C(O)=O\n\nIn our work, we have 2322 drugs. Just 2322 lines in this file.\n"
      },
      "source": "https://raw.githubusercontent.com/xzenglab/MUFFIN/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2. DDI dataset file:",
        "parent_header": [
          "MUFFIN",
          "Dataset Preparation"
        ],
        "type": "Text_excerpt",
        "value": "'DDI_pos_neg.txt': store the DDI dataset, the form is \"drug1 \\t drug2 \\t type\". For binary data: type is in {0,1}, for the multi-class DDI dataset \"multi_ddi_sift.txt\", type ranges from 0 to 80, and for the multi-label dataset, it is in {0-200}.\n\nFor the TWOSIDES dataset, you can obtained from http://tatonettilab.org/offsides/\n\nyou can also use following command to get the total multi-label DDI dataset.\n\n> wget http://tatonettilab.org/resources/nsides/TWOSIDES.csv.xz\n\nFor the DrugBank dataset, you can obtained from https://go.drugbank.com/releases/latest\n"
      },
      "source": "https://raw.githubusercontent.com/xzenglab/MUFFIN/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3. Knowledge Graph file:",
        "parent_header": [
          "MUFFIN",
          "Dataset Preparation"
        ],
        "type": "Text_excerpt",
        "value": "DRKG : 'train.tsv' which is defined as \"h \\t r \\t t\" id form\n\nyou can get DRKG dataset from https://github.com/gnn4dr/DRKG or just download files using command below:\n\n> wget https://dgl-data.s3-us-west-2.amazonaws.com/dataset/DRKG/drkg.tar.gz\n\nNow, you get \"drkg.tsv\" file, put it into the \"./data/DRKG\" directory. Next you need to change the entity ID inconsitent with your drug smiles file (in first step, you get it). \n\njust run the code below:\n\n> python process_raw_DRKG.py\n\nAfter that, you can get \"entities.tsv\",\"relation.tsv\" and \"train.tsv\".\n"
      },
      "source": "https://raw.githubusercontent.com/xzenglab/MUFFIN/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "4. Customize your dataset:",
        "parent_header": [
          "MUFFIN",
          "Dataset Preparation"
        ],
        "type": "Text_excerpt",
        "value": "you can use your dataset follow the form as ours.\n\nyou can define your KG dataset file name as \"kg2id.txt\" and DDI dataset name as \"DDI_pos_neg.txt\".\n"
      },
      "source": "https://raw.githubusercontent.com/xzenglab/MUFFIN/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1. Graph-based drug embedding:",
        "parent_header": [
          "MUFFIN",
          "Pretrain your data Preparation"
        ],
        "type": "Text_excerpt",
        "value": "you can use \"pretrain_smiles_embedding.py\" file to generate your drug embedding, which is at last shown at \".npy\" form in the data/DRKG directory.\n\ntry this code:\n\n> python pretrained_smiles_embedding.py -fi ./data/DRKG/your_smiles_file.csv -m gin_supervised_masking -fo csv -sc smiles\n\n-fi : your smiles file position\n\n-fo : your file's type: txt or csv\n\n-sc : the smiles \"column name\" in your smiles file. \n\nwhen you run this code, you can then get the final Graph-based drug embedding.\n\ntips: For convenient, the drug smiles order(in the \"npy\" file) is consistent with the KG entity, which means if you have 2322 drugs, and the graph-based embedding \\[ID\uff1a0-2321\\] is the same as the 2322 former KG entity embedding \\[ID:0-2321\\]\n"
      },
      "source": "https://raw.githubusercontent.com/xzenglab/MUFFIN/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2. KG-based drug embedding:",
        "parent_header": [
          "MUFFIN",
          "Pretrain your data Preparation"
        ],
        "type": "Text_excerpt",
        "value": "We use DGL-KG tools to train our KG entities. if you want to generate KG-embedding, just run the following code according to your needs:\n\n> python pretrain_kg_embedding.py --model_name TransE_l2 --dataset DRKG --data_path data/DRKG/ --data_files entities.tsv relations.tsv train.tsv --format udd_hrt --batch_size 2048 --neg_sample_size 128 --hidden_dim 100 --gamma 12.0 --lr 0.1 --max_step 100000 --log_interval 1000 --batch_size_eval 16 -adv --regularization_coef 1.00E-07 --test --num_thread 1 --gpu 1 2 --num_proc 2 --neg_sample_size_eval 10000 --async_update\n\nNow, you can get the KG-based embedding named \"DRKG_TransE_l2_entity.npy\", just moved it into your dataset directory!\n"
      },
      "source": "https://raw.githubusercontent.com/xzenglab/MUFFIN/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Environment Setting",
        "parent_header": [
          "MUFFIN"
        ],
        "type": "Text_excerpt",
        "value": "This code is based on Pytorch 3.6.5. You need prepare your virtual enviroment early.\n"
      },
      "source": "https://raw.githubusercontent.com/xzenglab/MUFFIN/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/xzenglab/MUFFIN/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MUFFIN"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "xzenglab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 140070,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/xzenglab/MUFFIN/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running the code",
        "parent_header": [
          "MUFFIN"
        ],
        "type": "Text_excerpt",
        "value": "You can run the following command to re-implement our work:\n\n> python main.py\n\nwhat you need to do according to your customized file:\n1. change \u201c\u2014graph_embedding_file\u201d name with \u201cyour smiles file position\u201d\n2. change \u201c\u2014entity_embedding_file\u201d name with \u201cyour entity file position\u201d\n3. change \u201c\u2014relation_embedding_file\u201d name with \u201cyour relation file position\u201d\n4. change \u201c\u2014out_dim\u201d name with \u201c1 or 81\u201d, which is depends on your task \u201cbinary or multi-class\u201d\n5. change \u201c\u2014multi_type\u201d name with \u201cFalse or True\u201d, which is depends on your task \u201cbinary or multi-class\u201d\n"
      },
      "source": "https://raw.githubusercontent.com/xzenglab/MUFFIN/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "requirements",
    "contributors",
    "documentation",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 06:25:06",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 21
      },
      "technique": "GitHub_API"
    }
  ]
}