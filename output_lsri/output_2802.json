{
  "acknowledgement": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Acknowledgments",
        "parent_header": [
          "NS-Forest v4.0"
        ],
        "type": "Text_excerpt",
        "value": "* Allen Institute of Brain Science\n* Brain Initiative Cell Census Network\n* Chan Zuckerberg Initiative\n* California Institute for Regenerative Medicine\n"
      },
      "source": "https://raw.githubusercontent.com/JCVenterInstitute/NSForest/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Versions and citations",
        "parent_header": [
          "NS-Forest v4.0"
        ],
        "type": "Text_excerpt",
        "value": "This is version 4.0.0. Earlier versions are managed in [Releases](https://github.com/JCVenterInstitute/NSForest/releases).  \n\nVersion 4:\n\nBioArchive Link: https://www.biorxiv.org/content/10.1101/2024.04.22.590194v1.full\n\nVersion 2:\n\nAevermann BD, Zhang Y, Novotny M, Keshk M, Bakken TE, Miller JA, Hodge RD, Lelieveldt B, Lein ES, Scheuermann RH. A machine learning method for the discovery of minimum marker gene combinations for cell-type identification from single-cell RNA sequencing. Genome Res. 2021 Jun 4:gr.275569.121. doi: 10.1101/gr.275569.121.\n\nVersion 1.3/1.0:\n\nAevermann BD, Novotny M, Bakken T, Miller JA, Diehl AD, Osumi-Sutherland D, Lasken RS, Lein ES, Scheuermann RH. Cell type discovery using single-cell transcriptomics: implications for ontological representation. Hum Mol Genet. 2018 May 1;27(R1):R40-R47. doi: 10.1093/hmg/ddy100.\n"
      },
      "source": "https://raw.githubusercontent.com/JCVenterInstitute/NSForest/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/JCVenterInstitute/NSForest"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-06-08T20:43:37Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-04T17:37:49Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A machine learning method for the discovery of the minimum marker gene combinations for cell type identification from single-cell RNA sequencing"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9475391287440331,
      "result": {
        "original_header": "Pipeline",
        "type": "Text_excerpt",
        "value": "NS-Forest is an algorithm designed to identify minimum combinations of necessary and sufficient marker genes for a cell type cluster identified in a single cell or single nucleus RNA sequencing experiment that optimizes classification accuracy. NS-Forest proceeds through the following steps (default setting): \n1. Data input: An AnnData object (e.g., .h5ad file) with cell type cluster labels.  \n2. Binary score calculation: Each gene is assigned a binary score for every cluster. Binary score is a measurement of the binary expression pattern of a gene. A higher binary score means a gene is expressed in one cluster and not others. A lower binary score means a gene is expressed in many clusters and would not be an ideal candidate for a cell type-specific marker gene.  \n5. Decision tree evaluation: The top 6 ranked random forest genes are used as input into decision trees where all combinations of input genes are evaluated and the combination with the highest F-beta score is selected.  \n"
      },
      "source": "https://raw.githubusercontent.com/JCVenterInstitute/NSForest/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8924603405238125,
      "result": {
        "original_header": "NS-Forest Marker Gene Evaluation",
        "type": "Text_excerpt",
        "value": "The final module in the NS-Forest algorithm can also be used to assess the performance of any collection of marker gene combinations identified using any approach.  The marker gene evaluation module includes the following steps (default setting): \n1. Data input: 1) An AnnData object (e.g., .h5ad file) with cell type cluster labels. 2) A list of marker genes for every cluster to be evaluated.  \n2. Decision tree creation: One-vs-all decision trees are created for each gene in the cluster combination and evaluated for classification accuracy.  \n3. Decision tree evaluation: Each gene in the cluster combination is evaluated using these decision trees to determine if the gene gives the correct classification. If even one gene in the cluster combination gives a misclassification, then the prediction is considered incorrect. Note: This strict criteria may lead to PPV = 0 when no true positives (TP) classification are obtained.  \n4. Output: The NS-Forest marker gene evaluation outputs the classification metrics (F-beta, PPV (precision), recall) and On-Target Fraction for every cluster combination, which can be used to compare against other marker gene lists. \n"
      },
      "source": "https://raw.githubusercontent.com/JCVenterInstitute/NSForest/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://nsforest.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/JCVenterInstitute/NSForest/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Download and installation",
        "parent_header": [
          "NS-Forest v4.0"
        ],
        "type": "Text_excerpt",
        "value": "In terminal: \n```\ngit clone https://github.com/JCVenterInstitute/NSForest.git\n\ncd NSForest\n\nconda env create -f nsforest.yml\n\nconda activate nsforest\n```"
      },
      "source": "https://raw.githubusercontent.com/JCVenterInstitute/NSForest/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/JCVenterInstitute/NSForest/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/JCVenterInstitute/NSForest/master/docs/source/tutorial.ipynb"
      },
      "source": "https://raw.githubusercontent.com/JCVenterInstitute/NSForest/master/docs/source/tutorial.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 20
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/JCVenterInstitute/NSForest/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "JCVenterInstitute/NSForest"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "NS-Forest v4.0"
      },
      "source": "https://raw.githubusercontent.com/JCVenterInstitute/NSForest/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/JCVenterInstitute/NSForest/master/NS-Forest-sticker.png"
      },
      "source": "https://raw.githubusercontent.com/JCVenterInstitute/NSForest/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/JCVenterInstitute/NSForest/master/pipeline.PNG"
      },
      "source": "https://raw.githubusercontent.com/JCVenterInstitute/NSForest/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Download and installation",
        "parent_header": [
          "NS-Forest v4.0"
        ],
        "type": "Text_excerpt",
        "value": "In terminal: \n```\ngit clone https://github.com/JCVenterInstitute/NSForest.git\n\ncd NSForest\n\nconda env create -f nsforest.yml\n\nconda activate nsforest\n```"
      },
      "source": "https://raw.githubusercontent.com/JCVenterInstitute/NSForest/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9879609304878509,
      "result": {
        "original_header": "NS-Forest v4.0",
        "type": "Text_excerpt",
        "value": "Documentation: https://nsforest.readthedocs.io/en/latest/ \nBioArchive Link: https://www.biorxiv.org/content/10.1101/2024.04.22.590194v1.full\n \n"
      },
      "source": "https://raw.githubusercontent.com/JCVenterInstitute/NSForest/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8282477694442035,
      "result": {
        "original_header": "Authors",
        "type": "Text_excerpt",
        "value": "* Yun (Renee) Zhang zhangy@jcvi.org\n* Beverly Peng bpeng@jcvi.org\n* Angela Liu aliu@jcvi.org\n* Richard Scheuermann richard.scheuermann@nih.gov\n* Brian Aevermann baevermann@chanzuckerberg.com\n \n"
      },
      "source": "https://raw.githubusercontent.com/JCVenterInstitute/NSForest/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8225341818214864,
      "result": {
        "original_header": "Pipeline",
        "type": "Text_excerpt",
        "value": "<img src=\"pipeline.PNG\"> \n1. Data input: An AnnData object (e.g., .h5ad file) with cell type cluster labels.  \n"
      },
      "source": "https://raw.githubusercontent.com/JCVenterInstitute/NSForest/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/JCVenterInstitute/NSForest/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "clustering, decision-trees, machine-learning, marker-genes, random-forest, single-cell"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2022 J. Craig Venter Institute\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
      },
      "source": "https://raw.githubusercontent.com/JCVenterInstitute/NSForest/master/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "parent_header": [
          "NS-Forest v4.0"
        ],
        "type": "Text_excerpt",
        "value": "This project is licensed under the [MIT License](https://github.com/JCVenterInstitute/NSForest/blob/master/LICENSE).\n"
      },
      "source": "https://raw.githubusercontent.com/JCVenterInstitute/NSForest/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "NSForest"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "JCVenterInstitute"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 59063785,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 51622,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/JCVenterInstitute/NSForest/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "yunzhang813",
          "type": "User"
        },
        "date_created": "2024-03-29T15:58:09Z",
        "date_published": "2024-03-29T16:01:54Z",
        "description": "*[Release Note:] Pre-release of NS-Forest v4.0.*\r\n\r\n## Dev version of NS-Forest v4.0\r\n\r\nFollow the [tutorial](https://jcventerinstitute.github.io/celligrate/tutorials/NS-Forest_tutorial.html) to get started.\r\n\r\nDownload 'NSForest_v4dot0_dev.py' and replace the version in the tutorial. Sample code below.\r\n\r\n```\r\nadata_median = preprocessing_medians(adata, cluster_header)\r\nadata_median.varm[\"medians_\" + cluster_header].stack().plot.hist(bins=30, title = 'cluster medians')\r\n\r\nadata_median_binary = preprocessing_binary(adata_median, cluster_header, \"medians_\" + cluster_header)\r\nadata_median_binary.varm[\"binary_scores_\" + cluster_header].stack().plot.hist(bins=30, title='binary scores')\r\n\r\n## make a copy of prepared adata\r\nadata_prep = adata_median_binary.copy()\r\n\r\nNSForest(adata_prep, cluster_header=cluster_header, n_trees=1000, n_genes_eval=6,\r\n          medians_header = \"medians_\" + cluster_header, binary_scores_header = \"binary_scores_\" + cluster_header,\r\n          gene_selection = \"BinaryFirst_high\", outputfilename=\"BinaryFirst_high\")\r\n```\r\n\r\n**Full Changelog**: https://github.com/JCVenterInstitute/NSForest/compare/v3.9...v4.0_dev",
        "html_url": "https://github.com/JCVenterInstitute/NSForest/releases/tag/v4.0_dev",
        "name": "NS-Forest v4.0_dev",
        "release_id": 149036887,
        "tag": "v4.0_dev",
        "tarball_url": "https://api.github.com/repos/JCVenterInstitute/NSForest/tarball/v4.0_dev",
        "type": "Release",
        "url": "https://api.github.com/repos/JCVenterInstitute/NSForest/releases/149036887",
        "value": "https://api.github.com/repos/JCVenterInstitute/NSForest/releases/149036887",
        "zipball_url": "https://api.github.com/repos/JCVenterInstitute/NSForest/zipball/v4.0_dev"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "yunzhang813",
          "type": "User"
        },
        "date_created": "2023-05-01T17:18:33Z",
        "date_published": "2024-02-28T21:53:35Z",
        "description": "*[Release Note:] Major code optimizations based on algorithm v3.0. No algorithmic change to v3.0.*\r\n\r\n**Changes of parameter name from v3.0**\r\n[old name] = [new name]\r\n`threads = n_jobs`\r\n`howManyInformativeGenes2test = n_top_genes`\r\n`InformativeGenes = n_binary_genes`\r\n`clusterLabelcolumnHeader = cluster_header`\r\n`rfTrees = n_trees`\r\n`Median_Expression_Level = median_cutoff = 0 #set to 0`\r\n`Genes_to_testing = n_genes_eval`\r\n`dataDummy = df_dummies`\r\n`column = cl`\r\n\r\n## Download and installation\r\n\r\nNS-Forest can be installed using `pip`:\r\n`sudo pip install nsforest`\r\n\r\nIf you are using a machine on which you lack administrative access, NS-Forest can be installed locally using `pip`:\r\n`pip install --user nsforest`\r\n\r\nNS-Forest can also be installed using `conda`:\r\n`conda install -c ttl074 nsforest`\r\n\r\nWill be uploaded to official conda channel soon.\r\n\r\n**Prerequisites:**\r\n* This is a python script written and tested in python 3.8, scanpy 1.8.2, anndata 0.8.0.\r\n* Other required libraries: numpy, pandas, sklearn, itertools, time, tqdm.\r\n\r\n## Tutorial\r\n\r\nFollow the [tutorial](https://jcventerinstitute.github.io/celligrate/tutorials/NS-Forest_tutorial.html) to get started.\r\n\r\nIf you download 'NSForest_v3dot9_2.py' directly, replace the version to the most updated one in the tutorial.\r\n\r\nIf you download the `pip` or `conda` package, use the following in the tutorial.\r\n\r\n```\r\nimport nsforest as ns\r\nns.NSForest()\r\n```\r\n\r\n## Versions and citations\r\n\r\nEarlier versions are managed in [Releases](https://github.com/JCVenterInstitute/NSForest/releases).  \r\n\r\nVersion 2 and beyond:\r\n\r\nAevermann BD, Zhang Y, Novotny M, Keshk M, Bakken TE, Miller JA, Hodge RD, Lelieveldt B, Lein ES, Scheuermann RH. A machine learning method for the discovery of minimum marker gene combinations for cell-type identification from single-cell RNA sequencing. Genome Res. 2021 Jun 4:gr.275569.121. doi: 10.1101/gr.275569.121.\r\n\r\nVersion 1.3/1.0:\r\n\r\nAevermann BD, Novotny M, Bakken T, Miller JA, Diehl AD, Osumi-Sutherland D, Lasken RS, Lein ES, Scheuermann RH. Cell type discovery using single-cell transcriptomics: implications for ontological representation. Hum Mol Genet. 2018 May 1;27(R1):R40-R47. doi: 10.1093/hmg/ddy100.\r\n\r\n## Authors\r\n\r\n* Yun (Renee) Zhang zhangy@jcvi.org\r\n* Richard Scheuermann RScheuermann@jcvi.org\r\n* Brian Aevermann baevermann@chanzuckerberg.com\r\n\r\n## License\r\n\r\nThis project is licensed under the [MIT License](https://github.com/JCVenterInstitute/NSForest/blob/master/LICENSE).\r\n\r\n## Acknowledgments\r\n\r\n* BICCN\r\n* Allen Institute of Brain Science\r\n* Chan Zuckerberg Initiative\r\n* California Institute for Regenerative Medicine\r\n\r\n## What's Changed\r\n* Adding pip instructions and packaging files by @ttl074 in https://github.com/JCVenterInstitute/NSForest/pull/13\r\n\r\n## New Contributors\r\n* @ttl074 made their first contribution in https://github.com/JCVenterInstitute/NSForest/pull/13\r\n\r\n**Full Changelog**: https://github.com/JCVenterInstitute/NSForest/compare/v3.0...v3.9\r\n",
        "html_url": "https://github.com/JCVenterInstitute/NSForest/releases/tag/v3.9",
        "name": "NS-Forest v3.9",
        "release_id": 144082694,
        "tag": "v3.9",
        "tarball_url": "https://api.github.com/repos/JCVenterInstitute/NSForest/tarball/v3.9",
        "type": "Release",
        "url": "https://api.github.com/repos/JCVenterInstitute/NSForest/releases/144082694",
        "value": "https://api.github.com/repos/JCVenterInstitute/NSForest/releases/144082694",
        "zipball_url": "https://api.github.com/repos/JCVenterInstitute/NSForest/zipball/v3.9"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "BAevermann",
          "type": "User"
        },
        "date_created": "2021-06-17T18:27:00Z",
        "date_published": "2021-06-17T18:33:15Z",
        "description": "*[Release note:] New version of NS-Forest is redeveloped to operate directly on a scanpy object. The algorithm is essentially the same, and in testing returns identical results to NS-Forest v2.0 when the same parameters are used.*\r\n\r\n# Necessary and Sufficient Forest (NS-Forest) for Cell Type Marker Determination from cell type clusters\r\n\r\n## Getting Started\r\n\r\nInstall python 3.6 or above. Download NSForest_v3.py file\r\n\r\n\r\n### Prerequisites\r\n\r\n* This is a python script written in python 3.6. Required libraries: Numpy, Pandas, Sklearn, graphviz, numexpr, scanpy\r\n* scanpy object (adata) with at least one column containing the cluster assignments. Default slot set to adata.obs[\"louvain\"]; however parameter is tunable in function call.\r\n\r\n### Using NS-Forest v3.0\r\n\r\nfrom NSForest_v3 import * <br />\r\nimport itertools<br />\r\n\r\nadata_markers = NS_Forest(adata) #Runs NS_Forest on scanpy object <br />\r\nMarkers = list(itertools.chain.from_iterable(adata_markers['NSForest_Markers'])) #gets list of minimal markers from dataframe for display in scanpy plotting functions <br />\r\nBinary_Markers = list(itertools.chain.from_iterable(adata_markers['Binary_Genes'])) #gets list of binary markers from dataframe for display in scanpy plotting functions <br />\r\n\r\n### NS-Forest v3.0 parameters\r\n\r\nNS_Forest(adata, clusterLabelcolumnHeader = \"louvain\", rfTrees = 1000, Median_Expression_Level = 0, Genes_to_testing = 6, betaValue = 0.5)\r\n* adata = scanpy object\r\n* rfTrees = Number of trees\r\n* clusterLabelcolumnHeader = column header in adata.obs['header_here!'] where cluster assignments reside. Typically 'louvain' if louvain clustering was used.\r\n* Median_Expression_Level = median expression level for removing negative markers\r\n* Genes_to_testing = How many ranked genes by binary score will be evaluated in permutations by fbeta-score \r\n* betaValue = Set values for fbeta weighting. 1 is default f-measure. close to zero is Precision, greater than 1 weights toward Recall\r\n\r\n\r\n### Description\r\n\r\nNecessary and Sufficient Forest is a method that takes cluster results from single cell/nuclei RNAseq experiments \r\nand generates lists of minimal markers needed to define each \u201ccell type cluster\u201d. \r\n \r\nThe method begins by re-encoding the cluster labels into binary classifications, and Random Forest models are generated comparing each \r\ncluster versus all. The top fifteen genes are then reranked using a score measuring how binary they are, e.g., a gene with expression in\r\nthe target cluster but no expression in the other clusters would have a high binary score. Expression cutoffs for the top six genes ranked\r\nby binary score are then determined by generating individual decision trees and extracting the decision path information. Then all combinations \r\nof the top six most binary genes are evaluated using f-beta score as an objective function (the beta value default set at 0.5, which weights the \r\nf-measure score more toward precision as opposed to recall). \r\n\r\n\r\nSee code for detailed comments. \r\n\r\n\r\n## Versioning\r\n\r\nThis is version 3.0 The earlier releases were described in the below publications.  \r\n\r\nVersion 2\r\n\r\nAevermann BD, Zhang Y, Novotny M, Keshk M, Bakken TE, Miller JA, Hodge RD, Lelieveldt B, Lein ES, Scheuermann RH. A machine learning method for the discovery of minimum marker gene combinations for cell-type identification from single-cell RNA sequencing. Genome Res. 2021 Jun 4:gr.275569.121. doi: 10.1101/gr.275569.121. Epub ahead of print. PMID: 34088715.\r\n\r\nversion 1.3/1.0:\r\n\r\nAevermann BD, Novotny M, Bakken T, Miller JA, Diehl AD, Osumi-Sutherland D, Lasken RS, Lein ES, Scheuermann RH.\r\nCell type discovery using single-cell transcriptomics: implications for ontological representation. \r\nHum Mol Genet. 2018 May 1;27(R1):R40-R47. doi: 10.1093/hmg/ddy100.\r\n\r\n\r\n## Authors\r\n\r\n* Brian Aevermann baeverma@jcvi.org and Richard Scheuermann RScheuermann@jcvi.org\r\n\r\n\r\n## License\r\n\r\nThis project is licensed under the MIT License - see the https://opensource.org/licenses/MIT for details\r\n\r\n## Acknowledgments\r\n\r\n* BICCN\r\n* Allen Institute of Brain Science\r\n* Chan Zuckerberg Initiative \r\n* California Institute for Regenerative Medicine\r\n\r\n## What's Changed\r\n* Solve issue #1 (TypeError: 'NoneType' object is not callable) by @e-sollier in https://github.com/JCVenterInstitute/NSForest/pull/2\r\n\r\n## New Contributors\r\n* @e-sollier made their first contribution in https://github.com/JCVenterInstitute/NSForest/pull/2\r\n\r\n**Full Changelog**: https://github.com/JCVenterInstitute/NSForest/compare/v2.0...v3.0",
        "html_url": "https://github.com/JCVenterInstitute/NSForest/releases/tag/v3.0",
        "name": "NS-Forest v3.0",
        "release_id": 44819221,
        "tag": "v3.0",
        "tarball_url": "https://api.github.com/repos/JCVenterInstitute/NSForest/tarball/v3.0",
        "type": "Release",
        "url": "https://api.github.com/repos/JCVenterInstitute/NSForest/releases/44819221",
        "value": "https://api.github.com/repos/JCVenterInstitute/NSForest/releases/44819221",
        "zipball_url": "https://api.github.com/repos/JCVenterInstitute/NSForest/zipball/v3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "BAevermann",
          "type": "User"
        },
        "date_created": "2018-11-09T04:57:50Z",
        "date_published": "2018-11-21T21:50:13Z",
        "description": "# Necessary and Sufficient Forest (NS-Forest) for Cell Type Marker Determination from cell type clusters\r\n\r\n## Getting Started\r\n\r\nInstall Jupyter notebook and python 2.7\r\n\r\n### Prerequisites\r\n\r\n* The script is a Jupyter notebook in python 2.7. Required libraries: Numpy, Pandas, Sklearn, graphviz, numexpr\r\n* The input data is a tab delimited expression Cell x Gene matrix with one column containing the cluster assignments \r\n* The cluster-label column must be named \"Clusters\" and the labels must be non-numeric (if currently numbers, please add \"Cl\" or any text would work). \r\n* The gene identifiers used must avoid special characters such as ./-/@ or beginning with numbers (I prefix identifiers beginning with numbers and substitute all special characters with \"_\")\r\n\r\n\r\n### Description\r\n\r\nNecessary and Sufficient Forest is a method that takes cluster results from single cell/nuclei RNAseq experiments \r\nand generates lists of minimal markers needed to define each \u201ccell type cluster\u201d. \r\n \r\nThe method begins by re-encoding the cluster labels into binary classifications, and Random Forest models are generated comparing each \r\ncluster versus all. The top fifteen genes are then reranked using a score measuring how binary they are, e.g., a gene with expression in\r\nthe target cluster but no expression in the other clusters would have a high binary score. Expression cutoffs for the top six genes ranked\r\nby binary score are then determined by generating individual decision trees and extracting the decision path information. Then all permutations \r\nof the top six most binary genes are evaluated using f-beta score as an objective function (the beta value default set at 0.5, which weights the \r\nf-measure score more toward precision as opposed to recall). \r\n\r\n\r\n\r\nSee code for detailed comments. \r\n\r\n\r\n## Versioning\r\n\r\nThis is version 2.0 The initial release was version 1.3. Version 1.0 was described in: \r\n\r\nAevermann BD, Novotny M, Bakken T, Miller JA, Diehl AD, Osumi-Sutherland D, Lasken RS, Lein ES, Scheuermann RH.\r\nCell type discovery using single-cell transcriptomics: implications for ontological representation. \r\nHum Mol Genet. 2018 May 1;27(R1):R40-R47. doi: 10.1093/hmg/ddy100.\r\n\r\n\r\n## Authors\r\n\r\n* Brian Aevermann baeverma@jcvi.org and Richard Scheuermann RScheuermann@jcvi.org\r\n\r\n\r\n## License\r\n\r\nThis project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details\r\n\r\n## Acknowledgments\r\n\r\n* Allen Institute of Brain Science\r\n* Chan Zuckerberg Initiative \r\n* California Institute for Regenerative Medicine \r\n\r\n",
        "html_url": "https://github.com/JCVenterInstitute/NSForest/releases/tag/v2.0",
        "name": "NS-Forest v2.0",
        "release_id": 14129334,
        "tag": "v2.0",
        "tarball_url": "https://api.github.com/repos/JCVenterInstitute/NSForest/tarball/v2.0",
        "type": "Release",
        "url": "https://api.github.com/repos/JCVenterInstitute/NSForest/releases/14129334",
        "value": "https://api.github.com/repos/JCVenterInstitute/NSForest/releases/14129334",
        "zipball_url": "https://api.github.com/repos/JCVenterInstitute/NSForest/zipball/v2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "BAevermann",
          "type": "User"
        },
        "date_created": "2018-11-02T20:35:35Z",
        "date_published": "2018-11-02T20:48:07Z",
        "description": "# Necessary and Sufficient Forest (NS-Forest) for Cell Type Marker Determination from cell type clusters\r\n\r\n## Getting Started\r\n\r\nInstall Jupyter notebook and python 2.7\r\n\r\n### Prerequisites\r\n\r\n* The script is a Jupyter notebook in python 2.7. Required libraries: Numpy, Pandas, Sklearn, graphviz, numexpr\r\n* The input data is a tab delimited expression Cell x Gene matrix with one column containing the cluster assignments \r\n* The cluster-label column must be named \"Clusters\" and the labels must be non-numeric (if currently numbers, please add \"Cl\" or any text would work). \r\n* The gene identifiers used must avoid special characters such as ./-/@ or beginning with numbers (I prefix identifiers beginning with numbers and substitute all special characters with \"_\")\r\n\r\n\r\n### Description\r\n\r\nNecessary and Sufficient Forest is a method that takes cluster results from single cell/nuclei RNAseq experiments \r\nand generates lists of minimal markers needed to define each \u201ccell type cluster\u201d. \r\n \r\nThe method begins by re-encoding the cluster labels into binary classifications, and Random Forest models are generated comparing each \r\ncluster versus all. The top ten ranked features from the Random Forest are then tested using f-measure as an objective function. \r\nFor example, during the first step all top ten features are independently evaluated for their discriminatory power at an \r\nexpression value where 75% of the cells have greater than or equal expression. Given that 25% of the cells are lost de facto,\r\nthe maximum f-measure for the first step is estimated to be around 0.87 (there will be cases where its higher or lower, such \r\nas having equal expression across all cells). After the best f-measure is found classifying with one gene than the remaining \r\nnine genes are tested in combination with the top first gene, again using an expression value where 75% of the cells have expression. \r\nAfter the best pair of genes is found, the remaining 8 genes are tested in third position, and onward until the analysis reaches\r\n6 combinations.   \r\n\r\nSee code for detailed comments. \r\n\r\n\r\n## Versioning\r\n\r\nThe initial release is version 1.3. Version 1.0 was described in: \r\n\r\nAevermann BD, Novotny M, Bakken T, Miller JA, Diehl AD, Osumi-Sutherland D, Lasken RS, Lein ES, Scheuermann RH.\r\nCell type discovery using single-cell transcriptomics: implications for ontological representation. \r\nHum Mol Genet. 2018 May 1;27(R1):R40-R47. doi: 10.1093/hmg/ddy100.\r\n\r\n\r\n## Authors\r\n\r\n* Brian Aevermann baeverma@jcvi.org and Richard Scheuermann RScheuermann@jcvi.org\r\n\r\n\r\n## License\r\n\r\nThis project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details\r\n\r\n## Acknowledgments\r\n\r\n* Allen Institute of Brain Science\r\n* Chan Zuckerberg Initiative \r\n* California Institute for Regenerative Medicine \r\n\r\n",
        "html_url": "https://github.com/JCVenterInstitute/NSForest/releases/tag/v1.3",
        "name": "NS-Forest v1.3",
        "release_id": 13805983,
        "tag": "v1.3",
        "tarball_url": "https://api.github.com/repos/JCVenterInstitute/NSForest/tarball/v1.3",
        "type": "Release",
        "url": "https://api.github.com/repos/JCVenterInstitute/NSForest/releases/13805983",
        "value": "https://api.github.com/repos/JCVenterInstitute/NSForest/releases/13805983",
        "zipball_url": "https://api.github.com/repos/JCVenterInstitute/NSForest/zipball/v1.3"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Prerequisites",
        "parent_header": [
          "NS-Forest v4.0"
        ],
        "type": "Text_excerpt",
        "value": "* This is a python script written and tested in python 3.11, scanpy 1.9.6.\n* Other required libraries: numpy, pandas, sklearn, plotly, time, tqdm.\n"
      },
      "source": "https://raw.githubusercontent.com/JCVenterInstitute/NSForest/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "run",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-06 10:21:39",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 53
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Tutorial",
        "parent_header": [
          "NS-Forest v4.0"
        ],
        "type": "Text_excerpt",
        "value": "Follow the on readthedocs: https://nsforest.readthedocs.io/en/latest/tutorial.html\n"
      },
      "source": "https://raw.githubusercontent.com/JCVenterInstitute/NSForest/master/README.md",
      "technique": "header_analysis"
    }
  ]
}