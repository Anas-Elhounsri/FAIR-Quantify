{
  "application_domain": [
    {
      "confidence": 16.77,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/jttoivon/moder2"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-04-15T15:35:13Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-03-14T20:20:26Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MODER2 is a program for learning DNA binding motifs from SELEX datasets."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9848542478371649,
      "result": {
        "original_header": "Computing pairwise huddinge distances",
        "type": "Text_excerpt",
        "value": "This part is not closely related to MODER2, but can be useful to\ncluster or otherwise visualize the set of k-mers of a data set. \nThe program `all_pairs_huddinge` computes all pairwise huddinge distances for\ninput sequences. The output is by default streamed to file `huddinge.dists` with 1st line giving\nnumber N of sequences studied and the next N lines give the sequences\nthemselves. Finally there is N(N-1)/2 bytes of huddinge distances\nbetween pairs of sequences. The distance between sequences i > j is\nprovided by kth (unsigned) byte where k=i*(i-1)/2 + j.\n \n"
      },
      "source": "https://raw.githubusercontent.com/jttoivon/moder2/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/jttoivon/moder2/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/jttoivon/moder2/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "jttoivon/moder2"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Installing and pre-requisities"
      },
      "source": "https://raw.githubusercontent.com/jttoivon/moder2/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installing and pre-requisities",
        "type": "Text_excerpt",
        "value": "MODER2 is implemented in C++ and has been tested in Linux platform.\nAs the only external dependency, the MODER2 requires the Boost library, which is normally installed on Linux machines. Relatively recent version\nshould be used. At least version 1.49 is known to work.\nTo get full advantage of parallellism the compiler should support openmp 4.0 which, for instance, gcc 4.9.0 and later supports."
      },
      "source": "https://raw.githubusercontent.com/jttoivon/moder2/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9282590554220249,
      "result": {
        "original_header": "Visualizing pfms, adms and cob tables",
        "type": "Text_excerpt",
        "value": "If the python packages `numpy` and `matplotlib` are installed, the cob tables can be visualized as follows: \n\t./heatmap.py TFAP2A_models/TFAP2A-TFAP2A.cob TFAP2A-TFAP2A.png\n\t\ncreates file `TFAP2A_models/TFAP2A-TFAP2A.png`. The extension of the output file\ndetermines the format.\nRun `./heatmap.py` without parameters to get more instructions.\n \n"
      },
      "source": "https://raw.githubusercontent.com/jttoivon/moder2/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8866645850363348,
      "result": {
        "original_header": "Visualizing pfms, adms and cob tables",
        "type": "Text_excerpt",
        "value": "\t./heatmap.py TFAP2A_models/TFAP2A-TFAP2A.cob \n\t./heatmap.py TFAP2A_models/TFAP2A-TFAP2A.cob TFAP2A-TFAP2A.png\n\t\ncreates file `TFAP2A_models/TFAP2A-TFAP2A.png`. The extension of the output file\ndetermines the format.\nRun `./heatmap.py` without parameters to get more instructions.\n \n"
      },
      "source": "https://raw.githubusercontent.com/jttoivon/moder2/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/jttoivon/moder2/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "GNU General Public License v2.0",
        "spdx_id": "GPL-2.0",
        "type": "License",
        "url": "https://api.github.com/licenses/gpl-2.0",
        "value": "https://api.github.com/licenses/gpl-2.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "moder2"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "jttoivon"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 636874,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 102951,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 101580,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 11570,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jttoivon/moder2/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running",
        "type": "Text_excerpt",
        "value": "first run `make clean`, followed by `make NOOPENMP=1`. This option unfortunately prevents running\nMODER2 with multiple threads simultaneously.\n\nYou can also install MODER2 by running the command\n\n\tsudo make install\n\nIf you want to install to a non-standard location, use for example\n\n\tmake prefix=$HOME/usr install\n\nwhich installs the binary to $HOME/usr/bin.\nRunning command `moder2` should give brief instructions on the command line parameters.\nThe packaged also includes, for internal use, an implementation of suffix array by Juha K\u00e4rkk\u00e4inen in directory CPM03.\nFor visualization of PPM and ADM models, the package\nincludes a modified version of a program called spacek40 by Jussi Taipale.\n\nRunning\n=======\n\nThe generic form of running MODER2 is as follows\n\n    moder2 [ options ] inputfile monomer0,monomer1,...\n\nIf the inputfile has extension `fasta` or `fa`, then it is read as a fasta file.\nOtherwise, the input file to MODER2 should consist of sequences separated by 'new line' characters.\nThat is, each sequence should appear on its own line.\nCurrently, sequences containing non-base characters, such as `N`, are ignored.\n\nBy default, MODER2 learns PPM models (order-zero inhomogeneous Markov chains).\nTo learn ADM models (order-one inhomogeneous Markov chains) use option `--model adm`.\n\nThe second parameter is a comma separated list of initial values for monomer models. These\ncan be given either as IUPAC sequences or as matrices. In the latter case, the option\n`--matrices` should be given.\n\nBy default, MODER2 learns PPM models (order-zero inhomogeneous Markov chains).\nTo learn ADM models (order-one inhomogeneous Markov chains) use option `--model adm`.\n\nBy default, dirichlet pseudo counts are used, before the count matrices are normalized. Option\n`--prior dirichlet` uses pseudo count 0.01 times the initial background frequency of the corresponding nucleotide.\nOption `--prior addone` uses pseudo count 0.000001.\nThe option `--prior none` disables the use of pseudo counts.\n\nUse the option `--cob` to specify which cob tables you want to compute. For instance, if you have given\nseeds for five monomeric binding motifs, then these are referred to with indices 0, 1, 2, 3, and 4.\nIf you are interested only in the interaction of motifs 0 and 2, and homodimeric cases of motif 4, then\nyou can give the following option:\n    --cob 0-2,4-4\nThe option `--cob all` can be given to generate all possible cob combinations. For example,\nin the case of two monomeric binding motifs, this creates three cob tables: 0-0,1-1,0-1.\n\nThe dimeric cases with non-negative distance between the half-sites, contain position\nthat do not belong to either monomer model\nBy default, MODER2 learns also this gap area from the data. It\ncan however be restricted with option `--max-gap-learned` that gaps are learned only\nfor gaps of length at most the given limit. With option `--max-gap-learned -1`\nthe gaps are not learned. When gap positions are not learned from the data, they are filled\nwith uniform distribution.\n\nIf option `--unbound filename` is given, all the sequences X_i for which the posterior probability of the background model \\theta_0 is higher\nthan the posterior probability of any other model \\theta_k are dumped to this file. In essence, sequences for which the background\nmodel is the most likely explanation are stored to this file. The purpose of this option is to be able to verify\nlater whether the supposed background sequences contain any remaining signal or not.\n\nIf option `--output` is given, the program writes monomer motifs, cob tables, deviation matrices and monomer weights to separate files.\nBy default these files are written to current directory. This behaviour can be changed with `--outputdir directory` option.\nIf option `--names name1,name2,...` is given, these names are used to construct the above filenames instead of TF0, TF1,...\n\nIf option `--flanks` is given, the program also computes a model including the flanking positions of the actual motif(s).\nThis option can be used to check that motif is long enough not to leave out any informational positions.\nHowever, the matrices which include the flanks are not dumped to files, even if the option --output is given, but the\nuser has to parse these from the program output (or use the `to_html.py` utility described below).\n\nThe option `--number-of-threads n` instructs MODER2 to use 'n' parallel OpenMP threads to speed up execution time.\n\n**Example of running MODER2:**\n\n\t./moder2 --model adm-fixed --names TFAP2A --outputdir TFAP2A_models --cob 0-0 data/TFAP2A-head-1000.seq GGGCA > result.txt\n\nThe data file data/TFAP2A-head-1000.seq included in this package contains the first 1000 reads from ENA experiment\nERX168813 (http://www.ebi.ac.uk/ena/data/view/ERX168813).\n\nAfter the program has run, the full, unparsed result, will be in file 'result.txt'.\nIn the directory `TFAP2A_models` the following files are stored:\n\n* \\*.pfm\t \t The PPM model of motifs\n* \\*.adm                 The ADM model of motifs\n* \\*.cob\t     \t The COB table of a transcription factor pair, or of a pair of binding profiles\n* \\*.dev\t     \t Correction table kappa for each detected overlapping/gapped dimeric case\n* monomer_weights.txt\t Weight for each monomer model, separated by commas\n\nRun `moder2` without parameters to get description of all possible command line parameters.\n"
      },
      "source": "https://raw.githubusercontent.com/jttoivon/moder2/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 12:14:16",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Creating an html report of the results",
        "type": "Text_excerpt",
        "value": "If output of the above example of running MODER2 is stored in file `result.txt`, then\nan html report can be generated using the command\n\n        ./to_html.py TFAP2A result.txt\n\nThis creates a directory named `result.report` that contains all the model component (\\*.pfm, \\*.adm \\*.cob, \\*.dev)\nin numerical form and also visualized form. The directory also contains the html report\n`index.html` that can be viewed using a web browser.\n\nThe first parameter to `to_html.py` should be a comma separated list of factor names,\nwith as many factor names as there were seeds given to MODER2. An exception to this rule\nis when all the seeds given to MODER2 are just different profiles of the same transcription factor.\nThen, if the first parameter is, for example, 'TF', the report generator will automatically create profile names\nTFa,TFb,TFc, etc, for each seed given to MODER2.\n\nAll the images in the html page are clickable and reveal more information.\n"
      },
      "source": "https://raw.githubusercontent.com/jttoivon/moder2/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ]
}