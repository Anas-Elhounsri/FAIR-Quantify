{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "NanoSatellite"
        ],
        "type": "Text_excerpt",
        "value": "If this tool is useful for your work, please consider citing our [preprint](https://www.biorxiv.org/content/early/2018/10/09/439026).\n"
      },
      "source": "https://raw.githubusercontent.com/arnederoeck/NanoSatellite/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1. Generate reference squiggles (Squiggle_generator.sh)",
        "parent_header": [
          "NanoSatellite",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "```\nbash Squiggle_generator.sh [arguments]\n\nMandatory arguments\n    -f Fasta file with your genome of interest (necessary in the algorithm to determine the flanking sequences)\n    -r Coordinates of your tandem repeat of interest (e.g. you can obtain these from the Tandem Repeats Finder / Simple Repeats track in the UCSC browser)\n    -u Consensus motif of your tandem repeat of interest (e.g. you can obtain these from the Tandem Repeats Finder / Simple Repeats track in the UCSC browser)\n    \nAdditional arguments\n    -p Prefix added to the output files\n    -e If you add \"-e no\" then generation of an optional markdown report is suppressed\n    -l Change the size of the flanking sequence in the reference squiggles\n    -n Change the number of tandem repeat units in the reference squiggles\n```\n"
      },
      "source": "https://raw.githubusercontent.com/arnederoeck/NanoSatellite/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/arnederoeck/NanoSatellite"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-10-06T06:45:15Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-05-23T13:23:39Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Dynamic time warping of Oxford Nanopore squiggle data to characterize tandem repeats."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2.1 Fastest method using a summary file generated by Albacore or Guppy",
        "parent_header": [
          "NanoSatellite",
          "Usage",
          "2. Index fast5 directory (fast5_indexing.sh)"
        ],
        "type": "Text_excerpt",
        "value": "```\nbash fast5_indexing.sh <summary_file> <fast5_directory> <prefix>\n\nExample:\nbash fast5_indexing.sh /storage/albacore/summary.tsv /storage/fast5 example\n```"
      },
      "source": "https://raw.githubusercontent.com/arnederoeck/NanoSatellite/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2.2 Indexing without summary file (not recommended for large fast5 directories)",
        "parent_header": [
          "NanoSatellite",
          "Usage",
          "2. Index fast5 directory (fast5_indexing.sh)"
        ],
        "type": "Text_excerpt",
        "value": "This method will extract the read_id's from the fast5 file. This requires python3, [ont_fast5_api](https://github.com/nanoporetech/ont_fast5_api), and an hdf5 installation.\n\n```\nbash no_summary_indices.sh <fast5_directory> <prefix>\n\nExample:\nbash no_summary_indices.sh /storage/fast5 example\n```\n"
      },
      "source": "https://raw.githubusercontent.com/arnederoeck/NanoSatellite/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.992779011016193,
      "result": {
        "original_header": "NanoSatellite",
        "type": "Text_excerpt",
        "value": "Dynamic time warping of Oxford Nanopore squiggle data to characterize tandem repeats.\n \n"
      },
      "source": "https://raw.githubusercontent.com/arnederoeck/NanoSatellite/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9256295020393907,
      "result": {
        "original_header": "Rationale",
        "type": "Text_excerpt",
        "value": "Several tools exist to analyze tandem repeats (e.g. [tandem-genotypes](https://github.com/mcfrith/tandem-genotypes) and [RepeatHMM](https://github.com/WGLab/RepeatHMM)). While they do a great job for many tandem repeats in a relatively fast fashion, their quality depends on base calling and alignment. For some tandem repeats (in particular expanded and/or GC-rich tandem repeats), base calling and alignment perform poorly with suboptimal (and DNA strand biased) tandem repeat length and sequence estimations. To overcome these issues, we developed NanoSatellite, a dynamic time warping based algorithm to analyze tandem repeats on raw Oxford Nanopore squiggle data. The figure below illustrates how NanoSatellite can delineate a tandem repeat in squiggle data and subsequently segment that tandem repeat in seperate units. More information can be found in our [preprint](https://www.biorxiv.org/content/early/2018/10/09/439026). \nDynamic time warping (embedded in NanoSatellite) requires a minimum \"pattern size\" for good pattern recognition. Hence for tandem repeats with a very short tandem repeat motif, or low numbers of repeating motifs NanoSatellite will produce suboptimal results.\n \n"
      },
      "source": "https://raw.githubusercontent.com/arnederoeck/NanoSatellite/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/arnederoeck/NanoSatellite/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "faq": [
    {
      "confidence": 1,
      "result": {
        "original_header": "4.2 Alternative approach in case of rhdf5 error using approach 4.1",
        "parent_header": [
          "NanoSatellite",
          "Usage",
          "4. Delineate and segment tandem repeat spanning reads on the squiggle level (Signal2chunk.R)"
        ],
        "type": "Text_excerpt",
        "value": "Some versions of R and rhdf5 don't work well together and can result in an HDF5 error when running `Signal2chunk.R`. If this occurs we made a workaround using `fast5_extract.py` (with thanks to [Wouter](https://github.com/wdecoster)), which depends on [ont_fast5_api](https://github.com/nanoporetech/ont_fast5_api). `fast5_extract.py` extracts the squiggle data from fast5, which can be written away to a file that can subsequently be supplied to `Signal2chunk.R` as the third argument.\n\nusage:\n\n```\nfast5_extract.py [-h] [-d DIR] [-f [FILE [FILE ...]]] [-r]\n\nExtract signal level from fast5 files\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -d DIR, --dir DIR     directory with fast5 file(s) to extract signal from\n  -f [FILE [FILE ...]], --file [FILE [FILE ...]]\n                        fast5 file(s) to extract signal from\n  -r, --recursive       recursively go through directories\n```\n\nEither supply a directory of fast5 files using -d/--dir, searched optionally recursive with -r/--recursive OR supply one or more fast5 files with -f/--file\n\nExample:\n\n```\npython fast5_extract.py -r -d /storage/fast5/ > fast5_pre-extracted.txt\n\nRscript Signal2chunk.R spanning_reads.txt ABCA7_VNTR.squiggle fast5_pre-extracted.txt\n```\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/arnederoeck/NanoSatellite/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/arnederoeck/NanoSatellite/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "arnederoeck/NanoSatellite"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/arnederoeck/NanoSatellite/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/arnederoeck/NanoSatellite/master/Squiggle_generator.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/arnederoeck/NanoSatellite/master/no_summary_indices.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/arnederoeck/NanoSatellite/master/Spanning_read_extractor.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/arnederoeck/NanoSatellite/master/fast5_indexing.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/arnederoeck/NanoSatellite/master/scripts/install.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/arnederoeck/NanoSatellite/master/scripts/test.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/arnederoeck/NanoSatellite/master/figures/raw_positive_squiggle_plot_chunk_colorized20180813.png"
      },
      "source": "https://raw.githubusercontent.com/arnederoeck/NanoSatellite/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/arnederoeck/NanoSatellite/master/figures/NanoSatelliteR_plot_lengths.png"
      },
      "source": "https://raw.githubusercontent.com/arnederoeck/NanoSatellite/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/arnederoeck/NanoSatellite/master/figures/NanoSatelliteR_centroid_plot.png"
      },
      "source": "https://raw.githubusercontent.com/arnederoeck/NanoSatellite/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "4.1 The simplest way (needs a functioning rhdf5 installation in R)",
        "parent_header": [
          "NanoSatellite",
          "Usage",
          "4. Delineate and segment tandem repeat spanning reads on the squiggle level (Signal2chunk.R)"
        ],
        "type": "Text_excerpt",
        "value": "```\nRscript Signal2chunk.R <spanning_reads file> <reference_squiggles.squiggle>\n\nExample:\nRscript Signal2chunk.R spanning_reads.txt ABCA7_VNTR.squiggle\n```\n\nThe output consists of:\n* several *.chunk* files, each corresponding to a tandem repeat squiggle unit.\n* A *read_metadata.table* containing the number of repeat units per read\n* An html report: *chunk_report.html*\n\nmultiple samples and/or tandem repeats can be run in parallel using external tools.\n[GNU Parallel](https://www.gnu.org/software/parallel/) example:\n\n```\n#Multiple samples, each with a separate \"spanning_reads file\" in the \"spanning_reads/\" directory:\nls spanning_reads/* | parallel 'Rscript Signal2chunk.R {} ABCA7_VNTR.squiggle'\n```"
      },
      "source": "https://raw.githubusercontent.com/arnederoeck/NanoSatellite/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/arnederoeck/NanoSatellite/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2018 Arne De Roeck\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/arnederoeck/NanoSatellite/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/arnederoeck/NanoSatellite/master/figures/NanoSatelliteR_qc.png"
      },
      "source": "https://raw.githubusercontent.com/arnederoeck/NanoSatellite/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "NanoSatellite"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "arnederoeck"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 18077,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 9136,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 2333,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/arnederoeck/NanoSatellite/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "arnederoeck",
          "type": "User"
        },
        "date_created": "2019-05-27T18:20:28Z",
        "date_published": "2019-08-01T13:27:17Z",
        "html_url": "https://github.com/arnederoeck/NanoSatellite/releases/tag/0.2",
        "name": "Second NanoSatellite release",
        "release_id": 19014885,
        "tag": "0.2",
        "tarball_url": "https://api.github.com/repos/arnederoeck/NanoSatellite/tarball/0.2",
        "type": "Release",
        "url": "https://api.github.com/repos/arnederoeck/NanoSatellite/releases/19014885",
        "value": "https://api.github.com/repos/arnederoeck/NanoSatellite/releases/19014885",
        "zipball_url": "https://api.github.com/repos/arnederoeck/NanoSatellite/zipball/0.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "arnederoeck",
          "type": "User"
        },
        "date_created": "2018-11-15T14:48:37Z",
        "date_published": "2018-11-15T14:52:00Z",
        "description": "In this release, all aspects of NanoSatellite and NanoSatelliteR were tested and seemed to work on multiple Linux (CentOS and Ubuntu) platforms, with differing versions R installations, R packages, and other dependencies.",
        "html_url": "https://github.com/arnederoeck/NanoSatellite/releases/tag/0.1",
        "name": "First NanoSatellite release",
        "release_id": 14023118,
        "tag": "0.1",
        "tarball_url": "https://api.github.com/repos/arnederoeck/NanoSatellite/tarball/0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/arnederoeck/NanoSatellite/releases/14023118",
        "value": "https://api.github.com/repos/arnederoeck/NanoSatellite/releases/14023118",
        "zipball_url": "https://api.github.com/repos/arnederoeck/NanoSatellite/zipball/0.1"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependencies",
        "parent_header": [
          "NanoSatellite"
        ],
        "type": "Text_excerpt",
        "value": "* [Scrappie](https://github.com/nanoporetech/scrappie \"Scrappie\") (>= 1.3.1) needs to be in path. (installation through [conda](https://anaconda.org/bioconda/scrappie) is also possible)\n* Samtools (>= 1.3) in path\n* R (>= 3.4.2) and following R packages: \n  * rhdf5 (>= 2.22.0)\n  * dtw (>= 1.18-1)\n  * ggplot2 (>= 2.2.1)\n  * dplyr (>= 0.7.7)\n  * tidyr (>= 0.7.2)\n  * rmarkdown (>= 1.8)\n  * dtwclust (>= 5.5.0)\n  * knitr (>= 1.18)\n  * devtools (>=2.0.0)\n```\n#To install these packages, open R and run the following commands:\ninstall.packages(c(\"dtw\",\"ggplot2\",\"dplyr\",\"tidyr\",\"rmarkdown\",\"dtwclust\",\"knitr\",\"devtools\"))\n\nif (!requireNamespace(\"BiocManager\", quietly = TRUE))\n    install.packages(\"BiocManager\")\nBiocManager::install(\"rhdf5\", version = \"3.8\")\n```\n* [NanoSatelliteR](https://github.com/arnederoeck/NanoSatelliteR) (>= 0.1.0) for downstream quality control, plotting, and clustering of NanoSatellite results \n```\n#Install in R\ndevtools::install_github(\"arnederoeck/NanoSatelliteR\")\n\n#If you get an \"Installation failed: error in running command\" error (sometimes happens when R is installed via conda) use:\noptions(unzip = \"internal\")\ndevtools::install_github(\"arnederoeck/NanoSatelliteR\")\n```\n"
      },
      "source": "https://raw.githubusercontent.com/arnederoeck/NanoSatellite/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 18:13:36",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 31
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Clone this repository",
        "parent_header": [
          "NanoSatellite",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "```\ngit clone https://github.com/arnederoeck/NanoSatellite\n\n# Optionally, make shortcuts to the scripts:\nln -s $PWD/NanoSatellite/{*.sh,*.R} ~/bin\n```\n"
      },
      "source": "https://raw.githubusercontent.com/arnederoeck/NanoSatellite/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "*ABCA7* VNTR PromethION example data",
        "parent_header": [
          "NanoSatellite",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "The NanoSatellite algorithm was originally tested on fast5 reads spanning the *ABCA7* VNTR, originating from whole genome sequencing from 11 individuals on the Oxford Nanopore PromethION platform as described [here](https://www.biorxiv.org/content/early/2018/10/09/439026). The *ABCA7* VNTR fast5's are publicly accessible from [ENA](https://www.ebi.ac.uk/ena/data/view/PRJEB29458). These can be downloaded and unpacked from command line with the following code:\n\n```\nwget ftp://ftp.sra.ebi.ac.uk/vol1/run/ERR286/ERR28644{86..96}/*\nfor f in `ls *.tar.gz`; do tar -xzvf $f; done\n```\n\nThe corresponding annotation files (&ast;_spanning_reads.txt) can be found in NanoSatellite/ABCA7_VNTR_example. These files replace steps 2. and 3. below. If you'd like to use this example data, it's important to set the path to the directory where the fast5 files were unpacked. The following code can be used:\n\n```\ncd NanoSatellite/ABCA7_VNTR_example/\nsed -i \"s|your_fast5_directory|/your/fast5/directory|\" *_spanning_reads.txt\n```\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/arnederoeck/NanoSatellite/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "*ABCA7* VNTR example:",
        "parent_header": [
          "NanoSatellite",
          "Usage",
          "1. Generate reference squiggles (Squiggle_generator.sh)"
        ],
        "type": "Text_excerpt",
        "value": "```\nbash Squiggle_generator.sh -f genome_hg19.fa -r chr19:1049437-1050028 -u GTGAGCCCCCCACCACTCCCTCCCC -p ABCA7_VNTR\n```\n"
      },
      "source": "https://raw.githubusercontent.com/arnederoeck/NanoSatellite/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3. Extract tandem repeat spanning reads (Spanning_read_extractor.sh)",
        "parent_header": [
          "NanoSatellite",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Reads spanning the tandem repeat of interest are extracted from an aligned BAM file and coupled to the corresponding fast5 file.\nIn general, commonly used alignment tools (e.g. [minimap2](https://github.com/lh3/minimap2)) should suffice. However, some tandem repeats are more difficult to align. In such a case, an approach as described [here](https://github.com/mcfrith/last-rna/blob/master/last-long-reads.md) could potentially yield more spanning reads.\n\n```\nbash Spanning_read_extractor.sh <in.bam> <region> <index>\n\nExample:\nbash Spanning_read_extractor.sh \\\n/storage/bams/example.bam \\\nchr19:1049437-1050028 \\\nexample_index.gz\n```\n"
      },
      "source": "https://raw.githubusercontent.com/arnederoeck/NanoSatellite/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "5.1. Quality control",
        "parent_header": [
          "NanoSatellite",
          "Usage",
          "5. Downstream processing in R with NanoSatelliteR"
        ],
        "type": "Text_excerpt",
        "value": "```\nlibrary(NanoSatelliteR)\nchunk_dir=\"/storage/NanoSatellite_chunks/\"\ndf <- load_summary(chunk_dir)\nqc <- summary_qc(df)\n```\nThe output consists of plots displaying normalized \"flank\" and \"center\" dynamic time warping distance, respectively corresponding to delineation of tandem repeat squiggles from flanking squiggles, and the segmentation of the tandem repeat squiggle. In addition, cutoff values (red lines in the plots) corresponding to 1.5 times the interquartile range from the 75th percentile are returned.\n\n![NanoSatelliteR QC](https://github.com/arnederoeck/NanoSatellite/blob/master/figures/NanoSatelliteR_qc.png)\n"
      },
      "source": "https://raw.githubusercontent.com/arnederoeck/NanoSatellite/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "5.2. Tandem repeat length plotting",
        "parent_header": [
          "NanoSatellite",
          "Usage",
          "5. Downstream processing in R with NanoSatelliteR"
        ],
        "type": "Text_excerpt",
        "value": "```\ndf2 <- qual_reads(df,qc$center_cutoff)\nplot_lengths(df2)\n```\nEach sample is depicted in a separate panel, the number of tandem repeat units is shown on the y-axis, and colored dots correspond to individual sequencing reads originating from positive (red) and negative (blue) DNA strands.\n\n![NanoSatelliteR_plot_lengths](https://github.com/arnederoeck/NanoSatellite/blob/master/figures/NanoSatelliteR_plot_lengths.png)\n"
      },
      "source": "https://raw.githubusercontent.com/arnederoeck/NanoSatellite/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "5.3. Clustering to identify alternative motifs",
        "parent_header": [
          "NanoSatellite",
          "Usage",
          "5. Downstream processing in R with NanoSatelliteR"
        ],
        "type": "Text_excerpt",
        "value": "```\n#Load the tandem repeat unit squiggles\nsquiggles <- load_squiggles(chunk_dir,df2)\n\n# Clustering with the dtwclust package\n#      When clustering a large amount of squiggles, parallelization with doParallel is advised\n\nlibrary(doParallel)\nlibrary(dtwclust)\n\n#Number of clusters\nk_clusters=2\n\n#Number of cores your computing system has available\nregisterDoParallel(cores=8)\n\n#The following command clusters the tandem repeat squiggle units originating from the positive DNA strand. The same can be done for the negative strand\npositive_clustering <- tsclust(squiggles$positive,type=\"h\",k=k_clusters,trace=TRUE,distance = \"dtw_basic\", control=hierarchical_control(method=\"ward.D\",symmetric = T))\n\n#To visualy inspect clustering a heatmap can be generated:\nns_heatmap(positive_clustering@distmat,\"example.png\",max_dist=200,rm0=T)\n\n```\n\nClustering in more than 2 groups is also possible. However, by increasing the number of clusters, differences between clusters become smaller which can impair accuracy. Hence supervision of clustering by the user is warranted. Re-clustering can be done by re-running `tsclust()` and supplying the previously generated distance matrix to the `distmat` paramater in `hierarchical_control()`.\n\n"
      },
      "source": "https://raw.githubusercontent.com/arnederoeck/NanoSatellite/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "5.4. Centroid extraction",
        "parent_header": [
          "NanoSatellite",
          "Usage",
          "5. Downstream processing in R with NanoSatelliteR",
          "5.3. Clustering to identify alternative motifs"
        ],
        "type": "Text_excerpt",
        "value": "```\ncent <- extract_centroids(positive_clustering)\n\nlibrary(ggplot2)\nggplot(cent,aes(x=pos,y=signal,colour=factor(cluster)))+geom_point()+geom_line()+theme_minimal()+facet_grid(. ~ cluster)+guides(colour=guide_legend(title=\"cluster\"))\n```\n\n![NanoSatelliteR_centroid_plot](https://github.com/arnederoeck/NanoSatellite/blob/master/figures/NanoSatelliteR_centroid_plot.png)\n\nFor each cluster, a centroid is assigned. In this particular case of positive *ABCA7* VNTR tandem repeat unit squiggles, the differences observed in cluster 1, are caused by a guanine insertion, or cytosine to adenine substitution at nucleotide ten of the *ABCA7* VNTR consensus motif (inferred from comparison to Scrappie reference squiggles).\n"
      },
      "source": "https://raw.githubusercontent.com/arnederoeck/NanoSatellite/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "5.5. Cluster sequence per sequencing read",
        "parent_header": [
          "NanoSatellite",
          "Usage",
          "5. Downstream processing in R with NanoSatelliteR",
          "5.3. Clustering to identify alternative motifs"
        ],
        "type": "Text_excerpt",
        "value": "```\ncpr <- clusters_per_read(positive_clustering)\n```\n\nThis provides a data.frame with a comma-separated string of clusters per sequencing read, ordered from start to end according to the original sequencing read squiggle.\n"
      },
      "source": "https://raw.githubusercontent.com/arnederoeck/NanoSatellite/master/README.md",
      "technique": "header_analysis"
    }
  ]
}