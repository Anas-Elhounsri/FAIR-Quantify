{
  "application_domain": [
    {
      "confidence": 27.77,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/DCC-Lab/RayTracing"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-01-18T21:13:35Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-13T15:45:37Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Simple ray tracing library in Python for optical design that considers simple optical elements (with ABCD ray matrices) but also finite diameters of elements to calculate aperture and field stops, field of view, etc... Useful to validate the design of an optical system (lenses positions, power and diameters). Also permits the propagation of gaussian laser beams through the same elements."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9868748728492982,
      "result": {
        "original_header": "RayTracing",
        "type": "Text_excerpt",
        "value": "**[Update September 2023]: What are we up to? You will notice the master branch has not changed in some time. However, other branches are actively being worked on, including a GPU-accelerated branch that promises to open up possibilities for Monte Carlo calculations. More extensive tutorials, with practical lab-related calculations, are also being worked on.  Stay tuned.** \nThis code aims to provide a simple ray tracing module for calculating various properties of optical paths (object, image, aperture stops, field stops).  It makes use of ABCD matrices and does not consider spherical aberrations but can compute chromatic aberrations for simple cases when the materials are known. Since it uses the ABCD formalism (or Ray matrices, or Gauss matrices) it can perform tracing of rays and gaussian laser beams.  \nIt is not a package to do \"Rendering in 3D with raytracing\". \nThe code has been developed first for teaching purposes and is used in my \"[Optique](https://itunes.apple.com/ca/book/optique/id949326768?mt=11)\" Study Notes (french only), but also for actual use in my research. As of January 21st, 2021, there is an extensive, freely accessible, peer-reviewed tutorial in Journal of Neurophotonics: \nThe published tutorial assumes version 1.3.x.  There are video [tutorials](https://www.youtube.com/playlist?list=PLUxTghemi4Ft0NzQwuufpU-EGgkmaInAf) (in english or french, with english subtitles when in french) on YouTube. We have made no attempts at making high performance code.  **Readability** and **simplicity of usage** are the key here. It is a module with a few files, and only `matplotlib` and `numpy` as dependent modules.\n \n"
      },
      "source": "https://raw.githubusercontent.com/DCC-Lab/RayTracing/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9106516746143019,
      "result": {
        "original_header": "What's new?",
        "type": "Text_excerpt",
        "value": "To get information about what is new, currently the best place is the [release page on GitHub.](https://github.com/DCC-Lab/RayTracing/releases) \nThere is a **[Frequently Asked Questions](./FAQ.md)** page. \nThe article above is fully compatible with all 1.3.x versions.  As long as the API does not change, versions will be 1.3.x. \n"
      },
      "source": "https://raw.githubusercontent.com/DCC-Lab/RayTracing/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9406262136506859,
      "result": {
        "original_header": "Known limitations",
        "type": "Text_excerpt",
        "value": "1. It is not easy to put several labels on a graph without any overlap. We are still working on it.\n2. It is also not easy to figure out what \"the right size\" should be for an arrow head, the font, the position of a label, the size of the \"ticks\" on the aperture.\n3. Labelling focal points with appropriate secondary labels should be possible, maybe a superscript?\n4. The y-scale is not always set appropriately when the elements have infinite diameters: the rays will go beyond the element drawn on the figure.\n \n"
      },
      "source": "https://raw.githubusercontent.com/DCC-Lab/RayTracing/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/DCC-Lab/RayTracing/tree/master/docs"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Documentation",
        "parent_header": [
          "RayTracing"
        ],
        "type": "Text_excerpt",
        "value": "All the documentation is [available online](https://raytracing.readthedocs.io/). \n\nThe class hierarchy for optical elements (with parameters and defaults) is:\n\n![class](https://github.com/DCC-Lab/RayTracing/raw/master/README.assets/hierarchy.png)\n\nYou may obtain help by:\n\n1. Reading the documentation for the code ([API reference](https://raytracing.readthedocs.io/en/latest/reference.html)).\n   1. Core: \n      1. `Ray`: a ray for geometrical optics with a height and angle $y$ and $\\theta$.\n      2. `Rays`: ray distributions to ray trace an object through the optical system.\n         1.  `UniformRays`, `RandomUniformRays`, `LambertianRays` and `RandomLambertianRays` are currently available.  See example above.\n      3. `GaussianBeam`: a gaussian laser beam with complex radius of curvature $q$.\n      4. `Matrix`: any 2x2 matrix.\n      5. `MatrixGroup`: treats a group of matrix as a unit (draws it as a unit too)\n      6. `ImagingPath`: A `MatrixGroup` with an object at the front for geometrical optics \n      7. `LaserPath`: A `MatrixGroup` with a laser beam input at the front or a Resonator.\n   2. Optical elements: `Aperture`, `Space`, `Lens`, `DielectricInterface`, `DielectricSlab`, `ThickLens`\n   3. Specialty lenses: Defines a general achromat and objective lens\n   4. Thorlabs lenses: Achromat doublet lenses from Thorlabs.\n   5. Edmund Optics lenses: Achromat doublet lenses from Edmund Optics\n   6. Olympus objectives: A few objectives from Olympus.\n   7. Glasses: A few glasses used by Thorlabs to make achromatic doublets. They all have a single function `n(wavelength)` that returns the index at that wavelength.  All data obtained from http://refractiveindex.info.\n   8. Zemax ZMX file reader: to read text-based Zemax files of lenses.\n2. typing (interactively): `help(Matrix)`,`help(MatrixGroup)` `help(Ray)`,`help(ImagingPath)` to get the API, \n3. look at the examples with `python -m raytracing` \n4. simply look at the code.\n\n```python\npython\n>>> help(Matrix)\nHelp on class Matrix in module raytracing.abcd:\n\nclass Matrix(builtins.object)\n |  Matrix(A, B, C, D, physicalLength=0, apertureDiameter=inf, label='')\n |  \n |  A matrix and an optical element that can transform a ray or another\n |  matrix.\n |  \n |  The general properties (A,B,C,D) are defined here. The operator \"*\" is\n |  overloaded to allow simple statements such as:\n |  \n |  ray2 = M1 * ray\n |  or\n |  M3 = M2 * M1\n |  \n |  The physical length is included in the matrix to allow simple management of\n |  the ray tracing. IF two matrices are multiplied, the resulting matrice\n |  will have a physical length that is the sum of both matrices.\n |  \n |  In addition finite apertures are considered: if the apertureDiameter\n |  is not infinite (default), then the object is assumed to limit the\n |  ray height to plus or minus apertureDiameter/2 from the front edge to the back\n |  edge of the element.\n |  \n |  Methods defined here:\n |  \n |  __init__(self, A, B, C, D, physicalLength=0, apertureDiameter=inf, label='')\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  __mul__(self, rightSide)\n |      Operator overloading allowing easy to read matrix multiplication\n |      \n |      For instance, with M1 = Matrix() and M2 = Matrix(), one can write\n |      M3 = M1*M2. With r = Ray(), one can apply the M1 transform to a ray\n |      with r = M1*r\n |  \n |  __str__(self)\n |      String description that allows the use of print(Matrix())\n |  \n |  backwardConjugate(self)\n |      With an image at the back edge of the element,\n |      where is the object ? Distance before the element by\n |      which a ray must travel to reach the conjugate plane at\n |      the back of the element. A positive distance means the\n |      object is \"distance\" in front of the element (or to the\n |      left, or before).\n |      \n |      M2 = M1*Space(distance)\n |      # M2.isImaging == True\n\n```\n"
      },
      "source": "https://raw.githubusercontent.com/DCC-Lab/RayTracing/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://raytracing.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/DCC-Lab/RayTracing/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/DCC-Lab/RayTracing/wiki"
      },
      "source": "https://raw.githubusercontent.com/DCC-Lab/RayTracing/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/DCC-Lab/RayTracing/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 45
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/DCC-Lab/RayTracing/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DCC-Lab/RayTracing"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "RayTracing"
      },
      "source": "https://raw.githubusercontent.com/DCC-Lab/RayTracing/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/DCC-Lab/RayTracing/raw/master/README.assets/simple.png"
      },
      "source": "https://raw.githubusercontent.com/DCC-Lab/RayTracing/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/DCC-Lab/RayTracing/raw/master/README.assets/e0.png"
      },
      "source": "https://raw.githubusercontent.com/DCC-Lab/RayTracing/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/DCC-Lab/RayTracing/raw/master/README.assets/thorlabs.png"
      },
      "source": "https://raw.githubusercontent.com/DCC-Lab/RayTracing/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/DCC-Lab/RayTracing/raw/master/README.assets/inputProfile.png"
      },
      "source": "https://raw.githubusercontent.com/DCC-Lab/RayTracing/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/DCC-Lab/RayTracing/raw/master/README.assets/outputProfile.png"
      },
      "source": "https://raw.githubusercontent.com/DCC-Lab/RayTracing/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/DCC-Lab/RayTracing/raw/master/README.assets/chromaticaberrations.png"
      },
      "source": "https://raw.githubusercontent.com/DCC-Lab/RayTracing/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/DCC-Lab/RayTracing/raw/master/README.assets/hierarchy.png"
      },
      "source": "https://raw.githubusercontent.com/DCC-Lab/RayTracing/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/DCC-Lab/RayTracing/raw/master/README.assets/ex01.png"
      },
      "source": "https://raw.githubusercontent.com/DCC-Lab/RayTracing/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/DCC-Lab/RayTracing/raw/master/README.assets/ex02.png"
      },
      "source": "https://raw.githubusercontent.com/DCC-Lab/RayTracing/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/DCC-Lab/RayTracing/raw/master/README.assets/ex03.png"
      },
      "source": "https://raw.githubusercontent.com/DCC-Lab/RayTracing/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/DCC-Lab/RayTracing/raw/master/README.assets/ex04.png"
      },
      "source": "https://raw.githubusercontent.com/DCC-Lab/RayTracing/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/DCC-Lab/RayTracing/raw/master/README.assets/ex05.png"
      },
      "source": "https://raw.githubusercontent.com/DCC-Lab/RayTracing/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/DCC-Lab/RayTracing/raw/master/README.assets/ex06.png"
      },
      "source": "https://raw.githubusercontent.com/DCC-Lab/RayTracing/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/DCC-Lab/RayTracing/raw/master/README.assets/ex07.png"
      },
      "source": "https://raw.githubusercontent.com/DCC-Lab/RayTracing/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/DCC-Lab/RayTracing/raw/master/README.assets/ex08.png"
      },
      "source": "https://raw.githubusercontent.com/DCC-Lab/RayTracing/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/DCC-Lab/RayTracing/raw/master/README.assets/ex09.png"
      },
      "source": "https://raw.githubusercontent.com/DCC-Lab/RayTracing/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/DCC-Lab/RayTracing/raw/master/README.assets/ex10.png"
      },
      "source": "https://raw.githubusercontent.com/DCC-Lab/RayTracing/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/DCC-Lab/RayTracing/raw/master/README.assets/ex11.png"
      },
      "source": "https://raw.githubusercontent.com/DCC-Lab/RayTracing/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/DCC-Lab/RayTracing/raw/master/README.assets/ex12.png"
      },
      "source": "https://raw.githubusercontent.com/DCC-Lab/RayTracing/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/DCC-Lab/RayTracing/raw/master/README.assets/ex14.png"
      },
      "source": "https://raw.githubusercontent.com/DCC-Lab/RayTracing/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/DCC-Lab/RayTracing/raw/master/README.assets/ex15.png"
      },
      "source": "https://raw.githubusercontent.com/DCC-Lab/RayTracing/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/DCC-Lab/RayTracing/raw/master/README.assets/ex16.1.png"
      },
      "source": "https://raw.githubusercontent.com/DCC-Lab/RayTracing/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/DCC-Lab/RayTracing/raw/master/README.assets/ex16.2.png"
      },
      "source": "https://raw.githubusercontent.com/DCC-Lab/RayTracing/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/DCC-Lab/RayTracing/raw/master/README.assets/ex16.3.png"
      },
      "source": "https://raw.githubusercontent.com/DCC-Lab/RayTracing/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/DCC-Lab/RayTracing/raw/master/README.assets/ex17.png"
      },
      "source": "https://raw.githubusercontent.com/DCC-Lab/RayTracing/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/DCC-Lab/RayTracing/raw/master/README.assets/ex18.png"
      },
      "source": "https://raw.githubusercontent.com/DCC-Lab/RayTracing/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installing and upgrading",
        "parent_header": [
          "RayTracing"
        ],
        "type": "Text_excerpt",
        "value": "You need `matplotlib`, which is a fairly standard Python module. If you do not have it,  installing [Anaconda](https://www.anaconda.com/download/) is your best option. Python 3.6 or later is required. There are several ways to install the module:\n\n1. Simplest: `pip install raytracing` or `pip install --upgrade raytracing`\n   1. If you need to install `pip`, download [getpip.py](https://bootstrap.pypa.io/get-pip.py) and run it with `python getpip.py`\n2. If you download the [source](https://pypi.org/project/raytracing/) of the module, then you can type: `python setup.py install`\n3. From GitHub, you can get the latest version (including bugs, which are 153% free!) and then type `python setup.py install`\n4. If you are completely lost, copying the folder `raytracing` (the one that includes `__init__.py`) from the source file into the same directory as your own script will work.\n5. Watch the tutorial with subtitles [here.](https://www.youtube.com/playlist?list=PLUxTghemi4Ft0NzQwuufpU-EGgkmaInAf)\n\n## Getting started\n\nThe simplest way to import the package in your own scripts after installing it:\n\n```python\nfrom raytracing import *\n```\n\nThis will import `Ray` , `GaussianBeam`,  and several `Matrix` elements such as `Space`, `Lens`, `ThickLens`, `Aperture`, `DielectricInterface`, but also `MatrixGroup` (to group elements together),  `ImagingPath` (to ray trace with an object at the front edge), `LaserPath` (to trace a gaussian laser beam from the front edge) and a few predefined other such as `Objective` (to create a very thick lens that mimicks an objective).\n\nYou create an `ImagingPath` or a `LaserPath`, which you then populate with optical elements such as `Space`, `Lens` or `Aperture` or vendor lenses. You can then adjust the path properties (object height in `ImagingPath` for instance or inputBeam for `LaserPath`) and display in matplotlib. You can create a group of elements with `MatrixGroup` for instance a telescope, a retrofocus or any group of optical elements you would like to treat as a \"group\".  The Thorlabs and Edmund optics lenses, for instance, are defined as `MatrixGroups`.\n\nThis will show you a list of examples of things you can do (more on that in the Examples section):\n\n```shell\npython -m raytracing -l           # List examples\npython -m raytracing -e all       # Run all of them\npython -m raytracing -e 1,2,4,6   # Only run 1,2,4 and 6\npython -m raytracing -t           # Run all the tests.  Some performance tests can take up to a minute, but they should all pass.\n```\n\nor request help with:\n\n```\npython -m raytracing -h\n```\n\nIn your code, you would do this:\n\n```python\nfrom raytracing import *\n\npath = ImagingPath()\npath.append(Space(d=50))\npath.append(Lens(f=50, diameter=25))\npath.append(Space(d=120))\npath.append(Lens(f=70))\npath.append(Space(d=100))\npath.display()\n```\n\n<img src=\"https://github.com/DCC-Lab/RayTracing/raw/master/README.assets/simple.png\" alt=\"simple\" style=\"zoom:25%;\" />\n\nYou can also call `display()` on an element to see the cardinal points, principal planes, BFL (back focal length, or the distance between the last interface and the focal point after the lens) and FFL (front focal length, or the distance between the focal point before the lens and the first interface). You can do it with any single `Matrix` element but also with `MatrixGroup`.\n\n```python\nfrom raytracing import *\n\nthorlabs.AC254_050_A().display()\neo.PN_33_921().display()\n```\n\n![e0](https://github.com/DCC-Lab/RayTracing/raw/master/README.assets/e0.png)\n\n![thorlabs](https://github.com/DCC-Lab/RayTracing/raw/master/README.assets/thorlabs.png)\n\nFinally, an addition as of 1.2.0 is the ability to obtain the intensity profile of a given source from the object plane at the exit plane of an `OpticalPath`. This is in fact really simple: by tracing a large number of rays, with the number of rays at y and \u03b8 being proportionnal to the intensity, one can obtain the intensity profile by plotting the histogram of rays reaching a given height at the image plane. `Rays` are small classes that return a `Ray` that satisfies the condition of the class.  Currently, there is `UniformRays`,`RandomUniformRays` `LambertianRays` and `RandomLambertianRays` (a Lambertian distribution follows a cos\u03b8 distribution, it is a common diffuse surface source).  They appear like iterators and can easily be used like this example script:\n\n```python\nfrom raytracing import *\nfrom numpy import *\nimport matplotlib.pyplot as plt\n\n# Kohler illumination with these variables\nfobj = 5\ndObj = 5\nf2 = 200\nd2 = 50\nf3 = 100\nd3 = 50\n\n# We build the path (i.e. not an Imaging path)\npath = OpticalPath()\npath.append(Space(d=f3))\npath.append(Lens(f=f3, diameter=d3))\npath.append(Space(d=f3))\npath.append(Space(d=f2))\npath.append(Lens(f=f2, diameter=d2))\npath.append(Space(d=f2))\npath.append(Space(d=fobj))\npath.append(Lens(f=fobj, diameter=dObj))\npath.append(Space(d=fobj))\n\n# Obtaining the intensity profile\nnRays = 1000000 # Increase for better resolution \ninputRays = RandomLambertianRays(yMax=2.5, maxCount=nRays)\ninputRays.display(\"Input profile\")\noutputRays = path.traceManyThrough(inputRays, progress=True)\n# On macOS and Linux, you can do parallel computations.\n# On Windows, who the hell knows? Maybe only on Windows 10 or Windows 7 32-bits, or whatever.\n# outputRays = path.traceManyThroughInParallel(inputRays, progress=True, processes=8) \noutputRays.display(\"Output profile\")\n\n```\n\nand you will get the following ray histograms:\n\n<img src=\"https://github.com/DCC-Lab/RayTracing/raw/master/README.assets/inputProfile.png\" alt=\"inputProfile\" style=\"zoom:25%;\" />\n\n<img src=\"https://github.com/DCC-Lab/RayTracing/raw/master/README.assets/outputProfile.png\" alt=\"outputProfile\" style=\"zoom:25%;\" />\n\nFinally, it is possible to obtain the chromatic aberrations for compound lenses (achromatic doublets from Thorlabs and Edmund optics, and singlet lens because the materials are known). The following command will give you the focal shift as a function of wavelength (as a graph or values):\n```python\nfrom raytracing import *\n\nthorlabs.AC254_100_A().showChromaticAberrations()\nwavelengths, shifts = thorlabs.AC254_100_A().focalShifts()\n```\n\n<img src=\"https://github.com/DCC-Lab/RayTracing/raw/master/README.assets/chromaticaberrations.png\" alt=\"chromatic\" style=\"zoom:100%;\" />\n"
      },
      "source": "https://raw.githubusercontent.com/DCC-Lab/RayTracing/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/DCC-Lab/RayTracing/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2019-2022 DCCLab and Daniel C. C\u00f4t\u00e9\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/DCC-Lab/RayTracing/master/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Licence",
        "parent_header": [
          "RayTracing"
        ],
        "type": "Text_excerpt",
        "value": "This code is provided under the [MIT License](./LICENSE).\n"
      },
      "source": "https://raw.githubusercontent.com/DCC-Lab/RayTracing/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "RayTracing"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "DCC-Lab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 783971,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/DCC-Lab/RayTracing/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "dccote",
          "type": "User"
        },
        "date_created": "2024-02-02T21:06:18Z",
        "date_published": "2024-02-02T21:08:47Z",
        "description": "- Hundreds of new lenses thanks to Alex Tchung\r\n- Small modifications to allow integration in Tkinter (coming soon!)",
        "html_url": "https://github.com/DCC-Lab/RayTracing/releases/tag/1.3.11",
        "name": "1.3.11",
        "release_id": 139731338,
        "tag": "1.3.11",
        "tarball_url": "https://api.github.com/repos/DCC-Lab/RayTracing/tarball/1.3.11",
        "type": "Release",
        "url": "https://api.github.com/repos/DCC-Lab/RayTracing/releases/139731338",
        "value": "https://api.github.com/repos/DCC-Lab/RayTracing/releases/139731338",
        "zipball_url": "https://api.github.com/repos/DCC-Lab/RayTracing/zipball/1.3.11"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "dccote",
          "type": "User"
        },
        "date_created": "2023-01-30T19:39:26Z",
        "date_published": "2023-01-30T20:03:20Z",
        "description": "\r\n## What's Changed\r\n* Fixed version check by actually writing a test for it. by @dccote in https://github.com/DCC-Lab/RayTracing/pull/453\r\n* Better warnings by @dccote in https://github.com/DCC-Lab/RayTracing/pull/458\r\n* Gaussian rays by @dccote in https://github.com/DCC-Lab/RayTracing/pull/459\r\n* Fixed display bug by @dccote in https://github.com/DCC-Lab/RayTracing/pull/457\r\n* Minor fix to keep python 3.6 support by @JLBegin in https://github.com/DCC-Lab/RayTracing/pull/463\r\n\r\n\r\n**Full Changelog**: https://github.com/DCC-Lab/RayTracing/compare/1.3.9...1.3.10",
        "html_url": "https://github.com/DCC-Lab/RayTracing/releases/tag/1.3.10",
        "name": "1.3.10 Minor bug fixes",
        "release_id": 90741344,
        "tag": "1.3.10",
        "tarball_url": "https://api.github.com/repos/DCC-Lab/RayTracing/tarball/1.3.10",
        "type": "Release",
        "url": "https://api.github.com/repos/DCC-Lab/RayTracing/releases/90741344",
        "value": "https://api.github.com/repos/DCC-Lab/RayTracing/releases/90741344",
        "zipball_url": "https://api.github.com/repos/DCC-Lab/RayTracing/zipball/1.3.10"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "dccote",
          "type": "User"
        },
        "date_created": "2022-07-27T03:08:33Z",
        "date_published": "2022-07-27T14:24:46Z",
        "description": "## What's Changed\r\n* Small convenenience functions: ToConjugate(), ToFocus(matrix), Lens().focusToFocus()\r\n* Fix various display properties by @JLBegin in https://github.com/DCC-Lab/RayTracing/pull/437\r\n* Fix bug in GaussianBeam where wavelength wasn't converted to nm for printing by @mroddewig in https://github.com/DCC-Lab/RayTracing/pull/443\r\n* Better compound element figure by @dccote in https://github.com/DCC-Lab/RayTracing/pull/445\r\n* Version checking: We timestamp even when we fail: no need to keep checking by @dccote in https://github.com/DCC-Lab/RayTracing/pull/448\r\n* Preferences, better version check and convenience functions by @dccote in https://github.com/DCC-Lab/RayTracing/pull/450\r\n\r\n## New Contributors\r\n* @mroddewig made their first contribution in https://github.com/DCC-Lab/RayTracing/pull/443\r\n\r\n**Full Changelog**: https://github.com/DCC-Lab/RayTracing/compare/1.3.7...1.3.9",
        "html_url": "https://github.com/DCC-Lab/RayTracing/releases/tag/1.3.9",
        "name": "Display improvements, convenience functions",
        "release_id": 72968867,
        "tag": "1.3.9",
        "tarball_url": "https://api.github.com/repos/DCC-Lab/RayTracing/tarball/1.3.9",
        "type": "Release",
        "url": "https://api.github.com/repos/DCC-Lab/RayTracing/releases/72968867",
        "value": "https://api.github.com/repos/DCC-Lab/RayTracing/releases/72968867",
        "zipball_url": "https://api.github.com/repos/DCC-Lab/RayTracing/zipball/1.3.9"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "dccote",
          "type": "User"
        },
        "date_created": "2021-09-27T19:13:15Z",
        "date_published": "2021-09-27T19:15:01Z",
        "description": "Simple addition: aperture now has an optional parameter NA which can act as a limiting NA for the rays. Therefore, you can for instance use an aperture with a finite diameter and finite NA to simulate an optical fibre.",
        "html_url": "https://github.com/DCC-Lab/RayTracing/releases/tag/1.3.7",
        "name": "Aperture NA: limiting the acceptance angle",
        "release_id": 50345339,
        "tag": "1.3.7",
        "tarball_url": "https://api.github.com/repos/DCC-Lab/RayTracing/tarball/1.3.7",
        "type": "Release",
        "url": "https://api.github.com/repos/DCC-Lab/RayTracing/releases/50345339",
        "value": "https://api.github.com/repos/DCC-Lab/RayTracing/releases/50345339",
        "zipball_url": "https://api.github.com/repos/DCC-Lab/RayTracing/zipball/1.3.7"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "dccote",
          "type": "User"
        },
        "date_created": "2021-07-01T04:16:58Z",
        "date_published": "2021-07-01T04:18:16Z",
        "description": "Thanks for the feedback, a few improvements and a few bug fixes:\r\n1. Final small changes to examples.  Use `python -m raytracing` to see all examples or `python -m raytracing -l` to list all examples.\r\n2. Bug fix for the display of some lenses with very small radii of curvature.\r\n3. There is an expert mode to limit the warning.  Define the environment variable RAYTRACING_EXPERT=1 to minimize the warnings.\r\n4. The package will quickly check (if possible) on pypi to see if there is a newer version of `raytracing` and will let you know how to upgrade. It will only check every once a day.\r\n\r\n\r\n\r\n",
        "html_url": "https://github.com/DCC-Lab/RayTracing/releases/tag/1.3.6",
        "name": "More examples and documentation improvements, and small bug fixes",
        "release_id": 45533366,
        "tag": "1.3.6",
        "tarball_url": "https://api.github.com/repos/DCC-Lab/RayTracing/tarball/1.3.6",
        "type": "Release",
        "url": "https://api.github.com/repos/DCC-Lab/RayTracing/releases/45533366",
        "value": "https://api.github.com/repos/DCC-Lab/RayTracing/releases/45533366",
        "zipball_url": "https://api.github.com/repos/DCC-Lab/RayTracing/zipball/1.3.6"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "dccote",
          "type": "User"
        },
        "date_created": "2021-05-07T03:46:31Z",
        "date_published": "2021-05-07T04:16:49Z",
        "description": "* `imageSize` was modified to address confusion: in optical design, the object is always the field of view, and the image size is naturally the magnifation x FOV. However, although in real systems the FOV is always finite, it is not the case in small systems with infinite diameters, often used to get started with calculations. This led to confusion, because imageSize was infinite with no Field Stop is present (at least two finite diameter elements).  So now, imageSize will offer to use the finite `objectHeight` of `ImagingPath` for the calculation if the FOV is infinite.  It is a new parameter `imageSize(useObject=False)` that defaults to the same behaviour as before.\r\n* Documentation has been improved significantly: better figures (up to date), syntax coloring on graphs\r\n* Example code is now distributed with the module and is accessible with `import raytracing.examples`\r\n* And all the goodies of 1.3.4",
        "html_url": "https://github.com/DCC-Lab/RayTracing/releases/tag/1.3.5",
        "name": "Better examples, documentation fixes and small bug fixes",
        "release_id": 42580616,
        "tag": "1.3.5",
        "tarball_url": "https://api.github.com/repos/DCC-Lab/RayTracing/tarball/1.3.5",
        "type": "Release",
        "url": "https://api.github.com/repos/DCC-Lab/RayTracing/releases/42580616",
        "value": "https://api.github.com/repos/DCC-Lab/RayTracing/releases/42580616",
        "zipball_url": "https://api.github.com/repos/DCC-Lab/RayTracing/zipball/1.3.5"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "dccote",
          "type": "User"
        },
        "date_created": "2021-05-02T18:21:24Z",
        "date_published": "2021-05-02T18:33:56Z",
        "description": "Important new features, mostly related to compound lenses (i.e. Doublets from vendors for instance).\r\n\r\n1.  `Material` has a `findByName` method that can help find a material by name or `findByIndex` to find a material with the appropriate index within a certain tolerance.  Documentation explains how you can include your own materials and they will be included in the search.\r\n2. All achromats now also include a new function called `showChromaticAberrations`.  If you write:\r\n   ```\r\n   from raytracing import *\r\n   thorlabs.AC254_100_A().showChromaticAberrations()\r\n   wavelengths, shifts = thorlabs.AC254_100_A().focalShifts()\r\n   ```\r\n   you get the graph of the focal shift or you can get the values directly.  They reproduce the Thorlabs graphs perfectly.\r\n3. A new class called `ZMXReader` to read a ZMX file and get the lens from it. it has been tested with files from Thorlabs and Edmund, and they match the implemented classes. It can return a `MatrixGroup` that you can use as a element in an `ImagingPath` for instance. Some work will be done soon to integrate this knowledge better, validate lenses, etc...\r\n4. The ZMXReader can actually list the lens \"prescription\" in text so you can see what it is without necessariy using `raytracing`.\r\n5. Any `Material` class derived by the user is included in the `findBy` functions, therefore the ZMXReader will make use of your material to build the lens. If a material is missing, you can add it to your script and it will be considered.  See [\"README Adding New Materials\"](https://github.com/DCC-Lab/RayTracing/blob/master/README-Adding-new-materials.md)\r\n",
        "html_url": "https://github.com/DCC-Lab/RayTracing/releases/tag/1.3.4",
        "name": "1.3.4 Chromatic aberrations and Zemax files",
        "release_id": 42332070,
        "tag": "1.3.4",
        "tarball_url": "https://api.github.com/repos/DCC-Lab/RayTracing/tarball/1.3.4",
        "type": "Release",
        "url": "https://api.github.com/repos/DCC-Lab/RayTracing/releases/42332070",
        "value": "https://api.github.com/repos/DCC-Lab/RayTracing/releases/42332070",
        "zipball_url": "https://api.github.com/repos/DCC-Lab/RayTracing/zipball/1.3.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "dccote",
          "type": "User"
        },
        "date_created": "2021-03-11T19:33:23Z",
        "date_published": "2021-03-11T19:36:09Z",
        "description": "*\u00a0Readthedocs will now show the inherited functions for all classes, simplifying getting started for new users.\r\n* `traceManyThroughInParallel` now falls back to single process if there is any error.  It appears the multiplrocessing package can become flaky on some platforms.  To avoid problems, we simply use the slower version when needed.\r\n* Better fanAngles by default for images, although they will be deprecated in 1.4.x (use `ObjectRays` instead).",
        "html_url": "https://github.com/DCC-Lab/RayTracing/releases/tag/1.3.3",
        "name": "1.3.3 Better documentation, parallel computing bug fixed",
        "release_id": 39677365,
        "tag": "1.3.3",
        "tarball_url": "https://api.github.com/repos/DCC-Lab/RayTracing/tarball/1.3.3",
        "type": "Release",
        "url": "https://api.github.com/repos/DCC-Lab/RayTracing/releases/39677365",
        "value": "https://api.github.com/repos/DCC-Lab/RayTracing/releases/39677365",
        "zipball_url": "https://api.github.com/repos/DCC-Lab/RayTracing/zipball/1.3.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "dccote",
          "type": "User"
        },
        "date_created": "2021-03-02T03:42:06Z",
        "date_published": "2021-03-02T03:45:42Z",
        "description": "* Many functions now return named tuples for simpler management by programmers, while maintaining compatibility.\r\n* Small bug in display was not using fanNumber.",
        "html_url": "https://github.com/DCC-Lab/RayTracing/releases/tag/1.3.2",
        "name": "1.3.2 Code improvement for programmers",
        "release_id": 39092396,
        "tag": "1.3.2",
        "tarball_url": "https://api.github.com/repos/DCC-Lab/RayTracing/tarball/1.3.2",
        "type": "Release",
        "url": "https://api.github.com/repos/DCC-Lab/RayTracing/releases/39092396",
        "value": "https://api.github.com/repos/DCC-Lab/RayTracing/releases/39092396",
        "zipball_url": "https://api.github.com/repos/DCC-Lab/RayTracing/zipball/1.3.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "dccote",
          "type": "User"
        },
        "date_created": "2021-01-28T03:00:57Z",
        "date_published": "2021-01-29T15:22:05Z",
        "description": "Since the [publication](https://doi.org/10.1117/1.NPh.8.1.010801), small bugs have been fixed. Thanks to all for feedback.",
        "html_url": "https://github.com/DCC-Lab/RayTracing/releases/tag/1.3.1",
        "name": "1.3.1 Small bug fixes since publication",
        "release_id": 37090000,
        "tag": "1.3.1",
        "tarball_url": "https://api.github.com/repos/DCC-Lab/RayTracing/tarball/1.3.1",
        "type": "Release",
        "url": "https://api.github.com/repos/DCC-Lab/RayTracing/releases/37090000",
        "value": "https://api.github.com/repos/DCC-Lab/RayTracing/releases/37090000",
        "zipball_url": "https://api.github.com/repos/DCC-Lab/RayTracing/zipball/1.3.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "dccote",
          "type": "User"
        },
        "date_created": "2020-08-27T02:51:44Z",
        "date_published": "2021-01-07T03:29:44Z",
        "description": "The DCCLab group has written an article that was submitted (and accepted) for publication by SPIE Journal of Neurophotonics. This is the exact version that was used in the article: the code, the API, the graphs should match the publication identically. Only bug fixes will be included in 1.3.1, 1.3.2 etc..., but any feature shall be added in a separate version (1.4.x) if it changes the appearance or the behaviour.\r\n\r\nAs soon as the article is available, we will post a link here and in the README.\r\n",
        "html_url": "https://github.com/DCC-Lab/RayTracing/releases/tag/1.3.0",
        "name": "1.3.0 Version from Neurophotonics Tutorial",
        "release_id": 36075890,
        "tag": "1.3.0",
        "tarball_url": "https://api.github.com/repos/DCC-Lab/RayTracing/tarball/1.3.0",
        "type": "Release",
        "url": "https://api.github.com/repos/DCC-Lab/RayTracing/releases/36075890",
        "value": "https://api.github.com/repos/DCC-Lab/RayTracing/releases/36075890",
        "zipball_url": "https://api.github.com/repos/DCC-Lab/RayTracing/zipball/1.3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "dccote",
          "type": "User"
        },
        "date_created": "2020-08-25T19:43:40Z",
        "date_published": "2020-08-25T19:44:10Z",
        "description": "Preparing for the final release before publication.",
        "html_url": "https://github.com/DCC-Lab/RayTracing/releases/tag/1.2.13",
        "name": "1.2.13: More bug fixes, and better graphics",
        "release_id": 30121077,
        "tag": "1.2.13",
        "tarball_url": "https://api.github.com/repos/DCC-Lab/RayTracing/tarball/1.2.13",
        "type": "Release",
        "url": "https://api.github.com/repos/DCC-Lab/RayTracing/releases/30121077",
        "value": "https://api.github.com/repos/DCC-Lab/RayTracing/releases/30121077",
        "zipball_url": "https://api.github.com/repos/DCC-Lab/RayTracing/zipball/1.2.13"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "dccote",
          "type": "User"
        },
        "date_created": "2020-07-17T15:24:10Z",
        "date_published": "2020-07-17T15:27:38Z",
        "description": "We are converging towards a final version with this new release.  Many small changes in display.\r\n",
        "html_url": "https://github.com/DCC-Lab/RayTracing/releases/tag/1.2.12",
        "name": "1.2.12: Better graphics, internal changes",
        "release_id": 28680408,
        "tag": "1.2.12",
        "tarball_url": "https://api.github.com/repos/DCC-Lab/RayTracing/tarball/1.2.12",
        "type": "Release",
        "url": "https://api.github.com/repos/DCC-Lab/RayTracing/releases/28680408",
        "value": "https://api.github.com/repos/DCC-Lab/RayTracing/releases/28680408",
        "zipball_url": "https://api.github.com/repos/DCC-Lab/RayTracing/zipball/1.2.12"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "dccote",
          "type": "User"
        },
        "date_created": "2020-06-28T02:44:45Z",
        "date_published": "2020-06-28T02:46:07Z",
        "description": "* New properly handles different indices of refraction for different focal lengths on either side\r\n* Separation of `LaserPath` and `LaserCavity`.  Any cavity-related calculations are only possible with `LaserCavity`.\r\n* Fixed Matrix product that did not handle indices properly.\r\n* Better examples, fixed a few demos that did not work anymore following a change of API.\r\n* The `Axicon` was not setting all variables properly.",
        "html_url": "https://github.com/DCC-Lab/RayTracing/releases/tag/1.2.11",
        "name": "1.2.11 Better graphics, even more testing.",
        "release_id": 27994466,
        "tag": "1.2.11",
        "tarball_url": "https://api.github.com/repos/DCC-Lab/RayTracing/tarball/1.2.11",
        "type": "Release",
        "url": "https://api.github.com/repos/DCC-Lab/RayTracing/releases/27994466",
        "value": "https://api.github.com/repos/DCC-Lab/RayTracing/releases/27994466",
        "zipball_url": "https://api.github.com/repos/DCC-Lab/RayTracing/zipball/1.2.11"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "dccote",
          "type": "User"
        },
        "date_created": "2020-06-12T01:17:06Z",
        "date_published": "2020-06-12T01:18:50Z",
        "description": "Much more testing throughout the code, better display, but still intensely being improved.\r\nThe principal and axial rays are now the correct nomenclature for the chief ray at the edge of the field of view and the marginal ray on axis respectively.",
        "html_url": "https://github.com/DCC-Lab/RayTracing/releases/tag/1.2.10",
        "name": "1.2.10 Better display, small bugs ironed out",
        "release_id": 27477608,
        "tag": "1.2.10",
        "tarball_url": "https://api.github.com/repos/DCC-Lab/RayTracing/tarball/1.2.10",
        "type": "Release",
        "url": "https://api.github.com/repos/DCC-Lab/RayTracing/releases/27477608",
        "value": "https://api.github.com/repos/DCC-Lab/RayTracing/releases/27477608",
        "zipball_url": "https://api.github.com/repos/DCC-Lab/RayTracing/zipball/1.2.10"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "dccote",
          "type": "User"
        },
        "date_created": "2020-05-29T11:13:34Z",
        "date_published": "2020-05-29T11:20:18Z",
        "description": "Many small improvements and bugs ironed out.",
        "html_url": "https://github.com/DCC-Lab/RayTracing/releases/tag/1.2.9",
        "name": "1.2.9 Better testing, small bugs ironed out",
        "release_id": 27028217,
        "tag": "1.2.9",
        "tarball_url": "https://api.github.com/repos/DCC-Lab/RayTracing/tarball/1.2.9",
        "type": "Release",
        "url": "https://api.github.com/repos/DCC-Lab/RayTracing/releases/27028217",
        "value": "https://api.github.com/repos/DCC-Lab/RayTracing/releases/27028217",
        "zipball_url": "https://api.github.com/repos/DCC-Lab/RayTracing/zipball/1.2.9"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "dccote",
          "type": "User"
        },
        "date_created": "2020-05-18T16:29:49Z",
        "date_published": "2020-05-18T16:30:56Z",
        "description": "Many contributors are starting to work on RayTracing, many bug fixes and tests have been added.",
        "html_url": "https://github.com/DCC-Lab/RayTracing/releases/tag/1.2.8",
        "name": "1.2.8 Many bug fixes, preparing for documentation update",
        "release_id": 26635909,
        "tag": "1.2.8",
        "tarball_url": "https://api.github.com/repos/DCC-Lab/RayTracing/tarball/1.2.8",
        "type": "Release",
        "url": "https://api.github.com/repos/DCC-Lab/RayTracing/releases/26635909",
        "value": "https://api.github.com/repos/DCC-Lab/RayTracing/releases/26635909",
        "zipball_url": "https://api.github.com/repos/DCC-Lab/RayTracing/zipball/1.2.8"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "dccote",
          "type": "User"
        },
        "date_created": "2020-05-12T17:10:13Z",
        "date_published": "2020-05-12T17:12:01Z",
        "description": "The package is getting ready to be published, so many small bugs and cosmetic issues and being fixed.\r\n- Warnings are printed better.\r\n- Labels follow the showLabel flag\r\n- Many other small bug fixes.",
        "html_url": "https://github.com/DCC-Lab/RayTracing/releases/tag/1.2.7",
        "name": "1.2.7 Bug fixes in preparation for publication.",
        "release_id": 26433735,
        "tag": "1.2.7",
        "tarball_url": "https://api.github.com/repos/DCC-Lab/RayTracing/tarball/1.2.7",
        "type": "Release",
        "url": "https://api.github.com/repos/DCC-Lab/RayTracing/releases/26433735",
        "value": "https://api.github.com/repos/DCC-Lab/RayTracing/releases/26433735",
        "zipball_url": "https://api.github.com/repos/DCC-Lab/RayTracing/zipball/1.2.7"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "dccote",
          "type": "User"
        },
        "date_created": "2020-05-06T03:55:25Z",
        "date_published": "2020-05-06T03:57:28Z",
        "description": "Good multiprocessing support in an os-independent fashion thanks to multiprocessing module (and Anthony Bilodeau)",
        "html_url": "https://github.com/DCC-Lab/RayTracing/releases/tag/1.2.6",
        "name": "1.2.6 Multiprocessing support",
        "release_id": 26209474,
        "tag": "1.2.6",
        "tarball_url": "https://api.github.com/repos/DCC-Lab/RayTracing/tarball/1.2.6",
        "type": "Release",
        "url": "https://api.github.com/repos/DCC-Lab/RayTracing/releases/26209474",
        "value": "https://api.github.com/repos/DCC-Lab/RayTracing/releases/26209474",
        "zipball_url": "https://api.github.com/repos/DCC-Lab/RayTracing/zipball/1.2.6"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "dccote",
          "type": "User"
        },
        "date_created": "2019-05-12T04:21:37Z",
        "date_published": "2019-05-12T04:55:39Z",
        "description": "A single file was broken up in multiple files for readability.",
        "html_url": "https://github.com/DCC-Lab/RayTracing/releases/tag/1.1.8",
        "name": "1.1.8 Internal rewrite and documentation",
        "release_id": 17296153,
        "tag": "1.1.8",
        "tarball_url": "https://api.github.com/repos/DCC-Lab/RayTracing/tarball/1.1.8",
        "type": "Release",
        "url": "https://api.github.com/repos/DCC-Lab/RayTracing/releases/17296153",
        "value": "https://api.github.com/repos/DCC-Lab/RayTracing/releases/17296153",
        "zipball_url": "https://api.github.com/repos/DCC-Lab/RayTracing/zipball/1.1.8"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "dccote",
          "type": "User"
        },
        "date_created": "2019-04-10T12:23:32Z",
        "date_published": "2019-04-10T12:25:10Z",
        "description": "A general improvement of the code, better documentation. a new function flipOrientation() now works for all elements, and all elements actually draw properly. Better drawing code in general, especially arrows.",
        "html_url": "https://github.com/DCC-Lab/RayTracing/releases/tag/1.1.6",
        "name": "1.1.6 Gaussian beams, better documentation, general improvements for examples",
        "release_id": 16672960,
        "tag": "1.1.6",
        "tarball_url": "https://api.github.com/repos/DCC-Lab/RayTracing/tarball/1.1.6",
        "type": "Release",
        "url": "https://api.github.com/repos/DCC-Lab/RayTracing/releases/16672960",
        "value": "https://api.github.com/repos/DCC-Lab/RayTracing/releases/16672960",
        "zipball_url": "https://api.github.com/repos/DCC-Lab/RayTracing/zipball/1.1.6"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "dccote",
          "type": "User"
        },
        "date_created": "2019-03-09T15:09:41Z",
        "date_published": "2019-03-09T15:11:57Z",
        "description": "Display of Achromats and ThickLens was broken for ImagingPath() although it worked for display().  Now fixed.",
        "html_url": "https://github.com/DCC-Lab/RayTracing/releases/tag/1.1.2",
        "name": "1.1.2: Quick bug fix for 1.1.1",
        "release_id": 16012434,
        "tag": "1.1.2",
        "tarball_url": "https://api.github.com/repos/DCC-Lab/RayTracing/tarball/1.1.2",
        "type": "Release",
        "url": "https://api.github.com/repos/DCC-Lab/RayTracing/releases/16012434",
        "value": "https://api.github.com/repos/DCC-Lab/RayTracing/releases/16012434",
        "zipball_url": "https://api.github.com/repos/DCC-Lab/RayTracing/zipball/1.1.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "dccote",
          "type": "User"
        },
        "date_created": "2019-03-09T05:15:19Z",
        "date_published": "2019-03-09T05:16:08Z",
        "description": "Call thorlabs.AC254_100_A().display() to see principal planes, BFL, FFL and others.",
        "html_url": "https://github.com/DCC-Lab/RayTracing/releases/tag/1.1.1",
        "name": "1.1.1 Display of individual elements",
        "release_id": 16009368,
        "tag": "1.1.1",
        "tarball_url": "https://api.github.com/repos/DCC-Lab/RayTracing/tarball/1.1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/DCC-Lab/RayTracing/releases/16009368",
        "value": "https://api.github.com/repos/DCC-Lab/RayTracing/releases/16009368",
        "zipball_url": "https://api.github.com/repos/DCC-Lab/RayTracing/zipball/1.1.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "dccote",
          "type": "User"
        },
        "date_created": "2019-03-07T04:06:17Z",
        "date_published": "2019-03-07T04:09:20Z",
        "description": "It is now possible to use `GaussianBeam` to propagate a gaussian laser beam through elements and group of elements. Instead of `ImagingPath`, use `LaserPath`.",
        "html_url": "https://github.com/DCC-Lab/RayTracing/releases/tag/1.1.0",
        "name": "1.1.0: Laser beams",
        "release_id": 15961476,
        "tag": "1.1.0",
        "tarball_url": "https://api.github.com/repos/DCC-Lab/RayTracing/tarball/1.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/DCC-Lab/RayTracing/releases/15961476",
        "value": "https://api.github.com/repos/DCC-Lab/RayTracing/releases/15961476",
        "zipball_url": "https://api.github.com/repos/DCC-Lab/RayTracing/zipball/1.1.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "dccote",
          "type": "User"
        },
        "date_created": "2019-03-02T19:56:35Z",
        "date_published": "2019-03-02T19:59:51Z",
        "description": "The code is getting some form of basic documentation. It looks like an 80s web page, but it is *something*.",
        "html_url": "https://github.com/DCC-Lab/RayTracing/releases/tag/1.0.9",
        "name": "1.0.9: Documenting and testing",
        "release_id": 15877005,
        "tag": "1.0.9",
        "tarball_url": "https://api.github.com/repos/DCC-Lab/RayTracing/tarball/1.0.9",
        "type": "Release",
        "url": "https://api.github.com/repos/DCC-Lab/RayTracing/releases/15877005",
        "value": "https://api.github.com/repos/DCC-Lab/RayTracing/releases/15877005",
        "zipball_url": "https://api.github.com/repos/DCC-Lab/RayTracing/zipball/1.0.9"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "dccote",
          "type": "User"
        },
        "date_created": "2019-02-26T21:44:22Z",
        "date_published": "2019-02-26T21:46:06Z",
        "description": "1.0.7 was released too quickly: typos in code were fixed, including one in 1.0.7 that led to a syntax error.",
        "html_url": "https://github.com/DCC-Lab/RayTracing/releases/tag/1.0.8",
        "name": "1.0.8 Typos in code fixed from 1.0.7",
        "release_id": 15792472,
        "tag": "1.0.8",
        "tarball_url": "https://api.github.com/repos/DCC-Lab/RayTracing/tarball/1.0.8",
        "type": "Release",
        "url": "https://api.github.com/repos/DCC-Lab/RayTracing/releases/15792472",
        "value": "https://api.github.com/repos/DCC-Lab/RayTracing/releases/15792472",
        "zipball_url": "https://api.github.com/repos/DCC-Lab/RayTracing/zipball/1.0.8"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "dccote",
          "type": "User"
        },
        "date_created": "2019-02-15T03:12:55Z",
        "date_published": "2019-02-15T03:14:06Z",
        "description": "Slightly better display with the comments (i.e. dual graph) are used.",
        "html_url": "https://github.com/DCC-Lab/RayTracing/releases/tag/1.0.6",
        "name": "1.0.6: Better label positions in display with comments",
        "release_id": 15575048,
        "tag": "1.0.6",
        "tarball_url": "https://api.github.com/repos/DCC-Lab/RayTracing/tarball/1.0.6",
        "type": "Release",
        "url": "https://api.github.com/repos/DCC-Lab/RayTracing/releases/15575048",
        "value": "https://api.github.com/repos/DCC-Lab/RayTracing/releases/15575048",
        "zipball_url": "https://api.github.com/repos/DCC-Lab/RayTracing/zipball/1.0.6"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "dccote",
          "type": "User"
        },
        "date_created": "2019-02-15T03:02:03Z",
        "date_published": "2019-02-15T03:03:41Z",
        "description": "Finite length elements can block a ray at the beginning, at the end or anywhere in between.  Prior calculations assumed the ray was blocked after the element, which is not correct for (some) finite length elements. This has been fixed.",
        "html_url": "https://github.com/DCC-Lab/RayTracing/releases/tag/1.0.5",
        "name": "1.0.5 Better calculation for aperture block in finite length element",
        "release_id": 15574957,
        "tag": "1.0.5",
        "tarball_url": "https://api.github.com/repos/DCC-Lab/RayTracing/tarball/1.0.5",
        "type": "Release",
        "url": "https://api.github.com/repos/DCC-Lab/RayTracing/releases/15574957",
        "value": "https://api.github.com/repos/DCC-Lab/RayTracing/releases/15574957",
        "zipball_url": "https://api.github.com/repos/DCC-Lab/RayTracing/zipball/1.0.5"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "dccote",
          "type": "User"
        },
        "date_created": "2019-02-14T16:32:57Z",
        "date_published": "2019-02-14T16:36:52Z",
        "description": "This simple update allows the use of comments in a display() to comment and show the code.",
        "html_url": "https://github.com/DCC-Lab/RayTracing/releases/tag/1.0.4",
        "name": "1.0.4: Graphs allow comments (for teaching)",
        "release_id": 15564752,
        "tag": "1.0.4",
        "tarball_url": "https://api.github.com/repos/DCC-Lab/RayTracing/tarball/1.0.4",
        "type": "Release",
        "url": "https://api.github.com/repos/DCC-Lab/RayTracing/releases/15564752",
        "value": "https://api.github.com/repos/DCC-Lab/RayTracing/releases/15564752",
        "zipball_url": "https://api.github.com/repos/DCC-Lab/RayTracing/zipball/1.0.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "dccote",
          "type": "User"
        },
        "date_created": "2019-02-14T04:29:27Z",
        "date_published": "2019-02-14T04:34:24Z",
        "description": "Calculations have been improved for field stop and field of view, increasing the speed and precision with a better algorithm (see in abcd.py the method fieldStop() and fieldOfView()). Also, vertices are tracked, so when can calculate BFL and FFL (that is, the distance between the focal spot and the interface at the front or back).",
        "html_url": "https://github.com/DCC-Lab/RayTracing/releases/tag/1.0.3",
        "name": "1.0.3 Better calculations for field stop and field of view, BFL and FFL",
        "release_id": 15551101,
        "tag": "1.0.3",
        "tarball_url": "https://api.github.com/repos/DCC-Lab/RayTracing/tarball/1.0.3",
        "type": "Release",
        "url": "https://api.github.com/repos/DCC-Lab/RayTracing/releases/15551101",
        "value": "https://api.github.com/repos/DCC-Lab/RayTracing/releases/15551101",
        "zipball_url": "https://api.github.com/repos/DCC-Lab/RayTracing/zipball/1.0.3"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 09:30:20",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 250
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Where do I get started?",
        "parent_header": [
          "RayTracing"
        ],
        "type": "Text_excerpt",
        "value": "   * If you want to use the module, keep reading.\n   * If you have a suggestion or a bug report, go to [Issues](https://github.com/DCC-Lab/RayTracing/issues).\n   * If you want to read and contribute to the code, go to the [Wiki](https://github.com/DCC-Lab/RayTracing/wiki) for general considerations. We plan to have a roadmap in the near future.\n"
      },
      "source": "https://raw.githubusercontent.com/DCC-Lab/RayTracing/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Getting started",
        "parent_header": [
          "RayTracing"
        ],
        "type": "Text_excerpt",
        "value": "The module defines `Ray` , `Matrix`, `MatrixGroup` and `ImagingPath` as the main elements for tracing rays.  `Matrix` and `MatrixGroup` are either one or a sequence of many matrices into which `Ray` will propagate. `ImagingPath` is also a sequence of elements, with an object at the front edge.  Specific subclasses of `Matrix` exists: `Space`, `Lens`, `ThicklLens`, and `Aperture`. Finally, a ray fan is a collection of rays, originating from a given point with a range of angles.\n\nWe have tried to separate the calculation code (i.e. the matrices and subclasses) from the drawing code (figures and graphics). One can use the calculation code without any graphics calls.\n\nIf you want to perform calculations with coherent laser beams, then you use `GaussianBeam` and `LaserPath`. Everything is essentially the same, except that the formalism does not allow for the gaussian beam to be \"blocked\", hence any calculation of stops with aperture are not available in `LaserPath`. That part of the code is less developed, but it is nevertheless available.\n"
      },
      "source": "https://raw.githubusercontent.com/DCC-Lab/RayTracing/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Examples",
        "parent_header": [
          "RayTracing"
        ],
        "type": "Text_excerpt",
        "value": "You can list several examples `python -m raytracing -l`:\n\n```shell\nAll example code on your machine is found at: /somedirectory/on/your/machine\n 1. ex01.py A single lens f = 50 mm, infinite diameter\n 2. ex02.py Two lenses, infinite diameters\n 3. ex03.py Finite-diameter lens\n 4. ex04.py Aperture behind lens acting as Field Stop\n 5. ex05.py Simple microscope system\n 6. ex06.py Kohler illumination\n 7. ex07.py Focussing through a dielectric slab\n 8. ex08.py Virtual image at -f with object at f/2\n 9. ex09.py Infinite telecentric 4f telescope\n10. ex10.py Retrofocus $f_e$={0:.1f} cm, and BFL={1:.1f}\n11. ex11.py Thick diverging lens computed from the Lensmaker equation\n12. ex12.py Thick diverging lens built from individual elements\n13. ex13.py Obtain the forward and backward conjugates\n14. ex14.py Generic objectives\n15. ex15.py Model Olympus objective LUMPlanFL40X\n16. ex16.py Commercial doublets from Thorlabs and Edmund\n17. ex17.py An optical system with vendor lenses\n18. ex18.py Laser beam and vendor lenses\n19. ex19.py Cavity round trip and calculated laser modes\n.... and more complete examples at /somedirectory/on/your/machine\n```\n\n You can run them all with `python -m raytracing -e all` (see them all below) to get a flavour of what is possible (note: in the US, it will give you a flavor of what is possible instead). Notice the command will tell you where the directory with all the tests is on your machine. **You will find more complete examples** in that [examples](https://github.com/DCC-Lab/RayTracing/tree/master/raytracing/examples) directory, distributed with the module.  For instance, `illuminator.py` to see a Kohler illuminator, and `invariant.py` to see an example of the role of lens diameters to determine the field of view.\n\n\n\n![ex01](https://github.com/DCC-Lab/RayTracing/raw/master/README.assets/ex01.png)\n\n![ex02](https://github.com/DCC-Lab/RayTracing/raw/master/README.assets/ex02.png)\n\n![ex03](https://github.com/DCC-Lab/RayTracing/raw/master/README.assets/ex03.png)\n\n![ex04](https://github.com/DCC-Lab/RayTracing/raw/master/README.assets/ex04.png)\n\n![ex05](https://github.com/DCC-Lab/RayTracing/raw/master/README.assets/ex05.png)\n\n![ex06](https://github.com/DCC-Lab/RayTracing/raw/master/README.assets/ex06.png)\n\n![ex07](https://github.com/DCC-Lab/RayTracing/raw/master/README.assets/ex07.png)\n\n![ex08](https://github.com/DCC-Lab/RayTracing/raw/master/README.assets/ex08.png)\n\n![ex09](https://github.com/DCC-Lab/RayTracing/raw/master/README.assets/ex09.png)\n\n![ex10](https://github.com/DCC-Lab/RayTracing/raw/master/README.assets/ex10.png)\n\n![ex11](https://github.com/DCC-Lab/RayTracing/raw/master/README.assets/ex11.png)\n\n![ex12](https://github.com/DCC-Lab/RayTracing/raw/master/README.assets/ex12.png)\n\n![ex14](https://github.com/DCC-Lab/RayTracing/raw/master/README.assets/ex14.png)\n\n![ex15](https://github.com/DCC-Lab/RayTracing/raw/master/README.assets/ex15.png)\n\n![ex16.1](https://github.com/DCC-Lab/RayTracing/raw/master/README.assets/ex16.1.png)\n\n![ex16.2](https://github.com/DCC-Lab/RayTracing/raw/master/README.assets/ex16.2.png)\n\n![ex16.3](https://github.com/DCC-Lab/RayTracing/raw/master/README.assets/ex16.3.png)\n\n![ex17](https://github.com/DCC-Lab/RayTracing/raw/master/README.assets/ex17.png)\n\n![ex18](https://github.com/DCC-Lab/RayTracing/raw/master/README.assets/ex18.png)\n"
      },
      "source": "https://raw.githubusercontent.com/DCC-Lab/RayTracing/master/README.md",
      "technique": "header_analysis"
    }
  ]
}