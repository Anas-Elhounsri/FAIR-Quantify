{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/hase62/Neoantimon"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2016-11-28T06:37:36Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-07-04T14:34:57Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Published at Bioinformatics"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9484517641234153,
      "result": {
        "original_header": "Latest updates",
        "type": "Text_excerpt",
        "value": "ver3.0.1: Supported to netMHCpan4.1 and netMHCIIpan4.3. \n \n"
      },
      "source": "https://raw.githubusercontent.com/hase62/Neoantimon/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8285417156357282,
      "result": {
        "original_header": "-Annotated BND format vcf file",
        "type": "Text_excerpt",
        "value": "It must include columns representing \"Chromosome Number\", \"Mutation Start Position\", \"Mutation End Position\", \"Mutation Ref\", \"Mutation Alt\", and \"NM_ID (AAChange.refGene)\" or \"Gene Symbol (Gene.refGene)\".\nAnnotations \"Chr\", \"Start\", \"End\", \"Ref\", \"Alt\", \"Depth_tumor\", and \"Depth_normal\" are automatically detected. Otherwise, you have to manually indicate columns. \n```r\n[R]\ndata(\"sample_sv_bnd\")\nprint(sample_sv_bnd, row.names = FALSE)\n```\n```\n## Chr     Start       End Ref            Alt Func.refGene Gene.refGene           mateID\n##   1 115005805 115005805   C C]20:34827929]       exonic       TRIM33     SVMERGE137_1\n##   1 204908711 204908711   A [2:172743385[A     intronic        NFASC      SVMERGE15_1\n##   2  25870534  25870534   T  ]2:25965720]G     intronic         DTNB     SVMERGE116_1\n##   2  25965720  25965720   T  T[2:25870536[       exonic        ASXL2     SVMERGE116_2\n##   2 214794791 214794791   C C[2:214798169[       exonic       SPAG16       SVMERGE3_1\n##   2 214798169 214798169   T ]2:214794791]T     intronic       SPAG16       SVMERGE3_2\n...\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/hase62/Neoantimon/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.887486923206853,
      "result": {
        "original_header": "-RNA expression file",
        "type": "Text_excerpt",
        "value": "An RNA expressoin file is not required, but you can attach \"RNA expression\" information by indicating \"rnaexp_file\".\nIf you also indicate \"rnabam_file\", variant allele frequencies and tumor specific RNA expressions are also attached to the results. \n```r\n[R]\ndata(\"sample_rna_exp\")\nprint(sample_rna_exp, row.names = FALSE)\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/hase62/Neoantimon/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9628019324282908,
      "result": {
        "original_header": "-CNV file",
        "type": "Text_excerpt",
        "value": "A copynumber file is not required, but you can attach \"Copy Number\" information by indicating \"cnv_file\" and \"purity\" in main functions.\nThey are used to calculate tumor subclonal cell population. \nPurity is set 1 as default value. \n```r\n[R]\ndata(\"sample_copynum\")\nprint(sample_copynum, row.names = FALSE)\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/hase62/Neoantimon/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9272388619494885,
      "result": {
        "original_header": "Output Result (The details are documented in the manual/Neoantimon_2.1.0.pdf. )",
        "type": "Text_excerpt",
        "value": "Count the number of neoantigens of which thresholds are IC 50 of mutatnt peptides < 500 and IC 50 of wild-type peptides > 500. \n```\n[R]\nprint(Export_Summary_SNV(Input = Result_HLA1_SNV_1, Mut_IC50_th = 500, Wt_IC50_th = 500))\n```\n```\n##\tNum_All_Alteration\tNum_Evaluated_Alteration Num_Alteration_Generating_NeoAg\tNum_All_Peptide\tNum_Evaluated_Peptide\tNum_Peptide_Generating_NeoAg\n##\t3\t3\t2\t189\t189\t3\n```\n \nCount the number of neoantigens of which thresholds are IC 50 of mutatnt peptides < 500 and IC 50 of wild-type peptides > 500. \n```\n[R]\nprint(Export_Summary_SNV(Input = Result_HLA2_SNV, Mut_IC50_th = 500, Wt_IC50_th = 500))\n```\n``` \n##\tNum_All_Alteration\tNum_Evaluated_Alteration\tNum_Alteration_Generating_NeoAg\tNum_All_Peptide\tNum_Evaluated_Peptide\tNum_Peptide_Generating_NeoAg\t\n##\t3\t3\t1\t45\t45\t9\n```\n \nCount the number of neoantigens of which threshold is IC 50 of mutatnt peptides < 500. \n```\n[R]\nprint(Export_Summary_IndelSV(Input = Result_HLA1_INDEL_1, Mut_IC50_th = 500))\n```\n```\n##\tNum_All_Alteration\tNum_Evaluated_Alteration\tNum_Alteration_Generating_NeoAg\tNum_All_Peptide\tNum_Evaluated_Peptide\tNum_Peptide_Generating_NeoAg\t\t\n##\t3\t3\t3\t270\t270\t15\n```\n \nCount the number of neoantigens for each peptide of which threshold is IC 50 of mutatnt peptides < 500. \n```\n[R]\nprint(Export_Summary_IndelSV_perFragments(Input = Result_HLA1_INDEL_1, Mut_IC50_th = 500))\n```\n```\n##\t\tEAIYHGIPMVGIPLVLGSTX-0_UGT2B28\tQYYQRDELLAAIKKFHIKVATQX-1_COL12A1\tIMEMARDFLPSLKNPFWKPSILPIFMYKHCSVQFSVRHGDVQTKVHX-2_SLCO1C1\n##\tNum_Peptide_Per_Pep\t30\t48\t192\n##\tNum_Cond_Peptide_Per_Pep\t30\t48\t192\n##\tNum_Rest_Peptide_Per_Pep\t4\t2\t9\n##\tNum_Rest_Peptide_Per_Pep/Num_Cond_Peptide_Per_Pep\t0.133\t0.042\t0.047\n##\t-logP\t0.414\t0.483\t1.035\n```\n \nCount the number of neoantigens of which threshold is IC 50 of mutatnt peptides < 500. \n```\n[R]\nprint(Export_Summary_IndelSV(Input = Result_HLA2_INDEL, Mut_IC50_th = 500))\n```\n```\n##\tNum_All_Alteration\tNum_Evaluated_Alteration\tNum_Alteration_Generating_NeoAg\tNum_All_Peptide\tNum_Evaluated_Peptide\tNum_Peptide_Generating_NeoAg\n##\t3\t3\t3\t45\t45\t32\n```\n \nCount the number of neoantigens for each peptide of which threshold is IC 50 of mutatnt peptides < 500. \n```\n[R]\nprint(Export_Summary_IndelSV_perFragments(Input = Result_HLA2_INDEL, Mut_IC50_th = 500))\n```\n```\n##\t\tEAIYHGIPMVGIPLVLGSTX-0_UGT2B28\tQYYQRDELLAAIKKFHIKVATQX-1_COL12A1\tIMEMARDFLPSLKNPFWKPSILPIFMYKHCSVQFSVRHGDVQTKVHX-2_SLCO1C1\n##\tNum_Peptide_Per_Pep\t5\t8\t32\n##\tNum_Cond_Peptide_Per_Pep\t5\t8\t32\n##\tNum_Rest_Peptide_Per_Pep\t5\t7\t20\n##\tNum_Rest_Peptide_Per_Pep/Num_Cond_Peptide_Per_Pep\t1\t0.875\t0.625\n##\t-logP\t0.46\t0.529\t1.081\n```\n \nCount the number of neoantigens of which threshold is IC 50 of mutatnt peptides < 500. \n```\n[R]\nprint(Export_Summary_IndelSV(Result_HLA1_SV, Mut_IC50_th = 500))\n```\n```\n##\tNum_All_Alteration\tNum_Evaluated_Alteration\tNum_Alteration_Generating_NeoAg\tNum_All_Peptide\tNum_Evaluated_Peptide\tNum_Peptide_Generating_NeoAg\t\n##\t16\t16\t10\t3120\t3120\t118\n```\n \nCount the number of neoantigens of which threshold is IC 50 of mutatnt peptides < 500. \n```\n[R]\nprint(Export_Summary_IndelSV(Result_HLA2_SV, Mut_IC50_th = 500))\n```\n```\n##\tNum_All_Alteration\tNum_Evaluated_Alteration\tNum_Alteration_Generating_NeoAg\tNum_All_Peptide\tNum_Evaluated_Peptide\tNum_Peptide_Generating_NeoAg\n##\t16\t16\t12\t573\t573\t292\n```\n \nCount the number of neoantigens for each peptide of which threshold is IC 50 of mutatnt peptides < 500. \n```\n[R]\nprint(Export_Summary_Fragments(Result_HLA1_Seq, Mut_IC50_th = 500))\n```\n```\n## [[1]]\n##                                                     atggcagaag\n## Num_Peptide_Per_Grp                                     63.000\n## Num_Cond_Peptide_Per_Grp                                63.000\n## Num_Rest_Peptide_Per_Grp                                 5.000\n## Num_Rest_Peptide_Per_Grp / Num_Cond_Peptide_Per_Grp      0.079\n## -logP                                                    0.621\n```\n```\n## [[2]]\n##                                                         \n## Num_Peptide_Per_NM                                63.000\n## Num_Cond_Peptide_Per_NM                           63.000\n## Num_Rest_Peptide_Per_NM                            5.000\n## Num_Rest_Peptide_Per_NM / Num_Cond_Peptide_Per_NM  0.079\n## -logP                                              0.621\n```\n```\n## [[3]]\n##                                                     MAEDDPYLGRPEKMFHLDPSLTHTIFN-0_atggcagaag-0_1\n## Num_Peptide_Per_Pep                                                                       63.000\n## Num_Cond_Peptide_Per_Pep                                                                  63.000\n## Num_Rest_Peptide_Per_Pep                                                                   5.000\n## Num_Rest_Peptide_Per_Pep / Num_Cond_Peptide_Per_Pep                                        0.079\n## -logP                                                                                      0.621\n```\n \nCount the number of neoantigens for each peptide of which threshold is IC 50 of mutatnt peptides < 500. \n```\n[R]\nprint(Export_Summary_Fragments(Result_HLA2_Seq, Mut_IC50_th = 500))\n```\n```\n## [[1]]\n##                                                     atggcagaag\n## Num_Peptide_Per_Grp                                      3.000\n## Num_Cond_Peptide_Per_Grp                                 3.000\n## Num_Rest_Peptide_Per_Grp                                 1.000\n## Num_Rest_Peptide_Per_Grp / Num_Cond_Peptide_Per_Grp      0.333\n## -logP                                                    0.460\n```\n```\n## [[2]]\n##                                                        \n## Num_Peptide_Per_NM                                3.000\n## Num_Cond_Peptide_Per_NM                           3.000\n## Num_Rest_Peptide_Per_NM                           1.000\n## Num_Rest_Peptide_Per_NM / Num_Cond_Peptide_Per_NM 0.333\n## -logP                                             0.460\n```\n```\n## [[3]]\n##                                                     MAEDDPYLGRPEQMFHLILL-0_atggcagaag-0_1\n## Num_Peptide_Per_Pep                                                                 3.000\n## Num_Cond_Peptide_Per_Pep                                                            3.000\n## Num_Rest_Peptide_Per_Pep                                                            1.000\n## Num_Rest_Peptide_Per_Pep / Num_Cond_Peptide_Per_Pep                                 0.333\n## -logP                                                                               0.460\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/hase62/Neoantimon/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "-Download and Set netMHCpan4.1 (Required)",
        "parent_header": [
          "1. Preparation"
        ],
        "type": "Text_excerpt",
        "value": "1. Download netMHCpan4.1 from https://services.healthtech.dtu.dk/services/NetMHCpan-4.1 and move it to any working directory. \n(Assume you have netMHCpan-4.1b.{Darwin|Linux}.tar.gz in your \"lib\" directory.)\n\n2. Run the initial setting script at the directory that contains downloaded  as followings.\n\nWe have\n```\nlib/\n    \u2514 netMHCpan-4.1b.{Darwin|Linux}.tar\n```\n\nRun\n```\n[command line]\nwget --no-check-certificate https://github.com/hase62/Neoantimon/raw/master/lib/setNetMHCpan4.1.sh\nchmod 750 setNetMHCpan4.1.sh\n./setNetMHCpan4.1.sh \n```\nNotice: If you're using M1/M2 MacOS, you should additionally replace lib/netNetMHCpan-4.1/netMHCpan as follows\n\nset PLATFORM = `echo $UNIX $AR | awk '{print $1\"_\"$2}'`\nto \nset PLATFORM = `echo $UNIX x86_64 | awk '{print $1\"_\"$2}'`\n\nWe have\n```\nlib/\n    \u251c netMHCpan-4.1b.{Darwin|Linux}.tar\n    \u251c setNetMHCpan4.1.sh\n    \u2514 NetMHCpan4.1/\n      \u251c {Darwin|Linux}_x86_64\n      \u251c data\n      \u251c data.{Darwin|Linux}.tar.gz\n      \u251c netMHCpan\n      \u251c netMHCpan-4.1.readme\n      \u251c netMHCpan-e\n      \u251c netMHCpan.1\n      \u251c test\n      \u2514 tmp\n```\n"
      },
      "source": "https://raw.githubusercontent.com/hase62/Neoantimon/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-Download and Set mhcflurry (Not Required)",
        "parent_header": [
          "1. Preparation"
        ],
        "type": "Text_excerpt",
        "value": "1. (Recommended) Install anaconda from https://www.anaconda.com/distribution/, and then run the following codes. \n```\n[command line]\npip install mhcflurry\npip install tensorflow\nmhcflurry-downloads fetch\n```\n\nor\n\n```\n[command line]\npip install mhcflurry\nconda install -c conda-forge tensorflow\nmhcflurry-downloads fetch\n```\nNotice: If you're using M1/M2 MacOS, you should install M1/M2 available version tensorflow. \n\n\n2. Otherwise, install python from https://www.python.org/downloads/release, and then run the above codes.\n"
      },
      "source": "https://raw.githubusercontent.com/hase62/Neoantimon/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-Download and Set netMHCIIpan4.2 (Required)",
        "parent_header": [
          "1. Preparation"
        ],
        "type": "Text_excerpt",
        "value": "1. Download netMHCIIpan 4.2 from https://services.healthtech.dtu.dk/services/NetMHCIIpan-4.2 and move it to the working directory. \n(Assume you have netMHCIIpan-4.2.{Darwin|Linux}.tar.gz in your \"lib\" directory.)\n\n2. Do initial setting at the working directory as followings.\n\nWe have\n```\nlib/\n    \u2514 netMHCIIpan-4.2.{Darwin|Linux}.tar\n```\n\nRun\n```\n[command line]\nwget --no-check-certificate https://github.com/hase62/Neoantimon/raw/master/lib/setNetMHCIIpan4.2.sh\nchmod 750 setNetMHCIIpan4.2.sh\n./setNetMHCIIpan4.2.sh\n```\nNotice: If you're using M1/M2 MacOS, you should additionally replace lib/netNetMHCpan-4.2/netMHCpan as follows\n\nset PLATFORM = `echo $UNIX $AR | awk '{print $1\"_\"$2}'`\nto \nset PLATFORM = `echo $UNIX x86_64 | awk '{print $1\"_\"$2}'`\n\nWe have\n```\nlib/\n    \u251c netMHCIIpan-4.2.{Darwin|Linux}.tar\n    \u251c setNetMHCIIpan4.2.sh\n    \u2514 netMHCIIpan-4.2/\n      \u251c {Darwin|Linux}_x86_64\n      \u251c data\n      \u251c netMHCIIpan\n      \u251c NetMHCIIpan-4.2.pl\n      \u251c netMHCIIpan-4.2.readme\n      \u251c netMHCIIpan-e\n      \u251c etMHCIIpan.1\n      \u251c test\n      \u251c test.fa\n      \u2514 tmp\n```\n"
      },
      "source": "https://raw.githubusercontent.com/hase62/Neoantimon/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-Download human refMrna Files (Required)",
        "parent_header": [
          "1. Preparation"
        ],
        "type": "Text_excerpt",
        "value": "(You have to select your corresponding version from GRCh38, hg38, GRCh37 or hg19.)\n\n**GRCh38/hg38**: Run the following codes. \n```\n[command line]\nwget http://hgdownload.soe.ucsc.edu/goldenPath/hg38/bigZips/refMrna.fa.gz\ngunzip refMrna.fa.gz\nmv refMrna.fa refMrna.grch38.fa\n```\n\n**GRCh37/hg19**: Run the following codes. \n```\n[command line]\nwget http://hgdownload.cse.ucsc.edu/goldenPath/hg19/bigZips/refMrna.fa.gz\ngunzip refMrna.fa.gz\nmv refMrna.fa refMrna.grch37.fa\n```\n"
      },
      "source": "https://raw.githubusercontent.com/hase62/Neoantimon/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-Download human refFlat Files (Required)",
        "parent_header": [
          "1. Preparation"
        ],
        "type": "Text_excerpt",
        "value": "(You have to select your corresponding version from GRCh38, hg38, GRCh37 or hg19.)\n\n**GRCh38/hg38**: Run the following codes. \n```\n[command line]\nwget http://hgdownload.soe.ucsc.edu/goldenPath/hg38/database/refFlat.txt.gz\ngunzip refFlat.txt.gz\nmv refFlat.txt refFlat.grch38.txt\n```\n\n**GRCh37/hg19**: Run the following codes. \n```\n[command line]\nwget http://hgdownload.soe.ucsc.edu/goldenPath/hg19/database/refFlat.txt.gz\ngunzip refFlat.txt.gz\nmv refFlat.txt refFlat.grch37.txt\n```\n"
      },
      "source": "https://raw.githubusercontent.com/hase62/Neoantimon/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-Download human DNA refSeq (Required to calculate allele specific RNA expression.)",
        "parent_header": [
          "1. Preparation"
        ],
        "type": "Text_excerpt",
        "value": "(You have to select your corresponding version from GRCh38, hg38, GRCh37 or hg19.)\n\n**GRCh38**: Run the following codes.\n```\n[command line]\nwget ftp://ftp.ensembl.org/pub/release-87/fasta/homo_sapiens/dna/Homo_sapiens.GRCh38.dna.toplevel.fa.gz\nmv Homo_sapiens.GRCh38.dna.toplevel.fa.gz GRCh38.fa.gz\ngunzip GRCh38.fa.gz\nsamtools faidx GRCh38.fa\n```\n\n**hg38**: Run the following codes.\n```\n[command line]\nwget http://hgdownload.soe.ucsc.edu/goldenPath/hg38/bigZips/hg38.fa.gz\ngunzip hg38.fa.gz\nsamtools faidx hg38.fa\n```\n\n**GRCh37/hg19**: Run the following codes.\n```\n[command line]\nwget ftp://ftp.ensembl.org/pub/release-75//fasta/homo_sapiens/dna/Homo_sapiens.GRCh37.75.dna.toplevel.fa.gz\nmv Homo_sapiens.GRCh37.75.dna.toplevel.fa.gz GRCh37.fa.gz\ngunzip GRCh37.fa.gz\nsamtools faidx GRCh37.fa\n```\n"
      },
      "source": "https://raw.githubusercontent.com/hase62/Neoantimon/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-Download SampleFiles",
        "parent_header": [
          "4. Sample Codes"
        ],
        "type": "Text_excerpt",
        "value": "Run the following codes. \n(We assume that data will be downloaded into \"lib\" directory)\n```\n[command line]\nwget --no-check-certificate https://github.com/hase62/Neoantimon/raw/master/lib/data.zip\nunzip data.zip\n```\n\nWe assume the following directory structure according to 1. Preparation.\n```\n~/opt/anaconda3\nlib/\n    \u251c NetMHCpan4.0\n    \u251c netMHCIIpan-3.2\n    \u251c refFlat.grch37.txt\n    \u251c refMrna.grch37.fa\n    \u2514 data/\n      \u251c sample_result_INDEL_CLASS1_ALL.txt\n      \u251c sample_result_INDEL_CLASS2_ALL.txt\n      \u251c sample_result_SeqFragment_CLASS1_ALL.txt\n      \u251c sample_result_SeqFragment_CLASS2_ALL.txt\n      \u251c sample_result_SNV_CLASS1_ALL.txt\n      \u251c sample_result_SNV_CLASS2_ALL.txt\n      \u251c sample_result_SVFusion_CLASS1_ALL.txt\n      \u251c sample_result_SVFusion_CLASS2_ALL.txt\n      \u251c sample_copynum.txt\n      \u251c sample_hla_table_c1.txt\n      \u251c sample_hla_table_c2.txt\n      \u251c sample_refMrna.grch37.fa.txt\n      \u251c sample_refFlat.grch37.txt\n      \u251c sample_rna_exp.txt\n      \u251c sample_vcf.annovar.txt\n      \u251c sample_vcf.vep.txt\n      \u251c sample_sv_bnd.txt\n      \u2514 sample_vcf.snps.vcf\n```\n"
      },
      "source": "https://raw.githubusercontent.com/hase62/Neoantimon/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Calculate Neoantigens on SNVs for HLA Class I and II.",
        "parent_header": [
          "4. Sample Codes",
          "-Download SampleFiles"
        ],
        "type": "Text_excerpt",
        "value": "<kbd><img src=\"https://github.com/hase62/Neoantimon/blob/images/images/ForExplanation_snv.png\" width=\"640px\"></kbd>\n\nTo calculate the binding affinity of neoantigen candaites, which are generated from from SNVs, to HLA ClassI. \nWhen using MHCflurry, [[1]] and [[2]] include the results of NetMHCpan and MHCflurry, respectively. \n```\n[R]\n  Result_HLA1_SNV <- MainSNVClass1(input_annovar_format_file = \"data/sample_vcf.annovar.txt\",\n                                   file_name_in_hla_table = \"sample\",\n                                   hla_file = \"data/sample_hla_table_c1.txt\",\n                                   refflat_file  = \"refFlat.grch37.txt\",\n                                   refmrna_file = \"refMrna.grch37.fa\",\n                                   rnaexp_file = \"data/sample_rna_exp.txt\",\n                                   netMHCpan_dir = \"netMHCpan-4.0/netMHCpan\",\n                                   depth_tumor_column = 12,\n                                   depth_normal_column = 14,\n                                   SNPs = \"data/sample_vcf.snps.vcf\",\n                                   multiple_variants = TRUE,\n                                   MHCflurry = \"~/opt/anaconda3/bin/mhctools\")\n  Result_HLA1_SNV_1 <- CalculatePriorityScores(result = Result_HLA1_SNV[[1]], useRNAvaf = FALSE)\n  Result_HLA1_SNV_2 <- CalculatePriorityScores(result = Result_HLA1_SNV[[2]], useRNAvaf = FALSE)\n```\n\n```\n[R]\n  Result_HLA1_SNV_vep <- MainSNVClass1(input_vep_format_file = \"data/sample_vcf.vep.txt\",\n                                   file_name_in_hla_table = \"sample\",\n                                   hla_file = \"data/sample_hla_table_c1.txt\",\n                                   refflat_file  = \"refFlat.grch37.txt\",\n                                   refmrna_file = \"refMrna.grch37.fa\",\n                                   rnaexp_file = \"data/sample_rna_exp.txt\",\n                                   netMHCpan_dir = \"netMHCpan-4.0/netMHCpan\",\n                                   multiple_variants = FALSE)\n  Result_HLA1_vep_SNV <- CalculatePriorityScores(result = Result_HLA1_SNV_vep, useRNAvaf = FALSE)\n```\n\n\nTo calculate the binding affinity of neoantigen candaites, which are generated from from SNVs, to HLA ClassII. \n```\n[R]\n  Result_HLA2_SNV <- MainSNVClass2(input_annovar_format_file = \"data/sample_vcf.annovar.txt\",\n                                   file_name_in_hla_table = \"sample\",\n                                   hla_file = \"data/sample_hla_table_c2.txt\",\n                                   refflat_file  = \"refFlat.grch37.txt\",\n                                   refmrna_file = \"refMrna.grch37.fa\",\n                                   rnaexp_file = \"data/sample_rna_exp.txt\",\n                                   netMHCIIpan_dir = \"netMHCIIpan-3.2/netMHCIIpan\",\n                                   depth_tumor_column = 12,\n                                   depth_normal_column = 14,\n                                   SNPs = \"data/sample_vcf.snps.vcf\",\n                                   multiple_variants = TRUE)\n  Result_HLA2_SNV <- CalculatePriorityScores(result = Result_HLA2_SNV, useRNAvaf = FALSE)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/hase62/Neoantimon/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Calculate Neoantigens on INDELs for HLA Class I and II.",
        "parent_header": [
          "4. Sample Codes",
          "-Download SampleFiles"
        ],
        "type": "Text_excerpt",
        "value": "<kbd><img src=\"https://github.com/hase62/Neoantimon/blob/images/images/ForExplanation_indel.png\" width=\"640px\"></kbd>\n\nTo calculate the binding affinity of neoantigen candaites, which are generated from from indels, to HLA ClassI. \nWhen using MHCflurry, [[1]] and [[2]] include the results of NetMHCpan and MHCflurry, respectively. \n```\n[R]\n  Result_HLA1_INDEL <- MainINDELClass1(input_annovar_format_file = \"data/sample_vcf.annovar.txt\",\n                                       file_name_in_hla_table = \"sample\",\n                                       hla_file = \"data/sample_hla_table_c1.txt\",\n                                       refflat_file  = \"refFlat.grch37.txt\",\n                                       refmrna_file = \"refMrna.grch37.fa\",\n                                       rnaexp_file = \"data/sample_rna_exp.txt\",\n                                       netMHCpan_dir = \"netMHCpan-4.0/netMHCpan\",\n                                       depth_tumor_column = 12,\n                                       depth_normal_column = 14,\n                                       SNPs = \"data/sample_vcf.snps.vcf\",\n                                       multiple_variants = TRUE,\n                                       MHCflurry = \"~/opt/anaconda3/bin/mhctools\")\n  Result_HLA1_INDEL_1 <- CalculatePriorityScores(result = Result_HLA1_INDEL[[1]], useRNAvaf = FALSE)\n  Result_HLA1_INDEL_2 <- CalculatePriorityScores(result = Result_HLA1_INDEL[[2]], useRNAvaf = FALSE)\n```\n\nTo calculate the binding affinity of neoantigen candaites, which are generated from from indels, to HLA ClassII. \n```\n[R]\n  Result_HLA2_INDEL <- MainINDELClass2(input_annovar_format_file = \"data/sample_vcf.annovar.txt\",\n                                       file_name_in_hla_table = \"sample\",\n                                       hla_file = \"data/sample_hla_table_c2.txt\",\n                                       refflat_file  = \"refFlat.grch37.txt\",\n                                       refmrna_file = \"refMrna.grch37.fa\",\n                                       rnaexp_file = \"data/sample_rna_exp.txt\",\n                                       netMHCIIpan_dir = \"netMHCIIpan-3.2/netMHCIIpan\",\n                                       depth_tumor_column = 12,\n                                       depth_normal_column = 14,\n                                       SNPs = \"data/sample_vcf.snps.vcf\",\n                                       multiple_variants = TRUE)\n  Result_HLA2_INDEL <- CalculatePriorityScores(result = Result_HLA2_INDEL, useRNAvaf = FALSE)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/hase62/Neoantimon/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Calculate Neoantigens on SV fusions for HLA Class I and II.",
        "parent_header": [
          "4. Sample Codes",
          "-Download SampleFiles"
        ],
        "type": "Text_excerpt",
        "value": "<kbd><img src=\"https://github.com/hase62/Neoantimon/blob/images/images/ForExplanation_sv.png\" width=\"640px\"><kbd>\n\nTo calculate the binding affinity of neoantigen candaites, which are generated from from SVs, to HLA ClassI. \n```\n[R]\n  Result_HLA1_SV <- MainSVFUSIONClass1(input_file = \"data/sample_sv_bnd.txt\",\n                                       file_name_in_hla_table = \"sample\",\n                                       hla_file = \"data/sample_hla_table_c1.txt\",\n                                       refflat_file  = \"refFlat.grch37.txt\",\n                                       refmrna_file = \"refMrna.grch37.fa\",\n                                       rnaexp_file = \"data/sample_rna_exp.txt\",\n                                       netMHCpan_dir = \"netMHCpan-4.0/netMHCpan\",\n                                       mutation_alt_bnd_column = 5,\n                                       gene_symbol_column = 7,\n                                       mate_id_column = 8)\n  Result_HLA1_SV <- CalculatePriorityScores(result = Result_HLA1_SV, useRNAvaf = FALSE)\n```\n\nTo calculate the binding affinity of neoantigen candaites, which are generated from from SVs, to HLA ClassII. \n```\n[R]\n  Result_HLA2_SV <- MainSVFUSIONClass2(input_file = \"data/sample_sv_bnd.txt\",\n                                       file_name_in_hla_table = \"sample\",\n                                       hla_file = \"data/sample_hla_table_c2.txt\",\n                                       refflat_file  = \"refFlat.grch37.txt\",\n                                       refmrna_file = \"refMrna.grch37.fa\",\n                                       rnaexp_file = \"data/sample_rna_exp.txt\",\n                                       netMHCIIpan_dir = \"netMHCIIpan-3.2/netMHCIIpan\",\n                                       mutation_alt_bnd_column = 5,\n                                       gene_symbol_column = 7,\n                                       mate_id_column = 8)\n  Result_HLA2_SV <- CalculatePriorityScores(result = Result_HLA2_SV, useRNAvaf = FALSE)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/hase62/Neoantimon/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Calculate Neoantigens from a fragment of RNA sequence for HLA Class I and II by comparing to the original protein.",
        "parent_header": [
          "4. Sample Codes",
          "-Download SampleFiles"
        ],
        "type": "Text_excerpt",
        "value": "<kbd><img src=\"https://github.com/hase62/Neoantimon/blob/images/images/ForExplanation_rna.png\" width=\"640px\"></kbd>\n\nTo calculate the binding affinity of neoantigen candaites, which are directly generated from RNA sequences, to HLA ClassI. \nThe peptides included in the original genes (\"NM_003998\", \"NM_001165412\") are removed from the results. \n```\n[R]\n  Result_HLA1_Seq <- MainSeqFragmentClass1(input_sequence = \"atggcagaagatgatccatatttgggaaggcctgaaaaaatgtttcatttggatccttctttgactcatacaatatttaatc\",\n                                           file_name_in_hla_table = \"sample\",\n                                           hla_file = \"data/sample_hla_table_c1.txt\",\n                                           hmdir = getwd(),\n                                           job_id = \"NO_job_id\",\n                                           refflat_file  = \"refFlat.grch37.txt\",\n                                           refmrna_file = \"refMrna.grch37.fa\",\n                                           netMHCpan_dir = \"netMHCpan-4.0/netMHCpan\",\n                                           reference_nm_id = c(\"NM_003998\", \"NM_001165412\"))\n```\n\nTo calculate the binding affinity of neoantigen candaites, which are directly generated from RNA sequences, to HLA ClassII. \nThe peptides included in the riginal genes (\"NFKB1\", \"BCL3\") are removed from the results. \n```\n[R]\n  Result_HLA2_Seq <- MainSeqFragmentClass2(input_sequence = \"atggcagaagatgatccatatttgggaaggcctgaacaaatgtttcatttgatccttctttgactcatacaatatttaatc\",\n                                           file_name_in_hla_table = \"sample\",\n                                           hla_file = \"data/sample_hla_table_c2.txt\",\n                                           hmdir = getwd(),\n                                           job_id = \"NO_job_id\",\n                                           refflat_file  = \"refFlat.grch37.txt\",\n                                           refmrna_file = \"refMrna.grch37.fa\",\n                                           netMHCIIpan_dir = \"netMHCIIpan-3.2/netMHCIIpan\",\n                                           reference_gene_symbol = c(\"NFKB1\", \"BCL3\"))\n```\n"
      },
      "source": "https://raw.githubusercontent.com/hase62/Neoantimon/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Attach Opitional Information",
        "parent_header": [
          "4. Sample Codes",
          "-Download SampleFiles"
        ],
        "type": "Text_excerpt",
        "value": "Users can optionally provide (a) RNA expression data with and without (b) the corresponding Binary Alignment Map (BAM) file to attach total and allele specific RNA expression levels, and (c) copy number variation data to calculate the posterior probability distribution over cancer-cell fraction (CCFP) to evaluate tumor sub-clonality (Lohr et al., 2014).\n\n<kbd><img src=\"https://github.com/hase62/Neoantimon/blob/images/images/ForExplanation_op2.png\" width=\"640px\"></kbd>\n\nIn addition, users can consider specific cases of existing SNPs on the mutant peptide by providing (c) SNPs data, and multiple SNVs on the same mutant peptides and among the frameshift region caused by indels. These cases are explained as followings.\n\n<kbd><img src=\"https://github.com/hase62/Neoantimon/blob/images/images/ForExplanation_op1.png\" width=\"640px\"></kbd>\n"
      },
      "source": "https://raw.githubusercontent.com/hase62/Neoantimon/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/hase62/Neoantimon/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/hase62/Neoantimon/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "hase62/Neoantimon"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/hase62/Neoantimon/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hase62/Neoantimon/master/exe_gitupdate.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hase62/Neoantimon/master/lib/setNetMHCIIpan4.2.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hase62/Neoantimon/master/lib/setNetMHCpan4.1.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hase62/Neoantimon/master/lib/setNetMHCIIpan4.3.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hase62/Neoantimon/master/lib/archive/setNetMHCIIpan3.2.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hase62/Neoantimon/master/lib/archive/setNetMHCpan4.0.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hase62/Neoantimon/master/lib/archive/setNetMHCpan3.0.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hase62/Neoantimon/images/images/ForExplanation_snv.png"
      },
      "source": "https://raw.githubusercontent.com/hase62/Neoantimon/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hase62/Neoantimon/images/images/ForExplanation_indel.png"
      },
      "source": "https://raw.githubusercontent.com/hase62/Neoantimon/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hase62/Neoantimon/images/images/ForExplanation_sv.png"
      },
      "source": "https://raw.githubusercontent.com/hase62/Neoantimon/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hase62/Neoantimon/images/images/ForExplanation_rna.png"
      },
      "source": "https://raw.githubusercontent.com/hase62/Neoantimon/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hase62/Neoantimon/images/images/ForExplanation_op2.png"
      },
      "source": "https://raw.githubusercontent.com/hase62/Neoantimon/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hase62/Neoantimon/images/images/ForExplanation_op1.png"
      },
      "source": "https://raw.githubusercontent.com/hase62/Neoantimon/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "-Install R (Required)",
        "parent_header": [
          "0. Preliminary Use"
        ],
        "type": "Text_excerpt",
        "value": "Install R from the official (https://www.r-project.org/). \n\nor\n\nCentOS\n```\n[command line]\nyum -y install R\n```\n\nMac(Devian)\n```\n[command line]\nbrew cask install r\n```\n\nAnaconda\n```\n[command line]\nconda -n create Neoantimon r-essentials r-base\nconda activate Neoantimon\nconda update --all\n```\nNotice: If you're using M1/M2/M3 MacOS, you need to install available version conda.\n"
      },
      "source": "https://raw.githubusercontent.com/hase62/Neoantimon/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-Install wget (Required)",
        "parent_header": [
          "1. Preparation"
        ],
        "type": "Text_excerpt",
        "value": "CentOS\n```\n[command line]\nyum install wget\n```\n\nMac(Devian)\n```\n[command line]\nbrew install wget\n```\n\nAnaconda\n```\n[command line]\nconda install -c anaconda wget\n```\n"
      },
      "source": "https://raw.githubusercontent.com/hase62/Neoantimon/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-Download and Set netMHCpan4.1 (Required)",
        "parent_header": [
          "1. Preparation"
        ],
        "type": "Text_excerpt",
        "value": "1. Download netMHCpan4.1 from https://services.healthtech.dtu.dk/services/NetMHCpan-4.1 and move it to any working directory. \n(Assume you have netMHCpan-4.1b.{Darwin|Linux}.tar.gz in your \"lib\" directory.)\n\n2. Run the initial setting script at the directory that contains downloaded  as followings.\n\nWe have\n```\nlib/\n    \u2514 netMHCpan-4.1b.{Darwin|Linux}.tar\n```\n\nRun\n```\n[command line]\nwget --no-check-certificate https://github.com/hase62/Neoantimon/raw/master/lib/setNetMHCpan4.1.sh\nchmod 750 setNetMHCpan4.1.sh\n./setNetMHCpan4.1.sh \n```\nNotice: If you're using M1/M2 MacOS, you should additionally replace lib/netNetMHCpan-4.1/netMHCpan as follows\n\nset PLATFORM = `echo $UNIX $AR | awk '{print $1\"_\"$2}'`\nto \nset PLATFORM = `echo $UNIX x86_64 | awk '{print $1\"_\"$2}'`\n\nWe have\n```\nlib/\n    \u251c netMHCpan-4.1b.{Darwin|Linux}.tar\n    \u251c setNetMHCpan4.1.sh\n    \u2514 NetMHCpan4.1/\n      \u251c {Darwin|Linux}_x86_64\n      \u251c data\n      \u251c data.{Darwin|Linux}.tar.gz\n      \u251c netMHCpan\n      \u251c netMHCpan-4.1.readme\n      \u251c netMHCpan-e\n      \u251c netMHCpan.1\n      \u251c test\n      \u2514 tmp\n```\n"
      },
      "source": "https://raw.githubusercontent.com/hase62/Neoantimon/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-Download and Set mhcflurry (Not Required)",
        "parent_header": [
          "1. Preparation"
        ],
        "type": "Text_excerpt",
        "value": "1. (Recommended) Install anaconda from https://www.anaconda.com/distribution/, and then run the following codes. \n```\n[command line]\npip install mhcflurry\npip install tensorflow\nmhcflurry-downloads fetch\n```\n\nor\n\n```\n[command line]\npip install mhcflurry\nconda install -c conda-forge tensorflow\nmhcflurry-downloads fetch\n```\nNotice: If you're using M1/M2 MacOS, you should install M1/M2 available version tensorflow. \n\n\n2. Otherwise, install python from https://www.python.org/downloads/release, and then run the above codes.\n"
      },
      "source": "https://raw.githubusercontent.com/hase62/Neoantimon/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-Download and Set netMHCIIpan4.2 (Required)",
        "parent_header": [
          "1. Preparation"
        ],
        "type": "Text_excerpt",
        "value": "1. Download netMHCIIpan 4.2 from https://services.healthtech.dtu.dk/services/NetMHCIIpan-4.2 and move it to the working directory. \n(Assume you have netMHCIIpan-4.2.{Darwin|Linux}.tar.gz in your \"lib\" directory.)\n\n2. Do initial setting at the working directory as followings.\n\nWe have\n```\nlib/\n    \u2514 netMHCIIpan-4.2.{Darwin|Linux}.tar\n```\n\nRun\n```\n[command line]\nwget --no-check-certificate https://github.com/hase62/Neoantimon/raw/master/lib/setNetMHCIIpan4.2.sh\nchmod 750 setNetMHCIIpan4.2.sh\n./setNetMHCIIpan4.2.sh\n```\nNotice: If you're using M1/M2 MacOS, you should additionally replace lib/netNetMHCpan-4.2/netMHCpan as follows\n\nset PLATFORM = `echo $UNIX $AR | awk '{print $1\"_\"$2}'`\nto \nset PLATFORM = `echo $UNIX x86_64 | awk '{print $1\"_\"$2}'`\n\nWe have\n```\nlib/\n    \u251c netMHCIIpan-4.2.{Darwin|Linux}.tar\n    \u251c setNetMHCIIpan4.2.sh\n    \u2514 netMHCIIpan-4.2/\n      \u251c {Darwin|Linux}_x86_64\n      \u251c data\n      \u251c netMHCIIpan\n      \u251c NetMHCIIpan-4.2.pl\n      \u251c netMHCIIpan-4.2.readme\n      \u251c netMHCIIpan-e\n      \u251c etMHCIIpan.1\n      \u251c test\n      \u251c test.fa\n      \u2514 tmp\n```\n"
      },
      "source": "https://raw.githubusercontent.com/hase62/Neoantimon/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "-Install Samtools (Required to calculate allele specific RNA expression.)",
        "parent_header": [
          "1. Preparation"
        ],
        "type": "Text_excerpt",
        "value": "1. (Recommended) Install anaconda from https://www.anaconda.com/distribution/, and then run the following codes. \n```\n[command line]\nconda install -c bioconda samtools\n```\n\n2. Otherwise, you can install local samtools as followings. \n```\n[command line]\nwget https://sourceforge.net/projects/samtools/files/samtools/0.1.19/samtools-0.1.19.tar.bz2\ntar jxf samtools-0.1.19.tar.bz2\n```\n"
      },
      "source": "https://raw.githubusercontent.com/hase62/Neoantimon/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2. Prepare to Use on R",
        "type": "Text_excerpt",
        "value": "**Required**\n```\n[R]\ninstall.packages(\"devtools\");\nlibrary(devtools);\ninstall_github('hase62/Neoantimon');\nlibrary(Neoantimon);\n```\n\nIf you're using Anaconda, \n\n```\n[command line]\nconda install -c conda-forge r_devtools\n```\nThen, \n```\n[R]\nlibrary(devtools);\ninstall_github('hase62/Neoantimon');\nlibrary(Neoantimon);\n```\n\n**Suggested to Install for Reading Data at High Speed**\n```\n[R]\ninstall.packages('data.table');\nlibrary(data.table);\n```\n"
      },
      "source": "https://raw.githubusercontent.com/hase62/Neoantimon/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9999991629426099,
      "result": {
        "original_header": "-HLA Table (or, You can indicate HLA types directly)",
        "type": "Text_excerpt",
        "value": "```\n##\tName\tDPA11\tDPA12\tDPB11\tDPB12\tDQA11\tDQA12\tDQB11\tDQB12\tDRB11\tDRB12\n##\tsample\tDPA1*01:03\tDPA1*02:01\tDPB1*02:01\tDPB1*09:01\tDQA1*01:02\tDQA1*05:05\tDQB1*03:01\tDQB1*06:04\tDRB1*11:04\tDRB1*13:02\n##\tsample2\tDPA1*01:03\tDPA1*02:01\tDPB1*02:01\tDPB1*09:01\tDQA1*01:02\tDQA1*05:05\tDQB1*03:01\tDQB1*06:04\tDRB1*11:04\tDRB1*13:02\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/hase62/Neoantimon/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9364639125773999,
      "result": {
        "original_header": "-Annotated file by VEP",
        "type": "Text_excerpt",
        "value": "Please install the following library when you use vep-annotated files. \n```\nif (!requireNamespace(\"BiocManager\", quietly = TRUE))\n    install.packages(\"BiocManager\")\n\nBiocManager::install(\"biomaRt\")\nlibrary(biomaRt)\n``` \nFor example, please run as following. \n```\n  MainSNVClass1(input_vep_format_file = sample_vcf.vep,\n                hla_types = sample_hla_table_c1[1,-1],\n                refflat_file = sample_refFlat.grch37,\n                refmrna_file = sample_refMrna.grch37.fa,\n                netMHCpan_dir = NA)\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/hase62/Neoantimon/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9313253038480428,
      "result": {
        "original_header": "-CNV file",
        "type": "Text_excerpt",
        "value": "```\n##\tChromosome\tPosition\t     Log.R\tsegmented.LogR\tBAF\tsegmented.BAF\tCopy.number\tMinor.allele\tRaw.copy.number\n##\t\t\t 1\t  564621\t 0.6071447\t -0.09862298\t  1\t\t\t   NA\t\t\t  2\t\t\t   1\t\t  4.3540752\n##\t\t\t 1\t  799463\t 0.1519967\t -0.09862298\t  1\t\t\t   NA\t\t\t  2\t\t\t   1\t\t  2.1467339\n##\t\t\t 1\t  1017216\t 0.8146911\t -0.09862298\t  0\t\t\t   NA\t\t\t  3\t\t\t   1\t\t  5.8658499\n##\t\t\t 1\t  1158277\t-1.9594627\t -0.09862298\t  0\t\t\t   NA\t\t\t  1\t\t\t   0\t\t -0.5035897\n##\t\t\t 1\t  1242215\t 0.2927962\t -0.09862298\t  0\t\t\t   NA\t\t\t  2\t\t\t   1\t\t  2.6999875\n##\t\t\t 1\t  1462766\t-0.2234090\t -0.09862298\t  1\t\t\t   NA\t\t\t  2\t\t\t   1\t\t  1.0726687\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/hase62/Neoantimon/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8425465536072532,
      "result": {
        "original_header": "-HLA Table (or, You can indicate HLA types directly)",
        "type": "Text_excerpt",
        "value": "**1. A HLA Class I table file must be according to the following format.**\n```r\n[R]\ndata(\"sample_hla_table_c1\")\nprint(sample_hla_table_c1, row.names = FALSE)\n```\n \n**2. A HLA Class II table file must be according to the following format.**\n```r\n[R]\ndata(\"sample_hla_table_c2\")\nprint(sample_hla_table_c2, row.names = FALSE)\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/hase62/Neoantimon/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8250384422627032,
      "result": {
        "original_header": "Output Result (The details are documented in the manual/Neoantimon_2.1.0.pdf. )",
        "type": "Text_excerpt",
        "value": "Results generated from SNVs. \n```\n[R]\nprint(head(Result_HLA1_SNV_1))\n```\n  \nBASH2* \n"
      },
      "source": "https://raw.githubusercontent.com/hase62/Neoantimon/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/hase62/Neoantimon/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "YEAR: 2019\nCOPYRIGHT HOLDER: Takanori Hasegawa\n"
      },
      "source": "https://raw.githubusercontent.com/hase62/Neoantimon/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Neoantimon"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "hase62"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 335101,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 263912,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 3455,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hase62/Neoantimon/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 17:35:14",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 12
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "-Generate output without calculation",
        "parent_header": [
          "0. Preliminary Use"
        ],
        "type": "Text_excerpt",
        "value": "This code is a simple sample code for preliminary use to confirm the output. \n\n```\n[R]\nif (!require(\"BiocManager\", quietly = TRUE))\n  install.packages(\"BiocManager\")  \ninstall.packages(\"devtools\");\nlibrary(devtools);\nBiocManager::install(\"ensemblVEP\")\ninstall_github('hase62/Neoantimon');\nlibrary(Neoantimon);\n\ndata(\"sample_vcf.annovar\")\ndata(\"sample_hla_table_c1\")\ndata(\"sample_refFlat.grch37\")\ndata(\"sample_refMrna.grch37.fa\")\ndata(\"sample_result_SNV_CLASS1_ALL\")\n\nMainSNVClass1(input_annovar_format_file = sample_vcf.annovar,\n              hla_types = sample_hla_table_c1[1,-1],\n              refflat_file = sample_refFlat.grch37,\n              refmrna_file = sample_refMrna.grch37.fa,\n              netMHCpan_dir = NA)\n\nwrite.table(file = \"result.ID.SNV1/data.ID_SNV.peptide.SNV_CLASS1_ALL.txt\", \n            x = sample_result_SNV_CLASS1_ALL[grep(\"0_DHX15\", sample_result_SNV_CLASS1_ALL$Gene), ], \n            row.names = FALSE, quote = FALSE, sep = \"\\t\")\n```\n\nYou can get the following outputs. \n\ndata.ID_SNV.peptide.txt (annotation file)\n```\n##  Number  GeneSymbol  NM_id   AAchanges   Ref Alt Prob    Mutation_Prob   Exon_Start  Exon_End    Mutation_Position   Evaluated_Mutant_Peptide    Evaluated_Wt_Peptide    ..\n## 1\t0_DHX15\t 4\tNM_001358\tc.A1012G\tT\tC\t0\t0\t24529097\t24586177\t24556416\t294\t143\tPEPERDYLEAAIRTVIQIHMCEEEEGD\tPEPERDYLEAAIRAVIQIHMCEEEEGD ..\n```\n\ndata.ID_SNV.peptide.fasta (input file for netMHCpan)\n```\n##  >0_DHX15\n##  PEPERDYLEAAIRAVIQIHMCEEEEGD\n```\n\ndata.ID_SNV.wtpeptide.fasta (input file for netMHCpan)\n```\n##  >0_DHX15\n##  PEPERDYLEAAIRTVIQIHMCEEEEGD\n```\n\ndata.ID_SNV.peptide.SNV_CLASS1_ALL.txt (output file)\n```\n##  HLA\tPos\tGene\tEvaluated_Mutant_Peptide\tMut_IC50\tMut_Rank\tEvaluated_Wt_Peptide\tWt_IC50\tWt_Rank\tChr\tNM_ID\tChange\tRef\tAlt\tProb\tMutation_Prob.\tExon_Start\tExon_End\tMutation_Position\tTotal_Depth\tTumor_Depth\tWt_Peptide\tMutant_Peptide\tTotal_RNA\tTumor_RNA_Ratio\tTumor_RNA\tTumor_RNA_based_on_DNA\tMutRatio\tMutRatio_Min\tMutRatio_Max\n##  HLA-A*02:01\t2\t0_DHX15\tEPERDYLEAAIRA\t37952.9\t63.3899\tEPERDYLEAAIRT\t41213.3\t75.7538\t4\tNM_001358\tc.A1012G\tT\tC\t0\t0\t24529087\t24586184\t4_24556416\t294\t143\tPEPERDYLEAAIRTVIQIHMCEEEEGD\tPEPERDYLEAAIRAVIQIHMCEEEEGD\t1.35204\tNA\tNA\t0.657624897959184\tNA\tNA\tNA\n##  HLA-A*02:01\t3\t0_DHX15\tPERDYLEAAIRAV\t12108.2\t16.51\tPERDYLEAAIRTV\t11859.7\t16.2523\t4\tNM_001358\tc.A1012G\tT\tC\t0\t0\t24529087\t24586184\t4_24556416\t294\t143\tPEPERDYLEAAIRTVIQIHMCEEEEGD\tPEPERDYLEAAIRAVIQIHMCEEEEGD\t1.35204\tNA\tNA\t0.657624897959184\tNA\tNA\tNA\n##  HLA-A*02:01\t4\t0_DHX15\tERDYLEAAIRAVI\t12109.5\t16.5114\tERDYLEAAIRTVI\t14831.9\t19.2905\t4\tNM_001358\tc.A1012G\tT\tC\t0\t0\t24529087\t24586184\t4_24556416\t294\t143\tPEPERDYLEAAIRTVIQIHMCEEEEGD\tPEPERDYLEAAIRAVIQIHMCEEEEGD\t1.35204\tNA\tNA\t0.657624897959184\tNA\tNA\tNA\n##  ..\n##  \n```\n"
      },
      "source": "https://raw.githubusercontent.com/hase62/Neoantimon/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2. Prepare to Use on R",
        "type": "Text_excerpt",
        "value": "**Required**\n```\n[R]\ninstall.packages(\"devtools\");\nlibrary(devtools);\ninstall_github('hase62/Neoantimon');\nlibrary(Neoantimon);\n```\n\nIf you're using Anaconda, \n\n```\n[command line]\nconda install -c conda-forge r_devtools\n```\nThen, \n```\n[R]\nlibrary(devtools);\ninstall_github('hase62/Neoantimon');\nlibrary(Neoantimon);\n```\n\n**Suggested to Install for Reading Data at High Speed**\n```\n[R]\ninstall.packages('data.table');\nlibrary(data.table);\n```\n"
      },
      "source": "https://raw.githubusercontent.com/hase62/Neoantimon/master/README.md",
      "technique": "header_analysis"
    }
  ]
}