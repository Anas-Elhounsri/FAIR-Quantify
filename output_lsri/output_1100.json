{
  "application_domain": [
    {
      "confidence": 22.94,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/alonalj/hta"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-03-30T19:31:25Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-01-15T21:13:41Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.8999910621906023,
      "result": {
        "original_header": "Welcome to the HTA package!",
        "type": "Text_excerpt",
        "value": "The HTA package can statistically assess the level of both spatial, and global, heterogeneity within a spatial sample. HTA was specifically designed to handle multivariate spatial transcriptomics data, such as Visium samples (10x Genomics), but can be used in other domains (see our paper [1] for further details). \nIf you use hta in your research, pleas cite: [Levy-Jurgenson et al. (Bioinformatics, 2021) [1].](https://doi.org/10.1093/bioinformatics/btab569) \n** Bioinformatics are currently experiencing issues with matching the figures to their captions. Until they fix this issue, you can see the correct image captions in the file HTA_paper.pdf in the main folder (where this README appears).\n \n"
      },
      "source": "https://raw.githubusercontent.com/alonalj/hta/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/alonalj/hta/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/alonalj/hta/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "alonalj/hta"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Welcome to the HTA package!"
      },
      "source": "https://raw.githubusercontent.com/alonalj/hta/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "Welcome to the HTA package!"
        ],
        "type": "Text_excerpt",
        "value": "You will need Python 3.8 or above.\n\nTo install the package and follow along with our examples below use the following command:\n\n    pip install hta\n"
      },
      "source": "https://raw.githubusercontent.com/alonalj/hta/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/alonalj/hta/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2020 Alona Levy\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
      },
      "source": "https://raw.githubusercontent.com/alonalj/hta/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "hta"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "alonalj"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 53997,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/alonalj/hta/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 03:34:55",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Support and bug reports",
        "parent_header": [
          "Welcome to the HTA package!"
        ],
        "type": "Text_excerpt",
        "value": "If you encounter any issues, please contact levy alona (as one word) through gmail.\n"
      },
      "source": "https://raw.githubusercontent.com/alonalj/hta/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Region report:",
        "parent_header": [
          "Example 1 - Synthetic Data"
        ],
        "type": "Text_excerpt",
        "value": "To produce the region report mentioned in the paper (which provides additional information on each region) you can use the following code:\n\n    rr = hta.region_report(trait_names)\n    rr.to_csv('region_report.csv')\n"
      },
      "source": "https://raw.githubusercontent.com/alonalj/hta/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Input format:",
        "parent_header": [
          "Example 1 - Synthetic Data"
        ],
        "type": "Text_excerpt",
        "value": "Since generating a trait-combination matrix may be complicated, HTA generates it for you from a simpler form of input: a stacked set of matrices where each matrix represents one trait, and each entry indicates if the trait manifests or not (0/1) at the corresponding spatial position. \n\nFor **example**, for 2 traits and a 2D space of 32x32, let's generate some random input to HTA:\n\t\n\tfrom hta.stats import HTA\n\timport numpy as np\n\n    n_traits = 2\n    t_shape = (32, 32, n_traits) \n    t = np.random.random(t_shape)   # random values between 0 and 1\n    t = (t > 0.5)*1   # binarising to 0/1\n\nNow `t` contains two stacked matrices, each of shape 32x32. The first represents trait no. 1, the second represents trait no. 2 and each entry has either 0/1 (1 indicates that the trait manifests in that entry).\n"
      },
      "source": "https://raw.githubusercontent.com/alonalj/hta/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "HTA:",
        "parent_header": [
          "Example 1 - Synthetic Data"
        ],
        "type": "Text_excerpt",
        "value": "Once `t` is ready, we can run HTA. \n\nFor **example**, using `t` from above we can decide on a region size of 8 (i.e., each cell in the grid is 8x8) and run the following:\n\n    region_size = 8   # you can also use [8,8] or [8,16] etc., corresp. to [x,y].\n    hta = HTA(t, region_size)\n    hta_stat, hta_pval = hta.calc()\n    print('HTA {:.2f},  p-val: {:.2e}'.format(hta_stat, hta_pval))\n"
      },
      "source": "https://raw.githubusercontent.com/alonalj/hta/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Heterogeneity maps:",
        "parent_header": [
          "Example 1 - Synthetic Data"
        ],
        "type": "Text_excerpt",
        "value": "To correctly produce the heterogeneity maps, you must specify the name of the traits as they are ordered in `t` (i.e., the trait at index 0 should be the first (index 0) in the stacked matrices in `t`, and the trait at index n_traits-1 should be last in `t`). You can then call the function `hta.plot_heterogeneity_map(..)`. This function will return a pyplot object which can then be modified to your liking (e.g. adding a legend, title etc.). \n\nFor **example**:\n\n    trait_names = ['Trait {}'.format(i+1) for i in range(n_traits)]\n    \n    hm = hta.plot_heterogeneity_map(trait_names, dot_size=5)\n    hm.legend(loc='upper center', bbox_to_anchor=(0.5, -0.15), ncol=3)\n    title = 'HTA {:.2f} (p-val: {:.2e}), region_size={}' \\\n        .format(hta_stat, hta_pval, region_size)\n    font_dict = {'family': 'arial', 'size': 11}\n    hm.title(title, fontdict=font_dict)\n    hm.savefig('result.jpeg', dpi=350)\n    hm.close()\n"
      },
      "source": "https://raw.githubusercontent.com/alonalj/hta/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example 2 - Visium data",
        "type": "Text_excerpt",
        "value": "If you are analysing Visium spatial gene expression data (e.g. any of those listed [here](https://support.10xgenomics.com/spatial-gene-expression/datasets), or [this one](https://support.10xgenomics.com/spatial-gene-expression/datasets/1.1.0/V1_Breast_Cancer_Block_A_Section_1) used in our examples below) you can use our `Visium` built-in class to generate the input format for HTA (i.e., the `t` as in Example 1). \n\nMake sure you have obtained the following files for your Visium data:\n\n> filtered_feature_bc_matrix\n>\n> spatial\n\nand place them in a folder hierarchy as shown below (all shown files are required, and all file/folder names must be identical to those shown below, except for the data folder name):\n ```\nYOUR_DATA_FOLDER\n\u2514\u2500\u2500\u2500filtered_feature_bc_matrix\n\u2502   \u2502   barcodes.tsv.gz\n\u2502   \u2502   features.tsv.gz\n\u2502   \u2502   matrix.mtx.gz\n\u2514\u2500\u2500\u2500spatial\n\t\u2502   tissue_positions_list.csv\n\t\u2502   ...\n```\n\nYou are now ready to load your Visium data and use HTA. The following code loads the data (note that this may take around 30s), prepares it for HTA analysis, and computes the HTA p-value:\n\n    from hta.stats import HTA  \n    from hta.utils import Visium    \n    \n    path = \"/PATH_TO/YOUR_DATA_FOLDER\" # TODO: insert path to 'YOUR_DATA_FOLDER' (no '/' on end)\n    trait_names = ['ERBB2', 'CD8A']   # names of features to use in features.tsv.gz  \n      \n    # load and prepare visium data for HTA  \n    visium = Visium(path)  \n    visium.load()  \n    t, t_mask = visium.prep(trait_names)  \n      \n    # compute HTA and HTA p-val  \n    region_size = 15   # modify region_size as needed\n    hta = HTA(t, region_size=region_size, tissue_mask=t_mask) \n    hta_stat, hta_pval = hta.calc()\n    print(\"HTA p-value: \", hta_pval)\n\n>What is `t_mask`? It identifies, using barcodes.tsv.gz, which barcodes are under\n> the tissue, and is used to discard barcodeds that are not.\n\nNow we can proceed to produce the heterogeneity map and region report. The code below uses the results from the previous block of code\n to generate the heterogeneity map and region report. We've left the p-val title formatting code for your convenience so that you can easily replace it with your own title format:\n\n  \n    import math\n    \n    # generate heterogeneity map and legend\n    hm = hta.plot_heterogeneity_map(trait_names, dot_size=8)  \n    hm.legend(loc='upper center', bbox_to_anchor=(0.5, -0.15), ncol=4, fontsize=9)  \n      \n    # set format for p-val and title\n    if hta_pval <= 10**-10000:  \n        title = 'HTA {:.2f} (p-val ~ 0), region size: {}'.format(hta_stat, region_size)  \n    elif hta_pval < 0.00001:  \n        p_power_with_base_10 = math.log10(hta_pval)  \n        hta_pval = p_power_with_base_10  \n        title = 'HTA {:.2f} (p-val: 10^{:.0f}), region size: {}'.format(hta_stat, hta_pval, region_size)  \n    else:  \n        title = 'HTA {:.2f} (p-val: {:.2f}), region size: {}'.format(hta_stat, hta_pval, region_size)  \n    \n    # save heterogeneity map \n    font_dict = {'family': 'normal', 'size': 9}  \n    hm.title(title, fontdict=font_dict)  \n    hm.savefig('{}_hetero_map.jpeg'.format('_'.join(trait_names)), dpi=350)  \n    hm.close()  \n      \n    # save region report  \n    rr = hta.region_report(trait_names)  \n    rr.to_csv('{}_region_report.csv'.format('_'.join(trait_names)))\n\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/alonalj/hta/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example 3 - Visium with cluster id per barcode",
        "type": "Text_excerpt",
        "value": "(*) This is slightly more advanced. We recommend going through the previous Visium example before attempting this one.\n\nYou can also use HTA with cluster IDs generated per barcode. The best example is using the cluster IDs provided in Visium's analysis folder, but you can use your own cluster IDs, provided they have the same format. \n\nAs an example, you can place Visium's 'analysis' folder (see links above) under your 'YOUR_DATA_FOLDER'. The 'analysis' folder contains many k-means clustering results where each barcode has a cluster ID.  \n\nThe main differences in the code below compared to Example 2 above are in the lines of code marked with (***):\n\n\n    from hta.utils import Visium  \n    from hta.stats import HTA  \n      \n    path = \"/PATH_TO/YOUR_DATA_FOLDER\" # TODO: insert path to 'YOUR_DATA_FOLDER' (no '/' on end)\n    k = 10\n    clusters_path = '{}/analysis/clustering/kmeans_{}_clusters/clusters.csv'.format(path, k)\n    trait_names = [str(i+1) for i in range(k)]  \n      \n    visium = Visium(path)  \n    visium.load()  \n    t, t_mask = visium.prep_clusters(clusters_path)  # (***)\n    \n    # copute HTA\n    region_size = 15  \n    hta = HTA(t, region_size=region_size, tissue_mask=t_mask)  \n    hta_stat, hta_pval = hta.calc()  \n      \n\t# plot heretogeneity map\n    hm = hta.plot_heterogeneity_map(trait_names, dot_size=8, is_clusters=True)  # (***)\n    hm.legend(loc='upper center', bbox_to_anchor=(0.5, -0.15), ncol=4, fontsize=9)  \n    \n    # save heterogeneity map \n    title = 'HTA {:.2f} (p-val: {:.2f}), region size: {}'.format(hta_stat, hta_pval, region_size)\n    font_dict = {'family': 'normal', 'size': 9}  \n    hm.title(title, fontdict=font_dict)  \n    hm.savefig('../out/{}_hetero_map.jpeg'.format('_'.join(trait_names)), dpi=350)  \n    hm.close()  \n      \n    # save region report  \n    rr = hta.region_report(trait_names)  \n    rr.to_csv('../out/{}_region_report.csv'.format('_'.join(trait_names)))\n\n"
      },
      "source": "https://raw.githubusercontent.com/alonalj/hta/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example 4 - Analyzing 3D spatial transcriptomics or imaging (e.g., MRI images)",
        "type": "Text_excerpt",
        "value": "    \n    from hta.stats import HTA\n    from hta.utils import Images\n\n    trait_names = ['PD', 'T2']\n    imgs = Images('../mri/mri/normal_ageing', trait_names, ['032', '034', '036'], 'gif')\n    \n    t = imgs.prep()\n    \n    # For 3D region size, note the [x,y,3] specification below:\n    region_size = [130, 130, 3]\n    hta = HTA(t, region_size=region_size, n_repeat=100)\n    \n    hti_stat, _, _ = hta._HTI(t)\n    hta_stat, hta_pval_clt = hta.calc()\n    \n    hm = hta.plot_heterogeneity_map(trait_names, dot_size=0.1)\n    title = '{} HTA_{:.2f} (p-val: {:.2e} (CLT))\\nglobal_hti={:.2f}\\n region_size={}' \\\n        .format('mri', hta_stat, hta_pval_clt, hti_stat, region_size)\n    font_dict = {'family': 'normal', 'size': 10}\n    hm.title(title, fontdict=font_dict)\n    hm.savefig('../out/{}.png'.format(title), dpi=600)\n    hm.close()\n    \n    print(\"{} region_size {} \\nhta = {}, hta_pval = {}\".format('mri', region_size, hta_stat, hta_pval_clt))\n    rr = hta.region_report(trait_names)\n    rr.to_csv('../out/region_report_{}.csv'.format('imgs'))\n    \n[1] Assessing heterogeneity in spatial data using the HTA index with applications to spatial transcriptomics and imaging. *Levy-Jurgenson et al.* "
      },
      "source": "https://raw.githubusercontent.com/alonalj/hta/master/README.md",
      "technique": "header_analysis"
    }
  ]
}