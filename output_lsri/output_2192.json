{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "CITATION",
        "parent_header": [
          "NanoPlot"
        ],
        "type": "Text_excerpt",
        "value": "If you use this tool, please consider citing our [publication](https://academic.oup.com/bioinformatics/article/39/5/btad311/7160911).\n\n\nCopyright: 2016-2020 Wouter De Coster <decosterwouter@gmail.com>\n"
      },
      "source": "https://raw.githubusercontent.com/wdecoster/NanoPlot/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/wdecoster/NanoPlot"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "original_header": "CONTRIBUTING",
        "parent_header": [
          "NanoPlot"
        ],
        "type": "Text_excerpt",
        "value": "I welcome all suggestions, bug reports, feature requests and contributions. Please leave an [issue](https://github.com/wdecoster/NanoPlot/issues) or open a pull request. I will usually respond within a day, or rarely within a few days.\n"
      },
      "source": "https://raw.githubusercontent.com/wdecoster/NanoPlot/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2017-05-02T08:11:23Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-26T13:59:03Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Plotting scripts for long read sequencing data"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9725801056528792,
      "result": {
        "original_header": "NanoPlot",
        "type": "Text_excerpt",
        "value": "Plotting tool for long read sequencing data and alignments.   \n \n"
      },
      "source": "https://raw.githubusercontent.com/wdecoster/NanoPlot/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9393228445792593,
      "result": {
        "original_header": "NanoPlot is also available as a <a href=\"http://nanoplot.bioinf.be\">web service</a>.",
        "type": "Text_excerpt",
        "value": "In addition to various plots also a NanoStats file is created summarizing key features of the dataset. \nThis script performs data extraction from Oxford Nanopore sequencing data in the following formats:  \n- fastq files  \n(can be bgzip, bzip2 or gzip compressed)  \n- fastq files generated by albacore, guppy or MinKNOW containing additional information  \n(can be bgzip, bzip2 or gzip compressed)  \n- sorted bam files  \n- sequencing_summary.txt output table generated by albacore, guppy or MinKnow basecalling\n(can be gzip, bz2, zip and xz compressed)\n- fasta files\n(can be bgzip, bzip2 or gzip compressed)  \n- arrow files (as created by other tools I have developed)\nMultiple files of the same type can be provided simultaneously\n \n"
      },
      "source": "https://raw.githubusercontent.com/wdecoster/NanoPlot/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.999188871460204,
      "result": {
        "original_header": "NOTES",
        "type": "Text_excerpt",
        "value": " - `--downsample` won't save you tons of time, as down sampling is only done after collecting all data and probably would only make a difference for a huge amount of data. If you want to save time you could down sample your data upfront. Note also that extracting information from a summary file is faster than other formats, and that you can extract from multiple files simultaneously (which will happen in parallel then). Some plot types (especially kde) are slower than others and you can take a look at the input for `--plots` to speed things up (default is to make both kde and dot plot). If you are only interested in say the read length histogram it is possible to write a script to just get you that and avoid wasting time on the rest. Let me know if you need any help here.\n - `--plots` uses the plotly package to plot kde and dot plots. Hex option will be ignored.\n - `--legacy` plotting of a hex plot currently is only possible using this option,which uses the seaborn and matplotlib package, since there is no support for it in plotly (yet). Plots like kde and dot are also possible with this option.\n \n"
      },
      "source": "https://raw.githubusercontent.com/wdecoster/NanoPlot/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.992064828527498,
      "result": {
        "original_header": "ACKNOWLEDGMENTS/CONTRIBUTORS",
        "type": "Text_excerpt",
        "value": "- [Ilias Bukraa](https://github.com/iliasbukraa) for tremendous improvements and maintenance of the code\n- Andreas Sj\u00f6din for building and maintaining conda recipes\n- Darrin Schultz [@conchoecia](https://github.com/conchoecia) for Pauvre code\n- [@alexomics](https://github.com/alexomics) for fixing the indentation of the printed stats\n- Botond Sipos [@bsipos](https://github.com/bsipos) for speeding up the calculation of average quality scores \n"
      },
      "source": "https://raw.githubusercontent.com/wdecoster/NanoPlot/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9185264313978888,
      "result": {
        "original_header": "PLOTS GENERATED",
        "type": "Text_excerpt",
        "value": "Plot|Fastq|Fastq_rich|Fastq_minimal|Bam|Summary|Options|Style\n----|----|----|----|----|----|----|----\nHistogram of read length|x|x|x|x|x|N50|\nHistogram of (log transformed) read length|x|x|x|x|x|N50|\nBivariate plot of length against base call quality|x|x||x|x|log transformation|dot, hex, kde\nHeatmap of reads per channel||x|||x||\nCumulative yield plot||x|x||x||\nViolin plot of read length over time||x|x||x||\nViolin plot of base call quality over time||x|||x||\nBivariate plot of aligned read length against sequenced read length||||x|||dot, hex, kde\nBivariate plot of percent reference identity against read length||||x||log transformation|dot, hex, kde\nBivariate plot of percent reference identity against base call quality||||x|||dot, hex, kde\nBivariate plot of mapping quality against read length||||x||log transformation|dot, hex, kde\nBivariate plot of mapping quality against basecall quality||||x|||dot, hex, kde \n"
      },
      "source": "https://raw.githubusercontent.com/wdecoster/NanoPlot/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9721777628681801,
      "result": {
        "original_header": "COMPANION SCRIPTS",
        "type": "Text_excerpt",
        "value": "- [NanoComp](https://github.com/wdecoster/nanocomp): comparing multiple runs  \n- [NanoStat](https://github.com/wdecoster/nanostat): statistic summary report of reads or alignments  \n- [NanoFilt](https://github.com/wdecoster/nanofilt): filtering and trimming of reads  \n- [NanoLyse](https://github.com/wdecoster/nanolyse): removing contaminant reads (e.g. lambda control DNA) from fastq \n"
      },
      "source": "https://raw.githubusercontent.com/wdecoster/NanoPlot/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/wdecoster/NanoPlot/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 47
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/wdecoster/NanoPlot/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "wdecoster/NanoPlot"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "NanoPlot"
      },
      "source": "https://raw.githubusercontent.com/wdecoster/NanoPlot/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/wdecoster/NanoPlot/master/scripts/test.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/wdecoster/NanoPlot/master/examples/scaled_Log_Downsampled_LengthvsQualityScatterPlot_kde.png"
      },
      "source": "https://raw.githubusercontent.com/wdecoster/NanoPlot/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "INSTALLATION",
        "parent_header": [
          "NanoPlot"
        ],
        "type": "Text_excerpt",
        "value": "`pip install NanoPlot`  \n\nUpgrade to a newer version using:  \n`pip install NanoPlot --upgrade`\n\nor\n\n[![conda badge](https://anaconda.org/bioconda/nanoplot/badges/installer/conda.svg)](https://anaconda.org/bioconda/nanoplot)   \n`conda install -c bioconda nanoplot`\n\nThe script is written for python3.\n"
      },
      "source": "https://raw.githubusercontent.com/wdecoster/NanoPlot/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8584379447465327,
      "result": {
        "original_header": "NanoPlot is also available as a <a href=\"http://nanoplot.bioinf.be\">web service</a>.",
        "type": "Text_excerpt",
        "value": "The example plot above shows a bivariate plot comparing log transformed read length with average basecall Phred quality score. More examples can be found in the [gallery on my blog 'Gigabase Or Gigabyte'.](https://gigabaseorgigabyte.wordpress.com/2017/06/01/example-gallery-of-nanoplot/) \n"
      },
      "source": "https://raw.githubusercontent.com/wdecoster/NanoPlot/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/wdecoster/NanoPlot/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2022 Wouter De Coster\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/wdecoster/NanoPlot/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "NanoPlot"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "wdecoster"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 101858,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 1803,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/wdecoster/NanoPlot/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "wdecoster",
          "type": "User"
        },
        "date_created": "2023-10-29T09:41:35Z",
        "date_published": "2023-10-29T09:43:29Z",
        "description": "This release adds the contribution of @juanjo255, with a --only-report option",
        "html_url": "https://github.com/wdecoster/NanoPlot/releases/tag/v1.42.0",
        "name": "with --only-report",
        "release_id": 127078089,
        "tag": "v1.42.0",
        "tarball_url": "https://api.github.com/repos/wdecoster/NanoPlot/tarball/v1.42.0",
        "type": "Release",
        "url": "https://api.github.com/repos/wdecoster/NanoPlot/releases/127078089",
        "value": "https://api.github.com/repos/wdecoster/NanoPlot/releases/127078089",
        "zipball_url": "https://api.github.com/repos/wdecoster/NanoPlot/zipball/v1.42.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "wdecoster",
          "type": "User"
        },
        "date_created": "2023-07-01T10:56:21Z",
        "date_published": "2023-09-01T09:30:38Z",
        "description": "This is a long overdue release. A ton of changes have been made since the last one.\r\nI don't really have the habit of creating releases here, but PyPI and bioconda are always up to date. Let me know if releases are important to you.",
        "html_url": "https://github.com/wdecoster/NanoPlot/releases/tag/v1.41.6",
        "name": "new release",
        "release_id": 119573808,
        "tag": "v1.41.6",
        "tarball_url": "https://api.github.com/repos/wdecoster/NanoPlot/tarball/v1.41.6",
        "type": "Release",
        "url": "https://api.github.com/repos/wdecoster/NanoPlot/releases/119573808",
        "value": "https://api.github.com/repos/wdecoster/NanoPlot/releases/119573808",
        "zipball_url": "https://api.github.com/repos/wdecoster/NanoPlot/zipball/v1.41.6"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "wdecoster",
          "type": "User"
        },
        "date_created": "2020-09-11T19:52:03Z",
        "date_published": "2020-09-11T20:26:05Z",
        "description": "Some smaller changes\r\n\r\n* using kaleido for static image generation\r\n* option to hide supplementary alignments\r\n* feather files as input\r\n* stats as TSV",
        "html_url": "https://github.com/wdecoster/NanoPlot/releases/tag/1.33.0",
        "name": "smaller fixes",
        "release_id": 31150887,
        "tag": "1.33.0",
        "tarball_url": "https://api.github.com/repos/wdecoster/NanoPlot/tarball/1.33.0",
        "type": "Release",
        "url": "https://api.github.com/repos/wdecoster/NanoPlot/releases/31150887",
        "value": "https://api.github.com/repos/wdecoster/NanoPlot/releases/31150887",
        "zipball_url": "https://api.github.com/repos/wdecoster/NanoPlot/zipball/1.33.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "wdecoster",
          "type": "User"
        },
        "date_created": "2020-05-02T12:20:02Z",
        "date_published": "2020-05-04T19:31:41Z",
        "description": "making a release as requested",
        "html_url": "https://github.com/wdecoster/NanoPlot/releases/tag/v1.29.1",
        "name": "current stable state",
        "release_id": 26156989,
        "tag": "v1.29.1",
        "tarball_url": "https://api.github.com/repos/wdecoster/NanoPlot/tarball/v1.29.1",
        "type": "Release",
        "url": "https://api.github.com/repos/wdecoster/NanoPlot/releases/26156989",
        "value": "https://api.github.com/repos/wdecoster/NanoPlot/releases/26156989",
        "zipball_url": "https://api.github.com/repos/wdecoster/NanoPlot/zipball/v1.29.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "wdecoster",
          "type": "User"
        },
        "date_created": "2017-11-04T08:40:08Z",
        "date_published": "2017-11-04T09:01:30Z",
        "description": "NanoPlot 1.0.0 extracts metrics (nanoget), creates plots (nanoplotter) and creates a html report.",
        "html_url": "https://github.com/wdecoster/NanoPlot/releases/tag/v1.0.0",
        "name": "NanoPlot 1.0.0",
        "release_id": 8384465,
        "tag": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/wdecoster/NanoPlot/tarball/v1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/wdecoster/NanoPlot/releases/8384465",
        "value": "https://api.github.com/repos/wdecoster/NanoPlot/releases/8384465",
        "zipball_url": "https://api.github.com/repos/wdecoster/NanoPlot/zipball/v1.0.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 08:07:25",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 419
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "USAGE",
        "parent_header": [
          "NanoPlot"
        ],
        "type": "Text_excerpt",
        "value": "```\nusage: NanoPlot [-h] [-v] [-t THREADS] [--verbose] [--store] [--raw] [--huge] [-o OUTDIR] [--no_static] [-p PREFIX] [--tsv_stats] [--info_in_report] [--maxlength N]\n                [--minlength N] [--drop_outliers] [--downsample N] [--loglength] [--percentqual] [--alength] [--minqual N] [--runtime_until N] [--readtype {1D,2D,1D2}]\n                [--barcoded] [--no_supplementary] [-c COLOR] [-cm COLORMAP] [-f [{png,jpg,jpeg,webp,svg,pdf,eps,json} ...]] [--plots [{kde,hex,dot} ...]]\n                [--legacy [{kde,dot,hex} ...]] [--listcolors] [--listcolormaps] [--no-N50] [--N50] [--title TITLE] [--font_scale FONT_SCALE] [--dpi DPI] [--hide_stats]\n                (--fastq file [file ...] | --fasta file [file ...] | --fastq_rich file [file ...] | --fastq_minimal file [file ...] | --summary file [file ...] | --bam file [file ...] | --ubam file [file ...] | --cram file [file ...] | --pickle pickle | --feather file [file ...])\n\nCREATES VARIOUS PLOTS FOR LONG READ SEQUENCING DATA.\n\nGeneral options:\n  -h, --help            show the help and exit\n  -v, --version         Print version and exit.\n  -t, --threads THREADS\n                        Set the allowed number of threads to be used by the script\n  --verbose             Write log messages also to terminal.\n  --store               Store the extracted data in a pickle file for future plotting.\n  --raw                 Store the extracted data in tab separated file.\n  --huge                Input data is one very large file.\n  -o, --outdir OUTDIR   Specify directory in which output has to be created.\n  --no_static           Do not make static (png) plots.\n  -p, --prefix PREFIX   Specify an optional prefix to be used for the output files.\n  --tsv_stats           Output the stats file as a properly formatted TSV.\n  --info_in_report      Add NanoPlot run info in the report.\n\nOptions for filtering or transforming input prior to plotting:\n  --maxlength N         Hide reads longer than length specified.\n  --minlength N         Hide reads shorter than length specified.\n  --drop_outliers       Drop outlier reads with extreme long length.\n  --downsample N        Reduce dataset to N reads by random sampling.\n  --loglength           Additionally show logarithmic scaling of lengths in plots.\n  --percentqual         Use qualities as theoretical percent identities.\n  --alength             Use aligned read lengths rather than sequenced length (bam mode)\n  --minqual N           Drop reads with an average quality lower than specified.\n  --runtime_until N     Only take the N first hours of a run\n  --readtype {1D,2D,1D2}\n                        Which read type to extract information about from summary. Options are 1D, 2D,\n                        1D2\n  --barcoded            Use if you want to split the summary file by barcode\n  --no_supplementary    Use if you want to remove supplementary alignments\n\nOptions for customizing the plots created:\n  -c, --color COLOR     Specify a valid matplotlib color for the plots\n  -cm, --colormap COLORMAP\n                        Specify a valid matplotlib colormap for the heatmap\n  -f, --format [{png,jpg,jpeg,webp,svg,pdf,eps,json} ...]\n                        Specify the output format of the plots, which are in addition to the html files\n  --plots [{kde,hex,dot} ...]\n                        Specify which bivariate plots have to be made.\n  --legacy [{kde,dot,hex} ...]\n                        Specify which bivariate plots have to be made (legacy mode).\n  --listcolors          List the colors which are available for plotting and exit.\n  --listcolormaps       List the colors which are available for plotting and exit.\n  --no-N50              Hide the N50 mark in the read length histogram\n  --N50                 Show the N50 mark in the read length histogram\n  --title TITLE         Add a title to all plots, requires quoting if using spaces\n  --font_scale FONT_SCALE\n                        Scale the font of the plots by a factor\n  --dpi DPI             Set the dpi for saving images\n  --hide_stats          Not adding Pearson R stats in some bivariate plots\n\nInput data sources, one of these is required.:\n  --fastq file [file ...]\n                        Data is in one or more default fastq file(s).\n  --fasta file [file ...]\n                        Data is in one or more fasta file(s).\n  --fastq_rich file [file ...]\n                        Data is in one or more fastq file(s) generated by albacore, MinKNOW or guppy\n                        with additional information concerning channel and time.\n  --fastq_minimal file [file ...]\n                        Data is in one or more fastq file(s) generated by albacore, MinKNOW or guppy\n                        with additional information concerning channel and time. Is extracted swiftly\n                        without elaborate checks.\n  --summary file [file ...]\n                        Data is in one or more summary file(s) generated by albacore or guppy.\n  --bam file [file ...]\n                        Data is in one or more sorted bam file(s).\n  --ubam file [file ...]\n                        Data is in one or more unmapped bam file(s).\n  --cram file [file ...]\n                        Data is in one or more sorted cram file(s).\n  --pickle pickle       Data is a pickle file stored earlier.\n  --feather/--arrow file [file ...]\n                        Data is in one or more feather/arrow file(s).\n\nEXAMPLES:\n    NanoPlot --summary sequencing_summary.txt --loglength -o summary-plots-log-transformed\n    NanoPlot -t 2 --fastq reads1.fastq.gz reads2.fastq.gz --maxlength 40000 --plots hex dot\n    NanoPlot --color yellow --bam alignment1.bam alignment2.bam alignment3.bam --downsample 10000\n```\n"
      },
      "source": "https://raw.githubusercontent.com/wdecoster/NanoPlot/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "EXAMPLE USAGE",
        "parent_header": [
          "NanoPlot"
        ],
        "type": "Text_excerpt",
        "value": "```bash\nNanoPlot --summary sequencing_summary.txt --loglength -o summary-plots-log-transformed  \nNanoPlot -t 2 --fastq reads1.fastq.gz reads2.fastq.gz --maxlength 40000 --plots dot --legacy hex\nNanoPlot -t 12 --color yellow --bam alignment1.bam alignment2.bam alignment3.bam --downsample 10000 -o bamplots_downsampled\n```\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/wdecoster/NanoPlot/master/README.md",
      "technique": "header_analysis"
    }
  ]
}