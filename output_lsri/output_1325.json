{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/apple35932003/IVS-Caffe"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Contributing\n\n## Issues\n\nSpecific Caffe design and development issues, bugs, and feature requests are maintained by GitHub Issues.\n\n_Please do not post usage, installation, or modeling questions, or other requests for help to Issues._\nUse the [caffe-users list](https://groups.google.com/forum/#!forum/caffe-users) instead. This helps developers maintain a clear, uncluttered, and efficient view of the state of Caffe.\n\nWhen reporting a bug, it's most helpful to provide the following information, where applicable:\n\n* What steps reproduce the bug?\n* Can you reproduce the bug using the latest [master](https://github.com/BVLC/caffe/tree/master), compiled with the `DEBUG` make option?\n* What hardware and operating system/distribution are you running?\n* If the bug is a crash, provide the backtrace (usually printed by Caffe; always obtainable with `gdb`).\n\nTry to give your issue a title that is succinct and specific. The devs will rename issues as needed to keep track of them.\n\n## Pull Requests\n\nCaffe welcomes all contributions.\n\nSee the [contributing guide](http://caffe.berkeleyvision.org/development.html) for details.\n\nBriefly: read commit by commit, a PR should tell a clean, compelling story of _one_ improvement to Caffe. In particular:\n\n* A PR should do one clear thing that obviously improves Caffe, and nothing more. Making many smaller PRs is better than making one large PR; review effort is superlinear in the amount of code involved.\n* Similarly, each commit should be a small, atomic change representing one step in development. PRs should be made of many commits where appropriate.\n* Please do rewrite PR history to be clean rather than chronological. Within-PR bugfixes, style cleanups, reversions, etc. should be squashed and should not appear in merged PR history.\n* Anything nonobvious from the code should be explained in comments, commit messages, or the PR description, as appropriate.\n"
      },
      "source": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/CONTRIBUTING.md",
      "technique": "file_exploration"
    }
  ],
  "contributors": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Contributors\n\nCaffe is developed by a core set of BVLC members and the open-source community.\n\nWe thank all of our [contributors](https://github.com/BVLC/caffe/graphs/contributors)!\n\n**For the detailed history of contributions** of a given file, try\n\n    git blame file\n\nto see line-by-line credits and\n\n    git log --follow file\n\nto see the change log even across renames and rewrites.\n\nPlease refer to the [acknowledgements](http://caffe.berkeleyvision.org/#acknowledgements) on the Caffe site for further details.\n\n**Copyright** is held by the original contributor according to the versioning history; see LICENSE.\n"
      },
      "source": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/CONTRIBUTORS.md",
      "technique": "file_exploration"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-11-22T10:52:10Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-11-24T11:37:30Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9938988387720241,
      "result": {
        "original_header": "IVS Bit-Accurate Hardware Simulation Caffe.",
        "type": "Text_excerpt",
        "value": "IVS Caffe is a deep learning framework made with expression, speed, and modularity in mind. It is developed by IVSLab in National Chiao-Tung University. \n"
      },
      "source": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9629102124365386,
      "result": {
        "original_header": "Supported IVS defined Layers",
        "type": "Text_excerpt",
        "value": "* BinarizeIVS\n  * binarize input to 0 and 1 at custom thresh and condition \n"
      },
      "source": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9865564495323481,
      "result": {
        "original_header": "Bit Accurate Layers Definition in prototxt",
        "type": "Text_excerpt",
        "value": "every IVS layer can define the quantization_param in their corresponding layer, including the following parameters\n1. bw_layer_in - bit-length of input \n    * number from 0 ~ [max of uint32]\n    * default: 32\n2. bw_layer_out - bit-length of output \n    * number from 0 ~ [max of uint32]\n    * default: 32\n3. bw_params - bit-length of weights\n    * number from 0 ~ [max of uint32]\n    * default: 32\n4. bw_add - bit-length of adder\n    * number from 0 ~ [max of uint32]\n    * default: 32\n5. bw_multiply - bit-length of multiplier\n    * number from [min of int32] ~ [max of int32]\n    * default: 16\n6. fl_layer_in - floating length of input\n    * number from [min of int32] ~ [max of int32]\n    * default: 16\n7. fl_layer_out - floating length of output\n    * number from [min of int32] ~ [max of int32]\n    * default: 16\n8. fl_params - floating length of weights\n    * number from [min of int32] ~ [max of int32]\n    * default: 16\n9. fl_add - floating length of adder\n    * number from [min of int32] ~ [max of int32]\n    * default: 16\n10. fl_multiply - floating length of multiplier\n    * number from [min of int32] ~ [max of int32]\n    * default: 16\n11. rounding_time - when to rounding \n    * LAYER_BY_LAYER \n    * EVERY_OPERATION - folding addition (faster)\n    * EVERY_OPERATION_SERIAL - ripple adder\n    * default: EVERY_OPERATION\n12. overflow_behavior - behavior when overflow in adder and multiplier\n    * OVERFLOW_SIM - overflow behavior\n    * TRIM_AT_THRESH - trim overflowed nubmer at thresh (thresh defined in adder or multiplier bw and fl)\n    * default: TRIM_AT_THRESH\n13. analyze_mode - using to analyze bit-length of adder and multipler \n    * NO_ANALYZE - fastest\n    * ANALYZE_ADD - record and print max and min value in adder \n    * ANALYZE_MULTIPLY - record and print max and min value in multiplier \n    * ANALYZE_BOTH - record and print max and min value in both adder and multiplier\n    * default: NO_ANALYZE \n"
      },
      "source": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.968209395195142,
      "result": {
        "original_header": "BinarizeIVS Layer definition in prototxt",
        "type": "Text_excerpt",
        "value": "every IVS layer can define the quantization_param in their corresponding layer, including the following parameters\n1. thresh - threshold for binarization\n    * number from [min of float] ~ [max of float]\n    * default: 0\n2. thresh_condition - threshold include in uppder bound or lower bound \n    * INCLUDE_IN_UPPER - y = x >= thresh ? 1 : 0\n    * INCLUDE_IN_LOWER - y = x > thresh ? 1 : 0\n    * default - INCLUDE_IN_UPPER\n3. inverse_binarize - inverse binarize output 0 and 1\n    * FALSE\n    * TRUE\n    * default - FALSE\n \n"
      },
      "source": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9911288705750846,
      "result": {
        "original_header": "Note",
        "type": "Text_excerpt",
        "value": "* Please use make to compile cafe-fast-rcnn module, cmake is currently unsupported\n* GPU version is currently unsupported in this version, will be release in the future\n \n"
      },
      "source": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/apple35932003/IVS-Caffe/tree/master/caffe-fast-rcnn/docs"
      },
      "technique": "file_exploration"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/apple35932003/IVS-Caffe/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/examples/02-fine-tuning.ipynb"
      },
      "source": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/examples/02-fine-tuning.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/examples/00-classification.ipynb"
      },
      "source": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/examples/00-classification.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/examples/net_surgery.ipynb"
      },
      "source": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/examples/net_surgery.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/examples/01-learning-lenet.ipynb"
      },
      "source": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/examples/01-learning-lenet.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/examples/brewing-logreg.ipynb"
      },
      "source": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/examples/brewing-logreg.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/examples/pascal-multilabel-with-datalayer.ipynb"
      },
      "source": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/examples/pascal-multilabel-with-datalayer.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/examples/detection.ipynb"
      },
      "source": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/examples/detection.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/examples/siamese/mnist_siamese.ipynb"
      },
      "source": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/examples/siamese/mnist_siamese.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/apple35932003/IVS-Caffe/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "apple35932003/IVS-Caffe"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "IVS Bit-Accurate Hardware Simulation Caffe."
      },
      "source": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/docker/standalone/gpu/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/docker/standalone/gpu/Dockerfile",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/docker/standalone/cpu/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/docker/standalone/cpu/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/experiments/scripts/faster_rcnn_alt_opt.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/experiments/scripts/faster_rcnn_end2end.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/experiments/scripts/fast_rcnn.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/jobs/VGGNet/VOC0712/SSD_300x300/VGG_VOC0712_SSD_300x300.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/jobs/VGGNet/VOC0712/SSD_300x300_score/VGG_VOC0712_SSD_300x300.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/scripts/gather_examples.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/scripts/demo_yolov2_tiny.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/scripts/build_docs.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/scripts/quantize_BA_yolov2_tiny.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/scripts/download_model_from_gist.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/scripts/deploy_docs.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/scripts/upload_model_to_gist.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/scripts/train_yolov2_tiny_q8.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/scripts/travis/install-deps.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/scripts/travis/configure.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/scripts/travis/setup-venv.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/scripts/travis/build.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/scripts/travis/configure-cmake.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/scripts/travis/test.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/scripts/travis/install-python-deps.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/scripts/travis/configure-make.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/scripts/travis/defaults.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/examples/ristretto/00_quantize_squeezenet.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/examples/ristretto/02_benchmark_fixedpoint_squeezenet.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/examples/ristretto/01_finetune_squeezenet.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/examples/ristretto/benchmark_floatingpoint_squeezenet.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/examples/imagenet/resume_training.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/examples/imagenet/create_imagenet.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/examples/imagenet/train_caffenet.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/examples/imagenet/make_imagenet_mean.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/examples/siamese/train_mnist_siamese.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/examples/siamese/create_mnist_siamese.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/examples/mnist/train_lenet_LL_IVS_BAC.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/examples/mnist/train_lenet_IVS.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/examples/mnist/train_lenet_lb_BAC.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/examples/mnist/train_mnist_autoencoder_adagrad.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/examples/mnist/train_lenet_LL.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/examples/mnist/train_lenet.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/examples/mnist/train_mnist_autoencoder_nesterov.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/examples/mnist/train_lenet_docker.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/examples/mnist/train_lenet_elb_BAC.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/examples/mnist/train_lenet_IVS_BAC.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/examples/mnist/train_lenet_adam.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/examples/mnist/train_mnist_autoencoder.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/examples/mnist/train_mnist_autoencoder_adadelta.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/examples/mnist/train_lenet_rmsprop.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/examples/mnist/train_lenet_LL_IVS.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/examples/mnist/train_lenet_consolidated.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/examples/mnist/create_mnist.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/examples/cifar10/train_full_sigmoid.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/examples/cifar10/train_full.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/examples/cifar10/train_quick.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/examples/cifar10/create_cifar10.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/examples/cifar10/train_full_sigmoid_bn.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/tools/extra/parse_log.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/tools/extra/launch_resize_and_crop_images.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/data/scripts/fetch_imagenet_models.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/data/scripts/fetch_faster_rcnn_models.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/data/scripts/fetch_selective_search_data.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Installation\n\nSee http://caffe.berkeleyvision.org/installation.html for the latest\ninstallation instructions.\n\nCheck the users group in case you need help:\nhttps://groups.google.com/forum/#!forum/caffe-users\n"
      },
      "source": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/INSTALL.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "---\ntitle: Installation: Ubuntu\n---\n\n# Ubuntu Installation\n\n**General dependencies**\n\n    sudo apt-get install libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libhdf5-serial-dev protobuf-compiler\n    sudo apt-get install --no-install-recommends libboost-all-dev\n\n**CUDA**: Install via the NVIDIA package instead of `apt-get` to be certain of the library and driver versions.\nInstall the library and latest driver separately; the driver bundled with the library is usually out-of-date.\nThis can be skipped for CPU-only installation.\n\n**BLAS**: install ATLAS by `sudo apt-get install libatlas-base-dev` or install OpenBLAS or MKL for better CPU performance.\n\n**Python** (optional): if you use the default Python you will need to `sudo apt-get install` the `python-dev` package to have the Python headers for building the pycaffe interface.\n\n**Remaining dependencies, 14.04**\n\nEverything is packaged in 14.04.\n\n    sudo apt-get install libgflags-dev libgoogle-glog-dev liblmdb-dev\n\n**Remaining dependencies, 12.04**\n\nThese dependencies need manual installation in 12.04.\n\n    # glog\n    wget https://google-glog.googlecode.com/files/glog-0.3.3.tar.gz\n    tar zxvf glog-0.3.3.tar.gz\n    cd glog-0.3.3\n    ./configure\n    make && make install\n    # gflags\n    wget https://github.com/schuhschuh/gflags/archive/master.zip\n    unzip master.zip\n    cd gflags-master\n    mkdir build && cd build\n    export CXXFLAGS=\"-fPIC\" && cmake .. && make VERBOSE=1\n    make && make install\n    # lmdb\n    git clone https://github.com/LMDB/lmdb\n    cd lmdb/libraries/liblmdb\n    make && make install\n\nNote that glog does not compile with the most recent gflags version (2.1), so before that is resolved you will need to build with glog first.\n\nContinue with [compilation](installation.html#compilation).\n"
      },
      "source": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/docs/install_apt.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "---\ntitle: Installation\n---\n\n# Installation\n\nPrior to installing, have a glance through this guide and take note of the details for your platform.\nWe install and run Caffe on Ubuntu 16.04\u201312.04, OS X 10.11\u201310.8, and through Docker and AWS.\nThe official Makefile and `Makefile.config` build are complemented by a [community CMake build](#cmake-build).\n\n**Step-by-step Instructions**:\n\n- [Docker setup](https://github.com/BVLC/caffe/tree/master/docker) *out-of-the-box brewing*\n- [Ubuntu installation](install_apt.html) *the standard platform*\n- [OS X installation](install_osx.html)\n- [RHEL / CentOS / Fedora installation](install_yum.html)\n- [Windows](https://github.com/BVLC/caffe/tree/windows) *see the Windows branch led by Microsoft*\n- [OpenCL](https://github.com/BVLC/caffe/tree/opencl) *see the OpenCL branch led by Fabian Tschopp*\n\n**Overview**:\n\n- [Prerequisites](#prerequisites)\n- [Compilation](#compilation)\n- [Hardware](#hardware)\n\nWhen updating Caffe, it's best to `make clean` before re-compiling.\n\n## Prerequisites\n\nCaffe has several dependencies:\n\n* [CUDA](https://developer.nvidia.com/cuda-zone) is required for GPU mode.\n    * library version 7+ and the latest driver version are recommended, but 6.* is fine too\n    * 5.5, and 5.0 are compatible but considered legacy\n* [BLAS](http://en.wikipedia.org/wiki/Basic_Linear_Algebra_Subprograms) via ATLAS, MKL, or OpenBLAS.\n* [Boost](http://www.boost.org/) >= 1.55\n* `protobuf`, `glog`, `gflags`, `hdf5`\n\nOptional dependencies:\n\n* [OpenCV](http://opencv.org/) >= 2.4 including 3.0\n* IO libraries: `lmdb`, `leveldb` (note: leveldb requires `snappy`)\n* cuDNN for GPU acceleration (v5)\n\nPycaffe and Matcaffe interfaces have their own natural needs.\n\n* For Python Caffe:  `Python 2.7` or `Python 3.3+`, `numpy (>= 1.7)`, boost-provided `boost.python`\n* For MATLAB Caffe: MATLAB with the `mex` compiler.\n\n**cuDNN Caffe**: for fastest operation Caffe is accelerated by drop-in integration of [NVIDIA cuDNN](https://developer.nvidia.com/cudnn). To speed up your Caffe models, install cuDNN then uncomment the `USE_CUDNN := 1` flag in `Makefile.config` when installing Caffe. Acceleration is automatic. The current version is cuDNN v5; older versions are supported in older Caffe.\n\n**CPU-only Caffe**: for cold-brewed CPU-only Caffe uncomment the `CPU_ONLY := 1` flag in `Makefile.config` to configure and build Caffe without CUDA. This is helpful for cloud or cluster deployment.\n\n### CUDA and BLAS\n\nCaffe requires the CUDA `nvcc` compiler to compile its GPU code and CUDA driver for GPU operation.\nTo install CUDA, go to the [NVIDIA CUDA website](https://developer.nvidia.com/cuda-downloads) and follow installation instructions there. Install the library and the latest standalone driver separately; the driver bundled with the library is usually out-of-date. **Warning!** The 331.* CUDA driver series has a critical performance issue: do not use it.\n\nFor best performance, Caffe can be accelerated by [NVIDIA cuDNN](https://developer.nvidia.com/cudnn). Register for free at the cuDNN site, install it, then continue with these installation instructions. To compile with cuDNN set the `USE_CUDNN := 1` flag set in your `Makefile.config`.\n\nCaffe requires BLAS as the backend of its matrix and vector computations.\nThere are several implementations of this library. The choice is yours:\n\n* [ATLAS](http://math-atlas.sourceforge.net/): free, open source, and so the default for Caffe.\n* [Intel MKL](http://software.intel.com/en-us/intel-mkl): commercial and optimized for Intel CPUs, with a free trial and [student](http://software.intel.com/en-us/intel-education-offerings) licenses.\n    1. Install MKL.\n    2. Set up MKL environment (Details: [Linux](https://software.intel.com/en-us/node/528499), [OS X](https://software.intel.com/en-us/node/528659)). Example: *source /opt/intel/mkl/bin/mklvars.sh intel64*\n    3. Set `BLAS := mkl` in `Makefile.config`\n* [OpenBLAS](http://www.openblas.net/): free and open source; this optimized and parallel BLAS could require more effort to install, although it might offer a speedup.\n    1. Install OpenBLAS\n    2. Set `BLAS := open` in `Makefile.config`\n\n### Python and/or MATLAB Caffe (optional)\n\n#### Python\n\nThe main requirements are `numpy` and `boost.python` (provided by boost). `pandas` is useful too and needed for some examples.\n\nYou can install the dependencies with\n\n    for req in $(cat requirements.txt); do pip install $req; done\n\nbut we suggest first installing the [Anaconda](https://store.continuum.io/cshop/anaconda/) Python distribution, which provides most of the necessary packages, as well as the `hdf5` library dependency.\n\nTo import the `caffe` Python module after completing the installation, add the module directory to your `$PYTHONPATH` by `export PYTHONPATH=/path/to/caffe/python:$PYTHONPATH` or the like. You should not import the module in the `caffe/python/caffe` directory!\n\n*Caffe's Python interface works with Python 2.7. Python 3.3+ should work out of the box without protobuf support. For protobuf support please install protobuf 3.0 alpha (https://developers.google.com/protocol-buffers/). Earlier Pythons are your own adventure.*\n\n#### MATLAB\n\nInstall MATLAB, and make sure that its `mex` is in your `$PATH`.\n\n*Caffe's MATLAB interface works with versions 2015a, 2014a/b, 2013a/b, and 2012b.*\n\n## Compilation\n\nCaffe can be compiled with either Make or CMake. Make is officially supported while CMake is supported by the community.\n\n### Compilation with Make\n\nConfigure the build by copying and modifying the example `Makefile.config` for your setup. The defaults should work, but uncomment the relevant lines if using Anaconda Python.\n\n    cp Makefile.config.example Makefile.config\n    # Adjust Makefile.config (for example, if using Anaconda Python, or if cuDNN is desired)\n    make all\n    make test\n    make runtest\n\n- For CPU & GPU accelerated Caffe, no changes are needed.\n- For cuDNN acceleration using NVIDIA's proprietary cuDNN software, uncomment the `USE_CUDNN := 1` switch in `Makefile.config`. cuDNN is sometimes but not always faster than Caffe's GPU acceleration.\n- For CPU-only Caffe, uncomment `CPU_ONLY := 1` in `Makefile.config`.\n\nTo compile the Python and MATLAB wrappers do `make pycaffe` and `make matcaffe` respectively.\nBe sure to set your MATLAB and Python paths in `Makefile.config` first!\n\n**Distribution**: run `make distribute` to create a `distribute` directory with all the Caffe headers, compiled libraries, binaries, etc. needed for distribution to other machines.\n\n**Speed**: for a faster build, compile in parallel by doing `make all -j8` where 8 is the number of parallel threads for compilation (a good choice for the number of threads is the number of cores in your machine).\n\nNow that you have installed Caffe, check out the [MNIST tutorial](gathered/examples/mnist.html) and the [reference ImageNet model tutorial](gathered/examples/imagenet.html).\n\n### CMake Build\n\nIn lieu of manually editing `Makefile.config` to configure the build, Caffe offers an unofficial CMake build thanks to @Nerei, @akosiorek, and other members of the community. It requires CMake version >= 2.8.7.\nThe basic steps are as follows:\n\n    mkdir build\n    cd build\n    cmake ..\n    make all\n    make install\n    make runtest\n\nSee [PR #1667](https://github.com/BVLC/caffe/pull/1667) for options and details.\n\n## Hardware\n\n**Laboratory Tested Hardware**: Berkeley Vision runs Caffe with Titan Xs, K80s, GTX 980s, K40s, K20s, Titans, and GTX 770s including models at ImageNet/ILSVRC scale. We have not encountered any trouble in-house with devices with CUDA capability >= 3.0. All reported hardware issues thus-far have been due to GPU configuration, overheating, and the like.\n\n**CUDA compute capability**: devices with compute capability <= 2.0 may have to reduce CUDA thread numbers and batch sizes due to hardware constraints. Brew with caution; we recommend compute capability >= 3.0.\n\nOnce installed, check your times against our [reference performance numbers](performance_hardware.html) to make sure everything is configured properly.\n\nAsk hardware questions on the [caffe-users group](https://groups.google.com/forum/#!forum/caffe-users).\n"
      },
      "source": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/docs/installation.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "---\ntitle: Installation: OS X\n---\n\n# OS X Installation\n\nWe highly recommend using the [Homebrew](http://brew.sh/) package manager.\nIdeally you could start from a clean `/usr/local` to avoid conflicts.\nIn the following, we assume that you're using Anaconda Python and Homebrew.\n\n**CUDA**: Install via the NVIDIA package that includes both CUDA and the bundled driver. **CUDA 7 is strongly suggested.** Older CUDA require `libstdc++` while clang++ is the default compiler and `libc++` the default standard library on OS X 10.9+. This disagreement makes it necessary to change the compilation settings for each of the dependencies. This is prone to error.\n\n**Library Path**: We find that everything compiles successfully if `$LD_LIBRARY_PATH` is not set at all, and `$DYLD_FALLBACK_LIBRARY_PATH` is set to provide CUDA, Python, and other relevant libraries (e.g. `/usr/local/cuda/lib:$HOME/anaconda/lib:/usr/local/lib:/usr/lib`).\nIn other `ENV` settings, things may not work as expected.\n\n**General dependencies**\n\n    brew install -vd snappy leveldb gflags glog szip lmdb\n    # need the homebrew science source for OpenCV and hdf5\n    brew tap homebrew/science\n    brew install hdf5 opencv\n\nIf using Anaconda Python, a modification to the OpenCV formula might be needed\nDo `brew edit opencv` and change the lines that look like the two lines below to exactly the two lines below.\n\n      -DPYTHON_LIBRARY=#{py_prefix}/lib/libpython2.7.dylib\n      -DPYTHON_INCLUDE_DIR=#{py_prefix}/include/python2.7\n\nIf using Anaconda Python, HDF5 is bundled and the `hdf5` formula can be skipped.\n\n**Remaining dependencies, with / without Python**\n\n    # with Python pycaffe needs dependencies built from source\n    brew install --build-from-source --with-python -vd protobuf\n    brew install --build-from-source -vd boost boost-python\n    # without Python the usual installation suffices\n    brew install protobuf boost\n\n**BLAS**: already installed as the [Accelerate / vecLib Framework](https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man7/Accelerate.7.html). OpenBLAS and MKL are alternatives for faster CPU computation.\n\n**Python** (optional): Anaconda is the preferred Python.\nIf you decide against it, please use Homebrew.\nCheck that Caffe and dependencies are linking against the same, desired Python.\n\nContinue with [compilation](installation.html#compilation).\n\n## libstdc++ installation\n\nThis route is not for the faint of heart.\nFor OS X 10.10 and 10.9 you should install CUDA 7 and follow the instructions above.\nIf that is not an option, take a deep breath and carry on.\n\nIn OS X 10.9+, clang++ is the default C++ compiler and uses `libc++` as the standard library.\nHowever, NVIDIA CUDA (even version 6.0) currently links only with `libstdc++`.\nThis makes it necessary to change the compilation settings for each of the dependencies.\n\nWe do this by modifying the Homebrew formulae before installing any packages.\nMake sure that Homebrew doesn't install any software dependencies in the background; all packages must be linked to `libstdc++`.\n\nThe prerequisite Homebrew formulae are\n\n    boost snappy leveldb protobuf gflags glog szip lmdb homebrew/science/opencv\n\nFor each of these formulas, `brew edit FORMULA`, and add the ENV definitions as shown:\n\n      def install\n          # ADD THE FOLLOWING:\n          ENV.append \"CXXFLAGS\", \"-stdlib=libstdc++\"\n          ENV.append \"CFLAGS\", \"-stdlib=libstdc++\"\n          ENV.append \"LDFLAGS\", \"-stdlib=libstdc++ -lstdc++\"\n          # The following is necessary because libtool likes to strip LDFLAGS:\n          ENV[\"CXX\"] = \"/usr/bin/clang++ -stdlib=libstdc++\"\n          ...\n\nTo edit the formulae in turn, run\n\n    for x in snappy leveldb protobuf gflags glog szip boost boost-python lmdb homebrew/science/opencv; do brew edit $x; done\n\nAfter this, run\n\n    for x in snappy leveldb gflags glog szip lmdb homebrew/science/opencv; do brew uninstall $x; brew install --build-from-source -vd $x; done\n    brew uninstall protobuf; brew install --build-from-source --with-python -vd protobuf\n    brew install --build-from-source -vd boost boost-python\n\nIf this is not done exactly right then linking errors will trouble you.\n\n**Homebrew versioning** that Homebrew maintains itself as a separate git repository and making the above `brew edit FORMULA` changes will change files in your local copy of homebrew's master branch. By default, this will prevent you from updating Homebrew using `brew update`, as you will get an error message like the following:\n\n    $ brew update\n    error: Your local changes to the following files would be overwritten by merge:\n      Library/Formula/lmdb.rb\n    Please, commit your changes or stash them before you can merge.\n    Aborting\n    Error: Failure while executing: git pull -q origin refs/heads/master:refs/remotes/origin/master\n\nOne solution is to commit your changes to a separate Homebrew branch, run `brew update`, and rebase your changes onto the updated master. You'll have to do this both for the main Homebrew repository in `/usr/local/` and the Homebrew science repository that contains OpenCV in  `/usr/local/Library/Taps/homebrew/homebrew-science`, as follows:\n\n    cd /usr/local\n    git checkout -b caffe\n    git add .\n    git commit -m \"Update Caffe dependencies to use libstdc++\"\n    cd /usr/local/Library/Taps/homebrew/homebrew-science\n    git checkout -b caffe\n    git add .\n    git commit -m \"Update Caffe dependencies\"\n\nThen, whenever you want to update homebrew, switch back to the master branches, do the update, rebase the caffe branches onto master and fix any conflicts:\n\n    # Switch batch to homebrew master branches\n    cd /usr/local\n    git checkout master\n    cd /usr/local/Library/Taps/homebrew/homebrew-science\n    git checkout master\n\n    # Update homebrew; hopefully this works without errors!\n    brew update\n\n    # Switch back to the caffe branches with the formulae that you modified earlier\n    cd /usr/local\n    git rebase master caffe\n    # Fix any merge conflicts and commit to caffe branch\n    cd /usr/local/Library/Taps/homebrew/homebrew-science\n    git rebase master caffe\n    # Fix any merge conflicts and commit to caffe branch\n\n    # Done!\n\nAt this point, you should be running the latest Homebrew packages and your Caffe-related modifications will remain in place.\n"
      },
      "source": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/docs/install_osx.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "---\ntitle: Installation: RHEL / Fedora / CentOS\n---\n\n# RHEL / Fedora / CentOS Installation\n\n**General dependencies**\n\n    sudo yum install protobuf-devel leveldb-devel snappy-devel opencv-devel boost-devel hdf5-devel\n\n**Remaining dependencies, recent OS**\n\n    sudo yum install gflags-devel glog-devel lmdb-devel\n\n**Remaining dependencies, if not found**\n\n    # glog\n    wget https://google-glog.googlecode.com/files/glog-0.3.3.tar.gz\n    tar zxvf glog-0.3.3.tar.gz\n    cd glog-0.3.3\n    ./configure\n    make && make install\n    # gflags\n    wget https://github.com/schuhschuh/gflags/archive/master.zip\n    unzip master.zip\n    cd gflags-master\n    mkdir build && cd build\n    export CXXFLAGS=\"-fPIC\" && cmake .. && make VERBOSE=1\n    make && make install\n    # lmdb\n    git clone https://github.com/LMDB/lmdb\n    cd lmdb/libraries/liblmdb\n    make && make install\n\nNote that glog does not compile with the most recent gflags version (2.1), so before that is resolved you will need to build with glog first.\n\n**CUDA**: Install via the NVIDIA package instead of `yum` to be certain of the library and driver versions.\nInstall the library and latest driver separately; the driver bundled with the library is usually out-of-date.\n    + CentOS/RHEL/Fedora:\n\n**BLAS**: install ATLAS by `sudo yum install atlas-devel` or install OpenBLAS or MKL for better CPU performance. For the Makefile build, uncomment and set `BLAS_LIB` accordingly as ATLAS is usually installed under `/usr/lib[64]/atlas`).\n\n**Python** (optional): if you use the default Python you will need to `sudo yum install` the `python-devel` package to have the Python headers for building the pycaffe wrapper.\n\nContinue with [compilation](installation.html#compilation).\n"
      },
      "source": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/caffe-fast-rcnn/docs/install_yum.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 0.9998855560671053,
      "result": {
        "original_header": "Note",
        "type": "Text_excerpt",
        "value": "* Please use make to compile cafe-fast-rcnn module, cmake is currently unsupported\n* GPU version is currently unsupported in this version, will be release in the future\n \n"
      },
      "source": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/apple35932003/IVS-Caffe/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Faster R-CNN\n\nThe MIT License (MIT)\n\nCopyright (c) 2015 Microsoft Corporation\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n************************************************************************\n\nTHIRD-PARTY SOFTWARE NOTICES AND INFORMATION\n\nThis project, Faster R-CNN, incorporates material from the project(s)\nlisted below (collectively, \"Third Party Code\").  Microsoft is not the\noriginal author of the Third Party Code.  The original copyright notice\nand license under which Microsoft received such Third Party Code are set\nout below. This Third Party Code is licensed to you under their original\nlicense terms set forth below.  Microsoft reserves all other rights not\nexpressly granted, whether by implication, estoppel or otherwise.\n\n1.\tCaffe, (https://github.com/BVLC/caffe/)\n\nCOPYRIGHT\n\nAll contributions by the University of California:\nCopyright (c) 2014, 2015, The Regents of the University of California (Regents)\nAll rights reserved.\n\nAll other contributions:\nCopyright (c) 2014, 2015, the respective contributors\nAll rights reserved.\n\nCaffe uses a shared copyright model: each contributor holds copyright\nover their contributions to Caffe. The project versioning records all\nsuch contribution and copyright details. If a contributor wants to\nfurther mark their specific copyright on a particular contribution,\nthey should indicate their copyright solely in the commit message of\nthe change when it is committed.\n\nThe BSD 2-Clause License\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n\n1. Redistributions of source code must retain the above copyright notice,\nthis list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nHOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\nTO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n************END OF THIRD-PARTY SOFTWARE NOTICES AND INFORMATION**********\n"
      },
      "source": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "IVS-Caffe"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "apple35932003"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 5107216,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 3872342,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 3213101,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Cuda",
        "size": 358037,
        "type": "Programming_language",
        "value": "Cuda"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 324181,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 107797,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "MATLAB",
        "size": 33910,
        "type": "Programming_language",
        "value": "MATLAB"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 32519,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 9632,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CSS",
        "size": 9155,
        "type": "Programming_language",
        "value": "CSS"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 7048,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 2521,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "faq",
    "support",
    "identifier"
  ],
  "somef_provenance": {
    "date": "2024-10-06 04:37:19",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Example of ConvolutionIVS Layer",
        "parent_header": [
          "IVS Bit-Accurate Hardware Simulation Caffe.",
          "Bit Accurate Layers Definition in prototxt"
        ],
        "type": "Text_excerpt",
        "value": "```\nlayer {\n  name: \"conv1\"\n  type: \"ConvolutionIVS\"\n  bottom: \"data\"\n  top: \"conv1\"\n  param {\n    lr_mult: 1\n  }\n  param {\n    lr_mult: 2\n  }\n  convolution_param {\n    num_output: 20\n    kernel_size: 5\n    stride: 1\n    weight_filler {\n      type: \"xavier\"\n    }\n    bias_filler {\n      type: \"constant\"\n    }\n  }\n  quantization_param {\n    bw_layer_in: 32\n    bw_layer_out: 32\n    bw_params: 32\n    bw_add: 32\n    bw_multiply: 32\n    fl_layer_in: 16\n    fl_layer_out: 16\n    fl_params: 16\n    fl_add: 16\n    fl_multiply: 16\n    rounding_time: LAYER_BY_LAYER\n    overflow_behavior: TRIM_AT_THRESH\n    analyze_mode: ANALYZE_BOTH\n  }\n}\n```"
      },
      "source": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example of FcIVS Layer",
        "parent_header": [
          "IVS Bit-Accurate Hardware Simulation Caffe.",
          "Bit Accurate Layers Definition in prototxt"
        ],
        "type": "Text_excerpt",
        "value": "```\nlayer {\n  name: \"ip2\"\n  type: \"FcIVS\"\n  bottom: \"ip1\"\n  top: \"ip2\"\n  param {\n    lr_mult: 1\n  }\n  param {\n    lr_mult: 2\n  }\n  inner_product_param {\n    num_output: 10\n    weight_filler {\n      type: \"xavier\"\n    }\n    bias_filler {\n      type: \"constant\"\n    }\n  }\n  quantization_param {\n    bw_layer_in: 32\n    bw_layer_out: 32\n    bw_params: 32\n    bw_add: 32\n    bw_multiply: 32\n    fl_layer_in: 16\n    fl_layer_out: 16\n    fl_params: 16\n    fl_add: 16\n    fl_multiply: 16\n    rounding_time: LAYER_BY_LAYER\n    overflow_behavior: TRIM_AT_THRESH\n    analyze_mode: NO_ANALYZE\n  }\n}\n```"
      },
      "source": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example of ConvolutionXNORIVS Layer",
        "parent_header": [
          "IVS Bit-Accurate Hardware Simulation Caffe.",
          "Bit Accurate Layers Definition in prototxt"
        ],
        "type": "Text_excerpt",
        "value": "```\nlayer {\n  name: \"ip2\"\n  type: \"ConvolutionXNORIVS\"\n  bottom: \"ip1\"\n  top: \"ip2\"\n  param {\n    lr_mult: 1\n  }\n  param {\n    lr_mult: 2\n  }\n  inner_product_param {\n    num_output: 10\n    weight_filler {\n      type: \"xavier\"\n    }\n    bias_filler {\n      type: \"constant\"\n    }\n  }\n  quantization_param {\n    bw_layer_in: 32\n    bw_layer_out: 32\n    bw_params: 32\n    bw_add: 32\n    bw_multiply: 32\n    fl_layer_in: 16\n    fl_layer_out: 16\n    fl_params: 16\n    fl_add: 16\n    fl_multiply: 16\n    rounding_time: LAYER_BY_LAYER\n    overflow_behavior: TRIM_AT_THRESH\n    analyze_mode: NO_ANALYZE\n  }\n}\n```"
      },
      "source": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example of training a Bit-accurate Quantized network",
        "parent_header": [
          "IVS Bit-Accurate Hardware Simulation Caffe."
        ],
        "type": "Text_excerpt",
        "value": "* lenet_IVS\n```Shell\ncd IVS-Caffe/caffe-fast-rcnn\n./examples/mnist/train_lenet_IVS.sh\n```\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example of BinarizeIVS Layer",
        "parent_header": [
          "IVS Bit-Accurate Hardware Simulation Caffe.",
          "BinarizeIVS Layer definition in prototxt"
        ],
        "type": "Text_excerpt",
        "value": "```\nlayer {\n  name: \"binarize1\"\n  type: \"BinarizeIVS\"\n  bottom: \"conv1\"\n  top: \"conv1\"\n  binarize_param {\n    thresh: 0\n    thresh_condition: INCLUDE_IN_UPPER\n    inverse_binarize: FALSE\n  }\n}\n```\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/apple35932003/IVS-Caffe/master/README.md",
      "technique": "header_analysis"
    }
  ]
}