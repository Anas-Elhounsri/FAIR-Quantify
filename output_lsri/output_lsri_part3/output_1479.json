{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ProwlerForNanopore/ProwlerTrimmer"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-10-25T03:18:43Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-06T02:13:14Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Trimming tool for Oxford Nanopore sequence data"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.984371526971102,
      "result": {
        "original_header": "ProwlerTrimmer",
        "type": "Text_excerpt",
        "value": "Trimming tool for Oxford Nanopore sequence data\n```\n-f, \t--file,\t\tfilename:\tThe name of the file you want to trim, wihtout the folderpath\"\n-i, \t--infolder, \tinFolder:\tThe folderpath where your file to be trimmed is located (default = cwd)\n-o, \t--outfolder,\toutFolder:\tThe folderpath where your want to save the trimmed file (default = cwd)\n-w, \t--windowsize,\twindowSize:\tChange the size of the trimming window (default= 100bp)\n-l, \t--minlen,\tminLen:\t\tChange the minimum acceptable numer of bases in a read (default=100)\n-m, \t--trimmode,\tmode:\t\tSelect trimming algorithm: S for static  or D for dynamic (default=S)\n-q, \t--qscore,\tQcutoff:\tSelect the phred quality score trimming threshold (default=7)\n-d, \t--datamax,\tmaxDataMB:\tSelect a maximum data subsample in MB (default=0, entire file)\n-r, \t--outformat,\toutMode:\tSelect output format of trimmed file (fastq or fasta) (default=.fastq)\n-c, \t--clip,\t\tclipping:\tSelect L to clip leading Ns, T to trim trialing Ns and LT to trim both (default=LT)\n-g, \t--fragments,\tfragments:\tSelect fragmentation mode (default=U0)\n\n\n[filename] = filename, including file extention (string)\n[inFolder] = source folder (string)\n[outFolder] = output folder (string)\n[windowSize] = number of bases in trimmer window (integer)\n[minLen] = minimum number of bases in read. reads with fewer bases will be rejected\n[trimSpecs] = trim specs: [X1]-[X2]-[X3] (string)\t\n   X1: \"L\", \"T\", \"LT\", or \"\". L clips leading Ns, T clips trailing Ns, LT clips both, \"\" clips neither. recommended mode is LT\t\n   X2: U0, F0, F1, F2... U0=unfragmented output, F0=fragmented output with all fragments, F[n]= fragmented output with n largest fragments\t\n   X3: S, D. S=static mode. D=dynamic mode\n\t\n   example: \"X1-X2-X3\" -> \"LT-U0-S\"\n\n[Qcutoff] = phred quality score threshold. (integer)\n[seqsToAnalyze] = megabytes of data to trim. trimmer will read files in 1 MB chunks and stop when number of MB exceeds this number.\n[outMode]: output file extension. saves trimmed data as either \".fasta\" or \".fastq\"\n```\nExample execution:\n \n"
      },
      "source": "https://raw.githubusercontent.com/ProwlerForNanopore/ProwlerTrimmer/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ProwlerForNanopore/ProwlerTrimmer/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ProwlerForNanopore/ProwlerTrimmer/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ProwlerForNanopore/ProwlerTrimmer"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ProwlerTrimmer"
      },
      "source": "https://raw.githubusercontent.com/ProwlerForNanopore/ProwlerTrimmer/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8358569412929836,
      "result": {
        "original_header": "ProwlerTrimmer",
        "type": "Text_excerpt",
        "value": "Trimming tool for Oxford Nanopore sequence data\n```\n-f, \t--file,\t\tfilename:\tThe name of the file you want to trim, wihtout the folderpath\"\n-i, \t--infolder, \tinFolder:\tThe folderpath where your file to be trimmed is located (default = cwd)\n-o, \t--outfolder,\toutFolder:\tThe folderpath where your want to save the trimmed file (default = cwd)\n-w, \t--windowsize,\twindowSize:\tChange the size of the trimming window (default= 100bp)\n-l, \t--minlen,\tminLen:\t\tChange the minimum acceptable numer of bases in a read (default=100)\n-m, \t--trimmode,\tmode:\t\tSelect trimming algorithm: S for static  or D for dynamic (default=S)\n-q, \t--qscore,\tQcutoff:\tSelect the phred quality score trimming threshold (default=7)\n-d, \t--datamax,\tmaxDataMB:\tSelect a maximum data subsample in MB (default=0, entire file)\n-r, \t--outformat,\toutMode:\tSelect output format of trimmed file (fastq or fasta) (default=.fastq)\n-c, \t--clip,\t\tclipping:\tSelect L to clip leading Ns, T to trim trialing Ns and LT to trim both (default=LT)\n-g, \t--fragments,\tfragments:\tSelect fragmentation mode (default=U0)\n\n\n[filename] = filename, including file extention (string)\n[inFolder] = source folder (string)\n[outFolder] = output folder (string)\n[windowSize] = number of bases in trimmer window (integer)\n[minLen] = minimum number of bases in read. reads with fewer bases will be rejected\n[trimSpecs] = trim specs: [X1]-[X2]-[X3] (string)\t\n   X1: \"L\", \"T\", \"LT\", or \"\". L clips leading Ns, T clips trailing Ns, LT clips both, \"\" clips neither. recommended mode is LT\t\n   X2: U0, F0, F1, F2... U0=unfragmented output, F0=fragmented output with all fragments, F[n]= fragmented output with n largest fragments\t\n   X3: S, D. S=static mode. D=dynamic mode\n\t\n   example: \"X1-X2-X3\" -> \"LT-U0-S\"\n\n[Qcutoff] = phred quality score threshold. (integer)\n[seqsToAnalyze] = megabytes of data to trim. trimmer will read files in 1 MB chunks and stop when number of MB exceeds this number.\n[outMode]: output file extension. saves trimmed data as either \".fasta\" or \".fastq\"\n```\nExample execution:\n \n"
      },
      "source": "https://raw.githubusercontent.com/ProwlerForNanopore/ProwlerTrimmer/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ProwlerForNanopore/ProwlerTrimmer/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2020 ProwlerForNanopore\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/ProwlerForNanopore/ProwlerTrimmer/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ProwlerTrimmer"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "ProwlerForNanopore"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 40281,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ProwlerForNanopore/ProwlerTrimmer/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "installation",
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 05:09:21",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 22
      },
      "technique": "GitHub_API"
    }
  ]
}