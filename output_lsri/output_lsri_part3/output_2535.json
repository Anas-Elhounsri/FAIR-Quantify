{
  "application_domain": [
    {
      "confidence": 22.0,
      "result": {
        "type": "String",
        "value": "Natural Language Processing"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "CREDITS",
        "parent_header": [
          "StrobeMap (Python)"
        ],
        "type": "Text_excerpt",
        "value": "Kristoffer Sahlin, Effective sequence similarity detection with strobemers, Genome Res. November 2021 31: 2080-2094; doi: https://doi.org/10.1101/gr.275648.121\n"
      },
      "source": "https://raw.githubusercontent.com/ksahlin/strobemers/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ksahlin/strobemers"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-01-22T16:47:14Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-11T04:57:27Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A repository for generating strobemers and evalaution"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9902458236535583,
      "result": {
        "original_header": "What is a strobemer?",
        "type": "Text_excerpt",
        "value": "A strobemer is a seed extracted from text and used for text similarity searches described [here](https://genome.cshlp.org/content/31/11/2080). Strobemers are _fuzzy_ seeds and can match over mutations in text. They were initially designed for biological sequence analysis where point mutations and small shifts (insertions/deletions) are common, but they are agnostic to the alphabet of text.  \nA small illustration below of two biological sequences `T` and `T'` with substitutions and insertions/deletions between them, and four strobemer seeds (`s_1`-`s_4` and `s'_1`-`s'_4`) extracted from each sequence. Mutations destroy some seeds (`s_1`/`s'_1`), but some remain intact, allowing retrieval of similar regions. The seeds have total length of 24 letters (two 12-letter strings separated by a pseudorandom spacing), but no consecutive 24 letter string (k-mer) is found between `T` and `T'`. \n"
      },
      "source": "https://raw.githubusercontent.com/ksahlin/strobemers/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9287330108719765,
      "result": {
        "original_header": "This repository",
        "type": "Text_excerpt",
        "value": "The repository consists of  \n- functions to generate strobemers in C++\n- functions to generate strobemers in Python\n- a tool `StrobeMap` implemented in both C++ and Python\n- scripts used for the evaluations in the [paper](https://genome.cshlp.org/content/31/11/2080) \n"
      },
      "source": "https://raw.githubusercontent.com/ksahlin/strobemers/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.94554520197217,
      "result": {
        "original_header": "Other implementations of strobemers",
        "type": "Text_excerpt",
        "value": "The construction time is dependent on the implementation. The times reported in the preprint are for the C++/Python implementations in this repository.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ksahlin/strobemers/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9832477206318027,
      "result": {
        "original_header": "C++ functions",
        "type": "Text_excerpt",
        "value": "The C++ library `strobemers_cpp/index.[cpp/hpp]` contains functions for creating randstobes (order 2 and 3), hybridstrobes (order 2 and 3) and minstrobes (order 2).  \nYou can copy the `index.cpp` and `index.hpp` files in the `strobemers_cpp` folder in this repository if you want to use either randstrobes (order 2 and 3), hybridstrobes (order 2), or minstrobes (order 2) in your project. The implementation of these functions uses bitpacking and some other clever tricks (inspired by [this repo](https://github.com/lh3/kmer-cnt)) to be fast. Because of bitpacking, the limitation is that any single strobe cannot be lager than 32, which means that the **maximum strobemer length allowed in this implementation** is `3*32 = 96` for strobemers of order 3, and `2*32 = 64` for order 2. This should be large enough for most applications.  \nIf you are using some of `seq_to_randstrobes2`, `seq_to_hybridstrobes2`, or `seq_to_minstrobes3` they return the same vector tuples but position of strobe 2 copied twice, i.e., `(kmer hash value, seq_id, strobe1_pos, strobe2_pos, strobe2_pos)`. There is no reason for this and for any high performance application the function could be modified to return the minimal needed information. \nMy benchmarking in Table S3 in the [supplemental methods](https://genome.cshlp.org/content/suppl/2021/10/19/gr.275648.121.DC1/Supplemental_Methods.pdf) found that randstrobes is roughly as fast as hybridstrobes and minstrobes. Furthermore, randstrobes is unexpectedly fast in this implementation in general, about 1.5-3 times slower than generating k-mers for randstrobes of (n=2, s=15, w_min=16,w_max=70). What takes time is pushing the tuples to a vector, not computing the strobemers. Bare construction time could be further compared if preallocating an array of fixed size to remove the resizing when pushing to vectors. Nevertheless, the takehome message is that the generation of strobemers could be implemented so that it is fast, and will likely not be a bottleneck in most algorithms using them.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ksahlin/strobemers/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9911981770810556,
      "result": {
        "original_header": "Notes for sequence mapping",
        "type": "Text_excerpt",
        "value": "The preprint describes shrinking the sampling windows `[w_min, w_max]` at ends of sequences to assure that a similar number of strobemers and k-mers created. However, in, e.g., read mapping, there is little to no gain in shrinking windows. This is because if we shrink windows at the ends of reads, the strobemer extracted from the read in those windows cannot be guaranteed to (but may) be the same as in the reference, as first described in [this issue](https://github.com/ksahlin/strobemers/issues/2). The more the window(s) are shrunk, the less likely the strobers are to match between the sequences, and the probability of matching a strobemer after the last window (original size) is completely outside the read is 0 (if disregarding false matches). After noting this, my implementation only shrink the last strobemer window regardless of the number of strobes (i.e., there is a positive probablility of a match even if window is shrunk). This means that there will be `n - (k + w_min) +1` strobemers of order 2 generated form a sequence of length `n`, and `n - (k + w_max + w_min) +1` strobemers of order 3. In other words, we will only slide last strobe's window outside the sequence. Once it is fully outside the sequence we stop (illustrated in approach B for order 2 in [here](https://github.com/ksahlin/strobemers/issues/2). \n"
      },
      "source": "https://raw.githubusercontent.com/ksahlin/strobemers/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9920179906552036,
      "result": {
        "original_header": "Python functions",
        "type": "Text_excerpt",
        "value": "The python library `indexing.py` contains functions and generators for creating all strobemers of order 2 and 3. \n\nThe `indexing.py` module located in the `modules` folder contains functions for generating k-mers, spaced k-mers, minimizers, and strobemers (minstrobes, hybridstrobes, and randstrobes) of order 2 and 3. For randstrobes, there are two ways to create them. The first way is with the function `randstrobes`, which takes a string, k-mer size, and upper and lower window limits and returns a dictionary with positions of the strobes as keys and the hash value of the randstrobe sequence (strings) as values. For example\n```\nfrom modules import indexing\nall_mers = defaultdict(list)\nfor (p1,p2,p3), h in indexing.randstrobes(seq, k_size, w_min, w_max, order = 3).items():\n    # all_mers is a dictionary with hash values as keys and \n    # a list with position-tuples of where the strobemer is sampled from\n    all_mers[h].append( (p1,p2,p3) )  \n```\nFunctions `minstrobes` and `hybridstrobes` have the same interface.\nThe second way is to call `randstrobes_iter` which is a generator. Similarly to `randstrobes`, `randstrobes_iter` takes a string, k-mer size, and upper and lower window size, but instead yields randstrobes from the sequence and is not as memmory requiring as the `randstrobes` function which store and returns all the strobes in a dictionary. `randstrobes_iter` generating randpers of order 2 can be used as follows\n```\nfrom modules import indexing\nall_mers = defaultdict(list)\nfor (p1,p2), s in indexing.randstrobes_iter(seq, k_size, w_min, w_max, order = 2, buffer_size = 1000000):\n    all_mers[s].append( (p1,p2) )  \n```\nFunctions `minstrobes_iter` and `hybridstrobes_iter` have the same interface.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ksahlin/strobemers/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9772805053720739,
      "result": {
        "original_header": "StrobeMap (C++)",
        "type": "Text_excerpt",
        "value": "The tool `StrobeMap` is a program which roughly has the same interface as `MUMmer`. `StrobeMap` takes a reference and query file in multi-fasta or fastq format. It produces NAMs (Non-overlapping Approximate Matches) between the queries and references and outputs them in a format simular to nucmer/MUMmer. See [supplementary material](https://genome.cshlp.org/content/suppl/2021/10/19/gr.275648.121.DC1/Supplemental_Methods.pdf) Section A in the paper for definition of NAMs.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ksahlin/strobemers/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9326868132105226,
      "result": {
        "original_header": "StrobeMap (Python)",
        "type": "Text_excerpt",
        "value": "`StrobeMap` implements order 2 and 3 hybridstrobes (default), randstrobes, minstrobes, as well as kmers. The tool produces NAMs (Non-overlapping Approximate Matches; see explanation in preprint) for both strobemers and kmers. Test data is found in the folder `data` in this repository.\nHere are some example uses:\n```\n# Generate hybridstrobe matches (hybridstrobe parametrization (2,15,20,70)) \n# between ONT SIRV reads and the true reference sequences\n\n./StrobeMap --queries data/sirv_transcripts.fasta \\\n           --references data/ONT_sirv_cDNA_seqs.fasta \\\n           --outfolder strobemer_output/  --k 15 \n           --strobe_w_min_offset 20 --strobe_w_max_offset 70\n\n\n# Generate kmer matches (k=30) \n# between ONT SIRV reads and the true reference sequences\n\n./StrobeMap --queries data/sirv_transcripts.fasta \\\n           --references data/ONT_sirv_cDNA_seqs.fasta \\\n           --outfolder kmer_output/  --k 30 --kmer_index\n\n# Reads vs reads matching using randstrobes\n\n./StrobeMap --queries data/ONT_sirv_cDNA_seqs.fasta \\\n           --references data/ONT_sirv_cDNA_seqs.fasta \\\n           --outfolder strobemer_output/ --k 15 \\\n           --strobe_w_min_offset 20 --strobe_w_max_offset 70 \\\n           --randstrobe_index\n```\n \nMinstrobes has the same parameters as hybridstrobes and randstrobes but are invoked with parameter `--minstrobe_index` \n"
      },
      "source": "https://raw.githubusercontent.com/ksahlin/strobemers/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9587877500334807,
      "result": {
        "original_header": "Output",
        "type": "Text_excerpt",
        "value": "The output is a file `matches.tsv` in the output folder. You can se a custom outfile name with the parameter `--prefix`.\nOutput format is a tab separated file on the same format as MUMmer, with identical fields except the last one which is approximate reference sequence match length instead of what MUMmer produce:\n```\n>query_accession\nref_id  ref_pos query_pos   match_length_on_reference\n```\n \nSmall example output from aligning sirv reads to transcripts (from the commands above) which also highlights the stobemers strength compared to kmers. While kmers can give a more nuanced differentiation (compare read hits to `SIRV606` and `SIRV616`) both the sequences are good candidates for downstream processing. In this small example, the strobemers produce fewer hits/less output needed for post clustering of matches, e.g., for downstream clustering/alignment/mapping. Notice that randstobe hit positions are currently not deterministic due to hash seed is set at each new pyhon instantiation. I will fix the hash seed in future implementations. \n"
      },
      "source": "https://raw.githubusercontent.com/ksahlin/strobemers/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ksahlin/strobemers/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "faq": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Common installation from source errors",
        "parent_header": [
          "StrobeMap (C++)",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "If you have `zlib` installed, and the `zlib.h` file is in folder `/path/to/zlib/include` and the `libz.so` file in `/path/to/zlib/lib` but you get \n\n```\nmain.cpp:12:10: fatal error: zlib.h: No such file or directory\n #include <zlib.h>\n          ^~~~~~~~\ncompilation terminated.\n```\n\nadd `-I/path/to/zlib/include -L/path/to/zlib/lib` to the compilation, that is\n\n```\ng++ -std=c++14 -I/path/to/zlib/include -L/path/to/zlib/lib main.cpp index.cpp -lz -fopenmp -o StrobeMap -O3 -mavx2\n``` \n\n"
      },
      "source": "https://raw.githubusercontent.com/ksahlin/strobemers/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 12
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ksahlin/strobemers/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ksahlin/strobemers"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Strobemers"
      },
      "source": "https://raw.githubusercontent.com/ksahlin/strobemers/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ksahlin/strobemers/main/randstrobe_implementations/evaluation/run_analysis.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ksahlin/strobemers/main/evaluation/genome_mappings_eval.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ksahlin/strobemers/main/evaluation/sirv_read_analysis.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ksahlin/strobemers/main/evaluation/runtime_cpp.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://user-images.githubusercontent.com/1714667/149466166-1f558539-730a-4b1b-9876-a28f24bb01a2.png"
      },
      "source": "https://raw.githubusercontent.com/ksahlin/strobemers/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "StrobeMap (C++)"
        ],
        "type": "Text_excerpt",
        "value": "`StrobeMap` is available through [bioconda](https://bioconda.github.io/recipes/strobemap/README.html#package-strobemap). You can also acquire precompiled binaries for Linux and Mac OSx from [here](https://github.com/ksahlin/strobemers/tree/main/strobemers_cpp/binaries). For example, for linux, simply do\n\n```\nwget https://github.com/ksahlin/strobemers/raw/main/strobemers_cpp/binaries/Linux/StrobeMap-0.0.2\nchmod +x StrobeMap-0.0.2\n./StrobeMap-0.0.2  # test program\n```\n\nIf you want to compile from source, you need to have a newer `g++` and `zlib` installed. Then do the following:\n\n```\ngit clone https://github.com/ksahlin/strobemers\ncd strobemers/strobemers_cpp/\n\n# Needs a newer g++ version. Tested with version 8 and upwards.\n\ng++ -std=c++14 main.cpp index.cpp -lz -fopenmp -o StrobeMap -O3 -mavx2\n```  \n\nIf zlib is not already installed on your system, it can be installed through, e.g., conda by\n\n```\nconda install -c anaconda zlib\n```\n\nIf you dont have conda, download and install [here](https://zlib.net/). \n\n"
      },
      "source": "https://raw.githubusercontent.com/ksahlin/strobemers/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Common installation from source errors",
        "parent_header": [
          "StrobeMap (C++)",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "If you have `zlib` installed, and the `zlib.h` file is in folder `/path/to/zlib/include` and the `libz.so` file in `/path/to/zlib/lib` but you get \n\n```\nmain.cpp:12:10: fatal error: zlib.h: No such file or directory\n #include <zlib.h>\n          ^~~~~~~~\ncompilation terminated.\n```\n\nadd `-I/path/to/zlib/include -L/path/to/zlib/lib` to the compilation, that is\n\n```\ng++ -std=c++14 -I/path/to/zlib/include -L/path/to/zlib/lib main.cpp index.cpp -lz -fopenmp -o StrobeMap -O3 -mavx2\n``` \n\n"
      },
      "source": "https://raw.githubusercontent.com/ksahlin/strobemers/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ksahlin/strobemers/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "strobemers"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "ksahlin"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 618508,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 341475,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 24451,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 13698,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 5708,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ksahlin/strobemers/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "ksahlin",
          "type": "User"
        },
        "date_created": "2021-09-16T01:42:44Z",
        "date_published": "2021-09-18T11:44:34Z",
        "description": "Many updates to the C++ implementation of StrobeMap\r\n\r\n1.  NAM finding is now parallelized (OpenMP).\r\n2. StrobeMap can take read query sequences both as fasta and fastq.\r\n3. Faster indexing of references (through preallocation of hash table).\r\n4. Fixed minor bugs such as seg fault for references where no strobemer could be generated (e.g., reference containing only N's)\r\n5. Precompiled binaries added for Linux and Mac OSx.\r\n6. Several parameters added, described below.\r\n\r\n\r\n* Parameter -s to split the output into one file per thread and fw/rc NAMs (to be compatible as seed finder for uLTRA RNA long-read aligner) \r\n* Parameter -L to print at most L NAMs per query [1000]. Will print the NAMs with highest score S = n_strobemer_hits * query_span.\r\n* Parameter -S to sort output NAMs for each query based on score. Default is to sort first by ref ID, then by query coordinate, then by reference coordinate.",
        "html_url": "https://github.com/ksahlin/strobemers/releases/tag/v0.0.2",
        "name": "StrobeMap (C++) v0.0.2 ",
        "release_id": 49793328,
        "tag": "v0.0.2",
        "tarball_url": "https://api.github.com/repos/ksahlin/strobemers/tarball/v0.0.2",
        "type": "Release",
        "url": "https://api.github.com/repos/ksahlin/strobemers/releases/49793328",
        "value": "https://api.github.com/repos/ksahlin/strobemers/releases/49793328",
        "zipball_url": "https://api.github.com/repos/ksahlin/strobemers/zipball/v0.0.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "ksahlin",
          "type": "User"
        },
        "date_created": "2021-07-27T05:39:13Z",
        "date_published": "2021-07-27T05:49:58Z",
        "description": "The first stable working version of StrobeMap (C++ implementation). Implements randstrobes and hybridstrobes of orders 2 and 3, and minstrobes of order 2. Uses bitpacking for fast construction time. Computes NAMs between a set of queries mapped to a set of references. \r\n\r\nTODO:\r\n- Read fastq\r\n- Parallelize mapping\r\n- Separate creation and storage of reference index\r\n- Option to output the NAM-length on both the query and the reference (5 column format)\r\n- [Implement thinning?]\r\n",
        "html_url": "https://github.com/ksahlin/strobemers/releases/tag/0.0.1",
        "name": "StrobeMap v0.0.1 ",
        "release_id": 46810732,
        "tag": "0.0.1",
        "tarball_url": "https://api.github.com/repos/ksahlin/strobemers/tarball/0.0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/ksahlin/strobemers/releases/46810732",
        "value": "https://api.github.com/repos/ksahlin/strobemers/releases/46810732",
        "zipball_url": "https://api.github.com/repos/ksahlin/strobemers/zipball/0.0.1"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 09:16:28",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 75
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "StrobeMap (C++)"
        ],
        "type": "Text_excerpt",
        "value": "```\n$ ./StrobeMap \n\nStrobeMap VERSION 0.0.2\n\nStrobeMap [options] <references.fasta> <queries.fast[a/q]>\noptions:\n  -n INT number of strobes [2]\n  -k INT strobe length, limited to 32 [20]\n  -v INT strobe w_min offset [k+1]\n  -w INT strobe w_max offset [70]\n  -t INT number of threads [3]\n  -o name of output tsv-file [output.tsv]\n  -c Choice of protocol to use; kmers, minstrobes, hybridstrobes, randstrobes [randstrobes]. \n  -s Split output into one file per thread and forward/reverse complement mappings. \n     This option is used to generate format compatible with uLTRA long-read RNA aligner and requires \n     option -o to be specified as a folder path to uLTRA output directory, e.g., -o /my/path/to/uLTRA_output/  \n```\n\n```\n# randstrobes (3,30,31,60)\nStrobeMap -k 30 -n 3 -v 31 -w 60 -c randstrobes -o mapped.tsv  ref.fa query.fa\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ksahlin/strobemers/main/README.md",
      "technique": "header_analysis"
    }
  ]
}