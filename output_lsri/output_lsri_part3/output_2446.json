{
  "application_domain": [
    {
      "confidence": 0.8445922341246984,
      "result": {
        "type": "String",
        "value": "Semantic web"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Find our software useful? Please cite!",
        "type": "Text_excerpt",
        "value": "Satria A Kautsar, Justin J J van der Hooft, Dick de Ridder, Marnix H Medema, BiG-SLiCE: A highly scalable tool maps the diversity of 1.2 million biosynthetic gene clusters, GigaScience, Volume 10, Issue 1, January 2021, giaa154.\n[https://doi.org/10.1093/gigascience/giaa154](https://doi.org/10.1093/gigascience/giaa154)\n"
      },
      "source": "https://raw.githubusercontent.com/medema-group/bigslice/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/medema-group/bigslice"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-10-14T09:31:13Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-26T18:54:44Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A highly scalable, user-interactive tool for the large scale analysis of Biosynthetic Gene Clusters data"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9327569552710124,
      "result": {
        "original_header": "Querying <a href=\"https://antismash.secondarymetabolites.org/\">antiSMASH</a> BGCs",
        "type": "Text_excerpt",
        "value": "Using the `--query` mode, you can perform a blazing-fast query of a putative BGC against the pre-processed set of Gene Cluster Family (GCF) models that **BiG-SLiCE** outputs (~for example, you can use our [pre-processed result on ~1.2M microbial BGCs from the NCBI database](http://bioinformatics.nl/~kauts001/ltr/bigslice/paper_data/data/full_run_result.zip) -- a 17GB zipped file download~ _there is currently no pre-processed result for BiG-SLiCE v2, we will work to make it available soon._). You will get a ranked list of GCFs and BGCs similar to the BGC in question, which will help in determining the function and/or novelty of said BGC. To perform a GCF query, simply use:\n~~~console\nuser@local:~$ bigslice --query <antismash_output_folder> --n_ranks <int> <output_folder>\n~~~\nWhich will perform a query analysis on the latest clustering result contained inside the output folder (see [wiki: Program parameters](https://github.com/medema-group/bigslice/wiki/Program-parameters) for more advanced options). Top-(n_ranks) matching GCFs will be returned along with their similarity measurements. You can then view the query results using the user interactive output (see below).\n \n"
      },
      "source": "https://raw.githubusercontent.com/medema-group/bigslice/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9257626184988346,
      "result": {
        "original_header": "Custom GenBank input",
        "type": "Text_excerpt",
        "value": "To perform GCF analyses on BGCs not covered by antiSMASH/MIBiG (i.e., from tools like [ClusterFinder](https://github.com/petercim/ClusterFinder) and [DeepBGC](https://github.com/Merck/deepbgc), or BGCs with manually-refined cluster borders), you can use the [converter script](https://github.com/medema-group/bigslice/blob/master/misc/generate_antismash_gbk/generate_antismash_gbk.py) that we provided, which will take a (genome) GenBank file along with a comma-separated descriptor file for every BGCs to be generated (please see the example input files provided in the [script's folder](https://github.com/medema-group/bigslice/blob/master/misc/generate_antismash_gbk/generate_antismash_gbk.py)).\n \n"
      },
      "source": "https://raw.githubusercontent.com/medema-group/bigslice/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8339025683756164,
      "result": {
        "original_header": "User Interactive output",
        "type": "Text_excerpt",
        "value": "**BiG-SLiCE**'s output folder contains both the processed input data (in the form of an [SQLite3](https://www.sqlite.org/index.html) database file) and some scripts that power a mini web-app to visualize that data. To run this visualization engine, follow these steps:\n1. Fulfill the web-app's package requirements:\n~~~console\nuser@local:~$ pip install -r <output_folder>/requirements.txt\n~~~\n2. Run the [flask](https://flask.palletsprojects.com/en/1.1.x/) server:\n~~~console\nuser@local:~$ bash <output_folder>/start_server.sh <port(optional)>\n~~~\n3. Open an internet browser, then go to the URL described by the previous step:\n- e.g. `* Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)`\n- then go to `http://0.0.0.0:5000` in your browser\n \n"
      },
      "source": "https://raw.githubusercontent.com/medema-group/bigslice/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9857421477164268,
      "result": {
        "original_header": "Programmatic Access and Postprocessing",
        "type": "Text_excerpt",
        "value": "To access **BiG-SLiCE**'s preprocessed data, (advanced) users need to be able to [run SQL(ite) queries](https://www.sqlitetutorial.net/sqlite-select/). Although the learning curve might be steeper compared to the conventional tabular-formatted output files, once familiarized, the SQL database can provide an easy-to-use yet very powerful data wrangling experience. Please refer to [our publication manuscript](https://doi.org/10.1101/2020.08.17.240838) to get an idea of what kind of things are able to be done with the output data. Additionally, you can also [download and reuse some jupyter notebook scripts](https://bioinformatics.nl/~kauts001/ltr/bigslice/paper_data/scripts/) that we wrote to perform all analyses and generate figures for the manuscript.\n \n"
      },
      "source": "https://raw.githubusercontent.com/medema-group/bigslice/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9922603478067827,
      "result": {
        "original_header": "What kind of software is this, anyway?",
        "type": "Text_excerpt",
        "value": "Bacteria and fungi produce a vast array of bioactive compounds in nature, which can be useful for us as antibiotics (see [this list](https://dx.doi.org/10.1016%2Fj.mib.2009.07.002)), antivirals (see [this list](https://doi.org/10.1038/ja.2017.115)) and anticancer drugs (see [Salinisporamide](https://doi.org/10.1016/j.bmc.2008.10.075)). To optimize and retain the production of those complex chemical agents, microbes organize the responsible genes into genomic 'clumps' colloquially termed as **\"Biosynthetic Gene Clusters (BGCs)\"** (above picture, left panel). Using bioinformatics tools such as [antiSMASH](https://antismash.secondarymetabolites.org/), we can now take a genome sequence to identify BGCs and predict the secondary metabolites that the organism may produce (see [this example analysis for the _S. coelicolor_ genome](https://antismash.secondarymetabolites.org/upload/example/index.html)). Furthermore, by doing a large scale comparative analysis of homologous BGCs sharing similar domain architectures (we call them **\"Gene Cluster Families (GCFs)\"**), we can practically chart an atlas of biosynthetic diversity among all sequenced microbes (above picture, right panel). \nTo enable such a large scale analysis, **BiG-SLiCE** was specifically designed with **scalability** and **speed** as the #1 priority (Figure 1A), as opposed to our previous tool, [BiG-SCAPE](https://git.wageningenur.nl/medema-group/BiG-SCAPE), which was able to sensitively capture the slightest difference of both domain architecture and sequence similarity between pairs of BGCs (see [our paper](https://www.nature.com/articles/s41589-019-0400-9) for the details). As a result, **BiG-SLiCE** can reliably take an **input data of more than 1.2 million BGCs and process it in less than a week runtime using 36-cores machine with 128GB RAM** (Figure 1B) while keeping enough sensitivity to delineate the essential biosynthetic 'signals' among the input BGCs (Figure 1C). Moreover, to facilitate exploration and investigation of the analysis results, **BiG-SLiCE** also produce an **interactive, easy-to-use output visualization** that can be run with minimal software / hardware requirements. \nThis software was initially developed and is currently maintained by **Satria Kautsar** (twitter: [@satriaphd](https://twitter.com/satriaphd)) as part of a fully funded PhD project granted to **Dr. Marnix Medema** (website: [marnixmedema.nl](http://marnixmedema.nl), twitter: [@marnixmedema](https://twitter.com/marnixmedema)) by the [Graduate School of Experimental Plant Sciences, NL](https://www.graduateschool-eps.info/). Contributions and feedbacks are very welcomed. Feel free to drop us an e-mail if you have any question regarding or related to **BiG-SLiCE**. In the future, we aim to make **BiG-SLiCE** a comprehensive platform to do all sorts of downstream large scale BGC analysis, taking advantage of its portable and powerful [SQLite3](https://www.sqlite.org/index.html)-based data storage combined with the flexible [flask](https://flask.palletsprojects.com/en/1.1.x/)-based web app architecture as the foundation.\n \n"
      },
      "source": "https://raw.githubusercontent.com/medema-group/bigslice/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/medema-group/bigslice/wiki/Input-folder"
      },
      "source": "https://raw.githubusercontent.com/medema-group/bigslice/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/medema-group/bigslice/wiki/Program-parameters"
      },
      "source": "https://raw.githubusercontent.com/medema-group/bigslice/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/medema-group/bigslice/wiki"
      },
      "source": "https://raw.githubusercontent.com/medema-group/bigslice/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/medema-group/bigslice/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/medema-group/bigslice/master/bigslice/db/advanced/Untitled.ipynb"
      },
      "source": "https://raw.githubusercontent.com/medema-group/bigslice/master/bigslice/db/advanced/Untitled.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/medema-group/bigslice/master/bigslice/db/advanced/.ipynb_checkpoints/Untitled-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/medema-group/bigslice/master/bigslice/db/advanced/.ipynb_checkpoints/Untitled-checkpoint.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 38
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/medema-group/bigslice/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "medema-group/bigslice"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/medema-group/bigslice/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/medema-group/bigslice/master/docker/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/medema-group/bigslice/master/docker/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/medema-group/bigslice/master/bigslice/modules/output/flask_app/start_server.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://i.ibb.co/FmBfmHW/bgc-gcf-illustration.png"
      },
      "source": "https://raw.githubusercontent.com/medema-group/bigslice/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://i.ibb.co/0twfQ81/figure-1.png"
      },
      "source": "https://raw.githubusercontent.com/medema-group/bigslice/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9991449691389133,
      "result": {
        "original_header": "Version 2.0 is here!",
        "type": "Text_excerpt",
        "value": "- Clustering now uses __cosine-like__ (via l2-normalization) distances (as in https://www.nature.com/articles/s41564-022-01110-2)\n- pHMM databases have been updated to __PFAM 35.0__\n- BGC class definition has been updated to __antiSMASH v7.0.0__\n- Switching from HMMER to [pyHMMER](https://github.com/althonos/pyhmmer) (__speed-ups__, can now be fully installed via __pip__)\n- General __speed__ improvement\n- Ability to __export pre-calculated BGCs and GCFs table into TSVs__ (use __--export-csv__ parameter)\n \n"
      },
      "source": "https://raw.githubusercontent.com/medema-group/bigslice/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999999999998863,
      "result": {
        "original_header": "User Interactive output",
        "type": "Text_excerpt",
        "value": "**BiG-SLiCE**'s output folder contains both the processed input data (in the form of an [SQLite3](https://www.sqlite.org/index.html) database file) and some scripts that power a mini web-app to visualize that data. To run this visualization engine, follow these steps:\n1. Fulfill the web-app's package requirements:\n~~~console\nuser@local:~$ pip install -r <output_folder>/requirements.txt\n~~~\n2. Run the [flask](https://flask.palletsprojects.com/en/1.1.x/) server:\n~~~console\nuser@local:~$ bash <output_folder>/start_server.sh <port(optional)>\n~~~\n3. Open an internet browser, then go to the URL described by the previous step:\n- e.g. `* Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)`\n- then go to `http://0.0.0.0:5000` in your browser\n \n"
      },
      "source": "https://raw.githubusercontent.com/medema-group/bigslice/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/medema-group/bigslice/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "GNU Affero General Public License v3.0",
        "spdx_id": "AGPL-3.0",
        "type": "License",
        "url": "https://api.github.com/licenses/agpl-3.0",
        "value": "https://api.github.com/licenses/agpl-3.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/medema-group/bigslice/master/misc/github_images/bigslice_logo.png"
      },
      "source": "https://raw.githubusercontent.com/medema-group/bigslice/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bigslice"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "medema-group"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 361104,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Jinja",
        "size": 107316,
        "type": "Programming_language",
        "value": "Jinja"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 29038,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "JavaScript",
        "size": 10210,
        "type": "Programming_language",
        "value": "JavaScript"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 461,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CSS",
        "size": 268,
        "type": "Programming_language",
        "value": "CSS"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 200,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/medema-group/bigslice/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "satriaphd",
          "type": "User"
        },
        "date_created": "2024-03-05T20:11:08Z",
        "date_published": "2024-03-05T20:12:41Z",
        "description": "- Clustering now uses __cosine-like__ (via l2-normalization) distances (as in https://www.nature.com/articles/s41564-022-01110-2)\r\n- pHMM databases have been updated to __PFAM 35.0__\r\n- BGC class definition has been updated to __antiSMASH v7.0.0__\r\n- Switching from HMMER to [pyHMMER](https://github.com/althonos/pyhmmer) (__speed-ups__, can now be fully installed via __pip__)\r\n- General __speed__ improvement\r\n- Ability to __export pre-calculated BGCs and GCFs table into TSVs__ (use __--export-csv__ parameter)",
        "html_url": "https://github.com/medema-group/bigslice/releases/tag/v2.0.0",
        "name": "Version 2.0.0",
        "release_id": 144940936,
        "tag": "v2.0.0",
        "tarball_url": "https://api.github.com/repos/medema-group/bigslice/tarball/v2.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/medema-group/bigslice/releases/144940936",
        "value": "https://api.github.com/repos/medema-group/bigslice/releases/144940936",
        "zipball_url": "https://api.github.com/repos/medema-group/bigslice/zipball/v2.0.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "satriaphd",
          "type": "User"
        },
        "date_created": "2024-03-02T19:57:05Z",
        "date_published": "2024-03-02T20:03:22Z",
        "description": "- Clustering now uses cosine-like (via l2-normalization) distances\r\n- pHMM databases have been updated to PFAM 35.0\r\n- BGC class definition has been updated to antiSMASH v7.0.0\r\n- Switching from HMMER to pyHMMER\r\n- General speed improvements",
        "html_url": "https://github.com/medema-group/bigslice/releases/tag/v2.0.0rc",
        "name": "BiG-SLiCE v2.0.0 (release candidate)",
        "release_id": 144510137,
        "tag": "v2.0.0rc",
        "tarball_url": "https://api.github.com/repos/medema-group/bigslice/tarball/v2.0.0rc",
        "type": "Release",
        "url": "https://api.github.com/repos/medema-group/bigslice/releases/144510137",
        "value": "https://api.github.com/repos/medema-group/bigslice/releases/144510137",
        "zipball_url": "https://api.github.com/repos/medema-group/bigslice/zipball/v2.0.0rc"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "satriaphd",
          "type": "User"
        },
        "date_created": "2021-02-26T22:04:16Z",
        "date_published": "2021-02-26T22:11:07Z",
        "description": "Several minor updates:\r\n- fix behavior when under compute clusters environment (thanks to @waltersom)\r\n- accept antiSMASH v6 regiongbks as input\r\n- displays the loaded HMM database release version\r\n- --complete mode no longer treats MIBiG BGCs as complete BGCs\r\n- small improvement to BIRCH clustering algorithm\r\n- fix parsed regiongbk paths folders losing their first characters\r\n- change default --n_ranks to 1",
        "html_url": "https://github.com/medema-group/bigslice/releases/tag/v1.1.1",
        "name": "Version 1.1.1",
        "release_id": 38825814,
        "tag": "v1.1.1",
        "tarball_url": "https://api.github.com/repos/medema-group/bigslice/tarball/v1.1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/medema-group/bigslice/releases/38825814",
        "value": "https://api.github.com/repos/medema-group/bigslice/releases/38825814",
        "zipball_url": "https://api.github.com/repos/medema-group/bigslice/zipball/v1.1.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "satriaphd",
          "type": "User"
        },
        "date_created": "2020-08-13T12:17:01Z",
        "date_published": "2020-08-13T12:24:48Z",
        "description": "- bugfix for download_hmmdb script and taxonomy parser module\r\n- SQLite schema improvement (speed up on visualization output)\r\n- added ASCII-art for help text",
        "html_url": "https://github.com/medema-group/bigslice/releases/tag/v1.1.0",
        "name": "Version 1.1.0",
        "release_id": 29649071,
        "tag": "v1.1.0",
        "tarball_url": "https://api.github.com/repos/medema-group/bigslice/tarball/v1.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/medema-group/bigslice/releases/29649071",
        "value": "https://api.github.com/repos/medema-group/bigslice/releases/29649071",
        "zipball_url": "https://api.github.com/repos/medema-group/bigslice/zipball/v1.1.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "satriaphd",
          "type": "User"
        },
        "date_created": "2020-06-03T21:46:19Z",
        "date_published": "2020-08-07T06:42:34Z",
        "description": "The very first (production-ready) release of BiG-SLiCE. Contain the core clustering pipeline, standard pHMM models and the accompanying visualization engine.",
        "html_url": "https://github.com/medema-group/bigslice/releases/tag/v1.0.0",
        "name": "Version 1.0.0",
        "release_id": 29437196,
        "tag": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/medema-group/bigslice/tarball/v1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/medema-group/bigslice/releases/29437196",
        "value": "https://api.github.com/repos/medema-group/bigslice/releases/29437196",
        "zipball_url": "https://api.github.com/repos/medema-group/bigslice/zipball/v1.0.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier"
  ],
  "somef_provenance": {
    "date": "2024-10-06 08:53:58",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 69
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick start",
        "type": "Text_excerpt",
        "value": "1. ~Make sure you have [HMMer](http://hmmer.org/) (version 3.2b1 or later) installed.~\n2. Install **BiG-SLiCE** using pip:\n- from PyPI (stable)\n~~~console\nuser@local:~$ pip install bigslice\n~~~\n- from source (bleeding edge -- only do this when you know what you are doing!)\n~~~console\nuser@local:~$ pip install git+https://github.com/medema-group/bigslice.git\n~~~\n3. Fetch the latest HMM models (\u00b1 271MB gzipped):\n~~~console\nuser@local:~$ download_bigslice_hmmdb\n~~~\n4. Check your installation:\n~~~console\nuser@local:~$ bigslice --version .\n\n==============\nBiG-SLiCE version 2.0.0\nHMM databases version: bigslice-models-2022-11-30\nBiosynthetic-pfam md5: 37495cac452bf1dd8aff2c4ad92065fe\nSub-pfam md5: 2e6b41d06f3c318c61dffb022798091e\n==============\n\n~~~\n\n5. Run **BiG-SLiCE** clustering analysis: (see [wiki:Input folder](https://github.com/medema-group/bigslice/wiki/Input-folder) on how to prepare the input folder)\n~~~console\nuser@local:~$ bigslice -i <input_folder> <output_folder>\n~~~\nFor a \"minimal\" test run, you can use the [example input folder](https://github.com/medema-group/bigslice/tree/master/misc/input_folder_template) that we provided.\n"
      },
      "source": "https://raw.githubusercontent.com/medema-group/bigslice/master/README.md",
      "technique": "header_analysis"
    }
  ]
}