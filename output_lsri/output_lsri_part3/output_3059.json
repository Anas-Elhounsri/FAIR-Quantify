{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/sangreashim/EAT-UpTF"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-03-11T12:43:13Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-04-03T08:20:34Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Enrichment Analysis Tool for Upstream Transcription Factor of a gene set (EAT- UpTF) : conduct enrichment analysis of upstream transcription factor for a gene set of interest."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9524404223668769,
      "result": {
        "original_header": "EAT-UpTF",
        "type": "Text_excerpt",
        "value": "Enrichment Analysis Tool for Upstream Transcription Factor of a gene set (EAT-UpTF) : conduct enrichment analysis of upstream transcription factor for a gene set of interest. \nCurrently, EAT-UpTF officially provides database only for Arabidopsis thaliana.\n \n"
      },
      "source": "https://raw.githubusercontent.com/sangreashim/EAT-UpTF/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9072619131707944,
      "result": {
        "original_header": "Transcriptional regulatory network construction",
        "type": "Text_excerpt",
        "value": "  \t--cistrome \n  \tdatabase file of cistrome \n  \n  \t--gene_group \n  \tfile containing group of genes (new line delimited)\n  \n  \t--TFs \n  \tfile containing group of TFs (new line delimited AGI ID)\n  \n  <b>Subject output file (eg. TRN.txt) to cytoscape for construction of TRN.</b>\n  \n  \n  # How to customize database\n  \n  EAT-UpTF conducts TF enrichment analysis based on the experimentally validated interaction between specific TF and its target genes. Interaction between TFs and their binding targets (identified by ChIP-/DAP-seq) can be constructed manually as following example.\n  \n  <b>Step 1. Annotate distance from genes to ChIP-/DAP-seq peaks based on the genome annotation for species of interest. </b>\n  Prior to conduct following command line, two BED files must be sorted by \"sort -k1,1 -k2,2n\".\n  \n\tcommand line: bedtools closest -a Athaliana_167_TAIR10.gene.bed (genome_annotation_BED_file) -b TF_A.narrowPeak (ChIP-/DAP-seq_peak_BED_file) -D a > TF_A.narrowPeak.annotation  \n\n  <b>Step 2. Selecting genes and ChIP-/DAP-seq peaks located within 1000 bp upstream and 500 bp downstream of genes. </b>\n\t\nOutput file (TF_A.narrowPeak.annotation) contains gene IDs (fourth column) and distance from gene to peak in last column (17th column). To select genes carrying TF peaks within 1000 bp upstream and 500 bp downstream, following command line needed.\n   \nTF_A.narrowPeak.u1000_d500.annotation file contains TF and target gene ID for first and second columns, respectively. The two columns must be delimited by <b>TAB</b>. \nExample of TF_A.narrowPeak.u1000_d500.annotation \n"
      },
      "source": "https://raw.githubusercontent.com/sangreashim/EAT-UpTF/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/sangreashim/EAT-UpTF/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/sangreashim/EAT-UpTF/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "sangreashim/EAT-UpTF"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "EAT-UpTF"
      },
      "source": "https://raw.githubusercontent.com/sangreashim/EAT-UpTF/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.998694339419192,
      "result": {
        "original_header": "Synopsis",
        "type": "Text_excerpt",
        "value": "\tpython3 EAT-UpTF.py --cistrome DAP_seq_default.txt --gene_group test_set_LHY_ChIPseq.txt --model HG --post_hoc fdr_bh --alpha 0.05 --alias gene_aliases_20140331.txt \n\tpython3 network.py --cistrome DAP_seq_default.txt --gene_group test_set_LHY_ChIPseq.txt --TFs TFs.txt > TRN.txt\n \n"
      },
      "source": "https://raw.githubusercontent.com/sangreashim/EAT-UpTF/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9962957792117922,
      "result": {
        "original_header": "Transcriptional regulatory network construction",
        "type": "Text_excerpt",
        "value": "  <b>Step 3. Conduct Step 1 and 2 for multiple TFs. </b>\n  \n  Or alternatively, execute following command line.\n  \n  \tcommand line: python construct_manual_database.py <file_containing_list_of_TFID_and_file_name_of_narrowPeak> <genome_annotation_BED_file> <upstream_length> <downstream_length> <column_for_target_geneID> <column_for_distance> <column_for_left_position_of_TF_peak>\n\t\n  In this example, 4th, 17th and 8th columns contain target geneID, distance from gene to TF peak and left position of TF peak. Therefore, following command line will be properly worked.\n  \n\tExample: python construct_manual_database.py TFID_and_FileName.txt Athaliana_167_TAIR10.gene.bed 1000 500 4 17 8\n\t\n  Example of TFID_and_FileName.txt\n  \n  \tAT1G19000\tAt1g19000_col_a.narrowPeak\n\tAT1G19210\tAt1g19210_col_a.narrowPeak\n\tAT1G22810\tAt1g22810_col.narrowPeak\n\tAT1G25550\tAt1g25550_col.narrowPeak\n\tAT1G36060\tAt1g36060_col_a.narrowPeak\n\tAT1G49010\tAt1g49010_col_a.narrowPeak\n\tAT1G64620\tAt1g64620_100ng20cy_b.narrowPeak\n\tAT1G68670\tAt1g68670_col.narrowPeak\n\tAT1G69690\tAt1g69690_col_a.narrowPeak\n\tAT1G72010\tAt1g72010_col.narrowPeak\n\tAT5G65130\tAt5g65130_col_a.narrowPeak.sorted\n   \n  <b>Step 4. Concatenate all annotation files into one txt file.</b>\n  \n\tcommand line: cat *.narrowPeak.u1000_d500.annotation > ALL_TFs.narrowPeak.u1000_d500.annotation\n  \n  \n  <b>Step 5. Use ALL_TFs.narrowPeak.u1000_d500.annotation for --cistrome argument.</b>\n  \n  \tcommand line example: python3 EAT-UpTF.py --cistrome ALL_TFs.narrowPeak.u1000_d500.annotation --gene_group test_set_LHY_ChIPseq.txt --model HG --post_hoc fdr_bh --alpha 0.05 --alias gene_aliases_20140331.txt \n  If you need helps, email to sangreashim@gmail.com.\n \n"
      },
      "source": "https://raw.githubusercontent.com/sangreashim/EAT-UpTF/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8697770933140474,
      "result": {
        "original_header": "Synopsis",
        "type": "Text_excerpt",
        "value": "\tpython3 EAT-UpTF.py --cistrome DAP_seq_default.txt --gene_group test_set_LHY_ChIPseq.txt --model HG --post_hoc fdr_bh --alpha 0.05 --alias gene_aliases_20140331.txt \n\tpython3 network.py --cistrome DAP_seq_default.txt --gene_group test_set_LHY_ChIPseq.txt --TFs TFs.txt > TRN.txt\n \n"
      },
      "source": "https://raw.githubusercontent.com/sangreashim/EAT-UpTF/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8948441534026083,
      "result": {
        "original_header": "Parameters for EAT-UpTF",
        "type": "Text_excerpt",
        "value": "  \t--cistrome file         \n  \tdatabase file of cistrome\n  \n  \t--gene_group file       \n  \tfile containing group of genes (new line delimited)\n  \n  \t--num_ref_genes int     \n  \tNo. of total genes in reference genome, \n  \tdefault=27206 for Arabidopsis thaliana\n  \n  \t--model str             \n  \tstatistical model: \n  \tHG=hypergeometric test, \n  \tBN=binomial test, \n  \tdefault=HG\n  \n  \t--post_hoc str          \n  \tpost hoc analysis: \n  \tbonferroni=Bonferroni family-wise error rate correction, \n  \tfdr_bh=Benjamini & Hochberg False Discover Rate correction, \n  \tdefault=fdr_bh\n  \n  \t--alpha float: 0<=x<=1  \n  \talpha in post hoc analysis, \n  \tdefault:0.05\n  \n  \t--output file           \n  \toutput file name\n  \n  \t--alias file           \n  \tgene alias file, \n  \tdefault=NA,\n  \tgene_aliases_20140331.txt file can be downloaded from TAIR webpage \n"
      },
      "source": "https://raw.githubusercontent.com/sangreashim/EAT-UpTF/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8742374937013522,
      "result": {
        "original_header": "Transcriptional regulatory network construction",
        "type": "Text_excerpt",
        "value": "  <b>Step 3. Conduct Step 1 and 2 for multiple TFs. </b>\n  \n  Or alternatively, execute following command line.\n  \n  \tcommand line: python construct_manual_database.py <file_containing_list_of_TFID_and_file_name_of_narrowPeak> <genome_annotation_BED_file> <upstream_length> <downstream_length> <column_for_target_geneID> <column_for_distance> <column_for_left_position_of_TF_peak>\n\t\n  In this example, 4th, 17th and 8th columns contain target geneID, distance from gene to TF peak and left position of TF peak. Therefore, following command line will be properly worked.\n  \n\tExample: python construct_manual_database.py TFID_and_FileName.txt Athaliana_167_TAIR10.gene.bed 1000 500 4 17 8\n\t\n  Example of TFID_and_FileName.txt\n  \n  \tAT1G19000\tAt1g19000_col_a.narrowPeak\n\tAT1G19210\tAt1g19210_col_a.narrowPeak\n\tAT1G22810\tAt1g22810_col.narrowPeak\n\tAT1G25550\tAt1g25550_col.narrowPeak\n\tAT1G36060\tAt1g36060_col_a.narrowPeak\n\tAT1G49010\tAt1g49010_col_a.narrowPeak\n\tAT1G64620\tAt1g64620_100ng20cy_b.narrowPeak\n\tAT1G68670\tAt1g68670_col.narrowPeak\n\tAT1G69690\tAt1g69690_col_a.narrowPeak\n\tAT1G72010\tAt1g72010_col.narrowPeak\n\tAT5G65130\tAt5g65130_col_a.narrowPeak.sorted\n   \n  <b>Step 4. Concatenate all annotation files into one txt file.</b>\n  \n\tcommand line: cat *.narrowPeak.u1000_d500.annotation > ALL_TFs.narrowPeak.u1000_d500.annotation\n  \n  \n  <b>Step 5. Use ALL_TFs.narrowPeak.u1000_d500.annotation for --cistrome argument.</b>\n  \n  \tcommand line example: python3 EAT-UpTF.py --cistrome ALL_TFs.narrowPeak.u1000_d500.annotation --gene_group test_set_LHY_ChIPseq.txt --model HG --post_hoc fdr_bh --alpha 0.05 --alias gene_aliases_20140331.txt \n"
      },
      "source": "https://raw.githubusercontent.com/sangreashim/EAT-UpTF/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/sangreashim/EAT-UpTF/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://user-images.githubusercontent.com/38829486/76416622-bf348080-63de-11ea-9fb0-b6bcb443d3f1.jpg"
      },
      "source": "https://raw.githubusercontent.com/sangreashim/EAT-UpTF/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "EAT-UpTF"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "sangreashim"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 7714,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sangreashim/EAT-UpTF/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://bedtools.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/sangreashim/EAT-UpTF/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Prerequisite",
        "type": "Text_excerpt",
        "value": "python3 (>= 3.6.8)\n\nSciPy (>= 1.4.1)\n\nStatsmodels (>= 0.11.1)\n\nbedtools (should be included in default path, see https://bedtools.readthedocs.io/en/latest/) \n"
      },
      "source": "https://raw.githubusercontent.com/sangreashim/EAT-UpTF/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 11:27:15",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ]
}