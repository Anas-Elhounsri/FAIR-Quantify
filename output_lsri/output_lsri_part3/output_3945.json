{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/spirilaurentiu/Robosample"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-09-12T12:37:48Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-04T16:06:55Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9982877775469925,
      "result": {
        "original_header": "Robosample: Generalized Coordinates Molecular Simulation Coupled with Gibbs Sampling (GCHMC)",
        "type": "Text_excerpt",
        "value": "Robosample is a C++ library based on Simbody and Molmodel, which uses high-speed robotics algorithms imlemented in Simbody and molecular modelling facilities in Molmodel to generate Markov Chain Monte Carlo moves coupled with Gibbs sampling able to reproduce the atomistic level detailed distribution of molecular systems. \n"
      },
      "source": "https://raw.githubusercontent.com/spirilaurentiu/Robosample/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9326504714406996,
      "result": {
        "original_header": "Compiler",
        "type": "Text_excerpt",
        "value": "We have compiled Robosample with `gcc` and `clang`: \n* `clang` compiles faster and produces marginally faster code.\n* `GCC 11` produces ICE (internal compiler error) for OpenMM when using IPO. This is not the case with earlier versions (`GCC 7.5` works).\n \n"
      },
      "source": "https://raw.githubusercontent.com/spirilaurentiu/Robosample/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8198967315543036,
      "result": {
        "original_header": "Instrumentation",
        "type": "Text_excerpt",
        "value": "We have discovered that running **only one** simulation round yields the best result. Also, using a larger system seems to be optimal. Perform the necessary changes in the input file and execute:\n```bash\nperf record -e cycles:u -j any,u -a -o perf.data ./robosample.pgo.use inp.aper\n```\nConvert the data into something that can be used by BOLT:\n```bash\nperf2bolt -p perf.data robosample.pgo.use -o perf.fdata\n```\nOptimize the binary:\n```bash\nllvm-bolt robosample.pgo.use -o robosample.pgo.use.bolt -data=perf.fdata -reorder-blocks=ext-tsp -reorder-functions=hfsort -split-functions -split-all-cold -split-eh -dyno-stats\n```\nCompare the binaries:\n```bash\ntime ./robosample inp.ala10\ntime ./robosample.bolt inp.ala10\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/spirilaurentiu/Robosample/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8593681647434863,
      "result": {
        "original_header": "Development",
        "type": "Text_excerpt",
        "value": "Robosample is being developed using [Visual Studio Code](https://code.visualstudio.com/) on Windows. To start it, run `code .` in `Robosample`.\n \n"
      },
      "source": "https://raw.githubusercontent.com/spirilaurentiu/Robosample/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8559213808934893,
      "result": {
        "original_header": "Fun facts",
        "type": "Text_excerpt",
        "value": "To get the total number of lines in header and source files, execute this from the root directory:\n```bash\nfind . -name '*.h' -o -name '*.cpp' | xargs wc -l\n```\nTo see all exported symbols, use:\n```bash\nnm -an build/robosample | c++filt\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/spirilaurentiu/Robosample/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/spirilaurentiu/Robosample/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/spirilaurentiu/Robosample/master/tools/rexz.ipynb"
      },
      "source": "https://raw.githubusercontent.com/spirilaurentiu/Robosample/master/tools/rexz.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/spirilaurentiu/Robosample/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "spirilaurentiu/Robosample"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Robosample: Generalized Coordinates Molecular Simulation Coupled with Gibbs Sampling (GCHMC)"
      },
      "source": "https://raw.githubusercontent.com/spirilaurentiu/Robosample/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/spirilaurentiu/Robosample/master/drug.gif"
      },
      "source": "https://raw.githubusercontent.com/spirilaurentiu/Robosample/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installing dependencies",
        "parent_header": [
          "Robosample: Generalized Coordinates Molecular Simulation Coupled with Gibbs Sampling (GCHMC)"
        ],
        "type": "Text_excerpt",
        "value": "Install the dependencies:\n\n```bash\nsudo apt-get update\nsudo apt-get install git cmake graphviz gfortran libglfw3-dev freeglut3-dev libglew-dev libxmu-dev libeigen3-dev doxygen subversion libblas-dev liblapack-dev libboost-all-dev swig ocl-icd-opencl-dev fftw2 libxmu-dev libxi-dev clang ninja-build\n```\n"
      },
      "source": "https://raw.githubusercontent.com/spirilaurentiu/Robosample/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "CMake",
        "parent_header": [
          "Robosample: Generalized Coordinates Molecular Simulation Coupled with Gibbs Sampling (GCHMC)",
          "Installing dependencies"
        ],
        "type": "Text_excerpt",
        "value": "Minimum `CMake` version is 3.17. It can be tested with:\n\n```bash\ncmake --version\n```\n\nTo install the correct version, head to the [CMake website](https://cmake.org/download/) and find the `.tar.gz` version for your operating system. The code below is an example for CMake 3.27 under Linux:\n\n```bash\ncd ~\nwget https://github.com/Kitware/CMake/releases/download/v3.27.7/cmake-3.27.7-linux-x86_64.tar.gz\ntar -xf cmake-3.27.7-linux-x86_64.tar.gz\nrm cmake-3.27.7-linux-x86_64.tar.gz\n```\n\nThe executable is located in the `bin` folder:\n\n```bash\n~/cmake-3.27.7-linux-x86_64/cmake-3.27.7-linux-x86_64/bin/cmake\n```\n"
      },
      "source": "https://raw.githubusercontent.com/spirilaurentiu/Robosample/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Ninja",
        "parent_header": [
          "Robosample: Generalized Coordinates Molecular Simulation Coupled with Gibbs Sampling (GCHMC)",
          "Installing dependencies"
        ],
        "type": "Text_excerpt",
        "value": "There is no required Ninja version. It can also be replaced with Unix Makefiles. If installation from `apt-get` fails, downloading the binaries is recommended. Go to [Ninja website](https://ninja-build.org/) and find the [binary downloads](https://ninja-build.org/). The following is an example for version 1.11.1:\n\n```bash\ncd ~\nwget https://github.com/ninja-build/ninja/releases/download/v1.11.1/ninja-linux.zip\nunzip ninja-linux.zip\nrm ninja-linux.zip\n```\n\nIf used as intended further into the README, the executable must be run from the full path:\n\n```bash\n/home/myuser/ninja\n```\n"
      },
      "source": "https://raw.githubusercontent.com/spirilaurentiu/Robosample/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Exports",
        "parent_header": [
          "Robosample: Generalized Coordinates Molecular Simulation Coupled with Gibbs Sampling (GCHMC)",
          "Installing dependencies"
        ],
        "type": "Text_excerpt",
        "value": "```bash\nexport CUDA_INC_DIR=/usr/local/cuda\nexport CUDA_ROOT=/usr/local/cuda\n```\n"
      },
      "source": "https://raw.githubusercontent.com/spirilaurentiu/Robosample/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installing prerequisites",
        "parent_header": [
          "Robosample: Generalized Coordinates Molecular Simulation Coupled with Gibbs Sampling (GCHMC)",
          "BOLT"
        ],
        "type": "Text_excerpt",
        "value": "```bash\nsudo apt-get update\nsudo apt-get installlinux-tools-common linux-tools-generic linux-tools-`uname -r`\n```\n"
      },
      "source": "https://raw.githubusercontent.com/spirilaurentiu/Robosample/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installing BOLT",
        "parent_header": [
          "Robosample: Generalized Coordinates Molecular Simulation Coupled with Gibbs Sampling (GCHMC)",
          "BOLT"
        ],
        "type": "Text_excerpt",
        "value": "Downlad BOLT and compile it. A docker file is also available.\n\n```bash\ngit clone https://github.com/llvm/llvm-project.git\nmkdir build\ncd build\ncmake -G Ninja ../llvm-project/llvm -DLLVM_TARGETS_TO_BUILD=\"X86;AArch64\" -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_ASSERTIONS=ON -DLLVM_ENABLE_PROJECTS=\"bolt\"\nninja bolt\n```\n\nAdd BOLT to `PATH`:\n\n```bash\necho \"PATH=$(pwd)/bin:$PATH\" >> ~/.bashrc\nsource ~/.bashrc\n```\n\nAllow intrumentation:\n\n```bash\nsudo sysctl kernel.perf_event_paranoid=-1\n```\n"
      },
      "source": "https://raw.githubusercontent.com/spirilaurentiu/Robosample/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "PGO (Profile Guided Optimization)",
        "parent_header": [
          "Robosample: Generalized Coordinates Molecular Simulation Coupled with Gibbs Sampling (GCHMC)"
        ],
        "type": "Text_excerpt",
        "value": "PGO requires us to compile to compile Robosample once, run it a few times and compile it again taking into account the hot code paths.\n\nFirst compilation:\n\n```bash\ncmake -G Ninja ../ -D CMAKE_BUILD_TYPE=PGO_Train -D CMAKE_C_COMPILER=clang -D CMAKE_CXX_COMPILER=clang++ -D OPENMM_PLATFORM=OPENCL\nninja robosample\n```\n\nClear output of previous runs:\n\n```bash\nfind . -name \"*.gcda\" -delete\n```\n\nRun the examples:\n\n```bash\nbash pgo.sh\n```\n"
      },
      "source": "https://raw.githubusercontent.com/spirilaurentiu/Robosample/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1.0,
      "result": {
        "original_header": "Cloning the project",
        "type": "Text_excerpt",
        "value": "```bash\ngit clone --recurse-submodules https://github.com/spirilaurentiu/Robosample.git\ncd Robosample\n\ncd openmm\ngit checkout master\ncd ../Molmodel\ngit checkout master\ncd ../Simbody01\ngit checkout master\ncd ../\ngit checkout master\n``` \nFor a specific branch (named `build` in this example):\n```bash\ngit clone -b build --single-branch https://github.com/spirilaurentiu/Robosample.git\ncd Robosample\nrm openmm -rf && git clone -b master https://github.com/spirilaurentiu/openmm.git\nrm Simbody01 -rf && git clone -b master --single-branch https://github.com/spirilaurentiu/Simbody01.git\nrm Molmodel -rf && git clone -b merge --single-branch https://github.com/spirilaurentiu/Molmodel.git\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/spirilaurentiu/Robosample/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9085509584337741,
      "result": {
        "original_header": "Compiler",
        "type": "Text_excerpt",
        "value": "We have compiled Robosample with `gcc` and `clang`: \n* `clang` compiles faster and produces marginally faster code.\n* `GCC 11` produces ICE (internal compiler error) for OpenMM when using IPO. This is not the case with earlier versions (`GCC 7.5` works).\n \n"
      },
      "source": "https://raw.githubusercontent.com/spirilaurentiu/Robosample/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9974597102331153,
      "result": {
        "original_header": "OpenMM platform",
        "type": "Text_excerpt",
        "value": "OpenMM can use hardware acceleration. Robosample defaults with OpenCL. To set the platform, you can set it via the `cmake` command in the next step: \n* `OPENMM_PLATFORM=CPU` for CPU.\n* `OPENMM_PLATFORM=CUDA` for CUDA.\n* `OPENMM_PLATFORM=OPENCL` for OpenCL.\n \n"
      },
      "source": "https://raw.githubusercontent.com/spirilaurentiu/Robosample/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999776126337487,
      "result": {
        "original_header": "Compilation",
        "type": "Text_excerpt",
        "value": "```bash\nmkdir build\ncd build\n``` \nFor `clang`:\n```bash\ncmake -G Ninja ../ -D CMAKE_BUILD_TYPE=Release -D CMAKE_C_COMPILER=clang -D CMAKE_CXX_COMPILER=clang++ -D OPENMM_PLATFORM=OPENCL\nninja robosample\n```\nFor `gcc`:\n```bash\ncmake -G Ninja ../ -D CMAKE_BUILD_TYPE=Release -D CMAKE_C_COMPILER=gcc -D CMAKE_CXX_COMPILER=g++ -D OPENMM_PLATFORM=OPENCL\nninja robosample\n```\nAssuming that CMake and Ninja have been installed as binaries and not from `apt-get`:\n```bash\n~/cmake-3.27.7-linux-x86_64/bin/cmake -G Ninja -DCMAKE_MAKE_PROGRAM=/home/myuser/ninja -D CMAKE_BUILD_TYPE=Release -D CMAKE_C_COMPILER=gcc -D CMAKE_CXX_COMPILER=g++ -D OPENMM_PLATFORM=OPENCL\n```\nOnce the CMake files have been generated, Robosample can be compiled with Ninja:\n```bash\n~/ninja robosample\n```\nIf you want to use Unix Makefiles:\n```bash\ncmake -G \"Unix Makefiles\" ../ -D CMAKE_BUILD_TYPE=Release -D CMAKE_C_COMPILER=clang -D CMAKE_CXX_COMPILER=clang++ -D OPENMM_PLATFORM=OPENCL\nmake -j$(nproc)\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/spirilaurentiu/Robosample/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999955765773684,
      "result": {
        "original_header": "Compiling from Visual Studio Code",
        "type": "Text_excerpt",
        "value": "Select the kit and then compile:\n```bash\n>CMake: Scan for Kits\n>CMake: Select a Kit\n>CMake: Select Variant -> Debug\n>CMake: Build (F7)\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/spirilaurentiu/Robosample/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.94310333406746,
      "result": {
        "original_header": "Development",
        "type": "Text_excerpt",
        "value": "Robosample is being developed using [Visual Studio Code](https://code.visualstudio.com/) on Windows. To start it, run `code .` in `Robosample`.\n \n"
      },
      "source": "https://raw.githubusercontent.com/spirilaurentiu/Robosample/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9627288415923043,
      "result": {
        "original_header": "Sanitizers (**mandatory**)",
        "type": "Text_excerpt",
        "value": "We use address and undefined behaviour sanitizers in our debug builds. To get the correct output, run:\n```bash\necho \"export ASAN_OPTIONS=detect_odr_violation=0:detect_leaks=0:protect_shadow_gap=0\" >> ~/.bashrc\necho \"export UBSAN_OPTIONS=print_stacktrace=1\" >> ~/.bashrc\nsource ~/.bashrc\n```\n \n* `detect_odr_violation`\n* `detect_leaks=0` - OpenMM has some memory leaks. Set `detect_leaks=1` if you want to see memory all leaks.\n* `protect_shadow_gap=0` - OpenCL and CUDA (which both use the NVIDIA driver) conflict with ASAN, as stated by [here](https://stackoverflow.com/a/68027496/3740613).\n* `print_stacktrace=1`: show which lines trigger the undefined behaviour sanitizer (UBSAN).\n \n"
      },
      "source": "https://raw.githubusercontent.com/spirilaurentiu/Robosample/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9960646815522519,
      "result": {
        "original_header": "Fun facts",
        "type": "Text_excerpt",
        "value": "To get the total number of lines in header and source files, execute this from the root directory:\n```bash\nfind . -name '*.h' -o -name '*.cpp' | xargs wc -l\n```\nTo see all exported symbols, use:\n```bash\nnm -an build/robosample | c++filt\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/spirilaurentiu/Robosample/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/spirilaurentiu/Robosample/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Robosample"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "spirilaurentiu"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 2591983,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 1233392,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Lex",
        "size": 720383,
        "type": "Programming_language",
        "value": "Lex"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 228529,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 103874,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 45732,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Batchfile",
        "size": 8330,
        "type": "Programming_language",
        "value": "Batchfile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Roff",
        "size": 1957,
        "type": "Programming_language",
        "value": "Roff"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Tcl",
        "size": 1676,
        "type": "Programming_language",
        "value": "Tcl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 978,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Ruby",
        "size": 34,
        "type": "Programming_language",
        "value": "Ruby"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/spirilaurentiu/Robosample/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "spirilaurentiu",
          "type": "User"
        },
        "date_created": "2024-01-27T10:11:31Z",
        "date_published": "2024-01-29T09:21:36Z",
        "description": "Multiple prmtop working. Single prmtop not working.",
        "html_url": "https://github.com/spirilaurentiu/Robosample/releases/tag/stable",
        "name": "Multiple prmtop working",
        "release_id": 138879559,
        "tag": "stable",
        "tarball_url": "https://api.github.com/repos/spirilaurentiu/Robosample/tarball/stable",
        "type": "Release",
        "url": "https://api.github.com/repos/spirilaurentiu/Robosample/releases/138879559",
        "value": "https://api.github.com/repos/spirilaurentiu/Robosample/releases/138879559",
        "zipball_url": "https://api.github.com/repos/spirilaurentiu/Robosample/zipball/stable"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Prerequisites",
        "parent_header": [
          "Robosample: Generalized Coordinates Molecular Simulation Coupled with Gibbs Sampling (GCHMC)"
        ],
        "type": "Text_excerpt",
        "value": "* Turn off all `conda` environments.\n* Disable all antivirus programs (known to be needed for WSL).\n* Execute all commands in the native terminal if running under WSL (not in VS Code or any other application that provides a terminal).\n"
      },
      "source": "https://raw.githubusercontent.com/spirilaurentiu/Robosample/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installing dependencies",
        "parent_header": [
          "Robosample: Generalized Coordinates Molecular Simulation Coupled with Gibbs Sampling (GCHMC)"
        ],
        "type": "Text_excerpt",
        "value": "Install the dependencies:\n\n```bash\nsudo apt-get update\nsudo apt-get install git cmake graphviz gfortran libglfw3-dev freeglut3-dev libglew-dev libxmu-dev libeigen3-dev doxygen subversion libblas-dev liblapack-dev libboost-all-dev swig ocl-icd-opencl-dev fftw2 libxmu-dev libxi-dev clang ninja-build\n```\n"
      },
      "source": "https://raw.githubusercontent.com/spirilaurentiu/Robosample/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "CMake",
        "parent_header": [
          "Robosample: Generalized Coordinates Molecular Simulation Coupled with Gibbs Sampling (GCHMC)",
          "Installing dependencies"
        ],
        "type": "Text_excerpt",
        "value": "Minimum `CMake` version is 3.17. It can be tested with:\n\n```bash\ncmake --version\n```\n\nTo install the correct version, head to the [CMake website](https://cmake.org/download/) and find the `.tar.gz` version for your operating system. The code below is an example for CMake 3.27 under Linux:\n\n```bash\ncd ~\nwget https://github.com/Kitware/CMake/releases/download/v3.27.7/cmake-3.27.7-linux-x86_64.tar.gz\ntar -xf cmake-3.27.7-linux-x86_64.tar.gz\nrm cmake-3.27.7-linux-x86_64.tar.gz\n```\n\nThe executable is located in the `bin` folder:\n\n```bash\n~/cmake-3.27.7-linux-x86_64/cmake-3.27.7-linux-x86_64/bin/cmake\n```\n"
      },
      "source": "https://raw.githubusercontent.com/spirilaurentiu/Robosample/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Ninja",
        "parent_header": [
          "Robosample: Generalized Coordinates Molecular Simulation Coupled with Gibbs Sampling (GCHMC)",
          "Installing dependencies"
        ],
        "type": "Text_excerpt",
        "value": "There is no required Ninja version. It can also be replaced with Unix Makefiles. If installation from `apt-get` fails, downloading the binaries is recommended. Go to [Ninja website](https://ninja-build.org/) and find the [binary downloads](https://ninja-build.org/). The following is an example for version 1.11.1:\n\n```bash\ncd ~\nwget https://github.com/ninja-build/ninja/releases/download/v1.11.1/ninja-linux.zip\nunzip ninja-linux.zip\nrm ninja-linux.zip\n```\n\nIf used as intended further into the README, the executable must be run from the full path:\n\n```bash\n/home/myuser/ninja\n```\n"
      },
      "source": "https://raw.githubusercontent.com/spirilaurentiu/Robosample/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Exports",
        "parent_header": [
          "Robosample: Generalized Coordinates Molecular Simulation Coupled with Gibbs Sampling (GCHMC)",
          "Installing dependencies"
        ],
        "type": "Text_excerpt",
        "value": "```bash\nexport CUDA_INC_DIR=/usr/local/cuda\nexport CUDA_ROOT=/usr/local/cuda\n```\n"
      },
      "source": "https://raw.githubusercontent.com/spirilaurentiu/Robosample/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installing prerequisites",
        "parent_header": [
          "Robosample: Generalized Coordinates Molecular Simulation Coupled with Gibbs Sampling (GCHMC)",
          "BOLT"
        ],
        "type": "Text_excerpt",
        "value": "```bash\nsudo apt-get update\nsudo apt-get installlinux-tools-common linux-tools-generic linux-tools-`uname -r`\n```\n"
      },
      "source": "https://raw.githubusercontent.com/spirilaurentiu/Robosample/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running Robosample",
        "parent_header": [
          "Robosample: Generalized Coordinates Molecular Simulation Coupled with Gibbs Sampling (GCHMC)"
        ],
        "type": "Text_excerpt",
        "value": "The executable is compiled in `build/`. Examples are available in the same folder. To see them, type:\n\n```bash\nll inp.*\n```\n\nTo run any of them, execute:\n\n```bash\n./robosample inp.2but\n```\n"
      },
      "source": "https://raw.githubusercontent.com/spirilaurentiu/Robosample/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "contact",
    "contributors",
    "documentation",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-06 14:39:56",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 7
      },
      "technique": "GitHub_API"
    }
  ]
}