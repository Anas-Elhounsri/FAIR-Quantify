{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/zaidissa/MetaRon"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-08-08T17:52:15Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-08-05T16:20:35Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Metagenomic opeRon Prediction pipeline. MetaRon presents the first pipeline for the prediction of metagenomic operons without any functional or experimental data."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "type": "Text_excerpt",
        "value": "MetaRon (Metagenomic opeRon prediction pipeline) is a computational workflow for the prediction of operons from metagenomic data. The pipeline predicts metagenomic operons without any any functional or experimental data. It comes with options to process the metagenomic data starting from filtered raw reads, which includes: assembly into scaffolds via IDBA, data manipulation, gene prediction via prodigal and lastly operon prediction based on gene's co-directionality, intergenic distance (IGD) and promoters.\n\nMetagenomic operon prediction redefines the operonic clusters by identifying promoters in co-directional genes with an intergenic distance threshold of <= 600 bp. \n\n"
      },
      "source": "https://raw.githubusercontent.com/zaidissa/MetaRon/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/zaidissa/MetaRon/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/zaidissa/MetaRon/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "zaidissa/MetaRon"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Introduction"
      },
      "source": "https://raw.githubusercontent.com/zaidissa/MetaRon/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Install MetaRon",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "You can install MetaRon either from PyPi using pip and install it from the source. Please make sure you have already installed the above mentioned python libraries required to run MetaRon.\n\nInstall from PyPi::\n\n\tpip install metaron\n\nInstall from the source::\n\t\n\ttar -zxvf metaron-1.0.tar.gz\n\tcd metaron-1.0\n\tpython setup.py install\n\n\t"
      },
      "source": "https://raw.githubusercontent.com/zaidissa/MetaRon/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/zaidissa/MetaRon/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "metagenomic-data-processing, metagenomic-operons, metagenomic-pipeline, metagenomics"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "#BSD License\n\nCopyright (c) 2018, Syed Shujaat Ali Zaidi, Xuegong Zhang All rights reserved.\n\n\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\nNeither the name of improse nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
      },
      "source": "https://raw.githubusercontent.com/zaidissa/MetaRon/master/LICENSE.md",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MetaRon"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "zaidissa"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 84429,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/zaidissa/MetaRon/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Prerequisites",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "MetaRon requires:\n\n\t* Python (2.7 )\n\t* IDBA (iterative De Bruijn Graph De Novo Assembler) [conda install -c bioconda idba]\n\t* Prodigal [conda install -c bioconda prodigal]\n\t* BDGP: Neural Network Promoter Prediction 2.2\n\t* antiSMASH: antibiotics & Secondary Metabolite Analysis Shell (Optional: required for downstream analysis only.)\n\t* BOWTIE (Optional: only required for downstream analysis)\n\nIf you already have Anaconda environment setup, you can quickly install the prerequisites using any one command from each section:\n1. IDBA\n\t\n\tconda install -c bioconda idba\n\t\n\t\n\tconda install -c bioconda/label/cf201901 idba\n\t\n2. Prodigal\n\t\n\tconda install -c bioconda prodigal\n\t\n\t\n\tconda install -c bioconda/label/cf201901 prodigal\n\t\n3. antiSMASH\n\n\tconda install -c bioconda antismash\n\t\n\t\n\tconda install -c bioconda/label/cf201901 antismash\n\t\n4. BOWTIE2\n\n\tconda install -c bioconda bowtie\n\n\tconda install -c bioconda/label/cf201901 bowtie\n\n"
      },
      "source": "https://raw.githubusercontent.com/zaidissa/MetaRon/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 09:05:52",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 7
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Support",
        "type": "Text_excerpt",
        "value": "If you have questions, or found any bug in the program, please write to us at \n\n``syedshujaat[at]comsats.edu.pk``\n``syedzaidi[at]arizona.edu``\n"
      },
      "source": "https://raw.githubusercontent.com/zaidissa/MetaRon/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "How to use MetaRon",
        "type": "Text_excerpt",
        "value": "Once you have installed MetaRon, you can type:\n\n\tmetaron --help\n\nto find the available commands and required parameters to run MetaRon. \n\n\n  -h,\t--help            \n\tShow this help message and exit\n  \n  -n,\t--sample            \n\tSample name without any dot/underscore/dash\n  \n  -p,\t--process            \n\t1. ago: assembly gene prediction and operon prediciton\n        2. op: operon prediction only. \n\n\nIf 'ago', please provide the following parameters:\n\n--sample,--process, --read_type, --read_length, --paired_1, --paired_2, --output\n\n\nIf 'op', please provide the following parameters:\n\n--sample, --process, --igp, --isc, --tool, --output \n\n\n\n  -rt,\t--read_type            \n\tEnter read type. 'merge' if the reads are paired-end in two files. 'paired' if the reads are paired-end in one file.\n  \n  -rl,\t--read_length            \n\tEnter 'l' if read length is longer than 128 bases and 'r' if read length is shorter than 128 bases\n  \n  -pe1,\t--paired_1            \n\tEnter paired read file 1\n  \n  -pe2,\t--paired_2            \n\tEnter paired read file 2\n  \n  -pm,\t--paired_merged            \n\tEnter the paired end read file if both paired-end reads are in one file\n  \n  -i,\t--igp            \n\tSelect the gene prediction .tab file generated via MetageneMark or Prodigal\n  \n  -j,\t--isc            \n\tSelect the file containing all scaftigs\n  \n  -t,\t--tool            \n\tEnter 1 for MetaGeneMark, 2 for Prodigal\n  \n  -o,\t--output            \n\tEnter output destination folder\n  \n  \n=======================================================*NOTE*=======================================================\n\n1- If the selected --process is  'op', then please refer to the provided scaftig and gene prediction file format\n\n2- Add NNPP2.2 path to the config.txt file\n \n====================================================================================================================\n"
      },
      "source": "https://raw.githubusercontent.com/zaidissa/MetaRon/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Make predictions",
        "parent_header": [
          "How to use MetaRon"
        ],
        "type": "Text_excerpt",
        "value": "Metagenomic operon prediction could be performed by providing filtered raw reads under the process \"ago\" i.e. assembly, gene prediction and operon identification\n\n\t## test_sample: ERR022075.1.fastq & ERR022075.2.fastq\n\n\tmetaron --sample ERR022075 --process ago --read_type merge OR paired --read_length r OR l --paired_1 ~/path/to/ERR022075.1.fastq --paired_2 ~/path/to/ERR022075.2.fastq --output ~/path/to/output/directory/\n\nIf metagenomic scaffolds and gene predictions are already available, the user can predict operon under the process \"op\"\n\n\t## test_assembly: ERR022075_scaf.fa \n\t## test_gene_prediction: ERR022075\n\n\tmetaron --sample ERR022075 --process op --igp ERR022075 --isc ERR022075_scaf.fa --tool 1 OR 2 --output ~/path/to/output/directory/\n\nThis will save metagenomic operon predictions ``Operon_File.tab``.  The prediction file will report the operonic information based on the above mentioned parameters. \n\n"
      },
      "source": "https://raw.githubusercontent.com/zaidissa/MetaRon/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Proposed downstream anslysis",
        "parent_header": [
          "How to use MetaRon"
        ],
        "type": "Text_excerpt",
        "value": "1. Secondary Metabolites\n\n\ta. Secondary Metabolites identified from operonic sequences using antiSMASH\n\t\n\tb. Differntial abundance of Secondary Metabolites (condition-1 / Disease vs Condition-2 / Control)\n\t\n2. Operonnic pathways\n\n\ta. Mapping raw metagenomic reads to operonic sequences using BOWTIE\n\t\n\tb. Submitting the mapped reads to Functional Mapping and Analysis Pipeline (FMAP)\n\t\n\tc. Identifying differential abundance of pathways between disease and control or environment-1 and environment-2\n\n\n\t\n"
      },
      "source": "https://raw.githubusercontent.com/zaidissa/MetaRon/master/README.md",
      "technique": "header_analysis"
    }
  ]
}