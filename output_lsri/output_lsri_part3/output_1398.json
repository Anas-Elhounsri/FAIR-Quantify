{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/agrosavia-bioinformatics/MultiGWAS"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-05-10T21:47:37Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-03-10T04:04:18Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.959007545049416,
      "result": {
        "original_header": "Configuration file",
        "type": "Text_excerpt",
        "value": "The configuration file is a text file with a list of parameter names and their values separated by a colon (\":\"). This file is the main input for MultiGWAS and it can be created in three ways: using a general text editor, using the MultiGWAS GUI interface, or modifying an existing configuration file.  \nAll keywords in the parameter file may be entered in upper and/or lower case; spaces are allowed but not required around the \u201c:\u201d sign. \nUpper / lower case is relevant for the filenames. Blank lines and comment lines (starting with the number sign #) may be added, as well as extra text after the data on a line. The only requirement is that all the data (filenames and other strings) do not contain blanks (spaces, tab characters). \nNow, we briefly describe these parametes and then we show an example of a config file. \n|  Parameter name   | Description |                     \n|------------------ |------------  |                   \n| genotypeFile      | Genotype filename, file with the marker data (see genomic data section below) |\n| genotypeFormat    | Genotype format, currently four formats: \"gwaspoly\", \"kmatrix\", \"vcf\", and \"fitpoly\" (see genomic data section below) |\n| phenotypeFile     | Phenotype filename, file with the individuals and trait values (see genomic data section below) |\n| mapFile           | Map file, optional file with marker information (marker, reference allele, alternate, allele, chromosome, and position (see genomic data section below) |\n| significanceLevel | The genome-wide significance threshold \u03b1 (commonly 0.01 or 0.05)|\n| correctionMethod  | The method for multiple testing correction (\u201dBonferroni\u201d or \u201dFDR\u201d)|\n| gwasModel         | The type of GWAS analysis (\u201dNaive\u201d or \u201dFull\u201d)|\n| nBest             | Number of top associations to be reported\n| filtering         | TRUE or FALSE whether to use quality control (QC) filters or not (see below) |\n| MAF               | Minor allele frequency QC filter |\n| MIND              | Individual missing rate QC filter |\n| GENO              | SNP missing rate QC filter |\n| HWE               | Hardy-Weinberg threshold QC filter|\n| tools             | Tools to be used in the analysis. Any combination of the following tools: \"GWASpoly\", \"TASSEL\", \"PLINK, and SHEsis\n| geneAction        | Gene-action assumed model (Marker-effect). Currently, four options: \"additive\", \"general\", \"dominance\", or \"all\" |\n \n"
      },
      "source": "https://raw.githubusercontent.com/agrosavia-bioinformatics/multiGWAS/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9213433967518854,
      "result": {
        "original_header": "Genomic data inputs",
        "type": "Text_excerpt",
        "value": "The following parameters from configuration file are related with the type of genomic data required by MultiGWAS. Below, we show the characteristics and structure of the input files. Keep in mind that the headeer line must be present in all the file formats we show below. \n"
      },
      "source": "https://raw.githubusercontent.com/agrosavia-bioinformatics/multiGWAS/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8046604387255892,
      "result": {
        "original_header": "\"phenotypeFile\"",
        "type": "Text_excerpt",
        "value": "The phenotype file is formatted as a table separated by commas with the names of the variables (columns) in the first line and with two columns. The first one containing the name (or ID) of the individual, and the second the trait value. An example follows:\n```\n|Name           | tuber_shape |\n|---------------|-------------|\n|ACBrador       |    3.59     |   \n|AdirondackBlue |    4.07     |\n|AllBlue        |    4.73     |\n|AlpineRusset   |    4.85     |\n|Alturas        |    4.46     |\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/agrosavia-bioinformatics/multiGWAS/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9924840616319776,
      "result": {
        "original_header": "Implementation",
        "type": "Text_excerpt",
        "value": "Most of the code uses the R language. However, some scripts that calling the GWAS tools are writing in bash. The version of the four tools are GWASpoly 1.3 (R library), SHEsis 1.0 (binary program), PLINK 1.9 and 2.0 (binary programs), and TASSEL 5.0 (Java packages). PLINK 1.9 is used for GWAS analysis (association between SNPs and quantitative traits), and PLINK 2.0 is used to account for cryptic relatedness (estimating kinship coefficientes).\n \n"
      },
      "source": "https://raw.githubusercontent.com/agrosavia-bioinformatics/multiGWAS/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9523605851921316,
      "result": {
        "original_header": "Number of SNPs in Manhattan and QQ plots",
        "type": "Text_excerpt",
        "value": "The Manhattan and QQ plots for the different GWAS tools show a different number of markers (SNPs). Two reasons explain this pattern. First, the GWASpoly software uses four models for the marker effect (i.e., additive, general, simplex dominance, and duplex dominance). Therefore,  the plots show the SNPs four times, one for each model. Second, MultiGWAS is using scores instead of raw p-values, and scores are the -log10(p) results. So, when p-values are high, the scores have a negative value, and because the y-axes in the plot start in zero, they are not shown.\n \n"
      },
      "source": "https://raw.githubusercontent.com/agrosavia-bioinformatics/multiGWAS/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9430775045697966,
      "result": {
        "original_header": "Correction for multiple testing",
        "type": "Text_excerpt",
        "value": "MultiGWAS is using two methods for correction for multiple testing, the Bonferroni correction and adjusting the False Discovery Rate (FDR). MultiGWAS calculates the Bonferroni correction using the number of non-missing genotypes (NMISS) included in the analysis instead of the whole genotypes. Only SHEsis, PLINK, and TASSEL give the NMISS number. In contrast, GWASpoly does no show the NMISS number, but it uses it internally to calculate the corrections. \n"
      },
      "source": "https://raw.githubusercontent.com/agrosavia-bioinformatics/multiGWAS/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/agrosavia-bioinformatics/multiGWAS/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/agrosavia-bioinformatics/MultiGWAS/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "agrosavia-bioinformatics/MultiGWAS"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MultiGWAS Table of Contents"
      },
      "source": "https://raw.githubusercontent.com/agrosavia-bioinformatics/multiGWAS/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/agrosavia-bioinformatics/multiGWAS/master/old-INSTALL.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/agrosavia-bioinformatics/multiGWAS/master/UNINSTALL.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/agrosavia-bioinformatics/multiGWAS/master/INSTALL.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/agrosavia-bioinformatics/multiGWAS/master/sources/scripts/script-tassel-NaiveModel.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/agrosavia-bioinformatics/multiGWAS/master/sources/scripts/htmlToDOCx-pandoc.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/agrosavia-bioinformatics/multiGWAS/master/sources/scripts/script-plink-NaiveModel.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/agrosavia-bioinformatics/multiGWAS/master/sources/scripts/script-shesis-associations-qtl.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/agrosavia-bioinformatics/multiGWAS/master/sources/scripts/script-kinship-plink2.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/agrosavia-bioinformatics/multiGWAS/master/sources/scripts/script-plink-FullModel.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/agrosavia-bioinformatics/multiGWAS/master/sources/scripts/htmlToPDF-pandoc.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/agrosavia-bioinformatics/multiGWAS/master/sources/scripts/script-tassel-FullModel.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/agrosavia-bioinformatics/multiGWAS/master/install/install-R40.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/agrosavia-bioinformatics/multiGWAS/master/install/install-Java15.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/agrosavia-bioinformatics/multiGWAS/master/install/install-LinuxDeps.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/agrosavia-bioinformatics/multiGWAS/master/install/install-R36.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# MultiGWAS Table of Contents\n   * [MultiGWAS Table of Contents](#multigwas-table-of-contents)\n   * [Installation](#installation)\n      * [General steps to install multiGWAS on a Linux system](#general-steps-to-install-multigwas-on-a-linux-system)\n      * [Specific instructions to install multiGWAS on a Linux Ubuntu](#specific-instructions-to-install-multigwas-on-a-linux-ubuntu)\n         * [Install external software:](#install-external-software)\n         * [Install MultiGWAS tool:](#install-multigwas-tool)\n   * [Executing the MultiGWAS tool](#executing-the-multigwas-tool)\n      * [Using the command line interface:](#using-the-command-line-interface)\n      * [Using the graphical user interface:](#using-the-graphical-user-interface)\n   * [Running the examples](#running-the-examples)\n   * [General usage](#general-usage)\n   * [Genomic data formats](#genomic-data-formats)\n      * [Genotype:](#genotype)\n      * [Phenotype](#phenotype)\n   * [Configuration file](#configuration-file)\n   * [Considerations](#considerations)\n      * [Implementation](#implementation)\n      * [Number of SNPs in Manhattan and QQ plots](#number-of-snps-in-manhattan-and-qq-plots)\n      * [Correction for multiple testing](#correction-for-multiple-testing)\n\n## Full installation steps:\nWe provide two ready-to-use full installations: one for Ubuntu 18.xx and another for Ubuntu 20.xx.  For both installations, open a linux terminal, clone the MultiGWAS repository, change to the multiGWAS folder, and run the install script:\n\n### Ubuntu 18.xx\n  ```\n\tgit clone https://github.com/agrosavia-bioinformatics/multiGWAS-ubuntu18.git\n\tcd multiGWAS-ubuntu18\n\tsh INSTALL.sh \n  ```\n\n### Ubuntu 20.xx\n  ```\n\tgit clone https://github.com/agrosavia-bioinformatics/multiGWAS-ubuntu20.git\n\tcd multiGWAS-ubuntu20\n\tsh INSTALL.sh \n  ```\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/agrosavia-bioinformatics/multiGWAS/master/README-FullInstallation.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation of MultiGWAS",
        "type": "Text_excerpt",
        "value": "MultiGWAS is mainly implemented in R system with a graphical user interface implemented in Java. The installation requires both the source code of MultiGWAS and some pre-installed external software:  \n  - R system (>=3.6)\n  - Oracle java (>=8.0)\n  - Some R libraries \n  - Some linux libraries   \n\n\nWe provide three ways to install and run MultiGWAS:\n  - **Manual installation:** external software must be installed manually. \n  - **Virtual machine:** download a Linux virtual machine with a ready-to-use MultiGWAS.\n"
      },
      "source": "https://raw.githubusercontent.com/agrosavia-bioinformatics/multiGWAS/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Manual installation steps:",
        "parent_header": [
          "Installation of MultiGWAS"
        ],
        "type": "Text_excerpt",
        "value": "Open a linux terminal, clone the MultiGWAS repository, change to the MultiGWAS folder, and execute the following commands:\n\n**1. Clone the MultiGWAS repository**\n\n```\ngit clone https://github.com/agrosavia-bioinformatics/MultiGWAS.git\ncd MultiGWAS\nsh INSTALL.sh \n```\n**2. Install Linux dependencies**\n```\nsh install/install-LinuxDeps.sh\n```\n\n**3. Install R 3.6 (Ubuntu 18.xx) or R 4.0 (Ubuntu 20.xx)**\n\nFor Ubuntu 18.xx:\n\n```\nsh install/install-R36.sh\n```\n\nFor Ubuntu 20.xx:\n```\nsh install/install-R40.sh\n```\n\n**4. Install R libraries required for MultiGWAS**\n```\nRscript install/install-Rlibs.R\n```\n\n**5. Install Oracle Java 15 (if not installed a version of Oracle Java >=8.0)**\n```\nsh install/install-Java15.sh\n```\n"
      },
      "source": "https://raw.githubusercontent.com/agrosavia-bioinformatics/multiGWAS/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Virtual machine installation steps:",
        "parent_header": [
          "Installation of MultiGWAS"
        ],
        "type": "Text_excerpt",
        "value": "Download and run the ready-to-use Linux virtual machine created with VirtualBox ([MultiGWAS-vm](https://github.com/agrosavia-bioinfo/multiGWAS-vm)).\n"
      },
      "source": "https://raw.githubusercontent.com/agrosavia-bioinformatics/multiGWAS/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/agrosavia-bioinformatics/MultiGWAS/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MultiGWAS"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "agrosavia-bioinformatics"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 145554,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Java",
        "size": 66301,
        "type": "Programming_language",
        "value": "Java"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 18370,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 1243,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/agrosavia-bioinformatics/multiGWAS/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Executing the MultiGWAS tool",
        "type": "Text_excerpt",
        "value": "MultiGWAS can be executed by either a command line interface (CLI) developed in R or a graphical user interface (GUI) developed in Java.\n"
      },
      "source": "https://raw.githubusercontent.com/agrosavia-bioinformatics/multiGWAS/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Using the graphical user interface:",
        "parent_header": [
          "Executing the MultiGWAS tool"
        ],
        "type": "Text_excerpt",
        "value": "   - Open a linux console and simply enter\n       ```\n       jmultiGWAS\n       ```\n    - The GUI application is easy and straighforward. It includes four views:\n       - Inputs view:  to create the configuration file and start the execution of MultiGWAS\n       - Outputs view: to view the logs/messages from the current execution\n       - Results view: to view a preview of the HTML report.\n       - Files view:   to explore and open the results, including the original tables, graphics, and the full HTML report.\n\n"
      },
      "source": "https://raw.githubusercontent.com/agrosavia-bioinformatics/multiGWAS/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Using the command line interface",
        "parent_header": [
          "Executing the MultiGWAS tool"
        ],
        "type": "Text_excerpt",
        "value": "  - Open a Linux console\n  - Create a new folder (e.g. test)\n  - Create a new configuration file (e.g. test.config, see below)  and save it into the created folder.\n  - Run the CLI Multigwas program followed by the name of the configuration file:\n      ```\n      multiGWAS test.config\n      ```\n  - Open a file browser and view the results saved into the created folder (e.g. test/out-test/report/). They include:\n     - Full html report (file multiGWAS-report.html)\n     - Original graphics and tables generated by MultiGWAS.\n     - Preprocessed tables with the GWAS results from the four GWAS packages\n     "
      },
      "source": "https://raw.githubusercontent.com/agrosavia-bioinformatics/multiGWAS/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Running the examples",
        "type": "Text_excerpt",
        "value": "The multiGWAS folder contains the \"examples\" folder with genomic data files (genotype, phenotype, map) for different genotype formats: GWASpoly, KMatrix, VCF, FitPoly, and Updog. For each genotype format there is an example subfolder containing a configuration file (.config) with all the parameters set to typical values for a GWAS analysis.  Both genotype and phenotype come from the Solanaceae Coordinated Agricultural Project (SolCAP) potato diversity panel described in the paper. \n\nTo run an example with the multiGWAS tool, follow the next steps:\n - Open a Linux terminal\n - Change to the \"MultiGWAS\" folder\n - Change to the specific example subfolder \"examples/xxx-format\", where \"xxx\" is the name of the genotype format (e.g. gwaspoly, vcf, kmatrix, fitpoly, or updog)\n - List the files to see the name of the configuration file (.config)\n - Execute the **multiGWAS tool** using as argument the configuration file name: (e.g \"full-tetra-Filters-ADD.config\")\n\n  ```\n        multiGWAS full-tetra-Filters-ADD.config\n  ```\n - An output folder will be created named as \"out-YYYY\" where YYYY is the prefix of the configuration filename. For the above example, an \"out-full-tetra-Filters-ADD\" subfolder will be created with a subfolder with the name of the trait. Inside the trait folder there are the following files and folders: \n    - A \"multiGWAS-report.html\" file in HTML format with the full report from the multiGWAS results.\n    - A \"report\" subfolder with the resulting tables and graphics included in the previous report file.\n    - An \"out\" subfolder that contains temporary files created by multiGWAS and the other GWAS tools.\n    - A \"logs\" subfolder that contains the log outputs from the different tools.\n    "
      },
      "source": "https://raw.githubusercontent.com/agrosavia-bioinformatics/multiGWAS/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 04:51:31",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running the examples",
        "type": "Text_excerpt",
        "value": "The multiGWAS folder contains the \"examples\" folder with genomic data files (genotype, phenotype, map) for different genotype formats: GWASpoly, KMatrix, VCF, FitPoly, and Updog. For each genotype format there is an example subfolder containing a configuration file (.config) with all the parameters set to typical values for a GWAS analysis.  Both genotype and phenotype come from the Solanaceae Coordinated Agricultural Project (SolCAP) potato diversity panel described in the paper. \n\nTo run an example with the multiGWAS tool, follow the next steps:\n - Open a Linux terminal\n - Change to the \"MultiGWAS\" folder\n - Change to the specific example subfolder \"examples/xxx-format\", where \"xxx\" is the name of the genotype format (e.g. gwaspoly, vcf, kmatrix, fitpoly, or updog)\n - List the files to see the name of the configuration file (.config)\n - Execute the **multiGWAS tool** using as argument the configuration file name: (e.g \"full-tetra-Filters-ADD.config\")\n\n  ```\n        multiGWAS full-tetra-Filters-ADD.config\n  ```\n - An output folder will be created named as \"out-YYYY\" where YYYY is the prefix of the configuration filename. For the above example, an \"out-full-tetra-Filters-ADD\" subfolder will be created with a subfolder with the name of the trait. Inside the trait folder there are the following files and folders: \n    - A \"multiGWAS-report.html\" file in HTML format with the full report from the multiGWAS results.\n    - A \"report\" subfolder with the resulting tables and graphics included in the previous report file.\n    - An \"out\" subfolder that contains temporary files created by multiGWAS and the other GWAS tools.\n    - A \"logs\" subfolder that contains the log outputs from the different tools.\n    "
      },
      "source": "https://raw.githubusercontent.com/agrosavia-bioinformatics/multiGWAS/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "General usage",
        "type": "Text_excerpt",
        "value": "  - Create a new folder (e.g. \"test\" folder).\n  - Copy the phenotype and genotype files to new folder (see data formats below)\n  - Create a configuration file (e.g. test.config) and copy it to the new folder (see configuration file below)\n  - Open a Linux terminal\n  - Change to the new folder\n  - Execute the multiGWAS tool using as argument the configuration file\n```\n      multiGWAS test.config\n```\n  - Results will be saved in the \"out-test\" folder\n"
      },
      "source": "https://raw.githubusercontent.com/agrosavia-bioinformatics/multiGWAS/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example of a configuration file",
        "parent_header": [
          "Configuration file"
        ],
        "type": "Text_excerpt",
        "value": "This is the contents of a typical configuration file named as \"full-tetra.config\":\n```\ngenotypeFile         : example-genotype.tbl\nphenotypeFile        : example-phenotype.tbl\nmapFile              : \ngenotypeFormat       : gwaspoly\nsignificanceLevel    : 0.05\ncorrectionMethod     : Bonferroni\ngwasModel            : Naive\nnBest                : 10\nfiltering            : TRUE\nMAF                  : 0.01\nM IND                 : 0.1\nGENO                 : 0.1\nHWE                  : 1e-10\ntools                : GWASpoly SHEsis PLINK TASSEL\ngeneAction           : additive\n```"
      },
      "source": "https://raw.githubusercontent.com/agrosavia-bioinformatics/multiGWAS/master/README.md",
      "technique": "header_analysis"
    }
  ]
}