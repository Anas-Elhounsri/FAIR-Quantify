{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Fleishman-Lab/AbDesign_for_enzymes"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-06-01T07:24:17Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-07-23T09:14:10Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Scripts and data to run AbDesign as described in Tools for protein science 2021"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9614244760668765,
      "result": {
        "original_header": "AbDesign for enzymes",
        "type": "Text_excerpt",
        "value": "Scripts and data to run AbDesign as described in Tools for protein science 2021.   \nBelow I'll describe the different steps, data needed and example command lines to generate a repertoire of structures for the GH10 xylanase family. Steps 2-4 are using PDB accession number 4pud as an example but should be repeated for each of the structures of the chosen protein family.\nTo run the following, you are required to install:\n  * python > 3.5 \n  * Rosetta (free for academic users)\n  * PyMOL \n \n"
      },
      "source": "https://raw.githubusercontent.com/Fleishman-Lab/AbDesign_for_enzymes/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.936078242815931,
      "result": {
        "original_header": "1 Structures and Segmentation scheme",
        "type": "Text_excerpt",
        "value": "The list of xylanase structures was taken from [here](http://www.cazy.org/GH10_structure.html). The structures could be downloaded using the following command:   \n```bash\n./utils/get_pdb.py 3w24 4pud #space separated list of pdb IDs \n```\nAll structures must be aligned to the template structure, which can be done using the **alignto** command in PyMOL. Then, the segmentation points should be selected.   \nA few suggestions for selecting segmentation points:\n   1. different segments should correspond to modular fragments- in TIM-barrel for example it would be different beta-alpha blades \n   2. the cut points should be perfectly aligned among **all** fragments in order to generate continuous backbones\n   3. If two segments have many interaction among them, consider combining them into a single larger segment\n   4. A large segment could be breaken up into two smaller ones in order to generate more possible diversity\n \n"
      },
      "source": "https://raw.githubusercontent.com/Fleishman-Lab/AbDesign_for_enzymes/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8692579143486436,
      "result": {
        "original_header": "3.1 Initial crude fragment extraction",
        "type": "Text_excerpt",
        "value": "*Segmentation point selection*: After we define the segmentation scheme in step 1, here we start by a rough segmentation (to be further refined in following steps). Say we want a segment starting at residue X and ending at residues Y, we will start from X-3 and Y+3.    \nThe segmentation points in this step are (numbering corresponds to template structure pdbID: 3w24):\n| Segment | start | end |\n| :---: | :---: | :---: |\n| 1 | 19 | 47 |\n| 2-4 | 44 | 189 |\n| 5-6 | 183 | 256 |\n| 7-8 | 246 | 324 | \n"
      },
      "source": "https://raw.githubusercontent.com/Fleishman-Lab/AbDesign_for_enzymes/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9781752249396226,
      "result": {
        "original_header": "4 PSSM",
        "type": "Text_excerpt",
        "value": "First, you need to generate a PSSM for each of the structures of your protein family. We used PSSM generated by [PROSS](https://pross.weizmann.ac.il/step/pross-terms/) (details in the paper).  \nThe following command extracts a sub-PSSM, matching a fragment of the protein:\n```bash\n./pssm/cut_pssm_for_fragment.py backbone_database/fbm_blade1_4pud.pdb pssm/4pud.pssm\n```\nThe output pssm is *fbm_blade1_4pud.pssm*.     \n**Time estimation**: A full PSSM creation can take up to 1 hour (due to a BLAST search). Extracting a sub-PSSM takes a few seconds.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Fleishman-Lab/AbDesign_for_enzymes/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9373986970483665,
      "result": {
        "original_header": "7. Frequent debugging issues",
        "type": "Text_excerpt",
        "value": "  1. Misalignment of segments (overlaps, or discontinues backbone formation). \n  2. The *comments* section in the template pdb do not match the segments section in the .xml file.\n  3. *flags_pssm* file includes a newline or a whitespace. Make sure to include full paths to pssm files.\n  4. There is a difference in capitalization of the \u201cSegment\u201d section between spliceOut and SpliceIn movers. See example torsions_database/splice_out.xml vs. backbone_assembly/splice_in.xml    \n  \n  For any bugs/questions please write to: rosalie.lipsh@weizmann.ac.il\n \n"
      },
      "source": "https://raw.githubusercontent.com/Fleishman-Lab/AbDesign_for_enzymes/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Fleishman-Lab/AbDesign_for_enzymes/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Fleishman-Lab/AbDesign_for_enzymes/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Fleishman-Lab/AbDesign_for_enzymes"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "AbDesign for enzymes"
      },
      "source": "https://raw.githubusercontent.com/Fleishman-Lab/AbDesign_for_enzymes/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9585956704159055,
      "result": {
        "original_header": "AbDesign for enzymes",
        "type": "Text_excerpt",
        "value": "Scripts and data to run AbDesign as described in Tools for protein science 2021.   \nBelow I'll describe the different steps, data needed and example command lines to generate a repertoire of structures for the GH10 xylanase family. Steps 2-4 are using PDB accession number 4pud as an example but should be repeated for each of the structures of the chosen protein family.\nTo run the following, you are required to install:\n  * python > 3.5 \n  * Rosetta (free for academic users)\n  * PyMOL \n \n"
      },
      "source": "https://raw.githubusercontent.com/Fleishman-Lab/AbDesign_for_enzymes/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9238832652570091,
      "result": {
        "original_header": "3.1 Initial crude fragment extraction",
        "type": "Text_excerpt",
        "value": "*Segmentation point selection*: After we define the segmentation scheme in step 1, here we start by a rough segmentation (to be further refined in following steps). Say we want a segment starting at residue X and ending at residues Y, we will start from X-3 and Y+3.    \n"
      },
      "source": "https://raw.githubusercontent.com/Fleishman-Lab/AbDesign_for_enzymes/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9971499194236526,
      "result": {
        "original_header": "3.2 Refinement of fragment alignment to template",
        "type": "Text_excerpt",
        "value": "In the command below, the fragment from step 2.1 is being matched to the fragment 1 from the template\n```bash \npymol -c ./backbone_database/find_best_match.py template_data/blade1_template.pdb backbone_database/blade1_4pud.pdb.gz\n```\nThe resulting pdb file will be located at *pdbs/fbm_blade1_4pud.pdb*.   \n**Time estimation**: a few seconds per structure.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Fleishman-Lab/AbDesign_for_enzymes/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Fleishman-Lab/AbDesign_for_enzymes/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "AbDesign_for_enzymes"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "Fleishman-Lab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 10684,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Fleishman-Lab/AbDesign_for_enzymes/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 16:57:40",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 9
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ]
}