{
  "application_domain": [
    {
      "confidence": 36.32,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    },
    {
      "confidence": 6.25,
      "result": {
        "type": "String",
        "value": "Audio"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/wmalab/EnHiC"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "EnHiC: Learning fine-resolution Hi-C contact maps using a generative adversarial framework",
        "type": "Text_excerpt",
        "value": "\n- [EnHiC: Learning fine-resolution Hi-C contact maps using a generative adversarial framework](#enhic-learning-fine-resolution-hi-c-contact-maps-using-a-generative-adversarial-framework)\n  - [About](#about)\n  - [TODO](#todo)\n  - [Setup](#setup)\n  - [Data Preparation](#data-preparation)\n  - [Traning and Prediction](#traning-and-prediction)\n  - [TensorBoard](#tensorboard)\n  - [Demo Test](#demo-test)\n\n"
      },
      "source": "https://raw.githubusercontent.com/wmalab/EnHiC/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "About",
        "parent_header": [
          "EnHiC: Learning fine-resolution Hi-C contact maps using a generative adversarial framework"
        ],
        "type": "Text_excerpt",
        "value": "We develop a new GAN-based model, namely EnHiC, to enhance the resolution of Hi-C contact frequency matrices. Specifically, we propose a novel convolutional layer _Decomposition & Reconstruction Block_ which accounts for the non-negative symmetric property of Hi-C matrices. In our GAN framework, the generator extracts rank-1 features from different scales of low-resolution matrices and predicts the high-resolution matrix via subpixel CNN layers.\n\n> Hu, Yangyang, and Wenxiu Ma. \"[EnHiC: learning fine-resolution Hi-C contact maps using a generative adversarial framework](https://academic.oup.com/bioinformatics/article/37/Supplement_1/i272/6319704).\" *Bioinformatics* 37.Supplement_1 (2021): i272-i279.\n\n---\n"
      },
      "source": "https://raw.githubusercontent.com/wmalab/EnHiC/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "TODO",
        "parent_header": [
          "EnHiC: Learning fine-resolution Hi-C contact maps using a generative adversarial framework"
        ],
        "type": "Text_excerpt",
        "value": "- [ ] Keep updating the document and cleaning code \n- [x] Fix the format in GitHub markdown\n- [ ] Clean and optimize the model\n  \n---\n"
      },
      "source": "https://raw.githubusercontent.com/wmalab/EnHiC/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Traning and Prediction",
        "parent_header": [
          "EnHiC: Learning fine-resolution Hi-C contact maps using a generative adversarial framework"
        ],
        "type": "Text_excerpt",
        "value": "We provide the trained model for data _Rao2014-GM12878-MboI-allreps-filtered.10kb.cool_ at _./pretrained_model/_ with 3 sizes (80, 200, 400)\n\n**Example**\n```\nfrom EnHiC import model\ngan_model_weights_path = os.path.join('.', 'pretrained_model', 'gen_model_400', 'gen_weights')\nGenerator = model.make_generator_model(len_high_size=400, scale=4)\nGenerator.load_weights(gan_model_weights_path)\n```\n\nOr you can train your own model.\n\n**Training**\nWe provide the API function for training data in EnHiC/fit.py\n> def train(train_data, valid_data, len_size, scale, EPOCHS, root_path='./', load_model_dir=None, saved_model_dir=None, log_dir=None, summary=False)<br/>\n> __train_data__: Tensor in format of tensorflow Dataset (None, len_size, len_size, 1) e.g.(None, 400, 400, 1)<br/>\n> __valid_data__: Tensor in format of tensorflow Dataset (None, len_size, len_size, 1) e.g.(None, 400, 400, 1)<br/>\n> __len_size__: default: 400. The size of sample must be multiples of 4. e.g. 100, 200, 400.<br/>\n> __scale__: the scale of resolution to enhance, e.g. 40kb->10kb: 4, 100kb->10kb: 10<br/>\n> __EPOCHS__: number of steps, e.g. 300<br/>\n> __root_path__: the directory that to save/load model and log<br/>\n> __load_model_dir__: the directory to load exsiting model to continue the training, default is None which means to build a new one <br/>\n> __saved_model_dir__: the directory to save model, if it None. The model will be save to root_path/saved_model/gen_model_[len_size]/gen_weights or root_path/saved_model/dis_model_[len_size]/dis_weights <br/>\n> __log_dir__: the directory to save model, if it None. The model will be save to root_path/logs <br/>\n> __summary__: print the summary of model, default is False<br/>\n\n```\nfrom EnHiC import fit\nfit.train(train_data=train_data, valid_data=valid_data, \n          len_size=400, scale=4, EPOCHS=300, \n          root_path='./', load_model_dir=None, saved_model_dir=None, log_dir=None,\n          summary=True)\n```\n\n**Prediction**\nWe provide the API function for prediction in EnHiC/fit.py\n\n> def predict(model_path, len_size, scale, ds)\n>\n>__model_path__: the directory to load exsiting generator model e.g. saved_model/gen_model_[len_size]/gen_weights <br/>\n> __len_size__: default: 400. The size of sample must be multiples of 4. e.g. 100, 200, 400. <br/>\n> __scale__: the scale of resolution to enhance, e.g. 40kb->10kb: 4, 100kb->10kb: 10 <br/>\n> __ds__: Tensor in format of tensorflow Dataset (None, len_size, len_size, 1) e.g.(None, 400, 400, 1) <br/>\n\n```\nfrom EnHiC import fit\nmpath = os.path.join(root_dir,'saved_model', 'gen_model_{}'.format(len_size), 'gen_weights')\nfit.predict(model_path = mpath, len_size=400, scale=4, ds)\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/wmalab/EnHiC/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "TensorBoard",
        "parent_header": [
          "EnHiC: Learning fine-resolution Hi-C contact maps using a generative adversarial framework"
        ],
        "type": "Text_excerpt",
        "value": "We log training data and visualize it by [TensorBoard](https://www.tensorflow.org/tensorboard/get_started).\n```\ntensorboard --logdir=[path-to]/EnHiC/logs/model/\n```\nor \n```\ntensorboard --logdir=[path-to]/EnHiC/logs/model/ --port=${port} --host=${node} --samples_per_plugin images=50\n```\n\n---\n"
      },
      "source": "https://raw.githubusercontent.com/wmalab/EnHiC/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-01-26T23:39:04Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-03-07T14:54:21Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Enhancing Hi-C matrix resolution"
      },
      "technique": "GitHub_API"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/wmalab/EnHiC/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/wmalab/EnHiC/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "wmalab/EnHiC"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "EnHiC: Learning fine-resolution Hi-C contact maps using a generative adversarial framework"
      },
      "source": "https://raw.githubusercontent.com/wmalab/EnHiC/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://render.githubusercontent.com/render/math?math=\\frac{n}{2}\\times\\frac{n}{2}"
      },
      "source": "https://raw.githubusercontent.com/wmalab/EnHiC/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://render.githubusercontent.com/render/math?math=n\\times{n}"
      },
      "source": "https://raw.githubusercontent.com/wmalab/EnHiC/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://render.githubusercontent.com/render/math?math=(i,i)"
      },
      "source": "https://raw.githubusercontent.com/wmalab/EnHiC/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://render.githubusercontent.com/render/math?math=(j,j)"
      },
      "source": "https://raw.githubusercontent.com/wmalab/EnHiC/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://render.githubusercontent.com/render/math?math=(i,j)"
      },
      "source": "https://raw.githubusercontent.com/wmalab/EnHiC/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://render.githubusercontent.com/render/math?math=n\\times{n}"
      },
      "source": "https://raw.githubusercontent.com/wmalab/EnHiC/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://render.githubusercontent.com/render/math?math=(len_{size}\\times{len_{size}})"
      },
      "source": "https://raw.githubusercontent.com/wmalab/EnHiC/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Setup",
        "parent_header": [
          "EnHiC: Learning fine-resolution Hi-C contact maps using a generative adversarial framework"
        ],
        "type": "Text_excerpt",
        "value": "**Anaconda Pyrhon**\n\nWe provide a Conda environment for running EnHiC, use the environment.yml file, which will install all required dependencies:\n> conda env create -f environment.yaml\n\nActivate the new environment: \n>conda activate env_EnHiC \n\n---\n"
      },
      "source": "https://raw.githubusercontent.com/wmalab/EnHiC/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Data Preparation",
        "parent_header": [
          "EnHiC: Learning fine-resolution Hi-C contact maps using a generative adversarial framework"
        ],
        "type": "Text_excerpt",
        "value": "As we described in the paper, our model require the input samples are symmeric.\n> The EnHiC divides the Hi-C matrix into non-overlapping sub-matrices in size of ![formula](https://render.githubusercontent.com/render/math?math=\\frac{n}{2}\\times\\frac{n}{2}). and then pick out 3 sub-matrices(2 on the diagonal and 1 off diagonal) to combine one sub-matrix in size of ![formula](https://render.githubusercontent.com/render/math?math=n\\times{n}). For example, the 2 sub-matrices on the diagonal are ![formula](https://render.githubusercontent.com/render/math?math=(i,i)) and ![formula](https://render.githubusercontent.com/render/math?math=(j,j)) and the off diagonal sub-matrix is ![formula](https://render.githubusercontent.com/render/math?math=(i,j)) so that all ![formula](https://render.githubusercontent.com/render/math?math=n\\times{n}) sub-matrices are symmetric. In this section, we select n=400 for EnHiC.\n\nWe provide funtions in utils/operations.py\uff0c more details please check the demo test.\n```\noperations.divide_pieces_hic(hic_matrix, block_size=400, max_distance=None, save_file=False, pathfile=None)\noperations.merge_hic(hic_lists, index_1D_2D, max_distance=None)\n```\n\n---\n"
      },
      "source": "https://raw.githubusercontent.com/wmalab/EnHiC/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/wmalab/EnHiC/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2021 Wenxiu Ma Lab @ UCR\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/wmalab/EnHiC/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "EnHiC"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "wmalab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 104067,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 3056,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/wmalab/EnHiC/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 05:14:15",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Demo Test",
        "parent_header": [
          "EnHiC: Learning fine-resolution Hi-C contact maps using a generative adversarial framework"
        ],
        "type": "Text_excerpt",
        "value": "We shows the Demo based on _Rao2014-GM12878-MboI-allreps-filtered.10kb.cool_ (same in our paper, around 1.5Gb)<br/>\n\n**Data preprocessing**\nThe script _test_preprocessing.py_ prepares the dataset for training. if file doesn't exsit, the script will download it from [MIT Hi-C database](ftp://cooler.csail.mit.edu/coolers/hg19/) to \n_[path-to]/EnHiC/data/raw/Rao2014-GM12878-MboI-allreps-filtered.10kb.cool_\n\nThen the script will call _[path-to]/EnHiC/EnHiC/prepare_data.py_ to divide the Hi-C matrix into samples in the size of ![formula](https://render.githubusercontent.com/render/math?math=(len\\_{size}\\times{len\\_{size}})) within the *genomice_distance*. The samples are saved at \n_[path-to]/EnHiC/data/_ .\n__Usage__:\n> test_preprocessing.py [chromosome] [len_size] [genomic_distance]\n> __chromosome__: the index of chromosome. e.g. 1, 2, 3, ... , 22, X <br/>\n> __len_size__: default: 400. The size of sample must be multiples of 4. e.g. 100, 200, 400.<br/>\n> __genomic_distance__: default 2000000 (2Mb) <br/>\n\n__Example__:\n```\n> (env_EnHiC)>> python test_preprocessing.py 1 400 2000000\n> (env_EnHiC)>> python test_preprocessing.py 22 400 2000000\n```\n\n**Training**\nThe script _test_train.py_ trains the dataset. The EPOCHS, BATCH_SIZE and chromosome list for training and validation are all configured in the script. It calls _fit.train_ after loading training data.\nAs a demo, EPOCHS=100, BATCH_SIZE=9, train_chr_list=['22']\n\n__Usage__:\n> test_train.py [len_size] [genomic_distance] <br/>\n> __len_size__: default: 400. The size of sample must be multiples of 4. e.g. 100, 200, 400. <br/>\n> __genomic_distance__: default 2000000 (2Mb) <br/>\n\n__Example__:\n```\n>> conda activate env_EnHiC\n> (env_EnHiC)>> python test_preprocessing.py 22 400 2000000\n> (env_EnHiC)>> python test_train.py 400 2000000\n```\n\n**Prediction**\nThe script test_predict.py shows the demo to predict Hi-C low resoltion by EnHiC. \n* Load 10kb Hi-C from cool file\n* Downsample 10kb to 40kb\n* Divide into samples in the size of $( len\\_size \\times len\\_size)$ within the $genomice\\_distance$\n* Predict low resolution Hi-C samples\n* Combine the samples back into one matrix\n\n  __Usage__:\n> test_predict.py [chromosome] [len_size] [genomic_distance] <br/>\n> __chromosome__: the index of chromosome. e.g. 1, 2, 3, ... , 22, X<br/>\n> __len_size__: default: 400. The size of sample must be multiples of 4. e.g. 100, 200, 400.<br/>\n> __genomic_distance__: default 2000000 (2Mb)\n\n__Example__:\n```\n>> conda activate env_EnHiC\n> (env_EnHiC)>> python test_predict.py 22 400 2000000\n```\n\n---\n"
      },
      "source": "https://raw.githubusercontent.com/wmalab/EnHiC/main/README.md",
      "technique": "header_analysis"
    }
  ]
}