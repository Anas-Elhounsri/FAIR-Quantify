{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/TomSkelly/PacBioEDA"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2012-01-06T19:35:57Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-07-01T20:53:37Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Python scripts for Exploratory Data Analysis of Pacific Biosciences sequence data"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9326593830493647,
      "result": {
        "type": "Text_excerpt",
        "value": "\nThis is a tools package for performing fairly low-level exploratory\ndata analysis on sequence data from a Pacific Biosciences instrument. \nThe scripts are in Python, since that seems to be the native language\nof PacBio. Keep in mind that I'm a Python newbie, so they will not be\nas idiomatically correct as I'd like. \nAs of February 2013, I've moved from the Sanger Institute to the\nFrederick (MD) National Laboratory for Cancer Research. My new email\nis below. \nThat will create a subdirectory called TomSkelly-PacBioEDA-<version>\ncontaining the scripts. (You'll probably want to create a link to that\ndirectory with a more meaningful name.) The only further configuration\nrequired is to tell the scripts where to find the supporting Python\nmodules they require, as described in the next section. \nNote that, in particular, the python executable itself (which the\nscripts find via $PATH) should be the one supplied in the smrtanalysis\nrelease (currently python 2.5, moving to 2.7 in PacBio release\n1.3.0). If you mix and match (even different installations of v2.5),\nyou may see obscure errors having to do with UTF8 encodings. Use the\nrun_pac script to get all this right. \nOffsets printed are zero-based. Start-stop intervals are printed\npython-style: The interval 0-10 is ten bases long, and its last base\nis offset 9. \nAlignment coordinates against a reference genome used to be a stated\nexception to this rule. But it turns out that the alignment start/stop\noffsets in a cmp.h5 file are zero-based. (I just discovered this --\nsorry!) Rather than go fixing this by adding bunch of +1's everywhere\nin the code, let's just let alignment offsets join the 0-based club\nalong with everything else. \nPython script to print summary information about the contents of a\n*.bas.h5 file, as produced by the PacBio instrument. Provides counts\nof reads, subreads and bases for a hierarchy of increasingly\nrestrictive subsets of subreads: \nAll of the above except average insert size are criteria applied by\nthe filtering step of secondary analysis. \nPrint detailed data from *.bas.h5 file and (optionally) the *.cmp.h5\nalignments file on a region-by-region basis. If a cmp.h5 file is\nsupplied, it prints the alignment outcome for each region. First\nparameter is input *.bas.h5 file. Optional second parameter is\n*.cmp.h5 file. Output is to stdout, redirect with >. \nThe main reason for the existence of this script is to convince\nmyself that I understand how filtering works. But it also provides a\nquick way to extract a set of reads from a .bas.h5 file. \nThe option to produce a fastq file is not easily available elsewhere\n(as of SMRTanalysis 1.2.3). It uses the QualityValue field from the\nbas.h5 data, and ascii-encodes it as Q+33. \nPlot the number of ZMWs in pre-HQ, HQ, and post-HQ status as a\nfunction of time. \nCreate a time-stepped series of plots showing the spatial\ndistribution on the SMRTcell of ZMWs in their HQ regions. \nCreate a plot of ZMW status by x/y position on the SMRTcell. First\nparameter is input hdf5 file. Output png file is optional command\nline parameter, defaulting to XY.png. \nCreate a plot of ZMW productivity by x/y position on the\nSMRTcell. First parameter is input .bas.h5 file. Output png file is\noptional command line parameter, defaulting to productivity.png. \nRead a PacBio bas.h5 file, extract the sequence for a ZMW specified\non the command line, align it to the adapter sequence, and output a\nplot of Smith-Waterman alignment scores at each position in the\nread. By default, output is to file ZMW-zzzzz.png, where zzzzz is\nthe zero-padded ZMW number -- this can be overridden on the command\nline. Optional command line parameters specify a 0-based inclusive\nrange of bases within the read. \nRead a PacBio bas.h5 file, print a range of sequence from a specified\nZMW in fasta format. Command line parameters are bas.h5 file name and\nZMW#. Options include 0-based start and stop offsets. \nDump a generic hdf5 file. Doesn't know anything about PacBio\nformats. First (only) parameter is input hdf5 file. Output is to\nstdout. \nPackage for accessing data from PacBio cmp.h5 alignment files. \nPython module implementing a Smith-Waterman aligner with fixed gap\npenalty. NOTE: This is not going to be fast! It's intended for small\njobs like finding adapters. We need a C version for the heavy lifting. \nTiny module setting up parameters for Python logger for use by these\nscripts.\n \n"
      },
      "source": "https://raw.githubusercontent.com/TomSkelly/PacBioEDA/master/README",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/TomSkelly/PacBioEDA/wiki"
      },
      "source": "https://raw.githubusercontent.com/TomSkelly/PacBioEDA/master/README",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/TomSkelly/PacBioEDA/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/TomSkelly/PacBioEDA/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "TomSkelly/PacBioEDA"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/TomSkelly/PacBioEDA/master/README",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9496748525768222,
      "result": {
        "type": "Text_excerpt",
        "value": "\nHow to install:\n~~~~~~~~~~~~~~ \nInstallation is trivial: Just untar the tar file to a location of your\nchoice. At the Linux command line: \n   cd MyFavouriteDirectory\n   tar -xzvf TomSkelly-PacBioEDA-e1e8636.tar.gz \n(with e1e8636 replaced by the current github version id of the file\nyou downloaded). \nThat will create a subdirectory called TomSkelly-PacBioEDA-<version>\ncontaining the scripts. (You'll probably want to create a link to that\ndirectory with a more meaningful name.) The only further configuration\nrequired is to tell the scripts where to find the supporting Python\nmodules they require, as described in the next section. \n\nHow to run:\n~~~~~~~~~~ \nIn theory, the scripts can be run directly from the command\nline. However, they need to be told where to find the relevant Python\npackages (my modules, plus numpy, matplotlib, h5py, etc). You could do\nthat by permanently setting the PATH, PYTHONPATH, and LD_LIBRARY_PATH\nenvironment variables in your shell profile. But it's probably easier\nto run the scripts via the run_pac shell script included here. The\nsettings in run_pac are a subset of those in\nsmrtanalysis/etc/setup.sh. run_pac sets the appropriate environment\nvariables, then invokes the python script you specify. You'll need to\nmodify run_pac in a couple of places (indicated by comments) to point\nto your installation directories. \nNote that, in particular, the python executable itself (which the\nscripts find via $PATH) should be the one supplied in the smrtanalysis\nrelease (currently python 2.5, moving to 2.7 in PacBio release\n1.3.0). If you mix and match (even different installations of v2.5),\nyou may see obscure errors having to do with UTF8 encodings. Use the\nrun_pac script to get all this right. \n\nModules:\n~~~~~~~ \nPackage for accessing data from PacBio cmp.h5 alignment files. \n"
      },
      "source": "https://raw.githubusercontent.com/TomSkelly/PacBioEDA/master/README",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8878194800648199,
      "result": {
        "type": "Text_excerpt",
        "value": "    run_pac PacBio_FindAdapt.py --nocol MyBasFile.bas.h5 6789 \n* PacBio_BasSummary.py: \nInputs are a .bas.h5 file and (optionally) a .cmp.h5 file, specified\nas command line parameters. Filtering parameters can be overridden\non the command line. See the --help option for details. Output is to\nstdout. \n\n* PacBio_Bas.py: \n\n* PacBio_BasFilteredSubreads.py: \nPython script to extract filtered subreads from a bas.h5 file, and\nwrite them to a fasta (or, optionally, fastq) file. By default, it\nwill reproduce the sec/data/filtered_subreads.fasta file for the set\ndescribed by the input .bas.h5 file. Different filtering parameters\ncan be specified as command line parameters. \n\n* PacBio_HQ.py \n\n* PacBio_HQHistory.py \n* PacBio_XY.py \nCreate a plot of ZMW status by x/y position on the SMRTcell. First\nparameter is input hdf5 file. Output png file is optional command\nline parameter, defaulting to XY.png. \n\n* PacBio_Productivity.py \nCreate a plot of ZMW productivity by x/y position on the\nSMRTcell. First parameter is input .bas.h5 file. Output png file is\noptional command line parameter, defaulting to productivity.png. \n\n* PacBio_FindAdapt.py: \n\n* PacBio_FullInsert.py: \n\n* PacBio_Show.py: \nRead a PacBio bas.h5 file, print a range of sequence from a specified\nZMW in fasta format. Command line parameters are bas.h5 file name and\nZMW#. Options include 0-based start and stop offsets. \n\n* PacBio_Dump.py: \n* H5BasFile.py: \n\n* H5CmpFile.py: \n\n* SWAligner.py: \n\n* tt_log.py: \n"
      },
      "source": "https://raw.githubusercontent.com/TomSkelly/PacBioEDA/master/README",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/TomSkelly/PacBioEDA/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "GNU General Public License v3.0",
        "spdx_id": "GPL-3.0",
        "type": "License",
        "url": "https://api.github.com/licenses/gpl-3.0",
        "value": "https://api.github.com/licenses/gpl-3.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PacBioEDA"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "TomSkelly"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 126586,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 1167,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/TomSkelly/PacBioEDA/master/README"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 07:55:32",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 18
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ]
}