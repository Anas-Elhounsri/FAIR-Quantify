{
  "application_domain": [
    {
      "confidence": 14.43,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/daifengwanglab/deepManReg"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-12-28T03:59:23Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-08-28T12:13:27Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Summary",
        "parent_header": [
          "deepManReg: a deep manifold-regularized learning model for improving phenotype prediction from multi-modal data"
        ],
        "type": "Text_excerpt",
        "value": "The phenotypes of complex biological systems are fundamentally driven by various multi-scale mechanisms. Increasing multi-modal data enables a deeper understanding of underlying complex mechanisms across scales for the phenotypes such as single cell multi-omics data for cell types. However, integrating and interpreting such large-scale multi-modal data remains challenging, especially given highly heterogeneous, nonlinear relationships across modalities. To address this, we developed an interpretable regularized learning model, deepManReg to predict phenotypes from multi-modal data. First, deepManReg employs deep neural networks to learn cross-modal manifolds and then align multi-modal features onto a common latent space. This space aims to preserve both global consistency and local smoothness across modalities and to reveal higher-order nonlinear cross-modal relationships. Second, deepManReg uses cross-modal manifolds as a feature graph to regularize the classifiers for improving phenotype predictions and also prioritizing the multi-modal features and cross-modal interactions for the phenotypes. We applied deepManReg to (1) the image data of handwritten digits with multi-features and (2) recent single cell multi-modal data (Patch-seq data) including transcriptomics and electrophysiology for neuronal cells in the mouse brain. After comparing with the state-of-the-arts, we show that deepManReg has significantly improved predicting phenotypes in both datasets, and also prioritized genes and electrophysiological features for the phenotypes of neuronal cells \n"
      },
      "source": "https://raw.githubusercontent.com/daifengwanglab/deepManReg/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/daifengwanglab/deepManReg/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/daifengwanglab/deepManReg/main/deepManReg/network_reconstruction_comparison.ipynb"
      },
      "source": "https://raw.githubusercontent.com/daifengwanglab/deepManReg/main/deepManReg/network_reconstruction_comparison.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/daifengwanglab/deepManReg/main/visual_sample/code/phase1_matcher.ipynb"
      },
      "source": "https://raw.githubusercontent.com/daifengwanglab/deepManReg/main/visual_sample/code/phase1_matcher.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/daifengwanglab/deepManReg/main/visual_sample/code/phase2.ipynb"
      },
      "source": "https://raw.githubusercontent.com/daifengwanglab/deepManReg/main/visual_sample/code/phase2.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/daifengwanglab/deepManReg/main/visual_sample/code/phase1.ipynb"
      },
      "source": "https://raw.githubusercontent.com/daifengwanglab/deepManReg/main/visual_sample/code/phase1.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/daifengwanglab/deepManReg/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "daifengwanglab/deepManReg"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "deepManReg: a deep manifold-regularized learning model for improving phenotype prediction from multi-modal data"
      },
      "source": "https://raw.githubusercontent.com/daifengwanglab/deepManReg/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/daifengwanglab/deepManReg/main/figures/workflow.png"
      },
      "source": "https://raw.githubusercontent.com/daifengwanglab/deepManReg/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "deepManReg: a deep manifold-regularized learning model for improving phenotype prediction from multi-modal data"
        ],
        "type": "Text_excerpt",
        "value": "This script need no installation, but has the following requirements:\n* PyTorch 0.4.1 or above\n* Python 3.6.5 or above\n"
      },
      "source": "https://raw.githubusercontent.com/daifengwanglab/deepManReg/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Sample set: 3654 cells in the mouse visual cortex",
        "parent_header": [
          "deepManReg: a deep manifold-regularized learning model for improving phenotype prediction from multi-modal data",
          "Demo for aligning and classifying single-cell multi-modal data"
        ],
        "type": "Text_excerpt",
        "value": "We provided a multi-modal data set from mouse visual cortex to test our method.\n\n-  `/visual_sample/phase1.ipynb` calculates the deep manifold alignemnt feature latent space.\n-  `/visual_sample/phase2.ipynb` compares the accuracy of DeepManReg with other methods in terms of classifying cell layers and cell t-types, by fitting a regularized neruon network.\n-  `/visual_sample/boxplot_visual.r` draws the boxplot out of output accuracys in phase 2.\n-  `/visual_sample/igraph_visual.r` draws the igraph for phase 1 feature latent space.\n\nA demo for aligning and aligning single-cell multi-modal data is available at `/visual_sample/phase1.ipynb` and `/visual_sample/phase2.ipynb` for a Patch-seq dataset (3654 cells) in the mouse visual cortex (https://github.com/berenslab/layer4). The input data includes the gene expression levels and electrophysiological features of these cells in a rda file. Also, we provide a list of neuronal marker genes as select gene features. The code performs alignment on a reduced-dimensional space on single-cell electrophysiological data and gene expression with three major methods: deepManReg, Linear manifold alignment (NMA), Canonical correspondence analysis (CCA) and MATCHER.  The expected output includes the visualization of the latent space after each alignment method. The total running time of this demo was a couple of hours on a local laptop, which includes both alignment (Phase 1) and regularized classification (Phase 2). Phase 2 actually took most of the time, which did not vary across methods. The major difference of the running times between deepManReg and others happened in Phase 1 - Alignment: CCA (725.96 seconds), Manifold Alignment (663.43 seconds), MATCHER (150.94 seconds), and deepManReg (57.90 seconds by GPUs GTX 1060Ti and 90.10 seconds by CPU i5-8250U).\n\nOthers plots can be generated through the following codes files: `igraph_visual.Rmd` visualizes the gene regulatory network by igraph for each cluster; `boxplot_visual.Rmd` visualizes the boxplot comparing classification results between deepManReg and other methods, e.g., CCA, Linear Manifold Alignment, MATCHER.\n"
      },
      "source": "https://raw.githubusercontent.com/daifengwanglab/deepManReg/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/daifengwanglab/deepManReg/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "parent_header": [
          "deepManReg: a deep manifold-regularized learning model for improving phenotype prediction from multi-modal data"
        ],
        "type": "Text_excerpt",
        "value": "MIT License\n\nCopyright (c) 2020\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/daifengwanglab/deepManReg/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "deepManReg"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "daifengwanglab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 429472,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 24084,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 915,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/daifengwanglab/deepManReg/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-06 09:44:47",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 16
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "deepManReg: a deep manifold-regularized learning model for improving phenotype prediction from multi-modal data"
        ],
        "type": "Text_excerpt",
        "value": "Import libraries\n\n```python\nimport numpy as np\nimport scipy.spatial.distance as sd\nfrom deepManReg.neighborhood import neighbor_graph, laplacian\nfrom deepManReg.correspondence import Correspondence\nfrom deepManReg.stiefel import *\nfrom deepManReg.deepManReg import *\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\n```\n"
      },
      "source": "https://raw.githubusercontent.com/daifengwanglab/deepManReg/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Phase 1: Deep Manifold Alignment",
        "parent_header": [
          "deepManReg: a deep manifold-regularized learning model for improving phenotype prediction from multi-modal data",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "First, define the two neural networks which are the same as in this case:\n\n```python\nclass Net(nn.Module):\n    def __init__(self, D_in, H1, H2, D_out):\n        super(Net, self).__init__()\n        self.linear1 = torch.nn.Linear(D_in, H1)\n        self.linear2 = torch.nn.Linear(H1, H2)\n        self.linear3 = torch.nn.Linear(H2, D_out)\n\n    def forward(self, x):\n        h1_sigmoid = self.linear1(x).sigmoid()\n        h2_sigmoid = self.linear2(h1_sigmoid).sigmoid()\n        y_pred = self.linear3(h2_sigmoid)\n        return y_pred\n\n# N is batch size; D_in is input dimension;\n# H is hidden dimension; D_out is output dimension.\nN, D_in, H1, H2, D_out = 200, x1_np.shape[1], 200, 50, 10\n\nmodel = Net(D_in, H1, H2, D_out)\n\noptimizer = torch.optim.SGD(model.parameters(), lr = 0.01)\n\nT = 50 # number of training epoch\n\ncorr = np.corrcoef(x1, x2)[0:x1.shape[0],x1.shape[0]:(x1.shape[0]+x2.shape[0])] # define the correspondence matrix that suits your datasets\n```\n\nThen, the two networks are trained by `train_and_project` function:\n\n```python\nprojections = train_and_project(x1_np, x2_np, model=model, optim=optimizer, T=50) # x1_np and x2_np are numpy arrays of two input modals\n```\n"
      },
      "source": "https://raw.githubusercontent.com/daifengwanglab/deepManReg/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Phase 2: Classification using Network of Feature Regularization",
        "parent_header": [
          "deepManReg: a deep manifold-regularized learning model for improving phenotype prediction from multi-modal data",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "define your classification model:\n\n```python\nclass Net(nn.Module):\n    \n    def __init__(self):\n        super().__init__()\n        self.fc1 = nn.Linear(feature_dim, 100)\n        self.relu1 = nn.ReLU()\n        self.dout = nn.Dropout(0.2)\n        self.fc2 = nn.Linear(100, 50)\n        self.prelu = nn.PReLU(1)\n        self.out = nn.Linear(50,10)\n        self.out_act = nn.Sigmoid()\n        \n    def forward(self, input_):\n        a1 = self.fc1(input_)\n        h1 = self.relu1(a1)\n        dout = self.dout(h1)\n        a2 = self.fc2(dout)\n        h2 = self.prelu(a2)\n        a3 = self.out(h2)\n        y = self.out_act(a3)\n        return y\n``` \n\nThe regularized model is then trained with function `train_epoch`:\n\n```python\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_vali, y_train, y_vali = train_test_split(X,y,test_size=0.1,\n                                                        random_state=10, stratify = y)    \nX_train = torch.tensor(X_train)\ny_train = torch.tensor(y_train)\n     \nnet = Net()\nopt = torch.optim.Adam(net.parameters(), lr=0.001, betas=(0.9, 0.999))\ncriterion = nn.CrossEntropyLoss()\ne_losses = []\nnum_epochs = 20\nfor e in range(num_epochs):\n    e_losses += train_epoch(net, X_train, y_train, opt, criterion, sim)\nwith torch.no_grad():\n    x_tensor_test = torch.from_numpy(X_vali).float()#.to(device)\n    net.eval()\n    yhat = net(x_tensor_test)\ny_pred_softmax = torch.log_softmax(yhat, dim = 1)\n_, y_pred_tags = torch.max(y_pred_softmax, dim = 1)    \ncorrect_pred = np.mean([float(y_pred_tags[i] == y_vali[i]) for i in range(len(y_vali))])\nprint(\"Round\",i,\"Test Accuracy (regularized):\",correct_pred)\nacc_reg.append(np.mean(correct_pred))  \n```\n"
      },
      "source": "https://raw.githubusercontent.com/daifengwanglab/deepManReg/main/README.md",
      "technique": "header_analysis"
    }
  ]
}