{
  "application_domain": [
    {
      "confidence": 14.6,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/nicolaprezza/ebwt2InDel"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-12-21T10:14:24Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-08-23T07:54:43Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ebwt2InDel: find SNPs and InDels from the BWT of a fasta read set"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9768415761655013,
      "result": {
        "original_header": "Overview",
        "type": "Text_excerpt",
        "value": "ebwt2InDel is the new version of ebwt2snp (https://github.com/nicolaprezza/ebwt2snp). The new version detect also InDels and works directly on the input BWT, without building the LCP and GSA arrays. This is about 8 times more space-efficient (but slightly slower) than version 1.  \nThe **ebwt2InDel** suite can be used to discover SNPs/indels inside one or between two sets of reads (fasta/fastq) *without* aligning them to  a reference genome (alignment-free, **reference-free**) by just analyzing the Burrows-Wheeler Transform of the dataset. The output is a fasta file (in KisSNP2 format) where sequences are the contexts surrounding the identified SNPs/indels. The suite finds its main use in applications where no reference genome is known (alignment-free, reference-free variation discovery), but could also lead to the discovery of variations not detected by standard alignment-based tools (which suffer from issues such as low-quality reference, alignment-dependent biases, and difficulty of aligning fragments containing gaps or inversions). Examples of use include: \n- **Genotyping**: given a read set of an individual, find Heterozygous sites.\n- **Metagenomics**: given a read set containing DNA sequenced from many individuals (possibly of unknown species and unknown number), find differences between their genomes. For example, when run on a bacteria sample, the tool can be used to isolate fragments covering antibiotic-resistent genes (since not all bacteria will be resistent, this event will appear as a SNP/INDEL and will be detected by the tool).\n- **Rare-variant discovery**: given the reads sequenced from different cells of an individual, output fragments covering low-frequency variants (e.g. cancer-driving mutations).\n- **Pairwise variant discovery**: find differences between the reads sequenced from two individuals. \n \n"
      },
      "source": "https://raw.githubusercontent.com/nicolaprezza/ebwt2InDel/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.914520214580478,
      "result": {
        "original_header": "Modes",
        "type": "Text_excerpt",
        "value": "1. Analyze one dataset. This mode finds SNPs/INDELs within a single read collection (e.g. genotyping, metagenomics, or rare-variant discovery). \n~~~~\nebwt2InDel -1 collection.ebwt -o output.snp\n~~~~\n \n2. Analyze two datasets. This mode finds SNPs/INDELs between two read collections. The difference with the previous mode is that differences within the same dataset are not reported. \n~~~~\nebwt2InDel -1 collection1.ebwt -2 collection2.ebwt -o output.snp\n~~~~ \n3. Analyze two datasets merged in a single BWT. This mode operates as the previous one, but the input is provided differently: one BWT of the two merged collections, plus the binary Document Array telling which suffix belongs to which collection. This is twice as fast as the previous mode, because only one BWT is navigated (thus the number of cache misses is halved). The document array is a simple ASCII file filled with \"0\" and \"1\".\n~~~~\nebwt2InDel -1 merged_collection.ebwt -d DA.txt -o output.snp\n~~~~ \n"
      },
      "source": "https://raw.githubusercontent.com/nicolaprezza/ebwt2InDel/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.977785250247821,
      "result": {
        "original_header": "Pipelines",
        "type": "Text_excerpt",
        "value": "**IMPORTANT**: the DNA fragments of the input read set must contain only symbols 'A', 'C', 'G', 'T'. It is suggested either to filter out reads containing unknown characters 'N', or to remove them, or to replace them with random nucleotides. \nUpon termination of **ebwt2InDel**,  the tool **filter_snp** can be used to filter the .snp file generated by ebwt2InDel so to keep only SNP/indels covered by at least m reads. Increasing m improves precision (but decreases sensitivity), and it is suggested when the input dataset is high-covered (e.g. a value m = 5 is suggested for coverages >= 25x). \n"
      },
      "source": "https://raw.githubusercontent.com/nicolaprezza/ebwt2InDel/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9852699343752994,
      "result": {
        "original_header": "Funding",
        "type": "Text_excerpt",
        "value": "Supported by the project Italian MIUR-SIR CMACBioSeq (\"Combinatorial methods for analysis and compression of biological sequences\") grant n.~RBSI146R5L, PI: Giovanna Rosone. Link: http://pages.di.unipi.it/rosone/CMACBioSeq.html\n \n"
      },
      "source": "https://raw.githubusercontent.com/nicolaprezza/ebwt2InDel/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9808549246541564,
      "result": {
        "original_header": "One sample - parallel mode (experimental)",
        "type": "Text_excerpt",
        "value": "**NOTES**: \n- use absolute paths ending with /\n- \"read_len\" must be shorter than or equal to the length of most reads; remainders are lost!\n- RAM is the RAM used by BCR (in MB)\n- RAM: at most n bytes, where n is the total number of nucleotides.\n- Disk usage: in addition to the input and output (snp file), the process uses 4n additional Bytes on disk. \n"
      },
      "source": "https://raw.githubusercontent.com/nicolaprezza/ebwt2InDel/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "download BCR (for BWT computation)",
        "type": "Text_excerpt",
        "value": "git clone https://github.com/giovannarosone/BCR\\_LCP\\_GSA\n"
      },
      "source": "https://raw.githubusercontent.com/nicolaprezza/ebwt2InDel/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/nicolaprezza/ebwt2InDel/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/nicolaprezza/ebwt2InDel/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "nicolaprezza/ebwt2InDel"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ebwt2InDel"
      },
      "source": "https://raw.githubusercontent.com/nicolaprezza/ebwt2InDel/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nicolaprezza/ebwt2InDel/master/sort_vcf.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nicolaprezza/ebwt2InDel/master/snp2vcf.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nicolaprezza/ebwt2InDel/master/pebwt2InDel.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Install",
        "parent_header": [
          "ebwt2InDel"
        ],
        "type": "Text_excerpt",
        "value": "~~~~"
      },
      "source": "https://raw.githubusercontent.com/nicolaprezza/ebwt2InDel/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Build the BWT of the sets of reads (using 1GB of RAM)",
        "type": "Text_excerpt",
        "value": "BCR\\_LCP\\_GSA reads.fasta reads.fasta.bwt 1024\n"
      },
      "source": "https://raw.githubusercontent.com/nicolaprezza/ebwt2InDel/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Build the BWT of the sets of reads",
        "type": "Text_excerpt",
        "value": "BCR\\_LCP\\_GSA reads1.fasta reads1.fasta.bwt 1024\nBCR\\_LCP\\_GSA reads2.fasta reads2.fasta.bwt 1024\n\n#Call SNPs (do this in the same folder containing all other files)\nebwt2InDel -1 reads1.fasta.bwt -2 reads2.fasta.bwt -o output.snp\n\n\n#Filter only events supported by at least 5 reads\nfilter_snp output.snp 5 > output.5.snp\n\n~~~~\n"
      },
      "source": "https://raw.githubusercontent.com/nicolaprezza/ebwt2InDel/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9349634153344774,
      "result": {
        "original_header": "Pipelines",
        "type": "Text_excerpt",
        "value": "First, the BWT of the input dataset(s) must be built. To achieve this, you can use https://github.com/felipelouza/egsa, https://github.com/giovannarosone/BCR_LCP_GSA, or https://github.com/felipelouza/egap. Then, **ebwt2InDel** can be run on the computed BWT(s) using one of the three modes above described.  \nIf a reference is available, a VCF file can be generated from the output calls with the following pipeline: \n\nFinally, If also a ground-truth VCF file is available, one can validate the above VCF file using the executable **vcf_vs_vcf**. \n \n"
      },
      "source": "https://raw.githubusercontent.com/nicolaprezza/ebwt2InDel/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.940462423163643,
      "result": {
        "original_header": "Publications",
        "type": "Text_excerpt",
        "value": "A pre-print version can be found here: https://arxiv.org/abs/1805.01876. \n \n"
      },
      "source": "https://raw.githubusercontent.com/nicolaprezza/ebwt2InDel/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.999999334909007,
      "result": {
        "original_header": "build ebwt2InDel",
        "type": "Text_excerpt",
        "value": "cd ebwt2InDel\nmkdir build\ncd build\ncmake ..\nmake\n \n"
      },
      "source": "https://raw.githubusercontent.com/nicolaprezza/ebwt2InDel/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9768174067818876,
      "result": {
        "original_header": "build BCR",
        "type": "Text_excerpt",
        "value": "cd ../../BCR\\_LCP\\_GSA\nmake\n~~~~\n \n"
      },
      "source": "https://raw.githubusercontent.com/nicolaprezza/ebwt2InDel/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9664211565661466,
      "result": {
        "original_header": "One sample - parallel mode (experimental)",
        "type": "Text_excerpt",
        "value": "**Required pre-installed software:**: \nHARC (https://github.com/shubhamchandak94/HARC)\nBCR_LCP_GSA (https://github.com/giovannarosone/BCR_LCP_GSA) \n**Usage**\n~~~~\npebwt2InDel.sh input_fasta threads RAM read_len output_directory/ harc_folder/ \n~~~~ \n"
      },
      "source": "https://raw.githubusercontent.com/nicolaprezza/ebwt2InDel/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/nicolaprezza/ebwt2InDel/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2018 Nicola Prezza nicola.prezza@gmail.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/nicolaprezza/ebwt2InDel/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ebwt2InDel"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "nicolaprezza"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 109900,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 3585,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 905,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nicolaprezza/ebwt2InDel/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_papers": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/1805.01876. \n\n### Funding\n\nSupported by the project Italian MIUR-SIR CMACBioSeq (\"Combinatorial methods for analysis and compression of biological sequences\""
      },
      "source": "https://raw.githubusercontent.com/nicolaprezza/ebwt2InDel/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Run - one sample",
        "parent_header": [
          "build BCR"
        ],
        "type": "Text_excerpt",
        "value": "Enter the folder with the fasta file _reads.fasta_ . We assume that executables 'BCR\\_LCP\\_GSA', 'ebwt2InDel' are global. \n\n~~~~"
      },
      "source": "https://raw.githubusercontent.com/nicolaprezza/ebwt2InDel/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Run - two samples",
        "parent_header": [
          "Filter only events supported by at least 5 reads"
        ],
        "type": "Text_excerpt",
        "value": "Enter the folder with the two fasta files _reads1.fasta_  and _reads2.fasta_ (i.e. the reads of the two samples). We assume that executables 'BCR\\_LCP\\_GSA', 'ebwt2InDel' are global. \n\n~~~~\n#Step 1: remove reads containing 'N', or replace 'N' with random nucleotides"
      },
      "source": "https://raw.githubusercontent.com/nicolaprezza/ebwt2InDel/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 11:26:39",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ]
}