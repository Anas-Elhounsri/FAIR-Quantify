{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Credits",
        "parent_header": [
          "CURC - A CUDA-based reference-free read compressor"
        ],
        "type": "Text_excerpt",
        "value": "CURC is based on the architecture of PgRC and also uses parts of PgRC codes in backend encoding.\n\n[Kowalski, S. and Grabowski, S. (2020) PgRC: pseudogenome-based read compressor. Bioinformatics, 36, 2082\u20132089.](https://academic.oup.com/bioinformatics/article/36/7/2082/5670526)\n\n[Kowalski T, Grabowski SP, Engineering the compression of sequencing reads, BioRxiv2020, https://www.biorxiv.org/content/10.1101/2020.05.01.071720v1.full.](https://www.biorxiv.org/content/10.1101/2020.05.01.071720v1)\n"
      },
      "source": "https://raw.githubusercontent.com/BioinfoSZU/CURC/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/BioinfoSZU/CURC"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-11-06T15:09:18Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-10-30T02:27:43Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A CUDA-based reference-free read compressor"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9544221826654214,
      "result": {
        "original_header": "CURC - A CUDA-based reference-free read compressor",
        "type": "Text_excerpt",
        "value": "A GPU-accelerated reference-free compressor for high-throughput sequencing reads of FASTQ files. \nThe current implementation of CURC only supports constant-length reads (<= 512 bases).\n \n"
      },
      "source": "https://raw.githubusercontent.com/BioinfoSZU/CURC/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.853194852920217,
      "result": {
        "original_header": "Block ratio",
        "type": "Text_excerpt",
        "value": "CURC processes FASTQ file block by block. The block ratio is defined as the single block size divided by the size of the entire FASTQ file.\nThe default value of block_ratio is 1, which means compressing the entire FASTQ in one block.\nIf the GPU has sufficient memory (eg, 16 GB), the block size can be set to a large value (eg, 50 GB), otherwise, \nthe block size should be kept small to avoid the out-of-memory issue (around 20 GB is reasonable).\n \n"
      },
      "source": "https://raw.githubusercontent.com/BioinfoSZU/CURC/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/BioinfoSZU/CURC/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/BioinfoSZU/CURC/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "BioinfoSZU/CURC"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/BioinfoSZU/CURC/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation on Linux",
        "parent_header": [
          "CURC - A CUDA-based reference-free read compressor"
        ],
        "type": "Text_excerpt",
        "value": "CURC is designed to run on Linux operating systems with NVIDIA GPUs.\nWe have fully tested the program on NVIDIA GPU architectures with compute capability >= 3.7 such as Maxwell, Pascal, Volta, Turing \n(check compute capability of your NVIDIA GPU on https://developer.nvidia.com/cuda-gpus#compute). \nTo build and run CURC on old architectures, you can use the `-DCURC_DISABLE_ARCH_CHECK=ON` option for `cmake` that disables checking GPU architecture.\nThe instructions below can be used to create the executable file in the build directory. \n"
      },
      "source": "https://raw.githubusercontent.com/BioinfoSZU/CURC/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Build",
        "parent_header": [
          "CURC - A CUDA-based reference-free read compressor",
          "Installation on Linux"
        ],
        "type": "Text_excerpt",
        "value": "CURC uses cmake as the build system, and you can check cmake version using `cmake --version`.\nCMake uses `nvcc_path` to detect the CUDA toolkit settings. \nThe `nvcc_path` is `<cuda_path>/bin/nvcc` (eg `/usr/local/cuda/bin/nvcc`). \nMake sure that CUDA version >= 10.1 before building, and you can check CUDA version using `cat <cuda_path>/version.txt`). \n\nChoose one of the following commands to build the source code based on your system environment.\n- If cmake with version 3.19 or later has been installed:\n```bash\ngit clone https://github.com/BioinfoSZU/CURC.git\ncd CURC \nmkdir build\ncd build\nexport CC=<gcc_path>  # eg export CC=/usr/bin/gcc-7\nexport CXX=<g++_path> # eg export CXX=/usr/bin/g++-7\ncmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CUDA_COMPILER=<nvcc_path> .. \nmake\n```\n\n- Otherwise:\n```bash\ngit clone https://github.com/BioinfoSZU/CURC.git\ncd CURC\nmkdir build\ncd build\nwget https://github.com/Kitware/CMake/releases/download/v3.21.3/cmake-3.21.3-linux-x86_64.tar.gz\ntar -xzf cmake-3.21.3-linux-x86_64.tar.gz\nexport CC=<gcc_path>  # eg export CC=/usr/bin/gcc-7\nexport CXX=<g++_path> # eg export CXX=/usr/bin/g++-7\n./cmake-3.21.3-linux-x86_64/bin/cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CUDA_COMPILER=<nvcc_path> .. \nmake\n```\n\nNote that: if some requirements are not met during the CMake build, and you reinstall the required software, \nplease delete `CMakeCache.txt` (if present) from the build directory first and re-run the building command.\n"
      },
      "source": "https://raw.githubusercontent.com/BioinfoSZU/CURC/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9999518293938464,
      "result": {
        "original_header": "GPU warmup and selection",
        "type": "Text_excerpt",
        "value": "GPU initialization could be slow on some systems. To avoid the impact of GPU initialization for CURC, \nyou can execute `nvidia-smi -l 10` in the background to warm up GPU from idle before running CURC.\nAnother way is to enable persistence mode using `nvidia-smi -i <target gpu> -pm ENABLED`.  \n"
      },
      "source": "https://raw.githubusercontent.com/BioinfoSZU/CURC/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999999999996021,
      "result": {
        "original_header": "Sample data",
        "type": "Text_excerpt",
        "value": "|   dataset    |  download command | direct download link   |\n|   :----:     |      :----:       |        :----:          |\n| SRR635193_1  |`wget https://ftp.sra.ebi.ac.uk/vol1/fastq/SRR635/SRR635193/SRR635193_1.fastq.gz` | [SRR635193_1.fastq.gz](https://ftp.sra.ebi.ac.uk/vol1/fastq/SRR635/SRR635193/SRR635193_1.fastq.gz) |\n| SRR445724    |`wget https://ftp.sra.ebi.ac.uk/vol1/fastq/SRR445/SRR445724/SRR445724.fastq.gz`   | [SRR445724.fastq.gz](https://ftp.sra.ebi.ac.uk/vol1/fastq/SRR445/SRR445724/SRR445724.fastq.gz)   |\n| SRR065390_1  |`wget https://ftp.sra.ebi.ac.uk/vol1/fastq/SRR065/SRR065390/SRR065390_1.fastq.gz` | [SRR065390_1.fastq.gz](https://ftp.sra.ebi.ac.uk/vol1/fastq/SRR065/SRR065390/SRR065390_1.fastq.gz) |\n| SRR065390_2  |`wget https://ftp.sra.ebi.ac.uk/vol1/fastq/SRR065/SRR065390/SRR065390_2.fastq.gz` | [SRR065390_2.fastq.gz](https://ftp.sra.ebi.ac.uk/vol1/fastq/SRR065/SRR065390/SRR065390_2.fastq.gz) |\n \n"
      },
      "source": "https://raw.githubusercontent.com/BioinfoSZU/CURC/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/BioinfoSZU/CURC/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bioinformatics-tool, cuda, fastq-compression"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "                                        \n                 The MIT License (MIT)\n\nCopyright (c) 2021 Zexuan Zhu<zhuzx@szu.edu.cn>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE."
      },
      "source": "https://raw.githubusercontent.com/BioinfoSZU/CURC/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CURC"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "BioinfoSZU"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Cuda",
        "size": 201104,
        "type": "Programming_language",
        "value": "Cuda"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 73770,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 5798,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 196,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BioinfoSZU/CURC/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Compiling requirement",
        "parent_header": [
          "CURC - A CUDA-based reference-free read compressor",
          "Installation on Linux"
        ],
        "type": "Text_excerpt",
        "value": "CURC should be compiled with GCC version 7.3 or later (supporting C++17 standard) and CUDA Toolkit version 10.1 or later. \n1. To check the GCC version, please use `gcc --version`. If the GCC version is older than 7.3, you can use the following command to install GCC 7.\n- On Ubuntu\n```bash\nsudo add-apt-repository ppa:jonathonf/gcc\nsudo apt-get update\nsudo apt-get install gcc-7 g++-7\n```\n- On CentOS\n```bash\nyum install centos-release-scl\nyum install devtoolset-7-gcc-c++\nscl enable devtoolset-7 bash # optional step (if you want to set GCC 7 as default compiler in bash)\n```\n- On anaconda3 without root privileges\n```bash\nconda create -n gcc7 \nconda activate gcc7\nconda install gcc_linux-64=7.3.0 gxx_linux-64=7.3.0\ncd <anaconda3_root>/envs/gcc7/bin/  \nln -s x86_64-conda_cos6-linux-gnu-gcc gcc \nln -s x86_64-conda_cos6-linux-gnu-g++ g++ \nexport CC=<anaconda3_root>/envs/gcc7/bin/gcc  \nexport CXX=<anaconda3_root>/envs/gcc7/bin/g++ \n```\n\n2. To check the CUDA version, please use `cat <cuda_path>/version.txt`(eg `cat /usr/local/cuda/version.txt`) or `nvcc --version`.\nIf CUDA isn't installed or with version older than 10.1, you can download and install CUDA from https://developer.nvidia.com/cuda-toolkit-archive. \n"
      },
      "source": "https://raw.githubusercontent.com/BioinfoSZU/CURC/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-05 23:40:20",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "CURC - A CUDA-based reference-free read compressor"
        ],
        "type": "Text_excerpt",
        "value": "Run the CURC executable in the build directory with the options below:\n```text\nCUDA Read Compressor v1.0.0\nUsage:\n  curc [OPTION...]\n\n      --working_dir arg         working directory (default: .)\n  -c, --compress                compress file\n  -d, --decompress              decompress archive\n  -i, --input arg               input path (paired-end fastq paths are \n                                separated by commas)\n  -o, --output arg              output file name (compressed output file \n                                use .curc as extension, decompressed output \n                                file use .seq as extension)\n      --block_ratio arg         ratio of block size (default: 1)\n      --flzma2_level arg        fast-lzma2 compression level [1...10] \n                                (default: 10)\n      --flzma2_thread_num arg   fast-lzma2 compression/decompression thread \n                                number (default: 16)\n      --preserve_order          preserve order information\n      --decode_buffer_size arg  size of decompress buffer(MB) (default: \n                                1024)\n  -v, --version                 print version\n  -h, --help                    print usage\n```\n"
      },
      "source": "https://raw.githubusercontent.com/BioinfoSZU/CURC/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example Usage",
        "parent_header": [
          "CURC - A CUDA-based reference-free read compressor"
        ],
        "type": "Text_excerpt",
        "value": "- To compress single-end FASTQ reads in order non-preserving mode with one block\n```bash\n./curc -c -i in.fastq --block_ratio 1 -o single_end_archive # compressed output is single_end_archive.curc\n```\n\n- To compress single-end FASTQ reads in order preserving mode with one block\n```bash\n./curc -c -i in.fastq --block_ratio 1 --preserve_order -o single_end_archive # compressed output is single_end_archive.curc\n```\n\n- To compress paired-end FASTQ reads in order non-preserving mode with two size-equal blocks\n```bash\n./curc -c -i in_1.fastq,in_2.fastq --block_ratio 0.5 -o paired_end_archive # compressed output is paired_end_archive.curc\n```\n\n- To compress paired-end FASTQ reads in order preserving mode with two size-equal blocks\n```bash\n./curc -c -i in_1.fastq,in_2.fastq --block_ratio 0.5 --preserve_order -o paired_end_archive # compressed output is paired_end_archive.curc\n```\n\n- To decompress single-end compressed archive\n```bash\n./curc -d -i single_end_archive.curc -o out   # decompressed output is out.seq \n```\n\n- To decompress paired-end compressed archive\n```bash\n./curc -d -i paired_end_archive.curc -o out   # decompressed output is out_1.seq and out_2.seq\n```\n"
      },
      "source": "https://raw.githubusercontent.com/BioinfoSZU/CURC/master/README.md",
      "technique": "header_analysis"
    }
  ]
}