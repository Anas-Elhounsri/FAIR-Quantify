{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "References",
        "type": "Text_excerpt",
        "value": "Find our paper [here](https://academic.oup.com/bioinformatics/advance-article/doi/10.1093/bioinformatics/bty749/5087716)\n"
      },
      "source": "https://raw.githubusercontent.com/bgm-cwg/novoCaller/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/bgm-cwg/novoCaller"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-01-15T22:10:34Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-10-18T14:12:18Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9758027185956027,
      "result": {
        "original_header": "About",
        "type": "Text_excerpt",
        "value": "novoCaller is a Bayesian de novo variant calling algorithm that uses information from read-level data both in the pedigree and in unrelated samples. The method was extensively tested using large trio sequencing studies, and it consistently achieved over 98% sensitivity while giving significantly more specificity than other well known methods for the same sensitivity values. \\\nThe method works with a vcf file alone (first layer), but it can also inspect the reads in the bam file and compute probabilities based on direction-specific (forward and reverse) reads (second layer). \\\nWe made the software keeping VCFv4.1 in mind. The software looks at the format field of each variant call location in the VCF file and reads the AD element. Then it extracts that part from every sample.\n \n"
      },
      "source": "https://raw.githubusercontent.com/bgm-cwg/novoCaller/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/bgm-cwg/novoCaller/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/bgm-cwg/novoCaller/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bgm-cwg/novoCaller"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "novoCaller"
      },
      "source": "https://raw.githubusercontent.com/bgm-cwg/novoCaller/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.8580850337232493,
      "result": {
        "original_header": "Output format:",
        "type": "Text_excerpt",
        "value": "denovo_calls.txt columns are the following:\nRank, chromosome, position, reference allele, alternative allele, AF (in samples), rhos, priors, PP=posterior probability, AF_unrelated, gene_name(s) \n"
      },
      "source": "https://raw.githubusercontent.com/bgm-cwg/novoCaller/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/bgm-cwg/novoCaller/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "denovo, pedigree, variant-calling"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2021 BGM Computational Working Group\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/bgm-cwg/novoCaller/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "novoCaller"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "bgm-cwg"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 69161,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 19596,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bgm-cwg/novoCaller/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Run first layer (C++ code) - uses only VCF:",
        "parent_header": [
          "novoCaller",
          "Usage:"
        ],
        "type": "Text_excerpt",
        "value": "```\n./novoCaller \\\n-I <path to vcf file> \\\n-O <path to output file for layer 1> \\\n-T <path to file containing sample IDs of the trios, the IDs are in the order:parent1(TAB)parent2(TAB)proband> \\\n-X <put 1 if you want to run on X chromosome as well, 0 otherwise> \\\n-P <threshold on posterior probability. Calls are made if the PP is above threshold. Use a low value like 0.005 so that a large number of calls are made for the second layer> \\\n-E <threshold on the ExAC allele frequency, e.g. 0.0001>\n```\n"
      },
      "source": "https://raw.githubusercontent.com/bgm-cwg/novoCaller/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Run second layer (Python code) - uses BAM files (OPTIONAL):",
        "parent_header": [
          "novoCaller",
          "Usage:"
        ],
        "type": "Text_excerpt",
        "value": "```\npython -W ignore novoCallerBAM.py \\  \n-I <path to the output file from previous step (the file given in -O option)> \\\n-U <path to a file containing paths to the bam files from unrelated samples> \\\n-T <path to a file containing paths to the bam files of the trio> \\\n-O <path to the output file for the second layer>\n```\n\nThe ignore option is given to ignore log of 0 warning.\n"
      },
      "source": "https://raw.githubusercontent.com/bgm-cwg/novoCaller/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 08:20:42",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 8
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Run first layer (C++ code) - uses only VCF:",
        "parent_header": [
          "novoCaller",
          "Usage:"
        ],
        "type": "Text_excerpt",
        "value": "```\n./novoCaller \\\n-I <path to vcf file> \\\n-O <path to output file for layer 1> \\\n-T <path to file containing sample IDs of the trios, the IDs are in the order:parent1(TAB)parent2(TAB)proband> \\\n-X <put 1 if you want to run on X chromosome as well, 0 otherwise> \\\n-P <threshold on posterior probability. Calls are made if the PP is above threshold. Use a low value like 0.005 so that a large number of calls are made for the second layer> \\\n-E <threshold on the ExAC allele frequency, e.g. 0.0001>\n```\n"
      },
      "source": "https://raw.githubusercontent.com/bgm-cwg/novoCaller/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Run second layer (Python code) - uses BAM files (OPTIONAL):",
        "parent_header": [
          "novoCaller",
          "Usage:"
        ],
        "type": "Text_excerpt",
        "value": "```\npython -W ignore novoCallerBAM.py \\  \n-I <path to the output file from previous step (the file given in -O option)> \\\n-U <path to a file containing paths to the bam files from unrelated samples> \\\n-T <path to a file containing paths to the bam files of the trio> \\\n-O <path to the output file for the second layer>\n```\n\nThe ignore option is given to ignore log of 0 warning.\n"
      },
      "source": "https://raw.githubusercontent.com/bgm-cwg/novoCaller/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example command line:",
        "parent_header": [
          "novoCaller",
          "Usage:"
        ],
        "type": "Text_excerpt",
        "value": "```\n./novoCaller -I ./all_calls.vep.vcf -O step1_out.txt -T trio_ids.txt -X 1 -P 0.005 -E 0.008 \npython -W ignore novoCallerBAM.py  -I step1_out.txt -U de_novo_unrelated_bams.txt -T de_novo_case_bams.txt -O denovo_calls.txt \n```\n"
      },
      "source": "https://raw.githubusercontent.com/bgm-cwg/novoCaller/master/README.md",
      "technique": "header_analysis"
    }
  ]
}