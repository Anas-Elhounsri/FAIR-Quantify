{
  "application_domain": [
    {
      "confidence": 18.27,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/signalbash/how_are_we_stranded_here"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-11-25T01:28:47Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-30T15:49:23Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Check strandedness of RNA-Seq fastq files"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9061983213460513,
      "result": {
        "original_header": "Output",
        "type": "Text_excerpt",
        "value": "        checking strandedness\n        Reading reference gene model stranded_test_WT_yeast_rep1_1_val_1_1/Saccharomyces_cerevisiae.R64-1-1.98.bed ... Done\n        Loading SAM/BAM file ...  Total 20000 usable reads were sampled\n        This is PairEnd Data\n        Fraction of reads failed to determine: 0.0595\n        Fraction of reads explained by \"1++,1--,2+-,2-+\": 0.0073 (0.8% of explainable reads)\n        Fraction of reads explained by \"1+-,1-+,2++,2--\": 0.9332 (99.2% of explainable reads)\n        Over 90% of reads explained by \"1+-,1-+,2++,2--\"\n        Data is likely RF/fr-firststrand \n\nAny intermediate files are written to a folder in your current working directory derived from the name of the reads_1 file. \n"
      },
      "source": "https://raw.githubusercontent.com/betsig/how_are_we_stranded_here/master/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9546498510766585,
      "result": {
        "original_header": "How it Works",
        "type": "Text_excerpt",
        "value": "check_strandedness.py runs a series of commands to check which direction reads align once mapped in transcripts. \nIt then maps a small subset of reads (default 200000) to the transcriptome, and uses kallisto's --genomebam argument to project pseudoalignments to genome sorted BAM file. \nIt finally runs RSeQC's infer_experiment.py to check which direction reads from the first and second pairs are aligned in relation to the transcript strand, and provides output with the likely strandedness of your data.\n \n"
      },
      "source": "https://raw.githubusercontent.com/betsig/how_are_we_stranded_here/master/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9546617340782128,
      "result": {
        "type": "Text_excerpt",
        "value": "Python package for testing strandedness of RNA-Seq fastq files \n\nEver get RNA-Seq data where the library prep or strandedness has been omitted in the methods? \nThis should save some headaches later in your pipeline and analysis when you realise you've used the wrong strandedness setting (RF/fr-firststrand, FR/fr-secondstrand, unstranded) \n"
      },
      "source": "https://raw.githubusercontent.com/betsig/how_are_we_stranded_here/master/README.rst",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/betsig/how_are_we_stranded_here/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 24
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/signalbash/how_are_we_stranded_here/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "signalbash/how_are_we_stranded_here"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/betsig/how_are_we_stranded_here/master/README.rst",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": ".. code-block:: console\n\n        pip install how_are_we_stranded_here\n\n"
      },
      "source": "https://raw.githubusercontent.com/betsig/how_are_we_stranded_here/master/README.rst",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9239428811741485,
      "result": {
        "type": "Text_excerpt",
        "value": ".. image:: https://img.shields.io/pypi/v/how_are_we_stranded_here.svg\n        :target: https://pypi.python.org/pypi/how_are_we_stranded_here \nPython package for testing strandedness of RNA-Seq fastq files \nThis should save some headaches later in your pipeline and analysis when you realise you've used the wrong strandedness setting (RF/fr-firststrand, FR/fr-secondstrand, unstranded) \n"
      },
      "source": "https://raw.githubusercontent.com/betsig/how_are_we_stranded_here/master/README.rst",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8722730027654574,
      "result": {
        "original_header": "Output",
        "type": "Text_excerpt",
        "value": "check_strandedness will print to console the results of infer_experiment.py (http://rseqc.sourceforge.net/#infer-experiment-py), along with an interpretation. \n"
      },
      "source": "https://raw.githubusercontent.com/betsig/how_are_we_stranded_here/master/README.rst",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/signalbash/how_are_we_stranded_here/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2019 Beth Signal\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/betsig/how_are_we_stranded_here/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "how_are_we_stranded_here"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "signalbash"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 109507,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/betsig/how_are_we_stranded_here/master/README.rst"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "signalbash",
          "type": "User"
        },
        "date_created": "2021-03-09T22:53:35Z",
        "date_published": "2021-03-15T21:52:12Z",
        "description": "Version 1.0.1",
        "html_url": "https://github.com/signalbash/how_are_we_stranded_here/releases/tag/v1.0.1",
        "name": "v1.0.1",
        "release_id": 39845202,
        "tag": "v1.0.1",
        "tarball_url": "https://api.github.com/repos/signalbash/how_are_we_stranded_here/tarball/v1.0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/signalbash/how_are_we_stranded_here/releases/39845202",
        "value": "https://api.github.com/repos/signalbash/how_are_we_stranded_here/releases/39845202",
        "zipball_url": "https://api.github.com/repos/signalbash/how_are_we_stranded_here/zipball/v1.0.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "signalbash",
          "type": "User"
        },
        "date_created": "2021-03-08T00:39:05Z",
        "date_published": "2021-03-09T02:27:54Z",
        "html_url": "https://github.com/signalbash/how_are_we_stranded_here/releases/tag/v1.0.0-alpha",
        "name": "v1.0.0-alpha",
        "release_id": 39481952,
        "tag": "v1.0.0-alpha",
        "tarball_url": "https://api.github.com/repos/signalbash/how_are_we_stranded_here/tarball/v1.0.0-alpha",
        "type": "Release",
        "url": "https://api.github.com/repos/signalbash/how_are_we_stranded_here/releases/39481952",
        "value": "https://api.github.com/repos/signalbash/how_are_we_stranded_here/releases/39481952",
        "zipball_url": "https://api.github.com/repos/signalbash/how_are_we_stranded_here/zipball/v1.0.0-alpha"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirements",
        "type": "Text_excerpt",
        "value": "how_are_we_stranded_here requires the following packages be installed:\n\nkallisto == 0.44.x\n\npython >= 3.6.0\n\nRSeQC\n\nIt also requires a transcriptome annotation (.fasta file - e.g. ensembl's .cdna.fasta, or a prebuilt kallisto index), and a corresponding gtf.\n\nSometimes pseudoalignments will not work with newer versions of kallisto. If this is an issue, we suggest downgrading to 0.44.0.\n"
      },
      "source": "https://raw.githubusercontent.com/betsig/how_are_we_stranded_here/master/README.rst",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 00:40:06",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 113
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "type": "Text_excerpt",
        "value": "For basic usage, run check_strandedness with a gtf transcript annotation, transcripts fasta file and fastq read files from one sample.\n\n.. code-block:: console\n\n        check_strandedness --gtf Yeast.gtf --transcripts Yeast_cdna.fasta --reads_1 Sample_A_1.fq.gz --reads_2 Sample_A_2.fq.gz\n\n"
      },
      "source": "https://raw.githubusercontent.com/betsig/how_are_we_stranded_here/master/README.rst",
      "technique": "header_analysis"
    }
  ]
}