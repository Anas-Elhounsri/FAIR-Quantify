{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/vipinmenon1989/CGD"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-01-30T04:32:24Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-04-10T05:07:46Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9955367221435948,
      "result": {
        "original_header": "CGD",
        "type": "Text_excerpt",
        "value": "CGD is python based on-target scoring method for CRISPRi, CRISPRa, Cas9, Cas9 (non-canonical) and Cas12a sequences.They are consortium of scores such as CGDi, CGDa, CGD9, CGD9NG and CGD12a, which are based on ENLOR(ELastic Net Logistic Regression) weights. \n \n"
      },
      "source": "https://raw.githubusercontent.com/vipinmenon1989/CGD/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9597928940553931,
      "result": {
        "original_header": "Website",
        "type": "Text_excerpt",
        "value": "The authors can access our website for CGD at http://big.hanyang.ac.kr:2195/CGD. The webiste provide GUI for the users to get on-target score for gRNA corresponding to Cas9 (canonical and non-canonical), CRISPRi, CRISPRa and Cas12a.\n \n"
      },
      "source": "https://raw.githubusercontent.com/vipinmenon1989/CGD/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/vipinmenon1989/CGD/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/vipinmenon1989/CGD/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "vipinmenon1989/CGD"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CGD"
      },
      "source": "https://raw.githubusercontent.com/vipinmenon1989/CGD/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Package installation",
        "parent_header": [
          "CGD",
          "Source code"
        ],
        "type": "Text_excerpt",
        "value": "For Vienna RNA package see the instructions in their official site https://www.tbi.univie.ac.at/RNA/ for python installation\nThe rest packages could be installed by using ```pip```\n"
      },
      "source": "https://raw.githubusercontent.com/vipinmenon1989/CGD/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/vipinmenon1989/CGD/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "The MIT License\n\nCopyright (c) 2019 BIG Lab, Hanayng university\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n"
      },
      "source": "https://raw.githubusercontent.com/vipinmenon1989/CGD/master/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "parent_header": [
          "CGD"
        ],
        "type": "Text_excerpt",
        "value": "----\nMIT\n"
      },
      "source": "https://raw.githubusercontent.com/vipinmenon1989/CGD/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CGD"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "vipinmenon1989"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 51162,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/vipinmenon1989/CGD/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirements",
        "parent_header": [
          "CGD",
          "Source code"
        ],
        "type": "Text_excerpt",
        "value": "  - Python 2.7 or above\n  - Vienna RNA package\n  - Numpy (version > = 1.12.4)\n  - math\n  - reverse complement (The file is provided as \"get_sequence\" in CGD)\n  "
      },
      "source": "https://raw.githubusercontent.com/vipinmenon1989/CGD/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 14:29:55",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Help",
        "parent_header": [
          "CGD",
          "Source code"
        ],
        "type": "Text_excerpt",
        "value": "To make our source code user friendly we have provided help function which could be implemented in following way\n```\npython CGD.py -h help\nusage: CGD.py [-h] [-a] [-b] [-c] [-d] [-e] [-f]\n\nworking with CGD\n\noptional arguments:\n  -h, --help  show this help message and exit\n  -a        The option generates Comprehensive score using Comprehesive function\n  -b        The option generates CRISPRi score using CGDi function\n  -c        The option generates CRISPRa score using CGDa function\n  -d        The option generates CRISPR-Cas9 score using CGD9 function\n  -e        The option generates CRISPR-Cas12a score using CGD12a function\n  -f        The option generates CRISPR-Cas9 (non-canonical) score using CGD9NG function\n```    \n"
      },
      "source": "https://raw.githubusercontent.com/vipinmenon1989/CGD/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Use",
        "parent_header": [
          "CGD",
          "Source code"
        ],
        "type": "Text_excerpt",
        "value": "CGD python file is executed on fasta file\n- The input file should be in fasta format \n- The length of fasta file should be betweem 100nt and 10000nt\n- The scores are generated with range [0,1], where the gRNA sequences with score lesser than 0.5 are considered efficient.\n- The output file are shown in tabular format which compromises of ID, Start,End, Strand, 30 or 34nt sequence (based on Cas system)   and on-target score \n``` python\n    python CGD.py -a input.fa (Comprehensive Score)\n    \n    Example file: input.fa \n    \n    >XM_030244935\n    CGGCGCGGAGTGCGCCGGCGCGTCGTCGGGGACGCCGGGTCCAGGATCTTGCTAGGGAACCAGTGTTGTC\n    GCGTCGTCCCGCCCCCTCGGGGCTTTTGCTCCCGTTAACTGTCGGCGGGGCAGGCTCCGCAGCGCAGGGC\n    GACATGCCGGTGCGCTTCAAGGGATCACGAAAGAACCAGGTTTTATTTCAAAAAGAAGAGTTCCCTACCA\n    TGACCCTCAGATTTCAAAATACCTGGAGTGGAACGGAACCGTCAGAAAGAAGGATACGCTTGTCCCACCA\n    GAACCCCAGGCCTTTGGAACGCCAAAGCCACAAGAGGCTGAGCAAGGAGAAGATGCCAATCAAGAAGCAG\n    TTCTCTCACTAGAGGCCTCCAGGGTTCCCAAGAGAACTCGGTCTCATTCTGCGGACTCGAGAGCTGAAGG\n    GGTTTCAGACACTGTGGAAAAGCACCAGGGTGTCACGAGAAGCCATGCGCCAGTTAGCGCGGATGTGGAG\n    CTGAGACCTTCCAGCAAACAACCTCTCTCCCAGAGCATAGATCCCAGGTTGGATAGGCATCTTCGTAAGA\n    AAGCTGGATTGGCCGTTGTTCCCACGAATAATGCCTTGAGAAATTCTGAATACCAAAGGCAGTTTGTTTG\n```\n- Output (CGD.txt)\n```\nID\tStart\tEnd\tStrand\tSequence\tCGDi\tCGDa\tCGD9\tCGDNG\tCGD12a\nXM_030244935\t1877\t1907\t-\tTGCTGGACGGATGACAGTAAGGCGGGGCAC\t0.86\t0.39\t1.0\t0.0\t0.0\nXM_030244935\t1877\t1907\t-\tTGCTGGACGGATGACAGTAAGGCGGGGCAC\t0.86\t0.39\t1.0\t0.0\t0.0\nXM_030244935\t1877\t1907\t-\tTGCTGGACGGATGACAGTAAGGCGGGGCAC\t0.86\t0.39\t1.0\t0.0\t0.0\nXM_030244935\t1510\t1540\t+\tAAGGGAGGCAGGCTTCCTACACCGAGGCTG\t0.92\t0.39\t0.99\t0.0\t0.0\nXM_030244935\t1867\t1897\t-\tATGACAGTAAGGCGGGGCACATGGAGGCAG\t0.96\t0.7\t0.99\t0.0\t0.0\nXM_030244935\t1301\t1331\t-\tCCCAAGCCAGCTTCCTCCTGACCGAGGCGG\t0.89\t0.53\t0.99\t0.0\t0.0\nXM_030244935\t1301\t1331\t-\tCCCAAGCCAGCTTCCTCCTGACCGAGGCGG\t0.89\t0.53\t0.99\t0.0\t0.0\nXM_030244935\t479\t509\t+\tCGGATGTGGAGCTGAGACCTTCCAGCAAAC\t0\t0\t0\t0.98\t0\nXM_030244935\t264\t294\t+\tTACGCTTGTCCCACCAGAACCCCAGGCCTT\t0\t0\t0\t0.81\t0\nXM_030244935\t228\t262\t+\tATACCTGGAGTGGAACGGAACCGTCAGAAAGAAG\t0\t0\t0\t0\t0.98\nXM_030244935\t969\t1003\t+\tTTGGACCCGGGTGAAGGAGAACCTGTCAAACCAG\t0\t0\t0\t0\t0.97\n```\n```\n  python CGD.py -b input.fa  (Exclusive for CRISPRi)\n```\n- Output (CGDi.txt)\n```\nID\tStart\tEnd\tStand\tSequence\tCGDi\t\nXM_030244935\t65\t95\t+\tTTGTCGCGTCGTCCCGCCCCCTCGGGGCTT\t0.99\nXM_030244935\t1363\t1393\t+\tGAGGAGCCCAGGGCGGAGGAGGACGGGAGA\t0.98\nXM_030244935\t1377\t1407\t+\tGGAGGAGGACGGGAGAGAGGAGAGAGGACA\t0.86\nXM_030244935\t271\t301\t-\tCGTTCCAAAGGCCTGGGGTTCTGGTGGGAC\t0.85\n```\n```\n  python CGD.py -c input.fa  (Exclusive for CRISPRa)\n```\n- Output (CGDa.txt)\n```\nID\tStart\tEnd\tStrand\tSequence\tCGDa\nXM_030244935\t1363\t1393\t+\tGAGGAGCCCAGGGCGGAGGAGGACGGGAGA\t0.83\nXM_030244935\t2\t32\t+\tGCGCGGAGTGCGCCGGCGCGTCGTCGGGGA\t0.83\nXM_030244935\t1370\t1400\t+\tCCAGGGCGGAGGAGGACGGGAGAGAGGAGA\t0.72\nXM_030244935\t1362\t1392\t+\tGGAGGAGCCCAGGGCGGAGGAGGACGGGAG\t0.71\n```\n```\n  python CGD.py -d input.fa  (Exclusive for CRISPR-Cas9)\n```\n- Output (CGD9.txt)\n```\nID\tStart\tEnd\tStrand\tSequence\tCGD9\nXM_030244935\t1877\t1907\t-\tTGCTGGACGGATGACAGTAAGGCGGGGCAC\t1.0\nXM_030244935\t1867\t1897\t-\tATGACAGTAAGGCGGGGCACATGGAGGCAG\t0.99\nXM_030244935\t1926\t1956\t+\tAGACCCTGAGTTTCAGCACAACATGGGAAA\t0.95\nXM_030244935\t569\t599\t-\tTCAAGGCATTATTCGTGGGAACAACGGCCA\t0.94\n```\n```\n  python CGD.py -d input.fa  (Exclusive for CRISPR-Cas12a)\n```\n- Output (CGD12a.txt)\n```\nID\tStart\tEnd\tStrand\tSequence\tCGD12a\nXM_030244935\t1831\t1865\t+\tAAAATTTTGGACCGTCAGCCCAGCACCCCTGGGC\t1.0\nXM_030244935\t198\t232\t-\tGTATTTTGAAATCTGAGGGTCATGGTAGGGAACT\t0.91\nXM_030244935\t758\t792\t+\tAGTATTTGAAAGGAAACAGCAGTCTGGAGATGCT\t0.9\nXM_030244935\t654\t688\t+\tAGTGTTTGCATCCAATCAGTTCCAAGGCAATACA\t0.89\n```\n```\n  python CGD.py -d input.fa  (Exclusive for CRISPR-Cas12a)\n```\n- Output (CGD9NG.txt)\n```\nID  Start\tEnd\tStrand\tSequence\tCGD9NG\nXM_0302449\t1378\t1408\t+\tGAGGAGGACGGGAGAGAGGAGAGAGGACAG\t1.0\nXM_0302449\t1341\t1371\t+\tGAGCACGAAGGAAGACACCCAGGAGGAGCC\t0.99\nXM_0302449\t784\t814\t-\tGAGATGCTGACTCCAGTAAAGAAGGGAGAT\t0.98\nXM_0302449\t834\t864\t-\tAGACATGGCGTCGGAAGACTCAGACGAGTC\t0.8\n```\n"
      },
      "source": "https://raw.githubusercontent.com/vipinmenon1989/CGD/master/README.md",
      "technique": "header_analysis"
    }
  ]
}