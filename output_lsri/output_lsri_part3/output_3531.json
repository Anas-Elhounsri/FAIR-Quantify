{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "SMaSH"
        ],
        "type": "Text_excerpt",
        "value": "If you use SMaSH in your project, please cite\n\nMaximillian Westphal, David Frankhouser, Carmine Sonzone, Peter G. Shields, Pearlly Yan, and Ralf Bundschuh. SMaSH: Sample matching using SNPs in humans. _BMC Genomics_ **20**(Suppl 12): 1001 (2019). https://doi.org/10.1186/s12864-019-6332-7.\n\n"
      },
      "source": "https://raw.githubusercontent.com/rbundschuh/SMaSH/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/rbundschuh/SMaSH"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2016-08-29T18:21:21Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-02-22T09:30:43Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A tool for sample swap identification in high throughput sequencing studies"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "parent_header": [
          "SMaSH"
        ],
        "type": "Text_excerpt",
        "value": "Sample swaps are a real concern in high throughput sequencing studies.  SMaSH helps detect such sample swaps by integrating the information from over 6000 carefully selected single nucleotide polymorphism (SNP) sites from across the human genome to identify which samples in a group of sequencing data sets are derived from the same human individual.  Importantly, SMaSH is able to verify sample identity between different data types, such as RNA-Seq, exome, and MethylCap-Seq data.\n"
      },
      "source": "https://raw.githubusercontent.com/rbundschuh/SMaSH/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/rbundschuh/SMaSH/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/rbundschuh/SMaSH/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "rbundschuh/SMaSH"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SMaSH"
      },
      "source": "https://raw.githubusercontent.com/rbundschuh/SMaSH/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/rbundschuh/SMaSH/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SMaSH"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "rbundschuh"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 14722,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rbundschuh/SMaSH/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependencies",
        "parent_header": [
          "SMaSH"
        ],
        "type": "Text_excerpt",
        "value": "\nSMaSH requires the following python libraries:\n    pysam\n    scipy\n    numpy\n"
      },
      "source": "https://raw.githubusercontent.com/rbundschuh/SMaSH/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "installation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 13:06:27",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 9
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "SMaSH"
        ],
        "type": "Text_excerpt",
        "value": "SMaSH is written in Python and is run by simply typing:\n\n    SMaSH.py sample1.bam sample2.bam [sample3.bam [etc...]]\n\nThis requires the file snps_hg19.vcf to be stored in the directory of the SMaSH.py.  The bam files must be indexed and must result from alignment to human genome hg19 (for GRCh38 see below).\n\nThe output will be written to the file pval\\_out.txt in the form of a matrix of p-values for the null hypothesis that the samples are from different individuals for all pairwise comparisons of the samples in the directory.  Thus, low p-values indicate high probability that the corresponding samples are derived from the same individuals; p-values close to one indicate that the corresponding samples are derived from different individuals.  P-values for samples to be from the same individual are written to the file issameindividual\\_pvalue\\_out.txt. The latter correspond to the p-values described in the paper presenting SMaSH.  While these are just one minus the p-values reported in pval\\_out.txt, reporting them separately allows distinguishing between very small p-values, where reporting 1-p results in rounding to one.\n\n    SMaSH.py ALL\n\nLooks for *.bam in the current directory.  \n\nVarious command line options are explained by running:\n\n    SMaSH.py --help\n\nby itself and allow choosing specific bam files, providing different SNP index files, e.g. `snps_GRCh38.vcf` for data aligned to GRCh38, and/or choosing a different output file.\n\n```\nusage: SMaSH.py [-h] [-bam BAM_COMMA_LIST] [-i INFILE] [-o OUTNAME]\n                [-chr_index CHR_INDEX] [-pos_index POS_INDEX]\n                [-ref_index REF_INDEX] [-alt_index ALT_INDEX] [-regenerate]\n                [-output_dir OUTPUT_DIR] [-include_rgid]\n                [bam [bam ...]]\n\npositional arguments:\n  bam                   BAM/SAM files to check. Note BAMs must end in .bam and\n                        be indexed\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -bam BAM_COMMA_LIST, --bam BAM_COMMA_LIST\n                        [deprecated] input BAM/SAM files to be tested (comma\n                        separated list) or 'ALL' to use all BAMs in current\n                        dir.\n  -i INFILE, --positions INFILE\n                        input locations file\n  -o OUTNAME, --output_file OUTNAME\n                        output file name [pval_out.txt]\n  -chr_index CHR_INDEX, --chr_index CHR_INDEX\n                        index of chromosome column in locations file [0]\n  -pos_index POS_INDEX, --pos_index POS_INDEX\n                        index of position column in locations file [1]\n  -ref_index REF_INDEX, --ref_index REF_INDEX\n                        reference allele index\n  -alt_index ALT_INDEX, --alt_index ALT_INDEX\n                        alternate allele index\n  -regenerate, --regenerate\n                        regenerate SNP read counts and all calculations\n  -output_dir OUTPUT_DIR, --output_dir OUTPUT_DIR\n                        The directory to save output files. [default: ./]\n  -include_rgid, --include_rgid\n                        include BAM's Read Group ID value in output and only\n                        print the BAM's basename, not full path\n\n```\n"
      },
      "source": "https://raw.githubusercontent.com/rbundschuh/SMaSH/master/README.md",
      "technique": "header_analysis"
    }
  ]
}