{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/abs-tudelft/variant-calling-at-scale"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-12-10T18:50:58Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-10-27T03:42:53Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Scalable and High Performance Variant Calling on Cluster Environments "
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Custom Image creation on GCP DataProc Cluster:",
        "parent_header": [
          "2. Google GCP DataProc Cluster"
        ],
        "type": "Text_excerpt",
        "value": "- Create a bucket inside GCP [storage](https://console.cloud.google.com/storage) to store a custom image like `gs://{user}/images`\n- Open https://console.cloud.google.com/ \n- Use \u201cgcloud config set project [PROJECT_ID]\u201d to change to a different project.\n- Inside Cloud Shell run:\n\n      git clone https://github.com/tahashmi/custom-images\n      cd custom-images\n      python3 generate_custom_image.py --image-name \"bwa-custom\" --dataproc-version \"2.0.1-ubuntu18\" --customization-script bwa_standalone.sh --zone \"asia-east1-a\" --gcs-bucket \"gs://{user}/images\" --shutdown-instance-timer-sec 50 --no-smoke-test\nThis will create a custom image which can be used on Google GCP DataProc cluster instances.\n"
      },
      "source": "https://raw.githubusercontent.com/abs-tudelft/variant-calling-at-scale/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9992633073735955,
      "result": {
        "original_header": "Variant Calling at Scale",
        "type": "Text_excerpt",
        "value": "Variant Calling at Scale is a scalable, parallel and efficient implementation of next generation sequencing data pre-processing and variant calling workflows. Our design tightly integrates most pre-processing workflow stages, using Spark built-in functions to sort reads by coordinates, and mark duplicates efficiently. A cluster scaled DeepVariant for both CPU-only and CPU+GPU clusters is also integrated in this workflow.  \n"
      },
      "source": "https://raw.githubusercontent.com/abs-tudelft/variant-calling-at-scale/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9354157024009537,
      "result": {
        "original_header": "Methods",
        "type": "Text_excerpt",
        "value": "1. Apache Spark based cluster scaled pre-processing (BWA-MEM, Sorting and MarkDuplicate) `->` output multiple BAM files based on choromosome regions\n2. Apache Spark based cluster scaled Variant Calling (BWA-MEM, Sorting and MarkDuplicate and DeepVariant/Octopus) `->` output a single VCF \n"
      },
      "source": "https://raw.githubusercontent.com/abs-tudelft/variant-calling-at-scale/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8399430760585019,
      "result": {
        "original_header": "[DataProc cluster] BWA (alignment) `-&gt;` Sambamba (Sorting) `-&gt;` Sambamba (Duplicates removal (optional)) `-&gt;` Samtools (merge BAMs)",
        "type": "Text_excerpt",
        "value": "1. Install [Singularity](https://sylabs.io/docs/) container\n2. Download our Singularity [script](https://github.com/abs-tudelft/arrow-gen/tree/master/Singularity) and generate singularity image (this image contains all Arrow related packges necessary for building/compiling BWA-MEM)\n3. Now enter into generated image using command:\n         \n        sudo singularity shell <image_name>.simg \n1. Before running the variant calling workflow, we have to create a custom operating system image by installing all the prerequisite applications, which will be used on GCP DataProc cluster. \n2. We will then create a GCP DataProc cluster and a GCP Filestore instance. \n3. After DataProc cluster creation, we will mount the Filestore on each node. \n4. Then we download the reference, query and GIAB benchmark truth datasets. \n5. The final step is to run different parts of this workflow on GCP console.  \n"
      },
      "source": "https://raw.githubusercontent.com/abs-tudelft/variant-calling-at-scale/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9888620650582971,
      "result": {
        "original_header": "Standalone pre-processing on clusters:",
        "type": "Text_excerpt",
        "value": "FASTQ data is streamed to BWA on every cluster node, BWA output is piped into Sambamba to perform sorting, duplicates removal option is also available, if enabled sorted data is piped to this stage as well. For final output, Samtools (merge) is used to produces a single BAM output, ready for further down stream analysis.\n##### [DataProc cluster] BWA (alignment) `->` Sambamba (Sorting) `->` Sambamba (Duplicates removal (optional)) `->` Samtools (merge BAMs) \n### Other Variant Callers Support\nAny variant caller which can support regions specific variant calling can be integrated into this workflow. Here we show how to use the [Octopus](https://github.com/luntergroup/octopus), a latest and an accurate/fast variant caller as a use case to demonstrate the feasibility of integrating any other variant callers in this approach. \n"
      },
      "source": "https://raw.githubusercontent.com/abs-tudelft/variant-calling-at-scale/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8345172187000067,
      "result": {
        "original_header": "[DataProc cluster] BWA (alignment) `-&gt;` Sambamba (Sorting) `-&gt;` Sambamba (Duplicates removal (optional)) `-&gt;` Samtools (merge BAMs)",
        "type": "Text_excerpt",
        "value": "## Custom Image creation on GCP DataProc Cluster:\n- Create a bucket inside GCP [storage](https://console.cloud.google.com/storage) to store a custom image like `gs://{user}/images`\n- Open https://console.cloud.google.com/ \n- Use \u201cgcloud config set project [PROJECT_ID]\u201d to change to a different project.\n- Inside Cloud Shell run: \n"
      },
      "source": "https://raw.githubusercontent.com/abs-tudelft/variant-calling-at-scale/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8491727465844484,
      "result": {
        "original_header": "Setting up GCP DataProc cluster:",
        "type": "Text_excerpt",
        "value": "On all master and worker nodes \n"
      },
      "source": "https://raw.githubusercontent.com/abs-tudelft/variant-calling-at-scale/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.997788374203416,
      "result": {
        "original_header": "[DataProc cluster] BWA (alignment) `-&gt;` Sambamba (Sorting) `-&gt;` Sambamba (Duplicates removal (optional)) `-&gt;` Samtools (merge BAMs)",
        "type": "Text_excerpt",
        "value": "## Standalone pre-processing on clusters:\nFASTQ data is streamed to BWA on every cluster node, BWA output is piped into Sambamba to perform sorting, duplicates removal option is also available, if enabled sorted data is piped to this stage as well. For final output, Samtools (merge) is used to produces a single BAM output, ready for further down stream analysis.\n##### [DataProc cluster] BWA (alignment) `->` Sambamba (Sorting) `->` Sambamba (Duplicates removal (optional)) `->` Samtools (merge BAMs) \n"
      },
      "source": "https://raw.githubusercontent.com/abs-tudelft/variant-calling-at-scale/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/abs-tudelft/variant-calling-at-scale/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/abs-tudelft/variant-calling-at-scale/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "abs-tudelft/variant-calling-at-scale"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Variant Calling at Scale"
      },
      "source": "https://raw.githubusercontent.com/abs-tudelft/variant-calling-at-scale/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/abs-tudelft/variant-calling-at-scale/main/single.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/abs-tudelft/variant-calling-at-scale/main/scripts/ADAM.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/abs-tudelft/variant-calling-at-scale/main/scripts/SVCall.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/abs-tudelft/variant-calling-at-scale/main/scripts/SparkGA2.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/abs-tudelft/variant-calling-at-scale/main/long-reads/0_chunks.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/abs-tudelft/variant-calling-at-scale/main/long-reads/download_singularity_images.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/abs-tudelft/variant-calling-at-scale/main/long-reads/3_variant_calling.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/abs-tudelft/variant-calling-at-scale/main/long-reads/1_alignment.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/abs-tudelft/variant-calling-at-scale/main/long-reads/2_sorting.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/abs-tudelft/variant-calling-at-scale/main/standalone/DeepVariant.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/abs-tudelft/variant-calling-at-scale/main/standalone/BWAMEM.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation Requirements",
        "parent_header": [
          "1. Slurm based Cluster"
        ],
        "type": "Text_excerpt",
        "value": " - Ubuntu 16.04/18.04\n - Apache Spark 3.0.1\n - [Singularity](https://sylabs.io/docs/) container\n "
      },
      "source": "https://raw.githubusercontent.com/abs-tudelft/variant-calling-at-scale/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Setting up GCP DataProc cluster:",
        "parent_header": [
          "2. Google GCP DataProc Cluster"
        ],
        "type": "Text_excerpt",
        "value": "On all master and worker nodes\n\n    #***********************************************#\n    sudo apt-get -y update && sudo apt-get install nfs-common\n    sudo mkdir -p /mnt/fs_shared\n    sudo mount 10.35.205.242:/fs_shared /mnt/fs_shared/\n    sudo chmod go+rw /mnt/fs_shared/\n    df -h --type=nfs\n\nOn any node\n\n    #***********************************************#\n    mkdir -p /mnt/fs_shared/reference\n    cd /mnt/fs_shared/reference\n    \n    #Download reference genome\n    wget ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/000/001/405/GCA_000001405.15_GRCh38/seqs_for_alignment_pipelines.ucsc_ids/GCA_000001405.15_GRCh38_no_alt_analysis_set.fna.gz \n    gunzip GCA_000001405.15_GRCh38_no_alt_analysis_set.fna.gz \n    mv GCA_000001405.15_GRCh38_no_alt_analysis_set.fna GRCh38.fa\n    wget ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/000/001/405/GCA_000001405.15_GRCh38/seqs_for_alignment_pipelines.ucsc_ids/GCA_000001405.15_GRCh38_no_alt_analysis_set.fna.fai\n    mv GCA_000001405.15_GRCh38_no_alt_analysis_set.fna.fai GRCh38.fa.fai\n    \n    #Download the query data\n    mkdir -p /mnt/fs_shared/query/ERR001268\n    cd /mnt/fs_shared/query/ERR001268\n    wget ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/phase3/data/NA12878/sequence_read/ERR001268_1.filt.fastq.gz\n    gunzip ERR001268_1.filt.fastq.gz\n    mv ERR001268_1.filt.fastq ERR001268_1.fastq\n    wget ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/phase3/data/NA12878/sequence_read/ERR001268_2.filt.fastq.gz\n    gunzip ERR001268_2.filt.fastq.gz\n    mv ERR001268_2.filt.fastq ERR001268_2.fastq\n\n    #Create output dirs\n    mkdir -p  /mnt/fs_shared/query/ERR001268/arrow\n    sudo chmod go+rw  /mnt/fs_shared/query/ERR001268/arrow\n\n    cd /mnt/fs_shared/query/ERR001268\n    mkdir bams\n    sudo chmod go+rw  bams/\n\n    cd  /mnt/fs_shared/query/ERR001268/bams\n    mkdir outputs\n    sudo chmod go+rw  outputs/\n    \n    cd /mnt/fs_shared\n    #Download vcfmerge script https://gist.github.com/tahashmi/84927410a47fd0b76a66228c1b37a744\n    wget https://gist.github.com/tahashmi/84927410a47fd0b76a66228c1b37a744 \n    sudo chmod +x /mnt/fs_shared/query/ERR001268/vcfmerge.sh\n"
      },
      "source": "https://raw.githubusercontent.com/abs-tudelft/variant-calling-at-scale/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.8413828134168265,
      "result": {
        "original_header": "Infraturcture",
        "type": "Text_excerpt",
        "value": "This approach can be used on following infraturcture(s): \n"
      },
      "source": "https://raw.githubusercontent.com/abs-tudelft/variant-calling-at-scale/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8228844468530963,
      "result": {
        "original_header": "Aligners",
        "type": "Text_excerpt",
        "value": "- [x] BWA-MEM\n- [ ] BWA-MEM2\n- [ ] Bowtie2\n- [x] Minimap2 \n"
      },
      "source": "https://raw.githubusercontent.com/abs-tudelft/variant-calling-at-scale/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9989370505298212,
      "result": {
        "original_header": "[DataProc cluster] BWA (alignment) `-&gt;` Sambamba (Sorting) `-&gt;` Sambamba (Duplicates removal (optional)) `-&gt;` Samtools (merge BAMs)",
        "type": "Text_excerpt",
        "value": "1. Install [Singularity](https://sylabs.io/docs/) container\n2. Download our Singularity [script](https://github.com/abs-tudelft/arrow-gen/tree/master/Singularity) and generate singularity image (this image contains all Arrow related packges necessary for building/compiling BWA-MEM)\n3. Now enter into generated image using command:\n         \n        sudo singularity shell <image_name>.simg \n"
      },
      "source": "https://raw.githubusercontent.com/abs-tudelft/variant-calling-at-scale/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9980605771756814,
      "result": {
        "original_header": "2. Google GCP DataProc Cluster",
        "type": "Text_excerpt",
        "value": "The following steps are required to test/run this workflow. \n"
      },
      "source": "https://raw.githubusercontent.com/abs-tudelft/variant-calling-at-scale/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9995229771001118,
      "result": {
        "original_header": "Standalone pre-processing on clusters:",
        "type": "Text_excerpt",
        "value": "1. Custom image is needed to be used on DataProc cluster, follow these [steps](https://github.com/abs-tudelft/SVCall/blob/main/README.md#custom-image-creation-on-gcp-dataproc-cluster) to create one.\n2. Create a network-attached storage system which can be used with Google Compute Engine instances. Storage -> Filestore `->` Give any name like \"fs\" {instance id/name}, \"fs-shared\" {file shared name} `->` Create\n3. Perfrom the following [steps](https://github.com/abs-tudelft/SVCall/blob/main/README.md#setting-up-gcp-dataproc-cluster) to make GCP DataProc cluster ready to run this workflow.\n4. Upload script file to your bucket\n5. Run the following commands in GCP console shell: \n       taha_ahmad_pk_101@cloudshell:~ (organic-poetry-309513)$ \n       gcloud dataproc jobs submit pyspark --region=us-central1 --cluster=cluster-555  --     properties=spark.pyspark.python=/usr/bin/python3.6,spark.pyspark.driver.python=/usr/bin/python3.6,spark.executor.memory=2G,spark.driver.memory=2G,spark.num.executors=2,spark.executor.cores=8  gs://bucket_taha_pk/scripts/bwa-standalone.py -- --markdup yes --ref /mnt/fs_shared/reference/GRCh38.fa  --path /mnt/fs_shared/query/ERR001268/  --nodes 2 --cores 8 --aligner BWA \n##### [Single node] BWA (alignment) `->` Sambamba (Sorting) `->` Sambamba (Duplicates removal (optional)) \n       time bwa mem -t 8 /mnt/fs_shared/reference/GRCh38.fa /mnt/fs_shared/query/ERR001268/ERR001268_1.fastq /mnt/fs_shared/query/ERR001268/ERR001268_2.fastq  -o /dev/stdout | /usr/local/bin/sambamba-0.8.0-linux-amd64-static view -t 8 -S -f bam /dev/stdin > /dev/stdout | /usr/local/bin/sambamba-0.8.0-linux-amd64-static sort -t 8 -o /mnt/fs_shared/query/ERR001268/bams/ERR001268.bam /dev/stdin \n"
      },
      "source": "https://raw.githubusercontent.com/abs-tudelft/variant-calling-at-scale/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.989421873460731,
      "result": {
        "original_header": "[Single node] BWA (alignment) `-&gt;` Sambamba (Sorting) `-&gt;` Sambamba (Duplicates removal (optional))",
        "type": "Text_excerpt",
        "value": "       time /usr/local/bin/sambamba-0.8.0-linux-amd64-static markdup -t 8 -r /mnt/fs_shared/query/ERR001268/bams/ERR001268.bam /mnt/fs_shared/query/ERR001268/bams/ERR001268_md.bam\n \n"
      },
      "source": "https://raw.githubusercontent.com/abs-tudelft/variant-calling-at-scale/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9971652820106003,
      "result": {
        "original_header": "Standalone pre-processing on clusters:",
        "type": "Text_excerpt",
        "value": "1. Download octopus singularity container on GCP Filestore\n```\ncd /mnt/fs_shared\nsudo singularity pull  docker://dancooke/octopus\n```\n2. Repeat part `1` and `2`\n3. Run the following command inside GCP console by changing `--vcaller` to `Octopus`:\nBASH2*\n4. Repeat part `4` for merging VCFs and generating accuracy results using `hap.py`  \n"
      },
      "source": "https://raw.githubusercontent.com/abs-tudelft/variant-calling-at-scale/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.999999653728542,
      "result": {
        "original_header": "[DataProc cluster] BWA (alignment) `-&gt;` Sambamba (Sorting) `-&gt;` Sambamba (Duplicates removal (optional)) `-&gt;` Samtools (merge BAMs)",
        "type": "Text_excerpt",
        "value": "## Installation Requirements\n - Ubuntu 16.04/18.04\n - Apache Spark 3.0.1\n - [Singularity](https://sylabs.io/docs/) container\n \n## Configuration & Build \n      git clone https://github.com/tahashmi/custom-images\n      cd custom-images\n      python3 generate_custom_image.py --image-name \"bwa-custom\" --dataproc-version \"2.0.1-ubuntu18\" --customization-script bwa_standalone.sh --zone \"asia-east1-a\" --gcs-bucket \"gs://{user}/images\" --shutdown-instance-timer-sec 50 --no-smoke-test\nThis will create a custom image which can be used on Google GCP DataProc cluster instances. \n"
      },
      "source": "https://raw.githubusercontent.com/abs-tudelft/variant-calling-at-scale/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9997915551401539,
      "result": {
        "original_header": "Setting up GCP DataProc cluster:",
        "type": "Text_excerpt",
        "value": "    #***********************************************#\n    sudo apt-get -y update && sudo apt-get install nfs-common\n    sudo mkdir -p /mnt/fs_shared\n    sudo mount 10.35.205.242:/fs_shared /mnt/fs_shared/\n    sudo chmod go+rw /mnt/fs_shared/\n    df -h --type=nfs \n    #***********************************************#\n    mkdir -p /mnt/fs_shared/reference\n    cd /mnt/fs_shared/reference\n    \n    #Download reference genome\n    wget ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/000/001/405/GCA_000001405.15_GRCh38/seqs_for_alignment_pipelines.ucsc_ids/GCA_000001405.15_GRCh38_no_alt_analysis_set.fna.gz \n    gunzip GCA_000001405.15_GRCh38_no_alt_analysis_set.fna.gz \n    mv GCA_000001405.15_GRCh38_no_alt_analysis_set.fna GRCh38.fa\n    wget ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/000/001/405/GCA_000001405.15_GRCh38/seqs_for_alignment_pipelines.ucsc_ids/GCA_000001405.15_GRCh38_no_alt_analysis_set.fna.fai\n    mv GCA_000001405.15_GRCh38_no_alt_analysis_set.fna.fai GRCh38.fa.fai\n    \n    #Download the query data\n    mkdir -p /mnt/fs_shared/query/ERR001268\n    cd /mnt/fs_shared/query/ERR001268\n    wget ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/phase3/data/NA12878/sequence_read/ERR001268_1.filt.fastq.gz\n    gunzip ERR001268_1.filt.fastq.gz\n    mv ERR001268_1.filt.fastq ERR001268_1.fastq\n    wget ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/phase3/data/NA12878/sequence_read/ERR001268_2.filt.fastq.gz\n    gunzip ERR001268_2.filt.fastq.gz\n    mv ERR001268_2.filt.fastq ERR001268_2.fastq \n    #Create output dirs\n    mkdir -p  /mnt/fs_shared/query/ERR001268/arrow\n    sudo chmod go+rw  /mnt/fs_shared/query/ERR001268/arrow \n    cd /mnt/fs_shared/query/ERR001268\n    mkdir bams\n    sudo chmod go+rw  bams/ \n"
      },
      "source": "https://raw.githubusercontent.com/abs-tudelft/variant-calling-at-scale/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 1.0,
      "result": {
        "original_header": "[DataProc cluster] BWA (alignment) `-&gt;` Sambamba (Sorting) `-&gt;` Sambamba (Duplicates removal (optional)) `-&gt;` Samtools (merge BAMs)",
        "type": "Text_excerpt",
        "value": "    cd  /mnt/fs_shared/query/ERR001268/bams\n    mkdir outputs\n    sudo chmod go+rw  outputs/\n    \n    cd /mnt/fs_shared\n    #Download vcfmerge script https://gist.github.com/tahashmi/84927410a47fd0b76a66228c1b37a744\n    wget https://gist.github.com/tahashmi/84927410a47fd0b76a66228c1b37a744 \n    sudo chmod +x /mnt/fs_shared/query/ERR001268/vcfmerge.sh \n"
      },
      "source": "https://raw.githubusercontent.com/abs-tudelft/variant-calling-at-scale/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8174374762525553,
      "result": {
        "original_header": "Standalone pre-processing on clusters:",
        "type": "Text_excerpt",
        "value": "       taha_ahmad_pk_101@cloudshell:~ (organic-poetry-309513)$ \n       gcloud dataproc jobs submit pyspark --region=us-central1 --cluster=cluster-555  --     properties=spark.pyspark.python=/usr/bin/python3.6,spark.pyspark.driver.python=/usr/bin/python3.6,spark.executor.memory=2G,spark.driver.memory=2G,spark.num.executors=2,spark.executor.cores=8  gs://bucket_taha_pk/scripts/bwa-standalone.py -- --markdup yes --ref /mnt/fs_shared/reference/GRCh38.fa  --path /mnt/fs_shared/query/ERR001268/  --nodes 2 --cores 8 --aligner BWA \n"
      },
      "source": "https://raw.githubusercontent.com/abs-tudelft/variant-calling-at-scale/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/abs-tudelft/variant-calling-at-scale/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bwa, deepvariant, duplicates-removal, gcp-dataproc-cluster, minimap2, variant-calling"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Apache License 2.0",
        "spdx_id": "Apache-2.0",
        "type": "License",
        "url": "https://api.github.com/licenses/apache-2.0",
        "value": "https://api.github.com/licenses/apache-2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
      },
      "source": "https://raw.githubusercontent.com/abs-tudelft/variant-calling-at-scale/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "variant-calling-at-scale"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "abs-tudelft"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 41304,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 30850,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/abs-tudelft/variant-calling-at-scale/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Apache Arrow Dependencies",
        "parent_header": [
          "1. Slurm based Cluster"
        ],
        "type": "Text_excerpt",
        "value": " - [C++ libraries](https://github.com/apache/arrow/tree/master/cpp)\n - [C bindings using GLib](https://github.com/apache/arrow/tree/master/c_glib)\n - [Plasma Object Store](https://github.com/apache/arrow/tree/master/cpp/src/plasma): a\n   shared-memory blob store, part of the C++ codebase\n - [Python libraries](https://github.com/apache/arrow/tree/master/python)\n"
      },
      "source": "https://raw.githubusercontent.com/abs-tudelft/variant-calling-at-scale/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation Requirements",
        "parent_header": [
          "1. Slurm based Cluster"
        ],
        "type": "Text_excerpt",
        "value": " - Ubuntu 16.04/18.04\n - Apache Spark 3.0.1\n - [Singularity](https://sylabs.io/docs/) container\n "
      },
      "source": "https://raw.githubusercontent.com/abs-tudelft/variant-calling-at-scale/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 03:32:36",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 10
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Other Variant Callers Support",
        "parent_header": [
          "2. Google GCP DataProc Cluster",
          "Standalone pre-processing on clusters:"
        ],
        "type": "Text_excerpt",
        "value": "Any variant caller which can support regions specific variant calling can be integrated into this workflow. Here we show how to use the [Octopus](https://github.com/luntergroup/octopus), a latest and an accurate/fast variant caller as a use case to demonstrate the feasibility of integrating any other variant callers in this approach.\n\n1. Download octopus singularity container on GCP Filestore\n```\ncd /mnt/fs_shared\nsudo singularity pull  docker://dancooke/octopus\n```\n2. Repeat part `1` and `2`\n3. Run the following command inside GCP console by changing `--vcaller` to `Octopus`:\n```\ngcloud dataproc jobs submit pyspark --region=us-central1 --cluster=cluster-555  --properties=spark.pyspark.python=/usr/bin/python3.6,spark.pyspark.driver.python=/usr/bin/python3.6,spark.executor.memory=2G,spark.driver.memory=2G,spark.num.executors=3,spark.executor.cores=8  gs://bucket_taha_pk/scripts/bwa.py -- --part 3 --ref /mnt/fs_shared/reference/GRCh38.fa  --path /mnt/fs_shared/query/HG003/  --nodes 3 --cores 8 --aligner BWA --vcaller Octopus\n```\n4. Repeat part `4` for merging VCFs and generating accuracy results using `hap.py` \n\nThe output should be like this:\n\nDeepVariant:\n```\n Type Filter  TRUTH.TOTAL  TRUTH.TP  TRUTH.FN  QUERY.TOTAL  QUERY.FP  QUERY.UNK  FP.gt  METRIC.Recall  METRIC.Precision  METRIC.Frac_NA  METRIC.F1_Score  TRUTH.TOTAL.TiTv_ratio  QUERY.TOTAL.TiTv_ratio  TRUTH.TOTAL.het_hom_ratio  QUERY.TOTAL.het_hom_ratio\n INDEL    ALL        10634     10579        55        21045        24       9984     19       0.994828          0.997830        0.474412         0.996327                     NaN                     NaN                   1.749861                   2.296457\n INDEL   PASS        10634     10579        55        21045        24       9984     19       0.994828          0.997830        0.474412         0.996327                     NaN                     NaN                   1.749861                   2.296457\n   SNP    ALL        70209     69947       262        85681        85      15619     14       0.996268          0.998787        0.182292         0.997526                2.297347                2.071024                   1.884533                   1.937783\n   SNP   PASS        70209     69947       262        85681        85      15619     14       0.996268          0.998787        0.182292         0.997526                2.297347                2.071024                   1.884533                   1.937783\n```\nOctopus:\n```\n  Type Filter  TRUTH.TOTAL  TRUTH.TP  TRUTH.FN  QUERY.TOTAL  QUERY.FP  QUERY.UNK  FP.gt  METRIC.Recall  METRIC.Precision  METRIC.Frac_NA  METRIC.F1_Score  TRUTH.TOTAL.TiTv_ratio  QUERY.TOTAL.TiTv_ratio  TRUTH.TOTAL.het_hom_ratio  QUERY.TOTAL.het_hom_ratio\n INDEL    ALL        10634     10586        48        23110        89      11874     22       0.995486          0.992079        0.513804         0.993780                     NaN                     NaN                   1.749861                   2.081653\n INDEL   PASS        10634     10579        55        20827        18       9670      9       0.994828          0.998387        0.464301         0.996604                     NaN                     NaN                   1.749861                   1.879637\n   SNP    ALL        70209     69909       300        99329       569      29170     34       0.995727          0.991890        0.293671         0.993805                2.297347                1.966237                   1.884533                   2.461922\n   SNP   PASS        70209     69856       353        82612        87      12987     11       0.994972          0.998750        0.157205         0.996858                2.297347                2.147613                   1.884533                   1.920645\n```\n"
      },
      "source": "https://raw.githubusercontent.com/abs-tudelft/variant-calling-at-scale/main/README.md",
      "technique": "header_analysis"
    }
  ]
}