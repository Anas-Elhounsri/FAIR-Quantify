{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/itmat/rum"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2012-01-27T14:25:48Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-08-17T21:12:16Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "RNA-Seq Unified Mapper"
      },
      "technique": "GitHub_API"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/itmat/rum/wiki"
      },
      "source": "https://raw.githubusercontent.com/itmat/rum/master/README",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/itmat/rum/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "faq": [
    {
      "confidence": 1,
      "result": {
        "original_header": "My job stopped prematurely without writing any error messages to the log files. What happened?",
        "parent_header": [
          "Setting Up and Running RUM",
          "Frequently Asked Questions"
        ],
        "type": "Text_excerpt",
        "value": "rum_runner will attempt to write a FATAL message to the error logs if\nit encounters an error that it can't handle and needs to\nexit. However, there are some conditions that cause rum_runner to exit\nimmediately, and the program won't log a message in that case. Running\nout of memory is one example. So if you have a job that just appeared\nto stop prematurely without leaving any trace of a reason in the log\nfile, it's likely that it ran out of memory.\n"
      },
      "source": "https://raw.githubusercontent.com/itmat/rum/master/README",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "I started a RUM job and now my system is unresponsive. Why?",
        "parent_header": [
          "Setting Up and Running RUM",
          "Frequently Asked Questions"
        ],
        "type": "Text_excerpt",
        "value": "If you run a job on a single machine and split it up into multiple\nchunks, it may be using too much memory or CPU time.\n\nFor a human genome, each chunk will use about 6 GB of ram, so in order\nto run it in 10 chunks on a single machine, you'd need at least 60 GB\nof ram free to be safe.\n\nYou probably don't want to use more chunks than you have cores in your\nsystem. For example if you have a dual-core system, running a job with\n10 chunks will likely create high contention for CPU resources, making\nyour system seem unresponsive.\n\nSo if RUM seems to put too much strain on your system, reducing the\nnumber of chunks might help.\n"
      },
      "source": "https://raw.githubusercontent.com/itmat/rum/master/README",
      "technique": "header_analysis"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/itmat/rum/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "itmat/rum"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Setting Up and Running RUM"
      },
      "source": "https://raw.githubusercontent.com/itmat/rum/master/README",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "http://www.cbil.upenn.edu/RUM/RUMPC2_small2.gif"
      },
      "source": "https://raw.githubusercontent.com/itmat/rum/master/README",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Setting Up and Running RUM",
        "type": "Text_excerpt",
        "value": " <img style=\"float:right\" src=\"http://www.cbil.upenn.edu/RUM/RUMPC2_small2.gif\" class=\"float: right\"></img>\n\n**RUM is an alignment, junction calling, and feature quantification\n  pipeline specifically designed for Illumina RNA-Seq data.**\n\n*RUM can also be used effectively for DNA sequencing (e.g. ChIP-Seq)\nand microarray probe mapping.*\n\n*RUM also has a strand specific mode.*\n\n*RUM is highly configurable, however it does not require fussing over\noptions, the defaults generally give good results.*\n"
      },
      "source": "https://raw.githubusercontent.com/itmat/rum/master/README",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Publication",
        "parent_header": [
          "Setting Up and Running RUM"
        ],
        "type": "Text_excerpt",
        "value": "[Comparative Analysis of RNA-Seq Alignment Algorithms and the RNA-Seq Unified Mapper (RUM)](http://www.ncbi.nlm.nih.gov/pubmed/21775302?dopt=Abstract) Gregory R. Grant, Michael H. Farkas, Angel Pizarro, Nicholas Lahens, Jonathan Schug, Brian Brunk, Christian J. Stoeckert Jr, John B. Hogenesch and Eric A. Pierce. \n"
      },
      "source": "https://raw.githubusercontent.com/itmat/rum/master/README",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Restrictions",
        "parent_header": [
          "Setting Up and Running RUM"
        ],
        "type": "Text_excerpt",
        "value": "RUM is freely available to academics and non-profit\norganizations. However since RUM uses BLAT, users from industry must\nfirst obtain a licence for BLAT from the Kent Informatics Website.\n"
      },
      "source": "https://raw.githubusercontent.com/itmat/rum/master/README",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Autodie",
        "parent_header": [
          "Setting Up and Running RUM",
          "System Requirements",
          "Third-Party Perl Modules"
        ],
        "type": "Text_excerpt",
        "value": "You will now need the `autodie` Perl module. If you are using perl >=\n5.10, this should already be installed. If not, you may need to\ninstall it. You should be able to install it very quickly by running:\n\n```\ncpan -i autodie\n```\n"
      },
      "source": "https://raw.githubusercontent.com/itmat/rum/master/README",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Log::Log4perl",
        "parent_header": [
          "Setting Up and Running RUM",
          "System Requirements",
          "Third-Party Perl Modules"
        ],
        "type": "Text_excerpt",
        "value": "Log::Log4perl is recommended, but not required. You should be able to\ninstall it by running:\n\n```\ncpan -i Log::Log4perl\n```\n\nIf you have Log::Log4perl, you will be able to control logging output\nby modifying the `conf/rum_logging.conf` file in the RUM\ndistribution. See http://mschilli.github.com/log4perl/ for more\ninformation.\n"
      },
      "source": "https://raw.githubusercontent.com/itmat/rum/master/README",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installing RUM",
        "parent_header": [
          "Setting Up and Running RUM"
        ],
        "type": "Text_excerpt",
        "value": "You can download a specific version of RUM from the tags page on\ngithub: https://github.com/PGFI/rum/tags. The latest production\nrelease is always available at\nhttps://github.com/PGFI/rum/archive/master.tar.gz. The latest\nbleeding-edge development code (which may be unstable) is available\nhere: https://github.com/PGFI/rum/archive/develop.tar.gz.\n\nYou have a few different options for installing RUM, depending on\nwhether you want it in a system location, in an arbitrary user\ndirectory, or in another location where you keep Perl modules.\n"
      },
      "source": "https://raw.githubusercontent.com/itmat/rum/master/README",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "In a system directory",
        "parent_header": [
          "Setting Up and Running RUM",
          "Installing RUM"
        ],
        "type": "Text_excerpt",
        "value": "If you have root priviliges and want to install RUM in a system\nlocation like `/usr/local`, you can now do so using the standard Perl\nmodule installation process:\n\n```sh\nperl Makefile.PL\nmake\nmake install # (may need sudo)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/itmat/rum/master/README",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "In a user directory",
        "parent_header": [
          "Setting Up and Running RUM",
          "Installing RUM"
        ],
        "type": "Text_excerpt",
        "value": "If you would rather install RUM in a user-owned directory, you can\nsimply untar RUM right in the directory where you to install it, and\nthen run `perl Makefile.PL`. For example, if you want to have rum\ninstalled in `~/RUM-Pipeline-2.00_13`, assuming you have downloaded\n`RUM-Pipeline-2.00_13.tar.gz` to your current directory, you can\nsimply do:\n\n```\ntar zxvf RUM-Pipeline-2.00_13.tar.gz\ncd RUM-Pipeline-2.00_13\nperl Makefile.PL\n```\n\nThis will place all the rum executables in `RUM-Pipeline-2.00_11/bin`.\nThey will find the RUM libraries they need automatically. You may want\nto add the `bin` directory to your path, so that you can run RUM\nsimply by typing `rum_runner`:\n\n```sh\nexport PATH=\"${PATH}:${RUM_HOME}/bin\"\nrum_runner ...\n```\n\nIf you don't add the RUM bin directory to your path, you will need to\nspecify the path to `rum_runner` when you run it. For example, if\nyou're in the root of the RUM installation, you can run:\n\n```sh\nbin/rum_runner ...\n```\n\nIf you're in the bin directory, run:\n\n```sh\n./rum_runner ...\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/itmat/rum/master/README",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "In an alternate Perl module location",
        "parent_header": [
          "Setting Up and Running RUM",
          "Installing RUM"
        ],
        "type": "Text_excerpt",
        "value": "If you have an alternate location where you keep Perl modules, you\nshould be able to install RUM there by passing an\n`INSTALL_BASE=/some/path` option to the `perl Makefile.PL step`. RUM\nshould automatically find all of its perl modules if you install it in\nthis manner. For example:\n\n```sh\nRUM_HOME=~/rum\nperl Makefile.PL INSTALL_BASE=$RUM_HOME\nmake\nmake install\n```\n\nAs in the previous option, you will either need to run `rum_runner`\nusing the full path, or add `$RUM_HOME/bin` to your `$PATH`.\n"
      },
      "source": "https://raw.githubusercontent.com/itmat/rum/master/README",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installing Indexes",
        "parent_header": [
          "Setting Up and Running RUM"
        ],
        "type": "Text_excerpt",
        "value": "Once you install the RUM code, you'll want to use the `rum_indexes`\nprogram to install one or more indexes. By default it will install\nindexes in the location where you installed RUM itself, but you can\nuse the `--prefix` option to tell it to install indexes somewhere\nelse:\n\n```sh\n# Install them where you installed rum\nrum_indexes\n\n# Install them in ~/rum-indexes\nrum_indexes --prefix ~/rum-indexes\n```\n\nWhen you install an index, all the files for that organism will be\nplaced in a new directory named after the organism. You will need to\nspecify the index directory when you run RUM. For example, if you\ninstalled the mm9 index by running `rum_indexes --prefix\n~/rum-indexes`, in order to align some reads using that index, you\nwould run:\n\n```\nrum_runner align --index ~/rum-indexes/mm9 ...\n```\n\nNote that you will need a lot of available disk space in order to\ninstall indexes.\n\nAt the moment the following indexes are available:\n\n* _Homo sapiens_ (build hg19) (**human**)\n* _Homo sapiens_ (build hg18) (**human**)\n* _Mus musculus_ (build mm9) (**mouse**)\n* _Danio rerio_ (build danRer7) (**zebrafish**)\n* _Drosophila melanogaster_ (build dm3) (**fruit fly**)\n* _Anopheles gambiae_ (build anoGam1) (**mosquito**)\n* _Caenorhabditis elegans_ (build c36) (**nematode worm**)\n* _Saccharomyces cerevisiae_ (build sacCer3) (**yeast**)\n* _Rattus norvegicus_ (build m4) (**rat**)\n* _Sus scrofa_ (build susScr2) (**pig**)\n* _Canis lupus familiaris_ (build canFam2) (**dog**)\n* _Pan troglodytes_ (build panTro2) (**chimpanzee**)\n* _Pongo pygmaeus abelii_ (build ponAbe2) (**orangutan**)\n* _Macaca mulatta_ (build rheMac2) (**rhesus monkey**)\n* _Gallus gallus_ (build galGal3) (**chicken**)\n* _Plasmodium falciparum_ (build 06-2010) (**malaria parasite**)\n* _Arabidopsis thaliana_ (build TAIR10) (**arabadopsis**)\n\nIf you require a different\norganism, instructions are given\n[here](https://github.com/itmat/rum/wiki/Creating-indexes) to\nbuild your own custom indexes. Or write us, we may be able to provide\nit.\n"
      },
      "source": "https://raw.githubusercontent.com/itmat/rum/master/README",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/itmat/rum/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Copyright (c) 2012 University of Pennsylvania\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/itmat/rum/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "rum"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "itmat"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Roff",
        "size": 5706309,
        "type": "Programming_language",
        "value": "Roff"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 1178137,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Raku",
        "size": 57215,
        "type": "Programming_language",
        "value": "Raku"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 14286,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Emacs Lisp",
        "size": 1869,
        "type": "Programming_language",
        "value": "Emacs Lisp"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Ruby",
        "size": 1065,
        "type": "Programming_language",
        "value": "Ruby"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/itmat/rum/master/README"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/itmat/rum/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "System Requirements",
        "parent_header": [
          "Setting Up and Running RUM"
        ],
        "type": "Text_excerpt",
        "value": "RUM should work anywhere you have most of the standard Unix\ncommand-line tools, Perl, and can get the blat, bowtie and mdust\nbinaries to execute; however we haven't tested it on every\nplatform. Unless you have a relatively small genome, then you'll\nprobably need a 64 bit machine. For the human or mouse genome this\nwill definitely be necessary. For a lane of 20 million 100 bp reads,\npaired-end, expect to use about 100-200 GB disk space.\n"
      },
      "source": "https://raw.githubusercontent.com/itmat/rum/master/README",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Autodie",
        "parent_header": [
          "Setting Up and Running RUM",
          "System Requirements",
          "Third-Party Perl Modules"
        ],
        "type": "Text_excerpt",
        "value": "You will now need the `autodie` Perl module. If you are using perl >=\n5.10, this should already be installed. If not, you may need to\ninstall it. You should be able to install it very quickly by running:\n\n```\ncpan -i autodie\n```\n"
      },
      "source": "https://raw.githubusercontent.com/itmat/rum/master/README",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Log::Log4perl",
        "parent_header": [
          "Setting Up and Running RUM",
          "System Requirements",
          "Third-Party Perl Modules"
        ],
        "type": "Text_excerpt",
        "value": "Log::Log4perl is recommended, but not required. You should be able to\ninstall it by running:\n\n```\ncpan -i Log::Log4perl\n```\n\nIf you have Log::Log4perl, you will be able to control logging output\nby modifying the `conf/rum_logging.conf` file in the RUM\ndistribution. See http://mschilli.github.com/log4perl/ for more\ninformation.\n"
      },
      "source": "https://raw.githubusercontent.com/itmat/rum/master/README",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Setting Up and Running RUM",
        "type": "Text_excerpt",
        "value": " <img style=\"float:right\" src=\"http://www.cbil.upenn.edu/RUM/RUMPC2_small2.gif\" class=\"float: right\"></img>\n\n**RUM is an alignment, junction calling, and feature quantification\n  pipeline specifically designed for Illumina RNA-Seq data.**\n\n*RUM can also be used effectively for DNA sequencing (e.g. ChIP-Seq)\nand microarray probe mapping.*\n\n*RUM also has a strand specific mode.*\n\n*RUM is highly configurable, however it does not require fussing over\noptions, the defaults generally give good results.*\n"
      },
      "source": "https://raw.githubusercontent.com/itmat/rum/master/README",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Publication",
        "parent_header": [
          "Setting Up and Running RUM"
        ],
        "type": "Text_excerpt",
        "value": "[Comparative Analysis of RNA-Seq Alignment Algorithms and the RNA-Seq Unified Mapper (RUM)](http://www.ncbi.nlm.nih.gov/pubmed/21775302?dopt=Abstract) Gregory R. Grant, Michael H. Farkas, Angel Pizarro, Nicholas Lahens, Jonathan Schug, Brian Brunk, Christian J. Stoeckert Jr, John B. Hogenesch and Eric A. Pierce. \n"
      },
      "source": "https://raw.githubusercontent.com/itmat/rum/master/README",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Restrictions",
        "parent_header": [
          "Setting Up and Running RUM"
        ],
        "type": "Text_excerpt",
        "value": "RUM is freely available to academics and non-profit\norganizations. However since RUM uses BLAT, users from industry must\nfirst obtain a licence for BLAT from the Kent Informatics Website.\n"
      },
      "source": "https://raw.githubusercontent.com/itmat/rum/master/README",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Autodie",
        "parent_header": [
          "Setting Up and Running RUM",
          "System Requirements",
          "Third-Party Perl Modules"
        ],
        "type": "Text_excerpt",
        "value": "You will now need the `autodie` Perl module. If you are using perl >=\n5.10, this should already be installed. If not, you may need to\ninstall it. You should be able to install it very quickly by running:\n\n```\ncpan -i autodie\n```\n"
      },
      "source": "https://raw.githubusercontent.com/itmat/rum/master/README",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Log::Log4perl",
        "parent_header": [
          "Setting Up and Running RUM",
          "System Requirements",
          "Third-Party Perl Modules"
        ],
        "type": "Text_excerpt",
        "value": "Log::Log4perl is recommended, but not required. You should be able to\ninstall it by running:\n\n```\ncpan -i Log::Log4perl\n```\n\nIf you have Log::Log4perl, you will be able to control logging output\nby modifying the `conf/rum_logging.conf` file in the RUM\ndistribution. See http://mschilli.github.com/log4perl/ for more\ninformation.\n"
      },
      "source": "https://raw.githubusercontent.com/itmat/rum/master/README",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "In a system directory",
        "parent_header": [
          "Setting Up and Running RUM",
          "Installing RUM"
        ],
        "type": "Text_excerpt",
        "value": "If you have root priviliges and want to install RUM in a system\nlocation like `/usr/local`, you can now do so using the standard Perl\nmodule installation process:\n\n```sh\nperl Makefile.PL\nmake\nmake install # (may need sudo)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/itmat/rum/master/README",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "In a user directory",
        "parent_header": [
          "Setting Up and Running RUM",
          "Installing RUM"
        ],
        "type": "Text_excerpt",
        "value": "If you would rather install RUM in a user-owned directory, you can\nsimply untar RUM right in the directory where you to install it, and\nthen run `perl Makefile.PL`. For example, if you want to have rum\ninstalled in `~/RUM-Pipeline-2.00_13`, assuming you have downloaded\n`RUM-Pipeline-2.00_13.tar.gz` to your current directory, you can\nsimply do:\n\n```\ntar zxvf RUM-Pipeline-2.00_13.tar.gz\ncd RUM-Pipeline-2.00_13\nperl Makefile.PL\n```\n\nThis will place all the rum executables in `RUM-Pipeline-2.00_11/bin`.\nThey will find the RUM libraries they need automatically. You may want\nto add the `bin` directory to your path, so that you can run RUM\nsimply by typing `rum_runner`:\n\n```sh\nexport PATH=\"${PATH}:${RUM_HOME}/bin\"\nrum_runner ...\n```\n\nIf you don't add the RUM bin directory to your path, you will need to\nspecify the path to `rum_runner` when you run it. For example, if\nyou're in the root of the RUM installation, you can run:\n\n```sh\nbin/rum_runner ...\n```\n\nIf you're in the bin directory, run:\n\n```sh\n./rum_runner ...\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/itmat/rum/master/README",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "In an alternate Perl module location",
        "parent_header": [
          "Setting Up and Running RUM",
          "Installing RUM"
        ],
        "type": "Text_excerpt",
        "value": "If you have an alternate location where you keep Perl modules, you\nshould be able to install RUM there by passing an\n`INSTALL_BASE=/some/path` option to the `perl Makefile.PL step`. RUM\nshould automatically find all of its perl modules if you install it in\nthis manner. For example:\n\n```sh\nRUM_HOME=~/rum\nperl Makefile.PL INSTALL_BASE=$RUM_HOME\nmake\nmake install\n```\n\nAs in the previous option, you will either need to run `rum_runner`\nusing the full path, or add `$RUM_HOME/bin` to your `$PATH`.\n"
      },
      "source": "https://raw.githubusercontent.com/itmat/rum/master/README",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Running RUM",
        "parent_header": [
          "Setting Up and Running RUM"
        ],
        "type": "Text_excerpt",
        "value": "After you've installed RUM and one or more indexes, please run\n`rum_runner help` to see usage information. Please also see the [main\nuser guide](https://github.com/itmat/rum/wiki) for an\nexplanation of the pipeline and the output files.\n"
      },
      "source": "https://raw.githubusercontent.com/itmat/rum/master/README",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "How should I run rum_runner in the background?",
        "parent_header": [
          "Setting Up and Running RUM",
          "Frequently Asked Questions"
        ],
        "type": "Text_excerpt",
        "value": "If you're on a Sun Grid Engine cluster and you run rum with the\n`--qsub` option, it will do a minimal amount of processing up front\nand then submit a job to do most of the work. So with SGE you don't\nneed to run it in the background.\n\n\nIf you're running it locally, you can use `nohup rum_runner\n... &`. It's also very convenient to run rum_runner from within a [GNU\nscreen](http://www.gnu.org/software/screen) session.\n"
      },
      "source": "https://raw.githubusercontent.com/itmat/rum/master/README",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "contact",
    "contributors",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 08:25:36",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 26
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "I started a RUM job and now my system is unresponsive. Why?",
        "parent_header": [
          "Setting Up and Running RUM",
          "Frequently Asked Questions"
        ],
        "type": "Text_excerpt",
        "value": "If you run a job on a single machine and split it up into multiple\nchunks, it may be using too much memory or CPU time.\n\nFor a human genome, each chunk will use about 6 GB of ram, so in order\nto run it in 10 chunks on a single machine, you'd need at least 60 GB\nof ram free to be safe.\n\nYou probably don't want to use more chunks than you have cores in your\nsystem. For example if you have a dual-core system, running a job with\n10 chunks will likely create high contention for CPU resources, making\nyour system seem unresponsive.\n\nSo if RUM seems to put too much strain on your system, reducing the\nnumber of chunks might help.\n"
      },
      "source": "https://raw.githubusercontent.com/itmat/rum/master/README",
      "technique": "header_analysis"
    }
  ]
}