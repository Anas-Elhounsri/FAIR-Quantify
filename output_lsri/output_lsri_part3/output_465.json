{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "References",
        "parent_header": [
          "DeepReac+:  An universal framework for quantitative modeling of chemical reaction based on deep active learning"
        ],
        "type": "Text_excerpt",
        "value": "[1] Ahneman, D. T.;  Estrada, J. G.;  Lin, S.;  Dreher, S. D.; Doyle, A. G., Predicting reaction performance in C-N cross-coupling using machine learning. Science 2018, 360 (6385), 186-190.\n\n[2] Perera, D.;  Tucker, J. W.;  Brahmbhatt, S.;  Helal, C. J.;  Chong, A.;  Farrell, W.;  Richardson, P.; Sach, N. W., A platform for automated nanomole-scale reaction screening and micromole-scale synthesis in flow. Science 2018, 359 (6374), 429-434.\n\n[3] Zahrt, A. F.;  Henle, J. J.;  Rose, B. T.;  Wang, Y.;  Darrow, W. T.; Denmark, S. E., Prediction of higher-selectivity catalysts by computer-driven workflow and machine learning. Science 2019, 363 (6424), eaau5631.\n\n"
      },
      "source": "https://raw.githubusercontent.com/bm2-lab/DeepReac/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/bm2-lab/DeepReac"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contacts",
        "parent_header": [
          "DeepReac+:  An universal framework for quantitative modeling of chemical reaction based on deep active learning"
        ],
        "type": "Text_excerpt",
        "value": "gykxyy@126.com or qiliu@tongji.edu.cn\n"
      },
      "source": "https://raw.githubusercontent.com/bm2-lab/DeepReac/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-01-18T08:25:04Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-03-27T02:31:40Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "original_header": "introduction",
        "parent_header": [
          "DeepReac+:  An universal framework for quantitative modeling of chemical reaction based on deep active learning"
        ],
        "type": "Text_excerpt",
        "value": "DeepReac+ is an efficient and universal computational framework for the prediction of chemical reaction outcomes and selection of optimized reaction conditions. To accelerate the automation of chemical synthesis, artificial intelligence technologies have been introduced to predict potential reaction outcomes before experimentation. However, two limitations exist for current computational approaches: \n- There is a lack of universality and generalization in the modeling of various sorts of chemical reactions. \n- A large amount of data are still necessary to train the model for high predictive performance.\n\nTherefore, the main contributions of DeepReac+ are as follows: \n1. Under the framework of DeepReac+, DeepReac is designed as an efficient graph-neural-network-based representation learning model for chemical reaction outcome prediction, where the 2D structures of molecules can serve as inputs for feature representation learning and subsequent prediction with a universal and generalized prediction ability. Such a model can handle any reaction performance prediction task, including those for yield and stereoselectivity. In addition, a mechanism-agnostic embedding strategy is applied to represent inorganic components, which further broadens the application scope of DeepReac. \n2. An active learning strategy is proposed to explore the chemical reaction space efficiently. Such a strategy helps to substantially save costs and time in reaction outcome prediction and optimal reaction condition searching by reducing the number of necessary experiments for model training. Unlike the traditional uncertainty-based sampling strategy applied in active learning, two novel sampling strategies are presented based on the representation of the reaction space for reaction outcome prediction, i.e., diversity-based sampling and adversary-based sampling. In addition, two other sampling strategies, i.e., greed-based sampling and balance-based sampling, are proposed for optimal reaction condition searching. \n\nThe two characteristics of DeepReac+ are beneficial to the development of automated chemical synthesis platforms and enable cost reduction and liberate the scientific workforce from repetitive tasks."
      },
      "source": "https://raw.githubusercontent.com/bm2-lab/DeepReac/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9959554363267895,
      "result": {
        "original_header": "Workflow",
        "type": "Text_excerpt",
        "value": "DeepReac+ is based on an active learning loop and consists of the following steps: \n1. Use a small amount of data, i.e. 10% of a dataset, to pretrain a model;\n2. Select a few unlabeled data points to be annotated according to a sampling strategy;\n3. Retrain the model iteratively after every inclusion until some criteria is satisfied, i.e. the predictive performance of the model or the amount of labeled data points. \nIn the above procedure, two main parts play crucial roles: \n- A deep-learning model DeepReac for chemical reaction representation learning as well as outcome prediction. The input can include organic and inorganic components. The former is encoded into dense vectors via Molecule GAT module while the latter is first mapped into sparse one-hot vectors and then embedded to dense vectors via an embedding layer. These vectors are then represented as a reaction graph, where each node corresponds to a component and different components can interact with each other through edges. The reaction graph is feed into Reaction GAT module to model node interactions. A capsule layer is applied on the output of Reaction GAT module to estimate the reaction performance such as yield and stereoselectivity.\n- An active sampler for experimental design. As a core of active learning, the sampling strategy is designed to distinguish more valuable data from other data. And for different goals, the sampling strategy should be customized to meet the specific need:\n    * To predict chemical reaction outcomes, diversity-based sampling and adversary-based sampling perform well.The former assumes that diverse data can provide the model with a global view of the reaction space and improve its generalization capability. The intuition of the latter is that seeing \u201cadversarial\u201d experimental data can make the model robust.\n    * To identify the optimal reaction conditions, greed-based sampling and balance-based sampling are more suitable.The former means that the sample predicted to be optimal should be annotated first. The latter combines adversary-based sampling and greed-based sampling.\n \n"
      },
      "source": "https://raw.githubusercontent.com/bm2-lab/DeepReac/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/bm2-lab/DeepReac/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 7
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/bm2-lab/DeepReac/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bm2-lab/DeepReac"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DeepReac+:  An universal framework for quantitative modeling of chemical reaction based on deep active learning"
      },
      "source": "https://raw.githubusercontent.com/bm2-lab/DeepReac/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "DeepReac+:  An universal framework for quantitative modeling of chemical reaction based on deep active learning"
        ],
        "type": "Text_excerpt",
        "value": "DeepReac+ requires:\n- Python 3.6+\n- Pytorch 1.2.0+\n- DGL 0.5.2+\n- RDKit 2018.09.3+\n\nClone the repository:\n```\ngit clone https://github.com/bm2-lab/DeepReac.git\n```\nWe recommend running the code block in Tutorial with Jupyter notebook."
      },
      "source": "https://raw.githubusercontent.com/bm2-lab/DeepReac/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/bm2-lab/DeepReac/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Apache License 2.0",
        "spdx_id": "Apache-2.0",
        "type": "License",
        "url": "https://api.github.com/licenses/apache-2.0",
        "value": "https://api.github.com/licenses/apache-2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
      },
      "source": "https://raw.githubusercontent.com/bm2-lab/DeepReac/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DeepReac"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "bm2-lab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 73435,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bm2-lab/DeepReac/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 01:02:13",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 15
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Data preprocessing",
        "parent_header": [
          "DeepReac+:  An universal framework for quantitative modeling of chemical reaction based on deep active learning",
          "Tutorial"
        ],
        "type": "Text_excerpt",
        "value": "Since DeepReac+ is a universal framework for quantitative modeling of chemical reaction, its input has the same form regardless of reaction type and prediction task. For organic components, only 2D molecular structure is needed and any molecule file recognized by RDKit, including SMILES, MOL, SDF, etc., is suitable. For inorganic components, all we need is categorical information and they are represented as one-hot encoding vectors. Note that organic components can also be represented as one-hot encoding vectors and feed into the embedding layer depending on whether the detailed information of molecular structure is necessary.\n\nFor illustration purpose, we take the Dataset A [1] as example to show how to build a dataset:\n\n```\nimport pandas as pd\nimport torch\nfrom Data.DatasetA import main_test\nfrom utils import name2g\n\n# Read raw data and convert reaction components to graphs\nplate1 = main_test.plate1\nplate2 = main_test.plate2\nplate3 = main_test.plate3\nunscaled = pd.read_csv('Data/DatasetA/dataset.csv')\nraw = unscaled.values\ny = raw[:,-1]\npath = \"Data/DatasetA/sdf/\"\nreactions = []\nnames = []\nplates = [plate1,plate2,plate3]\nfor plate in plates:\n    for r in range(plate.rows):\n        for c in range(plate.cols):\n            cond = plate.layout[r][c].conditions\n            g1 = name2g(path,cond['additive'])\n            g2 = name2g(path,cond['ligand'])\n            g3 = name2g(path,cond['aryl_halide'])\n            g4 = name2g(path,cond['base'])\n            name = [cond['additive'],cond['ligand'],cond['aryl_halide'],cond['base']]\n            reaction = [g1,g2,g3,g4]\n            reactions.append(reaction)\n            names.append(name)\n\n# remove data points whose yield is absent\nnan_list = [696, 741, 796, 797, 884]\nindex_list = []\nfor i in range(3960):\n    if i not in nan_list:\n        index_list.append(i)\n        \n# Build a dataset\ndata = []\nfor i in index_list:\n    label = torch.tensor([y[i]*0.01])\n    data_ = (str(i),reactions[i],names[i],label)\n    data.append(data_)\n    \nprint(data[0])\n***\n('0', [DGLGraph(num_nodes=11, num_edges=24,\n         ndata_schemes={'h': Scheme(shape=(74,), dtype=torch.float32)}\n         edata_schemes={}), DGLGraph(num_nodes=34, num_edges=74,\n         ndata_schemes={'h': Scheme(shape=(74,), dtype=torch.float32)}\n         edata_schemes={}), DGLGraph(num_nodes=11, num_edges=22,\n         ndata_schemes={'h': Scheme(shape=(74,), dtype=torch.float32)}\n         edata_schemes={}), DGLGraph(num_nodes=21, num_edges=40,\n         ndata_schemes={'h': Scheme(shape=(74,), dtype=torch.float32)}\n         edata_schemes={})], ['5-phenylisoxazole', 'XPhos', '1-chloro-4-(trifluoromethyl)benzene', 'P2Et'], tensor([0.1066]))\n***\n    \n```"
      },
      "source": "https://raw.githubusercontent.com/bm2-lab/DeepReac/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Hyperparameter optimization",
        "parent_header": [
          "DeepReac+:  An universal framework for quantitative modeling of chemical reaction based on deep active learning",
          "Tutorial"
        ],
        "type": "Text_excerpt",
        "value": "For illustration purpose, we take the Dataset A [1] as example to show how to optimize the hyperparameters of DeepReac model:\n\n```\nimport json\nfrom tqdm import tqdm\nimport copy\nimport numpy as np\nimport torch\nfrom torch import nn\nfrom torch.utils.data import DataLoader\nfrom dgllife.utils import CanonicalAtomFeaturizer\nfrom utils import load_dataset,collate_molgraphs,Meter,getarrindices,get_split\nfrom model import DeepReac\n\ndef run_a_train_epoch(epoch, model, data_loader, loss_criterion, optimizer, device):\n    model.train()\n    train_meter = Meter()\n    for batch_id, batch_data in enumerate(data_loader):\n        index, bg, labels, masks, conditions = batch_data\n        labels, masks = labels.to(device), masks.to(device)\n        hs = []\n        for bg_ in bg:\n            h_ = bg_.ndata.pop('h')\n            hs.append(h_)\n\n        prediction, out_feats = model(bg,hs,conditions)\n        loss = (loss_criterion(prediction, labels) * (masks != 0).float()).mean()\n        optimizer.zero_grad()\n        loss.backward()\n        optimizer.step()\n        train_meter.update(prediction, labels, masks)\n    total_score = np.mean(train_meter.compute_metric(\"rmse\"))\n    return total_score\n\ndef run_an_eval_epoch(model, data_loader, device):\n    model.eval()\n    eval_meter = Meter()\n    with torch.no_grad():\n        for batch_id, batch_data in enumerate(data_loader):\n            index, bg, labels, masks, conditions = batch_data\n            labels, masks = labels.to(device), masks.to(device)\n            hs = []\n            for bg_ in bg:\n                h_ = bg_.ndata.pop('h')\n                hs.append(h_)\n\n            prediction, out_feats = model(bg,hs,conditions)\n            eval_meter.update(prediction, labels, masks)\n        total_score = []\n        for metric in [\"rmse\", \"mae\", \"r2\"]:\n            total_score.append(np.mean(eval_meter.compute_metric(metric)))\n    return total_score\n\ndataset = \"DatasetA\"\nname = \"Data/\"+dataset+\"_CV.json\" # five-fold random splitting for the outer loop of nested CV\nwith open(name,'r') as f:\n    result = json.load(f)\nsplit_n = 0 # corresponds to CV-split 1, and so on\ntrain = result[\"train\"][split_n]\nval = result[\"val\"][split_n]\n\ntrain_,test = get_split(len(train),5) # five-fold random splitting for the inner loop of nested CV\nscores = []\n\ndata, c_num = load_dataset(dataset)\nbatch_size =128\nnum_epochs = 1000\nlr = 0.001\nweight_decay = 0.0\nparameter = {\n'hidden_feats': [[32,32],[16,16]],\n'num_heads': [[4,4],[2,2]],\n'out_dim': [16,32,128],\n'dropout_2': [0,0.1,0.5],\n}\n# Users can adjust the hyperparameter set to be optimized here.\n# For example, the above codes correspond to two-layer GAT,\n# but users want to see the results of three-layer GAT.\n# The corresponding codes:\n# parameter = {\n# 'hidden_feats': [[32,32,32],[16,16,16]],\n# 'num_heads': [[4,4,4],[2,2,2]],\n# 'out_dim': [16,32,128],\n# 'dropout_2': [0,0.1,0.5],\n# }\n\nparam_permutation = [{},]\nfor k,v in parameter.items():\n    new_values = len(v)\n    current_exp_len = len(param_permutation)\n    for _ in range(new_values-1):\n        param_permutation.extend(copy.deepcopy(param_permutation[:current_exp_len]))\n    for validx in range(len(v)):\n        for exp in param_permutation[validx*current_exp_len:(validx+1)*current_exp_len]:\n            if k == 'hidden_feats':\n                exp['hidden_feats_0'] = v[validx]\n                exp['hidden_feats_1'] = v[validx]\n            elif k == 'num_heads':\n                exp['num_heads_0'] = v[validx]\n                exp['num_heads_1'] = v[validx]\n            else:\n                exp[k] = v[validx]\n\nfor i in range(len(train_)): # inner loop\n    train_idx = getarrindices(train,train_[i])\n    test_idx = getarrindices(train,test[i])\n    train_set = getarrindices(data,train_idx)\n    test_set = getarrindices(data,test_idx)\n\n    train_loader = DataLoader(dataset=train_set, batch_size=batch_size, shuffle=True, collate_fn=collate_molgraphs)\n    test_loader = DataLoader(dataset=test_set, batch_size=batch_size, shuffle=True, collate_fn=collate_molgraphs)\n\n    loss_fn = nn.MSELoss(reduction='none')\n    in_feats_dim = CanonicalAtomFeaturizer().feat_size('h')\n    device = \"cuda:0\" # or \"cpu\"\n\n    score = []\n    for j in range(len(param_permutation)):\n\n        model = DeepReac(in_feats_dim, len(data[0][1]), c_num, device = device, **param_permutation[j])\n        optimizer = torch.optim.Adam(model.parameters(), lr=lr, weight_decay=weight_decay)\n        model.to(device)\n\n        for epoch in tqdm(range(num_epochs)):\n            train_score = run_a_train_epoch(epoch, model, train_loader, loss_fn, optimizer, device)\n        val_score = run_an_eval_epoch(model, test_loader, device)\n\n        score.append([float(val_score[0]),float(val_score[1]),float(val_score[2])])\n\n    scores.append(score)\n\nscores = np.array(scores)\navg = np.mean(scores,axis=0)\nidx = np.argmin(avg[:,0]) # rmse as metrics\nparam_best = param_permutation[idx] # The best hyperparameters on CV-split 1 of Dataset A\n```\n"
      },
      "source": "https://raw.githubusercontent.com/bm2-lab/DeepReac/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Prediction of chemical reaction outcomes",
        "parent_header": [
          "DeepReac+:  An universal framework for quantitative modeling of chemical reaction based on deep active learning",
          "Tutorial"
        ],
        "type": "Text_excerpt",
        "value": "For illustration purpose, we take the Dataset B [2] as example to show how to train a DeepReac model with active learning:\n\n```\nimport random\nfrom tqdm import tqdm\nimport torch\nfrom torch import nn\nfrom torch.utils.data import DataLoader\nfrom dgl.data.utils import split_dataset\nfrom dgllife.utils import CanonicalAtomFeaturizer\n\nfrom utils import load_dataset,collate_molgraphs,EarlyStopping,arg_parse,Rank,run_a_train_epoch,run_an_eval_epoch\nfrom model import DeepReac\n```\n\n1. Set up parameters and load a dataset\n\n```\nargs = arg_parse()\nif args.device == \"cpu\":\n    device = \"cpu\"\nelse:\n    device = \"cuda:\"+str(args.device)\n\ndata, c_num = load_dataset(\"DatasetB\")\nrandom.shuffle(data)\nlabeled = data[:int(args.pre_ratio*len(data))]\nunlabeled = data[int(args.pre_ratio*len(data)):]\ntrain_val_split = [0.8, 0.2]\ntrain_set, val_set = split_dataset(labeled, frac_list=train_val_split, shuffle=True, random_state=0)\ntrain_loader = DataLoader(dataset=train_set, batch_size=args.batch_size, shuffle=True, collate_fn=collate_molgraphs)\nval_loader = DataLoader(dataset=val_set, batch_size=args.batch_size, shuffle=True, collate_fn=collate_molgraphs)\nunlabel_loader = DataLoader(dataset=unlabeled, batch_size=args.batch_size, shuffle=True, collate_fn=collate_molgraphs)\n```\n\n2. Pre-train a DeepReac model with 10% of training set\n\n```\nloss_fn = nn.MSELoss(reduction='none')\nin_feats_dim = CanonicalAtomFeaturizer().feat_size('h')\nmodel = DeepReac(in_feats_dim, len(data[0][1]), c_num, device = device)\noptimizer = torch.optim.Adam(model.parameters(), lr=args.lr, weight_decay=args.weight_decay)\nstopper = EarlyStopping(mode='lower', patience=args.patience)\nmodel.to(device)\n***\nDeepReac(\n  (gnn): GAT_adj(\n    (gnn_layers): ModuleList(\n      (0): GATLayer(\n        (gat_conv): GATConv(\n          (fc): Linear(in_features=74, out_features=128, bias=False)\n          (feat_drop): Dropout(p=0.0, inplace=False)\n          (attn_drop): Dropout(p=0.0, inplace=False)\n          (leaky_relu): LeakyReLU(negative_slope=0.2)\n          (res_fc): Linear(in_features=74, out_features=128, bias=False)\n        )\n      )\n      (1): GATLayer(\n        (gat_conv): GATConv(\n          (fc): Linear(in_features=128, out_features=128, bias=False)\n          (feat_drop): Dropout(p=0.0, inplace=False)\n          (attn_drop): Dropout(p=0.0, inplace=False)\n          (leaky_relu): LeakyReLU(negative_slope=0.2)\n          (res_fc): Linear(in_features=128, out_features=128, bias=False)\n        )\n      )\n    )\n  )\n  (readout): WeightedSumAndMax(\n    (weight_and_sum): WeightAndSum(\n      (atom_weighting): Sequential(\n        (0): Linear(in_features=32, out_features=1, bias=True)\n        (1): Sigmoid()\n      )\n    )\n  )\n  (gnn_layers): ModuleList(\n    (0): GATLayer(\n      (gat_conv): GATConv(\n        (fc): Linear(in_features=64, out_features=128, bias=False)\n        (feat_drop): Dropout(p=0, inplace=False)\n        (attn_drop): Dropout(p=0, inplace=False)\n        (leaky_relu): LeakyReLU(negative_slope=0.2)\n        (res_fc): Linear(in_features=64, out_features=128, bias=False)\n      )\n    )\n    (1): GATLayer(\n      (gat_conv): GATConv(\n        (fc): Linear(in_features=128, out_features=128, bias=False)\n        (feat_drop): Dropout(p=0, inplace=False)\n        (attn_drop): Dropout(p=0, inplace=False)\n        (leaky_relu): LeakyReLU(negative_slope=0.2)\n        (res_fc): Linear(in_features=128, out_features=128, bias=False)\n      )\n    )\n  )\n  (digits): CapsuleLayer()\n  (predict): Sequential(\n    (0): Dropout(p=0, inplace=False)\n    (1): Linear(in_features=64, out_features=1, bias=True)\n  )\n)\n***\n\nfor epoch in tqdm(range(args.num_epochs)):\n    out_feat_train, index_train, label_train = run_a_train_epoch(epoch, model, train_loader, loss_fn, optimizer, args, device)\n    val_score, out_feat_val, index_val, label_val, predict_val= run_an_eval_epoch(model, val_loader, args, device)\n    early_stop = stopper.step(val_score[0], model)\n    if early_stop:\n        break\nunlabel_score, out_feat_un, index_un, label_un, predict_un= run_an_eval_epoch(model, unlabel_loader, args, device)\nlabel_ratio = len(labeled)/len(data)\n\nprint(\"Size of labelled dataset:\",100*label_ratio,\"%\")\nprint(\"Model performance on unlabelled dataset: RMSE:\",unlabel_score[0],\";MAE:\",unlabel_score[1],\";R^2:\",unlabel_score[2])\n***\nSize of labelled dataset: 9.98263888888889 %\nModel performance on unlabelled dataset: RMSE: 0.18187356184689038 ;MAE: 0.1355237513780594 ;R^2: 0.4841254137661606\n***\n```\n\n3. Select 10 candidates according to adversary-based strategy\n\n```\nupdate_list = Rank(out_feat_un, index_un, predict_un, out_feat_train,label_train,\"adversary\",10)\n```\n\n4. Update the training set\n\n```\nsample_ = []\nsample_list = []\nfor i,sample in enumerate(unlabeled):\n    if sample[0] in update_list:\n        sample_.append(i)\nsample_.sort(reverse=True)\nfor i in sample_:\n    sample_list.append(unlabeled.pop(i))\nlabeled += sample_list\ntrain_set, val_set = split_dataset(labeled, frac_list=train_val_split, shuffle=True, random_state=0)\ntrain_loader = DataLoader(dataset=train_set, batch_size=args.batch_size, shuffle=True, collate_fn=collate_molgraphs)\nval_loader = DataLoader(dataset=val_set, batch_size=args.batch_size, shuffle=True, collate_fn=collate_molgraphs)\nunlabel_loader = DataLoader(dataset=unlabeled, batch_size=args.batch_size, shuffle=True, collate_fn=collate_molgraphs)\n```\n5. Retrain the DeepReac model until model performance meets your requirement\n```\nfor epoch in tqdm(range(args.num_epochs)):\n    out_feat_train, index_train, label_train = run_a_train_epoch(epoch, model, train_loader, loss_fn, optimizer, args, device)\n    val_score, out_feat_val, index_val, label_val, predict_val= run_an_eval_epoch(model, val_loader, args, device)\n    early_stop = stopper.step(val_score[0], model)\n    if early_stop:\n        break\nunlabel_score, out_feat_un, index_un, label_un, predict_un= run_an_eval_epoch(model, unlabel_loader, args, device)\nlabel_ratio = len(labeled)/len(data)\n\nprint(\"Size of labelled dataset:\",100*label_ratio,\"%\")\nprint(\"Model performance on unlabelled dataset: RMSE:\",unlabel_score[0],\";MAE:\",unlabel_score[1],\";R^2:\",unlabel_score[2])\n***\nSize of labelled dataset: 10.199652777777777 %\nModel performance on unlabelled dataset: RMSE: 0.17963430405055877 ;MAE: 0.13125237822532654 ;R^2: 0.49230837688682616\n***\n```\n"
      },
      "source": "https://raw.githubusercontent.com/bm2-lab/DeepReac/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Identification of optimal reaction condition",
        "parent_header": [
          "DeepReac+:  An universal framework for quantitative modeling of chemical reaction based on deep active learning",
          "Tutorial"
        ],
        "type": "Text_excerpt",
        "value": "For illustration purpose, we take the Dataset B [2] as example to show how to identify optimal reaction condition with active learning:\n\nPerform most of the same steps as those listed above except sampling strategy used in Step 3 and stopping criterion used in Step 5.\n\n3. Select 10 candidates according to balance-based strategy\n\n```\nupdate_list = Rank(out_feat_un, index_un, predict_un, out_feat_train,label_train,\"balanced\",10)\n\nprint(\"Recommended reaction conditions:\")\nfor reaction in data:\n    if reaction[0] in update_list:\n        print(reaction[2])\n***\nRecommended reaction conditions:\n['1b', '2b', 'CataCXiumA', 'THF', 'NaOH']\n['1b', '2b', 'XPhos', 'DMF', 'NaOH']\n['1d', '2c', 'P(Cy)3', 'MeOH', 'KOH']\n['1d', '2a', 'SPhos', 'MeCN', 'LiOtBu']\n['1a', '2a', 'P(Cy)3', 'DMF', 'Et3N']\n['1c', '2b', 'CataCXiumA', 'MeCN', 'CsF']\n['1b', '2a', 'P(Ph)3', 'DMF', 'CsF']\n['1d', '2b', 'CataCXiumA', 'THF', 'NaOH']\n['1b', '2a', 'P(Ph)3', 'MeCN', 'CsF']\n['1d', '2b', 'AmPhos', 'THF', 'NaOH']\n***\n# The first two items, i.e. '1b' and '2b', represent the starting materials in Dataset B.\n# It should be noted that the same product can be obtained by different starting materials which only differ in the leaving group. \n# Hence, starting materials here can also be optimized.\n```\n5. Retrain the DeepReac model until optimal reaction condition is found\n"
      },
      "source": "https://raw.githubusercontent.com/bm2-lab/DeepReac/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Pre-trained DeepReac models",
        "parent_header": [
          "DeepReac+:  An universal framework for quantitative modeling of chemical reaction based on deep active learning",
          "Tutorial"
        ],
        "type": "Text_excerpt",
        "value": "For the convenience of users, we provide pre-trained models for three datasets in `models`:\n\nDataset | DeepReac model | Reference\n---|---|---\nA | DatasetA_DeepReac.pth | [1]\nB | DatasetB_DeepReac.pth | [2]\nC | DatasetC_DeepReac.pth | [3]\n\nThey can be loaded with the following codes:\n```\nckpt = torch.load(\"models/DatasetA_DeepReac.pth\",map_location=\"cuda\")\nmodel.load_state_dict(ckpt[\"model_state_dict\"])\n```\n"
      },
      "source": "https://raw.githubusercontent.com/bm2-lab/DeepReac/main/README.md",
      "technique": "header_analysis"
    }
  ]
}