{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "type": "Text_excerpt",
        "value": "For inference model and allelic inclusion TCR sequences:\n\n* Carter, J.A., Preall, J.B., and Atwal, G.S. (2019) \"Bayesian Inference of Allelic Inclusion Rates in the Human T Cell Receptor Repertoire.\" Cell Systems 9 doi:https://doi.org/10.1016/j.cels.2019.09.006\n\nFor paired \u03b1\u03b2 TCR sequences: \n\n* Carter *et al.* (2019) \"Single T Cell Sequencing Demonstrates the Functional Role of \u03b1\u03b2 TCR Pairing in Cell Lineage and Antigen Specificity.\" Front. Immunol. 10:1516. doi:https://doi.org/10.3389/fimmu.2019.01516\n\n* Grigaityte *et al.* (2017) \"Single-cell sequencing reveals \u03b1\u03b2 chain pairing shapes the T cell repertoire.\" bioRxiv 213462; doi:https://doi.org/10.1101/213462\n"
      },
      "source": "https://raw.githubusercontent.com/JasonACarter/Allelic_inclusion/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/JasonACarter/Allelic_inclusion"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contact",
        "type": "Text_excerpt",
        "value": "For questions or bugs, please contact Jason Carter (jacarter@cshl.edu) or Mickey Atwal (atwal@cshl.edu). \n"
      },
      "source": "https://raw.githubusercontent.com/JasonACarter/Allelic_inclusion/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-10-10T23:54:01Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-06-13T03:53:23Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Inferring T cell allelic inclusion rates"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9797165075499152,
      "result": {
        "original_header": "Overview",
        "type": "Text_excerpt",
        "value": "Bayesian inference of T cell allelic inclusion rates from emulsion-barcoding single-cell sequencing data.  \n* [Model](https://github.com/JasonACarter/Allelic_inclusion/tree/master/Model)\n  * [Derivations](https://github.com/JasonACarter/Allelic_inclusion/tree/master/Model/Derivations): iPython notebooks detailing step-by-step derivation of likelihood function and full Bayesian framework\n  * [Inclusion.py](https://github.com/JasonACarter/Allelic_inclusion/tree/master/Model/Inclusion.py): Python implementation of our Bayesian inference model\n* [Data](https://github.com/JasonACarter/Allelic_inclusion/tree/master/Model/Derivations)\n  * Distribution of \u03b1 and \u03b2 TCR chains per droplet for each individual (Fig. 1)\n  * TCR seqeunces for plate-based sequencing approach (Fig. 2)\n  * Dataframes containing all \u03b1\u03b2, \u03b1\u03b1\u03b2, and \u03b1\u03b2\u03b2 TCR sequence sets used in our study (Figs. 3 & 4)\n  * Version of [VDJdb](https://vdjdb.cdr3.net) used in Fig. 4\n* [Figures](https://github.com/JasonACarter/Allelic_inclusion/tree/master/Figures)\n  * iPython notebooks containing code necessary to generate each main manuscript figure\n     \n"
      },
      "source": "https://raw.githubusercontent.com/JasonACarter/Allelic_inclusion/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Download",
        "type": "Text_excerpt",
        "value": "The allelic inclusion inference model can be downloaded using:\n\n```wget https://raw.githubusercontent.com/JasonACarter/Allelic_inclusion/master/Model/Inclusion.py```\n"
      },
      "source": "https://raw.githubusercontent.com/JasonACarter/Allelic_inclusion/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/JasonACarter/Allelic_inclusion/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/JasonACarter/Allelic_inclusion/master/Figures/Figure%203/Fig3.ipynb"
      },
      "source": "https://raw.githubusercontent.com/JasonACarter/Allelic_inclusion/master/Figures/Figure%203/Fig3.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/JasonACarter/Allelic_inclusion/master/Figures/Figure%201/Fig1.ipynb"
      },
      "source": "https://raw.githubusercontent.com/JasonACarter/Allelic_inclusion/master/Figures/Figure%201/Fig1.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/JasonACarter/Allelic_inclusion/master/Figures/Figure%204/Fig4C.ipynb"
      },
      "source": "https://raw.githubusercontent.com/JasonACarter/Allelic_inclusion/master/Figures/Figure%204/Fig4C.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/JasonACarter/Allelic_inclusion/master/Figures/Figure%204/Fig4A.ipynb"
      },
      "source": "https://raw.githubusercontent.com/JasonACarter/Allelic_inclusion/master/Figures/Figure%204/Fig4A.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/JasonACarter/Allelic_inclusion/master/Figures/Figure%204/Fig4D.ipynb"
      },
      "source": "https://raw.githubusercontent.com/JasonACarter/Allelic_inclusion/master/Figures/Figure%204/Fig4D.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/JasonACarter/Allelic_inclusion/master/Figures/Figure%204/Fig4F-G.ipynb"
      },
      "source": "https://raw.githubusercontent.com/JasonACarter/Allelic_inclusion/master/Figures/Figure%204/Fig4F-G.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/JasonACarter/Allelic_inclusion/master/Figures/Figure%204/Fig4E.ipynb"
      },
      "source": "https://raw.githubusercontent.com/JasonACarter/Allelic_inclusion/master/Figures/Figure%204/Fig4E.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/JasonACarter/Allelic_inclusion/master/Figures/Figure%204/Fig4B.ipynb"
      },
      "source": "https://raw.githubusercontent.com/JasonACarter/Allelic_inclusion/master/Figures/Figure%204/Fig4B.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/JasonACarter/Allelic_inclusion/master/Figures/Figure%202/Fig2CD.ipynb"
      },
      "source": "https://raw.githubusercontent.com/JasonACarter/Allelic_inclusion/master/Figures/Figure%202/Fig2CD.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/JasonACarter/Allelic_inclusion/master/Figures/Figure%202/Fig2F.ipynb"
      },
      "source": "https://raw.githubusercontent.com/JasonACarter/Allelic_inclusion/master/Figures/Figure%202/Fig2F.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/JasonACarter/Allelic_inclusion/master/Model/Derivations/2.%20Derivation%20of%20final%20Bayesian%20model.ipynb"
      },
      "source": "https://raw.githubusercontent.com/JasonACarter/Allelic_inclusion/master/Model/Derivations/2.%20Derivation%20of%20final%20Bayesian%20model.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/JasonACarter/Allelic_inclusion/master/Model/Derivations/1.%20Derivation%20of%20likelihood%20function.ipynb"
      },
      "source": "https://raw.githubusercontent.com/JasonACarter/Allelic_inclusion/master/Model/Derivations/1.%20Derivation%20of%20likelihood%20function.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/JasonACarter/Allelic_inclusion/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "JasonACarter/Allelic_inclusion"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/JasonACarter/Allelic_inclusion/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/JasonACarter/Allelic_inclusion/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "type": "Text_excerpt",
        "value": "Copyright (c) 2019, Jason Carter, Jonathan Preall, and Gurinder Atwal. \nAll rights reserved.\n\nPermission to use, copy, modify and distribute any part of this program for educational, research and non-profit purposes, by non-profit institutions only, without fee, and without a written agreement is hereby granted, provided that the above copyright notice, this paragraph and the following two paragraphs appear in all copies.\n\nThose desiring to incorporate this work into commercial products or use for commercial purposes should contact Gurinder Atwal (atwal@cshl.edu). \n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n"
      },
      "source": "https://raw.githubusercontent.com/JasonACarter/Allelic_inclusion/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Allelic_inclusion"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "JasonACarter"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 625532,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 17106,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/JasonACarter/Allelic_inclusion/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://emcee.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/JasonACarter/Allelic_inclusion/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirements",
        "type": "Text_excerpt",
        "value": "**Python version:** Python 3 (tested with 3.6.8)\n\n**Dependencies:** Numpy (tested with version 1.16.2), Pandas (0.23.4), scipy (1.2.1), emcee (2.2.1), numba (0.42.0), matplotlib (2.2.3), seaborn (0.9.0)\n\n"
      },
      "source": "https://raw.githubusercontent.com/JasonACarter/Allelic_inclusion/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "installation",
    "acknowledgement",
    "run",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-06 17:31:11",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Input",
        "parent_header": [
          "Use"
        ],
        "type": "Text_excerpt",
        "value": "Array(s) containing the number of droplets observed to contain *n* unique \u03b1 and/or \u03b2 T cell receptor (TCR) sequences. If no experimental distributions are provided, simulated distributions will be generated and used. \n"
      },
      "source": "https://raw.githubusercontent.com/JasonACarter/Allelic_inclusion/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Output",
        "parent_header": [
          "Use"
        ],
        "type": "Text_excerpt",
        "value": "Maximum *a posteriori* (MAP) estimates and credible intervals for each of the 4 model parameters. \n"
      },
      "source": "https://raw.githubusercontent.com/JasonACarter/Allelic_inclusion/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Parameters",
        "parent_header": [
          "Use"
        ],
        "type": "Text_excerpt",
        "value": "* **Inference of experimental distributions**\n  * **alpha:** Specify array containing experimental \u03b1 TCR chain distribution to fit (default=None)\n  * **beta:** Specify array containing experimental \u03b2 TCR chain distribution to fit (default=None)\n  \n* **Inference of simulated distributions**\n  * **chains:** If no experimental distributions are specified, should \u03b1 (alpha), \u03b2 (beta), or \u03b1\u03b2 (pairs) distributions be simulated and fit (default=pairs)\n  * **la_real:** True loading rate (\u03bb) to use for simulated distributions. As the loading rate refer to T cells, the same rate is used for both \u03b1 and \u03b2 distributions. \n  * **ga_real:** True error loading rate (\u03b3) to use for simulated distributions. As the error loading rate refer to T cells, the same rate is used for both \u03b1 and \u03b2 distributions. \n  * **f_real_(a)(b):** True allelic inclusion rates to use for simulated \u03b1\u03b2 distributions\n  * **s_real_(a)(b):** True TCR chain dropout rates to use for simulated \u03b1\u03b2 distributions\n\n* **MCMC parameters** (see [emcee](https://emcee.readthedocs.io/en/stable/))\n  * **nwalkers:** Number of [walkers](https://emcee.readthedocs.io/en/stable/user/faq/#what-are-walkers)\n  * **steps:** MCMC chain length\n  * **burn:** Number of steps for burn-in\n  * **N_random_starts** Number of random starts to find MAP\n  * For these parameters, larger values will provide more accurates estimates at the exspence of run-time\n  \n * **Output**  \n    * **calculate_posterior:** Whether to calculate posterior distributions (default=1). If 0, will not run MCMC sampling and estimates may therefore not be accurate.  \n    * **print_estimates:** Whether to print MAP estimates with credible intervals for each parameter (default=1).\n    * **plot_dist:** Whether to plot posterior distributions for each parameter (default=0).\n    * **interval:** Specify size of credible interval for print_estimates (default=68).\n "
      },
      "source": "https://raw.githubusercontent.com/JasonACarter/Allelic_inclusion/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Simulated distributions",
        "parent_header": [
          "Example usage"
        ],
        "type": "Text_excerpt",
        "value": "Infer parameter values from simulated \u03b1\u03b2 distributions with user-specified parameter values: \n```Python\nimport Inclusion\nInclusion(chains='pairs', la_real=0.08,ga_real=4.15,f_real_a=0.083,f_real_b=0.043,s_real_a=0.53,s_real_b=0.39)\n```\nWhich should output: \n\n```\nNo experimental distributions specified. Running paired simulation. \nSimulated alpha distribution with the following parameters: la:0.08, ga:4.15, f:0.083, s:0.53 \nSimulated beta distribution with the following parameters: la:0.08, ga:4.15, f:0.043, s:0.39 \n\nMAP Estimates:\nla: 0.537 (0.256,0.856) vs. 0.08\nga: 1.284 (0.234,2.482) vs. 4.15\nf_a: 0.537 (0.105,0.829) vs. 0.083\ns_a: 0.969 (0.354,0.843) vs. 0.53\nf_b: 0.530 (0.178,0.831) vs. 0.043\ns_b: 0.544 (0.184,0.740) vs. 0.39\n```\nParameter values are given as \"MAP (68% credible interval) vs. true value used in simulation.\"\n"
      },
      "source": "https://raw.githubusercontent.com/JasonACarter/Allelic_inclusion/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Experimental distributions",
        "parent_header": [
          "Example usage"
        ],
        "type": "Text_excerpt",
        "value": "```Python\ncounts_alpha=[829988, 812208, 75516, 8203, 1645, 593, 232, 136, 70, 46, 24, 12]\ncounts_beta=[605727, 1015629, 92206, 11011, 2359, 808, 397, 238, 122, 76, 55, 25]\nInclusion(alpha=counts_alpha,beta=counts_beta)\n```\n\nWhich should output: \n\n```\nExperimental paired distribution specificed. \n\nMAP Estimates:\nla: 0.077 (0.069,0.093)\nga: 4.144 (4.134,4.155)\nf_a: 0.086 (0.079,0.092)\ns_a: 0.530 (0.530,0.531)\nf_b: 0.042 (0.035,0.048)\ns_b: 0.387 (0.386,0.387)\n```\nParameter values are again given as \"MAP (68% credible interval)\", but no true values are unknown for experimental distributions. \n"
      },
      "source": "https://raw.githubusercontent.com/JasonACarter/Allelic_inclusion/master/README.md",
      "technique": "header_analysis"
    }
  ]
}