{
  "application_domain": [
    {
      "confidence": 41.16,
      "result": {
        "type": "String",
        "value": "Natural Language Processing"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/sharmavaruns/PCfun"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-04-10T00:39:03Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-02-16T06:47:54Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Fast and accurate tool for the functional annotation of protein complex queries built upon hybrid unsupervised and supervised machine learning on PubMed Central full-text word embeddings."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9675492345467115,
      "result": {
        "original_header": "PCfun (Protein Complex Function)",
        "type": "Text_excerpt",
        "value": "Fast and accurate tool for the functional annotation of protein complex queries built upon hybrid unsupervised and supervised machine learning on PubMed Central full-text word embeddings.\n \n"
      },
      "source": "https://raw.githubusercontent.com/sharmavaruns/PCfun/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9066254962248248,
      "result": {
        "original_header": "OUTPUT: PCfun will now automatically create the following in your Project directory:",
        "type": "Text_excerpt",
        "value": "- \"query_vecs.tsv\": the continuous word embedding vectors for your input queries\n- \"Results\": Directory with subdirectories named after each query\n    - In each subdirectory you will have subdirectories: \"BP_GO\", \"CC_GO\", and \"MF_GO\"\n    - In each \"*_GO\" subdirectory you will have \"funcenrich_list.tsv\" and \"KDTree_list.tsv\"\n    - \"funcenrich_list.tsv\" corresponds to the Supervised RF's results and indicates if any of the terms were functionally enriched with the nearest neighbors results\n    - \"KDTree_list.tsv\" corresponds to the ranked nearest neighbor results for the query\n    - Lastly, an additional subirectory called \"Tree_diags\" may be created within each \"*_GO\" directory if any terms were functionally enriched for\n        - If more then 10 terms are functionally enriched for, then only the top 10 functionally enriched GO trees will be plotted\n- \"Stored_Items\": Directory with stored pickle files of that relevant data used to create the results\n    - \"ML_predictions.pickle\": predictions output from the Supervised RF for each query\n    - \"kdtree_rez.pickle\": nearest neighbor results for each query\n    - \"func_enrich_rez.pickle\": results from the hypergeometric test for each query that tested for functional enrichment between the RF and nearest neighbor results \n"
      },
      "source": "https://raw.githubusercontent.com/sharmavaruns/PCfun/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "4) After installing the dependencies, download the required PCfun data files (word embedding + trained supervised Random Forest classifiers)",
        "parent_header": [
          "PCfun (Protein Complex Function)",
          "Installation",
          "For installation you need to install the PCfun package and then download the required data files (embedding and pretrained supervised models)"
        ],
        "type": "Text_excerpt",
        "value": "First ensure that your created conda environment where PCfun has been installed into is active then do: \n```\ncd Example/Github/PCfun\ntime python ./download.py\n```\n***NOTE:*** This will take awhile. For me it took ~1 hour as the zipped file being downloaded from S3 is 9.8 Gb.\nThe \"time\" command is optional, but gives you some idea of how long everything takes.\n\n***This step downloads \"pcfun.zip\" from my public S3 bucket directly into your home directory (e.g. ~) by default and unzips it there.***\n\n"
      },
      "source": "https://raw.githubusercontent.com/sharmavaruns/PCfun/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/sharmavaruns/PCfun/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/sharmavaruns/PCfun/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "sharmavaruns/PCfun"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PCfun (Protein Complex Function)"
      },
      "source": "https://raw.githubusercontent.com/sharmavaruns/PCfun/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "1) After having installed Github Desktop or some flavor of Git so that you can use Git from terminal, ***clone*** the pcfun repo to your place of choice.",
        "parent_header": [
          "PCfun (Protein Complex Function)",
          "Installation",
          "For installation you need to install the PCfun package and then download the required data files (embedding and pretrained supervised models)"
        ],
        "type": "Text_excerpt",
        "value": "For example in a folder called \"Github\" (that you manually create or Github Desktop has created for you. Whichever you prefer!) do the following:\n```\nmkdir Example # This is an example dummy folder. Just for reference I have a Github folder in my Documents folder on Mac\ncd Example\nmkdir Github\ncd Github\ngit clone https://github.com/sharmavaruns/PCfun.git\ncd PCfun\n```\n"
      },
      "source": "https://raw.githubusercontent.com/sharmavaruns/PCfun/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2) Recommended to use conda/miniconda for installing a new python3 environment",
        "parent_header": [
          "PCfun (Protein Complex Function)",
          "Installation",
          "For installation you need to install the PCfun package and then download the required data files (embedding and pretrained supervised models)"
        ],
        "type": "Text_excerpt",
        "value": "```\nconda create --name PCfun python=3.7.7\n``` "
      },
      "source": "https://raw.githubusercontent.com/sharmavaruns/PCfun/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3) Activate created conda environment then pip install PCfun",
        "parent_header": [
          "PCfun (Protein Complex Function)",
          "Installation",
          "For installation you need to install the PCfun package and then download the required data files (embedding and pretrained supervised models)"
        ],
        "type": "Text_excerpt",
        "value": "- For pygraphviz to work (which is used for visualizing GO graphs), graphviz needs to be installed. Therefore you need to first install pygraphviz separately.\n- Then install the PCfun package and the relevant dependencies should be installed\n```\nconda activate PCfun\npip install pygraphviz==1.5 --install-option=\"--include-path=/usr/include/graphviz\" --install-option=\"--library-path=/usr/lib/graphviz/\"\n### Note: \"--include-path=/usr/include/graphviz\" allows graphviz to be installed with pygraphviz\n### This should cause graphviz to be downloaded to \"/usr/lib/graphviz/\" by default\n### If you have independently installed graphviz, please direct the install command for pygraphviz accordingly\n\n### NOTE: In case you are having trouble installing graphviz with the above commands you might need to install graphviz via brew:\nbrew install graphviz\n\n### Now install PCfun and the rest of its dependencies with the following\n### Note: ensure that you're current directory is in the \"PCfun\" directory that you've cloned\npip install .\n```\n"
      },
      "source": "https://raw.githubusercontent.com/sharmavaruns/PCfun/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "4) After installing the dependencies, download the required PCfun data files (word embedding + trained supervised Random Forest classifiers)",
        "parent_header": [
          "PCfun (Protein Complex Function)",
          "Installation",
          "For installation you need to install the PCfun package and then download the required data files (embedding and pretrained supervised models)"
        ],
        "type": "Text_excerpt",
        "value": "First ensure that your created conda environment where PCfun has been installed into is active then do: \n```\ncd Example/Github/PCfun\ntime python ./download.py\n```\n***NOTE:*** This will take awhile. For me it took ~1 hour as the zipped file being downloaded from S3 is 9.8 Gb.\nThe \"time\" command is optional, but gives you some idea of how long everything takes.\n\n***This step downloads \"pcfun.zip\" from my public S3 bucket directly into your home directory (e.g. ~) by default and unzips it there.***\n\n"
      },
      "source": "https://raw.githubusercontent.com/sharmavaruns/PCfun/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "- If input data set includes UniProt IDs for each subunit protein delimited by a ';' for a protein complex use the \"-u\" flag.",
        "parent_header": [
          "PCfun (Protein Complex Function)",
          "Example Usage- Project0",
          "The corresponding data sets used below are in 'PCfun/Toy_Data_Input' directory within cloned PCfun repo for ease of access."
        ],
        "type": "Text_excerpt",
        "value": "```\npcfun -u -i input_df-UniProtIDs.tsv\n```\n"
      },
      "source": "https://raw.githubusercontent.com/sharmavaruns/PCfun/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "- If input data set includes the Gene Names (that have already been mapped from UniProt IDs) for each subunit protein delimited by a ';' for a protein complex use only the \"-g\" flag.",
        "parent_header": [
          "PCfun (Protein Complex Function)",
          "Example Usage- Project0",
          "The corresponding data sets used below are in 'PCfun/Toy_Data_Input' directory within cloned PCfun repo for ease of access."
        ],
        "type": "Text_excerpt",
        "value": "```\npcfun -g -i input_df-GeneNames.tsv\n```\n"
      },
      "source": "https://raw.githubusercontent.com/sharmavaruns/PCfun/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "- If input data set includes the entire protein complex name (i.e. no subunits delimited with ';') then use no flag.",
        "parent_header": [
          "PCfun (Protein Complex Function)",
          "Example Usage- Project0",
          "The corresponding data sets used below are in 'PCfun/Toy_Data_Input' directory within cloned PCfun repo for ease of access."
        ],
        "type": "Text_excerpt",
        "value": "```\npcfun -i input_df-FullComplexNames.tsv\n```\n***NOTE 5:*** For prediction mode in PCfun, protein subunits are dynamically queried to UniProt and mapped to their respective gene names. Subsequently, each list of subunit gene names are sorted alphabetically per protein complex and concatenated into a final natural language string of the protein complex query for sentence vector generation to restrict any ordering effect on the output sentence vector generated per protein complex.\n"
      },
      "source": "https://raw.githubusercontent.com/sharmavaruns/PCfun/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/sharmavaruns/PCfun/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Copyright 2020 Varun Sharma, Matteo Manica, Chen Li.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/sharmavaruns/PCfun/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PCfun"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "sharmavaruns"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 67840,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sharmavaruns/PCfun/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "4) After installing the dependencies, download the required PCfun data files (word embedding + trained supervised Random Forest classifiers)",
        "parent_header": [
          "PCfun (Protein Complex Function)",
          "Installation",
          "For installation you need to install the PCfun package and then download the required data files (embedding and pretrained supervised models)"
        ],
        "type": "Text_excerpt",
        "value": "First ensure that your created conda environment where PCfun has been installed into is active then do: \n```\ncd Example/Github/PCfun\ntime python ./download.py\n```\n***NOTE:*** This will take awhile. For me it took ~1 hour as the zipped file being downloaded from S3 is 9.8 Gb.\nThe \"time\" command is optional, but gives you some idea of how long everything takes.\n\n***This step downloads \"pcfun.zip\" from my public S3 bucket directly into your home directory (e.g. ~) by default and unzips it there.***\n\n"
      },
      "source": "https://raw.githubusercontent.com/sharmavaruns/PCfun/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "2) Now we'll activate our PCfun conda env and run pcfun on the input data file",
        "parent_header": [
          "PCfun (Protein Complex Function)",
          "Example Usage- Project0"
        ],
        "type": "Text_excerpt",
        "value": "```\nconda activate PCfun\ntime pcfun -u -i input_df-UniProtIDs.tsv\n```\n***NOTE:*** This is now running PCfun on the input data set (\"input_df-UniProtIDs.tsv\") you've defined.\n The \"time\" command is optional, but gives you some idea of how long everything takes. Though I have some times reported in the pcfun script anyway.\n\n***NOTE 2:*** 'pcfun -u -i input_df-UniProtIDs.tsv' is an example where the input expects a .tsv file with UniProt Subunit IDs delimited with ';' (hence the '-u' flag).\n See below for other example usage cases (input df consisting of: ComplexNames, UniProtIDs, or GeneNames).\n\n***NOTE 3:*** This took ***~45 minutes for 50 example complexes*** to run on my 2020 MacBook Pro with a Processor: 2 GHz Quad-Core Intel Core i5 & Memory: 16 GB 3733 MHz LPDDR4X\n\n***NOTE 4:*** By default PCfun looks for downloaded and unzipped data folder in your home directory of your computer. Otherwise, you can use the \"-r\" flag to direct PCfun to the downloaded directory. (e.g. \"-r /Users/varunsharma/pcfun\")\n "
      },
      "source": "https://raw.githubusercontent.com/sharmavaruns/PCfun/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 09:47:58",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 9
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "1) After having installed Github Desktop or some flavor of Git so that you can use Git from terminal, ***clone*** the pcfun repo to your place of choice.",
        "parent_header": [
          "PCfun (Protein Complex Function)",
          "Installation",
          "For installation you need to install the PCfun package and then download the required data files (embedding and pretrained supervised models)"
        ],
        "type": "Text_excerpt",
        "value": "For example in a folder called \"Github\" (that you manually create or Github Desktop has created for you. Whichever you prefer!) do the following:\n```\nmkdir Example # This is an example dummy folder. Just for reference I have a Github folder in my Documents folder on Mac\ncd Example\nmkdir Github\ncd Github\ngit clone https://github.com/sharmavaruns/PCfun.git\ncd PCfun\n```\n"
      },
      "source": "https://raw.githubusercontent.com/sharmavaruns/PCfun/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2) Recommended to use conda/miniconda for installing a new python3 environment",
        "parent_header": [
          "PCfun (Protein Complex Function)",
          "Installation",
          "For installation you need to install the PCfun package and then download the required data files (embedding and pretrained supervised models)"
        ],
        "type": "Text_excerpt",
        "value": "```\nconda create --name PCfun python=3.7.7\n``` "
      },
      "source": "https://raw.githubusercontent.com/sharmavaruns/PCfun/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1) First we'll create a new directory for your project where all the results and relevant files will be stored",
        "parent_header": [
          "PCfun (Protein Complex Function)",
          "Example Usage- Project0"
        ],
        "type": "Text_excerpt",
        "value": "```\ncd Example # Just navigating back to the Example directory\nmkdir PCfun_Projects\ncd PCfun_Projects\nmkdir Project0\ncd Project0\ncp Example/Github/PCfun/Toy_Data_Input/input_df-UniProtIDs.tsv . # Copying over example toy data into our local project\n```"
      },
      "source": "https://raw.githubusercontent.com/sharmavaruns/PCfun/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "- If input data set includes UniProt IDs for each subunit protein delimited by a ';' for a protein complex use the \"-u\" flag.",
        "parent_header": [
          "PCfun (Protein Complex Function)",
          "Example Usage- Project0",
          "The corresponding data sets used below are in 'PCfun/Toy_Data_Input' directory within cloned PCfun repo for ease of access."
        ],
        "type": "Text_excerpt",
        "value": "```\npcfun -u -i input_df-UniProtIDs.tsv\n```\n"
      },
      "source": "https://raw.githubusercontent.com/sharmavaruns/PCfun/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "- If input data set includes the Gene Names (that have already been mapped from UniProt IDs) for each subunit protein delimited by a ';' for a protein complex use only the \"-g\" flag.",
        "parent_header": [
          "PCfun (Protein Complex Function)",
          "Example Usage- Project0",
          "The corresponding data sets used below are in 'PCfun/Toy_Data_Input' directory within cloned PCfun repo for ease of access."
        ],
        "type": "Text_excerpt",
        "value": "```\npcfun -g -i input_df-GeneNames.tsv\n```\n"
      },
      "source": "https://raw.githubusercontent.com/sharmavaruns/PCfun/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "- If input data set includes the entire protein complex name (i.e. no subunits delimited with ';') then use no flag.",
        "parent_header": [
          "PCfun (Protein Complex Function)",
          "Example Usage- Project0",
          "The corresponding data sets used below are in 'PCfun/Toy_Data_Input' directory within cloned PCfun repo for ease of access."
        ],
        "type": "Text_excerpt",
        "value": "```\npcfun -i input_df-FullComplexNames.tsv\n```\n***NOTE 5:*** For prediction mode in PCfun, protein subunits are dynamically queried to UniProt and mapped to their respective gene names. Subsequently, each list of subunit gene names are sorted alphabetically per protein complex and concatenated into a final natural language string of the protein complex query for sentence vector generation to restrict any ordering effect on the output sentence vector generated per protein complex.\n"
      },
      "source": "https://raw.githubusercontent.com/sharmavaruns/PCfun/master/README.md",
      "technique": "header_analysis"
    }
  ]
}