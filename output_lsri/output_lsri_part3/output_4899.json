{
  "application_domain": [
    {
      "confidence": 45.83,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/DataX-JieHao/PAGE-Net"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-08-05T04:25:32Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-07-09T13:37:05Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A biologically interpretable integrative deep learning model that integrates PAthological images and GEnomic data"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9534731434796645,
      "result": {
        "original_header": "PAGE-Net has three phrases:",
        "type": "Text_excerpt",
        "value": "* Patch-wise pre-trained CNN\n* Two-stage Aggeragation\n* Integration of aggregated pathological images and genomic data\n \n"
      },
      "source": "https://raw.githubusercontent.com/DataX-JieHao/PAGE-Net/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/DataX-JieHao/PAGE-Net/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/DataX-JieHao/PAGE-Net/master/Aggregation/DataMatching.ipynb"
      },
      "source": "https://raw.githubusercontent.com/DataX-JieHao/PAGE-Net/master/Aggregation/DataMatching.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 7
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/DataX-JieHao/PAGE-Net/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DataX-JieHao/PAGE-Net"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PAGE-Net"
      },
      "source": "https://raw.githubusercontent.com/DataX-JieHao/PAGE-Net/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9662758631248045,
      "result": {
        "original_header": "Preprocessing",
        "type": "Text_excerpt",
        "value": "* PyHistopathology package\n* Keras\n* Tensorflow\n* Keract\n \n"
      },
      "source": "https://raw.githubusercontent.com/DataX-JieHao/PAGE-Net/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/DataX-JieHao/PAGE-Net/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PAGE-Net"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "DataX-JieHao"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 49768,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 4879,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/DataX-JieHao/PAGE-Net/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-06 18:01:38",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 18
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Patch-wise pre-trained CNN (see pretrain folder)",
        "parent_header": [
          "Get Started"
        ],
        "type": "Text_excerpt",
        "value": "1. patch_extraction : it extracts valid patchs from WSI by removing background and stains.\n2. Datagenerator.py : it makes the data ready for Keras image data loaders. (As data is large we used keras dataloaders for loading data)\n3. PAGE_net_pretrain : code for pretraining and saving the pretrained model.\n"
      },
      "source": "https://raw.githubusercontent.com/DataX-JieHao/PAGE-Net/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Two-stage aggregation (see aggregation folder)",
        "parent_header": [
          "Get Started"
        ],
        "type": "Text_excerpt",
        "value": "1. Aggergation.py : it generates the aggregated score and saves in csv.\n2. DataMatching.py : it splits the aggregated data in train, test, and validation\n"
      },
      "source": "https://raw.githubusercontent.com/DataX-JieHao/PAGE-Net/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Integration of aggregated pathological images and genomic data",
        "parent_header": [
          "Get Started"
        ],
        "type": "Text_excerpt",
        "value": "Run.py: to train the model with the inputs from train.csv. Hyperparmeters are optimized by grid search automatically with validation.csv. C-index is used to evaluate the model performance with test.csv.\n"
      },
      "source": "https://raw.githubusercontent.com/DataX-JieHao/PAGE-Net/master/README.md",
      "technique": "header_analysis"
    }
  ]
}