{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/chhylp123/BitMapperBS"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contacts",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Haoyu Cheng: hcheng@jimmy.harvard.edu\n\n"
      },
      "source": "https://raw.githubusercontent.com/chhylp123/BitMapperBS/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-07-02T08:32:03Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-08-07T01:39:42Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "BitMapperBS: a fast and accurate read aligner for whole-genome bisulfite sequencing"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9519100399365746,
      "result": {
        "original_header": "- <img alt=\"#f03c15\" src=\"https://placehold.it/15/f03c15/000000?text=+\" /> `Please Note!!!`",
        "type": "Text_excerpt",
        "value": "BitMapperBS has been successfully tested using six CPU threads on a computer with a six-core Intel Core i7-8770k processor and 64GB RAM, running Ubuntu 16.04. The indexes, reference genomes and reads were stored in a Solid State Drive (SSD) to minimize the loading time.\nIt is also actively used by Computational Biology of Aging Group and BGI Genomics to analyze WGBS data. \n### Introduction ###\n-------   \nHere are the implementations of \"BitMapperBS: a fast and accurate read aligner for whole-genome bisulfite sequencing\". \nBitMapperBS is an ultra-fast and memory-efficient aligner that is designed for WGBS reads from directional protocol.  \n- ![#f03c15](https://placehold.it/15/f03c15/000000?text=+) `(update on August 24, 2019) Please do not use version 1.0.2.0, which has some problems. The current version is 1.0.2.1.` \n"
      },
      "source": "https://raw.githubusercontent.com/chhylp123/BitMapperBS/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9344494829860748,
      "result": {
        "original_header": "Hardware&amp;software requirements",
        "type": "Text_excerpt",
        "value": "(2) When building the index for the human genome, BitMapperBS requires about 10GB RAM and 60GB disk space. \n"
      },
      "source": "https://raw.githubusercontent.com/chhylp123/BitMapperBS/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9728786870421676,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "(3) (update on October 10, 2018) In most cases, BitMapperBS can be compiled from source code automatically, and is able to be implemented successfully. However, in some rare cases (e.g, old version of Linux operating system), BitMapperBS may report error message when building index. For example, report: \"sh: 1: ./psascan: not found\". This is because BitMapperBS utlizes psascan to build FM-index, and psascan (binary file) cannot be compiled from source code automatically. In this case, please compile psascan manually (https://www.cs.helsinki.fi/group/pads/pSAscan.html), and copy it (binary file of psascan) to the folder of BitMapperBS.  \n>1. (update on October 10, 2018) In most cases, BitMapperBS can be compiled from source code automatically, and is able to be implemented successfully. However, in some rare cases (e.g, old version of Linux operating system), BitMapperBS may report error message when building index. For example, report: \"sh: 1: ./psascan: not found\". This is because BitMapperBS utlizes psascan to build FM-index, and psascan (binary file) cannot be compiled from source code automatically. In this case, please compile psascan manually, and copy it (binary file of psascan) to the folder of BitMapperBS. The detailed steps are listed as follows:  \n\n>3. (update on November 28, 2018) Although BitMapperBS itself is significantly faster than other methods, the slow disk I/O cannot be accelerated. In practice, the most serious bottleneck of BitMapperBS is the poor performance of disk I/O, especially when using multiple CPU threads. Thus, if you want to run BitMapperBS using many CPU threads, we suggest you to adopt at least one of the following strategies: \n   >> (1) To reduce the amount of disk I/O, you can use the compressed fastq files (.fastq.gz or .fq.gz format) rather than the uncompressed raw files (.fastq or .fq format). \n   \n   >> (3) The input files and output files of BitMapperBS (e.g., the read files and the output SAM or BAM files) can be saved in fast solid state drives (SSD) storage devices, rather than slow hard disk drive (HDD) storage devices. \n"
      },
      "source": "https://raw.githubusercontent.com/chhylp123/BitMapperBS/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/chhylp123/BitMapperBS/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 9
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/chhylp123/BitMapperBS/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "chhylp123/BitMapperBS"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "BitMapperBS: a fast and accurate read aligner for whole-genome bisulfite sequencing"
      },
      "source": "https://raw.githubusercontent.com/chhylp123/BitMapperBS/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/chhylp123/BitMapperBS/master/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/chhylp123/BitMapperBS/master/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/chhylp123/BitMapperBS/master/libdivsufsort-2.0.1/config/ltmain.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/chhylp123/BitMapperBS/master/htslib/version.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://placehold.it/15/f03c15/000000?text=+"
      },
      "source": "https://raw.githubusercontent.com/chhylp123/BitMapperBS/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://placehold.it/15/f03c15/000000?text=+"
      },
      "source": "https://raw.githubusercontent.com/chhylp123/BitMapperBS/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://placehold.it/15/f03c15/000000?text=+"
      },
      "source": "https://raw.githubusercontent.com/chhylp123/BitMapperBS/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://placehold.it/15/f03c15/000000?text=+"
      },
      "source": "https://raw.githubusercontent.com/chhylp123/BitMapperBS/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://placehold.it/15/f03c15/000000?text=+"
      },
      "source": "https://raw.githubusercontent.com/chhylp123/BitMapperBS/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://placehold.it/15/f03c15/000000?text=+"
      },
      "source": "https://raw.githubusercontent.com/chhylp123/BitMapperBS/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://placehold.it/15/f03c15/000000?text=+"
      },
      "source": "https://raw.githubusercontent.com/chhylp123/BitMapperBS/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "BitMapperBS: a fast and accurate read aligner for whole-genome bisulfite sequencing"
        ],
        "type": "Text_excerpt",
        "value": "(1) Download the source code from Github\n\n    git clone https://github.com/chhylp123/BitMapperBS.git\n\n(2) Build (CPU must support AVX2 instructions or SSE4.2 instructions)\n    \n    cd BitMapperBS\n    make\n    \n- ![#f03c15](https://placehold.it/15/f03c15/000000?text=+) `(update on October 10, 2018) If system reports: \"cmake: not found\" or \"psascan_src/inmem_psascan_src/divsufsort_template.h:42:24: fatal error: divsufsort.h: not found\", please install CMake in your system.`\n\n- ![#f03c15](https://placehold.it/15/f03c15/000000?text=+) `(update on November 28, 2018) If system reports: \"fatal error: zlib.h: no such file or directory\" or \"fatal error: bzlib.h: No such file or directory\" or \"fatal error: lzma.h: No such file or directory\", please install zlib, libbz2 and liblzma libraries. In Ubuntu, please try: sudo apt-get install liblzma-dev zlib1g-dev libbz2-dev. `\n\n\n\n(3) (update on October 10, 2018) In most cases, BitMapperBS can be compiled from source code automatically, and is able to be implemented successfully. However, in some rare cases (e.g, old version of Linux operating system), BitMapperBS may report error message when building index. For example, report: \"sh: 1: ./psascan: not found\". This is because BitMapperBS utlizes psascan to build FM-index, and psascan (binary file) cannot be compiled from source code automatically. In this case, please compile psascan manually (https://www.cs.helsinki.fi/group/pads/pSAscan.html), and copy it (binary file of psascan) to the folder of BitMapperBS. \n\n### - ![#f03c15](https://placehold.it/15/f03c15/000000?text=+) `Please Note!!!` ###\n\n>1. (update on October 10, 2018) In most cases, BitMapperBS can be compiled from source code automatically, and is able to be implemented successfully. However, in some rare cases (e.g, old version of Linux operating system), BitMapperBS may report error message when building index. For example, report: \"sh: 1: ./psascan: not found\". This is because BitMapperBS utlizes psascan to build FM-index, and psascan (binary file) cannot be compiled from source code automatically. In this case, please compile psascan manually, and copy it (binary file of psascan) to the folder of BitMapperBS. The detailed steps are listed as follows: \n\n >> (1) Download psascan from https://www.cs.helsinki.fi/group/pads/pSAscan.html, and complie it from source code.\n\n >> (2) Copy psascan (binary file) to the folder of BitMapperBS.\n\n\n>2. (update on November 28, 2018)  When compiling BitMapperBS, if you get the error message \"fatal error: zlib.h: no such file or directory\" or \"fatal error: bzlib.h: No such file or directory\" or \"fatal error: lzma.h: No such file or directory\", please install zlib, libbz2 and liblzma libraries. In Ubuntu, please try:\n   >> sudo apt-get install liblzma-dev zlib1g-dev libbz2-dev\n\n\n>3. (update on November 28, 2018) Although BitMapperBS itself is significantly faster than other methods, the slow disk I/O cannot be accelerated. In practice, the most serious bottleneck of BitMapperBS is the poor performance of disk I/O, especially when using multiple CPU threads. Thus, if you want to run BitMapperBS using many CPU threads, we suggest you to adopt at least one of the following strategies: \n   >> (1) To reduce the amount of disk I/O, you can use the compressed fastq files (.fastq.gz or .fq.gz format) rather than the uncompressed raw files (.fastq or .fq format).\n\n   >> (2) To reduce the amount of disk I/O, you can output the mapping results in BAM format (using the option --bam) rather than SAM format.\n\n   \n   >> (3) The input files and output files of BitMapperBS (e.g., the read files and the output SAM or BAM files) can be saved in fast solid state drives (SSD) storage devices, rather than slow hard disk drive (HDD) storage devices.\n\n\nIf you have problem with the \"make\" part described above, please contact us (chhy@mail.ustc.edu.cn).\n\nUsage\n=====\n\n### Indexing Genome ###\n    \n    ./bitmapperBS --index <genome file name>\n\nThe suffix of the index file should be '.index.*'.\n\n- ![#f03c15](https://placehold.it/15/f03c15/000000?text=+) `(update on October 10, 2018) If BitMapperBS reports: \"sh: 1: ./psascan: not found\" when building index, this means that psascan did not compiled and installed successfully. BitMapperBS utlizes psascan to build FM-index, and psascan (binary file) cannot be compiled from source code automatically. In this case, please compile psascan manually (https://www.cs.helsinki.fi/group/pads/pSAscan.html), and copy it (binary file of psascan) to the folder of BitMapperBS.`\n\n\n### Quality and Adapter Trimming ###\n\nWe recommed users to use Trim_Galore to perform the quality and adapter trimming. Please see https://www.bioinformatics.babraham.ac.uk/projects/trim_galore/. \n\n### Bisulfite Mapping ###\n\nsingle-end reads\n\n    ./bitmapperBS --search <genome file name> --seq <read file name> [options]\n\npaired-end reads\n\n    ./bitmapperBS --search <genome file name> --seq1 <read1 file name> --seq2 <read2 file name> [options]\n\n\noutput mapping results in BAM format\n\n    ./bitmapperBS --search <genome file name> --seq <read file name> --bam -o output.bam [options]\n\n\n### Methylation Extracting ###\n\n\nWe recommend users to first remove the duplicates by Picard or samtools, and then use MethylDackel to extract methylation information. Please see https://github.com/dpryan79/methyldackel. Please note that MethylDackel maybe quite slow when using too many CPU threads. So we personally recommend users to use 2, 3 or 4 CPU threads for MethylDackel. Too many threads cannot accelerate methylation extracting step.\n\n\n### General Options ###\n\n\n| Option | Short Option | Type | Default | Brief Description |\n| :------: | :---------------: | :-----:|:-----:| :-----|\n| --help | -h | String | NULL | Show the help information. |\n| --version | -v | String | NULL | Show current version of BitMapperBS. |\n\n### Index Options ###\n\n| Option | Short Option | Type | Default | Brief Description |\n| :------: | :---------------: | :-----:|:-----:| :-----|\n| --index | -i | String | NULL | Generate an index from the specified fasta file. |\n| --index_folder | NULL | String | NULL | Set the folder that stores the genome indexes. If this option is not set, the indexes would be stores in the same folder of genome (input fasta file). |\n\n\n### Mapping Options ###\n\n\n\n| Option | Short Option | Type | Default | Brief Description |\n| :------: | :---------------: | :-----:|:-----:| :-----|\n| --search | NULL| String | NULL | Search in the specified genome. If the indexes of this genome are built without \"--index_folder\", please provide the path to the fasta file when aligning. Otherwise please provide the path to the index folder (set by \"--index_folder\" during indexing).|\n| --fast | NULL| NULL | NULL | Set bitmapperBS in fast mode (default). Only available for paired-end mode.|\n| --sensitive | NULL| NULL | NULL | Set bitmapperBS in sensitive mode. Only available for paired-end mode.|\n| --seq | NULL| String | NULL | Provide the name of single-end read file (.fastq/.fq/.fastq.gz/.fq.gz format). |\n| --seq1 | NULL| String | NULL | Provide the name of paired-end read_1 file (.fastq/.fq/.fastq.gz/.fq.gz format). |\n| --seq2 | NULL| String | NULL | Provide the name of paired-end read_2 file (.fastq/.fq/.fastq.gz/.fq.gz format). |\n| -o | -o | String | stdout (Standard output) | Provide the name of output file (SAM or BAM format). |\n| --sam | NULL| NULL | NULL | Output mapping results in SAM format (default). |\n| --bam | NULL| NULL | NULL | Output mapping results in BAM format. |\n| -e | -e | Double | 0.08 | Set the edit distance rate of read length, which is between 0 and 1. |\n| --min | NULL | Int | 0 | Minimum observed template length between a pair of end sequences. |\n| --max | NULL | Int | 500 | Maximum observed template length between a pair of end sequences. |\n| --threads | -t | Int | 1 | Set the number of CPU threads. |\n| --pbat | NULL | NULL | NULL | Map the bs-seq from pbat protocol. |\n| --unmapped_out | NULL | NULL | NULL | Report unmapped reads. |\n| --ambiguous_out | NULL | NULL | NULL | Random report one of hit of each ambiguous mapped read. |\n| --mapstats | NULL | String | NULL | Output the statistical information of read alignment into file.|\n| --phred33 | NULL | NULL | NULL | Input read qualities are encoded by Phred33 (default). |\n| --phred64 | NULL | NULL | NULL | Input read qualities are encoded by Phred64. |\n| --mp_max | NULL | Int | 6 | Maximum mismatch penalty. |\n| --mp_min | NULL | Int | 2 | Minimum mismatch penalty. |\n| --np | NULL | Int | 1 | Ambiguous character (e.g., N) penalty. |\n| --gap_open | NULL | Int | 5 | Gap open penalty. |\n| --gap_extension | NULL | Int | 3 | Gap extension penalty. |\n\n\n\n### Examples ###\n\n(1) **Indexing Genome**\n\nFor example, to make an index for human genome (GRCH38):\n\n\t./bitmapperBS --index human_genome.fa\n   \nThe suffix of the index file should be '.index.*'.\n\n- ![#f03c15](https://placehold.it/15/f03c15/000000?text=+) `(update on October 10, 2018) If BitMapperBS reports: \"sh: 1: ./psascan: not found\" when building index, this means that psascan did not compiled and installed successfully. BitMapperBS utlizes psascan to build FM-index, and psascan (binary file) cannot be compiled from source code automatically. In this case, please compile psascan manually (https://www.cs.helsinki.fi/group/pads/pSAscan.html), and copy it (binary file of psascan) to the folder of BitMapperBS.`\n\n(2) **Quality and Adapter Trimming**\n\nFor example, to trim paired-end reads:\n\n\ttrim_galore --paired read_1.fq read_2.fq\n    \n(3) **Bisulfite Mapping**\n\nFor example, to map reads to human genome (GRCH38) in single-end mode using 6 CPU threads:\n\n\t./bitmapperBS --search ../../ssd/human_genome.fa --seq ../../ssd/read.fq -t 6\n    \nIf map the reads from the *_2 reads file or the pbat protocol, the --pbat option should be set:\n\n    \t./bitmapperBS --search ../../ssd/human_genome.fa --seq ../../ssd/read_2.fq --pbat -t 6\n\nto map reads to human genome (GRCH38) in paired-end mode using 6 CPU threads:\n\n\t./bitmapperBS --search ../../ssd/human_genome.fa --seq1 ../../ssd/read_1.fq --seq2 ../../ssd/read_1.fq -t 6\n\n\n\nto output mapping results to the file named \"output.bam\" in BAM format\n\n    ./bitmapperBS --search ../../ssd/human_genome.fa --seq ../../ssd/read.fq -t 6 --bam -o output.bam\n\n\nThe default maximum allowed edit distance is 8% of read length (0.08). This option can be changed using -e option. In this example, the maximum allowed edit distance is set to 4% of read length:\n\n    ./bitmapperBS --search ../../ssd/human_genome.fa --seq ../../ssd/read.fq -t 6 -e 0.04\n\n\n(4) **Methylation Extracting**\n\nThe output file of BitMapperBS must be first sorted into a coordinate-sorted BAM file by utilizing samtools. After that, duplicate alignments should be removed by Picard or samtools. At last, the methylation information is extracted using MethylDackel (see https://github.com/dpryan79/methyldackel). Please note that MethylDackel maybe quite slow when using too many CPU threads. So we personally recommend users to use 2, 3 or 4 CPU threads for MethylDackel. Too many threads cannot accelerate methylation extracting step.\n\n\n### Changelog ###\n\n(17) September 15, 2019: version 1.0.2.3 released.\n\n    >> Improve the alignment rate slightly.\n\n(16) September 9, 2019: version 1.0.2.2 released. \n\n    >> Revise the output option of methylation extraction.\n\n(16) August 24, 2019: version 1.0.2.1 released. \n\n    >> Fix the bug in version 1.0.2.0.\n    >> Add support of BitMapperBS to output MAPQ like Bowtie2.\n    >> Recalculate alignment with large or complex gaps.\n    >> For the '--mapstats' option, the output file name can be defined by users.\n    >> Add '--phred33', '--phred64', '--mp_max', '--mp_min', '--np', '--gap_open', and '--gap_extension' options.\n\n(15) June 29, 2019: version 1.0.1.6 released. \n\n    >> Remove the `--pe` option. The paired-end mode or the single-end mode can be determined automatically.\n    >> All logging information is printed to standard error.\n    >> If `-o` is not specified, the alignment results would be printed to standard output.\n    >> Fix a minor bug of the paired-end read name.\n\n(14) June 28, 2019: version 1.0.1.5 released. \n\n    >> Fix a minor bug when mapping.\n\n(13) June 18, 2019: version 1.0.1.4 released. \n\n    >> Fix the bug for methylation extraction when loading index.\n\n(12) April 13, 2019: version 1.0.1.3 released. \n\n    >> Update the option for methylation extraction.\n\n(12) March 10, 2019: version 1.0.1.2 released. \n\n    >> Fix the bug when indexing in extreme cases.\n\n(11) March 9, 2019: version 1.0.1.1 released. \n\n    >> Fix the bug when indexing in extreme cases.\n\n(10) March 9, 2019: version 1.0.1.0 released. \n\n    >> Fix the bug about the optopn \"--index_folder\" when indexing.\n\n(9) March 8, 2019: version 1.0.0.9 released. \n\n    >> Fix the bug that may be happened with old version of G++.\n\n(8) January 17, 2019: version 1.0.0.8 released. \n\n    >>Add support of BitMapperBS to report the statistical information of read alignment into file.\n    >>When the input read files are in compressed fastq files (.fq.gz or .fastq.gz), BitMapperBS is sligntly faster at the expense of sligntly higher CPU usage. \n\n(7) January 8, 2019: version 1.0.0.7 released. \n\n    >>Add support of BitMapperBS to report unmapped reads and ambiguous mapped read.\n\n\n(6) December 27, 2018: version 1.0.0.6 released. \n\n    >>BitMapperBS fixed the bug of the option --min when aligning paired-end reads. \n    >>Add support of BitMapperBS to report mismatch and indel rate in alignment.\n\n(5) December 22, 2018: version 1.0.0.5 released. \n\n    >>BitMapperBS recalculated CIGAR in SAM file in some extreme cases. \n\n(4) December 11, 2018: version 1.0.0.4 released. \n\n    >>BitMapperBS fixed the bug of the QNAME in SAM file when aligning paired-end reads. \n    >>Remove the reads which are mapped off the end of the reference.\n\n(3) November 28, 2018: version 1.0.0.3 released. \n\n    >>Add support of BitMapperBS to output mapping results in BAM format.\n\n\n(2) November 16, 2018: version 1.0.0.2 released. \n\n    >>BitMapperBS fixed the bug of the TLEN field of SAM format in output SAM file when aligning the paired-end reads.\n\n\n(1) November 9, 2018: version 1.0.0.1 released. \n     \n     >>Add support of BitMapperBS to accept read files compressed by gzip (.fq.gz or .fastq.gz).\n     >>BitMapperBS fixed the bug of the SAM flag when aligning the single-end reads from pbat protocol.\n     >>BitMapperBS can check if the AVX2 instructions are supported by CPU automatically. If AVX2 is supported, the AVX2 version of BitMapperBS will be compiled, otherwise the SSE4.2 version of BitMapperBS will be compiled. Please note that the AVX2 version of BitMapperBS may be slightly slower than SSE4.2 version of BitMapperBS.\n\n\n\n\n### Contacts ###\n\nHaoyu Cheng: hcheng@jimmy.harvard.edu\n\n\n### Note ###\n-------\n* We adopt the pSAscan algorithm [1] to build the suffix array, and build BWT from suffix array.\n\n\n\n### References ###\n-------\n\n\n[1] K\u00e4rkk\u00e4inen J, Kempa D, Puglisi S J. Parallel external memory suffix sorting[C]//Annual Symposium on Combinatorial Pattern Matching. Springer, Cham, 2015: 329-342.\n"
      },
      "source": "https://raw.githubusercontent.com/chhylp123/BitMapperBS/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.993049500541651,
      "result": {
        "original_header": "- <img alt=\"#f03c15\" src=\"https://placehold.it/15/f03c15/000000?text=+\" /> `Please Note!!!`",
        "type": "Text_excerpt",
        "value": "- ![#f03c15](https://placehold.it/15/f03c15/000000?text=+) `(update on August 24, 2019) Please do not use version 1.0.2.0, which has some problems. The current version is 1.0.2.1.` \n### Build Requirements ### \n"
      },
      "source": "https://raw.githubusercontent.com/chhylp123/BitMapperBS/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9006598716272023,
      "result": {
        "original_header": "Build Requirements",
        "type": "Text_excerpt",
        "value": "(2) CMake. \n(3) CMake-supported build tool. \n"
      },
      "source": "https://raw.githubusercontent.com/chhylp123/BitMapperBS/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9374736175449949,
      "result": {
        "original_header": "- <img alt=\"#f03c15\" src=\"https://placehold.it/15/f03c15/000000?text=+\" /> `Please Note!!!`",
        "type": "Text_excerpt",
        "value": "(4) zlib, libbz2 and liblzma libraries. In Ubuntu, please try: sudo apt-get install liblzma-dev zlib1g-dev libbz2-dev. \n### Hardware&software requirements ### \n"
      },
      "source": "https://raw.githubusercontent.com/chhylp123/BitMapperBS/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9986772102010296,
      "result": {
        "original_header": "Hardware&amp;software requirements",
        "type": "Text_excerpt",
        "value": "(1) CPU must support AVX2 or SSE4.2 instructions. \n"
      },
      "source": "https://raw.githubusercontent.com/chhylp123/BitMapperBS/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999999759873507,
      "result": {
        "original_header": "- <img alt=\"#f03c15\" src=\"https://placehold.it/15/f03c15/000000?text=+\" /> `Please Note!!!`",
        "type": "Text_excerpt",
        "value": "### Installation ###\n- ![#f03c15](https://placehold.it/15/f03c15/000000?text=+) `BitMapperBS can be easily installed via bioconda, please see https://bioconda.github.io/recipes/bitmapperbs/README.html` \n"
      },
      "source": "https://raw.githubusercontent.com/chhylp123/BitMapperBS/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9883649302504749,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "(1) Download the source code from Github \n    git clone https://github.com/chhylp123/BitMapperBS.git \n(2) Build (CPU must support AVX2 instructions or SSE4.2 instructions)\n    \n    cd BitMapperBS\n    make\n    \n- ![#f03c15](https://placehold.it/15/f03c15/000000?text=+) `(update on October 10, 2018) If system reports: \"cmake: not found\" or \"psascan_src/inmem_psascan_src/divsufsort_template.h:42:24: fatal error: divsufsort.h: not found\", please install CMake in your system.` \n- ![#f03c15](https://placehold.it/15/f03c15/000000?text=+) `(update on November 28, 2018) If system reports: \"fatal error: zlib.h: no such file or directory\" or \"fatal error: bzlib.h: No such file or directory\" or \"fatal error: lzma.h: No such file or directory\", please install zlib, libbz2 and liblzma libraries. In Ubuntu, please try: sudo apt-get install liblzma-dev zlib1g-dev libbz2-dev. ` \n(3) (update on October 10, 2018) In most cases, BitMapperBS can be compiled from source code automatically, and is able to be implemented successfully. However, in some rare cases (e.g, old version of Linux operating system), BitMapperBS may report error message when building index. For example, report: \"sh: 1: ./psascan: not found\". This is because BitMapperBS utlizes psascan to build FM-index, and psascan (binary file) cannot be compiled from source code automatically. In this case, please compile psascan manually (https://www.cs.helsinki.fi/group/pads/pSAscan.html), and copy it (binary file of psascan) to the folder of BitMapperBS.  \n>1. (update on October 10, 2018) In most cases, BitMapperBS can be compiled from source code automatically, and is able to be implemented successfully. However, in some rare cases (e.g, old version of Linux operating system), BitMapperBS may report error message when building index. For example, report: \"sh: 1: ./psascan: not found\". This is because BitMapperBS utlizes psascan to build FM-index, and psascan (binary file) cannot be compiled from source code automatically. In this case, please compile psascan manually, and copy it (binary file of psascan) to the folder of BitMapperBS. The detailed steps are listed as follows:  \n >> (1) Download psascan from https://www.cs.helsinki.fi/group/pads/pSAscan.html, and complie it from source code. \n >> (2) Copy psascan (binary file) to the folder of BitMapperBS. \n\n>2. (update on November 28, 2018)  When compiling BitMapperBS, if you get the error message \"fatal error: zlib.h: no such file or directory\" or \"fatal error: bzlib.h: No such file or directory\" or \"fatal error: lzma.h: No such file or directory\", please install zlib, libbz2 and liblzma libraries. In Ubuntu, please try:\n   >> sudo apt-get install liblzma-dev zlib1g-dev libbz2-dev \n"
      },
      "source": "https://raw.githubusercontent.com/chhylp123/BitMapperBS/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/chhylp123/BitMapperBS/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Apache License 2.0",
        "spdx_id": "Apache-2.0",
        "type": "License",
        "url": "https://api.github.com/licenses/apache-2.0",
        "value": "https://api.github.com/licenses/apache-2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
      },
      "source": "https://raw.githubusercontent.com/chhylp123/BitMapperBS/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "BitMapperBS"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "chhylp123"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 2231947,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 1964540,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 298277,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 120709,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 44162,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 31209,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "M4",
        "size": 29084,
        "type": "Programming_language",
        "value": "M4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Roff",
        "size": 27482,
        "type": "Programming_language",
        "value": "Roff"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Scilab",
        "size": 5340,
        "type": "Programming_language",
        "value": "Scilab"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "WDL",
        "size": 3633,
        "type": "Programming_language",
        "value": "WDL"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 569,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/chhylp123/BitMapperBS/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "chhylp123",
          "type": "User"
        },
        "date_created": "2019-09-15T20:55:14Z",
        "date_published": "2019-09-15T23:27:32Z",
        "description": "1. Improve the alignment rate slightly.",
        "html_url": "https://github.com/chhylp123/BitMapperBS/releases/tag/v1.0.2.3",
        "name": "Version 1.0.2.3",
        "release_id": 20001550,
        "tag": "v1.0.2.3",
        "tarball_url": "https://api.github.com/repos/chhylp123/BitMapperBS/tarball/v1.0.2.3",
        "type": "Release",
        "url": "https://api.github.com/repos/chhylp123/BitMapperBS/releases/20001550",
        "value": "https://api.github.com/repos/chhylp123/BitMapperBS/releases/20001550",
        "zipball_url": "https://api.github.com/repos/chhylp123/BitMapperBS/zipball/v1.0.2.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "chhylp123",
          "type": "User"
        },
        "date_created": "2019-08-24T14:03:19Z",
        "date_published": "2019-08-24T14:06:22Z",
        "description": "1. Add support of BitMapperBS to output MAPQ like Bowtie2.\r\n2. Recalculate alignment with large or complex gaps.\r\n3. For the '--mapstats' option, the output file name can be defined by users.\r\n4. Add '--phred33', '--phred64', '--mp_max', '--mp_min', '--np', '--gap_open', and '--gap_extension' options.",
        "html_url": "https://github.com/chhylp123/BitMapperBS/releases/tag/v1.0.2.1",
        "name": "Version 1.0.2.1",
        "release_id": 19511730,
        "tag": "v1.0.2.1",
        "tarball_url": "https://api.github.com/repos/chhylp123/BitMapperBS/tarball/v1.0.2.1",
        "type": "Release",
        "url": "https://api.github.com/repos/chhylp123/BitMapperBS/releases/19511730",
        "value": "https://api.github.com/repos/chhylp123/BitMapperBS/releases/19511730",
        "zipball_url": "https://api.github.com/repos/chhylp123/BitMapperBS/zipball/v1.0.2.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "chhylp123",
          "type": "User"
        },
        "date_created": "2019-06-29T21:30:48Z",
        "date_published": "2019-06-29T21:45:24Z",
        "description": "1. Remove the `--pe` option. The paired-end mode or the single-end mode can be determined automatically.\r\n2. All logging information is printed to standard error.\r\n3. If `-o` is not specified, the alignment results would be printed to standard output.\r\n4. Fix a minor bug of the paired-end read name.\r\n5. Fix a minor bug when mapping.",
        "html_url": "https://github.com/chhylp123/BitMapperBS/releases/tag/v1.0.1.6",
        "name": "Version 1.0.1.6",
        "release_id": 18312512,
        "tag": "v1.0.1.6",
        "tarball_url": "https://api.github.com/repos/chhylp123/BitMapperBS/tarball/v1.0.1.6",
        "type": "Release",
        "url": "https://api.github.com/repos/chhylp123/BitMapperBS/releases/18312512",
        "value": "https://api.github.com/repos/chhylp123/BitMapperBS/releases/18312512",
        "zipball_url": "https://api.github.com/repos/chhylp123/BitMapperBS/zipball/v1.0.1.6"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "chhylp123",
          "type": "User"
        },
        "date_created": "2019-03-12T08:07:01Z",
        "date_published": "2019-03-13T18:55:53Z",
        "description": "Fixed the bug when indexing in extreme cases.",
        "html_url": "https://github.com/chhylp123/BitMapperBS/releases/tag/1.0.1.2",
        "name": "Version 1.0.1.2",
        "release_id": 16096446,
        "tag": "1.0.1.2",
        "tarball_url": "https://api.github.com/repos/chhylp123/BitMapperBS/tarball/1.0.1.2",
        "type": "Release",
        "url": "https://api.github.com/repos/chhylp123/BitMapperBS/releases/16096446",
        "value": "https://api.github.com/repos/chhylp123/BitMapperBS/releases/16096446",
        "zipball_url": "https://api.github.com/repos/chhylp123/BitMapperBS/zipball/1.0.1.2"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Build Requirements",
        "parent_header": [
          "BitMapperBS: a fast and accurate read aligner for whole-genome bisulfite sequencing"
        ],
        "type": "Text_excerpt",
        "value": "(1) G++.\n\n(2) CMake.\n\n(3) CMake-supported build tool.\n\n(4) zlib, libbz2 and liblzma libraries. In Ubuntu, please try: sudo apt-get install liblzma-dev zlib1g-dev libbz2-dev.\n"
      },
      "source": "https://raw.githubusercontent.com/chhylp123/BitMapperBS/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Hardware&amp;software requirements",
        "parent_header": [
          "BitMapperBS: a fast and accurate read aligner for whole-genome bisulfite sequencing"
        ],
        "type": "Text_excerpt",
        "value": "(1) CPU must support AVX2 or SSE4.2 instructions.\n\n(2) When building the index for the human genome, BitMapperBS requires about 10GB RAM and 60GB disk space.\n\n(3) When aligning the bs-seq to the human genome, BitMapperBS requires about 7GB RAM. \n"
      },
      "source": "https://raw.githubusercontent.com/chhylp123/BitMapperBS/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 08:08:00",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 28
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Indexing Genome",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "    ./bitmapperBS --index <genome file name>\n\nThe suffix of the index file should be '.index.*'.\n\n- ![#f03c15](https://placehold.it/15/f03c15/000000?text=+) `(update on October 10, 2018) If BitMapperBS reports: \"sh: 1: ./psascan: not found\" when building index, this means that psascan did not compiled and installed successfully. BitMapperBS utlizes psascan to build FM-index, and psascan (binary file) cannot be compiled from source code automatically. In this case, please compile psascan manually (https://www.cs.helsinki.fi/group/pads/pSAscan.html), and copy it (binary file of psascan) to the folder of BitMapperBS.`\n\n"
      },
      "source": "https://raw.githubusercontent.com/chhylp123/BitMapperBS/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Quality and Adapter Trimming",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "We recommed users to use Trim_Galore to perform the quality and adapter trimming. Please see https://www.bioinformatics.babraham.ac.uk/projects/trim_galore/. \n"
      },
      "source": "https://raw.githubusercontent.com/chhylp123/BitMapperBS/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Bisulfite Mapping",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "single-end reads\n\n    ./bitmapperBS --search <genome file name> --seq <read file name> [options]\n\npaired-end reads\n\n    ./bitmapperBS --search <genome file name> --seq1 <read1 file name> --seq2 <read2 file name> [options]\n\n\noutput mapping results in BAM format\n\n    ./bitmapperBS --search <genome file name> --seq <read file name> --bam -o output.bam [options]\n\n"
      },
      "source": "https://raw.githubusercontent.com/chhylp123/BitMapperBS/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Methylation Extracting",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "We recommend users to first remove the duplicates by Picard or samtools, and then use MethylDackel to extract methylation information. Please see https://github.com/dpryan79/methyldackel. Please note that MethylDackel maybe quite slow when using too many CPU threads. So we personally recommend users to use 2, 3 or 4 CPU threads for MethylDackel. Too many threads cannot accelerate methylation extracting step.\n\n"
      },
      "source": "https://raw.githubusercontent.com/chhylp123/BitMapperBS/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "General Options",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "| Option | Short Option | Type | Default | Brief Description |\n| :------: | :---------------: | :-----:|:-----:| :-----|\n| --help | -h | String | NULL | Show the help information. |\n| --version | -v | String | NULL | Show current version of BitMapperBS. |\n"
      },
      "source": "https://raw.githubusercontent.com/chhylp123/BitMapperBS/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Index Options",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "| Option | Short Option | Type | Default | Brief Description |\n| :------: | :---------------: | :-----:|:-----:| :-----|\n| --index | -i | String | NULL | Generate an index from the specified fasta file. |\n| --index_folder | NULL | String | NULL | Set the folder that stores the genome indexes. If this option is not set, the indexes would be stores in the same folder of genome (input fasta file). |\n\n"
      },
      "source": "https://raw.githubusercontent.com/chhylp123/BitMapperBS/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Mapping Options",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "\n| Option | Short Option | Type | Default | Brief Description |\n| :------: | :---------------: | :-----:|:-----:| :-----|\n| --search | NULL| String | NULL | Search in the specified genome. If the indexes of this genome are built without \"--index_folder\", please provide the path to the fasta file when aligning. Otherwise please provide the path to the index folder (set by \"--index_folder\" during indexing).|\n| --fast | NULL| NULL | NULL | Set bitmapperBS in fast mode (default). Only available for paired-end mode.|\n| --sensitive | NULL| NULL | NULL | Set bitmapperBS in sensitive mode. Only available for paired-end mode.|\n| --seq | NULL| String | NULL | Provide the name of single-end read file (.fastq/.fq/.fastq.gz/.fq.gz format). |\n| --seq1 | NULL| String | NULL | Provide the name of paired-end read_1 file (.fastq/.fq/.fastq.gz/.fq.gz format). |\n| --seq2 | NULL| String | NULL | Provide the name of paired-end read_2 file (.fastq/.fq/.fastq.gz/.fq.gz format). |\n| -o | -o | String | stdout (Standard output) | Provide the name of output file (SAM or BAM format). |\n| --sam | NULL| NULL | NULL | Output mapping results in SAM format (default). |\n| --bam | NULL| NULL | NULL | Output mapping results in BAM format. |\n| -e | -e | Double | 0.08 | Set the edit distance rate of read length, which is between 0 and 1. |\n| --min | NULL | Int | 0 | Minimum observed template length between a pair of end sequences. |\n| --max | NULL | Int | 500 | Maximum observed template length between a pair of end sequences. |\n| --threads | -t | Int | 1 | Set the number of CPU threads. |\n| --pbat | NULL | NULL | NULL | Map the bs-seq from pbat protocol. |\n| --unmapped_out | NULL | NULL | NULL | Report unmapped reads. |\n| --ambiguous_out | NULL | NULL | NULL | Random report one of hit of each ambiguous mapped read. |\n| --mapstats | NULL | String | NULL | Output the statistical information of read alignment into file.|\n| --phred33 | NULL | NULL | NULL | Input read qualities are encoded by Phred33 (default). |\n| --phred64 | NULL | NULL | NULL | Input read qualities are encoded by Phred64. |\n| --mp_max | NULL | Int | 6 | Maximum mismatch penalty. |\n| --mp_min | NULL | Int | 2 | Minimum mismatch penalty. |\n| --np | NULL | Int | 1 | Ambiguous character (e.g., N) penalty. |\n| --gap_open | NULL | Int | 5 | Gap open penalty. |\n| --gap_extension | NULL | Int | 3 | Gap extension penalty. |\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/chhylp123/BitMapperBS/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Examples",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "(1) **Indexing Genome**\n\nFor example, to make an index for human genome (GRCH38):\n\n\t./bitmapperBS --index human_genome.fa\n   \nThe suffix of the index file should be '.index.*'.\n\n- ![#f03c15](https://placehold.it/15/f03c15/000000?text=+) `(update on October 10, 2018) If BitMapperBS reports: \"sh: 1: ./psascan: not found\" when building index, this means that psascan did not compiled and installed successfully. BitMapperBS utlizes psascan to build FM-index, and psascan (binary file) cannot be compiled from source code automatically. In this case, please compile psascan manually (https://www.cs.helsinki.fi/group/pads/pSAscan.html), and copy it (binary file of psascan) to the folder of BitMapperBS.`\n\n(2) **Quality and Adapter Trimming**\n\nFor example, to trim paired-end reads:\n\n\ttrim_galore --paired read_1.fq read_2.fq\n    \n(3) **Bisulfite Mapping**\n\nFor example, to map reads to human genome (GRCH38) in single-end mode using 6 CPU threads:\n\n\t./bitmapperBS --search ../../ssd/human_genome.fa --seq ../../ssd/read.fq -t 6\n    \nIf map the reads from the *_2 reads file or the pbat protocol, the --pbat option should be set:\n\n    \t./bitmapperBS --search ../../ssd/human_genome.fa --seq ../../ssd/read_2.fq --pbat -t 6\n\nto map reads to human genome (GRCH38) in paired-end mode using 6 CPU threads:\n\n\t./bitmapperBS --search ../../ssd/human_genome.fa --seq1 ../../ssd/read_1.fq --seq2 ../../ssd/read_1.fq -t 6\n\n\n\nto output mapping results to the file named \"output.bam\" in BAM format\n\n    ./bitmapperBS --search ../../ssd/human_genome.fa --seq ../../ssd/read.fq -t 6 --bam -o output.bam\n\n\nThe default maximum allowed edit distance is 8% of read length (0.08). This option can be changed using -e option. In this example, the maximum allowed edit distance is set to 4% of read length:\n\n    ./bitmapperBS --search ../../ssd/human_genome.fa --seq ../../ssd/read.fq -t 6 -e 0.04\n\n\n(4) **Methylation Extracting**\n\nThe output file of BitMapperBS must be first sorted into a coordinate-sorted BAM file by utilizing samtools. After that, duplicate alignments should be removed by Picard or samtools. At last, the methylation information is extracted using MethylDackel (see https://github.com/dpryan79/methyldackel). Please note that MethylDackel maybe quite slow when using too many CPU threads. So we personally recommend users to use 2, 3 or 4 CPU threads for MethylDackel. Too many threads cannot accelerate methylation extracting step.\n\n"
      },
      "source": "https://raw.githubusercontent.com/chhylp123/BitMapperBS/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Changelog",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "(17) September 15, 2019: version 1.0.2.3 released.\n\n    >> Improve the alignment rate slightly.\n\n(16) September 9, 2019: version 1.0.2.2 released. \n\n    >> Revise the output option of methylation extraction.\n\n(16) August 24, 2019: version 1.0.2.1 released. \n\n    >> Fix the bug in version 1.0.2.0.\n    >> Add support of BitMapperBS to output MAPQ like Bowtie2.\n    >> Recalculate alignment with large or complex gaps.\n    >> For the '--mapstats' option, the output file name can be defined by users.\n    >> Add '--phred33', '--phred64', '--mp_max', '--mp_min', '--np', '--gap_open', and '--gap_extension' options.\n\n(15) June 29, 2019: version 1.0.1.6 released. \n\n    >> Remove the `--pe` option. The paired-end mode or the single-end mode can be determined automatically.\n    >> All logging information is printed to standard error.\n    >> If `-o` is not specified, the alignment results would be printed to standard output.\n    >> Fix a minor bug of the paired-end read name.\n\n(14) June 28, 2019: version 1.0.1.5 released. \n\n    >> Fix a minor bug when mapping.\n\n(13) June 18, 2019: version 1.0.1.4 released. \n\n    >> Fix the bug for methylation extraction when loading index.\n\n(12) April 13, 2019: version 1.0.1.3 released. \n\n    >> Update the option for methylation extraction.\n\n(12) March 10, 2019: version 1.0.1.2 released. \n\n    >> Fix the bug when indexing in extreme cases.\n\n(11) March 9, 2019: version 1.0.1.1 released. \n\n    >> Fix the bug when indexing in extreme cases.\n\n(10) March 9, 2019: version 1.0.1.0 released. \n\n    >> Fix the bug about the optopn \"--index_folder\" when indexing.\n\n(9) March 8, 2019: version 1.0.0.9 released. \n\n    >> Fix the bug that may be happened with old version of G++.\n\n(8) January 17, 2019: version 1.0.0.8 released. \n\n    >>Add support of BitMapperBS to report the statistical information of read alignment into file.\n    >>When the input read files are in compressed fastq files (.fq.gz or .fastq.gz), BitMapperBS is sligntly faster at the expense of sligntly higher CPU usage. \n\n(7) January 8, 2019: version 1.0.0.7 released. \n\n    >>Add support of BitMapperBS to report unmapped reads and ambiguous mapped read.\n\n\n(6) December 27, 2018: version 1.0.0.6 released. \n\n    >>BitMapperBS fixed the bug of the option --min when aligning paired-end reads. \n    >>Add support of BitMapperBS to report mismatch and indel rate in alignment.\n\n(5) December 22, 2018: version 1.0.0.5 released. \n\n    >>BitMapperBS recalculated CIGAR in SAM file in some extreme cases. \n\n(4) December 11, 2018: version 1.0.0.4 released. \n\n    >>BitMapperBS fixed the bug of the QNAME in SAM file when aligning paired-end reads. \n    >>Remove the reads which are mapped off the end of the reference.\n\n(3) November 28, 2018: version 1.0.0.3 released. \n\n    >>Add support of BitMapperBS to output mapping results in BAM format.\n\n\n(2) November 16, 2018: version 1.0.0.2 released. \n\n    >>BitMapperBS fixed the bug of the TLEN field of SAM format in output SAM file when aligning the paired-end reads.\n\n\n(1) November 9, 2018: version 1.0.0.1 released. \n     \n     >>Add support of BitMapperBS to accept read files compressed by gzip (.fq.gz or .fastq.gz).\n     >>BitMapperBS fixed the bug of the SAM flag when aligning the single-end reads from pbat protocol.\n     >>BitMapperBS can check if the AVX2 instructions are supported by CPU automatically. If AVX2 is supported, the AVX2 version of BitMapperBS will be compiled, otherwise the SSE4.2 version of BitMapperBS will be compiled. Please note that the AVX2 version of BitMapperBS may be slightly slower than SSE4.2 version of BitMapperBS.\n\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/chhylp123/BitMapperBS/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "workflows": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/chhylp123/BitMapperBS/master/workflows/bitmapper_search_methyldackel.wdl"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/chhylp123/BitMapperBS/master/workflows/bitmapper_index.wdl"
      },
      "technique": "file_exploration"
    }
  ]
}