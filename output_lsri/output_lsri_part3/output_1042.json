{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Build index of the reference DNA sequence",
        "parent_header": [
          "BWA-MEME: BWA-MEM emulated with a machine learning approach",
          "Getting Started"
        ],
        "type": "Text_excerpt",
        "value": "```sh\n# Build index (Takes ~1hr for human genome)\n# we recommend using at least 8 threads\nbwa-meme index -a meme <input.fasta> -t <thread number>\n```"
      },
      "source": "https://raw.githubusercontent.com/kaist-ina/BWA-MEME/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Reference file download",
        "parent_header": [
          "BWA-MEME: BWA-MEM emulated with a machine learning approach",
          "Notes"
        ],
        "type": "Text_excerpt",
        "value": "You can download the reference using the command below.\n```sh\n# Download human_g1k_v37.fasta human genome and decompress it\nwget -c ftp://ftp-trace.ncbi.nih.gov/1000genomes/ftp/technical/reference/human_g1k_v37.fasta.gz\ngunzip human_g1k_v37.fasta.gz\n\n# hg38 human reference\nwget -c https://storage.googleapis.com/genomics-public-data/references/hg38/v0/Homo_sapiens_assembly38.fasta\n```\n"
      },
      "source": "https://raw.githubusercontent.com/kaist-ina/BWA-MEME/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "BWA-MEME: BWA-MEM emulated with a machine learning approach"
        ],
        "type": "Text_excerpt",
        "value": "If you use BWA-MEME, please cite the following [paper](https://academic.oup.com/bioinformatics/advance-article/doi/10.1093/bioinformatics/btac137/6543607)\n> **Youngmok Jung, Dongsu Han, BWA-MEME: BWA-MEM emulated with a machine learning approach, Bioinformatics, Volume 38, Issue 9, 1 May 2022, Pages 2404\u20132413, https://doi.org/10.1093/bioinformatics/btac137**\n\n\n```\n@article{10.1093/bioinformatics/btac137,\n    author = {Jung, Youngmok and Han, Dongsu},\n    title = \"{BWA-MEME: BWA-MEM emulated with a machine learning approach}\",\n    journal = {Bioinformatics},\n    volume = {38},\n    number = {9},\n    pages = {2404-2413},\n    year = {2022},\n    month = {03},\n    issn = {1367-4803},\n    doi = {10.1093/bioinformatics/btac137},\n    url = {https://doi.org/10.1093/bioinformatics/btac137},\n    eprint = {https://academic.oup.com/bioinformatics/article-pdf/38/9/2404/43480985/btac137.pdf},\n}\n\n```\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/kaist-ina/BWA-MEME/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Jung, Youngmok and Han, Dongsu",
        "doi": "10.1093/bioinformatics/btac137",
        "format": "bibtex",
        "title": "{BWA-MEME: BWA-MEM emulated with a machine learning approach}",
        "type": "Text_excerpt",
        "url": "https://doi.org/10.1093/bioinformatics/btac137",
        "value": "@article{10.1093/bioinformatics/btac137,\n    eprint = {https://academic.oup.com/bioinformatics/article-pdf/38/9/2404/43480985/btac137.pdf},\n    url = {https://doi.org/10.1093/bioinformatics/btac137},\n    doi = {10.1093/bioinformatics/btac137},\n    issn = {1367-4803},\n    month = {03},\n    year = {2022},\n    pages = {2404-2413},\n    number = {9},\n    volume = {38},\n    journal = {Bioinformatics},\n    title = {{BWA-MEME: BWA-MEM emulated with a machine learning approach}},\n    author = {Jung, Youngmok and Han, Dongsu},\n}"
      },
      "source": "https://raw.githubusercontent.com/kaist-ina/BWA-MEME/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_of_conduct": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at webmaster@linux.intel.com. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n"
      },
      "source": "https://raw.githubusercontent.com/kaist-ina/BWA-MEME/master/ext/safestringlib/CODE_OF_CONDUCT.md",
      "technique": "file_exploration"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/kaist-ina/BWA-MEME"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-09-01T05:40:38Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-08-26T19:31:48Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "BWA-MEME: Faster BWA-MEM2 using learned-index"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9948104746757844,
      "result": {
        "original_header": "BWA-MEME: BWA-MEM emulated with a machine learning approach",
        "type": "Text_excerpt",
        "value": "- BWA-MEME generates **the same SAM output** as **BWA-MEM2** and the original **bwa mem** 0.7.17. [[1]](https://github.com/kaist-ina/BWA-MEME/issues/27) [[2]](https://daylily-informatics.github.io/2023-05-03-very-fast-bwa-mem2ert-invocation/)\n- BWA-MEME is optimized for CPU usage, achieving up to **1.4x higher** alignment throughput, no specialized hardware is required.\n- The seeding throughput of BWA-MEME is up to **3.32x faster** than BWA-MEM2.\n- BWA-MEME can adapt to a wide range of server memory sizes, from 38GB to 128GB.\n- To accelerate index loading in low disk speed env (e.g., luster, HDD disks), BWA-MEME provides runtime index-building that is equivalent to disk read speed of 3-5 GB per second. \n"
      },
      "source": "https://raw.githubusercontent.com/kaist-ina/BWA-MEME/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9621871180810814,
      "result": {
        "original_header": "Notes",
        "type": "Text_excerpt",
        "value": "* BWA-MEME requires at least 64 GB RAM (with minimal acceleration BWA-MEME requires 38GB of memory). For WGS runs on human genome (>32 threads) with full acceleration of BWA-MEME, it is recommended to have 140-192 GB RAM. \n* When deploying BWA-MEME with many threads, mimalloc library is recommended for a better performance (Enabled at default).\n \n"
      },
      "source": "https://raw.githubusercontent.com/kaist-ina/BWA-MEME/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8777463148221293,
      "result": {
        "original_header": "Building pipeline with Samtools",
        "type": "Text_excerpt",
        "value": "- Due to increased alignment throughput, given enough threads the bottleneck moves from `alignment` to `Samtools sorting`. As a result BWA-MEME might require additional pipeline modification (not a simple drop-in replacement)\n- To reduce the CPU waste, you might want to use `mbuffer` in the pipeline or write alignment outputs to a file with fast compression. \n```\n# mbuffer size should be determined by memory option given to samtools.\n# ex) samtools sort uses 20 threads, 1G per each thread, so mbuffer size should be 20G (= -m 1G x -@ 20)\nbwa-meme mem -7 -K 100000000 -t 32 \\\n <reference> <fastq 1> <fastq 2> \\\n | mbuffer -m 20G \\\n | samtools sort -m 1G --output-fmt bam,level=1 -T ./sorttmp -@ 20 - > sorted.bam\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/kaist-ina/BWA-MEME/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Reference file download",
        "parent_header": [
          "BWA-MEME: BWA-MEM emulated with a machine learning approach",
          "Notes"
        ],
        "type": "Text_excerpt",
        "value": "You can download the reference using the command below.\n```sh\n# Download human_g1k_v37.fasta human genome and decompress it\nwget -c ftp://ftp-trace.ncbi.nih.gov/1000genomes/ftp/technical/reference/human_g1k_v37.fasta.gz\ngunzip human_g1k_v37.fasta.gz\n\n# hg38 human reference\nwget -c https://storage.googleapis.com/genomics-public-data/references/hg38/v0/Homo_sapiens_assembly38.fasta\n```\n"
      },
      "source": "https://raw.githubusercontent.com/kaist-ina/BWA-MEME/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Download MEME indices and pretrained P-RMI model",
        "parent_header": [
          "BWA-MEME: BWA-MEM emulated with a machine learning approach",
          "Notes"
        ],
        "type": "Text_excerpt",
        "value": "```sh\n# We provide the pretrained models and all indices required alignment (for hg37 and hg38 human reference) \n# you can download in the link below.\nhttps://web.inalab.net/~bwa-meme/\n\n# Indices of MEME and models should be in the same folder, we follow the prefix-based loading in bwa-mem\n```\n"
      },
      "source": "https://raw.githubusercontent.com/kaist-ina/BWA-MEME/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/kaist-ina/BWA-MEME/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 14
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/kaist-ina/BWA-MEME/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "kaist-ina/BWA-MEME"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "BWA-MEME: BWA-MEM emulated with a machine learning approach"
      },
      "source": "https://raw.githubusercontent.com/kaist-ina/BWA-MEME/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kaist-ina/BWA-MEME/master/build_rmis_dna.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kaist-ina/BWA-MEME/master/images/BWA-MEME-SeedingResults.jpg"
      },
      "source": "https://raw.githubusercontent.com/kaist-ina/BWA-MEME/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kaist-ina/BWA-MEME/master/images/BWA-MEME-alignment_throughput.png"
      },
      "source": "https://raw.githubusercontent.com/kaist-ina/BWA-MEME/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Install Option 1. Bioconda",
        "parent_header": [
          "BWA-MEME: BWA-MEM emulated with a machine learning approach",
          "Getting Started"
        ],
        "type": "Text_excerpt",
        "value": "```sh\n# Install with conda, bwa-meme and the learned-index train script \"build_rmis_dna.sh\" will be installed\nconda install -c conda-forge -c bioconda bwa-meme\n\n# Print version and Mode of compiled binary executable\n# bwa-meme binary automatically choose the binary based on the SIMD instruction supported (SSE, AVX2, AVX512 ...)\n# Other modes of bwa-meme is available as bwa-meme_mode1 or bwa-meme_mode2\nbwa-meme version\n\n```"
      },
      "source": "https://raw.githubusercontent.com/kaist-ina/BWA-MEME/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Required libraries",
        "parent_header": [
          "BWA-MEME: BWA-MEM emulated with a machine learning approach",
          "Getting Started",
          "Install Option 2. Build locally"
        ],
        "type": "Text_excerpt",
        "value": "```sh\nsudo apt-get install libz-dev cmake\n```"
      },
      "source": "https://raw.githubusercontent.com/kaist-ina/BWA-MEME/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Compile the code",
        "parent_header": [
          "BWA-MEME: BWA-MEM emulated with a machine learning approach",
          "Getting Started",
          "Install Option 2. Build locally"
        ],
        "type": "Text_excerpt",
        "value": "```sh\n# Compile from source\ngit clone https://github.com/kaist-ina/BWA-MEME.git BWA-MEME\ncd BWA-MEME\n\n# To compile all binary executables run below command. \n# Put the highest number of available vCPU cores\n# You should also have cmake installed. Download by sudo apt-get install cmake\nmake -j<num_threads>\n\n# Print version and Mode of compiled binary executable\n# bwa-meme binary automatically choose the binary based on the SIMD instruction supported (SSE, AVX2, AVX512 ...)\n# Other modes of bwa-meme is available as bwa-meme_mode1 or bwa-meme_mode2\n./bwa-meme version\n\n# For bwa-meme with mode 1 or 2 see below\n```\n### Build index of the reference DNA sequence\n```sh\n# Build index (Takes ~1hr for human genome)\n# we recommend using 32 threads\n./bwa-meme index -a meme <input.fasta> -t <thread number>\n```\n### Training P-RMI \nPrerequisites for building locally: To use the train code, please [install Rust](https://rustup.rs/).\n```sh\n# Run code below to train P-RMI, suffix array is required which is generated in index build code\n# takes about 15 minute for human genome with single thread\n./build_rmis_dna.sh <input.fasta>\n```\n\n### Run alignment and compare SAM output with BWA-MEM2\n```sh\n# Perform alignment with BWA-MEME, add -7 option\n./bwa-meme mem -7 -Y -K 100000000 -t <num_threads> <input.fasta> <input_1.fastq> -o <output_meme.sam>\n\n# Below runs alignment with BWA-MEM2, without -7 option\n./bwa-meme mem -Y -K 100000000 -t <num_threads> <input.fasta> <input_1.fastq> -o <output_mem2.sam>\n\n# Compare output SAM files\ndiff <output_mem2.sam> <output_meme.sam>\n\n# To diff large SAM files use https://github.com/unhammer/diff-large-files\n```\n"
      },
      "source": "https://raw.githubusercontent.com/kaist-ina/BWA-MEME/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.990514612794132,
      "result": {
        "original_header": "End-to-end alignment throughput is up to 1.4x higher than BWA-MEM2.",
        "type": "Text_excerpt",
        "value": "<img src=\"https://github.com/kaist-ina/BWA-MEME/blob/master/images/BWA-MEME-alignment_throughput.png\" width=\"50%\" /> \n"
      },
      "source": "https://raw.githubusercontent.com/kaist-ina/BWA-MEME/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8192332570816225,
      "result": {
        "original_header": "BWA-MEME: BWA-MEM emulated with a machine learning approach",
        "type": "Text_excerpt",
        "value": "<div align=\"center\">\n<img src=\"images/DALL\u00b7E_logo_bwa.png\" width=\"30%\"  style=\"margin-left: auto; margin-right: auto; display: block;\" />\n</div> \n"
      },
      "source": "https://raw.githubusercontent.com/kaist-ina/BWA-MEME/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/kaist-ina/BWA-MEME/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "alignment-algorithm, bioinformatics, bwa-mem, bwa-mem2, bwa-meme, genomics, learned-index, machine-learning, ngs, short-read-mapping"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2021 Youngmok Jung and Dongsu Han\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/kaist-ina/BWA-MEME/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kaist-ina/BWA-MEME//master/images/DALL\u00b7E_logo_bwa.png"
      },
      "source": "https://raw.githubusercontent.com/kaist-ina/BWA-MEME/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "BWA-MEME"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "kaist-ina"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 1539332,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 1489759,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Rust",
        "size": 280099,
        "type": "Programming_language",
        "value": "Rust"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 31907,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 26151,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 15390,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CSS",
        "size": 844,
        "type": "Programming_language",
        "value": "CSS"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kaist-ina/BWA-MEME/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "quito418",
          "type": "User"
        },
        "date_created": "2023-03-02T03:47:35Z",
        "date_published": "2023-03-04T12:55:22Z",
        "description": "- Bug fix for [issue 21](https://github.com/kaist-ina/BWA-MEME/issues/21)",
        "html_url": "https://github.com/kaist-ina/BWA-MEME/releases/tag/v1.0.6",
        "name": "v1.0.6 - bug fix ",
        "release_id": 94511257,
        "tag": "v1.0.6",
        "tarball_url": "https://api.github.com/repos/kaist-ina/BWA-MEME/tarball/v1.0.6",
        "type": "Release",
        "url": "https://api.github.com/repos/kaist-ina/BWA-MEME/releases/94511257",
        "value": "https://api.github.com/repos/kaist-ina/BWA-MEME/releases/94511257",
        "zipball_url": "https://api.github.com/repos/kaist-ina/BWA-MEME/zipball/v1.0.6"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "quito418",
          "type": "User"
        },
        "date_created": "2022-11-03T15:26:15Z",
        "date_published": "2022-11-08T02:07:05Z",
        "description": "- reduce memory usage in RMI building (For human reference, 72GB -> 57GB)\r\n- support for adaptive model number selection for RMI. ",
        "html_url": "https://github.com/kaist-ina/BWA-MEME/releases/tag/v1.0.5",
        "name": "v1.0.5",
        "release_id": 81971135,
        "tag": "v1.0.5",
        "tarball_url": "https://api.github.com/repos/kaist-ina/BWA-MEME/tarball/v1.0.5",
        "type": "Release",
        "url": "https://api.github.com/repos/kaist-ina/BWA-MEME/releases/81971135",
        "value": "https://api.github.com/repos/kaist-ina/BWA-MEME/releases/81971135",
        "zipball_url": "https://api.github.com/repos/kaist-ina/BWA-MEME/zipball/v1.0.5"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "quito418",
          "type": "User"
        },
        "date_created": "2022-04-29T04:02:18Z",
        "date_published": "2022-04-29T04:24:58Z",
        "description": "`bwa-meme` uses runtime index build as default. See #10 \r\n- `bwa-meme index` `.possa_packed and .ref2sa_packed` are now removed at default setting. Index build requires less than 1 hour with 16~32 threads.\r\n- `bwa-meme mem -7` loads `ref.pos_packed` file at startup. Depending on the bwa-meme mode, other indices (`.possa_packed` and `ref2sa_packed`) are built based on it (instead of reading files).\r\n\r\nMinor update 220504: Source_BWA-MEME_r1.tar.gz\r\n- Added mimalloc as default\r\n- Minor fix in version number printed",
        "html_url": "https://github.com/kaist-ina/BWA-MEME/releases/tag/v1.0.4",
        "name": "v1.0.4 - build additional indices at runtime",
        "release_id": 65643801,
        "tag": "v1.0.4",
        "tarball_url": "https://api.github.com/repos/kaist-ina/BWA-MEME/tarball/v1.0.4",
        "type": "Release",
        "url": "https://api.github.com/repos/kaist-ina/BWA-MEME/releases/65643801",
        "value": "https://api.github.com/repos/kaist-ina/BWA-MEME/releases/65643801",
        "zipball_url": "https://api.github.com/repos/kaist-ina/BWA-MEME/zipball/v1.0.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "quito418",
          "type": "User"
        },
        "date_created": "2022-04-27T08:31:46Z",
        "date_published": "2022-04-27T08:39:58Z",
        "description": "removed unnecessary operations and support multi-thread\r\n- removed BWT building in `bwa-meme index -a meme`, which is unnecessary \r\n- support for multi-threaded index build: `.suffixarray_uint64, .pos_packed, .possa_packed, .ref2sa_packed`\r\n- removed requirement for `.suffixarray_uint64` file at runtime\r\n- usage info update in `bwa-meme index`\r\n\r\n",
        "html_url": "https://github.com/kaist-ina/BWA-MEME/releases/tag/v1.0.3",
        "name": "v1.0.3 - index build code optimization",
        "release_id": 65426879,
        "tag": "v1.0.3",
        "tarball_url": "https://api.github.com/repos/kaist-ina/BWA-MEME/tarball/v1.0.3",
        "type": "Release",
        "url": "https://api.github.com/repos/kaist-ina/BWA-MEME/releases/65426879",
        "value": "https://api.github.com/repos/kaist-ina/BWA-MEME/releases/65426879",
        "zipball_url": "https://api.github.com/repos/kaist-ina/BWA-MEME/zipball/v1.0.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "quito418",
          "type": "User"
        },
        "date_created": "2022-04-22T06:00:42Z",
        "date_published": "2022-04-22T06:11:56Z",
        "description": "- Compile all BWA-MEME modes at once.",
        "html_url": "https://github.com/kaist-ina/BWA-MEME/releases/tag/v1.0.2",
        "name": "Minor Update",
        "release_id": 65038118,
        "tag": "v1.0.2",
        "tarball_url": "https://api.github.com/repos/kaist-ina/BWA-MEME/tarball/v1.0.2",
        "type": "Release",
        "url": "https://api.github.com/repos/kaist-ina/BWA-MEME/releases/65038118",
        "value": "https://api.github.com/repos/kaist-ina/BWA-MEME/releases/65038118",
        "zipball_url": "https://api.github.com/repos/kaist-ina/BWA-MEME/zipball/v1.0.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "quito418",
          "type": "User"
        },
        "date_created": "2022-03-31T09:52:24Z",
        "date_published": "2022-04-01T03:08:10Z",
        "description": "- Changed binary name to avoid conflict with BWA-MEM2 in Bioconda.\r\n- Moved Mode variable to Makefile\r\n\r\nMode 1 : 38GB RAM usage for index in runtime (without any additional memory structures)\r\nMode 2 : 88GB RAM usage for index in runtime (without Inverse Suffix Array)\r\nMode 3 : 118GB RAM usage for index in runtime",
        "html_url": "https://github.com/kaist-ina/BWA-MEME/releases/tag/v1.0.1",
        "name": "Minor update",
        "release_id": 63340203,
        "tag": "v1.0.1",
        "tarball_url": "https://api.github.com/repos/kaist-ina/BWA-MEME/tarball/v1.0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/kaist-ina/BWA-MEME/releases/63340203",
        "value": "https://api.github.com/repos/kaist-ina/BWA-MEME/releases/63340203",
        "zipball_url": "https://api.github.com/repos/kaist-ina/BWA-MEME/zipball/v1.0.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "quito418",
          "type": "User"
        },
        "date_created": "2022-03-07T01:39:21Z",
        "date_published": "2022-03-07T06:24:40Z",
        "description": "Mode 1 : 38GB RAM usage for index in runtime (without any additional memory structures)\r\nMode 2 : 88GB RAM usage for index in runtime (without Inverse Suffix Array)\r\nMode 3 : 118GB RAM usage for index in runtime \r\n",
        "html_url": "https://github.com/kaist-ina/BWA-MEME/releases/tag/v1.0.0",
        "name": "Initial Release",
        "release_id": 61110847,
        "tag": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/kaist-ina/BWA-MEME/tarball/v1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/kaist-ina/BWA-MEME/releases/61110847",
        "value": "https://api.github.com/repos/kaist-ina/BWA-MEME/releases/61110847",
        "zipball_url": "https://api.github.com/repos/kaist-ina/BWA-MEME/zipball/v1.0.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Run alignment and compare SAM output with BWA-MEM2",
        "parent_header": [
          "BWA-MEME: BWA-MEM emulated with a machine learning approach",
          "Getting Started"
        ],
        "type": "Text_excerpt",
        "value": "```sh\n# Perform alignment with BWA-MEME, add -7 option\nbwa-meme mem -7 -Y -K 100000000 -t <num_threads> <input.fasta> <input_1.fastq> -o <output_meme.sam>\n\n# Below runs alignment with BWA-MEM2, without -7 option\nbwa-meme mem -Y -K 100000000 -t <num_threads> <input.fasta> <input_1.fastq> -o <output_mem2.sam>\n\n# Compare output SAM files\ndiff <output_mem2.sam> <output_meme.sam>\n\n# To diff large SAM files use https://github.com/unhammer/diff-large-files\n```\n\n---"
      },
      "source": "https://raw.githubusercontent.com/kaist-ina/BWA-MEME/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 03:17:24",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 109
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "When to use BWA-MEME",
        "parent_header": [
          "BWA-MEME: BWA-MEM emulated with a machine learning approach"
        ],
        "type": "Text_excerpt",
        "value": "- Anyone who use BWA-MEM or BWA-MEM2 in CPU-only machine (BWA-MEME requires 38GB of memory for index at minimal mode)\n- Building high-throughput NGS alignment cluster with low cost/throughput. CPU-only alignment can be cheaper than using hardware acceleration (GPU, FPGA).\n- Just add single option \"-7\" to deploy BWA-MEME instead of BWA-MEM2 (BWA-MEME does not change anything, except the speed).\n"
      },
      "source": "https://raw.githubusercontent.com/kaist-ina/BWA-MEME/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "The seeding module of BWA-MEME uses Learned-index. This results in 3.32x higher seeding throughput compared to FM-index of BWA-MEM2.",
        "parent_header": [
          "BWA-MEME: BWA-MEM emulated with a machine learning approach",
          "Performance of BWA-MEME"
        ],
        "type": "Text_excerpt",
        "value": "<img src=\"https://github.com/kaist-ina/BWA-MEME/blob/master/images/BWA-MEME-SeedingResults.jpg\" width=\"50%\"/>\n"
      },
      "source": "https://raw.githubusercontent.com/kaist-ina/BWA-MEME/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Training P-RMI",
        "parent_header": [
          "BWA-MEME: BWA-MEM emulated with a machine learning approach",
          "Getting Started"
        ],
        "type": "Text_excerpt",
        "value": "```sh\n# Run code below to train P-RMI, suffix array is required which is generated in index build code\n# takes about 15 minute for human genome with single thread\nbuild_rmis_dna.sh <input.fasta>\n```\n"
      },
      "source": "https://raw.githubusercontent.com/kaist-ina/BWA-MEME/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Required libraries",
        "parent_header": [
          "BWA-MEME: BWA-MEM emulated with a machine learning approach",
          "Getting Started",
          "Install Option 2. Build locally"
        ],
        "type": "Text_excerpt",
        "value": "```sh\nsudo apt-get install libz-dev cmake\n```"
      },
      "source": "https://raw.githubusercontent.com/kaist-ina/BWA-MEME/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Compile the code",
        "parent_header": [
          "BWA-MEME: BWA-MEM emulated with a machine learning approach",
          "Getting Started",
          "Install Option 2. Build locally"
        ],
        "type": "Text_excerpt",
        "value": "```sh\n# Compile from source\ngit clone https://github.com/kaist-ina/BWA-MEME.git BWA-MEME\ncd BWA-MEME\n\n# To compile all binary executables run below command. \n# Put the highest number of available vCPU cores\n# You should also have cmake installed. Download by sudo apt-get install cmake\nmake -j<num_threads>\n\n# Print version and Mode of compiled binary executable\n# bwa-meme binary automatically choose the binary based on the SIMD instruction supported (SSE, AVX2, AVX512 ...)\n# Other modes of bwa-meme is available as bwa-meme_mode1 or bwa-meme_mode2\n./bwa-meme version\n\n# For bwa-meme with mode 1 or 2 see below\n```\n### Build index of the reference DNA sequence\n```sh\n# Build index (Takes ~1hr for human genome)\n# we recommend using 32 threads\n./bwa-meme index -a meme <input.fasta> -t <thread number>\n```\n### Training P-RMI \nPrerequisites for building locally: To use the train code, please [install Rust](https://rustup.rs/).\n```sh\n# Run code below to train P-RMI, suffix array is required which is generated in index build code\n# takes about 15 minute for human genome with single thread\n./build_rmis_dna.sh <input.fasta>\n```\n\n### Run alignment and compare SAM output with BWA-MEM2\n```sh\n# Perform alignment with BWA-MEME, add -7 option\n./bwa-meme mem -7 -Y -K 100000000 -t <num_threads> <input.fasta> <input_1.fastq> -o <output_meme.sam>\n\n# Below runs alignment with BWA-MEM2, without -7 option\n./bwa-meme mem -Y -K 100000000 -t <num_threads> <input.fasta> <input_1.fastq> -o <output_mem2.sam>\n\n# Compare output SAM files\ndiff <output_mem2.sam> <output_meme.sam>\n\n# To diff large SAM files use https://github.com/unhammer/diff-large-files\n```\n"
      },
      "source": "https://raw.githubusercontent.com/kaist-ina/BWA-MEME/master/README.md",
      "technique": "header_analysis"
    }
  ]
}