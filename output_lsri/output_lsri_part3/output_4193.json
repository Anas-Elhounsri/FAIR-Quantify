{
  "application_domain": [
    {
      "confidence": 16.58,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/SynthSys/pyOmeroUpload"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-04-01T16:16:34Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-05-06T16:13:22Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Project for uploading local file structure into OMERO database"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9858276219220614,
      "result": {
        "original_header": "pyOmeroUpload",
        "type": "Text_excerpt",
        "value": "A project providing Python code for uploading data and metadata from a local file structure into an OMERO server instance.\n \n"
      },
      "source": "https://raw.githubusercontent.com/SynthSys/pyOmeroUpload/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9211567123295312,
      "result": {
        "original_header": "Building the Distribution",
        "type": "Text_excerpt",
        "value": "When building a distribution for release through BioConda, the Python setuptools are used. From the top directory, run either `python setup.py sdist` for a source distribution or `python setup.py bdist` for a binary distribution. If you receive an error relating to tag names and SCM, this has been traced to the .git/packed-refs file, which contains references to the Git branches and tags in the repository. For some reason, the PyScaffold/setuptools break when tags are present in this file. Therefore, lines in the packed-refs file that related to tags must be commented-out to allow the distribution to build.\n \n"
      },
      "source": "https://raw.githubusercontent.com/SynthSys/pyOmeroUpload/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8330301243337594,
      "result": {
        "type": "Text_excerpt",
        "value": "******************************************************************************\n**Updated 12/07/21: This repository must be manually synchronised to the 'pyOmeroUpload'\nsub-directory of the \nwhenever updates are made.**\n****************************************************************************** \n"
      },
      "source": "https://raw.githubusercontent.com/SynthSys/pyOmeroUpload/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/SynthSys/pyOmeroUpload/wiki"
      },
      "source": "https://raw.githubusercontent.com/SynthSys/pyOmeroUpload/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/SynthSys/pyOmeroUpload/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/SynthSys/pyOmeroUpload/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SynthSys/pyOmeroUpload"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/SynthSys/pyOmeroUpload/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "pyOmeroUpload"
        ],
        "type": "Text_excerpt",
        "value": "On a Unix-like system, the Conda package can be installed using standard installation commands:\n```\n$ conda create --name omero_upload python=2.7\n$ conda activate omero_upload\n$ conda install --channel conda-forge --channel bioconda pyomero-upload=5.4.10_1.3.0\n```\nFor Windows users, Bioconda is not supported and therefore the OMEROConnect ([https://github.com/SynthSys/OMEROConnect](https://github.com/SynthSys/OMEROConnect)) Docker images must be used. The basic uploader package can be installed with the following command:\n```\n$ docker pull biordm/omero-connect:omero_uploader\n```\nOnce installed, run the Docker container with this command:\n```\n$ docker run -t -d --name omero-uploader --entrypoint /bin/bash biordm/omero-connect:omero_uploader\n```\nThe resulting uploader Docker container can then be accessed using the command:\n```\n$ docker exec -it omero-uploader /bin/bash\n```\nAt this point, the Conda environment including the pyomero-upload package can be activated and the CLI can be invoked using the instructions below.\n"
      },
      "source": "https://raw.githubusercontent.com/SynthSys/pyOmeroUpload/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9999999999997726,
      "result": {
        "original_header": "Building the Distribution",
        "type": "Text_excerpt",
        "value": "When building a distribution for release through BioConda, the Python setuptools are used. From the top directory, run either `python setup.py sdist` for a source distribution or `python setup.py bdist` for a binary distribution. If you receive an error relating to tag names and SCM, this has been traced to the .git/packed-refs file, which contains references to the Git branches and tags in the repository. For some reason, the PyScaffold/setuptools break when tags are present in this file. Therefore, lines in the packed-refs file that related to tags must be commented-out to allow the distribution to build.\n \n"
      },
      "source": "https://raw.githubusercontent.com/SynthSys/pyOmeroUpload/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 1.0,
      "result": {
        "original_header": "Testing the Distribution",
        "type": "Text_excerpt",
        "value": "Before submitting the pull request to bioconda, it's a good idea to test that the new package is built properly. In a Linux system with Docker installed, run the following commands to test locally:\n```\ndocker pull bioconda/bioconda-utils-build-env:latest\ndocker run -td bioconda/bioconda-utils-build-env /bin/bash\ndocker exec -it distracted_bartik /bin/bash\ngit clone https://github.com/SynthSys/bioconda-recipes\ncd bioconda-recipes\ngit checkout pyOmeroUpload-recipe\nbioconda-utils build --packages pyomero-upload --force\n```\nThis will force the package to rebuild regardless of whether there are any uncommitted changes. You can edit the `bioconda-recipes/recipes/pyomero-upload` `meta.yaml` and `build.sh` files as required and rerun the command. The built package can be inspected in `/opt/conda/pkgs`.\n \n"
      },
      "source": "https://raw.githubusercontent.com/SynthSys/pyOmeroUpload/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8337698428362426,
      "result": {
        "type": "Text_excerpt",
        "value": "******************************************************************************\n**Updated 12/07/21: This repository must be manually synchronised to the 'pyOmeroUpload'\nsub-directory of the \nwhenever updates are made.**\n****************************************************************************** \n"
      },
      "source": "https://raw.githubusercontent.com/SynthSys/pyOmeroUpload/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/SynthSys/pyOmeroUpload/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2019 SynthSys\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/SynthSys/pyOmeroUpload/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "pyOmeroUpload"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "SynthSys"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 169993,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/SynthSys/pyOmeroUpload/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jhay-epcc",
          "type": "User"
        },
        "date_created": "2020-08-13T08:42:20Z",
        "date_published": "2020-08-13T09:19:18Z",
        "description": "Enhancements in relation to peer review suggestions on paper https://wellcomeopenresearch.org/articles/5-96/v1. Features a new '-x' CLI parameter to skip metadata extraction and upload, and a new '-v' CLI parameter for excluding provenance KVP metadata. Also fixes a bug for DefaultImageProcessor on Windows systems.",
        "html_url": "https://github.com/SynthSys/pyOmeroUpload/releases/tag/v5.6.2_2.2.0",
        "name": "v5.6.2_2.2.0",
        "release_id": 29642406,
        "tag": "v5.6.2_2.2.0",
        "tarball_url": "https://api.github.com/repos/SynthSys/pyOmeroUpload/tarball/v5.6.2_2.2.0",
        "type": "Release",
        "url": "https://api.github.com/repos/SynthSys/pyOmeroUpload/releases/29642406",
        "value": "https://api.github.com/repos/SynthSys/pyOmeroUpload/releases/29642406",
        "zipball_url": "https://api.github.com/repos/SynthSys/pyOmeroUpload/zipball/v5.6.2_2.2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jhay-epcc",
          "type": "User"
        },
        "date_created": "2020-04-07T07:50:36Z",
        "date_published": "2020-04-09T15:21:45Z",
        "description": "PyOmeroUpload toolkit that uses omero-py version 5.6.2 (https://pypi.org/project/omero-py/5.6.2/)",
        "html_url": "https://github.com/SynthSys/pyOmeroUpload/releases/tag/v5.6.2_2.0.0",
        "name": "v5.6.2_2.0.0",
        "release_id": 25366482,
        "tag": "v5.6.2_2.0.0",
        "tarball_url": "https://api.github.com/repos/SynthSys/pyOmeroUpload/tarball/v5.6.2_2.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/SynthSys/pyOmeroUpload/releases/25366482",
        "value": "https://api.github.com/repos/SynthSys/pyOmeroUpload/releases/25366482",
        "zipball_url": "https://api.github.com/repos/SynthSys/pyOmeroUpload/zipball/v5.6.2_2.0.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 15:32:33",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 8
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "<a name=\"upload_cli\">Uploading with the Upload CLI</a>",
        "parent_header": [
          "pyOmeroUpload",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "A very basic use case for uploading a set of test images as hypercubes and accompanying metadata, as provided in [https://github.com/SynthSys/omero_connect_demo](https://github.com/SynthSys/omero_connect_demo) using the default metadata parser is as follows (and you will be prompted for the password):\n```\n/opt/conda/bin/python -m pyomero_upload/upload_cli -d test_data -n test_upload -u user -s demo.openmicroscopy.org -y\n```\nThe full set of options for the script are:\n```\npython -m pyomero_upload/upload_cli -d {DATA_DIRECTORY}  -n {DATASET_NAME} -u {USERNAME} -s {OMERO_SERVER_NAME} -y {USE_HYPERCUBE}  -m {CUSTOM_MODULE_PATH} -p {USE_CUSTOM_PARSER} -i {USE_CUSTOM_PROCESSOR}\n```\nThe options are described in the table below.\n| Parameter Name | Short Form | Description | Mandatory | Default |\n|--|--|--|--|--|\n| -\\-config-file | -c | The absolute path to the file containing the standard configuration for connecting to a specified OMERO server instance  | N |  |  \n| -\\-username | -u | The username for the account on the target OMERO server | Y |  |  \n| -\\-server | -s | The server name of the target OMERO instance | Y |  |  \n| -\\-port | -o | The port of the target OMERO server instance | N | 4064 |  \n| -\\-data-path | -d | The absolute path to the data directory containing data and metadata to be uploaded | Y |  |  \n| -\\-dataset-name | -n | The name of the dataset to be uploaded to the OMERO server | Y |  |  \n| -\\-hypercube | -y | If present, performs conversion of the data in the data directory into multi-dimensional images for upload to OMERO as hypercubes. | N | False  |  \n| -\\-module-path | -m | The absolute path to the directory containing any custom classes required for metadata parsing or image processing | N |  |  \n| -\\-custom-metadata-parser | -p | If present, and if module-path is specified, use the class CustomMetadataParser provided in the module file custom_metadata_parser.py | N | omero_metadata_parser/aggregate_metadata.MetadataAggregator |  \n| -\\-custom-image-processor | -i | If present, and if module-path is specified, use the class CustomImageProcessor provided in the module file custom_image_processor.py | N | omero_data_transfer/default_image_processor.DefaultImageProcessor |  \n| -\\-include-provenance-metadata | -v | If present, instructs the uploader to automatically include provenenance metadata. | N | True  |  \n| -\\-ignore-metadata | -x | If present, instructs the uploader to ignore metadata parsing and only upload images. | N | False  |  \n\nThe user specifies the target directory and, if desired, a custom module path containing an alternative metadata parser, and custom data transformation function with which to process collections of single images into _n_-dimensional images.\n"
      },
      "source": "https://raw.githubusercontent.com/SynthSys/pyOmeroUpload/master/README.md",
      "technique": "header_analysis"
    }
  ]
}