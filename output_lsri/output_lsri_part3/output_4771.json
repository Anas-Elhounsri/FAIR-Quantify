{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/liedllab/gigist"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-10-10T12:24:06Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-05-30T13:44:15Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "GPU Implementation of GIST"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9293147551271905,
      "result": {
        "original_header": "GIGIST",
        "type": "Text_excerpt",
        "value": "GPU Implementation of GIST \nThe CUDA source code is its own directory, since it is not officially added in cpptraj yet.\nOne can easily change that, but needs to also change the commands presented above, as well as\nsome lines in the include statements. \nThe columns in the gist output file are ordered differently than in the original implementation, the density\nof the water oxygen and hydrogen was moved to the back. This, of course, also has a big impact on the other\ncolumns. \nThis code was written by Johannes Kraml and is based on the implementation present in cpptraj. \n"
      },
      "source": "https://raw.githubusercontent.com/liedllab/gigist/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/liedllab/gigist/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 7
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/liedllab/gigist/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "liedllab/gigist"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "GIGIST"
      },
      "source": "https://raw.githubusercontent.com/liedllab/gigist/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/liedllab/gigist/master/patch.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 0.9998593494170139,
      "result": {
        "original_header": "GIGIST",
        "type": "Text_excerpt",
        "value": "Usage:\n```bash\nbash patch.sh </ROUTE/TO/CPPTRAJ/DIRECTORY>\n```\nIf the route to the cpptraj diorectory is not supplied, uses the cpptraj\ninstallation from AMBERHOME. \nAfter applying the patch.sh shell script, all that remains to be done is to compile cpptraj in the usual way. Preferrably, using `configure gnu -cuda -openmp` and subsequently `make`. \nIf the cpptraj installation is not a standard installation, the following steps have to be taken:\n+ configure\n+ src/Makefile\n+ src/CMakeList.txt\n+ src/Command.cpp\n+ src/cpptrajfiles \nHere is what you need to add to the different files:\n+ In configure add to the CUDA_TARGET cuda_kernel_gist/lib_cuda_gist.a\n+ In the src/Makefile add a recipe for the cuda_kernel_gist/lib_cuda_gist.a, add \n```make\n cuda_kernel_gist/lib_cuda_gist.a:\n      cd cuda_kernel_gist/ && $(MAKE) all\n```\n+ In the src/CMakeLists.txt add at the beginning\n  - BASH3*\n+ In the src/Command.cpp add after the two equivalent GIST statements\n  - BASH4*\n  - BASH5*\n+ In the src/cpptrajfiles add after the equivalent GIST statement\n  - BASH6*\n+ Copy the contents of the directory into your cpptraj src directory \n\nAfter updating these files, you can simply compile the code via \nmake in the root directory.\n```bash\n$ ./configure gnu -cuda -openmp\n$ make\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/liedllab/gigist/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/liedllab/gigist/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "gigist"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "liedllab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 154764,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Cuda",
        "size": 53538,
        "type": "Programming_language",
        "value": "Cuda"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 1093,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 556,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 166,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/liedllab/gigist/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 17:38:22",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 6
      },
      "technique": "GitHub_API"
    }
  ]
}