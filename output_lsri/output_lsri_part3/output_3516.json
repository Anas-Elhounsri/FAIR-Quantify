{
  "application_domain": [
    {
      "confidence": 23.46,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/calico/solo"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-02-28T22:01:25Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-26T18:16:57Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "software to detect doublets"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9889539122776678,
      "result": {
        "original_header": "Why",
        "type": "Text_excerpt",
        "value": "**_solo_** is a neural network framework to classify doublets, so that you can remove them from your data and clean your single cell profile. \nWe benchmarked **_solo_** against other doublet detection tools such as DoubletFinder and Scrublet, and found that it consistently outperformed them in terms of average precision. Additionally, Solo performed much better on a more complex tissue, mouse kidney. \n \n"
      },
      "source": "https://raw.githubusercontent.com/calico/solo/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9607608327860946,
      "result": {
        "original_header": "\u2248",
        "type": "Text_excerpt",
        "value": "```\nusage: solo [-h] -j MODEL_JSON_FILE -d DATA_PATH\n            [--set-reproducible-seed REPRODUCIBLE_SEED]\n            [--doublet-depth DOUBLET_DEPTH] [-g] [-a] [-o OUT_DIR]\n            [-r DOUBLET_RATIO] [-s SEED] [-e EXPECTED_NUMBER_OF_DOUBLETS] [-p]\n            [-recalibrate_scores] [--version] [--lr_st] [--lr_vae]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -j MODEL_JSON_FILE    json file to pass VAE parameters (default: None)\n  -d DATA_PATH          path to h5ad, loom, or 10x mtx dir cell by genes\n                        counts (default: None)\n  --set-reproducible-seed REPRODUCIBLE_SEED\n                        Reproducible seed, give an int to set seed (default:\n                        None)\n  --doublet-depth DOUBLET_DEPTH\n                        Depth multiplier for a doublet relative to the average\n                        of its constituents (default: 2.0)\n  -g                    Run on GPU (default: True)\n  -a                    output modified anndata object with solo scores Only\n                        works for anndata (default: False)\n  -o OUT_DIR\n  -r DOUBLET_RATIO      Ratio of doublets to true cells (default: 2)\n  -s SEED               Path to previous solo output directory. Seed VAE\n                        models with previously trained solo model. Directory\n                        structure is assumed to be the same as solo output\n                        directory structure. should at least have a vae.pt a\n                        pickled object of vae weights and a latent.npy an\n                        np.ndarray of the latents of your cells. (default:\n                        None)\n  -e EXPECTED_NUMBER_OF_DOUBLETS\n                        Experimentally expected number of doublets (default:\n                        None)\n  -p                    Plot outputs for solo (default: False)\n  -recalibrate_scores   Recalibrate doublet scores (not recommended anymore)\n                        (default: False)\n  --version             Get version of solo-sc (default: False)\n  --lr_st            \n                        Learning rate used for solo.train (default: 1e-3)\n  --lr_vae             \n                        Learning rate used for vae (default: 1e-3)\n                        \n``` \nOutputs:\n* `is_doublet.npy`  np boolean array, true if a cell is a doublet, differs from `preds.npy` if `-e expected_number_of_doublets` parameter was used\n* `vae` scVI directory for vae\n* `classifier.pt` scVI directory for classifier\n* `latent.npy` latent embedding for each cell             \n* `preds.npy` doublet predictions\n* `softmax_scores.npy` updated softmax of doublet scores (see paper), same as `no_update_softmax_scores.npy` now\n* `no_update_softmax_scores.npy` raw softmax of doublet scores \n"
      },
      "source": "https://raw.githubusercontent.com/calico/solo/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9418031251726545,
      "result": {
        "original_header": "How to demultiplex cell hashing data using HashSolo CLI",
        "type": "Text_excerpt",
        "value": "Demultiplexing takes as input an h5ad file with only hashing counts. Counts can be obtained from your fastqs by using kite. See tutorial here: https://github.com/pachterlab/kite\n```\nusage: hashsolo [-h] [-j MODEL_JSON_FILE] [-o OUT_DIR] [-c CLUSTERING_DATA]\n                [-p PRE_EXISTING_CLUSTERS] [-q PLOT_NAME]\n                [-n NUMBER_OF_NOISE_BARCODES]\n                data_file\n\npositional arguments:\n  data_file             h5ad file containing cell hashing counts\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -j MODEL_JSON_FILE    json file to pass optional arguments (default: None)\n  -o OUT_DIR            Output directory for results (default:\n                        hashsolo_output)\n  -c CLUSTERING_DATA    h5ad file with count transcriptional data to perform\n                        clustering on (default: None)\n  -p PRE_EXISTING_CLUSTERS\n                        column in cell_hashing_data_file.obs to specifying\n                        different cell types or clusters (default: None)\n  -q PLOT_NAME          name of plot to output (default: hashing_qc_plots.pdf)\n  -n NUMBER_OF_NOISE_BARCODES\n                        Number of barcodes to use to create noise distribution\n                        (default: None)\n```\n \nPriors is a list of the probability of the three hypotheses, negative, singlet,\nor doublet that we test when demultiplexing cell hashing data. A negative cell's barcodes\ndoesn't have enough signal to identify its sample of origin. A singlet has\nenough signal from single hashing barcode to associate the cell with ins\noriginating sample. A doublet is a cell barcode which has signal for more than one hashing barcode.\nDepending on how you processed your cell hashing matrix before hand you may\nwant to set different priors. Under the assumption that you have subset your cell\nbarcodes using typical QC on your cell by genes matrix, e.g. min UMI counts,\npercent mitochondrial reads, etc. We found the above setting of prior performed\nwell (see paper). If you have only done relatively light QC in transcriptome space\n I'd suggest an even prior, e.g. `[1./3., 1./3., 1./3.]`. \n\nOutputs:\n*  `hashsoloed.h5ad` anndata with demultiplexing information in .obs\n*  `hashing_qc_plots.png` plots of probabilites for each cell \n"
      },
      "source": "https://raw.githubusercontent.com/calico/solo/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/calico/solo/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 13
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/calico/solo/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "calico/solo"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "solo -- Doublet detection via semi-supervised deep learning"
      },
      "source": "https://raw.githubusercontent.com/calico/solo/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/calico/solo/master/release_script.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick set up",
        "parent_header": [
          "solo -- Doublet detection via semi-supervised deep learning"
        ],
        "type": "Text_excerpt",
        "value": "Run the following to clone and set up ve.\n`git clone git@github.com:calico/solo.git && cd solo && conda create -n solo python=3.12 && conda activate solo && pip install -e .`\n\nOr install via pip\n`conda create -n solo python=3.12 && conda activate solo && pip install solo-sc`\n\nIf you don't have conda follow the instructions here: https://docs.conda.io/projects/conda/en/latest/user-guide/install/\n"
      },
      "source": "https://raw.githubusercontent.com/calico/solo/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9983237036845444,
      "result": {
        "original_header": "\u2248",
        "type": "Text_excerpt",
        "value": "Warning: If you are going directly from cellranger 10x output you may want to manually inspect your data prior to running solo. \n"
      },
      "source": "https://raw.githubusercontent.com/calico/solo/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.986806063242434,
      "result": {
        "original_header": "How to demultiplex cell hashing data using HashSolo CLI",
        "type": "Text_excerpt",
        "value": "Demultiplexing takes as input an h5ad file with only hashing counts. Counts can be obtained from your fastqs by using kite. See tutorial here: https://github.com/pachterlab/kite\n```\nusage: hashsolo [-h] [-j MODEL_JSON_FILE] [-o OUT_DIR] [-c CLUSTERING_DATA]\n                [-p PRE_EXISTING_CLUSTERS] [-q PLOT_NAME]\n                [-n NUMBER_OF_NOISE_BARCODES]\n                data_file\n\npositional arguments:\n  data_file             h5ad file containing cell hashing counts\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -j MODEL_JSON_FILE    json file to pass optional arguments (default: None)\n  -o OUT_DIR            Output directory for results (default:\n                        hashsolo_output)\n  -c CLUSTERING_DATA    h5ad file with count transcriptional data to perform\n                        clustering on (default: None)\n  -p PRE_EXISTING_CLUSTERS\n                        column in cell_hashing_data_file.obs to specifying\n                        different cell types or clusters (default: None)\n  -q PLOT_NAME          name of plot to output (default: hashing_qc_plots.pdf)\n  -n NUMBER_OF_NOISE_BARCODES\n                        Number of barcodes to use to create noise distribution\n                        (default: None)\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/calico/solo/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8023862641015644,
      "result": {
        "original_header": "\u2248",
        "type": "Text_excerpt",
        "value": "```\nusage: solo [-h] -j MODEL_JSON_FILE -d DATA_PATH\n            [--set-reproducible-seed REPRODUCIBLE_SEED]\n            [--doublet-depth DOUBLET_DEPTH] [-g] [-a] [-o OUT_DIR]\n            [-r DOUBLET_RATIO] [-s SEED] [-e EXPECTED_NUMBER_OF_DOUBLETS] [-p]\n            [-recalibrate_scores] [--version] [--lr_st] [--lr_vae]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -j MODEL_JSON_FILE    json file to pass VAE parameters (default: None)\n  -d DATA_PATH          path to h5ad, loom, or 10x mtx dir cell by genes\n                        counts (default: None)\n  --set-reproducible-seed REPRODUCIBLE_SEED\n                        Reproducible seed, give an int to set seed (default:\n                        None)\n  --doublet-depth DOUBLET_DEPTH\n                        Depth multiplier for a doublet relative to the average\n                        of its constituents (default: 2.0)\n  -g                    Run on GPU (default: True)\n  -a                    output modified anndata object with solo scores Only\n                        works for anndata (default: False)\n  -o OUT_DIR\n  -r DOUBLET_RATIO      Ratio of doublets to true cells (default: 2)\n  -s SEED               Path to previous solo output directory. Seed VAE\n                        models with previously trained solo model. Directory\n                        structure is assumed to be the same as solo output\n                        directory structure. should at least have a vae.pt a\n                        pickled object of vae weights and a latent.npy an\n                        np.ndarray of the latents of your cells. (default:\n                        None)\n  -e EXPECTED_NUMBER_OF_DOUBLETS\n                        Experimentally expected number of doublets (default:\n                        None)\n  -p                    Plot outputs for solo (default: False)\n  -recalibrate_scores   Recalibrate doublet scores (not recommended anymore)\n                        (default: False)\n  --version             Get version of solo-sc (default: False)\n  --lr_st            \n                        Learning rate used for solo.train (default: 1e-3)\n  --lr_vae             \n                        Learning rate used for vae (default: 1e-3)\n                        \n``` \n"
      },
      "source": "https://raw.githubusercontent.com/calico/solo/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8650950759279172,
      "result": {
        "original_header": "How to demultiplex cell hashing data using HashSolo CLI",
        "type": "Text_excerpt",
        "value": "Demultiplexing takes as input an h5ad file with only hashing counts. Counts can be obtained from your fastqs by using kite. See tutorial here: https://github.com/pachterlab/kite\n```\nusage: hashsolo [-h] [-j MODEL_JSON_FILE] [-o OUT_DIR] [-c CLUSTERING_DATA]\n                [-p PRE_EXISTING_CLUSTERS] [-q PLOT_NAME]\n                [-n NUMBER_OF_NOISE_BARCODES]\n                data_file\n\npositional arguments:\n  data_file             h5ad file containing cell hashing counts\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -j MODEL_JSON_FILE    json file to pass optional arguments (default: None)\n  -o OUT_DIR            Output directory for results (default:\n                        hashsolo_output)\n  -c CLUSTERING_DATA    h5ad file with count transcriptional data to perform\n                        clustering on (default: None)\n  -p PRE_EXISTING_CLUSTERS\n                        column in cell_hashing_data_file.obs to specifying\n                        different cell types or clusters (default: None)\n  -q PLOT_NAME          name of plot to output (default: hashing_qc_plots.pdf)\n  -n NUMBER_OF_NOISE_BARCODES\n                        Number of barcodes to use to create noise distribution\n                        (default: None)\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/calico/solo/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8351501030532648,
      "result": {
        "original_header": "How to demultiplex cell hashing data using HashSolo in line",
        "type": "Text_excerpt",
        "value": "```\n>>> from solo import hashsolo\n>>> import anndata\n>>> cell_hashing_data = anndata.read(\"cell_hashing_counts.h5ad\")\n>>> hashsolo.hashsolo(cell_hashing_data)\n>>> cell_hashing_data.obs.head()\n                  most_likeli_hypothesis  cluster_feature  negative_hypothesis_probability  singlet_hypothesis_probability  doublet_hypothesis_probability         Classification\nindex                                                                                                                                                                            \nCCTTTCTGTCCGAACC                       2                0                     1.203673e-16                        0.000002                        0.999998                Doublet\nCTGATAGGTGACTCAT                       1                0                     1.370633e-09                        0.999920                        0.000080  BatchF-GTGTGACGTATT_x\nAGCTCTCGTTGTCTTT                       1                0                     2.369380e-13                        0.996992                        0.003008  BatchE-GAGGCTGAGCTA_x\nGTGCGGTAGCGATGAC                       1                0                     1.579405e-09                        0.999879                        0.000121  BatchB-ACATGTTACCGT_x\nAAATGCCTCTAACCGA                       1                0                     1.867626e-13                        0.999707                        0.000293  BatchB-ACATGTTACCGT_x\n>>> demultiplex.plot_qc_checks_cell_hashing(cell_hashing_data)\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/calico/solo/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/calico/solo/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2019 Calico\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/calico/solo/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "solo"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "calico"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 86486,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 91,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/calico/solo/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "njbernstein",
          "type": "User"
        },
        "date_created": "2021-06-30T18:00:29Z",
        "date_published": "2021-06-30T18:06:39Z",
        "description": "This was a large change where we moved to scvi-tools. This led to large organizational changes of the code as now most of the `solo` model logic now lives in scvi-tools. \r\n\r\nWe noticed slight performance changes with this update which can be viewed in the testdata directory. \r\n\r\nWe also no longer recalibrate the softmax scores by default any longer because with the move to scvi-tools it not longer appeared necessary.",
        "html_url": "https://github.com/calico/solo/releases/tag/1.0",
        "name": "Moved to scvi-tools",
        "release_id": 45510066,
        "tag": "1.0",
        "tarball_url": "https://api.github.com/repos/calico/solo/tarball/1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/calico/solo/releases/45510066",
        "value": "https://api.github.com/repos/calico/solo/releases/45510066",
        "zipball_url": "https://api.github.com/repos/calico/solo/zipball/1.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "njbernstein",
          "type": "User"
        },
        "date_created": "2020-07-02T16:57:07Z",
        "date_published": "2020-07-02T16:57:38Z",
        "html_url": "https://github.com/calico/solo/releases/tag/0.6",
        "name": "Solo with dense matrices",
        "release_id": 28168296,
        "tag": "0.6",
        "tarball_url": "https://api.github.com/repos/calico/solo/tarball/0.6",
        "type": "Release",
        "url": "https://api.github.com/repos/calico/solo/releases/28168296",
        "value": "https://api.github.com/repos/calico/solo/releases/28168296",
        "zipball_url": "https://api.github.com/repos/calico/solo/zipball/0.6"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "njbernstein",
          "type": "User"
        },
        "date_created": "2020-01-15T00:58:40Z",
        "date_published": "2020-01-15T00:59:28Z",
        "description": "Solo released to pypi",
        "html_url": "https://github.com/calico/solo/releases/tag/0.2",
        "name": "Solo released to pypi",
        "release_id": 22844700,
        "tag": "0.2",
        "tarball_url": "https://api.github.com/repos/calico/solo/tarball/0.2",
        "type": "Release",
        "url": "https://api.github.com/repos/calico/solo/releases/22844700",
        "value": "https://api.github.com/repos/calico/solo/releases/22844700",
        "zipball_url": "https://api.github.com/repos/calico/solo/zipball/0.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "njbernstein",
          "type": "User"
        },
        "date_created": "2020-01-14T21:09:47Z",
        "date_published": "2020-01-15T00:07:26Z",
        "html_url": "https://github.com/calico/solo/releases/tag/0.1",
        "name": "Solo released to pypi",
        "release_id": 22843997,
        "tag": "0.1",
        "tarball_url": "https://api.github.com/repos/calico/solo/tarball/0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/calico/solo/releases/22843997",
        "value": "https://api.github.com/repos/calico/solo/releases/22843997",
        "zipball_url": "https://api.github.com/repos/calico/solo/zipball/0.1"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 13:01:06",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 84
      },
      "technique": "GitHub_API"
    }
  ]
}