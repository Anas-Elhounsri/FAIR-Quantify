{
  "application_domain": [
    {
      "confidence": 0.8929967985383748,
      "result": {
        "type": "String",
        "value": "Semantic web"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/galadrielbriere/ClustOmics"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-08-25T12:56:01Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-05-28T09:28:18Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Consensus clustering applied to multi-omic disease subtyping"
      },
      "technique": "GitHub_API"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/galadrielbriere/ClustOmics/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/galadrielbriere/ClustOmics/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "galadrielbriere/ClustOmics"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Installation"
      },
      "source": "https://raw.githubusercontent.com/galadrielbriere/ClustOmics/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/galadrielbriere/ClustOmics/master/dev/get_input_clusterings/run_rMKL.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/galadrielbriere/ClustOmics/bf89187112d0ff7662e27623ae8ae4d6ef39bcae/outAll/plots/AML/wMQ_AML.AML_EXP_MIRNA_MET_NEMO_PINS_SNF_rMKL_kmeans_all.svg"
      },
      "source": "https://raw.githubusercontent.com/galadrielbriere/ClustOmics/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "1) Download and install Neo4j Desktop from https://neo4j.com/.\nFrom the application, create a new project, and a local database  in the project through \"Add - Add Local DBMS\": set the database name, a password, and the Neo4j version of the database (version tested: 4.0.6). By default, the username to connect to the database is \"neo4j\". Once the database created, click on it, go to \"Plugins\", and install \"APOC\" and \"Graph Data Science\" Neo4j libraries. \nOpen the database settings file (\"...\" track) and check if the following line is commented, if not, comment it.\n```\n#dbms.connector.bolt.listen_address=:7687\n```\n\nStart the database. Update the \"neo4j_password\" field in the Snakemake configuration file <i>config.yaml</i> according to the password you chose for the database.\n\n\n2) Install Conda (https://docs.conda.io/projects/conda/en/latest/index.html). \n\nCreate conda environment for ClustOmics from ClustOmicsCondaEnv.yml:\n\n```\n\tgit clone https://github.com/galadrielbriere/ClustOmics.git\n\tcd ClustOmics\n\tconda env create -f ClustOmicsCondaEnv.yml\n\tconda activate ClustOmics\n\tpython -m pip install markov_clustering\n\tRscript -e \"devtools::install_github('Shamir-Lab/Logrank-Inaccuracies/logrankHeinze')\"\n```\nOr install it \"by hand\":\n```\n\tgit clone https://github.com/galadrielbriere/ClustOmics.git\n\tcd ClustOmics\n\tconda create -n ClustOmics python=3.6\n \tconda activate ClustOmics\n\tconda install -c bioconda snakemake\n\tconda install numpy networkx matplotlib\n\tconda install -c conda-forge neo4j-python-driver\n\tconda install r-essentials r-devtools r-optparse r-survminer\n \tpython -m pip install markov_clustering\n \tRscript -e \"devtools::install_github('Shamir-Lab/Logrank-Inaccuracies/logrankHeinze')\"\n```\n"
      },
      "source": "https://raw.githubusercontent.com/galadrielbriere/ClustOmics/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/galadrielbriere/ClustOmics/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2020 Galadriel Briere\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/galadrielbriere/ClustOmics/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ClustOmics"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "galadrielbriere"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 108106,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 67378,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 930,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/galadrielbriere/ClustOmics/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://snakemake.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/galadrielbriere/ClustOmics/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Run ClustOmics",
        "type": "Text_excerpt",
        "value": "ClustOmics uses **Snakemake** for a quick and easy execution. See https://snakemake.readthedocs.io/en/stable/ to get started with Snakemake.\n"
      },
      "source": "https://raw.githubusercontent.com/galadrielbriere/ClustOmics/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "TLDR",
        "parent_header": [
          "Run ClustOmics"
        ],
        "type": "Text_excerpt",
        "value": "SingleToMulti scenario for AML cancer type:\n```\n\tcd ClustOmics\n\tconda activate ClustOmics\n\tmv dataAll data #or change clusterings_folder parameter to 'dataAll' in the Snakemake configuration file config.yaml\n\tsnakemake out/AML.AML_EXP_MIRNA_MET_NEMO_PINS_SNF_rMKL_kmeans_all.FuseClusterings.log --cores 1\n\tmv data dataAll\n```\nMultiToMulti scenario for COAD cancer type:\n```\n\tcd ClustOmics\n\tconda activate ClustOmics\n\tmv dataOnlyMulti data #or change clusterings_folder parameter to 'dataOnlyMulti' in the Snakemake configuration file config.yaml\n\tsnakemake out/COAD.COAD_MULTI_MCCA_NEMO_PINS_SNF_rMKL.FuseClusterings.log --cores 1\n\tmv data dataOnlyMulti\n```\n"
      },
      "source": "https://raw.githubusercontent.com/galadrielbriere/ClustOmics/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1) Data folder organisation",
        "parent_header": [
          "Run ClustOmics"
        ],
        "type": "Text_excerpt",
        "value": "The _./data_ folder contains directories for each study case. For instance, a specific folder is created for each cancer type analysed. Input clusterings and metadata file are sored in <i>./data/<subject></i>. For instance, all input data for AML cancer type are stored in <i>./data/AML</i>.\n\nEach <i>data/<subject></i> folder must contain an **object metadata file** and **input clusterings files**.\n"
      },
      "source": "https://raw.githubusercontent.com/galadrielbriere/ClustOmics/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1.1) The metadata file",
        "parent_header": [
          "Run ClustOmics",
          "1) Data folder organisation"
        ],
        "type": "Text_excerpt",
        "value": "The metadata file stores informations on the objects considered (for instance, Patients for cancer subtyping). This file is used to instanciate the graph. **All objects appearing in at least one input clustering must be described in this file.**\nThe metadata file must be named as: <i>subject_metadata.txt</i>. For instance, for AML cancer study case, patients are described in <i>./data/AML/AML_metadata.txt</i>.\nThe metadata file is tab delimited.\nIn its minimal form, the metadata file must be organised as followed:\n\n```\nmain_node\n<main_node_name>\n<node1_id>\n<node2_id>\n...\n<nodeN_id>\n```\n\nThe first line always start by \"main_node\". The second line allows you to chose the name to give your main nodes. For instance, for AML, main nodes are \"Patients\". The 3rd line and the rest of the file must contain each object ids, as they appear in input clusterings. For instance, the TCGA sample ID form AML study case.\n\nTo add information about main nodes in the graph, additional columns can be added:\n\n```\nmain_node\tproperty\tnode\tlabel\n<main_node_name>\t<property_name>\t<node_name>\t<label_name>\n<node1_id>\t<property_value>\t<node_value>\t<label_value>\n...\n```\n\nFor instance:\n\n```\nmain_node\tproperty\tnode\tlabel\tlabel\tlabel\tlabel\tlabel\nPatient\tage_at_initial_pathologic_diagnosis\tgender\tTissue\texpression\tmirna\tmethylation\tmultiomics\nTCGA.AB.2802.03\t50\tMALE\tPrimaryBloodDerivedCancer \t\tmirna\tmethylation\nTCGA.AB.2803.03\t61\tFEMALE\tPrimaryBloodDerivedCancer \texpression\tmirna\tmethylation\tmultiomics\n```\n\nFrom this metadata file, ClustOmics will create _Patient_ nodes for each provided TCGA id. Each Patient node will display a property \"age_at_initial_pathologic_diagnosis\" to indicate the age of the patient at diagnosis. Each Patient node will share a \"gender\" relationship with a \"gender\" node \"MALE\" or \"FEMALE\" to indicate the gender of the patient. Each Patient node will carry additional labels to indicate the tissue and the omic(s) they were measured for. For instance, Patient \"TCGA.AB.2802.03\" have been measured for miRNA and methylation but not for expression.\n"
      },
      "source": "https://raw.githubusercontent.com/galadrielbriere/ClustOmics/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1.2) Input clustering files",
        "parent_header": [
          "Run ClustOmics",
          "1) Data folder organisation"
        ],
        "type": "Text_excerpt",
        "value": "Input clusterings must be named as follow: <i>subject_datatype_method.clst</i>. For instance, input clustering computed with NEMO from the AML expression dataset is named <i>AML_expression_NEMO.clst</i>.\nClustering files are tab delimited and must contain a header to indicate the main node name (as set the metadata file) and the name to give to cluster nodes.\n\nFor instance:\n```\nPatient\tCluster\nTCGA.AB.2803.03\t3\nTCGA.AB.2805.03\t7\n```\n"
      },
      "source": "https://raw.githubusercontent.com/galadrielbriere/ClustOmics/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2) Snakemake Configuration file",
        "parent_header": [
          "Run ClustOmics"
        ],
        "type": "Text_excerpt",
        "value": "Fill the configuration file <i>config.yaml</i> according to the specifications indicated in it. The integration scenarios are defined in this configuration file.\n"
      },
      "source": "https://raw.githubusercontent.com/galadrielbriere/ClustOmics/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3) Run ClustOmics",
        "parent_header": [
          "Run ClustOmics"
        ],
        "type": "Text_excerpt",
        "value": "```\n\tsnakemake out/{subject}.{rel_name}.FuseClusterings.log --cores 1\n```\nOr:\n```\n\tsnakemake out/<subject>.BuildGraph.log --cores 1\n\tsnakemake out/{subject}.SupportEdges.log --cores 1\n\tsnakemake out/{subject}.{rel_name}.IntegrationEdges.log --cores 1\n\tsnakemake out/{subject}.{rel_name}.FuseClusterings.log --cores 1\n```\n\nFor instance, to compute consensus clustering for AML SingleToMulti:\n```\n\tmv dataAll data #or change clusterings_folder parameter to 'dataAll' in the Snakemake configuration file\n\tsnakemake out/AML.AML_EXP_MIRNA_MET_NEMO_PINS_SNF_rMKL_kmeans_all.FuseClusterings.log --cores 1\n```\n\nTo run ClustOmics with a user-defined number of supports (/!\\ parameter min_size_consensus will be ignored),\nwe recommend choosing the appropriate number of supports threshold by ploting wMQ evolution:\n\n```\n\tsnakemake out/plots/{subject}/wMQ_{subject}.{rel_name}.svg --cores 1\n```\n\nThis results in, for instance:\n\n![alt tag](https://raw.githubusercontent.com/galadrielbriere/ClustOmics/bf89187112d0ff7662e27623ae8ae4d6ef39bcae/outAll/plots/AML/wMQ_AML.AML_EXP_MIRNA_MET_NEMO_PINS_SNF_rMKL_kmeans_all.svg)\n\nAfter selecting the number of supports threshold to use, run:\n```\n\tsnakemake out/{subject}.{rel_name}.FuseClusterings.{nb_supports}_supports.log --cores 1\n```\n\nFor instance, on AML SingleToMulti with number of supports treshold of 10:\n```\n\tsnakemake out/AML.AML_EXP_MIRNA_MET_NEMO_PINS_SNF_rMKL_kmeans_all.FuseClusterings.10_supports.log  --cores 1\n```\n\nTo run all analysis (including Survival analysis, clinical label enrichment, ...):\n```\n\tsnakemake out/{subject}.{rel_name}.all.log --cores 1\n```\n\nFor latest command to work, you need to download raw datasets here: http://acgt.cs.tau.ac.il/multi_omic_benchmark/download.html. Files must be stored in <i>./raw_data</i>, and organised as follow:\n```\n./raw_data/\n\u251c\u2500\u2500 AML\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 exp\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 methy\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 mirna\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 survival\n\u251c\u2500\u2500 BIC\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 exp\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 methy\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 mirna\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 survival\n\u251c\u2500\u2500 clinical\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 AML\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 BIC\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 COAD\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 GBM\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 KIRC\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 LIHC\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 LUSC\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 OV\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 SARC\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 SKCM\n\u251c\u2500\u2500 Etc....\n\n```\n\nWe don't recommend using multiple cores (defined by the --cores parameter), unless when running Snakemake rules AllSurvClinMulti, AllSurvClinSingle or AllSurvClin, for which we recommend using as many cores as possible.\n"
      },
      "source": "https://raw.githubusercontent.com/galadrielbriere/ClustOmics/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "4) Visualize results in Neo4j browser",
        "parent_header": [
          "Run ClustOmics"
        ],
        "type": "Text_excerpt",
        "value": "From Neo4j Desktop, open the database with Neo4j browser (or enter 'http://localhost:7474/browser/' in your web browser).\n\nFrom the \"Settings\" track, bottom left, uncheck \"Connect results nodes\".\n\nBy clicking on the \"Database\" icon, top left, you can access all node types and relationship types stored in the database. By clicking on each node type or relationship type, you can visualize a subset of the corresponding objects.\n\nYou can also use the Cypher command box to enter your own visualization queries, using Cypher language.\n\nWhen running ClustOmics, consensus clustering is created in rule FuseClusterings. At the end of this rule, ClustOmics gives you the Cypher query you need to visualize consensus results (directly on your terminal, or in the rule log file).\n\nFor instance:\n```\nCheck the graph with the following Cypher query : \n MATCH (o:Patient:AML)-[r:FROM_MARKOVCLUST]-(c:OptimalNbSupports:AML:MarkovCluster:AML_EXP_MIRNA_MET_NEMO_PINS_SNF_rMKL_kmeans_all) RETURN o, r, c\n```\nWhen visualizing the result of this query, you can choose to color nodes or relationship according to labels of interest. Just click on the label or relationship you want to highlight (on the panel just above the graph), and select the color you want to display (on the pannel just under the graph).\n"
      },
      "source": "https://raw.githubusercontent.com/galadrielbriere/ClustOmics/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Troubleshooting",
        "parent_header": [
          "Run ClustOmics"
        ],
        "type": "Text_excerpt",
        "value": "If you get the following error:\n```\nneo4j.exceptions.DatabaseError: {code: Neo.DatabaseError.Statement.ExecutionFailed} {message: Java heap space}\n```\nGo to the database settings and increase memory size parameter ``` dbms.memory.heap.max_size```\n"
      },
      "source": "https://raw.githubusercontent.com/galadrielbriere/ClustOmics/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 13:56:43",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ]
}