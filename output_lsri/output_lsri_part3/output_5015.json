{
  "application_domain": [
    {
      "confidence": 30.15,
      "result": {
        "type": "String",
        "value": "Natural Language Processing"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/bigchem/transformer-cnn"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-08-20T12:15:22Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-13T06:21:32Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Transformer CNN for QSAR/QSPR modelling"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9657370963938844,
      "result": {
        "original_header": "Transformer-CNN",
        "type": "Text_excerpt",
        "value": "The repository contains the source code for a new Transformer-CNN method described in our paper http://arxiv.org/abs/1911.06603. First, we trained the Transformer model on SMILES canonicalization task, e.g., given an arbitrary SMILES, the model converts it to a canonical one. Second, we use the internal representation of the Transformer (the output of the encoding stack with shape (BATCH, LENGTH, EMBEDDING)) as SMILES embeddings and build upon them CharNN model (Convolution and HighWay as it is done in DeepChem). The resulting model works both in classification and regression settings. \nThe \"standalone\" folder provides the implementation of the Transformer-CNN model for prognosis without TensorFlow (depends on only NumPy and RDKit). The solubility and AMES models are available. [Layerwise Relevance Propagation method](https://link.springer.com/chapter/10.1007/978-3-030-28954-6_10) is used to infer the model's reasoning behind a particular prediction.\n \n"
      },
      "source": "https://raw.githubusercontent.com/bigchem/transformer-cnn/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9422932717773875,
      "result": {
        "original_header": "How to train a model",
        "type": "Text_excerpt",
        "value": "To train a model, one needs to create a config file like this.\n```\n[Task]\n   train_mode = True\n   model_file = model.tar\n   train_data_file = train.csv\n[Details]\n   canonize = True\n   gpu = 0\n   seed = 100666\n   n_epochs = 30\n   batch_size = 16\n```\nIf the canonize parameter is set, then all the SMILES will be worked up with RDKit. Then 10 non-canonical SMILES for each molecule will be generated (the real number of generated strings can be smaller depending on the compound). If this parameter is set to False, then the string is passed to the model as is without any treatment. The same is also valid for the prognosis step.\n \n"
      },
      "source": "https://raw.githubusercontent.com/bigchem/transformer-cnn/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9594694709859986,
      "result": {
        "original_header": "Using the standalone prognosis",
        "type": "Text_excerpt",
        "value": "The \"standalone\" folder contains scripts and models for execution without TensorFlow. Solubility regression and AMES classification models are available. To run a prognosis for a single molecule ([haloperidol](https://www.drugbank.ca/drugs/DB00502) here as an example) execute: \nIn this case, the program produces 26 random SMILES (number of non-hydrogens atoms in the molecule) starting from each atom in the original SMILES. For each SMILES a target property is predicted as well as influences of a particular atom to the overall property. The output contains: \nAnd visualization: \nFeel free to contact us if you have any suggestions or possible applications of this code. \n"
      },
      "source": "https://raw.githubusercontent.com/bigchem/transformer-cnn/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/bigchem/transformer-cnn/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 27
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/bigchem/transformer-cnn/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bigchem/transformer-cnn"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Transformer-CNN"
      },
      "source": "https://raw.githubusercontent.com/bigchem/transformer-cnn/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bigchem/transformer-cnn/master/cv5.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bigchem/transformer-cnn/master/standalone/lrp/lrp.png"
      },
      "source": "https://raw.githubusercontent.com/bigchem/transformer-cnn/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.8327446346566739,
      "result": {
        "original_header": "Using the standalone prognosis",
        "type": "Text_excerpt",
        "value": "python3 ochem.py models/solubility.pickle \"O=C(CCCN1CCC(c2ccc(Cl)cc2)(O)CC1)c1ccc(F)cc1\" \n"
      },
      "source": "https://raw.githubusercontent.com/bigchem/transformer-cnn/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.9250648034689252,
      "result": {
        "original_header": "Using the trained model",
        "type": "Text_excerpt",
        "value": "To use a model, the config file looks like:\n```\n[Task]\n   train_mode = False\n   model_file = model.tar\n   apply_data_file = predict.csv\n[Details]\n   canonize = True\n   gpu = 0\n   seed = 100666\n   n_epochs = 30\n   batch_size = 16\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/bigchem/transformer-cnn/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8705342602387408,
      "result": {
        "original_header": "Using the standalone prognosis",
        "type": "Text_excerpt",
        "value": "python3 ochem.py models/solubility.pickle \"O=C(CCCN1CCC(c2ccc(Cl)cc2)(O)CC1)c1ccc(F)cc1\" \n"
      },
      "source": "https://raw.githubusercontent.com/bigchem/transformer-cnn/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/bigchem/transformer-cnn/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "transformer-cnn"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "bigchem"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 94286,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 2341,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bigchem/transformer-cnn/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependencies",
        "type": "Text_excerpt",
        "value": "The code has been tested in Ubuntu 18.04 with the following components:\n\n1. python v.3.4.6 or higher\n2. TensorFlow v1.12\n3. rdkit v.2018.09.2\n4. molvs for tautomer enumeration\n"
      },
      "source": "https://raw.githubusercontent.com/bigchem/transformer-cnn/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 18:26:38",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 91
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "How to use",
        "type": "Text_excerpt",
        "value": "The main program, transformer-cnn.py, uses the config.cfg file to read all the parameters of a task to do. After filling the config.cfg with the appropriate information, launch the python3 transformer-cnn.py config.cfg\n"
      },
      "source": "https://raw.githubusercontent.com/bigchem/transformer-cnn/master/README.md",
      "technique": "header_analysis"
    }
  ]
}