{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "format": "bibtex",
        "type": "File_dump",
        "value": "citHeader(\"methrix can be cited as:\")\n\ncitEntry(\n   entry=\"article\",\n   title = \"Methrix: an R/Bioconductor package for systematic aggregation and analysis of bisulfite sequencing data\",\n   author = personList(as.person(\"Anand Mayakonda\"),\n                       as.person(\"Maximilian Schonung\"),\n                       as.person(\"Joschka Hey\"),\n                       as.person(\"Rajbir Nath Batra1\"),\n                       as.person(\"Clarissa Feuerstein-Akgoz\"),\n                       as.person(\"Kristin Kohler\"),\n                       as.person(\"Daniel B. Lipka\"),\n                       as.person(\"Rocio Sotillo\"),\n                       as.person(\"Christoph Plass\"),\n                       as.person(\"Pavlo Lutsik\"),\n                       as.person(\"Reka Toth\")),\n   journal = \"Bioinformatics\",\n   year = 2020,\n   doi = \"https://doi.org/10.1093/bioinformatics/btaa1048\",\n   textVersion = \"Anand Mayakonda, Maximilian Schonung, Joschka Hey1, Rajbir Nath Batra, Clarissa Feuerstein-Akgoz1, Kristin Kohler, Daniel B. Lipka, Rocio Sotillo, Christoph Plass, Pavlo Lutsik and Reka Toth. 2020. Methrix: an R/Bioconductor package for systematic aggregation and analysis of bisulfite sequencing data. Bioinformatics. https://doi.org/10.1093/bioinformatics/btaa1048\"\n)"
      },
      "source": "https://raw.githubusercontent.com/CompEpigen/methrix/master/inst/CITATION",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "Fast and efficient summarization of generic bedGraph files from Bisufite sequencing"
        ],
        "type": "Text_excerpt",
        "value": "**_Mayakonda A, Sch\u00f6nung M, Hey J, Batra RN, Feuerstein-Akgoz C, K\u00f6hler K, Lipka DB, Sotillo R, Plass C, Lutsik P, Toth R. Methrix: an R/bioconductor package for systematic aggregation and analysis of bisulfite sequencing data. Bioinformatics. 2020 Dec 21:btaa1048. doi: 10.1093/bioinformatics/btaa1048. Epub ahead of print. PMID: [33346800](https://pubmed.ncbi.nlm.nih.gov/33346800/)._**\n"
      },
      "source": "https://raw.githubusercontent.com/CompEpigen/methrix/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step-1: Extract all CpG loci from the reference genome",
        "parent_header": [
          "Fast and efficient summarization of generic bedGraph files from Bisufite sequencing",
          "Quick usage:"
        ],
        "type": "Text_excerpt",
        "value": "```r\n> hg19_cpgs = methrix::extract_CPGs(ref_genome = \"BSgenome.Hsapiens.UCSC.hg19\")\n-Extracting CpGs\n-Done. Extracted 29,891,155 CpGs from 298 contigs.\nThere were 50 or more warnings (use warnings() to see the first 50)\n```"
      },
      "source": "https://raw.githubusercontent.com/CompEpigen/methrix/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/CompEpigen/methrix"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-01-22T16:14:30Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-03T13:49:29Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "An R :package: for fast and flexible DNA methylation analysis "
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "parent_header": [
          "Fast and efficient summarization of generic bedGraph files from Bisufite sequencing"
        ],
        "type": "Text_excerpt",
        "value": "Bedgraph files generated by BS pipelines often come in various flavors. Critical downstream step requires aggregation of these files into methylation/coverage matrices. This step of data aggregation is done by `Methrix`, including many other useful downstream functions.\n"
      },
      "source": "https://raw.githubusercontent.com/CompEpigen/methrix/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9974709447470574,
      "result": {
        "original_header": "Features",
        "type": "Text_excerpt",
        "value": "* Faster summarization of generic bedGraph files with `data.table` back-end\n* Fills missing CpGs from reference genome\n* Vectorized code (faster, memory expensive) and non-vectorized code (slower, minimal memory)\n* Built upon `SummarizedExperiment` with custom methods for CpG extraction, sub-setting, and filtering\n* Easy conversion to bsseq object for downstream analysis\n* Extensive one click interactive html report generation. See [here](https://compepigen.github.io/methrix_docs/articles/raw_report.html) for an example\n* Supports serialized arrays with `HDF5Array` and `saveHDF5SummarizedExperiment`\n \n"
      },
      "source": "https://raw.githubusercontent.com/CompEpigen/methrix/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.970484433158107,
      "result": {
        "original_header": "Methrix operations",
        "type": "Text_excerpt",
        "value": "What can be done on `methrix` object? Following are the key functions\n```r\n#reading and writing:\nread_bedgraphs()    #Reads in bedgraph files into methrix\nwrite_bedgraphs()   #Writes bedGraphs from methrix object\nwrite_bigwigs()     #Writes bigWigs from methrix object\n#operations\norder_by_sd()       #Orders methrix object by SD\nregion_filter()\t    #Filters matrices by region\nmask_methrix()      #Masks lowly covered CpGs\ncoverage_filter()   #Filters methrix object based on coverage\nsubset_methrix()\t  #Subsets methrix object based on given conditions.\nremove_uncovered()\t#Removes loci that are uncovered across all samples\nremove_snps()       #Removes loci overlapping with possible SNPs\n#Visualization and QC\nmethrix_report()    #Creates a detailed interative html summary report from methrix object\nmethrix_pca()\t      #Principal Component Analysis\nplot_pca()          #Plots the result of PCA\nplot_coverage()     #Plots coverage statistics\nplot_density()      #Plots the density distribution of the beta values \nplot_violin()       #Plots the distribution of the beta values on a violin plot\nplot_stats()        #Plot descriptive statistics\nget_stats()\t        #Estimate descriptive statistics of the object\n#Other\nmethrix2bsseq()     #Convert methrix to bsseq object\n\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/CompEpigen/methrix/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Package documentation",
        "parent_header": [
          "Fast and efficient summarization of generic bedGraph files from Bisufite sequencing"
        ],
        "type": "Text_excerpt",
        "value": "* For a short and quick documentation, see the Bioconductor [vignette](https://www.bioconductor.org/packages/release/bioc/vignettes/methrix/inst/doc/methrix.html)\n\n* A exemplary complete data analysis with steps from reading in to annotation and differential methylation calling can be find in our [WGBS best practices workflow](https://compepigen.github.io/methrix_docs/articles/methrix.html).\n"
      },
      "source": "https://raw.githubusercontent.com/CompEpigen/methrix/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/CompEpigen/methrix/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 11
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/CompEpigen/methrix/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CompEpigen/methrix"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/CompEpigen/methrix/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/CompEpigen/methrix/master/inst/extdata/bdg2bw.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "http://www.bioconductor.org/shields/build/devel/bioc/methrix.svg"
      },
      "source": "https://raw.githubusercontent.com/CompEpigen/methrix/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/CompEpigen/methrix/master/vignettes/overview.png"
      },
      "source": "https://raw.githubusercontent.com/CompEpigen/methrix/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "Fast and efficient summarization of generic bedGraph files from Bisufite sequencing"
        ],
        "type": "Text_excerpt",
        "value": "```r\nif (!requireNamespace(\"BiocManager\", quietly = TRUE))\n    install.packages(\"BiocManager\")\n\n#Installing stable version from BioConductor\nBiocManager::install(\"methrix\")\n\n#Installing developmental version from GitHub\nBiocManager::install(\"CompEpigen/methrix\")\n```\n\nIdeally one should use the newest versions of R and [BioC](https://www.bioconductor.org/install/) versions. In case of the older versions (for e.g, R < 4.0), installing from BioConductor might lead to installing an older version of the package. In that case installing from GitHub might be easier since it is more merciful with regards to versions.\n"
      },
      "source": "https://raw.githubusercontent.com/CompEpigen/methrix/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/CompEpigen/methrix/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bedgraph, bioinformatics, dna-methylation"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "YEAR: 2019\nCOPYRIGHT HOLDER: CompEpigen\n"
      },
      "source": "https://raw.githubusercontent.com/CompEpigen/methrix/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/CompEpigen/methrix/master/vignettes/logo_large_hexagon.gif"
      },
      "source": "https://raw.githubusercontent.com/CompEpigen/methrix/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "methrix"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "CompEpigen"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 154460,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CSS",
        "size": 320,
        "type": "Programming_language",
        "value": "CSS"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/CompEpigen/methrix/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 12:41:15",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 28
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick usage:",
        "parent_header": [
          "Fast and efficient summarization of generic bedGraph files from Bisufite sequencing"
        ],
        "type": "Text_excerpt",
        "value": "Usage is simple and involves generating a methrix object using [read_bedgraphs()](https://compepigen.github.io/methrix_docs/reference/read_bedgraphs.html) command which can then be passed to all downstream analyses.\n\n<p align=\"center\">\n<img src=\"https://github.com/CompEpigen/methrix/blob/master/vignettes/overview.png\">\n</p>\n\nBelow is the two step procedure to import WGBS bedGraph files.\n"
      },
      "source": "https://raw.githubusercontent.com/CompEpigen/methrix/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step-2: Read in bedgraphs and generate a methrix object",
        "parent_header": [
          "Fast and efficient summarization of generic bedGraph files from Bisufite sequencing",
          "Quick usage:"
        ],
        "type": "Text_excerpt",
        "value": "The example data of the methrix package is used. \n\n```r\n#Example bedgraph files\n> bdg_files = list.files(path = system.file('extdata', package = 'methrix'), pattern = \"*bedGraph\\\\.gz$\", full.names = TRUE)\n\n> meth = methrix::read_bedgraphs(files = bdg_files, ref_cpgs = hg19_cpgs, chr_idx = 1, start_idx = 2, M_idx = 3, U_idx = 4,\n  stranded = TRUE, collapse_strands = TRUE)\n----------------------------\n-Preset:        Custom\n--Missing beta and coverage info. Estimating them from M and U values\n-CpGs raw:      29,891,155 (total reference CpGs)\n-CpGs retained: 28,217,448(reference CpGs from contigs of interest)\n-CpGs stranded: 56,434,896(reference CpGs from both strands)\n----------------------------\n-Processing:    C1.bedGraph.gz\n--CpGs missing: 56,434,219 (from known reference CpGs)\n-Processing:    C2.bedGraph.gz\n--CpGs missing: 56,434,207 (from known reference CpGs)\n-Processing:    N1.bedGraph.gz\n--CpGs missing: 56,434,194 (from known reference CpGs)\n-Processing:    N2.bedGraph.gz\n--CpGs missing: 56,434,195 (from known reference CpGs)\n-Finished in:  00:02:00 elapsed (00:02:23 cpu)\n\n> meth\nAn object of class methrix\n   n_CpGs: 28,217,448\nn_samples: 4\n    is_h5: FALSE\nReference: hg19\n```\n"
      },
      "source": "https://raw.githubusercontent.com/CompEpigen/methrix/master/README.md",
      "technique": "header_analysis"
    }
  ]
}