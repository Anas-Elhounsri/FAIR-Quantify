{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "MicroGMT: Microbial Genomics Mutation Tracker"
        ],
        "type": "Text_excerpt",
        "value": "Xing Y, Li X, Gao X and Dong Q (2020) MicroGMT: A Mutation Tracker for SARS-CoV-2 and Other Microbial Genome Sequences. Front. Microbiol. 11:1502. doi: 10.3389/fmicb.2020.01502.\n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/qunfengdong/MicroGMT"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-05-22T21:08:19Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-08-26T09:40:30Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Mutation tracker for microbial genomes"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Description",
        "parent_header": [
          "MicroGMT: Microbial Genomics Mutation Tracker"
        ],
        "type": "Text_excerpt",
        "value": "MicroGMT is a python based package, which takes either raw sequence reads or assembled genome sequence as input and compares against database sequences to identify and characterize small indels and point mutations in the microbial genoems. Although our default setting is optimized for SARS-CoV-2 virus, the package can be also applied to any other microbial genomes.\n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Extract strain/IDs from a new fasta database sequence file to make a list and a fasta file for sequences that are not in an existing summary tables",
        "parent_header": [
          "MicroGMT: Microbial Genomics Mutation Tracker",
          "Quick start"
        ],
        "type": "Text_excerpt",
        "value": "Input: new_database_sequences_file, id_list_for_existing_summary_tables\n\nOutput: new_id_list_for_sequences_in_the_new_database_sequence_file, file_containg_ids_for_sequences_not_in_existing_summary_tables, fasta_file_for_sequences_not_in_existing_summary_tables\n\nFor the last two outputs, please make sure there's no files with the same names exist in the output directory before running the command!\n\n```bash\n<path_to_MicroGMT>/Find_new_seqs.sh \\\n\t<new_database_sequences_file> <id_list_for_existing_summary_tables> \\\n\t<name_of_new_id_list_for_sequences_in_the_new_database_sequence_file> \\\n\t<name_of_file_containg_ids_for_sequences_not_in_existing_summary_tables> \\\n\t<name_of_fasta_file_for_sequences_not_in_existing_summary_tables>\n```\n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Remove strains/sequences from summary tables",
        "parent_header": [
          "MicroGMT: Microbial Genomics Mutation Tracker",
          "Quick start"
        ],
        "type": "Text_excerpt",
        "value": "Input: summary table (**Only \\<prefix>.all.form1.txt or \\<prefix>.all.form2.txt is required**), list of strain/sequence ids to be removed\n\nOutput: **All** kinds of summary tables of form1 or form 2 (depending on your input table form), with strains/sequences removed\n\nRemove strains from format 1 summary tables:\n```bash\npython <path_to_MicroGMT>/remove_from_summary_tables.py \\\n  -i <prefix>.all.form1.txt -r <remove_id_list> \\\n  -f a -d <remove_out_dir>\n```\nRemove strains from format 2 summary tables:\n```bash\npython <path_to_MicroGMT>/remove_from_summary_tables.py \\\n  -i <prefix>.all.form2.txt -r <remove_id_list> \\\n  -f b -d <remove_out_dir>\n```\n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Combine summary tables",
        "parent_header": [
          "MicroGMT: Microbial Genomics Mutation Tracker",
          "Quick start"
        ],
        "type": "Text_excerpt",
        "value": "Input: summary tables (**Only \\<prefix>.all.form1.txt or \\<prefix>.all.form2.txt is required. The input summary tables need to be in a same form**)\n\nOutput: **All** kinds of combined summary tables of form1 or form 2 (depending on your input table form)\n\nCombine format 1 summary tables:\n```bash\npython <path_to_MicroGMT>/combine_summary_tables.py \\\n  -d <combine_out_dir> -f a \\\n  -i1 <prefix_for_input_table_1>.all.form1.txt \\\n  -i2 <prefix_for_input_table_2>.all.form1.txt\n```\nCombine format 2 summary tables:\n```bash\npython <path_to_MicroGMT>/combine_summary_tables.py \\\n  -d <combine_out_dir> -f b \\\n  -i1 <prefix_for_input_table_1>.all.form2.txt \\\n  -i2 <prefix_for_input_table_2>.all.form2.txt\n```"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Extract strain/sequence IDs from summary tables",
        "parent_header": [
          "MicroGMT: Microbial Genomics Mutation Tracker",
          "Quick start"
        ],
        "type": "Text_excerpt",
        "value": "Input: a form2 summary table\n\nOutput: a strain/sequence id list for that summary table (it's also the strain/sequence id list for the form1 summary table of the same dataset)\n\n```bash\n<path_to_MicroGMT>/get_ids.sh \\\n\t<form2_summary_table> <name_of_id_list>\n```\nFor the output, please make sure there's no file with the same name exist in the output directory before running the command!\n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Mask regions on the genome for summary tables",
        "parent_header": [
          "MicroGMT: Microbial Genomics Mutation Tracker",
          "Tutorial",
          "2. Workflow for sequences of E.coli K12 strains"
        ],
        "type": "Text_excerpt",
        "value": "Input: form2 summary table (**Only \\<prefix>.all.form2.txt is required**), mask file (tab-delimited, \"chr  mask_start  mask_end\" one per line)\n\nOutput: **All** kinds of masked form2 summary tables.\n\n```bash\npython <path_to_MicroGMT>/mask_sequences.py \\\n  -i <prefix>.all.form2.txt -d <out_dir> -m <input_mask_file>\n```\n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Reformat summary tables:",
        "parent_header": [
          "MicroGMT: Microbial Genomics Mutation Tracker",
          "Quick start",
          "Downstream utilities: analysis_utilities.py"
        ],
        "type": "Text_excerpt",
        "value": "* Input: form2 summary table or custom annotated form2 summary table (input one summary table at a time)\n* Output: tab delimited file with one mutation per line (\"chr pos gene_id gene_name mutation strain_ID region\" for form2 summary table, and \"chr pos gene_id gene_name custom_annotation mutation strain_ID region\" for custom annotated form2 summary table).\n\n```bash\n# form2 summary table as input\npython <path_to_MicroGMT>/analysis_utilities.py \\\n  -i <form2_summary_table> -o <name_of_output_table> \\\n  -t a -a n\n\n# custom annotated form2 summary table as input\npython <path_to_MicroGMT>/analysis_utilities.py \\\n  -i <custom_annotated_form2_summary_table> -o <name_of_output_table> \\\n  -t a -a y\n```\n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Find all unqiue mutations from the summary table (unqiue mutations are defined by only one strain/ID has that mutation at a specific locus):",
        "parent_header": [
          "MicroGMT: Microbial Genomics Mutation Tracker",
          "Quick start",
          "Downstream utilities: analysis_utilities.py"
        ],
        "type": "Text_excerpt",
        "value": "* Input: form2 summary table or custom annotated form2 summary table (input one summary table at a time)\n* Output: tab delimited file with one mutation per line (\"strain_ID region chr pos gene_id gene_name mutation\" for form2 summary table, and \"strain_ID region chr pos gene_id gene_name custom_annotation mutation\" for custom annotated form2 summary table).\n\n```bash\n# form2 summary table as input\npython <path_to_MicroGMT>/analysis_utilities.py \\\n  -i <form2_summary_table> -o <name_of_output_table> \\\n  -t b -a n\n\n# custom annotated form2 summary table as input\npython <path_to_MicroGMT>/analysis_utilities.py \\\n  -i <custom_annotated_form2_summary_table> -o <name_of_output_table> \\\n  -t b -a y\n```\n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Extract mutation informtation for a specific strain/sequence ID from custom annotated summary tables (optional)",
        "parent_header": [
          "MicroGMT: Microbial Genomics Mutation Tracker",
          "Tutorial",
          "1. Example workflow for SARS-CoV-2 sequences"
        ],
        "type": "Text_excerpt",
        "value": "```bash\npython <path_to_MicroGMT>/sequence_ID_extractor.py \\\n  -i <custom_annotated_form2_summary_table> -o <name_of_output_file> \\\n  -id <user-supplied_strain_or_sequence_ID> -f l -a y\n```\n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9394441458558889,
      "result": {
        "original_header": "MicroGMT: Microbial Genomics Mutation Tracker",
        "type": "Text_excerpt",
        "value": "A mutation tracker for SARS-CoV-2 and other microbial genome sequences\n \n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9345646616403168,
      "result": {
        "original_header": "Important update for SARS-CoV-2:",
        "type": "Text_excerpt",
        "value": "To handle the multiple CDS and the -1 ribosomal frameshift in ORF1ab of SARS-CoV-2, attributes were added to the gene ID and gene name of ORF1ab to denote which CDS the mutation is on in the output vcfs and summary tables. \nThere are two CDS for ORF1ab gene: 1) CDS joining (266..13468,13468..21555), on which the -1 ribosomal frameshift occurs during translation, produces pp1ab; 2) CDS of (266..13483) produces pp1a. \n* For mutations occur on mature peptides produced by both pp1a and pp1ab, or by pp1a only, the gene ID and name in output vcfs and summary tables are: GU280_gp01_pp1a and ORF1ab_pp1a.\n* For mutations occur on mature peptides produced by pp1ab only, the gene ID and name in output vcfs and summary tables are: GU280_gp01_pp1ab and ORF1ab_pp1ab.\n \n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9957228806653087,
      "result": {
        "original_header": "Version 1.4 (September 2020) update",
        "type": "Text_excerpt",
        "value": "* **Work with GATK 4 instead of GATK 3.8.**\n* Moved bam file QC (generated by samtools flagstat) from log to output folder, named by sample_suffix.flagstat\n* Added -md MINIMUM_DISTANCE parameter for sequence_to_vcf.py: This is the minimum distance to buffer records to account for clipping on the 5' end of the records, used by GATK/picard to mark duplicates. You may want to set it to about twice the 99.5% percentile of the fragment insert size distribution, or set it to -1 to use either a) twice the first read's read length, or b) 100, whichever is smaller. Only works with 'fastq' option. See https://gatk.broadinstitute.org/hc/en-us/articles/360036508852-MarkDuplicatesWithMateCigar-Picard- for more details. **If you get incomplete bam file and error like \"Found a samRecordWithOrdinal with sufficiently large clipping that we may have missed including it in an early duplicate marking iteration.  Please increase the minimum distance to at least XXbp\" and/or [E::bgzf_read] Read block operation failed with error 4 after xxx of xxx bytes\", set this parameter to a larger value accordingly.**\n* Bug fixes and performance improvements\n \n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9478494166268545,
      "result": {
        "original_header": "The main functions:",
        "type": "Text_excerpt",
        "value": "* The fasta genome reference file. For SARS-CoV-2, its fasta genome reference file is located at <path_to_MicroGMT>/NC_045512_source_files/NC_045512.fa. It is downloaded from https://www.ncbi.nlm.nih.gov/nuccore/nc_045512. The accession number \".2\" is deleted from the fasta header.\n* The annotation database. For SARS-CoV-2, its annotation database is pre-built and is the default database. For user-supplied genomes, please see \"Pre-built annotation database for SARS-CoV-2 and build own annotation databases for user-supplied genomes\" for building own databases.\n* A fasta formatted database sequence file, which can contain one or multiple fasta genome assembly sequences from multiple strains (i.e. fasta genome assembly sequences downloaded from [NCBI](https://www.ncbi.nlm.nih.gov/) or [GISAID](https://www.gisaid.org/. The fasta headers should be strain/sequence IDS.). Called \"fasta assembly file\" below). Or a fastq formatted single/paired end raw sequence file  (called \"fastq raw reads file\" below). Or a fasta formatted contig sequence file from one sample (i.e. a collection of short fasta sequences from one sample, called \"fasta contig file\" below. **Caution: the contig sequence file option is not tested. Use at your own risk**).\n* Optional: A tab delimited regional file contain region information of the samples. Format: \"strain/sequence_ID\tregion(without blanks)\" \n**Note: Please don't use duplicate fasta headers and sample ID prefixes for different strains/samples. MicroGMT is not checking duplicate IDs.**\n \n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9104758810450785,
      "result": {
        "original_header": "The utility scripts:",
        "type": "Text_excerpt",
        "value": "All are optional depending on which script to use. Please see \"Quick start\" and \"Tutorial\" for more details.\n* Summary tables.\n* Fasta assembly file(s).\n* Regional file.\n* Custom annotation file.\n* Sequence mask file.\n* An id list containg the strain/sequence IDs in the summary tables. One strain/sequence ID per line. Needed for some utility scripts (please see \"Quick start\" and \"Tutorial\" sections). It is produced by sequence_to_vcf.py automatically for fasta formatted database sequence file inputs. Users can modify it by manually adding/deleting IDs from it, or use our utility scripts (see \"Quick start\" and \"Tutorial\" sections). For the pre-built summary tables for SARS-CoV-2, it is provided with the summary tables. It can also be produced by get_ids.sh.\n \n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9331036549617887,
      "result": {
        "original_header": "annotate_vcf.py:",
        "type": "Text_excerpt",
        "value": "* Vcf formatted variant calling files with variants annotated. File names end by \"anno.vcf\". Can be skipped. You may produce annotated vcfs from multiple runs, put them in a same folder, then run this step with \"-sa\" to skip annotate vcfs, and make summary tables for all the input annotated vcfs from multiple runs.\n* Tab delimited summary file produced by snpEff. File names end by \"snpEff_summary.genes.txt\". Need to provide file prefix by \"-p\".\n* Csv format snpEff summary file (optional, different than \"snpEff_summary.genes.txt\" file). File names end by \"snpEff_summary.csv\".\n* Tab delimited mutation summary tables of all vcf files in the input folder. Columns represent IDs of strains/sequences. Rows represent mutation loci. The summary tables have two formats: Format 1, one locus per line, each cell has the gene ID, gene name with mutation information for that locus; format 2, one locus per line with the mutated gene ID and name, each cell has the mutation information. Different summary files are provided for each format: all information (\"all\"), the gene ID and name the mutation locates (\"gene\", only for format 1), effect of the mutation (\"effect\"), the mutation on DNA sequence level (\"gene_mut\"), the gene ID and name the mutation locates along with the DNA level mutation (\"gene_name_mut\"only for format 1), mutation type (\"mut_type\"), CDS change (\"cds_change\"), and amino acid change (\"prot_change\"). In the cells, if the strain/sequence has no mutation at a specific loci, that cell is labelled by \"R\". If the region files is provided as input, the column headers will have both strain/sequence ID and region information, separated by \"|\". Please see the provided sample output summary tables in \"test_dataset\" folder as examples. **Note: To distinguish from the two CDS produced by ORF1ab, for SARS-CoV-2 output summary tables, if a mutation takes place in the mature peptide region produced by pp1ab only, the gene ID and name will be \"GU280_gp01_pp1ab\" and \"ORF1ab_pp1ab\"; if a mutation takes place in the mature peptide region produced by both pp1a an pp1ab, or only by pp1a, the gene ID and name will be \"GU280_gp01_pp1a\" and \"ORF1ab_pp1a\".**\n* Frequency summary tables for loci and strains/sequences, which summarizes the output summary tables. Can be skipped.\n* Log file.\n \n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9428438705163263,
      "result": {
        "original_header": "Utility scripts:",
        "type": "Text_excerpt",
        "value": "Optional outputs include the following. For more details about the outputs of each utility script, please see \"Quick start\" and \"Tutorial\". For sample outputs please look at \"test_dataset\" folder.\n* Summary tables\n* Reformatted summary tables and other useful tables produced based on summary tables\n* Regional file and fasta assembly file with selected strains/IDs\n* ID lists to extract strains/IDs from fasta assembly file and region file.\n* Log file.\n \n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9875698158035116,
      "result": {
        "original_header": "The pre-built annotation database for SARS-CoV-2",
        "type": "Text_excerpt",
        "value": "The annotation database is built by snpEff. For SARS-CoV-2, the annotation database is pre-built in <path_to_MicroGMT>/database and is the default database in variant annotaion. It is built by revised NC_045512's GenBank file downloaded from https://www.ncbi.nlm.nih.gov/nuccore/nc_045512 to handle the multiple CDS and the -1 ribosomal frameshift of ORF1ab. The version number of the genome is 2. Please see below about how this database was built. \nOther useful files for SARS-CoV-2 are stored in <path_to_MicroGMT>/NC_045512_source_files. These files are based on NCBI's fasta sequence and annotation files of NC_045512.\n \n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8474957499147107,
      "result": {
        "original_header": "Build own annotation databases for user-supplied genomes",
        "type": "Text_excerpt",
        "value": "**Caution: make sure the chromosome name in the downloaded database is the same with that in your fasta reference genome file. If they don't match, no annotation will be produced for vcf outputs and summary tables. Check if accession number is in the fasta header if they don't match.** \nIf the genome is not supported, you need to build your own database. The following steps are modified from [snpEff manual](http://snpeff.sourceforge.net/SnpEff_manual.html#databases) to create the database. Here we use SARS-CoV-2 as an example to show the process: \n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8196866561222632,
      "result": {
        "original_header": "4. Create the database:",
        "type": "Text_excerpt",
        "value": "You will also need the fasta format reference genome sequence file for running MicroGMT. For example, the SARS-CoV-2's reference genome sequence is downloaded from https://www.ncbi.nlm.nih.gov/nuccore/nc_045512. Remove the version number in fasta header: change \">NC_045512.2\" to \">NC_045512\". \n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.989434505731224,
      "result": {
        "original_header": "Other things you need to know:",
        "type": "Text_excerpt",
        "value": "* \"-\"s in input fasta sequences are interpreted as \"N\"s by MicroGMT. If they represent gaps, they should be removed from fasta sequences.\n* The coding of indels in DNA sequence and CDS sequence are slightly different for the same mutations identified by fasta formatted inputs and fastq formatted inputs. But the mutation type, effect, position on DNA and the mutation of amino acids are annotated the same. So, if you want to find unqiue indels across both fasta and fastq formatted inputs, it is suggested to transform them to a same format first.\n* For the summary tables of amino acid changes, if there's a mutation but no amino acid change, it is written as blank (\"\") in the summary table. When reformat by analysis_utilities.py, it is not included in the output table.\n* If your fasta assembly file is named by the the sequence ID or one of the sequence IDs in the fasta header, pleas do not direct your output into the same folder as the fasta assembly file. Otherwise your fasta assembly file will be deleted!\n* MicroGMT is designed for tracking indels and SNPs among closely related strains instead of detecting large-scale complex genomic rearrangements and duplications. In addition, if you supply fastq raw reads file as input, the accuracy of mutation detection can be slightly affected by unmasked repetitive regions in the reference genome due to the difficult nature of aligning short sequence reads to the reference genome. You may mask repeat regions by mask_sequences.py.\n \n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9893219579959385,
      "result": {
        "original_header": "sequence_to_vcf.py",
        "type": "Text_excerpt",
        "value": "``` bash\nusage: sequence_to_vcf.py [-h] -r REF_GENOME -i {assembly,contig,fastq} -o\n                          OUT_DIR [-fs FASTA_SEQS] [-fq1 FASTQ1] [-fq2 FASTQ2]\n                          [-fq FASTQ] [-l LOG] [-n NAME] [-kb] [-ki]\n                          [-p PRIOR] [-m MBQ] [-md MIN_DISTANCE]\n                          [-a {asm5,asm10,asm20}] [-t THREAD]\n\nSequence file(s) to vcf file(s)\n\noptional arguments:\n  -h, --help            show this help message and exit\n\nMandatory inputs:\n  -r REF_GENOME         Fasta formatted reference genome file\n  -i {assembly,contig,fastq}\n                        Type of input file\n  -o OUT_DIR            Output directory\n\nAdditional arguments for inputs:\n  -fs FASTA_SEQS        Fasta format assembly or contig file.\n  -fq1 FASTQ1           Fastq file 1. For paired-end fastq data.\n  -fq2 FASTQ2           Fastq file 2. For paired-end fastq data.\n  -fq FASTQ             Fastq file. For single-end fastq data.\n\nOptional arguments:\n  -l LOG                Name of the log file [Sequence_to_vcf.log]\n  -n NAME               Name of the input sample. Does not work with 'assembly' option. [test]\n  -kb                   Keep BAM files.\n  -ki                   Keep index files. Only works with 'fastq' option.\n  -p PRIOR              Prior for bcftools variant caller (expected substitution rate). 0 means the prior is disabled. Only works for 'assembly' or 'contig' option. [0]\n  -m MBQ                Minimum base quality for variant caller. Only works with 'fastq' option. [10]\n  -md MIN_DISTANCE      The minimum distance to buffer records to account for clipping on the 5' end of the records, used by GATK/picard. Only works with 'fastq' option. See manual for more details. [-1]\n  -a {asm5,asm10,asm20}\n                        Sequence divergence: asm5/asm10/asm20 for ~0.1/1/5 percentages. Only works with 'assembly' option. [asm5]\n  -t THREAD             Number of threads. [10]\n```\n-md MIN_DISTANCE: The minimum distance to buffer records to account for clipping on the 5' end of the records, used by GATK/picard to mark duplicates. Only works with 'fastq' option. You may want to set it to about twice the 99.5% percentile of the fragment insert size distribution, or set it to -1 to use either a) twice the first read's read length, or b) 100, whichever is smaller. See https://gatk.broadinstitute.org/hc/en-us/articles/360036508852-MarkDuplicatesWithMateCigar-Picard- for more details. **If you get incomplete bam file and error like \"Found a samRecordWithOrdinal with sufficiently large clipping that we may have missed including it in an early duplicate marking iteration. Please increase the minimum distance to at least XXbp\" and/or \"[E::bgzf_read] Read block operation failed with error 4 after xxx of xxx bytes\", set this parameter to a larger value accordingly.** [-1]\n \n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9350700063015558,
      "result": {
        "original_header": "annotate_vcf.py",
        "type": "Text_excerpt",
        "value": "``` bash\nusage: annotate_vcf.py [-h] -i IN_DIR -o OUT_DIR [-r REFERENCE]\n                       [-p TABLE_PREFIX] [-c] [-l LOG] [-f {a,b,both}]\n                       [-rg REGION_FILE] [-sa] [-eff PATH_TO_SNPEFF] [-cf]\n\nVcf file annotation\n\noptional arguments:\n  -h, --help           show this help message and exit\n\nMandatory inputs:\n  -i IN_DIR            Input directory\n  -o OUT_DIR           Output directory\n\nOptional arguments:\n  -r REFERENCE         Name of reference. [NC_045512]\n  -p TABLE_PREFIX      Prefix of summary tables for annotated vcf files. Do not include path, except for folder name(s) inside output directory!\n  -c                   Create CSV format snpEff summary files.\n  -l LOG               Name of the log file [Annotate_vcf.log]\n  -f {a,b,both}        Format of summary tables [a]\n  -rg REGION_FILE      Name of the region file (Optional)\n  -sa                  Skip vcf annotation step, just make summary tables from annotated vcf files in the input directory. The input vcf files must be MicroGMT/snpEff annotated.\n  -eff PATH_TO_SNPEFF  Absolute path to snpEff.jar. Required if annotae vcf files.\n  -cf                  Calculate frequency summaries for the summary tables.\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8369140072660405,
      "result": {
        "original_header": "combine_summary_tables.py",
        "type": "Text_excerpt",
        "value": "``` bash\nusage: combine_summary_tables.py [-h] -i1 IN_TABLE1 -i2 IN_TABLE2 -d OUT_DIR\n                                 -f {a,b} [-p OUT_PREF] [-l LOG]\n\noptional arguments:\n  -h, --help     show this help message and exit\n\nMandatory inputs:\n  -i1 IN_TABLE1  Input summary table 1\n  -i2 IN_TABLE2  Input summary table 2\n  -d OUT_DIR     Output directory\n  -f {a,b}       Format of summary tables\n\nOptional arguments:\n  -p OUT_PREF    Prefix of the output summary tables.\n                 Do not include path, except for folder name(s) inside output directory!\n  -l LOG         Name of the log file [Combine_summary_tables.log]\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9211839787810021,
      "result": {
        "original_header": "remove_from_summary_tables.py",
        "type": "Text_excerpt",
        "value": "``` bash\nusage: remove_from_summary_tables.py [-h] -i IN_TABLE -r REMOVE_LIST -d\n                                     OUT_DIR -f {a,b} [-p OUT_PREF] [-l LOG]\n\noptional arguments:\n  -h, --help      show this help message and exit\n\nMandatory inputs:\n  -i IN_TABLE     Input summary table\n  -r REMOVE_LIST  List of IDs to be removed from table\n  -d OUT_DIR      Output directory\n  -f {a,b}        Format of summary tables\n\nOptional arguments:\n  -p OUT_PREF     Prefix of the output summary tables.\n                  Do not include path, except for folder name(s) inside output directory!\n  -l LOG          Name of the log file [Remove_from_summary_tables.log]\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8663184379549742,
      "result": {
        "original_header": "analysis_utilities.py",
        "type": "Text_excerpt",
        "value": "```bash\nusage: analysis_utilities.py [-h] -i IN_TABLE -o OUT_TABLE -t {a,b} -a {y,n}\n                             [-l LOG]\n\noptional arguments:\n  -h, --help    show this help message and exit\n\nMandatory inputs:\n  -i IN_TABLE   Input summary table (format 2 table)\n  -o OUT_TABLE  Processed output table\n  -t {a,b}      Type of analysis (a: format change, b: find unique mutations)\n  -a {y,n}      The summary table include custom annotation or not? (y: yes, n: no)\n\nOptional arguments:\n  -l LOG        Directory and name of the log file [Analysis_utilities.log]\n\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/qunfengdong/MicroGMT/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/qunfengdong/MicroGMT/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "qunfengdong/MicroGMT"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MicroGMT: Microbial Genomics Mutation Tracker"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/Prepare_contigs.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/Prepare_fasta.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/Find_regiosn_for_new_seqs.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/Annotate_vcf.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/Find_new_seqs.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/Check_environment.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/Prepare_fastq.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/get_ids.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "MicroGMT: Microbial Genomics Mutation Tracker"
        ],
        "type": "Text_excerpt",
        "value": "No installation required. Simply download the repository and unpack by \"tar\".\n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9504730805349009,
      "result": {
        "original_header": "The utility scripts:",
        "type": "Text_excerpt",
        "value": "All are optional depending on which script to use. Please see \"Quick start\" and \"Tutorial\" for more details.\n* Summary tables.\n* Fasta assembly file(s).\n* Regional file.\n* Custom annotation file.\n* Sequence mask file.\n* An id list containg the strain/sequence IDs in the summary tables. One strain/sequence ID per line. Needed for some utility scripts (please see \"Quick start\" and \"Tutorial\" sections). It is produced by sequence_to_vcf.py automatically for fasta formatted database sequence file inputs. Users can modify it by manually adding/deleting IDs from it, or use our utility scripts (see \"Quick start\" and \"Tutorial\" sections). For the pre-built summary tables for SARS-CoV-2, it is provided with the summary tables. It can also be produced by get_ids.sh.\n \n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9921044530412605,
      "result": {
        "original_header": "Build own annotation databases for user-supplied genomes",
        "type": "Text_excerpt",
        "value": "For user-supplied genomes, you can find out if the genome is supported by snpEff:\n```bash\njava -jar <path_to_snpEff>/snpEff.jar databases\n```\nIf supported, you can download it by:\nBASH2*\nPlease make sure to use \"-c\" and \"-dataDir\" to direct the download to MicroGMT directory! \nThen you may use \"-r <database_name>\" in annotate_vcf.py to use the downloaded database. \nIf the genome is not supported, you need to build your own database. The following steps are modified from [snpEff manual](http://snpeff.sourceforge.net/SnpEff_manual.html#databases) to create the database. Here we use SARS-CoV-2 as an example to show the process: \n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9622203560893089,
      "result": {
        "original_header": "1. Configure the new genome in the configration file provided by MicroGMT: <path_to_MicroGMT>/snpEff.config:",
        "type": "Text_excerpt",
        "value": "Open the file:\n```bash\nvi <path_to_MicroGMT>/snpEff.config\n```\n&#160;Add your genome information into the file.\nBASH2*\n \n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9548044008246245,
      "result": {
        "original_header": "4. Create the database:",
        "type": "Text_excerpt",
        "value": "```bash\njava -jar <path_to_snpEff>/snpEff.jar \\\n\tbuild -genbank -c <path_to_MicroGMT>/snpEff.config \\\n\t-dataDir <path_to_MicroGMT>/database -v NC_045512\n``` \nPlease make sure to use \"-c\" and \"-dataDir\" to direct the download to MicroGMT directory! \nYou may also add more annotation information to create the database. Please see [snpEff's manual](http://snpeff.sourceforge.net/SnpEff_manual.html#databases) for more information on building the annotation database. \nYou will also need the fasta format reference genome sequence file for running MicroGMT. For example, the SARS-CoV-2's reference genome sequence is downloaded from https://www.ncbi.nlm.nih.gov/nuccore/nc_045512. Remove the version number in fasta header: change \">NC_045512.2\" to \">NC_045512\". \n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9573632638116327,
      "result": {
        "original_header": "Check_environment.sh",
        "type": "Text_excerpt",
        "value": "```bash\n<path_to_MicroGMT>/Check_environment.sh <path_to_snpEff>\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999958945076207,
      "result": {
        "original_header": "annotate_vcf.py",
        "type": "Text_excerpt",
        "value": "``` bash\nusage: annotate_vcf.py [-h] -i IN_DIR -o OUT_DIR [-r REFERENCE]\n                       [-p TABLE_PREFIX] [-c] [-l LOG] [-f {a,b,both}]\n                       [-rg REGION_FILE] [-sa] [-eff PATH_TO_SNPEFF] [-cf]\n\nVcf file annotation\n\noptional arguments:\n  -h, --help           show this help message and exit\n\nMandatory inputs:\n  -i IN_DIR            Input directory\n  -o OUT_DIR           Output directory\n\nOptional arguments:\n  -r REFERENCE         Name of reference. [NC_045512]\n  -p TABLE_PREFIX      Prefix of summary tables for annotated vcf files. Do not include path, except for folder name(s) inside output directory!\n  -c                   Create CSV format snpEff summary files.\n  -l LOG               Name of the log file [Annotate_vcf.log]\n  -f {a,b,both}        Format of summary tables [a]\n  -rg REGION_FILE      Name of the region file (Optional)\n  -sa                  Skip vcf annotation step, just make summary tables from annotated vcf files in the input directory. The input vcf files must be MicroGMT/snpEff annotated.\n  -eff PATH_TO_SNPEFF  Absolute path to snpEff.jar. Required if annotae vcf files.\n  -cf                  Calculate frequency summaries for the summary tables.\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9986628716599232,
      "result": {
        "original_header": "combine_summary_tables.py",
        "type": "Text_excerpt",
        "value": "``` bash\nusage: combine_summary_tables.py [-h] -i1 IN_TABLE1 -i2 IN_TABLE2 -d OUT_DIR\n                                 -f {a,b} [-p OUT_PREF] [-l LOG]\n\noptional arguments:\n  -h, --help     show this help message and exit\n\nMandatory inputs:\n  -i1 IN_TABLE1  Input summary table 1\n  -i2 IN_TABLE2  Input summary table 2\n  -d OUT_DIR     Output directory\n  -f {a,b}       Format of summary tables\n\nOptional arguments:\n  -p OUT_PREF    Prefix of the output summary tables.\n                 Do not include path, except for folder name(s) inside output directory!\n  -l LOG         Name of the log file [Combine_summary_tables.log]\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9995474851654461,
      "result": {
        "original_header": "remove_from_summary_tables.py",
        "type": "Text_excerpt",
        "value": "``` bash\nusage: remove_from_summary_tables.py [-h] -i IN_TABLE -r REMOVE_LIST -d\n                                     OUT_DIR -f {a,b} [-p OUT_PREF] [-l LOG]\n\noptional arguments:\n  -h, --help      show this help message and exit\n\nMandatory inputs:\n  -i IN_TABLE     Input summary table\n  -r REMOVE_LIST  List of IDs to be removed from table\n  -d OUT_DIR      Output directory\n  -f {a,b}        Format of summary tables\n\nOptional arguments:\n  -p OUT_PREF     Prefix of the output summary tables.\n                  Do not include path, except for folder name(s) inside output directory!\n  -l LOG          Name of the log file [Remove_from_summary_tables.log]\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9573632638116327,
      "result": {
        "original_header": "Find_new_seqs.sh",
        "type": "Text_excerpt",
        "value": "```bash\n<path_to_MicroGMT>/Find_new_seqs.sh \\\n  <new_database_sequences_file> <id_list_for_existing_summary_tables> \\\n  <name_of_new_id_list_for_sequences_in_the_new_database_sequence_file> \\\n  <name_of_file_containg_ids_for_sequences_not_in_existing_summary_tables> \\\n  <name_of_fasta_file_for_sequences_not_in_existing_summary_tables>\n```\n  \n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9573632638116327,
      "result": {
        "original_header": "Find_regiosn_for_new_seqs.sh",
        "type": "Text_excerpt",
        "value": "```bash\n<path_to_MicroGMT>/Find_regiosn_for_new_seqs.sh \\\n  <file_containg_ids_for_sequences_not_in_existing_summary_tables> <input_region_information_file> \\\n  <name_of_region_information_file_containg_ids_for_sequences_not_in_existing_summary_tables>\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9573632638116327,
      "result": {
        "original_header": "get_ids.sh",
        "type": "Text_excerpt",
        "value": "```bash\n<path_to_MicroGMT>/get_ids.sh \\\n\t<form2_summary_table> <name_of_id_list>\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9996094793781618,
      "result": {
        "original_header": "mask_sequences.py",
        "type": "Text_excerpt",
        "value": "```bash\nusage: mask_sequences.py [-h] -i IN_TABLE -m MASK -d OUT_DIR [-p OUT_PREF]\n                         [-l LOG]\n\t\t\t \noptional arguments:\n  -h, --help   show this help message and exit\n\nMandatory inputs:\n  -i IN_TABLE  Input summary table (Only \".all.form2.txt\" tables)\n  -m MASK      Input mask file\n  -d OUT_DIR   Output directory\n\nOptional arguments:\n  -p OUT_PREF  Prefix of the output annotated summary tables. Do not include path, except for folder name(s) inside output directory!\n  -l LOG       Name of the log file [Mask_sequences.log]\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999810852742138,
      "result": {
        "original_header": "add_custom_annotation.py",
        "type": "Text_excerpt",
        "value": "```bash\nusage: add_custom_annotation.py [-h] -i IN_TABLE -a CUSTOM_ANNOT -d OUT_DIR\n                                [-p OUT_PREF] [-l LOG]\n\noptional arguments:\n  -h, --help       show this help message and exit\n\nMandatory inputs:\n  -i IN_TABLE      Input summary table (Only \".all.form2.txt\" tables)\n  -a CUSTOM_ANNOT  Input custom annotation table\n  -d OUT_DIR       Output directory\n\nOptional arguments:\n  -p OUT_PREF      Prefix of the output annotated summary tables. Do not include path, except for folder name(s) inside output directory!\n  -l LOG           Name of the log file [Add_custom_annotation.log]\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9105406193506496,
      "result": {
        "original_header": "sequence_ID_extractor.py",
        "type": "Text_excerpt",
        "value": "```bash\nusage: sequence_ID_extractor.py [-h] -i IN_TABLE -o OUT_TABLE -id SEQ_ID -f\n                                {l,s} -a {y,n} [-l LOG]\n\noptional arguments:\n  -h, --help    show this help message and exit\n\nMandatory inputs:\n  -i IN_TABLE   Input summary table (format 2 table)\n  -o OUT_TABLE  Processed output table\n  -id SEQ_ID    Strain/sequence ID to extract\n  -f {l,s}      The output table format (l: long format, s: short format)\n  -a {y,n}      The summary table include custom annotation or not? (y: yes, n: no)\n\nOptional arguments:\n  -l LOG        Directory and name of the log file [ID_extraction.log]\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8279784834927966,
      "result": {
        "original_header": "1. Configure the new genome in the configration file provided by MicroGMT: <path_to_MicroGMT>/snpEff.config:",
        "type": "Text_excerpt",
        "value": "Open the file:\n```bash\nvi <path_to_MicroGMT>/snpEff.config\n```\n&#160;Add your genome information into the file.\nBASH2*\n \n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.82232221152717,
      "result": {
        "original_header": "Check_environment.sh",
        "type": "Text_excerpt",
        "value": "```bash\n<path_to_MicroGMT>/Check_environment.sh <path_to_snpEff>\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8751245285372973,
      "result": {
        "original_header": "annotate_vcf.py",
        "type": "Text_excerpt",
        "value": "``` bash\nusage: annotate_vcf.py [-h] -i IN_DIR -o OUT_DIR [-r REFERENCE]\n                       [-p TABLE_PREFIX] [-c] [-l LOG] [-f {a,b,both}]\n                       [-rg REGION_FILE] [-sa] [-eff PATH_TO_SNPEFF] [-cf]\n\nVcf file annotation\n\noptional arguments:\n  -h, --help           show this help message and exit\n\nMandatory inputs:\n  -i IN_DIR            Input directory\n  -o OUT_DIR           Output directory\n\nOptional arguments:\n  -r REFERENCE         Name of reference. [NC_045512]\n  -p TABLE_PREFIX      Prefix of summary tables for annotated vcf files. Do not include path, except for folder name(s) inside output directory!\n  -c                   Create CSV format snpEff summary files.\n  -l LOG               Name of the log file [Annotate_vcf.log]\n  -f {a,b,both}        Format of summary tables [a]\n  -rg REGION_FILE      Name of the region file (Optional)\n  -sa                  Skip vcf annotation step, just make summary tables from annotated vcf files in the input directory. The input vcf files must be MicroGMT/snpEff annotated.\n  -eff PATH_TO_SNPEFF  Absolute path to snpEff.jar. Required if annotae vcf files.\n  -cf                  Calculate frequency summaries for the summary tables.\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8908790613637105,
      "result": {
        "original_header": "combine_summary_tables.py",
        "type": "Text_excerpt",
        "value": "``` bash\nusage: combine_summary_tables.py [-h] -i1 IN_TABLE1 -i2 IN_TABLE2 -d OUT_DIR\n                                 -f {a,b} [-p OUT_PREF] [-l LOG]\n\noptional arguments:\n  -h, --help     show this help message and exit\n\nMandatory inputs:\n  -i1 IN_TABLE1  Input summary table 1\n  -i2 IN_TABLE2  Input summary table 2\n  -d OUT_DIR     Output directory\n  -f {a,b}       Format of summary tables\n\nOptional arguments:\n  -p OUT_PREF    Prefix of the output summary tables.\n                 Do not include path, except for folder name(s) inside output directory!\n  -l LOG         Name of the log file [Combine_summary_tables.log]\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8694039330397263,
      "result": {
        "original_header": "remove_from_summary_tables.py",
        "type": "Text_excerpt",
        "value": "``` bash\nusage: remove_from_summary_tables.py [-h] -i IN_TABLE -r REMOVE_LIST -d\n                                     OUT_DIR -f {a,b} [-p OUT_PREF] [-l LOG]\n\noptional arguments:\n  -h, --help      show this help message and exit\n\nMandatory inputs:\n  -i IN_TABLE     Input summary table\n  -r REMOVE_LIST  List of IDs to be removed from table\n  -d OUT_DIR      Output directory\n  -f {a,b}        Format of summary tables\n\nOptional arguments:\n  -p OUT_PREF     Prefix of the output summary tables.\n                  Do not include path, except for folder name(s) inside output directory!\n  -l LOG          Name of the log file [Remove_from_summary_tables.log]\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.82232221152717,
      "result": {
        "original_header": "Find_new_seqs.sh",
        "type": "Text_excerpt",
        "value": "```bash\n<path_to_MicroGMT>/Find_new_seqs.sh \\\n  <new_database_sequences_file> <id_list_for_existing_summary_tables> \\\n  <name_of_new_id_list_for_sequences_in_the_new_database_sequence_file> \\\n  <name_of_file_containg_ids_for_sequences_not_in_existing_summary_tables> \\\n  <name_of_fasta_file_for_sequences_not_in_existing_summary_tables>\n```\n  \n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.82232221152717,
      "result": {
        "original_header": "Find_regiosn_for_new_seqs.sh",
        "type": "Text_excerpt",
        "value": "```bash\n<path_to_MicroGMT>/Find_regiosn_for_new_seqs.sh \\\n  <file_containg_ids_for_sequences_not_in_existing_summary_tables> <input_region_information_file> \\\n  <name_of_region_information_file_containg_ids_for_sequences_not_in_existing_summary_tables>\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.82232221152717,
      "result": {
        "original_header": "get_ids.sh",
        "type": "Text_excerpt",
        "value": "```bash\n<path_to_MicroGMT>/get_ids.sh \\\n\t<form2_summary_table> <name_of_id_list>\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9295687050902065,
      "result": {
        "original_header": "mask_sequences.py",
        "type": "Text_excerpt",
        "value": "```bash\nusage: mask_sequences.py [-h] -i IN_TABLE -m MASK -d OUT_DIR [-p OUT_PREF]\n                         [-l LOG]\n\t\t\t \noptional arguments:\n  -h, --help   show this help message and exit\n\nMandatory inputs:\n  -i IN_TABLE  Input summary table (Only \".all.form2.txt\" tables)\n  -m MASK      Input mask file\n  -d OUT_DIR   Output directory\n\nOptional arguments:\n  -p OUT_PREF  Prefix of the output annotated summary tables. Do not include path, except for folder name(s) inside output directory!\n  -l LOG       Name of the log file [Mask_sequences.log]\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9134860826395335,
      "result": {
        "original_header": "add_custom_annotation.py",
        "type": "Text_excerpt",
        "value": "```bash\nusage: add_custom_annotation.py [-h] -i IN_TABLE -a CUSTOM_ANNOT -d OUT_DIR\n                                [-p OUT_PREF] [-l LOG]\n\noptional arguments:\n  -h, --help       show this help message and exit\n\nMandatory inputs:\n  -i IN_TABLE      Input summary table (Only \".all.form2.txt\" tables)\n  -a CUSTOM_ANNOT  Input custom annotation table\n  -d OUT_DIR       Output directory\n\nOptional arguments:\n  -p OUT_PREF      Prefix of the output annotated summary tables. Do not include path, except for folder name(s) inside output directory!\n  -l LOG           Name of the log file [Add_custom_annotation.log]\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8521513185557976,
      "result": {
        "original_header": "analysis_utilities.py",
        "type": "Text_excerpt",
        "value": "```bash\nusage: analysis_utilities.py [-h] -i IN_TABLE -o OUT_TABLE -t {a,b} -a {y,n}\n                             [-l LOG]\n\noptional arguments:\n  -h, --help    show this help message and exit\n\nMandatory inputs:\n  -i IN_TABLE   Input summary table (format 2 table)\n  -o OUT_TABLE  Processed output table\n  -t {a,b}      Type of analysis (a: format change, b: find unique mutations)\n  -a {y,n}      The summary table include custom annotation or not? (y: yes, n: no)\n\nOptional arguments:\n  -l LOG        Directory and name of the log file [Analysis_utilities.log]\n\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8823023400471186,
      "result": {
        "original_header": "sequence_ID_extractor.py",
        "type": "Text_excerpt",
        "value": "```bash\nusage: sequence_ID_extractor.py [-h] -i IN_TABLE -o OUT_TABLE -id SEQ_ID -f\n                                {l,s} -a {y,n} [-l LOG]\n\noptional arguments:\n  -h, --help    show this help message and exit\n\nMandatory inputs:\n  -i IN_TABLE   Input summary table (format 2 table)\n  -o OUT_TABLE  Processed output table\n  -id SEQ_ID    Strain/sequence ID to extract\n  -f {l,s}      The output table format (l: long format, s: short format)\n  -a {y,n}      The summary table include custom annotation or not? (y: yes, n: no)\n\nOptional arguments:\n  -l LOG        Directory and name of the log file [ID_extraction.log]\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/qunfengdong/MicroGMT/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MicroGMT"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "qunfengdong"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 60717,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 10030,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirements",
        "parent_header": [
          "MicroGMT: Microbial Genomics Mutation Tracker"
        ],
        "type": "Text_excerpt",
        "value": "* [Python 3](https://www.python.org/). Required python modules: argparse, os, subprocess, sys, time. Python module pandas is also required if users want to further output mutation frequency tables from summary tables.\n* [snpEff 4.3t](http://snpeff.sourceforge.net/)\n* [SAMtools 1.6 or above](http://samtools.sourceforge.net/). Should be added to your $PATH.\n* [JAVA 1.8 or above](https://www.java.com/en/)\n\n* If the inputs are fasta genome assembly sequences/contigs, you will also need:<br>\n&#160;1. [minimap2](https://github.com/lh3/minimap2). Should be added to your $PATH.<br>\n&#160;2. [BCFtools 1.6 or above](https://samtools.github.io/bcftools/). Should be added to your $PATH.\n\n* If the inputs are fastq formatted raw reads, you will also need:<br>\n&#160;1. [GATK 4](https://gatk.broadinstitute.org/hc/en-us). Should be added to your $PATH.<br>\n&#160;3. [BWA 0.7 or above](http://bio-bwa.sourceforge.net/). Should be added to your $PATH.\n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "For SART-CoV-2:",
        "parent_header": [
          "MicroGMT: Microbial Genomics Mutation Tracker",
          "Quick start",
          "Running MicroGMT for fasta formatted contig sequences"
        ],
        "type": "Text_excerpt",
        "value": "Input: fasta_assembly_file, region_file\n\nOutput: mutation annotated vcf files, mutation summary tables. See \"output\" section above for details.\n\n```bash\n# Step 1\npython <path_to_MicroGMT>/sequence_to_vcf.py \\\n  -r <path_to_MicroGMT>/NC_045512_source_files/NC_045512.fa \\\n  -i assembly -fs <fasta_assembly_file> \\\n  -o <out_dir_1>\n\n# Step 2\npython <path_to_MicroGMT>/annotate_vcf.py \\\n  -i <out_dir_1> -c -o <out_dir_2> \\\n  -rg <region_file> -f both -cf \\\n  -eff <path_to_snpEff>\n```\nYou may add \"-sa\" in step 2 to skip annotate vcf files, but only output summary tables and/or mutation frequency summaries. Then the input direcotry must contain mutation annotated vcf files by MicroGMT/snpEff. Same for user-supplied genomes and raw reads inputs.\n\nYou may remove \"-cf\" to not further output mutation frequency summaries from summary tables. That will increase speed. Same for user-supplied genomes and raw reads inputs.\n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Running MicroGMT for fasta formatted contig sequences",
        "parent_header": [
          "MicroGMT: Microbial Genomics Mutation Tracker",
          "Quick start"
        ],
        "type": "Text_excerpt",
        "value": "**Warning: This option is not tested. Use at your own risk!**\n#### For SART-CoV-2:\nInput: contig_sequences_file, region_file\n\nOutput: mutation annotated vcf files, mutation summary tables. See \"output\" section above for details.\n\n```bash\n# Step 1\npython <path_to_MicroGMT>/sequence_to_vcf.py \\\n  -r <path_to_MicroGMT>/NC_045512_source_files/NC_045512.fa \\\n  -i contig -fs <contig_sequences_file> \\\n  -o <out_dir_1>\n\n# Step 2\npython <path_to_MicroGMT>/annotate_vcf.py \\\n  -i <out_dir_1> -c -o <out_dir_2> \\\n  -rg <region_file> -f both \\\n  -eff <path_to_snpEff>\n```\n\n#### For user-supplied genomes:\nInput: contig_sequences_file, fasta_reference_sequence_file, reference_genome_database, region_file\n\nOutput: mutation annotated vcf files, mutation summary tables. See \"output\" section above for details.\n\n```bash\n# Step 1\npython <path_to_MicroGMT>/sequence_to_vcf.py \\\n  -r <fasta_reference_sequence_file> \\\n  -i contig -fs <fasta_contig_file> \\\n  -o <out_dir_1>\n\n# Step 2\npython <path_to_MicroGMT>/annotate_vcf.py \\\n  -i <out_dir_1> -c -o <out_dir_2> \\\n  -rg <region_file> -f both \\\n  -r <name_of_reference_genome_database> \\\n  -eff <path_to_snpEff>\n```\n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Run time",
        "parent_header": [
          "MicroGMT: Microbial Genomics Mutation Tracker"
        ],
        "type": "Text_excerpt",
        "value": "The total time used for the core steps for one SARS-CoV-2 sample is:\n* 4s for one sequence in the fasta assembly file\n* 14s for one fastq raw reads input with 50x depth of coverage\n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 12:38:05",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 15
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Questions and bug report",
        "parent_header": [
          "MicroGMT: Microbial Genomics Mutation Tracker"
        ],
        "type": "Text_excerpt",
        "value": "Please direct all questions and bug reports to Yue Xing at: yue.july.xing@gmail.com\n\n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "MicroGMT: Microbial Genomics Mutation Tracker"
        ],
        "type": "Text_excerpt",
        "value": "* The main function of MicroGMT contains two steps: sequence_to_vcf.py (step 1), which aligns the input file(s) to the reference genome and identify variants; and annotate_vcf.py (step 2), which annotates the variants and output summary tables. Note: annotate_vcf.py (step 2) can take in the step 1 outputs from multiple runs, as long as they are in one input folder. So you can first process all samples by step 1, and then run them all together by step 2.\n* MicroGMT also provide additional utility scripts:<br>\n&#160;1. Check_environment.sh: check running environment<br>\n&#160;2. combine_summary_tables.py: combine summary tables from different MicroGMT runs.<br>\n&#160;3. remove_from_summary_tables.py: remove unwanted strains/sequences from the summary table.<br>\n&#160;4. analysis_utilities.py: reformat the summary table for easy access with [R](https://www.r-project.org/) or other tools, or find unique mutations (unqiue mutations are defined by only one strain/sequence has that mutation at a specific locus).<br>\n&#160;5. Find_new_seqs.sh: find new strains/IDs from a fasta formatted file of assembled sequences that are not already in existing summary tables.<br>\n&#160;6. Find_regiosn_for_new_seqs.sh: extract region information from a region file for a list of strains/sequences.\n&#160;7. get_ids.sh: extract the strain/sequence IDs from a summary table.\n&#160;8. add_custom_annotation.py: add custom annotations to summary tables according to geomic coordinates of the annotation features.\n&#160;9. mask_sequences.py: mask sequences according to user-supplied geomic coordinates.\n&#160;10. sequence_ID_extractor.py: extract and summarize mutation information for specific strains/sequences.\n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick start",
        "parent_header": [
          "MicroGMT: Microbial Genomics Mutation Tracker"
        ],
        "type": "Text_excerpt",
        "value": "**A sample script is provided along with the test datasets.**\n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Check environment",
        "parent_header": [
          "MicroGMT: Microbial Genomics Mutation Tracker",
          "Quick start"
        ],
        "type": "Text_excerpt",
        "value": "```bash\n<path_to_MicroGMT>/Check_environment.sh <path_to_snpEff>\n```\nOutput will be print to the screen to let you know if any tool is not properly installed, or if the tool version is not correct.\n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "For SART-CoV-2:",
        "parent_header": [
          "MicroGMT: Microbial Genomics Mutation Tracker",
          "Quick start",
          "Running MicroGMT for fasta formatted contig sequences"
        ],
        "type": "Text_excerpt",
        "value": "Input: fasta_assembly_file, region_file\n\nOutput: mutation annotated vcf files, mutation summary tables. See \"output\" section above for details.\n\n```bash\n# Step 1\npython <path_to_MicroGMT>/sequence_to_vcf.py \\\n  -r <path_to_MicroGMT>/NC_045512_source_files/NC_045512.fa \\\n  -i assembly -fs <fasta_assembly_file> \\\n  -o <out_dir_1>\n\n# Step 2\npython <path_to_MicroGMT>/annotate_vcf.py \\\n  -i <out_dir_1> -c -o <out_dir_2> \\\n  -rg <region_file> -f both -cf \\\n  -eff <path_to_snpEff>\n```\nYou may add \"-sa\" in step 2 to skip annotate vcf files, but only output summary tables and/or mutation frequency summaries. Then the input direcotry must contain mutation annotated vcf files by MicroGMT/snpEff. Same for user-supplied genomes and raw reads inputs.\n\nYou may remove \"-cf\" to not further output mutation frequency summaries from summary tables. That will increase speed. Same for user-supplied genomes and raw reads inputs.\n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "For user-supplied genomes:",
        "parent_header": [
          "MicroGMT: Microbial Genomics Mutation Tracker",
          "Quick start",
          "Add custom annotations"
        ],
        "type": "Text_excerpt",
        "value": "Input: fasta_assembly_file, fasta_reference_sequence_file, reference_genome_database, region_file\n\nOutput: mutation annotated vcf files, mutation summary tables. See \"output\" section above for details.\n\n```bash\n# Step 1\npython <path_to_MicroGMT>/sequence_to_vcf.py \\\n  -r <fasta_reference_sequence_file> \\\n  -i assembly -fs <fasta_assembly_file> \\\n  -o <out_dir_1>\n\n# Step 2\npython <path_to_MicroGMT>/annotate_vcf.py \\\n  -i <out_dir_1> -c -o <out_dir_2> \\\n  -rg <region_file> -f both \\\n  -r <name_of_reference_genome_database> \\\n  -eff <path_to_snpEff>\n```\n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Extract regions for above strain/IDs from a big region file",
        "parent_header": [
          "MicroGMT: Microbial Genomics Mutation Tracker",
          "Quick start"
        ],
        "type": "Text_excerpt",
        "value": "Input: file_containg_ids_for_sequences_not_in_existing_summary_tables, input_region_information_file\n\nOutput: region_information_file_containg_ids_for_sequences_not_in_existing_summary_tables\n\nFor the output, please make sure there's no file with the same name exist in the output directory before running the command!\n\n```bash\n<path_to_MicroGMT>/Find_regiosn_for_new_seqs.sh \\\n\t<file_containg_ids_for_sequences_not_in_existing_summary_tables> <input_region_information_file> \\\n\t<name_of_region_information_file_containg_ids_for_sequences_not_in_existing_summary_tables>\n```\n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "For SARS-CoV-2:",
        "parent_header": [
          "MicroGMT: Microbial Genomics Mutation Tracker",
          "Quick start",
          "Add custom annotations"
        ],
        "type": "Text_excerpt",
        "value": "Input: form2 summary table (**Only \\<prefix>.all.form2.txt is required**)\n\nOutput: **All** kinds of form2 summary tables with custom annotations added as a column.\n\n```bash\npython <path_to_MicroGMT>/add_custom_annotation.py \\\n  -i <prefix>.all.form2.txt -d <out_dir> \\\n  -a <path_to_MicroGMT>/NC_045512_source_files/NC_045512_cus_anno.txt\n```\nYou may also use your own custom annotation file (tab-delimited, \"chr  feature_start  feature_end  feature_name\" one per line). The annotation file supports multiple annotation lines for one region. Different annotations will be combined by \"|\" in the output. \n\n#### For user-supplied genomes:\nInput: form2 summary table (**Only \\<prefix>.all.form2.txt is required**), custom annotation file (tab-delimited, \"chr  feature_start  feature_end  feature_name\" one per line) The annotation file supports multiple annotation lines for one region. Different annotations will be combined by \"|\" in the output. \n\nOutput: **All** kinds of form2 summary tables with custom annotations added as a column.\n\n```bash\npython <path_to_MicroGMT>/add_custom_annotation.py \\\n  -i <prefix>.all.form2.txt -d <out_dir> -a <custom_annotation_file>\n```\n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Extract mutation informtation for a specific strain/sequence ID",
        "parent_header": [
          "MicroGMT: Microbial Genomics Mutation Tracker",
          "Quick start"
        ],
        "type": "Text_excerpt",
        "value": "Input: form2 summary table or custom annotated form2 summary table (input one summary table at a time)\n\nOutput: tab delimited file with mutation informtation for a user-supplied strain/sequence ID. \n* Long format: \"ID  region  chr  pos  gene_id  gene_name  custom_annotation (if input custom annotated form2 summary table)  mutation  mutation_type\" + other strains/sequences' mutation information on the mutation loci of this strain/sequence. Short format: \"ID  region  chr  pos  gene_id  gene_name  custom_annotation (if input custom annotated form2 summary table) mutation  mutation_type\". \n* There are three kinds of mutation_types: \"Known_mutation\" (means that the mutation in your strain also appeared in other strains in your summary table), \"New_mutation\" (means that your strain has a new mutation at that locus, which doesn't appear in any other strains in your summary table. **Note** that in this situation there are mutations on the same locus in other strains of your summary table, but those mutations are not the same as the mutation in your new strain. Your mutation is NOT the only mutation at that locus), and \"Unique_mutation\" (means that your strain has a new mutation at that locus, and that locus does not have ANY OTHER mutations in any other strains in your summary table. Your mutation IS the only mutation at that locus).\n\n```bash\n# form2 summary table as input\npython <path_to_MicroGMT>/sequence_ID_extractor.py \\\n  -i <form2_summary_table> -o <name_of_output_file> \\\n  -id <user-supplied_strain_or_sequence_ID> -f <form_of_output> -a n\n\n# custom annotated form2 summary table as input\npython <path_to_MicroGMT>/sequence_ID_extractor.py \\\n  -i <custom_annotated_form2_summary_table> -o <name_of_output_file> \\\n  -id <user-supplied_strain_or_sequence_ID> -f <form_of_output> -a y\n  ```\n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3. Get genome annotations.",
        "parent_header": [
          "MicroGMT: Microbial Genomics Mutation Tracker",
          "Build own annotation databases for user-supplied genomes"
        ],
        "type": "Text_excerpt",
        "value": "Four different formats are accepted: GTF, GFF, RefSeq table from UCSC, and GenBank file. The SARS-CoV-2's annotation file we used is the full GenBank file downloaded from https://www.ncbi.nlm.nih.gov/nuccore/nc_045512. Rename it by \"genes.gbk\". Create a folder named \"NC_045512\" under <path_to_MicroGMT>/database/. Finally, put \"genes.gbk\" under <path_to_MicroGMT>/database/NC_045512. For other annotation file formats, you will also need the fasta reference genome file. Please see snpEff's manual about how to use GTF, GFF or RefSeq table from UCSC to create database. **Caution: The GenBank file of SARS-CoV-2 was modified to handle the multiple CDS and the -1 ribosomal frameshift of ORF1ab. If your genome has similar issues (i.e. one gene with multiple overlapping CDS), you need to revise your annotation file accordingly.**\n\n* Here we will illustrate how we revised the annotation file \"<path_to_MicroGMT>/database/NC_045512/genes.gbk\" downloaded from NCBI for SARS-CoV-2:\n\nThere are two CDS for ORF1ab gene: 1) CDS joining (266..13468,13468..21555), on which the -1 ribosomal frameshift occurs during translation, produces pp1ab; 2) CDS of (266..13483) produces pp1a. They are paritally overlapped. If the annotation is not revised, the mutation position on CDS and peptides will be shifted for positions after 13468 because snpEff (one software used in MicroGMT) fused the two CDS together. The DNA and amino acid changes, and the mutation loci on the genome will still be correct.\n\nThis issue is cause by that the two CDS share the same gene ID and name, so snpEff fused them together. To prevent this, for the first CDS, we added \"_pp1ab\" to its gene name and locus tag (line 86-87 in \"genes.gbk\"); for the second CDS, we added \"_pp1a\" to its gene name and locus tag (line 322-323 in \"genes.gbk\"). After building the database with revised annotation, the resulting summary tables for running SARS-CoV-2 sequences will have the following attributes: For mutations occur on mature peptides produced by both pp1a and pp1ab, or by pp1a only, the gene ID and name in output vcfs and summary tables are: GU280_gp01_pp1a and ORF1ab_pp1a. For mutations occur on mature peptides produced by pp1ab only, the gene ID and name in output vcfs and summary tables are: GU280_gp01_pp1ab and ORF1ab_pp1ab.\n\nIf you have any questions on how to build your own databases on genomes having similar issues, you are more than welcome to email me at yue.july.xing@gmail.com and I'm more than glad to help.\n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Fasta assembly file as input",
        "parent_header": [
          "MicroGMT: Microbial Genomics Mutation Tracker",
          "Tutorial",
          "2. Workflow for sequences of E.coli K12 strains"
        ],
        "type": "Text_excerpt",
        "value": "**Preprocessing**\n\nDownload the desired fasta assembly sequences and put them in one fasta file (named \"sequences.fasta\" in this example). The fasta headers should be strain/sequence IDs.\n\nCreate the regional information file. It is named \"metadata.tsv\" in this example. The formate is \"strain/sequence_ID  region\", separated by tab.\n\nIf you are using files downloaded from GISAID, follow the steps below for preprocessing: Download the fasta assembly sequences and metadata containing region information. The fasta assembly file used strain ID as the fasta header. Since the strain IDs contain \"/\", we need to substitute them with something else (\"_\" in our example). We also need to extract region information from metadata to make the region file, and substitute blanks (\" \") in the region file:\n```bash\nsed -i 's/\\//_/g' sequences.fasta\n\nawk -F \"\\t\" '{print $1\"\\t\"$6}' metadata.tsv > metadata.short.tsv\nsed -i 's/\\//_/g' metadata.short.tsv\nsed -i 's/ /_/g' metadata.short.tsv\n```\n*If using files downloaded from GISAID, you may build the summary tables once, and update it later by removing/adding strains/sequences. Detailed instructions are listed below.*\n\n**Exclude strains/IDs that are already exist in the pre-built summary tables for the new inputs (optional)**\n\nIf you have a new fasta assembly file and would like to compare with the existing summary tables to remove existing strains/IDs from it first, we provided utility scripts to do this job conveniently. **This is especially useful for excluding strains/sequences already exist in pre-built summary tables built from the big input fasta assembly file downloaded from GISAID. That is, you can build summary tables from GISAID database onece, and always add/remove strains/sequences from it.**\n\nAll you need are the new fasta assembly file (sequences.fasta from last step) and the id.list file containing all the strains/IDs from the existing summary tables, which is provided along with the pre-built summary tables. For user supplied genomes, this id.list file is also produced by sequence_to_vcf.py.\n\nMicroGMT will output a list containing all strains/IDs in the new fasta assembly file (sequences.list in this example), a list containing strains/IDs in the new fasta assembly file that are not exist in the pre-built summary tables (ids_to_add.list in this example) and a new fasta assembly file without strains/IDs in the pre-built summary tables (ids_to_add.fasta in this example).\n```bash\n<path_to_MicroGMT>/Find_new_seqs.sh \\\n\tsequences.fasta id.list \\\n\tsequences.list ids_to_add.list \\\n\tids_to_add.fasta\n```\nYou can also extract region information for these IDs from the region file (metadata.short.tsv from last step). It is not necessary, but will increase speed a little bit. You can still use the big region file (metadata.short.tsv from last step). The output region file name is ids_to_add.tsv for this example.\n```bash\n<path_to_MicroGMT>/Find_regiosn_for_new_seqs.sh \\\n\tids_to_add.list metadata.short.tsv \\\n\tids_to_add.tsv\n```\n\n**Make summary tables**\n\nUse files from last step to make summary tables:\n```bash\npython <path_to_MicroGMT>/sequence_to_vcf.py \\\n\t-r <path_to_MicroGMT>/NC_045512_source_files/NC_045512.fa \\\n\t-i assembly -fs ids_to_add.fasta \\\n\t-o <make_out_dir_1>\n\t\npython <path_to_MicroGMT>/annotate_vcf.py \\\n\t-i <make_out_dir_1> -c -o <make_out_dir_2> \\\n\t-rg ids_to_add.tsv -f both \\\n\t-eff <path_to_snpEff>\n```\nThe outputs are all the summary tables of format 1 and format 2 for ids_to_add.fasta, log files, as well as the id.list file which contains all the strain IDs in the ids_to_add.fasta file.\n\n**Remove strains/IDs from summary tables  (optional)**\n\nWe noticed that strains may be removed from the GISAID SARS-CoV-2 database. So we designed this utility script to remove unwanted strains from summary tables. You will need a list of strains/IDs that need to be removed. Here we will demostrate how to use it to remove unwanted strains from the pre-built summary tables:\n\nIf you have a list of IDs in file A (sequences.list from last step), the existing summary tables (the pre-built summary tables in this example), and you want to identify unwanted strains (that is, strains in the pre-built summary tables but not in file A), you may use the following commands. **This is especially useful for excluding strains/sequences already exist in pre-built summary tables built from the big input fasta assembly file downloaded from GISAID.**\n```bash\ncat <path_to_summary_tables>/id.list | while read line\ndo\n  if grep -q \"^${line}$\" sequences.list\n  then\n    echo \"Sequence ${line} won't be removed, skip.\"\n  else\n    echo ${line} >> remove.list\n  fi\ndone\n```\nRemove strains from format 1 summary tables:\n```bash\npython <path_to_MicroGMT>/remove_from_summary_tables.py \\\n\t-i <path_to_summary_tables>/all0520.all.form1.txt \\\n\t-r remove.list -p removed -l removed_a \\\n\t-f a -d <remove_out_dir>\n```\nRemove strains from format 2 summary tables:\n```bash\npython <path_to_MicroGMT>/remove_from_summary_tables.py \\\n\t-i <path_to_summary_tables>/all0520.all.form2.txt \\\n\t-r remove.list -p removed -l removed_b \\\n\t-f b -d <remove_out_dir>\n```\n\n**Combine summary tables  (optional)**\n\nWe will demonstrate how to combine the summary tables from \"Make summary tables\" and \"Remove strains/IDs from summary tables\" sessions above. **This is especially useful for adding strains/sequences to pre-built summary tables built from the big input fasta assembly file downloaded from GISAID.**\n\nCombine format 1 summary tables:\n```bash\npython <path_to_MicroGMT>/combine_summary_tables.py \\\n\t-d <combine_out_dir> -f a -p combined -l combined_a \\\n\t-i1 <remove_out_dir>/removed.all.form1.txt \\\n\t-i2 <make_out_dir_2>/out_summary.all.form1.txt\n```\nCombine format 2 summary tables:\n```bash\npython <path_to_MicroGMT>/combine_summary_tables.py \\\n\t-d <combine_out_dir> -f b -p combined -l combined_b \\\n\t-i1 <remove_out_dir>/removed.all.form2.txt \\\n\t-i2 <make_out_dir_2>/out_summary.all.form2.txt\n```\n\n**Make a new strain/ID list for use next time (optional)**\n\nWe will demostrate an optional step of making a new strain/ID list for use next time (final.list in this example). This list contains all strain/IDs in the final output summary tables. Users can use it as the input list file for removing or adding strains/IDs to the new summary tables in the future.\n\nPlease make sure there is no file named \"final.list\" in your directory before we start.\n```bash\ncat id.list ids_to_add.list > tmp.list\ncat tmp.list | while read line\ndo\n  if grep -q \"^${line}$\" remove.list\n  then\n    echo \"Sequence ${line} is removed.\"\n  else\n    echo ${line} >> final.list\n  fi\ndone\nrm -f tmp.list\n```\n\nAlternatively, you may just use get_ids.sh:\n```bash\n<path_to_MicroGMT>/get_ids.sh \\\n\tout_summary.all.form2.txt final.list\n```\n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Fastq raw reads files as input",
        "parent_header": [
          "MicroGMT: Microbial Genomics Mutation Tracker",
          "Tutorial",
          "2. Workflow for sequences of E.coli K12 strains"
        ],
        "type": "Text_excerpt",
        "value": "Here we produce summary tables for the simulated fastq raw reads files from 5 strains. The prefix for the fastq files are in the file \"ids_for_5_strains.list\". The IDs in the summary tables are the prefix for the fastq files in this example.\n```bash\ncat ids_for_5_strains.list | while read line\ndo\n  python <path_to_MicroGMT>/sequence_to_vcf.py \\\n  -r <path_to_MicroGMT>/NC_045512_source_files/NC_045512.fa \\\n  -i fastq -fq1 <dir_to_fqfiles>/${line}_1.fq -fq2 <dir_to_fqfiles>/${line}_2.fq \\\n  -o <out_dir_1> \\\n  -l ${line}.log -n ${line} -ki\ndone\n\t\npython <path_to_MicroGMT>/annotate_vcf.py \\\n  -i <out_dir_1> -c -o <out_dir_2> \\\n  -rg 5_strains_region_file.tsv -f both \\\n  -eff <path_to_snpEff>\n```\n\nYou may combine the summary tables produced from both the fasta assembly file and the fastq raw reads files.\n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Add custom annotations (optional)",
        "parent_header": [
          "MicroGMT: Microbial Genomics Mutation Tracker",
          "Tutorial",
          "1. Example workflow for SARS-CoV-2 sequences"
        ],
        "type": "Text_excerpt",
        "value": "For SARS-CoV-2, a custom annotation file is provided at <path_to_MicroGMT>/NC_045512_source_files/NC_045512_cus_anno.txt. It contains mature peptide and stem loop information of SARS-CoV-2.\n\n```bash\npython <path_to_MicroGMT>/add_custom_annotation.py \\\n  -i <prefix>.all.form2.txt -d <out_dir> \\\n  -a <path_to_MicroGMT>/NC_045512_source_files/NC_045512_cus_anno.txt\n```\n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Downstream utilities (optional)",
        "parent_header": [
          "MicroGMT: Microbial Genomics Mutation Tracker",
          "Tutorial",
          "1. Example workflow for SARS-CoV-2 sequences"
        ],
        "type": "Text_excerpt",
        "value": "Reformat custom annotated summary tables:\n```bash\npython <path_to_MicroGMT>/analysis_utilities.py \\\n  -i <custom_annotated_form2_summary_table> -o <name_of_output_table> \\\n  -t a -a y\n```\nFind all unqiue mutations in custom annotated summary tables (unqiue mutations are defined by only one strain/ID has that mutation at a specific locus):\n```bash\npython <path_to_MicroGMT>/analysis_utilities.py \\\n  -i <custom_annotated_form2_summary_table> -o <name_of_output_table> \\\n  -t b -a y\n```\n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Test dataset",
        "parent_header": [
          "MicroGMT: Microbial Genomics Mutation Tracker",
          "Tutorial",
          "1. Example workflow for SARS-CoV-2 sequences"
        ],
        "type": "Text_excerpt",
        "value": "If you want to try on a small test dataset first, please use the provided test datasets. Simply unzip it to use. It contains database sequences and simulated raw read sequnces of 5 randomly selected strains from NCBI database. For fasta assembly sequences, start from \"Make summary tables\". The formatting steps in \"Preprocessing\" section is already done. \n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Build the annotation database",
        "parent_header": [
          "MicroGMT: Microbial Genomics Mutation Tracker",
          "Tutorial",
          "2. Workflow for sequences of E.coli K12 strains"
        ],
        "type": "Text_excerpt",
        "value": "Here we illustrate how to build a new database for E.coli K12 strains by the Genbank file of the reference sequence.\n* Download the full Genbank file of E.coli K12 reference NC_000913 at https://www.ncbi.nlm.nih.gov/nuccore/NC_000913.3/.\n* Rename it by \"genes.gbk\".\n* Create a new directory with the name of reference under <path_to_MicroGMT>/database/: here we create a directory named \"NC_000913\" under <path_to_MicroGMT>/database/.\n* Put \"genes.gbk\" in <path_to_MicroGMT>/database/NC_000913.\n* Open \"snpEff.config\" under <path_to_MicroGMT> and add the following. Note: do NOT open \"snpEff.config\" under the snpEff directory!\n```bash\n# E.coli_k12 genome, version NC_000913.3\nNC_000913.genome : E.coli_k12\n````\n* Run the following command to build the database:\n```bash\njava -jar <path_to_snpEff>/snpEff.jar build -genbank -c <path_to_MicroGMT>/snpEff.config \\\n-dataDir <path_to_MicroGMT>/database -v NC_000913\n```\nYou will also need the fasta formatted reference sequence file. It is downloaded from https://www.ncbi.nlm.nih.gov/nuccore/NC_000913.3/ as well. **Important: Your fasta reference sequence file should not contain version number in the header line.** Delete the version number in header line: change \">NC_000913.3\" to \">NC_000913\"!\n\n#### Fasta assembly file as input\nThe input fasta assembly test file contains 3 E.coli fasta sequences downloaded from NCBI. We just illustrate the core steps here.\n```bash\n# Step 1\npython <path_to_MicroGMT>/sequence_to_vcf.py \\\n  -r <fasta_reference_sequence_file> \\\n  -i assembly -fs <fasta_assembly_file> \\\n  -o <out_dir1>\n\n# Step 2\npython <path_to_MicroGMT>/annotate_vcf.py \\\n  -i <out_dir1> -c -p <output_prefix> -r NC_000913 \\\n  -o <out_dir2> -f both -eff <path_to_snpEff>\n\n# Find unique mutations\npython <path_to_MicroGMT>/analysis_utilities.py \\\n  -i <out_dir2>/<output_prefix>.all.form2.txt \\\n  -o <output_table_name> -t b\n```\n\n#### Fastq raw reads files as input\nYou may use the fasta sequence of an E.coli K12 strain to simulate fastq raw read sequences and use them as test data. Example using [ART-illumia](https://www.niehs.nih.gov/research/resources/software/biostatistics/art/index.cfm) for simulation is shown here. It is using HiSeq2500, paired-end, read length of 150 bps, fragment size of 300 bps with standard deviation of 20 bps, fold coverage 0f 50x, and the base quality between 18 to 38.\n```bash\n./art_illumina -i <fasta_sequence_of_E.coli_K12_strain> \\\n\t-ss HS25 -p -l 150 -f 50 --mflen 300 -s 20 -na \\\n\t-qL 18 -qU 38 \\\n\t-o <prefix_of_fastq_raw_reads_file>\n```\n\nThe core MicroGMT steps are listed here:\n```bash\n# Step 1\npython <path_to_MicroGMT>/sequence_to_vcf.py \\\n  -r <fasta_reference_sequence_file> -i fastq -fq1 <fastq_raw_reads_R1_file> \\\n  -fq2 <fastq_raw_reads_R2_file> -o <out_dir_1> -ki\n\n# Step 2\npython <path_to_MicroGMT>/annotate_vcf.py \\\n  -i <out_dir_1> -c -p <output_prefix> \\\n  -o <out_dir_2> \\\n  -f both -r NC_000913 \\\n  -eff <path_to_snpEff>\n\n# Find unique mutations\npython <path_to_MicroGMT>/analysis_utilities.py \\\n  -i <out_dir2>/<output_prefix>.all.form2.txt \\\n  -o <output_table_name> -t b\n```\n\n#### Mask regions on the genome for summary tables\nFor example, mask repeat regions.\n```bash\npython <path_to_MicroGMT>/mask_sequences.py \\\n  -i <prefix>.all.form2.txt -d <out_dir> -m <input_mask_file>\n```\n"
      },
      "source": "https://raw.githubusercontent.com/qunfengdong/MicroGMT/master/README.md",
      "technique": "header_analysis"
    }
  ]
}