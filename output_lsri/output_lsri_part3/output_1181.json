{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/biocorecrg/ExOrthist"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-08-01T10:51:11Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-07-31T15:15:07Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ExOrthist: a pipeline to extract exon orthologies at any evolutionary distance."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.949881531177808,
      "result": {
        "original_header": "ExOrthist pipeline",
        "type": "Text_excerpt",
        "value": "ExOrthist is a Nextflow based pipeline to infer exon orthology groups at all evolutionary distances. As a crucial innovation, ExOrthist sequentially evaluates three features when inferring exon homologous relationships: conservation of up/downstream intron positions and phases, conservation of the exon sequence, and conservation of the up/downstream exon sequences. ExOrthist has three modules:   \n* `main` module: to infer pairwise exon homologies and multi-species exon orthogroups.  \n* `exint_plotter` module: to visualize conservation in exon-intron structure between homologous genes.   \n* `compare_exon_sets` module: to assess conservation of alternative splicing patterns. \n\nTable of contents\n-------\n* [Requirements](#requirements)  \n* [Installation](#installation)  \n* [ExOrthist main module](#exorthist-main-module)  \n  + [Running ExOrthist main.nf](#running-exorthist-mainnf)\n    - [Test run](#test-run)\n  + [Inputs](#inputs)\n  + [Outputs](#outputs)\n  + [Algorithm](#algorithm)  \n    - [A. Input generation](#a-input-generation)  \n    - [B. Pairwise alignments and feature extraction](#b-pairwise-alignments-and-feature-extraction) \n    - [C. Scoring and best matches selection](#c-scoring-and-best-matches-selection) \n      * [Addition of manually curated exon orthology pairs](#addition-of-manually-curated-exon-orthology-pairs)\n    - [D. Exon clustering](#d-exon-clustering)\n      * [Exon clusters statistics](#exon-clusters-statistics)\n* [ExOrthist exint_plotter module](#exorthist-exint_plotter-module)  \n  + [Running ExOrthist exint_plotter.nf](#running-exorthist-exint_plotternf)  \n    - [Test run](#test-run-1)\n  + [Inputs](#inputs-1)\n  + [Output](#output)\n* [ExOrthist compare_exon_sets module](#exorthist-compare_exon_sets-module)  \n  + [Running compare_exon_sets for a single exon set](#running-compare_exon_sets-for-a-single-exon-set)\n  + [Running compare_exon_sets for two exon sets](#running-compare_exon_sets-for-two-exon-sets) \n* [Nextflow](https://www.nextflow.io/) version 20.04.1\n* A linux container engine (either [Docker](https://www.docker.com/) or [Singularity](https://sylabs.io/guides/3.1/user-guide/cli/singularity_apps.html). NB: singularity version >= 3.2.1 is required)   \nExOrthist will take care of downloading the required docker image from DockerHub and eventually convert it into a singularity one.   \nExOrthist main module\n------------\nExOrthist main module infers exon homologous pairs and exon orthogroups within the gene orthogroups provided as input (e.g. generated by [Orthofinder](https://github.com/davidemms/OrthoFinder), [Broccoli](https://github.com/rderelle/Broccoli) or similar tools) for all the species for which annotation (GTF) and genomic (fasta) files are provided. In order to fine-tune the orthology calls, evolutionary distance ranges between each pair of species (short, medium long) also need to be specified [see [Algorithm](#algorithm) for a detailed explanation of the `main.nf` logic]. In order to help the users reduce the computational burden of their own runs, we are sharing pre-computed pairwise protein alignments between some common model organisms, which can be integrated by new ExOrthist main runs. [[see below](#facultative-inputs)] \n* **run info file**: file containing the stringency parameters for each evolutionary distance range used for the `main.nf` run, together with the considered evolutionary distances for each species pair. Eventual warnings about problematic cases (e.g. genes included in the orthology but without annotated exons in the GTF) are also printed out here.  \n* **gene_cluster_file.gz**: the **--cluster** gene cluster file [[see Inputs](#inputs)] is copied and gzipped in the output directory. This is necessary to run the `exint_plotter` and `compare_exon_sets` modules without external dependencies.  \n* **filtered\\_best\\_scored\\_EX\\_matches\\_by\\_targetgene.tab**: it contains the best gene-wise exon matches for ALL species pairs which respect the filtering criteria. The exons involved in these matches are considered orthologs. \n* **filtered\\_best\\_scored\\_EX\\_matches\\_by\\_targetgene-NoOverlap.tab**: it contains the same information as filtered_best_scored_EX_matches_by_targetgene.tab, but exclusively for a representative exon in each group of overlapping exons (i.e. different versions of the same exon). The representative exon is the one with the higher number of matches across species.  \n* **overlapping_EXs_by_species.tab**: it contains the correspondence between each exon and the relative group of overlapping exons for all species. The last column reports the total number of matches for that exon in all the other species.  \n* **EX\\_clusters\\_Info.tab.gz**: exon orthogroups with all the graph information used to compute the Membership Score.  \n* **EX\\_clusters.tab**: exon orthogroups reporting only the most essential information.  \n* **unclustered\\_EXs.txt**: exons excluded from the final orthogroups by the clustering algorithm.   \n* **\\${species}\\_ref_proteins.txt**: geneID and proteinID of reference proteins.  \n* **\\${species}.exint**: fasta files by protein isoform. The header reports the aminoacidic positions corresponding to exon boundaries (i.e. intron positions).  \n* **\\${species}\\_protein_ids_exons_pos.txt**: exon genomic and aminoacidic coordinates by protein isoform.  \n* **\\${species}\\_protein_ids_intron_pos_CDS.txt**: In-CDS intron genomic coordinates by protein isoform (In-CDS = introns within coding sequence).     \n* **\\${species}\\_overlap_CDS_exons.txt**: overlapping groups of CDS exons by gene.  \n* **\\${species}\\_overlap_CDS_introns.txt**: overlapping groups of In-CDS introns by gene (In-CDS = introns within coding sequence).  \n* **\\${species}\\_multex_introns.tab**: number of transcripts in which each exon is included.  \n* **\\${species}\\_annot\\_exons_prot_ids.txt**: proteinID and geneID of all genes with annotated exons.  \n* **\\${species}\\_annot_fake.gtf.gz**: merge of the original GTF (annotated exons) and a facultative \u201cfake\u201d GTF where entries for provided not-annotated exons are added [[see Facultative inputs](#facultative-inputs)].   \nExOrthist creates a folder in the output directory for each species pair, containing the following files:  \n[**NB**: in all cases, both species1 and species2 are considered as query and target in turn.]  \n**output_main/\\${species_pair}/:**   \n* **EXINT_aln.gz**: all query isoforms vs target isoforms protein alignments.  \n* **all_PROT_aln_features.txt**: information regarding the protein alignments of all query isoforms vs all target isoforms.   \n* **all_EX_aln_features.txt**: information regarding the best match of all query exons in each target isoform.    \n* **all_INT_aln_features.txt**: information regarding intron conservation for all query introns in each target isoform.    \n* **all_PROT_EX_INT_aln_features_\\${species_pair}.txt**: integration of the previous information. Each line corresponds to a query exon-target isoform match from the all_EX_aln_features.txt file, integrated with information regarding the conservation of the up/downstream introns and up/downstream exons (from all_EX_aln_features.txt and all_INT_aln_features.txt, respectively).  \n* **all_scored_EX_matches.txt**: it contains all the exon matches previously identified, where the information regarding exon sequence similarity, intron conservation and sequence similarity of the up/downstream exons have been converted in the relative scoring system.  \n* **best_scored_EX_matches_by_targetgene.txt**: it contains the best match of each query exon between all the isoforms of a target gene, selected based on the highest global score.  \n* **FakeTranscripts-${species}-vB.gtf**: GTF file where a fake transcript for each of the not-annotated exons is introduced. ExOrthist first maps the upstream and downstream exons (which must be provided in the input) to the annotated transcripts. When both exons exactly match the same transcript, this becomes the template of the fake transcript to which the non-annotated exon is added; otherwise, ExOrthist uses partial matches of the upstream or downstream exon to identify the template transcript. ExOrthist prioritizes fake transcripts where both the matching upstream and downstream exons are coding exons.   \n* **LOG_FakeTranscripts-${species}-vB.tab**: it contains info of the mapping of non-annotated exons to the relative fake transcript.  \nExOrthist provides the possibility to subset the exon orthology files based on reclustering information. This step is performed when a file with orthologous pairs from all species pairwise combinations is provided with the **--orthopairs argument** [[see Facultative inputs](#facultative-inputs)]. In that case, an extra \"reclustering\"\" folder is saved to the output folder directory, with the following files:  \n**output_main/reclustering/:**   \n* **reclustered_genes_${species_pair}.tab**: orthogroups reclustered according to species pairwise orthologs.  \n* **reclustered_exons_${species_pair}.tab**: exon orthologous relationships within the reclustered gene orthogroups for each species pair.   \nExOrthist infers exon orthology groups within gene orthogroups (or clusters) provided as input (e.g. generated by [Orthofinder](https://github.com/davidemms/OrthoFinder), [Broccoli](https://github.com/rderelle/Broccoli) or similar tools) for all the species for which annotation (GTF) and genomic (fasta) files are provided [[see Inputs](#inputs) for details].    \nExOrthist starts by creating files with annotation information for all the considered species [[see Algorithm, section A](#a-input-generation)]. It next works by species pairs (species1-species2) and within gene orthogroups, generating **Intron Position Aware (IPA)** protein alignments for all isoforms in species1 vs all isoforms in species2. Considering species1 as query and species 2 as target (and vice versa), ExOrthist extracts **alignment features** at the protein, exon and intron level [[see Algorithm, section B](#b-pairwise-alignments-and-feature-extraction)]. For each query exon, the best exon match in each target isoform is selected based on sequence similarity.   \nAll extracted features are translated into partial scores used to infer **pairwise exon homologous relationships**. In particular, ExOrthist considers five partial scores reflecting the conservation of different features of the exon-intron context: (1, 2) conservation of the immediately upstream and downstream intron positions and phases, (3) conservation of the query exon sequence and (4, 5) conservation of the immediately upstream and downstream exon sequences. Only the exon matches for which all features are above the specified conservation cutoffs will be selected as potential exon homologs. Importantly, ExOrthist sequentially evaluates the conservation of these features (1-2, 3, 4-5). Pairs of exons whose upstream and downstream intron positions and phases are not conserved will not be considered orthologs, independently of their sequence conservation. As an optional feature, ExOrthist allows to set different conservation cut-offs for short, medium and long evolutionary distances [[see Inputs](#inputs)]. \n\nThe sum of all partial scores gives a global score ranging from 0 to 1 and representing the overall goodness of a match. ExOrthist uses the global score to select the best exon match in a target gene for each query exon, specifically among the exon matches passing all the previous filters. The selected query exon-target gene best matches are considered as pairwise exon homologs. While the ExOrthist logic requires a query exon to match a unique exon in the target gene, each target-gene exon can potentially be matched by more query exons in the same gene. This setting captures cases of in-tandem exon duplication while preserving the information about which duplicated exon is more similar to the ancestral one [[see Algorithm, section C](#c-scoring-and-best-matches-selection)]. \n\nFinally, the selected exon homologous matches for all species pairs are joined and translated in a directed graph, from which **exon orthogroups** (clusters) are inferred. ExOrthist computes a Membership Score (MS) for each exon in its relative exon cluster based on graph properties. Best reciprocal matches (i.e. a query exon is the best match of its own target exon) are taken into account in the MS computation. [[see Algorithm, section D](#d-clustering)].   \nAt the end of a run, ExOrthist returns two files with complete and filtered exon clusters information, together with relevant intermediate files generated in each step. \n### A. Input generation   \nExOrthist first checks that all the necessary input files (both genome and GTF for each species) and information (e.g. evo distances for all species pairs) are provided. It then generates files with annotation information for each considered species, which will be the input of all species pairwise comparisons. [[see Outputs](#outputs)] \n### B. Pairwise alignments and feature extraction   \nFor each species pair and gene orthogroup, ExOrthist executes the following steps.  \nIt first generates Intron Position Aware (IPA) pairwise protein alignments between all isoforms of species1 and species2. These alignments are divided into chunks of **--alignmentnum** [[see Inputs](#inputs)], which will be processed in parallel. Considering species1 as query and species2 as target (and vice versa), ExOrthist parses the IPA alignments to derive:  \n* **Protein alignment features**: percentage of identity, species-wise similarity and gaps between the two proteins. These values are used to assign a global score to the protein alignment. Alignments are not considered for further processing if their sequence similarity does not reach **prot_sim**. The prot_sim value can be customized for different evolutionary ranges through the --long_dist, -medium_dist and --short_dist arguments [[see Inputs](#inputs)].  \n* **Exon alignment features**: for each query exon, it selects one exon match in each target isoform. Among other data, ExOrthist reports the species-wise sequence similarity for all the matched exon pairs. This information will be later used to assign a score to each pair and to evaluate pairwise exon homology relationships [[see Algorithm, section C](#c-scoring-and-best-matches-selection)]. In case of a query exon matching multiple target exons in the same isoform each covering \u226515% of the query exon sequence, each exon pair is specifically realigned and the best match is selected based on sequence similarity. \n* **Intron alignment features**: ExOrthist tries to match each query intron with a target intron in the IPA alignment. Depending on the local protein sequence similarity, the width of the searching window around the query intron changes:   \n  If a target intron is not found within the searching window, conservation of the query intron is set to zero; If a match is found and the phases of the two introns are equal, intron conservation is rated 10; if the phases of the two introns are different, intron conservation is rated -10. In case the two phases are not perfectly aligned, the number of positions by which they are separated in the alignment is subtracted to the intron conservation (i.e. the maximum intron conservation is equal to 10). The intron conservation is later translated to a score used to evaluate pairwise exon homologous relationships [[see Algorithm, section C](#c-scoring-and-best-matches-selection)].   \nExOrthist performs the alignments and the realignments in a parallelized way, to later join all the best isoform-wise matches for a given species pair. If the output of a previous ExOrthist run is provided with the **--prevaln** flag, the alignment and realignment steps are skipped for all the query and target isoforms which have already been aligned [[see Facultative inputs](#facultative-inputs)]. Pre-computed alignments between some common model organisms can also be downloaded from [here](#facultative-inputs).    \n### C. Scoring and best matches selection\nExOrthist keeps executing the processes separately for each species pair. In here, it first filters the exon matches (at the target isoform level) based on the conservation of different features of the exon-intron context. It then selects the best match (at the target gene level) for each query exon among the filtered isoform-level matches. The filter is based on 5 partial scores derived from the protein, exon and intron alignment features relative to each exon pair [[see Algorithm, section B](#b-pairwise-alignments-and-feature-extraction)]:   \nThese partial scores for internal exons are then summed up to generate a global score ranging [0,1]. In the case of first or last exons, for which scores (2) and (5) or (1) and (4) do not exist, respectively, the global score is divided by 0.6 to make it range [0,1]. The best pairwise IPA alignment for a pair of exons can be automatically retrieved using the script `retrieve_IPA_aln.pl`.  \nFor each species pair, different filtering criteria will be applied based on the evolutionary distance specified in the **--evodists** file argument and the relative parameters (int_num, exsim, exlen) defined in the **--long_dist**, **--medium_dist** and **--short_dist** arguments [[see Inputs](#inputs)].  \nThe up/downstream intron conservation, the exon sequence conservation and the up/downstream exons conservation are sequentially evaluated in the filtering.   \n* Scores **(1)** and/or **(2)** are required to be positive in all the gene-wise best matches (i.e. the intron phases need to be conserved, even if not necessarily in the same position). The number of introns whose phase conservation is required is defined by **int\\_num** for each evolutionary range. If the intron phase(s) are conserved, sequence conservation is evaluated. \n* **(3)** is required to be >= ex_sim*0.2    \n* **(4)** and **(5)** are required to be >= ex_sim*0.15   \n* Extra filter: the length ratio between two matched exons (shortest/longest) should not exceed **ex\\_len**.   \nIn the end, among these pre-filtered matches, the match with the highest global score is selected (and considered as an homologous match) for each query exon and target gene. While the ExOrthist logic requires a query exon to match a unique target exon, each target exon can potentially be matched by more query exons. Overlapping query exons (i.e. alternative forms of the same exon) might be present in the pool of filtered matches. In order to univocally derived homologous relationships for each exon, ExOrthist selects the form with the highest number of matches (among all target genes) as representative of its overlap group. In case *bone fide* exon matches are provided with the **--bonafide_pairs** option, these matches are given priority over all the other matches inferred by ExOrthist (see next section).    \n#### Addition of manually curated exon orthology pairs   \nExOrthist also allows the addition of *bona fide* homology pairs, which will be directly integrated in the exon orthogroups inference. Such exons can be specified with the **--bonafide_pairs** flag [[see Inputs](#inputs)].   \nTo help generating a list with high confidence relationships across short evolutionary distances, ExOrthist includes a `get_liftovers.pl` script that extracts exon matches in a target species using the liftOver tool. This scripts needs annotation files (GTF) of the two considered species, the gene orthogroups file, and a [UCSC over.chain file](http://hgdownload.soe.ucsc.edu/downloads.html#liftover) to derive genome-wide exon pairs; alternatively, a list of exons from the query species can be provided. \n### D. Exon clustering \nAfter deriving exon homologous relationships between each pair of species, ExOrthist works on the combined orthopair information to infer the exon orthogroups. For each gene orthogroup, ExOrthist builds a directed graph (through the R igraph package **igraph**) with exons as nodes and their pairwise homology relationships represented as edges. In case of a best reciprocal match between homologous exons, two directed edges will be drawn between the correspondent nodes. ExOrthist then applies the R igraph edge-betweenness algorithm to select the optimal graph topology, with communities highly intra-connected and lowly inter-connected. Although the directionality of the graph is not considered by the edge- betweenness algorithm, the reciprocality of the matches is represented by the number of edges. The exon communities identified in the optimal topology correspond to the multi-species exon orthogroups returned by the pipeline. For each exon, ExOrthist also computes a Membership Score (MS), which reflects its degree of similarity to all the exons belonging to the same orthogroup (OG). The MS is defined as follows: \n* **IN\\_degree**: number of exon matches from the other exons in the orthogroup (i.e. the considered exon is target).  \n* **OUT\\_degree**: number of exon matches to the other exons in the orthogroup (i.e. the considered exon is query).   \n* **N\\_reciprocals**: number of reciprocal matches (i.e. query exon is a match of target exon and vice versa).  \n* **TOT\\_exons\\_in\\_OG**: number of exons in the exon orthogroup.  \n* **SPECIES\\_exons\\_in\\_OG**: number of exons from the same species present in the exon orthogroup.  \n* **TOT\\_genes\\_in\\_OG**: total number of genes in the original gene orthogroup.  \n* **SPECIES\\_genes\\_in\\_exOG**: number of genes from the same species which contribute with exons to the exon orthogroup.   \n\nThe number of gene orthogroups to be processed within a unique nextflow job can be specified by the **--orthogroupnum** argument [[see Inputs](#inputs)].  \nExOrthist provides the possibility to subset the exon orthology files based on reclustering information. This step is performed when a file with gene orthologous pairs from all species pairwise combinations is provided with the **--orthopairs argument** [[see Inputs](#inputs)]. In that case, an extra *reclustering* folder is saved to the output directory [[see Facultative outputs](#facultative-outputs)]   \n#### Exon clusters statistics \nExOrthist includes a script (`get_cluster_stats.pl`) to calculate some basic statistics on the generated exon clusters (orthogroups; OGs). This script only requires the output folder of `main.nf` as input. It consists of three related tables: a) the number of CDS exons from each species and the percent of those present in the final OGs (i.e. with at least one homolog); b) different types of OGs depending on the homology relationships (1:1, etc); and c) for those OGs in which at least one species is missing an homolog, the number of cases missed per species. Example for a genome-wide run between hg38, mm10 and bosTau9: \n```\nperl ~/ExOrthist/bin/GetStatsExonsClusters.pl --main_output hg38_mm10_bosTau9-test/\n\nSummary statistics of exon orthogroups (OGs)\t\t\t\t\nSpecies\tTotal CDS exons\tExons in geneOGs\tExons in OGs\t% recovered\nbosTau9\t198432\t186534\t170678\t91.50%\nhg38\t208106\t192725\t174243\t90.41%\nmm10\t205956\t188058\t173892\t92.47%\n\t\t\t\t\nExon OG type\t\tNumber\t% from total OGs\t\t\nTotal exon OGs\t\t177949\t100%\t\t\nOGs 1:1\t\t\t148255\t83.31%\t\t\nOGs 2:2\t\t\t303\t0.17%\t\t\nOGs >=3 exons/species\t715\t0.40%\t\t\nOGs >=4 exons/species\t280\t0.16%\t\t\nOGs missing species\t25832\t14.52%\t\t\n\t\t\t\t\nMissing species\t\tNumber\t% from missing\t\t\nbosTau9\t\t\t10585\t40.98%\t\t\nhg38\t\t\t7104\t27.50%\t\t\nmm10\t\t\t8143\t31.52%\t\t\n```\n \n#### Retrieve IPA alignments\nExOrthist also offers the `retrieve_IPA_aln.pl` script to facilitate the retrieval and visualization of the best protein alignment between a pair of exons of interest. The script only requires the output folder of a `main.nf` run, the geneIDs of the query/target genes and the exon coordinates of the query/target exons. See the script help for further details on how to run it.    \nThe `exint plotter` module allows to visualize conservation/changes in the exon-intron structure between a provided query gene and its homologs (in other species) starting from the output of ExOrthist main module. `exint_plotter.nf` is composed by (1) a few processes calling python scripts which build the necessary input files and (2) a process calling an R script generating the plot. \n### Plot structure  \nHomologous genes are plotted on parallel horizontal axis. Exons are illustrated as gray rectangles. The query gene is plotted on top of the others, with all its exons represented with the sequential genomic order and relative exon length. Exons in the target genes are vertically aligned to their homologous exon in the query species.  \nThe following plot is the one returned by the `exint_plotter.nf` test run:   \n* **Not-annotated** exons (given as facultative input to main.nf, **--extraexons** argument, [[see Facultative inputs](#facultative-inputs)]) are represented as white boxes.  \n* When **more target exons** are homologs of the same query exon, they are represented by a single rectangle. The total number of target exons is reported in the rectangle.  \n* When target exons are **not orthologs** of any query exons, they are represented as smaller rectangles in the relative genomic position (i.e. directly downstream of the closest exon with an homolog in the query gene). The total number of target exons is reported in the rectangle.   \n* A dashed border surrounds target exons not detected as homologs of any query exons but still presenting an exon **best-hit** within the query gene. This allows to highlight exons which did not respect the conservation filters applied in the main.nf run, but present a certain degree of similarity with at least one query exon.  \n* **First** and **last** exons in at least one isoform are represented by symmetric triangles.  \n* Exons in the query gene taken from the **--relevant_exs** argument [[see Inputs](#inputs-1)] (and their homologs) are highlighted with different colors.  \n* **Phases** of the upstream and downstream introns are represented with asterisks of different colors.  \n* The length of the respecive CDS portion (in nucleotides) is reported on top of each query gene exon.   \nExOrthist contains a module to perform evolutionary comparisons of sets of exons (e.g. regulated exons) between pairs of species. There are two main types of analyses: providing an exon set for a query species or an exon set for both species. In the first case, it will report a series of conservation statistics at the genomic level in the target species. In the second case, it will report statistics at the genomic level, but it will also assess the overlap between the two sets (i.e. regulatory conservation).  \nThe module relies on a single perl script, `compare_exon_sets.pl` which takes as arguments the two species identifiers (as used in `main.nf`), one or two lists of exons of interest, and the main output folder for `main.nf`. Alternatively to the latter, individual arguments can be used to provide specific gene or exon orthogroup files and CDS exons. \nThe input query exon list(s) must contain gene ID, exon coordinate and, optionally, a third column with regulatory information. There are three types of regulatory information that can be provided, using the option **--dPSI_info**: (a) **none**, no information provided in the third column (all exons in the list are considered REGULATED); (b) **qual_call**, qualitative information of the regulation (valid values: UP, DOWN, REGULATED, NO_CHANGE, NO_COVERAGE (=NA or missing)); (c) **dPSI**: a numeric value from -100 to 100 corresponding to a change in inclusion levels (PSI) between two conditions. For **dPSI**, a delta PSI cut-off for an exon to be considered as UP or DOWN regulated should be provided using the option **--min_dPSI**. Finally, if **--dPSI_info** is not provided, `compare_exon_sets.pl` will automatically detect the type of regulatory information. \nWhen a single set of exons is provided, `compare_exon_sets.pl` will assess the conservation of each exon from the query species (sp1) in the genome of the target species (sp2). This conservation is referred to as [Genome-conservation](https://onlinelibrary.wiley.com/doi/abs/10.1002/bies.080092) and will be assessed at two levels: (i) gene-level: whether or not the exon is in a gene with an ortholog in the target species; and (ii) exon-level: whether or not the exon has an ortholog in the target species (i.e. the target species has an exon in the same exon orthogroup). Example output text of the summary statistics:\n```\n- Gene-level stats (mm10 => dm6):\t\t\nGenes with mm10 exons in the exon lists\t\t\t\t664\t\nGenes with mm10 exons with gene orthologs in dm6\t\t355\t53.46%\n\t\t\n- Exon-level stats (mm10 => dm6):\t\t\nExons from mm10 in exon list\t\t\t\t\t827\t\nExons from mm10 with gene orthologs in dm6\t\t\t453\t54.78%\nExons from mm10 with exon orthologs in dm6 (G-conserved)\t43\t5.20%\n    Only genes with orthologs in dm6\t\t\t\t\t9.49%\n\n```\n \nWhen two sets of exons are provided, one for each compared species, both will be used as target and query (sp1 <=> sp2). Therefore, for each set of exons, `compare_exon_sets.pl` will assess the Genome-conservation at the gene and exon levels, and the [Regulatory-conservation](https://onlinelibrary.wiley.com/doi/abs/10.1002/bies.080092) at the exon level. In particular, a Regulatory-conserved (R-conserved) exon is a Genome-conserved (G-conserved) exon whose ortholog is also regulated (i.e. the exon orthogroup of the regulated query exon contains at least one regulated target exon).   \nMoreover, for all regulated exons in both species that fall in orthologous genes, `compare_exon_sets.pl` will perform a pairwise comparison to define whether the pair of exons are: (i) R-conserved; (ii) best exon matches (even if they do not fulfill all the conditions required, see [XXXX]()); (iii) non-orthologous, when it can be confidently determined that the two exons fall in different regions of the proteins; or (iv) unclear, when neither of this can be determine confidently. The different scenarios and sub-scenarios are summarized in the following figure: \n<br /> \n`compare_exon_sets.pl` run on two exon sets by default provides two kind of outputs: **(1)** the summary statistics, which are printed to standard output and **(2)** a graphical output, saved in a file named **Compare_exons_summary-sp1-sp2.pdf** in the working directory. Moreover, the flag **--print_out** allows to generate two extra files containing the output of the pairwise comparison: **OrthoGenes_with_reg_exons-sp1-sp2.tab** and **Conserved_exons-sp1-sp2.tab**, which contain the information about each exon as well as the result of the exon orthology test.   \n**(1)** Example output text of the summary statistics:\n```\n- Gene-level stats:\n   - mm10 => dm6\nGenes with mm10 exons in the exon list\t664\nGenes with mm10 exons with gene orthologs in dm6\t355\t53.46%\nGenes with mm10 exons with gene orthologs in dm6 with regulated exons\t50\t7.53%\n\n   - dm6 => mm10\nGenes with dm6 exon in the exon list\t276\nGenes with dm6 exons with gene orthologs in mm10\t196\t71.01%\nGenes with dm6 exons with gene orthologs in mm10 with regulated exons\t41\t14.86%\n\n\n- Exon-level stats:\n   - mm10 => dm6\nExons from mm10 in exon list\t827\nExons from mm10 with gene orthologs in dm6\t453\t54.78%\nExons from mm10 with exon orthologs in dm6 (G-conserved)\t43\t5.20%\n    Out of genes with orthologs\t\t9.49%\nExons from mm10 with regulated exon orthologs in dm6 (R-conserved)\t4\t0.48%\n    Out of genes with orthologs\t\t0.88% \n    Percent of R-conserved / G-conserved exons in mm10\t\t9.30%\nExons from mm10 with gene orthologs with regulated exons in dm6\t80\t9.67%\n    Exon orthologous\t4\t5.00%\n    Best hit exon\t8\t10.00%\n    Unclear case\t7\t8.75%\n    Not conserved\t61\t76.25%\n\n   - dm6 => mm10\nExons from dm6 in exon list\t407\nExons from dm6 with gene orthologs in mm10\t312\t76.66%\nExons from dm6 with exon orthologs in mm10 (G-conserved)\t73\t17.94%\n    Out of genes with orthologs\t\t23.40%\nExons from dm6 with regulated exon orthologs in mm10 (R-conserved)\t4\t0.98%\n    Out of genes with orthologs\t\t1.28% \n    Percent of R-conserved / G-conserved exons in dm6\t\t5.48%\nExons from dm6 with gene orthologs with regulated exons in mm10\t77\t18.92%\n    Exon orthologous\t4\t5.19%\n    Best hit exon\t6\t7.79%\n    Unclear case\t6\t7.79%\n    Not conserved\t61\t79.22%\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/biocorecrg/ExOrthist/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/biocorecrg/ExOrthist/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/biocorecrg/ExOrthist/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "biocorecrg/ExOrthist"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ExOrthist pipeline"
      },
      "source": "https://raw.githubusercontent.com/biocorecrg/ExOrthist/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/biocorecrg/ExOrthist/master/docker/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/biocorecrg/ExOrthist/master/docker/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/biocorecrg/ExOrthist/master/terraform/batch/run.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/biocorecrg/exon_intron_orthology_pipeline/master/docs/ExOrthist_overview.png"
      },
      "source": "https://raw.githubusercontent.com/biocorecrg/ExOrthist/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/biocorecrg/exon_intron_orthology_pipeline/master/docs/Exint_plotter_example.png"
      },
      "source": "https://raw.githubusercontent.com/biocorecrg/ExOrthist/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/biocorecrg/exon_intron_orthology_pipeline/master/docs/Compare_exon_sets_A-01.png"
      },
      "source": "https://raw.githubusercontent.com/biocorecrg/ExOrthist/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/biocorecrg/exon_intron_orthology_pipeline/master/docs/Compare_exon_sets_B-01.png"
      },
      "source": "https://raw.githubusercontent.com/biocorecrg/ExOrthist/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/biocorecrg/exon_intron_orthology_pipeline/master/docs/Compare_exon_sets_C-01.png"
      },
      "source": "https://raw.githubusercontent.com/biocorecrg/ExOrthist/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9674980398937302,
      "result": {
        "original_header": "ExOrthist pipeline",
        "type": "Text_excerpt",
        "value": "<figure>\n  <img align=\"middle\" src=\"https://github.com/biocorecrg/exon_intron_orthology_pipeline/blob/master/docs/Exorthist_logo.png\" width=270 height=400 />\n  <figcaption>Original logo by Queralt Tolosa</figcaption>\n<figure> \n<figure>\n  <img align=\"middle\" src=\"https://github.com/biocorecrg/exon_intron_orthology_pipeline/blob/master/docs/ExOrthist_overview.png\" width=500 height=500 />\n<figure> \nRequirements\n------------ \nExOrthist requires the following software: \n* [Nextflow](https://www.nextflow.io/) version 20.04.1\n* A linux container engine (either [Docker](https://www.docker.com/) or [Singularity](https://sylabs.io/guides/3.1/user-guide/cli/singularity_apps.html). NB: singularity version >= 3.2.1 is required)   \nInstallation\n------------ \nInstall Nextflow (version 19.10.0):\n```bash\ncurl -s https://get.nextflow.io | bash\n```\n \nClone the ExOrthist repository:  \n```bash\ngit clone https://github.com/biocorecrg/ExOrthist.git\n``` \nInstall Docker: \n* Docker: https://docs.docker.com/install/ (version 10.03 or later is required).\n* Singularity: https://sylabs.io/guides/2.6/user-guide/quick_start.html#quick-installation-steps (version 3.2.1 or later is required). \nThe pipeline can be launched in this way:\n```bash\nNXF_VER=20.04.1 nextflow run main.nf [-with-singularity | -with-docker] -bg > log.txt   \n```\n  \nIf the pipeline crashes at any step, it can be re-launched using the -resume option (- not --):\n```bash\nNXF_VER=20.04.1 nextflow run main.nf -bg -resume > log.txt\n``` \n#### Test run    \nThe ExOrthist repository includes a folder named **test** containing all the input files necessary for a test run. The relative configuration files (`nextflow.config` and `params.config`) are also provided, and can be used as templates for customized runs.   \nThe test run will extract the exon orthology for 37 gene orthogroups shared between hg38 (*human*), mm10 (*mouse*) and bosTau9 (*cow*) selected from a [Broccoli](https://github.com/rderelle/Broccoli) run. In order to familiarize yourself with ExOrthist main output, simply run the following code from the ExOrthist-master directory:  \n```bash\nNXF_VER=20.04.1 nextflow run main.nf [-with-docker | -with-singularity] > test_log.txt  \n```\n \n#### params.config file \nFor the pipeline to run, a `params.config` file with the following format has to be present in the working directory. A template of the `params.config` file is provided together with the pipeline.\n```\nparams {\n    cluster        = \"$baseDir/test/hg38_mm10_bosTau9.tab\"\n    genomes        = \"$baseDir/test/GENOMES/*_gDNA.fasta.gz\"\n    annotations    = \"$baseDir/test/GTF/*_annot.gtf.gz\"\n    alignmentnum   = 1000\n    orthogroupnum  = 500\n    extraexons     = \"\"\n    bonafide_pairs = \"\"\n    orthopairs     = \"\"\n    evodists       = \"$baseDir/test/evodists.txt\" \n    long_dist      = \"2,0.10,0.40,0.15\"\n    medium_dist    = \"2,0.30,0.60,0.20\"\n    short_dist     = \"2,0.50,0.60,0.25\"\n    prevaln        = \"\"\n    output         = \"$baseDir/output_test\"\n    email          = \"yourmail@yourdomain\"\n}\n```\nAlternatively, the arguments in the `params.config` can be specified as independent command line flags. The command line-provided values overwrite the ones defined in the `params.config` file.   \nExOrthist provides the possibility to subset the exon orthology files based on reclustering information. This step is performed when a file with orthologous pairs from all species pairwise combinations is provided with the **--orthopairs argument** [[see Facultative inputs](#facultative-inputs)]. In that case, an extra \"reclustering\"\" folder is saved to the output folder directory, with the following files:  \n**output_main/reclustering/:**   \nRunning ExOrthist exint_plotter.nf\n------------\n```bash\nnextflow exint_plotter.nf [-with-docker | -with-singularity] -bg > exint_plotter_log.txt\n```\n**NB**: the pipeline will by default run with the -with-singularity option. In order to run it with the -with-docker option, please set `singularity.enabled = false` in the nextflow.config file (default: `singularity.enabled = true`).  \nInputs: \n------------\n### params.config file\nFor the pipeline to run, a params.config file with the following format has to be present in the working directory.  \nA template of the params.config file is provided together with the pipeline.\n```\nparams {\n    geneID          = \"ENSG00000159055\"\n    output_main     = \"$baseDir/../output_test\"\n    output          = \"$baseDir/output_exint\"\n    relevant_exs    = \"chr21:32274830-32274896\"\n    ordered_species = \"hg38,mm10,bosTau9\"\n    isoformID       = \"ENSP00000290130\"\n    sub_orthologs   = \"\"\n}\n```\nAlternatively, the arguments in the params.config can be specified as independent command line flags. The command line-provided values overwrite the ones defined in the params.config file.   \n<img align=\"middle\" src=\"https://github.com/biocorecrg/exon_intron_orthology_pipeline/blob/master/docs/Exint_plotter_example.png\" /> \n<img align=\"middle\" src=\"https://github.com/biocorecrg/exon_intron_orthology_pipeline/blob/master/docs/Compare_exon_sets_A-01.png\" width=700 height=550 /> \n<img align=\"middle\" src=\"https://github.com/biocorecrg/exon_intron_orthology_pipeline/blob/master/docs/Compare_exon_sets_B-01.png\" /> \n<img align=\"middle\" src=\"https://github.com/biocorecrg/exon_intron_orthology_pipeline/blob/master/docs/Compare_exon_sets_C-01.png\" /> \n"
      },
      "source": "https://raw.githubusercontent.com/biocorecrg/ExOrthist/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8557866171194991,
      "result": {
        "original_header": "ExOrthist pipeline",
        "type": "Text_excerpt",
        "value": "    \n### Running ExOrthist main.nf \n#### Test run    \n#### params.config file \nFor the pipeline to run, a `params.config` file with the following format has to be present in the working directory. A template of the `params.config` file is provided together with the pipeline.\n```\nparams {\n    cluster        = \"$baseDir/test/hg38_mm10_bosTau9.tab\"\n    genomes        = \"$baseDir/test/GENOMES/*_gDNA.fasta.gz\"\n    annotations    = \"$baseDir/test/GTF/*_annot.gtf.gz\"\n    alignmentnum   = 1000\n    orthogroupnum  = 500\n    extraexons     = \"\"\n    bonafide_pairs = \"\"\n    orthopairs     = \"\"\n    evodists       = \"$baseDir/test/evodists.txt\" \n    long_dist      = \"2,0.10,0.40,0.15\"\n    medium_dist    = \"2,0.30,0.60,0.20\"\n    short_dist     = \"2,0.50,0.60,0.25\"\n    prevaln        = \"\"\n    output         = \"$baseDir/output_test\"\n    email          = \"yourmail@yourdomain\"\n}\n```\nAlternatively, the arguments in the `params.config` can be specified as independent command line flags. The command line-provided values overwrite the ones defined in the `params.config` file.   \n**--output:** output folder destination.   \nInputs: \n------------\n### params.config file\nFor the pipeline to run, a params.config file with the following format has to be present in the working directory.  \nA template of the params.config file is provided together with the pipeline.\n```\nparams {\n    geneID          = \"ENSG00000159055\"\n    output_main     = \"$baseDir/../output_test\"\n    output          = \"$baseDir/output_exint\"\n    relevant_exs    = \"chr21:32274830-32274896\"\n    ordered_species = \"hg38,mm10,bosTau9\"\n    isoformID       = \"ENSP00000290130\"\n    sub_orthologs   = \"\"\n}\n```\nAlternatively, the arguments in the params.config can be specified as independent command line flags. The command line-provided values overwrite the ones defined in the params.config file.   \n"
      },
      "source": "https://raw.githubusercontent.com/biocorecrg/ExOrthist/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/biocorecrg/ExOrthist/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2020 ExOrthist authors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/biocorecrg/ExOrthist/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/biocorecrg/exon_intron_orthology_pipeline/master/docs/Exorthist_logo.png"
      },
      "source": "https://raw.githubusercontent.com/biocorecrg/ExOrthist/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ExOrthist"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "biocorecrg"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 51025,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Nextflow",
        "size": 35155,
        "type": "Programming_language",
        "value": "Nextflow"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "HCL",
        "size": 10568,
        "type": "Programming_language",
        "value": "HCL"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 1587,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 147,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/biocorecrg/ExOrthist/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://bedtools.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/biocorecrg/ExOrthist/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "fedemantica",
          "type": "User"
        },
        "date_created": "2021-07-21T14:46:44Z",
        "date_published": "2021-07-21T14:56:06Z",
        "description": "Enable connection with Zenodo.",
        "html_url": "https://github.com/biocorecrg/ExOrthist/releases/tag/v1.0.2",
        "name": "v.1.0.2",
        "release_id": 46549051,
        "tag": "v1.0.2",
        "tarball_url": "https://api.github.com/repos/biocorecrg/ExOrthist/tarball/v1.0.2",
        "type": "Release",
        "url": "https://api.github.com/repos/biocorecrg/ExOrthist/releases/46549051",
        "value": "https://api.github.com/repos/biocorecrg/ExOrthist/releases/46549051",
        "zipball_url": "https://api.github.com/repos/biocorecrg/ExOrthist/zipball/v1.0.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "fedemantica",
          "type": "User"
        },
        "date_created": "2021-07-21T13:38:41Z",
        "date_published": "2021-07-21T13:55:54Z",
        "description": "### Minor changes:\r\n\r\n- Remove singularity as a default running mode: the user has now to specify the _-with-singularity_ or _-with-docker_ options to run either ExOrthist `main.nf` or `exint_plotter.nf` [Files modified: nextflow.config, exint_plotter/nextflow.config].\r\n- Fix version for AWS runs [Script modified: A0].\r\n- Small adaptations for Docker runs [Files modified: nextflow.config, main.nf].\r\n- Change colors in `compare_exons_sets.pl` graphical output [Script modified: plot_compare_exon_sets.R].\r\n- Updated documentation (including requirement for singularity version >= 3.2.1).\r\n\t\r\n### Extra files:\r\n- Upload Nextflow reports for the ExOrthist `main.nf` runs mentioned in the ExOrthist paper (_Marquez et al, Genome Biology, 2021_).",
        "html_url": "https://github.com/biocorecrg/ExOrthist/releases/tag/v1.0.1",
        "name": "v1.0.1",
        "release_id": 46544569,
        "tag": "v1.0.1",
        "tarball_url": "https://api.github.com/repos/biocorecrg/ExOrthist/tarball/v1.0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/biocorecrg/ExOrthist/releases/46544569",
        "value": "https://api.github.com/repos/biocorecrg/ExOrthist/releases/46544569",
        "zipball_url": "https://api.github.com/repos/biocorecrg/ExOrthist/zipball/v1.0.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "mirimia",
          "type": "User"
        },
        "date_created": "2021-06-16T22:37:11Z",
        "date_published": "2021-06-16T22:42:44Z",
        "description": "**Main module**\r\n--------------------\r\n* Changes in intron phase handling. In previous versions, ExOrthist used the offset from the CDS lines (8th column) of the GTF file as representative of the intron phase. From this release onwards, we use the actual definition of intron phase (i.e. the nucleotide of the codon after which the intron is located). Moreover, phase 0 introns are now placed in the IPA before the aminoacid residue and phase 1 and 2 introns after the residue, to better reflect the coding meaning. IMPORTANT NOTE: these changes do not have a major impact in exon homology calling, but all the IPA alignments generated with previous versions will not be valid from v1.0.0 on (i.e. they cannot be used with the --prevaln option). [Script modified: A1].\r\n* Improvements in the addition of non-annotated exons (--extraexons option): the insertion of the exon in transcripts between coding C1 and C2 exons is prioritized over the insertion between non-coding exons. [Script modified: A1].\r\n* Non-annotated exons (--extraexons option) can now be added only for a subset of species (previously: either all or none). [Script modified: main.nf].\r\n* Introduction of stricter cutoffs when deciding not to realign a pair of matching exons in process `parse_IPA_prot_aln`. To not perform a realignment of a query and >= 2 target exons, it is now required that there is a single best exon pair from another isoform with less than 30% of gaps, more than 40% exon protein sequence similarity and an exon length ratio (shortest/longest) of at least 0.6. [Script modified: B1].\r\n* The file with the best matches (at the level of the target gene) for each overlapping group of exons is now saved in the output folder as `filtered_best_scored_EX_matches_by_targetgene-NoOverlap.tab`. [Script modified: main.nf].\r\n* Redundancy removal: if two variants of the same exon (overlap exon group) have two different exons from the same target gene as valid homologs, only one is selected. Priority is given to the exon associated with a bonafide exon variant (if provided), or, otherwise, to the representative variant of the query exon overlap group. [Scripts modified: C3 and C5].\r\n* Addition of time and version information in the `run_info.log file`. [Script modified: A0].\r\n \r\n**Exint plotter module**\r\n--------------------\r\n* Addition of a test set for the `exint_plotter.nf` module.\r\n* Introduction of additional information in the legend of the exint plots.\r\n \r\n**Compare exon sets module**\r\n--------------------\r\n* Changes in the call of not-orthologous exon regulation: it assigns the non-conserved label (instead of best_hit) to the query exon if the best hit of the target exon is in an orthogroup with a different query exon from the same query gene. \r\n* Changes in the statistics provided as text output: the pairwise comparisons between regulated exons in orthologous genes are now separately reported for each query species and based on the total number of query regulated exons, not pairwise comparisons.\r\n* Introduction of a graphical output when the module is run for two exon sets (see README).\r\n \r\n**Others**\r\n--------------------\r\n* Updated documentation.\r\n* Uploading of pre-computed IPA protein alignments generated for all the species pairs in a human (hg38), mouse (mm10), zebrafish (danRer11) and fruitfly (dm6) genome-wide ExOrthist `main.nf` run. These pairwise alignments can be used for a new main module run with the --prevaln option, allowing to skip the alignment step for all specified species pairs. The pre-computed IPA alignments can be downloaded from the --prevaln section in the README, and more will be added to the Github repository in the near future.\r\n* Introduction of the `retrieve_IPA_aln.pl` script, to more easily isolate and visualize the best protein alignment between a pair of (query-target) exons.\r\n* Addition of a maximum length ratio filter to select liftOver hits in `get_liftovers.pl`.\r\n",
        "html_url": "https://github.com/biocorecrg/ExOrthist/releases/tag/v1.0.0",
        "name": "v1.0.0",
        "release_id": 44759415,
        "tag": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/biocorecrg/ExOrthist/tarball/v1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/biocorecrg/ExOrthist/releases/44759415",
        "value": "https://api.github.com/repos/biocorecrg/ExOrthist/releases/44759415",
        "zipball_url": "https://api.github.com/repos/biocorecrg/ExOrthist/zipball/v1.0.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "mirimia",
          "type": "User"
        },
        "date_created": "2021-03-03T18:35:11Z",
        "date_published": "2021-03-03T18:48:08Z",
        "description": "**New features** \r\n--------------------\r\n\r\n* `compare_exon_sets` module is now available.\r\n* `get_cluster_stats.pl` script is now available.\r\n* params.config (`main.nf`): addition of an \"orthogroupnum\" parameter specifying the number of orthogroups to be jointly evaluated in a single instance of the `cluster_EXs` process, reducing the number of required jobs.\r\n* Process `check_input` (`main.nf`): addition of a check for geneIDs in input files (i.e. raising of warnings for not-coding genes included in the gene orthogroups).\r\n* `GetLiftOverFile.pl`: addition of an option to filter by SS dinucleotide.\r\n* Addition of a test set for a limited number of selected gene orthogroups in 3 mammalian species (human, mouse and cow).\r\n\r\n**Changes to the main.nf algorithm** \r\n--------------------\r\n\r\n* Process `parse_IPA_prot_aln`: addition of an initial filter to avoid comparing identical protein isoform pairs.\r\n* Process `parse_IPA_prot_aln`: modification of the sliding window to search for intron conservation depending on the number of gaps in the region surrounding the intron.\r\n* Process `parse_IPA_prot_aln`: addition of gap length correction on left and right side of the alignment surrounding an intron when evaluating intron conservation.\r\n* Process `parse_IPA_prot_aln`: addition of a filter to ensure that I1 and I2 (the two introns surrounding the evaluated exon) are indeed consecutive.\r\n* Process `parse_IPA_prot_aln`: addition of a requirement for valid single exon matches to have >50% non-gapped alignments.\r\n* Process `parse_IPA_prot_aln`: correction of cases in which aligned exons with 0% similarity were considered not aligned.\r\n* Process  `parse_IPA_prot_aln`: do not consider as valid hits of internal (query) exons against first/last exons in the target isoform.\r\n* Process `score_EX_matches`: adjustment of the scoring when evaluating homology of N- and C-terminal exons.\r\n* Process `score_EX_matches`: change the score to -1 for the evaluated exon in case no exon alignment is detected in the relative target isoform.\r\n* Process `filter_and_select_best_EX_matches_by_targetgene`: microexons (<=3 amino acids) in both species automatically pass the sequence similarity.\r\n* Process `filter_and_select_best_EX_matches_by_targetgene`: inversion of the logic used in the selection of the best target-gene hit. First, we filter based on the scores of the single features, then we select the best hit per gene (prioritizing the filtered ones).\r\n* Process `cluster_EXs`: addition of an extra output including the exons excluded from the clustering algorithm.\r\n\r\n\r\n**Others**\r\n--------------------\r\n\r\n* Updated documentation.\r\n* params.config (`main.nf`): rename \"liftover\" variable as \"bonafide_pairs\".\r\n* params.config (`exint_plotter`): change of the \"isoformID\" parameter from transcript ID to protein ID.\r\n* Various bug corrections and fixes.\r\n",
        "html_url": "https://github.com/biocorecrg/ExOrthist/releases/tag/v0.1.0",
        "name": "v0.1.0",
        "release_id": 39205765,
        "tag": "v0.1.0",
        "tarball_url": "https://api.github.com/repos/biocorecrg/ExOrthist/tarball/v0.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/biocorecrg/ExOrthist/releases/39205765",
        "value": "https://api.github.com/repos/biocorecrg/ExOrthist/releases/39205765",
        "zipball_url": "https://api.github.com/repos/biocorecrg/ExOrthist/zipball/v0.1.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "mirimia",
          "type": "User"
        },
        "date_created": "2020-11-05T14:49:15Z",
        "date_published": "2020-11-05T14:57:05Z",
        "description": "First public release. \r\n\r\nA few secondary modules are not yet available/ready:\r\n- compare_exons (CompareExonSets.pl).\r\n- get cluster statistics (GetStatsExonsClusters.pl).\r\n\r\n",
        "html_url": "https://github.com/biocorecrg/ExOrthist/releases/tag/v0.0.1.beta",
        "name": "v0.0.1.beta",
        "release_id": 33507491,
        "tag": "v0.0.1.beta",
        "tarball_url": "https://api.github.com/repos/biocorecrg/ExOrthist/tarball/v0.0.1.beta",
        "type": "Release",
        "url": "https://api.github.com/repos/biocorecrg/ExOrthist/releases/33507491",
        "value": "https://api.github.com/repos/biocorecrg/ExOrthist/releases/33507491",
        "zipball_url": "https://api.github.com/repos/biocorecrg/ExOrthist/zipball/v0.0.1.beta"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 03:55:29",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 21
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "workflows": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/biocorecrg/ExOrthist/master/main.nf"
      },
      "technique": "file_exploration"
    }
  ]
}