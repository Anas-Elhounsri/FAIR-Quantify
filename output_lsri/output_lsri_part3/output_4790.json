{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "type": "Text_excerpt",
        "value": "Zhang S, He Y, Liu H, Zhai H, Huang D, Yi X, Dong X, Wang Z, Zhao K, Zhou Y, Wang J, Yao H, Xu H, Yang Z, Sham PC, Chen K, Li MJ. regBase: whole genome base-wise aggregation and functional prediction for human non-coding regulatory variants. Nucleic Acids Res. 2019 Dec 2;47(21):e134.\n"
      },
      "source": "https://raw.githubusercontent.com/mulinlab/regBase/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/mulinlab/regBase"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-09-30T14:47:13Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-06-14T14:01:59Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Base-wise aggregation and functional prediction for human non-coding regulatory variants"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9850247243879324,
      "result": {
        "original_header": "regBase",
        "type": "Text_excerpt",
        "value": "   regBase is a comprehensively integrated non-coding regulatory prediction scores and composite prediction models from existing tools for base-wise annotation of human genome. As such, the regBase resource provides convenience to prioritize functional regulatory SNVs and assist the fine mapping of causal regulatory SNVs without queries from numerus sources. \n   \n   Inspired by the evident significance of ensemble prediction for pathogenic/deleterious nonsynonymous substitution, regBase also systematically constructs three composite models to score functional, pathogenic and cancer driver non-coding regulatory SNVs. The prediction scores of these models are also intergrated into regBase dataset.\n   \n   - Please note some component score of regBase contains specific license or usage constraints for non-academic usage. regBase does not grant the non-academic usage of those scores, so please contact the original score/method providers for proper usage purpose.  \n \n   - We welcome any discussion, suggestion and potential contribution of new functional prediction scores through github or contact Dr. Mulin Jun Li (mulinli{at}connect.hku.hk).\n   \n   - Citation. regBase: whole genome base-wise aggregation and functional prediction for human non-coding regulatory variants. Zhang S, He Y, Liu H, Zhai H, Huang D, Yi X, Dong X, Wang Z, Zhao K, Zhou Y, Wang J, Yao H, Xu H, Yang Z, Sham PC, Chen K, Li MJ*. Nucleic Acids Res. 2019 Dec 2;47(21):e134. \n**Updates**\n<blockquote>\n   - regBase V1.1.1 is released. Three genome-wide functional scores were added into <i>regBase</i> database, including CADD v1.4, CADD v1.6, CScape-Somatic. Now <i>regBase</i> contains 21 tools. Also, regBase database now is stored chromosome by chromosome for easy downloading. <i>regBase Common</i> (see V1.1) and <i>regBase prediction</i> (see V1.0) remain unchanged in this version.\n</blockquote> \n<blockquote>\n   - regBase V1.1 is released. Five genome-wide functional scores were added, including DVAR, FitCons2, ncER, Orion, PAFA. Now <i>regBase</i> contains 18 tools and <i>regBase Common</i> contains 28 tools.\n</blockquote> \n<blockquote>\n   - regBase V1.0 is released. Its current version is compiled from 23 different tools on functional annotation of non-coding variants, including Basset, CADD, CATO, CDTS, CScape, DANN, DanQ, DeepSEA, deltaSVM, Eigen, FATHMM-MKL, FATHMM-XF, FIRE, fitCons, FunSeq, FunSeq2, GenoCanyon, GWAS3D, GWAVA, LINSIGHT, ReMM, RSVP, SuRFR and PRVCS. Since some tools only support annotations for 1000 Genome Project variants, or take long runtime to compute functional scores, it first built a database, called <i>regBase Common</i>, which contains functional scores from 23 tools for 38,248,779 in the 1000 Genome Project phase 3. Among these integrated dataset, 13 tools provide precomputed scores for almost all possible substitutions of single nucleotide variant (SNV) in the human reference genome. Therefore, it also constructed a complete base-wise aggregation of non-coding variant functional scores for 8,575,894,770 substitutions of SNV, called <i>regBase</i>.\n</blockquote> \n"
      },
      "source": "https://raw.githubusercontent.com/mulinlab/regBase/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9049051491003429,
      "result": {
        "original_header": "Copyright",
        "type": "Text_excerpt",
        "value": "Copyright (c) Mulinlab@Tianjin Medical University 2016-2019. All rights reserved.\nPlease note some component score of regBase contains specific licence or usage constraints for non-academic usage. regBase does not grant the non-academic usage of those scores, so please contact the original score/method providers for proper usage purpose. \n"
      },
      "source": "https://raw.githubusercontent.com/mulinlab/regBase/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/mulinlab/regBase/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/mulinlab/regBase/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "mulinlab/regBase"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/mulinlab/regBase/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9999870484398056,
      "result": {
        "original_header": "Procedures",
        "type": "Text_excerpt",
        "value": "If you have everything installed, you can use the best parmeters to train a model as follows:\n   ```bash\n   cd ./script\n   python train_model.py\n   ```\nIf you do not want to train a model from scratch instead of only prediction, you need provide a query file to do it.\n   BASH2*\nThe query file must be a list of variants that use the format as:\n   BASH3*\n \n"
      },
      "source": "https://raw.githubusercontent.com/mulinlab/regBase/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8196886055503955,
      "result": {
        "original_header": "Procedures",
        "type": "Text_excerpt",
        "value": "If you have everything installed, you can use the best parmeters to train a model as follows:\n   ```bash\n   cd ./script\n   python train_model.py\n   ```\nIf you do not want to train a model from scratch instead of only prediction, you need provide a query file to do it.\n   BASH2*\nThe query file must be a list of variants that use the format as:\n   BASH3*\n \n"
      },
      "source": "https://raw.githubusercontent.com/mulinlab/regBase/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/mulinlab/regBase/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "BSD 3-Clause \"New\" or \"Revised\" License",
        "spdx_id": "BSD-3-Clause",
        "type": "License",
        "url": "https://api.github.com/licenses/bsd-3-clause",
        "value": "https://api.github.com/licenses/bsd-3-clause"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "BSD 3-Clause License\n\nCopyright (c) 2019, mulinlab\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its\n   contributors may be used to endorse or promote products derived from\n   this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
      },
      "source": "https://raw.githubusercontent.com/mulinlab/regBase/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "regBase"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "mulinlab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 9609,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/mulinlab/regBase/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirements",
        "parent_header": [
          "Building regBase models"
        ],
        "type": "Text_excerpt",
        "value": "- python 3.5\n- scikit-learn >= 0.20.1\n- xgboost >= 0.71\n- tabix >= 1.6\n"
      },
      "source": "https://raw.githubusercontent.com/mulinlab/regBase/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 17:41:36",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 15
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Score interpretation and prioritization",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Similar to CADD C-scores and it's phred-like scores, the raw scores reported by each single tool could be obscure and less-comparable across tools and versions, we recommend to use phred-like scores (\"scaled raw scores\") for the likely causal variant prioritization and even for comparison among different models (ranging from 1 to 99, and based on the rank of each variant relative to all possible 8.6 billion substitutions in the human reference genome). However, raw scores could be used to evaluate the base-wise differences at specific genomic region or to compare score distributions among different groups of variants, as they preserve distinctions that may be relevant across the entire scoring spectrum (see more guidelines from [CADD information page](https://cadd.gs.washington.edu/info)).\n\n[The Youden's J statistic](https://github.com/mulinlab/regBase/blob/master/trained_model/YoudensJ.txt) for each tool and combined score was released together with our initial models, which could be used to classify positive and negative variants in corresponding models based on raw score. Also, Higher PHRED score indicates likely regulatory/pathogenic/cancer driver SNV.\n"
      },
      "source": "https://raw.githubusercontent.com/mulinlab/regBase/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Basic usage",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "   Get the CADD prediction scores from regBase (e.g chr10:101388218)\n   ```bash\n   tabix -p bed regBase.gz 10:101388218-101388218 | cut -f 1-5,6\n   ```\n   Get the CADD PHRED-score from regBase (e.g chr10:101388218)\n   ```bash\n   tabix -p bed regBase.gz 10:101388218-101388218 | cut -f 1-5,7\n   ```\n   Get the regBase_CAN prediction from regBase Prediction (e.g chr10:101388218)\n   ```bash\n   tabix -p bed regBase_prediction.gz 10:101388218-101388218 | cut -f 1-5,8,9\n   ```\n\n"
      },
      "source": "https://raw.githubusercontent.com/mulinlab/regBase/master/README.md",
      "technique": "header_analysis"
    }
  ]
}