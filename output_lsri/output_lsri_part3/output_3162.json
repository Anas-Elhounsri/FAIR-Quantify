{
  "application_domain": [
    {
      "confidence": 30.77,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Reference",
        "parent_header": [
          "MSIWarp"
        ],
        "type": "Text_excerpt",
        "value": "Eriksson JO, S\u00e1nchez Brotons A, Rezeli M, Suits F, Mark\u00f3-Varga G, Horvatovich P., [MSIWarp: A General Approach to Mass Alignment in Mass Spectrometry Imaging](https://pubs.acs.org/doi/abs/10.1021/acs.analchem.0c03833), Anal Chem. 2020, 92(24):16138-16148. [doi: 10.1021/acs.analchem.0c03833](https://pubs.acs.org/doi/abs/10.1021/acs.analchem.0c03833). [PMID: 33317272](https://pubmed.ncbi.nlm.nih.gov/33317272/).\n"
      },
      "source": "https://raw.githubusercontent.com/horvatovichlab/MSIWarp/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/horvatovichlab/MSIWarp"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-11-08T17:16:25Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-05-10T14:36:19Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MAss spectra alignment tool for MSI data"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9913451549398447,
      "result": {
        "original_header": "MSIWarp",
        "type": "Text_excerpt",
        "value": "**MSIWarp** is a flexible tool to perform mass alignment of Mass Spectrometry Imaging (MSI) spectra. A key feature of MSIWarp is its compatibility with centroid spectra.\n \n"
      },
      "source": "https://raw.githubusercontent.com/horvatovichlab/MSIWarp/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8329506677367927,
      "result": {
        "original_header": "Details",
        "type": "Text_excerpt",
        "value": "MSIWarp models a spectrum as a list of peaks ordered by *m/z*, where each peak has the following four attributes: \n1. spectrum index\n2. *m/z*\n3. height\n4. sigma, the modelled width of the peak\n \n"
      },
      "source": "https://raw.githubusercontent.com/horvatovichlab/MSIWarp/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/horvatovichlab/MSIWarp/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/horvatovichlab/MSIWarp/main/examples/warp_tof_kidney.ipynb"
      },
      "source": "https://raw.githubusercontent.com/horvatovichlab/MSIWarp/main/examples/warp_tof_kidney.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/horvatovichlab/MSIWarp/main/examples/warp_orbitrap_desi_imzml.ipynb"
      },
      "source": "https://raw.githubusercontent.com/horvatovichlab/MSIWarp/main/examples/warp_orbitrap_desi_imzml.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/horvatovichlab/MSIWarp/main/examples/warp_tof_spheroids.ipynb"
      },
      "source": "https://raw.githubusercontent.com/horvatovichlab/MSIWarp/main/examples/warp_tof_spheroids.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/horvatovichlab/MSIWarp/main/examples/warp_tof_kidney_ransac.ipynb"
      },
      "source": "https://raw.githubusercontent.com/horvatovichlab/MSIWarp/main/examples/warp_tof_kidney_ransac.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/horvatovichlab/MSIWarp/main/examples/warp_orbitrap_liver.ipynb"
      },
      "source": "https://raw.githubusercontent.com/horvatovichlab/MSIWarp/main/examples/warp_orbitrap_liver.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/horvatovichlab/MSIWarp/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "horvatovichlab/MSIWarp"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MSIWarp"
      },
      "source": "https://raw.githubusercontent.com/horvatovichlab/MSIWarp/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/horvatovichlab/MSIWarp/main//docs/mass_scatter_desi.png"
      },
      "source": "https://raw.githubusercontent.com/horvatovichlab/MSIWarp/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "MSIWarp"
        ],
        "type": "Text_excerpt",
        "value": "Clone the repository:\n```\ngit clone --recursive https://github.com/horvatovichlab/MSIWarp.git\n```\nand build the project by typing\n```\npython3 setup.py install --user\n```\nin the root directory of the project.\n\nCMake, a C++17 compliant compiler, and Python 3 must be installed to build MSIWarp. Furthermore, this project depends on the python packages Numpy, Matplotlib, and pyimzML (to interact with imzML files).\n"
      },
      "source": "https://raw.githubusercontent.com/horvatovichlab/MSIWarp/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Setting up the warping nodes",
        "parent_header": [
          "MSIWarp",
          "Details"
        ],
        "type": "Text_excerpt",
        "value": "A warping node has three parameters: an m/z position, a slack, and the number of evaluation points within the slack. The slack and the number of evaluation points determine the search space of the warping function and its resolution, respectively.\n\nThere are two fundamental options for warping node placement: (i) use the same warping nodes for all spectra, or (ii) place the warping nodes uniquely for each spectrum. If we choose (i), we must setup the warping nodes prior to searching for the optimal aligments. If we choose (ii), we must select a node placement method and set provide the corresponding parameters. \n\nThe following code will initialize four warping nodes between 150 and 1050 *m/z*. \n```python\nnode_mzs = [150, 450, 750, 1050]\nnode_deltas = [0.015, 0.045, 0.075, 0.105] # slacks = node_deltas * n_steps\nn_steps = 25 \nnodes = mx.initialize_nodes(node_mzs, node_deltas, n_steps)\n```\n\nIf we chose the second option, we can use either the density-based node placement function or the ... function.\n```\n# setup the parameters for the uniform node placement function\nparams = mx.params_uniform(mx.Instrument.Orbitrap, # each instrument type has its own relationship between peak width and m/z\n                           n_steps, # same as above\n                           n_peaks, # the number of peaks per segment\n                           max_n_nodes, # maximum number of nodes\n                           mz_begin, # \n                           mz_end, #\n                           slack # the slack relative to peak width\n                           )\n```\n"
      },
      "source": "https://raw.githubusercontent.com/horvatovichlab/MSIWarp/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example: align a centroid data set in the imzML format",
        "parent_header": [
          "MSIWarp"
        ],
        "type": "Text_excerpt",
        "value": "Load a centroided imzML data set into RAM using [pyimzML](https://github.com/alexandrovteam/pyimzML):\n\n```python\nimport msiwarp as mx\n\nfrom pyimzml.ImzMLParser import ImzMLParser\nfrom msiwarp.util.warp import to_mx_peaks\n\np = ImzMLParser(imzml_path)\nspectra = []\n\nfor idx, coords in enumerate(p.coordinates):\n    mzs, hs = p.getspectrum(idx)    \n    spectra.append(to_mx_peaks(mzs, hs,\n                               sigma_1, id = idx,\n                               instrument_type = 'orbitrap'))\n\n```\n\nthen warp the spectra:\n\n```python\n# choose a reference spectrum\ni_r = 200\ns_r = spectra[i_r]\n\nprint(\"warping spectra...\")\n\nimport time\nt0 = time.time()\noptimal_moves = mx.find_optimal_spectra_warpings(spectra, s_r, nodes, epsilon)\nt1 = time.time()\nprint(\"found optimal warpings in {:0.2f}s\".format(t1 - t0))\n\nt2 = time.time()\nwarped_spectra = [mx.warp_peaks(s_i, nodes, o_i) for (s_i, o_i) in zip(spectra, optimal_moves)]\nt3 = time.time()\nprint(\"warped spectra in {:0.2f}s\".format(t3 - t2))\n```\n\n    warping spectra...\n    found optimal warpings in 77.72s\n    warped spectra in 7.11s\n\nand finally, store the warped spectra in a new imzML file:\n\n```python\nfrom pyimzml.ImzMLWriter import ImzMLWriter\nfrom msiwarp.util.warp import to_mz, to_height\n\noutput_imzml = 'output.imzML'\nwith ImzMLWriter(output_imzml) as w:\n    for s_i, coords in zip(warped_spectra, p.coordinates):\n        # writes data to the .ibd file\n        w.addSpectrum(to_mz(s_i), to_height(s_i), coords)\n```\n\nWe can also store the data set in the *MSI triplet* format:\n```python\nfpath_triplets_raw = \"...\"\nif mx.spectra_to_triplets(fpath_triplets_raw, spectra):\n    print(\"wrote raw MSI triplets to file\")\n\nfpath_triplets_warped = \"...\"\nif mx.spectra_to_triplets(fpath_triplets_warped, warped_spectra):\n    print(\"wrote warped MSI triplets to file\")\n```\nwhich enables fast queries of all data set peaks within a mass range. After generating our triplet files, we can easily plot mass scatters:\n\n```python\nfrom msiwarp.util.warp import plot_range\n\nmz_ref = [281.249, 885.553, 886.556] # m/z locations of \nmass_tolerance = 3 # ppm\n\nfig, ax = plt.subplots(1, 3, figsize=(12,4), sharey=True)\n\nfor i, mz_i in enumerate(mz_ref):\n    d = mass_tolerance * mz_i / 1e6 # -+ mass_tolerance around reference mass \n    mz0 = mz_i - d\n    mz1 = mz_i + d    \n    \n    plot_range(fpath_triplets_raw, mz0, mz1, ax[i], 'tab:cyan', 25, in_ppm=True)\n    plot_range(fpath_triplets_warped, mz0, mz1, ax[i], 'tab:orange', 25, in_ppm=True)\n    \n    ax[i].set_facecolor((0.0, 0.0, 0.0))\n    ax[i].set_title('m/z {:0.3f}'.format(mz_i))\n    ax[i].set_xticks([-mass_tolerance, 0, mass_tolerance])\n    ax[i].set_xlabel('relative shift (ppm)')\n    \nax[0].set_ylabel('spectrum index')\n```\n\n![DESI MASS SCATTER](/docs/mass_scatter_desi.png)\n"
      },
      "source": "https://raw.githubusercontent.com/horvatovichlab/MSIWarp/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/horvatovichlab/MSIWarp/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2020 j-o-eriksson\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/horvatovichlab/MSIWarp/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MSIWarp"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "horvatovichlab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 63676,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 19198,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 1319,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/horvatovichlab/MSIWarp/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-06 11:47:15",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 16
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick start",
        "parent_header": [
          "MSIWarp"
        ],
        "type": "Text_excerpt",
        "value": "The following script aligns a list of spectra:\n```python\nimport msiwarp as mx\n\nspectra =  ... # code to load the unaligned spectra\nreference_spectrum =  ... \n\n# setup the node placement parameters\nparams = mx.params_uniform(...)\nepsilon = 1.0 # peak matching threshold, relative to peak width\nn_cores = 4\n\n# find an m/z recalibration function for each spectrum\nrecal_funcs = mx.find_optimal_warpings_uni(spectra, reference_spectrum, params, epsilon, n_cores)\n\n# use the recalibration functions to warp the spectra\nwarped_spectra = [mx.warp_peaks_unique(s_i, r_i) for (s_i, r_i) in zip(spectra, recal_funcs)\n\n# ... code to store the warped spectra\n\n```\n"
      },
      "source": "https://raw.githubusercontent.com/horvatovichlab/MSIWarp/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example: align a centroid data set in the imzML format",
        "parent_header": [
          "MSIWarp"
        ],
        "type": "Text_excerpt",
        "value": "Load a centroided imzML data set into RAM using [pyimzML](https://github.com/alexandrovteam/pyimzML):\n\n```python\nimport msiwarp as mx\n\nfrom pyimzml.ImzMLParser import ImzMLParser\nfrom msiwarp.util.warp import to_mx_peaks\n\np = ImzMLParser(imzml_path)\nspectra = []\n\nfor idx, coords in enumerate(p.coordinates):\n    mzs, hs = p.getspectrum(idx)    \n    spectra.append(to_mx_peaks(mzs, hs,\n                               sigma_1, id = idx,\n                               instrument_type = 'orbitrap'))\n\n```\n\nthen warp the spectra:\n\n```python\n# choose a reference spectrum\ni_r = 200\ns_r = spectra[i_r]\n\nprint(\"warping spectra...\")\n\nimport time\nt0 = time.time()\noptimal_moves = mx.find_optimal_spectra_warpings(spectra, s_r, nodes, epsilon)\nt1 = time.time()\nprint(\"found optimal warpings in {:0.2f}s\".format(t1 - t0))\n\nt2 = time.time()\nwarped_spectra = [mx.warp_peaks(s_i, nodes, o_i) for (s_i, o_i) in zip(spectra, optimal_moves)]\nt3 = time.time()\nprint(\"warped spectra in {:0.2f}s\".format(t3 - t2))\n```\n\n    warping spectra...\n    found optimal warpings in 77.72s\n    warped spectra in 7.11s\n\nand finally, store the warped spectra in a new imzML file:\n\n```python\nfrom pyimzml.ImzMLWriter import ImzMLWriter\nfrom msiwarp.util.warp import to_mz, to_height\n\noutput_imzml = 'output.imzML'\nwith ImzMLWriter(output_imzml) as w:\n    for s_i, coords in zip(warped_spectra, p.coordinates):\n        # writes data to the .ibd file\n        w.addSpectrum(to_mz(s_i), to_height(s_i), coords)\n```\n\nWe can also store the data set in the *MSI triplet* format:\n```python\nfpath_triplets_raw = \"...\"\nif mx.spectra_to_triplets(fpath_triplets_raw, spectra):\n    print(\"wrote raw MSI triplets to file\")\n\nfpath_triplets_warped = \"...\"\nif mx.spectra_to_triplets(fpath_triplets_warped, warped_spectra):\n    print(\"wrote warped MSI triplets to file\")\n```\nwhich enables fast queries of all data set peaks within a mass range. After generating our triplet files, we can easily plot mass scatters:\n\n```python\nfrom msiwarp.util.warp import plot_range\n\nmz_ref = [281.249, 885.553, 886.556] # m/z locations of \nmass_tolerance = 3 # ppm\n\nfig, ax = plt.subplots(1, 3, figsize=(12,4), sharey=True)\n\nfor i, mz_i in enumerate(mz_ref):\n    d = mass_tolerance * mz_i / 1e6 # -+ mass_tolerance around reference mass \n    mz0 = mz_i - d\n    mz1 = mz_i + d    \n    \n    plot_range(fpath_triplets_raw, mz0, mz1, ax[i], 'tab:cyan', 25, in_ppm=True)\n    plot_range(fpath_triplets_warped, mz0, mz1, ax[i], 'tab:orange', 25, in_ppm=True)\n    \n    ax[i].set_facecolor((0.0, 0.0, 0.0))\n    ax[i].set_title('m/z {:0.3f}'.format(mz_i))\n    ax[i].set_xticks([-mass_tolerance, 0, mass_tolerance])\n    ax[i].set_xlabel('relative shift (ppm)')\n    \nax[0].set_ylabel('spectrum index')\n```\n\n![DESI MASS SCATTER](/docs/mass_scatter_desi.png)\n"
      },
      "source": "https://raw.githubusercontent.com/horvatovichlab/MSIWarp/main/README.md",
      "technique": "header_analysis"
    }
  ]
}