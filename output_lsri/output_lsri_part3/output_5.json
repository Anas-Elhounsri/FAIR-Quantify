{
  "application_domain": [
    {
      "confidence": 53.6,
      "result": {
        "type": "String",
        "value": "Natural Language Processing"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "References",
        "parent_header": [
          "Table of Contents"
        ],
        "type": "Text_excerpt",
        "value": "[1] Elnaggar A, Heinzinger M, Dallago C, Rihawi G, Wang Y, Jones L, Gibbs T, Feher T, Angerer C, Bhowmik D, Rost B (2021). ProtTrans: Towards Cracking the Language of Lifes Code Through Self-Supervised Deep Learning and High Performance Computing. IEEE Transactions on Pattern Analysis and Machine Intelligence. doi: 10.1109/TPAMI.2021.3095381.\n\n[2] Olenyi T, Marquet C, Heinzinger M, Kr\u00f6ger B, Nikolova T, Bernhofer M, S\u00e4ndig P, Sch\u00fctze K, Littmann M, Mirdita M, Steinegger M, Dallago C, Rost B (2023). LambdaPP: Fast and accessible protein-specific phenotype predictions. Protein Sci, 32, 1:e4524.\n\n[3] Marquet C, Grekova A, Houri L, Bernhofer M, Jimenez-Soto L F, Karl T, Heinzinger M, Dallago C, Rost B (2022). TMvisDB: resource for transmembrane protein annotation and 3D visualization. bioRxiv, 2022.11.30.518551.\n\n[4] Varadi M, Anyango S, Deshpande M, Nair S, Natassia C, Yordanova G, Yuan D, Stroe O, Wood G, Laydon A, Zidek A, Green T, Tunyasuvunakool K, Petersen S, Jumper J, Clancy E, Green R, Vora A, Lutfi M, Figurnov M, Cowie A, Hobbs N, Kohli P, Kleywegt G, Birney E, Hassabis D, Velankar S (2022). AlphaFold Protein Structure Database: massively expanding the structural coverage of protein-sequence space with high-accuracy models. Nucleic Acids Res, 50, D1:D439-D444.\n"
      },
      "source": "https://raw.githubusercontent.com/BernhoferM/TMbed/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/BernhoferM/TMbed"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-05-31T05:00:10Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-07-30T16:50:36Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Transmembrane proteins predicted through Language Model embeddings"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9790675334977098,
      "result": {
        "original_header": "TMbed - Transmembrane proteins predicted through Language Model embeddings",
        "type": "Text_excerpt",
        "value": "TMbed predicts transmembrane beta barrel and alpha helical proteins, the position and orientation of their transmembrane segments, and signal peptides.\nWe use a Protein Language Model, [ProtT5-XL-U50](https://github.com/agemagician/ProtTrans) [1], to generate embeddings used as input for our method. \nTMbed is also available via [bio_embeddings](https://github.com/sacdallago/bio_embeddings) and [LambdaPP](https://embed.predictprotein.org/) [2].\\\nOr you can try out TMbed using [Google Colab](https://colab.research.google.com/drive/1FbT2rQHYT67NNHCrGw4t0WMEHCY9lqR2?usp=sharing). \n"
      },
      "source": "https://raw.githubusercontent.com/BernhoferM/TMbed/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8772269738948097,
      "result": {
        "original_header": "Prediction output",
        "type": "Text_excerpt",
        "value": "TMbed supports five different output formats:\n- `0`: 3-line format with directed segments.\n- `1`: 3-line format with undirected segments.\n- `2`: Tabular format with directed segments.\n- `3`: Tabular format with undirected segments.\n- `4`: 3-line format with directed segments and explicit inside/outside prediction (a mix of format `0` and `1`). \nPredicted residue classes are encoded by single letters.\\\nIn 3-line format, every protein is represented by three lines: header, sequence, labels.\\\nIn tabular format, every protein is represented by a table containing sequence, labels, and class probabilities. \n    - `B`: Transmembrane beta strand (IN-->OUT orientation)\n    - `b`: Transmembrane beta strand (OUT-->IN orientation)\n    - `H`: Transmembrane alpha helix (IN-->OUT orientation)\n    - `h`: Transmembrane alpha helix (OUT-->IN orientation)\n    - `S`: Signal peptide\n    - `.`: Non-Transmembrane \n    - `B`: Transmembrane beta strand (IN-->OUT orientation)\n    - `b`: Transmembrane beta strand (OUT-->IN orientation)\n    - `H`: Transmembrane alpha helix (IN-->OUT orientation)\n    - `h`: Transmembrane alpha helix (OUT-->IN orientation)\n    - `S`: Signal peptide\n    - `i`: Non-Transmembrane, inside\n    - `o`: Non-Transmembrane, outside \n"
      },
      "source": "https://raw.githubusercontent.com/BernhoferM/TMbed/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.986551977770579,
      "result": {
        "original_header": "Precomputed predictions",
        "type": "Text_excerpt",
        "value": "We provide precomputed predictions for the human proteome and for UniProtKB/Swiss-Prot. \n"
      },
      "source": "https://raw.githubusercontent.com/BernhoferM/TMbed/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/BernhoferM/TMbed/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://colab.research.google.com/drive/1FbT2rQHYT67NNHCrGw4t0WMEHCY9lqR2?usp=sharing"
      },
      "source": "https://raw.githubusercontent.com/BernhoferM/TMbed/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/BernhoferM/TMbed/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "BernhoferM/TMbed"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "TMbed - Transmembrane proteins predicted through Language Model embeddings"
      },
      "source": "https://raw.githubusercontent.com/BernhoferM/TMbed/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Install",
        "parent_header": [
          "Table of Contents"
        ],
        "type": "Text_excerpt",
        "value": "1. Clone the repository and run directly with `python -m tmbed`.\n\n    ```bash\n    git clone https://github.com/BernhoferM/TMbed.git tmbed\n    cd tmbed/\n    python -m tmbed --help\n    ```\n\n2. Clone the repository and install with `pip` or `poetry`.\n\n    ```bash\n    git clone https://github.com/BernhoferM/TMbed.git tmbed\n    cd tmbed/\n    pip install .\n    tmbed --help\n    ```\n\n3. Directly install from the repository.\n\n    ```bash\n    pip install git+https://github.com/BernhoferM/TMbed.git\n    tmbed --help\n    ```\n\n"
      },
      "source": "https://raw.githubusercontent.com/BernhoferM/TMbed/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "PyTorch (GPU or CPU only)",
        "parent_header": [
          "Table of Contents",
          "Install"
        ],
        "type": "Text_excerpt",
        "value": "If you want to use GPU acceleration (highly recommended), please install the corresponding version of PyTorch: [Get Started](https://pytorch.org/get-started/locally/)\n\n*Reproducibility:* TMbed tries to make predictions on GPU as deterministic as possible.\\\nHowever, some things are left to the user, such as setting the [CUBLAS_WORKSPACE_CONFIG](https://docs.nvidia.com/cuda/cublas/index.html#cublasApi_reproducibility) EnvVar.\\\nRegarding reproducibility in PyTorch, we also recommend their [notes on randomness and reproducibility](https://pytorch.org/docs/stable/notes/randomness.html#reproducibility).\n\n"
      },
      "source": "https://raw.githubusercontent.com/BernhoferM/TMbed/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Generate embeddings for a set of protein sequences",
        "parent_header": [
          "Table of Contents",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "You can generate embeddings for a set of proteins using the `embed` command.\\\nThe only required input is a FASTA file containing the protein sequences.\n\n```bash\npython -m tmbed embed -f sample.fasta -e sample.h5\n```\n\nThe created HDF5 file is indexed with the md5 hash sums of the corresponding protein sequences.\\\nEvery entry contains a `L x 1024` matrix, where `L` is the length of the protein sequence.\n\n"
      },
      "source": "https://raw.githubusercontent.com/BernhoferM/TMbed/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9693913993304746,
      "result": {
        "original_header": "TMbed - Transmembrane proteins predicted through Language Model embeddings",
        "type": "Text_excerpt",
        "value": "TMbed is also available via [bio_embeddings](https://github.com/sacdallago/bio_embeddings) and [LambdaPP](https://embed.predictprotein.org/) [2].\\\nOr you can try out TMbed using [Google Colab](https://colab.research.google.com/drive/1FbT2rQHYT67NNHCrGw4t0WMEHCY9lqR2?usp=sharing). \n"
      },
      "source": "https://raw.githubusercontent.com/BernhoferM/TMbed/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9413706203557765,
      "result": {
        "original_header": "Prediction output",
        "type": "Text_excerpt",
        "value": "    - `B`: Transmembrane beta strand\n    - `H`: Transmembrane alpha helix\n    - `S`: Signal peptide\n    - `i`: Non-Transmembrane, inside\n    - `o`: Non-Transmembrane, outside \n"
      },
      "source": "https://raw.githubusercontent.com/BernhoferM/TMbed/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8087347526874384,
      "result": {
        "original_header": "Precomputed predictions",
        "type": "Text_excerpt",
        "value": "- Human (21-04-2022): [Download](https://rostlab.org/public/tmbed/predictions/human_210422_tmbed.tar.gz)\n- UniProtKB/Swiss-Prot (11-05-2022): [Download](https://rostlab.org/public/tmbed/predictions/swissprot_110522_tmbed.tar.gz) \n"
      },
      "source": "https://raw.githubusercontent.com/BernhoferM/TMbed/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999993522385859,
      "result": {
        "original_header": "Roadmap",
        "type": "Text_excerpt",
        "value": "- [x] Install via GitHub\n- [ ] Publish pypi package\n- [x] Add data sets to GitHub\n- [x] Create Google Colab Notebook\n- [ ] Add training scripts to GitHub\n- [x] Integrate into [bio_embeddings](https://github.com/sacdallago/bio_embeddings)\n- [x] Integrate into [LambdaPP](https://embed.predictprotein.org/) \n"
      },
      "source": "https://raw.githubusercontent.com/BernhoferM/TMbed/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/BernhoferM/TMbed/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bioinformatics, deep-learning, machine-learning, protein-embeddings, protein-prediction, pytorch, transmembrane-proteins"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Apache License 2.0",
        "spdx_id": "Apache-2.0",
        "type": "License",
        "url": "https://api.github.com/licenses/apache-2.0",
        "value": "https://api.github.com/licenses/apache-2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License."
      },
      "source": "https://raw.githubusercontent.com/BernhoferM/TMbed/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "TMbed"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "BernhoferM"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 30678,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BernhoferM/TMbed/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "BernhoferM",
          "type": "User"
        },
        "date_created": "2023-02-02T16:57:44Z",
        "date_published": "2023-02-07T17:00:27Z",
        "description": "Initial release of TMbed as published in BMC Bioinformatics.",
        "html_url": "https://github.com/BernhoferM/TMbed/releases/tag/v1.0.0",
        "name": "TMbed v1.0.0",
        "release_id": 91632664,
        "tag": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/BernhoferM/TMbed/tarball/v1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/BernhoferM/TMbed/releases/91632664",
        "value": "https://api.github.com/repos/BernhoferM/TMbed/releases/91632664",
        "zipball_url": "https://api.github.com/repos/BernhoferM/TMbed/zipball/v1.0.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirements",
        "parent_header": [
          "Table of Contents",
          "Install"
        ],
        "type": "Text_excerpt",
        "value": "```\nh5py >= 3.2.1\nnumpy >= 1.20.3\nsentencepiece >= 0.1.96\ntorch >= 1.10.2\ntqdm >= 4.62.3\ntransformers >= 4.11.3\ntyper >= 0.4.1\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/BernhoferM/TMbed/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Hardware requirements",
        "parent_header": [
          "Table of Contents",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "When in half-precision mode, the ProtT5-XL-U50 encoder needs about 2.5 GB of VRAM on the GPU.\n\nAdditional memory requirements to generate embeddings depend heavily on the sequence length.\\\nWe recommend a GPU with at least 12GB of VRAM, which is enough for sequences of up to \\~4200 residues.\n\nIf you run into \"out of memory\" issues, try reducing the batch size.\n\n"
      },
      "source": "https://raw.githubusercontent.com/BernhoferM/TMbed/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "First run",
        "parent_header": [
          "Table of Contents",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "The first time TMbed is used to generate embeddings, it will automatically download the [ProtT5-XL-U50](https://huggingface.co/Rostlab/prot_t5_xl_half_uniref50-enc) encoder model (2.25 GB) and save it inside the `models/t5/` subdirectory.\n\nAlternatively, you can use the `download` command to download the ProtT5 model without generating embeddings.\n\n"
      },
      "source": "https://raw.githubusercontent.com/BernhoferM/TMbed/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-05 23:16:46",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 26
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "Table of Contents"
        ],
        "type": "Text_excerpt",
        "value": "TMbed has two commands `embed` and `predict` that you can use to generate embeddings and predictions.\n\n"
      },
      "source": "https://raw.githubusercontent.com/BernhoferM/TMbed/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Predict transmembrane proteins and segments",
        "parent_header": [
          "Table of Contents",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "With the `predict` command you can generate predictions for a set of proteins.\\\nThe only required input is a FASTA file containing the protein sequences. TMbed will generate the needed embeddings on the fly. If you also supply a file with embeddings, those embeddings will be used and only the subset of proteins contained within both input files will be predicted.\n\n```bash\npython -m tmbed predict -f sample.fasta -p sample.pred\n```\n\n```bash\npython -m tmbed predict -f sample.fasta -e sample.h5 -p sample.pred\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/BernhoferM/TMbed/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Optional arguments",
        "parent_header": [
          "Table of Contents",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "`--out-format` sets the output format for the prediction file.\n\n`--batch-size` is an approximation of how many residues should be included per batch.\\\nEach batch is constrained by ***N \\* L<sup>1.5</sup> &le; BS<sup>1.5</sup>***, where ***N*** is the number of sequences in the batch, ***L*** is the length of the longest sequence in the batch, and ***BS*** is the batch size. Batches with only a single sequence can break this restriction.\n\n`--use-gpu / --no-use-gpu` controls whether TMbed will try to use an available GPU to speed up computations.\n\n`--cpu-fallback / --no-cpu-fallback` controls whether TMbed will try to use the CPU if it fails to compute the embeddings on GPU.\n\n"
      },
      "source": "https://raw.githubusercontent.com/BernhoferM/TMbed/main/README.md",
      "technique": "header_analysis"
    }
  ]
}