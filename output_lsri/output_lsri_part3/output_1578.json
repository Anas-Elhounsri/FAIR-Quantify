{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "References",
        "parent_header": [
          "BioCCP.jl : Collecting Coupons in combinatorial biotechnology"
        ],
        "type": "Text_excerpt",
        "value": "The implementation of formulas was based on the references below:\n\n> Doumas, A. V., & Papanicolaou, V. G. (2016). *The coupon collector\u2019s problem revisited: generalizing the double Dixie cup problem of Newman and Shepp.* ESAIM: Probability and Statistics, 20, 367-399. doi: \thttps://doi.org/10.1051/ps/2016016\n\n> Boneh, A., & Hofri, M. (1997). *The coupon-collector problem revisited\u2014a survey of engineering problems and computational methods.* Stochastic Models, 13(1), 39-66. doi: https://doi.org/10.1080/15326349708807412\n\nThe case studies were based on the following references:\n\n> Chen, S., Sanjana, N. E., Zheng, K., Shalem, O., Lee, K., Shi, X., ... & Sharp, P. A. (2015). *Genome-wide CRISPR screen in a mouse model of tumor growth and metastasis.* Cell, 160(6), 1246-1260. doi: https://doi.org/10.1016/j.cell.2015.02.038Get\n\n> Duyvejonck, L., Gerstmans, H., Stock, M., Grimon, D., Lavigne, R., & Briers, Y. (2021). *Rapid and High-Throughput Evaluation of Diverse Configurations of Engineered Lysins Using the VersaTile Technique.* Antibiotics, 10(3), 293. doi: https://doi.org/10.3390/antibiotics10030293\n"
      },
      "source": "https://raw.githubusercontent.com/kirstvh/BioCCP/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/kirstvh/BioCCP.jl"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-06-10T08:51:55Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-08-08T04:34:44Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "BioCCP.jl exploits the Coupon Collector Problem for sample size determination in combinatorial biotechnology."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9972778869533523,
      "result": {
        "original_header": "Intro",
        "type": "Text_excerpt",
        "value": "During the **combinatorial engineering of biosystems**, such as proteins, genetic circuits and genomes, diverse libraries are generated by **assembling and recombining modules**. The variants with the optimal phenotypes are selected with screening techniques. However, when the number of available modules to compose biological designs increases, a combinatorial explosion of design possibilities arises, allowing only for a part of the libary to be analyzed. In this case, it is important for a researcher to get insight in which (minimum) sample size sufficiently covers the design space, *i.e.* what is the expected **minimum number of designs so that all modules are observed at least once**. \n"
      },
      "source": "https://raw.githubusercontent.com/kirstvh/BioCCP/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.945638073281314,
      "result": {
        "original_header": "Functions",
        "type": "Text_excerpt",
        "value": "BioCCP contains functions for calculating (expected) minimum sample sizes and related statistics: \nFunction name    | Short description\n---------------- | -----------------\n`expectation_minsamplesize`        | Calculates the expected minimum number of designs to observe all modules at least *m* times  \n`std_minsamplesize`      | Calculates standard deviation on the minimum number of designs \n`success_probability`         | Calculates the probability that the minimum number of designs *T* is smaller than or equal to a given sample size *t*  \n`expectation_fraction_collected` | Returns the fraction of the total number of modules in the design space that is expected to be observed for a given sample size *t*\n`prob_occurrence_module` | Calculates for a module with specified module probability *p*, the probability that this module occurs *k* times when a given number of designs has been collected \n\nFor more info about the implementation of the functions, please consult the [docs](https://kirstvh.github.io/BioCCP.jl/) or [source code](/src/BioCCP.jl). \n"
      },
      "source": "https://raw.githubusercontent.com/kirstvh/BioCCP/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9731222610871434,
      "result": {
        "original_header": "1. Report-generating Pluto notebook",
        "type": "Text_excerpt",
        "value": "The [first Pluto notebook](/notebooks/BioCCP_Interactive_Notebook.jl) provides an interactive illustration of all functions in BioCCP and assembles a report for your specific design set-up.  \nSymbol    | Short description\n---------------- | -----------------\n *n*       |  The total number of modules in the design space\n*r*     |  The number of modules per design \n *m*        | The number of times each module has to be observed (default = 1) in the sampled set of designs\n *p*   (\\*) |  Probability distribution of the modules  \n>  (\\*) \n>  *When exact probabilities are known*, define your custom module probability/abundance vector or load them in the notebook from an external file.\n>  *When probabilities and/or their distribution are unknown*, the user can either:\n > >  1) Assume the probabilities of all modules to be equal (uniform distribution), or\n > >  2) Assume the module probabilities to follow *Zipf's law*, specifying the ratio p<sub>max</sub>/p<sub>min</sub>, or\n > >  3) Assume the histogram of the module probabilities to behave like a *bell curve*, specifying the ratio p<sub>max</sub>/p<sub>min</sub>    \nReport section    |   Short description       \n---------------- |  -----------------           \nModule probabilities       |     This section shows a plot with the probability of each module in the design space during library generation.   \nExpected minimum sample size      |     This section displays the expected minimum number of designs **E**[_T_] and the standard deviation.         \nSuccess probability      |    In this section, the report shows the probability *F(t)* that the minimum number of designs *T* is smaller than or equal to a given sample size *t*. Moreover, a graph describing the success probability *F(t)* in function of an increasing sample size *t* is available, to determine a minimum sample size according to a probability cut-off.  \nExpected observed fraction of the total number of modules\u2002\u2002      |    In this section, the fraction of the total number of modules in the design space that is expected to be observed is computed for a given sample size *t*. A saturation curve, displaying the expected fraction of modules observed in function of increasing sample size, is provided.\nNumber of occurrences of a specific module      |      In this last section, you can specify the probability *p<sub>j</sub>* of a module of interest together with a particular sample size, to calculate a curve showing the probability for a module to occur *k* times (in function of *k*).    \n"
      },
      "source": "https://raw.githubusercontent.com/kirstvh/BioCCP/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/kirstvh/BioCCP/tree/main/docs"
      },
      "technique": "file_exploration"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/kirstvh/BioCCP/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://mybinder.org/v2/gh/kirstvh/PlutoNotebooks/main?urlpath=pluto/open?path=/home/jovyan/notebooks/BioCCP_Interactive_Notebook.jl"
      },
      "source": "https://raw.githubusercontent.com/kirstvh/BioCCP/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://mybinder.org/v2/gh/kirstvh/PlutoNotebooks/main?urlpath=pluto/open?path=/home/jovyan/notebooks/BioCCP_Case_Study.jl"
      },
      "source": "https://raw.githubusercontent.com/kirstvh/BioCCP/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/kirstvh/BioCCP.jl/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "kirstvh/BioCCP.jl"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "BioCCP.jl : Collecting Coupons in combinatorial biotechnology"
      },
      "source": "https://raw.githubusercontent.com/kirstvh/BioCCP/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "identifier": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://doi.org/10.5281/zenodo.5547738"
      },
      "source": "https://raw.githubusercontent.com/kirstvh/BioCCP/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9600031279551381,
      "result": {
        "original_header": "Intro",
        "type": "Text_excerpt",
        "value": "<p align=\"left\">\n  <img url=\"https://github.com/kirstvh/BioCCP.jl/main/BioCCP_img.png\" width=\"250\"/>\n</p> \n"
      },
      "source": "https://raw.githubusercontent.com/kirstvh/BioCCP/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9827108741145485,
      "result": {
        "original_header": "1. Report-generating Pluto notebook",
        "type": "Text_excerpt",
        "value": ">  (\\*) \n>  *When exact probabilities are known*, define your custom module probability/abundance vector or load them in the notebook from an external file.\n>  *When probabilities and/or their distribution are unknown*, the user can either:\n > >  1) Assume the probabilities of all modules to be equal (uniform distribution), or\n > >  2) Assume the module probabilities to follow *Zipf's law*, specifying the ratio p<sub>max</sub>/p<sub>min</sub>, or\n > >  3) Assume the histogram of the module probabilities to behave like a *bell curve*, specifying the ratio p<sub>max</sub>/p<sub>min</sub>    \n"
      },
      "source": "https://raw.githubusercontent.com/kirstvh/BioCCP/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/kirstvh/BioCCP.jl/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2021 Kirsten Van Huffel\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/kirstvh/BioCCP/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kirstvh/BioCCP/main/BioCCP_scheme.png"
      },
      "source": "https://raw.githubusercontent.com/kirstvh/BioCCP/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "BioCCP.jl"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "kirstvh"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Julia",
        "size": 886942,
        "type": "Programming_language",
        "value": "Julia"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kirstvh/BioCCP/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "kirstvh",
          "type": "User"
        },
        "date_created": "2021-10-11T16:13:57Z",
        "date_published": "2021-10-11T16:29:17Z",
        "description": "- Improved efficiency of BioCCP functions\r\n- Software errors solved\r\n- Updated and cleaned up notebook files",
        "html_url": "https://github.com/kirstvh/BioCCP.jl/releases/tag/v0.1.1",
        "name": "v0.1.1",
        "release_id": 51154975,
        "tag": "v0.1.1",
        "tarball_url": "https://api.github.com/repos/kirstvh/BioCCP.jl/tarball/v0.1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/kirstvh/BioCCP.jl/releases/51154975",
        "value": "https://api.github.com/repos/kirstvh/BioCCP.jl/releases/51154975",
        "zipball_url": "https://api.github.com/repos/kirstvh/BioCCP.jl/zipball/v0.1.1"
      },
      "technique": "GitHub_API"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Execute functions in Julia",
        "parent_header": [
          "BioCCP.jl : Collecting Coupons in combinatorial biotechnology",
          "Getting started"
        ],
        "type": "Text_excerpt",
        "value": "&emsp; **(1)** &emsp; [Install Julia](https://julialang.org/downloads/) \n\n&emsp; **(2)** &emsp; Install BioCCP in the Julia REPL:\n\n    using Pkg; Pkg.add(\"BioCCP\")\n    \n&emsp; **(3)** &emsp; Load the BioCCP package:\n\n    using BioCCP\n    \nNow you are ready for executing BioCCP functions in the Julia REPL.\n\n"
      },
      "source": "https://raw.githubusercontent.com/kirstvh/BioCCP/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Run the Pluto notebooks locally",
        "parent_header": [
          "BioCCP.jl : Collecting Coupons in combinatorial biotechnology",
          "Getting started"
        ],
        "type": "Text_excerpt",
        "value": "Additionally, for using the Pluto notebooks, following steps need to be taken:\n\n&emsp;&emsp; In the Julia REPL, hit the following command to install the [Pluto package](https://github.com/fonsp/Pluto.jl):\n  \n    using Pkg; Pkg.add(name=\"Pluto\", version=\"0.16.1\")\n\n&emsp;&emsp; Then start Pluto in the Julia REPL:\n\n    using Pluto; Pluto.run()\n    \n&emsp;&emsp; Finally, open the notebook file ([report-generating notebook](/notebooks/BioCCP_Interactive_Notebook.jl) or [case study notebook](/notebooks/BioCCP_Case_Study.jl)).\n\n"
      },
      "source": "https://raw.githubusercontent.com/kirstvh/BioCCP/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-06 05:30:40",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 6
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "2. Case study Pluto notebook",
        "parent_header": [
          "BioCCP.jl : Collecting Coupons in combinatorial biotechnology",
          "Pluto notebooks"
        ],
        "type": "Text_excerpt",
        "value": "The [second Pluto notebook](/notebooks/BioCCP_Case_Study.jl) contains two case studies, illustrating the application of the BioCCP.jl package to real biological problems, more specifically:\n\n**(1)** &emsp; Studying the required sample size and related statistics for a genome-wide CRISPR experiment, based on a [study from Chen *et al.* (2015)](https://doi.org/10.1016/j.cell.2015.02.038) concerning tumour research in mouse models.\n\n\n**(2)** &emsp; Determining coverage of a combinatorial protein engineering experiment, based on a [study from Duyvejonck *et al.* (2021)](https://doi.org/10.3390/antibiotics10030293) focusing on the development of endolysins as alternative antibiotics.\n\n\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/kirstvh/BioCCP/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Launch Pluto notebook from Browser",
        "parent_header": [
          "BioCCP.jl : Collecting Coupons in combinatorial biotechnology",
          "Getting started"
        ],
        "type": "Text_excerpt",
        "value": "The Pluto notebooks can be launched directly from your browser using Binder (no installation of Julia/packages required, however, the runtime will be significantly longer compared to using Pluto locally): \n\n- Report-generating Pluto notebook: &emsp; [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/kirstvh/PlutoNotebooks/main?urlpath=pluto/open?path=/home/jovyan/notebooks/BioCCP_Interactive_Notebook.jl)\n\n- Case study Pluto notebook:&emsp; &emsp; &emsp; &emsp;[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/kirstvh/PlutoNotebooks/main?urlpath=pluto/open?path=/home/jovyan/notebooks/BioCCP_Case_Study.jl)  &#8594; To skip the run time and have immediate access to the results, [this link](https://kirstvh.github.io/BioCCP_Case_Study_html) provides an html file of the executed case study notebook.\n\n"
      },
      "source": "https://raw.githubusercontent.com/kirstvh/BioCCP/main/README.md",
      "technique": "header_analysis"
    }
  ]
}