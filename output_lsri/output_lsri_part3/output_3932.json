{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation and further information",
        "parent_header": [
          "CATAStrophy"
        ],
        "type": "Text_excerpt",
        "value": "The CATAStrophy method and trophic classification systems is described [here](https://doi.org/10.3389/fmicb.2019.03088):\n\nJames K. Hane, Jonathan Paxman, Darcy A. B. Jones, Richard P. Oliver and Pierre de Wit (2020). \"CATAStrophy\", a Genome-Informed Trophic Classification of Filamentous Plant Pathogens \u2013 How Many Different Types of Filamentous Plant Pathogens Are There? _Frontiers in Microbiology_. doi: [10.3389/fmicb.2019.03088](https://doi.org/10.3389/fmicb.2019.03088)\n\nFor any questions about the method or interpreting results, please email James Hane (james.hane@curtin.edu.au).\nFor any technical questions or bug reports please raise an issue on GitHub, or email us if you don't want to create a GitHub account.\n\n"
      },
      "source": "https://raw.githubusercontent.com/ccdmb/catastrophy/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ccdmb/catastrophy"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-12-09T06:29:59Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-08-29T11:10:46Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CATAStrophy predicts filamentous plant pathogen lifestyle characteristics based on their CAZyme composition."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9749624868610165,
      "result": {
        "original_header": "CATAStrophy",
        "type": "Text_excerpt",
        "value": "CATAStrophy is a classification method for describing the lifestyles/trophic characteristics\nof filamentous plant pathogens using carbohydrate-active enzymes (CAZymes).\nThe name CATAStrophy is a backronym portmanteau hybrid where \"CATAS\" means\nCAZyme Assisted Training And Sorting. \nCATAStrophy takes HMMER3 files from searches against the [dbCAN](http://bcb.unl.edu/dbCAN2/) CAZyme database\nas input, and returns pseudo-probabilities called the relative centroid distance (RCD) of trophic class memberships for each file. \nTo train these models, we performed principal component analysis (PCA) on the frequencies of CAZymes for a set of curated proteomes with literature support for their trophic lifestyles.\nFor each class in our classification system, we find the centre/geometric mean of the class in the first 16 principal components. \nNew proteomes are classified by transforming the CAZyme frequencies using the same PCA loadings as in the training set.\nWe then find the closest class center in PCA space, and set that RCD score to 1.\nThen for each of the other classes we find the distance between the new proteome and the class center divided (i.e. relative to) by the distance to the closest class center.\nIf a new proteome is equidistant between two class centroids and they are closer than any other class, then both RCD scores will be one, so the RCD method is a _kind_ of multi-label classifier.\nThis is useful when evaluating your organism, because it might have characteristics of multiple classes (or be so dissimilar to any class that the distance is meaningless). \n"
      },
      "source": "https://raw.githubusercontent.com/ccdmb/catastrophy/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8044882222717619,
      "result": {
        "original_header": "Using CATAStrophy",
        "type": "Text_excerpt",
        "value": "CATAStrophy uses results of [HMMER3](http://hmmer.org/) `hmmscan` searches against the dbCAN database.\nThe package includes a [pipeline which will download dbCAN and run HMMER3 for you](#using-the-catastrophy-pipeline),\nor you can run HMMER yourself either locally or via the dbCAN website and provide the files to CATAStrophy manually.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ccdmb/catastrophy/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8991551487840095,
      "result": {
        "original_header": "Database versions",
        "type": "Text_excerpt",
        "value": "CATAStrophy models are specific to the different versions of [dbCAN](http://bcb.unl.edu/dbCAN2/).\nCAZyme family frequencies are at the core of the CATAStrophy method, so adding, removing, or changing the database HMMs will necessarily affect the results.\nCATAStrophy will attempt to check for mismatched model versions and alert you, but could potentially give inaccurate results if a mismatch isn't detected. \n**It is very important that you match the database version with the CATAStrophy model.** \nTo specify the version of the model to use, include the `-m/--model`\nflag with one of the valid options (`v4`, `v5`, `v6`, `v7`, `v8`, `v9`, or `v10`; see `catastrophy -h` for the available model versions in your installation).\n```bash\ncatastrophy --model v7 -o my_catastrophy_results.csv my_dbcan_results.txt\n```\n \n> **NOTE:**\n> The dbCAN2 web-server will always search against the latest version of dbCAN.\n> To find the latest version number, go to <http://bcb.unl.edu/dbCAN2/download/Databases/> and find the file with the highest number with the pattern `dbCAN-HMMdb-V8.txt`.\n> If we haven't yet trained a model for the latest version of dbCAN please contact us.\n> Otherwise you may need to [run HMMER yourself](#running-dbcan-locally). \nThe CATAStrophy paper used version 6 of dbCAN, you may get slightly different results with different database versions. \n"
      },
      "source": "https://raw.githubusercontent.com/ccdmb/catastrophy/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9514981855216863,
      "result": {
        "original_header": "Output",
        "type": "Text_excerpt",
        "value": "Output will be as a tab-separated values file, with the columns for the filename, nomenclature, nomenclature class, and the RCD value.\nEach possible combination of label, nomenclature and class is listed in a [long format](https://en.wikipedia.org/wiki/Wide_and_narrow_data). \n\nYou can also output the principal components of your proteomes along with the training data samples to reproduce the scatterplots presented in the CATAStrophy paper.\nThis table is not written by default, but can be specified using the `--pca my_pcs.tsv`. \n| column name | column type | description |\n| :---------- | :-----      | :----       |\n| label       | string      | the label of your sample or the name of the proteome from the training data. |\n| nomenclature1 | string | The literature annotation of proteomes in the training data. According to nomenclature1 from the paper. New samples will have missing values '.' |\n| nomenclature2 | string | \" |\n| nomenclature3 | string | \" |\n| nomenclature1_pred | string | The main predicted nomenclature based on the RCD scores. |\n| nomenclature2_pred | string | \" |\n| nomenclature3_pred | string | \" |\n| nomenclature1_ancillary | Comma ceparated strings | Other predicted nomenclature1 classes with an RCD score > 0.8 |\n| nomenclature2_ancillary | Comma ceparated strings | \" |\n| nomenclature3_ancillary | Comma ceparated strings | \" |\n| PC1 | float | The value of the principal component for this proteome |\n| ... | float | \" |\n| PC16 | float | \" |\n \n"
      },
      "source": "https://raw.githubusercontent.com/ccdmb/catastrophy/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8558894634225598,
      "result": {
        "original_header": "Labels",
        "type": "Text_excerpt",
        "value": "Note that if you do use the label flag, the number of labels **must** be the same as the number of input files. \n\nIf you provide the `--label` as the last argument before the input positional arguments (`infiles`) you may need to use `--`\nto tell when you're done and that infiles should start.\nThis is because both `--label` and infiles can take multiple arguments.\n```bash\ncatastrophy -l mylabel1 mylabel2 -o results.csv infile1.txt infile2.txt  # Fine\ncatastrophy -o results.csv -l mylabel1 mylabel2 infile1.txt infile2.txt  # Dangerous\n\n# Do this instead to tell where labels stops and infiles starts.\ncatastrophy -o results.csv -l mylabel1 mylabel2 -- infile1.txt infile2.txt\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/ccdmb/catastrophy/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8969321685410868,
      "result": {
        "original_header": "Using the CATAStrophy pipeline",
        "type": "Text_excerpt",
        "value": "The CATAStrophy pipeline script captures all of the steps described in later sections.\nThis is the easiest way to run the pipeline locally, and can take many Fasta files. \n1) Verifies that input Fasta files won't cause errors when running HMMER.\n2) Downloads the specified version of dbCAN.\n3) Prepares the HMMER formatted database.\n4) Runs hmmscan in parallel (single node only, sorry) on all fasta files.\n5) Runs the CATAStrophy pipeline on the results, captuting all outputs and making labels pretty. \nThe program will raise an error early if there are weird characters in your fasta files.\nBasic errors such as non-standard amino acids (OBJZ etc) or gaps can be \"fixed\" with the `--correct` flag.\nEssentially, gaps, spaces, and terminating stops are removed, and non-standard characters and internal stops are replaced with 'X'. \n"
      },
      "source": "https://raw.githubusercontent.com/ccdmb/catastrophy/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.970158191405846,
      "result": {
        "original_header": "Command line arguments",
        "type": "Text_excerpt",
        "value": "| Parameter | default | description |\n| :---      | :---    | :---        |\n| `-h`/`--help` | flag | Show help text and exit. |\n| `--version` | flag | Show program version information and exit. |\n| `-f`/`--format` | \"hmmer_domtab\" | The format that the input is provided in. All input files must be in the same format. HMMER raw (hmmer_domtab) and domain table (hmmer_domtab, default) formatted files are accepted. Files processed by the dbCAN formatter `hmmscan-parser.sh` are also accepted using the `dbcan` option. |\n| `-l`/`--label` | filenames | Label to give the prediction for the input file(s). Specify more than one label by separating them with a space. The number of labels should be the same as the number of input files.  By default, the filenames are used as labels. |\n| `-o`/`--outfile` | stdout | File path to write tab delimited output to. |\n| `-c`/`--counts` | Not written | Write the CAZyme counts to this tab delimited file. |\n| `-p`/`--pca` | Not written | Write the PCA results and best scoring RCD classes to this tab separated file. This will include the training data results in the table for comparison. Useful for plotting your data.\n| `-m`/`--model` | latest | The version of the model (matching the dbCAN database version) to use. The latest version is used by default. See `catastrophy -h` for list of valid options. | \n"
      },
      "source": "https://raw.githubusercontent.com/ccdmb/catastrophy/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9570935331668348,
      "result": {
        "original_header": "Changes",
        "type": "Text_excerpt",
        "value": "- V0.1.0: `hmmer_domtab` is now the default input format, as dbCAN now outputs that for the HMMER results. Added a warning about proteomes with zero counts.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ccdmb/catastrophy/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 1. Download dbCAN.",
        "parent_header": [
          "CATAStrophy",
          "Running HMMER locally"
        ],
        "type": "Text_excerpt",
        "value": "We first need to download the dbCAN database (HMMs) to search against.\nYou will need to make sure that you download a version of dbCAN that it compatible with CATAStrophy.\nTo get a list of databases versions that is supported, you can use the `--help` flag and look for the `--nomenclature` help section.\n\n```bash\ncatastrophy --help\n```\n\nOnce you've identified the version you want to use, download the database from <http://bcb.unl.edu/dbCAN2/download/Databases/>.\nAlternatively you can use the bash commands below to download it, setting the value of `DBCAN_VERSION` to the desired version (NB. the full url **must** match one of the file names in <http://bcb.unl.edu/dbCAN2/download/Databases/>).\n\n\n```bash\nDBCAN_VERSION=\"V10\"\n\nmkdir -p ./data\nwget -qc -P ./data \"http://bcb.unl.edu/dbCAN2/download/Databases/dbCAN-HMMdb-${DBCAN_VERSION}.txt\"\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/ccdmb/catastrophy/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ccdmb/catastrophy/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ccdmb/catastrophy/master/CATAStrophy.ipynb"
      },
      "source": "https://raw.githubusercontent.com/ccdmb/catastrophy/master/CATAStrophy.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ccdmb/catastrophy/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ccdmb/catastrophy"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CATAStrophy"
      },
      "source": "https://raw.githubusercontent.com/ccdmb/catastrophy/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ccdmb/catastrophy/master/src/catas/data/hmmscan-parser.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://colab.research.google.com/assets/colab-badge.svg"
      },
      "source": "https://raw.githubusercontent.com/ccdmb/catastrophy/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Installing python packages\n\nCATAStrophy is a python program which can be used as a python module or via a command-line interface.\nIt can be installed from PyPI <https://pypi.org/project/catastrophy/> using [pip](https://pip.pypa.io/en/stable/).\n\nIt is tested to work with python 3.6+, and it depends on [numpy](http://www.numpy.org/) and [BioPython](https://biopython.org/).\nThe install procedures below will install these for you automatically.\n\n## Typical install with pip\n\n```bash\npython3 -m pip install --user catastrophy\n```\n\nThe `--user` flag tells pip to install to a user directory rather than a system directory (e.g. somewhere under `/usr/` or `Program Files`).\nTo install as root or in Windows you can omit the `--user` flag, but you may need root or administrator permission.\n\nNote that the `--user` subdirectory containing scripts (`<userdir>/bin` on linux/mac or `<userdir>\\Scripts` on Windows), may not automatically be on your path.\nThe user directory installed to is given by the python command `import site; print(site.USER_BASE)`.\nGenerally on linux this is `~/.local`.\nYou can change this directory by setting the `$PYTHONUSERBASE` environment variable.\nYou can then add the `Script` or `bin` subdirectory to your `$PATH` environment variable \n(e.g. [Linux and MacOS](https://stackoverflow.com/questions/14637979/how-to-permanently-set-path-on-linux-unix), or [Windows](https://stackoverflow.com/questions/9546324/adding-directory-to-path-environment-variable-in-windows), or just google it ;) ).\n\nPower users may also be interested in the `pip install --prefix` flag, but this will also require you to update your `$PYTHONPATH` environment variable or use [`.pth` files](https://docs.python.org/3/library/site.html) .\nNonetheless, it's useful for [module](http://modules.sourceforge.net/) software management.\n\n\n## Installing in a `virtualenv`\n\nGenerally it's a good idea to install python packages in a python [virtual environment](https://virtualenv.pypa.io/en/stable/)\nThis protects versions of packages required for your operating system to work, from being updated (potentially breaking older code).\n\nHere's a basic rundown of the `virtualenv` workflow.\n\n```bash\n# If it isn't installed already run one of these\n# Try to use the system package managers if possible to avoid mixing up system dependencies.\n# Mac users may be interested in homebrew.\nsudo python3 -m pip install virtualenv\nsudo apt install python3-virtualenv # Ubuntu and probably Debian\nsudo dnf install python3-virtualenv # Fedora 24+\n\n# Change dir to where you want the envronment to live (usually a project dir).\ncd my_project\n\n# Create a virtualenv in a folder ./env\n# python3 can be substituted with your version of python.\npython3 -m venv env\n\n# Loads the virtualenv (essentially this changes PYTHONPATH and some other environment variables).\nsource env/bin/activate\n\nwhich python3\n# ./env/bin/python3\n\npython3 -m pip install catastrophy\n\ncatastrophy --help\n```\n\nThis time we don't need to use sudo or tell pip to install as `--user` because it will install all files in the `./env` folder.\nNote however, that whenever you start a new terminal and want to use this environment you'll need to repeat the `source env/bin/activate`.\nIf you want to exit the virtual environment, you can type `deactivate` on the command line or just start a new terminal.\n\n## Installing from git repository.\n\nYou can also install directly from the git repository to get the latest and greatest features.\nWe use [git-lfs](https://git-lfs.github.com/) to handle some filetypes, so you'll need to install that before running anything below.\n\nTo install most recent commit on the `master` branch:\n\n```bash\npython3 -m venv env\nsource env/bin/activate\npython3 -m pip install git+git@bitbucket.org:ccdm-curtin/catastrophy.git\n```\n\nNote that we installed the package in a virtual environment, which is always recommended.\nSee the section above for more details.\n\nYou can also clone the repository yourself and then install from that.\n\n```bash\ngit clone https://<your_username>@bitbucket.org/ccdm-curtin/catastrophy.git ./catastrophy\ncd catastrophy\n\npython3 -m venv env\nsource env/bin/activate\n\npython3 -m pip install .\n```\n\nThis is particularly useful if you want to modify the code.\nYou can install the module in a way that allows changes you make to be automatically installed.\n\n```bash\n# Use this after cloning.\npython3 -m venv env\nsource env/bin/activate\n\npython3 -m pip install -e \".[dev,test]\"\n```\n\nThe `[dev,test]` thing just installs some extra packages used for testing etc.\n"
      },
      "source": "https://raw.githubusercontent.com/ccdmb/catastrophy/master/INSTALL.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installing",
        "parent_header": [
          "CATAStrophy"
        ],
        "type": "Text_excerpt",
        "value": "CATAStrophy is a python program which can be used as a python module or via a command-line interface.\nIt can be installed from PyPI <https://pypi.org/project/catastrophy/> using [pip](https://pip.pypa.io/en/stable/), or from anaconda <https://anaconda.org/darcyabjones/catastrophy> using [conda](https://docs.conda.io/en/latest/).\n\nUsers that are less familiar with python and pip might like to read our [INSTALL.md](https://github.com/ccdmb/catastrophy/blob/master/INSTALL.md) document which explains things in more detail, including where things will be installed and how to use virtual environments.\nFor details on installing and using conda see their [getting-started guide](https://docs.conda.io/projects/conda/en/latest/user-guide/getting-started.html).\n\nTo install CATAStrophy and dependencies with pip:\n\n```bash\n# Windows users may need to use \"Python\" instead of \"python3\"\npython3 -m pip install --user catastrophy\n```\n\nTo install CATAStrophy and dependencies using conda:\n\n```bash\nconda install -c darcyabjones catastrophy\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ccdmb/catastrophy/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 2. Prepare the dbCAN HMM database",
        "parent_header": [
          "CATAStrophy",
          "Running HMMER locally"
        ],
        "type": "Text_excerpt",
        "value": "Now we can convert the file containing HMM definitions into a HMMER database.\n\n```bash\nhmmpress ./data/dbCAN-HMMdb-V10.txt\n```\n\nThis will create several files at the same location as the `.txt` file, so it's good to do this\ninside a separate folder (as we've done here).\n\n"
      },
      "source": "https://raw.githubusercontent.com/ccdmb/catastrophy/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9216834342898509,
      "result": {
        "original_header": "CATAStrophy",
        "type": "Text_excerpt",
        "value": "\n**NEW**: Users with a google account can now run the whole pipeline easily using our [Google colab notebook](https://colab.research.google.com/github/ccdmb/catastrophy/blob/master/CATAStrophy.ipynb).\nThis offers a relatively user friendly click-interface to the pipeline (i.e. no coding experience or software installation required). \n"
      },
      "source": "https://raw.githubusercontent.com/ccdmb/catastrophy/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9901605328184498,
      "result": {
        "original_header": "Using CATAStrophy",
        "type": "Text_excerpt",
        "value": "CATAStrophy uses results of [HMMER3](http://hmmer.org/) `hmmscan` searches against the dbCAN database.\nThe package includes a [pipeline which will download dbCAN and run HMMER3 for you](#using-the-catastrophy-pipeline),\nor you can run HMMER yourself either locally or via the dbCAN website and provide the files to CATAStrophy manually.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ccdmb/catastrophy/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9680955949535226,
      "result": {
        "original_header": "Database versions",
        "type": "Text_excerpt",
        "value": "To specify the version of the model to use, include the `-m/--model`\nflag with one of the valid options (`v4`, `v5`, `v6`, `v7`, `v8`, `v9`, or `v10`; see `catastrophy -h` for the available model versions in your installation).\n```bash\ncatastrophy --model v7 -o my_catastrophy_results.csv my_dbcan_results.txt\n```\n \n> **NOTE:**\n> The dbCAN2 web-server will always search against the latest version of dbCAN.\n> To find the latest version number, go to <http://bcb.unl.edu/dbCAN2/download/Databases/> and find the file with the highest number with the pattern `dbCAN-HMMdb-V8.txt`.\n> If we haven't yet trained a model for the latest version of dbCAN please contact us.\n> Otherwise you may need to [run HMMER yourself](#running-dbcan-locally). \n"
      },
      "source": "https://raw.githubusercontent.com/ccdmb/catastrophy/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9559411765586874,
      "result": {
        "original_header": "Output",
        "type": "Text_excerpt",
        "value": "For example, part of the table might look like this:\n```bash\ncatastrophy infile1.txt infile2.txt\n```\n \n| label       | nomenclature | class | value |\n| :---        | ---:         | ---:  | ---:  |\n| infile1.txt | nomenclature1 | saprotroph | 0.9 |\n| infile2.txt | nomenclature1 | monomertroph1 | 0.2 | \n"
      },
      "source": "https://raw.githubusercontent.com/ccdmb/catastrophy/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9222569476626998,
      "result": {
        "original_header": "Labels",
        "type": "Text_excerpt",
        "value": "To give it a nicer label you can run this.\n```bash\ncatastrophy -l prettier_label -o my_catastrophy_results.csv my_dbcan_results.txt\n```\n \nTo label multiple input files you can again supply the label flag with the space separated labels.\n```bash\ncatastrophy -l label1 label2 -o my_catastrophy_results.csv dbcan_1.txt dbcan_2.txt\n```\n \n\nIf you provide the `--label` as the last argument before the input positional arguments (`infiles`) you may need to use `--`\nto tell when you're done and that infiles should start.\nThis is because both `--label` and infiles can take multiple arguments.\n```bash\ncatastrophy -l mylabel1 mylabel2 -o results.csv infile1.txt infile2.txt  # Fine\ncatastrophy -o results.csv -l mylabel1 mylabel2 infile1.txt infile2.txt  # Dangerous\n\n# Do this instead to tell where labels stops and infiles starts.\ncatastrophy -o results.csv -l mylabel1 mylabel2 -- infile1.txt infile2.txt\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/ccdmb/catastrophy/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 1.0,
      "result": {
        "original_header": "Using the CATAStrophy pipeline",
        "type": "Text_excerpt",
        "value": "The pipeline expects `hmmscan` and `hmmpress` from [HMMER](http://hmmer.org/) to be installed in your `$PATH`.\nYou can also specify the full paths to the executables with the arguments `--hmmscan_path /path/hmmscan --hmmpress_path /path/hmmpress`.\nThe easiest way to install these programs is using conda: `conda install -c bioconda hmmer`, or on some Ubuntu or Debian linux distros you can install with apt: `sudo apt install hmmer`. \n"
      },
      "source": "https://raw.githubusercontent.com/ccdmb/catastrophy/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9396351529326875,
      "result": {
        "original_header": "Command line arguments",
        "type": "Text_excerpt",
        "value": "Only the input files are required and are provided as positional arguments.\nOther optional parameters are below: \n\nBasic usage:\n```bash\n# To stdout aka \"-o -\"\ncatastrophy infile1.txt infile2.txt > results.csv\n\n# To specify an output filename\ncatastrophy -o results.csv infile1.txt infile2.txt\n\n# To take input from stdin use a \"-\"\ncat infile1.txt | catastrophy - > results.csv\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/ccdmb/catastrophy/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8384983919970168,
      "result": {
        "original_header": "Labels",
        "type": "Text_excerpt",
        "value": "To give it a nicer label you can run this.\n```bash\ncatastrophy -l prettier_label -o my_catastrophy_results.csv my_dbcan_results.txt\n```\n \nTo label multiple input files you can again supply the label flag with the space separated labels.\n```bash\ncatastrophy -l label1 label2 -o my_catastrophy_results.csv dbcan_1.txt dbcan_2.txt\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/ccdmb/catastrophy/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9094838541990489,
      "result": {
        "original_header": "Command line arguments",
        "type": "Text_excerpt",
        "value": "\nBasic usage:\n```bash\n# To stdout aka \"-o -\"\ncatastrophy infile1.txt infile2.txt > results.csv\n\n# To specify an output filename\ncatastrophy -o results.csv infile1.txt infile2.txt\n\n# To take input from stdin use a \"-\"\ncat infile1.txt | catastrophy - > results.csv\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/ccdmb/catastrophy/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ccdmb/catastrophy/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bioinformatics, fungi, pathogen, pathogenomics, trophic-interactions"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "BSD 3-Clause \"New\" or \"Revised\" License",
        "spdx_id": "BSD-3-Clause",
        "type": "License",
        "url": "https://api.github.com/licenses/bsd-3-clause",
        "value": "https://api.github.com/licenses/bsd-3-clause"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Copyright (c) {year}, {name}\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of {project_name} nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
      },
      "source": "https://raw.githubusercontent.com/ccdmb/catastrophy/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ccdmb/catastrophy/master/catastrophy_hero.png"
      },
      "source": "https://raw.githubusercontent.com/ccdmb/catastrophy/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "catastrophy"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "ccdmb"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 108262,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 15894,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 1162,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ccdmb/catastrophy/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "darcyabjones",
          "type": "User"
        },
        "date_created": "2022-07-25T06:43:27Z",
        "date_published": "2022-07-25T06:47:24Z",
        "description": "Adds explicit check for file format.\r\nIf the user specifies hmmer_text and the file is e.g. domtab, the biopython parser will just not yield any lines.\r\nThis causes the number of cazyme counts to be all zero.\r\n\r\nI've added explicit checks to make sure that the format is correct and checks for zero-count files to warn people or raise an error if the format appears to be wrong.\r\n\r\nAlso added google colab link to make things marginally easier.",
        "html_url": "https://github.com/ccdmb/catastrophy/releases/tag/0.1.0",
        "name": "0.1.0",
        "release_id": 72724454,
        "tag": "0.1.0",
        "tarball_url": "https://api.github.com/repos/ccdmb/catastrophy/tarball/0.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/ccdmb/catastrophy/releases/72724454",
        "value": "https://api.github.com/repos/ccdmb/catastrophy/releases/72724454",
        "zipball_url": "https://api.github.com/repos/ccdmb/catastrophy/zipball/0.1.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "darcyabjones",
          "type": "User"
        },
        "date_created": "2021-10-02T10:58:00Z",
        "date_published": "2021-10-02T11:00:43Z",
        "html_url": "https://github.com/ccdmb/catastrophy/releases/tag/0.0.5",
        "release_id": 50675963,
        "tag": "0.0.5",
        "tarball_url": "https://api.github.com/repos/ccdmb/catastrophy/tarball/0.0.5",
        "type": "Release",
        "url": "https://api.github.com/repos/ccdmb/catastrophy/releases/50675963",
        "value": "https://api.github.com/repos/ccdmb/catastrophy/releases/50675963",
        "zipball_url": "https://api.github.com/repos/ccdmb/catastrophy/zipball/0.0.5"
      },
      "technique": "GitHub_API"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running CATAStrophy",
        "parent_header": [
          "CATAStrophy",
          "Using CATAStrophy"
        ],
        "type": "Text_excerpt",
        "value": "To run CATAStrophy you need to supply the input files and where to put the output.\nEither the plain text (stdout) or \"domain table\" (`--domtblout`) outputs can be used.\n\nThe easiest way to get a HMMER3 plain text file is to annotate your proteome using\nthe dbCAN online tool at <http://bcb.unl.edu/dbCAN2/blast.php> (make sure the HMMER tool is selected to run), and\nsave the HMMER3 raw text (Select the HMMER tab, then \"Download Raw HMMER output\". Note that as of 2022-07-25 this is actually the domain-table output from HMMER3) results locally.\nAlternatively you can [run HMMER locally](#running-HMMER-locally), or use the [pipeline script](#using-the-catastrophy-pipeline) which will do this for you.\n\n> **WARNING**: Before you run any dbCAN searches, please [read the section below on database versions](https://github.com/ccdmb/catastrophy#database-versions).\n\nAssuming that you have this file locally you can run CATAStrophy like so:\n\n```bash\ncatastrophy -f hmmer_domtab -o my_catastrophy_results.csv my_dbcan_results.txt\n```\n\nThe input files are provided as positional arguments after all of the optional parameters.\nThe output will be a tab-delimited file (which you can open in excel) containing RCD results for each nomenclature and trophic class for each of the input files.\nThe `-f/--format` flag specified the format of the input file and defaults to `hmmer_domtab`.\n\n\nMultiple input files can be provided using spaces to separate them:\n\n```bash\ncatastrophy -o my_catastrophy_results.csv dbcan_1.txt dbcan_2.txt\n```\n\nNote that standard bash \"globbing\" patterns expand into a space delimited array,\nso you can easily use `*` or subshells if you like (eg. `$(find . -type f -name *.txt)` etc).\n\n"
      },
      "source": "https://raw.githubusercontent.com/ccdmb/catastrophy/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Running HMMER locally",
        "parent_header": [
          "CATAStrophy"
        ],
        "type": "Text_excerpt",
        "value": "If you have lots of proteomes to run or CATAStrophy hasn't been trained on the latest version of dbCAN yet, then you probably don't want to use the web interface.\nIn that case you can run the dbCAN pipeline locally using [HMMER](http://hmmer.org/).\n\nThe following steps assume that you've installed [HMMER](http://hmmer.org/) and are using a unix-like OS.\n"
      },
      "source": "https://raw.githubusercontent.com/ccdmb/catastrophy/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 3. Search your proteomes against the dbCAN HMMs.",
        "parent_header": [
          "CATAStrophy",
          "Running HMMER locally"
        ],
        "type": "Text_excerpt",
        "value": "Now we can run HMMER `hmmscan` to find matches to the dbCAN HMMs.\nFor demonstration, we'll save both the domain table and plain text outputs.\n\n```bash\nhmmscan --domtblout my_fasta_hmmer.csv ./data/dbCAN-HMMdb-V10.txt my_fasta.fasta > my_fasta_hmmer.txt\n```\n\nThe domain table is now in the file `my_fasta_hmmer.csv` and the plain hmmer\ntext output is in `my_fasta_hmmer.txt`.\nEither one of these files is appropriate for use with CATAStrophy (just\nremember to specify the `--format` flag).\n\n"
      },
      "source": "https://raw.githubusercontent.com/ccdmb/catastrophy/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 4. Classify your proteomes using CATAStrophy.",
        "parent_header": [
          "CATAStrophy",
          "Running HMMER locally"
        ],
        "type": "Text_excerpt",
        "value": "Now we can finally find out what CATAStrophy thinks our organism is!\n\nTo use the files created in step 3, you can run either of the following commands.\nRemember to match the version of dbCAN with the model version in catastrophy.\n\n```bash\ncatastrophy --model v10 --format hmmer_domtab -o my_catastrophy_results.csv my_fasta_hmmer.csv\n\n# or\ncatastrophy --model v10 --format hmmer_text -o my_catastrophy_results.csv my_fasta_hmmer.txt\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/ccdmb/catastrophy/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-06 14:38:01",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 6
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ]
}