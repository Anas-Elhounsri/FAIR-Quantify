{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "References:",
        "parent_header": [
          "VirStrain   <img src=\"logo.png\" width=\"250\" title=\"VirStrain\">"
        ],
        "type": "Text_excerpt",
        "value": "how to cite this tool:\n```\nLiao, H., Cai, D. & Sun, Y. VirStrain: a strain identification tool for RNA viruses. Genome Biol 23, 38 (2022). https://doi.org/10.1186/s13059-022-02609-x\n```\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/liaoherui/VirStrain/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/liaoherui/VirStrain"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-11-02T06:44:26Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-05-28T09:38:18Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "An RNA virus strain-level identification tool for short reads."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9018098104611914,
      "result": {
        "original_header": "Recommanded Version: V1.17",
        "type": "Text_excerpt",
        "value": "<details>\n<summary> Click here to check the log of all updates </summary>\n  \n#### *__[Update - 2022 - 02 - 05]__* :  <BR/>\n \n* *V1.12: VirStrain is able to take gzipped FASTQs as input now! <BR/>* \n* *Update a new parameter '-s' that allows sorting the most possible strain by matches to the sites.* \n* *The web server extension of VirStrain - StrainDetect (https://strain.ee.cityu.edu.hk) is online now!* \n* *V1.13: Fix a database generation bug in V1.12 of bioconda version! <BR/>*\n \n</details>\n  \n#### *__[Update - 2023 - 09 - 05]__* :  <BR/> \n* *A new function that allows comprehensive (including **45619** strains of **28** viral species) viral strain identification for assembled contigs is available!  <BR/>* \n#### *__[Update - 2024 - 02 - 27]__* :  <BR/> \n* *Tem_Vs files are named randomly (only GitHub version) and links for pre-built databases are provided. <BR/>* \n#### *__[Update - 2024 - 05 - 28]__* :  <BR/> \n* *V1.17: Add the parameter '-v' to show the version information. <BR/>*\n    \n---------------------------------------------------------------------------\n### Dependencies:\n* Python >=3.6 (3.7.3 is recommanded and 3.9 is not supprted now!)\n* Perl\n* Required python package: networkx==2.4, numpy==1.17.3, pandas==1.0.1, biopython==1.74, Plotly==3.10.0\n* **Bowtie2 (for virstrain version >= V1.17)** \n#### *__[Update - 2021 - Nov]__* :  <BR/>\n \n* *The databases of two DNA viruses (HBV and HCMV) used in the paper can be downloaded now! <BR/>*\n`sh download_dna.sh`<BR/>\n* *Besides, a larger database with more SARS-CoV-2 strains (see Supplementary Section 1.1 in the paper) can also be downloaded now. <BR/>*\n`sh download_scov2_big.sh`<BR/>  \nYou can also build the VirStrain database with your own genomes, the mannual is written in Usage section. \n## Pre-built databases download\nIn the event that the download scripts fail to retrieve the pre-built database, we also provide Google drive inks to access all pre-built databases. The table below offers information about the public pre-built databases. Users can download these databases and use them to identify viral strains directly.\nName   |\tDescription   |\tDownload link\n------------ | ------------- | ------------- \nVirStrain_DB.tar.gz |  Databases containing SCOV2, H1N1, and HIV viral strains used in the paper | [Google drive](https://drive.google.com/file/d/1XYqr64tJec7VeDBD0Xc9cuUZqmawoty6/view?usp=sharing)\nSCOV2_newBig.tar.gz |  Databases containing more SCOV2 viral strains used in the paper   | [Google drive](https://drive.google.com/file/d/1qAHjVADTiV3G00YekqystUXT2e7Ho2kq/view?usp=sharing)\nVirStrain_DNA_DB.tar.gz  | Databases containing two DNA viral (HBV and HCMV) strains used in the paper | [Google drive](https://drive.google.com/file/d/1INmaOpBKYFXj1gAngG6CikT7xVjmxsGZ/view?usp=sharing)\nVirStrain_contig_DB.tar.gz | Contig-level database | [Google drive](https://drive.google.com/file/d/1oj-86Njz5mnY6djbhdv23a9r9OH5oqog/view?usp=sharing) \n### Use VirStrain to identify RNA virus strains in short reads. \n### *__[Update - 2023 - Sep]__* Use VirStrain_contig to identify viral strains for assembled contigs. \nIf you want to convert pre-built VirStrain databases for reads (e.g. VirStrain_DB/SCOV2 and VirStrain_DB/H1N1) to database for contigs. Then you can try the command below: \n  `python VirStrain_build.py -i <Input_MSA> -d <Database_Dir>`<BR/>\n  \n   <b>Important note</b>: \",\" and \"|\" are not allowed in your <Input_MSA>. For example, \">Strain_A, 2022\" or \">Strain_A|2022\" is not allowed but \">Strain_A_2022\" is allowed.\n  \n  For small-scale strains (<1000 input strains) or viruses with large genome sizes (like HCMV), you can use manual-covering function to cover more useful sites. For example, in our experiment, we used \"-s 0.4\" for 328 HCMV strains. Usually, 0.2~0.6 shoule be a suitable range for the parameter \"-s\". However, if you only have very few strains, like 3 strains, you can also use a greater value like \"-s 0.8\".\n  \n  `python VirStrain_build.py -i <Input_MSA> -d <Database_Dir> -s 0.4`<BR/> \n  \n  Besides, if you only want to use SNV sites from \"x\" to \"y\" (eg. x=500 to y=1000), then you can add the parameter `-r`.\n  \n  `python VirStrain_build.py -i <Input_MSA> -d <Database_Dir> -s 0.4 -r 500-1000`<BR/>\n  \n  Note: The format of input MSA should be same as the format of MSA generated by Mafft (https://mafft.cbrc.jp/alignment/software/).<BR/>\n  \n### Full command-line options \nThe output of VirStrain contains two files. The first is a report file in text format. This file contains all identified strains and their depth and site coverage, etc. The other file is an interactive HTML page to display the depth and uniqueness of sites.  \nYou can check the output file in the folder \"MT451123_Sim_PE\" in this repository. \nThe picture below displays an output example of a simulated data (Truth: MT451123.1). <BR/> \nExplaination about the four headers in the output of VirStrain\nHeader    |\tDescription\t\n------------ | ------------- \n**Most Possible strain*** | The most possible strain in the sequencing data detected by VirStrain.<BR/>(The strains with highest Vscore in the first iteraition.)\n**Other Possible strains*** | The other possible strain in the sequencing data detected by VirStrain.<BR/>(The strains with highest Vscore in the later iteraition, 10 mutation number can be a strong evidence for other possible strains according to our experiment result.)\nHighest Map Strains | The strain with maximum \"Covered SNV site/Total SNV site\" in the first iteration. For user's reference.\nTop 10 Score Strains | The top10 strain sorted by Vscore in the first iteration. <BR/>For user's reference, and also could be useful information to detect those low abundance strains which are highly similar to the high abundance strain (Eg, only one mutation number). \nExplaination about the columns in the output of VirStrain: \nColumn_name    |\tDescription\t\n------------ | ------------- \nStrain_ID |\tThe NCBI (or other public database) accession number of identified strain.\nCls_info | The cluster information of identified strain, eg: Cluster2830_2 -> belong Cluster2830, size=2.\nSubCls_info | The sub-cluster information of identified strain.\nVscore | The Vscore generated by VirStrain algorithm.\nTotal_Map_Rate | The covered sites out of total sites in the first iteration of VirStrain.\nValid_Map_Rate | The covered sites out of total sites in the remaining iteration of VirStrain.\nStrain_depth | The sequencing depth of identified strain predicted by VirStrain.\nStrain_info | The metadata of identified strains, such as region information and subtype, etc.\nSNV_freq | The SNV frequency of all sites. \n"
      },
      "source": "https://raw.githubusercontent.com/liaoherui/VirStrain/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Pre-built databases download",
        "parent_header": [
          "VirStrain   <img src=\"logo.png\" width=\"250\" title=\"VirStrain\">"
        ],
        "type": "Text_excerpt",
        "value": "In the event that the download scripts fail to retrieve the pre-built database, we also provide Google drive inks to access all pre-built databases. The table below offers information about the public pre-built databases. Users can download these databases and use them to identify viral strains directly.\nName   |\tDescription   |\tDownload link\n------------ | ------------- | ------------- \nVirStrain_DB.tar.gz |  Databases containing SCOV2, H1N1, and HIV viral strains used in the paper | [Google drive](https://drive.google.com/file/d/1XYqr64tJec7VeDBD0Xc9cuUZqmawoty6/view?usp=sharing)\nSCOV2_newBig.tar.gz |  Databases containing more SCOV2 viral strains used in the paper   | [Google drive](https://drive.google.com/file/d/1qAHjVADTiV3G00YekqystUXT2e7Ho2kq/view?usp=sharing)\nVirStrain_DNA_DB.tar.gz  | Databases containing two DNA viral (HBV and HCMV) strains used in the paper | [Google drive](https://drive.google.com/file/d/1INmaOpBKYFXj1gAngG6CikT7xVjmxsGZ/view?usp=sharing)\nVirStrain_contig_DB.tar.gz | Contig-level database | [Google drive](https://drive.google.com/file/d/1oj-86Njz5mnY6djbhdv23a9r9OH5oqog/view?usp=sharing)\n"
      },
      "source": "https://raw.githubusercontent.com/liaoherui/VirStrain/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/liaoherui/VirStrain/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/liaoherui/VirStrain/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "liaoherui/VirStrain"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "VirStrain   "
      },
      "source": "https://raw.githubusercontent.com/liaoherui/VirStrain/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/liaoherui/VirStrain/main/download.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/liaoherui/VirStrain/main/download_dna.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/liaoherui/VirStrain/main/download_contig_db.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/liaoherui/VirStrain/main/download_scov2_big.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/liaoherui/VirStrain/main/install_package.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/liaoherui/VirStrain/main/logo.png"
      },
      "source": "https://raw.githubusercontent.com/liaoherui/VirStrain/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/liaoherui/VirStrain/main/Output_fmt/report_simulate.png"
      },
      "source": "https://raw.githubusercontent.com/liaoherui/VirStrain/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "",
        "parent_header": [
          "VirStrain   <img src=\"logo.png\" width=\"250\" title=\"VirStrain\">",
          "Install (Linux or ubuntu only)"
        ],
        "type": "Text_excerpt",
        "value": "The first way to install VirStrain, is to use [bioconda](https://bioconda.github.io/).\nOnce you have bioconda environment installed, install package virstrain:\n\n\tconda install -c bioconda virstrain\n\nThe second way to install VirStrain, is to use [pip](https://pypi.org/project/virstrain/):\n\n\tpip install virstrain==1.17\n\nIt should be noted that some commands have been replaced if you install VirStrain using bioconda/pip. (See below)\n\nCommand (Not bioconda/pip)    |\tCommand (bioconda/pip)\n------------ | ------------- \npython VirStrain.py -h | virstrain -h\npython VirStrain_build.py -h | virstrain_build -h\npython VirStrain_contig.py -h | virstrain_contig -h\npython VirStrain_contigDB_merge.py -h | virstrain_merge -h\n\n\nOr you can install VirStrain mannually (Make sure all dependencies have been installed before this step).\n####\n`git clone https://github.com/liaoherui/VirStrain.git`<BR/>\n`cd VirStrain`<BR/>\n`chmod 755 bin/jellyfish-linux`<BR/>\n`rm VirStrain_DB.tar.gz`<BR/>\n####\n\nThen, you can download the reference database of 3 RNA viruses used in the paper. \nThere are three ways to download the reference database.<BR/><BR/>\n-> Method-1:<BR/>\nRun:<BR/>\n`cd VirStrain`<BR/>\n`sh download.sh`<BR/> <BR/>\n\n#### *__[Update - 2022 - 02 - 08]__* :  <BR/>\n\n* *-> Method-2:<BR/>*\nRun:<BR/>\n`cd VirStrain`<BR/>\n`wget -qO- \"https://figshare.com/ndownloader/files/34002479\" | tar -zx`<BR/>\nOr, download the database from [figshare](https://figshare.com/articles/dataset/VirStrain_DB_tar_gz/19134590/1) mannually, and then extract it using the command `tar -zxvf`.\n\nIf all failed, please email to the author to get the database.\n\n#### *__[Update - 2021 - Nov]__* :  <BR/>\n \n* *The databases of two DNA viruses (HBV and HCMV) used in the paper can be downloaded now! <BR/>*\n`sh download_dna.sh`<BR/>\n* *Besides, a larger database with more SARS-CoV-2 strains (see Supplementary Section 1.1 in the paper) can also be downloaded now. <BR/>*\n`sh download_scov2_big.sh`<BR/> \n\nYou can also build the VirStrain database with your own genomes, the mannual is written in Usage section.\n\n## Pre-built databases download\nIn the event that the download scripts fail to retrieve the pre-built database, we also provide Google drive inks to access all pre-built databases. The table below offers information about the public pre-built databases. Users can download these databases and use them to identify viral strains directly.\nName   |\tDescription   |\tDownload link\n------------ | ------------- | ------------- \nVirStrain_DB.tar.gz |  Databases containing SCOV2, H1N1, and HIV viral strains used in the paper | [Google drive](https://drive.google.com/file/d/1XYqr64tJec7VeDBD0Xc9cuUZqmawoty6/view?usp=sharing)\nSCOV2_newBig.tar.gz |  Databases containing more SCOV2 viral strains used in the paper   | [Google drive](https://drive.google.com/file/d/1qAHjVADTiV3G00YekqystUXT2e7Ho2kq/view?usp=sharing)\nVirStrain_DNA_DB.tar.gz  | Databases containing two DNA viral (HBV and HCMV) strains used in the paper | [Google drive](https://drive.google.com/file/d/1INmaOpBKYFXj1gAngG6CikT7xVjmxsGZ/view?usp=sharing)\nVirStrain_contig_DB.tar.gz | Contig-level database | [Google drive](https://drive.google.com/file/d/1oj-86Njz5mnY6djbhdv23a9r9OH5oqog/view?usp=sharing)\n\n## Usage\nIt should be noted if you install VirStrain using bioconda/pip, you should replace the commands. (see below)\n\nCommand (Not bioconda/pip)    |\tCommand (bioconda/pip)\n------------ | ------------- \npython VirStrain.py -h | virstrain -h\npython VirStrain_build.py -h | virstrain_build -h\npython VirStrain_contig.py -h | virstrain_contig -h\npython VirStrain_contigDB_merge.py -h | virstrain_merge -h\n\n### Use VirStrain to identify RNA virus strains in short reads.\n\nFor SE reads:<BR/>\n  `python VirStrain.py -i Test_Data/MT451123_1.fq -d VirStrain_DB/SCOV2 -o MT451123_SE_Test`<BR/>\n\nFor PE reads:<BR/>\n  `python VirStrain.py -i Test_Data/MT451123_1.fq -p Test_Data/MT451123_2.fq -d VirStrain_DB/SCOV2 -o MT451123_PE_Test`<BR/>\n\nWhen the virus has high mutation rate, like HIV, you may need to add `-m` parameter.\n\nFor HIV:<BR/>\n  SE reads: `python VirStrain.py -i <Read1> -d VirStrain_DB/HIV -o <Output_dir> -m`<BR/>\n  PE reads: `python VirStrain.py -i <Read1> -p <Read2> -d VirStrain_DB/HIV -o <Output_dir> -m`<BR/>\n\n### *__[Update - 2023 - Sep]__* Use VirStrain_contig to identify viral strains for assembled contigs.\n\n`python VirStrain_contig.py -i <Input_Contig_fasta> -d VirStrain_contig_DB -o VirStrain_Contig_Res`<BR/>\n\nYou can use the command below to download the pre-built comprehensive viral strain database for contig identification:\n\n`sh download_contig_db.sh`\n\nIf you want to convert pre-built VirStrain databases for reads (e.g. VirStrain_DB/SCOV2 and VirStrain_DB/H1N1) to database for contigs. Then you can try the command below:\n\n`python VirStrain_contigDB_merge.py -i VirStrain_DB/SCOV2,VirStrain_DB/H1N1 -o VirStrain_contig_DB_merge`\n\n\n### Use VirStrain to build your own custom database.<BR/>\n\n  `python VirStrain_build.py -i <Input_MSA> -d <Database_Dir>`<BR/>\n  \n   <b>Important note</b>: \",\" and \"|\" are not allowed in your <Input_MSA>. For example, \">Strain_A, 2022\" or \">Strain_A|2022\" is not allowed but \">Strain_A_2022\" is allowed.\n  \n  For small-scale strains (<1000 input strains) or viruses with large genome sizes (like HCMV), you can use manual-covering function to cover more useful sites. For example, in our experiment, we used \"-s 0.4\" for 328 HCMV strains. Usually, 0.2~0.6 shoule be a suitable range for the parameter \"-s\". However, if you only have very few strains, like 3 strains, you can also use a greater value like \"-s 0.8\".\n  \n  `python VirStrain_build.py -i <Input_MSA> -d <Database_Dir> -s 0.4`<BR/>\n\n  \n  Besides, if you only want to use SNV sites from \"x\" to \"y\" (eg. x=500 to y=1000), then you can add the parameter `-r`.\n  \n  `python VirStrain_build.py -i <Input_MSA> -d <Database_Dir> -s 0.4 -r 500-1000`<BR/>\n  \n  Note: The format of input MSA should be same as the format of MSA generated by Mafft (https://mafft.cbrc.jp/alignment/software/).<BR/>\n  \n### Full command-line options\n\n\nIdentification - VirStrain.py (Default k-mer size: 25)\n```\nVirStrain - An RNA virus strain-level identification tool for short reads.\n\nExample: python VirStrain.py -i Test_Data/MT451123_1.fq -p Test_Data/MT451123_2.fq -d VirStrain_DB/SCOV2 -o MT451123_PE_Test\n\nrequired arguments:\n    -i, --input_reads             Input fastq data.\n    -d, --database_dir            Path of VirStrain database.\n\noptional arguments:\n    -h, --help                    Show help message and exit.\n    -o, --output_dir              The output directory. (Default: ./VirStrain_Out)\n    -p, --input_reads2            Input fastq data for PE reads\n    -c, --site_filter_cutoff      The cutoff of filtering one site when calculate the Vscore. (Default: 0.05)\n    -s, --rank_by_sites\t\t  If set to 1, then VirStrain will sort the most possible strain by matches to the sites. (default: 0)\n    -f, --turn_off_figures\t  If set to 1, then VirStrain will not generate figures. (default: 0)\n    -m, --high_mutation_virus     If the virus has high mutation rate (like HIV), use this option. (Default: off)\n```\nBuild database - VirStrain_build.py (Default k-mer size: 25)\n```\nVirStrain - An RNA virus strain-level identification tool for short reads.\n\nExample:  python VirStrain_build.py -i <Input_MSA> -d <Database_Dir>\n\nrequired arguments:\n     -i, --input_msa               Input MSA file (Must have same format to msa generated by mafft).    \noptional arguments:\n     -d, --database_dir            The output directory of constructed database. (Default: ./VirStrain_DB)\n     -c, --dash_cutoff             The cutoff of dash in each column of MSA. (Default: 0)\n     -s, --sites_cutoff            The cutoff of sites number for manual-covering function. (eg. 1 means all useful sites will be use and 0.8 means 80% useful sites will be used)\n     -r, --sites_rcutoff           The cutoff of sites range for covering algorithm (eg. 3-500 means the covering algorithm will only consider the SNV sites from 3-500 of MSA.)          \n\n```\n\n\n## Output Format\n\nThe output of VirStrain contains two files. The first is a report file in text format. This file contains all identified strains and their depth and site coverage, etc. The other file is an interactive HTML page to display the depth and uniqueness of sites. \n\nYou can check the output file in the folder \"MT451123_Sim_PE\" in this repository.\n\nThe picture below displays an output example of a simulated data (Truth: MT451123.1). <BR/>\n\n![VirStrain Report](https://github.com/liaoherui/VirStrain/blob/main/Output_fmt/report_simulate.png)\n\nExplaination about the four headers in the output of VirStrain\nHeader    |\tDescription\t\n------------ | ------------- \n**Most Possible strain*** | The most possible strain in the sequencing data detected by VirStrain.<BR/>(The strains with highest Vscore in the first iteraition.)\n**Other Possible strains*** | The other possible strain in the sequencing data detected by VirStrain.<BR/>(The strains with highest Vscore in the later iteraition, 10 mutation number can be a strong evidence for other possible strains according to our experiment result.)\nHighest Map Strains | The strain with maximum \"Covered SNV site/Total SNV site\" in the first iteration. For user's reference.\nTop 10 Score Strains | The top10 strain sorted by Vscore in the first iteration. <BR/>For user's reference, and also could be useful information to detect those low abundance strains which are highly similar to the high abundance strain (Eg, only one mutation number).\n\n\uff08Note: the header with **\\*** means the content following this header includes the main identification result.\uff09\n\nExplaination about the columns in the output of VirStrain:\n\nColumn_name    |\tDescription\t\n------------ | ------------- \nStrain_ID |\tThe NCBI (or other public database) accession number of identified strain.\nCls_info | The cluster information of identified strain, eg: Cluster2830_2 -> belong Cluster2830, size=2.\nSubCls_info | The sub-cluster information of identified strain.\nVscore | The Vscore generated by VirStrain algorithm.\nTotal_Map_Rate | The covered sites out of total sites in the first iteration of VirStrain.\nValid_Map_Rate | The covered sites out of total sites in the remaining iteration of VirStrain.\nStrain_depth | The sequencing depth of identified strain predicted by VirStrain.\nStrain_info | The metadata of identified strains, such as region information and subtype, etc.\nSNV_freq | The SNV frequency of all sites.\n\n\n## References:\n\nhow to cite this tool:\n```\nLiao, H., Cai, D. & Sun, Y. VirStrain: a strain identification tool for RNA viruses. Genome Biol 23, 38 (2022). https://doi.org/10.1186/s13059-022-02609-x\n```\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/liaoherui/VirStrain/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "***[Update - 2022 - 02 - 08]*** :  <BR/>",
        "parent_header": [
          "VirStrain   <img src=\"logo.png\" width=\"250\" title=\"VirStrain\">",
          "Install (Linux or ubuntu only)"
        ],
        "type": "Text_excerpt",
        "value": "[![install with bioconda](https://img.shields.io/badge/install%20with-bioconda-brightgreen.svg?style=flat)](http://bioconda.github.io/recipes/virstrain/README.html)\n# VirStrain   <img src=\"logo.png\" width=\"250\" title=\"VirStrain\">\nAn RNA virus strain-level identification tool for short reads.\n\n\n\n### E-mail: heruiliao2-c@my.cityu.edu.hk\n### Recommanded Version: V1.17\n* *Old Version - V1.14: Fix some bugs but lack virstrain_contig and virstrain_merge. <BR/>*\n\n<details>\n<summary> Click here to check the log of all updates </summary>\n  \n#### *__[Update - 2022 - 02 - 05]__* :  <BR/>\n \n* *V1.12: VirStrain is able to take gzipped FASTQs as input now! <BR/>*\n\n#### *__[Update - 2022 - 03 - 23]__* :  <BR/>\n \n* *Fix one bug of the perl script about head name problem.*\n\n#### *__[Update - 2022 - 11 - 10]__* :  <BR/>\n\n* *Update a new parameter '-s' that allows sorting the most possible strain by matches to the sites.*\n\n#### *__[Update - 2022 - 12 - 16]__* :  <BR/>\n\n* *The web server extension of VirStrain - StrainDetect (https://strain.ee.cityu.edu.hk) is online now!*\n\n#### *__[Update - 2022 - 12 - 20]__* :  <BR/>\n\n* *V1.13: Fix a database generation bug in V1.12 of bioconda version! <BR/>*\n \n</details>\n  \n#### *__[Update - 2023 - 09 - 05]__* :  <BR/> \n* *A new function that allows comprehensive (including **45619** strains of **28** viral species) viral strain identification for assembled contigs is available!  <BR/>*\n\n#### *__[Update - 2023 - 10 - 12]__* :  <BR/> \n* *V1.14: Fix a bug (about handling gzipped FASTQs) in V1.13! <BR/>*\n\n#### *__[Update - 2024 - 02 - 27]__* :  <BR/> \n* *Tem_Vs files are named randomly (only GitHub version) and links for pre-built databases are provided. <BR/>*\n\n#### *__[Update - 2024 - 03 - 11]__* :  <BR/> \n* *V1.17: All the changes made so far have been updated in both GitHub and Conda. <BR/>*\n\n#### *__[Update - 2024 - 05 - 28]__* :  <BR/> \n* *V1.17: Add the parameter '-v' to show the version information. <BR/>*\n    \n---------------------------------------------------------------------------\n### Dependencies:\n* Python >=3.6 (3.7.3 is recommanded and 3.9 is not supprted now!)\n* Perl\n* Required python package: networkx==2.4, numpy==1.17.3, pandas==1.0.1, biopython==1.74, Plotly==3.10.0\n* **Bowtie2 (for virstrain version >= V1.17)**\n\n(If you have installed conda, then you can run `sh install_package.sh` to install all required packages automatically.)\n\nMake sure these programs have been installed before using VirStrain. (However, if you use bioconda/pip to install VirStrain, ignore this.)\n\n## Install (Linux or ubuntu only)\n\nThe first way to install VirStrain, is to use [bioconda](https://bioconda.github.io/).\nOnce you have bioconda environment installed, install package virstrain:\n\n\tconda install -c bioconda virstrain\n\nThe second way to install VirStrain, is to use [pip](https://pypi.org/project/virstrain/):\n\n\tpip install virstrain==1.17\n\nIt should be noted that some commands have been replaced if you install VirStrain using bioconda/pip. (See below)\n\nCommand (Not bioconda/pip)    |\tCommand (bioconda/pip)\n------------ | ------------- \npython VirStrain.py -h | virstrain -h\npython VirStrain_build.py -h | virstrain_build -h\npython VirStrain_contig.py -h | virstrain_contig -h\npython VirStrain_contigDB_merge.py -h | virstrain_merge -h\n\n\nOr you can install VirStrain mannually (Make sure all dependencies have been installed before this step).\n####\n`git clone https://github.com/liaoherui/VirStrain.git`<BR/>\n`cd VirStrain`<BR/>\n`chmod 755 bin/jellyfish-linux`<BR/>\n`rm VirStrain_DB.tar.gz`<BR/>\n####\n\nThen, you can download the reference database of 3 RNA viruses used in the paper. \nThere are three ways to download the reference database.<BR/><BR/>\n-> Method-1:<BR/>\nRun:<BR/>\n`cd VirStrain`<BR/>\n`sh download.sh`<BR/> <BR/>\n\n#### *__[Update - 2022 - 02 - 08]__* :  <BR/>\n\n* *-> Method-2:<BR/>*\nRun:<BR/>\n`cd VirStrain`<BR/>\n`wget -qO- \"https://figshare.com/ndownloader/files/34002479\" | tar -zx`<BR/>\nOr, download the database from [figshare](https://figshare.com/articles/dataset/VirStrain_DB_tar_gz/19134590/1) mannually, and then extract it using the command `tar -zxvf`.\n\nIf all failed, please email to the author to get the database.\n\n#### *__[Update - 2021 - Nov]__* :  <BR/>\n \n* *The databases of two DNA viruses (HBV and HCMV) used in the paper can be downloaded now! <BR/>*\n`sh download_dna.sh`<BR/>\n* *Besides, a larger database with more SARS-CoV-2 strains (see Supplementary Section 1.1 in the paper) can also be downloaded now. <BR/>*\n`sh download_scov2_big.sh`<BR/> \n\nYou can also build the VirStrain database with your own genomes, the mannual is written in Usage section.\n\n## Pre-built databases download\nIn the event that the download scripts fail to retrieve the pre-built database, we also provide Google drive inks to access all pre-built databases. The table below offers information about the public pre-built databases. Users can download these databases and use them to identify viral strains directly.\nName   |\tDescription   |\tDownload link\n------------ | ------------- | ------------- \nVirStrain_DB.tar.gz |  Databases containing SCOV2, H1N1, and HIV viral strains used in the paper | [Google drive](https://drive.google.com/file/d/1XYqr64tJec7VeDBD0Xc9cuUZqmawoty6/view?usp=sharing)\nSCOV2_newBig.tar.gz |  Databases containing more SCOV2 viral strains used in the paper   | [Google drive](https://drive.google.com/file/d/1qAHjVADTiV3G00YekqystUXT2e7Ho2kq/view?usp=sharing)\nVirStrain_DNA_DB.tar.gz  | Databases containing two DNA viral (HBV and HCMV) strains used in the paper | [Google drive](https://drive.google.com/file/d/1INmaOpBKYFXj1gAngG6CikT7xVjmxsGZ/view?usp=sharing)\nVirStrain_contig_DB.tar.gz | Contig-level database | [Google drive](https://drive.google.com/file/d/1oj-86Njz5mnY6djbhdv23a9r9OH5oqog/view?usp=sharing)\n\n## Usage\nIt should be noted if you install VirStrain using bioconda/pip, you should replace the commands. (see below)\n\nCommand (Not bioconda/pip)    |\tCommand (bioconda/pip)\n------------ | ------------- \npython VirStrain.py -h | virstrain -h\npython VirStrain_build.py -h | virstrain_build -h\npython VirStrain_contig.py -h | virstrain_contig -h\npython VirStrain_contigDB_merge.py -h | virstrain_merge -h\n\n### Use VirStrain to identify RNA virus strains in short reads.\n\nFor SE reads:<BR/>\n  `python VirStrain.py -i Test_Data/MT451123_1.fq -d VirStrain_DB/SCOV2 -o MT451123_SE_Test`<BR/>\n\nFor PE reads:<BR/>\n  `python VirStrain.py -i Test_Data/MT451123_1.fq -p Test_Data/MT451123_2.fq -d VirStrain_DB/SCOV2 -o MT451123_PE_Test`<BR/>\n\nWhen the virus has high mutation rate, like HIV, you may need to add `-m` parameter.\n\nFor HIV:<BR/>\n  SE reads: `python VirStrain.py -i <Read1> -d VirStrain_DB/HIV -o <Output_dir> -m`<BR/>\n  PE reads: `python VirStrain.py -i <Read1> -p <Read2> -d VirStrain_DB/HIV -o <Output_dir> -m`<BR/>\n\n### *__[Update - 2023 - Sep]__* Use VirStrain_contig to identify viral strains for assembled contigs.\n\n`python VirStrain_contig.py -i <Input_Contig_fasta> -d VirStrain_contig_DB -o VirStrain_Contig_Res`<BR/>\n\nYou can use the command below to download the pre-built comprehensive viral strain database for contig identification:\n\n`sh download_contig_db.sh`\n\nIf you want to convert pre-built VirStrain databases for reads (e.g. VirStrain_DB/SCOV2 and VirStrain_DB/H1N1) to database for contigs. Then you can try the command below:\n\n`python VirStrain_contigDB_merge.py -i VirStrain_DB/SCOV2,VirStrain_DB/H1N1 -o VirStrain_contig_DB_merge`\n\n\n### Use VirStrain to build your own custom database.<BR/>\n\n  `python VirStrain_build.py -i <Input_MSA> -d <Database_Dir>`<BR/>\n  \n   <b>Important note</b>: \",\" and \"|\" are not allowed in your <Input_MSA>. For example, \">Strain_A, 2022\" or \">Strain_A|2022\" is not allowed but \">Strain_A_2022\" is allowed.\n  \n  For small-scale strains (<1000 input strains) or viruses with large genome sizes (like HCMV), you can use manual-covering function to cover more useful sites. For example, in our experiment, we used \"-s 0.4\" for 328 HCMV strains. Usually, 0.2~0.6 shoule be a suitable range for the parameter \"-s\". However, if you only have very few strains, like 3 strains, you can also use a greater value like \"-s 0.8\".\n  \n  `python VirStrain_build.py -i <Input_MSA> -d <Database_Dir> -s 0.4`<BR/>\n\n  \n  Besides, if you only want to use SNV sites from \"x\" to \"y\" (eg. x=500 to y=1000), then you can add the parameter `-r`.\n  \n  `python VirStrain_build.py -i <Input_MSA> -d <Database_Dir> -s 0.4 -r 500-1000`<BR/>\n  \n  Note: The format of input MSA should be same as the format of MSA generated by Mafft (https://mafft.cbrc.jp/alignment/software/).<BR/>\n  \n### Full command-line options\n\n\nIdentification - VirStrain.py (Default k-mer size: 25)\n```\nVirStrain - An RNA virus strain-level identification tool for short reads.\n\nExample: python VirStrain.py -i Test_Data/MT451123_1.fq -p Test_Data/MT451123_2.fq -d VirStrain_DB/SCOV2 -o MT451123_PE_Test\n\nrequired arguments:\n    -i, --input_reads             Input fastq data.\n    -d, --database_dir            Path of VirStrain database.\n\noptional arguments:\n    -h, --help                    Show help message and exit.\n    -o, --output_dir              The output directory. (Default: ./VirStrain_Out)\n    -p, --input_reads2            Input fastq data for PE reads\n    -c, --site_filter_cutoff      The cutoff of filtering one site when calculate the Vscore. (Default: 0.05)\n    -s, --rank_by_sites\t\t  If set to 1, then VirStrain will sort the most possible strain by matches to the sites. (default: 0)\n    -f, --turn_off_figures\t  If set to 1, then VirStrain will not generate figures. (default: 0)\n    -m, --high_mutation_virus     If the virus has high mutation rate (like HIV), use this option. (Default: off)\n```\nBuild database - VirStrain_build.py (Default k-mer size: 25)\n```\nVirStrain - An RNA virus strain-level identification tool for short reads.\n\nExample:  python VirStrain_build.py -i <Input_MSA> -d <Database_Dir>\n\nrequired arguments:\n     -i, --input_msa               Input MSA file (Must have same format to msa generated by mafft).    \noptional arguments:\n     -d, --database_dir            The output directory of constructed database. (Default: ./VirStrain_DB)\n     -c, --dash_cutoff             The cutoff of dash in each column of MSA. (Default: 0)\n     -s, --sites_cutoff            The cutoff of sites number for manual-covering function. (eg. 1 means all useful sites will be use and 0.8 means 80% useful sites will be used)\n     -r, --sites_rcutoff           The cutoff of sites range for covering algorithm (eg. 3-500 means the covering algorithm will only consider the SNV sites from 3-500 of MSA.)          \n\n```\n\n\n## Output Format\n\nThe output of VirStrain contains two files. The first is a report file in text format. This file contains all identified strains and their depth and site coverage, etc. The other file is an interactive HTML page to display the depth and uniqueness of sites. \n\nYou can check the output file in the folder \"MT451123_Sim_PE\" in this repository.\n\nThe picture below displays an output example of a simulated data (Truth: MT451123.1). <BR/>\n\n![VirStrain Report](https://github.com/liaoherui/VirStrain/blob/main/Output_fmt/report_simulate.png)\n\nExplaination about the four headers in the output of VirStrain\nHeader    |\tDescription\t\n------------ | ------------- \n**Most Possible strain*** | The most possible strain in the sequencing data detected by VirStrain.<BR/>(The strains with highest Vscore in the first iteraition.)\n**Other Possible strains*** | The other possible strain in the sequencing data detected by VirStrain.<BR/>(The strains with highest Vscore in the later iteraition, 10 mutation number can be a strong evidence for other possible strains according to our experiment result.)\nHighest Map Strains | The strain with maximum \"Covered SNV site/Total SNV site\" in the first iteration. For user's reference.\nTop 10 Score Strains | The top10 strain sorted by Vscore in the first iteration. <BR/>For user's reference, and also could be useful information to detect those low abundance strains which are highly similar to the high abundance strain (Eg, only one mutation number).\n\n\uff08Note: the header with **\\*** means the content following this header includes the main identification result.\uff09\n\nExplaination about the columns in the output of VirStrain:\n\nColumn_name    |\tDescription\t\n------------ | ------------- \nStrain_ID |\tThe NCBI (or other public database) accession number of identified strain.\nCls_info | The cluster information of identified strain, eg: Cluster2830_2 -> belong Cluster2830, size=2.\nSubCls_info | The sub-cluster information of identified strain.\nVscore | The Vscore generated by VirStrain algorithm.\nTotal_Map_Rate | The covered sites out of total sites in the first iteration of VirStrain.\nValid_Map_Rate | The covered sites out of total sites in the remaining iteration of VirStrain.\nStrain_depth | The sequencing depth of identified strain predicted by VirStrain.\nStrain_info | The metadata of identified strains, such as region information and subtype, etc.\nSNV_freq | The SNV frequency of all sites.\n\n\n## References:\n\nhow to cite this tool:\n```\nLiao, H., Cai, D. & Sun, Y. VirStrain: a strain identification tool for RNA viruses. Genome Biol 23, 38 (2022). https://doi.org/10.1186/s13059-022-02609-x\n```\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/liaoherui/VirStrain/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "***[Update - 2021 - Nov]*** :  <BR/>",
        "parent_header": [
          "VirStrain   <img src=\"logo.png\" width=\"250\" title=\"VirStrain\">",
          "Install (Linux or ubuntu only)"
        ],
        "type": "Text_excerpt",
        "value": "[![install with bioconda](https://img.shields.io/badge/install%20with-bioconda-brightgreen.svg?style=flat)](http://bioconda.github.io/recipes/virstrain/README.html)\n# VirStrain   <img src=\"logo.png\" width=\"250\" title=\"VirStrain\">\nAn RNA virus strain-level identification tool for short reads.\n\n\n\n### E-mail: heruiliao2-c@my.cityu.edu.hk\n### Recommanded Version: V1.17\n* *Old Version - V1.14: Fix some bugs but lack virstrain_contig and virstrain_merge. <BR/>*\n\n<details>\n<summary> Click here to check the log of all updates </summary>\n  \n#### *__[Update - 2022 - 02 - 05]__* :  <BR/>\n \n* *V1.12: VirStrain is able to take gzipped FASTQs as input now! <BR/>*\n\n#### *__[Update - 2022 - 03 - 23]__* :  <BR/>\n \n* *Fix one bug of the perl script about head name problem.*\n\n#### *__[Update - 2022 - 11 - 10]__* :  <BR/>\n\n* *Update a new parameter '-s' that allows sorting the most possible strain by matches to the sites.*\n\n#### *__[Update - 2022 - 12 - 16]__* :  <BR/>\n\n* *The web server extension of VirStrain - StrainDetect (https://strain.ee.cityu.edu.hk) is online now!*\n\n#### *__[Update - 2022 - 12 - 20]__* :  <BR/>\n\n* *V1.13: Fix a database generation bug in V1.12 of bioconda version! <BR/>*\n \n</details>\n  \n#### *__[Update - 2023 - 09 - 05]__* :  <BR/> \n* *A new function that allows comprehensive (including **45619** strains of **28** viral species) viral strain identification for assembled contigs is available!  <BR/>*\n\n#### *__[Update - 2023 - 10 - 12]__* :  <BR/> \n* *V1.14: Fix a bug (about handling gzipped FASTQs) in V1.13! <BR/>*\n\n#### *__[Update - 2024 - 02 - 27]__* :  <BR/> \n* *Tem_Vs files are named randomly (only GitHub version) and links for pre-built databases are provided. <BR/>*\n\n#### *__[Update - 2024 - 03 - 11]__* :  <BR/> \n* *V1.17: All the changes made so far have been updated in both GitHub and Conda. <BR/>*\n\n#### *__[Update - 2024 - 05 - 28]__* :  <BR/> \n* *V1.17: Add the parameter '-v' to show the version information. <BR/>*\n    \n---------------------------------------------------------------------------\n### Dependencies:\n* Python >=3.6 (3.7.3 is recommanded and 3.9 is not supprted now!)\n* Perl\n* Required python package: networkx==2.4, numpy==1.17.3, pandas==1.0.1, biopython==1.74, Plotly==3.10.0\n* **Bowtie2 (for virstrain version >= V1.17)**\n\n(If you have installed conda, then you can run `sh install_package.sh` to install all required packages automatically.)\n\nMake sure these programs have been installed before using VirStrain. (However, if you use bioconda/pip to install VirStrain, ignore this.)\n\n## Install (Linux or ubuntu only)\n\nThe first way to install VirStrain, is to use [bioconda](https://bioconda.github.io/).\nOnce you have bioconda environment installed, install package virstrain:\n\n\tconda install -c bioconda virstrain\n\nThe second way to install VirStrain, is to use [pip](https://pypi.org/project/virstrain/):\n\n\tpip install virstrain==1.17\n\nIt should be noted that some commands have been replaced if you install VirStrain using bioconda/pip. (See below)\n\nCommand (Not bioconda/pip)    |\tCommand (bioconda/pip)\n------------ | ------------- \npython VirStrain.py -h | virstrain -h\npython VirStrain_build.py -h | virstrain_build -h\npython VirStrain_contig.py -h | virstrain_contig -h\npython VirStrain_contigDB_merge.py -h | virstrain_merge -h\n\n\nOr you can install VirStrain mannually (Make sure all dependencies have been installed before this step).\n####\n`git clone https://github.com/liaoherui/VirStrain.git`<BR/>\n`cd VirStrain`<BR/>\n`chmod 755 bin/jellyfish-linux`<BR/>\n`rm VirStrain_DB.tar.gz`<BR/>\n####\n\nThen, you can download the reference database of 3 RNA viruses used in the paper. \nThere are three ways to download the reference database.<BR/><BR/>\n-> Method-1:<BR/>\nRun:<BR/>\n`cd VirStrain`<BR/>\n`sh download.sh`<BR/> <BR/>\n\n#### *__[Update - 2022 - 02 - 08]__* :  <BR/>\n\n* *-> Method-2:<BR/>*\nRun:<BR/>\n`cd VirStrain`<BR/>\n`wget -qO- \"https://figshare.com/ndownloader/files/34002479\" | tar -zx`<BR/>\nOr, download the database from [figshare](https://figshare.com/articles/dataset/VirStrain_DB_tar_gz/19134590/1) mannually, and then extract it using the command `tar -zxvf`.\n\nIf all failed, please email to the author to get the database.\n\n#### *__[Update - 2021 - Nov]__* :  <BR/>\n \n* *The databases of two DNA viruses (HBV and HCMV) used in the paper can be downloaded now! <BR/>*\n`sh download_dna.sh`<BR/>\n* *Besides, a larger database with more SARS-CoV-2 strains (see Supplementary Section 1.1 in the paper) can also be downloaded now. <BR/>*\n`sh download_scov2_big.sh`<BR/> \n\nYou can also build the VirStrain database with your own genomes, the mannual is written in Usage section.\n"
      },
      "source": "https://raw.githubusercontent.com/liaoherui/VirStrain/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9759689014285327,
      "result": {
        "original_header": "Recommanded Version: V1.17",
        "type": "Text_excerpt",
        "value": "* *Old Version - V1.14: Fix some bugs but lack virstrain_contig and virstrain_merge. <BR/>* \n#### *__[Update - 2022 - 03 - 23]__* :  <BR/>\n \n* *Fix one bug of the perl script about head name problem.* \n#### *__[Update - 2022 - 11 - 10]__* :  <BR/> \n#### *__[Update - 2022 - 12 - 16]__* :  <BR/> \n* *The web server extension of VirStrain - StrainDetect (https://strain.ee.cityu.edu.hk) is online now!* \n#### *__[Update - 2022 - 12 - 20]__* :  <BR/> \n* *V1.13: Fix a database generation bug in V1.12 of bioconda version! <BR/>*\n \n</details>\n  \n#### *__[Update - 2023 - 09 - 05]__* :  <BR/> \n* *A new function that allows comprehensive (including **45619** strains of **28** viral species) viral strain identification for assembled contigs is available!  <BR/>* \n#### *__[Update - 2023 - 10 - 12]__* :  <BR/> \n* *V1.14: Fix a bug (about handling gzipped FASTQs) in V1.13! <BR/>* \n#### *__[Update - 2024 - 02 - 27]__* :  <BR/> \n* *Tem_Vs files are named randomly (only GitHub version) and links for pre-built databases are provided. <BR/>* \n#### *__[Update - 2024 - 03 - 11]__* :  <BR/> \n* *V1.17: All the changes made so far have been updated in both GitHub and Conda. <BR/>* \n#### *__[Update - 2024 - 05 - 28]__* :  <BR/> \n* *V1.17: Add the parameter '-v' to show the version information. <BR/>*\n    \n---------------------------------------------------------------------------\n### Dependencies:\n* Python >=3.6 (3.7.3 is recommanded and 3.9 is not supprted now!)\n* Perl\n* Required python package: networkx==2.4, numpy==1.17.3, pandas==1.0.1, biopython==1.74, Plotly==3.10.0\n* **Bowtie2 (for virstrain version >= V1.17)** \n(If you have installed conda, then you can run `sh install_package.sh` to install all required packages automatically.) \nMake sure these programs have been installed before using VirStrain. (However, if you use bioconda/pip to install VirStrain, ignore this.) \n## Install (Linux or ubuntu only) \nThe first way to install VirStrain, is to use [bioconda](https://bioconda.github.io/).\nOnce you have bioconda environment installed, install package virstrain: \n\tconda install -c bioconda virstrain \nThe second way to install VirStrain, is to use [pip](https://pypi.org/project/virstrain/): \n\tpip install virstrain==1.17 \nIt should be noted that some commands have been replaced if you install VirStrain using bioconda/pip. (See below) \nCommand (Not bioconda/pip)    |\tCommand (bioconda/pip)\n------------ | ------------- \npython VirStrain.py -h | virstrain -h\npython VirStrain_build.py -h | virstrain_build -h\npython VirStrain_contig.py -h | virstrain_contig -h\npython VirStrain_contigDB_merge.py -h | virstrain_merge -h \n\nOr you can install VirStrain mannually (Make sure all dependencies have been installed before this step).\n####\n`git clone https://github.com/liaoherui/VirStrain.git`<BR/>\n`cd VirStrain`<BR/>\n`chmod 755 bin/jellyfish-linux`<BR/>\n`rm VirStrain_DB.tar.gz`<BR/>\n#### \n#### *__[Update - 2022 - 02 - 08]__* :  <BR/> \n* *-> Method-2:<BR/>*\nRun:<BR/>\n`cd VirStrain`<BR/>\n`wget -qO- \"https://figshare.com/ndownloader/files/34002479\" | tar -zx`<BR/>\nOr, download the database from [figshare](https://figshare.com/articles/dataset/VirStrain_DB_tar_gz/19134590/1) mannually, and then extract it using the command `tar -zxvf`. \n#### *__[Update - 2021 - Nov]__* :  <BR/>\n \n* *The databases of two DNA viruses (HBV and HCMV) used in the paper can be downloaded now! <BR/>*\n`sh download_dna.sh`<BR/>\n* *Besides, a larger database with more SARS-CoV-2 strains (see Supplementary Section 1.1 in the paper) can also be downloaded now. <BR/>*\n`sh download_scov2_big.sh`<BR/>  \n## Usage\nIt should be noted if you install VirStrain using bioconda/pip, you should replace the commands. (see below) \n### *__[Update - 2023 - Sep]__* Use VirStrain_contig to identify viral strains for assembled contigs. \n`python VirStrain_contig.py -i <Input_Contig_fasta> -d VirStrain_contig_DB -o VirStrain_Contig_Res`<BR/> \nYou can use the command below to download the pre-built comprehensive viral strain database for contig identification: \n`sh download_contig_db.sh` \nIf you want to convert pre-built VirStrain databases for reads (e.g. VirStrain_DB/SCOV2 and VirStrain_DB/H1N1) to database for contigs. Then you can try the command below: \n`python VirStrain_contigDB_merge.py -i VirStrain_DB/SCOV2,VirStrain_DB/H1N1 -o VirStrain_contig_DB_merge` \n\n### Use VirStrain to build your own custom database.<BR/> \n"
      },
      "source": "https://raw.githubusercontent.com/liaoherui/VirStrain/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9994205948906504,
      "result": {
        "original_header": "***[Update - 2023 - 09 - 05]*** :  <BR/>",
        "type": "Text_excerpt",
        "value": "### E-mail: heruiliao2-c@my.cityu.edu.hk\n### Recommanded Version: V1.17\n* *Old Version - V1.14: Fix some bugs but lack virstrain_contig and virstrain_merge. <BR/>* \n"
      },
      "source": "https://raw.githubusercontent.com/liaoherui/VirStrain/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9988535745304853,
      "result": {
        "original_header": "***[Update - 2024 - 05 - 28]*** :  <BR/>",
        "type": "Text_excerpt",
        "value": "#### *__[Update - 2024 - 05 - 28]__* :  <BR/> \n* *V1.17: Add the parameter '-v' to show the version information. <BR/>*\n    \n--------------------------------------------------------------------------- \n"
      },
      "source": "https://raw.githubusercontent.com/liaoherui/VirStrain/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8650262754713465,
      "result": {
        "original_header": "Recommanded Version: V1.17",
        "type": "Text_excerpt",
        "value": "Command (Not bioconda/pip)    |\tCommand (bioconda/pip)\n------------ | ------------- \npython VirStrain.py -h | virstrain -h\npython VirStrain_build.py -h | virstrain_build -h\npython VirStrain_contig.py -h | virstrain_contig -h\npython VirStrain_contigDB_merge.py -h | virstrain_merge -h \nFor SE reads:<BR/>\n  `python VirStrain.py -i Test_Data/MT451123_1.fq -d VirStrain_DB/SCOV2 -o MT451123_SE_Test`<BR/> \nFor PE reads:<BR/>\n  `python VirStrain.py -i Test_Data/MT451123_1.fq -p Test_Data/MT451123_2.fq -d VirStrain_DB/SCOV2 -o MT451123_PE_Test`<BR/> \nFor HIV:<BR/>\n  SE reads: `python VirStrain.py -i <Read1> -d VirStrain_DB/HIV -o <Output_dir> -m`<BR/>\n  PE reads: `python VirStrain.py -i <Read1> -p <Read2> -d VirStrain_DB/HIV -o <Output_dir> -m`<BR/> \n`python VirStrain_contig.py -i <Input_Contig_fasta> -d VirStrain_contig_DB -o VirStrain_Contig_Res`<BR/> \n`python VirStrain_contigDB_merge.py -i VirStrain_DB/SCOV2,VirStrain_DB/H1N1 -o VirStrain_contig_DB_merge` \n\nIdentification - VirStrain.py (Default k-mer size: 25)\n```\nVirStrain - An RNA virus strain-level identification tool for short reads.\n\nExample: python VirStrain.py -i Test_Data/MT451123_1.fq -p Test_Data/MT451123_2.fq -d VirStrain_DB/SCOV2 -o MT451123_PE_Test\n\nrequired arguments:\n    -i, --input_reads             Input fastq data.\n    -d, --database_dir            Path of VirStrain database.\n\noptional arguments:\n    -h, --help                    Show help message and exit.\n    -o, --output_dir              The output directory. (Default: ./VirStrain_Out)\n    -p, --input_reads2            Input fastq data for PE reads\n    -c, --site_filter_cutoff      The cutoff of filtering one site when calculate the Vscore. (Default: 0.05)\n    -s, --rank_by_sites\t\t  If set to 1, then VirStrain will sort the most possible strain by matches to the sites. (default: 0)\n    -f, --turn_off_figures\t  If set to 1, then VirStrain will not generate figures. (default: 0)\n    -m, --high_mutation_virus     If the virus has high mutation rate (like HIV), use this option. (Default: off)\n```\nBuild database - VirStrain_build.py (Default k-mer size: 25)\nBASH2* \n\n## Output Format \n"
      },
      "source": "https://raw.githubusercontent.com/liaoherui/VirStrain/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/liaoherui/VirStrain/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "k-mer, metagenomics, reference-database, strain, virus"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2021 Ray\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/liaoherui/VirStrain/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "VirStrain"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "liaoherui"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 171751,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 137632,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 14775,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 2567,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/liaoherui/VirStrain/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "liaoherui",
          "type": "User"
        },
        "date_created": "2021-11-14T08:07:49Z",
        "date_published": "2021-11-14T08:21:08Z",
        "description": "This is the first release of VirStrain.",
        "html_url": "https://github.com/liaoherui/VirStrain/releases/tag/V1.0",
        "name": "First release of VirStrain",
        "release_id": 53326701,
        "tag": "V1.0",
        "tarball_url": "https://api.github.com/repos/liaoherui/VirStrain/tarball/V1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/liaoherui/VirStrain/releases/53326701",
        "value": "https://api.github.com/repos/liaoherui/VirStrain/releases/53326701",
        "zipball_url": "https://api.github.com/repos/liaoherui/VirStrain/zipball/V1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependencies:",
        "parent_header": [
          "VirStrain   <img src=\"logo.png\" width=\"250\" title=\"VirStrain\">"
        ],
        "type": "Text_excerpt",
        "value": "* Python >=3.6 (3.7.3 is recommanded and 3.9 is not supprted now!)\n* Perl\n* Required python package: networkx==2.4, numpy==1.17.3, pandas==1.0.1, biopython==1.74, Plotly==3.10.0\n* **Bowtie2 (for virstrain version >= V1.17)**\n\n(If you have installed conda, then you can run `sh install_package.sh` to install all required packages automatically.)\n\nMake sure these programs have been installed before using VirStrain. (However, if you use bioconda/pip to install VirStrain, ignore this.)\n"
      },
      "source": "https://raw.githubusercontent.com/liaoherui/VirStrain/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 10:24:00",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 19
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "VirStrain   <img src=\"logo.png\" width=\"250\" title=\"VirStrain\">"
        ],
        "type": "Text_excerpt",
        "value": "It should be noted if you install VirStrain using bioconda/pip, you should replace the commands. (see below)\n\nCommand (Not bioconda/pip)    |\tCommand (bioconda/pip)\n------------ | ------------- \npython VirStrain.py -h | virstrain -h\npython VirStrain_build.py -h | virstrain_build -h\npython VirStrain_contig.py -h | virstrain_contig -h\npython VirStrain_contigDB_merge.py -h | virstrain_merge -h\n"
      },
      "source": "https://raw.githubusercontent.com/liaoherui/VirStrain/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Use VirStrain to identify RNA virus strains in short reads.",
        "parent_header": [
          "VirStrain   <img src=\"logo.png\" width=\"250\" title=\"VirStrain\">",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "For SE reads:<BR/>\n  `python VirStrain.py -i Test_Data/MT451123_1.fq -d VirStrain_DB/SCOV2 -o MT451123_SE_Test`<BR/>\n\nFor PE reads:<BR/>\n  `python VirStrain.py -i Test_Data/MT451123_1.fq -p Test_Data/MT451123_2.fq -d VirStrain_DB/SCOV2 -o MT451123_PE_Test`<BR/>\n\nWhen the virus has high mutation rate, like HIV, you may need to add `-m` parameter.\n\nFor HIV:<BR/>\n  SE reads: `python VirStrain.py -i <Read1> -d VirStrain_DB/HIV -o <Output_dir> -m`<BR/>\n  PE reads: `python VirStrain.py -i <Read1> -p <Read2> -d VirStrain_DB/HIV -o <Output_dir> -m`<BR/>\n\n### *__[Update - 2023 - Sep]__* Use VirStrain_contig to identify viral strains for assembled contigs.\n\n`python VirStrain_contig.py -i <Input_Contig_fasta> -d VirStrain_contig_DB -o VirStrain_Contig_Res`<BR/>\n\nYou can use the command below to download the pre-built comprehensive viral strain database for contig identification:\n\n`sh download_contig_db.sh`\n\nIf you want to convert pre-built VirStrain databases for reads (e.g. VirStrain_DB/SCOV2 and VirStrain_DB/H1N1) to database for contigs. Then you can try the command below:\n\n`python VirStrain_contigDB_merge.py -i VirStrain_DB/SCOV2,VirStrain_DB/H1N1 -o VirStrain_contig_DB_merge`\n\n\n### Use VirStrain to build your own custom database.<BR/>\n\n  `python VirStrain_build.py -i <Input_MSA> -d <Database_Dir>`<BR/>\n  \n   <b>Important note</b>: \",\" and \"|\" are not allowed in your <Input_MSA>. For example, \">Strain_A, 2022\" or \">Strain_A|2022\" is not allowed but \">Strain_A_2022\" is allowed.\n  \n  For small-scale strains (<1000 input strains) or viruses with large genome sizes (like HCMV), you can use manual-covering function to cover more useful sites. For example, in our experiment, we used \"-s 0.4\" for 328 HCMV strains. Usually, 0.2~0.6 shoule be a suitable range for the parameter \"-s\". However, if you only have very few strains, like 3 strains, you can also use a greater value like \"-s 0.8\".\n  \n  `python VirStrain_build.py -i <Input_MSA> -d <Database_Dir> -s 0.4`<BR/>\n\n  \n  Besides, if you only want to use SNV sites from \"x\" to \"y\" (eg. x=500 to y=1000), then you can add the parameter `-r`.\n  \n  `python VirStrain_build.py -i <Input_MSA> -d <Database_Dir> -s 0.4 -r 500-1000`<BR/>\n  \n  Note: The format of input MSA should be same as the format of MSA generated by Mafft (https://mafft.cbrc.jp/alignment/software/).<BR/>\n  \n### Full command-line options\n\n\nIdentification - VirStrain.py (Default k-mer size: 25)\n```\nVirStrain - An RNA virus strain-level identification tool for short reads.\n\nExample: python VirStrain.py -i Test_Data/MT451123_1.fq -p Test_Data/MT451123_2.fq -d VirStrain_DB/SCOV2 -o MT451123_PE_Test\n\nrequired arguments:\n    -i, --input_reads             Input fastq data.\n    -d, --database_dir            Path of VirStrain database.\n\noptional arguments:\n    -h, --help                    Show help message and exit.\n    -o, --output_dir              The output directory. (Default: ./VirStrain_Out)\n    -p, --input_reads2            Input fastq data for PE reads\n    -c, --site_filter_cutoff      The cutoff of filtering one site when calculate the Vscore. (Default: 0.05)\n    -s, --rank_by_sites\t\t  If set to 1, then VirStrain will sort the most possible strain by matches to the sites. (default: 0)\n    -f, --turn_off_figures\t  If set to 1, then VirStrain will not generate figures. (default: 0)\n    -m, --high_mutation_virus     If the virus has high mutation rate (like HIV), use this option. (Default: off)\n```\nBuild database - VirStrain_build.py (Default k-mer size: 25)\n```\nVirStrain - An RNA virus strain-level identification tool for short reads.\n\nExample:  python VirStrain_build.py -i <Input_MSA> -d <Database_Dir>\n\nrequired arguments:\n     -i, --input_msa               Input MSA file (Must have same format to msa generated by mafft).    \noptional arguments:\n     -d, --database_dir            The output directory of constructed database. (Default: ./VirStrain_DB)\n     -c, --dash_cutoff             The cutoff of dash in each column of MSA. (Default: 0)\n     -s, --sites_cutoff            The cutoff of sites number for manual-covering function. (eg. 1 means all useful sites will be use and 0.8 means 80% useful sites will be used)\n     -r, --sites_rcutoff           The cutoff of sites range for covering algorithm (eg. 3-500 means the covering algorithm will only consider the SNV sites from 3-500 of MSA.)          \n\n```\n\n\n## Output Format\n\nThe output of VirStrain contains two files. The first is a report file in text format. This file contains all identified strains and their depth and site coverage, etc. The other file is an interactive HTML page to display the depth and uniqueness of sites. \n\nYou can check the output file in the folder \"MT451123_Sim_PE\" in this repository.\n\nThe picture below displays an output example of a simulated data (Truth: MT451123.1). <BR/>\n\n![VirStrain Report](https://github.com/liaoherui/VirStrain/blob/main/Output_fmt/report_simulate.png)\n\nExplaination about the four headers in the output of VirStrain\nHeader    |\tDescription\t\n------------ | ------------- \n**Most Possible strain*** | The most possible strain in the sequencing data detected by VirStrain.<BR/>(The strains with highest Vscore in the first iteraition.)\n**Other Possible strains*** | The other possible strain in the sequencing data detected by VirStrain.<BR/>(The strains with highest Vscore in the later iteraition, 10 mutation number can be a strong evidence for other possible strains according to our experiment result.)\nHighest Map Strains | The strain with maximum \"Covered SNV site/Total SNV site\" in the first iteration. For user's reference.\nTop 10 Score Strains | The top10 strain sorted by Vscore in the first iteration. <BR/>For user's reference, and also could be useful information to detect those low abundance strains which are highly similar to the high abundance strain (Eg, only one mutation number).\n\n\uff08Note: the header with **\\*** means the content following this header includes the main identification result.\uff09\n\nExplaination about the columns in the output of VirStrain:\n\nColumn_name    |\tDescription\t\n------------ | ------------- \nStrain_ID |\tThe NCBI (or other public database) accession number of identified strain.\nCls_info | The cluster information of identified strain, eg: Cluster2830_2 -> belong Cluster2830, size=2.\nSubCls_info | The sub-cluster information of identified strain.\nVscore | The Vscore generated by VirStrain algorithm.\nTotal_Map_Rate | The covered sites out of total sites in the first iteration of VirStrain.\nValid_Map_Rate | The covered sites out of total sites in the remaining iteration of VirStrain.\nStrain_depth | The sequencing depth of identified strain predicted by VirStrain.\nStrain_info | The metadata of identified strains, such as region information and subtype, etc.\nSNV_freq | The SNV frequency of all sites.\n\n\n## References:\n\nhow to cite this tool:\n```\nLiao, H., Cai, D. & Sun, Y. VirStrain: a strain identification tool for RNA viruses. Genome Biol 23, 38 (2022). https://doi.org/10.1186/s13059-022-02609-x\n```\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/liaoherui/VirStrain/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "***[Update - 2023 - Sep]*** Use VirStrain_contig to identify viral strains for assembled contigs.",
        "parent_header": [
          "VirStrain   <img src=\"logo.png\" width=\"250\" title=\"VirStrain\">",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "[![install with bioconda](https://img.shields.io/badge/install%20with-bioconda-brightgreen.svg?style=flat)](http://bioconda.github.io/recipes/virstrain/README.html)\n# VirStrain   <img src=\"logo.png\" width=\"250\" title=\"VirStrain\">\nAn RNA virus strain-level identification tool for short reads.\n\n\n\n### E-mail: heruiliao2-c@my.cityu.edu.hk\n### Recommanded Version: V1.17\n* *Old Version - V1.14: Fix some bugs but lack virstrain_contig and virstrain_merge. <BR/>*\n\n<details>\n<summary> Click here to check the log of all updates </summary>\n  \n#### *__[Update - 2022 - 02 - 05]__* :  <BR/>\n \n* *V1.12: VirStrain is able to take gzipped FASTQs as input now! <BR/>*\n\n#### *__[Update - 2022 - 03 - 23]__* :  <BR/>\n \n* *Fix one bug of the perl script about head name problem.*\n\n#### *__[Update - 2022 - 11 - 10]__* :  <BR/>\n\n* *Update a new parameter '-s' that allows sorting the most possible strain by matches to the sites.*\n\n#### *__[Update - 2022 - 12 - 16]__* :  <BR/>\n\n* *The web server extension of VirStrain - StrainDetect (https://strain.ee.cityu.edu.hk) is online now!*\n\n#### *__[Update - 2022 - 12 - 20]__* :  <BR/>\n\n* *V1.13: Fix a database generation bug in V1.12 of bioconda version! <BR/>*\n \n</details>\n  \n#### *__[Update - 2023 - 09 - 05]__* :  <BR/> \n* *A new function that allows comprehensive (including **45619** strains of **28** viral species) viral strain identification for assembled contigs is available!  <BR/>*\n\n#### *__[Update - 2023 - 10 - 12]__* :  <BR/> \n* *V1.14: Fix a bug (about handling gzipped FASTQs) in V1.13! <BR/>*\n\n#### *__[Update - 2024 - 02 - 27]__* :  <BR/> \n* *Tem_Vs files are named randomly (only GitHub version) and links for pre-built databases are provided. <BR/>*\n\n#### *__[Update - 2024 - 03 - 11]__* :  <BR/> \n* *V1.17: All the changes made so far have been updated in both GitHub and Conda. <BR/>*\n\n#### *__[Update - 2024 - 05 - 28]__* :  <BR/> \n* *V1.17: Add the parameter '-v' to show the version information. <BR/>*\n    \n---------------------------------------------------------------------------\n### Dependencies:\n* Python >=3.6 (3.7.3 is recommanded and 3.9 is not supprted now!)\n* Perl\n* Required python package: networkx==2.4, numpy==1.17.3, pandas==1.0.1, biopython==1.74, Plotly==3.10.0\n* **Bowtie2 (for virstrain version >= V1.17)**\n\n(If you have installed conda, then you can run `sh install_package.sh` to install all required packages automatically.)\n\nMake sure these programs have been installed before using VirStrain. (However, if you use bioconda/pip to install VirStrain, ignore this.)\n\n## Install (Linux or ubuntu only)\n\nThe first way to install VirStrain, is to use [bioconda](https://bioconda.github.io/).\nOnce you have bioconda environment installed, install package virstrain:\n\n\tconda install -c bioconda virstrain\n\nThe second way to install VirStrain, is to use [pip](https://pypi.org/project/virstrain/):\n\n\tpip install virstrain==1.17\n\nIt should be noted that some commands have been replaced if you install VirStrain using bioconda/pip. (See below)\n\nCommand (Not bioconda/pip)    |\tCommand (bioconda/pip)\n------------ | ------------- \npython VirStrain.py -h | virstrain -h\npython VirStrain_build.py -h | virstrain_build -h\npython VirStrain_contig.py -h | virstrain_contig -h\npython VirStrain_contigDB_merge.py -h | virstrain_merge -h\n\n\nOr you can install VirStrain mannually (Make sure all dependencies have been installed before this step).\n####\n`git clone https://github.com/liaoherui/VirStrain.git`<BR/>\n`cd VirStrain`<BR/>\n`chmod 755 bin/jellyfish-linux`<BR/>\n`rm VirStrain_DB.tar.gz`<BR/>\n####\n\nThen, you can download the reference database of 3 RNA viruses used in the paper. \nThere are three ways to download the reference database.<BR/><BR/>\n-> Method-1:<BR/>\nRun:<BR/>\n`cd VirStrain`<BR/>\n`sh download.sh`<BR/> <BR/>\n\n#### *__[Update - 2022 - 02 - 08]__* :  <BR/>\n\n* *-> Method-2:<BR/>*\nRun:<BR/>\n`cd VirStrain`<BR/>\n`wget -qO- \"https://figshare.com/ndownloader/files/34002479\" | tar -zx`<BR/>\nOr, download the database from [figshare](https://figshare.com/articles/dataset/VirStrain_DB_tar_gz/19134590/1) mannually, and then extract it using the command `tar -zxvf`.\n\nIf all failed, please email to the author to get the database.\n\n#### *__[Update - 2021 - Nov]__* :  <BR/>\n \n* *The databases of two DNA viruses (HBV and HCMV) used in the paper can be downloaded now! <BR/>*\n`sh download_dna.sh`<BR/>\n* *Besides, a larger database with more SARS-CoV-2 strains (see Supplementary Section 1.1 in the paper) can also be downloaded now. <BR/>*\n`sh download_scov2_big.sh`<BR/> \n\nYou can also build the VirStrain database with your own genomes, the mannual is written in Usage section.\n\n## Pre-built databases download\nIn the event that the download scripts fail to retrieve the pre-built database, we also provide Google drive inks to access all pre-built databases. The table below offers information about the public pre-built databases. Users can download these databases and use them to identify viral strains directly.\nName   |\tDescription   |\tDownload link\n------------ | ------------- | ------------- \nVirStrain_DB.tar.gz |  Databases containing SCOV2, H1N1, and HIV viral strains used in the paper | [Google drive](https://drive.google.com/file/d/1XYqr64tJec7VeDBD0Xc9cuUZqmawoty6/view?usp=sharing)\nSCOV2_newBig.tar.gz |  Databases containing more SCOV2 viral strains used in the paper   | [Google drive](https://drive.google.com/file/d/1qAHjVADTiV3G00YekqystUXT2e7Ho2kq/view?usp=sharing)\nVirStrain_DNA_DB.tar.gz  | Databases containing two DNA viral (HBV and HCMV) strains used in the paper | [Google drive](https://drive.google.com/file/d/1INmaOpBKYFXj1gAngG6CikT7xVjmxsGZ/view?usp=sharing)\nVirStrain_contig_DB.tar.gz | Contig-level database | [Google drive](https://drive.google.com/file/d/1oj-86Njz5mnY6djbhdv23a9r9OH5oqog/view?usp=sharing)\n\n## Usage\nIt should be noted if you install VirStrain using bioconda/pip, you should replace the commands. (see below)\n\nCommand (Not bioconda/pip)    |\tCommand (bioconda/pip)\n------------ | ------------- \npython VirStrain.py -h | virstrain -h\npython VirStrain_build.py -h | virstrain_build -h\npython VirStrain_contig.py -h | virstrain_contig -h\npython VirStrain_contigDB_merge.py -h | virstrain_merge -h\n\n### Use VirStrain to identify RNA virus strains in short reads.\n\nFor SE reads:<BR/>\n  `python VirStrain.py -i Test_Data/MT451123_1.fq -d VirStrain_DB/SCOV2 -o MT451123_SE_Test`<BR/>\n\nFor PE reads:<BR/>\n  `python VirStrain.py -i Test_Data/MT451123_1.fq -p Test_Data/MT451123_2.fq -d VirStrain_DB/SCOV2 -o MT451123_PE_Test`<BR/>\n\nWhen the virus has high mutation rate, like HIV, you may need to add `-m` parameter.\n\nFor HIV:<BR/>\n  SE reads: `python VirStrain.py -i <Read1> -d VirStrain_DB/HIV -o <Output_dir> -m`<BR/>\n  PE reads: `python VirStrain.py -i <Read1> -p <Read2> -d VirStrain_DB/HIV -o <Output_dir> -m`<BR/>\n\n### *__[Update - 2023 - Sep]__* Use VirStrain_contig to identify viral strains for assembled contigs.\n\n`python VirStrain_contig.py -i <Input_Contig_fasta> -d VirStrain_contig_DB -o VirStrain_Contig_Res`<BR/>\n\nYou can use the command below to download the pre-built comprehensive viral strain database for contig identification:\n\n`sh download_contig_db.sh`\n\nIf you want to convert pre-built VirStrain databases for reads (e.g. VirStrain_DB/SCOV2 and VirStrain_DB/H1N1) to database for contigs. Then you can try the command below:\n\n`python VirStrain_contigDB_merge.py -i VirStrain_DB/SCOV2,VirStrain_DB/H1N1 -o VirStrain_contig_DB_merge`\n\n"
      },
      "source": "https://raw.githubusercontent.com/liaoherui/VirStrain/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Use VirStrain to build your own custom database.<BR/>",
        "parent_header": [
          "VirStrain   <img src=\"logo.png\" width=\"250\" title=\"VirStrain\">",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "  `python VirStrain_build.py -i <Input_MSA> -d <Database_Dir>`<BR/>\n  \n   <b>Important note</b>: \",\" and \"|\" are not allowed in your <Input_MSA>. For example, \">Strain_A, 2022\" or \">Strain_A|2022\" is not allowed but \">Strain_A_2022\" is allowed.\n  \n  For small-scale strains (<1000 input strains) or viruses with large genome sizes (like HCMV), you can use manual-covering function to cover more useful sites. For example, in our experiment, we used \"-s 0.4\" for 328 HCMV strains. Usually, 0.2~0.6 shoule be a suitable range for the parameter \"-s\". However, if you only have very few strains, like 3 strains, you can also use a greater value like \"-s 0.8\".\n  \n  `python VirStrain_build.py -i <Input_MSA> -d <Database_Dir> -s 0.4`<BR/>\n\n  \n  Besides, if you only want to use SNV sites from \"x\" to \"y\" (eg. x=500 to y=1000), then you can add the parameter `-r`.\n  \n  `python VirStrain_build.py -i <Input_MSA> -d <Database_Dir> -s 0.4 -r 500-1000`<BR/>\n  \n  Note: The format of input MSA should be same as the format of MSA generated by Mafft (https://mafft.cbrc.jp/alignment/software/).<BR/>\n  "
      },
      "source": "https://raw.githubusercontent.com/liaoherui/VirStrain/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Full command-line options",
        "parent_header": [
          "VirStrain   <img src=\"logo.png\" width=\"250\" title=\"VirStrain\">",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "\nIdentification - VirStrain.py (Default k-mer size: 25)\n```\nVirStrain - An RNA virus strain-level identification tool for short reads.\n\nExample: python VirStrain.py -i Test_Data/MT451123_1.fq -p Test_Data/MT451123_2.fq -d VirStrain_DB/SCOV2 -o MT451123_PE_Test\n\nrequired arguments:\n    -i, --input_reads             Input fastq data.\n    -d, --database_dir            Path of VirStrain database.\n\noptional arguments:\n    -h, --help                    Show help message and exit.\n    -o, --output_dir              The output directory. (Default: ./VirStrain_Out)\n    -p, --input_reads2            Input fastq data for PE reads\n    -c, --site_filter_cutoff      The cutoff of filtering one site when calculate the Vscore. (Default: 0.05)\n    -s, --rank_by_sites\t\t  If set to 1, then VirStrain will sort the most possible strain by matches to the sites. (default: 0)\n    -f, --turn_off_figures\t  If set to 1, then VirStrain will not generate figures. (default: 0)\n    -m, --high_mutation_virus     If the virus has high mutation rate (like HIV), use this option. (Default: off)\n```\nBuild database - VirStrain_build.py (Default k-mer size: 25)\n```\nVirStrain - An RNA virus strain-level identification tool for short reads.\n\nExample:  python VirStrain_build.py -i <Input_MSA> -d <Database_Dir>\n\nrequired arguments:\n     -i, --input_msa               Input MSA file (Must have same format to msa generated by mafft).    \noptional arguments:\n     -d, --database_dir            The output directory of constructed database. (Default: ./VirStrain_DB)\n     -c, --dash_cutoff             The cutoff of dash in each column of MSA. (Default: 0)\n     -s, --sites_cutoff            The cutoff of sites number for manual-covering function. (eg. 1 means all useful sites will be use and 0.8 means 80% useful sites will be used)\n     -r, --sites_rcutoff           The cutoff of sites range for covering algorithm (eg. 3-500 means the covering algorithm will only consider the SNV sites from 3-500 of MSA.)          \n\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/liaoherui/VirStrain/main/README.md",
      "technique": "header_analysis"
    }
  ]
}