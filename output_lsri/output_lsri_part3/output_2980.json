{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "NanoReviser: An Error-correction Tool for Nanopore Sequencing Based on a Deep Learning Algorithm"
        ],
        "type": "Text_excerpt",
        "value": "\nLuotong Wang, Li Qu, Longshu Yang, Yiying Wang and Huaiqiu Zhu\\*; NanoReviser: An Error-correction Tool for Nanopore Sequencing Based on a Deep Learning Algorithm\n\n"
      },
      "source": "https://raw.githubusercontent.com/pkubioinformatics/NanoReviser/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/pkubioinformatics/nanoreviser"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contact",
        "parent_header": [
          "NanoReviser: An Error-correction Tool for Nanopore Sequencing Based on a Deep Learning Algorithm"
        ],
        "type": "Text_excerpt",
        "value": "\nPlease direct your questions to: Dr. Huaiqiu Zhu, [hqzhu@pku.edu.cn](hqzhu@pku.edu.cn)\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/pkubioinformatics/NanoReviser/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-09-05T11:25:03Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-01-24T13:20:02Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "NanoReviser: An Error-correction Tool for Nanopore Sequencing Based on a Deep Learning Algorithm"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "parent_header": [
          "NanoReviser: An Error-correction Tool for Nanopore Sequencing Based on a Deep Learning Algorithm"
        ],
        "type": "Text_excerpt",
        "value": "Nanopore sequencing is regarded as one of the most promising third-generation sequencing (TGS) technologies. However, the nanopore sequencing reads are susceptible to a fairly high error rate owing to the difficulty in identifying the DNA bases from the complex electrical signals. Here we proposed a DNA basecalling reviser, **NanoReviser**, based on a deep learning algorithm to correct the basecalling errors introduced by current basecallers provided by default. In our module, we re-segmented the raw electrical signals based on the basecalled sequences provided by the default basecallers. By employing convolution neural networks (CNNs) and bidirectional long short-term memory (Bi-LSTM) networks, we took advantage of the information from the raw electrical signals and the basecalled sequences from the basecallers. \n\n**NanoReviser**, as a post-basecalling reviser, significantly improving the basecalling quality. The NanoReviser package is freely available at https://github.com/pkubioinformatics/NanoReviser.\n\n"
      },
      "source": "https://raw.githubusercontent.com/pkubioinformatics/NanoReviser/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/pkubioinformatics/NanoReviser/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/pkubioinformatics/nanoreviser/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "pkubioinformatics/nanoreviser"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "NanoReviser: An Error-correction Tool for Nanopore Sequencing Based on a Deep Learning Algorithm"
      },
      "source": "https://raw.githubusercontent.com/pkubioinformatics/NanoReviser/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pkubioinformatics/NanoReviser/master/unitest.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Install NanoReviser using git",
        "parent_header": [
          "NanoReviser: An Error-correction Tool for Nanopore Sequencing Based on a Deep Learning Algorithm",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "clone NanoReviser package\n\n    $ git clone https://github.com/pkubioinformatics/nanoreviser.git\n    \nchange directory to NanoReviser\n\n    $ cd nanoreviser\n\nIf you currently have TensorFlow installed on your system, we would advise you to create a virtual environment to install NanoReviser. If you want to do so, we recommend the user-friendly [Anaconda](https://www.anaconda.com/).\n\nYou will create an eviroment named nanorev for NanoReviser and install all dependencies through conda\n\n**Note : you need to replace the path where you installed anaconda**\n\nFor Linix Centos 7 system:\n    \n     $ sudo yum install https://download-ib01.fedoraproject.org/pub/epel/7/x86_64/Packages/h/hdf5-1.8.12-11.el7.x86_64.rpm\n\n\nFor linux with gpu \n\n      $ conda env create -n nanorev /**Your_Path_to_Anaconda**/envs/nanorev/ -f ./enviroment/NanoReviser.yaml \n\t  $ conda activate nanorev\n \n\nFor linux just with cpu\n\t\n\t  $ conda env create -n nanorev /**Your_Path_to_Anaconda**/envs/nanorev/ -f ./enviroment/NanoReviser_cpu.yaml \n\t  $ conda activate nanorev\n\t  $ conda install tensorflow==1.12.0\n\nFor macOS with cpu \n\n      $ conda env create -n nanorev /**Your_Path_to_Anaconda**/envs/nanorev/ -f ./enviroment/NanoReviser_macOS.yaml \n      $ conda activate nanorev\n\nPlease run the unitest to make sure NanoReviser installed properly.\n\n      $ conda activate nanorev\n      $ sh unitest.sh\n\nIf both NanoReviser.py and NanoReviser_train.py are available, you will get\n\n       Congratulations, please have fun with NanoReviser :)\n    \n"
      },
      "source": "https://raw.githubusercontent.com/pkubioinformatics/NanoReviser/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9318288303267999,
      "result": {
        "original_header": "Version",
        "type": "Text_excerpt",
        "value": "+ NanoReviser 1.0 (Tested on MacOS 10.11 and Linux_64 CentOS 7) \n"
      },
      "source": "https://raw.githubusercontent.com/pkubioinformatics/NanoReviser/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/pkubioinformatics/nanoreviser/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "nanoreviser"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "pkubioinformatics"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 95819,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 852,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pkubioinformatics/NanoReviser/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirements",
        "parent_header": [
          "NanoReviser: An Error-correction Tool for Nanopore Sequencing Based on a Deep Learning Algorithm"
        ],
        "type": "Text_excerpt",
        "value": "+ [Anaconda](https://www.anaconda.com/)\n+ [h5py, version >= 1.8.12](http://www.hdfgroup.org/HDF5/)\n+ [Python version >= 3.6.9](https://www.python.org/)\n+ [numpy version >= 1.17.3](http://www.numpy.org/)\n+ [pandas, version >= 0.25.0](http://pandas.pydata.org/)\n+ [TenserFlow, version >= 1.12.0](https://www.tensorflow.org/)\n+ [Keras, version 1.2.2](https://https://github.com/keras-team/keras/)\n+ [GraphMap, version >= 0.5.2](https://github.com/isovic/graphmap/)\n"
      },
      "source": "https://raw.githubusercontent.com/pkubioinformatics/NanoReviser/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 11:07:26",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 28
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "NanoReviser.py",
        "parent_header": [
          "NanoReviser: An Error-correction Tool for Nanopore Sequencing Based on a Deep Learning Algorithm",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "An ONT basecalling reviser based on deep learning\n\n    usage:\n           python NanoReviser.py [options] -d <fast5_files> -o <output_path> -f <output_format, default=fasta>\n\n           [example]\n           python NanoReviser.py -d ./unitest/test_data/fast5/ -o ./unitest/nanorev_output/ -F fasta -S ecoli\n\n\t  usage: \n           python NanoReviser.py [options]\n\n\t  An ONT basecalling reviser based on deep learning\n\t\n    Options:\n    --version                                              show program's version number and exit\n    -h, --help                                             show this help message and exit\n    -d FAST5_BASE_DIR, --fast5_base_dir=FAST5_BASE_DIR     path to the fast5 files\n    -o OUTPUT_DIR, --output_dir=OUTPUT_DIR                 path to store the output files\n    -S SPECIES, --species=SPECIES                          species model to load which located in ./model/, \n                                                           default is \"human\"\n    -F OUTPUT_FORMAT, --output_format=OUTPUT_FORMAT        format of the output files, default is fasta\n    --thread=THREAD                                        thread, default is 100\n    -t TEMP_DIR, --tmp_dir=TEMP_DIR                        path to the tmp dir, which is used to store the \n                                                           preprocessing files\n    -e FAILED_READS_FILENAME                               document to log the failed reads, default is\n                                                           failed_read.txt\n    \n\n"
      },
      "source": "https://raw.githubusercontent.com/pkubioinformatics/NanoReviser/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "NanoReviser_train.py",
        "parent_header": [
          "NanoReviser: An Error-correction Tool for Nanopore Sequencing Based on a Deep Learning Algorithm",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "A training tools for generation model files for NanoReviser\n\n    usage:\n           python NanoReviser_train.py [options] \n\n\t  An ONT basecalling reviser based on deep learning\n\n\t  Options:\n    --version                                              show program's version number and exit\n    -h, --help                                             show this help message and exit\n    -d FAST5_BASE_DIR, --fast5_base_dir=FAST5_BASE_DIR     path to the fast5 files\n    -r REFERENCE, --reference=REFERENCE                    reference genome for labeling the training data\n    -m OUTPUT_MODEL, --output_dir=OUTPUT_MODEL             name of the dir to store model1 and model2\n    -o OUTPUT_DIR, --output_dir=OUTPUT_DIR                 path to store the output summery files\n\n    -b BATCH_SIZE, --batch_size=BATCH_SIZE                 batch size of trainig NanoReviser, default is 256\n    -e EPOCHS, --epochs=EPOCHS                             epochs of training NanoReviser, defualt is 50\n    -w WINDOW_SIZE, --window_size=WINDOW_SIZE              window size for slicing the read input, defualt is 13\n    -c READ_COUNT, --read_count=READ_COUNT                 the number of read included in the training data, must \n                                                           smaller than the number of files stored in fast5_base_dir, 0 for use all the files in the fast5_base_dir and defult is 0.\n    --validation_split                                     validation data size, default is 0.01, which means 1% \n                                                           reads in fast5_base_dir would be used as validation data.\n\n    --thread=THREAD                                        thread, default is 1\n    --model_type=MODEL_TYPE                                'both', 'model1' or 'model2', default is 'both'\n    --mapper_exe=MAPPER_EXE                                the align tool for generate the lable of training \n                                                           data, default is 'graphmap'\n\n"
      },
      "source": "https://raw.githubusercontent.com/pkubioinformatics/NanoReviser/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "For basecalling revising",
        "parent_header": [
          "NanoReviser: An Error-correction Tool for Nanopore Sequencing Based on a Deep Learning Algorithm",
          "Example"
        ],
        "type": "Text_excerpt",
        "value": "**NanoReviser.py** : An ONT basecalling reviser based on deep learning\n\nFor revising the fast5 files in ./unitest/test_data/fast5/ in order to get fasta files,the command line would be:\n\n    $ conda activate nanorev  #activate the python enviroment for nanoreviser\n    $ pyton NanoReviser.py -d ./unitest/test_data/fast5/ -o ./unitest_nanorev_results/ -S ecoli -F fasta\n\nFor revising the fast5 files in ./unitest/test_data/fast5/ in order to get fastq files,the command line would be:\n\n    $ conda activate nanorev  #activate the python enviroment for nanoreviser\n    $ pyton NanoReviser.py -d ./unitest/test_data/fast5/ -o ./unitest_nanorev_results/ -S ecoli -F fastq\n\nPlease run the following command in oder to get the entire fasta or fastq file contains all reads in fasta5's dir:\n\n    $ cat ./nanorev_results/*.fasta > nanorev_results.fasta \nor\n    \n    $ cat ./nanorev_results/*.fastq > nanorev_results.fastq\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/pkubioinformatics/NanoReviser/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "For training NanoReviser",
        "parent_header": [
          "NanoReviser: An Error-correction Tool for Nanopore Sequencing Based on a Deep Learning Algorithm",
          "Example"
        ],
        "type": "Text_excerpt",
        "value": "**NanoReviser_train.py** A training tools for generation model files for NanoReviser\n\nFor training NanoReviser by data in ./unitest/training_data/fast5/ and reference genome in ./unitest/training_data/reference.fasta in order to get model files in ./model/unitest/ and result files in ./unitest/training_result/,the command line would be:\n\n    $ conda activate nanorev  #activate the python enviroment for nanoreviser\n    $ pyton NanoReviser_train.py -d ./unitest/training_data/fast5/ -r ./unitest/training_data/reference.fasta -o ./unitest_training_results/ -S unitest\n\nThis command will generate two model files in ./model/unitest and for summery files in ./unitest_training_data/.\n\nPlease note that the training process of NanoReviser_train.py could take quite a long time, we highly recommend to use screen command to run NanoReviser_train.py as follow:\n\n    $ screen -S nanorev_train\n    $ conda activate nanorev  #activate the python enviroment for nanoreviser\n    $ pyton NanoReviser_train.py -d ./unitest/training_data/fast5/ -r ./unitest/training_data/reference.fasta -o ./unitest_training_results/ -S unitest -b 256 -w 13 -e 50 -c 0 --validation_slipt=0.01 --model_type=both\n\nThere would be four result files in ./unitest_training_results/:\n\n  (1)  **unitest_win13_50ep_model1_history.csv** (Training history of NanoReviser model1)\n\n  (2)  **unitest_win13_50ep_model1_summery.json** (Paramaters of of NanoReviser model1)\n\n  (3)  **unitest_win13_50ep_model2_history.csv** (Training history of NanoReviser model2)\n\n  (4)  **unitest_win13_50ep_model2_summery.json** (Paramaters of of NanoReviser model2)\n\nAnd two model files in ./model/unitest:\n\n  (1)  **unitest_win13_50ep_model1.h5** \n\n  (2)  **unitest_win13_50ep_model2.h5** \n\n"
      },
      "source": "https://raw.githubusercontent.com/pkubioinformatics/NanoReviser/master/README.md",
      "technique": "header_analysis"
    }
  ]
}