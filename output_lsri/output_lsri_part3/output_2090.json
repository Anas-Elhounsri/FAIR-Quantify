{
  "application_domain": [
    {
      "confidence": 0.8639897655929152,
      "result": {
        "type": "String",
        "value": "Graphs"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/fawaz-dabbaghieh/bubble_gun"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-01-27T03:29:24Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-05T13:34:18Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "original_header": "compact",
        "parent_header": [
          "BubbleGun",
          "Usage and Subcommands"
        ],
        "type": "Text_excerpt",
        "value": "This subcommand outputs a compacted GFA file.\n\n```\nusage: BubbleGun compact [-h] PATH_COMPACTED\n\npositional arguments:\n  PATH_COMPACTED  Compacted graph output path\n\noptional arguments:\n  -h, --help      show this help message and exit\n\n```\nExample:\n`BubbleGun -g test_graph.gfa compact compacted_test.gfa`\n\n"
      },
      "source": "https://raw.githubusercontent.com/fawaz-dabbaghieh/bubble_gun/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.951263204322688,
      "result": {
        "original_header": "BubbleGun",
        "type": "Text_excerpt",
        "value": "This work is published [here](https://academic.oup.com/bioinformatics/advance-article/doi/10.1093/bioinformatics/btac448/6633304?login=true)  \nA tool for detecting Bubbles and Superbubble in De-bruijn graphs. BubbleGun outputs runs of bubbles and superbubbles we call bubble chains.\nSeveral graph-related functions are also implemented in BubbleGun:\n- Graph compacting (merging linear stretches of single nodes),\n- Extracting the biggest connected component in the graph\n- Separating certain chains by their id for further examination\n- Extracting a user-specified neighborhood size around a node to extract as a separate graph for examination\n- Extracting two random paths from each bubble chain for haplotyping\n- Extracting information from long reads aligned to bubble chains \nBubbleGun keeps all optional information in the S (Segment) lines and re-writes them in th output GFA. However, if the graph is compacted then output GFA file doesn't have these optional information, the problem is that when compacting some nodes will be merged and it's not always clear how these optional information can be updated for merged noded.  \n"
      },
      "source": "https://raw.githubusercontent.com/fawaz-dabbaghieh/bubble_gun/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/fawaz-dabbaghieh/bubble_gun/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/fawaz-dabbaghieh/bubble_gun/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "fawaz-dabbaghieh/bubble_gun"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "BubbleGun"
      },
      "source": "https://raw.githubusercontent.com/fawaz-dabbaghieh/bubble_gun/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/fawaz-dabbaghieh/bubble_gun/master/images/drawing_new.png"
      },
      "source": "https://raw.githubusercontent.com/fawaz-dabbaghieh/bubble_gun/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "BubbleGun"
        ],
        "type": "Text_excerpt",
        "value": "BubbleGun can be installed with pip:\n```\npip install BubbleGun\n```\n\nOr can be installed using the setup script simply with this command:\n```\npython3 setup.py install\n```\n\nIn case you do not have admin access or want to install BubbleGun locally for the user, then `--user` can be added after `install`. And the binaries will usually be added to `~/.local/bin` on Linux systems. \nThis will also download the needed dependencies and creat a callable entry point for the tool, and it should be added to the path, so `BubbleGun` can be called anywhere to get the CLI and then be used.\n"
      },
      "source": "https://raw.githubusercontent.com/fawaz-dabbaghieh/bubble_gun/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/fawaz-dabbaghieh/bubble_gun/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2020 Fawaz Dabbaghie\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE\n"
      },
      "source": "https://raw.githubusercontent.com/fawaz-dabbaghieh/bubble_gun/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/fawaz-dabbaghieh/bubble_gun/master/images/bubble_gun_logo.png"
      },
      "source": "https://raw.githubusercontent.com/fawaz-dabbaghieh/bubble_gun/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bubble_gun"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "fawaz-dabbaghieh"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 101771,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/fawaz-dabbaghieh/bubble_gun/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "fawaz-dabbaghieh",
          "type": "User"
        },
        "date_created": "2021-03-24T20:01:59Z",
        "date_published": "2021-03-24T20:06:45Z",
        "description": "This new release now works with overlap graphs and de Bruijn graphs, so it only takes the GFA file as input and no more k value. Also, doesn't use recursion for finding bubble chains which was taking too much memory and breaking for big graphs.\r\n\r\nWas minimally tested and seems to work, still needs more thorough testing",
        "html_url": "https://github.com/fawaz-dabbaghieh/bubble_gun/releases/tag/v1.1.0",
        "release_id": 40376689,
        "tag": "v1.1.0",
        "tarball_url": "https://api.github.com/repos/fawaz-dabbaghieh/bubble_gun/tarball/v1.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/fawaz-dabbaghieh/bubble_gun/releases/40376689",
        "value": "https://api.github.com/repos/fawaz-dabbaghieh/bubble_gun/releases/40376689",
        "zipball_url": "https://api.github.com/repos/fawaz-dabbaghieh/bubble_gun/zipball/v1.1.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "fawaz-dabbaghieh",
          "type": "User"
        },
        "date_created": "2021-03-24T20:01:59Z",
        "date_published": "2021-02-06T18:36:09Z",
        "description": "BFS and Chainout were fixed in this minor update after the JSON output was updated.\r\n\r\nAfter unpacking, should be easily installed using `python3 setup.py install` or to install for a user without having admin access (e.g. on a server) `python3 setup.py install --user`\r\nThe binary `BubbleGun` should be available in `~/./local/bin` and can be called from the terminal with `BubbleGun`",
        "html_url": "https://github.com/fawaz-dabbaghieh/bubble_gun/releases/tag/v1.0.1",
        "release_id": 37523007,
        "tag": "v1.0.1",
        "tarball_url": "https://api.github.com/repos/fawaz-dabbaghieh/bubble_gun/tarball/v1.0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/fawaz-dabbaghieh/bubble_gun/releases/37523007",
        "value": "https://api.github.com/repos/fawaz-dabbaghieh/bubble_gun/releases/37523007",
        "zipball_url": "https://api.github.com/repos/fawaz-dabbaghieh/bubble_gun/zipball/v1.0.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "fawaz-dabbaghieh",
          "type": "User"
        },
        "date_created": "2021-01-28T15:54:03Z",
        "date_published": "2021-01-28T16:13:20Z",
        "description": "This is the first release of BubbleGun. So far been tested by several users and working.\r\nAfter unpacking, should be easily installed using `python3 setup.py install` or to install for a user without having admin access (e.g. on a server) `python3 setup.py install --user`\r\nThe binary `BubbleGun` should be available then in `~/./local/bin` and can be called from terminal with `BubbleGun`",
        "html_url": "https://github.com/fawaz-dabbaghieh/bubble_gun/releases/tag/v1.0.0",
        "name": "First release",
        "release_id": 37038377,
        "tag": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/fawaz-dabbaghieh/bubble_gun/tarball/v1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/fawaz-dabbaghieh/bubble_gun/releases/37038377",
        "value": "https://api.github.com/repos/fawaz-dabbaghieh/bubble_gun/releases/37038377",
        "zipball_url": "https://api.github.com/repos/fawaz-dabbaghieh/bubble_gun/zipball/v1.0.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 07:39:28",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 34
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Use cases",
        "parent_header": [
          "BubbleGun"
        ],
        "type": "Text_excerpt",
        "value": "Some use cases are listed [here](use_cases), there are 3 different use cases explained:\n\n* Myxococcus xanthus de Bruijn Graph\n* Myxococcus xanthus bluntified pangenome using minigraph\n* HG002 de Bruijn Graph from short reads and how to produce haplotypes from simple bubble chains.\n"
      },
      "source": "https://raw.githubusercontent.com/fawaz-dabbaghieh/bubble_gun/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example graph",
        "parent_header": [
          "BubbleGun"
        ],
        "type": "Text_excerpt",
        "value": "![alt text](images/drawing_new.png)\n\nThe graph above represents a bluntified (overlaps removed) of a de Bruijn graph with *k*-mer size of 9.\nThese 4 sequences are traced with the different dotted lines in the graph, and they construct a bubble chains of 3 bubbles.\n2 simple bubbles and 1 superbubble with a nested simple bubble inside.\n\nThe following sections will demonstrate some examples of using this tool.\n"
      },
      "source": "https://raw.githubusercontent.com/fawaz-dabbaghieh/bubble_gun/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage and Subcommands",
        "parent_header": [
          "BubbleGun"
        ],
        "type": "Text_excerpt",
        "value": "The tool has several subcommands and `-h` or `--help` can be used to print the help message.\n```\nusage: BubbleGun [-h] [-g GRAPH_PATH] [--log LOG_LEVEL]\n                 {bchains,compact,biggestcomp,bfs,chainout} ...\n\nFind Bubble Chains.\n\nSubcommands:\n  {bchains,compact,biggestcomp,bfs,chainout}\n                        Available subcommands"
      },
      "source": "https://raw.githubusercontent.com/fawaz-dabbaghieh/bubble_gun/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "bchains",
        "parent_header": [
          "BubbleGun",
          "Usage and Subcommands"
        ],
        "type": "Text_excerpt",
        "value": "    compact             Command for compacting graphs\n    biggestcomp         Command for separating biggest component\n    bfs                 Command for separating neighborhood"
      },
      "source": "https://raw.githubusercontent.com/fawaz-dabbaghieh/bubble_gun/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "chainout",
        "parent_header": [
          "BubbleGun",
          "Usage and Subcommands"
        ],
        "type": "Text_excerpt",
        "value": "                        file\n\nGlobal Arguments:\n  -h, --help            show this help message and exit\n  -g GRAPH_PATH, --in_graph GRAPH_PATH\n                        graph file path (GFA or VG)\n  --log LOG_LEVEL       The logging level [DEBUG, INFO, WARNING, ERROR,\n                        CRITICAL]\n\n```\nAs shown, it takes some Global arguments then specific subcommands. The global arguments `-g` is required, for an input graph and input *k*-mer size respectively.\nIndividual help messages for the subcommands can be called by using the subcommand then followed by `-h` or `--help`\n\n\n### bchains\n\nThis subcommand is for detecting bubble and superbubble chains.\nThe following help page is available for bchains\n```\nusage: BubbleGun bchains [-h] [--bubble_json OUT_JSON] [--only_simple]\n                         [--only_super] [--save_memory]\n                         [--chains_gfa CHAINS_GFA] [--fasta FASTA]\n                         [--out_haplos]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --bubble_json OUT_JSON\n                        Outputs Bubbles, Superbubbles, and Chains as a JSON\n                        file\n  --only_simple         If used then only simple bubbles are detected\n  --only_super          If used then only simple bubbles are detected\n  --save_memory         Identifies bubble chain with less memory. No\n                        statistics outputted\n  --chains_gfa CHAINS_GFA\n                        Output only bubble chains as a GFA file\n  --fasta FASTA         Outputs the bubble branches as fasta file (doesn't\n                        work with memory saving)\n  --out_haplos          output randomly two haplotypes for each chain (doesn't\n                        work with memory saving)\n```\nExamples:\n* A user wants to detect chains and output JSON file with information about the bubbles and low memory usage.\n. With saving memory, only the graph topology will be stored in memory, and the sequences will not be read from the file.\nCommand:\n\n  `BubbleGun -g test_graph.gfa bchains --bubble_json test_graph_chains.json`\n* A user wants to detect chains and output a new GFA graph with only the bubble chains.\nCommand:\n\n  `BubbleGun -g test_graph.gfa bchains --chains_gfa chains_output.gfa`\n* A user wants to detect chains and output a FASTA file with only bubble branches sequences (currently only works for simple bubbles), \nwhere the sequence name indicate from which chains and which bubble they come from. Command:\n\n  `BubbleGun -g test_graph.gfa bchains --only_simple --fasta test_output.fasta`\n \nFor the previous example, the JSON and FASTA output can be seen in [example](example)\n* Of course, all the previous commands can be combined in one to output a JSON, a GFA and a FASTA.\n  `BubbleGun -g test_graph.gfa -k 9 bchains --only_simple `\n  \n### chainout\nThis subcommand separates a chain or several chains by their ids according to the JSON file.\nThe following help page is available for the chainout subcommand:\n```\nusage: BubbleGun chainout [-h] [--json_file JSON_FILE]\n                          [--chain_ids CHAIN_IDS [CHAIN_IDS ...]]\n                          [--output_chain OUTPUT]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --json_file JSON_FILE\n                        The JSON file wtih bubble chains information\n  --chain_ids CHAIN_IDS [CHAIN_IDS ...]\n                        Give the chain Id(s) to be outputted\n  --output_chain OUTPUT\n                        Output path for the chains chosen\n```\n\nExample command:\n\n`BubbleGun -g test_graph.gfa chainout --json_file test_graph_chains.json --chain_ids 10 13 30 --output_chain test_output.gfa`\n\nThe ids given should be present in the JSON file and the graph given should be the same graph used to generate the JSON file.\n"
      },
      "source": "https://raw.githubusercontent.com/fawaz-dabbaghieh/bubble_gun/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "biggestcomp",
        "parent_header": [
          "BubbleGun",
          "Usage and Subcommands"
        ],
        "type": "Text_excerpt",
        "value": "This subcommand separates the biggest component in the graph and outputs it.\n\n```\nusage: BubbleGun biggestcomp [-h] PATH_BIG_COMP\n\npositional arguments:\n  PATH_BIG_COMP  Biggest component output path\n\noptional arguments:\n  -h, --help     show this help message and exit\n\n```\nExample:\n`BubbleGun -g test_graph.gfa biggestcomp biggest_comp.gfa`\n\n"
      },
      "source": "https://raw.githubusercontent.com/fawaz-dabbaghieh/bubble_gun/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "bfs",
        "parent_header": [
          "BubbleGun",
          "Usage and Subcommands"
        ],
        "type": "Text_excerpt",
        "value": "This subcommand can be used to extract a neighborhood using BFS around a start node or several start nodes (takes the node id), these neighborhood will be outputted as a GFA file.\n\n```\nusage: BubbleGun bfs [-h] [--start START_NODES [START_NODES ...]] [--neighborhood_size SIZE]\n                     [--output_neighborhood OUTPUT]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --start START_NODES [START_NODES ...]\n                        Give the starting node(s) for neighborhood extraction\n  --neighborhood_size SIZE\n                        With -s --start option, size of neighborhood to extract\n  --output_neighborhood OUTPUT\n                        Output neighborhood file\n```\nExamples:\n* Extracting a neighborhood of size 100 nodes around the node with id 540\n\n  `BubbleGun -g test_graph.gfa bfs --start 540 --neighborhood_size 100 --output_neighborhood output.gfa`\n* Extracting the neighborhoods of size 100 nodes around nodes 500, 540, and 1509. Regardless if these neighborhood are connected or not, they all will be in the same output file.\n\n  `BubbleGun -g test_graph.gfa bfs --start 500 540 1509 --neighborhood_size 100 --output_neighborhood output.gfa`\n\n[comment]: <> (### gamdigest)\n\n[comment]: <> (This subcommand filters an alignemnt GAM file.)\n\n[comment]: <> (The following help is available for this subcommand:)\n\n[comment]: <> (```)\n\n[comment]: <> (usage: main.py gamdigest [-h] [--json_file JSON_FILE] [--alignment_file GAM])\n\n[comment]: <> (                         [--min_cutoff MIN_CUTOFF] [--out_dict PICKLE_OUT])\n\n[comment]: <> (optional arguments:)\n\n[comment]: <> (  -h, --help            show this help message and exit)\n\n[comment]: <> (  --json_file JSON_FILE)\n\n[comment]: <> (                        The JSON file wtih bubble chains information)\n\n[comment]: <> (  --alignment_file GAM  Take GAM file and output pickled dict)\n\n[comment]: <> (  --min_cutoff MIN_CUTOFF)\n\n[comment]: <> (                        The minimum cutoff of a mapping length.)\n\n[comment]: <> (  --out_dict PICKLE_OUT)\n\n[comment]: <> (                        A pickled dictionary output path. contains)\n\n[comment]: <> (                        read_id:[nodes])\n\n[comment]: <> (```)\n\n[comment]: <> (This command is used to \"filter\" a GAM file which is an alignment file of reads aligned to the graph. This mainly works on the output from [GraphAligner]&#40;https://github.com/maickrau/GraphAligner&#41; after aligning long reads to the graph.)\n\n[comment]: <> (GraphAligner outputs a GAM files which this commands takes along with the bubble chain graph aligned to and a minimum length cutoff for mappings. Each read would have several mappings, first, all mappings that are smaller than the cutoff are dicarded, then if the same read mapped to the same chain more than once, the longest mapping is kept.)\n\n[comment]: <> (The output is a pickled dictionary with keys as read names and values as a list of nodes the read have mapped to. This pickled dictionary along with the graph can be given then to Whatshap phaseb command to output phased bubbles according to how the long reads mapped to these bubbles, but this is still under construction.)\n\n[comment]: <> (Example command:)\n\n[comment]: <> (`./main.py gamdigest --json_file test_graph_chains.json --alignment_file test_alignment.gam --min_cutoff 200 --out_dict alignment_dictionary.pickle`)\n"
      },
      "source": "https://raw.githubusercontent.com/fawaz-dabbaghieh/bubble_gun/master/README.md",
      "technique": "header_analysis"
    }
  ]
}