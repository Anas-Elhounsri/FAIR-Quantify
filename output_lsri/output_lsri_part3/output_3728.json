{
  "application_domain": [
    {
      "confidence": 0.9171231806561226,
      "result": {
        "type": "String",
        "value": "Graphs"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation:",
        "parent_header": [
          "Single-Cell alignment using Optimal Transport (SCOT)",
          "SCOT v.2.0"
        ],
        "type": "Text_excerpt",
        "value": "We are excited to see any extentions and improvements our work! If you are using code from this repository, please kindly cite our work: \n\n**For SCOT v.1.0:** <br>\nDemetci, P. Santorella, R. Sandstede, B., Noble, W. S., Singh, R. 2020. Gromov-Wasserstein based optimal transport for aligning single-cell multi-omics data. bioRxiv. 2020.04.28.066787; doi: https://doi.org/10.1101/2020.04.28.066787<br>\n**BibTex Citation:**  \n```\n@article {Demetci2020.SCOT,  \n\tauthor = {Demetci, Pinar and Santorella, Rebecca and Sandstede, Bj{\\\"o}rn and Noble, William Stafford and Singh, Ritambhara},  \n\ttitle = {Gromov-Wasserstein optimal transport to align single-cell multi-omics data},  \n\telocation-id = {2020.04.28.066787},  \n\tyear = {2020},  \n\tdoi = {10.1101/2020.04.28.066787},  \n\tpublisher = {Cold Spring Harbor Laboratory},  \n\tURL = {https://www.biorxiv.org/content/early/2020/11/11/2020.04.28.066787},  \n\teprint = {https://www.biorxiv.org/content/early/2020/11/11/2020.04.28.066787.full.pdf},  \n\tjournal = {bioRxiv}. \n}\n```\n\n**For SCOT v.2.0:** <br>\nDemetci, P. Santorella, R. Sandstede, B., Noble, W. S., Singh, R. 2021. Unsupervised integration of single-cell multi-omics datasets with disparities in cell-type representation. bioRxiv. 2021.11.09.467903; doi: https://doi.org/10.1101/2021.11.09.467903<br>\n**BibTex Citation:**  \n```\n\n@article{Demetci2021.SCOTv2,\n\tauthor = {Demetci, Pinar and Santorella, Rebecca and Sandstede, Bj{\\\"o}rn and Singh, Ritambhara},\n\tdoi = {10.1101/2021.11.09.467903},\n\telocation-id = {2021.11.09.467903},\n\teprint = {https://www.biorxiv.org/content/early/2021/11/11/2021.11.09.467903.full.pdf},\n\tjournal = {bioRxiv},\n\tpublisher = {Cold Spring Harbor Laboratory},\n\ttitle = {Unsupervised integration of single-cell multi-omics datasets with disparities in cell-type representation},\n\turl = {https://www.biorxiv.org/content/early/2021/11/11/2021.11.09.467903},\n\tyear = {2021},\n\tBdsk-Url-1 = {https://www.biorxiv.org/content/early/2021/11/11/2021.11.09.467903},\n\tBdsk-Url-2 = {https://doi.org/10.1101/2021.11.09.467903}}\n\n```\n"
      },
      "source": "https://raw.githubusercontent.com/rsinghlab/SCOT/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Demetci, Pinar and Santorella, Rebecca and Sandstede, Bj{\\\"o}rn and Singh, Ritambhara",
        "doi": "10.1101/2021.11.09.467903",
        "format": "bibtex",
        "title": "Unsupervised integration of single-cell multi-omics datasets with disparities in cell-type representation",
        "type": "Text_excerpt",
        "url": "https://www.biorxiv.org/content/early/2021/11/11/2021.11.09.467903",
        "value": "@article{Demetci2021.SCOTv2,\n    bdsk-url-2 = {https://doi.org/10.1101/2021.11.09.467903},\n    bdsk-url-1 = {https://www.biorxiv.org/content/early/2021/11/11/2021.11.09.467903},\n    year = {2021},\n    url = {https://www.biorxiv.org/content/early/2021/11/11/2021.11.09.467903},\n    title = {Unsupervised integration of single-cell multi-omics datasets with disparities in cell-type representation},\n    publisher = {Cold Spring Harbor Laboratory},\n    journal = {bioRxiv},\n    eprint = {https://www.biorxiv.org/content/early/2021/11/11/2021.11.09.467903.full.pdf},\n    elocation-id = {2021.11.09.467903},\n    doi = {10.1101/2021.11.09.467903},\n    author = {Demetci, Pinar and Santorella, Rebecca and Sandstede, Bj{\\\"o}rn and Singh, Ritambhara},\n}"
      },
      "source": "https://raw.githubusercontent.com/rsinghlab/SCOT/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/rsinghlab/SCOT"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-04-15T15:30:56Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-16T18:19:03Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Gromov-Wasserstein based optimal transport for aligning single-cell multi-omics data"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9674353900645617,
      "result": {
        "original_header": "Single-Cell alignment using Optimal Transport (SCOT)",
        "type": "Text_excerpt",
        "value": "SCOT is a Python tool for performing unsupervised alignment of single-cell multi-omics datasets. Its methodology is detailed in the following two papers:\n- SCOT v.1.0 (in src/scotv1.py): [Gromov-Wasserstein based optimal transport for aligning single-cell multi-omics data](https://www.biorxiv.org/content/10.1101/2020.04.28.066787v2)\n- SCOT v.2.0 (in src/scotv2.py): [Unsupervised integration of single-cell multi-omics datasets with disparities in cell-type representation](https://www.biorxiv.org/content/10.1101/2021.11.09.467903v1) \n"
      },
      "source": "https://raw.githubusercontent.com/rsinghlab/SCOT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9365782294639455,
      "result": {
        "original_header": "SCOT v.1.0",
        "type": "Text_excerpt",
        "value": "***THIS ARCHIVE CONTAINS BOTH SCOT v.1.0 AND SCOT v.2.0***<br>\nUsage: All dependencies are recorded in `requirements.txt`. You can install them together with `pip install requirements.txt`.<br>\nJupyter notebooks to replicate the results from the manuscript are in the folder `/replication`. These also give examples for how to use SCOT. Scripts in `/examples` contain sample scripts for unsupervised and supervised hyperparameter selection. <br> \nBasic use:\n```{python} \nfrom scotv1 import *\n# or\nfrom scotv2 import * \n\n# Given two numpy matrices, domain1 and domain2, where the rows are cells and columns are different genomic features:\nscot= SCOT(domain1, domain2)\naligned_domain1, aligned_domain2 = scot.align(k=50, e=1e-3)\n\n#If you can't pick the parameters k and e, you can try out our unsupervised self-tuning heuristic by running:\nscot= SCOT(domain1, domain2)\naligned_domain1, aligned_domain2 = scot.align(selfTune=True)\n```\n**Required parameters for the `align()` method:**\n- ***k:*** Number of neighbors to be used when constructing kNN graphs. Default= min(min(n_1, n_2), 50), where n_i, for i=1,2 corresponds to the number of samples in the i^th domain.\n- ***e:*** Regularization constant for the entropic regularization term in entropic Gromov-Wasserstein optimal transport formulation. Default= 1e-3 \n   \n**Optional parameters:**\n- ***normalize=*** Determines whether to normalize input data ahead of alignment. True or False (boolean parameter). Default = True.\n- ***norm=*** Determines what sort of normalization to run, \"l2\", \"l1\", \"max\", \"zscore\". Default=\"l2\" \n- ***mode:*** \"connectivity\" or \"distance\". Determines whether to use a connectivity graph (adjacency matrix of 1s/0s based on whether nodes are connected) or a distance graph (adjacency matrix entries weighted by distances between nodes). Default=\"connectivity\"  \n- ***metric:*** Sets the metric to use while constructing nearest neighbor graphs. some possible choices are \"correlation\", \"minkowski\".  \"correlation\" is Pearson's correlation and \"minkowski\" is equivalent to Euclidean distance in its default form (). Default= \"correlation\". \n- ***verbose:*** Prints loss while optimizing the optimal transport formulation. Default=True\n- ***XontoY:*** Determines the direction of barycentric projection. True or False (boolean parameter). If True, projects domain1 onto domain2. If False, projects domain2 onto domain1. Default=True. \n***Note:*** If you want to specify the marginal distributions of the input domains and not use uniform distribution, please set the attributes p and q to the distributions of your choice (for domain 1, and 2, respectively) after initializing a SCOT class instance and before running alignment and set init_marginals=False in .align() parameters\n \n"
      },
      "source": "https://raw.githubusercontent.com/rsinghlab/SCOT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8764147839318004,
      "result": {
        "original_header": "SCOT v.2.0",
        "type": "Text_excerpt",
        "value": "A few extensions:\n1) Alignment with the unbalanced Gromov-Wasserstein optimal transport formulation to handle cell-type representation disparities (Sejourne et al, 2020)\n2) Multi-modal alignment by picking the anchor domain based on imputation potential of domain-specific nearest neighbor graphs\n3) Different choices for joint embedding/projection\n \n"
      },
      "source": "https://raw.githubusercontent.com/rsinghlab/SCOT/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/rsinghlab/SCOT/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rsinghlab/SCOT/master/src/.ipynb_checkpoints/UnbalancedExample-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/rsinghlab/SCOT/master/src/.ipynb_checkpoints/UnbalancedExample-checkpoint.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rsinghlab/SCOT/master/src/.ipynb_checkpoints/unbalanced_SNAREseq-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/rsinghlab/SCOT/master/src/.ipynb_checkpoints/unbalanced_SNAREseq-checkpoint.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rsinghlab/SCOT/master/src/.ipynb_checkpoints/save_here-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/rsinghlab/SCOT/master/src/.ipynb_checkpoints/save_here-checkpoint.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rsinghlab/SCOT/master/src/.ipynb_checkpoints/Untitled-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/rsinghlab/SCOT/master/src/.ipynb_checkpoints/Untitled-checkpoint.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rsinghlab/SCOT/master/.ipynb_checkpoints/scGEM_SCOT_alignment-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/rsinghlab/SCOT/master/.ipynb_checkpoints/scGEM_SCOT_alignment-checkpoint.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rsinghlab/SCOT/master/.ipynb_checkpoints/SNAREseq_newSCOT-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/rsinghlab/SCOT/master/.ipynb_checkpoints/SNAREseq_newSCOT-checkpoint.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rsinghlab/SCOT/master/.ipynb_checkpoints/SNAREseq_SCOT_alignment-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/rsinghlab/SCOT/master/.ipynb_checkpoints/SNAREseq_SCOT_alignment-checkpoint.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rsinghlab/SCOT/master/.ipynb_checkpoints/SNAREseq_replicate-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/rsinghlab/SCOT/master/.ipynb_checkpoints/SNAREseq_replicate-checkpoint.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rsinghlab/SCOT/master/.ipynb_checkpoints/unbalanced_GW-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/rsinghlab/SCOT/master/.ipynb_checkpoints/unbalanced_GW-checkpoint.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rsinghlab/SCOT/master/.ipynb_checkpoints/unbalanced_GW_SNAREseq-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/rsinghlab/SCOT/master/.ipynb_checkpoints/unbalanced_GW_SNAREseq-checkpoint.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rsinghlab/SCOT/master/examples/SNAREseq_SCOT_alignment.ipynb"
      },
      "source": "https://raw.githubusercontent.com/rsinghlab/SCOT/master/examples/SNAREseq_SCOT_alignment.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rsinghlab/SCOT/master/examples/UnbalancedExample_SNARE.ipynb"
      },
      "source": "https://raw.githubusercontent.com/rsinghlab/SCOT/master/examples/UnbalancedExample_SNARE.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rsinghlab/SCOT/master/examples/scGEM_SCOT_alignment.ipynb"
      },
      "source": "https://raw.githubusercontent.com/rsinghlab/SCOT/master/examples/scGEM_SCOT_alignment.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rsinghlab/SCOT/master/examples/.ipynb_checkpoints/UnbalancedExample_SNARE-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/rsinghlab/SCOT/master/examples/.ipynb_checkpoints/UnbalancedExample_SNARE-checkpoint.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rsinghlab/SCOT/master/replication/SNAREseq_SCOT_alignment.ipynb"
      },
      "source": "https://raw.githubusercontent.com/rsinghlab/SCOT/master/replication/SNAREseq_SCOT_alignment.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rsinghlab/SCOT/master/replication/scGEM_SCOT_alignment.ipynb"
      },
      "source": "https://raw.githubusercontent.com/rsinghlab/SCOT/master/replication/scGEM_SCOT_alignment.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rsinghlab/SCOT/master/replication/.ipynb_checkpoints/scGEM_SCOT_alignment-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/rsinghlab/SCOT/master/replication/.ipynb_checkpoints/scGEM_SCOT_alignment-checkpoint.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rsinghlab/SCOT/master/replication/.ipynb_checkpoints/SNAREseq_SCOT_alignment-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/rsinghlab/SCOT/master/replication/.ipynb_checkpoints/SNAREseq_SCOT_alignment-checkpoint.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 16
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/rsinghlab/SCOT/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "rsinghlab/SCOT"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Single-Cell alignment using Optimal Transport (SCOT)"
      },
      "source": "https://raw.githubusercontent.com/rsinghlab/SCOT/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9136693304074878,
      "result": {
        "original_header": "Single-Cell alignment using Optimal Transport (SCOT)",
        "type": "Text_excerpt",
        "value": "For full documentation, please visit https://rsinghlab.github.io/SCOT/ (currently being updated).  \n \n"
      },
      "source": "https://raw.githubusercontent.com/rsinghlab/SCOT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.999029032633136,
      "result": {
        "original_header": "SCOT v.1.0",
        "type": "Text_excerpt",
        "value": "***THIS ARCHIVE CONTAINS BOTH SCOT v.1.0 AND SCOT v.2.0***<br>\nUsage: All dependencies are recorded in `requirements.txt`. You can install them together with `pip install requirements.txt`.<br>\nJupyter notebooks to replicate the results from the manuscript are in the folder `/replication`. These also give examples for how to use SCOT. Scripts in `/examples` contain sample scripts for unsupervised and supervised hyperparameter selection. <br> \nE-mail: `pinar_demetci@brown.edu`, `pinardemetci@gmail.com`, `rebecca_santorella@brown.edu` or `ritambhara@brown.edu` if you have any questions.<br> \n"
      },
      "source": "https://raw.githubusercontent.com/rsinghlab/SCOT/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/rsinghlab/SCOT/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2020 Singh Lab at Brown University CCMB\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/rsinghlab/SCOT/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rsinghlab/SCOT/master/assets/SCOT_logo.png"
      },
      "source": "https://raw.githubusercontent.com/rsinghlab/SCOT/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SCOT"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "rsinghlab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 2193412,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 42127,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rsinghlab/SCOT/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "pinardemetci",
          "type": "User"
        },
        "date_created": "2021-12-21T19:40:01Z",
        "date_published": "2021-12-21T19:45:36Z",
        "description": "This version of the code implements [\"Gromov-Wasserstein optimal transport to align single-cell multi-omics data\"](https://www.biorxiv.org/content/10.1101/2020.04.28.066787v2)",
        "html_url": "https://github.com/rsinghlab/SCOT/releases/tag/SCOTv1.0",
        "name": "SCOT v1.0: First release",
        "release_id": 55775713,
        "tag": "SCOTv1.0",
        "tarball_url": "https://api.github.com/repos/rsinghlab/SCOT/tarball/SCOTv1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/rsinghlab/SCOT/releases/55775713",
        "value": "https://api.github.com/repos/rsinghlab/SCOT/releases/55775713",
        "zipball_url": "https://api.github.com/repos/rsinghlab/SCOT/zipball/SCOTv1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-06 13:52:15",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 66
      },
      "technique": "GitHub_API"
    }
  ]
}