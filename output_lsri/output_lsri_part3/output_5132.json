{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/tomkurowski/tersect"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-04-18T13:44:33Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-06T06:28:26Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Command-line utility for conducting fast set theoretical operations and genetic distance estimation on biological sequence variant data."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9917131093728693,
      "result": {
        "original_header": "Tersect",
        "type": "Text_excerpt",
        "value": "Tersect is a command-line utility for conducting fast set theoretical operations and genetic distance estimation on biological sequence variant data. The tool [generates index files](#building-a-tersect-index) based on provided variant data (VCF files) which can then be used to rapidly [execute flexible set theoretical queries](#set-operations) and output the resulting lists of variants in selected regions. \nTersect is intended to allow for highly responsive, exploratory interaction with variant data as well as for integration with larger tools and pipelines. It follows the Samtools/tabix convention for specifying [genomic regions](#regions) which allows for much faster operations and more manageable output sizes. \nTersect can also be used to provide estimates of genetic distance between sets of samples, using the number of differing sites as a proxy for distance measures.\n \n"
      },
      "source": "https://raw.githubusercontent.com/tomkurowski/tersect/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9389682391135791,
      "result": {
        "original_header": "Building a Tersect index",
        "type": "Text_excerpt",
        "value": "You can build your own Tersect index based on a set of VCF files using the `tersect build` command. You need to provide a name for your index file (a .tsi extension will be added if you omit it) as the first argument, followed by any number of input VCF files (which may be compressed using gzip) to be included in the index.  \nPlease note that although from a technical point of you, Tersect would work even if your VCF files were called against different reference genomes or versions of the same reference, the biological context of your theoretical operations won't be accurate (depending on how different the reference genomes used). Therefore, we strongly recommend using VCF files called against the same reference version. \nIt is worth noting that the descriptive fields of the VCF files are not stored within the Tersect database. The reason for that is once an operation is performed on two of more VCF files, these fields will be discarded anyway as they are genotype-specific. However, you should be able to retrieve it back by intesecting Tersect's output with any VCF files from this list.\n \n"
      },
      "source": "https://raw.githubusercontent.com/tomkurowski/tersect/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.945943996123824,
      "result": {
        "original_header": "Inspecting a Tersect index",
        "type": "Text_excerpt",
        "value": "The data contained in a Tersect index file can be inspected using several commands. The `tersect chroms` command prints information on the number of variants present in each of the reference chromosomes as well as the chromosome names and size. **Note:** In the absence of a reference file, the *length* of each chromosome is represented by the position of the last variant, which will always be an underestimate. \nThe `tersect samples` command prints the names of samples present in a Tersect index file. These can be either all samples or a subset based on a naming pattern (the `--match` parameter) and/or on the presence of specific variants (the `--contains` parameter). \nIf you specify a list of variants via the `--contains` paramter, only samples which contain each of those variants will be printed. The variant format should look as follows: `chromosome:position:ref:alt` where `ref` and `alt` are reference and alternate alleles. Multiple variants can be included, separated by commas (e.g. `chr1:1245:A:G,chr8:5300:T:A`). \n"
      },
      "source": "https://raw.githubusercontent.com/tomkurowski/tersect/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/tomkurowski/tersect/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/tomkurowski/tersect/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "tomkurowski/tersect"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Tersect"
      },
      "source": "https://raw.githubusercontent.com/tomkurowski/tersect/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Pre-compiled releases",
        "parent_header": [
          "Tersect",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "Tersect packages and binaries are available for download below:\n"
      },
      "source": "https://raw.githubusercontent.com/tomkurowski/tersect/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Linux",
        "parent_header": [
          "Tersect",
          "Installation",
          "Pre-compiled releases"
        ],
        "type": "Text_excerpt",
        "value": "- 64-bit binaries: [tersect-0.12.0-Linux.tar.gz](https://github.com/tomkurowski/tersect/releases/download/v0.12.0/tersect-0.12.0-Linux.tar.gz)\n- 64-bit .deb package (Debian, Ubuntu): [tersect-0.12.0-Linux.deb](https://github.com/tomkurowski/tersect/releases/download/v0.12.0/tersect-0.12.0-Linux.deb)\n- 64-bit .rpm package (Fedora, openSUSE): [tersect-0.12.0-Linux.rpm](https://github.com/tomkurowski/tersect/releases/download/v0.12.0/tersect-0.12.0-Linux.rpm)\n"
      },
      "source": "https://raw.githubusercontent.com/tomkurowski/tersect/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "macOS",
        "parent_header": [
          "Tersect",
          "Installation",
          "Pre-compiled releases"
        ],
        "type": "Text_excerpt",
        "value": "- 64-bit binaries: [tersect-0.12.0-macOS.tar.gz](https://github.com/tomkurowski/tersect/releases/download/v0.12.0/tersect-0.12.0-macOS.tar.gz)\n"
      },
      "source": "https://raw.githubusercontent.com/tomkurowski/tersect/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Building Tersect from source",
        "parent_header": [
          "Tersect",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "Building Tersect from source requires CMake version 3.1+ as well as Flex (lexical analyzer) version 2.5+ and Bison (parser generator) version 2.6+.\n"
      },
      "source": "https://raw.githubusercontent.com/tomkurowski/tersect/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1. Cloning the repository",
        "parent_header": [
          "Tersect",
          "Installation",
          "Building Tersect from source"
        ],
        "type": "Text_excerpt",
        "value": "```bash\ngit clone https://github.com/tomkurowski/tersect.git\n```\n"
      },
      "source": "https://raw.githubusercontent.com/tomkurowski/tersect/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2. Building",
        "parent_header": [
          "Tersect",
          "Installation",
          "Building Tersect from source"
        ],
        "type": "Text_excerpt",
        "value": "For an out-of-source build after cloning the repository use the following commands:\n\n```bash\ncd tersect\nmkdir build\ncd build\ncmake ..\nmake\n```\n"
      },
      "source": "https://raw.githubusercontent.com/tomkurowski/tersect/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3. Installing",
        "parent_header": [
          "Tersect",
          "Installation",
          "Building Tersect from source"
        ],
        "type": "Text_excerpt",
        "value": "This step may require elevated permissions (e.g. prefacing the command with ``sudo``). The default installation location for Tersect is `/usr/local/bin`.\n\n```bash\nmake install\n```\n"
      },
      "source": "https://raw.githubusercontent.com/tomkurowski/tersect/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Overview",
        "parent_header": [
          "Tersect",
          "Set operations"
        ],
        "type": "Text_excerpt",
        "value": "Tersect can interpret and display the results of set theoretical commands using the `tersect view` command. This is the primary and most flexible functionality of the application and allows the user to construct arbitrarily complex queries. The expected format of a `tersect view` query is as follows:\n\n```console\ntersect view [options] index.tsi QUERY [REGION1...]\n```\n"
      },
      "source": "https://raw.githubusercontent.com/tomkurowski/tersect/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Queries",
        "parent_header": [
          "Tersect",
          "Set operations"
        ],
        "type": "Text_excerpt",
        "value": "A query is a command interpreted and evaluated by Tersect which (if successful) prints either a list of variants (if the result is a single genome or virtual genome) or a list of genome sample names (if the result is a list of genomes). The simplest query consists of a genome name and prints out the variants belonging to that genome. More advanced queries can contain complex combinations of operations described in the sections below.\n\n**Note:** The term *virtual genome* refers to a collection of variants not representing a specific genome - for example, the symmetric difference of two genomes (the collection of variants which appear in one but not both of the genomes). Tersect treats these *virtual genomes* the same way it treats \"real\" genomes so they can be used as operands in nested queries.\n"
      },
      "source": "https://raw.githubusercontent.com/tomkurowski/tersect/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Genomes",
        "parent_header": [
          "Tersect",
          "Set operations",
          "Queries"
        ],
        "type": "Text_excerpt",
        "value": "Genomes can be referred to by their sample name, which is either taken from the header line of the source VCF file or set by the user either manually (see `tersect rename`) or through a tab-delimited name file (see `--name-file` in `tersect build` and `tersect rename`). A sample name can be of any length and can include any characters (including whitespace) except for single quotes ('). However, if a sample name includes whitespace, parentheses, or characters used as Tersect operators (-^&|>,\\\\), it has to be surrounded by single quotes (').\n\nIf the query is (or results in) a single genome or virtual genome, the variants contained by that one genome are printed out.\n\n**Example:**\n\nPrint out all the variants belonging to the \"S.hab LYC4\" genome in the *tomato.tsi* Tersect index file:\n\n```console\nfoo@bar:~$ tersect view tomato.tsi \"'S.hab LYC4'\"\n##fileformat=VCFv4.3\n##tersectVersion=0.11.0\n##tersectCommand='S.hab LYC4'\n#CHROM\tPOS\tID\tREF\tALT\tQUAL\tFILTER\tINFO\nSL2.50ch00\t391\t.\tC\tT\t.\t.\t.\nSL2.50ch00\t416\t.\tT\tA\t.\t.\t.\nSL2.50ch00\t734\t.\tT\tG\t.\t.\t.\nSL2.50ch00\t759\t.\tC\tT\t.\t.\t.\nSL2.50ch00\t771\t.\tA\tG\t.\t.\t.\nSL2.50ch00\t778\t.\tT\tA\t.\t.\t.\n...\n```\n\n**Note:** The sample name had to be surrounded by single quotes because it contains a whitespace character.\n"
      },
      "source": "https://raw.githubusercontent.com/tomkurowski/tersect/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Binary operators",
        "parent_header": [
          "Tersect",
          "Set operations",
          "Queries"
        ],
        "type": "Text_excerpt",
        "value": "Tersect supports four basic binary operators. Each operand has to be a **single** genome. All four operators have the same precedence and are left-associative. You can use parentheses to enforce precedence other than simple left-to-right.\n\n| Operator  | Name                 | Usage              | Result                                                       |\n|:---------:|:--------------------:|:------------------:|:------------------------------------------------------------:|\n| &         | intersection         | GENOME1 & GENOME2  | Virtual genome containing variants found in both GENOME1 and GENOME2 |\n| \\|        | union                | GENOME1 \\| GENOME2 | Virtual genome containing variants found in GENOME1, GENOME2, or both |\n| \\         | difference           | GENOME1 \\ GENOME2  | Virtual genome containing variants found in GENOME1 but not in GENOME2 |\n| ^         | symmetric difference | GENOME1 ^ GENOME2  | Virtual genome containing variants found in GENOME1 or GENOME2 but not in both |\n\nThe result of a binary operation is treated as a single genome (though it does not have a sample name) called a *virtual genome*, which can be used in further operations.\n\n**Examples:**\n\nPrint out the variants shared by 'S.hua LA1983' and 'S.pim LYC2798':\n\n```console\nfoo@bar:~$ tersect view tomato.tsi \"'S.hua LA1983' & 'S.pim LYC2798'\"\n##fileformat=VCFv4.3\n##tersectVersion=0.11.0\n##tersectCommand='S.hua LA1983' & 'S.pim LYC2798'\n#CHROM\tPOS\tID\tREF\tALT\tQUAL\tFILTER\tINFO\nSL2.50ch00\t3235\t.\tA\tG\t.\t.\t.\nSL2.50ch00\t3277\t.\tA\tG\t.\t.\t.\nSL2.50ch00\t3873\t.\tC\tT\t.\t.\t.\nSL2.50ch00\t4083\t.\tA\tG\t.\t.\t.\nSL2.50ch00\t4112\t.\tT\tG\t.\t.\t.\nSL2.50ch00\t4314\t.\tA\tC\t.\t.\t.\n...\n```\n\nPrint out the variants which appear in only one of 'S.gal LA1044' or 'S.gal W TS-208':\n\n```console\nfoo@bar:~$ tersect view tomato.tsi \"'S.gal LA1044' ^ 'S.gal W TS-208'\"\n##fileformat=VCFv4.3\n##tersectVersion=0.11.0\n##tersectCommand='S.gal LA1044' ^ 'S.gal W TS-208'\n#CHROM\tPOS\tID\tREF\tALT\tQUAL\tFILTER\tINFO\nSL2.50ch00\t362\t.\tG\tT\t.\t.\t.\nSL2.50ch00\t867\t.\tG\tT\t.\t.\t.\nSL2.50ch00\t1198\t.\tG\tA\t.\t.\t.\nSL2.50ch00\t3235\t.\tA\tG\t.\t.\t.\nSL2.50ch00\t3567\t.\tT\tG\t.\t.\t.\nSL2.50ch00\t3873\t.\tC\tT\t.\t.\t.\n...\n```\n\nPrint out the variants which appear in 'S.chi CGN15532' but not 'S.chi CGN15530' or 'S.chi W TS-408':\n\n```console\nfoo@bar:~$ tersect view tomato.tsi \"'S.chi CGN15532' \\ 'S.chi CGN15530' \\ 'S.chi W TS-408'\"\n##fileformat=VCFv4.3\n##tersectVersion=0.11.0\n##tersectCommand='S.chi CGN15532' \\ 'S.chi CGN15530' \\ 'S.chi W TS-408'\n#CHROM\tPOS\tID\tREF\tALT\tQUAL\tFILTER\tINFO\nSL2.50ch00\t1163\t.\tC\tG\t.\t.\t.\nSL2.50ch00\t1811\t.\tC\tG\t.\t.\t.\nSL2.50ch00\t1818\t.\tC\tA\t.\t.\t.\nSL2.50ch00\t1818\t.\tC\tG\t.\t.\t.\nSL2.50ch00\t2432\t.\tG\tA\t.\t.\t.\nSL2.50ch00\t2544\t.\tA\tT\t.\t.\t.\n...\n```\n\n**Note:** A more convenient way to conduct the same operation on many genomes is by using [functional operators](#functional-operators).\n"
      },
      "source": "https://raw.githubusercontent.com/tomkurowski/tersect/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Genome list",
        "parent_header": [
          "Tersect",
          "Set operations",
          "Queries"
        ],
        "type": "Text_excerpt",
        "value": "Instead of individual genomes, Tersect can also operate on lists of genomes. These can be selected using wildcard patterns matching genome sample names, with the most general pattern of a lone wildcard operator (`*`) matching *all* the genomes in the Tersect index file. Individual genomes can also be appended to lists using commas (`,`) or removed from lists using minus signs (`-`).\n\nGenome lists can also be filtered (using the `>` operator) by whether they contain a specified list of variants. The variant format should look as follows: `chromosome:position:ref:alt` where `ref` and `alt` are reference and alternate alleles. Multiple variants can be included, separated by commas (e.g. `chr1:1245:A:G,chr8:5300:T:A`).\n\n| Operator | Name     | Usage     | Result       |\n|:--------:|:--------:|:---------:|:------------:|\n| *        | wildcard | PATTERN | Genome list containing all genomes whose sample names match the provided wildcard pattern |\n| ,        | append   | GENOMELIST, GENOME | Genome list containing all genomes in GENOMELIST and GENOME |\n| -        | remove   | GENOMELIST - GENOME | Genome list containing all genomes in GENOMELIST except GENOME |\n| >        | superset | GENOMELIST > VARIANTLIST | Genome list containing all genomes in GENOMELIST which contain all variants in VARIANTLIST\n\n**Note:** Tersect does not distinguish between a genome list which contains only one genome and a single genome. The former can be used in binary operations and the latter can be used in functional operations or in constructing genome lists.\n\nIf the query is (or results in) a genome list, the list of their genome sample names is printed out.\n\n**Examples:**\n\nPrint out all the names of genomes which begin with \"S.pim\":\n\n```console\nfoo@bar:~$ tersect view tomato.tsi \"S.pim*\"\nS.pim P TS-92\nS.pim P TS-79\nS.pim P TS-77\nS.pim P TS-50\nS.pim P TS-441\nS.pim P TS-440\nS.pim P TS-439\nS.pim P TS-438\n...\n```\n\nPrint out all the names of genomes which contain an A/G single nucleotide polymorphism at position 828587 in chromosome 7:\n\n```console\nfoo@bar:~$ tersect view tomato.tsi \"* > SL2.50ch07:828587:A:G\"\nS.lyc C TS-97\nS.lyc C TS-94\nS.pim P TS-79\nS.pim P TS-77\nS.lyc B TS-68\nS.lyc C TS-53\nS.pim P TS-50\nS.pim P TS-441\n...\n```\n\nPrint out all the names of genomes which contain a G/A SNP at position 1590608 in chromosome 5 and a T/C SNP at position 5230 in chromosome 12, except for 'S.gal LA1401' and those whose names begin with \"S.pim\":\n\n```console\nfoo@bar:~$ tersect view tomato.tsi \"* > SL2.50ch05:1590608:G:A,SL2.50ch12:5230:T:C - ('S.pim*','S.gal LA1401')\"\nS.lyc C TS-431\nS.lyc C TS-430\nS.lyc LA1314\n```\n"
      },
      "source": "https://raw.githubusercontent.com/tomkurowski/tersect/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Functional operators",
        "parent_header": [
          "Tersect",
          "Set operations",
          "Queries"
        ],
        "type": "Text_excerpt",
        "value": "Functional operators are used to conduct operations on genome lists instead of individual genomes.\n\n| Operator | Name | Usage | Result |\n|:--------:|:----:|:-----:|:------:|\n| union() <br> u() | arbitrary union | union(GENOMELIST) <br> u(GENOMELIST) | Virtual genome containing all variants contained in any of the genomes in GENOMELIST |\n| intersect() <br> i() | arbitrary intersection | intersect(GENOMELIST) <br> i(GENOMELIST) | Virtual genome containing all variants which appear in every genome in GENOMELIST |\n\nThe result of a functional operation is treated as a single genome (though it does not have a sample name).\n\n**Examples:**\n\nUnion of all genomes, containing every variant recorded in the *tomato.tsi* Tersect index file:\n\n```console\nfoo@bar:~$ tersect view tomato.tsi \"u(*)\"\n##fileformat=VCFv4.3\n##tersectVersion=0.11.0\n##tersectCommand=u(*)\n#CHROM\tPOS\tID\tREF\tALT\tQUAL\tFILTER\tINFO\nSL2.50ch00\t280\t.\tA\tC\t.\t.\t.\nSL2.50ch00\t284\t.\tA\tG\t.\t.\t.\nSL2.50ch00\t316\t.\tC\tT\t.\t.\t.\nSL2.50ch00\t323\t.\tC\tT\t.\t.\t.\nSL2.50ch00\t332\t.\tA\tT\t.\t.\t.\nSL2.50ch00\t362\t.\tG\tT\t.\t.\t.\n...\n```\n\nIntersection of all genomes which contain a T/A single nucleotide polymorphism at position 12547 in chromosome 12, containing all variants that are shared by each of those genomes:\n\n```console\nfoo@bar:~$ tersect view tomato.tsi \"i(* > SL2.50ch12:12547:T:A)\"\n##fileformat=VCFv4.3\n##tersectVersion=0.11.0\n##tersectCommand=i(* > SL2.50ch12:12547:T:A)\n#CHROM\tPOS\tID\tREF\tALT\tQUAL\tFILTER\tINFO\nSL2.50ch00\t16576\t.\tT\tC\t.\t.\t.\nSL2.50ch00\t26171\t.\tG\tT\t.\t.\t.\nSL2.50ch00\t29880\t.\tA\tG\t.\t.\t.\nSL2.50ch00\t37486\t.\tT\tG\t.\t.\t.\nSL2.50ch00\t40476\t.\tG\tT\t.\t.\t.\nSL2.50ch00\t436850\t.\tA\tG\t.\t.\t.\n...\n```\n\nPrint all the variants which appear only in genome S.hab CGN15792. This is achieved by finding the difference of that genome and the union of all genomes except S.hab CGN15792:\n\n```console\nfoo@bar:~$ tersect view tomato.tsi \"'S.hab CGN15792' \\ u(* - 'S.hab CGN15792')\"\n##fileformat=VCFv4.3\n##tersectVersion=0.11.0\n##tersectCommand='S.hab CGN15792' \\ u(* - 'S.hab CGN15792')\n#CHROM\tPOS\tID\tREF\tALT\tQUAL\tFILTER\tINFO\nSL2.50ch00\t1163\t.\tC\tT\t.\t.\t.\nSL2.50ch00\t1596\t.\tG\tA\t.\t.\t.\nSL2.50ch00\t2048\t.\tG\tA\t.\t.\t.\nSL2.50ch00\t2933\t.\tG\tA\t.\t.\t.\nSL2.50ch00\t2987\t.\tA\tT\t.\t.\t.\nSL2.50ch00\t4349\t.\tC\tT\t.\t.\t.\n...\n```\n"
      },
      "source": "https://raw.githubusercontent.com/tomkurowski/tersect/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Regions",
        "parent_header": [
          "Tersect",
          "Set operations"
        ],
        "type": "Text_excerpt",
        "value": "By default, queries are executed and results are returned for the entire genome. However, it is possible to selectively execute a query only on a specified region. The familiar tabix/samtools format `chromosome:beginPos-endPos` is used to specify those regions. The coordinates are one-based and inclusive.\n\nLimiting queries to regions allows for much faster execution since far fewer positions need to be processed and printed, capturing only intervals of interest. This feature makes it possible to use Tersect's flexible queries as a high-performance part of a larger pipeline or the back-end of a highly responsive, interactive application.\n\n**Example:**\n\nPrint a union, that is all the variants appearing either in genome 'S.lyc SG16', 'S.lyc LA1421', or both, from the first 90 kbp of chromosome 2 in the *tomato.tsi* index file:\n\n```console\nfoo@bar:~$ tersect view tomato.tsi \"'S.lyc SG16' | 'S.lyc LA1421'\" SL2.50ch02:1-90000\n##fileformat=VCFv4.3\n##tersectVersion=0.11.0\n##tersectCommand='S.lyc SG16' | 'S.lyc LA1421'\n##tersectRegion=SL2.50ch02:1-90000\n#CHROM  POS     ID      REF     ALT     QUAL    FILTER  INFO\nSL2.50ch02      204     .       A       G       .       .       .\nSL2.50ch02      255     .       TCC     TCCC    .       .       .\nSL2.50ch02      255     .       TCC     TCCCC   .       .       .\nSL2.50ch02      2382    .       G       A       .       .       .\nSL2.50ch02      13383   .       G       A       .       .       .\nSL2.50ch02      21752   .       C       T       .       .       .\nSL2.50ch02      24538   .       T       C       .       .       .\nSL2.50ch02      29276   .       G       T       .       .       .\nSL2.50ch02      71245   .       A       C       .       .       .\nSL2.50ch02      73326   .       C       T       .       .       .\nSL2.50ch02      86236   .       C       A       .       .       .\nSL2.50ch02      86601   .       A       G       .       .       .\nSL2.50ch02      86635   .       T       A       .       .       .\nSL2.50ch02      86695   .       T       C       .       .       .\nSL2.50ch02      86769   .       G       A       .       .       .\nSL2.50ch02      87079   .       T       A       .       .       .\n```\n"
      },
      "source": "https://raw.githubusercontent.com/tomkurowski/tersect/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9186903896428625,
      "result": {
        "original_header": "Building a Tersect index",
        "type": "Text_excerpt",
        "value": "You can build your own Tersect index based on a set of VCF files using the `tersect build` command. You need to provide a name for your index file (a .tsi extension will be added if you omit it) as the first argument, followed by any number of input VCF files (which may be compressed using gzip) to be included in the index.  \nYou can also modify sample names in an existing Tersect index file by using the `tersect rename` command. \n"
      },
      "source": "https://raw.githubusercontent.com/tomkurowski/tersect/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8463233996359778,
      "result": {
        "original_header": "Building a Tersect index",
        "type": "Text_excerpt",
        "value": "**Example:** \nThe command below builds a Tersect index file named *tomato.tsi* which includes variants from all *.vcf.gz* files in the *data* directory. Depending on the input size this can take several minutes.\n```console\nfoo@bar:~$ tersect build tomato.tsi ./data/*.vcf.gz\n```\nOptionally, you can also provide a ``--name-file`` input file containing custom sample names to be used by Tersect. These names will replace the default sample IDs defined in the input VCF header lines. The ``--name-file`` should be a tab-delimited file containing two columns, the first with the sample IDs to be replaced and the second with the names to be used by Tersect. An example is shown below:\n```console\nTS-1\tS.lyc B TS-1\nTS-10\tS.lyc B TS-10\nTS-100\tS.lyc B TS-100\nTS-101\tS.lyc B TS-101\nTS-102\tS.lyc B TS-102\nTS-103\tS.lyc B TS-103\nTS-104\tS.lyc B TS-104\nTS-108\tS.lyc B TS-108\nTS-11\tS.lyc B TS-11\nTS-110\tS.lyc B TS-110\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/tomkurowski/tersect/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8565317517320893,
      "result": {
        "original_header": "Inspecting a Tersect index",
        "type": "Text_excerpt",
        "value": "**Examples:** \n"
      },
      "source": "https://raw.githubusercontent.com/tomkurowski/tersect/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/tomkurowski/tersect/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bioinformatics, genomics, set-operations"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Copyright (C) 2019 Cranfield University\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/tomkurowski/tersect/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "tersect"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "tomkurowski"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 225667,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Yacc",
        "size": 10310,
        "type": "Programming_language",
        "value": "Yacc"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 4251,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Lex",
        "size": 1201,
        "type": "Programming_language",
        "value": "Lex"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tomkurowski/tersect/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "tomkurowski",
          "type": "User"
        },
        "date_created": "2019-04-18T13:43:54Z",
        "date_published": "2019-04-18T13:47:18Z",
        "description": "Pre-publication release candidate.\r\n\r\n#### Packages:\r\n[tersect-0.12.0-Linux.deb](https://github.com/tomkurowski/tersect/releases/download/v0.12.0/tersect-0.12.0-Linux.deb)\r\n[tersect-0.12.0-Linux.rpm](https://github.com/tomkurowski/tersect/releases/download/v0.12.0/tersect-0.12.0-Linux.rpm)\r\n\r\n#### Binaries:\r\n[tersect-0.12.0-Linux.tar.gz](https://github.com/tomkurowski/tersect/releases/download/v0.12.0/tersect-0.12.0-Linux.tar.gz)\r\n[tersect-0.12.0-macOS.tar.gz](https://github.com/tomkurowski/tersect/releases/download/v0.12.0/tersect-0.12.0-macOS.tar.gz)\r\n\r\n### Example data\r\n- [1000 human genomes, chromosome 1](https://github.com/tomkurowski/tersect/releases/download/v0.12.0/human_chr1.tsi.gz)\r\n- [444 tomato genomes](https://github.com/tomkurowski/tersect/releases/download/v0.12.0/tomato.tsi.gz) [ sample names: [accession_names.tsv](https://github.com/tomkurowski/tersect/releases/download/v0.12.0/accession_names.tsv) ]",
        "html_url": "https://github.com/tomkurowski/tersect/releases/tag/v0.12.0",
        "name": "Tersect 0.12.0",
        "release_id": 16850049,
        "tag": "v0.12.0",
        "tarball_url": "https://api.github.com/repos/tomkurowski/tersect/tarball/v0.12.0",
        "type": "Release",
        "url": "https://api.github.com/repos/tomkurowski/tersect/releases/16850049",
        "value": "https://api.github.com/repos/tomkurowski/tersect/releases/16850049",
        "zipball_url": "https://api.github.com/repos/tomkurowski/tersect/zipball/v0.12.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 18:53:53",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 10
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Example data",
        "parent_header": [
          "Tersect"
        ],
        "type": "Text_excerpt",
        "value": "Two archives containing example Tersect index files (.tsi) are available for download below to allow you to try out the utility without needing to create an index file yourself.\n\nThe first index contains human genomic variant data for 2504 individuals from the 1000 Genomes Project. While Tersect is capable of handling the entire human genome, the index below is limited to chromosome 1 to make the example archive smaller and quicker to download.\n\nThe second index contains tomato genomic variant data for 360 tomato accessions from the AGIS Tomato 360 Resequencing Project and 84 accessions from the Wageningen UR 150 Tomato Genome Resequencing Project for a combined data set of 444 accessions. Samples have been renamed according to a provided key ([accession_names.tsv](https://github.com/tomkurowski/tersect/releases/download/v0.12.0/accession_names.tsv)) to make them more informative and consistent between the two source data sets.\n\n**Note:** the index files provided below are compressed using gzip and need to be uncompressed before use.\n\n- [2504 human genomes, chromosome 1](https://github.com/tomkurowski/tersect/releases/download/v0.12.0/human_chr1.tsi.gz)\n- [444 tomato genomes](https://github.com/tomkurowski/tersect/releases/download/v0.12.0/tomato.tsi.gz) [ sample names: [accession_names.tsv](https://github.com/tomkurowski/tersect/releases/download/v0.12.0/accession_names.tsv) ]\n"
      },
      "source": "https://raw.githubusercontent.com/tomkurowski/tersect/master/README.md",
      "technique": "header_analysis"
    }
  ]
}