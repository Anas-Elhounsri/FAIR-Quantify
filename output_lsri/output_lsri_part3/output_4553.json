{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/caokai1073/Pamona"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-06-11T07:16:36Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-04-09T08:08:24Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "The software of Pamona, a partial manifold alignment algorithm."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9529670284054206,
      "result": {
        "original_header": "Parameters of BASH4*",
        "type": "Text_excerpt",
        "value": "The implementation is based on [UnionCom](https://github.com/caokai1073/unionCom) and [SCOT](https://github.com/rsinghlab/SCOT). \n## Integrate data\nEach row should contain the measured values for a single cell, and each column should contain the values of a feature across cells. \n```python\n>>> from pamona import Pamona\n>>> import numpy as np\n>>> data1 = np.loadtxt(\"./scGEM/methylation_partial.txt\")\n>>> data2 = np.loadtxt(\"./scGEM/expression_partial.txt\")\n>>> type1 = np.loadtxt(\"./scGEM/methylation_type_partial.txt\")\n>>> type2 = np.loadtxt(\"./scGEM/expression_type_partial.txt\")\n>>> type1 = type1.astype(np.int)\n>>> type2 = type2.astype(np.int)\n>>> Pa = Pamona.Pamona(n_shared=[138], Lambda=10, output_dim=5) # shared cell number 138 is estimated by SPL\n>>> integrated_data, T = Pa.run_Pamona([data1, data2])\n>>> Pa.test_LabelTA(integrated_data[0],integrated_data[-1],type1,type2)\n>>> Pa.alignment_score(integrated_data[0], integrated_data[-1][0:142], data2_specific=integrated_data[-1][142:177])\n>>> Pa.Visualize([data1,data2], integrated_data, mode='UMAP')  # without datatype\n>>> Pa.Visualize([data1,data2], integrated_data, [type1,type2], mode='UMAP')  # with datatype \n>>> # mode: [\"PCA\", \"TSNE\", \"UMAP\"], default as \"PCA\".\n```\n## Example of disagreement matrix of prior information\nIf cell types are available, users can incorporate the information as follows\nBASH3*\n## Examples on simualtions and real data sets (jupyter notebook)\n+ [Integration of Simulation 1 in Pamona paper](https://github.com/caokai1073/Pamona/blob/master/example/Simulation1.ipynb) \n"
      },
      "source": "https://raw.githubusercontent.com/caokai1073/Pamona/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9083253230177244,
      "result": {
        "original_header": "Examples on simualtions and real data sets (jupyter notebook)",
        "type": "Text_excerpt",
        "value": "## Parameters of ```class Pamona``` \nThe list of parameters is given below:\n+ **data**:  *list of numpy array, [dataset1, dataset2, ...] (n_datasets, n_samples, n_features).*\nlist of datasets to be integrated, in the form of a numpy array. \n+ **epsilon**: *float, default as 0.001.*\nthe regularization parameter of the partial-GW framework. \n+ **n_neighbors**: *int, default as 30.*\nthe number of neighborhoods of the k-nn graph. \n+ **Lambda**: *float, default as 1.0.*\nthe parameter of manifold alignment to make a trade-off between aligning corresponding cells and preserving the local geometries \n"
      },
      "source": "https://raw.githubusercontent.com/caokai1073/Pamona/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9545702305960172,
      "result": {
        "original_header": "Parameters of BASH4*",
        "type": "Text_excerpt",
        "value": "> + ```virtual_cells```: *int*, number of virtual cells, default as 1.\n> + BASH6*: *int*, maximum iterations of the partial-GW framework, default as 1000.\n> + BASH7*:  *float*, the precision condition under which the iteration of the partial-GW framework stops, default as 1e-9.\n> + BASH8*: *int*, random seed, default as 666.\n> + BASH9*: *{\u2018connectivity\u2019, \u2018distance\u2019}*, type of returned matrix: \u2018connectivity\u2019 will return the connectivity matrix with ones and zeros, and \u2018distance\u2019 will return the distances between neighbors according to the given metric. has to be either one of 'connectivity' or 'distance', default as 'distance'.\n> + BASH10*: *str*, the distance metric used to calculate the k-Neighbors for each sample point, default as \u2019minkowski\u2019.\n \n"
      },
      "source": "https://raw.githubusercontent.com/caokai1073/Pamona/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/caokai1073/Pamona/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/caokai1073/Pamona/master/example/PBMC.ipynb"
      },
      "source": "https://raw.githubusercontent.com/caokai1073/Pamona/master/example/PBMC.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/caokai1073/Pamona/master/example/scNMT-three-datasets.ipynb"
      },
      "source": "https://raw.githubusercontent.com/caokai1073/Pamona/master/example/scNMT-three-datasets.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/caokai1073/Pamona/master/example/Simulation2.ipynb"
      },
      "source": "https://raw.githubusercontent.com/caokai1073/Pamona/master/example/Simulation2.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/caokai1073/Pamona/master/example/Simulation1.ipynb"
      },
      "source": "https://raw.githubusercontent.com/caokai1073/Pamona/master/example/Simulation1.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/caokai1073/Pamona/master/example/scGEM.ipynb"
      },
      "source": "https://raw.githubusercontent.com/caokai1073/Pamona/master/example/scGEM.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/caokai1073/Pamona/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "caokai1073/Pamona"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Pamona"
      },
      "source": "https://raw.githubusercontent.com/caokai1073/Pamona/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Install",
        "parent_header": [
          "Pamona"
        ],
        "type": "Text_excerpt",
        "value": "Pamona software is available on the Python package index (PyPI), latest version 0.0.1. To install it using pip, simply type:\n```\npip3 install pamona\n```\n"
      },
      "source": "https://raw.githubusercontent.com/caokai1073/Pamona/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Examples on simualtions and real data sets (jupyter notebook)",
        "parent_header": [
          "Pamona"
        ],
        "type": "Text_excerpt",
        "value": "+ [Integration of Simulation 1 in Pamona paper](https://github.com/caokai1073/Pamona/blob/master/example/Simulation1.ipynb)\n\n+ [Integration of Simulation 2 in Pamona paper](https://github.com/caokai1073/Pamona/blob/master/example/Simulation2.ipynb)\n\n+ [Integration of scGEM data](https://github.com/caokai1073/Pamona/blob/master/example/scGEM.ipynb)\n\n+ [Integration of three datasets of scNMT data](https://github.com/caokai1073/Pamona/blob/master/example/scNMT-three-datasets.ipynb)\n\n+ [Integration of PBMC data with cell types as prior information](https://github.com/caokai1073/Pamona/blob/master/example/PBMC.ipynb)\n\n## Parameters of ```class Pamona```\n\nThe list of parameters is given below:\n+ **data**:  *list of numpy array, [dataset1, dataset2, ...] (n_datasets, n_samples, n_features).*\nlist of datasets to be integrated, in the form of a numpy array.\n\n+ **n_shared**: *int, default as the cell number of the smallest dataset.*\nshared cell number between datasets.\n\n+ **epsilon**: *float, default as 0.001.*\nthe regularization parameter of the partial-GW framework.\n\n+ **n_neighbors**: *int, default as 30.*\nthe number of neighborhoods of the k-nn graph.\n\n+ **Lambda**: *float, default as 1.0.*\nthe parameter of manifold alignment to make a trade-off between aligning corresponding cells and preserving the local geometries\n\n+ **output_dim**: *int, default as 30.*\noutput dimension of the common embedding space after the manifold alignment\n\n+ **M**: *numpy array , default as None (optionally)*.\ndisagreement matrix of prior information.\n\nThe other parameters include:\n\n> + ```virtual_cells```: *int*, number of virtual cells, default as 1.\n> + ```max_iter```: *int*, maximum iterations of the partial-GW framework, default as 1000.\n> + ```tol```:  *float*, the precision condition under which the iteration of the partial-GW framework stops, default as 1e-9.\n> + ```manual_seed```: *int*, random seed, default as 666.\n> + ```mode```: *{\u2018connectivity\u2019, \u2018distance\u2019}*, type of returned matrix: \u2018connectivity\u2019 will return the connectivity matrix with ones and zeros, and \u2018distance\u2019 will return the distances between neighbors according to the given metric. has to be either one of 'connectivity' or 'distance', default as 'distance'.\n> + ```metric```: *str*, the distance metric used to calculate the k-Neighbors for each sample point, default as \u2019minkowski\u2019.\n\n### Contact via caokai@amss.ac.cn\n"
      },
      "source": "https://raw.githubusercontent.com/caokai1073/Pamona/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.999944756863349,
      "result": {
        "original_header": "Parameters of BASH4*",
        "type": "Text_excerpt",
        "value": "numpy >= 1.18.5  \nscikit-learn >= 0.23.2  \numap-learn >= 0.3.10  \nCython >= 0.29.21  \nscipy >= 1.4.1  \nmatplotlib >= 3.3.1  \nPOT >= 0.7.0   \n## Install\nPamona software is available on the Python package index (PyPI), latest version 0.0.1. To install it using pip, simply type:\n```\npip3 install pamona\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/caokai1073/Pamona/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8508721981134423,
      "result": {
        "original_header": "Integrate data",
        "type": "Text_excerpt",
        "value": "Each row should contain the measured values for a single cell, and each column should contain the values of a feature across cells. \n```python\n>>> from pamona import Pamona\n>>> import numpy as np\n>>> data1 = np.loadtxt(\"./scGEM/methylation_partial.txt\")\n>>> data2 = np.loadtxt(\"./scGEM/expression_partial.txt\")\n>>> type1 = np.loadtxt(\"./scGEM/methylation_type_partial.txt\")\n>>> type2 = np.loadtxt(\"./scGEM/expression_type_partial.txt\")\n>>> type1 = type1.astype(np.int)\n>>> type2 = type2.astype(np.int)\n>>> Pa = Pamona.Pamona(n_shared=[138], Lambda=10, output_dim=5) # shared cell number 138 is estimated by SPL\n>>> integrated_data, T = Pa.run_Pamona([data1, data2])\n>>> Pa.test_LabelTA(integrated_data[0],integrated_data[-1],type1,type2)\n>>> Pa.alignment_score(integrated_data[0], integrated_data[-1][0:142], data2_specific=integrated_data[-1][142:177])\n>>> Pa.Visualize([data1,data2], integrated_data, mode='UMAP')  # without datatype\n>>> Pa.Visualize([data1,data2], integrated_data, [type1,type2], mode='UMAP')  # with datatype \n>>> # mode: [\"PCA\", \"TSNE\", \"UMAP\"], default as \"PCA\".\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/caokai1073/Pamona/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8350469741447546,
      "result": {
        "original_header": "Parameters of BASH4*",
        "type": "Text_excerpt",
        "value": "## Integrate data\nEach row should contain the measured values for a single cell, and each column should contain the values of a feature across cells. \n```python\n>>> from pamona import Pamona\n>>> import numpy as np\n>>> data1 = np.loadtxt(\"./scGEM/methylation_partial.txt\")\n>>> data2 = np.loadtxt(\"./scGEM/expression_partial.txt\")\n>>> type1 = np.loadtxt(\"./scGEM/methylation_type_partial.txt\")\n>>> type2 = np.loadtxt(\"./scGEM/expression_type_partial.txt\")\n>>> type1 = type1.astype(np.int)\n>>> type2 = type2.astype(np.int)\n>>> Pa = Pamona.Pamona(n_shared=[138], Lambda=10, output_dim=5) # shared cell number 138 is estimated by SPL\n>>> integrated_data, T = Pa.run_Pamona([data1, data2])\n>>> Pa.test_LabelTA(integrated_data[0],integrated_data[-1],type1,type2)\n>>> Pa.alignment_score(integrated_data[0], integrated_data[-1][0:142], data2_specific=integrated_data[-1][142:177])\n>>> Pa.Visualize([data1,data2], integrated_data, mode='UMAP')  # without datatype\n>>> Pa.Visualize([data1,data2], integrated_data, [type1,type2], mode='UMAP')  # with datatype \n>>> # mode: [\"PCA\", \"TSNE\", \"UMAP\"], default as \"PCA\".\n```\n## Example of disagreement matrix of prior information\nIf cell types are available, users can incorporate the information as follows\nBASH3*\n## Examples on simualtions and real data sets (jupyter notebook)\n+ [Integration of Simulation 1 in Pamona paper](https://github.com/caokai1073/Pamona/blob/master/example/Simulation1.ipynb) \n"
      },
      "source": "https://raw.githubusercontent.com/caokai1073/Pamona/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/caokai1073/Pamona/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "data-integration, manifold-learning, optimal-transport, single-cell-omics, transfer-learning"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2020 Kai Cao\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/caokai1073/Pamona/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Pamona"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "caokai1073"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 1003863,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 27994,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/caokai1073/Pamona/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "caokai1073",
          "type": "User"
        },
        "date_created": "2021-01-05T08:40:38Z",
        "date_published": "2021-01-05T08:47:18Z",
        "description": "[pamona-0.1.0.tar.gz](https://github.com/caokai1073/Pamona/files/5769041/pamona-0.1.0.tar.gz)\r\n",
        "html_url": "https://github.com/caokai1073/Pamona/releases/tag/v0.1.0",
        "release_id": 35985186,
        "tag": "v0.1.0",
        "tarball_url": "https://api.github.com/repos/caokai1073/Pamona/tarball/v0.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/caokai1073/Pamona/releases/35985186",
        "value": "https://api.github.com/repos/caokai1073/Pamona/releases/35985186",
        "zipball_url": "https://api.github.com/repos/caokai1073/Pamona/zipball/v0.1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-06 16:50:39",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 19
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Example of disagreement matrix of prior information",
        "parent_header": [
          "Pamona"
        ],
        "type": "Text_excerpt",
        "value": "If cell types are available, users can incorporate the information as follows\n```python\n>>> gamma = 0.5 # gamma is a parameter, ranges from 0 to 1. \n>>> # A larger gamma gives more importance to the matching of prior information.\n>>> DM = np.ones((len(data1), len(data2)))\n>>> for i in range(len(data1)):\n>>>    for j in range(len(data2)):\n>>>        if type1[i] == type2[j]:\n>>>            DM[i][j] = gamma\n>>> ...\n>>> Pa = Pamona.Pamona(..., M=DM, ...)\n```"
      },
      "source": "https://raw.githubusercontent.com/caokai1073/Pamona/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Examples on simualtions and real data sets (jupyter notebook)",
        "parent_header": [
          "Pamona"
        ],
        "type": "Text_excerpt",
        "value": "+ [Integration of Simulation 1 in Pamona paper](https://github.com/caokai1073/Pamona/blob/master/example/Simulation1.ipynb)\n\n+ [Integration of Simulation 2 in Pamona paper](https://github.com/caokai1073/Pamona/blob/master/example/Simulation2.ipynb)\n\n+ [Integration of scGEM data](https://github.com/caokai1073/Pamona/blob/master/example/scGEM.ipynb)\n\n+ [Integration of three datasets of scNMT data](https://github.com/caokai1073/Pamona/blob/master/example/scNMT-three-datasets.ipynb)\n\n+ [Integration of PBMC data with cell types as prior information](https://github.com/caokai1073/Pamona/blob/master/example/PBMC.ipynb)\n\n## Parameters of ```class Pamona```\n\nThe list of parameters is given below:\n+ **data**:  *list of numpy array, [dataset1, dataset2, ...] (n_datasets, n_samples, n_features).*\nlist of datasets to be integrated, in the form of a numpy array.\n\n+ **n_shared**: *int, default as the cell number of the smallest dataset.*\nshared cell number between datasets.\n\n+ **epsilon**: *float, default as 0.001.*\nthe regularization parameter of the partial-GW framework.\n\n+ **n_neighbors**: *int, default as 30.*\nthe number of neighborhoods of the k-nn graph.\n\n+ **Lambda**: *float, default as 1.0.*\nthe parameter of manifold alignment to make a trade-off between aligning corresponding cells and preserving the local geometries\n\n+ **output_dim**: *int, default as 30.*\noutput dimension of the common embedding space after the manifold alignment\n\n+ **M**: *numpy array , default as None (optionally)*.\ndisagreement matrix of prior information.\n\nThe other parameters include:\n\n> + ```virtual_cells```: *int*, number of virtual cells, default as 1.\n> + ```max_iter```: *int*, maximum iterations of the partial-GW framework, default as 1000.\n> + ```tol```:  *float*, the precision condition under which the iteration of the partial-GW framework stops, default as 1e-9.\n> + ```manual_seed```: *int*, random seed, default as 666.\n> + ```mode```: *{\u2018connectivity\u2019, \u2018distance\u2019}*, type of returned matrix: \u2018connectivity\u2019 will return the connectivity matrix with ones and zeros, and \u2018distance\u2019 will return the distances between neighbors according to the given metric. has to be either one of 'connectivity' or 'distance', default as 'distance'.\n> + ```metric```: *str*, the distance metric used to calculate the k-Neighbors for each sample point, default as \u2019minkowski\u2019.\n\n### Contact via caokai@amss.ac.cn\n"
      },
      "source": "https://raw.githubusercontent.com/caokai1073/Pamona/master/README.md",
      "technique": "header_analysis"
    }
  ]
}