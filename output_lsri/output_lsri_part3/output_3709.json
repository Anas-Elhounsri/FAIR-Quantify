{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Credits",
        "type": "Text_excerpt",
        "value": "If you use this package, please cite \u201cSeeCiTe: a method to assess CNV\ncalls from SNP arrays using trio data\u201d, Ksenia Lavrichenko, \u00d8yvind\nHelgeland, P\u00e5l R Nj\u00f8lstad, Inge Jonassen, Stefan Johansson. *Bioinformatics*, btab028, doi:\n<a href=\"https://doi.org/10.1093/bioinformatics/btab028\" class=\"uri\">https://doi.org/10.1093/bioinformatics/btab028</a>\n"
      },
      "source": "https://raw.githubusercontent.com/aksenia/SeeCiTe/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/aksenia/SeeCiTe"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-08-27T09:34:18Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-09-02T06:02:25Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Package to assess the quality of and visualize array CNVs for trios"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step V. Visualize and write summary files.",
        "type": "Text_excerpt",
        "value": "The results can be visualized either for each single CNV region or for a\nwhole cohort:\n\n``` r\nSample <- \"affy6.scale.NA12878\"\nCnv <- \"chr19:20596206-20716389\"\nplotRawTrio(input_data = candidateCnvs %>% dplyr::filter(sample==Sample, coordcnv==Cnv), \n            sifted_data = clu_baf %>% dplyr::filter(sample==Sample, coordcnv==Cnv), \n            penn_qcsum = main_dt[[\"qcsum\"]] %>% dplyr::filter(sample==Sample),\n            merge_trace = main_dt[[\"merge\"]] %>% dplyr::filter(sample==Sample, coordcnv==Cnv))\n```\n\n![](man/figures/step-v-indiv-plot-1.png)\n\nThis will write a pdf file with such plots per SeeCiTe category:\n\n``` r\nplotCohort(main_data=main_dt,\n           sifted_data=clu_baf,\n           classified_data=cnv_class,\n           output_dir = \"~/Documents/uib/dev/toydata/affy6ceu_viz\",\n           dataset=\"affy6ceu\",\n           subset_nprobes=20,\n           subset_length=150000)\n```\n\nFinally, the summary statistics and SeeCiTe classifications can be\nwritten out as plain text files, together with bed (UCSC 6-column style)\nand plink formatted CNV regions:\n\n``` r\nwriteSeecite(classified_data=cnv_class,\n          output_dir = \"~/Documents/uib/dev/toydata/affy6ceu_viz\",\n          dataset=\"affy6ceu\")\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/aksenia/SeeCiTe/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.968253049123095,
      "result": {
        "original_header": "SeeCiTe: Seeing CNVs in Trios",
        "type": "Text_excerpt",
        "value": "SeeCiTe is a novel CNV quality control tool that post-processes output from current CNV calling tools exploiting child-parent trio data to classify calls in quality categories and provide a set of visualizations for each putative CNV call in the offspring. It utilizes probe-level CNV data in trios (and singletons) to systematically highlight potential artefacts and visualize signal intensities in a streamlined fashion suitable for biobank scale studies. \nThis vignette describes all steps necessary to run SeeCiTe analysis,\nusing the public HapMap trio data, with intermidiate outputs supplied\nwith the package for the: \n"
      },
      "source": "https://raw.githubusercontent.com/aksenia/SeeCiTe/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9182765848574805,
      "result": {
        "original_header": "Step III. Gather and read in all input.",
        "type": "Text_excerpt",
        "value": "The previous step extracts SNP data into files in the provided\n*run\\_dir*: files with prefix *probecoord.txt*, *snp\\_flank.txt* and\n*snp\\_cnv.log*. The main CNV file is *triocnv\\_file* in *input\\_data*\nobject, while *merge\\_trace* is the merging log in the same object.\nFinally, *cnv\\_qcsum\\_file* is the QC summary output of PennCNV. The\n*cache\\_id* tells where R should store cache for core calculations.\n``` r\nargs <- list(triocnv_file=input_files[[\"triocnv_file\"]],\n             probecoord_file=system.file(\"extdata\", \"affy6ceu.probecoord.txt\", package = \"SeeCiTe\"),\n             snp_flank_file=system.file(\"extdata\", \"affy6ceu.snp_flank.txt\", package = \"SeeCiTe\"),\n             snp_cnv_log_file=system.file(\"extdata\", \"affy6ceu.snp_cnv.log\", package = \"SeeCiTe\"),\n             cnv_qcsum_file=system.file(\"extdata\", \"affy6ceu.qcsum\", package = \"SeeCiTe\"),\n             dataset=\"affy6ceu\",\n             cache_id=\"~/Documents/uib/dev/toydata\",\n             merge_trace=input_files[[\"merge_trace\"]])\n```\nNow all inputs are in order and can be read and formatted:\n``` r\nmain_dt <- readInputs(args = args)\n# [1] \"Reading merged formatted PennCNV trio file for offspring SeeCiTe/inst/extdata/affy6ceu.merged.filtered_annot_offspring.triocnv\"\n# [1] \"Reading probes file SeeCiTe/inst/extdata/affy6ceu.probecoord.txt\"\n# [1] \"Collapsing duplicate probes\"\n# [1] \"Annotating probes in CNV loci\"\n# [1] \"Reading extracted intensity for flanking regions SeeCiTe/inst/extdata/affy6ceu.snp_flank.txt\"\n# \n#    denovo inherited \n#         6        43 \n# [1] \"Reading denovo test results for CNV regions SeeCiTe/inst/extdata/affy6ceu.snp_cnv.log\"\n# [1] \"Reading quality summary file SeeCiTe/inst/extdata/affy6ceu.qcsum\"\n# [1] \"Reading merging log file SeeCiTe/inst/extdata/affy6ceu.merged.filtered_merge.log\"\ncandidateCnvs <- main_dt[[\"data\"]]\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/aksenia/SeeCiTe/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9265835646804322,
      "result": {
        "original_header": "Single sample functionality",
        "type": "Text_excerpt",
        "value": "The SeeCite core algorithm is based on comparison of intensity\ndistributions between the individuals in a trio. However there is a\nnumber of individual-level metrics that can be useful out of trio\ncontext. We extended the tool functionality to process the single\nsamples data and calculate these metrics. The adapted simplified\nplotting function is also available. \nFirst step is to extract the signal intensities with a helper script\n*extract\\_snp\\_single.py*, which takes as input PennCNV format and a\nsample map (one line per sample, comma-separated,\n\u201csampleid,path/to/lrrbaf\\_file\u201d):\n``` r\npython3 extract_snp_single.py -c data/affy6hm.initial_merged.triocnv -m data/samples_map.txt -o data -d SNGL -f 30\n```\nThe output file *data/SNGLE.signal\\_flanks\\_30.txt* (provided with the\npackage sample data) will contain all the information needed for\nconsequent steps:\n``` r\nsingle_file =  system.file(\"extdata\", \"SNGLE.signal_flanks_30.txt\", package = \"SeeCiTe\")\nsingle_data <- readSingle(snp_file = single_file)\nhead(single_data, n = 2)\n# # A tibble: 2 x 13\n#   Name    Chr Position locus coordcnv sample copynumber numsnp relation Origin\n#   <chr> <int>    <int> <chr> <chr>    <chr>       <int>  <int> <chr>    <lgl> \n# 1 AFFX\u2026     6 32412480 flank chr6:32\u2026 affy6\u2026          1     18 O        NA    \n# 2 AFFX\u2026     6 32412480 flank chr6:32\u2026 affy6\u2026          1     18 O        NA    \n# # \u2026 with 3 more variables: type <chr>, parameter <chr>, value <dbl>\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/aksenia/SeeCiTe/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/aksenia/SeeCiTe/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/aksenia/SeeCiTe/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "aksenia/SeeCiTe"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/aksenia/SeeCiTe/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/aksenia/SeeCiTe/master/inst/bash/merge.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/aksenia/SeeCiTe/master/inst/bash/pool_snp_data.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/aksenia/SeeCiTe/master/man/figures/step-v-indiv-plot-1.png"
      },
      "source": "https://raw.githubusercontent.com/aksenia/SeeCiTe/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/aksenia/SeeCiTe/master/man/figures/step-iii-single-1.png"
      },
      "source": "https://raw.githubusercontent.com/aksenia/SeeCiTe/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation.",
        "type": "Text_excerpt",
        "value": "Make sure the dependencies are installed fist:\n\n``` r\ngeneric_packages <- c(\"magrittr\", \"dplyr\", \"tidyr\", \"tools\", \"purrr\", \"utils\", \"rlang\", \"bedr\")\nplotting_packages <- c(\"ggplot2\", \"scales\", \"gridExtra\", \"cowplot\", \"rogme\", \"ggpubr\")\nstat_packages <- c(\"statip\", \"outliers\", \"effsize\", \"lawstat\", \"ks\")\npackages <- c(generic_packages, plotting_packages, stat_packages)\n\nif (length(setdiff(packages, rownames(installed.packages()))) > 0) {\n  install.packages(setdiff(packages, rownames(installed.packages())))  \n}\n\nlibrary(devtools)\ndevtools::install_github('davetang/bedr')\ndevtools::install_github(\"GRousselet/rogme\")\n```\n\nUse devtools package to install directly from GitHub (by default it will\nforce the upgrade of the installed packages, which might be undesirable,\nthen set dependencies to FALSE):\n\n``` r\ndevtools::install_github(\"aksenia/SeeCiTe\", dep = FALSE)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/aksenia/SeeCiTe/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step I. Preparing the input files",
        "type": "Text_excerpt",
        "value": "The preparation step takes in 1) an original PennCNV-trio output\n(produced by running PennCNV\u2019s detect\\_cnv.pl with the -trio flag) and\n2) merged and/or filtered by frequency and size file in a standard\nPennCNV format (PennCNV\u2019s clean\\_cnv.pl will do the segment merging\nautomatically and output a file in such format). The merged file defines\nthe CNVs to analyse in terms of boundaries and loci covered, e.g.\u00a0all\nCNVs that are in the first file but do not overlap with the CNVs in the\nsecond file will be ignored.\n\nThe function *runExtractInheritance* will take these two input files and\nproduce additional intermediate files, necessary for consequent steps,\nshown below, with the prefix of the merged file:\n\n    # Loading SeeCiTe\n\n``` r\nlibrary(SeeCiTe)\n# PennCNV-trio output\nfile_original <- system.file(\"extdata\", \"affy6ceu.original.triocnv\", package = \"SeeCiTe\")\n# PennCNV merge output\nfile_merged <- system.file(\"extdata\", \"affy6ceu.merged.filtered.triocnv\", package = \"SeeCiTe\")\n# Input files for SeeCiTe\ninput_files <- runExtractInheritance(filename_orig = file_original, filename_merged = file_merged)\n```\n\nThe input files now contain CNVs to analyse for each offspring and\ninheritance, decoded from PennCNV-trio HMM state. The merging log is\nalso created to keep track whether a CNV was merged and if so, how many\nsegments were merged.\n\n``` r\nprint(input_files)\n# $triocnv_file\n# [1] \"SeeCiTe/inst/extdata/affy6ceu.merged.filtered_annot_offspring.triocnv\"\n# \n# $merge_trace\n# [1] \"SeeCiTe/inst/extdata/affy6ceu.merged.filtered_merge.log\"\ndir <- dirname(file_original)\n# Intermidiate files for the reference of inheritance mapping.\nlist.files(dir, pattern = tools::file_path_sans_ext(basename(file_merged)), full.names = F)\n# [1] \"affy6ceu.merged.filtered.triocnv\"                \n# [2] \"affy6ceu.merged.filtered_annot.triocnv\"          \n# [3] \"affy6ceu.merged.filtered_annot_offspring.triocnv\"\n# [4] \"affy6ceu.merged.filtered_merge.log\"              \n# [5] \"affy6ceu.merged.filtered_unmaskedstatus.triocnv\"\n```\n"
      },
      "source": "https://raw.githubusercontent.com/aksenia/SeeCiTe/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step II. Prepare and extract SNP data.",
        "type": "Text_excerpt",
        "value": "For the extraction of the SNP-level data for each individual in a trio\nthe following inputs are needed: 1) PFB file (same file with probe\ncoordinates used when running PennCNV); 2) full path to PennCNV\ninstallation; 3) File with paths to LRR and BAF signal files in a\ntab-separated format in the order father, mother, offspring (same as in\nPennCNV-trio); 4) A parameter setting how many probes in flanks to\nextract; 5) dataset name - it must be consistent and will be used for\nfile naming throughout the project; 6) full path to the directory in\nwhich the extracted SNP data will be stored, for each CNV (must be\ncreated in advance).\n\n``` r\npfb_file <- file.path(\"~/Documents/uib/dev/toydata/affygw6.hg19.sorted.pfb\")\npenn_path <- \"~/local/PennCNV1.0.4\"\npenn_trio_list <- file.path(\"~/Documents/uib/dev/toydata/affy6hm_trio.tab\")\nn_flanking_snp <- 5\nrun_dir <- \"~/Documents/uib/dev/toydata/dev\"\n\ncommands <- makePythonCommands(penn_path=penn_path, \n                               pfb_file=pfb_file, \n                               penn_trio_list=penn_trio_list, \n                               triocnv_file=input_files[[\"triocnv_file\"]],\n                               n_flanking_snp=5, \n                               dataset=\"affy6ceu\", \n                               run_dir=run_dir)\nprint(commands)\n# $cnv\n# [1] \"python3 SeeCiTe/inst/python/extract_snp_cnv.py -l ~/Documents/uib/dev/toydata/affy6hm_trio.tab -c SeeCiTe/inst/extdata/affy6ceu.merged.filtered_annot_offspring.triocnv -d affy6ceu -p ~/Documents/uib/dev/toydata/affygw6.hg19.sorted.pfb -s ~/local/PennCNV1.0.4 -o ~/Documents/uib/dev/toydata/dev\"\n# \n# $flank\n# [1] \"python3 SeeCiTe/inst/python/extract_snp_flanks.py -l ~/Documents/uib/dev/toydata/affy6hm_trio.tab -c SeeCiTe/inst/extdata/affy6ceu.merged.filtered_annot_offspring.triocnv -d affy6ceu -p ~/Documents/uib/dev/toydata/affygw6.hg19.sorted.pfb -s ~/local/PennCNV1.0.4 -o ~/Documents/uib/dev/toydata/dev -f 5\"\n```\n\nThe result will be two script files with one line per CNV with a command\nfor PennCNV infer\\_snp\\_allele.pl that will do the extraction,\nterminating by lines that collect the data into one table for the whole\ncohort. This must be run by the user. For large cohorts one can split\nthe commands into batches or submit to a cluster.\n"
      },
      "source": "https://raw.githubusercontent.com/aksenia/SeeCiTe/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.881052111611904,
      "result": {
        "original_header": "SeeCiTe: Seeing CNVs in Trios",
        "type": "Text_excerpt",
        "value": "This vignette describes all steps necessary to run SeeCiTe analysis,\nusing the public HapMap trio data, with intermidiate outputs supplied\nwith the package for the: \n"
      },
      "source": "https://raw.githubusercontent.com/aksenia/SeeCiTe/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9108691338533239,
      "result": {
        "original_header": "Single sample functionality",
        "type": "Text_excerpt",
        "value": "First step is to extract the signal intensities with a helper script\n*extract\\_snp\\_single.py*, which takes as input PennCNV format and a\nsample map (one line per sample, comma-separated,\n\u201csampleid,path/to/lrrbaf\\_file\u201d):\n``` r\npython3 extract_snp_single.py -c data/affy6hm.initial_merged.triocnv -m data/samples_map.txt -o data -d SNGL -f 30\n```\nThe output file *data/SNGLE.signal\\_flanks\\_30.txt* (provided with the\npackage sample data) will contain all the information needed for\nconsequent steps:\n``` r\nsingle_file =  system.file(\"extdata\", \"SNGLE.signal_flanks_30.txt\", package = \"SeeCiTe\")\nsingle_data <- readSingle(snp_file = single_file)\nhead(single_data, n = 2)\n# # A tibble: 2 x 13\n#   Name    Chr Position locus coordcnv sample copynumber numsnp relation Origin\n#   <chr> <int>    <int> <chr> <chr>    <chr>       <int>  <int> <chr>    <lgl> \n# 1 AFFX\u2026     6 32412480 flank chr6:32\u2026 affy6\u2026          1     18 O        NA    \n# 2 AFFX\u2026     6 32412480 flank chr6:32\u2026 affy6\u2026          1     18 O        NA    \n# # \u2026 with 3 more variables: type <chr>, parameter <chr>, value <dbl>\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/aksenia/SeeCiTe/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.865259687300362,
      "result": {
        "original_header": "Single sample functionality",
        "type": "Text_excerpt",
        "value": "First step is to extract the signal intensities with a helper script\n*extract\\_snp\\_single.py*, which takes as input PennCNV format and a\nsample map (one line per sample, comma-separated,\n\u201csampleid,path/to/lrrbaf\\_file\u201d):\n``` r\npython3 extract_snp_single.py -c data/affy6hm.initial_merged.triocnv -m data/samples_map.txt -o data -d SNGL -f 30\n```\nThe output file *data/SNGLE.signal\\_flanks\\_30.txt* (provided with the\npackage sample data) will contain all the information needed for\nconsequent steps:\n``` r\nsingle_file =  system.file(\"extdata\", \"SNGLE.signal_flanks_30.txt\", package = \"SeeCiTe\")\nsingle_data <- readSingle(snp_file = single_file)\nhead(single_data, n = 2)\n# # A tibble: 2 x 13\n#   Name    Chr Position locus coordcnv sample copynumber numsnp relation Origin\n#   <chr> <int>    <int> <chr> <chr>    <chr>       <int>  <int> <chr>    <lgl> \n# 1 AFFX\u2026     6 32412480 flank chr6:32\u2026 affy6\u2026          1     18 O        NA    \n# 2 AFFX\u2026     6 32412480 flank chr6:32\u2026 affy6\u2026          1     18 O        NA    \n# # \u2026 with 3 more variables: type <chr>, parameter <chr>, value <dbl>\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/aksenia/SeeCiTe/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/aksenia/SeeCiTe/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "The MIT License (MIT)\nCopyright (c) <2018> <Ksenia Lavrichenko>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/aksenia/SeeCiTe/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SeeCiTe"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "aksenia"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 99861,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 21978,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 9080,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/aksenia/SeeCiTe/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Step IV. Run SeeCiTe classification.",
        "type": "Text_excerpt",
        "value": "First, a summary statistic collection step, for each CNV in offspring:\n\n``` r\nclu_baf <- runAnalyzeSignal(input_data = candidateCnvs, args = args, use_cache = T)\n# [1] \"Found cached file ~/Documents/uib/dev/toydata/affy6ceu_clu_baf.rds, reading in\"\nhead(clu_baf[,c(1:4)], n=3)\n# # A tibble: 3 x 4\n#   cnvTypeBAF    relation nprobes33_66 nprobes_cn4\n#   <chr>         <chr>           <int>       <int>\n# 1 F:possiblyLOH F                   0           0\n# 2 M:possiblyLOH M                   0           0\n# 3 O:possiblyLOH O                   0           0\n```\n\nThe clasification is the final step in the analysis which annotates each\nCNV with suggested inheritance and SeeCiTe quality class.\n\n``` r\ncnv_class <- classifyTrios(clu_baf)\nwith(cnv_class, table(seecite, inheritanceTest))\n#             inheritanceTest\n# seecite      denovo inherited mosaic unclear\n#   borderline      3         0      3      19\n#   probable        0        18      0       0\n#   unlikely        3         3      0       0\n```\n"
      },
      "source": "https://raw.githubusercontent.com/aksenia/SeeCiTe/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 13:48:28",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ]
}