{
  "application_domain": [
    {
      "confidence": 0.822709180531713,
      "result": {
        "type": "String",
        "value": "Semantic web"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "References",
        "type": "Text_excerpt",
        "value": "[1] Sharma V, Hiller M. [Increased alignment sensitivity improves the usage of genome alignments for comparative gene annotation](https://academic.oup.com/nar/article/45/14/8369/3875570/Increased-alignment-sensitivity-improves-the-usage?guestAccessKey=52de9f40-1303-4493-96e9-30def93a259c). Nucleic Acids Res., 45(14), 8369\u20138377, 2017\n\n[2] Suarez H, Langer BE, Ladde P, Hiller M. [chainCleaner improves genome alignment specificity and sensitivity](https://academic.oup.com//bioinformatics/article/33/11/1596/2929344/chainCleaner-improves-genome-alignment-specificity?guestAccessKey=5b9b078a-39e3-49c2-807b-852efe66f366). Bioinformatics, 33(11):1596-1603, 2017\n\n[3] Hiller M, Agarwal S, Notwell JH, Parikh R, Guturu H, Wenger AM, Bejerano G. [Computational methods to detect conserved non-genic elements in phylogenetically isolated genomes: application to zebrafish](https://academic.oup.com/nar/article-lookup/doi/10.1093/nar/gkt557). Nucleic Acids Res, 41(15):e151. \n\n[4] Kent WJ, Baertsch R, Hinrichs A, Miller W, Haussler D. [Evolution's cauldron: duplication, deletion, and rearrangement in the mouse and human genomes](http://www.pnas.org/content/100/20/11484.long). PNAS, 100(20):11484-9, 2003 \n\n[5] Osipova E, Hecker N, Hiller M. RepeatFiller newly identifies megabases of aligning repetitive sequences and improves annotations of conserved non-exonic elements, submitted\n\n"
      },
      "source": "https://raw.githubusercontent.com/hillerlab/GenomeAlignmentTools/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/hillerlab/GenomeAlignmentTools"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2017-06-06T15:30:11Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-06-14T11:32:48Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Tools for improving the sensitivity and specificity of genome alignments"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.988961276329024,
      "result": {
        "original_header": "Genome Alignment Tools",
        "type": "Text_excerpt",
        "value": "This repository provides tools for improving the sensitivity and specificity of pairwise genome alignments [1,2,3]. These tools make use of [lastz](http://www.bx.psu.edu/~rsharris/lastz/) and the alignment chain and net concept [4].  \nThese tools integrate into the standard lastz/chain/net workflow of genome alignment as follows:\n1. genome-wide local alignments with lastz\n2. building alignment chains\n3. NEW: highly-sensitive local alignments to improve alignment chains by detecting remote homologies\n4. NEW: chainCleaner to improve the specificity in alignment chains\n5. NEW: chainNet with parameter -rescore to compute exact scores of all nets\n6. NEW: non-nested net filtering to keep nets that likely represent orthologous alignments \n"
      },
      "source": "https://raw.githubusercontent.com/hillerlab/GenomeAlignmentTools/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9763465117740684,
      "result": {
        "original_header": "RepeatFiller",
        "type": "Text_excerpt",
        "value": "RepeatFiller [5] is a tool to incorporate newly-detected repeat-overlapping alignments into pairwise alignment chains [4]. Its runtime adds little to the computationally more expensive step of generating chains in pairwise whole-genome alignments. RepeatFiller circumvents the problem that considering all repeat-overlapping alignment seeds during whole genome alignment is computationally not feasible. Therefore, RepeatFiller only aligns local genomic regions that are bounded by colinear aligning blocks, as provided in the chains, which makes it feasible to consider all seeds including those that overlap repetitive regions. RepeatFiller application to mammalian genome alignment chains can add between 22 and 84 Mb of previously-undetected alignments that mostly originate from transposable elements [5]. This helps to comprehensively align repetitive regions and improves the annotation of conserved non-coding elements.  \n__Usage:__\n```\nRepeatFiller.py -c in.chain -T2 target.2bit -Q2 query.2bit [options]\n\tin.chain\talignment file in chain format\n\ttarget.2bit\tfull path to a .2bit file of reference species\n\tquery.2bit\tfull path to a .2bit file of query species\n\t[options]\tcall RepeatFiller.py --help to see the full list of parameters controlling \n\t   \t\tsize and score thresholds of chains, and lastz and chaining options\n\nexample: RepeatFiller.py -c hg38.speTri2.all.chain -T2 hg38.2bit -Q2 speTri2.2bit\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/hillerlab/GenomeAlignmentTools/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9718198516875557,
      "result": {
        "original_header": "Highly-sensitive local alignments",
        "type": "Text_excerpt",
        "value": "patchChain.perl performs a highly sensitive local pairwise alignment for loci flanked by aligning blocks [1,3]. \nGiven an alignment chain [4], it considers all chains that pass the score and span filters (optional parameters), extracts all the unaligning loci and creates local alignment jobs. After executing these alignment jobs, the newly found and the original local alignments are combined and used to produce a new set of improved chains.  \nThis procedure is recommended for comparisons between species that are separated by >0.75 substitutions per neutral site [1]. \n"
      },
      "source": "https://raw.githubusercontent.com/hillerlab/GenomeAlignmentTools/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9204408367359214,
      "result": {
        "original_header": "chainCleaner",
        "type": "Text_excerpt",
        "value": "chainCleaner improves the specificity in genome alignment chains by detecting and removing local alignments that obscure the evolutionary history of genomic rearrangements [2].\nThe input is a chain file, ideally after adding alignments found with highly sensitive parameters if distal species are compared.\nThe output is a chain file that contains re-scored and score-sorted chains after removing the local alignments from the parent chains and adding them as individual chains. \nThe resulting output file can be used to get alignment nets by running chainNet [4]. \n\n__Usage:__\n```\nchainCleaner in.chain tNibDir qNibDir out.chain out.bed -net=in.net \n OR \n   chainCleaner in.chain tNibDir qNibDir out.chain out.bed -tSizes=/dir/to/target/chrom.sizes -qSizes=/dir/to/query/chrom.sizes \n First option:   you have netted the chains and specify the net file via -net=netFile\n Second option:  you have not netted the chains. Then chainCleaner will net them. In this case, you must specify the chrom.sizes file for the target and query with -tSizes/-qSizes\n tNibDir/qNibDir are either directories with nib files, or the name of a .2bit file\n\noutput:\n   out.chain      output file in chain format containing the untouched chains, the original broken chain and the modified breaking chains. NOTE: this file is chainSort-ed.\n   out.bed        output file in bed format containing the coords and information about the removed chain-breaking alignments.\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/hillerlab/GenomeAlignmentTools/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9893764882815588,
      "result": {
        "original_header": "chainNet",
        "type": "Text_excerpt",
        "value": "Given a set of alignment chains, chainNet produces alignment nets, which is a hierarchical collection of chains or parts of chains that attempt to capture only orthologous alignments [4]. \nThe original chainNet implementation approximates the score of \"sub-nets\" (nets that come from a part of a chain and fill a gap in a higher-level net) by the fraction of aligning bases. This can lead to a bias in case the aligning blocks of a chain are not equally distributed. We implemented a new parameter \"-rescore\" in chainNet that computes the real score of each subnet [2]. \n__Usage:__\n```\nchainNet - Make alignment nets out of chains\nusage:\n   chainNet in.chain target.sizes query.sizes target.net query.net\nwhere:\n   in.chain is the chain file sorted by score\n   target.sizes contains the size of the target sequences\n   query.sizes contains the size of the query sequences\n   target.net is the output over the target genome\n   query.net is the output over the query genome\noptions:\n   -rescore                    compute the real score of the sub-net (instead of approximating it based on the fraction of aligning bases in the subnet)\n                               The real score will be much more precise especially for imbalanced chains where most aligning blocks are on one side.\n                               This flag will set minScore=0. Each subnet with a negative score gets score 1. Afterwards, run a non-nested score filter.\n                               Note: Rescoring is only implemented for the target species net.\n                               With this flag, you need to give the target and query genome sequence (-tNibDir and -qNibDir) and specify -linearGap\n   -tNibDir=fileName           target genome file (2bit or nib format)\n   -qNibDir=fileName           query genome file (2bit or nib format)\n```\nCall chainNet without any parameters to see the full parameter list.\n \n"
      },
      "source": "https://raw.githubusercontent.com/hillerlab/GenomeAlignmentTools/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9685753012320532,
      "result": {
        "original_header": "Non-nested net filtering",
        "type": "Text_excerpt",
        "value": "Before building a multiple alignment from the pairwise alignment nets, it is recommended to remove low-scoring alignment nets that are unlikely to represent real homologies.\nWhile the netFilter program [4] removes nested nets in case their parent net does not satisfy the specified score and size criteria, NetFilterNonNested.perl applies a non-nested filtering procedure that considers and filters each net individually [1,3]. \nThis avoids removing nested nets that would satisfy the specified criteria, even if a parent net is removed.  \n"
      },
      "source": "https://raw.githubusercontent.com/hillerlab/GenomeAlignmentTools/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9302302999847065,
      "result": {
        "original_header": "Kent source code (light-weight)",
        "type": "Text_excerpt",
        "value": "The 'kent' subdirectory contains a light-weight version of the Kent source code, which will only compile tools for generating or working\nwith genome alignment chains and nets.\nTo compile the light-weight version of Kent tools run make in the Kent source directory:\n```\ncd kent/src\nmake\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/hillerlab/GenomeAlignmentTools/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9831194451862253,
      "result": {
        "type": "Text_excerpt",
        "value": "**If you are only interested in generating alignment chains (e.g. as input for ), we recommend using our  pipeline that fully automates lastz, axtChain, RepeatFiller and chainCleaner.** \n"
      },
      "source": "https://raw.githubusercontent.com/hillerlab/GenomeAlignmentTools/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/hillerlab/GenomeAlignmentTools/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 15
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/hillerlab/GenomeAlignmentTools/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "hillerlab/GenomeAlignmentTools"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Genome Alignment Tools"
      },
      "source": "https://raw.githubusercontent.com/hillerlab/GenomeAlignmentTools/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hillerlab/GenomeAlignmentTools/master/kent/src/machTest.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hillerlab/GenomeAlignmentTools/master/kent/src/checkUmask.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "The perl and python scripts just need to be copied to a directory that is contained in your $PATH environment variable. \nOnly chainCleaner and the modified chainNet (with the -rescore option) need to be compiled. \nSince both tools need the Kent (UCSC) source code, you need to set the KENTSRC_DIR variable to the path to the kent source code (should end with kent/src/).\n```\nexport KENTSRC_DIR=/path/to/GenomeAlignmentTools/kent/src/\n```\nAfterwards, compile chainCleaner, chainNet and scoreChain\n```\ncd /path/to/GenomeAlignmentTools/src\nexport MACHTYPE=x86_64\nmake \n```\n\nThe subdirectory precompiledBinary_x86_64/ already contains Linux x86_64 compiled binaries.\n"
      },
      "source": "https://raw.githubusercontent.com/hillerlab/GenomeAlignmentTools/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9999981275545531,
      "result": {
        "original_header": "chainCleaner",
        "type": "Text_excerpt",
        "value": "__Example run of chainCleaner:__\nBefore executing, download the human and mouse genome.\n```\nwget http://hgdownload.cse.ucsc.edu/goldenPath/hg38/bigZips/hg38.2bit\nwget http://hgdownload.cse.ucsc.edu/goldenPath/mm10/bigZips/mm10.2bit\nmv hg38.2bit mm10.2bit example/\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/hillerlab/GenomeAlignmentTools/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9205373240148784,
      "result": {
        "original_header": "Non-nested net filtering",
        "type": "Text_excerpt",
        "value": "__Usage:__\nIn [1], we applied the following filter criteria: \n"
      },
      "source": "https://raw.githubusercontent.com/hillerlab/GenomeAlignmentTools/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9519521997991494,
      "result": {
        "original_header": "Kent source code (light-weight)",
        "type": "Text_excerpt",
        "value": "The 'kent' subdirectory contains a light-weight version of the Kent source code, which will only compile tools for generating or working\nwith genome alignment chains and nets.\nTo compile the light-weight version of Kent tools run make in the Kent source directory:\n```\ncd kent/src\nmake\n```\n \nFor further details refer to 'kent/README.txt'. \n"
      },
      "source": "https://raw.githubusercontent.com/hillerlab/GenomeAlignmentTools/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8057252642345639,
      "result": {
        "original_header": "RepeatFiller",
        "type": "Text_excerpt",
        "value": "__Usage:__\n```\nRepeatFiller.py -c in.chain -T2 target.2bit -Q2 query.2bit [options]\n\tin.chain\talignment file in chain format\n\ttarget.2bit\tfull path to a .2bit file of reference species\n\tquery.2bit\tfull path to a .2bit file of query species\n\t[options]\tcall RepeatFiller.py --help to see the full list of parameters controlling \n\t   \t\tsize and score thresholds of chains, and lastz and chaining options\n\nexample: RepeatFiller.py -c hg38.speTri2.all.chain -T2 hg38.2bit -Q2 speTri2.2bit\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/hillerlab/GenomeAlignmentTools/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8477950448792801,
      "result": {
        "original_header": "chainCleaner",
        "type": "Text_excerpt",
        "value": "Run chainCleaner on the chains provided in example/\n``` \nchainCleaner example/hg38.mm10.chr1.chain.gz -tSizes=example/hg38.chrom.sizes \\\n  -qSizes=example/mm10.chrom.sizes example/hg38.2bit example/mm10.2bit \\ \n  example/hg38.mm10.chr1.cleaned.chain example/removedSuspects.bed -linearGap=loose \n\n\nVerbosity level: 1\nfoldThreshold: 0.000000    LRfoldThreshold: 2.500000   maxSuspectBases: 2147483647  maxSuspectScore: 100000  minBrokenChainScore: 50000  minLRGapSize: 0\n0. need to net the input chains example/hg38.mm10.chr1.chain.gz (no net file given) ...\n\t\ttempfile for netting: tmp.chainCleaner.XLJ2Vxs.net\nGot 455 chroms in example/hg38.chrom.sizes, 66 in example/mm10.chrom.sizes\nFinishing nets\nwriting stdout\nwriting /dev/null\nDONE (nets in tmp.chainCleaner.XLJ2Vxs.net)\n1. parsing fills/gaps from tmp.chainCleaner.XLJ2Vxs.net and getting valid breaks ...\n1.1 read net file tmp.chainCleaner.XLJ2Vxs.net into memory ...\nDONE\n1.2 get fills/gaps from tmp.chainCleaner.XLJ2Vxs.net ...\nDONE\n1.3 get aligning regions from tmp.chainCleaner.XLJ2Vxs.net ...\nDONE\n1.4 get valid breaks ...\nDONE\nRemove temporary netfile tmp.chainCleaner.XLJ2Vxs.net\nDONE (parsing fills/gaps and getting valid breaks)\n2. reading breaking and broken chains from example/hg38.mm10.chr1.chain.gz and write irrelevant chains to example/hg38.mm10.chr1.cleaned.chain.unsorted ...\nDONE\n3. reading target and query DNA sequences for breaking and broken chains ...\nDONE\n4. loop over all breaks. Remove suspects if they pass our filters and write out deleted suspects to example/removedSuspects.bed ...\nDONE\n5. write the (new) breaking and the broken chains to example/hg38.mm10.chr1.cleaned.chain.unsorted ...\nDONE\n6. chainSort example/hg38.mm10.chr1.cleaned.chain.unsorted example/hg38.mm10.chr1.cleaned.chain ...\nDONE\n7. free memory ...\nDONE\nmemory usage 5562015744, utime 1058 s/100, stime 256\n\nALL DONE. New chains are in example/hg38.mm10.chr1.cleaned.chain. Deleted suspects in example/removedSuspects.bed\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/hillerlab/GenomeAlignmentTools/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/hillerlab/GenomeAlignmentTools/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2017 hillerlab\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/hillerlab/GenomeAlignmentTools/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "GenomeAlignmentTools"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "hillerlab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 14825201,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "AngelScript",
        "size": 434284,
        "type": "Programming_language",
        "value": "AngelScript"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 111088,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 81839,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 80546,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 37076,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Gnuplot",
        "size": 36237,
        "type": "Programming_language",
        "value": "Gnuplot"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 34162,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Roff",
        "size": 20366,
        "type": "Programming_language",
        "value": "Roff"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 11954,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "M4",
        "size": 7552,
        "type": "Programming_language",
        "value": "M4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "PostScript",
        "size": 2595,
        "type": "Programming_language",
        "value": "PostScript"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "TSQL",
        "size": 2442,
        "type": "Programming_language",
        "value": "TSQL"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "ActionScript",
        "size": 1224,
        "type": "Programming_language",
        "value": "ActionScript"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CAP CDS",
        "size": 475,
        "type": "Programming_language",
        "value": "CAP CDS"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "q",
        "size": 218,
        "type": "Programming_language",
        "value": "q"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hillerlab/GenomeAlignmentTools/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "MichaelHiller",
          "type": "User"
        },
        "date_created": "2022-10-12T13:45:09Z",
        "date_published": "2022-11-29T19:34:51Z",
        "description": "Published version",
        "html_url": "https://github.com/hillerlab/GenomeAlignmentTools/releases/tag/1.0",
        "name": "1.0",
        "release_id": 84493986,
        "tag": "1.0",
        "tarball_url": "https://api.github.com/repos/hillerlab/GenomeAlignmentTools/tarball/1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/hillerlab/GenomeAlignmentTools/releases/84493986",
        "value": "https://api.github.com/repos/hillerlab/GenomeAlignmentTools/releases/84493986",
        "zipball_url": "https://api.github.com/repos/hillerlab/GenomeAlignmentTools/zipball/1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirements",
        "type": "Text_excerpt",
        "value": "* install [lastz](http://www.bx.psu.edu/~rsharris/lastz/)\n* install the light-weight Kent (UCSC) source code by doing\n```\n# go to whereever you want to have the GenomeAlignmentTools including Kent source code\ncd /path/to/\n# git clone and make the libraries\ngit clone https://github.com/hillerlab/GenomeAlignmentTools.git\n\ncd GenomeAlignmentTools/kent/src\n\nmake\n\n```\nThese binaries should be located in a directory that is added to your $PATH environment variable. \n\nIf you are using BASH, for example, add following lines to your ~/.bashrc:\n\n```\n# Kent binaries\nPATH=$PATH:/path/to/GenomeAlignmentTools/kent/bin;export PATH\n```\n"
      },
      "source": "https://raw.githubusercontent.com/hillerlab/GenomeAlignmentTools/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 02:36:46",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 56
      },
      "technique": "GitHub_API"
    }
  ]
}