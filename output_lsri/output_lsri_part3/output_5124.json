{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/suyufeng/ThermoNet"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-02-11T18:01:11Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-04-13T13:02:33Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9986506584796924,
      "result": {
        "original_header": "ThermoNet",
        "type": "Text_excerpt",
        "value": "This is a TensorFlow implementation accompanying our paper. This codebase is based on Shreshthgandhi's Tensorflow implementation of the cdeepbind model. The framework of model training and testing have beed adopted with minor changes. Other code files have been modified and re-structured with changes specific to our model. And the folder, `scripts/RNAsubopt`, is a copy of RNAsubopt from the ViennaRNA  project.\n \n"
      },
      "source": "https://raw.githubusercontent.com/suyufeng/ThermoNet/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/suyufeng/ThermoNet/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/suyufeng/ThermoNet/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "suyufeng/ThermoNet"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ThermoNet"
      },
      "source": "https://raw.githubusercontent.com/suyufeng/ThermoNet/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/suyufeng/ThermoNet/master/invivo/bin/train_cnn_models_gpu4.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/suyufeng/ThermoNet/master/invitro/bin/train_cnn_models_gpu7.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/suyufeng/ThermoNet/master/invitro/bin/train_cnn_models_gpu4.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Prepare the Training Data",
        "parent_header": [
          "ThermoNet"
        ],
        "type": "Text_excerpt",
        "value": "We used two datasets to evaluate our model.\nThe following datasets were used for training our models.\n* [RNAcompete](http://tools.genes.toronto.edu/deepbind/nbtcode/)\n* [CLIP-seq](https://github.com/mstrazar/iONMF)\n\nYou can download the datasets from the corresponding website. \nAfter that, you should prepare the data used in the training code according to the steps below. We use the CLIP-seq dataset as an example.\n"
      },
      "source": "https://raw.githubusercontent.com/suyufeng/ThermoNet/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Clean the dataset format",
        "parent_header": [
          "ThermoNet",
          "Prepare the Training Data"
        ],
        "type": "Text_excerpt",
        "value": "Use the `python scripts/0_get_pure_seq_and_label.py` and `python scripts/1_combine_train_test.py`\n"
      },
      "source": "https://raw.githubusercontent.com/suyufeng/ThermoNet/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Sample 100 possible secondary structures",
        "parent_header": [
          "ThermoNet",
          "Prepare the Training Data"
        ],
        "type": "Text_excerpt",
        "value": "Use the `python scripts/2_generate_top100.py` and `python scripts/4_generate_structure_message.py`\n"
      },
      "source": "https://raw.githubusercontent.com/suyufeng/ThermoNet/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Generate embedding id",
        "parent_header": [
          "ThermoNet",
          "Prepare the Training Data"
        ],
        "type": "Text_excerpt",
        "value": "Use the `python scripts/3_generate_embedding.py`\n"
      },
      "source": "https://raw.githubusercontent.com/suyufeng/ThermoNet/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Extract top 5 secondary structures",
        "parent_header": [
          "ThermoNet",
          "Prepare the Training Data"
        ],
        "type": "Text_excerpt",
        "value": "Use the `python scripts/5_generate_top5.py`\n\nYou will get six kinds of data, which are \".pure.seq\", \".label\", \"\\_combine.map.top100.npy\", \"\\_combine.map.top5.npz\", \"n_gram/\\_mer.npy\" and \"\\_combine.top5.prob.npy\". You need to link the addresses of the six files in the code to the corresponding addresses.\n"
      },
      "source": "https://raw.githubusercontent.com/suyufeng/ThermoNet/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/suyufeng/ThermoNet/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ThermoNet"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "suyufeng"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 112823,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 4143,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/suyufeng/ThermoNet/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Run the Main Script",
        "parent_header": [
          "ThermoNet"
        ],
        "type": "Text_excerpt",
        "value": "Use the `python invitro/bin/train_model_update.py` to train the model in *in vitro* dataset and the `python invivo/bin/train_model_update.py` to train the model in *in vivo* dataset. After the code is completed, we will save the best hyperparameter and results. You can change the saving address in `configs/cnn_config.yml`. \n\nBTW, The ThermoNet implementation is available at `invitro/bin/deepbind_model/utils_update.py`. If you just want to see how to implemente ThermoNet instead of runing the code, you can check the ThermoNet class directly.\n\n"
      },
      "source": "https://raw.githubusercontent.com/suyufeng/ThermoNet/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 18:52:14",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ]
}