{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/jiaying2508/LYRUS"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-08-23T19:17:40Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-08-20T16:55:37Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9489095582196344,
      "result": {
        "original_header": "LYRUS: A Machine Learning Model for Predicting the Pathogenicity of Missense Variants",
        "type": "Text_excerpt",
        "value": "LYRUS incorporates five sequence-based, six structure-based, and four dynamics-based features. Uniquely, LYRUS includes a newly-proposed sequence co-evolution feature called variation number. LYRUS was trained using a dataset that contains 4,363 protein structures corresponding to 22,639 SAVs from the ClinVar database.  \nThe method is described in Jiaying Lai, Jordan Yang, Ece D Gamsiz Uzun, Brenda M Rubenstein, Indra Neil Sarkar, LYRUS: a machine learning model for predicting the pathogenicity of missense variants, Bioinformatics Advances, Volume 2, Issue 1, 2022, vbab045, https://doi.org/10.1093/bioadv/vbab045. \nLYRUS is built on top of several existing Python libraries as well as other Software, and is tested using Python3.7.4\n \n"
      },
      "source": "https://raw.githubusercontent.com/jiaying2508/LYRUS/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/jiaying2508/LYRUS/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/jiaying2508/LYRUS/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "jiaying2508/LYRUS"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "LYRUS: A Machine Learning Model for Predicting the Pathogenicity of Missense Variants"
      },
      "source": "https://raw.githubusercontent.com/jiaying2508/LYRUS/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1.0,
      "result": {
        "original_header": "Required python packages",
        "type": "Text_excerpt",
        "value": "Python packages (most of which can be installed using pip) needed to run LYRUS include:\n- skbio: http://scikit-bio.org\n- pandas: https://pandas.pydata.org/docs/getting_started/install.html\n- numpy: https://numpy.org/install/\n- scipy: https://www.scipy.org/install.html\n- xgboost: https://xgboost.readthedocs.io/en/latest/install.html\n- sklearn: https://scikit-learn.org/stable/install.html\n- Bio: https://biopython.org/wiki/Download\n- BeautifulSoup: https://www.crummy.com/software/BeautifulSoup/bs4/doc/#installing-beautiful-soup\n- evcouplings: http://prody.csb.pitt.edu/downloads/\n- prody: http://prody.csb.pitt.edu/downloads/\n- rhapsody: http://rhapsody.csb.pitt.edu/download.php\n- pyrosetta: https://www.pyrosetta.org/downloads/legacy-pyrosetta3-download\n \n"
      },
      "source": "https://raw.githubusercontent.com/jiaying2508/LYRUS/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999999999063718,
      "result": {
        "original_header": "Required external packages",
        "type": "Text_excerpt",
        "value": "LYRUS also depends on the following external packages:<br/><br/>\nInstall **command line** version for:\n1. Clustal Omega: http://www.clustal.org/omega/\n2. PAUP: http://phylosolutions.com/paup-test/ \nInstall the following files and put it in the **LYRUS** directory:\n1. plmc-master: https://github.com/debbiemarkslab/plmc\n2. FoldX: http://foldxsuite.crg.eu\n3. FreeSASA: https://freesasa.github.io\n4. MAESTRO: https://pbwww.services.came.sbg.ac.at/?page_id=477\n5. P2Rank: https://github.com/rdk/p2rank\n \n"
      },
      "source": "https://raw.githubusercontent.com/jiaying2508/LYRUS/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.999885378148371,
      "result": {
        "original_header": "Other data files",
        "type": "Text_excerpt",
        "value": "The **data** folder that includes pre-computed variation number and EVMutation score (using the same orthologs as the variation number; differs from the ones provided by the Marks Lab https://marks.hms.harvard.edu/evmutation/downloads.html) can be downloaded at https://drive.google.com/drive/folders/1bFMi78D4LqjGMDZiP_X6OzBBcsttSoSy?usp=sharing. If you decided to use the pre-computed scores, please put the **data** folder in the **LYRUS** directory.\n \n"
      },
      "source": "https://raw.githubusercontent.com/jiaying2508/LYRUS/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/jiaying2508/LYRUS/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "LYRUS"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "jiaying2508"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 85255,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jiaying2508/LYRUS/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://xgboost.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/jiaying2508/LYRUS/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running Instructions",
        "parent_header": [
          "LYRUS: A Machine Learning Model for Predicting the Pathogenicity of Missense Variants"
        ],
        "type": "Text_excerpt",
        "value": "Clone this repository and run the following command within the downloaded directory, with python version 3.7.4 or higher.\n\n```console\nimport os\nfrom LYRUS.lyrusClass import lyrusClass, lyrusPredict\n\ngene = 'A1BG'\nuniprot = 'P04217'\ncurrDir = os.getcwd()\noutputDir = '{}/test'.format(currDir)\ntry:\n    os.mkdir(outputDir)\nexcept:\n    print('Output directory already exist')\n\n#load model\nlyrusModel = lyrusClass(gene, uniprot, outputDir, savFile=None)\n\n#download orthologs from NCBI\nlyrusModel.getFasta()\n\n#download PDB from SWISS-MODEL\nlyrusModel.getPDB()\n\n#calculate all the parameters except for fathmm\nlyrusModel.getParameters(maestroDir='MAESTRO_OSX_x64',p2rankDir='p2rank_2.2')\n```\n\nThe **fathmmFile** should contain the output from FATHMM. To get the FATHMM output,\ngo to http://fathmm.biocompute.org.uk/inherited.html and run using the **fathmmInput.txt** available in the output directory.\n\n```console\nfathmmFile = 'test/fathmm.txt'\n\n#calculate lyrus probability\nlyrusPredict(gene, fathmmFile, outputDir, uniprot)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/jiaying2508/LYRUS/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Alternative running instruction using lyrus.py",
        "parent_header": [
          "LYRUS: A Machine Learning Model for Predicting the Pathogenicity of Missense Variants"
        ],
        "type": "Text_excerpt",
        "value": "```console\n$ python lyrus.py -i <inputFile> -o <outputDir> -f <fathmmFile>\n```\n\nThe **inputFile** should contain 2 column:\n  1. UniProt ID\n  2. Single amino acid variant: [aa_ref][aa_pos][aa_var]\n\nExample **inputFile**:  \n```\nQ9NQZ7 V363G\nP11245 E203D\nQ6XZF7 R1101Q\nB1AL17 A139V\nQ9NTN9-2 R423H\nQ92887 T486I\n............\n```\n\nThe **outputDir** should be a **full path** to the desired directory to store the outputs\n\nThe **fathmmFile** should contain the output from FATHMM. To get the FATHMM output,\ngo to http://fathmm.biocompute.org.uk/inherited.html and run using the **inputFile**.\n"
      },
      "source": "https://raw.githubusercontent.com/jiaying2508/LYRUS/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 06:43:11",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 7
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ]
}