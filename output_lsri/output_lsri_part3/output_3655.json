{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "type": "Text_excerpt",
        "value": "If you use SibeliaZ in your research, please cite:\n\n\tMinkin, I., Medvedev, P. Scalable multiple whole-genome alignment and locally collinear block construction with SibeliaZ.\n\tNat Commun 11, 6327 (2020). https://doi.org/10.1038/s41467-020-19777-8\n\nIf you also used maf2synteny, please cite the Ragout [paper](https://github.com/fenderglass/maf2synteny#citation).\n"
      },
      "source": "https://raw.githubusercontent.com/medvedevgroup/SibeliaZ/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/medvedevgroup/SibeliaZ"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contacts",
        "type": "Text_excerpt",
        "value": "E-mail your feedback at ivminkin@gmail.com.\n"
      },
      "source": "https://raw.githubusercontent.com/medvedevgroup/SibeliaZ/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2017-01-10T19:12:59Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-17T07:02:59Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A fast whole-genome aligner based on de Bruijn graphs"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "type": "Text_excerpt",
        "value": "SibeliaZ is a whole-genome alignment and locally-coliinear blocks construction\npipeline. The blocks coordinates are output in GFF format and the alignment is\nin MAF.\n\nSibeliaZ was designed for the inputs consisting of multiple similar genomes,\nlike different strains of the same species. The tool works best for the datasets\nwith the distance from a leaf to the most recent common ancestor not exceeding\n0.09 substitutions per site, or 9 PAM units.\n\nCurrently SibeliaZ does not support chromosomes in the input longer than\n4294967296 bp, this will be fixed in the future releases.\n"
      },
      "source": "https://raw.githubusercontent.com/medvedevgroup/SibeliaZ/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Output description",
        "type": "Text_excerpt",
        "value": "The output directory will contain:\n\n1) A GFF file with coordinates of the locally-collinear blocks. Lines that\nhave identical id fields correspond to different copies of the same block.\nThe file name is \"blocks_coords.gff\"\n2) A MAF file with the whole-genome alignment of the input. The file name\nis \"alignment.maf\".\n\nNote: the actual alignment is produced by globally aliging the locally-colliner\nblocks, which is memory-hungry. It could be impossible to align certain blocks,\nespecially if they have a lot of copies and/or long due to the aligner running\nout of memory, even on machines with large RAM. The output directory will have\na subdirectory \"blocks\" that will contain FASTA files with blocks that were\nimpossible to align. Each file correspond to a block and contains its copies.\nFASTA headers contain the coordinates of all copies of the block in the same\nformat as MAF records, except that fields are separated by a semicolon.\n\nIt is possible to skip the alignment (use the -n switch) step and produce only\ncoordinates of the blocks if the alignment is not needed for downstream analysis.\nIn this case SibeliaZ will not produce the \"alignment.maf\" file and \"blocks\"\nsubdirectory.\n"
      },
      "source": "https://raw.githubusercontent.com/medvedevgroup/SibeliaZ/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9348059184231212,
      "result": {
        "original_header": "Building synteny blocks",
        "type": "Text_excerpt",
        "value": "Otherwise, it is best to run sibeliaz without the alignment step saving time\nand memory:\n\t\n\tsibeliaz -n <output_directory>\n\tmaf2synteny <output_directory>/blocks_coords.gff \nFor further information on synteny blocks construction, please refer to the \ndocumentation of maf2synteny.\n \n"
      },
      "source": "https://raw.githubusercontent.com/medvedevgroup/SibeliaZ/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9518298170794931,
      "result": {
        "original_header": "The value of k",
        "type": "Text_excerpt",
        "value": "This parameter defines the order of the de Bruijn graph being used and controls\nthe tradeoff between the sensitivity on one hand, and speed and memory usage\non the other. The parameter is set by the key \nIn general the lower the k, the slower and more sensitive the alignment is. For\nsmall datasets, like bacteria, we recommend k=15, and for mammalian-sized\ngenomes k=25. The default is 25.\n \n"
      },
      "source": "https://raw.githubusercontent.com/medvedevgroup/SibeliaZ/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9672084405382579,
      "result": {
        "original_header": "Vertices frequency threshold",
        "type": "Text_excerpt",
        "value": "Input genomes often contain repeated elements that make the graph large and\nconvoluted. To deal with this issue, SibeliaZ removes all k-mers with frequency\nmore than a threshold, which is controlled by the option: \nWe recommend setting it to twice the maximum number of copies of a homologous\nblock the underlying input genome collection has. For example, assume a single \ninput genome in the collection of the input genomes has a genomic element that\nis duplicated **D** times and the user is interested in this element being properly\naligned across the input. This element could be a gene that was duplicated multiple\ntimes or a transposon; we assume that **D** is the maximum frequency of occurrence\nacross all such genomic elements of interest in a single genome. \nIf there are **N** input genomes containing the genomic element,\nthen the parameter -a should be set to at least **D * N * 2**, otherwise,\nthe genomic element will likely be missing in the resulting alignment. \nIf the resources allow, this parameter could be set to a higher value, but setting\nit too high could significantly delay the computation.\nFor example, suppose we align 10 genomes, and each genome has a gene that is duplicated 4 times.\nHence, the parameter -a should be set to at least 10 * 4 * 2 = 80 or higher. \nThe default parameter value is 150 and is optimized for a collection of mammalian genomes.\nThis parameter must be adjusted accordingly in case the input contains hundreds\nof short genomes like bacteria or viruses.  \n"
      },
      "source": "https://raw.githubusercontent.com/medvedevgroup/SibeliaZ/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.986106836189964,
      "result": {
        "original_header": "Bubble size threshold",
        "type": "Text_excerpt",
        "value": "SibeliaZ analyzes the graph by looking for long chains of bubbles in it. A bubble\nis a pair of paths having the same endpoints. A long chain of bubbles is likely\nto be generated by a pair of homologous sequences, which SibeliaZ looks for.\nHowever, if the paths between endpoints of a bubble is too long, it may arise\nthrough the spurious similarity. To avoid this, SibeliaZ discards bubbles \nwith paths longer than the threshold -b, which can be set by: \nThe default value of -b is 200. Increasing value may increase recall of divergent\nsequences, but if -b is too high, it will decrease accuracy as well.\n \n"
      },
      "source": "https://raw.githubusercontent.com/medvedevgroup/SibeliaZ/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8093513768471898,
      "result": {
        "original_header": "Locally-collinear block size",
        "type": "Text_excerpt",
        "value": "The default value is 50. Warning: increasing this parameter may significantly\nslow down the computation.\n \n"
      },
      "source": "https://raw.githubusercontent.com/medvedevgroup/SibeliaZ/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.891774342097961,
      "result": {
        "original_header": "Skipping the alignment",
        "type": "Text_excerpt",
        "value": "To skip the alignment and only output coordinates of the blocks, use the\nswitch \n"
      },
      "source": "https://raw.githubusercontent.com/medvedevgroup/SibeliaZ/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9964713306277263,
      "result": {
        "original_header": "Threads number",
        "type": "Text_excerpt",
        "value": "The maximum number of thread for SibeliaZ to use. This parameter is set by  \n"
      },
      "source": "https://raw.githubusercontent.com/medvedevgroup/SibeliaZ/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9043614263344988,
      "result": {
        "original_header": "Memory allocation",
        "type": "Text_excerpt",
        "value": "The graph constructor TwoPaCo preallocates memory for Bloom filter. By default,\nthe Bloom filter size is thrice of the size of the input files. The Bloom\nfilter size can be set manually with the option: \n"
      },
      "source": "https://raw.githubusercontent.com/medvedevgroup/SibeliaZ/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8569440659641306,
      "result": {
        "original_header": "Output directory",
        "type": "Text_excerpt",
        "value": "The default is \"sibeliaz_out\" in the current working directory.\n \n"
      },
      "source": "https://raw.githubusercontent.com/medvedevgroup/SibeliaZ/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9885086719744478,
      "result": {
        "original_header": "A note about the repeat masking",
        "type": "Text_excerpt",
        "value": "SibeliaZ and TwoPaCo currently do not recognize soft-masked characters (i.e. using\nlowercase characters), so please convert soft-masked repeats to hard-maksed ones\n(with Ns) if you would like to mask the repeats explicitly. However, it is not\nnecessary as SibeliaZ uses the abundance parameter -a to filter out high-copy\nrepeats.\n \n"
      },
      "source": "https://raw.githubusercontent.com/medvedevgroup/SibeliaZ/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9924564728764413,
      "result": {
        "original_header": "Difference between Sibelia and SibeliaZ",
        "type": "Text_excerpt",
        "value": "SibeliaZ is the future developement of synteny-finder Sibelia. The key difference\nis that old Sibelia was designed to produce long synteny blocks, while SibeliaZ\nproduces shorter locally-collinear blocks or LCBs. Output of SibeliaZ is very\nsimilar to Sibelia's when it is run in a single stage. At the same time, SibeliaZ\nis much faster and can handle longer genomes.\n \n"
      },
      "source": "https://raw.githubusercontent.com/medvedevgroup/SibeliaZ/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.944318073094637,
      "result": {
        "original_header": "Troubleshooting",
        "type": "Text_excerpt",
        "value": "It could be that SibeliaZ runs out of memory on large inputs. Possible reasons\ninclude: \n* SibeliaZ-LCB running out of memory. You can try to reduce the abundance parameter\n-a to prune the internal data structure and reduce its size\n \n"
      },
      "source": "https://raw.githubusercontent.com/medvedevgroup/SibeliaZ/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/medvedevgroup/SibeliaZ/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 19
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/medvedevgroup/SibeliaZ/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "medvedevgroup/SibeliaZ"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SibeliaZ 1.2.5"
      },
      "source": "https://raw.githubusercontent.com/medvedevgroup/SibeliaZ/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Compilation and installation",
        "type": "Text_excerpt",
        "value": "The easiset way to install SibeliaZ, is to use [bioconda](https://bioconda.github.io/).\nOnce you have bioconda environment installed, install package sibeliaz:\n\n\tconda install sibeliaz\n\nTo compile the code yourself, you will need recent installations of the following\nsoftware (Linux only):\n\n* Git\n* CMake \n* A GCC compiler supporting C++11\n* Intel TBB library properly installed on your system. In other words, G++\n  should be able to find TBB libs (future releases will not depend on TBB)\n\nSibeliaZ was tested with CMake 3.5.1, gcc 5.4.0 and TBB 4.4.\nThe easiest way to install the dependencies is to use a package management\nsystem. For APT on Debian systems they can be installed by the following\ncommand, which should take only a couple of minutes:\n\n\tsudo apt-get install git cmake g++ libtbb-dev\n\nOnce you installed the things above, do the following:\n\nClone the repository by running:\n\n\tgit clone https://github.com/medvedevgroup/SibeliaZ \n\nGo to the root directory of the project and create the \"build\" folder by\nexecuting:\n\n\tcd SibeliaZ\n\tmkdir build\n\nInitialize dependencies by executing:\n\n\tgit submodule update --init --recursive\n\nGo to the \"build\" directory and compile and install the project by running:\n\t\n\tcd build\n\tcmake .. -DCMAKE_INSTALL_PREFIX=<path to install the binaries>\n\tmake install\n\nThe make run will produce and install the executables of twopaco, sibeliaz-lcb,\nspoa and a wrapper script sibeliaz which implements the pipeline.\n"
      },
      "source": "https://raw.githubusercontent.com/medvedevgroup/SibeliaZ/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9975926462923277,
      "result": {
        "original_header": "Building synteny blocks",
        "type": "Text_excerpt",
        "value": "You can also construct longer synteny blocks required for certain analyses. By\ndefault, sibeliaz also installs program [maf2synteny](https://github.com/fenderglass/maf2synteny)\nwritten by [Mikhail Kolmogorov](https://github.com/fenderglass). If you already\nhave output of SibeliaZ, you can run maf2synteny on it: \n"
      },
      "source": "https://raw.githubusercontent.com/medvedevgroup/SibeliaZ/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9225392242668129,
      "result": {
        "original_header": "Output directory",
        "type": "Text_excerpt",
        "value": "The directory for the output files can be set by the argument \n"
      },
      "source": "https://raw.githubusercontent.com/medvedevgroup/SibeliaZ/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8455616310964827,
      "result": {
        "original_header": "Conversion to XMFA",
        "type": "Text_excerpt",
        "value": "The script located at Sibeliaz-LCB/maf_to_gfa1.py lets you convert a MAF file\nto XMFA format. Requires BioPython of version >= 1.6.9. Usage: \n"
      },
      "source": "https://raw.githubusercontent.com/medvedevgroup/SibeliaZ/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9998991285004828,
      "result": {
        "original_header": "Datasets used for analyses in the paper",
        "type": "Text_excerpt",
        "value": "See: https://github.com/medvedevgroup/SibeliaZ/blob/master/DATA.txt\n \n"
      },
      "source": "https://raw.githubusercontent.com/medvedevgroup/SibeliaZ/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.9436519941132845,
      "result": {
        "original_header": "Export to GFA1 (experimental)",
        "type": "Text_excerpt",
        "value": "\tpython maf_to_gfa1.py <MAF alignment file> <input FASTA files>\n \n"
      },
      "source": "https://raw.githubusercontent.com/medvedevgroup/SibeliaZ/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8850406976875318,
      "result": {
        "original_header": "Conversion to XMFA",
        "type": "Text_excerpt",
        "value": "The script located at Sibeliaz-LCB/maf_to_gfa1.py lets you convert a MAF file\nto XMFA format. Requires BioPython of version >= 1.6.9. Usage: \n        python maf_to_xmfa.py < <MAF alignment file> \n"
      },
      "source": "https://raw.githubusercontent.com/medvedevgroup/SibeliaZ/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/medvedevgroup/SibeliaZ/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "alignment, bioinformatics, comparative-genomics, de-bruijn-graphs, genomics, graph-algorithms, locally-collinear-blocks, whole-genome-alignment"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "type": "Text_excerpt",
        "value": "See LICENSE.txt\n"
      },
      "source": "https://raw.githubusercontent.com/medvedevgroup/SibeliaZ/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SibeliaZ"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "medvedevgroup"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 225904,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 12564,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 8922,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 3356,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 1192,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/medvedevgroup/SibeliaZ/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "iminkin",
          "type": "User"
        },
        "date_created": "2022-09-29T04:16:45Z",
        "date_published": "2022-09-29T04:17:56Z",
        "description": "Added necessary changes to keep up with TBB",
        "html_url": "https://github.com/medvedevgroup/SibeliaZ/releases/tag/v1.2.5",
        "name": "TBB Update Release",
        "release_id": 78527026,
        "tag": "v1.2.5",
        "tarball_url": "https://api.github.com/repos/medvedevgroup/SibeliaZ/tarball/v1.2.5",
        "type": "Release",
        "url": "https://api.github.com/repos/medvedevgroup/SibeliaZ/releases/78527026",
        "value": "https://api.github.com/repos/medvedevgroup/SibeliaZ/releases/78527026",
        "zipball_url": "https://api.github.com/repos/medvedevgroup/SibeliaZ/zipball/v1.2.5"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "iminkin",
          "type": "User"
        },
        "date_created": "2021-09-17T06:16:17Z",
        "date_published": "2021-09-17T06:19:49Z",
        "description": "GFF output made compliant with the specification, fixed the issue with paths in bioconda installation",
        "html_url": "https://github.com/medvedevgroup/SibeliaZ/releases/tag/v1.2.4",
        "name": "GFF output made compliant with the specification",
        "release_id": 49725292,
        "tag": "v1.2.4",
        "tarball_url": "https://api.github.com/repos/medvedevgroup/SibeliaZ/tarball/v1.2.4",
        "type": "Release",
        "url": "https://api.github.com/repos/medvedevgroup/SibeliaZ/releases/49725292",
        "value": "https://api.github.com/repos/medvedevgroup/SibeliaZ/releases/49725292",
        "zipball_url": "https://api.github.com/repos/medvedevgroup/SibeliaZ/zipball/v1.2.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "iminkin",
          "type": "User"
        },
        "date_created": "2021-05-23T02:25:26Z",
        "date_published": "2021-05-23T02:27:24Z",
        "description": "Reduced the number of auxiliary files and removed dependency on GNU time.",
        "html_url": "https://github.com/medvedevgroup/SibeliaZ/releases/tag/v1.2.3",
        "name": "Reduced the number of auxiliary files",
        "release_id": 43420081,
        "tag": "v1.2.3",
        "tarball_url": "https://api.github.com/repos/medvedevgroup/SibeliaZ/tarball/v1.2.3",
        "type": "Release",
        "url": "https://api.github.com/repos/medvedevgroup/SibeliaZ/releases/43420081",
        "value": "https://api.github.com/repos/medvedevgroup/SibeliaZ/releases/43420081",
        "zipball_url": "https://api.github.com/repos/medvedevgroup/SibeliaZ/zipball/v1.2.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "iminkin",
          "type": "User"
        },
        "date_created": "2020-10-29T04:42:08Z",
        "date_published": "2020-10-29T04:47:33Z",
        "description": "Necessary changes to make SibeliaZ compatible with bioconda, added maf2synteny as a submodule.",
        "html_url": "https://github.com/medvedevgroup/SibeliaZ/releases/tag/v1.2.2",
        "name": "Compatibility with bioconda & maf2synteny",
        "release_id": 33198649,
        "tag": "v1.2.2",
        "tarball_url": "https://api.github.com/repos/medvedevgroup/SibeliaZ/tarball/v1.2.2",
        "type": "Release",
        "url": "https://api.github.com/repos/medvedevgroup/SibeliaZ/releases/33198649",
        "value": "https://api.github.com/repos/medvedevgroup/SibeliaZ/releases/33198649",
        "zipball_url": "https://api.github.com/repos/medvedevgroup/SibeliaZ/zipball/v1.2.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "iminkin",
          "type": "User"
        },
        "date_created": "2020-08-06T15:20:18Z",
        "date_published": "2020-08-06T15:21:48Z",
        "description": "Fixed several bugs reported by the users, see NEWS.md for more details.",
        "html_url": "https://github.com/medvedevgroup/SibeliaZ/releases/tag/v1.2.1",
        "name": "A bugfix release",
        "release_id": 29413824,
        "tag": "v1.2.1",
        "tarball_url": "https://api.github.com/repos/medvedevgroup/SibeliaZ/tarball/v1.2.1",
        "type": "Release",
        "url": "https://api.github.com/repos/medvedevgroup/SibeliaZ/releases/29413824",
        "value": "https://api.github.com/repos/medvedevgroup/SibeliaZ/releases/29413824",
        "zipball_url": "https://api.github.com/repos/medvedevgroup/SibeliaZ/zipball/v1.2.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "iminkin",
          "type": "User"
        },
        "date_created": "2019-08-30T16:04:04Z",
        "date_published": "2019-08-31T03:38:01Z",
        "description": "Results now do not depend on the number of threads and are reproducible from run to run",
        "html_url": "https://github.com/medvedevgroup/SibeliaZ/releases/tag/v1.2.0",
        "name": "Deterministic results",
        "release_id": 19669741,
        "tag": "v1.2.0",
        "tarball_url": "https://api.github.com/repos/medvedevgroup/SibeliaZ/tarball/v1.2.0",
        "type": "Release",
        "url": "https://api.github.com/repos/medvedevgroup/SibeliaZ/releases/19669741",
        "value": "https://api.github.com/repos/medvedevgroup/SibeliaZ/releases/19669741",
        "zipball_url": "https://api.github.com/repos/medvedevgroup/SibeliaZ/zipball/v1.2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "iminkin",
          "type": "User"
        },
        "date_created": "2019-04-30T18:31:38Z",
        "date_published": "2019-04-30T18:33:17Z",
        "description": "See NEWS.md",
        "html_url": "https://github.com/medvedevgroup/SibeliaZ/releases/tag/v1.1.0",
        "name": "Minor bug fixes",
        "release_id": 17074510,
        "tag": "v1.1.0",
        "tarball_url": "https://api.github.com/repos/medvedevgroup/SibeliaZ/tarball/v1.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/medvedevgroup/SibeliaZ/releases/17074510",
        "value": "https://api.github.com/repos/medvedevgroup/SibeliaZ/releases/17074510",
        "zipball_url": "https://api.github.com/repos/medvedevgroup/SibeliaZ/zipball/v1.1.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "iminkin",
          "type": "User"
        },
        "date_created": "2019-02-21T19:02:07Z",
        "date_published": "2019-02-21T21:36:49Z",
        "html_url": "https://github.com/medvedevgroup/SibeliaZ/releases/tag/v1.0.0",
        "name": "The initial release",
        "release_id": 15705174,
        "tag": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/medvedevgroup/SibeliaZ/tarball/v1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/medvedevgroup/SibeliaZ/releases/15705174",
        "value": "https://api.github.com/repos/medvedevgroup/SibeliaZ/releases/15705174",
        "zipball_url": "https://api.github.com/repos/medvedevgroup/SibeliaZ/zipball/v1.0.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 13:34:18",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 140
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "SibeliaZ usage",
        "type": "Text_excerpt",
        "value": "SibeliaZ takes a collection of FASTA file as an input. The simplest way to run\nSibeliaZ is to run the following command:\n\n\tsibeliaz <input FASTA files>\n\nFor example:\n\n\tsibeliaz genome1.fa genome2.fa \n\nThe alignment will be reported relative to the sequence ids, so all the input\nsequences should have a unique id in the fasta header. By default, the output\nwill be written in the directory \"sibeliaz_out\" in the current working\ndirectory. It will contain a GFF file \"blocks_coords.gff\" containing\ncoordinates of the found blocks, and file \"alignment.maf\" with the actual\nalignment. The subdirectory \"examples\" contains an example of running\nSibeliaZ and the output it produces. Running SibeliaZ on this example should\nrequire less than 5 minutes on a typical machine. SibeliaZ has several\nparameters that affect the accuracy and performance, they are described below.\n"
      },
      "source": "https://raw.githubusercontent.com/medvedevgroup/SibeliaZ/master/README.md",
      "technique": "header_analysis"
    }
  ]
}