{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/UMCUGenetics/svMIL"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-01-29T15:08:04Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-05-04T13:59:51Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Predicting pathogenic non-coding somatic SVs"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.8624131434797739,
      "result": {
        "original_header": "SV calls",
        "type": "Text_excerpt",
        "value": "SV calls are expected in gzipped VCF format. The CHROM, POS, ALT and INFO fields are required. The INFO field\nis used to only filter out calls with a PASS. From the ALT field, the second chromosome, position and SV\norientation are obtained.\n \n"
      },
      "source": "https://raw.githubusercontent.com/UMCUGenetics/svMIL/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8302073652587508,
      "result": {
        "original_header": "SNV calls",
        "type": "Text_excerpt",
        "value": "SNV calls are expected in gzipped VCF format. The CHROM, POS, INFO and FORMAT fields are required. The INFO field\nis used to filter out calls with a PASS. From the FORMAT field, snpEff annotated gene names are parsed\nto link SNVs to genes (which should be formatted like TF_binding_site_variant|MODIFIER|GJB3)\n \n"
      },
      "source": "https://raw.githubusercontent.com/UMCUGenetics/svMIL/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8738509154312537,
      "result": {
        "original_header": "CNV calls",
        "type": "Text_excerpt",
        "value": "CNV calls are expected in tsv format. The chromosome, start, end, gene, minCopyNumber and maxCopyNumber fields\nare required. The copy number of each gene is determined through this file. Genes with a copy number\n< 1.7 or > 2.3 are considered affected by a copy number. \n \n"
      },
      "source": "https://raw.githubusercontent.com/UMCUGenetics/svMIL/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9537986750489755,
      "result": {
        "original_header": "Expression data",
        "type": "Text_excerpt",
        "value": "svMIL2 requires a normalized expression data file with the patient IDs in the columns, and gene\nnames in the rows. For the HMF data, we used TMM normalization.\n \n"
      },
      "source": "https://raw.githubusercontent.com/UMCUGenetics/svMIL/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9792687674270164,
      "result": {
        "original_header": "Metadata",
        "type": "Text_excerpt",
        "value": "The metadata file is used to link patient IDs to cancer type. This is useful if the data folder\ncontains data of multiple cancer types, and the model should be run on only 1 type. The columns\npatientId, sampleId and primaryTumorLocation (cancer type) are required. Patient ID and sample ID\nshould be the same.\n \n"
      },
      "source": "https://raw.githubusercontent.com/UMCUGenetics/svMIL/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.962559130747344,
      "result": {
        "original_header": "Step 5: output files",
        "type": "Text_excerpt",
        "value": "linkedSVGenePairs/<br/>\n\t- nonCoding_geneSVPairs.txt (List of all SV-gene pairs and which regulatory elements/features are disrupted)<br/>\n\t- nonCoding_geneSVPairs.txt_pathogenicPairsFeatures.txt & nonCoding_geneSVPairs.txt_nonPathogenicPairsFeatures.txt (SV-gene pairs split into pathogenic and non-pathogenic based on z-score)<br/>\n\t- bags.pkl & normalizedBags.pkl (bags made by svMIL)<br/>\ntadDisruptionsZScores/<br/>\n\t- zScores.txt (For each gene in each patient, the z-score from patients with TAD disruptions to patients without TAD disruptions. Only contains pairs WITHOUT coding mutations)<br/>\nmultipleInstanceLearning/<br/>\n\t- leaveOnePatientOutCV<br/>\n\t\t- leaveOnePatientOutCV_SVType.txt (SV-gene pair, true label, predicted label)<br/>\nrocCurves/<br/>\n\t- Output ROC and PR curves from the leave-one-patient-out CV run.<br/> \n"
      },
      "source": "https://raw.githubusercontent.com/UMCUGenetics/svMIL/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/UMCUGenetics/svMIL/wiki"
      },
      "source": "https://raw.githubusercontent.com/UMCUGenetics/svMIL/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/UMCUGenetics/svMIL/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/UMCUGenetics/svMIL/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "UMCUGenetics/svMIL"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "svMIL2: predicting the pathogenic effect of somatic non-coding structural variants disrupting the 3D genome through Multiple Instance Learning"
      },
      "source": "https://raw.githubusercontent.com/UMCUGenetics/svMIL/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/UMCUGenetics/svMIL/master/src/runSwaps.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/UMCUGenetics/svMIL/master/src/preprocess.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/UMCUGenetics/svMIL/master/src/plotting.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/UMCUGenetics/svMIL/master/src/workflows/workflow_colorectal_ctcf.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/UMCUGenetics/svMIL/master/src/workflows/workflow_Kidney.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/UMCUGenetics/svMIL/master/src/workflows/workflow_NervousSystem.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/UMCUGenetics/svMIL/master/src/workflows/workflow_Lung.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/UMCUGenetics/svMIL/master/src/workflows/workflow_Breast_tmp.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/UMCUGenetics/svMIL/master/src/workflows/workflow_Colorectal.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/UMCUGenetics/svMIL/master/src/workflows/workflow_lung_ctcf.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/UMCUGenetics/svMIL/master/src/workflows/workflow_Skin.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/UMCUGenetics/svMIL/master/src/workflows/workflow_UrinaryTract.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/UMCUGenetics/svMIL/master/src/workflows/workflow_Esophagus.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/UMCUGenetics/svMIL/master/src/workflows/workflow_breast_ctcf.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/UMCUGenetics/svMIL/master/src/workflows/workflow_Ovary.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/UMCUGenetics/svMIL/master/src/workflows/workflow_Pancreas.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/UMCUGenetics/svMIL/master/src/workflows/workflow_Uterus.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/UMCUGenetics/svMIL/master/src/workflows/workflow_Breast.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/UMCUGenetics/svMIL/master/src/workflows/workflow_Prostate.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/UMCUGenetics/svMIL/master/src/methodComparison/runSVScore.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/UMCUGenetics/svMIL/master/src/methodComparison/runVep.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "To install, run:\n\n```git clone https://github.com/UMCUGenetics/svMIL.git```\n\nThis will download all code to the current folder. From here, the data/ and src/ folders can be accessed.\n"
      },
      "source": "https://raw.githubusercontent.com/UMCUGenetics/svMIL/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 1: setting up the regulatory data (features)",
        "parent_header": [
          "How to use"
        ],
        "type": "Text_excerpt",
        "value": "Used regulatory data is provided in the data folder. For more details on data sources and used tissue types, please refer to Table S1 (TBA).\n\nMost required pre-processed data is provided in the data folder. Only 2 things are needed:\n\n- eQTLs are too large to provide and need to be parsed and clustered.\n- Normalization of expression data (see expression data section below)\n"
      },
      "source": "https://raw.githubusercontent.com/UMCUGenetics/svMIL/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 3: setting paths",
        "parent_header": [
          "Metadata"
        ],
        "type": "Text_excerpt",
        "value": "All paths to data and data folders should be in a file called settings.py. The location to the folder\ncontaining this file can be specified by the user and provided as parameter (see how to do this\nin step 4 below). An example settings file can be found under src/test/settings. \n"
      },
      "source": "https://raw.githubusercontent.com/UMCUGenetics/svMIL/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 1: setting up the data",
        "parent_header": [
          "How to use: recreating paper figures"
        ],
        "type": "Text_excerpt",
        "value": "All used data in the paper (SVs, SNVs, CNVs and RNA-seq data) needs to be requested from the HMF: https://www.hartwigmedicalfoundation.nl/en/appyling-for-data/.\n"
      },
      "source": "https://raw.githubusercontent.com/UMCUGenetics/svMIL/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/UMCUGenetics/svMIL/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2020 UMCU Genetics\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/UMCUGenetics/svMIL/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "svMIL"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "UMCUGenetics"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 509698,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 66159,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 5724,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/UMCUGenetics/svMIL/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "mnieboer",
          "type": "User"
        },
        "date_created": "2021-01-27T10:32:00Z",
        "date_published": "2021-01-27T10:33:25Z",
        "html_url": "https://github.com/UMCUGenetics/svMIL/releases/tag/v2.0",
        "name": "svMIL v2.0",
        "release_id": 36961636,
        "tag": "v2.0",
        "tarball_url": "https://api.github.com/repos/UMCUGenetics/svMIL/tarball/v2.0",
        "type": "Release",
        "url": "https://api.github.com/repos/UMCUGenetics/svMIL/releases/36961636",
        "value": "https://api.github.com/repos/UMCUGenetics/svMIL/releases/36961636",
        "zipball_url": "https://api.github.com/repos/UMCUGenetics/svMIL/zipball/v2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "mnieboer",
          "type": "User"
        },
        "date_created": "2020-07-21T13:41:12Z",
        "date_published": "2021-01-20T10:28:15Z",
        "description": "svMIL: predicting the pathogenic effect of TAD boundary-disrupting somatic structural variants through multiple instance learning : https://doi.org/10.1093/bioinformatics/btaa802",
        "html_url": "https://github.com/UMCUGenetics/svMIL/releases/tag/v1.0",
        "name": "svMIL v1.0",
        "release_id": 36647595,
        "tag": "v1.0",
        "tarball_url": "https://api.github.com/repos/UMCUGenetics/svMIL/tarball/v1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/UMCUGenetics/svMIL/releases/36647595",
        "value": "https://api.github.com/repos/UMCUGenetics/svMIL/releases/36647595",
        "zipball_url": "https://api.github.com/repos/UMCUGenetics/svMIL/zipball/v1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirements",
        "type": "Text_excerpt",
        "value": "All code was tested using:\n- Python 3.7.3\n- Numpy 1.16.4\n- Scipy 1.3.0\n- Scikit-learn 0.22.2.postl\n- Matplotlib 3.2.1\n- Statsmodels 0.10.0\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/UMCUGenetics/svMIL/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 4: running svMIL2",
        "parent_header": [
          "Metadata"
        ],
        "type": "Text_excerpt",
        "value": "All commands required to run the model are provided in src/test/test.sh. This script should be\nrun from the main src folder and provide the path to the settings file folder and the output folder, e.g.:\n\nsh test/test.sh test/settings test/output\n\nPlease refer to test.sh for more details. This script provides options for running in the\nleave-one-patient-out CV setting, and also for training on one dataset and applying to another.\nWith this script, a prioritized list of SV-gene pairs can be generated.\n"
      },
      "source": "https://raw.githubusercontent.com/UMCUGenetics/svMIL/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 09:12:33",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "svMIL2: predicting the pathogenic effect of somatic non-coding structural variants disrupting the 3D genome through Multiple Instance Learning",
        "type": "Text_excerpt",
        "value": "svMIL2 is the improved version of svMIL, tested across multiple cancer types.\n\nFor details on the previous version of svMIL, refer to: https://doi.org/10.1093/bioinformatics/btaa802\n"
      },
      "source": "https://raw.githubusercontent.com/UMCUGenetics/svMIL/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "How to use",
        "type": "Text_excerpt",
        "value": "An example test dataset is provided in the src/test folder.\n\nsvMIL requires the following data for each cancer patient: SVs, SNVs, CNVs and expression data. Patients\nwithout CNVs, SNVs or expression data will be skipped automatically. These data are expected in the\nfollowing folder structure to make it compatible with the HMF data used in the paper:\n\nsomatics/ (here CNVs, SNVs and SV data should be stored) <br/>\n\t- somatics_patient1 (make sure that there is an underscore before the patient ID) <br/>\n\t\t- patient1.sv.ann.vcf.gz (SV data in VCF format, this exact name is required) <br/>\n\t\t- patient1.somatic.vcf.gz (SNV calls in VCF format, this exact name is required) <br/>\n\t\t- patient1.cnv.gene.tsv (CNV calls in tsv format, listing the copy numbers of each gene, this exact name is required) <br/>\n\t- somatics_patient2 <br/>\n\t\t- ... <br/>\nexpression/ (here, expression data (read counts) per patient should be stored) <br/>\n\t- patient1 (make sure that the patient IDs match the patient IDs in the somatics folder, the folder names are used to check if expression data exists for each patient)<br/>\n\t\t- read counts file (not used by the model directly, see expression data section below)<br/>\n\t- patient2<br/>\n\n"
      },
      "source": "https://raw.githubusercontent.com/UMCUGenetics/svMIL/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 2: formatting input data",
        "parent_header": [
          "How to use"
        ],
        "type": "Text_excerpt",
        "value": "Examples of the required files are in the src/test folder.\n"
      },
      "source": "https://raw.githubusercontent.com/UMCUGenetics/svMIL/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 2: preprocessing of the data",
        "parent_header": [
          "How to use: recreating paper figures"
        ],
        "type": "Text_excerpt",
        "value": "The TMM normalization step of the RNA-seq data from the HMF dataset is required. Other data needs\nto be pre-processed as detailed in step 1 above.\n"
      },
      "source": "https://raw.githubusercontent.com/UMCUGenetics/svMIL/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 3: generating all paper figures",
        "parent_header": [
          "How to use: recreating paper figures"
        ],
        "type": "Text_excerpt",
        "value": "plotting.sh lists all steps and instructions to generate the figures.\n\n"
      },
      "source": "https://raw.githubusercontent.com/UMCUGenetics/svMIL/master/README.md",
      "technique": "header_analysis"
    }
  ]
}