{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Crespo-Otero-group/fromage"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributors": [
    {
      "confidence": 1,
      "result": {
        "original_header": "6 Contributors",
        "type": "Text_excerpt",
        "value": "The core algorithms in fromage were developed by Miguel Rivera when he was a PhD student in the Crespo-Otero group. Michael Dommett (exciton analysis) and Amir Sidat (geometry analysis) have contributed to initial versions of fromage. Currently, Federico Hernandez, Amir Sidat, and Michael Ingham are actively contributing to the code. Some new features not yet included in this version include nonadiabatic dynamic simulations, optimisation of different regions, treatment of fully connected molecular crystals (such as MOFs and COFs), and different methods to address overpolarisation. If you are interested in these new features or would like to contribute to fromage, please contact Rachel Crespo-Otero at r.crespo-otero@ucl.ac.uk.   \n\n--------------------------------------------------------------------------------\n\nMore detailed instructions can be found in the [documentation](https://fromage.readthedocs.io/).\nFor any questions about usage, citing or contributing, please email our group at r.crespo-otero@ucl.ac.uk\n\n-The Crespo-Otero group \n"
      },
      "source": "https://raw.githubusercontent.com/Crespo-Otero-group/fromage/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-11-16T17:38:12Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-07-06T08:10:10Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": " Framework for Molecular Aggregate Excitation "
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9891392591983833,
      "result": {
        "original_header": "4 Additional utilities",
        "type": "Text_excerpt",
        "value": "A couple of useful utilities are included here for manipulation of molecular crystal clusters. They may come in handy when making sure that your calculation is doing what you want.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Crespo-Otero-group/fromage/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9691428835336682,
      "result": {
        "original_header": "4.1 fro_pick_mol.py",
        "type": "Text_excerpt",
        "value": "This program selects molecules out of a cluster of molecules and writes them to another file. This is particulary useful when you are dealing with a large molecular cluster and want to extract something like a dimer. \nIn this case we have selected a trimer of the molecules containing the atoms labeled 1, 56 and 22 in the input .xyz file. This program will get angry if you feed it more than one atom label of one same molecule. For additional options use `fro_pick_mol.py --help`\n \n"
      },
      "source": "https://raw.githubusercontent.com/Crespo-Otero-group/fromage/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9663703791838836,
      "result": {
        "original_header": "4.2 fro_assign_charges.py",
        "type": "Text_excerpt",
        "value": "This is more of a debugging tool for checking to see that you are using a sensible bond length in your definition of your molecules. It reads charges and positions from a Gaussian output file for one molecule and assigns those charges to a cluster of atoms made up of those same molecules in a .`xyz`-like file. \nIt could come in handy as a standalone utility if you want to assign charges in a forcefiled calculation. \n"
      },
      "source": "https://raw.githubusercontent.com/Crespo-Otero-group/fromage/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.946664122744682,
      "result": {
        "original_header": "4.3 fro_uc_tools.py",
        "type": "Text_excerpt",
        "value": "This utility does operations on xyz files paired up with unit cell vector files. The vector file is of the form:\n```\n8.9638004303         0.0000000000         0.0000000000\n0.0000000000        10.5200004578         0.0000000000\n-3.8748910079         0.0000000000        10.7924653741\n```\nOptions include extracting the nonequivalent monomers from the cell, generating a tessalating cell but with all complete molecules (therefore spilling out of the bounding box of the unit cell vectors), confining a cell to the bounding box and creating supercells.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Crespo-Otero-group/fromage/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9828817508721149,
      "result": {
        "original_header": "5 Some parting words",
        "type": "Text_excerpt",
        "value": "If you find yourself with a bunch of error files during your optimisation, ask yourself where some calculations might have failed in the geometry optimisation. Maybe some SCF did not converge or your central molecule escaped the cluster to be with its one true love: infinitely attractive point charges. To combat this, try adding more molecules to your cluster. \nIf you are happily preparing a calculation, see no error, run `fro_run.py` with sensible geometries and find that your quantum chemistry program is very upset about something, it might be that the point charges you are feeding it are unreasonable. Indeed when you start fiddling with large numbers of constrained point charges in Ewald, the system of linear equations which fits them becomes highly linearly dependent and you end up with point charges with values in the thousands. If this happens to you just try a smaller number of constrained point charges while still containing your central molecule. \nHacking this program for your own personal needs is a perfectly good idea and you may be able to get a lot from just importing the I/O modules and the `Atom` and `Mol` classes. \nIf all you want to do is integrate your favourite quantum chemistry package into fromage, all you need to do is a) add new io routines in `read_file` and `edit_file` b) make a new `Calc` object modeled after one of the existing ones in the `calc` module c) Add the class and corresponding keyword to the `calc_types` at the top of the `calc` module \nThe Ewald program is often the source of all of your problems when tinkering with the embedding methods, even as a regular user pushing the program to its limits. It uses a deprecated lapack function and needs to be modified very specifically to be used with `fro_prep_run.py`. \n"
      },
      "source": "https://raw.githubusercontent.com/Crespo-Otero-group/fromage/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9295928737536981,
      "result": {
        "type": "Text_excerpt",
        "value": "**fromage** (FRamewOrk for Molecular AGgregate Excitations) is a Python framework designed to facilitate the study of molecular aggregates in the excited state. It contains utilities for geometry manipulation going from periodic to finite models, exciton analysis and ONIOM calculations. The current version is 1.0 \n**fromage** is developed by the . We acknowledge the EPRSC for funding this project  and Leverhulme Trust . \nTo cite the use of the program, please use: \nAnd if you are using one of the ONIOM implementations: \n"
      },
      "source": "https://raw.githubusercontent.com/Crespo-Otero-group/fromage/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://fromage.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/Crespo-Otero-group/fromage/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Crespo-Otero-group/fromage/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 8
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Crespo-Otero-group/fromage/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Crespo-Otero-group/fromage"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/Crespo-Otero-group/fromage/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "1.1 Easy installation using pip",
        "parent_header": [
          "1 Installation"
        ],
        "type": "Text_excerpt",
        "value": "1. Make sure that you have the following installed:\n\n  - Python 2.7 and above (Python 3 recommended)\n  - swig\n  - [Modified version of Ewald](https://github.com/Crespo-Otero-group/Ewald) (only necessary for Ewald embedding calculations)\n\n2. Clone this repository to wherever you want to install it:\n\n  ```bash\n   cd /path/to/dir/\n   git clone https://github.com/Crespo-Otero-group/fromage.git\n   cd fromage/\n  ```\n\n3. Install\n\n  ```bash\n  sudo pip install .\n  ```\n  N.B. this will install `numpy`, `scipy` and `pytest`  on your system.\n\n4. Set environment variables. In your `.bashrc`, write\n  ```bash\n  export FRO_GAUSS=g16\n  export FRO_EWALD=Ewald\n  ```\n  If you are using different binaries for Gaussian or Ewald, change accordingly.\n  \n  Voil\u00e0!\n  "
      },
      "source": "https://raw.githubusercontent.com/Crespo-Otero-group/fromage/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1.2 Common pitfall",
        "parent_header": [
          "1 Installation"
        ],
        "type": "Text_excerpt",
        "value": "When installing, you might find the error:\n```\nPython.h: No such file or directory\n```\nIn order to install Python packages which contain C or C++ on Linux, you need `python-dev` or `python3-dev` which provides the header `Python.h`.\n"
      },
      "source": "https://raw.githubusercontent.com/Crespo-Otero-group/fromage/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2 Preparing the calculation",
        "type": "Text_excerpt",
        "value": "`fro_prep_run.py` requires:\n\n- A `.xyz` file of a unit cell\n- A `config`\n- A file containing the high level embedding charges\n- A file containting the low level embedding charges\n- A set of `*.template` files for `mh`, `ml` and `rl` (`mg` too for MECI search)\n\nAnd optionally:\n\n- A `.xyz` target shell file\n- A self consistent calculation template file\n"
      },
      "source": "https://raw.githubusercontent.com/Crespo-Otero-group/fromage/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2.1 Unit cell file",
        "parent_header": [
          "2 Preparing the calculation"
        ],
        "type": "Text_excerpt",
        "value": "This is the kind of file which is typically produced from a periodic DFT calculation. Avoid double counted atoms outside the unit cell which might be snuck in by visualization programs such as VESTA. For this kind of problem, the `fro_uc_tools.py` utility can come in useful. Just make a file containing the unit cell vectors and run `fro_uc_tools.py cell.xyz vectors -d`. If you deem that geometry optimisation of your cell is unnecessary (publish this result because I am interested) you will need to convert a `.cif` file into a unit cell `.xyz` file. For this I recommend [Open Babel](http://openbabel.org/wiki/Main_Page) which would use the syntax:\n\n```bash\n    babel -i -cif cell.cif -o -xyz cell.xyz --filluc\n```\n\nThe `--filluc` keyword is crucial otherwise you will end up with an asymmetric unit of the cell.\n"
      },
      "source": "https://raw.githubusercontent.com/Crespo-Otero-group/fromage/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2.2 Configuration file",
        "parent_header": [
          "2 Preparing the calculation"
        ],
        "type": "Text_excerpt",
        "value": "The `config` file is a list of keywords followed by their values which the user should input. A set of reasonable default values is coded in `parse_config_file` for every keyword except for the lattice vectors which can not be assumed.\n\nIf you use the `target_shell` keyword you will need to supply the program with an additional target shell `.xyz` file to specify the shell that you want in your real system.\n"
      },
      "source": "https://raw.githubusercontent.com/Crespo-Otero-group/fromage/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2.3 Population analysis files",
        "parent_header": [
          "2 Preparing the calculation"
        ],
        "type": "Text_excerpt",
        "value": "These files contain the starting (and in some cases also ending) values for the charges that you intend to use in your embedding. The high level charges will eventually be used in the embedding of the `mh` calculation and can be fitted to the Ewald potentially directly or self consitently. They need to be extracted from a Gaussian output file or in the special case of direct Ewald embedding a CP2K >= 4.1 file will do as well. For the low level embedding, only Gaussian is available.\n\nIt is crucial that you match the population analysis from the low level charges to the low level of theory in order to properly cancel out the electrostatic intreactions from `rl`. The choice of high level charges is more subtle but consistency would have you use the same level of theory as in `mh`.\n"
      },
      "source": "https://raw.githubusercontent.com/Crespo-Otero-group/fromage/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2.4 Primitive template files",
        "parent_header": [
          "2 Preparing the calculation"
        ],
        "type": "Text_excerpt",
        "value": "These files are named `mh.template`, `ml.template`, `rl.template` and optionally `mg.template`. They serve as model template files with a blank name for the checkpoint file, blank calculation name, blank atomic positions and blank point charges. Prepare calculations populates all of these fields except for the atomic positions which will later be repeatedly updated by the optimisation procedure. It is important to include the following keywords:\n\n- `charge` : allows for the use of point charge embedding (not actually used in `rl`)\n- `symmetry=none` : conserves the input geometry throughout the calculation, making the position of the charges correct\n- `force` : to calculate the energy gradients necessary for the optimisation\n"
      },
      "source": "https://raw.githubusercontent.com/Crespo-Otero-group/fromage/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2.5 Target shell file",
        "parent_header": [
          "2 Preparing the calculation"
        ],
        "type": "Text_excerpt",
        "value": "In certain cases, the cluster of molecules generated radially will be impractical due to the packing of the crystal. For example it may need to include a large number of distant molecules to also include a certain nearest neighbour molecule. In those cases a shell file can be manually edited in the user's favourite chemistry visualisation software to remove extra molecules. In that case a target shell file can be supplied which will be used to generate `rl` and `ml`. Be extra careful that the central molecule has the correct orientation with respect to your generated cluster. It is recommended to use the shell file from a large radius calculation and manually strip it down to only the nearest neighbour molecules.\n"
      },
      "source": "https://raw.githubusercontent.com/Crespo-Otero-group/fromage/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2.6 Self consistent template file",
        "parent_header": [
          "2 Preparing the calculation"
        ],
        "type": "Text_excerpt",
        "value": "This is the Gaussian template file used if the Ewald charge background is computed self consistently. It has the same form as the primitive template files. The level of theory here can be chosen to be in excited state for a fully excited crystal. If this is your intention, don't forget to use `density=current` to make sure that your population analysis is in the excited state and not the ground state. Of course ground state self-constistent calculations are also possible.\n"
      },
      "source": "https://raw.githubusercontent.com/Crespo-Otero-group/fromage/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2.7 Outputs of the preparation",
        "parent_header": [
          "2 Preparing the calculation"
        ],
        "type": "Text_excerpt",
        "value": "Once you have finished running `fro_prep_run.py`, you will end up with a few files:\n\n- `prep.out` which gives you information about how your preparation went. If the last line gives you an ending time, that is good news\n- `mol.init.xyz` will be the initial position of your molecule for the optimisation\n- `shell.xyz` is the cluster of molecules without the central one\n- `mh`, `ml`, `rl` and `mg` directories containing `.temp` files corresponding to all of the parallel calculations\n- `ewald` directory where the ewald calculation is run\n"
      },
      "source": "https://raw.githubusercontent.com/Crespo-Otero-group/fromage/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9352012999915047,
      "result": {
        "original_header": "4.2 fro_assign_charges.py",
        "type": "Text_excerpt",
        "value": "The syntax is:\n```bash\n  fro_assign_charges.py population_analysis.log cluster_of_molecules.xyz\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/Crespo-Otero-group/fromage/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8059580270452147,
      "result": {
        "original_header": "4.2 fro_assign_charges.py",
        "type": "Text_excerpt",
        "value": "The syntax is:\n```bash\n  fro_assign_charges.py population_analysis.log cluster_of_molecules.xyz\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/Crespo-Otero-group/fromage/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Crespo-Otero-group/fromage/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2016-2019 Miguel Rivera, Michael Dommett, Rachel Crespo-Otero\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/Crespo-Otero-group/fromage/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Crespo-Otero-group/fromage/master/doc/logo.png"
      },
      "source": "https://raw.githubusercontent.com/Crespo-Otero-group/fromage/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "fromage"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "Crespo-Otero-group"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 277412,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 642,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "SWIG",
        "size": 246,
        "type": "Programming_language",
        "value": "SWIG"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Crespo-Otero-group/fromage/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "m-rivera",
          "type": "User"
        },
        "date_created": "2020-02-26T12:01:40Z",
        "date_published": "2020-02-26T12:04:40Z",
        "description": "This release is mainly composed of clarifications and corrections in the documentation, and one bug fix.\r\n\r\nPreviously, when creating a cluster based on a supercell, this cluster would not retain the bonding information of the original unit cell. This caused errors such as fro_uc_tools.py generating clusters with wrongly detected molecules, and the user not being able to change the bonding info to fix this. Now, the bonding information persists as intended.",
        "html_url": "https://github.com/Crespo-Otero-group/fromage/releases/tag/v1.1.0",
        "name": "v1.1.0",
        "release_id": 23998139,
        "tag": "v1.1.0",
        "tarball_url": "https://api.github.com/repos/Crespo-Otero-group/fromage/tarball/v1.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/Crespo-Otero-group/fromage/releases/23998139",
        "value": "https://api.github.com/repos/Crespo-Otero-group/fromage/releases/23998139",
        "zipball_url": "https://api.github.com/repos/Crespo-Otero-group/fromage/zipball/v1.1.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "Crespo-Otero-group",
          "type": "User"
        },
        "date_created": "2020-01-07T15:41:10Z",
        "date_published": "2020-01-07T15:47:48Z",
        "description": "This release accompanies the publication of the principal paper describing fromage:\r\n\r\nRivera, M., Dommett, M., Sidat, A., Rahim, W., Crespo\u2010Otero, R. fromage: A library for the study of molecular crystal excited states at the aggregate scale. J Comput Chem 2020; 1\u2013 14. https://doi.org/10.1002/jcc.26144",
        "html_url": "https://github.com/Crespo-Otero-group/fromage/releases/tag/v1.0.0",
        "name": "v1.0.0",
        "release_id": 22651393,
        "tag": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/Crespo-Otero-group/fromage/tarball/v1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/Crespo-Otero-group/fromage/releases/22651393",
        "value": "https://api.github.com/repos/Crespo-Otero-group/fromage/releases/22651393",
        "zipball_url": "https://api.github.com/repos/Crespo-Otero-group/fromage/zipball/v1.0.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "m-rivera",
          "type": "User"
        },
        "date_created": "2019-08-29T09:30:12Z",
        "date_published": "2019-09-09T16:25:51Z",
        "description": "This is the first release of `fromage`, as such the version name convention may still change. It compiles and runs, but the associated publication has not been reviewed yet.",
        "html_url": "https://github.com/Crespo-Otero-group/fromage/releases/tag/v1.0-beta",
        "release_id": 19856862,
        "tag": "v1.0-beta",
        "tarball_url": "https://api.github.com/repos/Crespo-Otero-group/fromage/tarball/v1.0-beta",
        "type": "Release",
        "url": "https://api.github.com/repos/Crespo-Otero-group/fromage/releases/19856862",
        "value": "https://api.github.com/repos/Crespo-Otero-group/fromage/releases/19856862",
        "zipball_url": "https://api.github.com/repos/Crespo-Otero-group/fromage/zipball/v1.0-beta"
      },
      "technique": "GitHub_API"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "3.1 Last few steps before running",
        "parent_header": [
          "3 Running the calculation"
        ],
        "type": "Text_excerpt",
        "value": "To run fromage, all you need is:\n\n- A `fromage.in` file\n- `mol.init.xyz`\n- `shell.xyz`\n- `mh`, `ml` and `rl` directories containing `.temp` files (`mg` is only needed for MECI serach)\n\nThe `fromage.in` file has a similar structure to the `config` file but is much simpler and is not even necessary for geometry optimisation in Gaussian. If you want to change a program used in a specific level of theory from Gaussian ot something else, simply add `high_level [program]` or `low_level [program]`. For MECI search, add `bool_ci 1`\n\nFor Turbomole RI-CC2, run a define and then write in all of the point charges from `mh.temp` under the block `$point_charges` after scaling.\n\n**IMPORTANT**: Turbomole uses Bohr units in its control file and as such the x, y and z columns should be scaled accordingly\n\nFor Molcas RASCF, prepare an input file in the directory called `molcas.input` with geom.xyz as the coordinate. To add point charges, use in `&GATEWAY`:\n\n```\n  xfield\n[number of charges] Angstrom\n -9.237176  -2.137048   3.557237   0.432218\n-10.014996  -1.455739   0.568597  -0.168284\n-10.112382  -2.173251   1.384633   0.146427\n                .\n                .\n                .\n```\n\nYou should be all set now. Run `fro_run.py` to begin the calculation.\n"
      },
      "source": "https://raw.githubusercontent.com/Crespo-Otero-group/fromage/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3.2 Outputs",
        "parent_header": [
          "3 Running the calculation"
        ],
        "type": "Text_excerpt",
        "value": "The program only has three main outputs:\n\n- `fromage.out` which gives updates on all of the individual energies being calculated, the total gradient norm and the energy gap\n- `geom_mol.xyz` which keeps a record of the optimising geometry\n- `geom_cluster.xyz` which combines `geom_mol.xyz` and `shell.xyz` for a better view of intermolecular interactions\n\nIf the minimisation ran smoothly, the last line of `fromage.out` should be the ending time.\n"
      },
      "source": "https://raw.githubusercontent.com/Crespo-Otero-group/fromage/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 18:27:13",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 21
      },
      "technique": "GitHub_API"
    }
  ]
}