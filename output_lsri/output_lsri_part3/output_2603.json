{
  "application_domain": [
    {
      "confidence": 24.39,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "5. Citation",
        "parent_header": [
          "RatLesNetv2"
        ],
        "type": "Text_excerpt",
        "value": "@article{10.3389/fnins.2020.610239,\nauthor={Valverde, Juan Miguel and Shatillo, Artem and De Feo, Riccardo and Gr\u00f6hn, Olli and Sierra, Alejandra and Tohka, Jussi},\ntitle={RatLesNetv2: A Fully Convolutional Network for Rodent Brain Lesion Segmentation},\njournal={Frontiers in Neuroscience},\nvolume={14},\npages={1333},\nyear={2020},\nURL={https://www.frontiersin.org/article/10.3389/fnins.2020.610239},\nDOI={10.3389/fnins.2020.610239},\nISSN={1662-453X},   \n}\n```\n"
      },
      "source": "https://raw.githubusercontent.com/jmlipman/RatLesNetv2/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Valverde, Juan Miguel and Shatillo, Artem and De Feo, Riccardo and Gr\u00f6hn, Olli and Sierra, Alejandra and Tohka, Jussi",
        "doi": "10.3389/fnins.2020.610239",
        "format": "bibtex",
        "title": "RatLesNetv2: A Fully Convolutional Network for Rodent Brain Lesion Segmentation",
        "type": "Text_excerpt",
        "url": "https://www.frontiersin.org/article/10.3389/fnins.2020.610239",
        "value": "@article{10.3389/fnins.2020.610239,\n    issn = {1662-453X},\n    doi = {10.3389/fnins.2020.610239},\n    url = {https://www.frontiersin.org/article/10.3389/fnins.2020.610239},\n    year = {2020},\n    pages = {1333},\n    volume = {14},\n    journal = {Frontiers in Neuroscience},\n    title = {RatLesNetv2: A Fully Convolutional Network for Rodent Brain Lesion Segmentation},\n    author = {Valverde, Juan Miguel and Shatillo, Artem and De Feo, Riccardo and Gr\u00f6hn, Olli and Sierra, Alejandra and Tohka, Jussi},\n}"
      },
      "source": "https://raw.githubusercontent.com/jmlipman/RatLesNetv2/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/jmlipman/RatLesNetv2"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-12-03T09:04:36Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-01-04T16:40:11Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "RatLesNetv2 is convolutional neural network for rodent brain lesion segmentation."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1. Introduction",
        "parent_header": [
          "RatLesNetv2"
        ],
        "type": "Text_excerpt",
        "value": "This implementation of RatLesNetv2 allows combining several models trained separately. This script will generate a prediction per model and a prediction combined with majority voting. Post-processing, i.e. removing small independently connected components (holes and islands) is also available.\n"
      },
      "source": "https://raw.githubusercontent.com/jmlipman/RatLesNetv2/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1.1 Files",
        "parent_header": [
          "RatLesNetv2",
          "1. Introduction"
        ],
        "type": "Text_excerpt",
        "value": "```cshell\n.\n \u251c\u2500eval.py # Generate and quantify predictions. It requires a file with the trained parameters of RatLesNetv2\n \u251c\u2500train.py # Trains a RatLesNetv2 model. It generates the file required by eval.py\n \u2514\u2500lib \n   \u251c\u2500DataWrapper.py # Reads and parses the NIfTI file\n   \u251c\u2500RatLesNetv2.py # RatLesNetv2 model implemented in Pytorch\n   \u251c\u2500RatLesNetv2Blocks.py # Blocks of RatLesNetv2 (Bottleneck and ResNet)\n   \u251c\u2500losses.py # Cross Entropy + Dice Loss functions\n   \u251c\u2500metric.py # Metrics to quantify segmentations quality i.e. Dice coeff., Hausdorff distance, Islands\n   \u2514\u2500utils.py # Other functions.\n```\n"
      },
      "source": "https://raw.githubusercontent.com/jmlipman/RatLesNetv2/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9471590358331835,
      "result": {
        "original_header": "RatLesNetv2",
        "type": "Text_excerpt",
        "value": "Repository of the paper [RatLesNetv2: A Fully Convolutional Network for Rodent Brain Lesion Segmentation](https://www.frontiersin.org/articles/10.3389/fnins.2020.610239/full). \n"
      },
      "source": "https://raw.githubusercontent.com/jmlipman/RatLesNetv2/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8711478139562405,
      "result": {
        "original_header": "3.1 Training",
        "type": "Text_excerpt",
        "value": "* --input: Path containing all the subfolders of the data used for training/optimizing the network. Check [2.3. Image format](#23-image-format) to see the expected path structure.\n* --output: Path or name of the folder where the output files will be saved (trainin_loss, validation_loss, RatLesNetv2.model).\n* --validation: Path containing all the subfolders of the data used for calculating the validation error. Check [2.3. Image format](#23-image-format) to see the expected path structure.\n* --loadMemory: If 1, it will load into memory (RAM) the training and validation files. This will speed up the training since the script will not constantly open and close the same files. However, if too much data is used it may not fit into the RAM. In our case, 24 MRI scans use around 2GB of memory.\n* --gpu: This will choose the GPU. Leaving this by default will make RatLesNetv2 use the default GPU (if any). It is **highly recommended** to use a GPU to train RatLesNetv2. \nFiles generated by train.py:\n* training_loss: it contains the loss calculated during the training.\n* validation_loss: it contains the loss calculated during the validation. This file is generated if --validation option is used.\n* RatLesNetv2.model: parameters of RatLesNetv2 after the optimization/training. **This file is necessary to generate the predictions by the eval.py script**.\n \n"
      },
      "source": "https://raw.githubusercontent.com/jmlipman/RatLesNetv2/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9164399330069625,
      "result": {
        "original_header": "3.2 Evaluation",
        "type": "Text_excerpt",
        "value": "```cshell\npython eval.py --input DIR --output DIR --model FILE [--gpu X]\n# Example (evaluating with 1 model)\npython eval.py --input ~/data/in/MRI_Testing_Data --output ~/data/out/Segmentation_Results --model ~/data/out/Trained_Models/1/RatLesNetv2.model [--gpu X]\n# Example (evaluating with multiple models)\npython eval.py --input ~/data/in/MRI_Testing_Data --output ~/data/out/Segmentation_Results --model ~/data/out/Trained_Models/*/RatLesNetv2.model [--gpu X]\n``` \nPost-processing is a final step that removes small \"holes\" and \"islands\" in the segmentations generated by the model (see Figure below). You can choose the threshold which determines that a hole/island is too small and it will be removed. By default this value is 20. In other words, clusters of voxels smaller than 20 will be removed.\n```cshell\n# eval.py\nremoveSmallIslands_thr = 20\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/jmlipman/RatLesNetv2/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/jmlipman/RatLesNetv2/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/jmlipman/RatLesNetv2/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "jmlipman/RatLesNetv2"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "RatLesNetv2"
      },
      "source": "https://raw.githubusercontent.com/jmlipman/RatLesNetv2/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jmlipman/RatLesNetv2/master/architecture.png"
      },
      "source": "https://raw.githubusercontent.com/jmlipman/RatLesNetv2/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jmlipman/RatLesNetv2/master/holes_and_islands.png"
      },
      "source": "https://raw.githubusercontent.com/jmlipman/RatLesNetv2/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "2.2 Installation",
        "parent_header": [
          "RatLesNetv2",
          "2. Installation and Requirements"
        ],
        "type": "Text_excerpt",
        "value": "0. Install all libraries from 2.1 Requirements\n\n1. Install dependencies with pip\n```cshell\npip install scipy, scikit-image, nibabel\n```\n\n2. Download source code\n```cshell\ngit clone git@github.com:jmlipman/RatLesNetv2.git\n```\n"
      },
      "source": "https://raw.githubusercontent.com/jmlipman/RatLesNetv2/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2.3 Image format",
        "parent_header": [
          "RatLesNetv2",
          "2. Installation and Requirements"
        ],
        "type": "Text_excerpt",
        "value": " * Images and their corresponding labels must be in the same folder (check below the expected path structure)\n * Images must have the following 4 dimensions: Height x Width x Depth x Modality (our images were 256x256x18x1). \n * Labels will have values of 0 (background voxels) and 1 (lesion voxels) in 3 dimensions: Height x Width x Depth.\n\nExample of path containing training data:\n```cshell\nPATH\n \u2514\u2500Study 1\n   \u2514\u250024h (time-point)\n     \u251c\u250032 (id of the scan)\n     \u2502 \u251c\u2500scan.nii.gz (image)\n     \u2502 \u2514\u2500scan_lesion.nii.gz (label)\n     \u2514\u250035\n       \u251c\u2500scan.nii.gz\n       \u2514\u2500scan_lesion.nii.gz\n       ...\n```\n"
      },
      "source": "https://raw.githubusercontent.com/jmlipman/RatLesNetv2/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2.4 Setup",
        "parent_header": [
          "RatLesNetv2",
          "2. Installation and Requirements"
        ],
        "type": "Text_excerpt",
        "value": " * The name of the scans and the ground truth are expected to be **the same** across each acquisiton. In the path example described in [2.3. Image format](#23-image-format) the names are \"scan.nii.gz\" and \"scan_lesion.nii.gz\". You can change this name in lib/DataWrapper.py `self.scanName` (images) and `self.labelName` (labels).\n"
      },
      "source": "https://raw.githubusercontent.com/jmlipman/RatLesNetv2/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "invocation": [
    {
      "confidence": 0.9484154336314031,
      "result": {
        "original_header": "3.1 Training",
        "type": "Text_excerpt",
        "value": "```cshell\npython train.py --input DIR --output DIR [--validation DIR --loadMemory -1 --gpu X]\n# Example\npython train.py --input ~/data/in/MRI_Training_Data --output ~/data/out/Trained_Models --validation ~/data/in/MRI_Validation_Data --loadMemory 1\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/jmlipman/RatLesNetv2/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9494216554936963,
      "result": {
        "original_header": "3.2 Evaluation",
        "type": "Text_excerpt",
        "value": "```cshell\npython eval.py --input DIR --output DIR --model FILE [--gpu X]\n# Example (evaluating with 1 model)\npython eval.py --input ~/data/in/MRI_Testing_Data --output ~/data/out/Segmentation_Results --model ~/data/out/Trained_Models/1/RatLesNetv2.model [--gpu X]\n# Example (evaluating with multiple models)\npython eval.py --input ~/data/in/MRI_Testing_Data --output ~/data/out/Segmentation_Results --model ~/data/out/Trained_Models/*/RatLesNetv2.model [--gpu X]\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/jmlipman/RatLesNetv2/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/jmlipman/RatLesNetv2/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2020 Juan Miguel Valverde\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/jmlipman/RatLesNetv2/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "RatLesNetv2"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "jmlipman"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 24444,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jmlipman/RatLesNetv2/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "2.1 Requirements",
        "parent_header": [
          "RatLesNetv2",
          "2. Installation and Requirements"
        ],
        "type": "Text_excerpt",
        "value": " * [PyTorch](https://pytorch.org/get-started/locally/) (preferably with GPU support). Deep Learning framework.\n * [pip](https://pypi.org/project/pip/). Python package installer.\n * [Virtual Enviroment](https://packaging.python.org/guides/installing-using-pip-and-virtual-environments/) (optional)\n"
      },
      "source": "https://raw.githubusercontent.com/jmlipman/RatLesNetv2/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2.3 Image format",
        "parent_header": [
          "RatLesNetv2",
          "2. Installation and Requirements"
        ],
        "type": "Text_excerpt",
        "value": " * Images and their corresponding labels must be in the same folder (check below the expected path structure)\n * Images must have the following 4 dimensions: Height x Width x Depth x Modality (our images were 256x256x18x1). \n * Labels will have values of 0 (background voxels) and 1 (lesion voxels) in 3 dimensions: Height x Width x Depth.\n\nExample of path containing training data:\n```cshell\nPATH\n \u2514\u2500Study 1\n   \u2514\u250024h (time-point)\n     \u251c\u250032 (id of the scan)\n     \u2502 \u251c\u2500scan.nii.gz (image)\n     \u2502 \u2514\u2500scan_lesion.nii.gz (label)\n     \u2514\u250035\n       \u251c\u2500scan.nii.gz\n       \u2514\u2500scan_lesion.nii.gz\n       ...\n```\n"
      },
      "source": "https://raw.githubusercontent.com/jmlipman/RatLesNetv2/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 09:30:31",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 9
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ]
}