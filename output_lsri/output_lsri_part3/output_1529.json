{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "format": "bibtex",
        "type": "File_dump",
        "value": "@Article{Mooers2020ShortcutsForFasterImageCreationInPyMOL,\n  author    = {Mooers, Blaine HM},\n  title     = {Shortcuts for faster image creation in PyMOL},\n  number    = {1},\n  pages     = {268--276},\n  volume    = {29},\n  file      = {:Mooers2020ShortcutsForFasterImageCreationInPyMOL.pdf:PDF},\n  url       = {https://onlinelibrary.wiley.com/doi/pdfdirect/10.1002/pro.3781},\n  journal   = {Protein Science},\n  publisher = {Wiley Online Library},\n  doi       = {10.1002/pro.3781},\n  year      = {2020},\n}\n"
      },
      "source": "https://raw.githubusercontent.com/MooersLab/pymolshortcuts/master/citation.bib",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Mooers, Blaine HM",
        "doi": "10.1002/pro.3781",
        "format": "bibtex",
        "title": "Shortcuts for faster image creation in PyMOL",
        "type": "Text_excerpt",
        "url": "https://onlinelibrary.wiley.com/doi/pdfdirect/10.1002/pro.3781",
        "value": "@article{Mooers2020ShortcutsForFasterImageCreationInPyMOL,\n    year = {2020},\n    doi = {10.1002/pro.3781},\n    publisher = {Wiley Online Library},\n    journal = {Protein Science},\n    url = {https://onlinelibrary.wiley.com/doi/pdfdirect/10.1002/pro.3781},\n    file = {:Mooers2020ShortcutsForFasterImageCreationInPyMOL.pdf:PDF},\n    volume = {29},\n    pages = {268--276},\n    number = {1},\n    title = {Shortcuts for faster image creation in PyMOL},\n    author = {Mooers, Blaine HM},\n}"
      },
      "source": "https://raw.githubusercontent.com/MooersLab/pymolshortcuts/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/MooersLab/pymolshortcuts"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-07-22T18:13:36Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-25T06:00:57Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "The repository pymolschortucts contains the a collection of shortcuts that are loaded on startup of PyMOL. These shortcuts enable websearches from within PyMOL as well as many other convienent functions that make work in PyMOL more productive.. "
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9691992535984739,
      "result": {
        "original_header": "pymolshortcuts",
        "type": "Text_excerpt",
        "value": "This is the repository for ***pymolschortucts.py***. This file contains 215 functions in 25 categories mapped to short names that work like aliases (the table below is incomplete).\nThese shortcuts include many functions that make working in PyMOL more productive and fun!\nSome shortcuts save the many hours of work required to assemble a new script file while other shortcuts save only a few minutes but lower motivational barriers.\nYou do not need to understand Python to be able to run the script. \nA [paper](https://onlinelibrary.wiley.com/doi/10.1002/pro.3781) about this project was published in Protien Science in January 2020. \nAccess to the PDF is open; you do not need a subscription to *Protein Science* to download it. \n"
      },
      "source": "https://raw.githubusercontent.com/MooersLab/pymolshortcuts/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8499502742877538,
      "result": {
        "type": "Text_excerpt",
        "value": "\nThe Google Scholar generated ENDNOTE file (scholar. new) is above with the other files. \n"
      },
      "source": "https://raw.githubusercontent.com/MooersLab/pymolshortcuts/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9260786301915552,
      "result": {
        "original_header": "Quick overview",
        "type": "Text_excerpt",
        "value": "To get a quick overview of this project, scroll down through this README.md file and watch the animations. To learn more,  see the PDFs in the slideshow folder: \nThe animation below demonstrates the photorealistic effect from the ambient occlusion shortcut applied to a protein by entering two letters, **AO**. \nThis shortcut executes 16 lines of code with the entry of two letters! \nThe animation below demonstrates the submission of two shortcuts, **sc311** and **sc113**, separated by a semicolon on the command line.\nThey generate symmetry mates that fill five unit cells.\nThe unit cells form an L shape. \nEach symmetry mate appears as a separate object in the menu in the panel to the right of the vv.\nThese can be removed by entering the shortcut **rmsc**.  \nThe variant file ***pymolschortuctsNobs4.py*** lacks a few functions that depend on the Python module beautifulsoup4 that is ***not*** shipped with PyMOL.\nChoose this variant file if you do not know how to add beautifulsoup4 to your version of PyMOL. \n"
      },
      "source": "https://raw.githubusercontent.com/MooersLab/pymolshortcuts/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8650385488439772,
      "result": {
        "original_header": "Have Open Source PyMOL or incentive version =&gt; 2.0.",
        "type": "Text_excerpt",
        "value": "If you want to use the shortcuts with a version of PyMOL that has a Python interpreter to which you can add an external module (generally any Open source PyMOL or the incentive version equal to or greater than 2.0), download the *pymolshortcuts.py* script.\n \n"
      },
      "source": "https://raw.githubusercontent.com/MooersLab/pymolshortcuts/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8904435601744328,
      "result": {
        "original_header": "Configuration: paths to local directories and URLs of some web pages",
        "type": "Text_excerpt",
        "value": "Around line 500, there are also paths to local directories of PDB files and webmail sites that need to be customized. \n"
      },
      "source": "https://raw.githubusercontent.com/MooersLab/pymolshortcuts/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8358374726219858,
      "result": {
        "original_header": "Do not have PyMOL  or do not want to mess with your existing PyMOL?",
        "type": "Text_excerpt",
        "value": "Note that multiple versions of PyMOL can be on one computer. On the Mac, you can give the package in Applications a different name. \nI append the version number to the stem of the file name, e.g., PyMOL233.app for version 2.3.3. \nAvoid trouble down the road by NOT introducing whitespaces into the file name.  \n"
      },
      "source": "https://raw.githubusercontent.com/MooersLab/pymolshortcuts/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9916257417273506,
      "result": {
        "original_header": "Mac",
        "type": "Text_excerpt",
        "value": "Open source version of pymol via Macports works fine. It is missing a few minor thrills found in the incentive version like the ability to import background images into the viewport. \nYou can have your favorite protein rocking over a scene from your last vacation. \nThis is cool  not essential for serious work. \nNote that the installation of PyMOL via MacPorts on the Mac (`sudo port install pymol +python37`) allows specification of the version of the Python interpreter. \nPyMOL can be installed with versions 2.7, 3.5, 3.6, and 3.7 of Python. \nThis is handy if you have a module written for only Python3.5 that you want to import into PyMOL to do something unique and creative without writing a new plugin for PyMOL. \nHowever, only one version of Macports PyMOL can be active at a time. \nYou could just run `sudo port install pymol +pythonXX` whenever you want to switch versions of pymol because the installation goes very quickly. \nThe proper way to switch *ports* is to enter `sudo activate `. \nOf course, you have to have the corresponding Macports Python interpreter installed prior to installing pymol. \nOpen source version of pymol via Macports works fine in my hands. It has only a few minor frills missing that the incentive has. \n \n"
      },
      "source": "https://raw.githubusercontent.com/MooersLab/pymolshortcuts/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8330626532706962,
      "result": {
        "original_header": "Linux",
        "type": "Text_excerpt",
        "value": "See the PyMOL Wiki page for [Linux Installs](https://pymolwiki.org/index.php/Linux_Install). \nThe install protocol varies with the flavor of Linux. \nInstall protocols for seven flavors of Linux are listed on the PyMOL Wiki. \nI have had success with installing recent versions of PyMOL on Ubuntu and Centos 7. \nThe webpage also describes installing PyMOL from source code. \nFrom my past experience, this is more successful on Linux than on MacOS.  \n"
      },
      "source": "https://raw.githubusercontent.com/MooersLab/pymolshortcuts/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9553134893081114,
      "result": {
        "original_header": "Windows",
        "type": "Text_excerpt",
        "value": "\nIf all of the above is overwhelmning, you do have a 30-day free-trial period with which you can use the incentive version of [PyMOL](https://pymol.org/2/).  \n"
      },
      "source": "https://raw.githubusercontent.com/MooersLab/pymolshortcuts/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9447044487260428,
      "result": {
        "original_header": "Listing the shortcuts in PyMOL's command history window",
        "type": "Text_excerpt",
        "value": "The shortcut **PW** takes one or more search terms and then sends them to the PyMOL Wiki.\nA browser tab opens for each search term, so multiple searches are run in parallel while you continue your work in PyMOL.\nYou can inspect the results of the searches when there is a natural break in your work in PyMOL.\nOther search functions can submit parallel searches of PubMed, Google, bioRxiv, Research Gate, GitHub, and more.\nSee the tables below. \nAnother class of shortcuts opens the manuscript or grant application that you are working on in Overleaf.\nYou have to edit the script by pasting in the appropriate link to the specific document. \nAnother class of shortcuts saves files with timestamps embedded in the filename to avoid overwriting png, pdb, pse, and other types of files written out from PyMOL.\nThese save function names begin with **s**, (e.g., **spse filename** saves the current session with date and time to nearest second embedded in the file name).\nYou can delete the unwanted version(s) at a later time. \nThese functions are useful if you do not have these files under version control.\n \n"
      },
      "source": "https://raw.githubusercontent.com/MooersLab/pymolshortcuts/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.898739607179475,
      "result": {
        "original_header": "Count files.",
        "type": "Text_excerpt",
        "value": "| Shortcut   | Short Description                                                                 |\n|:-----------|:----------------------------------------------------------------------------------|\n| cntccp4s   | Count number of *.ccp4 (electron density map) files in the current directory.     |\n| cntfiles   | Count the number of files in the current directory.                               |\n| cntlogs    | Count the number of *.log files in the current directory.                         |\n| cntmtzs    | Count the number of *.mtz (structure factor) files in the current directory.      |\n| cntpdbs    | Count the number of pdb files in the current directory.                           |\n| cntpmls    | Count the number of pml (Pymol macro language) files in the current directory.    |\n| cntpngs    | Count the number of *.png image files in the current directory.                   |\n| cntpses    | Count the number of *.pse (session) files in the current directory.               |  \n"
      },
      "source": "https://raw.githubusercontent.com/MooersLab/pymolshortcuts/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9201738359980114,
      "result": {
        "original_header": "Data analysis program, open from withn PyMOL.",
        "type": "Text_excerpt",
        "value": " ## H-bonds\n| Shortcut   | Short Description                                 |\n|:-----------|:-------------------------------------------------|\n| hb         | Creates an object of all H-bonds found by PyMOL. | \n| rmhb       | Delete all H-bonds in the selection, which is all by default. |  \n"
      },
      "source": "https://raw.githubusercontent.com/MooersLab/pymolshortcuts/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9922391268322531,
      "result": {
        "original_header": "Molecular representation, additional styles.",
        "type": "Text_excerpt",
        "value": "| Shortcut   | Short Description                                                                                         |\n|:-----------|:---------------------------------------------------------------------------------------------------------|\n| AO         | Commands to make ambient occlusion image like those in Qutemole.                                         |\n| AOBW       | Commands to make ambient occlusion image like those in Qutemole but coloring with grayscale.             |\n| AOD        | Make ambient occlusion image of any with dark carbon atoms.                                              |\n| AODBW      | Make ambient occlusion image of any with dark carbon atoms in grayscale.                                 |\n| BU         | Commands to make the biological unit.                                                                        |\n| BW         | Make black-and white-ribbon cartoon on a white background.                                               |\n| CB         | Runs Jared Sampson's script \"colorblindfriendly.py\".                                                     |\n| CBSS       | Apply colorblind-friendly coloring to ribbon or cartoon representations.                                 |\n| CR         | Commands to make colored filled-ring cartoon of nucleic acids.                                           |\n| CSS        | Commands to color ribbon or cartoon representations of proteins by secondary structure.                  |\n| DU         | Make dumbbell (ribbons with rolled edges) cartoon of the main chains of nucleic acids and proteins.      |\n| FR         | Make filled-ring cartoon of nucleic acids.                                                               |\n| HH         | Hide hydrogen atoms of currently visible molecular objects.                                              |\n| PE         | Apply pearl effect about selection cation or anion.                                                      |\n| PE125      | Apply alternative pearl effect about selection.                                                          |\n| PE25       | Apply alternative pearl effect about selected cation or anion.                                           |\n| PE33       | Apply alternative pearl effect about selection.                                                          |\n| PE50       | Apply alternative pearl effect about selected cation or anion.                                           |\n| PE66       | Apply alternative pearl effect about selection.                                                          |\n| PE75       | Apply alternative pearl effect about selection.                                                          |\n| PE85       | Apply alternative pearl effect about selection.                                                          |\n| SH         | Show hydrogen atoms of currently visible molecular objects.                                              |\n| bs         | bs creates a ball and stick representation of an object.                                                 |\n| bsbw       | bs creates a gray-scaled ball-and-stick representation of an object.                                     |\n| bsbwsc     | bsbwsc creates a gray-scaled ball-and-stick representation of an object or selection.                    |\n|            | Only the side chains are shown as ball and stick when used with a cartoon (ribbon diagram).              |\n| bstvdw     | Transparent vdw surface over ball and stick representation by Robert Paton at Colorato State University. |\n| cartoonbw  | Grayscale by secondary structure.                                                                        |\n| gscale     | Apply grayscale to all atoms by element.                                                                 |\n| rgb        | Restore rgb coloring of atoms by element.                                                                |\n| tvdw       | Transparent vdw surface by Robert Paton at Colorado State University.                                    |\n| tvdwbw     | Transparent vdw surface by Robert Paton at Colorado State University and grayscale by gscale function.   |  \n"
      },
      "source": "https://raw.githubusercontent.com/MooersLab/pymolshortcuts/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.938507781319354,
      "result": {
        "original_header": "Molecular symmetry generation.",
        "type": "Text_excerpt",
        "value": "| Shortcut   | Short Description                                                                                           |\n|:-----------|:-----------------------------------------------------------------------------------------------------------|\n| pdbremarks | Read REMARK lines from PDB file.                                                                           |\n|            | Return dictionary with remarkNum as key and list of lines as value.                                        |\n|            | Called by the function quat().                                                                             |\n| quat       | Runs Thomas Holder's quat.py script to generate a biological unit using crystallographic symmetry.         |\n|            |     Requires a pdb file. The defult file type with the fetch command is *.cif.                             |\n|            |     When using fetch, add the optional parameter type=pdb.                                                 |\n|            |     Of course, you can also use type=pdb1 to retrieve the biological unit form the PDB.                    |\n|            |     Reads REMARK 350 from the pdb file  `filename` and creates the biological unit (quaternary structure). |\n| quat350    | Get transformation matrices for biomolecule 1 from REMARK 350.                                             |  \n"
      },
      "source": "https://raw.githubusercontent.com/MooersLab/pymolshortcuts/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9318639752172786,
      "result": {
        "original_header": "Object selection.",
        "type": "Text_excerpt",
        "value": "| Shortcut    | Short Description                                                                           |\n|:------------|:-------------------------------------------------------------------------------------------|\n| buriedW     | Return a selection of buried waters.                                                       |\n| checkParams | Checks user params for the findSeq function.                                               |\n| interface   | Returns a selection of interface residues named according to what you passed into selName. |  \n"
      },
      "source": "https://raw.githubusercontent.com/MooersLab/pymolshortcuts/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.813879678365812,
      "result": {
        "original_header": "Orient molecule with viewport axes.",
        "type": "Text_excerpt",
        "value": "| Shortcut   | Short Description                                                                             |\n|:-----------|:---------------------------------------------------------------------------------------------|\n| omx        | Align long axis of molecule along the x-axis of the viewport.                                |\n| omxy       | Align long axis of molecule along minus x-y axis.                                            |\n| omxyz      | Align long axis of the selection along the minu xyz axis.                                    |\n| omy        | Align long axis of the selection along the y-axis of the viewport in the negative direction. |\n| omz        | Align long axis of selection along the z-axis of the viewport in the negative z direction.   |\n| ox         | Align long axis of molecule along x-axis.                                                    |\n| oxy        | Align long axis of the selection along the x-y axis.                                         |\n| oxyz       | Align long axis of the selection along the xyz axis.                                         |\n| oy         | Align long axis of the selection along the y-axis of the viewport.                           |\n| oz         | Align long axis of selection along the z-axis of the viewport.                               |  \n"
      },
      "source": "https://raw.githubusercontent.com/MooersLab/pymolshortcuts/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9868953338421647,
      "result": {
        "original_header": "Static images of various molecular scenes. Can serve as templates.",
        "type": "Text_excerpt",
        "value": "| Shortcut   | Short Description                                                                              |\n|:-----------|:----------------------------------------------------------------------------------------------|\n| BST        | G2G3/U9U8 base step , PDB code 4PCO.                                                          |\n| GGT        | WT human gamma glutamyl transpeptidase at 1.67 Angstrom resolution as cartoon. PDB Code 4gdx. |\n| GU         | 10-mer dsRNA with 8 GU wobble base pairs.                                                     |\n| LG         | Nine sugar glycan in influenza N9 neuraminidase, PDB code 4dgr.                               |\n| N9         | Influenza N9 neuraminidase at 1.55 Angstrom resolution, PDB code 4dgr.                        |\n| NA         | Hydrated sodium cation bound in major groove of a 16-mer RNA of Watson-Crick base pairs.      |\n| T4L        | WT T4 lysozyme as ribbon diagram (1.08 Ang):  3FA0.                                           |\n| U8         | 16-mer dsRNA with 8 contiguous Us. U-helix RNA (1.37 Ang):  3nd3.                             |\n| WC8        | 16-mer dsRNA, Watson-Crick helix RNA: 3nd4.                                                   |  \n"
      },
      "source": "https://raw.githubusercontent.com/MooersLab/pymolshortcuts/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9853240628885789,
      "result": {
        "original_header": "Static images of various molecular scenes. Require coordinates on local computer.",
        "type": "Text_excerpt",
        "value": "| Shortcut   | Short Description                                                                            |\n|:-----------|:--------------------------------------------------------------------------------------------|\n| LBST       | G2G3/U9U8 base step , PDB code 4PCO.                                                        |\n| LGGT       | WT human gamma glutamyl transpeptidase as cartoon. PDB code 4gdx.                           |\n| LGU        | 10-mer dsRNA.                                                                               |\n| LLG        | Nine sugar glycan in influenza N9 neuraminidase at 1.55 Angstrom resolution, PDB code 4dgr. |\n| LN9        | Influenza N9 neuraminidase, PDB code 4dgr.                                                  |\n| LNA        | Hydrated sodium cation bound in major groove of RNA with 16 Watson-Crick base pairs.        |\n| LT4L       | Display WT T4 lysozyme as ribbon diagram (resolution 1.08 Ang):  3FA0.                      |\n| LU8        | 16-mer dsRNA with 8 contiguous Us. U-helix RNA (1.37 Ang):  3nd3.                           |\n| LWC8       | 16-mer dsRNA, Watson-Crick helix RNA, 3nd4.                                                 |\n| SC         | Print to screen list of the shortcuts that are available in the script pymolshortcuts.py.   |  \n"
      },
      "source": "https://raw.githubusercontent.com/MooersLab/pymolshortcuts/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8530219718490949,
      "result": {
        "original_header": "Website, static, open from within PyMOL.",
        "type": "Text_excerpt",
        "value": "| Shortcut   | Short Description                                                                                                 |\n|:-----------|:-----------------------------------------------------------------------------------------------------------------|\n| ACA        | Open the American Crystallographic Association Annual Meeting webpage.                                           |\n| ALS        | Open website of the Advanced Light Source.                                                                       |\n| APS        | Open website of the Advanced Photon Source.                                                                      |\n| CHESS      | Open the website of CHESS.                                                                                       |\n| EMDB       | Open the website of the Electron Microscopy Data Bank.                                                           |\n| EP         | EasyPyMOL github site.                                                                                           |\n| IUCR       | Open website of the IUCr Journals.                                                                               |\n| JM         | Open the Jmol wiki.                                                                                              |\n| LBSF       | Open website of Laboratory of Biomolecular Structure and Function, the X-ray diffraction core facility at OUHSC. |\n| MCL        | Open website of Macromolecular Crystallography Laboratory at the University of Oklahoma.                         |\n| MG         | Open website of the OUHSC molecular graphics course.                                                             |\n| MGW        | Open Wikipedia webpage about molecular graphics.                                                                 |\n| NDB        | Open website of the Nucleic Acid Database.                                                                       |\n| NSLSII     | Open the website of the National Synchrotron Light Source II (NSLSII) at Brookhaven National Laboratory.         |\n| PPC        | Open the website of the Protein Production Facility at the University of Oklahoma in Norman.                     |\n| PS         | Open the home page of the Protein Soceity.                                                                       |\n| RS         | Open the homepage of the RNA Society.                                                                            |\n| SAXS       | Open the webpage of SAXS links at OUHSC.                                                                         |\n| SSRLSMB    | Open the webpage of SSRL Structural Molecular Biology.                                                           |\n| SSURF      | Open the webpage of the Society for Science at User Research Facilities (SSURF).                                 |\n| SciPy19    | Open the SciPy 2019 YouTube Channel.                                                                             |\n| biocat     | Open the webpage of the BIOCAT biological SAXS beamline at the Advanced Photon Source.                           |\n| chimeraWeb | Open the webste of UCSF Chimera.                                                                                 |\n| sasbdb     | Open the webpage of the Small Angle Scattering Biological Data Bank (SASBDB).                                    |\n| sbgrid     | Open the webpage of the Structural Biology Grid (SBGRID) YouTube Channel.                                        |\n| ssrlbl42   | Open the webpage of SSRL Biological SAXS at BL 4-2.                                                              |\n| weather    | Open National Weather Service website for locale.                                                                |  \n"
      },
      "source": "https://raw.githubusercontent.com/MooersLab/pymolshortcuts/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9628479575834686,
      "result": {
        "original_header": "Funding",
        "type": "Text_excerpt",
        "value": "- NIH: R01 CA242845, R01 AI088011\n- NIH: P30 CA225520 (PI: R. Mannel); P20GM103640 and P30GM145423 (PI: A. West) \n"
      },
      "source": "https://raw.githubusercontent.com/MooersLab/pymolshortcuts/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Download the script file",
        "parent_header": [
          "Quick overview"
        ],
        "type": "Text_excerpt",
        "value": "Before you download the script file, be sure that you have set your system to show file extensions. Both Mac and Windows operating system hide the file extension by default. \n\nOn the Mac, do the following\n\n- Open a new Finder window.\n- In the menu bar, select Finder > Preferences.\n- Check the box **Show all filename extension**\n\nOn Windows, do the following:\n\n- Search for **File Explorer Options** in the Start search box and open the **Folder Options** box.\n- Uncheck the box next to **Hide extensions** for known file types\".\n\nTo download all of the files, git clone the repository. \nOtherwise, left-click on one of the files above and left-click \"Raw\".\nThe raw file will be displayed in your browser.\nSelect **save** under the file pull-down of your browser. \nYour browser may add `.txt` after `.py`. \nDelete  `.txt` by backspacing over it.\nThen save the file to your home directory.\nYour browser may try to append the `.py` with `.txt` again via a popup GUI, but do not select this option.\n\n![download scipt](https://github.com/MooersLab/pymolshortcuts/blob/master/gifs/DownloadScript.gif)\n"
      },
      "source": "https://raw.githubusercontent.com/MooersLab/pymolshortcuts/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Download the incentive version of the current PyMOL",
        "parent_header": [
          "Quick overview",
          "Do not have PyMOL  or do not want to mess with your existing PyMOL?"
        ],
        "type": "Text_excerpt",
        "value": "The incentive version of [PyMOL](https://pymol.org/2/) is the easiest to install due to the availability of installers.\nYou can use the incentive version for 30 days for free without buying an annual license.\n\n"
      },
      "source": "https://raw.githubusercontent.com/MooersLab/pymolshortcuts/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/MooersLab/pymolshortcuts/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 17
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/MooersLab/pymolshortcuts/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MooersLab/pymolshortcuts"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "pymolshortcuts"
      },
      "source": "https://raw.githubusercontent.com/MooersLab/pymolshortcuts/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://media.giphy.com/media/VHeiY192SHWV2AObvl/giphy.gif"
      },
      "source": "https://raw.githubusercontent.com/MooersLab/pymolshortcuts/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://media.giphy.com/media/iDPLG20rlJGjqR6dKp/giphy.gif"
      },
      "source": "https://raw.githubusercontent.com/MooersLab/pymolshortcuts/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MooersLab/pymolshortcuts/master/gifs/DownloadScript.gif"
      },
      "source": "https://raw.githubusercontent.com/MooersLab/pymolshortcuts/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Have  incentive version &lt; 2.0 or do not want to mess with installing an external module",
        "parent_header": [
          "Quick overview",
          "Selecting the right pymolshortcuts.py script"
        ],
        "type": "Text_excerpt",
        "value": "If you have an incentive version less than 2.0 or you do not want to bother with the installation of the *datetime* module, download the *pymolshortcutsNoDateTime.py*. This version of the script lacks the functions that depend on the datetime module. By using this version  You will not get error messages about this module not being found.\n\n"
      },
      "source": "https://raw.githubusercontent.com/MooersLab/pymolshortcuts/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "These instructions are only for the users of pymolshortcuts.py",
        "parent_header": [
          "Quick overview",
          "Selecting the right pymolshortcuts.py script",
          "How to install the date time module"
        ],
        "type": "Text_excerpt",
        "value": "The Python program pip is available for all installing external modules. The recommended way of using pip when more than one Python interpreter is on our computer is to import it as a module on the command line with the path of the python interpreter for which you are making the install. For example, to install the datetime module in the macports Python3.7, use `sudo -H /opt/local/bin/python3.7 -m pip install --upgrade datetime`. The minus m flag means import the following module.  Depending on your configuration of macports, you may not need to use `sudo -H`.\n\n"
      },
      "source": "https://raw.githubusercontent.com/MooersLab/pymolshortcuts/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "Quick overview",
          "Download the script file"
        ],
        "type": "Text_excerpt",
        "value": "To have the shortcuts always available in PyMOL, add the command 'run ~/pymolshortcutsNobs4.py' (recommended for most users) or 'run ~/pymolshortcutsbs4.py' (for advanced users) to the *.pymolrc*, *pymolrc* or *pymolrc.pml* file in your home directory.\nThis command will to load the functions in the script on every startup of PyMOL so you do not have to think about doing so again.\n\nThe pymolrc file is an optional file.\nYou may have to create it with a text editor if you have not done so already.\nIf you do not have a text editor, you can use PyMOL's built-in text editor.\nGo to **File --> Edit pymolrc**.\nThe functions will be loaded into memory but will not be executed despite the use of the command **run**.\nYou may want to store the script **pymolshortcuts.py** in a safer place than your home directory.\nI store mine in */Users/blaine/Scripts/PyMOLScripts/*.\n"
      },
      "source": "https://raw.githubusercontent.com/MooersLab/pymolshortcuts/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.949161687318457,
      "result": {
        "original_header": "Quick overview",
        "type": "Text_excerpt",
        "value": "To get a quick overview of this project, scroll down through this README.md file and watch the animations. To learn more,  see the PDFs in the slideshow folder: \nThe variant file ***pymolschortuctsNobs4.py*** lacks a few functions that depend on the Python module beautifulsoup4 that is ***not*** shipped with PyMOL.\nChoose this variant file if you do not know how to add beautifulsoup4 to your version of PyMOL. \n"
      },
      "source": "https://raw.githubusercontent.com/MooersLab/pymolshortcuts/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999502007123773,
      "result": {
        "original_header": "Have Open Source PyMOL or incentive version =&gt; 2.0.",
        "type": "Text_excerpt",
        "value": "If you want to use the shortcuts with a version of PyMOL that has a Python interpreter to which you can add an external module (generally any Open source PyMOL or the incentive version equal to or greater than 2.0), download the *pymolshortcuts.py* script.\n \n"
      },
      "source": "https://raw.githubusercontent.com/MooersLab/pymolshortcuts/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9998511279218917,
      "result": {
        "original_header": "Mac",
        "type": "Text_excerpt",
        "value": "See the instructions on the PyMOL Wiki page for installing on the [Mac](https://pymolwiki.org/index.php/MAC_Install).  \nThere are many ways of installing PyMOL on the Mac.\nI suggest using the install command below instead for installing pymol on the Mac with Macports. \nI have used Fink, Anaconda, Homebrew, and Macports. \nI have the fewest problems with Macports, followed by Fink.  \nThe main barrier to using Macports is the need to install the Xcode-related command-line tools. \nThe protocol for doing so varies with the version of the Mac operating system and the version of Xcode installed on your computer. \nExpect to spend at least an hour installing the command line tools and then Macports. \nIf this sounds like too much trouble, download the 30-day trial of the incentive version.  \nOpen source version of pymol via Macports works fine. It is missing a few minor thrills found in the incentive version like the ability to import background images into the viewport. \nYou can have your favorite protein rocking over a scene from your last vacation. \nThis is cool  not essential for serious work. \nNote that the installation of PyMOL via MacPorts on the Mac (`sudo port install pymol +python37`) allows specification of the version of the Python interpreter. \nPyMOL can be installed with versions 2.7, 3.5, 3.6, and 3.7 of Python. \nThis is handy if you have a module written for only Python3.5 that you want to import into PyMOL to do something unique and creative without writing a new plugin for PyMOL. \nHowever, only one version of Macports PyMOL can be active at a time. \nYou could just run `sudo port install pymol +pythonXX` whenever you want to switch versions of pymol because the installation goes very quickly. \nThe proper way to switch *ports* is to enter `sudo activate `. \nOf course, you have to have the corresponding Macports Python interpreter installed prior to installing pymol. \nOpen source version of pymol via Macports works fine in my hands. It has only a few minor frills missing that the incentive has. \n \n"
      },
      "source": "https://raw.githubusercontent.com/MooersLab/pymolshortcuts/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999999999763531,
      "result": {
        "original_header": "Linux",
        "type": "Text_excerpt",
        "value": "See the PyMOL Wiki page for [Linux Installs](https://pymolwiki.org/index.php/Linux_Install). \nThe install protocol varies with the flavor of Linux. \nInstall protocols for seven flavors of Linux are listed on the PyMOL Wiki. \nI have had success with installing recent versions of PyMOL on Ubuntu and Centos 7. \nThe webpage also describes installing PyMOL from source code. \nFrom my past experience, this is more successful on Linux than on MacOS.  \n"
      },
      "source": "https://raw.githubusercontent.com/MooersLab/pymolshortcuts/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999326446639936,
      "result": {
        "original_header": "Windows",
        "type": "Text_excerpt",
        "value": "See the PyMOL Wiki page for installing [PyMOL on Windows](https://pymolwiki.org/index.php/Windows_Install).  The protocol varies with the flavor of Linux. I have had success with installing recent versions of PyMOL on Ubuntu and Centos 7. \n"
      },
      "source": "https://raw.githubusercontent.com/MooersLab/pymolshortcuts/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9212134788376195,
      "result": {
        "original_header": "Listing the shortcuts in PyMOL's command history window",
        "type": "Text_excerpt",
        "value": "Another class of shortcuts launches your favorite full-featured text editor from within PyMOL.\nYou have to install the text editor and edit the file path to the executable. \n"
      },
      "source": "https://raw.githubusercontent.com/MooersLab/pymolshortcuts/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999871863963238,
      "result": {
        "original_header": "Save files with date and time in stem of filename.",
        "type": "Text_excerpt",
        "value": "| Shortcut   | Short Description                                                                                                         |\n|:-----------|:-------------------------------------------------------------------------------------------------------------------------|\n| saln       | Save a aln file (alignment file) with a time stamp.                                                                      |\n| sccp4      | Save a ccp4 electron density map with a time stamp.                                                                      |\n| scif       | Save a cif file (Crystallographic Information File) with a time stamp.                                                   |\n| sdae       | Save a dae file (Collada File) with a time stamp.                                                                        |\n| sdat       | Save a dat file (output data file) with a time stamp.                                                                    |\n| sfasta     | Save a fasta file (output data file) with a time stamp.                                                                  |\n| sidtf      | Save a idtf file (Intermediate Data Text Format) with a time stamp.                                                      |\n| smae       | Save a mae (Maestro) file with a time stamp.                                                                             |\n| smmd       | Save a mmd (Macromodel) file with a time stamp.                                                                          |\n| smmod      | Save a mmod (Macromodel) file with a time stamp.                                                                         |\n| smoe       | Save a moe file (Molecular Operating Environment) with a time stamp.                                                     |\n| smol       | Save a mol file with a time stamp.                                                                                       |\n| smol2      | Save a mol2 file with a time stamp.                                                                                      |\n| smtl       | Save mtl (Wavefront Material) file format with a time stamp.                                                             |\n| sobj       | Save obj file (Wavefront mesh file format) with a time stamp.                                                            |\n| sout       | Save output data file with a time stamp.                                                                                 |\n| spdb       | Save pdb data file with a time stamp.                                                                                    |\n| spkl       | Save a pkl file (Python pickle file) with a time stamp.                                                                  |\n| spkla      | Save a pkla file (Python pickle file) with a time stamp.                                                                 |\n| spmo       | Save a pmo file (XYZ, binary format file) with a time stamp.                                                             |\n| spng       | Save a png file (Python pickle file) with a time stamp.                                                                  |\n| spov       | Save pov (POV-ray tracing file format) file with a time stamp.                                                           |\n| spqr       | Save pqr with file with timestamp.                                                                                       |\n| spse       | Save session file with a time stamp.                                                                                     |\n| srv        | Get the view settings in a compact format on one line. Save to file with timestamp appended to the stem of the filename. |\n| ssdf       | Save session file with a time stamp.                                                                                     |\n| swrl       | Save wrl (VRML 2 file format) file with a time stamp.                                                                    |  \n"
      },
      "source": "https://raw.githubusercontent.com/MooersLab/pymolshortcuts/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9996029276568067,
      "result": {
        "original_header": "Terminal, open from within PyMOL.",
        "type": "Text_excerpt",
        "value": "| Shortcut   | Short Description                    |\n|:-----------|:------------------------------------|\n| iterm      | Open iTerm2 window on MacOS.        |\n| term       | Open a Terminal window on MacOS.    |\n| x11        | Open x11 terminal.                  |\n| xquartz    | Open new XQuartz terminal on MacOS. |  \n"
      },
      "source": "https://raw.githubusercontent.com/MooersLab/pymolshortcuts/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999717087374044,
      "result": {
        "original_header": "Update history",
        "type": "Text_excerpt",
        "value": "Insert update history\n|Version      | Changes                                                                                                                                    | Date                 |\n|:-----------:|:------------------------------------------------------------------------------------------------------------------------------------------:|:--------------------:|\n| Version 0.2 |  Added badges, funding, update table, and edited README.md                                                                                 | 2024 May 8           | \n"
      },
      "source": "https://raw.githubusercontent.com/MooersLab/pymolshortcuts/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8063449942662809,
      "result": {
        "original_header": "Save files with date and time in stem of filename.",
        "type": "Text_excerpt",
        "value": "| Shortcut   | Short Description                                                                                                         |\n|:-----------|:-------------------------------------------------------------------------------------------------------------------------|\n| saln       | Save a aln file (alignment file) with a time stamp.                                                                      |\n| sccp4      | Save a ccp4 electron density map with a time stamp.                                                                      |\n| scif       | Save a cif file (Crystallographic Information File) with a time stamp.                                                   |\n| sdae       | Save a dae file (Collada File) with a time stamp.                                                                        |\n| sdat       | Save a dat file (output data file) with a time stamp.                                                                    |\n| sfasta     | Save a fasta file (output data file) with a time stamp.                                                                  |\n| sidtf      | Save a idtf file (Intermediate Data Text Format) with a time stamp.                                                      |\n| smae       | Save a mae (Maestro) file with a time stamp.                                                                             |\n| smmd       | Save a mmd (Macromodel) file with a time stamp.                                                                          |\n| smmod      | Save a mmod (Macromodel) file with a time stamp.                                                                         |\n| smoe       | Save a moe file (Molecular Operating Environment) with a time stamp.                                                     |\n| smol       | Save a mol file with a time stamp.                                                                                       |\n| smol2      | Save a mol2 file with a time stamp.                                                                                      |\n| smtl       | Save mtl (Wavefront Material) file format with a time stamp.                                                             |\n| sobj       | Save obj file (Wavefront mesh file format) with a time stamp.                                                            |\n| sout       | Save output data file with a time stamp.                                                                                 |\n| spdb       | Save pdb data file with a time stamp.                                                                                    |\n| spkl       | Save a pkl file (Python pickle file) with a time stamp.                                                                  |\n| spkla      | Save a pkla file (Python pickle file) with a time stamp.                                                                 |\n| spmo       | Save a pmo file (XYZ, binary format file) with a time stamp.                                                             |\n| spng       | Save a png file (Python pickle file) with a time stamp.                                                                  |\n| spov       | Save pov (POV-ray tracing file format) file with a time stamp.                                                           |\n| spqr       | Save pqr with file with timestamp.                                                                                       |\n| spse       | Save session file with a time stamp.                                                                                     |\n| srv        | Get the view settings in a compact format on one line. Save to file with timestamp appended to the stem of the filename. |\n| ssdf       | Save session file with a time stamp.                                                                                     |\n| swrl       | Save wrl (VRML 2 file format) file with a time stamp.                                                                    |  \n"
      },
      "source": "https://raw.githubusercontent.com/MooersLab/pymolshortcuts/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/MooersLab/pymolshortcuts/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "agile-programming, agile-pymol, aliases, biomolecular-artwork, efficient-programming, ergonomic-keyword-use, figure-making, image-making, molecular-artwork, molecular-graphics, pdb, pml, protein-structure-analysis, pymol, pymol-plugin, pymol-python, scripting, shortcuts, startup-script, structural-bioinformatics"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2018 Blaine Mooers and the University of Oklahoma Board of Regents\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/MooersLab/pymolshortcuts/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "pymolshortcuts"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "MooersLab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 973616,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "TeX",
        "size": 505,
        "type": "Programming_language",
        "value": "TeX"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MooersLab/pymolshortcuts/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 05:20:47",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 67
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Script writing aids.",
        "parent_header": [
          "Quick overview"
        ],
        "type": "Text_excerpt",
        "value": "| Shortcut   | Short Description                                                                         |\n|:-----------|:-----------------------------------------------------------------------------------------|\n| gitAdd     | Enter help(gitAdd) to print steps for adding a file to version control.                  |\n| gitCommit  | Enter help(gitCommit) to print steps for saving updates to a file under version control. |\n| gitInit    | Enter help(gitInit) to print steps for creating a git repository.                        |\n| gitPull    | Enter help(gitPull) to print steps to update a repository on github.com.                 |\n| gitPush    | Enter help(gitPush) to print steps update a repository on github.com.                    |\n| rline      | Prints cheat sheet for the readline commands.                                            |\n| rv         | Get the view settings in a compact format on one line.                                   | \n\n"
      },
      "source": "https://raw.githubusercontent.com/MooersLab/pymolshortcuts/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Configuration:  application start commands",
        "parent_header": [
          "Quick overview",
          "Configure the script for access to all shortcuts"
        ],
        "type": "Text_excerpt",
        "value": "A number of shortcuts open external programs.\nThe commands that work on the Mac OS are active by default.\nThese are not path-dependent.\nThey should work regardless of the nonconventional location of your applications, as long as they are in your PATH.\nThey are found around **line 500** in the pymolshortcuts.py script file.\n\nThe commands for Mac OS need to be commented out and the commands for Linux or Windows need to be uncommented.\nDo not use a word processor to edit this file. \nVisual Studio Code is an excellent, free, and intuitive text editor that is platform independent.\nInstall one of the Python in-plugins via the marketplace to get syntax highlighting of the pymolshortcuts.py script file\n\n"
      },
      "source": "https://raw.githubusercontent.com/MooersLab/pymolshortcuts/master/README.md",
      "technique": "header_analysis"
    }
  ]
}