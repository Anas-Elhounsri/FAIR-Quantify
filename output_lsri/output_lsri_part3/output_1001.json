{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/haoharryfeng/NeuCA"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-04-16T17:14:57Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-03-22T16:42:05Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Neural-network based Cell Annotation tool"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1. Introduction",
        "type": "Text_excerpt",
        "value": "The fast advancing single cell RNA sequencing (scRNA-seq) technology enables transcriptome study in heterogeneous tissues at a single cell level. The initial important step of analyzing scRNA-seq data is to accurately annotate cell labels. We present a neural-network based cell annotation method NeuCA. When closely correlated cell types exist, NeuCA uses the cell type tree information through a hierarchical structure of neural networks to improve annotation accuracy. Feature selection is performed in hierarchical structure to further improve classification accuracy. When cell type correlations are not high, a feed-forward neural network is adopted.\n![workflow](vignettes/workflow.png)\n\nNeuCA depends on the following packages in R/Bioconductor:\n\n- **keras**, for neural-network interface in R\n- **limma**, for linear model framework and testing markers\n- **SingleCellExperiment**, for data organization formatting\n- **e1071**, for probability and predictive functions.\n\n"
      },
      "source": "https://raw.githubusercontent.com/haoharryfeng/NeuCA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9264456625729928,
      "result": {
        "original_header": "3. NeuCA training and prediction",
        "type": "Text_excerpt",
        "value": "Users have the option to determine the complexity of the neural-network used in NeuCA by specifying the desired `model.size` argument. Here, \u201cbig\u201d, \u201cmedium\u201d and \u201csmall\u201d are 3 potential choices, reflecting large, medium and small number of nodes and layers in neural-network, respectively. \n"
      },
      "source": "https://raw.githubusercontent.com/haoharryfeng/NeuCA/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8646104276120277,
      "result": {
        "original_header": "4. Predicted cell types",
        "type": "Text_excerpt",
        "value": "`predicted.label` is a vector of the same length with the number of cells in the testing dataset, containing all cell\u2019s predicted cell type. It can be viewed directly:\n```\nhead(predicted.label)\n## [1] \"alpha\" \"gamma\" \"gamma\" \"gamma\" \"gamma\" \"alpha\"\ntable(predicted.label)\n## predicted.label\n##       alpha        beta       delta      ductal endothelial       gamma \n##         331         109          56          65           9         132\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/haoharryfeng/NeuCA/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/haoharryfeng/NeuCA/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/haoharryfeng/NeuCA/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "haoharryfeng/NeuCA"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "NeuCA: Neural-network based Cell Annotation tool"
      },
      "source": "https://raw.githubusercontent.com/haoharryfeng/NeuCA/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/haoharryfeng/NeuCA/main/vignettes/workflow.png"
      },
      "source": "https://raw.githubusercontent.com/haoharryfeng/NeuCA/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/haoharryfeng/NeuCA/main/vignettes/sankey1.png"
      },
      "source": "https://raw.githubusercontent.com/haoharryfeng/NeuCA/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "2. Preparing NeuCA input files: `SingleCellExperiment` class",
        "type": "Text_excerpt",
        "value": "The scRNA-seq data input for NeuCA must be objects of the Bioconductor `SingleCellExperiment`. You may need to read corresponding vignettes on how to create a SingleCellExperiment from your own data. An example is provided here to show how to do that, but please note this is not a comprehensive guidance for SingleCellExperiment.\n\n**Step 1**: Load in example scRNA-seq data.\n```\nlibrary(NeuCA)\n#Baron_scRNA is the training scRNA-seq dataset\n#Seg_scRNA is the testing scRNA-seq dataset\ndata(\"Baron_scRNA\")\ndata(\"Seg_scRNA\")\n```\n\n**Step 2a**: Prepare training data as a SingleCellExperiment object\n```\nBaron_anno = data.frame(Baron_true_cell_label, row.names = colnames(Baron_counts))\nBaron_sce = SingleCellExperiment(\n    assays = list(normcounts = as.matrix(Baron_counts)),\n    colData = Baron_anno\n    )\n# use gene names as feature symbols\nrowData(Baron_sce)$feature_symbol <- rownames(Baron_sce)\n# remove features with duplicated names\nBaron_sce <- Baron_sce[!duplicated(rownames(Baron_sce)), ]\n```\n\n**Step 2b**: Similarly, prepare testing data as a SingleCellExperiment object. Note the true cell type labels are not necessary (and of course often not available).\n```\nSeg_anno = data.frame(Seg_true_cell_label, row.names = colnames(Seg_counts))\nSeg_sce <- SingleCellExperiment(\n    assays = list(normcounts = as.matrix(Seg_counts)),\n    colData = Seg_anno\n)\n# use gene names as feature symbols\nrowData(Seg_sce)$feature_symbol <- rownames(Seg_sce)\n# remove features with duplicated names\nSeg_sce <- Seg_sce[!duplicated(rownames(Seg_sce)), ]\n```\n"
      },
      "source": "https://raw.githubusercontent.com/haoharryfeng/NeuCA/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/haoharryfeng/NeuCA/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/haoharryfeng/NeuCA/main/vignettes/NeuCA_hex.png"
      },
      "source": "https://raw.githubusercontent.com/haoharryfeng/NeuCA/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "NeuCA"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "haoharryfeng"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 18194,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/haoharryfeng/NeuCA/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 03:08:36",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 6
      },
      "technique": "GitHub_API"
    }
  ]
}