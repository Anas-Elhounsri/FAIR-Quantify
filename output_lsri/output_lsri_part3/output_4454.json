{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/abelavit/PhoglyStruct"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-06-04T06:52:59Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-11-22T23:07:59Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9844490163383385,
      "result": {
        "original_header": "PhoglyStruct",
        "type": "Text_excerpt",
        "value": "The codes in this repository are in two categories. One is based on commercial software (Matlab), while the other on non-commercial software (Octave).\n-\tThe train and test datasets used for implementing PhoglyStruct are .mat files by the names 'train' and 'test' respectively (the three features namely tau, pc and ph are not present in train and test but in the .mat files 'original_train' and 'original_test' has all the features which can be viewed for reference). \n-\tIn these datasets, the first column is the protein sequence name, second column the feature vector, label in the third ('1' for phosphoglycerylated and '0' for non-phosphoglycerylated), and the fourth column indicates the amino acid number where lysine K is located in the protein sequence. \n-\tThe dataset with removed features (tau, pc and ph) were converted to arff files using the .m file named 'removed_features_arff'. The datasets were converted to arff files to train multilayer perceptron on WEKA (arff files can be found in 'PhoglyStruct_arffs' folder). \n-\tThe algorithm (.m file) used for generating the original train and original test datasets is called 'PhoglyStruct'. These datasets were also generated for the CKSAAP_PhoglySite method containing CKSAAP features and its arff files were used to train multilayer perceptron on WEKA for comparison (arff files can be found in 'CKSAAP_arffs' folder). \n-\tThe algorithm (.m file) used for generating the test and train datasets is called 'CKSAAP'. The performance of test set was also obtained for Phogly-PseAAC and iPGK-PseAAC method by comparing the lysine k predictions when FASTA format of the protein sequence was uploaded to its webservers. \n-\tThe Phogly-PseAAC predictions of all lysine k is stored in .mat file named 'Phogly_PseAAC_Result' while for iPGK-PseAAC in 'iPGK_PseAAC_result'. Since these two methods were not implemented in our work, arff files for these methods is not generated so the result is obtained by executing the .m file named 'Phogly_PseAAC' for Phogly-PseAAC method and .m file named 'iPGK_PseAAC' for iPGK-PseAAC method that calculate performance based on predictions carried out on the respective webservers.\n-\tMoreover, Phoglystruct features were compared to a simpler set of features that assigns a value of 1 when the amino acid at the particular position in the peptide P matches with one of the amino acids of the genome while a value of 0 is assigned to the rest of the amino acids. The resulting matrix obtained is of a 20x5 dimension. This matrix is converted into a 100-dimensional feature vector representing each lysine residue. This simple feature for the corresponding PhoglyStruct's train and test datasets was constructed by executing the code (.m file) named 'Simple_Feature'. The arff files generated were used to train MLP on WEKA. \nWEKA and AUC calculation details:\n-\t10-fold cross-validation of our method and CKSAAP_PhoglySite method is carried out using the arff files. The WEKA version 3.8.2 was used in this work. On WEKA, open file to train and on the classifier tab, choose MultilayerPerceptron under functions. The parameters of MultilayerPerceptron are kept as default. Supply the corresponding test set. Please also choose csv format for output predictions under 'more options'. \n-\tAfter training is complete, use the confusion matrix to calculate the performance metrics sensitivity, specificity, G-Mean, accuracy, mcc and F-Measure (the excel file named 'MLP WEKA metric calculator' can be used for calculation). For calculating AUC, copy and paste the predictions on test set into a txt file (the predictions on test set are provided for PhoglyStruct, CKSAAP_PhoglySite, iPGK-PseAAC and Phogly-PseAAC methods by the names 'AUC_Data_PhoglyStruct', 'AUC_Data_CKSAAP', 'AUC_Data_iPGK_PseAAC' and 'AUC_Data_Phogly_PseAAC' respectively). \n-\tThe data for calculating AUC of the method that utilizes simple features is also provided by the name 'AUC_Data_Simple_Features'. To calculate the AUC, please execute the .R file named 'Calculating_AUC'.\nFootnotes:\nTo find in detail the CKSAAP_PhoglySite feature extraction method for each lysine k, please see the .m file named \u2018CKSAAP_Preprocessing\u2019. After the code execution, features are saved in the Final_Data variable. Final_Data is the same file used when comparing for the CKSAAP_PhoglySite method.\nTo verify the algorithm for calculating the CKSAAP features, code named 'CKSAAP_Preprocessing_Xu_Dataset' was developed to run on Xu's Dataset and the feature rank achieved by this alogorithm was compared to the rank achieved in CKSAAP_PhoglySite work and they come to the same ranking. The rank achieved by CKSAAP_PhoglySite method is highlighted in table 3 of their paper.\nThe file also contains FASTA format of the phosphoglycerylation dataset which was used to obtained the predictions of all lysine k from the Phogly\u2013PseAAC webserver accessible at http://app.aporc.org/Phogly-PseAAC/ and iPGK-PseAAC webserver accessible at http://app.aporc.org/iPGK-PseAAC/ \n"
      },
      "source": "https://raw.githubusercontent.com/abelavit/PhoglyStruct/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/abelavit/PhoglyStruct/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/abelavit/PhoglyStruct/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "abelavit/PhoglyStruct"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PhoglyStruct"
      },
      "source": "https://raw.githubusercontent.com/abelavit/PhoglyStruct/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/abelavit/PhoglyStruct/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PhoglyStruct"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "abelavit"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/abelavit/PhoglyStruct/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "installation",
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 16:31:16",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "non-software"
      },
      "technique": "software_type_heuristics"
    }
  ]
}