{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "mapGL"
        ],
        "type": "Text_excerpt",
        "value": "MapGL: Inferring evolutionary gain and loss of short genomic sequence features by phylogenetic maximum parsimony\nAdam G Diehl, Alan P Boyle\nbioRxiv 827907; doi: https://doi.org/10.1101/827907\nhttps://www.biorxiv.org/content/10.1101/827907v1\n\nCopyright 2018, Adam Diehl (adadiehl@umich.edu), Boyle Lab, University of Michigan"
      },
      "source": "https://raw.githubusercontent.com/adadiehl/mapGL/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_of_conduct": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at adadiehl@umich.edu. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n"
      },
      "source": "https://raw.githubusercontent.com/adadiehl/mapGL/master/CODE_OF_CONDUCT.md",
      "technique": "file_exploration"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/adadiehl/mapGL"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-05-30T13:03:06Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-03-03T18:46:44Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Phylogenetic mapping of DNA element gain and loss using multiple outgroup species."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9857904709299161,
      "result": {
        "original_header": "Prediction of lineage-specific gain and loss of genomic sequence elements based on phylogenetic maximum parsimony.",
        "type": "Text_excerpt",
        "value": "\nLabel genomic regions as orthologous, gained in the query species, or lost in\nthe target species, based on inferred presence/absence in the most-recent\ncommon ancestor (MRCA). Chained alignment files are used to map features from\nquery to target and one or more outgroup species. Features that map directly from\nquery to target are labeled as orthologs, and ortholgous coordinates in the\ntarget species are given in the output. Non-mapping features are assigned as\ngains or losses based on a maximum-parsimony algorithm predicting presence\nor absence in the MRCA. \n"
      },
      "source": "https://raw.githubusercontent.com/adadiehl/mapGL/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9825330621428566,
      "result": {
        "original_header": "Required Arguments",
        "type": "Text_excerpt",
        "value": "  | Argument | Description |\n  |---|---|\n  | __input__ | Input regions to process. Should be in standard bed format. Only the first four bed fields will be used. |\n  | __tree__ | Phylogenetic tree describing relationships of query and target species to outgroups. Must be in standard Newick format. Branch lengths are optional, and will be ignored. |\n  | __qname__ | Name of the query species. Regions from this species will be mapped to target species coordinates. |\n  | __tname__ | Name of the target species. Regions from the query species will be mapped to coordinates from this species. |\n  | __alignments__ | Alignment files (.chain or .pkl): One for the target species and one per outgroup species. Files should be named according to the convention: qname.tname[...].chain.gz, where qname is the query species name and tname is the name of the target/outgroup species. Names used for qname and tname must match names used in the phylogenetic tree. |\n \n"
      },
      "source": "https://raw.githubusercontent.com/adadiehl/mapGL/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.988830217472658,
      "result": {
        "original_header": "Options",
        "type": "Text_excerpt",
        "value": "  | Option | Description |\n  |---|---|\n  | __-h, --help__ | Show help message and exit. |\n  | __-o FILE, --output FILE__ | Output file. (default: stdout) |\n  | __-t FLOAT, --threshold FLOAT__ | Mapping threshold i.e., \\|elem\\| * threshold <= \\|mapped_elem\\|. Default = 0.0 -- equivalent to accepting a single-base overlap. On the other end of the spectrum, setting this value to 1 is equivalent to only accepting full-length overlaps. (default: 0.0) |\n  | __-g GAP, --gap GAP__ | Ignore elements with an insertion/deletion of this or bigger size. Ignore elements with an insertion/deletion of this or bigger size. Using the default value (-1) will allow gaps of any size. (default: -1) |\n  | __-v {info,debug,silent}, --verbose {info,debug,silent}__ | Verbosity level (default: info) |\n  | __-d, --drop_split__ | Follow the bnMapper convention of silently dropping elements that span multiple chains, rather than the liftOver mapping convention for split alignments: keep elements that span multiple chains and report the longest aligned segment. This is not recommended, as it may lead to spurious gain/loss predictions for orthologous elements that happen to be split across chains due to chromosomal rearrangements, etc... (default: False) |\n  | __-i {BED,narrowPeak}, --in_format__ {BED,narrowPeak} | Input file format. (default: BED) |\n  | __-f, --full_labels__ | Predict gain/loss events on the whole tree, not just branches leading to query and target species. (default: False) |\n  | __-n, --no_prune__ | Do not attempt to disambiguate the root state to resolve ambiguous gain/loss predictions. Instead, label affected features as 'ambiguous'. (default: False) |\n  | __-p, --priority {gain,loss}__ | When resolving ambiguous trees, prioritize sequence gain or sequence loss. This can be thought of as assigning a lower cost to sequence insertions relative to deletions, or vice-versa. When priority='gain', ambiguity is resolved by assigning 0 state to the root node, such that sequence presence on a descendant branch will be interpreted as a gain. When priority='loss', ambiguity is resolved by asssigning state 1 to the root node, such that sequence absence in a descendant node is interpreted as a sequence loss. (default: gain) |\n \n"
      },
      "source": "https://raw.githubusercontent.com/adadiehl/mapGL/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9028539830396279,
      "result": {
        "original_header": "Output",
        "type": "Text_excerpt",
        "value": "Predictions are reported in tab-delimited format with the first four columns following the BED4 convention. The predicted evolutionary history (i.e., ortholog, gain in query, or loss in target) is reported in the \"status\" column. The final three columns contain the mapped location, in target coordinates, of mapped (ortholog) elements. \n| Column | Description |\n|---|---|\n| __chrom__ | Chromosome on which the query element is located. |\n| __start__ | Start position on query chromosome. |\n| __end__ | End position on query chromosome. |\n| __name__ | Element name or ID. |\n| __peak__ | Peak location (narrowPeak input) or element midpoint (BED input) |\n| __status__ | Predicted phylogenetic history: __ortholog__, __gain_qname__, __loss_tname__, or __ambiguous__, if --no_prune is used. If __--full_labels__ is used, this may include additional loss/gain events on other branches, in a comma-delimited list format. |\n| __mapped chrom__ | For mapped (ortholog) elements, the chromosome on which the mapped element is located, in target coordinates. |\n| __mapped start__ | For mapped (ortholog) elements, the start position on the target chromosome on which the mapped element is located. |\n| __mapped end__ | For mapped (ortholog) elements, the end position on the target chromosome on which the mapped element is located. |\n| __mapped_peak__ | For mapped (ortholog) elements, the mapped peak position (narrowPeak input) or mapped element midpoint (BED input). |\n \n"
      },
      "source": "https://raw.githubusercontent.com/adadiehl/mapGL/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/adadiehl/mapGL/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/adadiehl/mapGL/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "adadiehl/mapGL"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "mapGL"
      },
      "source": "https://raw.githubusercontent.com/adadiehl/mapGL/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/adadiehl/mapGL/master/build.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/adadiehl/mapGL/master/utils/do_rbest.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "mapGL"
        ],
        "type": "Text_excerpt",
        "value": "We recommend installing with conda, into a new environment:\n```\nconda create -n mapGL --channel conda-forge --channel bioconda python=3.7 numpy bx-python cython six mapGL\nconda activate mapGL\n```\n\nTo install within an existing conda environment:\n```\nconda install -c bioconda mapgl\n```\n\nInstall with pip:\n```\npip install mapGL\n```\n\nInstallation from the github repository is not recommended. However, if you must, follow the steps below:\n1) Install all dependencies listed above\n2) Clone the repository\n3) Add the mapGL/map_GL directory to your local path and python module search path\n"
      },
      "source": "https://raw.githubusercontent.com/adadiehl/mapGL/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9999998491278576,
      "result": {
        "original_header": "Prediction of lineage-specific gain and loss of genomic sequence elements based on phylogenetic maximum parsimony.",
        "type": "Text_excerpt",
        "value": "Based on bnMapper.py, by Ogert Denas (James Taylor lab):\n  * https://github.com/bxlab/bx-python/blob/master/scripts/bnMapper.py\n  * https://travis-ci.org/bxlab/bx-python\n \n"
      },
      "source": "https://raw.githubusercontent.com/adadiehl/mapGL/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9995642617785729,
      "result": {
        "type": "Text_excerpt",
        "value": "|Host | Downloads |\n |-----|-----------|\n |PyPI ||\n |conda|| \n"
      },
      "source": "https://raw.githubusercontent.com/adadiehl/mapGL/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/adadiehl/mapGL/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Copyright (c) 2018 Adam Diehl\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/adadiehl/mapGL/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "mapGL"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "adadiehl"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 53669,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 2505,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/adadiehl/mapGL/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependencies",
        "parent_header": [
          "mapGL"
        ],
        "type": "Text_excerpt",
        "value": "numpy\nbx-python\ncython\nsix\n"
      },
      "source": "https://raw.githubusercontent.com/adadiehl/mapGL/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 13:10:23",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "mapGL"
        ],
        "type": "Text_excerpt",
        "value": "```\nmapGL.py [-h] [-o FILE] [-t FLOAT] [-g GAP] [-v {info,debug,silent}] [-k] input tree qname tname alignments [alignments ...]\n```\n"
      },
      "source": "https://raw.githubusercontent.com/adadiehl/mapGL/master/README.md",
      "technique": "header_analysis"
    }
  ]
}