{
  "application_domain": [
    {
      "confidence": 6.75,
      "result": {
        "type": "String",
        "value": "Audio"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/LifanLiang/EM_BMF"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-05-23T15:38:11Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-06-19T21:30:12Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Robust Boolean matrix factorization via expectation maximization (BEM)"
      },
      "technique": "GitHub_API"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/LifanLiang/EM_BMF/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/LifanLiang/EM_BMF/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "LifanLiang/EM_BMF"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Installing EM_BMF (BEM)"
      },
      "source": "https://raw.githubusercontent.com/LifanLiang/EM_BMF/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installing EM_BMF (BEM)",
        "type": "Text_excerpt",
        "value": "Use pip install. You can also visit https://pypi.org/project/boolem/0.0.5/\n\n```\npip install boolem==0.0.5\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/LifanLiang/EM_BMF/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/LifanLiang/EM_BMF/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "EM_BMF"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "LifanLiang"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 27298,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/LifanLiang/EM_BMF/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependency:",
        "type": "Text_excerpt",
        "value": "(I think it will work as long as Annaconda on Python3 is installed)\n\nnumpy -- 1.11.3\n\nscipy -- 1.1.0\n\nnumba -- 0.40.0\n"
      },
      "source": "https://raw.githubusercontent.com/LifanLiang/EM_BMF/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 15:21:47",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 7
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Example usage:",
        "type": "Text_excerpt",
        "value": "```python\nimport numpy as np\nfrom boolem import BEM\n\ndef synthesis(shape, latent_size, P, noise_p=0.0):\n    '''\n    In this synthesis, the probability of X was sampled from the joint probability of the latent factors.\n    P is the parameter as Beta(1/(1-p),2) for generating the probability in latent factors.\n    '''\n    \n    a = np.zeros((shape[0], latent_size))\n    b = np.zeros((latent_size, shape[1]))\n    X = np.zeros(shape)\n    for l in range(latent_size):\n        a[:,l] = np.random.binomial(1, P[l], shape[0])\n        b[l,:] = np.random.binomial(1, P[l], shape[1])\n        X += np.outer(a[:,l],b[l,:]) \n    X[X>1] = 1\n    flip = np.random.binomial(1, noise_p, X.shape)\n    X_noisy = np.abs(X-flip)\n    return X_noisy, X, a, b\n\n# Generate a Boolean matrice with heterogeneous Boolean factors and uniform noise.   \nX_noisy, X, a, b = synthesis((1000, 1000), 4, np.random.uniform(0.2,0.5,4), noise_p=0.2)\n\n# Feed the model with noisy matrix. \n# Latent_size: the dimension of latent Boolean factors. \n# alpha: the alpha for the beta prior. Default is recommended.\n# beta: the beta for the beta prior. Default is recommended.\n# mask: the matrix with the same shape as X. 0 means the correponding element in X is missing.\n# max_iter: the maximum iteration for gradient-based optimization\nmodel = BEM(np.int8(X_noisy), latent_size=4, alpha=0.95, beta=0.95, mask=np.ones(X.shape, dtype=np.int8), max_iter=200)\nmodel.run()\n\n# After running factorization, the model will contain several new attributes as the output:\n# model.U: the latent factor with the shape (X.shape[0], latent_size)\n# model.Z: the latent facotr with the shape (latent_size, X.shape[1])\n# model.X_hat: reconstructed Boolean matrix from U and Z. Note that values in X_hat is continuous within [0,1]\nprint('Reconstruction error:', np.abs((model.X_hat>0.5)-X).mean())\n\n# You can also try to find the right number of factors by searching for the minimum AIC\nmodel.AIC\n\n```\n"
      },
      "source": "https://raw.githubusercontent.com/LifanLiang/EM_BMF/master/README.md",
      "technique": "header_analysis"
    }
  ]
}