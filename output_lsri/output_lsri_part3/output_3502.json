{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/daggoo/masterPATH"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2017-12-06T18:34:56Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-08-10T14:12:27Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MasterPATH is a exploratory network analysis method to uncover members of molecular pathways leading to the studied phenotype based on the results of functional genomics screening data."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9911847125972363,
      "result": {
        "original_header": "masterPATH",
        "type": "Text_excerpt",
        "value": "MasterPATH is an exploratory network analysis method that employs the shortest path approach and centrality measure to uncover members of active molecular pathways leading to the studied phenotype based on the results of functional genomics screening data.\n \n"
      },
      "source": "https://raw.githubusercontent.com/daggoo/masterPath/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8932050928050476,
      "result": {
        "original_header": "Databases",
        "type": "Text_excerpt",
        "value": "The method works with an integarted network that consists of interaction from the following databases:\nHuman Integrated Protein-Protein Interaction rEference database (HIPPIE): \n"
      },
      "source": "https://raw.githubusercontent.com/daggoo/masterPath/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9850306641914088,
      "result": {
        "original_header": "Output files",
        "type": "Text_excerpt",
        "value": "__file_output + _paths_centrality__ file with paths information is a tab separated text file. File format : _path id_, _path as a list of interaction ids (each interaction is separated by a tab)_, _reserved field_, _centrality_, _hit gene-final implementer pairs that yield this path as a list of HGNC ids separated by semicolon_, _list of the shortest paths ids that yield this path separated by semicolon_, _reserved field_,  _reserved field_, _HGNC id of the node in the path with maximum centrality_, _official symbol of the node in the path with maximum centrality_, _hit gene-final implementer pairs that yield this path as a list of official symbols separated by semicolon_, _path as a list of intercator1-interactor2 pairs  (each interaction is separated by a tab)_, _centrality_, _p-value_. \n"
      },
      "source": "https://raw.githubusercontent.com/daggoo/masterPath/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/daggoo/masterPath/wiki"
      },
      "source": "https://raw.githubusercontent.com/daggoo/masterPath/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/daggoo/masterPath/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/daggoo/masterPATH/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "daggoo/masterPATH"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "masterPATH"
      },
      "source": "https://raw.githubusercontent.com/daggoo/masterPath/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "masterPATH"
        ],
        "type": "Text_excerpt",
        "value": "The easiest way to use masterPATH is to download masterPATH.jar from JAR/ folder.\n\nOtherwise the repo can be cloned into a new e.g. Netbeans IDE project and can be built.\n\nThe source files are available in the src/masterPATH folder.\n\nDependency libraries: -- commons-lang3-3.3.2\n"
      },
      "source": "https://raw.githubusercontent.com/daggoo/masterPath/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9375423246723033,
      "result": {
        "original_header": "Databases",
        "type": "Text_excerpt",
        "value": "http://cbdm-01.zdv.uni-mainz.de/~mschaefer/hippie/download.php \nhttp://hprd.org/download \nhttp://signalink.org/download \nhttp://signor.uniroma2.it/downloads.php \nhttp://www.tfacts.org/TFactS-new/TFactS-v2/index1.html \nhttp://www.cuilab.cn/transmir \nhttp://mirtarbase.mbc.nctu.edu.tw/php/download.php \n"
      },
      "source": "https://raw.githubusercontent.com/daggoo/masterPath/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8103544765543228,
      "result": {
        "original_header": "Output files",
        "type": "Text_excerpt",
        "value": "\n__file_output + _nodes_centrality__ file with nodes information is a tab separated text file. File format : _node id_, _node ofiicial symbol_, _centrality_, _p-value_.\n \n"
      },
      "source": "https://raw.githubusercontent.com/daggoo/masterPath/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/daggoo/masterPATH/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "masterPATH"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "daggoo"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Java",
        "size": 486367,
        "type": "Programming_language",
        "value": "Java"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/daggoo/masterPath/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 12:58:56",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "masterPATH"
        ],
        "type": "Text_excerpt",
        "value": "First, Wrapper and Network classes should be imported:\n\n    import masterPATH.Wrapper;\n    import masterPATH.Network;\n    \nNext, create a Wrapper and a Network objects :\n    \n    Network nw ;\n    Wrapper wr = new Wrapper();\n    \nNext, load network :\n\n     nw = wr.load_network(String file_nodes, file_interactions);\n     \nwhere \n_String file_nodes_ is a full path to a file with network nodes,  \n_String file_interactions_ is a full path to a file with network interactions.\nThe prebuilt network files are available in the Networks/ folder.\n\n\nFinally, perform the computaion for mixed directed and undirected network:\n\n    wr.find_shortest_paths_and_calculate_centrality(\n            nw,\n            file_hitlist,\n            file_fimplementers,\n            file_output,\n            prefix,\n            max_length_for_shortest_path,\n            min_len_for_path,\n            max_len_for_path,\n            folder_for_random_paths,\n            prefix_for_random_paths,\n            number_of_permutations)\n\n\nor for undirected network :\n  \n        wr.find_shortest_paths_and_calculate_centrality_ppi(\n            nw,\n            file_hitlist,\n            file_fimplementers,\n            file_output,\n            prefix,\n            max_length_for_shortest_path,\n            min_len_for_path,\n            max_len_for_path,\n            folder_for_random_paths,\n            prefix_for_random_paths,\n            number_of_permutations)\n            \nwhere :\n\n_Network nw_ is a network object, \n\n_String file_hitlist_ is a full path to a file with hit genes, \n\n_String file_fimplementers_ is a full path to a file with \"final implemmenters\",\n\n_String file_output_ is a full path to an output file,\n\n_String prefix_ is a prefix for the shortest paths ids,\n\n_int max_length_for_shortest_path_ is maximum length for the breadth-first algorithm,\n\n_int min_len_for_path_ is minimum length of the paths for which centrality will be calculated, \n\n_int max_len_for_path_ is maximim length of the paths for which centrality will be calculated,\n\n_String folder_for_random_paths_ is a full path to folder where files for permutation analysis will be stored,\n\n_String prefix_for_random_paths_ is a prefix for the shortest paths ids for permuted hit lists,\n\n_int number_of_permutations_ is number of permutations.\n"
      },
      "source": "https://raw.githubusercontent.com/daggoo/masterPath/master/README.md",
      "technique": "header_analysis"
    }
  ]
}