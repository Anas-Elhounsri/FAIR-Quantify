{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/edwardslab-wustl/dxm"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-04-02T19:20:33Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-11-22T06:48:25Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Deconvolution of Methylation Sequencing Data"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9201115572184189,
      "result": {
        "original_header": "Input file format notes:",
        "type": "Text_excerpt",
        "value": "The methylation data input file should be in a tab-delimited bed-like format: \nchr - chromosome. Note that this field is not used and can be set to a non-standard chromosome name if useful. \nfractionalMethylation - values should be between 0 (fully unmethylated) and 1 (fully methylated), if the program you use for preprocessing outputs values between 0 and 100 please divide by 100 first. \ncoverage - sequencing coverage for that position. Please provide as an integer. \nAll data should be filtered such that the coverage is below the maximum expected sequencing coverage, set as the -m flag in dxm_solveMethylation.\nWe generally recommend collapsing data across strands prior to running DXM. \nDXM generates relative coordinates for internal calculations. As such, it does not explicitly utilize chromosome or position2 data, though these columns are required by DXM to be compatible with BED-like files. DXM computes across all CpGs of a given region, and thus, unique region names should be generated for each region of interest. We recommend adding region names with utilities such as the 'intersect' command from [bedtools](https://bedtools.readthedocs.io/en/latest/). \n"
      },
      "source": "https://raw.githubusercontent.com/edwardslab-wustl/dxm/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.905691422916612,
      "result": {
        "type": "Text_excerpt",
        "value": "DXM performs a local deconvolution of DNA methylation data for one or more regions of the genome. \nDXM was first developed by Jerry Fong while he was a member of the Edwards Lab. He is now a resident physician at Barnes Jewish Hospital. DXM is currently maintained by the Edwards Lab. \n"
      },
      "source": "https://raw.githubusercontent.com/edwardslab-wustl/dxm/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/edwardslab-wustl/dxm/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/edwardslab-wustl/dxm/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "edwardslab-wustl/dxm"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/edwardslab-wustl/dxm/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/edwardslab-wustl/dxm/master/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/edwardslab-wustl/dxm/master/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "Requires python3 (3.5+)\n"
      },
      "source": "https://raw.githubusercontent.com/edwardslab-wustl/dxm/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Required Python Packages:",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "     numpy\n     cython (>=0.24)\nWe recommend installing the anaconda (or similar) python distribution, which will include these packages.\n"
      },
      "source": "https://raw.githubusercontent.com/edwardslab-wustl/dxm/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "To install:",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "Download or clone the repository, then:\n\n    pip install .\n\nFor user-specific installations, run the install command with the --user flag. \n\nThe \"deprecated NumPy API\" and \"import_array\" warnings can be safely ignored.\n"
      },
      "source": "https://raw.githubusercontent.com/edwardslab-wustl/dxm/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Docker Container",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "dxm is also available as a Docker container at: https://hub.docker.com/r/edwardslab/dxm\n\n"
      },
      "source": "https://raw.githubusercontent.com/edwardslab-wustl/dxm/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.8744556458519906,
      "result": {
        "original_header": "Input file format notes:",
        "type": "Text_excerpt",
        "value": "regionName - please make unique name for each region tested (e.g. gene name, CGI ID, enhancer ID, etc.) \n"
      },
      "source": "https://raw.githubusercontent.com/edwardslab-wustl/dxm/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/edwardslab-wustl/dxm/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "GNU General Public License v3.0",
        "spdx_id": "GPL-3.0",
        "type": "License",
        "url": "https://api.github.com/licenses/gpl-3.0",
        "value": "https://api.github.com/licenses/gpl-3.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "dxm"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "edwardslab-wustl"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 44456,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 285,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/edwardslab-wustl/dxm/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://bedtools.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/edwardslab-wustl/dxm/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jredwards417",
          "type": "User"
        },
        "date_created": "2021-05-14T18:00:34Z",
        "date_published": "2021-05-14T18:21:47Z",
        "description": "v1.0.1",
        "html_url": "https://github.com/edwardslab-wustl/dxm/releases/tag/v1.0.1",
        "name": "DXM v1.0.1",
        "release_id": 42975114,
        "tag": "v1.0.1",
        "tarball_url": "https://api.github.com/repos/edwardslab-wustl/dxm/tarball/v1.0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/edwardslab-wustl/dxm/releases/42975114",
        "value": "https://api.github.com/repos/edwardslab-wustl/dxm/releases/42975114",
        "zipball_url": "https://api.github.com/repos/edwardslab-wustl/dxm/zipball/v1.0.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jredwards417",
          "type": "User"
        },
        "date_created": "2021-05-04T18:34:47Z",
        "date_published": "2021-05-04T18:36:01Z",
        "description": "v1.0 release",
        "html_url": "https://github.com/edwardslab-wustl/dxm/releases/tag/v1.0",
        "release_id": 42433849,
        "tag": "v1.0",
        "tarball_url": "https://api.github.com/repos/edwardslab-wustl/dxm/tarball/v1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/edwardslab-wustl/dxm/releases/42433849",
        "value": "https://api.github.com/repos/edwardslab-wustl/dxm/releases/42433849",
        "zipball_url": "https://api.github.com/repos/edwardslab-wustl/dxm/zipball/v1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 05:47:48",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick Start with Example Data",
        "type": "Text_excerpt",
        "value": "Data for this example can be found in the example_data folder in the installation folder. The methylation data input file should be in a tab-delimited bed-like format:\n\n\\<chr\\> \\<position1\\> \\<position2\\> \\<regionName\\> \\<fractionalMethylation\\> \\<coverage\\>\n\nPlease refer to the notes on input data below to prepare you own data for DXM analysis. Included below are examples of how to process data from several popular bisulfite aligners.\n"
      },
      "source": "https://raw.githubusercontent.com/edwardslab-wustl/dxm/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "dxm_estimateFracs",
        "parent_header": [
          "Quick Start with Example Data"
        ],
        "type": "Text_excerpt",
        "value": "Estimate the fractional prevalence of underlying subpopulations (Optional).\n\nExample: \n\n    dxm_estimateFracs -i sampleInput.bed -k 3 -o testPrevalence\n\nNotes: \n\n  -i specifies the input methylation data\n\n  -k specifies the number of expected subpopulations\n\n  -o specifies a prefix for the output file\n\nThe output is \\<prefix\\>\\_solvedPrecalences.txt (e.g. testPrevalence_solvedPrevalences.txt). Each row is the fractional prevalence of a subpopulation, ordered smallest to largest. Note that this utility is INCOMPATIBLE with dxm_solveMethylation, which has its own fractional prevalence solution call.\n\n"
      },
      "source": "https://raw.githubusercontent.com/edwardslab-wustl/dxm/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "dxm_solveMethylation",
        "parent_header": [
          "Quick Start with Example Data"
        ],
        "type": "Text_excerpt",
        "value": "Deconvolves processed methylation sequencing data.\n\nExample: \n\n    dxm_solveMethylation -i sampleInput.bed -c 400 -o testSample\n\nNotes: \n\n  -i specifies the input methylation data\n\n  -c specifies the maximum coverage (default 400)\n\n  -o specifies a prefix for the output file\n\nSet the -c flag to the maximum coverage in the input file.  Increasing -c above the maximum coverage will needlessly increase memory usage. Additional flags for user specified advanced parameters can be seen using the --help flag.\n\nDXM computational time scales with number of subpopulations, number of CpGs, and maximum coverage. DXM solved eRRBS and Methyl-Seq samples for 2 subpopulations at average coverage of 60x in ~2 hours.\n\nThe outputs of dxm_solveMethylation are:\n- \\<prefix\\>_reconstructed_1_subpops.txt  - regions with 1 major profile\n- \\<prefix\\>_reconstructed_2_subpops.txt  - regions with 2 major methylation profiles\n- \\<prefix\\>_allVitProb.txt  - list of all relative posterior probabilities\n\n\\<prefix\\> = testSample in this example.\n\nThese are tab-delimited files. The format for \\<prefix\\>_reconstructed_1_subpops.txt is:\n1. chromosome\n2. position\n3. position2\n4. region name\n5. methylation state of major (only) subpopulation\n\nThe format for \\<prefix\\>_reconstructed_2_subpops.txt is:\n1. chromosome\n2. position\n3. position2\n4. region name\n5. methylation state of minor subpopulation\n6. methylation state of major subpopulation\n\n"
      },
      "source": "https://raw.githubusercontent.com/edwardslab-wustl/dxm/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "dxm_callIDMR",
        "parent_header": [
          "Quick Start with Example Data"
        ],
        "type": "Text_excerpt",
        "value": "Call intrasample differentially methylated regions from solved methylation profiles.\n\nExample: \n\n    dxm_callIDMR -v testSample_allVitProb.txt -m testSample_reconstructed_2_subpops.txt -o putative\n\nNotes: \n\n-v specifies the posterior probability file output by DXM_solveMethylation\n\n-m specifies the reconstructed subpopulation file (e.g. for 2 subpopulations) output by DXM_solveMethylation\n\n-o specifes a prefix for the output file\n\nThe output of dxm_callIDMR is \\<prefix\\>_DXM_dmrs.txt (e.g. putative_DXMdmrs.txt). Its format is tab-delimited:\n\t1. chromosome\n\t2. start coordinate\n\t3. end coordinate\n\t4. region name\n\nIf there are multiple putative iDMRs for the same region, they will have the same corresponding region name.\n\n"
      },
      "source": "https://raw.githubusercontent.com/edwardslab-wustl/dxm/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Examples for creating input files:",
        "type": "Text_excerpt",
        "value": "1. Convert your methylation data to a tab-delimited BED-like file with these columns: chromosome position1 position2 methylation_level coverage. See examples below.\n2. Download the CGI bed file using the [UCSC Genome Browser Table Browser](https://genome.ucsc.edu/cgi-bin/hgTables) to a file named cgi.bed. Be sure to use the appropriate genome version to match your data.\n3. Overlap the data and filter the correct columns: \n\n    bedtools intersect -wo -a methylation.bed -b cgi.bed | awk '{print $1\"\\t\"$2\"\\t\"$3\"\\t\"$9\"\\t\"$4\"\\t\"$5;}' > dxm_in.bed\n\nAlternatively, if you want to use the regions +/- 5kb around the TSS for refSeq annotated genes (hg19) you can download and unzip the file refGene_hg19_10kb_fixed.txt.gz from the example_data directory. This file should work directly in place of the cgi.bed file in the command above.  You can also use any bed file of any feature or set of coordinates you want to use for analysis. However, you may need to change which columns are printed in the awk statement.\n"
      },
      "source": "https://raw.githubusercontent.com/edwardslab-wustl/dxm/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "To convert your methylation data to a tab-delimited BED-like file:",
        "parent_header": [
          "Examples for creating input files:"
        ],
        "type": "Text_excerpt",
        "value": "If you are using [bismark](https://www.bioinformatics.babraham.ac.uk/projects/bismark/), start with the .cov produced by bismark_methylation_extractor (chr pos1 pos2 methylation meth_cov unmeth_cov). If your file is called methylation.bismark.cov, then you can convert it using:  \n\n    awk '{cov = $5 + $6; print $1\"\\t\"$2\"\\t\"$3\"\\t\"$4\"\\t\"cov;}' methylation.bismark.cov > methylation.bed\n\nIf you are using [bsmap](https://code.google.com/archive/p/bsmap/), use the output from the methratio.py script. We recomend using the -g flag to collapse CpGs across strands.  If your file is called methratio.txt, then you can convert it using:\n\n    awk '{if($4 == \"CG\") { pos2=$2 + 1; print $1\"\\t\"$2\"\\t\"pos2\"\\t\"$5\"\\t\"$6;}}' methratio.txt > methylation.bed\n\nIf you are using [biscuit](https://huishenlab.github.io/biscuit/), the bed output from vcf2bed can be used directly instead of the methylation.bed file in the bed intersect command above.  If you use the mergecg command in the biscuit pipeline (recommended), you must first extract the appropriate columns. If your file after merging is called merge.bed, then you can convert it using:\n\n    cut -f 1-5 merge.bed > methylation.bed\n\n"
      },
      "source": "https://raw.githubusercontent.com/edwardslab-wustl/dxm/master/README.md",
      "technique": "header_analysis"
    }
  ]
}