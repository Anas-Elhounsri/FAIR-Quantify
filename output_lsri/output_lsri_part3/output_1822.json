{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/gjun/muCNV"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-12-26T17:41:11Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-01-26T16:39:14Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.907377600709792,
      "result": {
        "original_header": "muCNV",
        "type": "Text_excerpt",
        "value": "Multi-sample SV genotyper for large-scale WGS data \nmuCNV uses multiple steps for multi-sample SV genotyping, to handle large number of samples and to enable efficient parallelization: \n0. Generate binary interval file from input VCF \n1. Generate *pileups* from CRAM/BAM files using candidate list of SVs\n2. Merge individual pileups to generate 'merged' pileups\n3. Multi-sample genotyping from merged pileups \n* The 'merging' step is optional, but is recommended for ~ >500 samples. \n* By default, merging will create pileups separated by chromosomes. \n* When genotyping merged pileups, do not add 'chr' postfixes in your 'list' file\n \n"
      },
      "source": "https://raw.githubusercontent.com/gjun/muCNV/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9161163603221737,
      "result": {
        "original_header": "Genotype",
        "type": "Text_excerpt",
        "value": "```\n$ muCNV genotype [-i <string>] [-f <string>] [-V <string>] [-v <string>] [-o <string>] [-l] [-n <integer-integer>] \n\n   -p <number(0-1.0)>,  --pmax <number(0-1.0)>\n     Maximum overlap between depth clusters\n\n   -x <string>,  --exclude <string>\n     List of sample IDs to be excluded from genotyping\n\n   -n <integer-integer>,  --numbers <integer-integer>\n     variants in range (from-to) only from the binary SV index file\n\n   -r <chr:startpos-endpos>,  --region <chr:startpos-endpos>\n     Genotype specific genomic region\n\n   -c <integer (1-24)>,  --chr <integer (1-24)>\n     Chromosome number (1-24) if pileup contains only a single chromosome (default for merged)\n\n   -i <string>,  --index <string>\n     Text file containing list of pileups (required)\n\n   -f <string>,  --gcFile <string>\n     File containing GC content information\n\n   -V <string>,  --interVal <string>\n     Binary interval file containing candidate SVs\n\n   -v <string>,  --vcf <string>\n     VCF file containing candidate SVs\n\n   -o <string>,  --out <string>\n     Output filename\n\n   -l,  --lessheader\n     Do not print header in genoptyed VCF\n\n   -a,  --all\n     Include all variants that failed genotyping in the output VCF\n```    \n - GC content file for human reference genome build 38 is provided in resources/GRCh38.v3.gc\n - Either VCF file (-v) or binary interval file (-V) is required\n - GRCh38 and Interval file should be the same to the ones used for pileup and merging\n \n"
      },
      "source": "https://raw.githubusercontent.com/gjun/muCNV/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/gjun/muCNV/tree/master/tclap-1.2.1/docs"
      },
      "technique": "file_exploration"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/gjun/muCNV/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/gjun/muCNV/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "gjun/muCNV"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "muCNV"
      },
      "source": "https://raw.githubusercontent.com/gjun/muCNV/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "muCNV"
        ],
        "type": "Text_excerpt",
        "value": "Required: g++ compiler environment and HTSlib (https://github.com/samtools/htslib).\nIf HTSlib is not installed system-wide, please manually add -I(HTSlib include directory) and -L(HISlib library directory) to Makefile. \n```\n$ make\n```\n\nTo test, \n```\n$ bin/muCNV  \n```\nYou can copy muCNV binary to one of your $PATH locations (e.g. /usr/local/bin).\n"
      },
      "source": "https://raw.githubusercontent.com/gjun/muCNV/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.8503364624119422,
      "result": {
        "original_header": "muCNV",
        "type": "Text_excerpt",
        "value": "* The 'merging' step is optional, but is recommended for ~ >500 samples. \n* By default, merging will create pileups separated by chromosomes. \n* When genotyping merged pileups, do not add 'chr' postfixes in your 'list' file\n \n"
      },
      "source": "https://raw.githubusercontent.com/gjun/muCNV/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9893344651072099,
      "result": {
        "original_header": "Pileup",
        "type": "Text_excerpt",
        "value": " - GC content file for human reference genome build 38 is provided in resources/GRCh38.v3.gc\n - Either VCF file (-v) or binary interval file (-V) is required\n  \n"
      },
      "source": "https://raw.githubusercontent.com/gjun/muCNV/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8168586015448697,
      "result": {
        "original_header": "Generating variant list from input VCF",
        "type": "Text_excerpt",
        "value": "```\n$ muCNV vcf2int -v <VCF> -i <interval file> -p\n\n-i, --interval\n  Name of the interval file to be created\n\n-v, --vcf\n  Name of the input VCF file\n  \n-p, --print\n  Optional flag to print out list of SVs to stdout\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/gjun/muCNV/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8835442851643516,
      "result": {
        "original_header": "Pileup",
        "type": "Text_excerpt",
        "value": "```\n$ muCNV pileup -s <sample ID> -v <VCF> -V <Interval> -f <GRCh file> -b <BAM/CRAM file> -o <output prefix>\n\n   -o <string>,  --outdir <string>\n     Output directory, current directory if omitted\n\n   -s <string>,  --sample <string>\n     (required)  Sample ID, also used for output filenames (.pileup, .var,\n     .idx)\n\n   -f <string>,  --gcFile <string>\n     File containing GC content information (default: GRCh38.gc)\n\n   -V <string>,  --interVal <string>\n     Binary interval file containing candidate SVs\n\n   -v <string>,  --vcf <string>\n     VCF file containing candidate SVs\n\n   -b <string>,  --bam <string>\n     (required)  Input BAM/CRAM file name\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/gjun/muCNV/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/gjun/muCNV/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Copyright 2018, Goo Jun\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/gjun/muCNV/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "muCNV"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "gjun"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 603228,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 137798,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 128403,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 57972,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 39931,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Java",
        "size": 12042,
        "type": "Programming_language",
        "value": "Java"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CSS",
        "size": 10200,
        "type": "Programming_language",
        "value": "CSS"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 8231,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "TeX",
        "size": 4876,
        "type": "Programming_language",
        "value": "TeX"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "M4",
        "size": 4256,
        "type": "Programming_language",
        "value": "M4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Roff",
        "size": 3862,
        "type": "Programming_language",
        "value": "Roff"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 3592,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "XS",
        "size": 1031,
        "type": "Programming_language",
        "value": "XS"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/gjun/muCNV/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "gjun",
          "type": "User"
        },
        "date_created": "2020-06-29T04:58:53Z",
        "date_published": "2020-06-29T05:00:54Z",
        "description": "muCNV v0.9.7 release \r\n\r\n- This version is used to create TOPMed freeze 8 SV callset",
        "html_url": "https://github.com/gjun/muCNV/releases/tag/v0.9.7",
        "name": "muCNV v0.9.7 release",
        "release_id": 28010530,
        "tag": "v0.9.7",
        "tarball_url": "https://api.github.com/repos/gjun/muCNV/tarball/v0.9.7",
        "type": "Release",
        "url": "https://api.github.com/repos/gjun/muCNV/releases/28010530",
        "value": "https://api.github.com/repos/gjun/muCNV/releases/28010530",
        "zipball_url": "https://api.github.com/repos/gjun/muCNV/zipball/v0.9.7"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 06:25:19",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 20
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Basis usage:",
        "parent_header": [
          "muCNV"
        ],
        "type": "Text_excerpt",
        "value": "```\n$ mucnv [command] [options]\n$ mucnv [command] --help\n```    \n"
      },
      "source": "https://raw.githubusercontent.com/gjun/muCNV/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Use-case Example",
        "type": "Text_excerpt",
        "value": "0. Process reference file for GC-content indexing\nFasta file should also have .fai file in the same path. (If not, run samtools faidx)\nPre-generated files for GRCh37 and GRCh38 exist under resource/ directory.\n```\n$ muCNV gcidx -f [path_to_fasta] -o [output_gcidx_filename]\n```\n\n1. Input files \n- BAM or CRAM files \n```\nsample1.cram \nsample2.cram\nsample3.cram\n...\nsample10.cram\n```\n- VCF file containing candidate SV variants\n```\ncandidate_sv.vcf\n```\n\n2. Generate 'interval' file from VCF\n```\n$ muCNV vcf2int -v candidate_sv.vcf -i candidate_sv.interavls \n```\n\n3. Generate pileup from each CRAM file\nAssuming muCNV source directory is at /home/user1/muCNV and pileup files are being created under $(pwd)/pileup\n```\n$ mkdir pileup\n$ muCNV pileup -s sample1 -V candiate_sv.intervals -f /home/user1/muCNV/resource/GRCh38.v3.gc -o pileup/sample1\n$ muCNV pileup -s sample2 -V candiate_sv.intervals -f /home/user1/muCNV/resource/GRCh38.v3.gc -o pileup/sample2\n...\n$ muCNV pileup -s sample10 -V candiate_sv.intervals -f /home/user1/muCNV/resource/GRCh38.v3.gc -o pileup/sample10\n```\nYou can simplify/parallelize pileup step by using GNU Parallel or GNU Make.\n\n4. Genotype candidate SVs from pileup data\nMake a text file containing the base names of each pileup file, say, pileup.list\n```\n$ cat pileup.list\npileup/sample1\npileup/sample2\n...\npileup/sample10\n```\nThen run genotyping step to create the output file, genotyped.vcf:\n```\n$ muCNV genotype -V candidate_sv.intervals -i pileup.list -o genotyped.vcf -f /home/user1/muCNV/resource/GRCh38.v3.gc\n```\n"
      },
      "source": "https://raw.githubusercontent.com/gjun/muCNV/master/README.md",
      "technique": "header_analysis"
    }
  ]
}