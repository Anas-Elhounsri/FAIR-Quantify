{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citations",
        "parent_header": [
          "MetaSanity v1.3.0"
        ],
        "type": "Text_excerpt",
        "value": "\r\n**MetaSanity** would not be possible without the open-source contributions of several research teams. Please include the following citations\r\nwhen using **MetaSanity**:\r\n\r\nNeely C., Graham E. D., Tully, B. J. (2020). MetaSanity: An integrated, customizable microbial genome evaluation and annotation pipeline. Bioinformatics, Volume 36, Issue 15, 1 August 2020, Pages 4341\u20134344, https://doi.org/10.1093/bioinformatics/btaa512\r\n\r\nAramaki T., Blanc-Mathieu R., Endo H., Ohkubo K., Kanehisa M., Goto S., Ogata H. (2019). KofamKOALA: KEGG ortholog assignment based on profile HMM and adaptive score threshold. bioRxiv doi: https://doi.org/10.1101/602110. \r\n\r\nBayer, M. (2012). SQLAlchemy. In Amy Brown and Greg Wilson, editors, \u201cThe Architecture of Open Source Applications Volume II: Structure, Scale, and a Few More Fearless Hacks.\u201d http://aosabook.org. \r\n\r\nBradshaw, R., Behnel S., Seljebotn D.S., Ewing, G., et al. (2011). The Cython compiler. http://cython.org. \r\n\r\nBuchfink B., Xie C., Huson D. H. (2015). Fast and sensitive protein alignment using DIAMOND. Nature Methods 12, 59-60. doi:10.1038/nmeth.3176. \r\n\r\nCamacho C., Coulouris G., Avagyan V., Ma N., Papadopoulos J., Bealer K., & Madden T.L. (2008) \"BLAST+: architecture and applications.\" BMC Bioinformatics 10:421 https://bmcbioinformatics.biomedcentral.com/articles/10.1186/1471-2105-10-421. \r\n\r\nCantarel, B. L., Coutinho, P. M., Rancurel, C., Bernard, T., Lombard, V., & Henrissat, B. (2009). The Carbohydrate-Active EnZymes database (CAZy): an expert resource for Glycogenomics. Nucleic Acids Research, 37(Database), D233\u2013D238. http://doi.org/10.1093/nar/gkn663. \r\n\r\nEddy S.R. (2011) Accelerated Profile HMM Searches. PLoS Comput Biol 7(10): e1002195. https://doi.org/10.1371/journal.pcbi.1002195. \r\n\r\nFinn, R. D., Coggill, P., Eberhardt, R. Y., Eddy, S. R., Mistry, J., Mitchell, A. L., et al. (2016). The Pfam protein families database: towards a more sustainable future. Nucleic Acids Research, 44(D1), D279\u2013D285. http://doi.org/10.1093/nar/gkv1344. \r\n\r\nGraham E. D., Heidelberg J. F., Tully B. J. (2018) Potential for primary productivity in a globally-distributed bacterial phototroph. ISME J 350, 1\u20136. \r\n\r\nHaft, D. H., Selengut, J. D., & White, O. (2003). The TIGRFAMs database of protein families. Nucleic Acids Research, 31(1), 371\u2013373. http://doi.org/10.1093/nar/gkg128. \r\n\r\nHyatt, D., Chen, G. L., Locascio, P. F., Land, M. L., Larimer, F. W., & Hauser, L. J. (2010). Prodigal: prokaryotic gene recognition and translation initiation site identification. BMC bioinformatics, 11, 119. doi:10.1186/1471-2105-11-119. \r\n\r\nISO/IEC. (2014). ISO International Standard ISO/IEC 14882:2014(E) \u2013 Programming Language C++. [Working draft]. Geneva, Switzerland: International Organization for Standardization (ISO). Retrieved from https://isocpp.org/std/the-standard. \r\n\r\nJain C., et al. 2019. High-throughput ANI Analysis of 90K Prokaryotic Genomes Reveals Clear Species Boundaries. Nature Communications, doi: 10.1038/s41467-018-07641-9. \r\n\r\nJones, P., Binns, D., Chang, H. Y., Fraser, M., Li, W., McAnulla, C., \u2026 Hunter, S. (2014). InterProScan 5: genome-scale protein function classification. Bioinformatics (Oxford, England), 30(9), 1236\u20131240. doi:10.1093/bioinformatics/btu031. \r\n\r\nLagesen, K., Hallin, P., R\u00f8dland, E. A., Staerfeldt, H. H., Rognes, T., & Ussery, D. W. (2007). RNAmmer: consistent and rapid annotation of ribosomal RNA genes. Nucleic acids research, 35(9), 3100\u20133108. doi:10.1093/nar/gkm160. \r\n\r\nMarchler-Bauer A., Bo Y., Han L., He J., Lanczycki C. J., Lu S., Chitsaz F., Derbyshire M. K., Geer R. C., Gonzales N. R., Gwadz M., Hurwitz D. I., Lu F., Marchler G. H., Song J. S., Thanki N., Wang Z., Yamashita R. A.,  \r\n\r\nMatsen F. A., Kodner R. B., Armbrust E. V. (2010). pplacer: linear time maximum-likelihood and Bayesian phylogenetic placement of sequences onto a fixed reference tree. BMC Bioinformatics 11: doi:10.1186/1471-2105-11-538. \r\n\r\nMerkel, D. (2014). Docker: Lightweight Linux Containers for Consistent Development and Deployment. Linux J. \r\n\r\nMi, H., Muruganujan, A., Huang, X., Ebert, D., Mills, C., Guo, X., & Thomas, P. D. (2019). Protocol Update for large-scale genome and gene function analysis with the PANTHER classification system (v.14.0). Nature Protocols, 1\u201321. http://doi.org/10.1038/s41596-019-0128-8. \r\n\r\nNielsen H. (2017) Predicting Secretory Proteins with SignalP. In: Kihara D. (eds) Protein Function Prediction. Methods in Molecular Biology, vol 1611. Humana Press, New York, NY. \r\n\r\nParks, D. H., Chuvochina, M., Waite, D. W., Rinke, C., Skarshewski, A., Chaumeil, P.-A., & Hugenholtz, P. (2018). A standardized bacterial taxonomy based on genome phylogeny substantially revises the tree of life. Nature Biotechnology, 15, 1\u201314. http://doi.org/10.1038/nbt.4229. \r\n\r\nParks, D. H., Imelfort M., Skennerton C. T., Hugenholtz P., Tyson G. W. (2015). CheckM: assessing the quality of microbial genomes recovered from isolates, single cells, and metagenomes. Genome Research, 25: 1043\u20131055. \r\n\r\nPython Software Foundation. Python Language Reference, version 3. http://www.python.org \r\n\r\nRawlings, N. D., Waller, M., Barrett, A. J., & Bateman, A. (2013). MEROPS: the database of proteolytic enzymes, their substrates and inhibitors. Nucleic Acids Research, 42(D1), D503\u2013D509. http://doi.org/10.1093/nar/gkt953. \r\n\r\nRoux, S., Enault, F., Hurwitz, B. L., & Sullivan, M. B. (2015). VirSorter: mining viral signal from microbial genomic data. PeerJ, 3, e985. https://doi.org/10.7717/peerj.985. \r\n\r\nSeemann T. (2014). Prokka: rapid prokaryotic genome annotation. Bioinformatics 30(14), 2068-9. PMID:24642063. \r\n\r\nStepanauskas, R., Fergusson, E. A., Brown, J., Poulton, N. J., Ben Tupper, Labont\u00e9, J. M., et al. (2017). Improved genome recovery and integrated cell-size analyses of individual uncultured microbial cells and viral particles. Nature Communications, 8(1), 1\u201310. http://doi.org/10.1038/s41467-017-00128-z. \r\n\r\nThrash, J. C., Weckhorst, J. L., & Pitre, D. M. (2015). Cultivating Fastidious Microbes. In Hydrocarbon and Lipid Microbiology Protocols (Vol. 39, pp. 57\u201378). Berlin, Heidelberg: Springer Berlin Heidelberg. http://doi.org/10.1007/8623_2015_67. \r\n\r\nTully, B. J. (2019). Metabolic diversity within the globally abundant Marine Group II Euryarchaea offers insight into ecological patterns. Nature Communications, 10(1), 1\u201312. http://doi.org/10.1038/s41467-018-07840-4. \r\n\r\nTully, B. J., Graham, E. D., & Heidelberg, J. F. (2018). The reconstruction of 2,631 draft metagenome-assembled genomes from the global oceans. Scientific Data, 5, 170203. http://doi.org/10.1038/sdata.2017.203. \r\n\r\nYu, N. Y., Wagner, J. R., Laird, M. R., Melli, G., Rey, S., Lo, R., Dao, P., Sahinalp, S. C., Ester, M., Foster, L.J., and Brinkman, F. S. L. (2010). PSORTb 3.0: improved protein subcellular localization prediction with refined localization subcategories and predictive capabilities for all prokaryotes. Bioinformatics 26(13):1608-1615. \r\n\r\nZhang D., Zheng C., Geer L. Y., Bryant S. H. (2017). CDD/SPARCLE: functional classification of proteins via subfamily domain architectures. Nucleic Acids Research 45(D1): D200-D203. doi: 10.1093/nar/gkw1129. \r\n\r\nZhang, H., Yohe, T., Huang, L., Entwistle, S., Wu, P., Yang, Z., et al. (2018). dbCAN2: a meta server for automated carbohydrate-active enzyme annotation. Nucleic Acids Research, 46(W1), W95\u2013W101. http://doi.org/10.1093/nar/gky418. \r\n"
      },
      "source": "https://raw.githubusercontent.com/cjneely10/MetaSanity/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/cjneely10/MetaSanity"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-08-11T21:10:23Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-08-13T21:04:40Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Pipeline for major biological analyses."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9889504331790511,
      "result": {
        "original_header": "About",
        "type": "Text_excerpt",
        "value": "\r\n**MetaSanity v1.3.0** provides a unified workflow for genome assessment and functional annotation that combines\r\nall outputs into a single queryable database.\r\n\r\n---\r\nLooking to annotate large numbers of eukaryotic genomes or MAGs? Check out [EukMetaSanity](https://github.com/cjneely10/EukMetaSanity)!\r\n\r\n---\r\n\r \n"
      },
      "source": "https://raw.githubusercontent.com/cjneely10/MetaSanity/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8962490186098698,
      "result": {
        "original_header": "<a href=\"https://github.com/cjneely10/MetaSanity/wiki/4-PhyloSanity\">PhyloSanity</a>",
        "type": "Text_excerpt",
        "value": "Evaluate MAGs for completion and contamination using CheckM, and evaluate redundancy using FastANI. Optionally predict phylogeny using GTDB-Tk.\r\n\r \n"
      },
      "source": "https://raw.githubusercontent.com/cjneely10/MetaSanity/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9690973913076284,
      "result": {
        "original_header": "<a href=\"https://github.com/cjneely10/MetaSanity/wiki/5-FuncSanity\">FuncSanity</a>",
        "type": "Text_excerpt",
        "value": "Customize a functional annotation pipeline to include PROKKA, KEGG, InterProScan, the carbohydrate-active enzymes (CAZy) database, and the MEROPS database. Optionally, MEROPS matches can be filtered to target predicted outer membrane and extracellular proteins using PSORTb and SignalP4.1. KEGG results are processed through KEGG-Decoder to provide visual heatmaps of metabolic functions and pathways.\r\n\r \n"
      },
      "source": "https://raw.githubusercontent.com/cjneely10/MetaSanity/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9888220878096632,
      "result": {
        "original_header": "<a href=\"https://github.com/cjneely10/BioMetaDB\">BioMetaDB</a>",
        "type": "Text_excerpt",
        "value": "\r\nBioMetaDB is a specialized relational database management system (RDBMS) project that integrates modularized storage and retrieval of FASTA records with the metadata describing them. This application uses tab-delimited data files to generate table relation schemas via Python3. Based on SQLAlchemy, BioMetaDB allows researchers to efficiently manage data from the command line by providing operations that include\r\n\r\n- The ability to store information from any valid tab-delimited data file and to retrieve FASTA records or annotations related to these datasets by using SQL-optimized command-line queries.\r\n- The ability to run all CRUD operations (create, read, update, delete) from the command line and from python scripts.\r\n\r\nOutput from both workflows is stored into a BioMetaDB project, providing users a simple interface to comprehensively examine their data. Users can query application results used across the entire genome set for specific information that is relevant to their research, allowing the potential to screen genomes based on returned taxonomy, quality, annotation, putative metabolic function, or any combination thereof.\r\n\r \n"
      },
      "source": "https://raw.githubusercontent.com/cjneely10/MetaSanity/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9717010265164324,
      "result": {
        "original_header": "Licensing notes",
        "type": "Text_excerpt",
        "value": "\r\nThe use of SignalP4.1 and RNAmmer1.2 requires accepting an additional academic license agreement upon download. Binaries for these programs are thus not distributed with **MetaSanity**.\r\n\r \n"
      },
      "source": "https://raw.githubusercontent.com/cjneely10/MetaSanity/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/cjneely10/MetaSanity/wiki/2-Installation-Conda"
      },
      "source": "https://raw.githubusercontent.com/cjneely10/MetaSanity/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/cjneely10/MetaSanity/wiki"
      },
      "source": "https://raw.githubusercontent.com/cjneely10/MetaSanity/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/cjneely10/MetaSanity/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/cjneely10/MetaSanity/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "cjneely10/MetaSanity"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MetaSanity v1.3.0"
      },
      "source": "https://raw.githubusercontent.com/cjneely10/MetaSanity/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/cjneely10/MetaSanity/master/conda-install.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/cjneely10/MetaSanity/master/psortb-install.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 0.9998807184472396,
      "result": {
        "original_header": "<a href=\"https://github.com/cjneely10/MetaSanity/wiki/2-Installation-Conda\">Installing MetaSanity</a>",
        "type": "Text_excerpt",
        "value": "MetaSanity is installable through Conda.\r\nSee the [wiki page](https://github.com/cjneely10/MetaSanity/wiki/2-Installation-Conda) for complete installation instructions.\r\n\r \n"
      },
      "source": "https://raw.githubusercontent.com/cjneely10/MetaSanity/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/cjneely10/MetaSanity/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "GNU General Public License v3.0",
        "spdx_id": "GPL-3.0",
        "type": "License",
        "url": "https://api.github.com/licenses/gpl-3.0",
        "value": "https://api.github.com/licenses/gpl-3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "The MIT License (MIT)\n\nCopyright (c) 2019 Benjamin Tully\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/cjneely10/MetaSanity/master/BioData/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MetaSanity"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "cjneely10"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 325141,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Cython",
        "size": 183759,
        "type": "Programming_language",
        "value": "Cython"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 5623,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 2597,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/cjneely10/MetaSanity/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 18:57:26",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 34
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Examples",
        "parent_header": [
          "MetaSanity v1.3.0",
          "About"
        ],
        "type": "Text_excerpt",
        "value": "Output a list, FASTA contigs, or FASTA proteins for:\r\n\r\n- all genomes &gt;90% complete from the Family Pelagibacteraceae\r\n- all genomes that contain extracellular MEROPS-detected peptidases\r\n- all protein sequences of the nifH (K02588) in genomes &ge;70% complete with &lt;10% contamination\r\n\r\n**PhyloSanity** and **FuncSanity** have large download requirements, making high-powered personal computers and academic servers the best option for running its analyses.\r\nOnce complete, the results can be analyzed using **BioMetaDB** on any computer that supports Python3.\r\n    \r"
      },
      "source": "https://raw.githubusercontent.com/cjneely10/MetaSanity/master/README.md",
      "technique": "header_analysis"
    }
  ]
}