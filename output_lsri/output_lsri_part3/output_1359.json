{
  "application_domain": [
    {
      "confidence": 23.54,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Reference",
        "parent_header": [
          "Systems Metabolomics using Interpretable Learning and Evolution (SMILE)"
        ],
        "type": "Text_excerpt",
        "value": "Linear_Genetic_Programming_.\nAuthors: Brameier, Markus F., Banzhaf, Wolfgang\n\n.. _Linear_Genetic_Programming: https://www.springer.com/gp/book/9780387310299\n"
      },
      "source": "https://raw.githubusercontent.com/MIB-Lab/SMILE/master/README.rst",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/MIB-Lab/SMILE"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-05-05T19:03:04Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-05-05T19:03:04Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Linear Genetic Programming Implemented in python with sklearn compatible API"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9951195545911717,
      "result": {
        "original_header": "Systems Metabolomics using Interpretable Learning and Evolution (SMILE)",
        "type": "Text_excerpt",
        "value": "**SMILE** package implements Linear Genetic Programming (LGP) algorithm in python, with a scikit-learn style API. It is\nmainly used in data mining and finding feature interactions. Note it currently only support binary classification data.\n \n"
      },
      "source": "https://raw.githubusercontent.com/MIB-Lab/SMILE/master/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9454449565507062,
      "result": {
        "original_header": "Result Visualization",
        "type": "Text_excerpt",
        "value": "Preparation of two files\n^^^^^^^^^^^^^^^^^^^^^^^^\n1. ``.pkl`` file is produce (using ``save_model()`` method) when running the algorithm \n"
      },
      "source": "https://raw.githubusercontent.com/MIB-Lab/SMILE/master/README.rst",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/MIB-Lab/SMILE/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MIB-Lab/SMILE/master/examples/breast_cancer_example.ipynb"
      },
      "source": "https://raw.githubusercontent.com/MIB-Lab/SMILE/master/examples/breast_cancer_example.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/MIB-Lab/SMILE/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MIB-Lab/SMILE"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Systems Metabolomics using Interpretable Learning and Evolution (SMILE)"
      },
      "source": "https://raw.githubusercontent.com/MIB-Lab/SMILE/master/README.rst",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "Systems Metabolomics using Interpretable Learning and Evolution (SMILE)"
        ],
        "type": "Text_excerpt",
        "value": "This package is published on pypi. Install using pip.\n\n.. code-block:: python\n\n    pip install lgp\n"
      },
      "source": "https://raw.githubusercontent.com/MIB-Lab/SMILE/master/README.rst",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9976266973179241,
      "result": {
        "original_header": "Sample Data",
        "type": "Text_excerpt",
        "value": "Sample metabolomic data on AD can be found in *dataset* folder or directly downloaded from the `website. <https://smile-mib.cs.queensu.ca/>`_\n \n"
      },
      "source": "https://raw.githubusercontent.com/MIB-Lab/SMILE/master/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.999526876590321,
      "result": {
        "original_header": "Result Visualization",
        "type": "Text_excerpt",
        "value": "File error checking: Download error checking file `input_file_error_checking.py <https://github.com/ChengyuanSha/LGPWeb/blob/master/input_file_error_checking.py>`_.\nPut your prepared files in the same directory and run ``input_file_error_checking.py``. \nWeb\n^^^^^\nUpload result files to `result visualization website (herokuapp hosting). <https://smile-mib.herokuapp.com/>`_\nor `result visualization website (Queen's CS hosting). <https://smile-mib.cs.queensu.ca/>`_\nThis will help you visualize the result.\nNote the herokuapp web server uses ephemeral filesystem, that means all files are lost\nwhen you restart the web. \nLocal\n^^^^^^^\nYou can also run the visualization locally. Download `website source code. <https://github.com/ChengyuanSha/LGPWeb>`_\nAfter installing all requirements (listed in requirements.txt), you can run this website in your local browser.\n \n"
      },
      "source": "https://raw.githubusercontent.com/MIB-Lab/SMILE/master/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999999999999432,
      "result": {
        "type": "Text_excerpt",
        "value": ".. image:: https://readthedocs.org/projects/smile-mib/badge/?version=latest\n    :target: https://smile-mib.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n.. image:: https://api.codacy.com/project/badge/Grade/c8897f8173434a8798896a8f94d0c2c0\n    :target: https://www.codacy.com/manual/ChengyuanSha/linear_genetic_programming?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=ChengyuanSha/linear_genetic_programming&amp;utm_campaign=Badge_Grade\n.. image:: https://badge.fury.io/py/lgp.svg\n    :target: https://badge.fury.io/py/lgp \n"
      },
      "source": "https://raw.githubusercontent.com/MIB-Lab/SMILE/master/README.rst",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8998462356335467,
      "result": {
        "original_header": "Result Visualization",
        "type": "Text_excerpt",
        "value": "File error checking: Download error checking file `input_file_error_checking.py <https://github.com/ChengyuanSha/LGPWeb/blob/master/input_file_error_checking.py>`_.\nPut your prepared files in the same directory and run ``input_file_error_checking.py``. \n"
      },
      "source": "https://raw.githubusercontent.com/MIB-Lab/SMILE/master/README.rst",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/MIB-Lab/SMILE/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2020 ChengyuanSha\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/MIB-Lab/SMILE/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SMILE"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "MIB-Lab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 41779,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MIB-Lab/SMILE/master/README.rst"
      },
      "technique": "file_exploration"
    }
  ],
  "related_documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://smile-mib.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/MIB-Lab/SMILE/master/README.rst",
      "technique": "regular_expression"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running the algorithm",
        "parent_header": [
          "Systems Metabolomics using Interpretable Learning and Evolution (SMILE)"
        ],
        "type": "Text_excerpt",
        "value": "This algorithm is **computationally expensive**, and it needs to run approximately 1000 times in parallel to produce enough\ndata to analyze. it needs to run in computer clusters like `compute canada. <https://www.computecanada.ca/>`_\n\nCreate a running python file (Run.py) in the same directory as lgp folder, Sample Run.py and classifier usages are shown below:\n\n.. code-block:: python\n\n    from linear_genetic_programming.lgp_classifier import LGPClassifier\n    from sklearn.model_selection import train_test_split\n    from sklearn.metrics import accuracy_score\n    from sklearn import metrics\n\n    # preprocess your data, get data matrix X, label y and names\n    # X, y are in scikit-learn style\n    X, y, names\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)\n    # set own parameter here\n    lgp = LGPClassifier(numberOfInput = X_train.shape[1], numberOfVariable = 200, populationSize = 20,\n                            fitnessThreshold = 1.0, max_prog_ini_length = 40, min_prog_ini_length = 10,\n                            maxGeneration = 2, tournamentSize = 4, showGenerationStat=False,\n                            isRandomSampling=True, maxProgLength = 500)\n    lgp.fit(X_train, y_train)\n    y_pred = lgp.predict(X_test)\n    y_prob = lgp.predict_proba(X_test)[:, 0]\n    lgp.testingAccuracy = accuracy_score(y_pred, y_test)\n    # calculate F1, AUC scores\n    f1_scores = metrics.f1_score(y_test, y_pred, pos_label=0)\n    fpr, tpr, thresholds = metrics.roc_curve(y_test, y_prob, pos_label=0)\n    auc_scores = metrics.auc(fpr, tpr)\n    # store F1, AUC in validationScores\n    lgp.validationScores = {'f1':f1_scores, 'auc':auc_scores}\n    # the result can be saved by calling save_model(). It will produce a pickle file.\n    # save_model() use pickle for object serialization\n    lgp.save_model()\n\nThen use **bash file** to set running parameters and submit jobs. This might be different in different supercomputers.\nHere is an example Bash running script in Compute Canada:\n\n.. code-block:: console\n\n    #!/bin/bash\n    #SBATCH --time=10:00:00\n    #SBATCH --array=1-1000\n    #SBATCH --mem=500M\n    #SBATCH --job-name=\"lgp\"\n\n    python Run.py\n"
      },
      "source": "https://raw.githubusercontent.com/MIB-Lab/SMILE/master/README.rst",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-06 04:42:56",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Video Tutorial",
        "parent_header": [
          "Systems Metabolomics using Interpretable Learning and Evolution (SMILE)"
        ],
        "type": "Text_excerpt",
        "value": "Quick tutorial on SMILE framework: https://youtu.be/7sPdUTrNIZs\n"
      },
      "source": "https://raw.githubusercontent.com/MIB-Lab/SMILE/master/README.rst",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Visualization Demo",
        "parent_header": [
          "Systems Metabolomics using Interpretable Learning and Evolution (SMILE)"
        ],
        "type": "Text_excerpt",
        "value": "Feature Occurrence Analysis\n\n.. image:: assets/feature_occurrence_analysis.gif\n\n|\n\nPairwise Co-occurrence Analysis\n\n.. image:: assets/pairwise_co-occurrence_analysis.gif\n\n|\n\nNetwork Analysis\n\n.. image:: assets/network.gif\n\n"
      },
      "source": "https://raw.githubusercontent.com/MIB-Lab/SMILE/master/README.rst",
      "technique": "header_analysis"
    }
  ]
}