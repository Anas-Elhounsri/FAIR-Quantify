{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/MengweiLi-project/gmqn"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-08-20T11:16:48Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-11-30T20:10:22Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Gaussian Mixture Quantile Normalization (GMQN)"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9846464563783976,
      "result": {
        "original_header": "Gaussian Mixture Quantile Normalization (GMQN)",
        "type": "Text_excerpt",
        "value": "GMQN is a reference based method that removes unwanted technical variations at signal intensity level between samples for 450K and 850K DNA methylation array. It can also easily combined with Subset-quantile Within Array Normalization(SWAN) or Beta-Mixture Quantile (BMIQ) Normalisation to remove probe design bias.\n \n"
      },
      "source": "https://raw.githubusercontent.com/MengweiLi-project/gmqn/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/MengweiLi-project/gmqn/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/MengweiLi-project/gmqn/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MengweiLi-project/gmqn"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/MengweiLi-project/gmqn/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "You can install GMQN R package by following steps. We will submit the R package to Bioconductor soon.\n\n```{r}\ndevtools::install_github('MengweiLi-project/gmqn')\nlibrary(gmqn)\n```"
      },
      "source": "https://raw.githubusercontent.com/MengweiLi-project/gmqn/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/MengweiLi-project/gmqn/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "gmqn"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "MengweiLi-project"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 32713,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MengweiLi-project/gmqn/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependencies",
        "type": "Text_excerpt",
        "value": "GMQN depends on the following packages, all available in CRAN.\n\n* mclust\n* RPMM\n* minfi\n"
      },
      "source": "https://raw.githubusercontent.com/MengweiLi-project/gmqn/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 02:55:40",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 6
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "when you have raw(.idat) data",
        "parent_header": [
          "Demos"
        ],
        "type": "Text_excerpt",
        "value": "```{r}\n# I recommend using minfi to read the raw data and do preprocess.\n# But other packages can also be used. \nlibrary(minfi)\nRGSet = read.metharray.exp(\"idat/\")\nMSet <- preprocessRaw(RGSet) # Other preprocess methods can also be used.\nm = data.frame(getMeth(MSet))\num = data.frame(getUnmeth(MSet))\n\nlibrary(gmqn)\n# You can skip this line if you want to use default reference.\nref = set_reference(m, um)\nbeta.GMQN.swan = gmqn_swan_parallel(m, um, ncpu = 45, ref = ref)\nbeta.GMQN.bmiq = gmqn_bmiq_parallel(m, um, ncpu = 45, ref = ref)\n\n```\n\n\n\n\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/MengweiLi-project/gmqn/master/README.md",
      "technique": "header_analysis"
    }
  ]
}