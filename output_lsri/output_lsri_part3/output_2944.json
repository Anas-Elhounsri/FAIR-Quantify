{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "References",
        "parent_header": [
          "NetCoMi <img src=\"man/figures/NetCoMi_logo_800x400_300dpi.png\" align=\"right\" width=\"260\" />",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "<div id=\"refs\" class=\"references csl-bib-body hanging-indent\">\n\n<div id=\"ref-badri2020shrinkage\" class=\"csl-entry\">\n\nBadri, Michelle, Zachary D. Kurtz, Richard Bonneau, and Christian L.\nM\u00fcller. 2020. \u201cShrinkage Improves Estimation of Microbial Associations\nUnder Different Normalization Methods.\u201d *NAR Genomics and\nBioinformatics* 2 (December). <https://doi.org/10.1093/NARGAB/LQAA100>.\n\n</div>\n\n<div id=\"ref-martin1999measure\" class=\"csl-entry\">\n\nMartin-Fern\u00e1ndez, Josep A, M Bren, Carles Barcel\u00f3-Vidal, and Vera\nPawlowsky-Glahn. 1999. \u201cA Measure of Difference for Compositional Data\nBased on Measures of Divergence.\u201d In *Proceedings of IAMG*, 99:211\u201316.\n\n</div>\n\n<div id=\"ref-yoon2020fast\" class=\"csl-entry\">\n\nYoon, Grace, Christian L. M\u00fcller, and Irina Gaynanova. 2020. \u201cFast\nComputation of Latent Correlations.\u201d *Journal of Computational and\nGraphical Statistics*, June. <http://arxiv.org/abs/2006.13875>.\n\n</div>\n\n</div>\n"
      },
      "source": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/readme.Rmd",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/stefpeschel/NetCoMi"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-04-29T11:28:06Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-23T14:47:04Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Network construction, analysis, and comparison for microbial compositional data"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9684674554853775,
      "result": {
        "original_header": "NetCoMi <img src=\"man/figures/NetCoMi_logo_800x400_300dpi.png\" align=\"right\" width=\"260\" />",
        "type": "Text_excerpt",
        "value": "NetCoMi (**Net**work **Co**nstruction and Comparison for **Mi**crobiome\nData) provides functionality for constructing, analyzing, and comparing\nnetworks suitable for the application on microbial compositional data.\nThe R package implements the workflow proposed in \nNetCoMi allows its users to construct, analyze, and compare microbial\nassociation or dissimilarity networks in a fast and reproducible manner.\nStarting with a read count matrix originating from a sequencing process,\nthe pipeline includes a wide range of existing methods for treating\nzeros in the data, normalization, computing microbial associations or\ndissimilarities, and sparsifying the resulting association/\ndissimilarity matrix. These methods can be combined in a modular fashion\nto generate microbial networks. NetCoMi can either be used for\nconstructing, analyzing and visualizing a single network, or for\ncomparing two networks in a graphical as well as a quantitative manner,\nincluding statistical tests. The package furthermore offers\nfunctionality for constructing differential networks, where only\ndifferentially associated taxa are connected. \n> Exemplary network comparison using soil microbiome data ([\u2018soilrep\u2019\n> data from phyloseq\n> package](https://github.com/joey711/phyloseq/blob/master/data/soilrep.RData)).\n> Microbial associations are compared between the two experimantal\n> settings \u2018warming\u2019 and \u2018non-warming\u2019 using the same layout in both\n> groups.\n \n"
      },
      "source": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/readme.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8091801629940593,
      "result": {
        "original_header": "Table of Contents",
        "type": "Text_excerpt",
        "value": "1.  [Methods included in NetCoMi](#methods-included-in-NetCoMi)\n2.  [Installation](#installation)\n3.  [Development version](#development-version)\n4.  [Usage](#usage)\n    - [Network with SPRING as association\n      measure](#network-with-spring-as-association-measure)\n    - [Export to Gephi](#export-to-gephi)\n    - [Network with Pearson\n      correlations](#network-with-pearson-correlation-as-association-measure)\n    - [\u201cUnsigned\u201d transformation](#using-the-unsigned-transformation)\n    - [Network on genus level](#network-on-genus-level)\n    - [Association matrix as\n      input](#using-an-association-matrix-as-input)\n    - [Network comparison](#network-comparison)\n    - [Differential networks](#differential-networks)\n    - [Dissimilarity-based Networks](#dissimilarity-based-networks)\n    - [Soil microbiome example](#soil-microbiome-example)\n5.  [References](#references)\n \n"
      },
      "source": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/readme.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9017272900786647,
      "result": {
        "original_header": "Methods included in NetCoMi",
        "type": "Text_excerpt",
        "value": "Here is an overview of methods available for network construction,\ntogether with some information on their implementation in R: \n- Euclidean distance\n  ([`vegdist()`](https://www.rdocumentation.org/packages/vegan/versions/2.4-2/topics/vegdist)\n  from `vegan` package)\n- Bray-Curtis dissimilarity\n  ([`vegdist()`](https://www.rdocumentation.org/packages/vegan/versions/2.4-2/topics/vegdist)\n  from `vegan` package)\n- Kullback-Leibler divergence (KLD)\n  ([`KLD()`](https://rdrr.io/cran/LaplacesDemon/man/KLD.html) from\n  `LaplacesDemon` package)\n- Jeffrey divergence (own code using\n  [`KLD()`](https://rdrr.io/cran/LaplacesDemon/man/KLD.html) from\n  `LaplacesDemon` package)\n- Jensen-Shannon divergence (own code using\n  [`KLD()`](https://rdrr.io/cran/LaplacesDemon/man/KLD.html) from\n  `LaplacesDemon` package)\n- Compositional KLD (own implementation following Martin-Fern\u00e1ndez et\n  al. (1999))\n- Aitchison distance\n  ([`vegdist()`](https://www.rdocumentation.org/packages/vegan/versions/2.4-2/topics/vegdist)\n  and [`clr()`](https://rdrr.io/github/zdk123/SpiecEasi/man/clr.html)\n  from `SpiecEasi` package) \n**Methods for zero replacement:** \n"
      },
      "source": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/readme.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9592682991813399,
      "result": {
        "original_header": "Development version",
        "type": "Text_excerpt",
        "value": "Everyone who wants to use new features not included in any releases is\ninvited to install NetCoMi\u2019s development version:\n``` r\ndevtools::install_github(\"stefpeschel/NetCoMi\", \n                         ref = \"develop\",\n                         dependencies = c(\"Depends\", \"Imports\", \"LinkingTo\"),\n                         repos = c(\"https://cloud.r-project.org/\",\n                                   BiocManager::repositories()))\n```\n \nPlease check the\n[NEWS](https://github.com/stefpeschel/NetCoMi/blob/develop/NEWS.md)\ndocument for features implemented on develop branch.\n \n"
      },
      "source": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/readme.Rmd",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/stefpeschel/NetCoMi/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 27
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/stefpeschel/NetCoMi/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "stefpeschel/NetCoMi"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "NetCoMi "
      },
      "source": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/readme.Rmd",
      "technique": "regular_expression"
    }
  ],
  "identifier": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://zenodo.org/badge/latestdoi/259906607"
      },
      "source": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/readme.Rmd",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/man/figures/networkplot_soil.png"
      },
      "source": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/readme.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/man/figures/readme/single_spring_2-1.png"
      },
      "source": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/readme.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/man/figures/readme/single_spring_heat-1.png"
      },
      "source": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/readme.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/man/figures/readme/single_spring_3-1.png"
      },
      "source": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/readme.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/man/figures/readme/single_pears_2-1.png"
      },
      "source": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/readme.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/man/figures/readme/single_pears_3-1.png"
      },
      "source": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/readme.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/man/figures/readme/single_pears_4-1.png"
      },
      "source": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/readme.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/man/figures/readme/single_pears_5-1.png"
      },
      "source": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/readme.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/man/figures/readme/single_pears_hist_1-1.png"
      },
      "source": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/readme.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/man/figures/readme/single_pears_hist_2-1.png"
      },
      "source": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/readme.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/man/figures/readme/single_pears_hist_3-1.png"
      },
      "source": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/readme.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/man/figures/readme/single_pears_unsigned_4-1.png"
      },
      "source": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/readme.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/man/figures/readme/single_genus_1-1.png"
      },
      "source": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/readme.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/man/figures/readme/single_genus_2-1.png"
      },
      "source": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/readme.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/man/figures/readme/single_genus_3-1.png"
      },
      "source": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/readme.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/man/figures/readme/single_genus_5-1.png"
      },
      "source": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/readme.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/man/figures/readme/association_input_2-1.png"
      },
      "source": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/readme.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/man/figures/readme/association_input_3-1.png"
      },
      "source": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/readme.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/man/figures/readme/netcomp_spring_3-1.png"
      },
      "source": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/readme.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/man/figures/readme/netcomp_spring_4-1.png"
      },
      "source": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/readme.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/man/figures/readme/netcomp_spring_5-1.png"
      },
      "source": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/readme.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/man/figures/readme/netcomp_spring_6-1.png"
      },
      "source": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/readme.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/man/figures/readme/diffnet_1-1.png"
      },
      "source": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/readme.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/man/figures/readme/diffnet_3-1.png"
      },
      "source": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/readme.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/man/figures/readme/example14-1.png"
      },
      "source": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/readme.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/man/figures/readme/example15-1.png"
      },
      "source": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/readme.Rmd",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "NetCoMi <img src=\"man/figures/NetCoMi_logo_800x400_300dpi.png\" align=\"right\" width=\"260\" />"
        ],
        "type": "Text_excerpt",
        "value": "``` r\n# Required packages\ninstall.packages(\"devtools\")\ninstall.packages(\"BiocManager\")\n\n# Install NetCoMi\ndevtools::install_github(\"stefpeschel/NetCoMi\", \n                         dependencies = c(\"Depends\", \"Imports\", \"LinkingTo\"),\n                         repos = c(\"https://cloud.r-project.org/\",\n                                   BiocManager::repositories()))\n```\n\nIf there are any errors during installation, please install the missing\ndependencies manually.\n\nIn particular the automatic installation of\n[`SPRING`](https://github.com/GraceYoon/SPRING) and\n[`SpiecEasi`](https://github.com/zdk123/SpiecEasi) (only available on\nGitHub) does sometimes not work. These packages can be installed as\nfollows (the order is important because SPRING depends on SpiecEasi):\n\n``` r\ndevtools::install_github(\"zdk123/SpiecEasi\")\ndevtools::install_github(\"GraceYoon/SPRING\")\n```\n\nPackages that are optionally required in certain settings are not\ninstalled together with NetCoMi. These can be installed automatically\nusing:\n\n``` r\ninstallNetCoMiPacks()\n\n# Please check:\n?installNetCoMiPacks()\n```\n\nIf not installed via `installNetCoMiPacks()`, the required package is\ninstalled by the respective NetCoMi function when needed.\n"
      },
      "source": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/readme.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Bioconda",
        "parent_header": [
          "NetCoMi <img src=\"man/figures/NetCoMi_logo_800x400_300dpi.png\" align=\"right\" width=\"260\" />",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "Thanks to [daydream-boost](https://github.com/daydream-boost), NetCoMi\ncan also be installed from conda bioconda channel with\n\n``` bash\n# You can install an individual environment firstly with\n# conda create -n NetCoMi\n# conda activate NetCoMi\nconda install -c bioconda -c conda-forge r-netcomi\n```\n"
      },
      "source": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/readme.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9999999999597264,
      "result": {
        "original_header": "NetCoMi <img src=\"man/figures/NetCoMi_logo_800x400_300dpi.png\" align=\"right\" width=\"260\" />",
        "type": "Text_excerpt",
        "value": "[![DOI](https://zenodo.org/badge/259906607.svg)](https://zenodo.org/badge/latestdoi/259906607)\n[![install with\nbioconda](https://img.shields.io/badge/install%20with-bioconda-brightgreen.svg?style=flat)](https://anaconda.org/bioconda/r-netcomi) \n"
      },
      "source": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/readme.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9837097509671596,
      "result": {
        "original_header": "Methods included in NetCoMi",
        "type": "Text_excerpt",
        "value": "- Pearson coefficient\n  ([`cor()`](https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/cor)\n  from `stats` package)\n- Spearman coefficient\n  ([`cor()`](https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/cor)\n  from `stats` package)\n- Biweight Midcorrelation\n  [`bicor()`](https://rdrr.io/cran/WGCNA/man/bicor.html) from `WGCNA`\n  package\n- SparCC\n  ([`sparcc()`](https://rdrr.io/github/zdk123/SpiecEasi/man/sparcc.html)\n  from `SpiecEasi` package)\n- CCLasso ([R code on GitHub](https://github.com/huayingfang/CCLasso))\n- CCREPE\n  ([`ccrepe`](https://bioconductor.org/packages/release/bioc/html/ccrepe.html)\n  package)\n- SpiecEasi ([`SpiecEasi`](https://github.com/zdk123/SpiecEasi) package)\n- SPRING ([`SPRING`](https://github.com/GraceYoon/SPRING) package)\n- gCoda ([R code on GitHub](https://github.com/huayingfang/gCoda))\n- propr\n  ([`propr`](https://cran.r-project.org/web/packages/propr/index.html)\n  package) \n- Euclidean distance\n  ([`vegdist()`](https://www.rdocumentation.org/packages/vegan/versions/2.4-2/topics/vegdist)\n  from `vegan` package)\n- Bray-Curtis dissimilarity\n  ([`vegdist()`](https://www.rdocumentation.org/packages/vegan/versions/2.4-2/topics/vegdist)\n  from `vegan` package)\n- Kullback-Leibler divergence (KLD)\n  ([`KLD()`](https://rdrr.io/cran/LaplacesDemon/man/KLD.html) from\n  `LaplacesDemon` package)\n- Jeffrey divergence (own code using\n  [`KLD()`](https://rdrr.io/cran/LaplacesDemon/man/KLD.html) from\n  `LaplacesDemon` package)\n- Jensen-Shannon divergence (own code using\n  [`KLD()`](https://rdrr.io/cran/LaplacesDemon/man/KLD.html) from\n  `LaplacesDemon` package)\n- Compositional KLD (own implementation following Martin-Fern\u00e1ndez et\n  al. (1999))\n- Aitchison distance\n  ([`vegdist()`](https://www.rdocumentation.org/packages/vegan/versions/2.4-2/topics/vegdist)\n  and [`clr()`](https://rdrr.io/github/zdk123/SpiecEasi/man/clr.html)\n  from `SpiecEasi` package) \n- Total Sum Scaling (TSS) (own implementation)\n- Cumulative Sum Scaling (CSS) ([`cumNormMat`]() from `metagenomeSeq`\n  package)\n- Common Sum Scaling (COM) (own implementation)\n- Rarefying ([`rrarefy`]() from `vegan` package)\n- Variance Stabilizing Transformation (VST)\n  ([`varianceStabilizingTransformation`]() from `DESeq2` package)\n- Centered log-ratio (clr) transformation\n  ([`clr()`](https://rdrr.io/github/zdk123/SpiecEasi/man/clr.html) from\n  `SpiecEasi` package)) \n"
      },
      "source": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/readme.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999989866537665,
      "result": {
        "original_header": "Development version",
        "type": "Text_excerpt",
        "value": "Everyone who wants to use new features not included in any releases is\ninvited to install NetCoMi\u2019s development version:\n``` r\ndevtools::install_github(\"stefpeschel/NetCoMi\", \n                         ref = \"develop\",\n                         dependencies = c(\"Depends\", \"Imports\", \"LinkingTo\"),\n                         repos = c(\"https://cloud.r-project.org/\",\n                                   BiocManager::repositories()))\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/readme.Rmd",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/stefpeschel/NetCoMi/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "compositional-data, microbiome-data, network-analysis, r, r-package"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "GNU General Public License v3.0",
        "spdx_id": "GPL-3.0",
        "type": "License",
        "url": "https://api.github.com/licenses/gpl-3.0",
        "value": "https://api.github.com/licenses/gpl-3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<https://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<https://www.gnu.org/licenses/why-not-lgpl.html>.\n"
      },
      "source": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/man/figures/NetCoMi_logo_800x400_300dpi.png"
      },
      "source": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/readme.Rmd",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "NetCoMi"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "stefpeschel"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 702712,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "TeX",
        "size": 9398,
        "type": "Programming_language",
        "value": "TeX"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/readme.Rmd"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/readme.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "stefpeschel",
          "type": "User"
        },
        "date_created": "2022-11-20T17:38:42Z",
        "date_published": "2022-11-20T18:00:06Z",
        "description": "This is a major release, which comes with new features, improvements, bugfixes, and reformatted R code. \r\n\r\nThe commit history has been considerably revised to follow general conventions, which is why the commit hashes have changed and are not in line with the old \"master\" branch anymore. \r\n\r\n### New features\r\n\r\n* **renameTaxa()**: New function for renaming taxa in a taxonomic table. \r\nIt comes with functionality for \r\nmaking unknown and unclassified taxa unique and substituting them by the next \r\nhigher known taxonomic level. E.g., an unknown genus \"g__\", where family is the \r\nnext higher known level, can automatically be renamed to \r\n\"1_Streptococcaceae(F)\". User-defined patterns determine the format \r\nof known and substituted names. Unknown names (e.g., NAs) and unclassified taxa \r\ncan be handled separately. Duplicated names within one or more chosen ranks can \r\nalso be made unique by numbering them consecutively.\r\n\r\n* **editLabels()**: New function for editing node labels, i.e., shortening to a \r\ncertain length and removing unwanted characters. It is used by NetCoMi's plot \r\nfunctions plot.microNetProps() and plot.diffnet().\r\n\r\n* In `netCompare()`: The **adjusted Rand index** is also computed for the \r\nlargest connected component (LCC). The summary method has been adapted.\r\n\r\n* Argument **\"testRand\"** added to `netCompare()`. Performing a permutation \r\ntest for the adjusted Rand index can now be disabled to save run time.\r\n\r\n* **Graphlet-based network measures** implemented. NetCoMi contains two new \r\nexported functions **`calcGCM()`** and **`calcGCD()`** to compute the Graphlet \r\nCorrelation Matrix (GCM) of a network and the Graphlet Correlation Distance \r\n(GCD) between two networks. \r\n**Orbits** for graphlets with up to four nodes are considered. \r\nFurthermore, the GCM is computed with `netAnalyze()` and the \r\nGCD with `netCompare()` (for the whole network and the largest connected \r\ncomponent, respectively). Also the orbit counts are returned. The GCD is added \r\nto the summary for class `microNetComp` objects returned by `netCompare()`.\r\n\r\n* **Significance test for the GCD**: If permutation tests are conducted with \r\n`netCompare()`, the GCD is tested for being significantly different from zero.\r\n\r\n* New function **`testGCM()`** to **test graphlet-based measures** for \r\nsignificance. For a single GCM, the correlations are tested for being \r\nsignificantly different from zero. \r\nIf two GCMs are given, it is tested if the correlations are \r\nsignificantly different between the two groups, that is, the absolute \r\ndifferences between correlations ( $|gc1_{ij}-gc2_{ij}|$ ) are tested \r\nfor being different from zero.\r\n\r\n* New function **`plotHeat()`** for plotting a mixed heatmap where, for \r\ninstance, values are shown in the upper triangle and corresponding p-values or \r\nsignificance codes in the lower triangle. The function is used for plotting \r\nheatmaps of the GCMs, but could also be used for association matrices. \r\n\r\n* `netAnalyze()` now by default returns a **heatmap of the GCM(s)** with \r\ngraphlet correlations in the upper triangle and significance codes in the lower \r\ntriangle.\r\n\r\n* Argument **\"doPlot\"** added to `plot.microNetProps()` to suppress the plot if \r\nonly the return value is of interest. \r\n\r\n* New **\"show\"** arguments are added to the summary methods for class \r\n`microNetProps` and `microNetComp` objects. They specify which network \r\nproperties should be printed in the summary. See the help pages of\r\n`summary.microNetProps` and `summary.microNetComp()` for details.\r\n\r\n* New **zero replacement** method **\"pseudoZO\"** available in `netConstruct()`. \r\nInstead of adding the desired pseudo count to the whole count matrix, it is \r\nadded to zero counts only if `pseudoZO` is chosen. The behavior of \"pseudo\" \r\n(a further available method where a pseudo count is added to all counts) has not \r\nchanged. Adding a pseudo count only to zeros preserves the ratios between \r\nnon-zero counts, which is desirable. \r\n\r\n* `createAssoPerm()` now accepts objects of class `microNet` as input (in \r\naddition to objects of class `microNetProps`).\r\n\r\n* **`SPRING's`** fast version of latent correlation computation (implemented in \r\n[mixedCCA](https://github.com/irinagain/mixedCCA)) is available again.\r\nIt can be used by setting the `netConstruct()` parameter `measurePar$Rmethod`\r\nto \"approx\", which is now the default again.\r\n\r\n* The function **`multAdjust()`** now has an argument `pTrueNull` to pre-define \r\nthe proportion of true null hypotheses for the adaptive BH method.\r\n\r\n* `netConstruct()` has a new argument **`assoBoot`**, which enables the \r\ncomputation of bootstrap association matrices outside netConstruct() if \r\n**bootstrapping** is used for sparsification. An example has been added to the \r\nhelp page `?netConstruct`. This feature might be useful for very large \r\nassociation matrices (for which the working memory might reach its limit).\r\n\r\n\r\n\r\n### Bug fixes\r\n\r\n* In `netConstruct()`: \r\n  + Using **\"bootstrap\"** as sparsification method in \r\ncombination with one of the association methods \"bicor\", \"cclasso\", \"ccrepe\", or \r\n\"gcoda\" led to the error: `argument \"verbose\" is missing, with no default`, \r\nwhich has been fixed.\r\n  + The **\"signedPos\"** transformation did not work properly. \r\nDissimilarities corresponding to negative correlations were set to zero instead \r\nof infinity.\r\n\r\n* In `editLabels()`: The function (and thus also `plot.microNetProps`) \r\nthrew an error if taxa have been renamed with \r\n`renameTaxa` and the data contain more than 9 taxa with equal names, so that \r\ndouble-digit numbers were added to avoid duplicates. \r\n\r\n* Issues in network analysis and plotting if association matrices are used \r\nfor network construction, but **row and/or column names are missing**.\r\n(issue [#65](https://github.com/stefpeschel/NetCoMi/issues/65))\r\n\r\n* `diffnet()` threw an error if association matrices are used for network \r\nconstruction instead of count matrices.\r\n(issue [#66](https://github.com/stefpeschel/NetCoMi/issues/66))\r\n\r\n* In `plot.microNetProps()`:\r\n  + The function now directly returns an error if `x` has not the \r\nexpected class.\r\n  + The `cut` parameter could not be changed.\r\n  \r\n* In **`cclasso()`**: In rare cases, the function produced complex numbers, \r\nwhich led to an error. \r\n\r\n### Further changes\r\n\r\n* In **permutation tests**: The permuted group labels must now be different from \r\nthe original group vector. In other words, the original group vector is strictly \r\navoided in the matrix with permuted group labels. So far, only duplicates were \r\navoided. Only in exact permutation tests (if `nPerm` equals the possible number \r\nof permutations), the original group vector is still included in the permutation \r\nmatrix. The calculation of p-values has been adapted to the new behavior: \r\n*p=B/N* for exact p-values and *p=(B+1)/(N+1)* for approximated p-values, where \r\n*B* is the number of permutation test statistics being larger than or equal to \r\nthe observed one, and *N* is the number of permutations. So far, *p=(B+1)/(N+1)* \r\nhas been used in all cases.\r\n\r\n* In `plot.microNetProps()`: \r\n  + The default of `shortenLabels` is now \"none\", i.e. the **labels are not \r\n  shortened by default**, to avoid confusion about the node labels.\r\n  + The **edge filter** (specified via `edgeFilter` and `edgeInvisFilter`) now \r\n  refers to the estimated association/dissimilarities instead of edge weights. \r\n  E.g., setting the threshold to 0.3 for an association network hides edges \r\n  with a corresponding absolute association below 0.3 even though the edge \r\n  weight might be different (depending on the transformation used for network \r\n  construction). (issue [#26](https://github.com/stefpeschel/NetCoMi/issues/26))\r\n  + If two networks are constructed and the **`cut`** parameter is not \r\n  user-defined, the mean of the two determined cut parameters is now used for \r\n  both networks so that edge thicknesses are comparable.\r\n  \r\n* More expressive messages and errors in `diffnet` and `plot.diffnet` if no \r\n**differential associations** are detected.\r\n  \r\n* New function **`.suppress_warnings()`** to suppress certain warnings returned \r\nby external functions. \r\n\r\n* In `netConstruct` if **\"multRepl\"** is used for zero handling: \r\nThe warning about the proportion of zeros is suppressed by setting the \r\n`multRepl()` parameter \"z.warning\" to 1.\r\n\r\n* The functions **`makeCluster`** and **`stopCluster`** from `parallel` package \r\nare now used for parallel computation because those from `snow` package \r\nsometimes led to problems on Unix machines.\r\n\r\n### Style\r\n\r\n* The whole R code has been reformatted to follow general conventions.\r\n\r\n* The element `\"clustering_lcc\"` as part of the `netAnalyze` output has changed \r\nto `\"clusteringLCC\"` to be in line with the remaining output. \r\n\r\n* Input argument checking of exported function has been revised. New functions \r\n`.checkArgsXxx()` are added to perform argument checking outside the main \r\nfunctions. \r\n\r\n* Non-exported functions have been renamed to follow general naming conventions, \r\ni.e. that of [Bioconductor](https://contributions.bioconductor.org/r-code.html):\r\n    + Use camelCase for all functions.\r\n    + Non-exported functions have prefix \".\"\r\n    + See the [NEWS](https://github.com/stefpeschel/NetCoMi/blob/main/NEWS.md) file for an overview of the changed function names.\r\n",
        "html_url": "https://github.com/stefpeschel/NetCoMi/releases/tag/v1.1.0",
        "name": "NetCoMi 1.1.0",
        "release_id": 83685942,
        "tag": "v1.1.0",
        "tarball_url": "https://api.github.com/repos/stefpeschel/NetCoMi/tarball/v1.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/stefpeschel/NetCoMi/releases/83685942",
        "value": "https://api.github.com/repos/stefpeschel/NetCoMi/releases/83685942",
        "zipball_url": "https://api.github.com/repos/stefpeschel/NetCoMi/zipball/v1.1.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "stefpeschel",
          "type": "User"
        },
        "date_created": "2022-06-26T14:08:35Z",
        "date_published": "2022-06-26T15:40:52Z",
        "description": "This is a minor release with some bug fixes and changes in the documentation.\r\n\r\n### Bug fixes \r\n\r\n* `netConstruct()` threw an error if the data had no row and/or column names, which is fixed.\r\n\r\n* An edge list is added to the output of `netConstruct()` (issue [#41](https://github.com/stefpeschel/NetCoMi/issues/41)). See the help page for details.\r\n\r\n* `SPRING`'s fast version of latent correlation computation (implemented in [mixedCCA](https://github.com/irinagain/mixedCCA)) is currently not available due to deprecation of the R package `chebpol`. The issue is fixed by setting the `netConstruct()` parameter `measurePar$Rmethod` internally to \"original\" if SPRING is used for association estimation.\r\n\r\n* In `plot.microNetProps()`: The `xpd` parameter is changed to `NA` so that plotting outside the plot region is possible (useful for legends or additional text).\r\n\r\n* Labels in the network plot can now be suppressed by setting `labels = FALSE` (issue [#43](https://github.com/stefpeschel/NetCoMi/issues/43))\r\n\r\n* The `netCompare()` function threw an error if one of the permutation networks was empty, i.e. had no edges with weight different from zero (issue [#38](https://github.com/stefpeschel/NetCoMi/issues/38)), which is now fixed. \r\n\r\n* Fix issues [#29](https://github.com/stefpeschel/NetCoMi/issues/29) and  [#40](https://github.com/stefpeschel/NetCoMi/issues/40), where permutation tests did not terminate for small sample sizes. Now, if the possible number of permutations (resulting from the sample size) is smaller than that defined by the user, the function stops and returns an error. \r\n\r\n* Fix a bug in `diffnet()` (issue [#51](https://github.com/stefpeschel/NetCoMi/issues/51)), where colors in differential networks could not be changed.\r\n\r\n* `diffnet()` threw an error if the `netConstruct()` argument `jointPrepro` was set to `TRUE`.",
        "html_url": "https://github.com/stefpeschel/NetCoMi/releases/tag/v1.0.3",
        "name": "NetCoMi 1.0.3",
        "release_id": 70584225,
        "tag": "v1.0.3",
        "tarball_url": "https://api.github.com/repos/stefpeschel/NetCoMi/tarball/v1.0.3",
        "type": "Release",
        "url": "https://api.github.com/repos/stefpeschel/NetCoMi/releases/70584225",
        "value": "https://api.github.com/repos/stefpeschel/NetCoMi/releases/70584225",
        "zipball_url": "https://api.github.com/repos/stefpeschel/NetCoMi/zipball/v1.0.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "stefpeschel",
          "type": "User"
        },
        "date_created": "2021-02-05T09:39:14Z",
        "date_published": "2021-02-05T09:42:56Z",
        "description": "This release includes a range of new features and fixes known bugs and issues.\r\n\r\n### New features\r\n\r\n#### Improved installation process \r\n\r\nPackages that are optionally required in certain settings are not installed \r\ntogether with `NetCoMi` anymore. \r\nInstead, there is a new function `installNetCoMiPacks()` for installing the \r\nremaining packages. \r\nIf not installed via `installNetCoMiPacks()`, the required package is installed\r\nby the respective NetCoMi function when needed.\r\n\r\n#### installNetCoMiPacks()\r\n\r\nNew function for  installing the R packages used in NetCoMi not listed as \r\n`dependencies` or `imports` in NetCoMi's description file.\r\n\r\n#### netConstruct()\r\n\r\n* New argument `matchDesign`: Implements matched-group (i.e. matched-pair) designs, \r\nwhich are used for permutation tests in `netCompare()` and `diffnet()`. `c(1,2)`, \r\nfor instance, means that one sample in the first group is matched to two samples \r\nin the second group. If the argument is not `NULL`, the matched-group design is\r\nkept when generating permuted data.\r\n\r\n* New argument `jointPrepro`: Specifies whether two data sets (of group one and\r\ntwo) should be preprocessed together. Preprocessing includes sample and taxa \r\nfiltering, zero treatment, and normalization. Defaults to `TRUE` if `data` and \r\n`group` are given, and to `FALSE` if `data` and `data2` are given, which is \r\nsimilar to the behavior of `NetCoMi 1.0.1`. For dissimilarity networks, no joint \r\npreprocessing is possible. \r\n\r\n* `mclr(){SPRING}` is now available as normalization method.\r\n\r\n* `clr{SpiecEasi}` is used for centered log-ratio transformation \r\ninstead of `cenLR(){robCompositions}`.\r\n\r\n* `\"symBetaMode\"` is accepted as list element of `measurePar`, which is passed to \r\n`symBeta(){SpiecEasi}`. Only needed for SpiecEasi or SPRING associations.\r\n\r\n* The pseudocount (if `zeroMethod = \"pseudo\"`) may be freely specified. In \r\nv1.0.1, only unit pseudocounts were possible.\r\n\r\n#### netAnalyze()\r\n\r\n* Global network properties are now computed for the whole network as well as \r\nfor the largest connected component (LCC). \r\nThe summary of network properties now contains for the whole network only \r\nstatistics that are not based on shortest paths (or, more generally, also \r\nmeaningful for disconnected networks). \r\nFor the LCC, all global properties available in NetCoMi are shown.\r\n\r\n* New global network properties (see the docu of `netAnalyze()` for definitions):\r\n  + Number of components (only whole network)\r\n  + Relative LCC size (only LCC)\r\n  + Positive edge percentage\r\n  + Natural connectivity\r\n  + Average dissimilarity (only meaningful for the LCC)\r\n  + Average path length (only meaningful for the LCC)\r\n\r\n* New argument `centrLCC`: Specifies whether to compute centralities only for \r\nthe LCC. If `TRUE`, centrality values of disconnected components are zero.\r\n\r\n* New argument `avDissIgnoreInf`: Indicates whether infinite values should be \r\nignored in the average dissimilarity. If `FALSE`, infinities are set to 1.\r\n\r\n* New argument `sPathAlgo`: Algorithm used for computing shortest paths\r\n\r\n* New argument `sPathNorm`: Indicates whether shortest paths should be normalized\r\nby average dissimilarity to improve interpretability.\r\n\r\n* New argument `normNatConnect`: Indicates whether to normalize natural \r\nconnectivity values.\r\n\r\n* New argument `weightClustCoef`: Specifies the algorithm used for computing the\r\nglobal clustering coefficient. If `FALSE`, `transitivity(){igraph}` with \r\n`type = \"global\"` is used (similar to `NetCoMi 1.0.1`). If `TRUE`, the local\r\nclustering coefficient is computed using `transitivity(){igraph}` with \r\n`type = \"barrat\"`. The global clustering coefficient is then the arithmetic \r\nmean of local values.\r\n\r\n* Argument `connect` has been changed to `connectivity`.\r\n\r\n* Documentation extended by definitions of network properties.\r\n\r\n#### summary.microNetProps()\r\n\r\n* New argument `clusterLCC`: Indicates whether clusters should be shown for the\r\nwhole network or only for the LCC.\r\n\r\n* The `print` method for `summary.microNetProps` was completely revised.\r\n\r\n#### plot.microNetProps()\r\n\r\n* All normalization methods available for network construction can now be used\r\nfor scaling node sizes (argument `nodeSize`).\r\n\r\n* New argument `normPar`: Optional parameters used for normalization.\r\n\r\n* Usage of `colorVec` changed: Node colors can now be set separately in both \r\ngroups (`colorVec` can be a single vector or a list with two vectors). Usage\r\ndepends on `nodeColor` (see docu of `colorVec`).\r\n\r\n* New argument `sameFeatCol`: If `nodeColor = \"feature\"` and `colorVec` is not \r\ngiven, `sameFeatCol` indicates whether same features should have same colors in\r\nboth groups. \r\n\r\n* Argument `colorNegAsso` has been renamed to `negDiffCol`. Using the old name\r\nleads to a warning.\r\n\r\n* New functionality for using the same layout in both groups (if two networks\r\nare plotted). In addition to computing the layout for one group and adopting it \r\nfor the other group, a union of both layout can be computed and used in both\r\ngroups so that nodes are placed as optimal as possible equally for both networks. \r\nThis option is applied via `sameLayout = TRUE` and `layoutGroup = \"union\"`.\r\nMany thanks to [Christian L. M\u00fcller](https://github.com/muellsen?tab=followers) \r\nand [Alice Sommer](https://www.iq.harvard.edu/people/alice-sommer) for providing \r\nthe idea and R code for this new feature!\r\n\r\n#### netCompare()\r\n\r\n* New arguments for storing association and count matrices of the permuted data\r\ninto an external file:\r\n  + `fileLoadAssoPerm`\r\n  + `fileLoadCountsPerm`\r\n  + `storeAssoPerm`\r\n  + `fileStoreAssoPerm`\r\n  + `storeCountsPerm`\r\n  + `fileStoreCountsPerm`\r\n  \r\n* New argument `returnPermProps`: If `TRUE`, global network properties and the\r\nrespective absolute group differences of the permuted data are returned.\r\n\r\n* New argument `returnPermCentr`: If `TRUE`, the computed centrality values \r\nand the respective absolute group differences of the permuted data are returned \r\nas list with a matrix for each centrality measure.\r\n\r\n* The arguments `assoPerm` and `dissPerm` are still existent for compatibility \r\nwith `NetCoMi 1.0.1` but the former elements `assoPerm` and `dissPerm` are not\r\nreturned anymore (matrices are stored in an external file instead).\r\n  \r\n#### createAssoPerm()\r\n\r\nNew function for creating association/dissimilarity matrices for permuted count \r\ndata. The stored count or association/dissimilarity matrices can then be passed \r\nto `netCompare()` or `diffnet()` to decrease runtime. The function also \r\nallows to generate a matrix permuted group labels without computing associations.\r\nUsing this matrix, `createAssoPerm()` furthermore allows to estimate the \r\npermutation associations/dissimilarities in blocks \r\n(by passing only a subset of the permuted group matrix to `createAssoPerm()`).\r\n\r\n#### summary.microNetComp()\r\n\r\nSummary method has been adapted to the new network properties (analogous to the \r\nsummary of `microNetProps` objects, which are returned from `netAnalyze()`)\r\n\r\n#### diffnet()\r\n* New arguments for storing association and count matrices of the permuted data\r\ninto an external file:\r\n  + `fileLoadAssoPerm`\r\n  + `fileLoadCountsPerm`\r\n  + `storeAssoPerm`\r\n  + `fileStoreAssoPerm`\r\n  + `storeCountsPerm`\r\n  + `fileStoreCountsPerm`\r\n  \r\n* The argument `assoPerm` is still existent for compatibility with `NetCoMi 1.0.1` \r\nbut the former element `assoPerm` is not returned anymore (matrices are \r\nstored in an external file instead).\r\n\r\n* Changed output: For permutation tests and Fisher's z-test, a vector and matrix\r\nwith p-values and the corresponding matrix with group differences are returned \r\nfor both with and without multiple testing adjustment.\r\n\r\n* Documentation has been revised.\r\n\r\n#### plot.diffnet()\r\n\r\n* New argument `adjusted`: Indicates whether the adjacency matrix (matrix with\r\ngroup differences) based on adjusted or unadjusted p-values should be plotted.\r\n\r\n* New argument `legendPos` for positioning the legend.\r\n\r\n* New argument `legendArgs` for specifying further arguments passed to `legend`.\r\n\r\n#### colToTransp()\r\n* The function is now exported and its name has changed from `col_to_transp()` \r\nto `colToTransp()`. The function expects a color vector as input and adds \r\ntransparency to each color.\r\n\r\n\r\n### Bug fixes\r\n\r\nThe major issues fixed in this release are:\r\n\r\n* The following error is solved: `Error in update.list(...): argument \"new\" is \r\nmissing`. The error was caused by a conflict between `SpiecEasi` and \r\n`metagenomeSeq`, in particular by `gplot` as a dependency of `metagenomeSeq`. \r\nA former version of `gplot` was dependend on `gdata`, which caused the conflict. \r\nSo, please update `gplot` and remove the package `gdata` to fix the error. \r\n\r\n* `sparcc()` from SpiecEasi package is now used for estimating SparCC associations.\r\nFor some users, NetCoMi's `Rccp` implementation of SparCC caused errors when \r\ninstalling NetCoMi. If these are fixed, the Rcpp implementation will \r\nbe included again, so that users can decide between the two SparCC versions. \r\n\r\n* VST transformations are now computed correctly.\r\n\r\n* Error when plotting two networks, where one network is empty, has been fixed.\r\n",
        "html_url": "https://github.com/stefpeschel/NetCoMi/releases/tag/v1.0.2",
        "name": "NetCoMi 1.0.2",
        "release_id": 37398972,
        "tag": "v1.0.2",
        "tarball_url": "https://api.github.com/repos/stefpeschel/NetCoMi/tarball/v1.0.2",
        "type": "Release",
        "url": "https://api.github.com/repos/stefpeschel/NetCoMi/releases/37398972",
        "value": "https://api.github.com/repos/stefpeschel/NetCoMi/releases/37398972",
        "zipball_url": "https://api.github.com/repos/stefpeschel/NetCoMi/zipball/v1.0.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "stefpeschel",
          "type": "User"
        },
        "date_created": "2020-07-14T21:49:42Z",
        "date_published": "2020-07-14T21:59:05Z",
        "description": "A minor release with bug fixes and some enhancements.\r\n\r\n### New features\r\n\r\n* Objects of class `microNetProps` returned from `netAnalyze()` now have a \r\nsummary method, which prints the computed network properties in a well-arranged\r\nformat.\r\n\r\n* `gcoda()` (originally written by Fang Huaying) now provides the \r\npossibility for parallel computing including a progress bar.\r\n\r\n* `cclasso()` (originally written by Fang Huaying) is extended by a \r\nprogress bar.\r\n\r\n* The summary methods `summary.microNetProps()` and `summary.microNetComp()` are \r\nextended by an option for choosing the number of decimal places in the output. \r\n\r\n* `plot.microNetProps()` has a new argument `labelFile`, which allows to store \r\nthe original and renamed node labels in a `.txt` file.\r\n\r\n### Bug fixes\r\n\r\n* Fixes an error caused by `netConstruct()` when passing an association or \r\ndistance matrix to the `data` argument.\r\n\r\n* The manipulation of node sizes in `plot.micronetprops()` now works\r\nsatisfactorily. If node sizes vary (e.g. according to a centrality measure), the \r\nargument `nodeSizeSpread` controls their range so that node sizes differ more \r\nstrongly the higher its value.\r\n\r\n### Further changes\r\n\r\n* The argument `numbTaxa` of `summary.microNetComp()` has been changed into \r\n`numbNodes`.\r\n\r\n* Several functions now have a progress bar instead of a progress message. \r\n\r\n* Minor amendments in the documentation of `netAnalyze()` (`hubPar` argument)\r\nand `netConstruct()` (`cores` argument).",
        "html_url": "https://github.com/stefpeschel/NetCoMi/releases/tag/v1.0.1",
        "name": "NetCoMi 1.0.1",
        "release_id": 28563602,
        "tag": "v1.0.1",
        "tarball_url": "https://api.github.com/repos/stefpeschel/NetCoMi/tarball/v1.0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/stefpeschel/NetCoMi/releases/28563602",
        "value": "https://api.github.com/repos/stefpeschel/NetCoMi/releases/28563602",
        "zipball_url": "https://api.github.com/repos/stefpeschel/NetCoMi/zipball/v1.0.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "stefpeschel",
          "type": "User"
        },
        "date_created": "2020-04-29T11:50:49Z",
        "date_published": "2020-04-29T12:10:59Z",
        "description": "The first release.",
        "html_url": "https://github.com/stefpeschel/NetCoMi/releases/tag/v1.0.0",
        "name": "First release of NetCoMi",
        "release_id": 26002511,
        "tag": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/stefpeschel/NetCoMi/tarball/v1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/stefpeschel/NetCoMi/releases/26002511",
        "value": "https://api.github.com/repos/stefpeschel/NetCoMi/releases/26002511",
        "zipball_url": "https://api.github.com/repos/stefpeschel/NetCoMi/zipball/v1.0.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 10:58:27",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 150
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "NetCoMi <img src=\"man/figures/NetCoMi_logo_800x400_300dpi.png\" align=\"right\" width=\"260\" />"
        ],
        "type": "Text_excerpt",
        "value": "We use the American Gut data from\n[`SpiecEasi`](https://github.com/zdk123/SpiecEasi) package to look at\nsome examples of how NetCoMi is applied. NetCoMi\u2019s main functions are\n`netConstruct()` for network construction, `netAnalyze()` for network\nanalysis, and `netCompare()` for network comparison. As you will see in\nthe following, these three functions must be executed in the\naforementioned order. A further function is `diffnet()` for constructing\na differential association network. `diffnet()` must be applied to the\nobject returned by `netConstruct()`.\n\nFirst of all, we load NetCoMi and the data from American Gut Project\n(provided by [`SpiecEasi`](https://github.com/zdk123/SpiecEasi), which\nis automatically loaded together with NetCoMi).\n\n``` r\nlibrary(NetCoMi)\ndata(\"amgut1.filt\")\ndata(\"amgut2.filt.phy\")\n```\n"
      },
      "source": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/readme.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Network construction and analysis",
        "parent_header": [
          "NetCoMi <img src=\"man/figures/NetCoMi_logo_800x400_300dpi.png\" align=\"right\" width=\"260\" />",
          "Usage",
          "Network with SPRING as association measure"
        ],
        "type": "Text_excerpt",
        "value": "We firstly construct a single association network using\n[SPRING](https://github.com/GraceYoon/SPRING) for estimating\nassociations (conditional dependence) between OTUs.\n\nThe data are filtered within `netConstruct()` as follows:\n\n- Only samples with a total number of reads of at least 1000 are\n  included (argument `filtSamp`).\n- Only the 50 taxa with highest frequency are included (argument\n  `filtTax`).\n\n`measure` defines the association or dissimilarity measure, which is\n`\"spring\"` in our case. Additional arguments are passed to `SPRING()`\nvia `measurePar`. `nlambda` and `rep.num` are set to 10 for a decreased\nexecution time, but should be higher for real data. `Rmethod` is set to\n\u201capprox\u201d to estimate the correlations using a hybrid multi-linear\ninterpolation approach proposed by Yoon, M\u00fcller, and Gaynanova (2020).\nThis method considerably reduces the runtime while controlling the\napproximation error.\n\nNormalization as well as zero handling is performed internally in\n`SPRING()`. Hence, we set `normMethod` and `zeroMethod` to `\"none\"`.\n\nWe furthermore set `sparsMethod` to `\"none\"` because `SPRING` returns a\nsparse network where no additional sparsification step is necessary.\n\nWe use the \u201csigned\u201d method for transforming associations into\ndissimilarities (argument `dissFunc`). In doing so, strongly negatively\nassociated taxa have a high dissimilarity and, in turn, a low\nsimilarity, which corresponds to edge weights in the network plot.\n\nThe `verbose` argument is set to 3 so that all messages generated by\n`netConstruct()` as well as messages of external functions are printed.\n\n``` r\nnet_spring <- netConstruct(amgut1.filt,\n                           filtTax = \"highestFreq\",\n                           filtTaxPar = list(highestFreq = 50),\n                           filtSamp = \"totalReads\",\n                           filtSampPar = list(totalReads = 1000),\n                           measure = \"spring\",\n                           measurePar = list(nlambda=10, \n                                             rep.num=10,\n                                             Rmethod = \"approx\"),\n                           normMethod = \"none\", \n                           zeroMethod = \"none\",\n                           sparsMethod = \"none\", \n                           dissFunc = \"signed\",\n                           verbose = 2,\n                           seed = 123456)\n```\n\n    ## Checking input arguments ... Done.\n    ## Data filtering ...\n    ## 77 taxa removed.\n    ## 50 taxa and 289 samples remaining.\n    ## \n    ## Calculate 'spring' associations ... Registered S3 method overwritten by 'dendextend':\n    ##   method     from \n    ##   rev.hclust vegan\n    ## Registered S3 method overwritten by 'seriation':\n    ##   method         from \n    ##   reorder.hclust vegan\n    ## Done.\n"
      },
      "source": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/readme.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Analyzing the constructed network",
        "parent_header": [
          "NetCoMi <img src=\"man/figures/NetCoMi_logo_800x400_300dpi.png\" align=\"right\" width=\"260\" />",
          "Usage",
          "Network with SPRING as association measure"
        ],
        "type": "Text_excerpt",
        "value": "NetCoMi\u2019s `netAnalyze()` function is used for analyzing the constructed\nnetwork(s).\n\nHere, `centrLCC` is set to `TRUE` meaning that centralities are\ncalculated only for nodes in the largest connected component (LCC).\n\nClusters are identified using greedy modularity optimization (by\n`cluster_fast_greedy()` from [`igraph`](https://igraph.org/r/) package).\n\nHubs are nodes with an eigenvector centrality value above the empirical\n95% quantile of all eigenvector centralities in the network (argument\n`hubPar`).\n\n`weightDeg` and `normDeg` are set to `FALSE` so that the degree of a\nnode is simply defined as number of nodes that are adjacent to the node.\n\nBy default, a heatmap of the Graphlet Correlation Matrix (GCM) is\nreturned (with graphlet correlations in the upper triangle and\nsignificance codes resulting from Student\u2019s t-test in the lower\ntriangle). See `?calcGCM` and `?testGCM` for details.\n\n``` r\nprops_spring <- netAnalyze(net_spring, \n                           centrLCC = TRUE,\n                           clustMethod = \"cluster_fast_greedy\",\n                           hubPar = \"eigenvector\",\n                           weightDeg = FALSE, normDeg = FALSE)\n```\n\n![](man/figures/readme/single_spring_2-1.png)\n\n``` r\n#?summary.microNetProps\nsummary(props_spring, numbNodes = 5L)\n```\n\n    ## \n    ## Component sizes\n    ## ```````````````          \n    ## size: 48 1\n    ##    #:  1 2\n    ## ______________________________\n    ## Global network properties\n    ## `````````````````````````\n    ## Largest connected component (LCC):\n    ##                                  \n    ## Relative LCC size         0.96000\n    ## Clustering coefficient    0.33594\n    ## Modularity                0.53407\n    ## Positive edge percentage 88.34951\n    ## Edge density              0.09131\n    ## Natural connectivity      0.02855\n    ## Vertex connectivity       1.00000\n    ## Edge connectivity         1.00000\n    ## Average dissimilarity*    0.97035\n    ## Average path length**     2.36912\n    ## \n    ## Whole network:\n    ##                                  \n    ## Number of components      3.00000\n    ## Clustering coefficient    0.33594\n    ## Modularity                0.53407\n    ## Positive edge percentage 88.34951\n    ## Edge density              0.08408\n    ## Natural connectivity      0.02714\n    ## -----\n    ## *: Dissimilarity = 1 - edge weight\n    ## **: Path length = Units with average dissimilarity\n    ## \n    ## ______________________________\n    ## Clusters\n    ## - In the whole network\n    ## - Algorithm: cluster_fast_greedy\n    ## ```````````````````````````````` \n    ##                     \n    ## name: 0  1  2  3 4 5\n    ##    #: 2 12 17 10 5 4\n    ## \n    ## ______________________________\n    ## Hubs\n    ## - In alphabetical/numerical order\n    ## - Based on empirical quantiles of centralities\n    ## ```````````````````````````````````````````````       \n    ##  190597\n    ##  288134\n    ##  311477\n    ## \n    ## ______________________________\n    ## Centrality measures\n    ## - In decreasing order\n    ## - Centrality of disconnected components is zero\n    ## ````````````````````````````````````````````````\n    ## Degree (unnormalized):\n    ##          \n    ## 288134 10\n    ## 190597  9\n    ## 311477  9\n    ## 188236  8\n    ## 199487  8\n    ## \n    ## Betweenness centrality (normalized):\n    ##               \n    ## 302160 0.31360\n    ## 268332 0.24144\n    ## 259569 0.23404\n    ## 470973 0.21462\n    ## 119010 0.19611\n    ## \n    ## Closeness centrality (normalized):\n    ##               \n    ## 288134 0.68426\n    ## 311477 0.68413\n    ## 199487 0.68099\n    ## 302160 0.67518\n    ## 188236 0.66852\n    ## \n    ## Eigenvector centrality (normalized):\n    ##               \n    ## 288134 1.00000\n    ## 311477 0.94417\n    ## 190597 0.90794\n    ## 199487 0.85439\n    ## 188236 0.72684\n"
      },
      "source": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/readme.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Plotting the GCM heatmap manually",
        "parent_header": [
          "NetCoMi <img src=\"man/figures/NetCoMi_logo_800x400_300dpi.png\" align=\"right\" width=\"260\" />",
          "Usage",
          "Network with SPRING as association measure"
        ],
        "type": "Text_excerpt",
        "value": "``` r\nplotHeat(mat = props_spring$graphletLCC$gcm1,\n         pmat = props_spring$graphletLCC$pAdjust1,\n         type = \"mixed\",\n         title = \"GCM\", \n         colorLim = c(-1, 1),\n         mar = c(2, 0, 2, 0))\n\n# Add rectangles highlighting the four types of orbits\ngraphics::rect(xleft   = c( 0.5,  1.5, 4.5,  7.5),\n               ybottom = c(11.5,  7.5, 4.5,  0.5),\n               xright  = c( 1.5,  4.5, 7.5, 11.5),\n               ytop    = c(10.5, 10.5, 7.5,  4.5),\n               lwd = 2, xpd = NA)\n\ntext(6, -0.2, xpd = NA, \n     \"Significance codes:  ***: 0.001;  **: 0.01;  *: 0.05\")\n```\n\n![](man/figures/readme/single_spring_heat-1.png)\n"
      },
      "source": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/readme.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Visualizing the network",
        "parent_header": [
          "NetCoMi <img src=\"man/figures/NetCoMi_logo_800x400_300dpi.png\" align=\"right\" width=\"260\" />",
          "Usage",
          "Network with SPRING as association measure"
        ],
        "type": "Text_excerpt",
        "value": "We use the determined clusters as node colors and scale the node sizes\naccording to the node\u2019s eigenvector centrality.\n\n``` r\n# help page\n?plot.microNetProps\n```\n\n``` r\np <- plot(props_spring, \n          nodeColor = \"cluster\", \n          nodeSize = \"eigenvector\",\n          title1 = \"Network on OTU level with SPRING associations\", \n          showTitle = TRUE,\n          cexTitle = 2.3)\n\nlegend(0.7, 1.1, cex = 2.2, title = \"estimated association:\",\n       legend = c(\"+\",\"-\"), lty = 1, lwd = 3, col = c(\"#009900\",\"red\"), \n       bty = \"n\", horiz = TRUE)\n```\n\n![](man/figures/readme/single_spring_3-1.png)\n\nNote that edge weights are (non-negative) similarities, however, the\nedges belonging to negative estimated associations are colored in red by\ndefault (`negDiffCol = TRUE`).\n\nBy default, a different transparency value is added to edges with an\nabsolute weight below and above the `cut` value (arguments\n`edgeTranspLow` and `edgeTranspHigh`). The determined `cut` value can be\nread out as follows:\n\n``` r\np$q1$Arguments$cut\n```\n\n    ##      75% \n    ## 0.337099\n"
      },
      "source": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/readme.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Export to Gephi",
        "parent_header": [
          "NetCoMi <img src=\"man/figures/NetCoMi_logo_800x400_300dpi.png\" align=\"right\" width=\"260\" />",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Some users may be interested in how to export the network to Gephi.\nHere\u2019s an example:\n\n``` r\n# For Gephi, we have to generate an edge list with IDs.\n# The corresponding labels (and also further node features) are stored as node list.\n\n# Create edge object from the edge list exported by netConstruct()\nedges <- dplyr::select(net_spring$edgelist1, v1, v2)\n\n# Add Source and Target variables (as IDs)\nedges$Source <- as.numeric(factor(edges$v1))\nedges$Target <- as.numeric(factor(edges$v2))\nedges$Type <- \"Undirected\"\nedges$Weight <- net_spring$edgelist1$adja\n\nnodes <- unique(edges[,c('v1','Source')])\ncolnames(nodes) <- c(\"Label\", \"Id\")\n\n# Add category with clusters (can be used as node colors in Gephi)\nnodes$Category <- props_spring$clustering$clust1[nodes$Label]\n\nedges <- dplyr::select(edges, Source, Target, Type, Weight)\n\nwrite.csv(nodes, file = \"nodes.csv\", row.names = FALSE)\nwrite.csv(edges, file = \"edges.csv\", row.names = FALSE)\n```\n\nThe exported .csv files can then be imported into Gephi.\n\n------------------------------------------------------------------------\n"
      },
      "source": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/readme.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Network with Pearson correlation as association measure",
        "parent_header": [
          "NetCoMi <img src=\"man/figures/NetCoMi_logo_800x400_300dpi.png\" align=\"right\" width=\"260\" />",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Let\u2019s construct another network using Pearson\u2019s correlation coefficient\nas association measure. The input is now a `phyloseq` object.\n\nSince Pearson correlations may lead to compositional effects when\napplied to sequencing data, we use the clr transformation as\nnormalization method. Zero treatment is necessary in this case.\n\nA threshold of 0.3 is used as sparsification method, so that only OTUs\nwith an absolute correlation greater than or equal to 0.3 are connected.\n\n``` r\nnet_pears <- netConstruct(amgut2.filt.phy,  \n                          measure = \"pearson\",\n                          normMethod = \"clr\",\n                          zeroMethod = \"multRepl\",\n                          sparsMethod = \"threshold\",\n                          thresh = 0.3,\n                          verbose = 3)\n```\n\n    ## Checking input arguments ... Done.\n    ## 2 rows with zero sum removed.\n    ## 138 taxa and 294 samples remaining.\n    ## \n    ## Zero treatment:\n    ## Execute multRepl() ... Done.\n    ## \n    ## Normalization:\n    ## Execute clr(){SpiecEasi} ... Done.\n    ## \n    ## Calculate 'pearson' associations ... Done.\n    ## \n    ## Sparsify associations via 'threshold' ... Done.\n\nNetwork analysis and plotting:\n\n``` r\nprops_pears <- netAnalyze(net_pears, \n                          clustMethod = \"cluster_fast_greedy\")\n```\n\n![](man/figures/readme/single_pears_2-1.png)\n\n``` r\nplot(props_pears, \n     nodeColor = \"cluster\", \n     nodeSize = \"eigenvector\",\n     title1 = \"Network on OTU level with Pearson correlations\", \n     showTitle = TRUE,\n     cexTitle = 2.3)\n\nlegend(0.7, 1.1, cex = 2.2, title = \"estimated correlation:\", \n       legend = c(\"+\",\"-\"), lty = 1, lwd = 3, col = c(\"#009900\",\"red\"), \n       bty = \"n\", horiz = TRUE)\n```\n\n![](man/figures/readme/single_pears_3-1.png)\n\nLet\u2019s improve the visualization by changing the following arguments:\n\n- `repulsion = 0.8`: Place the nodes further apart.\n- `rmSingles = TRUE`: Single nodes are removed.\n- `labelScale = FALSE` and `cexLabels = 1.6`: All labels have equal size\n  and are enlarged to improve readability of small node\u2019s labels.\n- `nodeSizeSpread = 3` (default is 4): Node sizes are more similar if\n  the value is decreased. This argument (in combination with `cexNodes`)\n  is useful to enlarge small nodes while keeping the size of big nodes.\n- `hubBorderCol = \"darkgray\"`: Change border color for a better\n  readability of the node labels.\n\n``` r\nplot(props_pears, \n     nodeColor = \"cluster\", \n     nodeSize = \"eigenvector\",\n     repulsion = 0.8,\n     rmSingles = TRUE,\n     labelScale = FALSE,\n     cexLabels = 1.6,\n     nodeSizeSpread = 3,\n     cexNodes = 2,\n     hubBorderCol = \"darkgray\",\n     title1 = \"Network on OTU level with Pearson correlations\", \n     showTitle = TRUE,\n     cexTitle = 2.3)\n\nlegend(0.7, 1.1, cex = 2.2, title = \"estimated correlation:\",\n       legend = c(\"+\",\"-\"), lty = 1, lwd = 3, col = c(\"#009900\",\"red\"),\n       bty = \"n\", horiz = TRUE)\n```\n\n![](man/figures/readme/single_pears_4-1.png)\n"
      },
      "source": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/readme.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Edge filtering",
        "parent_header": [
          "NetCoMi <img src=\"man/figures/NetCoMi_logo_800x400_300dpi.png\" align=\"right\" width=\"260\" />",
          "Usage",
          "Network with Pearson correlation as association measure"
        ],
        "type": "Text_excerpt",
        "value": "The network can be sparsified further using the arguments `edgeFilter`\n(edges are filtered before the layout is computed) and `edgeInvisFilter`\n(edges are removed after the layout is computed and thus just made\n\u201cinvisible\u201d).\n\n``` r\nplot(props_pears,\n     edgeInvisFilter = \"threshold\",\n     edgeInvisPar = 0.4,\n     nodeColor = \"cluster\", \n     nodeSize = \"eigenvector\",\n     repulsion = 0.8,\n     rmSingles = TRUE,\n     labelScale = FALSE,\n     cexLabels = 1.6,\n     nodeSizeSpread = 3,\n     cexNodes = 2,\n     hubBorderCol = \"darkgray\",\n     title1 = paste0(\"Network on OTU level with Pearson correlations\",\n                     \"\\n(edge filter: threshold = 0.4)\"),\n     showTitle = TRUE,\n     cexTitle = 2.3)\n\nlegend(0.7, 1.1, cex = 2.2, title = \"estimated correlation:\",\n       legend = c(\"+\",\"-\"), lty = 1, lwd = 3, col = c(\"#009900\",\"red\"),\n       bty = \"n\", horiz = TRUE)\n```\n\n![](man/figures/readme/single_pears_5-1.png)\n\n------------------------------------------------------------------------\n"
      },
      "source": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/readme.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Using the \u201cunsigned\u201d transformation",
        "parent_header": [
          "NetCoMi <img src=\"man/figures/NetCoMi_logo_800x400_300dpi.png\" align=\"right\" width=\"260\" />",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "In the above network, the \u201csigned\u201d transformation was used to transform\nthe estimated associations into dissimilarities. This leads to a network\nwhere strongly positive correlated taxa have a high edge weight (1 if\nthe correlation equals 1) and strongly negative correlated taxa have a\nlow edge weight (0 if the correlation equals -1).\n\nWe now use the \u201cunsigned\u201d transformation so that the edge weight between\nstrongly correlated taxa is high, no matter of the sign. Hence, a\ncorrelation of -1 and 1 would lead to an edge weight of 1.\n"
      },
      "source": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/readme.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Network construction",
        "parent_header": [
          "NetCoMi <img src=\"man/figures/NetCoMi_logo_800x400_300dpi.png\" align=\"right\" width=\"260\" />",
          "Usage",
          "Network comparison"
        ],
        "type": "Text_excerpt",
        "value": "We can pass the network object from before to `netConstruct()` to save\nruntime.\n\n``` r\nnet_pears_unsigned <- netConstruct(data = net_pears$assoEst1,\n                                   dataType = \"correlation\", \n                                   sparsMethod = \"threshold\",\n                                   thresh = 0.3,\n                                   dissFunc = \"unsigned\",\n                                   verbose = 3)\n```\n\n    ## Checking input arguments ... Done.\n    ## \n    ## Sparsify associations via 'threshold' ... Done.\n"
      },
      "source": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/readme.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Estimated correlations and adjacency values",
        "parent_header": [
          "NetCoMi <img src=\"man/figures/NetCoMi_logo_800x400_300dpi.png\" align=\"right\" width=\"260\" />",
          "Usage",
          "Using the \u201cunsigned\u201d transformation"
        ],
        "type": "Text_excerpt",
        "value": "The following histograms demonstrate how the estimated correlations are\ntransformed into adjacencies (= sparsified similarities for weighted\nnetworks).\n\nSparsified estimated correlations:\n\n``` r\nhist(net_pears$assoMat1, 100, xlim = c(-1, 1), ylim = c(0, 400),\n     xlab = \"Estimated correlation\", \n     main = \"Estimated correlations after sparsification\")\n```\n\n![](man/figures/readme/single_pears_hist_1-1.png)\n\nAdjacency values computed using the \u201csigned\u201d transformation (values\ndifferent from 0 and 1 will be edges in the network):\n\n``` r\nhist(net_pears$adjaMat1, 100, ylim = c(0, 400),\n     xlab = \"Adjacency values\", \n     main = \"Adjacencies (with \\\"signed\\\" transformation)\")\n```\n\n![](man/figures/readme/single_pears_hist_2-1.png)\n\nAdjacency values computed using the \u201cunsigned\u201d transformation:\n\n``` r\nhist(net_pears_unsigned$adjaMat1, 100, ylim = c(0, 400),\n     xlab = \"Adjacency values\", \n     main = \"Adjacencies (with \\\"unsigned\\\" transformation)\")\n```\n\n![](man/figures/readme/single_pears_hist_3-1.png)\n"
      },
      "source": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/readme.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Network analysis and plotting",
        "parent_header": [
          "NetCoMi <img src=\"man/figures/NetCoMi_logo_800x400_300dpi.png\" align=\"right\" width=\"260\" />",
          "Usage",
          "Using the \u201cunsigned\u201d transformation"
        ],
        "type": "Text_excerpt",
        "value": "``` r\nprops_pears_unsigned <- netAnalyze(net_pears_unsigned, \n                                   clustMethod = \"cluster_fast_greedy\",\n                                   gcmHeat = FALSE)\n```\n\n``` r\nplot(props_pears_unsigned, \n     nodeColor = \"cluster\", \n     nodeSize = \"eigenvector\",\n     repulsion = 0.9,\n     rmSingles = TRUE,\n     labelScale = FALSE,\n     cexLabels = 1.6,\n     nodeSizeSpread = 3,\n     cexNodes = 2,\n     hubBorderCol = \"darkgray\",\n     title1 = \"Network with Pearson correlations and \\\"unsigned\\\" transformation\", \n     showTitle = TRUE,\n     cexTitle = 2.3)\n\nlegend(0.7, 1.1, cex = 2.2, title = \"estimated correlation:\",\n       legend = c(\"+\",\"-\"), lty = 1, lwd = 3, col = c(\"#009900\",\"red\"),\n       bty = \"n\", horiz = TRUE)\n```\n\n![](man/figures/readme/single_pears_unsigned_4-1.png)\n\nWhile with the \u201csigned\u201d transformation, positive correlated taxa are\nlikely to belong to the same cluster, with the \u201cunsigned\u201d transformation\nclusters contain strongly positive and negative correlated taxa.\n\n------------------------------------------------------------------------\n"
      },
      "source": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/readme.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Network on genus level",
        "parent_header": [
          "NetCoMi <img src=\"man/figures/NetCoMi_logo_800x400_300dpi.png\" align=\"right\" width=\"260\" />",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "We now construct a further network, where OTUs are agglomerated to\ngenera.\n\n``` r\nlibrary(phyloseq)\ndata(\"amgut2.filt.phy\")\n\n# Agglomerate to genus level\namgut_genus <- tax_glom(amgut2.filt.phy, taxrank = \"Rank6\")\n\n# Taxonomic table\ntaxtab <- as(tax_table(amgut_genus), \"matrix\")\n\n# Rename taxonomic table and make Rank6 (genus) unique\namgut_genus_renamed <- renameTaxa(amgut_genus, \n                                  pat = \"<name>\", \n                                  substPat = \"<name>_<subst_name>(<subst_R>)\",\n                                  numDupli = \"Rank6\")\n```\n\n    ## Column 7 contains NAs only and is ignored.\n\n``` r\n# Network construction and analysis\nnet_genus <- netConstruct(amgut_genus_renamed,\n                          taxRank = \"Rank6\",\n                          measure = \"pearson\",\n                          zeroMethod = \"multRepl\",\n                          normMethod = \"clr\",\n                          sparsMethod = \"threshold\",\n                          thresh = 0.3,\n                          verbose = 3)\n```\n\n    ## Checking input arguments ...\n\n    ## Done.\n\n    ## 2 rows with zero sum removed.\n\n    ## 43 taxa and 294 samples remaining.\n\n    ## \n    ## Zero treatment:\n\n    ## Execute multRepl() ... Done.\n    ## \n    ## Normalization:\n    ## Execute clr(){SpiecEasi} ... Done.\n    ## \n    ## Calculate 'pearson' associations ... Done.\n    ## \n    ## Sparsify associations via 'threshold' ... Done.\n\n``` r\nprops_genus <- netAnalyze(net_genus, clustMethod = \"cluster_fast_greedy\")\n```\n\n![](man/figures/readme/single_genus_1-1.png)\n"
      },
      "source": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/readme.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Network plots",
        "parent_header": [
          "NetCoMi <img src=\"man/figures/NetCoMi_logo_800x400_300dpi.png\" align=\"right\" width=\"260\" />",
          "Usage",
          "Network on genus level"
        ],
        "type": "Text_excerpt",
        "value": "Modifications:\n\n- Fruchterman-Reingold layout algorithm from `igraph` package used\n  (passed to `plot` as matrix)\n- Shortened labels (using the \u201cintelligent\u201d method, which avoids\n  duplicates)\n- Fixed node sizes, where hubs are enlarged\n- Node color is gray for all nodes (transparancy is lower for hub nodes\n  by default)\n\n``` r\n# Compute layout\ngraph3 <- igraph::graph_from_adjacency_matrix(net_genus$adjaMat1, \n                                              weighted = TRUE)\nset.seed(123456)\nlay_fr <- igraph::layout_with_fr(graph3)\n\n# Row names of the layout matrix must match the node names\nrownames(lay_fr) <- rownames(net_genus$adjaMat1)\n\nplot(props_genus,\n     layout = lay_fr,\n     shortenLabels = \"intelligent\",\n     labelLength = 10,\n     labelPattern = c(5, \"'\", 3, \"'\", 3),\n     nodeSize = \"fix\",\n     nodeColor = \"gray\",\n     cexNodes = 0.8,\n     cexHubs = 1.1,\n     cexLabels = 1.2,\n     title1 = \"Network on genus level with Pearson correlations\", \n     showTitle = TRUE,\n     cexTitle = 2.3)\n\nlegend(0.7, 1.1, cex = 2.2, title = \"estimated correlation:\",\n       legend = c(\"+\",\"-\"), lty = 1, lwd = 3, col = c(\"#009900\",\"red\"), \n       bty = \"n\", horiz = TRUE)\n```\n\n![](man/figures/readme/single_genus_2-1.png)\n\nSince the above visualization is obviously not optimal, we make further\nadjustments:\n\n- This time, the Fruchterman-Reingold layout algorithm is computed\n  within the plot function and thus applied to the \u201creduced\u201d network\n  without singletons\n- Labels are not scaled to node sizes\n- Single nodes are removed\n- Node sizes are scaled to the column sums of clr-transformed data\n- Node colors represent the determined clusters\n- Border color of hub nodes is changed from black to darkgray\n- Label size of hubs is enlarged\n\n``` r\nset.seed(123456)\n\nplot(props_genus,\n     layout = \"layout_with_fr\",\n     shortenLabels = \"intelligent\",\n     labelLength = 10,\n     labelPattern = c(5, \"'\", 3, \"'\", 3),\n     labelScale = FALSE,\n     rmSingles = TRUE,\n     nodeSize = \"clr\",\n     nodeColor = \"cluster\",\n     hubBorderCol = \"darkgray\",\n     cexNodes = 2,\n     cexLabels = 1.5,\n     cexHubLabels = 2,\n     title1 = \"Network on genus level with Pearson correlations\", \n     showTitle = TRUE,\n     cexTitle = 2.3)\n\nlegend(0.7, 1.1, cex = 2.2, title = \"estimated correlation:\",\n       legend = c(\"+\",\"-\"), lty = 1, lwd = 3, col = c(\"#009900\",\"red\"), \n       bty = \"n\", horiz = TRUE)\n```\n\n![](man/figures/readme/single_genus_3-1.png)\n\nLet\u2019s check whether the largest nodes are actually those with highest\ncolumn sums in the matrix with normalized counts returned by\n`netConstruct()`.\n\n``` r\nsort(colSums(net_genus$normCounts1), decreasing = TRUE)[1:10]\n```\n\n    ##             Bacteroides              Klebsiella        Faecalibacterium \n    ##               1200.7971               1137.4928                708.0877 \n    ##      5_Clostridiales(O)    2_Ruminococcaceae(F)    3_Lachnospiraceae(F) \n    ##                549.2647                502.1889                493.7558 \n    ## 6_Enterobacteriaceae(F)               Roseburia         Parabacteroides \n    ##                363.3841                333.8737                328.0495 \n    ##             Coprococcus \n    ##                274.4082\n\nIn order to further improve our plot, we use the following\nmodifications:\n\n- This time, we choose the \u201cspring\u201d layout as part of `qgraph()` (the\n  function is generally used for network plotting in NetCoMi)\n- A repulsion value below 1 places the nodes further apart\n- Labels are not shortened anymore\n- Nodes (bacteria on genus level) are colored according to the\n  respective phylum\n- Edges representing positive associations are colored in blue, negative\n  ones in orange (just to give an example for alternative edge coloring)\n- Transparency is increased for edges with high weight to improve the\n  readability of node labels\n\n``` r\n# Get phyla names\ntaxtab <- as(tax_table(amgut_genus_renamed), \"matrix\")\nphyla <- as.factor(gsub(\"p__\", \"\", taxtab[, \"Rank2\"]))\nnames(phyla) <- taxtab[, \"Rank6\"]\n#table(phyla)\n\n# Define phylum colors\nphylcol <- c(\"cyan\", \"blue3\", \"red\", \"lawngreen\", \"yellow\", \"deeppink\")\n\nplot(props_genus,\n     layout = \"spring\",\n     repulsion = 0.84,\n     shortenLabels = \"none\",\n     charToRm = \"g__\",\n     labelScale = FALSE,\n     rmSingles = TRUE,\n     nodeSize = \"clr\",\n     nodeSizeSpread = 4,\n     nodeColor = \"feature\", \n     featVecCol = phyla, \n     colorVec =  phylcol,\n     posCol = \"darkturquoise\", \n     negCol = \"orange\",\n     edgeTranspLow = 0,\n     edgeTranspHigh = 40,\n     cexNodes = 2,\n     cexLabels = 2,\n     cexHubLabels = 2.5,\n     title1 = \"Network on genus level with Pearson correlations\", \n     showTitle = TRUE,\n     cexTitle = 2.3)\n\n# Colors used in the legend should be equally transparent as in the plot\nphylcol_transp <- colToTransp(phylcol, 60)\n\nlegend(-1.2, 1.2, cex = 2, pt.cex = 2.5, title = \"Phylum:\", \n       legend=levels(phyla), col = phylcol_transp, bty = \"n\", pch = 16) \n\nlegend(0.7, 1.1, cex = 2.2, title = \"estimated correlation:\",\n       legend = c(\"+\",\"-\"), lty = 1, lwd = 3, col = c(\"darkturquoise\",\"orange\"), \n       bty = \"n\", horiz = TRUE)\n```\n\n![](man/figures/readme/single_genus_5-1.png)\n\n------------------------------------------------------------------------\n"
      },
      "source": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/readme.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Using an association matrix as input",
        "parent_header": [
          "NetCoMi <img src=\"man/figures/NetCoMi_logo_800x400_300dpi.png\" align=\"right\" width=\"260\" />",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "The QMP data set provided by the `SPRING` package is used to demonstrate\nhow NetCoMi is used to analyze a precomputed network (given as\nassociation matrix).\n\nThe data set contains quantitative count data (true absolute values),\nwhich SPRING can deal with. See `?QMP` for details.\n\n`nlambda` and `rep.num` are set to 10 for a decreased execution time,\nbut should be higher for real data.\n\n``` r\nlibrary(SPRING)\n\n# Load the QMP data set\ndata(\"QMP\") \n\n# Run SPRING for association estimation\nfit_spring <- SPRING(QMP, \n                     quantitative = TRUE, \n                     lambdaseq = \"data-specific\",\n                     nlambda = 10, \n                     rep.num = 10,\n                     seed = 123456, \n                     ncores = 1,\n                     Rmethod = \"approx\",\n                     verbose = FALSE)\n\n# Optimal lambda\nopt.K <- fit_spring$output$stars$opt.index\n    \n# Association matrix\nassoMat <- as.matrix(SpiecEasi::symBeta(fit_spring$output$est$beta[[opt.K]],\n                                        mode = \"ave\"))\nrownames(assoMat) <- colnames(assoMat) <- colnames(QMP)\n```\n\nThe association matrix is now passed to `netConstruct` to start the\nusual NetCoMi workflow. Note that the `dataType` argument must be set\nappropriately.\n\n``` r\n# Network construction and analysis\nnet_asso <- netConstruct(data = assoMat,\n                         dataType = \"condDependence\",\n                         sparsMethod = \"none\",\n                         verbose = 0)\n\nprops_asso <- netAnalyze(net_asso, clustMethod = \"hierarchical\")\n```\n\n![](man/figures/readme/association_input_2-1.png)\n\n``` r\nplot(props_asso,\n     layout = \"spring\",\n     repulsion = 1.2,\n     shortenLabels = \"none\",\n     labelScale = TRUE,\n     rmSingles = TRUE,\n     nodeSize = \"eigenvector\",\n     nodeSizeSpread = 2,\n     nodeColor = \"cluster\",\n     hubBorderCol = \"gray60\",\n     cexNodes = 1.8,\n     cexLabels = 2,\n     cexHubLabels = 2.2,\n     title1 = \"Network for QMP data\", \n     showTitle = TRUE,\n     cexTitle = 2.3)\n\nlegend(0.7, 1.1, cex = 2.2, title = \"estimated association:\",\n       legend = c(\"+\",\"-\"), lty = 1, lwd = 3, col = c(\"#009900\",\"red\"), \n       bty = \"n\", horiz = TRUE)\n```\n\n![](man/figures/readme/association_input_3-1.png)\n\n------------------------------------------------------------------------\n"
      },
      "source": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/readme.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Network comparison",
        "parent_header": [
          "NetCoMi <img src=\"man/figures/NetCoMi_logo_800x400_300dpi.png\" align=\"right\" width=\"260\" />",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Now let\u2019s look how NetCoMi is used to compare two networks.\n\n#### Network construction\n\nThe data set is split by `\"SEASONAL_ALLERGIES\"` leading to two subsets\nof samples (with and without seasonal allergies). We ignore the \u201cNone\u201d\ngroup.\n\n``` r\n# Split the phyloseq object into two groups\namgut_season_yes <- phyloseq::subset_samples(amgut2.filt.phy, \n                                             SEASONAL_ALLERGIES == \"yes\")\namgut_season_no <- phyloseq::subset_samples(amgut2.filt.phy, \n                                            SEASONAL_ALLERGIES == \"no\")\n\namgut_season_yes\n```\n\n    ## phyloseq-class experiment-level object\n    ## otu_table()   OTU Table:         [ 138 taxa and 121 samples ]\n    ## sample_data() Sample Data:       [ 121 samples by 166 sample variables ]\n    ## tax_table()   Taxonomy Table:    [ 138 taxa by 7 taxonomic ranks ]\n\n``` r\namgut_season_no\n```\n\n    ## phyloseq-class experiment-level object\n    ## otu_table()   OTU Table:         [ 138 taxa and 163 samples ]\n    ## sample_data() Sample Data:       [ 163 samples by 166 sample variables ]\n    ## tax_table()   Taxonomy Table:    [ 138 taxa by 7 taxonomic ranks ]\n\nThe 50 nodes with highest variance are selected for network construction\nto get smaller networks.\n\nWe filter the 121 samples (sample size of the smaller group) with\nhighest frequency to make the sample sizes equal and thus ensure\ncomparability.\n\n``` r\nn_yes <- phyloseq::nsamples(amgut_season_yes)\n\n# Network construction\nnet_season <- netConstruct(data = amgut_season_no, \n                           data2 = amgut_season_yes,  \n                           filtTax = \"highestVar\",\n                           filtTaxPar = list(highestVar = 50),\n                           filtSamp = \"highestFreq\",\n                           filtSampPar = list(highestFreq = n_yes),\n                           measure = \"spring\",\n                           measurePar = list(nlambda = 10, \n                                             rep.num = 10,\n                                             Rmethod = \"approx\"),\n                           normMethod = \"none\", \n                           zeroMethod = \"none\",\n                           sparsMethod = \"none\", \n                           dissFunc = \"signed\",\n                           verbose = 2,\n                           seed = 123456)\n```\n\n    ## Checking input arguments ... Done.\n    ## Data filtering ...\n    ## 42 samples removed in data set 1.\n    ## 0 samples removed in data set 2.\n    ## 96 taxa removed in each data set.\n    ## 1 rows with zero sum removed in group 2.\n    ## 42 taxa and 121 samples remaining in group 1.\n    ## 42 taxa and 120 samples remaining in group 2.\n    ## \n    ## Calculate 'spring' associations ... Done.\n    ## \n    ## Calculate associations in group 2 ... Done.\n\nAlternatively, a group vector could be passed to `group`, according to\nwhich the data set is split into two groups:\n\n``` r\n# Get count table\ncountMat <- phyloseq::otu_table(amgut2.filt.phy)\n\n# netConstruct() expects samples in rows\ncountMat <- t(as(countMat, \"matrix\"))\n\ngroup_vec <- phyloseq::get_variable(amgut2.filt.phy, \"SEASONAL_ALLERGIES\")\n\n# Select the two groups of interest (level \"none\" is excluded)\nsel <- which(group_vec %in% c(\"no\", \"yes\"))\ngroup_vec <- group_vec[sel]\ncountMat <- countMat[sel, ]\n\nnet_season <- netConstruct(countMat, \n                           group = group_vec, \n                           filtTax = \"highestVar\",\n                           filtTaxPar = list(highestVar = 50),\n                           filtSamp = \"highestFreq\",\n                           filtSampPar = list(highestFreq = n_yes),\n                           measure = \"spring\",\n                           measurePar = list(nlambda=10, \n                                             rep.num=10,\n                                             Rmethod = \"approx\"),\n                           normMethod = \"none\", \n                           zeroMethod = \"none\",\n                           sparsMethod = \"none\", \n                           dissFunc = \"signed\",\n                           verbose = 3,\n                           seed = 123456)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/readme.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Network analysis",
        "parent_header": [
          "NetCoMi <img src=\"man/figures/NetCoMi_logo_800x400_300dpi.png\" align=\"right\" width=\"260\" />",
          "Usage",
          "Network comparison"
        ],
        "type": "Text_excerpt",
        "value": "The object returned by `netConstruct()` containing both networks is\nagain passed to `netAnalyze()`. Network properties are computed for both\nnetworks simultaneously.\n\nTo demonstrate further functionalities of `netAnalyze()`, we play around\nwith the available arguments, even if the chosen setting might not be\noptimal.\n\n- `centrLCC = FALSE`: Centralities are calculated for all nodes (not\n  only for the largest connected component).\n- `avDissIgnoreInf = TRUE`: Nodes with an infinite dissimilarity are\n  ignored when calculating the average dissimilarity.\n- `sPathNorm = FALSE`: Shortest paths are not normalized by average\n  dissimilarity.\n- `hubPar = c(\"degree\", \"eigenvector\")`: Hubs are nodes with highest\n  degree and eigenvector centrality at the same time.\n- `lnormFit = TRUE` and `hubQuant = 0.9`: A log-normal distribution is\n  fitted to the centrality values to identify nodes with \u201chighest\u201d\n  centrality values. Here, a node is identified as hub if for each of\n  the three centrality measures, the node\u2019s centrality value is above\n  the 90% quantile of the fitted log-normal distribution.\n- The non-normalized centralities are used for all four measures.\n\n**Note! The arguments must be set carefully, depending on the research\nquestions. NetCoMi\u2019s default values are not generally preferable in all\npractical cases!**\n\n``` r\nprops_season <- netAnalyze(net_season, \n                           centrLCC = FALSE,\n                           avDissIgnoreInf = TRUE,\n                           sPathNorm = FALSE,\n                           clustMethod = \"cluster_fast_greedy\",\n                           hubPar = c(\"degree\", \"eigenvector\"),\n                           hubQuant = 0.9,\n                           lnormFit = TRUE,\n                           normDeg = FALSE,\n                           normBetw = FALSE,\n                           normClose = FALSE,\n                           normEigen = FALSE)\n```\n\n![](man/figures/readme/netcomp_spring_3-1.png)\n\n``` r\nsummary(props_season)\n```\n\n    ## \n    ## Component sizes\n    ## ```````````````\n    ## group '1':           \n    ## size: 28  1\n    ##    #:  1 14\n    ## group '2':            \n    ## size: 31 8 1\n    ##    #:  1 1 3\n    ## ______________________________\n    ## Global network properties\n    ## `````````````````````````\n    ## Largest connected component (LCC):\n    ##                          group '1' group '2'\n    ## Relative LCC size          0.66667   0.73810\n    ## Clustering coefficient     0.15161   0.27111\n    ## Modularity                 0.62611   0.45823\n    ## Positive edge percentage  86.66667 100.00000\n    ## Edge density               0.07937   0.12473\n    ## Natural connectivity       0.04539   0.04362\n    ## Vertex connectivity        1.00000   1.00000\n    ## Edge connectivity          1.00000   1.00000\n    ## Average dissimilarity*     0.67251   0.68178\n    ## Average path length**      3.40008   1.86767\n    ## \n    ## Whole network:\n    ##                          group '1' group '2'\n    ## Number of components      15.00000   5.00000\n    ## Clustering coefficient     0.15161   0.29755\n    ## Modularity                 0.62611   0.55684\n    ## Positive edge percentage  86.66667 100.00000\n    ## Edge density               0.03484   0.08130\n    ## Natural connectivity       0.02826   0.03111\n    ## -----\n    ## *: Dissimilarity = 1 - edge weight\n    ## **: Path length = Sum of dissimilarities along the path\n    ## \n    ## ______________________________\n    ## Clusters\n    ## - In the whole network\n    ## - Algorithm: cluster_fast_greedy\n    ## ```````````````````````````````` \n    ## group '1':                  \n    ## name:  0 1 2 3 4 5\n    ##    #: 14 7 6 5 4 6\n    ## \n    ## group '2':                  \n    ## name: 0 1  2 3 4 5\n    ##    #: 3 5 14 4 8 8\n    ## \n    ## ______________________________\n    ## Hubs\n    ## - In alphabetical/numerical order\n    ## - Based on log-normal quantiles of centralities\n    ## ```````````````````````````````````````````````\n    ##  group '1' group '2'\n    ##     307981    322235\n    ##               363302\n    ## \n    ## ______________________________\n    ## Centrality measures\n    ## - In decreasing order\n    ## - Computed for the complete network\n    ## ````````````````````````````````````\n    ## Degree (unnormalized):\n    ##         group '1' group '2'\n    ##  307981         5         2\n    ##    9715         5         5\n    ##  364563         4         4\n    ##  259569         4         5\n    ##  322235         3         9\n    ##            ______    ______\n    ##  322235         3         9\n    ##  363302         3         9\n    ##  158660         2         6\n    ##  188236         3         5\n    ##  259569         4         5\n    ## \n    ## Betweenness centrality (unnormalized):\n    ##         group '1' group '2'\n    ##  307981       231         0\n    ##  331820       170         9\n    ##  158660       162        80\n    ##  188236       161        85\n    ##  322235       159       126\n    ##            ______    ______\n    ##  322235       159       126\n    ##  363302        74        93\n    ##  188236       161        85\n    ##  158660       162        80\n    ##  326792        17        58\n    ## \n    ## Closeness centrality (unnormalized):\n    ##         group '1' group '2'\n    ##  307981  18.17276   7.80251\n    ##    9715   15.8134   9.27254\n    ##  188236   15.7949  23.24055\n    ##  301645  15.30177   9.01509\n    ##  364563  14.73566  21.21352\n    ##            ______    ______\n    ##  322235  13.50232  26.36749\n    ##  363302  12.30297  24.19703\n    ##  158660  13.07106  23.31577\n    ##  188236   15.7949  23.24055\n    ##  326792  14.61391  22.52157\n    ## \n    ## Eigenvector centrality (unnormalized):\n    ##         group '1' group '2'\n    ##  307981   0.53313   0.06912\n    ##    9715   0.44398   0.10788\n    ##  301645   0.41878   0.08572\n    ##  326792   0.27033   0.15727\n    ##  188236   0.25824   0.21162\n    ##            ______    ______\n    ##  322235   0.01749   0.29705\n    ##  363302   0.03526   0.28512\n    ##  188236   0.25824   0.21162\n    ##  194648   0.00366   0.19448\n    ##  184983    0.0917    0.1854\n"
      },
      "source": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/readme.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Visual network comparison",
        "parent_header": [
          "NetCoMi <img src=\"man/figures/NetCoMi_logo_800x400_300dpi.png\" align=\"right\" width=\"260\" />",
          "Usage",
          "Network comparison"
        ],
        "type": "Text_excerpt",
        "value": "First, the layout is computed separately in both groups (qgraph\u2019s\n\u201cspring\u201d layout in this case).\n\nNode sizes are scaled according to the mclr-transformed data since\n`SPRING` uses the mclr transformation as normalization method.\n\nNode colors represent clusters. Note that by default, two clusters have\nthe same color in both groups if they have at least two nodes in common\n(`sameColThresh = 2`). Set `sameClustCol` to `FALSE` to get different\ncluster colors.\n\n``` r\nplot(props_season, \n     sameLayout = FALSE, \n     nodeColor = \"cluster\",\n     nodeSize = \"mclr\",\n     labelScale = FALSE,\n     cexNodes = 1.5, \n     cexLabels = 2.5,\n     cexHubLabels = 3,\n     cexTitle = 3.7,\n     groupNames = c(\"No seasonal allergies\", \"Seasonal allergies\"),\n     hubBorderCol  = \"gray40\")\n\nlegend(\"bottom\", title = \"estimated association:\", legend = c(\"+\",\"-\"), \n       col = c(\"#009900\",\"red\"), inset = 0.02, cex = 4, lty = 1, lwd = 4, \n       bty = \"n\", horiz = TRUE)\n```\n\n![](man/figures/readme/netcomp_spring_4-1.png)\n\nUsing different layouts leads to a \u201cnice-looking\u201d network plot for each\ngroup, however, it is difficult to identify group differences at first\nglance.\n\nThus, we now use the same layout in both groups. In the following, the\nlayout is computed for group 1 (the left network) and taken over for\ngroup 2.\n\n`rmSingles` is set to `\"inboth\"` because only nodes that are unconnected\nin both groups can be removed if the same layout is used.\n\n``` r\nplot(props_season, \n     sameLayout = TRUE, \n     layoutGroup = 1,\n     rmSingles = \"inboth\", \n     nodeSize = \"mclr\", \n     labelScale = FALSE,\n     cexNodes = 1.5, \n     cexLabels = 2.5,\n     cexHubLabels = 3,\n     cexTitle = 3.8,\n     groupNames = c(\"No seasonal allergies\", \"Seasonal allergies\"),\n     hubBorderCol  = \"gray40\")\n\nlegend(\"bottom\", title = \"estimated association:\", legend = c(\"+\",\"-\"), \n       col = c(\"#009900\",\"red\"), inset = 0.02, cex = 4, lty = 1, lwd = 4, \n       bty = \"n\", horiz = TRUE)\n```\n\n![](man/figures/readme/netcomp_spring_5-1.png)\n\nIn the above plot, we can see clear differences between the groups. The\nOTU \u201c322235\u201d, for instance, is more strongly connected in the \u201cSeasonal\nallergies\u201d group than in the group without seasonal allergies, which is\nwhy it is a hub on the right, but not on the left.\n\nHowever, if the layout of one group is simply taken over to the other,\none of the networks (here the \u201cseasonal allergies\u201d group) is usually not\nthat nice-looking due to the long edges. Therefore, NetCoMi (\\>= 1.0.2)\noffers a further option (`layoutGroup = \"union\"`), where a union of the\ntwo layouts is used in both groups. In doing so, the nodes are placed as\noptimal as possible equally for both networks.\n\n*The idea and R code for this functionality were provided by [Christian\nL. M\u00fcller](https://github.com/muellsen?tab=followers) and [Alice\nSommer](https://www.iq.harvard.edu/people/alice-sommer)*\n\n``` r\nplot(props_season, \n     sameLayout = TRUE, \n     repulsion = 0.95,\n     layoutGroup = \"union\",\n     rmSingles = \"inboth\", \n     nodeSize = \"mclr\", \n     labelScale = FALSE,\n     cexNodes = 1.5, \n     cexLabels = 2.5,\n     cexHubLabels = 3,\n     cexTitle = 3.8,\n     groupNames = c(\"No seasonal allergies\", \"Seasonal allergies\"),\n     hubBorderCol  = \"gray40\")\n\nlegend(\"bottom\", title = \"estimated association:\", legend = c(\"+\",\"-\"), \n       col = c(\"#009900\",\"red\"), inset = 0.02, cex = 4, lty = 1, lwd = 4, \n       bty = \"n\", horiz = TRUE)\n```\n\n![](man/figures/readme/netcomp_spring_6-1.png)\n"
      },
      "source": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/readme.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Quantitative network comparison",
        "parent_header": [
          "NetCoMi <img src=\"man/figures/NetCoMi_logo_800x400_300dpi.png\" align=\"right\" width=\"260\" />",
          "Usage",
          "Network comparison"
        ],
        "type": "Text_excerpt",
        "value": "Since runtime is considerably increased if permutation tests are\nperformed, we set the `permTest` parameter to `FALSE`. See the\n`tutorial_createAssoPerm` file for a network comparison including\npermutation tests.\n\nSince permutation tests are still conducted for the Adjusted Rand Index,\na seed should be set for reproducibility.\n\n``` r\ncomp_season <- netCompare(props_season, \n                          permTest = FALSE, \n                          verbose = FALSE,\n                          seed = 123456)\n\nsummary(comp_season, \n        groupNames = c(\"No allergies\", \"Allergies\"),\n        showCentr = c(\"degree\", \"between\", \"closeness\"), \n        numbNodes = 5)\n```\n\n    ## \n    ## Comparison of Network Properties\n    ## ----------------------------------\n    ## CALL: \n    ## netCompare(x = props_season, permTest = FALSE, verbose = FALSE, \n    ##     seed = 123456)\n    ## \n    ## ______________________________\n    ## Global network properties\n    ## `````````````````````````\n    ## Largest connected component (LCC):\n    ##                          No allergies   Allergies    difference\n    ## Relative LCC size               0.667       0.738         0.071\n    ## Clustering coefficient          0.152       0.271         0.120\n    ## Modularity                      0.626       0.458         0.168\n    ## Positive edge percentage       86.667     100.000        13.333\n    ## Edge density                    0.079       0.125         0.045\n    ## Natural connectivity            0.045       0.044         0.002\n    ## Vertex connectivity             1.000       1.000         0.000\n    ## Edge connectivity               1.000       1.000         0.000\n    ## Average dissimilarity*          0.673       0.682         0.009\n    ## Average path length**           3.400       1.868         1.532\n    ## \n    ## Whole network:\n    ##                          No allergies   Allergies    difference\n    ## Number of components           15.000       5.000        10.000\n    ## Clustering coefficient          0.152       0.298         0.146\n    ## Modularity                      0.626       0.557         0.069\n    ## Positive edge percentage       86.667     100.000        13.333\n    ## Edge density                    0.035       0.081         0.046\n    ## Natural connectivity            0.028       0.031         0.003\n    ## -----\n    ##  *: Dissimilarity = 1 - edge weight\n    ## **: Path length = Sum of dissimilarities along the path\n    ## \n    ## ______________________________\n    ## Jaccard index (similarity betw. sets of most central nodes)\n    ## ```````````````````````````````````````````````````````````\n    ##                     Jacc   P(<=Jacc)     P(>=Jacc)   \n    ## degree             0.556    0.957578      0.144846   \n    ## betweenness centr. 0.333    0.650307      0.622822   \n    ## closeness centr.   0.231    0.322424      0.861268   \n    ## eigenvec. centr.   0.100    0.017593 *    0.996692   \n    ## hub taxa           0.000    0.296296      1.000000   \n    ## -----\n    ## Jaccard index in [0,1] (1 indicates perfect agreement)\n    ## \n    ## ______________________________\n    ## Adjusted Rand index (similarity betw. clusterings)\n    ## ``````````````````````````````````````````````````\n    ##         wholeNet       LCC\n    ## ARI        0.232     0.355\n    ## p-value    0.000     0.000\n    ## -----\n    ## ARI in [-1,1] with ARI=1: perfect agreement betw. clusterings\n    ##                    ARI=0: expected for two random clusterings\n    ## p-value: permutation test (n=1000) with null hypothesis ARI=0\n    ## \n    ## ______________________________\n    ## Graphlet Correlation Distance\n    ## `````````````````````````````\n    ##     wholeNet       LCC\n    ## GCD    1.577     1.863\n    ## -----\n    ## GCD >= 0 (GCD=0 indicates perfect agreement between GCMs)\n    ## \n    ## ______________________________\n    ## Centrality measures\n    ## - In decreasing order\n    ## - Computed for the whole network\n    ## ````````````````````````````````````\n    ## Degree (unnormalized):\n    ##        No allergies Allergies abs.diff.\n    ## 322235            3         9         6\n    ## 363302            3         9         6\n    ## 469709            0         4         4\n    ## 158660            2         6         4\n    ## 223059            0         4         4\n    ## \n    ## Betweenness centrality (unnormalized):\n    ##        No allergies Allergies abs.diff.\n    ## 307981          231         0       231\n    ## 331820          170         9       161\n    ## 259569          137        34       103\n    ## 158660          162        80        82\n    ## 184983           92        12        80\n    ## \n    ## Closeness centrality (unnormalized):\n    ##        No allergies Allergies abs.diff.\n    ## 469709            0    21.203    21.203\n    ## 541301            0    20.942    20.942\n    ## 181016            0    19.498    19.498\n    ## 361496            0    19.349    19.349\n    ## 223059            0    19.261    19.261\n    ## \n    ## _________________________________________________________\n    ## Significance codes: ***: 0.001, **: 0.01, *: 0.05, .: 0.1\n\n------------------------------------------------------------------------\n"
      },
      "source": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/readme.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Differential networks",
        "parent_header": [
          "NetCoMi <img src=\"man/figures/NetCoMi_logo_800x400_300dpi.png\" align=\"right\" width=\"260\" />",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "We now build a differential association network, where two nodes are\nconnected if they are differentially associated between the two groups.\n\nDue to its very short execution time, we use Pearson\u2019s correlations for\nestimating associations between OTUs.\n\nFisher\u2019s z-test is applied for identifying differentially correlated\nOTUs. Multiple testing adjustment is done by controlling the local false\ndiscovery rate.\n\nNote: `sparsMethod` is set to `\"none\"`, just to be able to include all\ndifferential associations in the association network plot (see below).\nHowever, the differential network is always based on the estimated\nassociation matrices before sparsification (the `assoEst1` and\n`assoEst2` matrices returned by `netConstruct()`).\n\n``` r\nnet_season_pears <- netConstruct(data = amgut_season_no, \n                                 data2 = amgut_season_yes, \n                                 filtTax = \"highestVar\",\n                                 filtTaxPar = list(highestVar = 50),\n                                 measure = \"pearson\", \n                                 normMethod = \"clr\",\n                                 sparsMethod = \"none\", \n                                 thresh = 0.2,\n                                 verbose = 3)\n```\n\n    ## Checking input arguments ... Done.\n    ## Infos about changed arguments:\n    ## Zero replacement needed for clr transformation. \"multRepl\" used.\n    ## \n    ## Data filtering ...\n    ## 95 taxa removed in each data set.\n    ## 1 rows with zero sum removed in group 1.\n    ## 1 rows with zero sum removed in group 2.\n    ## 43 taxa and 162 samples remaining in group 1.\n    ## 43 taxa and 120 samples remaining in group 2.\n    ## \n    ## Zero treatment in group 1:\n    ## Execute multRepl() ... Done.\n    ## \n    ## Zero treatment in group 2:\n    ## Execute multRepl() ... Done.\n    ## \n    ## Normalization in group 1:\n    ## Execute clr(){SpiecEasi} ... Done.\n    ## \n    ## Normalization in group 2:\n    ## Execute clr(){SpiecEasi} ... Done.\n    ## \n    ## Calculate 'pearson' associations ... Done.\n    ## \n    ## Calculate associations in group 2 ... Done.\n\n``` r\n# Differential network construction\ndiff_season <- diffnet(net_season_pears,\n                       diffMethod = \"fisherTest\", \n                       adjust = \"lfdr\")\n```\n\n    ## Checking input arguments ... \n    ## Done.\n    ## Adjust for multiple testing using 'lfdr' ... \n    ## Execute fdrtool() ...\n\n    ## Step 1... determine cutoff point\n    ## Step 2... estimate parameters of null distribution and eta0\n    ## Step 3... compute p-values and estimate empirical PDF/CDF\n    ## Step 4... compute q-values and local fdr\n\n    ## Done.\n\n``` r\n# Differential network plot\nplot(diff_season, \n     cexNodes = 0.8, \n     cexLegend = 3,\n     cexTitle = 4,\n     mar = c(2,2,8,5),\n     legendGroupnames = c(\"group 'no'\", \"group 'yes'\"),\n     legendPos = c(0.7,1.6))\n```\n\n![](man/figures/readme/diffnet_1-1.png) In the differential\nnetwork shown above, edge colors represent the direction of associations\nin the two groups. If, for instance, two OTUs are positively associated\nin group 1 and negatively associated in group 2 (such as \u2018191541\u2019 and\n\u2018188236\u2019), the respective edge is colored in cyan.\n\nWe also take a look at the corresponding associations by constructing\nassociation networks that include only the differentially associated\nOTUs.\n\n``` r\nprops_season_pears <- netAnalyze(net_season_pears, \n                                 clustMethod = \"cluster_fast_greedy\",\n                                 weightDeg = TRUE,\n                                 normDeg = FALSE,\n                                 gcmHeat = FALSE)\n```\n\n``` r\n# Identify the differentially associated OTUs\ndiffmat_sums <- rowSums(diff_season$diffAdjustMat)\ndiff_asso_names <- names(diffmat_sums[diffmat_sums > 0])\n\nplot(props_season_pears, \n     nodeFilter = \"names\",\n     nodeFilterPar = diff_asso_names,\n     nodeColor = \"gray\",\n     highlightHubs = FALSE,\n     sameLayout = TRUE, \n     layoutGroup = \"union\",\n     rmSingles = FALSE, \n     nodeSize = \"clr\",\n     edgeTranspHigh = 20,\n     labelScale = FALSE,\n     cexNodes = 1.5, \n     cexLabels = 3,\n     cexTitle = 3.8,\n     groupNames = c(\"No seasonal allergies\", \"Seasonal allergies\"),\n     hubBorderCol  = \"gray40\")\n\nlegend(-0.15,-0.7, title = \"estimated correlation:\", legend = c(\"+\",\"-\"), \n       col = c(\"#009900\",\"red\"), inset = 0.05, cex = 4, lty = 1, lwd = 4, \n       bty = \"n\", horiz = TRUE)\n```\n\n![](man/figures/readme/diffnet_3-1.png)\n\nWe can see that the correlation between the aforementioned OTUs \u2018191541\u2019\nand \u2018188236\u2019 is strongly positive in the left group and negative in the\nright group.\n\n------------------------------------------------------------------------\n"
      },
      "source": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/readme.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Dissimilarity-based Networks",
        "parent_header": [
          "NetCoMi <img src=\"man/figures/NetCoMi_logo_800x400_300dpi.png\" align=\"right\" width=\"260\" />",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "If a dissimilarity measure is used for network construction, nodes are\nsubjects instead of OTUs. The estimated dissimilarities are transformed\ninto similarities, which are used as edge weights so that subjects with\na similar microbial composition are placed close together in the network\nplot.\n\nWe construct a single network using Aitchison\u2019s distance being suitable\nfor the application on compositional data.\n\nSince the Aitchison distance is based on the clr-transformation, zeros\nin the data need to be replaced.\n\nThe network is sparsified using the k-nearest neighbor (knn) algorithm.\n\n``` r\nnet_diss <- netConstruct(amgut1.filt,\n                         measure = \"aitchison\",\n                         zeroMethod = \"multRepl\",\n                         sparsMethod = \"knn\",\n                         kNeighbor = 3,\n                         verbose = 3)\n```\n\n    ## Checking input arguments ... Done.\n    ## Infos about changed arguments:\n    ## Counts normalized to fractions for measure \"aitchison\".\n    ## \n    ## 127 taxa and 289 samples remaining.\n    ## \n    ## Zero treatment:\n    ## Execute multRepl() ... Done.\n    ## \n    ## Normalization:\n    ## Counts normalized by total sum scaling.\n    ## \n    ## Calculate 'aitchison' dissimilarities ... Done.\n    ## \n    ## Sparsify dissimilarities via 'knn' ... Registered S3 methods overwritten by 'proxy':\n    ##   method               from    \n    ##   print.registry_field registry\n    ##   print.registry_entry registry\n    ## Done.\n\nFor cluster detection, we use hierarchical clustering with average\nlinkage. Internally, `k=3` is passed to\n[`cutree()`](https://www.rdocumentation.org/packages/dendextend/versions/1.13.4/topics/cutree)\nfrom `stats` package so that the tree is cut into 3 clusters.\n\n``` r\nprops_diss <- netAnalyze(net_diss,\n                         clustMethod = \"hierarchical\",\n                         clustPar = list(method = \"average\", k = 3),\n                         hubPar = \"eigenvector\")\n```\n\n![](man/figures/readme/example14-1.png)\n\n``` r\nplot(props_diss, \n     nodeColor = \"cluster\", \n     nodeSize = \"eigenvector\",\n     hubTransp = 40,\n     edgeTranspLow = 60,\n     charToRm = \"00000\",\n     shortenLabels = \"simple\",\n     labelLength = 6,\n     mar = c(1, 3, 3, 5))\n\n# get green color with 50% transparency\ngreen2 <- colToTransp(\"#009900\", 40)\n\nlegend(0.4, 1.1,\n       cex = 2.2,\n       legend = c(\"high similarity (low Aitchison distance)\",\n                  \"low similarity (high Aitchison distance)\"), \n       lty = 1, \n       lwd = c(3, 1),\n       col = c(\"darkgreen\", green2),\n       bty = \"n\")\n```\n\n![](man/figures/readme/example15-1.png)\n\nIn this dissimilarity-based network, hubs are interpreted as samples\nwith a microbial composition similar to that of many other samples in\nthe data set.\n\n------------------------------------------------------------------------\n"
      },
      "source": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/readme.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Soil microbiome example",
        "parent_header": [
          "NetCoMi <img src=\"man/figures/NetCoMi_logo_800x400_300dpi.png\" align=\"right\" width=\"260\" />",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Here is the code for reproducing the network plot shown at the\nbeginning.\n\n``` r\ndata(\"soilrep\")\n\nsoil_warm_yes <- phyloseq::subset_samples(soilrep, warmed == \"yes\")\nsoil_warm_no  <- phyloseq::subset_samples(soilrep, warmed == \"no\")\n\nnet_seas_p <- netConstruct(soil_warm_yes, soil_warm_no,\n                           filtTax = \"highestVar\",\n                           filtTaxPar = list(highestVar = 500),\n                           zeroMethod = \"pseudo\",\n                           normMethod = \"clr\",\n                           measure = \"pearson\",\n                           verbose = 0)\n\nnetprops1 <- netAnalyze(net_seas_p, clustMethod = \"cluster_fast_greedy\")\n\nnclust <- as.numeric(max(names(table(netprops1$clustering$clust1))))\n\ncol <- c(topo.colors(nclust), rainbow(6))\n\nplot(netprops1, \n     sameLayout = TRUE, \n     layoutGroup = \"union\", \n     colorVec = col,\n     borderCol = \"gray40\", \n     nodeSize = \"degree\", \n     cexNodes = 0.9, \n     nodeSizeSpread = 3, \n     edgeTranspLow = 80, \n     edgeTranspHigh = 50,\n     groupNames = c(\"Warming\", \"Non-warming\"), \n     showTitle = TRUE, \n     cexTitle = 2.8,\n     mar = c(1,1,3,1), \n     repulsion = 0.9, \n     labels = FALSE, \n     rmSingles = \"inboth\",\n     nodeFilter = \"clustMin\", \n     nodeFilterPar = 10, \n     nodeTransp = 50, \n     hubTransp = 30)\n```\n\n------------------------------------------------------------------------\n"
      },
      "source": "https://raw.githubusercontent.com/stefpeschel/NetCoMi/main/readme.Rmd",
      "technique": "header_analysis"
    }
  ]
}