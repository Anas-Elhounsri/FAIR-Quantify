{
  "application_domain": [
    {
      "confidence": 63.97,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citing HEMnet",
        "parent_header": [
          "HEMnet - Haematoxylin &amp; Eosin and Molecular neural network"
        ],
        "type": "Text_excerpt",
        "value": "Su, A., Lee, H., Tan, X. et al. A deep learning model for molecular label transfer that enables cancer cell identification from histopathology images. npj Precis. Onc. 6, 14 (2022). https://doi.org/10.1038/s41698-022-00252-0\n"
      },
      "source": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/BiomedicalMachineLearning/HEMnet"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-08-30T07:50:03Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-05-10T03:10:05Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A neural network software for using Molecular labelling to improve pathological annotation of H and E tissues "
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9595373087325709,
      "result": {
        "original_header": "Overview",
        "type": "Text_excerpt",
        "value": "HEMnet predicts regions of cancer cells from standard Haematoxylin and Eosin (H&E) stained tumour tissue sections. It leverages molecular labelling - rather than time-consuming and variable pathologist annotations - to annotate H&E images used to train a neural network to predict cancer cells from H&E images alone. We trained HEMnet to predict colon cancer (try it out in our [Colab notebook](https://colab.research.google.com/github/BiomedicalMachineLearning/HEMnet/blob/master/Demo/TCGA_Inference.ipynb)), however, you can train HEMnet to predict other cancers where you have molecular staining for a cancer marker available.  \n"
      },
      "source": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8485414770713302,
      "result": {
        "original_header": "The Team",
        "type": "Text_excerpt",
        "value": "Please contact Dr Quan Nguyen (quan.nguyen@uq.edu.au), Andrew Su (a.su@uqconnect.edu.au), \nand Xiao Tan (xiao.tan@uqconnect.edu.au) for issues, suggestions, \nand we are very welcome to collaboration opportunities. \n"
      },
      "source": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/BiomedicalMachineLearning/HEMnet/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/Visualise_Image_Alignment.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/Visualise_Image_Alignment.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/Feature_Training.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/Feature_Training.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/Plot_Registration_Performance.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/Plot_Registration_Performance.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/Filter_Folded_Tissue.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/Filter_Folded_Tissue.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/NN_interpretation.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/NN_interpretation.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/Tile_Stain_Normalisation.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/Tile_Stain_Normalisation.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/Slide_Name_Extractor.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/Slide_Name_Extractor.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/Stain_Normalisation_Quantification.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/Stain_Normalisation_Quantification.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/CNN_Feature_Extraction.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/CNN_Feature_Extraction.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/Transfer_Learning.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/Transfer_Learning.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/TP53_vs_Path_Annotation.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/TP53_vs_Path_Annotation.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/Stain_Segmentation.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/Stain_Segmentation.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/Slide_Metrics.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/Slide_Metrics.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/Image_Registration.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/Image_Registration.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/Stain_Normalisation_Iterative.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/Stain_Normalisation_Iterative.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/HEMnet_TCGA_Comparison.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/HEMnet_TCGA_Comparison.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/HEMnet_Test_Dataset_IterNorm.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/HEMnet_Test_Dataset_IterNorm.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/Elastix_Logs_Exploration.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/Elastix_Logs_Exploration.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/model_performance.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/model_performance.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/Save_Model.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/Save_Model.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/Stain_Normalisation.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/Stain_Normalisation.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/Unit_test.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/Unit_test.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/HEMnet_Test_Dataset_Reinhard.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/HEMnet_Test_Dataset_Reinhard.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/HEMnet_Train_Dataset.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/HEMnet_Train_Dataset.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/HEMnet_Train_Dataset_Strict.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/HEMnet_Train_Dataset_Strict.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/TCGA_Inference.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/TCGA_Inference.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/Tissue_Masking.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/Tissue_Masking.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/SimpleITK_Exploration.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/SimpleITK_Exploration.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/TCGA_Clinical_Data.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/TCGA_Clinical_Data.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/SVS_Preprocess.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/SVS_Preprocess.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/Save_Slide_Images.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/Save_Slide_Images.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/HEMnet_Test_Dataset.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/HEMnet_Test_Dataset.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/Mutual_Info_Exploration.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/Mutual_Info_Exploration.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/Annotation_Extraction.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Development/Annotation_Extraction.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Demo/TCGA_Inference.ipynb"
      },
      "source": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Demo/TCGA_Inference.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://mybinder.org/v2/gh/BiomedicalMachineLearning/HEMnet/master?filepath=Development"
      },
      "source": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 7
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/BiomedicalMachineLearning/HEMnet/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "BiomedicalMachineLearning/HEMnet"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "HEMnet - Haematoxylin &amp; Eosin and Molecular neural network"
      },
      "source": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/HEMnet/run_all.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://colab.research.google.com/assets/colab-badge.svg"
      },
      "source": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/Overview.jpg?raw=true"
      },
      "source": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "HEMnet - Haematoxylin &amp; Eosin and Molecular neural network",
          "Getting Started"
        ],
        "type": "Text_excerpt",
        "value": "We recommend running HEMnet from our docker image for the simplest and most reliable setup. Alternatively, if you wish to setup a conda environment, we provide an [`environment.yml`](https://github.com/BiomedicalMachineLearning/HEMnet/blob/master/environment.yml) file.\n"
      },
      "source": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1. Docker",
        "parent_header": [
          "HEMnet - Haematoxylin &amp; Eosin and Molecular neural network",
          "Getting Started",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "  \n  You can download the docker image and run the docker container using the following commands:\n\n    ```\n    docker pull andrewsu1/hemnet    \n    docker run -it andrewsu1/hemnet\n    ```\nThe docker image contains a conda environment from which you can run HEMnet. \n"
      },
      "source": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2. Conda",
        "parent_header": [
          "HEMnet - Haematoxylin &amp; Eosin and Molecular neural network",
          "Getting Started",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "   \n   Install Openslide (this is necessary to open whole slide images) - download it [here](https://openslide.org/download/)\n   \n   Create a conda environment from the `environment.yml` file\n   \n   ```\n   conda env create -f environment.yml\n   conda activate HEMnet\n   ```\n   "
      },
      "source": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Slide Preparation",
        "parent_header": [
          "HEMnet - Haematoxylin &amp; Eosin and Molecular neural network",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Name slides in the format: `slide_id_TP53` for TP53 slides and `slide_id_HandE` for H&E slides\nThe `TP53` and `HandE` suffix is used by HEMnet to identify the stain used. \n"
      },
      "source": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/BiomedicalMachineLearning/HEMnet/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Copyright (c) 2018 The Python Packaging Authority\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "HEMnet"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "BiomedicalMachineLearning"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 401930842,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 216089,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 20958,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Roff",
        "size": 6356,
        "type": "Programming_language",
        "value": "Roff"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 1691,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "xiao233333",
          "type": "User"
        },
        "date_created": "2021-03-18T07:17:53Z",
        "date_published": "2021-03-18T07:19:33Z",
        "description": "version 1.0.0",
        "html_url": "https://github.com/BiomedicalMachineLearning/HEMnet/releases/tag/v1.0.0",
        "name": "HEMnet",
        "release_id": 39985848,
        "tag": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/BiomedicalMachineLearning/HEMnet/tarball/v1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/BiomedicalMachineLearning/HEMnet/releases/39985848",
        "value": "https://api.github.com/repos/BiomedicalMachineLearning/HEMnet/releases/39985848",
        "zipball_url": "https://api.github.com/repos/BiomedicalMachineLearning/HEMnet/zipball/v1.0.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-06 07:00:20",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 29
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Getting Started",
        "parent_header": [
          "HEMnet - Haematoxylin &amp; Eosin and Molecular neural network"
        ],
        "type": "Text_excerpt",
        "value": "The easiest way to apply HEMnet is to use predict H&E images with our pretrained model for colorectal cancer using our [google colab notebook](https://colab.research.google.com/github/BiomedicalMachineLearning/HEMnet/blob/master/Demo/TCGA_Inference.ipynb). By default it downloads a slide from TCGA, however, you can also upload your own slide(s) in an `.svs` format.\n\nTo train new models with HEMnet or predict on H&E images on your own machine, we recommend installing the HEMnet environment. \n"
      },
      "source": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1. Docker",
        "parent_header": [
          "HEMnet - Haematoxylin &amp; Eosin and Molecular neural network",
          "Getting Started",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "  \n  You can download the docker image and run the docker container using the following commands:\n\n    ```\n    docker pull andrewsu1/hemnet    \n    docker run -it andrewsu1/hemnet\n    ```\nThe docker image contains a conda environment from which you can run HEMnet. \n"
      },
      "source": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2. Conda",
        "parent_header": [
          "HEMnet - Haematoxylin &amp; Eosin and Molecular neural network",
          "Getting Started",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "   \n   Install Openslide (this is necessary to open whole slide images) - download it [here](https://openslide.org/download/)\n   \n   Create a conda environment from the `environment.yml` file\n   \n   ```\n   conda env create -f environment.yml\n   conda activate HEMnet\n   ```\n   "
      },
      "source": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1. Generate training and testing datasets",
        "parent_header": [
          "HEMnet - Haematoxylin &amp; Eosin and Molecular neural network",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "a. Generate train dataset\n\n`python HEMnet_train_dataset.py -b /path/to/base/directory -s relative/path/to/slides -o relative/path/to/output/directory \n-t relative/path/to/template_slide.svs -v`\n\nb. Generate test dataset\n\n`python HEMnet_test_dataset.py -b /path/to/base/directory -s /relative/path/to/slides -o /relative/path/to/output/directory\n -t relative/path/to/template_slide -m tile_mag -a align_mag -c cancer_thresh -n non_cancer_thresh`\n \n Other parameters:\n * `-t` is the relative path to the template slide from which all other slides will be normalised against. The template \n slide should be the same for each step. \n * `-m` is the tile magnification. e.g. if  the input is `10` then the tiles will be output at 10x\n * `-a` is the align magnification. Paired TP53 and H&E slides will be registered at this magnification. \n To reduce computation time we recommend this be less than the tile magnification - a five times downscale generally works well.\n * `-c` cancer threshold to apply to the DAB channel. DAB intensities less than this threshold indicate cancer.\n * `-n` non-cancer threshold to apply to the DAB channel. DAB intensities greater than this threshold indicate no cancer. \n"
      },
      "source": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2. Train and evaluate model",
        "parent_header": [
          "HEMnet - Haematoxylin &amp; Eosin and Molecular neural network",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "a. Training model  \n\n`python train.py -b /path/to/base/directory -t relative/path/to/training_tile_directory -l relative/path/to/validation_tile_directory\n-o /relative/path/to/output/directory -m cnn_base -g num_gpus -e epochs -a batch_size -s -w -f -v`\n\nOther parameters:\n* `-m` is CNN base model. eg. `resnet50`, `vgg16`, `vgg19`, `inception_v3` and `xception`. \n* `-g` is number of GPUs for training. \n* `-e` is training epochs. Default is `100` epochs.\n* `-a` is batch size. Default is `32`\n* `-s` is option to save the trained model weights.\n* `-w` is option to used transfer learning. Model will used pre-trained weights from ImageNet at the initial stage.\n* `-f` is fine-tuning option. Model will re-train CNN base.\n\nb. Test model prediction\n\n`python test.py  -b /path/to/base/directory -t relative/path/to/test_tile_directory -o /relative/path/to/output/directory\n-w model_weights -m cnn_base -g num_gpus -v`\n\nOther parameters:\n* `-w` is path to trained model. eg. `trained_model.h5`.\n* `-m` is CNN base model (same to training step). \n* `-g` is number of GPUs for prediction.\n \nc. Evaluate model performance and visualise model prediction \n\n`python visualisation.py -b /path/to/base/directory -t /relative/path/to/training_output_directory -p /relative/path/to/test_output_directory \n-o /relative/path/to/output/directory -i sample` \n\nOther parameters:\n* `-t` is path to training outputs.\n* `-p` is path to test outputs.\n* `-i` is name of Whole Slide Image for visualisation.\n"
      },
      "source": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3. Apply model to diagnose new images",
        "parent_header": [
          "HEMnet - Haematoxylin &amp; Eosin and Molecular neural network",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "`python HEMnet_inference.py -s '/path/to/new/HE/Slides/' -o '/path/to/output/directory/' -t '/path/to/template/slide/' -nn '/path/to/trained/model/' -v`\n\n"
      },
      "source": "https://raw.githubusercontent.com/BiomedicalMachineLearning/HEMnet/master/README.md",
      "technique": "header_analysis"
    }
  ]
}