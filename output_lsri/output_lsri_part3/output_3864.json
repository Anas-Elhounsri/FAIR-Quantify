{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/hallogameboy/JEDI"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-01-31T07:38:58Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-09-09T02:33:31Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Junction Encoders with Deep Interaction (JEDI) for circular RNA prediction."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9819206387059299,
      "result": {
        "original_header": "JEDI for Circular RNA Prediction.",
        "type": "Text_excerpt",
        "value": "This repository provides the implementation of our paper: \"[JEDI: Circular RNA Prediction based on Junction Encoders and Deep Interaction among Splice Sites](https://www.biorxiv.org/content/10.1101/2020.02.03.932038v3),\" Jyun-Yu Jiang, Chelsea J.-T. Ju, Junheng Hao, Muhao Chen and Wei Wang. \n"
      },
      "source": "https://raw.githubusercontent.com/hallogameboy/JEDI/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9808815825329511,
      "result": {
        "original_header": "Updates",
        "type": "Text_excerpt",
        "value": "* Feb 2020: We update the script of generating the input files from partitioned raw data for the convenience of reproducing experiments.\n \n"
      },
      "source": "https://raw.githubusercontent.com/hallogameboy/JEDI/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9687647640241064,
      "result": {
        "original_header": "General Instructions for Conducting Experiments with JEDI",
        "type": "Text_excerpt",
        "value": "1. Prepare datasets for K-fold cross-validation following the designated JSON format as shown in the section of data preparation.\n2. Execute the model with corresponding hyperparameters and experimental settings.\n3. Done!\n \n"
      },
      "source": "https://raw.githubusercontent.com/hallogameboy/JEDI/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8572073024141428,
      "result": {
        "original_header": "Hyper-parameters and experimental setttings through command line options.",
        "type": "Text_excerpt",
        "value": "All of the expeirmental setups and model hyper-parameters can be assigned through the command line options of our implementation. To be specific, the definitions of all options are listed in the function `handle_flags()` in [`src/utils.py`](src/utils.py) as follows.\n```\ndef handle_flags():\n    flags.DEFINE_string(\"tflog\", '3', \"The setting for TF_CPP_MIN_LOG_LEVEL (default: 3)\")\n    # Data configuration.\n    flags.DEFINE_string('config' ,'config.yml', 'configure file (default: config.yml)')\n    flags.DEFINE_integer('cv',  0, 'Fold for cross-validation (default: 0)')\n    flags.DEFINE_integer('K',   3, 'K for k-mers (default: 3)')\n    flags.DEFINE_integer('L',   4, 'Length for junction sites (default: 4)')\n    \n    # Model parameters.\n    flags.DEFINE_integer('emb_dim',    128, 'Dimensionality for k-mers (default: 12)')\n    flags.DEFINE_integer('rnn_dim',    128, 'Dimensionality for RNN layers (default: 128)')\n    flags.DEFINE_integer('att_dim',     16, 'Dimensionality for attention layers (default: 16)')\n    flags.DEFINE_integer('hidden_dim', 128, 'Dimensionality for hidden layers (default: 128)')\n    flags.DEFINE_integer('max_len',    128, 'Max site number for acceptors/donors (default: 128)')\n\n    # Training parameters.\n    flags.DEFINE_integer(\"batch_size\",    64, \"Batch Size (default: 64)\")\n    flags.DEFINE_integer(\"num_epochs\",    10, \"Number of training epochs (default: 10)\")\n    flags.DEFINE_integer('random_seed',  252, 'Random seeds for reproducibility (default: 252)')\n    flags.DEFINE_float('learning_rate', 1e-3, 'Learning rate while training (default: 1e-3)')\n    flags.DEFINE_float('l2_reg',        1e-3, 'L2 regularization lambda (default: 1e-3)')\n    FLAGS = flags.FLAGS\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/hallogameboy/JEDI/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/hallogameboy/JEDI/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/hallogameboy/JEDI/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "hallogameboy/JEDI"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "JEDI for Circular RNA Prediction."
      },
      "source": "https://raw.githubusercontent.com/hallogameboy/JEDI/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hallogameboy/JEDI/master/data/unzip_data.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Configuration",
        "parent_header": [
          "JEDI for Circular RNA Prediction.",
          "Data Preparation"
        ],
        "type": "Text_excerpt",
        "value": "The file [`src/config.yml`](src/config.yml) is the configuration file in the yaml format for experiments as:\n```\npath_data: PATH_TO_PROCESSED_DATA_DIR\npath_pred: PATH_TO_PREDICTION_DIR\n```\n\n* `path_data` represents the directory contatining processed data\n* `path_pred` is the location, where JEDI will outupt the predictions for testing data.\n\nThis file is the default setting for JEDI in our implementation while the model supports to use an arbitrary configuration for conducting experiments. \n"
      },
      "source": "https://raw.githubusercontent.com/hallogameboy/JEDI/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Data Location",
        "parent_header": [
          "JEDI for Circular RNA Prediction.",
          "Data Preparation"
        ],
        "type": "Text_excerpt",
        "value": "All of the data used by `path_data` should be put at `path_data` identified in the configuration file.\n"
      },
      "source": "https://raw.githubusercontent.com/hallogameboy/JEDI/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "File Naming",
        "parent_header": [
          "JEDI for Circular RNA Prediction.",
          "Data Preparation"
        ],
        "type": "Text_excerpt",
        "value": "Training and testing data should follow the desinated naming as `data.[Fold].K[K].L[L].[train/test]`, where \n* `[Fold]` is the fold number in cross-validation.\n* `[K]` represents the size of *k*-mers for junction encoder.\n* `[L]` is the length of flanking regions around junctions for modeling splice sites.\n* `[train/test]` indicates the file belongs to either training or testing data.\n\nFor example, a file `data.0.K3.L4.train` is the training data for JEDI with 3-mers and length-4 flanking regions in the first fold in cross-validation. Note that the fold number can be any integer that is recognized later by command line arguments.\n"
      },
      "source": "https://raw.githubusercontent.com/hallogameboy/JEDI/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Data Format",
        "parent_header": [
          "JEDI for Circular RNA Prediction.",
          "Data Preparation"
        ],
        "type": "Text_excerpt",
        "value": "Each line in every training/testing file should match the following JSON format:\n\n```\n{\n  \"label\": 0 or 1,\n  \"acceptors\": [[L integers], [L integers], ...],\n  \"donors\": [[L integers], [L integers], ...],\n}  \n```\n\n* **\"label\"** maps to the label for this instnace, either 0 or 1.\n* **\"acceptors\"** maps to a list of integer lists with *L* integers, where the *j*-th integer in the *i*-th list is the ID of the *j*-th *k*-mer in the flanking region of the *i*-th acceptor.\n* **\"donors\"** maps to a list of integer lists with *L* integers, where the *j*-th integer in the *i*-th list is the ID of the *j*-th *k*-mer in the flanking region of the *i*-th donors.\n\nNote that the *k*-mer IDs should start from 1 and cannot exceed or equal to 5<sup>*k*</sup> for the embedding purpose.\n"
      },
      "source": "https://raw.githubusercontent.com/hallogameboy/JEDI/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Generation Script",
        "parent_header": [
          "JEDI for Circular RNA Prediction.",
          "Data Preparation"
        ],
        "type": "Text_excerpt",
        "value": "For the convinience, the script [`src/generate_input.py`](src/generate_input.py) can be utilized to generate the input files from partitioned raw data. The following command is an example:\n```\n$ cd src/\n$ python3 ./generate_input.py\n--usage ./generate_input.py pos_data neg_data K L output_file\n$ python3 ./generate_input.py ./data_raw/data.0.test.pos ./data_raw/data.0.test.neg 3 4 ./data_jedi/data.0.K3.L4.test\npos_data = ./data_raw/data.0.test.pos\nneg_data = ./data_raw/data.0.test.neg\nL = 4\nK = 3\noutput_file = ./data_jedi/data.0.K3.L4.test\nProcessing ./data_raw/data.0.test.pos\nProcessing ./data_raw/data.0.test.neg\n```\nPrecisely, `./data_raw/data.0.test.pos` and `./data_raw/data.0.test.neg` are the partitioned files of positive and negative instances for the testing data in the first fold. The script generates the input file of JEDI based on those two files and the hyper-parameters K=3 and L=4. Finally, the results are dumped in `./data_jedi/data.0.K3.L4.test`. Note that the directory of the output_file location should exist before running the script.\n\n"
      },
      "source": "https://raw.githubusercontent.com/hallogameboy/JEDI/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.999999999873836,
      "result": {
        "original_header": "Required Packages",
        "type": "Text_excerpt",
        "value": "* Python 3.6.9 (or a compatible version)\n* Tensorflow 2.0 (or a compatible version)\n* NumPy 1.17.4 (or a compatible version)\n* Abseil 1.13.0 (or a compatible version)\n* scikit-learn 0.22 (or a compatible version)\n* tqdm 4.40.1 (or a compatible version)\n* Yaml 5.2 (or a compatible version)\n* ujson (or be subsequently replaced with geuine json)\n \n"
      },
      "source": "https://raw.githubusercontent.com/hallogameboy/JEDI/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9983624968910542,
      "result": {
        "original_header": "Training and Testing with Evaluation",
        "type": "Text_excerpt",
        "value": "Both training and testing procedures can be achived by the script [`src/run.py`](src/run.py) with the above options. For example, to run JEDI with the experimental settings reported in the paper on the first fold in CV for 2 epochs, we can execution the following command:\n```\n$ cd src/\n$ python3 run.py --cv=0 --K=3 --L=4 --emb_dim=128 --rnn_dim=128 --att_dim=16 --hidden_dim=128  --num_epochs=2 --learning_rate=1e-3 --l2_reg=1e-3\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/hallogameboy/JEDI/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8707317920120199,
      "result": {
        "original_header": "Training and Testing with Evaluation",
        "type": "Text_excerpt",
        "value": "Both training and testing procedures can be achived by the script [`src/run.py`](src/run.py) with the above options. For example, to run JEDI with the experimental settings reported in the paper on the first fold in CV for 2 epochs, we can execution the following command:\n```\n$ cd src/\n$ python3 run.py --cv=0 --K=3 --L=4 --emb_dim=128 --rnn_dim=128 --att_dim=16 --hidden_dim=128  --num_epochs=2 --learning_rate=1e-3 --l2_reg=1e-3\n``` \nFor each epoch, the script will show the progress during training and show the training evaluation metrics, together with the training loss, after training the whole training set once. As an example, the above command will result in the following results:\n```\n1 Physical GPUs, 1 Logical GPU\nI0131 XX:XX:XX.XXXXXX XXXXXXXXXXXXXXX utils.py:82] Loaded XXXXX records from /PATHT/data.0.K3.L4.train.\nI0131 XX:XX:XX.XXXXXX XXXXXXXXXXXXXXX utils.py:82] Loaded XXXXX records from /PATHT/data.0.K3.L4.test.\nTraining: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 646/646 [00:42<00:00, 15.20it/s]\nEpoch 1 (CV=0, K=3, L=4)\nLs: 0.12653037905693054 A: 0.9476475288761895    P: 0.9459974829335266  F: 0.9582399752762112,  M: 0.8886609741180113   Se: 0.9708034910571015  Sp: 0.9100723993395148\n\nTraining: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 646/646 [00:28<00:00, 22.28it/s]\nEpoch 2 (CV=0, K=3, L=4)\nLs: 0.03979344666004181 A: 0.9857858924377073    P: 0.9926197805667377  F: 0.9884650906875749,  M: 0.9700091674012169   Se: 0.9843450354193574  Sp: 0.988123967991871\n```\nAfter the assigned number of epochs, the model will be applied to predict the testing data and compute the testing evaluation metrics as:\n```\nTesting: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 162/162 [00:05<00:00, 29.09it/s]\nTesting (CV=0, K=3, L=4)\nLs: 0.03267291560769081 A: 0.988861985472155     P: 0.9932379304922158  F: 0.9909782693967208,  M: 0.9764442824547588   Se: 0.9887288666249218  Sp: 0.9890779781559563\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/hallogameboy/JEDI/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/hallogameboy/JEDI/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "JEDI"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "hallogameboy"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 17041,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 212,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hallogameboy/JEDI/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 14:22:12",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ]
}