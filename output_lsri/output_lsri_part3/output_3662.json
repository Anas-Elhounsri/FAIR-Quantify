{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Xshelton/SG_LSTM"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-09-05T06:30:07Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-26T12:50:03Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "This is the repository of SG_LSTM core"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.880379906764218,
      "result": {
        "original_header": "3.Needed python package:",
        "type": "Text_excerpt",
        "value": "- PyQt5                5.10.1(for UI)\n- Pandas               0.24.1(for file read)\n- Sklearn              0.0(for comparison)\n- tensorflow-estimator 1.13.0(for LSTM)\n- tensorflow-gpu       1.13.1(for LSTM)\n- numpy                1.16.2(for npy read and other functions)\n- matplotlib           3.0.3(for roc curve plot) \n"
      },
      "source": "https://raw.githubusercontent.com/Xshelton/SG_LSTM/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "if you don't want to generate new dataset AXB_383_gene_default.csv can be downloaded either",
        "parent_header": [
          "SG_LSTM_Frame",
          "4.How to run the file:",
          "4.1.Fast train:"
        ],
        "type": "Text_excerpt",
        "value": "AXB_383_gene_default.csv 159.1MB \nlink\uff1ahttps://pan.baidu.com/s/1Yy8RNfinV2B0G9l_Gb8-Ag  password\uff1a11v1 "
      },
      "source": "https://raw.githubusercontent.com/Xshelton/SG_LSTM/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Xshelton/SG_LSTM/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Xshelton/SG_LSTM/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Xshelton/SG_LSTM"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SG_LSTM_Frame"
      },
      "source": "https://raw.githubusercontent.com/Xshelton/SG_LSTM/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.999999999794909,
      "result": {
        "original_header": "2.Environment:",
        "type": "Text_excerpt",
        "value": "- Hardware: Core: Intel i7-7700HQ ;  Graphic Card\uff1aGTX1060 6G;  RAM:32 GB ddr4 2666\n- CUDA Version 10.0.130\n- CuDNN version 7.4.2\n- OS: Win 10 64bit\n- Python version: IDLE (Python 3.7 64-bit)#yep I wrote directly in IDLE :)\n- **(In my another computer, I don't have CUDA for GPU and tensorflow-gpu, but I tested that it could still run in that computer)**\n- Hardware: Core: Intel i5-2420M,RAM:16 GB ddr3 1600\n- OS: Win 10 64bit\n- Python version: IDLE (Python 3.7 64-bit) \n"
      },
      "source": "https://raw.githubusercontent.com/Xshelton/SG_LSTM/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Xshelton/SG_LSTM/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SG_LSTM"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "Xshelton"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 37488,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Xshelton/SG_LSTM/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "4.How to run the file:",
        "parent_header": [
          "SG_LSTM_Frame"
        ],
        "type": "Text_excerpt",
        "value": "This is the code of SG_LSTM_core, the only difference between SG_LSTM_core and SG_LSTM_WHOLE is the difference between dataset and the way we store the unknown pairs' score."
      },
      "source": "https://raw.githubusercontent.com/Xshelton/SG_LSTM/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "4.1.Fast train:",
        "parent_header": [
          "SG_LSTM_Frame",
          "4.How to run the file:"
        ],
        "type": "Text_excerpt",
        "value": "-  print('In this test, The dataset is randomly separated into train and test set, you don\u2019t have to generate other file')\n-  what you need is the dataset downloaded or generated use **SG_LSTM_Dataset UI**\n-  then change **RNN(LSTM) - fast validate-train.py**  **your_dataset_file_name='AXB_383_gene_default.csv'** into \n-  your_dataset_file_name=**'{}.csv'** **.format(your file's name!!!)**\n-  open the **RNN(LSTM) - fast validate-train.py** in IDLE and Press **F5**\n-  It will automatically begin to train ,the model will be saved in the same folder"
      },
      "source": "https://raw.githubusercontent.com/Xshelton/SG_LSTM/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "4.2 Fast test:",
        "parent_header": [
          "SG_LSTM_Frame",
          "4.How to run the file:"
        ],
        "type": "Text_excerpt",
        "value": "- In order to fast test: first put **RNN(LSTM)-fast-validate-test.py** and **AXB_383_gene_default.csv** and **models** in the same folder.\n-  Then change:\n-  your_dataset_file_name='AXB_383_gene_default.csv' into your_dataset_file_name='your file generated.csv' **if you decide to generate your own dataset.** otherwise ,skip this step\n-  Then change:\n-  your_file_path=\"C://Users/shelton/Desktop/fast validate/models\"  into your file root , otherwise it cannot find the model.\n-  After the model successfully loaded, test will automatically run. \n-  it will produced the y_score and y_label for your test set, named LSTM_y_score and LSTM_y_label ,and also after running the **RNN(LSTM)-fast-validate-test.py**,a ROC -curve would appear to indicate the performance of the model.\n\n"
      },
      "source": "https://raw.githubusercontent.com/Xshelton/SG_LSTM/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "4.3.Five fold cross validation Experiments:",
        "parent_header": [
          "SG_LSTM_Frame",
          "4.How to run the file:"
        ],
        "type": "Text_excerpt",
        "value": "- 0 SG-LSTM(for test the model).py can help to build the model\n- 0 SG-LSTM(for roc curve generation).py can use the model to do the test job, (generation of ROC curve)\nalso the scores!\n- 1.put SG-LSTM(for test the model).py and X_train5.csv and X_test5.csv in the same folder\n- 2.run SG-LSTM(for test the model).py (after a while of running, a folder named model5 would be generated)\n- 3.put SG-LSTM(for roc curve generation).py and X_train5.csv and X_test5.csv in the same folder\n- 4.You have to change the file root so that the roc curve could be generated successfully:\n- From module_file = tf.train.latest_checkpoint(\"I://DNN\u6a21\u578b\u91cd\u65b0\u6d4b\u8bd5/LSTM\u6d4b\u8bd5/\u6d4b\u8bd524 SG\u76f8\u4e58128 \u4e94\u6298\u4ea4\u53c9\u9a8c\u8bc1/LSTM for test/models{}\".format(gg))\n- To module_file = tf.train.latest_checkpoint(\"C://Users/shelton/Desktop/SG-LSTM_master/models{}\".format(gg))\n- here 'gg' means the iteration of fold. gg=5 means the last fold of SG-LSTM-core\n- please change it into your file root, otherwise it can not load the model.\n \n ### 4.3.1 X_train5 and X_test5 can be download :\n- X_train5.csv\n links\uff1ahttps://pan.baidu.com/s/1ZvlfgQ8IjEo61extIU6WvQ \n password\uff1a5o11 \n- X_test5.csv\nlinks\uff1ahttps://pan.baidu.com/s/1X7OmbCQq8OeudzWmkZydqQ \npassword\uff1ald7z "
      },
      "source": "https://raw.githubusercontent.com/Xshelton/SG_LSTM/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "4.3.2 And can also be generated using",
        "parent_header": [
          "SG_LSTM_Frame",
          "4.How to run the file:"
        ],
        "type": "Text_excerpt",
        "value": " - **5_fold_cross_divided.py** and  **'AXB_383_gene_default.csv'**\n ## 5.Some Material for our framework(like dataset, and trained embedding)\n - **5_fold_cross_divided.py** can divide **'AXB_383_gene_default.csv'**(or other dataset) into five fold of train and test parts.\n - **all_unkown_sample_generation.py** can generate all negative samples for prediction. Here in SG-LSTM-core, we generate all unknown samples by generating file. But in the SG-LSTM-WHOLE, because there are more than 14,000,000 pairs, we generate the score by producing a matrix to record the scores.\n \n- S_gene2vec_320_34567.csv S_mrna2vec_384_34567.csv is the embedding generated from sequence information of 320 gene and 384miRNA\n- G_gene2vec_328_gene.csv G_mirna2vec_384_mirna.csv is the embedding generated from geometric information.\n\n- S_gene2vec_320_34567.csv+G_gene2vec_328_gene.csv can generate SG128_317_gene.csv.\n- S_mrna2vec_384_34567 +G_mirna2vec_384_mirna.csv can generate SG128_383_miRNA.csv\n\n- SG128_317_gene.csv is the embedding merged from Geometric information embedding and Sequence information embedding of gene.\n- SG128_383_miRNA.csv is the embedding merged from Geometric information embedding and Sequence information embedding of miRNA.\n\n- Using SG128_317_gene.csv and SG128_383_miRNA.csv and a file from mitarbase, you can generate positive samples;\nAfter calculate all the pairs' Euclidean distance and cosine-similarity, you can earn a average distance. Using the positive samples and distance, you can generate the dataset, like 'AXB_383_gene_default.csv'\n\n- 'AXB_383_gene_default.csv' is the training Dataset of SG-LSTM-core.\n\n\n<p>\n  \n## 6 SG_LSTM_Dataset UI \nI designed an UI for dataset construction. It contains all the content about how to use SG128_317_gene.csv and SG128_383_miRNA.csv to generate file like  'AXB_383_gene_default.csv'\n- SG_LSTM_Dataset UI  https://github.com/Xshelton/SG_LSTM_DatasetUI\n\n<p>\n \n ## 7 SG-LSTM_core_result\n #If your only want the results of my research:\n - SG-LSTM_core_result: https://github.com/Xshelton/SG_LSTM_core_result\n \n <p>\n \n  ## 8 SG-LSTM_WHOLE_result\n  In the WHOLE part,more than 14,000,000 pairs of miRNA and Gene were predicted.\n - SG-LSTM_WHOLE_result https://github.com/Xshelton/SG-LSTM_WHOLE_result\n## 9.SG_MR_TS(pairs of three).csv\n   3186 pairs of the associations were predicted by all of three mentioned methods. \n"
      },
      "source": "https://raw.githubusercontent.com/Xshelton/SG_LSTM/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 13:35:32",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ]
}