{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Download the LD reference panel:",
        "parent_header": [
          "OWAS `v1.2.1`",
          "Getting Started"
        ],
        "type": "Text_excerpt",
        "value": "- Download the 1000 Genome Project reference panel (hg19):\n\n`wget https://zenodo.org/record/7768714/files/1000G_Phase3_plinkfiles.tgz?download=1`\n\n`tar -xvzf 1000G_Phase3_plinkfiles.tgz`\n\n- Users could also specify their own LD reference files with plink bfile format (.bim, .fam, .bed).\n"
      },
      "source": "https://raw.githubusercontent.com/shuangsong0110/OWAS/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Citations",
        "parent_header": [
          "OWAS `v1.2.1`"
        ],
        "type": "Text_excerpt",
        "value": "Please cite:\n\nSong, S., Shan, N., Wang, G., Yan, X., Liu, J. S., & Hou, L. (2021). Openness weighted association studies: leveraging personal genome information to prioritize non-coding variants. Bioinformatics.\n\n"
      },
      "source": "https://raw.githubusercontent.com/shuangsong0110/OWAS/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/shuangsong0110/OWAS"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-03-22T07:24:38Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-08-27T13:18:16Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Openness Weighted Association Studies: Leveraging Personal Genome Information to Prioritize Noncoding Variants"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "parent_header": [
          "OWAS `v1.2.1`"
        ],
        "type": "Text_excerpt",
        "value": "**OWAS** is an R implementation of a  computational approach, Openness Weighted Association Studies(OWAS), which leverages and aggregates predictions of chromosome accessibility in personal genomes to prioritize GWAS signals.\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/shuangsong0110/OWAS/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.8406049062229026,
      "result": {
        "original_header": "OWAS `v1.2.1`",
        "type": "Text_excerpt",
        "value": "Update 2021.12.29\n1. Add the option for clumping GWAS summary statistics, to avoid high collinearity.\n1. Add shrinkage to LD matrices.\n2. Bug fixes. \nUpdate 2021.6.9:\n1. Add the `write.bed` function, which allows customized segment length and regulatory regions. \n"
      },
      "source": "https://raw.githubusercontent.com/shuangsong0110/OWAS/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9073740800580912,
      "result": {
        "original_header": "Length of segments",
        "type": "Text_excerpt",
        "value": "We prepared the bed file taking 100 KB up and down-stream from the transcription start sites (TSS) of genes as regulatory regions and divided the regions into segments of 5 KB. We also allow users to specify there own bedfiles for computation. The format of the bedfiles should be (with the header line):\n```\n   chr        start        end           gene        index\n    1       58764864    58769863       DDX11L1         1\n    1       58769864    58774863       DDX11L1         2\n    1       58774864    58779863       DDX11L1         3\n    ...\n```\nThe bedfiles can also be generated with function `write.bed` in our R package. The usage is:\n```r\nlibrary(OWAS)\nldpath=NULL, path,type.len='len',len=5,type.gene='gene',gene.region=NULL\nwrite.bed(ldpath=PATH_TO_LD_REFERENCE (required), \n\t    path=OUTPUT_DIR (required),\n\t    type.len='len'/'snp' (default = 'len'),\n\t    len=LENGTH OF SEGMENTS (KB)/ NUMBER OF SNPS (default = 5),\n\t    type.gene='gene'/'wg' (default=gene),\n\t    gene.region= GENE TSS (required if type.gene='gene'))                    \n```\n- PATH_TO_LD_REFERENCE (required): The LD reference plink bfile should be dividied into chromosomes and ended with the number of the chromosome. The input should include the file name but not the exact number of chromosome (e.g., ldpath='path/1000G.EUR.QC.', without .bim/.fam/.bed).\n \n"
      },
      "source": "https://raw.githubusercontent.com/shuangsong0110/OWAS/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.806394869385174,
      "result": {
        "original_header": "Openness scores (or other annotation weights)",
        "type": "Text_excerpt",
        "value": "The users should specify a name for the annotation (e.g., `newct`), and create a new folder in the `/openness/` file as `/openness/newct/`, and save 22 files as `result_1_newct.txt`, `result_2_newct.txt`, ... , `result_22_newct.txt`. \n"
      },
      "source": "https://raw.githubusercontent.com/shuangsong0110/OWAS/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Download the LD reference panel:",
        "parent_header": [
          "OWAS `v1.2.1`",
          "Getting Started"
        ],
        "type": "Text_excerpt",
        "value": "- Download the 1000 Genome Project reference panel (hg19):\n\n`wget https://zenodo.org/record/7768714/files/1000G_Phase3_plinkfiles.tgz?download=1`\n\n`tar -xvzf 1000G_Phase3_plinkfiles.tgz`\n\n- Users could also specify their own LD reference files with plink bfile format (.bim, .fam, .bed).\n"
      },
      "source": "https://raw.githubusercontent.com/shuangsong0110/OWAS/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Download the pre-computed openness scores:",
        "parent_header": [
          "OWAS `v1.2.1`",
          "Getting Started"
        ],
        "type": "Text_excerpt",
        "value": "- Download the precomputed openness scores for 12 ENCODE cell types.\n`wget -O openness.tar.gz https://cloud.tsinghua.edu.cn/f/17d8b0b5de3941a2bf86/?dl=1 --no-check-certificate`\n\nWe precomputed openness scores for 12 ENCODE cell types using deltaSVM (Lee et al., 2015, Nature Genetics). \n"
      },
      "source": "https://raw.githubusercontent.com/shuangsong0110/OWAS/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Download the bedfile for segments:",
        "parent_header": [
          "OWAS `v1.2.1`",
          "Getting Started"
        ],
        "type": "Text_excerpt",
        "value": "- Download the bedfile:\n`wget -O bedfile_5kb.txt https://cloud.tsinghua.edu.cn/f/7524fb35b88c468dbc02/?dl=1 --no-check-certificate`\n\n\nFor customized opennes scores and segments length, see [Customized Settings](#customized-settings).\n\n"
      },
      "source": "https://raw.githubusercontent.com/shuangsong0110/OWAS/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/shuangsong0110/OWAS/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/shuangsong0110/OWAS/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "shuangsong0110/OWAS"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "OWAS v1.2.1"
      },
      "source": "https://raw.githubusercontent.com/shuangsong0110/OWAS/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Prepare Covariance Matrix",
        "parent_header": [
          "OWAS `v1.2.1`"
        ],
        "type": "Text_excerpt",
        "value": "```r\nlibrary(OWAS)\npre.cov(ldpath=PATH_TO_LD_REFERENCE (required), \n\t    bedfile=PATH_TO_THE_BEDFILE (required),\n\t    path=OUTPUT_DIR (required),\n\t    chr=CHROMOSOME (optional))                    \n```\n- PATH_TO_LD_REFERENCE (required): The LD reference plink bfile should be dividied into chromosomes and ended with the number of the chromosome. The input should include the file name but not the exact number of chromosome (e.g., ldpath='path/1000G.EUR.QC.', without .bim/.fam/.bed).\n\n- PATH_TO_THE_BEDFILE (required): should link to the exact file. e.g., bedfile='path/bedfile_5kb.txt'\n\n- CHROMOSOME (optional): The chromosome(s) on which the model is run, e.g., `chr=c(1, 3, 5)`. The default is `chr=1:22`.\n\n"
      },
      "source": "https://raw.githubusercontent.com/shuangsong0110/OWAS/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Prepare Openness Scores",
        "parent_header": [
          "OWAS `v1.2.1`"
        ],
        "type": "Text_excerpt",
        "value": "```r\nlibrary(OWAS)\npre.sc(ctype=CELLTYPE (required, can be specified, or simply 'all'),\n\t   scpath=PATH_TO_OPENNESS_SCORE_FILES (required),\n\t   ldpath=PATH_TO_LD_REFERENCE (required), \n\t   path=OUTPUT_DIR (required, and has to be same with the PATH in get.cov),\n\t   chr=CHROMOSOME (optional))                    \n```\n\n\n- CELLTYPE (required): We provided 12 precomputed openness scores in `/openness/` file, if the users hope to specify the openness scores for certain cell types, please see [Customized Settings](#customized-settings).\n\n- PATH_TO_OPENNESS_SCORE_FILES: The PATH to the openness scores files. e.g., `scpath=PATH/openness/`\n"
      },
      "source": "https://raw.githubusercontent.com/shuangsong0110/OWAS/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9609133758799506,
      "result": {
        "original_header": "OWAS `v1.2.1`",
        "type": "Text_excerpt",
        "value": "Update 2021.12.29\n1. Add the option for clumping GWAS summary statistics, to avoid high collinearity.\n1. Add shrinkage to LD matrices.\n2. Bug fixes. \nUpdate 2021.6.1:\n1. Update the R package and greatly improve the computational efficiency.\n2. Add the README file.\n \n"
      },
      "source": "https://raw.githubusercontent.com/shuangsong0110/OWAS/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9768148256447328,
      "result": {
        "original_header": "A Simplified Pipeline",
        "type": "Text_excerpt",
        "value": "Clone this repository using the following git command: \n$ git clone https://github.com/shuangsong0110/OWAS.git \n$ cd ./OWAS \n$ wget https://data.broadinstitute.org/alkesgroup/LDSCORE/1000G_Phase3_plinkfiles.tgz \n$ tar -xvzf 1000G_Phase3_plinkfiles.tgz \n$ wget -O bedfile_5kb.txt https://cloud.tsinghua.edu.cn/f/7524fb35b88c468dbc02/?dl=1 --no-check-certificate \n$ wget -O openness.tar.gz https://cloud.tsinghua.edu.cn/f/17d8b0b5de3941a2bf86/?dl=1 --no-check-certificate \n$ tar -zxvf openness.tar.gz \n\nRun with R:\n```r\ninstall.packages('OWAS_1.2.1.tar.gz')\nlibrary(OWAS)\npath0 <- getwd()\npre.cov(ldpath = paste0(path0, '/1000G_EUR_Phase3_plink/1000G.EUR.QC.'), \n\tbedfile = paste0(path0, '/bedfiles/bedfile_5kb.txt'), \n\tpath = paste0(path0, '/output/'),\n\tchr = 22)\n             \npre.sc(ctype = 'Gm12878',\n\tscpath = paste0(path0, '/openness/'), \n\tldpath = paste0(path0, '/1000G_EUR_Phase3_plink/1000G.EUR.QC.'), \n\tpath = paste0(path0, '/output/'), \n\tchr = 22)\n\nres <- run.owas(ctype = 'Gm12878',\n\tgwas=fread(paste0(path0, '/example/summs.txt')),\n\ttrait='test',\n\tldpath = paste0(path0, '/1000G_EUR_Phase3_plink/1000G.EUR.QC.'), \n\tplinkpath = system('which plink'),\n\tpath = paste0(path0, '/output/'), \n\tchr = 22)\n\t\nhead(res)\n             \n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/shuangsong0110/OWAS/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.930074777667393,
      "result": {
        "original_header": "Length of segments",
        "type": "Text_excerpt",
        "value": "- OUTPUT_DIR (required): path to the output \n- type.gene: if type.gene='gene', the function only focus on gene regulatory region; if type.gene='wg', the funciton will run in the whole genome. \n- gene.region: A data.frame with the format below (with no header) , which can be downloaded directly with `wget -O gene.region.txt https://cloud.tsinghua.edu.cn/f/801fcbf2609a4283a26b/?dl=1`\n```\n      V1          V2          V3        V4    \n    chr1         12314      12516     gene1   \n    chr1         12872      12900     gene2    \n    chr1         31592      34000     gene3    \n    ...\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/shuangsong0110/OWAS/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999542270699519,
      "result": {
        "original_header": "Openness scores (or other annotation weights)",
        "type": "Text_excerpt",
        "value": "The users should specify a name for the annotation (e.g., `newct`), and create a new folder in the `/openness/` file as `/openness/newct/`, and save 22 files as `result_1_newct.txt`, `result_2_newct.txt`, ... , `result_22_newct.txt`. \n"
      },
      "source": "https://raw.githubusercontent.com/shuangsong0110/OWAS/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8103896845478108,
      "result": {
        "original_header": "Output",
        "type": "Text_excerpt",
        "value": "The `run.owas` function returns a data.frame with 8 columns: \n"
      },
      "source": "https://raw.githubusercontent.com/shuangsong0110/OWAS/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8337941054052362,
      "result": {
        "original_header": "A Simplified Pipeline",
        "type": "Text_excerpt",
        "value": "\nRun with R:\n```r\ninstall.packages('OWAS_1.2.1.tar.gz')\nlibrary(OWAS)\npath0 <- getwd()\npre.cov(ldpath = paste0(path0, '/1000G_EUR_Phase3_plink/1000G.EUR.QC.'), \n\tbedfile = paste0(path0, '/bedfiles/bedfile_5kb.txt'), \n\tpath = paste0(path0, '/output/'),\n\tchr = 22)\n             \npre.sc(ctype = 'Gm12878',\n\tscpath = paste0(path0, '/openness/'), \n\tldpath = paste0(path0, '/1000G_EUR_Phase3_plink/1000G.EUR.QC.'), \n\tpath = paste0(path0, '/output/'), \n\tchr = 22)\n\nres <- run.owas(ctype = 'Gm12878',\n\tgwas=fread(paste0(path0, '/example/summs.txt')),\n\ttrait='test',\n\tldpath = paste0(path0, '/1000G_EUR_Phase3_plink/1000G.EUR.QC.'), \n\tplinkpath = system('which plink'),\n\tpath = paste0(path0, '/output/'), \n\tchr = 22)\n\t\nhead(res)\n             \n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/shuangsong0110/OWAS/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/shuangsong0110/OWAS/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "OWAS"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "shuangsong0110"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 18079,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/shuangsong0110/OWAS/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Run OWAS",
        "parent_header": [
          "OWAS `v1.2.1`"
        ],
        "type": "Text_excerpt",
        "value": "```r\nlibrary(OWAS)\nrun.owas(ctype=CELLTYPE (required),\n\t   gwas=GWAS_SUMMARY_STATISTICS (required)\n\t   trait=NAME_OF_THE_TRAIT (optional, default='test'),\n\t   ldpath=PATH_TO_LD_REFERENCE (required), \n\t   path=OUTPUT_DIR (required, and has to be same with the PATH in get.cov),\n\t   plinkpath=PATH_TO_PLINK (required),\n\t   chr=CHROMOSOME (optional),\n\t   plinkpath= PATH_TO_PLINK_software (required))\n```\n\n\n- GWAS_SUMMARY_STATISTICS (required):\nPrepare the summary statistics in the following format (including the header line):\n```\n   chr        rsid      a1    a2       z          p\n    1      rs4040617    G     A     -0.199     8.42e-01\n    1      rs4075116    C     T      0.646     5.18e-01\n    1      rs9442385    T     G     -0.016     9.87e-01\n    ...\n```\n\nwhere rsid is the SNP, a1 is the reference allele, a2 is the alternative allele, z is the z scores of the a2 allele, p is the p-value of the effect. \n\n"
      },
      "source": "https://raw.githubusercontent.com/shuangsong0110/OWAS/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 04:54:56",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Getting Started",
        "parent_header": [
          "OWAS `v1.2.1`"
        ],
        "type": "Text_excerpt",
        "value": "OWAS is an R package which can be installed using the command:\n```r\ndevtools::install_github('shuangsong0110/OWAS')\n```\n"
      },
      "source": "https://raw.githubusercontent.com/shuangsong0110/OWAS/main/README.md",
      "technique": "header_analysis"
    }
  ]
}