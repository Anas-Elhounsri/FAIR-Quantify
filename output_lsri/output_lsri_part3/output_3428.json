{
  "application_domain": [
    {
      "confidence": 3.85,
      "result": {
        "type": "String",
        "value": "Audio"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Downloading and preparing reference databases for MetaLAFFA annotation",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "Full-length Tutorial"
        ],
        "type": "Text_excerpt",
        "value": "Default reference databases can be downloaded and prepared for MetaLAFFA using the `prepare_databases.py` script. These databases will be installed in the base directory for the `metalaffa` environment, which can be found at `$CONDA_PREFIX/MetaLAFFA`. Activate the `metalaffa` environment and then run:\n\n    # Download and prepare default reference databases\n    prepare_databases.py -hr -km -u\n\nwhere each option to the script specifies a different reference database:\n\n`-hr`: Download and prepare the database of human reference and decoy sequences (used in the 1000 genomes project) for host filtering.\n\n`-km`: Download KEGG ko-to-module and ko-to-pathway mappings.\n\n`-u`: Download and prepare the UniRef90 database for read mapping and functional annotation.\n\n`-c`: Optionally, the script can remove intermediate files after they are processed. This can save significant disk space, however if something interrupts the script, you may have to start the entire process from the beginning.\n\n**Note**: This process can be time and resource intensive, taking several hours, ~40GB of RAM, and ~300GB of free disk space if not cleaning up intermediate files, or ~150GB if cleaning up intermediate files.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "References",
        "parent_header": [
          "Tutorial for running MetaLAFFA"
        ],
        "type": "Text_excerpt",
        "value": "1000 Genomes Project Consortium. 2015. \u201cA Global Reference for Human Genetic Variation.\u201d *Nature* 526 (7571). Nature Publishing Group: 68\u201374.\n\nBolger, Anthony M, Marc Lohse, and Bjoern Usadel. 2014. \u201cTrimmomatic: A Flexible Trimmer for Illumina Sequence Data.\u201d *Bioinformatics* 30 (15). Oxford University Press: 2114\u201320.\n\nBuchfink, Benjamin, Chao Xie, and Daniel H Huson. 2015. \u201cFast and Sensitive Protein Alignment Using Diamond.\u201d *Nature Methods* 12 (1). Nature Publishing Group: 59.\n\nCarr, Rogan, and Elhanan Borenstein. 2014. \u201cComparative Analysis of Functional Metagenomic Annotation and the Mappability of Short Reads.\u201d *PLoS One* 9 (8). Public Library of Science: e105776.\n\nCaspi, Ron, Hartmut Foerster, Carol A Fulcher, Pallavi Kaipa, Markus Krummenacker, Mario Latendresse, Suzanne Paley, et al. 2007. \u201cThe Metacyc Database of Metabolic Pathways and Enzymes and the Biocyc Collection of Pathway/Genome Databases.\u201d *Nucleic Acids Research* 36 (suppl\\_1). Oxford University Press: D623\u2013D631.\n\nConsortium, UniProt. 2018. \u201cUniProt: A Worldwide Hub of Protein Knowledge.\u201d *Nucleic Acids Research* 47 (D1). Oxford University Press: D506\u2013D515.\n\nKanehisa, Minoru, Yoko Sato, Miho Furumichi, Kanae Morishima, and Mao Tanabe. 2018. \u201cNew Approach for Understanding Genome Variations in Kegg.\u201d *Nucleic Acids Research* 47 (D1). Oxford University Press: D590\u2013D595.\n\nKultima, Jens Roat, Luis Pedro Coelho, Kristoffer Forslund, Jaime Huerta-Cepas, Simone S Li, Marja Driessen, Anita Yvonne Voigt, Georg Zeller, Shinichi Sunagawa, and Peer Bork. 2016. \u201cMOCAT2: A Metagenomic Assembly, Annotation and Profiling Framework.\u201d *Bioinformatics* 32 (16). Oxford University Press: 2520\u20133.\n\nLangmead, Ben, and Steven L Salzberg. 2012. \u201cFast Gapped-Read Alignment with Bowtie 2.\u201d *Nature Methods* 9 (4). Nature Publishing Group: 357.\n\nManor, Ohad, and Elhanan Borenstein. 2015. \u201cMUSiCC: A Marker Genes Based Framework for Metagenomic Normalization and Accurate Profiling of Gene Abundances in the Microbiome.\u201d *Genome Biology* 16 (1). BioMed Central: 53.\n\n\u2014\u2014\u2014. 2017. \u201cRevised Computational Metagenomic Processing Uncovers Hidden and Biologically Meaningful Functional Variation in the Human Microbiome.\u201d *Microbiome* 5 (1). BioMed Central: 1\u201311.\n\nNayfach, Stephen, and Katherine S Pollard. 2016. \u201cToward Accurate and Quantitative Comparative Metagenomics.\u201d *Cell* 166 (5). Elsevier: 1103\u201316.\n\n\u201cPicard.\u201d n.d. <http://broadinstitute.github.io/picard/>.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/borenstein-lab/MetaLAFFA"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-07-09T00:06:10Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-09-11T02:25:00Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A bioinformatics pipeline for annotating functional capacities in shotgun metagenomic data with native compute cluster integration"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick Start Summary",
        "parent_header": [
          "Tutorial for running MetaLAFFA"
        ],
        "type": "Text_excerpt",
        "value": "Follow these steps to annotate your first metagenomic shotgun sequencing dataset using MetaLAFFA.\n\n1.  Install MetaLAFFA via Conda\n\n2.  Download and prepare reference databases.\n\n3.  Try out MetaLAFFA with your own data or download some publicly available data to play with.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Trying out MetaLAFFA",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "Quick Start Summary"
        ],
        "type": "Text_excerpt",
        "value": "1.  After installation and database preparation, you can create a new MetaLAFFA project directory to try out MetaLAFFA. With your MetaLAFFA Conda environment active, you can create a new project directory using the associated script as follows:\n\n\n\n    create_new_MetaLAFFA_project.py metalaffa_example\n    cd metalaffa_example\n\nMetaLAFFA project directories created in this way will contain all of the files necessary to run the pipeline, including a local copy of a configuration module that will allow you to both keep a record of how the pipeline was run for the associated project and have project-specific configurations in case you have multiple projects that require different pipeline configurations.\n\n**Note**: Any configuration changes made in the configuration module located at `$CONDA_PREFIX/lib/python3.6/config` will be the default configurations for any newly created projects. Thus, if you have custom settings that you think should be preset in any new projects, you should make those changes to this base configuration module.\n\n1.  Obtain metagenomic shotgun sequencing data in FASTQ format to annotate. This can either be your own data, or you can download publicly available data to try annotating (e.g. from [the Human Microbiome Project](https://www.hmpdacc.org/hmp/HMASM/)). You can either download samples via the web interface or via the command line from your example project directory as follows:\n\n\n\n    wget http://downloads.hmpdacc.org/data/Illumina/stool/SRS017307.tar.bz2 -P data/\n\nIf you download data from HMP through either of these methods, you will receive a compressed directory that you will need to expand, i.e.:\n\n    tar -jxf data/SRS017307.tar.bz2 --one-top-level=data --strip-components=1\n\nwhich will extract he associated FASTQs to the `data/` directory. After extract, it is recommended you delete the original compressed directory to save disk space. These will consist of three files, a forward read FASTQ (ending in `1.fastq`), a reverse read FASTQ (ending in `2.fastq`), and a singleton FASTQ (ending in `singleton.fastq`). Default MetaLAFFA settings expect gzipped input FASTQs, so you will need to zip these FASTQs:\n\n    gzip data/*.fastq\n\nYou can change MetaLAFFA to use unzipped files in `config/operations.py` by changing the `zipped_files` variable to `False`, though this is not recommended due to shotgun metagenomic FASTQs usually being very large.\n\n1.  Format the names of your initial FASTQs to follow the default naming convention recognized by MetaLAFFA:\n\n    Forward-read FASTQs should be named `<sample>.R1.fastq.gz`\n\n    Reverse-read FASTQs should be named `<sample>.R2.fastq.gz`\n\n    Singleton/unpaired FASTQs should be named `<sample>.S.fastq.gz`\n\n    **Note** If you only have a single, unpaired read file (e.g. just forward reads), make sure that they are labeled as a singleton/unpaired FASTQ.\n\n2.  Start MetaLAFFA with one of the following commands from your example project directory:\n\n    1.  If you are running MetaLAFFA locally, use:\n\n            ./MetaLAFFA.py\n\n        If you are running MetaLAFFA on a cluster, use:\n\n            ./MetaLAFFA.py --use-cluster\n\n        This option will use the submission wrapper and jobscript specified in your project's `config/cluster.py` configuration submodule to submit jobs to your cluster system.\n\n    2.  Since Snakemake (and thus MetaLAFFA) needs to run for the entire annotation process, we recommend that you begin a [screen session](https://ss64.com/bash/screen.html) to start the pipeline and then detach the screen so you do not need to keep your terminal open.\n\n    3.  You can use the `-j <number_of_jobs>` (default is 50 for <number_of_jobs>) option to specify how many cores should be used locally/jobs should be in your cluster's queue at any one time. Regarding cluster usage, this limits the number of jobs that will be running at any one time but also avoids flooding the job queue with the potentially enormous number of jobs that may be generated. You should modify this setting according to your cluster resources and job queue etiquette.\n\n    4.  You can use the `-w <time_in_seconds>` (default is 60 for <time_in_seconds>) option to specify the time to wait after a job finishes running before checking for the existence of the expected output file. Snakemake does this to determine whether the job completed successfully, and if running on a cluster, there can often be some delay between jobs technically finishing and output files being detectable when shared filesystems are involved. When running on a cluster, you should modify this setting according to the expected latency for your cluster environment.\n\n    5.  When running on a cluster, MetaLAFFA, by default, requests 10G of RAM per job, along with some step-specific memory requests according to the needs of the various tools used in the pipeline. You can modify the default resource requests by editing `config/cluster.py`, and you can modify step-specific resource requests by editing the `cluster_params` Python dictionary of each step's configuration submodule in `config/steps/<name_of_pipeline_step>.py`.\n\n3.  Once MetaLAFFA has finished running, you should find the final output files in your project's `output/final` directory. You can see example final output files in the `example_output` folder of this repository.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1. Host read filtering",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "Full-length Tutorial",
          "MetaLAFFA step descriptions"
        ],
        "type": "Text_excerpt",
        "value": "The first step in MetaLAFFA is host read filtering. Host reads should be removed to ensure that later analyses are only considering the functional potential of the microbial community of interest. This is particularly important in cases where samples might consist of a majority of host reads, as in human fecal samples from hosts with certain gastrointestinal disorders that cause excessive shedding of epithelial cells (e.g. ulcerative colitis). Host read filtering is usually performed by aligning reads to one or more reference genomes for the host species and removing reads with match qualities above a certain threshold. MetaLAFFA defaults to using Bowtie 2 (Langmead and Salzberg 2012) for host read filtering. The default host database is the human reference with decoys from the 1000 Genomes Project, hs37d5 (1000 Genomes Project Consortium 2015).\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2. Duplicate read filtering",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "Full-length Tutorial",
          "MetaLAFFA step descriptions"
        ],
        "type": "Text_excerpt",
        "value": "The second step in MetaLAFFA is duplicate read filtering. Duplicate read filtering aims to remove reads that erroneously appear in a sample multiple times due to artifacts of sequencing (PCR duplicates or optical duplicates). An explanation of the cause for PCR duplicates can be found [**here**](http://www.cureffi.org/2012/12/11/how-pcr-duplicates-arise-in-next-generation-sequencing/). However, PCR duplicate filtering may not always be appropriate for metagenomic studies because the (correct and biologically meaningful) presence of highly similar/equivalent reads is possible in metagenomics, especially when a given species or strain is at high abundance (Nayfach and Pollard 2016). In these scenarios, there are in fact more copies of the same sequence present, and filtering out duplicate reads may dampen the signal of this higher copy number within the community. Optical duplicates instead arise when, after amplification on a flowcell, a large cluster of duplicated reads registers as two separate clusters, and these are safe to remove. The default duplicate filtering program is MarkDuplicates from the Picard set of bioinformatics tools (\u201cPicard,\u201d n.d.), and by default only optical duplicates are removed.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3. Quality trimming and filtering",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "Full-length Tutorial",
          "MetaLAFFA step descriptions"
        ],
        "type": "Text_excerpt",
        "value": "The final pre-processing step in MetaLAFFA is quality trimming and filtering. The aim of quality trimming and filtering is to reduce sequencing noise by trimming bases with quality below a certain threshold from one or both ends of a read, as well as removing any reads that fall below a specific length threshold. For this step, MetaLAFFA uses Trimmomatic (Bolger, Lohse, and Usadel 2014) by default, trimming reads based on Trimmomatic's maximum information criterion and filtering out trimmed reads shorter than 60bp.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "4. Mapping reads to gene IDs",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "Full-length Tutorial",
          "MetaLAFFA step descriptions"
        ],
        "type": "Text_excerpt",
        "value": "Given filtered and quality-controlled FASTQs, MetaLAFFA next maps these reads against a database of protein sequences corresponding to identified genes. Note that this (read-based annotation) method is one of two main annotation approaches, the other being assembly-based annotation, such as performed by MOCAT2 (Kultima et al. 2016). Read-based annotation works by assigning functional annotations to individual reads rather than by assembling contigs from reads, assigning functional annotations to ORFs identified in the contigs, and then mapping reads to the ORFs to get counts.\n\nRead annotations are most often performed by aligning reads to a database of gene sequences that have prior functional associations. These alignments are often performed as translated alignments, i.e. doing a 6-frame translation of a read's nucleotide sequence to possible amino acid sequences and then aligning those amino acid sequences to the protein sequences associated with genes. MetaLAFFA uses DIAMOND (Buchfink, Xie, and Huson 2015) as its default aligner due to its speed and built-in parallelization. By default, MetaLAFFA is configured to use the 2020 UniRef90 reference database of gene sequences (from UniProt (Consortium 2018)) when present, though other databases of annotated gene sequences could be used if available (e.g. KEGG).\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "5. Filtering read mapping hits",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "Full-length Tutorial",
          "MetaLAFFA step descriptions"
        ],
        "type": "Text_excerpt",
        "value": "After mapping reads to gene sequences, MetaLAFFA filters these hits to improve annotation quality. There are several ways to filter hits that depend on how many best hits are kept per read and whether hits to genes without functional annotations are kept. The differences in these methods are discussed in Carr et al. (Carr and Borenstein 2014), which analyzes the trade-offs in sensitivity and specificity that come from different choices in hit filtering. By default, MetaLAFFA uses a custom Python script to filter hits and uses the highest specificity hit filtering method (i.e. keeping hits that we are most confident in, but potentially missing some true hits due to lower confidence), keeping only hits with the best e-value for each read and allowing best hits to include genes without functional annotations.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "6. Gene counting",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "Full-length Tutorial",
          "MetaLAFFA step descriptions"
        ],
        "type": "Text_excerpt",
        "value": "Once the hits are filtered, MetaLAFFA counts gene abundances based on the number of reads that map to each gene in the sequence database. There are two important considerations when counting gene abundances based on mapped reads. The first is count normalization based on gene length, i.e. longer genes are more likely to be sequenced than shorter genes, and so a longer gene will be more likely to have more reads map to it than a shorter gene even though both genes might be at the same abundance and so the counts of reads mapping to a gene should be normalized by the length of the gene. The second consideration is how to count genes when a read maps to more than one gene. This can be done in one of two ways, either by giving a count of 1 to each gene a read maps to or by having each read contribute a count of 1 in total but dividing a read's count among the genes a read maps to. The former method can lead to double-counting issues and so MetaLAFFA uses a fractional gene counting method by default. Gene length normalization and fractional counting are performed by a custom Python script in default MetaLAFFA operation.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "7. Ortholog counting",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "Full-length Tutorial",
          "MetaLAFFA step descriptions"
        ],
        "type": "Text_excerpt",
        "value": "The next step after calculating gene abundances is to convert those gene abundances to abundances of annotated functions. Usually, these come in the form of functional orthology group abundances as defined by various functional annotation systems (e.g. KEGG (Kanehisa et al. 2018), MetaCyc (Caspi et al. 2007), etc.). These functional orthology groups usually correspond to the function a protein corresponding to a single gene may perform. Similar to the gene counting step, some genes may map to multiple orthology groups in a given system, and so each gene can either contribute its whole abundance to each associated orthology group or fractional contributions of its abundance to each associated orthology group. Again, due to double-counting issues, by default MetaLAFFA uses a fraction contribution method when counting ortholog abundances based on gene abundances. Also, MetaLAFFA calculates abundances of KEGG orthology groups (KOs) from UniProt gene functional annotations by default. By default, orthology group abundance calculations are performed using a custom Python script.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "8. Correcting orthology group abundances",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "Full-length Tutorial",
          "MetaLAFFA step descriptions"
        ],
        "type": "Text_excerpt",
        "value": "Once initial orthology group abundances have been calculated, it is usually necessary to correct them to allow for comparisons between samples. Specifically, orthology group abundances based on read counts from standard shotgun metagenomic sequencing are inherently compositional in nature (i.e. read count-based abundances reflect relative, rather than absolute, orthology group abundances). To account for this issue and convert orthology group abundances into a form that allows for valid standard statistical comparisons between samples, MetaLAFFA uses MUSiCC (Manor and Borenstein 2015) during default operation. MUSiCC uses genes identified as universally single-copy across bacterial genomes to transform read-based relative orthology group abundances into average orthology group copy number across genomes within a sample. By default, MetaLAFFA uses MUSiCC's inter-sample normalization with intra-sample correction using learned models to correct KO abundances using universal single-copy gene abundances.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "9. Aggregating orthology groups into higher-level functional descriptions",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "Full-length Tutorial",
          "MetaLAFFA step descriptions"
        ],
        "type": "Text_excerpt",
        "value": "The final step in MetaLAFFA is to aggregate functional orthology group abundances into abundances at higher-level functional descriptions (e.g. modules or pathways). This can help with interpretability of results, since initial orthology group counting can often result in thousands of unique functions. One way to handle this issue is to aggregate initial functional orthology groups into higher-level functional classifications based on their functional similarity or shared membership in a biological process (e.g. carbohydrate metabolism). This can result in a more manageable number of functions to analyze and can also reveal interesting trends in higher-level functional categories. By default, MetaLAFFA uses EMPANADA (Manor and Borenstein 2017) when aggregating orthology groups, assigning an orthology group's abundance among all of the functional categories it belongs to based on the support for the presence of each of those functional categories. Associations between KOs and higher-level functional descriptions (modules and pathways) are determined from the KEGG BRITE hierarchy (Kanehisa et al. 2018) under default settings.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "10. Summarizing results of steps in MetaLAFFA",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "Full-length Tutorial",
          "MetaLAFFA step descriptions"
        ],
        "type": "Text_excerpt",
        "value": "Another important component of MetaLAFFA is the automatic summary statistic generation that accompanies each step in the pipeline. Default summary statistics include number of reads, average read length, and average base quality for input FASTQs and the resulting FASTQs after each FASTQ filtering step, as well as number of hits, number of mapped reads, number of associated genes, and number of annotated orthology groups as determined after each step in the pipeline. These summary statistics are merged at the end into a single table summarizing the results of each step of the pipeline.\n\n### Installing MetaLAFFA\n\nMetaLAFFA is a Snakemake pipeline configured via Python scripts that manages the functional annotation of shotgun metagenomic data via various Python scripts and third-party tools.\n\nFirst, MetaLAFFA requires Conda (version 4.8 or greater). If you do not have Conda installed, look [**here**](https://docs.conda.io/projects/conda/en/latest/user-guide/install/index.html) for installation instructions.\n\nTo install MetaLAFFA via Conda, create a new environment using the following command:\n\n    # Create a new Conda environment for running MetaLAFFA.\n    conda create -n metalaffa metalaffa -c bioconda -c borenstein-lab\n\nAll MetaLAFFA software dependencies will be installed and available in the resulting environment. When operating MetaLAFFA, be sure to activate this environment:\n\n    # Activate the MetaLAFFA environment\n    conda activate metalaffa\n\n### Downloading and preparing reference databases for MetaLAFFA annotation\n\nDefault reference databases can be downloaded and prepared for MetaLAFFA using the `prepare_databases.py` script. These databases will be installed in the base directory for the `metalaffa` environment, which can be found at `$CONDA_PREFIX/MetaLAFFA`. Activate the `metalaffa` environment and then run:\n\n    # Download and prepare default reference databases\n    prepare_databases.py -hr -km -u\n\nwhere each option to the script specifies a different reference database:\n\n`-hr`: Download and prepare the database of human reference and decoy sequences (used in the 1000 genomes project) for host filtering.\n\n`-km`: Download KEGG ko-to-module and ko-to-pathway mappings.\n\n`-u`: Download and prepare the UniRef90 database for read mapping and functional annotation.\n\n`-c`: Optionally, the script can remove intermediate files after they are processed. This can save significant disk space, however if something interrupts the script, you may have to start the entire process from the beginning.\n\n**Note**: This process can be time and resource intensive, taking several hours, ~40GB of RAM, and ~300GB of free disk space if not cleaning up intermediate files, or ~150GB if cleaning up intermediate files. You may consider running the setup script in a [screen session](https://ss64.com/bash/screen.html), especially when downloading the UniRef90 database for read mapping.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Final outputs location and descriptions",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "Full-length Tutorial",
          "Running MetaLAFFA"
        ],
        "type": "Text_excerpt",
        "value": "Once the pipeline has finished running, you can find your desired output files in the default final output directory, `output/final/`. If you ran the pipeline in the default configuration, these should include:\n\n`output/final/KOvsMODULE_BACTERIAL_KEGG_2013_07_15.aggregated_orthologs.tab`: The module-level functional profile\n\n`output/final/KOvsMODULE_BACTERIAL_KEGG_2013_07_15.mapped_ortholog_counts.tab`: The module-level counts of the number of orthologs from each module that were detected in each sample\n\n`output/final/KOvsPATHWAY_BACTERIAL_KEGG_2013_07_15.aggregated_orthologs.tab`: The pathway-level functional profile\n\n`output/final/KOvsPATHWAY_BACTERIAL_KEGG_2013_07_15.mapped_ortholog_counts.tab`: The pathway-level counts of the number of orthologs from each pathway that were detected in each sample\n\n`output/final/orthologs.tab`: The average KO copy number per genome, as determined by MUSiCC\n\n`output/final/summary.txt`: The master table summarizing each step in the pipeline\n\nExamples of final output files for three HMP samples can be found in the `example_output` folder of this repository.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Downloading and preparing reference databases for MetaLAFFA annotation",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "Full-length Tutorial"
        ],
        "type": "Text_excerpt",
        "value": "Default reference databases can be downloaded and prepared for MetaLAFFA using the `prepare_databases.py` script. These databases will be installed in the base directory for the `metalaffa` environment, which can be found at `$CONDA_PREFIX/MetaLAFFA`. Activate the `metalaffa` environment and then run:\n\n    # Download and prepare default reference databases\n    prepare_databases.py -hr -km -u\n\nwhere each option to the script specifies a different reference database:\n\n`-hr`: Download and prepare the database of human reference and decoy sequences (used in the 1000 genomes project) for host filtering.\n\n`-km`: Download KEGG ko-to-module and ko-to-pathway mappings.\n\n`-u`: Download and prepare the UniRef90 database for read mapping and functional annotation.\n\n`-c`: Optionally, the script can remove intermediate files after they are processed. This can save significant disk space, however if something interrupts the script, you may have to start the entire process from the beginning.\n\n**Note**: This process can be time and resource intensive, taking several hours, ~40GB of RAM, and ~300GB of free disk space if not cleaning up intermediate files, or ~150GB if cleaning up intermediate files.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/borenstein-lab/MetaLAFFA/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "faq": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Configuring MetaLAFFA to submit jobs to a cluster",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "Full-length Tutorial",
          "Configuring MetaLAFFA"
        ],
        "type": "Text_excerpt",
        "value": "Though MetaLAFFA can be run locally, running MetaLAFFA on a cluster will allow you to best utilize its ability to parallelize the annotation of many metagenomic shotgun sequencing samples. If you plan to run MetaLAFFA locally, you can skip the following section on configuring MetaLAFFA to run on a cluster. However, you should make sure to modify `$CONDA_PREFIX/MetaLAFFA/config/steps/map_reads_to_genes.py`, changing the number of cores defined in `cluster_params` to be the number of cores you want a single DIAMOND alignment process to use.\n\n**Note**: MetaLAFFA's default installation via Conda uses Snakemake version 3.13.3, but if you have access to Snakemake version 4.1 or greater, then you can make use of [**Snakemake profiles**](https://snakemake.readthedocs.io/en/v5.1.4/executable.html#profiles), a convenient option for configuring Snakemake pipelines for different computing ennvironments. This should replace the use of environment-specific jobscripts outlines below.\n\nBy default, MetaLAFFA is able to interface with Sun Grid Engine (SGE) and HTCondor clusters. This is achieved via the use of Python job submission wrapper scripts, included in the `$CONDA_PREFIX/MetaLAFFA/src/` directory (`$CONDA_PREFIX/MetaLAFFA/src/sge_submission_wrapper.py` and `$CONDA_PREFIX/src/condor_submission_wrapper.py` respectively). If your cluster uses a different cluster management system, then you will need to create your own job submission wrapper by following these steps:\n\n1.  Copy the appropriate example job submission wrapper script to serve as a template for your new wrapper.\n\n        cp $CONDA_PREFIX/MetaLAFFA/src/<sge|condor>_submission_wrapper.py $CONDA_PREFIX/MetaLAFFA/src/<name_of_your_cluster_system>_submission_wrapper.py\n\n    Which example script you should use as a template depends on how you parameterize jobs when submitting them to the cluster. If you request cluster resources (memory, cores, etc.) via command-line arguments and just provide the name of a shell script to run (i.e. SGE uses `qsub <name_of_shell_script>`), then you should use the SGE wrapper as a template. If you instead specify cluster resources and which script to run via a config file (i.e. HTCondor uses `condor_submit <name_of_config_file>`), then you should use the HTCondor wrapper as a template.\n\n2.  Edit the template script to submit a job on your cluster using appropriate resource requests and properly providing the script to run. The beginning of the template script covers necessary library imports and job parameter parsing. The second half of the template script handles cluster-specific processing and job submission. You should only need to edit the second half of the template script to let MetaLAFFA interface with your cluster. Here is a brief explanation of what the example scripts are doing, to help you understand what changes you may need to make to interface with your cluster:\n\n    1.  Starting from the cluster-specific section of the SGE template wrapper script:\n\n        1.  First, the script initializes the list of components that make up the command to submit the job to the cluster. On SGE, the basic submission command is `qsub`, but you'll want to change this to the correct submission command for your cluster.\n\n        2.  Next, there is some example processing for multi-core jobs. For the cluster where this was developed, multi-core jobs must request memory-per-core, rather than total memory for the job, so the script must calculate this. At the end of these calculations, the `qsub` command-line option for requesting multiple cores is added to the base submission command.\n\n        3.  Once multi-core specific processing has been handled, the script adds command-line options for requesting memory, running time, and which directory to run the script in.\n\n        4.  After the common resource requests and job settings have been added, the script next checks whether it should include a request for local disk space on a cluster node and whether it should request that resources be set aside until the job can run. The former is important if you have limited disk space on your shared file system and need to process intermediate files locally on cluster nodes during pipeline steps. The latter is useful for ensuring the jobs with large resource requests get to run.\n\n        5.  Next, the name of the script to run is added at the end of the command.\n\n        6.  Finally, the script runs the final submission command on the command-line.\n\n    2.  Starting from the cluster-specific section of the HTCondor wrapper script:\n\n        1.  First, the script defines a `node` variable that indicates which specific cluster node(s) MetaLAFFA should request to run jobs on. If this is set to `None`, then MetaLAFFA will not restrict which node(s) job submissions will be sent to. This may be important if MetaLAFFA (or the data you wish to annotate) will only be available on a subset of nodes (e.g. if only a subset of cluster nodes mount the drive where your data is stored or where MetaLAFFA is installed), in which case you would want MetaLAFFA to request that jobs run only on those specific nodes.\n\n        2.  Next, the script converts memory requests into the appropriate units for HTCondor memory requests.\n\n        3.  After determining job parameters, the script opens up a config file (in `submission_files/`) specific to the pipeline operation it is submitting to the cluster. To keep config files distinct between parallel jobs, the script names this config file based on the name of the pipeline step and the instance of the pipeline step it is running (i.e. which input file is being run through this pipeline step).\n\n        4.  The script then populates the config file with resource requests and settings. These include, in order of their addition in the script: the location of the script to run, the number of cores to request for the job, and the amount of memory to reserve for the job. The added `Queue` terminates the configuration file.\n\n        5.  Finally, the script runs `condor_submit` on the command-line, providing the path to the config file for this job.\n\n3.  Change the indicated submission wrapper in `CONDA_PREFIX/MetaLAFFA/config/cluster.py` to indicate your new submission wrapper (i.e. change `submissionn_wrapper = \"src/sge_submission_wrapper.py\"` to `submission_wrapper = \"src/<name_of_your_cluster_system>_submission_wrapper.py\"`). This will ensure that when you create new MetaLAFFA project directories (described next), both your custom submission wrapper and the configuration to use it will be included in the new project.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Why does MetaLAFFA default to using an older version of UniProt?",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "FAQ"
        ],
        "type": "Text_excerpt",
        "value": "In December 2020, UniProt encountered KEGG licensing issues, which resulted in the removal of KEGG Orthology mappings for UniProt genes. Since the default ortholog abundance correction and ortholog aggregation steps rely on KEGG Orthology data, MetaLAFFA now defaults to an older version of the UniProt database where KEGG Orthology mappings are still available.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "How do I fix the \"undefined symbol: omp_get_num_procs\" error when MetaLAFFA tries to run MUSiCC?",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "FAQ"
        ],
        "type": "Text_excerpt",
        "value": "This can be fixed by installing the llvm-openmp package in your MetaLAFFA conda environment as follows:\n\n    conda install llvm-openmp -c conda-forge\n\nThis error appears to be caused by issues with the libiomp5.so library that may arise during installation. However, llvm-openmp is not included as a standard dependency of MetaLAFFA because the addition of the conda-forge channel during initial environment creation can cause problems for conda's environment solver.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/borenstein-lab/MetaLAFFA/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "borenstein-lab/MetaLAFFA"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Tutorial for running MetaLAFFA"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/build.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/src/template_jobscript.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installing MetaLAFFA",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "Full-length Tutorial"
        ],
        "type": "Text_excerpt",
        "value": "To install MetaLAFFA via Conda, create a new environment using the following command:\n\n    # Create a new Conda environment for running MetaLAFFA.\n    conda create -n metalaffa metalaffa -c bioconda -c borenstein-lab\n\nAll MetaLAFFA software dependencies will be installed and available in the resulting environment. When operating MetaLAFFA, be sure to activate this environment:\n\n    # Activate the MetaLAFFA environment\n    conda activate metalaffa\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Downloading and preparing reference databases for MetaLAFFA annotation",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "Full-length Tutorial"
        ],
        "type": "Text_excerpt",
        "value": "Default reference databases can be downloaded and prepared for MetaLAFFA using the `prepare_databases.py` script. These databases will be installed in the base directory for the `metalaffa` environment, which can be found at `$CONDA_PREFIX/MetaLAFFA`. Activate the `metalaffa` environment and then run:\n\n    # Download and prepare default reference databases\n    prepare_databases.py -hr -km -u\n\nwhere each option to the script specifies a different reference database:\n\n`-hr`: Download and prepare the database of human reference and decoy sequences (used in the 1000 genomes project) for host filtering.\n\n`-km`: Download KEGG ko-to-module and ko-to-pathway mappings.\n\n`-u`: Download and prepare the UniRef90 database for read mapping and functional annotation.\n\n`-c`: Optionally, the script can remove intermediate files after they are processed. This can save significant disk space, however if something interrupts the script, you may have to start the entire process from the beginning.\n\n**Note**: This process can be time and resource intensive, taking several hours, ~40GB of RAM, and ~300GB of free disk space if not cleaning up intermediate files, or ~150GB if cleaning up intermediate files.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Prepare input data files",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "Full-length Tutorial",
          "Running MetaLAFFA"
        ],
        "type": "Text_excerpt",
        "value": "1.  Obtain metagenomic shotgun sequencing data in FASTQ format to annotate. This can either be your own data, or you can download publicly available data to try annotating (e.g. from [the Human Microbiome Project](https://www.hmpdacc.org/hmp/HMASM/)). You can either download samples via the web interface or via the command line from your example project directory as follows:\n\n\n\n    wget http://downloads.hmpdacc.org/data/Illumina/stool/SRS017307.tar.bz2 -P data/\n\nIf you download data from HMP through either of these methods, you will receive a compressed directory that you will need to expand, i.e.:\n\n    tar -jxf data/SRS017307.tar.bz2 --one-top-level=data --strip-components=1\n\nwhich will extract he associated FASTQs to the `data/` directory. After extract, it is recommended you delete the original compressed directory to save disk space. These will consist of three files, a forward read FASTQ (ending in `1.fastq`), a reverse read FASTQ (ending in `2.fastq`), and a singleton FASTQ (ending in `singleton.fastq`). Default MetaLAFFA settings expect gzipped input FASTQs, so you will need to zip these FASTQs:\n\n    gzip data/*.fastq\n\nYou can change MetaLAFFA to use unzipped files in `config/operations.py` by changing the `zipped_files` variable to `False`, though this is not recommended due to shotgun metagenomic FASTQs usually being very large.\n\n1.  Format the names of your initial FASTQs to follow the default naming convention recognized by MetaLAFFA:\n\n    Forward-read FASTQs should be named `<sample>.R1.fastq.gz`\n\n    Reverse-read FASTQs should be named `<sample>.R2.fastq.gz`\n\n    Singleton/unpaired FASTQs should be named `<sample>.S.fastq.gz`\n\n    **Note**: MetaLAFFA expects all three FASTQ types for each sample. If one or more do not exist for a sample (e.g. some samples only have paired reads while others also have some singletons), MetaLAFFA will generate appropriately-named empty dummy files as placeholders for the missing expected files. The creation of these dummy files is logged in `dummy_input_files_generated.txt`. If you start MetaLAFFA from a step that does not take FASTQs as input (e.g. you have your own DIAMOND output from a separate source and want to annotate it), MetaLAFFA will do the same check for expected files and generate (and log the creation of) dummy files for any expected files that are missing.\n\n    **Note** If you only have a single, unpaired read file (e.g. just forward reads), make sure that they are labeled as a singleton/unpaired FASTQ.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "How do I fix the \"undefined symbol: omp_get_num_procs\" error when MetaLAFFA tries to run MUSiCC?",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "FAQ"
        ],
        "type": "Text_excerpt",
        "value": "This can be fixed by installing the llvm-openmp package in your MetaLAFFA conda environment as follows:\n\n    conda install llvm-openmp -c conda-forge\n\nThis error appears to be caused by issues with the libiomp5.so library that may arise during installation. However, llvm-openmp is not included as a standard dependency of MetaLAFFA because the addition of the conda-forge channel during initial environment creation can cause problems for conda's environment solver.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/borenstein-lab/MetaLAFFA/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "GNU General Public License v3.0",
        "spdx_id": "GPL-3.0",
        "type": "License",
        "url": "https://api.github.com/licenses/gpl-3.0",
        "value": "https://api.github.com/licenses/gpl-3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<https://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<https://www.gnu.org/licenses/why-not-lgpl.html>.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MetaLAFFA"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "borenstein-lab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 254918,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 586,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.bibtex"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://snakemake.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "regular_expression"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "engal",
          "type": "User"
        },
        "date_created": "2021-11-16T00:14:14Z",
        "date_published": "2021-11-16T00:20:28Z",
        "description": "* Due to changes in UniProt, KO mappings will no longer be available in current UniProt database releases going forward. To address this, MetaLAFFA's default database preparation now uses the most recent version of the UniProt database that included KO mappings (from 2020).\r\n* Job-specific log files are now generated and stored in the logging directory.",
        "html_url": "https://github.com/borenstein-lab/MetaLAFFA/releases/tag/1.0.1",
        "name": "MetaLAFFA-1.0.1",
        "release_id": 53431669,
        "tag": "1.0.1",
        "tarball_url": "https://api.github.com/repos/borenstein-lab/MetaLAFFA/tarball/1.0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/borenstein-lab/MetaLAFFA/releases/53431669",
        "value": "https://api.github.com/repos/borenstein-lab/MetaLAFFA/releases/53431669",
        "zipball_url": "https://api.github.com/repos/borenstein-lab/MetaLAFFA/zipball/1.0.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "engal",
          "type": "User"
        },
        "date_created": "2021-08-24T23:54:27Z",
        "date_published": "2021-08-25T00:07:06Z",
        "description": "Official release after publication, changes include:\r\n\r\n*  Fixed bowtie2 conflict with tbb version\r\n*  Changed default project configuration to use config module in Conda python lib directory\r\n*  Updated README with publication information, changes to default configuration process, and additional output file details",
        "html_url": "https://github.com/borenstein-lab/MetaLAFFA/releases/tag/1.0.0",
        "name": "MetaLAFFA-1.0.0",
        "release_id": 48390435,
        "tag": "1.0.0",
        "tarball_url": "https://api.github.com/repos/borenstein-lab/MetaLAFFA/tarball/1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/borenstein-lab/MetaLAFFA/releases/48390435",
        "value": "https://api.github.com/repos/borenstein-lab/MetaLAFFA/releases/48390435",
        "zipball_url": "https://api.github.com/repos/borenstein-lab/MetaLAFFA/zipball/1.0.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "engal",
          "type": "User"
        },
        "date_created": "2020-09-23T01:50:47Z",
        "date_published": "2020-09-23T02:13:44Z",
        "html_url": "https://github.com/borenstein-lab/MetaLAFFA/releases/tag/0.1.0",
        "name": "MetaLAFFA-0.1.0",
        "release_id": 31682739,
        "tag": "0.1.0",
        "tarball_url": "https://api.github.com/repos/borenstein-lab/MetaLAFFA/tarball/0.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/borenstein-lab/MetaLAFFA/releases/31682739",
        "value": "https://api.github.com/repos/borenstein-lab/MetaLAFFA/releases/31682739",
        "zipball_url": "https://api.github.com/repos/borenstein-lab/MetaLAFFA/zipball/0.1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Software Requirements",
        "parent_header": [
          "Tutorial for running MetaLAFFA"
        ],
        "type": "Text_excerpt",
        "value": "MetaLAFFA requires [**Conda**](https://docs.conda.io/projects/conda/en/latest/user-guide/install/index.html) (version 4.8 or greater) for installation and operation.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Tutorial for running MetaLAFFA",
        "type": "Text_excerpt",
        "value": "-   [Software Requirements](#software-requirements)\n-   [Overview](#overview)\n-   [Quick Start Summary](#quick-start-summary)\n    -   [Installing MetaLAFFA](#installing-metalaffa)\n    -   [Downloading and preparing reference databases for MetaLAFFA annotation](#downloading-and-preparing-reference-databases-for-metalaffa-annotation)\n    -   [Configuring MetaLAFFA to submit jobs to a cluster](#configuring-metalaffa-to-submit-jobs-to-a-cluster)\n    -   [Trying out MetaLAFFA](#trying-out-metalaffa)\n-   [Full-length Tutorial](#full-length-tutorial)\n    -   [MetaLAFFA step descriptions](#metalaffa-step-descriptions)\n        -   [1. Host read filtering](#host-read-filtering)\n        -   [2. Duplicate read filtering](#duplicate-read-filtering)\n        -   [3. Quality trimming and filtering](#quality-trimming-and-filtering)\n        -   [4. Mapping reads to gene IDs](#mapping-reads-to-gene-ids)\n        -   [5. Filtering read mapping hits](#filtering-read-mapping-hits)\n        -   [6. Gene counting](#gene-counting)\n        -   [7. Ortholog counting](#ortholog-counting)\n        -   [8. Correcting orthology group abundances](#correcting-orthology-group-abundances)\n        -   [9. Aggregating orthology groups into higher-level functional descriptions](#aggregating-orthology-groups-into-higher-level-functional-descriptions)\n        -   [10. Summarizing results of steps in MetaLAFFA](#summarizing-results-of-steps-in-metalaffa)\n    -   [Installing MetaLAFFA](#installing-metalaffa-1)\n    -   [Downloading and preparing reference databases for MetaLAFFA annotation](#downloading-and-preparing-reference-databases-for-metalaffa-annotation-1)\n    -   [Creating a MetaLAFFA project directory](#creating-a-metalaffa-project-directory)\n    -   [Configuring MetaLAFFA](#configuring-metalaffa)\n        -   [config/file\\_organization.py](#configfile_organization.py)\n        -   [config/operation.py](#configoperation.py)\n        -   [config/cluster.py](#configcluster.py)\n        -   [config/steps/\\*.py](#configsteps.py)\n        -   [config/library\\_functions.py](#configlibrary_functions.py)\n        -   [Configuring MetaLAFFA to use a custom annotated gene database](#configuring-metalaffa-to-use-a-custom-annotated-gene-database)\n        -   [Configuring MetaLAFFA to submit jobs to a cluster](#configuring-metalaffa-to-submit-jobs-to-a-cluster-1)\n        -   [Using a different step in MetaLAFFA as a starting point](#using-a-different-step-in-metalaffa-as-a-starting-point)\n    -   [Running MetaLAFFA](#running-metalaffa)\n        -   [Prepare input data files](#prepare-input-data-files)\n        -   [Starting MetaLAFFA](#starting-metalaffa)\n        -   [MetaLAFFA script options](#metalaffa-script-options)\n        -   [Final outputs location and descriptions](#final-outputs-location-and-descriptions)\n        -   [Log files](#log-files)\n        -   [Restarting MetaLAFFA](#restarting-metalaffa)\n-   [FAQ](#faq)\n    -   [Why does MetaLAFFA default to using an older version of UniProt?](#why-does-metalaffa-default-to-using-an-older-version-of-uniprot)\n    -   [How do I fix the \"undefined symbol: omp\\_get\\_num\\_procs\" error when MetaLAFFA tries to run MUSiCC?](#how-do-i-fix-the-undefined-symbol-omp_get_num_procs-error-when-metalaffa-tries-to-run-musicc)\n-   [References](#references)\n\n**Repository:** <https://github.com/engal/MetaLAFFA>\n\n**Publication:** Eng, A., Verster, A. J., & Borenstein, E. (2020). MetaLAFFA: a flexible, end-to-end, distributed computing-compatible metagenomic functional annotation pipeline. *BMC bioinformatics*, 21(1), 1-9.\n\n**Note:** MetaLAFFA is supported on Mac and Linux, but not on Windows.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Overview",
        "parent_header": [
          "Tutorial for running MetaLAFFA"
        ],
        "type": "Text_excerpt",
        "value": "MetaLAFFA is a pipeline for annotating shotgun metagenomic data with abundances of functional orthology groups. This process consists of several steps to go from raw FASTQs (with sequencing adapters removed) to functional profiles:\n\n1.  Host read filtering (e.g. removing human DNA)\n2.  Duplicate read filtering\n3.  Quality trimming and filtering\n4.  Mapping reads to genes\n5.  Mapping genes to functional orthology groups (e.g. KOs)\n6.  Aggregating orthologs into higher-level groupings (e.g. pathways)\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Trying out MetaLAFFA",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "Quick Start Summary"
        ],
        "type": "Text_excerpt",
        "value": "1.  After installation and database preparation, you can create a new MetaLAFFA project directory to try out MetaLAFFA. With your MetaLAFFA Conda environment active, you can create a new project directory using the associated script as follows:\n\n\n\n    create_new_MetaLAFFA_project.py metalaffa_example\n    cd metalaffa_example\n\nMetaLAFFA project directories created in this way will contain all of the files necessary to run the pipeline, including a local copy of a configuration module that will allow you to both keep a record of how the pipeline was run for the associated project and have project-specific configurations in case you have multiple projects that require different pipeline configurations.\n\n**Note**: Any configuration changes made in the configuration module located at `$CONDA_PREFIX/lib/python3.6/config` will be the default configurations for any newly created projects. Thus, if you have custom settings that you think should be preset in any new projects, you should make those changes to this base configuration module.\n\n1.  Obtain metagenomic shotgun sequencing data in FASTQ format to annotate. This can either be your own data, or you can download publicly available data to try annotating (e.g. from [the Human Microbiome Project](https://www.hmpdacc.org/hmp/HMASM/)). You can either download samples via the web interface or via the command line from your example project directory as follows:\n\n\n\n    wget http://downloads.hmpdacc.org/data/Illumina/stool/SRS017307.tar.bz2 -P data/\n\nIf you download data from HMP through either of these methods, you will receive a compressed directory that you will need to expand, i.e.:\n\n    tar -jxf data/SRS017307.tar.bz2 --one-top-level=data --strip-components=1\n\nwhich will extract he associated FASTQs to the `data/` directory. After extract, it is recommended you delete the original compressed directory to save disk space. These will consist of three files, a forward read FASTQ (ending in `1.fastq`), a reverse read FASTQ (ending in `2.fastq`), and a singleton FASTQ (ending in `singleton.fastq`). Default MetaLAFFA settings expect gzipped input FASTQs, so you will need to zip these FASTQs:\n\n    gzip data/*.fastq\n\nYou can change MetaLAFFA to use unzipped files in `config/operations.py` by changing the `zipped_files` variable to `False`, though this is not recommended due to shotgun metagenomic FASTQs usually being very large.\n\n1.  Format the names of your initial FASTQs to follow the default naming convention recognized by MetaLAFFA:\n\n    Forward-read FASTQs should be named `<sample>.R1.fastq.gz`\n\n    Reverse-read FASTQs should be named `<sample>.R2.fastq.gz`\n\n    Singleton/unpaired FASTQs should be named `<sample>.S.fastq.gz`\n\n    **Note** If you only have a single, unpaired read file (e.g. just forward reads), make sure that they are labeled as a singleton/unpaired FASTQ.\n\n2.  Start MetaLAFFA with one of the following commands from your example project directory:\n\n    1.  If you are running MetaLAFFA locally, use:\n\n            ./MetaLAFFA.py\n\n        If you are running MetaLAFFA on a cluster, use:\n\n            ./MetaLAFFA.py --use-cluster\n\n        This option will use the submission wrapper and jobscript specified in your project's `config/cluster.py` configuration submodule to submit jobs to your cluster system.\n\n    2.  Since Snakemake (and thus MetaLAFFA) needs to run for the entire annotation process, we recommend that you begin a [screen session](https://ss64.com/bash/screen.html) to start the pipeline and then detach the screen so you do not need to keep your terminal open.\n\n    3.  You can use the `-j <number_of_jobs>` (default is 50 for <number_of_jobs>) option to specify how many cores should be used locally/jobs should be in your cluster's queue at any one time. Regarding cluster usage, this limits the number of jobs that will be running at any one time but also avoids flooding the job queue with the potentially enormous number of jobs that may be generated. You should modify this setting according to your cluster resources and job queue etiquette.\n\n    4.  You can use the `-w <time_in_seconds>` (default is 60 for <time_in_seconds>) option to specify the time to wait after a job finishes running before checking for the existence of the expected output file. Snakemake does this to determine whether the job completed successfully, and if running on a cluster, there can often be some delay between jobs technically finishing and output files being detectable when shared filesystems are involved. When running on a cluster, you should modify this setting according to the expected latency for your cluster environment.\n\n    5.  When running on a cluster, MetaLAFFA, by default, requests 10G of RAM per job, along with some step-specific memory requests according to the needs of the various tools used in the pipeline. You can modify the default resource requests by editing `config/cluster.py`, and you can modify step-specific resource requests by editing the `cluster_params` Python dictionary of each step's configuration submodule in `config/steps/<name_of_pipeline_step>.py`.\n\n3.  Once MetaLAFFA has finished running, you should find the final output files in your project's `output/final` directory. You can see example final output files in the `example_output` folder of this repository.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1. Host read filtering",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "Full-length Tutorial",
          "MetaLAFFA step descriptions"
        ],
        "type": "Text_excerpt",
        "value": "The first step in MetaLAFFA is host read filtering. Host reads should be removed to ensure that later analyses are only considering the functional potential of the microbial community of interest. This is particularly important in cases where samples might consist of a majority of host reads, as in human fecal samples from hosts with certain gastrointestinal disorders that cause excessive shedding of epithelial cells (e.g. ulcerative colitis). Host read filtering is usually performed by aligning reads to one or more reference genomes for the host species and removing reads with match qualities above a certain threshold. MetaLAFFA defaults to using Bowtie 2 (Langmead and Salzberg 2012) for host read filtering. The default host database is the human reference with decoys from the 1000 Genomes Project, hs37d5 (1000 Genomes Project Consortium 2015).\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2. Duplicate read filtering",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "Full-length Tutorial",
          "MetaLAFFA step descriptions"
        ],
        "type": "Text_excerpt",
        "value": "The second step in MetaLAFFA is duplicate read filtering. Duplicate read filtering aims to remove reads that erroneously appear in a sample multiple times due to artifacts of sequencing (PCR duplicates or optical duplicates). An explanation of the cause for PCR duplicates can be found [**here**](http://www.cureffi.org/2012/12/11/how-pcr-duplicates-arise-in-next-generation-sequencing/). However, PCR duplicate filtering may not always be appropriate for metagenomic studies because the (correct and biologically meaningful) presence of highly similar/equivalent reads is possible in metagenomics, especially when a given species or strain is at high abundance (Nayfach and Pollard 2016). In these scenarios, there are in fact more copies of the same sequence present, and filtering out duplicate reads may dampen the signal of this higher copy number within the community. Optical duplicates instead arise when, after amplification on a flowcell, a large cluster of duplicated reads registers as two separate clusters, and these are safe to remove. The default duplicate filtering program is MarkDuplicates from the Picard set of bioinformatics tools (\u201cPicard,\u201d n.d.), and by default only optical duplicates are removed.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3. Quality trimming and filtering",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "Full-length Tutorial",
          "MetaLAFFA step descriptions"
        ],
        "type": "Text_excerpt",
        "value": "The final pre-processing step in MetaLAFFA is quality trimming and filtering. The aim of quality trimming and filtering is to reduce sequencing noise by trimming bases with quality below a certain threshold from one or both ends of a read, as well as removing any reads that fall below a specific length threshold. For this step, MetaLAFFA uses Trimmomatic (Bolger, Lohse, and Usadel 2014) by default, trimming reads based on Trimmomatic's maximum information criterion and filtering out trimmed reads shorter than 60bp.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "4. Mapping reads to gene IDs",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "Full-length Tutorial",
          "MetaLAFFA step descriptions"
        ],
        "type": "Text_excerpt",
        "value": "Given filtered and quality-controlled FASTQs, MetaLAFFA next maps these reads against a database of protein sequences corresponding to identified genes. Note that this (read-based annotation) method is one of two main annotation approaches, the other being assembly-based annotation, such as performed by MOCAT2 (Kultima et al. 2016). Read-based annotation works by assigning functional annotations to individual reads rather than by assembling contigs from reads, assigning functional annotations to ORFs identified in the contigs, and then mapping reads to the ORFs to get counts.\n\nRead annotations are most often performed by aligning reads to a database of gene sequences that have prior functional associations. These alignments are often performed as translated alignments, i.e. doing a 6-frame translation of a read's nucleotide sequence to possible amino acid sequences and then aligning those amino acid sequences to the protein sequences associated with genes. MetaLAFFA uses DIAMOND (Buchfink, Xie, and Huson 2015) as its default aligner due to its speed and built-in parallelization. By default, MetaLAFFA is configured to use the 2020 UniRef90 reference database of gene sequences (from UniProt (Consortium 2018)) when present, though other databases of annotated gene sequences could be used if available (e.g. KEGG).\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "5. Filtering read mapping hits",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "Full-length Tutorial",
          "MetaLAFFA step descriptions"
        ],
        "type": "Text_excerpt",
        "value": "After mapping reads to gene sequences, MetaLAFFA filters these hits to improve annotation quality. There are several ways to filter hits that depend on how many best hits are kept per read and whether hits to genes without functional annotations are kept. The differences in these methods are discussed in Carr et al. (Carr and Borenstein 2014), which analyzes the trade-offs in sensitivity and specificity that come from different choices in hit filtering. By default, MetaLAFFA uses a custom Python script to filter hits and uses the highest specificity hit filtering method (i.e. keeping hits that we are most confident in, but potentially missing some true hits due to lower confidence), keeping only hits with the best e-value for each read and allowing best hits to include genes without functional annotations.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "6. Gene counting",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "Full-length Tutorial",
          "MetaLAFFA step descriptions"
        ],
        "type": "Text_excerpt",
        "value": "Once the hits are filtered, MetaLAFFA counts gene abundances based on the number of reads that map to each gene in the sequence database. There are two important considerations when counting gene abundances based on mapped reads. The first is count normalization based on gene length, i.e. longer genes are more likely to be sequenced than shorter genes, and so a longer gene will be more likely to have more reads map to it than a shorter gene even though both genes might be at the same abundance and so the counts of reads mapping to a gene should be normalized by the length of the gene. The second consideration is how to count genes when a read maps to more than one gene. This can be done in one of two ways, either by giving a count of 1 to each gene a read maps to or by having each read contribute a count of 1 in total but dividing a read's count among the genes a read maps to. The former method can lead to double-counting issues and so MetaLAFFA uses a fractional gene counting method by default. Gene length normalization and fractional counting are performed by a custom Python script in default MetaLAFFA operation.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "7. Ortholog counting",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "Full-length Tutorial",
          "MetaLAFFA step descriptions"
        ],
        "type": "Text_excerpt",
        "value": "The next step after calculating gene abundances is to convert those gene abundances to abundances of annotated functions. Usually, these come in the form of functional orthology group abundances as defined by various functional annotation systems (e.g. KEGG (Kanehisa et al. 2018), MetaCyc (Caspi et al. 2007), etc.). These functional orthology groups usually correspond to the function a protein corresponding to a single gene may perform. Similar to the gene counting step, some genes may map to multiple orthology groups in a given system, and so each gene can either contribute its whole abundance to each associated orthology group or fractional contributions of its abundance to each associated orthology group. Again, due to double-counting issues, by default MetaLAFFA uses a fraction contribution method when counting ortholog abundances based on gene abundances. Also, MetaLAFFA calculates abundances of KEGG orthology groups (KOs) from UniProt gene functional annotations by default. By default, orthology group abundance calculations are performed using a custom Python script.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "8. Correcting orthology group abundances",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "Full-length Tutorial",
          "MetaLAFFA step descriptions"
        ],
        "type": "Text_excerpt",
        "value": "Once initial orthology group abundances have been calculated, it is usually necessary to correct them to allow for comparisons between samples. Specifically, orthology group abundances based on read counts from standard shotgun metagenomic sequencing are inherently compositional in nature (i.e. read count-based abundances reflect relative, rather than absolute, orthology group abundances). To account for this issue and convert orthology group abundances into a form that allows for valid standard statistical comparisons between samples, MetaLAFFA uses MUSiCC (Manor and Borenstein 2015) during default operation. MUSiCC uses genes identified as universally single-copy across bacterial genomes to transform read-based relative orthology group abundances into average orthology group copy number across genomes within a sample. By default, MetaLAFFA uses MUSiCC's inter-sample normalization with intra-sample correction using learned models to correct KO abundances using universal single-copy gene abundances.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "10. Summarizing results of steps in MetaLAFFA",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "Full-length Tutorial",
          "MetaLAFFA step descriptions"
        ],
        "type": "Text_excerpt",
        "value": "Another important component of MetaLAFFA is the automatic summary statistic generation that accompanies each step in the pipeline. Default summary statistics include number of reads, average read length, and average base quality for input FASTQs and the resulting FASTQs after each FASTQ filtering step, as well as number of hits, number of mapped reads, number of associated genes, and number of annotated orthology groups as determined after each step in the pipeline. These summary statistics are merged at the end into a single table summarizing the results of each step of the pipeline.\n\n### Installing MetaLAFFA\n\nMetaLAFFA is a Snakemake pipeline configured via Python scripts that manages the functional annotation of shotgun metagenomic data via various Python scripts and third-party tools.\n\nFirst, MetaLAFFA requires Conda (version 4.8 or greater). If you do not have Conda installed, look [**here**](https://docs.conda.io/projects/conda/en/latest/user-guide/install/index.html) for installation instructions.\n\nTo install MetaLAFFA via Conda, create a new environment using the following command:\n\n    # Create a new Conda environment for running MetaLAFFA.\n    conda create -n metalaffa metalaffa -c bioconda -c borenstein-lab\n\nAll MetaLAFFA software dependencies will be installed and available in the resulting environment. When operating MetaLAFFA, be sure to activate this environment:\n\n    # Activate the MetaLAFFA environment\n    conda activate metalaffa\n\n### Downloading and preparing reference databases for MetaLAFFA annotation\n\nDefault reference databases can be downloaded and prepared for MetaLAFFA using the `prepare_databases.py` script. These databases will be installed in the base directory for the `metalaffa` environment, which can be found at `$CONDA_PREFIX/MetaLAFFA`. Activate the `metalaffa` environment and then run:\n\n    # Download and prepare default reference databases\n    prepare_databases.py -hr -km -u\n\nwhere each option to the script specifies a different reference database:\n\n`-hr`: Download and prepare the database of human reference and decoy sequences (used in the 1000 genomes project) for host filtering.\n\n`-km`: Download KEGG ko-to-module and ko-to-pathway mappings.\n\n`-u`: Download and prepare the UniRef90 database for read mapping and functional annotation.\n\n`-c`: Optionally, the script can remove intermediate files after they are processed. This can save significant disk space, however if something interrupts the script, you may have to start the entire process from the beginning.\n\n**Note**: This process can be time and resource intensive, taking several hours, ~40GB of RAM, and ~300GB of free disk space if not cleaning up intermediate files, or ~150GB if cleaning up intermediate files. You may consider running the setup script in a [screen session](https://ss64.com/bash/screen.html), especially when downloading the UniRef90 database for read mapping.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Creating a MetaLAFFA project directory",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "Full-length Tutorial"
        ],
        "type": "Text_excerpt",
        "value": "MetaLAFFA is designed to be run within project-specific directories that contain their own project-specific configurations and maintain all project-related data generated by MetaLAFFA within the associated project directory. You can create a new MetaLAFFA project directory from within your MetaLAFFA Conda environment active using the associated script as follows:\n\n    create_new_MetaLAFFA_project.py <project_directory_name>\n\nMetaLAFFA project directories created in this way will contain all of the files necessary to run the pipeline, including a local copy of a configuration module that will allow you to both keep a record of how the pipeline was run for the associated project and have project-specific configurations in case you have multiple projects that require different pipeline configurations. When you run MetaLAFFA, you will run it from within the associated project directory (more details below on running MetaLAFFA).\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Configuring MetaLAFFA",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "Full-length Tutorial"
        ],
        "type": "Text_excerpt",
        "value": "MetaLAFFA is configured via a Python module partitioned into various submodules targeted at specific aspects of the pipeline and defined in a project's `config` directory:\n\n**Note**: Any configuration changes made in the configuration module located at `$CONDA_PREFIX/lib/python3.6/config` will be the default configurations for any newly created projects. Thus, if you have custom settings that you think should be preset in any new projects, you should make those changes to this base configuration module.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "config/file_organization.py",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "Full-length Tutorial",
          "Configuring MetaLAFFA"
        ],
        "type": "Text_excerpt",
        "value": "This submodule defines the file structure of MetaLAFFA. Some parameters that you may want to change include:\n\n`initial_data_directory`: Where to find the input metagenomic shotgun FASTQs to annotate.\n\n`output_directory`: Where to generate the output files for each step in the pipeline.\n\n`final_output_directory`: Where to write the final, desired output files once the pipeline is finished.\n\n`tmp_dir`: Where to write the intermediate files that are generated during some steps of the pipeline but are not kept after the step is done running. By default this is `/tmp/` (which, if running on a cluster, will use local storage because this will be faster for file reading and writing. However, these intermediate files can be very large and if you have limited local storage on individual cluster nodes, you may want to change this to process intermediate files in the MetaLAFFA directory by setting it to `./`).\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "config/operation.py",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "Full-length Tutorial",
          "Configuring MetaLAFFA"
        ],
        "type": "Text_excerpt",
        "value": "This submodule defines global settings that MetaLAFFA uses during pipeline operation. These include whether output files should be compressed, the naming convention for the different types of paired and unpaired FASTQ files, the host database to use for filtering, the target database to use for mapping reads to genes, the file to use for mapping genes to orthologs, the file to use for aggregating orthologs to higher-level functional groupings, and the locations of executables for programs that are used by multiple steps in the pipeline (i.e. Python and Java executables). Some parameters that you may want to change include:\n\n`sample_list`: The location of a list of sample IDs that tell MetaLAFFA which samples to annotate. By default, MetaLAFFA will annotate all samples it finds in the initial data directory whose file names match the expected pattern (e.g. <sample_id>.R1.fastq.gz for a forward read FASTQ). Providing a list of samples will limit MetaLAFFA to only annotate those samples. This may be useful if you want to prioritize the annotation of specific samples and annotate them first or just annotate samples in batches generally.\n\n`fastq_types`: The mapping between the types of FASTQs (i.e. forward paired-reads, reverse paired-reads, and singleton reads) and the expected file name pattern. MetaLAFFA will look for samples in the initial data directory that follow the pattern `<sample_id>.<type_id>.fastq.gz`, and you can use this configuration setting to alter the `type_id` that MetaLAFFA will accept.\n\n`host_database`: The name of the database to use for host filtering. By default, MetaLAFFA uses the hs37d5 human reference genome with decoy sequences from the 1000 genomes project (1000 Genomes Project Consortium 2015) for removing human reads from metagenomic samples, but you may want to use a different host reference for filtering depending on your project. This name should be the part that comes before the `.*.bt2` suffix for the Bowtie 2 index (i.e. one of the default host reference index files is `hs37d5.1.bt2`).\n\n`target_database`: The name of the database to use for mapping reads to genes with functional annotations. By default, MetaLAFFA is configured to use the 2020 UniRef90 database, but you may want to use a different target database. See below for detailed instructions on all steps required to configure MetaLAFFA to use a custom target database.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "config/cluster.py",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "Full-length Tutorial",
          "Configuring MetaLAFFA"
        ],
        "type": "Text_excerpt",
        "value": "This submodule defines the default resource requests and settings for cluster jobs when running MetaLAFFA on a cluster. These include memory, maximum running time, number of cores, and whether cluster resources should be reserved until a job is able to run. You can configure these settings to better fit your cluster by modifying the `default_cluster_params` dictionary.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "config/steps/*.py",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "Full-length Tutorial",
          "Configuring MetaLAFFA"
        ],
        "type": "Text_excerpt",
        "value": "Each step in the pipeline is configured by the submodule of the same name. These step-specific submodules define everything about a step in the pipeline, including expected naming patterns for input files, the output file naming patterns, custom cluster resource requests, the parameters for the program that runs during the step (e.g. method for filtering hits after mapping reads to genes or method for correcting ortholog abundances), and, most importantly, the actual operations to perform during the step.\n\nA step's operations are defined using a Python function, which takes as its arguments the input files to the step, the output files to generate, and any additional information as determined by Snakemake. The function then runs the command-line operations that make up the step via the `subprocess` Python module. These submodules have been written such that advanced users can implement their own functions to redefine pipeline steps and easily swap that function in to run instead of the default function.\n\nSome important default step-specific resource requests (when running on a cluster and set with 10's to 100's of millions of reads in each FASTQ in mind) include:\n\n`duplicate_filter`: 40G of RAM for MarkDuplicates\n\n`quality_filter`: 40G of RAM for Trimmomatic\n\n`map_reads_to_genes`: 220G of RAM and 22 cores for DIAMOND run with `--block_size 36` and `--index_chunks 1`. These settings should be adjusted for your specific computing environment. If you need to reduce the memory request for DIAMOND, you will also need to adjust the `block_size` and `index_chunks` settings in the read mapping configuration submodule as these control how much of the reference database DIAMOND loads into memory at a time. For more information on adjusting these DIAMOND parameters, see the DIAMOND manual [**here**](https://github.com/bbuchfink/diamond_docs).\n\n`hit_filter`: 200G of local disk space for creating a filtered version of DIAMOND output and then gzipping it.\n\n`hit_filter_combine`: 250G of local disk space for concatenating hit-filtered DIAMOND output from FASTQs belong to the same sample (i.e. concatenating the results from the forward paired-read, reverse paired-read, and singleton read FASTQs from the same sample) and then gzipping the output.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "config/library_functions.py",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "Full-length Tutorial",
          "Configuring MetaLAFFA"
        ],
        "type": "Text_excerpt",
        "value": "This configuration submodule contains functions used in multiple places elsewhere in MetaLAFFA to standardize their definitions.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Running MetaLAFFA",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "Full-length Tutorial"
        ],
        "type": "Text_excerpt",
        "value": "Here we provide a walkthrough for running MetaLAFFA on a metagenomic shotgun sequencing dataset starting from unfiltered FASTQs.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "MetaLAFFA script options",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "Full-length Tutorial",
          "Running MetaLAFFA"
        ],
        "type": "Text_excerpt",
        "value": "The `MetaLAFFA.py` script has various command-line options to modify how MetaLAFFA runs. For users that want to further configure how Snakemake runs, this script will also accept any other arguments and pass them directly to Snakemake:\n\n`--use-cluster`: MetaLAFFA should use the settings for submittinngn jobs to a cluster as defined in `config/cluster.py`.\n\n`--cluster SUBMISSION_WRAPPER, -c SUBMISSION_WRAPPER`: How to call the wrapper script to use to parse job settings, parse resource requests, and submit a job to the cluster (default: `src/sge_submission_wrapper.py`)\n\n`--jobscript JOBSCRIPT, --js JOBSCRIPT`: The jobscript to use when submitting an individual cluster job (default `src/configured_jobscript.sh`)\n\n`--cores NUMBER_OF_JOBS, --jobs NUMBER_OF_JOBS, -j NUMBER_OF_JOBS`: Number of jobs that should be active at a time (jobs in the queue when running on a cluster, number of cores to use in parallel when running locally) (default 50 jobs)\n\n`--latency-wait WAIT, --output-wait WAIT, -w WAIT`: Number of seconds to wait after a job finishes before checking that the output exists. This wait time can help avoid Snakemake incorrectly marking a step as failed if network latency delays a file becoming visible (default 60 seconds)\n\nSome notes on MetaLAFFA usage:\n\n1.  Since Snakemake (and thus MetaLAFFA) needs to run for the entire annotation process, we recommend that you begin a [screen session](https://ss64.com/bash/screen.html) to start the pipeline and then detach the screen so you do not need to keep your terminal open.\n\n2.  You can use the `-j <number_of_jobs>` (default is 50 for <number_of_jobs>) option to specify how many cores should be used locally/jobs should be in your cluster's queue at any one time. Regarding cluster usage, this limits the number of jobs that will be running at any one time but also avoids flooding the job queue with the potentially enormous number of jobs that may be generated. You should modify this setting according to your cluster resources and job queue etiquette.\n\n3.  You can use the `-w <time_in_seconds>` (default is 60 for <time_in_seconds>) option to specify the time to wait after a job finishes running before checking for the existence of the expected output file. Snakemake does this to determine whether the job completed successfully, and if running on a cluster, there can often be some delay between jobs technically finishing and output files being detectable when shared filesystems are involved. When running on a cluster, you should modify this setting according to the expected latency for your cluster environment.\n\n4.  When running on a cluster, MetaLAFFA, by default, requests 10G of RAM per job, along with some step-specific memory requests according to the needs of the various tools used in the pipeline. You can modify the default resource requests by editing `config/cluster.py`, and you can modify step-specific resource requests by editing the `cluster_params` Python dictionary of each step's configuration submodule in `config/steps/<name_of_pipeline_step>.py`.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Log files",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "Full-length Tutorial",
          "Running MetaLAFFA"
        ],
        "type": "Text_excerpt",
        "value": "When running MetaLAFFA, log files are generated in the `logging/` directory for each job run by the pipeline. You can refer to these files to look for the cause of any errors that may have occurred during operation.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Restarting MetaLAFFA",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "Full-length Tutorial",
          "Running MetaLAFFA"
        ],
        "type": "Text_excerpt",
        "value": "If MetaLAFFA encounters an error while processing your data, you can look at the output from Snakemake to identify which step failed, what error message was received, and fix any issues accordingly. Once that is complete, you can rerun MetaLAFFA and the pipeline will pick up where it left off.\n\nIf MetaLAFFA is interrupted at any point (including a manual interrupt, e.g. CTRL-C), you can also restart MetaLAFFA from where it left off after a couple of steps. First, if possible, you should make sure that any associated jobs have finished. For example, if MetaLAFFA was running a DIAMOND job mapping reads to genes, you should check that there are no DIAMOND jobs running. If they are still running, wait for them to finish. Next, you should run the following command:\n\n    ./MetaLAFFA.py --unlock\n\nAfter that has finished, you can then rerun MetaLAFFA and it will pick up at the point it was interrupted.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Why does MetaLAFFA default to using an older version of UniProt?",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "FAQ"
        ],
        "type": "Text_excerpt",
        "value": "In December 2020, UniProt encountered KEGG licensing issues, which resulted in the removal of KEGG Orthology mappings for UniProt genes. Since the default ortholog abundance correction and ortholog aggregation steps rely on KEGG Orthology data, MetaLAFFA now defaults to an older version of the UniProt database where KEGG Orthology mappings are still available.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "How do I fix the \"undefined symbol: omp_get_num_procs\" error when MetaLAFFA tries to run MUSiCC?",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "FAQ"
        ],
        "type": "Text_excerpt",
        "value": "This can be fixed by installing the llvm-openmp package in your MetaLAFFA conda environment as follows:\n\n    conda install llvm-openmp -c conda-forge\n\nThis error appears to be caused by issues with the libiomp5.so library that may arise during installation. However, llvm-openmp is not included as a standard dependency of MetaLAFFA because the addition of the conda-forge channel during initial environment creation can cause problems for conda's environment solver.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "contact",
    "contributors",
    "documentation",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 12:44:34",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 7
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Tutorial for running MetaLAFFA",
        "type": "Text_excerpt",
        "value": "-   [Software Requirements](#software-requirements)\n-   [Overview](#overview)\n-   [Quick Start Summary](#quick-start-summary)\n    -   [Installing MetaLAFFA](#installing-metalaffa)\n    -   [Downloading and preparing reference databases for MetaLAFFA annotation](#downloading-and-preparing-reference-databases-for-metalaffa-annotation)\n    -   [Configuring MetaLAFFA to submit jobs to a cluster](#configuring-metalaffa-to-submit-jobs-to-a-cluster)\n    -   [Trying out MetaLAFFA](#trying-out-metalaffa)\n-   [Full-length Tutorial](#full-length-tutorial)\n    -   [MetaLAFFA step descriptions](#metalaffa-step-descriptions)\n        -   [1. Host read filtering](#host-read-filtering)\n        -   [2. Duplicate read filtering](#duplicate-read-filtering)\n        -   [3. Quality trimming and filtering](#quality-trimming-and-filtering)\n        -   [4. Mapping reads to gene IDs](#mapping-reads-to-gene-ids)\n        -   [5. Filtering read mapping hits](#filtering-read-mapping-hits)\n        -   [6. Gene counting](#gene-counting)\n        -   [7. Ortholog counting](#ortholog-counting)\n        -   [8. Correcting orthology group abundances](#correcting-orthology-group-abundances)\n        -   [9. Aggregating orthology groups into higher-level functional descriptions](#aggregating-orthology-groups-into-higher-level-functional-descriptions)\n        -   [10. Summarizing results of steps in MetaLAFFA](#summarizing-results-of-steps-in-metalaffa)\n    -   [Installing MetaLAFFA](#installing-metalaffa-1)\n    -   [Downloading and preparing reference databases for MetaLAFFA annotation](#downloading-and-preparing-reference-databases-for-metalaffa-annotation-1)\n    -   [Creating a MetaLAFFA project directory](#creating-a-metalaffa-project-directory)\n    -   [Configuring MetaLAFFA](#configuring-metalaffa)\n        -   [config/file\\_organization.py](#configfile_organization.py)\n        -   [config/operation.py](#configoperation.py)\n        -   [config/cluster.py](#configcluster.py)\n        -   [config/steps/\\*.py](#configsteps.py)\n        -   [config/library\\_functions.py](#configlibrary_functions.py)\n        -   [Configuring MetaLAFFA to use a custom annotated gene database](#configuring-metalaffa-to-use-a-custom-annotated-gene-database)\n        -   [Configuring MetaLAFFA to submit jobs to a cluster](#configuring-metalaffa-to-submit-jobs-to-a-cluster-1)\n        -   [Using a different step in MetaLAFFA as a starting point](#using-a-different-step-in-metalaffa-as-a-starting-point)\n    -   [Running MetaLAFFA](#running-metalaffa)\n        -   [Prepare input data files](#prepare-input-data-files)\n        -   [Starting MetaLAFFA](#starting-metalaffa)\n        -   [MetaLAFFA script options](#metalaffa-script-options)\n        -   [Final outputs location and descriptions](#final-outputs-location-and-descriptions)\n        -   [Log files](#log-files)\n        -   [Restarting MetaLAFFA](#restarting-metalaffa)\n-   [FAQ](#faq)\n    -   [Why does MetaLAFFA default to using an older version of UniProt?](#why-does-metalaffa-default-to-using-an-older-version-of-uniprot)\n    -   [How do I fix the \"undefined symbol: omp\\_get\\_num\\_procs\" error when MetaLAFFA tries to run MUSiCC?](#how-do-i-fix-the-undefined-symbol-omp_get_num_procs-error-when-metalaffa-tries-to-run-musicc)\n-   [References](#references)\n\n**Repository:** <https://github.com/engal/MetaLAFFA>\n\n**Publication:** Eng, A., Verster, A. J., & Borenstein, E. (2020). MetaLAFFA: a flexible, end-to-end, distributed computing-compatible metagenomic functional annotation pipeline. *BMC bioinformatics*, 21(1), 1-9.\n\n**Note:** MetaLAFFA is supported on Mac and Linux, but not on Windows.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Overview",
        "parent_header": [
          "Tutorial for running MetaLAFFA"
        ],
        "type": "Text_excerpt",
        "value": "MetaLAFFA is a pipeline for annotating shotgun metagenomic data with abundances of functional orthology groups. This process consists of several steps to go from raw FASTQs (with sequencing adapters removed) to functional profiles:\n\n1.  Host read filtering (e.g. removing human DNA)\n2.  Duplicate read filtering\n3.  Quality trimming and filtering\n4.  Mapping reads to genes\n5.  Mapping genes to functional orthology groups (e.g. KOs)\n6.  Aggregating orthologs into higher-level groupings (e.g. pathways)\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick Start Summary",
        "parent_header": [
          "Tutorial for running MetaLAFFA"
        ],
        "type": "Text_excerpt",
        "value": "Follow these steps to annotate your first metagenomic shotgun sequencing dataset using MetaLAFFA.\n\n1.  Install MetaLAFFA via Conda\n\n2.  Download and prepare reference databases.\n\n3.  Try out MetaLAFFA with your own data or download some publicly available data to play with.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Trying out MetaLAFFA",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "Quick Start Summary"
        ],
        "type": "Text_excerpt",
        "value": "1.  After installation and database preparation, you can create a new MetaLAFFA project directory to try out MetaLAFFA. With your MetaLAFFA Conda environment active, you can create a new project directory using the associated script as follows:\n\n\n\n    create_new_MetaLAFFA_project.py metalaffa_example\n    cd metalaffa_example\n\nMetaLAFFA project directories created in this way will contain all of the files necessary to run the pipeline, including a local copy of a configuration module that will allow you to both keep a record of how the pipeline was run for the associated project and have project-specific configurations in case you have multiple projects that require different pipeline configurations.\n\n**Note**: Any configuration changes made in the configuration module located at `$CONDA_PREFIX/lib/python3.6/config` will be the default configurations for any newly created projects. Thus, if you have custom settings that you think should be preset in any new projects, you should make those changes to this base configuration module.\n\n1.  Obtain metagenomic shotgun sequencing data in FASTQ format to annotate. This can either be your own data, or you can download publicly available data to try annotating (e.g. from [the Human Microbiome Project](https://www.hmpdacc.org/hmp/HMASM/)). You can either download samples via the web interface or via the command line from your example project directory as follows:\n\n\n\n    wget http://downloads.hmpdacc.org/data/Illumina/stool/SRS017307.tar.bz2 -P data/\n\nIf you download data from HMP through either of these methods, you will receive a compressed directory that you will need to expand, i.e.:\n\n    tar -jxf data/SRS017307.tar.bz2 --one-top-level=data --strip-components=1\n\nwhich will extract he associated FASTQs to the `data/` directory. After extract, it is recommended you delete the original compressed directory to save disk space. These will consist of three files, a forward read FASTQ (ending in `1.fastq`), a reverse read FASTQ (ending in `2.fastq`), and a singleton FASTQ (ending in `singleton.fastq`). Default MetaLAFFA settings expect gzipped input FASTQs, so you will need to zip these FASTQs:\n\n    gzip data/*.fastq\n\nYou can change MetaLAFFA to use unzipped files in `config/operations.py` by changing the `zipped_files` variable to `False`, though this is not recommended due to shotgun metagenomic FASTQs usually being very large.\n\n1.  Format the names of your initial FASTQs to follow the default naming convention recognized by MetaLAFFA:\n\n    Forward-read FASTQs should be named `<sample>.R1.fastq.gz`\n\n    Reverse-read FASTQs should be named `<sample>.R2.fastq.gz`\n\n    Singleton/unpaired FASTQs should be named `<sample>.S.fastq.gz`\n\n    **Note** If you only have a single, unpaired read file (e.g. just forward reads), make sure that they are labeled as a singleton/unpaired FASTQ.\n\n2.  Start MetaLAFFA with one of the following commands from your example project directory:\n\n    1.  If you are running MetaLAFFA locally, use:\n\n            ./MetaLAFFA.py\n\n        If you are running MetaLAFFA on a cluster, use:\n\n            ./MetaLAFFA.py --use-cluster\n\n        This option will use the submission wrapper and jobscript specified in your project's `config/cluster.py` configuration submodule to submit jobs to your cluster system.\n\n    2.  Since Snakemake (and thus MetaLAFFA) needs to run for the entire annotation process, we recommend that you begin a [screen session](https://ss64.com/bash/screen.html) to start the pipeline and then detach the screen so you do not need to keep your terminal open.\n\n    3.  You can use the `-j <number_of_jobs>` (default is 50 for <number_of_jobs>) option to specify how many cores should be used locally/jobs should be in your cluster's queue at any one time. Regarding cluster usage, this limits the number of jobs that will be running at any one time but also avoids flooding the job queue with the potentially enormous number of jobs that may be generated. You should modify this setting according to your cluster resources and job queue etiquette.\n\n    4.  You can use the `-w <time_in_seconds>` (default is 60 for <time_in_seconds>) option to specify the time to wait after a job finishes running before checking for the existence of the expected output file. Snakemake does this to determine whether the job completed successfully, and if running on a cluster, there can often be some delay between jobs technically finishing and output files being detectable when shared filesystems are involved. When running on a cluster, you should modify this setting according to the expected latency for your cluster environment.\n\n    5.  When running on a cluster, MetaLAFFA, by default, requests 10G of RAM per job, along with some step-specific memory requests according to the needs of the various tools used in the pipeline. You can modify the default resource requests by editing `config/cluster.py`, and you can modify step-specific resource requests by editing the `cluster_params` Python dictionary of each step's configuration submodule in `config/steps/<name_of_pipeline_step>.py`.\n\n3.  Once MetaLAFFA has finished running, you should find the final output files in your project's `output/final` directory. You can see example final output files in the `example_output` folder of this repository.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Full-length Tutorial",
        "parent_header": [
          "Tutorial for running MetaLAFFA"
        ],
        "type": "Text_excerpt",
        "value": "This tutorial includes:\n\n-   A description of what occurs during each step of the MetaLAFFA pipeline\n-   Details on downloading MetaLAFFA\n-   Instructions for configuring MetaLAFFA to run on your cluster\n-   A walkthrough of how to annotate metagenomic shotgun samples (example data or your own) using MetaLAFFA\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1. Host read filtering",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "Full-length Tutorial",
          "MetaLAFFA step descriptions"
        ],
        "type": "Text_excerpt",
        "value": "The first step in MetaLAFFA is host read filtering. Host reads should be removed to ensure that later analyses are only considering the functional potential of the microbial community of interest. This is particularly important in cases where samples might consist of a majority of host reads, as in human fecal samples from hosts with certain gastrointestinal disorders that cause excessive shedding of epithelial cells (e.g. ulcerative colitis). Host read filtering is usually performed by aligning reads to one or more reference genomes for the host species and removing reads with match qualities above a certain threshold. MetaLAFFA defaults to using Bowtie 2 (Langmead and Salzberg 2012) for host read filtering. The default host database is the human reference with decoys from the 1000 Genomes Project, hs37d5 (1000 Genomes Project Consortium 2015).\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2. Duplicate read filtering",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "Full-length Tutorial",
          "MetaLAFFA step descriptions"
        ],
        "type": "Text_excerpt",
        "value": "The second step in MetaLAFFA is duplicate read filtering. Duplicate read filtering aims to remove reads that erroneously appear in a sample multiple times due to artifacts of sequencing (PCR duplicates or optical duplicates). An explanation of the cause for PCR duplicates can be found [**here**](http://www.cureffi.org/2012/12/11/how-pcr-duplicates-arise-in-next-generation-sequencing/). However, PCR duplicate filtering may not always be appropriate for metagenomic studies because the (correct and biologically meaningful) presence of highly similar/equivalent reads is possible in metagenomics, especially when a given species or strain is at high abundance (Nayfach and Pollard 2016). In these scenarios, there are in fact more copies of the same sequence present, and filtering out duplicate reads may dampen the signal of this higher copy number within the community. Optical duplicates instead arise when, after amplification on a flowcell, a large cluster of duplicated reads registers as two separate clusters, and these are safe to remove. The default duplicate filtering program is MarkDuplicates from the Picard set of bioinformatics tools (\u201cPicard,\u201d n.d.), and by default only optical duplicates are removed.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3. Quality trimming and filtering",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "Full-length Tutorial",
          "MetaLAFFA step descriptions"
        ],
        "type": "Text_excerpt",
        "value": "The final pre-processing step in MetaLAFFA is quality trimming and filtering. The aim of quality trimming and filtering is to reduce sequencing noise by trimming bases with quality below a certain threshold from one or both ends of a read, as well as removing any reads that fall below a specific length threshold. For this step, MetaLAFFA uses Trimmomatic (Bolger, Lohse, and Usadel 2014) by default, trimming reads based on Trimmomatic's maximum information criterion and filtering out trimmed reads shorter than 60bp.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "4. Mapping reads to gene IDs",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "Full-length Tutorial",
          "MetaLAFFA step descriptions"
        ],
        "type": "Text_excerpt",
        "value": "Given filtered and quality-controlled FASTQs, MetaLAFFA next maps these reads against a database of protein sequences corresponding to identified genes. Note that this (read-based annotation) method is one of two main annotation approaches, the other being assembly-based annotation, such as performed by MOCAT2 (Kultima et al. 2016). Read-based annotation works by assigning functional annotations to individual reads rather than by assembling contigs from reads, assigning functional annotations to ORFs identified in the contigs, and then mapping reads to the ORFs to get counts.\n\nRead annotations are most often performed by aligning reads to a database of gene sequences that have prior functional associations. These alignments are often performed as translated alignments, i.e. doing a 6-frame translation of a read's nucleotide sequence to possible amino acid sequences and then aligning those amino acid sequences to the protein sequences associated with genes. MetaLAFFA uses DIAMOND (Buchfink, Xie, and Huson 2015) as its default aligner due to its speed and built-in parallelization. By default, MetaLAFFA is configured to use the 2020 UniRef90 reference database of gene sequences (from UniProt (Consortium 2018)) when present, though other databases of annotated gene sequences could be used if available (e.g. KEGG).\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "5. Filtering read mapping hits",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "Full-length Tutorial",
          "MetaLAFFA step descriptions"
        ],
        "type": "Text_excerpt",
        "value": "After mapping reads to gene sequences, MetaLAFFA filters these hits to improve annotation quality. There are several ways to filter hits that depend on how many best hits are kept per read and whether hits to genes without functional annotations are kept. The differences in these methods are discussed in Carr et al. (Carr and Borenstein 2014), which analyzes the trade-offs in sensitivity and specificity that come from different choices in hit filtering. By default, MetaLAFFA uses a custom Python script to filter hits and uses the highest specificity hit filtering method (i.e. keeping hits that we are most confident in, but potentially missing some true hits due to lower confidence), keeping only hits with the best e-value for each read and allowing best hits to include genes without functional annotations.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "6. Gene counting",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "Full-length Tutorial",
          "MetaLAFFA step descriptions"
        ],
        "type": "Text_excerpt",
        "value": "Once the hits are filtered, MetaLAFFA counts gene abundances based on the number of reads that map to each gene in the sequence database. There are two important considerations when counting gene abundances based on mapped reads. The first is count normalization based on gene length, i.e. longer genes are more likely to be sequenced than shorter genes, and so a longer gene will be more likely to have more reads map to it than a shorter gene even though both genes might be at the same abundance and so the counts of reads mapping to a gene should be normalized by the length of the gene. The second consideration is how to count genes when a read maps to more than one gene. This can be done in one of two ways, either by giving a count of 1 to each gene a read maps to or by having each read contribute a count of 1 in total but dividing a read's count among the genes a read maps to. The former method can lead to double-counting issues and so MetaLAFFA uses a fractional gene counting method by default. Gene length normalization and fractional counting are performed by a custom Python script in default MetaLAFFA operation.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "7. Ortholog counting",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "Full-length Tutorial",
          "MetaLAFFA step descriptions"
        ],
        "type": "Text_excerpt",
        "value": "The next step after calculating gene abundances is to convert those gene abundances to abundances of annotated functions. Usually, these come in the form of functional orthology group abundances as defined by various functional annotation systems (e.g. KEGG (Kanehisa et al. 2018), MetaCyc (Caspi et al. 2007), etc.). These functional orthology groups usually correspond to the function a protein corresponding to a single gene may perform. Similar to the gene counting step, some genes may map to multiple orthology groups in a given system, and so each gene can either contribute its whole abundance to each associated orthology group or fractional contributions of its abundance to each associated orthology group. Again, due to double-counting issues, by default MetaLAFFA uses a fraction contribution method when counting ortholog abundances based on gene abundances. Also, MetaLAFFA calculates abundances of KEGG orthology groups (KOs) from UniProt gene functional annotations by default. By default, orthology group abundance calculations are performed using a custom Python script.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "8. Correcting orthology group abundances",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "Full-length Tutorial",
          "MetaLAFFA step descriptions"
        ],
        "type": "Text_excerpt",
        "value": "Once initial orthology group abundances have been calculated, it is usually necessary to correct them to allow for comparisons between samples. Specifically, orthology group abundances based on read counts from standard shotgun metagenomic sequencing are inherently compositional in nature (i.e. read count-based abundances reflect relative, rather than absolute, orthology group abundances). To account for this issue and convert orthology group abundances into a form that allows for valid standard statistical comparisons between samples, MetaLAFFA uses MUSiCC (Manor and Borenstein 2015) during default operation. MUSiCC uses genes identified as universally single-copy across bacterial genomes to transform read-based relative orthology group abundances into average orthology group copy number across genomes within a sample. By default, MetaLAFFA uses MUSiCC's inter-sample normalization with intra-sample correction using learned models to correct KO abundances using universal single-copy gene abundances.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "10. Summarizing results of steps in MetaLAFFA",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "Full-length Tutorial",
          "MetaLAFFA step descriptions"
        ],
        "type": "Text_excerpt",
        "value": "Another important component of MetaLAFFA is the automatic summary statistic generation that accompanies each step in the pipeline. Default summary statistics include number of reads, average read length, and average base quality for input FASTQs and the resulting FASTQs after each FASTQ filtering step, as well as number of hits, number of mapped reads, number of associated genes, and number of annotated orthology groups as determined after each step in the pipeline. These summary statistics are merged at the end into a single table summarizing the results of each step of the pipeline.\n\n### Installing MetaLAFFA\n\nMetaLAFFA is a Snakemake pipeline configured via Python scripts that manages the functional annotation of shotgun metagenomic data via various Python scripts and third-party tools.\n\nFirst, MetaLAFFA requires Conda (version 4.8 or greater). If you do not have Conda installed, look [**here**](https://docs.conda.io/projects/conda/en/latest/user-guide/install/index.html) for installation instructions.\n\nTo install MetaLAFFA via Conda, create a new environment using the following command:\n\n    # Create a new Conda environment for running MetaLAFFA.\n    conda create -n metalaffa metalaffa -c bioconda -c borenstein-lab\n\nAll MetaLAFFA software dependencies will be installed and available in the resulting environment. When operating MetaLAFFA, be sure to activate this environment:\n\n    # Activate the MetaLAFFA environment\n    conda activate metalaffa\n\n### Downloading and preparing reference databases for MetaLAFFA annotation\n\nDefault reference databases can be downloaded and prepared for MetaLAFFA using the `prepare_databases.py` script. These databases will be installed in the base directory for the `metalaffa` environment, which can be found at `$CONDA_PREFIX/MetaLAFFA`. Activate the `metalaffa` environment and then run:\n\n    # Download and prepare default reference databases\n    prepare_databases.py -hr -km -u\n\nwhere each option to the script specifies a different reference database:\n\n`-hr`: Download and prepare the database of human reference and decoy sequences (used in the 1000 genomes project) for host filtering.\n\n`-km`: Download KEGG ko-to-module and ko-to-pathway mappings.\n\n`-u`: Download and prepare the UniRef90 database for read mapping and functional annotation.\n\n`-c`: Optionally, the script can remove intermediate files after they are processed. This can save significant disk space, however if something interrupts the script, you may have to start the entire process from the beginning.\n\n**Note**: This process can be time and resource intensive, taking several hours, ~40GB of RAM, and ~300GB of free disk space if not cleaning up intermediate files, or ~150GB if cleaning up intermediate files. You may consider running the setup script in a [screen session](https://ss64.com/bash/screen.html), especially when downloading the UniRef90 database for read mapping.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Creating a MetaLAFFA project directory",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "Full-length Tutorial"
        ],
        "type": "Text_excerpt",
        "value": "MetaLAFFA is designed to be run within project-specific directories that contain their own project-specific configurations and maintain all project-related data generated by MetaLAFFA within the associated project directory. You can create a new MetaLAFFA project directory from within your MetaLAFFA Conda environment active using the associated script as follows:\n\n    create_new_MetaLAFFA_project.py <project_directory_name>\n\nMetaLAFFA project directories created in this way will contain all of the files necessary to run the pipeline, including a local copy of a configuration module that will allow you to both keep a record of how the pipeline was run for the associated project and have project-specific configurations in case you have multiple projects that require different pipeline configurations. When you run MetaLAFFA, you will run it from within the associated project directory (more details below on running MetaLAFFA).\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Configuring MetaLAFFA",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "Full-length Tutorial"
        ],
        "type": "Text_excerpt",
        "value": "MetaLAFFA is configured via a Python module partitioned into various submodules targeted at specific aspects of the pipeline and defined in a project's `config` directory:\n\n**Note**: Any configuration changes made in the configuration module located at `$CONDA_PREFIX/lib/python3.6/config` will be the default configurations for any newly created projects. Thus, if you have custom settings that you think should be preset in any new projects, you should make those changes to this base configuration module.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "config/file_organization.py",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "Full-length Tutorial",
          "Configuring MetaLAFFA"
        ],
        "type": "Text_excerpt",
        "value": "This submodule defines the file structure of MetaLAFFA. Some parameters that you may want to change include:\n\n`initial_data_directory`: Where to find the input metagenomic shotgun FASTQs to annotate.\n\n`output_directory`: Where to generate the output files for each step in the pipeline.\n\n`final_output_directory`: Where to write the final, desired output files once the pipeline is finished.\n\n`tmp_dir`: Where to write the intermediate files that are generated during some steps of the pipeline but are not kept after the step is done running. By default this is `/tmp/` (which, if running on a cluster, will use local storage because this will be faster for file reading and writing. However, these intermediate files can be very large and if you have limited local storage on individual cluster nodes, you may want to change this to process intermediate files in the MetaLAFFA directory by setting it to `./`).\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "config/operation.py",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "Full-length Tutorial",
          "Configuring MetaLAFFA"
        ],
        "type": "Text_excerpt",
        "value": "This submodule defines global settings that MetaLAFFA uses during pipeline operation. These include whether output files should be compressed, the naming convention for the different types of paired and unpaired FASTQ files, the host database to use for filtering, the target database to use for mapping reads to genes, the file to use for mapping genes to orthologs, the file to use for aggregating orthologs to higher-level functional groupings, and the locations of executables for programs that are used by multiple steps in the pipeline (i.e. Python and Java executables). Some parameters that you may want to change include:\n\n`sample_list`: The location of a list of sample IDs that tell MetaLAFFA which samples to annotate. By default, MetaLAFFA will annotate all samples it finds in the initial data directory whose file names match the expected pattern (e.g. <sample_id>.R1.fastq.gz for a forward read FASTQ). Providing a list of samples will limit MetaLAFFA to only annotate those samples. This may be useful if you want to prioritize the annotation of specific samples and annotate them first or just annotate samples in batches generally.\n\n`fastq_types`: The mapping between the types of FASTQs (i.e. forward paired-reads, reverse paired-reads, and singleton reads) and the expected file name pattern. MetaLAFFA will look for samples in the initial data directory that follow the pattern `<sample_id>.<type_id>.fastq.gz`, and you can use this configuration setting to alter the `type_id` that MetaLAFFA will accept.\n\n`host_database`: The name of the database to use for host filtering. By default, MetaLAFFA uses the hs37d5 human reference genome with decoy sequences from the 1000 genomes project (1000 Genomes Project Consortium 2015) for removing human reads from metagenomic samples, but you may want to use a different host reference for filtering depending on your project. This name should be the part that comes before the `.*.bt2` suffix for the Bowtie 2 index (i.e. one of the default host reference index files is `hs37d5.1.bt2`).\n\n`target_database`: The name of the database to use for mapping reads to genes with functional annotations. By default, MetaLAFFA is configured to use the 2020 UniRef90 database, but you may want to use a different target database. See below for detailed instructions on all steps required to configure MetaLAFFA to use a custom target database.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "config/cluster.py",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "Full-length Tutorial",
          "Configuring MetaLAFFA"
        ],
        "type": "Text_excerpt",
        "value": "This submodule defines the default resource requests and settings for cluster jobs when running MetaLAFFA on a cluster. These include memory, maximum running time, number of cores, and whether cluster resources should be reserved until a job is able to run. You can configure these settings to better fit your cluster by modifying the `default_cluster_params` dictionary.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "config/steps/*.py",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "Full-length Tutorial",
          "Configuring MetaLAFFA"
        ],
        "type": "Text_excerpt",
        "value": "Each step in the pipeline is configured by the submodule of the same name. These step-specific submodules define everything about a step in the pipeline, including expected naming patterns for input files, the output file naming patterns, custom cluster resource requests, the parameters for the program that runs during the step (e.g. method for filtering hits after mapping reads to genes or method for correcting ortholog abundances), and, most importantly, the actual operations to perform during the step.\n\nA step's operations are defined using a Python function, which takes as its arguments the input files to the step, the output files to generate, and any additional information as determined by Snakemake. The function then runs the command-line operations that make up the step via the `subprocess` Python module. These submodules have been written such that advanced users can implement their own functions to redefine pipeline steps and easily swap that function in to run instead of the default function.\n\nSome important default step-specific resource requests (when running on a cluster and set with 10's to 100's of millions of reads in each FASTQ in mind) include:\n\n`duplicate_filter`: 40G of RAM for MarkDuplicates\n\n`quality_filter`: 40G of RAM for Trimmomatic\n\n`map_reads_to_genes`: 220G of RAM and 22 cores for DIAMOND run with `--block_size 36` and `--index_chunks 1`. These settings should be adjusted for your specific computing environment. If you need to reduce the memory request for DIAMOND, you will also need to adjust the `block_size` and `index_chunks` settings in the read mapping configuration submodule as these control how much of the reference database DIAMOND loads into memory at a time. For more information on adjusting these DIAMOND parameters, see the DIAMOND manual [**here**](https://github.com/bbuchfink/diamond_docs).\n\n`hit_filter`: 200G of local disk space for creating a filtered version of DIAMOND output and then gzipping it.\n\n`hit_filter_combine`: 250G of local disk space for concatenating hit-filtered DIAMOND output from FASTQs belong to the same sample (i.e. concatenating the results from the forward paired-read, reverse paired-read, and singleton read FASTQs from the same sample) and then gzipping the output.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "config/library_functions.py",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "Full-length Tutorial",
          "Configuring MetaLAFFA"
        ],
        "type": "Text_excerpt",
        "value": "This configuration submodule contains functions used in multiple places elsewhere in MetaLAFFA to standardize their definitions.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Configuring MetaLAFFA to use a custom annotated gene database",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "Full-length Tutorial",
          "Configuring MetaLAFFA"
        ],
        "type": "Text_excerpt",
        "value": "By default, MetaLAFFA is designed to use the UniRef90 database, which can be downloaded and prepared using the included script as described above. However, you can use your own existing database by modifying the pipeline configuration module. Using your own database (starting from a FASTA file of gene sequences) with the default pipeline configuration will require the following steps:\n\n**Note**: The following steps assume you want to create your custom database-specific files in the default locations expected by MetaLAFFA. You can adjust the location of these files as appropriate to the organization of data on your system, but make sure to also update where MetaLAFFA looks for it in `config/file_organization.py`.\n\n1.  Change the configuration module to point to your database and use your ortholog nomenclature of choice by editing the `config/operation.py` submodule, making the following changes:\n\n        target_database = <name_of_your_database>\n\n    and:\n\n        target_ortholog = <name_of_your_ortholog>\n\n2.  Using DIAMOND, create a DIAMOND database from your database FASTA file:\n\n        # Create a DIAMOND database\n        diamond makedb --in <path_to_your_database_fasta> -d $CONDA_PREFIX/MetaLAFFA/databases/<name_of_your_database>\n\n    This will create a file called `<name_of_your_database>.dmnd` in the default MetaLAFFA database location that will then be used by DIAMOND to map reads to genes.\n\n3.  Create a gene length normalization table from your database FASTA file using the included `create_gene_length_table.py` script:\n\n        $CONDA_PREFIX/MetaLAFFA/src/create_gene_length_table.py <path_to_your_database_fasta> --output $CONDA_PREFIX/MetaLAFFA/gene_normalization_files/<name_of_your_database>.norm\n\n    This will create a file called `<name_of_your_database>.norm` in the default MetaLAFFA gene normalization file location that contains the average gene length in your database, the length of each gene in your database, and a normalization factor for each gene calculated as `(gene length/average gene length)`.\n\n4.  Create a mapping file linking genes to orthologs. Annotations for databases can be in many formats, which means we are unable to provide a general-use script for producing a gene-to-ortholog mapping table. Instead, you will need to create a tab-separated table in the following format:\n\n        ortholog_id1   gene_id1\n        ortholog_id2   gene_id2\n        ortholog_id1   gene_id3\n        ...            ...\n\n    where the first column consists of ortholog IDs and the second column consists of the IDs (same as in the FASTA) for genes associated with those orthologs. Note that this mapping can be many-to-many, with one ortholog being associated with multiple genes and one gene being associated with multiple orthologs. To work with default pipeline settings, place this gene-to-ortholog mapping table in `$CONDA_PREFIX/MetaLAFFA/gene_to_ortholog_maps/<name_of_your_database>_to_<name_of_your_ortholog>.map`.\n\n5.  If you are using KOs as your ortholog nomenclature, then you do not need to make any further changes for the pipeline to run and can ignore this step. However, if you are using a different functional annotation system, then you will need to make the following additional modifications.\n\n    1.  Change the configuration module to use relative abundance normalization for ortholog counts, rather than MUSiCC because MUSiCC only works with KO counts. You can do this by editing the `config/steps/ortholog_abundance_correction.py` submodule, changing line 50 to:\n\n                \"method\": \"relative\",\n\n    2.  Configure the pipeline to either skip aggregating orthologs to higher-level functional descriptions or provide your own ortholog-to-functional-grouping mapping files.\n        1.  To skip ortholog aggregation and just have the pipeline output corrected ortholog abundances as the final output, edit the `pipeline_steps.txt` file by first removing the `$` at the beginning of the line that contains `$ortholog_aggregation:ortholog_abundance_correction` and next removing the `*` at the beginning of the linne that contains `*ortholog_aggregation_summary_combine:ortholog_aggregation_summary`. These two changes will cause MetaLAFFA to skip the ortholog aggregation step because the output of the ortholog aggregation step will no longer be considered a required output (removing the `$`) and the combined summary of the ortholog aggregation step will no longer be considered a required input for generating the final pipeline run summary (removing the `*`).\n\n        2.  To provide your own mapping files, you must create tab-delimited tables in the form\n\n                <name_of_your_ortholog>    group_id1    group_id2    ...\n                ortholog_id1               1            0            ...\n                ortholog_id2               1            1            ...\n                ...                        ...          ...          ...\n\n            where the first column contains the IDs for each ortholog and the remaining columns are labeled by an ID for a higher-level functional grouping. Each cell at row i and column j indicates whether ortholog i is part of functional group j, with 1 indicating that the ortholog is in the group and 0 indicating it is not in the group (For a full-scale example, the pipeline setup script downloads files for mapping KOs to modules and pathways, which are located in `ortholog_to_grouping_maps/`).\n\n            1.  Write your mapping file to `ortholog_to_grouping_maps/<name_of_your_mapping>.map`.\n\n            2.  Modify the configuration module to find those mapping files by editing the `config/operation.py` submodule, changing line 92 to:\n\n                    ortholog_to_grouping_mappings = [<name_of_your_mapping>]\n\n                **Note** You can use any number of mapping files (e.g. if you want to map to multiple levels of higher level function description such as modules and pathways). Just add each mapping file to the `ortholog_to_grouping_maps/` directory and include the name of each mapping in the list of mappings at line 92 in the `config/operation.py` submodule.\n\n##### Configuring MetaLAFFA to submit jobs to a cluster\n\nThough MetaLAFFA can be run locally, running MetaLAFFA on a cluster will allow you to best utilize its ability to parallelize the annotation of many metagenomic shotgun sequencing samples. If you plan to run MetaLAFFA locally, you can skip the following section on configuring MetaLAFFA to run on a cluster. However, you should make sure to modify `$CONDA_PREFIX/MetaLAFFA/config/steps/map_reads_to_genes.py`, changing the number of cores defined in `cluster_params` to be the number of cores you want a single DIAMOND alignment process to use.\n\n**Note**: MetaLAFFA's default installation via Conda uses Snakemake version 3.13.3, but if you have access to Snakemake version 4.1 or greater, then you can make use of [**Snakemake profiles**](https://snakemake.readthedocs.io/en/v5.1.4/executable.html#profiles), a convenient option for configuring Snakemake pipelines for different computing ennvironments. This should replace the use of environment-specific jobscripts outlines below.\n\nBy default, MetaLAFFA is able to interface with Sun Grid Engine (SGE) and HTCondor clusters. This is achieved via the use of Python job submission wrapper scripts, included in the `$CONDA_PREFIX/MetaLAFFA/src/` directory (`$CONDA_PREFIX/MetaLAFFA/src/sge_submission_wrapper.py` and `$CONDA_PREFIX/src/condor_submission_wrapper.py` respectively). If your cluster uses a different cluster management system, then you will need to create your own job submission wrapper by following these steps:\n\n1.  Copy the appropriate example job submission wrapper script to serve as a template for your new wrapper.\n\n        cp $CONDA_PREFIX/MetaLAFFA/src/<sge|condor>_submission_wrapper.py $CONDA_PREFIX/MetaLAFFA/src/<name_of_your_cluster_system>_submission_wrapper.py\n\n    Which example script you should use as a template depends on how you parameterize jobs when submitting them to the cluster. If you request cluster resources (memory, cores, etc.) via command-line arguments and just provide the name of a shell script to run (i.e. SGE uses `qsub <name_of_shell_script>`), then you should use the SGE wrapper as a template. If you instead specify cluster resources and which script to run via a config file (i.e. HTCondor uses `condor_submit <name_of_config_file>`), then you should use the HTCondor wrapper as a template.\n\n2.  Edit the template script to submit a job on your cluster using appropriate resource requests and properly providing the script to run. The beginning of the template script covers necessary library imports and job parameter parsing. The second half of the template script handles cluster-specific processing and job submission. You should only need to edit the second half of the template script to let MetaLAFFA interface with your cluster. Here is a brief explanation of what the example scripts are doing, to help you understand what changes you may need to make to interface with your cluster:\n\n    1.  Starting from the cluster-specific section of the SGE template wrapper script:\n\n        1.  First, the script initializes the list of components that make up the command to submit the job to the cluster. On SGE, the basic submission command is `qsub`, but you'll want to change this to the correct submission command for your cluster.\n\n        2.  Next, there is some example processing for multi-core jobs. For the cluster where this was developed, multi-core jobs must request memory-per-core, rather than total memory for the job, so the script must calculate this. At the end of these calculations, the `qsub` command-line option for requesting multiple cores is added to the base submission command.\n\n        3.  Once multi-core specific processing has been handled, the script adds command-line options for requesting memory, running time, and which directory to run the script in.\n\n        4.  After the common resource requests and job settings have been added, the script next checks whether it should include a request for local disk space on a cluster node and whether it should request that resources be set aside until the job can run. The former is important if you have limited disk space on your shared file system and need to process intermediate files locally on cluster nodes during pipeline steps. The latter is useful for ensuring the jobs with large resource requests get to run.\n\n        5.  Next, the name of the script to run is added at the end of the command.\n\n        6.  Finally, the script runs the final submission command on the command-line.\n\n    2.  Starting from the cluster-specific section of the HTCondor wrapper script:\n\n        1.  First, the script defines a `node` variable that indicates which specific cluster node(s) MetaLAFFA should request to run jobs on. If this is set to `None`, then MetaLAFFA will not restrict which node(s) job submissions will be sent to. This may be important if MetaLAFFA (or the data you wish to annotate) will only be available on a subset of nodes (e.g. if only a subset of cluster nodes mount the drive where your data is stored or where MetaLAFFA is installed), in which case you would want MetaLAFFA to request that jobs run only on those specific nodes.\n\n        2.  Next, the script converts memory requests into the appropriate units for HTCondor memory requests.\n\n        3.  After determining job parameters, the script opens up a config file (in `submission_files/`) specific to the pipeline operation it is submitting to the cluster. To keep config files distinct between parallel jobs, the script names this config file based on the name of the pipeline step and the instance of the pipeline step it is running (i.e. which input file is being run through this pipeline step).\n\n        4.  The script then populates the config file with resource requests and settings. These include, in order of their addition in the script: the location of the script to run, the number of cores to request for the job, and the amount of memory to reserve for the job. The added `Queue` terminates the configuration file.\n\n        5.  Finally, the script runs `condor_submit` on the command-line, providing the path to the config file for this job.\n\n3.  Change the indicated submission wrapper in `CONDA_PREFIX/MetaLAFFA/config/cluster.py` to indicate your new submission wrapper (i.e. change `submissionn_wrapper = \"src/sge_submission_wrapper.py\"` to `submission_wrapper = \"src/<name_of_your_cluster_system>_submission_wrapper.py\"`). This will ensure that when you create new MetaLAFFA project directories (described next), both your custom submission wrapper and the configuration to use it will be included in the new project.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Using a different step in MetaLAFFA as a starting point",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "Full-length Tutorial",
          "Configuring MetaLAFFA"
        ],
        "type": "Text_excerpt",
        "value": "While MetaLAFFA defaults to taking in unfiltered FASTQs, it is also possible for MetaLAFFA to take input files appropriate for any step in the pipeline. For example, if you have already processed and filtered your FASTQ files, you can use those as input to the pipeline as long as they follow the correct naming scheme (e.g. `<sample_id>.<type_id>.fastq.gz` for FASTQs). To find the naming scheme for input files for different steps in the pipeline, you can look in the configuration submodule associated with the step and look at the `input` setting.\n\nYou must indicate which intermediate step you want MetaLAFFA to start from by appropriately modifying the `pipeline_steps.txt` file. This file tells the pipeline what the input to each step in the pipeline is (either initial input data or the output of previous steps). For example, by default the host filtering step takes in the initial input data as its input, and this is indicated by the line `host_filter:INPUT` (step name on the left, followed by a colon and then a comma-separated list of where the input to the step comes from). If you want to start from FASTQs that you have already filtered, you would make the following changes to `pipeline_steps.txt`:\n\n-   Change the read mapping step input to be the initial input data (i.e. changing `map_reads_to_genes:quality_filter` -&gt; `map_reads_to_genes:INPUT`).\n-   Remove the `*` from the summary steps associated with steps you don't want to run (i.e. remove the `*`'s from the front of the lines that contain `*host_filter_summary_combine:host_filter_summary`, `*duplicate_filter_summary_combine:duplicate_filter_summary`, `*quality_filter_summary_combine:quality_filter_summary`, and `*quality_filter_fastq_summary_combine:quality_filter_fastq_summary`).\n\nOnce you've made those changes, MetaLAFFA will start from the read mapping step and use files in the `data` directory as input. There are step markers that can be used to indicate certain features of each step, and these should be placed at the beginning of the line for the associated step in`pipeline_steps.txt`. These markers include:\n\n`$`: This step produces a final output file that should be copied to a location apart from the rest of the output files to make it easier to locate. Additionally, to avoid unnecessary work, Snakemake will not run any steps that are not required to generate any final output files.\n\n`*`: This step produces a summary table for one or more steps in the pipeline. At the end of the pipeline, the outputs of these steps are merged into a single master summary table as a final output.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Starting MetaLAFFA",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "Full-length Tutorial",
          "Running MetaLAFFA"
        ],
        "type": "Text_excerpt",
        "value": "Start MetaLAFFA with one of the following commands from your example project directory:\n\nIf you are running MetaLAFFA locally, use:\n\n    ./MetaLAFFA.py\n\nIf you are running MetaLAFFA on a cluster, use:\n\n    ./MetaLAFFA.py --use-cluster\n\nThis option will use the submission wrapper and jobscript specified in your project's `config/cluster.py` configuration submodule to submit jobs to your cluster system.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "MetaLAFFA script options",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "Full-length Tutorial",
          "Running MetaLAFFA"
        ],
        "type": "Text_excerpt",
        "value": "The `MetaLAFFA.py` script has various command-line options to modify how MetaLAFFA runs. For users that want to further configure how Snakemake runs, this script will also accept any other arguments and pass them directly to Snakemake:\n\n`--use-cluster`: MetaLAFFA should use the settings for submittinngn jobs to a cluster as defined in `config/cluster.py`.\n\n`--cluster SUBMISSION_WRAPPER, -c SUBMISSION_WRAPPER`: How to call the wrapper script to use to parse job settings, parse resource requests, and submit a job to the cluster (default: `src/sge_submission_wrapper.py`)\n\n`--jobscript JOBSCRIPT, --js JOBSCRIPT`: The jobscript to use when submitting an individual cluster job (default `src/configured_jobscript.sh`)\n\n`--cores NUMBER_OF_JOBS, --jobs NUMBER_OF_JOBS, -j NUMBER_OF_JOBS`: Number of jobs that should be active at a time (jobs in the queue when running on a cluster, number of cores to use in parallel when running locally) (default 50 jobs)\n\n`--latency-wait WAIT, --output-wait WAIT, -w WAIT`: Number of seconds to wait after a job finishes before checking that the output exists. This wait time can help avoid Snakemake incorrectly marking a step as failed if network latency delays a file becoming visible (default 60 seconds)\n\nSome notes on MetaLAFFA usage:\n\n1.  Since Snakemake (and thus MetaLAFFA) needs to run for the entire annotation process, we recommend that you begin a [screen session](https://ss64.com/bash/screen.html) to start the pipeline and then detach the screen so you do not need to keep your terminal open.\n\n2.  You can use the `-j <number_of_jobs>` (default is 50 for <number_of_jobs>) option to specify how many cores should be used locally/jobs should be in your cluster's queue at any one time. Regarding cluster usage, this limits the number of jobs that will be running at any one time but also avoids flooding the job queue with the potentially enormous number of jobs that may be generated. You should modify this setting according to your cluster resources and job queue etiquette.\n\n3.  You can use the `-w <time_in_seconds>` (default is 60 for <time_in_seconds>) option to specify the time to wait after a job finishes running before checking for the existence of the expected output file. Snakemake does this to determine whether the job completed successfully, and if running on a cluster, there can often be some delay between jobs technically finishing and output files being detectable when shared filesystems are involved. When running on a cluster, you should modify this setting according to the expected latency for your cluster environment.\n\n4.  When running on a cluster, MetaLAFFA, by default, requests 10G of RAM per job, along with some step-specific memory requests according to the needs of the various tools used in the pipeline. You can modify the default resource requests by editing `config/cluster.py`, and you can modify step-specific resource requests by editing the `cluster_params` Python dictionary of each step's configuration submodule in `config/steps/<name_of_pipeline_step>.py`.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Log files",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "Full-length Tutorial",
          "Running MetaLAFFA"
        ],
        "type": "Text_excerpt",
        "value": "When running MetaLAFFA, log files are generated in the `logging/` directory for each job run by the pipeline. You can refer to these files to look for the cause of any errors that may have occurred during operation.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Restarting MetaLAFFA",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "Full-length Tutorial",
          "Running MetaLAFFA"
        ],
        "type": "Text_excerpt",
        "value": "If MetaLAFFA encounters an error while processing your data, you can look at the output from Snakemake to identify which step failed, what error message was received, and fix any issues accordingly. Once that is complete, you can rerun MetaLAFFA and the pipeline will pick up where it left off.\n\nIf MetaLAFFA is interrupted at any point (including a manual interrupt, e.g. CTRL-C), you can also restart MetaLAFFA from where it left off after a couple of steps. First, if possible, you should make sure that any associated jobs have finished. For example, if MetaLAFFA was running a DIAMOND job mapping reads to genes, you should check that there are no DIAMOND jobs running. If they are still running, wait for them to finish. Next, you should run the following command:\n\n    ./MetaLAFFA.py --unlock\n\nAfter that has finished, you can then rerun MetaLAFFA and it will pick up at the point it was interrupted.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Why does MetaLAFFA default to using an older version of UniProt?",
        "parent_header": [
          "Tutorial for running MetaLAFFA",
          "FAQ"
        ],
        "type": "Text_excerpt",
        "value": "In December 2020, UniProt encountered KEGG licensing issues, which resulted in the removal of KEGG Orthology mappings for UniProt genes. Since the default ortholog abundance correction and ortholog aggregation steps rely on KEGG Orthology data, MetaLAFFA now defaults to an older version of the UniProt database where KEGG Orthology mappings are still available.\n"
      },
      "source": "https://raw.githubusercontent.com/borenstein-lab/MetaLAFFA/master/README.Rmd",
      "technique": "header_analysis"
    }
  ]
}