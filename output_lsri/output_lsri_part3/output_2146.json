{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/marbl/VALET"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2015-08-20T17:48:03Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-04-20T11:04:11Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A pipeline for detecting mis-assemblies in metagenomic assemblies."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.8947402063178631,
      "result": {
        "original_header": "VALET",
        "type": "Text_excerpt",
        "value": "Pipeline for evaulating metagenomic assemblies.\n \n"
      },
      "source": "https://raw.githubusercontent.com/marbl/VALET/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8619517024455338,
      "result": {
        "original_header": "Options",
        "type": "Text_excerpt",
        "value": "```\nUsage: valet.py [options]\n\nOptions:\n  -h, --help            show this help message and exit\n  -a FILE, --assembly-fasta=FILE\n                        Candidate assembly files\n  --assembly-names=ASSEMBLY_NAMES\n                        Names for the different assemblies.\n  -r FILE, --reads=FILE\n                        First Read File\n  -1 FIRST_MATES, --1=FIRST_MATES\n                        Fastq filenames separated by commas that contain the\n                        first mates.\n  -2 SECOND_MATES, --2=SECOND_MATES\n                        Fastq filenames separated by commas that contain the\n                        second mates.\n  -c COVERAGE_FILE, --coverage-file=COVERAGE_FILE\n                        Assembly created per-contig coverage file\n  -i CONFIG_FILE, --config-file=CONFIG_FILE\n                        Config file with preset parameters.\n  -o OUTPUT_DIR, --output-dir=OUTPUT_DIR\n                        Output directory\n  -w WINDOW_SIZE, --window-size=WINDOW_SIZE\n                        Sliding window size when determining misassemblies.\n  -q, --fastq           if set, input reads are fastq format (fasta by\n                        default).\n  -p THREADS, --threads=THREADS\n                        Number of threads\n  -I MIN_INSERT_SIZE, --minins=MIN_INSERT_SIZE\n                        Min insert sizes for mate pairs separated by commas.\n  -X MAX_INSERT_SIZE, --maxins=MAX_INSERT_SIZE\n                        Max insert sizes for mate pairs separated by commas.\n  -n ORIENTATION, --orientation=ORIENTATION\n                        Orientation of the mates.\n  -m MU, --mu=MU        average mate pair insert sizes.\n  -t SIGMA, --sigma=SIGMA\n                        standard deviation of mate pair insert sizes.\n  -x MAX_ALIGNMENTS, --max-alignments=MAX_ALIGNMENTS\n                        bowtie2 parameter to set the max number of alignments.\n  -e EMAIL, --email=EMAIL\n                        Email to notify when job completes\n  -g MIN_COVERAGE, --min-coverage=MIN_COVERAGE\n                        Minimum average coverage to run misassembly detection.\n  -l COVERAGE_MULTIPLIER, --coverage-multiplier=COVERAGE_MULTIPLIER\n                        When binning by coverage, the new high = high + high *\n                        multiplier\n  -s MIN_SUSPICIOUS_REGIONS, --min-suspicious=MIN_SUSPICIOUS_REGIONS\n                        Minimum number of overlapping flagged miassemblies to\n                        mark region as suspicious.\n  -d SUSPICIOUS_WINDOW_SIZE, --suspicious-window-size=SUSPICIOUS_WINDOW_SIZE\n                        Mark region as suspicious if multiple signatures occur\n                        within this window size.\n  -z MIN_CONTIG_LENGTH, --min-contig-length=MIN_CONTIG_LENGTH\n                        Ignore contigs smaller than this length.\n  -b IGNORE_END_DISTANCES, --ignore-ends=IGNORE_END_DISTANCES\n                        Ignore flagged regions within b bps from the ends of\n                        the contigs.\n  -k BREAKPOINTS_BIN, --breakpoint-bin=BREAKPOINTS_BIN\n                        Bin sized used to find breakpoints.\n  -f ORF_FILE, --orf-file=ORF_FILE\n                        gff formatted file containing orfs\n  --kmer=KMER_LENGTH    kmer length used for abundance estimation\n  --skip-reapr\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/marbl/VALET/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/marbl/VALET/wiki"
      },
      "source": "https://raw.githubusercontent.com/marbl/VALET/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Downloading HMP sample SRS014465",
        "parent_header": [
          "VALET",
          "Tutorial: Finding misassemblies in the Human Microbiome Project"
        ],
        "type": "Text_excerpt",
        "value": "```\nmkdir samples\ncd samples\n\n# Download reads\nwget ftp://public-ftp.hmpdacc.org/Illumina/vaginal_introitus/SRS014465.tar.bz2\ntar xvjf SRS014465.tar.bz2\ncd ..\n\n# Download assembly\nwget ftp://public-ftp.hmpdacc.org/HMASM/PGAs/vaginal_introitus/SRS014465.scaffolds.fa.bz2\ntar xvjf SRS014465.scaffolds.fa.bz2\n\n# Export sample directory to a path variable\nexport HMP_SAMPLE=`pwd`/SRS014465/\n\ncd ..\n```\n\n### Running VALET\n\n```\n$VALET/pipeline.py -a $HMP_SAMPLE/SRS014465.scaffolds.fa \\\n    -1 $HMP_SAMPLE/SRS014465.denovo_duplicates_marked.trimmed.1.fastq \\\n    -2 $HMP_SAMPLE/SRS014465.denovo_duplicates_marked.trimmed.2.fastq \\\n    -o SRS014465_valet --threads 32\n```\n\n```\nINFO:    Coverage file not provided, will create one.\n---------------------------------------------------------------------------\nSTEP:    FILTERING ASSEMBLY CONTIGS LESS THAN 1000 BPs\nRESULTS:         SRS014465_valet/filtered_assembly.fasta\n---------------------------------------------------------------------------\nSTEP:    ALIGNING READS\n...\n```\n\nNow you are free to explore the flagged regions!\n"
      },
      "source": "https://raw.githubusercontent.com/marbl/VALET/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/marbl/VALET/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/marbl/VALET/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "marbl/VALET"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "VALET"
      },
      "source": "https://raw.githubusercontent.com/marbl/VALET/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/marbl/VALET/master/quast_pipeline.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/marbl/VALET/master/run_mock_valet.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/marbl/VALET/master/run_mock.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/marbl/VALET/master/manuscript/scripts/mock/run_valet_mock.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/marbl/VALET/master/manuscript/scripts/mock/generate_mock_seqs.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/marbl/VALET/master/manuscript/scripts/mock/split_fasta.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/marbl/VALET/master/manuscript/scripts/mock/run_quast_w_reads_mock.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/marbl/VALET/master/manuscript/scripts/mock/compare_valet_quast_w_reads.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/marbl/VALET/master/manuscript/scripts/mock/assemble_mock.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/marbl/VALET/master/manuscript/scripts/synthetic/run_valet_synthetic.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/marbl/VALET/master/manuscript/scripts/synthetic/run_quast_w_reads_synthetic.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/marbl/VALET/master/manuscript/scripts/synthetic/compare_valet_quast_w_reads.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/marbl/VALET/master/manuscript/scripts/hmp/run_valet_hmp.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "http://cbcb.umd.edu/~cmhill/files/frc_plot.png"
      },
      "source": "https://raw.githubusercontent.com/marbl/VALET/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "http://cbcb.umd.edu/~cmhill/files/reloc_dup.png"
      },
      "source": "https://raw.githubusercontent.com/marbl/VALET/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installing VALET",
        "parent_header": [
          "VALET"
        ],
        "type": "Text_excerpt",
        "value": "Once the repository has been cloned, to install the required tools run the command:\n```\ngit clone https://github.com/marbl/VALET.git\ncd VALET/\n\n# Let your shell know where to find the VALET pipeline.\nexport VALET=`pwd`/src/py/\n```\n"
      },
      "source": "https://raw.githubusercontent.com/marbl/VALET/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9282540016050933,
      "result": {
        "original_header": "Investigating potential misassemblies using IGV",
        "type": "Text_excerpt",
        "value": "VALET produces batch scripts to visualize the assemblies and flagged regions in IGV. Simply run:\n```\n/path/to/igv/igv.sh -b output/reloc-dup/IGV.batch\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/marbl/VALET/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/marbl/VALET/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "The MIT License (MIT)\n\nCopyright (c) 2015 Christopher Hill\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
      },
      "source": "https://raw.githubusercontent.com/marbl/VALET/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "VALET"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "marbl"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "TeX",
        "size": 248045,
        "type": "Programming_language",
        "value": "TeX"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 220564,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 17702,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 8697,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 407,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/marbl/VALET/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "nate-d-olson",
          "type": "User"
        },
        "date_created": "2017-08-01T21:04:55Z",
        "date_published": "2017-11-03T13:44:14Z",
        "description": "VALET is still under development but v1.0 marks the initial stable versioned release.",
        "html_url": "https://github.com/marbl/VALET/releases/tag/v1.0",
        "name": "Initial VALET Release",
        "release_id": 8374600,
        "tag": "v1.0",
        "tarball_url": "https://api.github.com/repos/marbl/VALET/tarball/v1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/marbl/VALET/releases/8374600",
        "value": "https://api.github.com/repos/marbl/VALET/releases/8374600",
        "zipball_url": "https://api.github.com/repos/marbl/VALET/zipball/v1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Prerequisites",
        "parent_header": [
          "VALET"
        ],
        "type": "Text_excerpt",
        "value": "VALET requires the following tools to function correctly.\n* [bowtie2](http://bowtie-bio.sourceforge.net/bowtie2/index.shtml) (Tested with version 2.2.4)\n* [samtools](http://www.htslib.org) (Tested with version 1.2)\n* [bedtools](http://bedtools.readthedocs.org/en/latest/) (Tested with version 2.24.0)\n* Python2 (Tested with 2.7.9)\n* [numpy](http://www.numpy.org) (Tested with version 1.9.2)\n* [scipy](http://www.scipy.org/) (Tested with version ???)\n* [REAPR](https://www.sanger.ac.uk/resources/software/reapr/) (*OPTIONAL: REAPR usage can be disabled with --skip-reapr argument*)\n\nPlease note, if REAPR throws an error, then you need to install the following PERL libraries:\n* File::Basename\n* File::Copy\n* File::Spec\n* File::Spec::Link\n* Getopt::Long\n* List::Util\n"
      },
      "source": "https://raw.githubusercontent.com/marbl/VALET/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running VALET",
        "parent_header": [
          "VALET",
          "Tutorial: Finding misassemblies in the Human Microbiome Project"
        ],
        "type": "Text_excerpt",
        "value": "Included is a small set of test assemblies of *Candidatus Carsonella ruddii.* In addition to the reference genome, each assembly contains a mis-assembly: a duplication (test/c_rudii_dup.fna), a relocation (test/c_rudii_reloc.fna), and a duplication + relocation (test/c_rudii_reloc_dup.fna). Test the installation by running the following command:\n\n```\n$VALET/valet.py -a test/c_rudii_reference.fna,test/c_rudii_dup.fna,test/c_rudii_relocation.fna,test/c_rudii_reloc_dup.fna -1 test/lib1.1.fastq -2 test/lib1.2.fastq --assembly-names reference,duplication,relocation,reloc-dup\n```\n```\n###########################################################################\nPROCESSING ASSEMBLY: reference (test/c_rudii_reference.fna)\n###########################################################################\n---------------------------------------------------------------------------\nSTEP:\t FILTERING ASSEMBLY CONTIGS LESS THAN 1000 BPs\nRESULTS:\t output/reference/filtered_assembly.fasta\n---------------------------------------------------------------------------\nSTEP:\t ALIGNING READS\nCOMMAND:\t bowtie2-build /Users/cmhill/Work/VALET-repo/output/reference/filtered_assembly.fasta /Users/cmhill/Work/VALET-repo/output/reference/indexes/temp_JWCaAp\nCOMMAND:\t bowtie2 -a -x /Users/cmhill/Work/VALET-repo/output/reference/indexes/temp_JWCaAp -q -U test/lib1.1.fastq,test/lib1.2.fastq --very-sensitive -a --reorder -p 8 --un /Users/cmhill/Work/VALET-repo/output/reference/unaligned_reads/unaligned.reads -S output/reference/sam/library.sam\n---------------------------------------------------------------------------\nSTEP:\t RUNNING SAMTOOLS\nCOMMAND:\t samtools view -F 0x100 -bS output/reference/sam/library.sam\nCOMMAND:\t samtools sort output/reference/bam/library.bam output/reference/bam/sorted_library\nCOMMAND:\t samtools mpileup -C50 -A -f output/reference/filtered_assembly.fasta output/reference/bam/sorted_library.bam\nRESULTS:\t output/reference/coverage/mpileup_output.out\nCOMMAND:\t samtools index output/reference/bam/sorted_library.bam\n---------------------------------------------------------------------------\nSTEP:\t CALCULATING CONTIG COVERAGE\nRESULTS:\t output/reference/coverage/temp.cvg\n---------------------------------------------------------------------------\nSTEP:\t PARTITIONING COVERAGE FILE\nCOMMAND:\t ./src/py/split_pileup.py -p output/reference/coverage/mpileup_output.out -c 8\n---------------------------------------------------------------------------\nSTEP:\t DEPTH OF COVERAGE\nCOMMAND:\t ./src/py/depth_of_coverage.py -m output/reference/coverage/mpileup_output.out -w 351 -o output/reference/coverage/errors_cov.bed -g -e -c 8\nCOMMAND:\t bedtools sort -i output/reference/coverage/errors_cov.bed\nRESULTS:\t output/reference/coverage.bed\n---------------------------------------------------------------------------\nSTEP:\t BREAKPOINT\nCOMMAND:\t ./src/py/breakpoint_splitter.py -u /Users/cmhill/Work/VALET-repo/output/reference/unaligned_reads/ -o output/reference/breakpoint/split_reads/\nCOMMAND:\t ./src/py/breakpoint_finder.py -a output/reference/filtered_assembly.fasta -r output/reference/breakpoint/split_reads/ -b 50 -o output/reference/breakpoint/ -c output/reference/coverage/temp.cvg -p 8\nCOMMAND:\t bedtools sort -i output/reference/breakpoint/interesting_bins.bed\nRESULTS:\t output/reference/breakpoint/../breakpoints.bed\n---------------------------------------------------------------------------\nSTEP:\t SUMMARY\nRESULTS:\t output/reference/summary.bed\nRESULTS:\t output/reference/summary.tsv\n###########################################################################\nPROCESSING ASSEMBLY: duplicate (test/c_rudii_dup.fna)\n###########################################################################\n...\n###########################################################################\nGENERATING ASSEMBLY COMPARISON PLOTS\n###########################################################################\nCOMMAND:\t Rscript ./src/R/compare_assemblies.R output/reference/summary.tsv,output/duplicate/summary.tsv,output/relocation/summary.tsv,output/reloc-dup/summary.tsv reference,duplicate,relocation,reloc-dup output/comparison_plots\nRESULTS:\t output/comparison_plots.pdf\n\n```\n\nThe flagged regions (potential misassemblies) are stored in two files **[OUTPUT_DIR]/[ASSEMBLY_NAME]/summary.bed** and **[OUTPUT_DIR]/[ASSEMBLY_NAME]/suspicious.bed**.\nThe flagged regions are stored in [BED format](https://genome.ucsc.edu/FAQ/FAQformat.html#format1) [GFF format](http://www.sanger.ac.uk/resources/software/gff/spec.html).  If multiple misassembly signatures overlap, their intersection is written to **suspicious.gff**.\n\n```\nrelocref        69818   69868   Breakpoint_finder\nrelocref        97542   101062  Low_coverage    0       .       97543   101062  0,0,255\nrelocref        101082  112037  Low_coverage    0       .       101083  112037  0,0,255\nrelocref        112085  112756  Low_coverage    0       .       112086  112756  0,0,255\nrelocref        112898  117913  Low_coverage    0       .       112899  117913  0,0,255\nrelocref        118264  126647  Low_coverage    0       .       118265  126647  0,0,255\nrelocref        126737  129400  Low_coverage    0       .       126738  129400  0,0,255\nrelocref        129532  131981  Low_coverage    0       .       129533  131981  0,0,255\nrelocref        131732  131782  Breakpoint_finder\nrelocref        132049  139431  Low_coverage    0       .       132050  139431  0,0,255\nrelocref        139510  145882  Low_coverage    0       .       139511  145882  0,0,255\nrelocref        151010  151060  Breakpoint_finder\nrelocref        151061  151111  Breakpoint_finder\n```\n\nIn addition, a breakdown of each contig's number of misassemblies is available in the **[OUTPUT_DIR]/[ASSEMBLY_NAME]/summary.tsv** file:\n\n```\ncontig_name     contig_length   abundance       low_cov low_cov_bps     high_cov        high_cov_bps    reapr   reapr_bps       breakpoints     breakpoints_bps\nrelocref        196205  40      9       47419   0       0       0       0       4       204\n```\n\nLastly, VALET produces a plot comparing how the different assemblies incur the different types of errors as they accumulate contigs. Contigs are first sorted by their abundance * length and then processed in decreasing order. A straight vertical line at x=0 indicates an assembly with no flagged regions.\n\n![FRC plot](http://cbcb.umd.edu/~cmhill/files/frc_plot.png)\n\n"
      },
      "source": "https://raw.githubusercontent.com/marbl/VALET/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 07:51:35",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 14
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Example usages",
        "parent_header": [
          "VALET"
        ],
        "type": "Text_excerpt",
        "value": "TODO\n\n"
      },
      "source": "https://raw.githubusercontent.com/marbl/VALET/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Tutorial: Finding misassemblies in the Human Microbiome Project",
        "parent_header": [
          "VALET"
        ],
        "type": "Text_excerpt",
        "value": "Here we show how VALET can be used to find misassemblies in the Human Microbiome Project (http://www.hmpdacc.org/).\n\nBefore you continue, make sure the following tools are installed:\n* **VALET**\n* **git**\n* GNU tools:\n    * **wget** (can also use **curl**)\n    * **tar**\n* **Integrative Genomics View"
      },
      "source": "https://raw.githubusercontent.com/marbl/VALET/master/README.md",
      "technique": "header_analysis"
    }
  ]
}