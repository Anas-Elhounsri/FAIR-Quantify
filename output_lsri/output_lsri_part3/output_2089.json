{
  "application_domain": [
    {
      "confidence": 0.9574188089256251,
      "result": {
        "type": "String",
        "value": "Semantic web"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/jnalanko/bufboss"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-03-15T20:44:24Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-11-03T14:02:35Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9393978523964734,
      "result": {
        "original_header": "Limitations",
        "type": "Text_excerpt",
        "value": "Currently we support only k less or equal to 31. The input files must be in (multi)fasta format.\n \n"
      },
      "source": "https://raw.githubusercontent.com/jnalanko/bufboss/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/jnalanko/bufboss/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/jnalanko/bufboss/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "jnalanko/bufboss"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/jnalanko/bufboss/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1.0,
      "result": {
        "original_header": "Compiling",
        "type": "Text_excerpt",
        "value": "```\n# Download dependencies\ngit submodule init\ngit submodule update\n\n# Build KMC\ncd KMC\nmake\ncd ..\n\n# Build sdsl-lite\ncd sdsl-lite\nsh install.sh\ncd ..\n\n# Build stxxl\ncd stxxl\nmkdir build\ncd build\ncmake .. -DCMAKE_BUILD_TYPE=Release -DUSE_GNU_PARALLEL=ON -DCMAKE_INSTALL_PREFIX=./install\nmake\nmake install\ncd ../..\n\n# Build bufBOSS\nmake all\n\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/jnalanko/bufboss/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/jnalanko/bufboss/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bufboss"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "jnalanko"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 272955,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 1546,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jnalanko/bufboss/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependencies",
        "type": "Text_excerpt",
        "value": "KMC3, stxxl, sdsl-lite.\n"
      },
      "source": "https://raw.githubusercontent.com/jnalanko/bufboss/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 07:39:19",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "type": "Text_excerpt",
        "value": "There are three programs: `bufboss_build`, `bufboss_update` and `bufboss_query`. They will be compiled to the directory `./bin`. \n"
      },
      "source": "https://raw.githubusercontent.com/jnalanko/bufboss/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "We recommend building the index out of a KMC database. For example:\n\n```\nMY_INPUT=data/reads.fna\nK=31\n./KMC/bin/kmc -v -k$K -m1 -ci1 -cs1 -fm $MY_INPUT temp/kmc_db temp\n./bin/bufboss_build -o my_index -t temp --KMC temp/kmc_db\n```\n\nTo update the index by adding the k-mers in a file and deleting the k-mers in another file, run the following:\n\n```\nMY_ADDITIONS=data/additions.fna \nMY_DELETIONS=data/deletions.fna \n./bin/bufboss_update -i my_index/ -o my_index --add $MY_ADDITIONS --del $MY_DELETIONS --buffer-fraction 0.1\n```\n\nThis overwrites the previous index. The value of --buffer-fraction determines how often the buffer is flushed. If the buffer fraction is t, then the buffer is flushed when it has 10% of the edges compared to the static part of the data structure. To query sequences agaisnt the index, run the following:\n\n```\nMY_QUERIES=data/queries.fna\n./bin/bufboss_query -i my_index -q $MY_QUERIES\n```\n\nThis prints bits 1 and 0 in ASCII such that for every input sequence R, we print one line L consisting of characters '0' and '1' such L[i] == '1' iff (k+1)-mer R[i..i+k] is found in the index.\n"
      },
      "source": "https://raw.githubusercontent.com/jnalanko/bufboss/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Construction",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "```\nUsage:\n  bufboss_build [OPTION...]\n\n  -k arg               Order of the de Bruijn graph. Node are k-mers, edges\n                       (k+1)-mers. If building from KMC, don't give this.\n                       (default: 0)\n  -o, --out arg        Output directory. (default: \"\")\n  -a, --add arg        Path to a fasta-file. Adds all (k+1)-mers of the\n                       fasta-file to the index. If building from KMC, don't give\n                       this. (default: \"\")\n      --add-files arg  Path to a list of fasta-files, one per line. Adds all\n                       (k+1)-mers in all the files to the index. If building\n                       from KMC, don't give this. (default: \"\")\n  -d, --KMC arg        Build from KMC database (path to a KMC database). The\n                       KMC database consists of two files: xxx.kmc_pre and\n                       xxx.kmc_suf. You should give only the xxx part here. The\n                       database should be built from canonical k-mers (the\n                       default behaviour of KMC) (default: \"\")\n  -r, --revcomp        Include reverse complemented k-mers. If building from\n                       KMC, don't give this.\n  -c, --rrr            Use rrr compression on bit vectors.\n  -h, --help           Print instructions.\n  -t, --tempdir arg    Directory for temporary working space. (default: \"\")\n```\n"
      },
      "source": "https://raw.githubusercontent.com/jnalanko/bufboss/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Updating",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "```\nUsage:\n  bufboss_update [OPTION...]\n\n  -i, --index arg            The directory of the BOSS index. If not given, a\n                             new BOSS is built. (default: \"\")\n  -k arg                     If an input index is not given, a new BOSS is\n                             built with this k. Otherwise, this k is ignored.\n                             (default: 0)\n  -o, --out arg              Output directory. (default: \"\")\n  -a, --add arg              Path to a fasta-file. Adds all (k+1)-mers of the\n                             fasta-file to the index. (default: \"\")\n      --add-files arg        Path to a list of fasta-files, one per line.\n                             Adds all (k+1)-mers in all the files to the index\n                             (default: \"\")\n      --add-before-del       If both additions and deletions are given, the\n                             deletions are executed first by default. If you\n                             want to execute additions first, give this flag.\n  -d, --del arg              Path to a fasta-file. Deletes all (k+1)-mers of\n                             the fasta-file from the index. (default: \"\")\n      --del-files arg        Path to a list of fasta-files, one per line.\n                             Deletes all (k+1)-mers in all the files from the\n                             index (default: \"\")\n  -r, --revcomp              Include reverse complemented k-mers.\n  -c, --rrr                  Use rrr compression on bit vectors.\n      --end-flush            Flush the buffer at the end before writing to\n                             disk.\n      --count-dummies        Count the number of dummy nodes after the update\n  -b, --buffer-fraction arg  If this fraction is x and boss has n nodes, then\n                             the buffer is flushed when it has max(n*x,10000)\n                             k-mers. (default: 0.01)\n  -h, --help                 Print instructions.\n\n```\n"
      },
      "source": "https://raw.githubusercontent.com/jnalanko/bufboss/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Edge existence queries",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "```\nFor every input read R, prints to stdout one line L consisting of characters '0' and '1' such L[i] == '1' iff (k+1)-mer R[i..i+k] is found in the index.\nUsage:\n  bufboss_query [OPTION...]\n\n  -i, --index arg  Path to the directory of the index. (default: \"\")\n  -o, --out arg    Output file. If not given, prints to stdout. (default: \"\")\n  -r, --revcomp    Search reverse-complemented k-mers also.\n  -c, --rrr        This option *must* be given if the index was built with\n                   rrr compression.\n  -h, --help       Print instructions.\n  -q, --query arg  Query FASTA-file (default: \"\")\n```\n"
      },
      "source": "https://raw.githubusercontent.com/jnalanko/bufboss/master/README.md",
      "technique": "header_analysis"
    }
  ]
}