{
  "application_domain": [
    {
      "confidence": 20.09,
      "result": {
        "type": "String",
        "value": "Natural Language Processing"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/mjflab/chinn"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-07-27T04:51:13Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-09-27T15:53:08Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "The ChINN repository"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.8487958686566124,
      "result": {
        "original_header": "Dataset:",
        "type": "Text_excerpt",
        "value": "The models were trained on GM12878 CTCF, GM12878 RNA Pol II, HelaS3 CTCF, K562 RNA Pol II, \nand MCF-7 RNA Pol II datasets separately. The data used to generate the datasets and\nbuild the modles are placed in the `data/` folder. The `data/` folder has the following structure.\n```text\ndata\n\u251c\u2500\u2500 consensusBlacklist.bed # consensus blacklist regions from ENCODE\n\u251c\u2500\u2500 gm12878_ctcf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 TangZ_etal.Cell2015.ChIA-PET_GM12878_CTCF.published_PET_clusters.no_black.txt\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 wgEncodeAwgDnaseUwdukeGm12878UniPk.narrowPeak\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 wgEncodeAwgTfbsBroadGm12878CtcfUniPk.narrowPeak\n\u251c\u2500\u2500 gm12878_polr2a\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 TangZ_etal.Cell2015.ChIA-PET_GM12878_POLR2A.published_PET_clusters.no_black.txt\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 wgEncodeAwgDnaseUwdukeGm12878UniPk.narrowPeak\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 wgEncodeAwgTfbsHaibGm12878Pol2Pcr2xUniPk.narrowPeak\n\u251c\u2500\u2500 helas3_ctcf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 TangZ_etal.Cell2015.ChIA-PET_HelaS3_CTCF.published_PET_clusters.no_black.txt\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 wgEncodeAwgDnaseUwdukeHelas3UniPk.narrowPeak\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 wgEncodeAwgTfbsBroadHelas3CtcfUniPk.narrowPeak\n\u251c\u2500\u2500 hg19.len # chromosome lengths\n\u251c\u2500\u2500 k562_polr2a\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 k562_polr2a.interactions.all.non_black.bedpe\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 wgEncodeAwgDnaseUwdukeK562UniPk.narrowPeak\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 wgEncodeAwgTfbsSydhK562Pol2UniPk.narrowPeak\n\u2514\u2500\u2500 mcf7_polr2a\n    \u251c\u2500\u2500 mcf7_polr2a.interactions.all.non_black.bedpe\n    \u251c\u2500\u2500 wgEncodeAwgDnaseUwdukeMcf7UniPk.narrowPeak\n    \u2514\u2500\u2500 wgEncodeAwgTfbsUtaMcf7Pol2UniPk.narrowPeak\n```\n \n__Note__: to run the scripts, use the root directory of this repository as the working directory.\n \n"
      },
      "source": "https://raw.githubusercontent.com/mjflab/chinn/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.909294118843305,
      "result": {
        "original_header": "Data generation and preprocessing",
        "type": "Text_excerpt",
        "value": "The data generation and preprocessing scripts are placed under the `preprocess` directory.\nThe main entry script is `pipe.sh`. This script will process the interactions, cluster the interactions,\ngenerate negative samples, generate distance-matched negative dataset, and the extended\nnegative datasets. The details of the inputs to the script is shown below:\n```\npipe.sh [-h] INTERS DNASE TFPEAKS NAME DATADIR\n-- Progam to preprocess the interactions and generate negative samples.\nwhere:\n-h           show this help text\nINTERS       Interaction file in BEDPE format\nDNASE        Dnase/open chromatin regions in BED format\nTFPEAKS      The transcription factor peaks for the ChIA-PET protein in BED format\nNAME         The prefix/name for the sample/experiment\nDATADIR      Location of the output directory\n``` \nRunning the above commands will generate the following files in the `out_dir`:\n```shell\ngm12878_ctcf.std.bedpe # After removing chromatin interactions whose anchors are overlapping.\ngm12878_ctcf_merged_anchors.bed # Merged anchors of the chromatin interactions.\ngm12878_ctcf.clustered_interactions.bedpe # Clustered interactions based on merged anchors.\ngm12878_ctcf.clustered_interactions.both_dnase.bedpe # Clustered interactions whose both anchors overlap with DNase peaks.\ngm12878_ctcf_merged_anchors.both_dnase.bed # The resulting anchors of the chromatin interactions in the above step.\ngm12878_ctcf.no_intra_all.negative_pairs.bedpe # Putative negative anchor pairs that are not indirectly connected.\ngm12878_ctcf.only_intra_all.negative_pairs.bedpe # Putative negative anchor pairs that are indirectly connected.\ngm12878_ctcf.random_tf_peak_pairs.bedpe # Random pairs of TF peaks.\ngm12878_ctcf.random_tf_peak_pairs.filtered.bedpe # Random pairs of TF peaks that are not in anchor pairs.\ngm12878_ctcf.shuffled_neg_anchor.neg_pairs.bedpe # Random pairs of DNase regions.\ngm12878_ctcf.shuffled_neg_anchor.neg_pairs.filtered.tf_filtered.bedpe # Random pairs of DNase regions that are not in anchor pairs or TF peak pairs.\ngm12878_ctcf.neg_pairs_5x.from_singleton_inter_tf_random.bedpe # Final sampled 5x negative samples.\ngm12878_ctcf.extended_negs_with_intra.bedpe # The additional negative samples for extended dataset.\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/mjflab/chinn/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8337786834229353,
      "result": {
        "original_header": "Train the distance-matched models",
        "type": "Text_excerpt",
        "value": "The scripts used to train the distance-mached models are placed in\n`train_distance_matched`. The training script `train_distance_matched.py`\nhas the following arguments.\n```shell\nusage: train_distance_matched.py [-h] [-e EPOCHS] [-s] [-d]\n                                 data_name model_name model_dir\n\nTrain distance matched models\n\npositional arguments:\n  data_name             The name of the data\n  model_name            The prefix of the output model.\n  model_dir             Directory for storing the models.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -e EPOCHS, --epochs EPOCHS\n                        Number of epochs for training. Default: 40\n  -s, --sigmoid         Use Sigmoid at end of feature extraction. Tanh will be\n                        used by default. Default: False.\n  -d, --distance        Include distance as a feature for classifier. Default:\n                        False.\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/mjflab/chinn/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8693207178706605,
      "result": {
        "original_header": "Training",
        "type": "Text_excerpt",
        "value": "Training the from-dnase model is similar to training model on extended datasets.\n \n"
      },
      "source": "https://raw.githubusercontent.com/mjflab/chinn/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8203716843031311,
      "result": {
        "original_header": "For prediction",
        "type": "Text_excerpt",
        "value": "Given a BED file containing peaks of open chromatin regions, all possible pairs \non the same chromosome can be generated following the 'Data preparation' step in the 'From DNase model'\nsection. \n"
      },
      "source": "https://raw.githubusercontent.com/mjflab/chinn/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "This document provides a brief intro of running models in ChINN for training and testing. Before launching any job, make sure you have properly downloaded the ChINN code and you have prepared the dataset following DATASET.md with the correct format.",
        "parent_header": [
          "Chromatin Interaction Neural Network (ChINN):",
          "A machine learning-based method for predicting chromatin interactions from DNA sequences"
        ],
        "type": "Text_excerpt",
        "value": "Chromatin Interaction Neural Network (ChINN) only uses DNA sequences of the interacting open chromatin regions. ChINN is able to predict CTCF-, RNA polymerase II- and HiC- associated chromatin interactions between open chromatin regions. \n\nChINN was able to identify convergent CTCF motifs, AP-1 transcription family member motifs such as FOS, and other transcription factors such as MYC as being important in predicting chromatin interactions.\n\nChINN also shows good across-sample performances and captures various sequence features that are predictive of chromatin interactions. \n"
      },
      "source": "https://raw.githubusercontent.com/mjflab/chinn/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/mjflab/chinn/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "faq": [
    {
      "confidence": 1,
      "result": {
        "original_header": "This document provides a brief intro of running models in ChINN for training and testing. Before launching any job, make sure you have properly downloaded the ChINN code and you have prepared the dataset following DATASET.md with the correct format.",
        "parent_header": [
          "Chromatin Interaction Neural Network (ChINN):",
          "A machine learning-based method for predicting chromatin interactions from DNA sequences"
        ],
        "type": "Text_excerpt",
        "value": "Chromatin Interaction Neural Network (ChINN) only uses DNA sequences of the interacting open chromatin regions. ChINN is able to predict CTCF-, RNA polymerase II- and HiC- associated chromatin interactions between open chromatin regions. \n\nChINN was able to identify convergent CTCF motifs, AP-1 transcription family member motifs such as FOS, and other transcription factors such as MYC as being important in predicting chromatin interactions.\n\nChINN also shows good across-sample performances and captures various sequence features that are predictive of chromatin interactions. \n"
      },
      "source": "https://raw.githubusercontent.com/mjflab/chinn/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/mjflab/chinn/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "mjflab/chinn"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Chromatin Interaction Neural Network (ChINN):"
      },
      "source": "https://raw.githubusercontent.com/mjflab/chinn/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/mjflab/chinn/master/from_dnase/from_dnase_preprocess.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/mjflab/chinn/master/preprocess/pipe.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/mjflab/chinn/master/preprocess/process_pos.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "This document provides a brief intro of running models in ChINN for training and testing. Before launching any job, make sure you have properly downloaded the ChINN code and you have prepared the dataset following DATASET.md with the correct format.",
        "parent_header": [
          "Chromatin Interaction Neural Network (ChINN):",
          "A machine learning-based method for predicting chromatin interactions from DNA sequences"
        ],
        "type": "Text_excerpt",
        "value": "Chromatin Interaction Neural Network (ChINN) only uses DNA sequences of the interacting open chromatin regions. ChINN is able to predict CTCF-, RNA polymerase II- and HiC- associated chromatin interactions between open chromatin regions. \n\nChINN was able to identify convergent CTCF motifs, AP-1 transcription family member motifs such as FOS, and other transcription factors such as MYC as being important in predicting chromatin interactions.\n\nChINN also shows good across-sample performances and captures various sequence features that are predictive of chromatin interactions. \n"
      },
      "source": "https://raw.githubusercontent.com/mjflab/chinn/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Prepare data",
        "parent_header": [
          "Chromatin Interaction Neural Network (ChINN):",
          "A machine learning-based method for predicting chromatin interactions from DNA sequences",
          "Distance-matched models"
        ],
        "type": "Text_excerpt",
        "value": "To prepare data for training the distance-mached models, first need to prepare the "
      },
      "source": "https://raw.githubusercontent.com/mjflab/chinn/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Prepare data for training classifiers using extended datasets.",
        "parent_header": [
          "Chromatin Interaction Neural Network (ChINN):",
          "A machine learning-based method for predicting chromatin interactions from DNA sequences",
          "Extended models"
        ],
        "type": "Text_excerpt",
        "value": "First generate one-hot encoded data.\n```shell\nPYTHONPATH=. python data_preparation.py -m 1000 -e 500 \\\n                --pos_files out_dir/gm12878_ctcf.clustered_interactions.both_dnase.bedpe \\\n                --neg_files out_dir/gm12878_ctcf.neg_pairs_5x.from_singleton_inter_tf_random.bedpe \\\n                            out_dir/gm12878_ctcf.extended_negs_with_intra.bedpe \\\n                -g path/to/hg19.fa \\\n                -n gm12878_ctcf_extended -o out_dir\n```\nThis will produce these files for train, validation, and testing in the output directory:\n```shell\ngm12878_ctcf_extended_singleton_tf_with_random_neg_seq_data_length_filtered_train.hdf5\ngm12878_ctcf_extended_singleton_tf_with_random_neg_seq_data_length_filtered_valid.hdf5\ngm12878_ctcf_extended_singleton_tf_with_random_neg_seq_data_length_filtered_test.hdf5 \n```\n\nSince at this stage, we are not training the CNN part of the model, \nthe outputs of the CNN part can be computed to speed up training of\nthe classifiers. This can be done by calling the `generate_factor_output.py` script.\nThis script has the following usage information:\n```text\nusage: Perform test [-h] [-s] [-d] [--same] model data_file out_pre\n\npositional arguments:\n  model               The model\n  data_file           The data file\n  out_pre             The output file prefix\n\noptional arguments:\n  -h, --help          show this help message and exit\n  -s, --sigmoid       use sigmoid after weightsum\n  -d, --use_distance  use distance\n  --same              Use the same subsequence for all features\n```\n\nFor the GM12878 CTCF dataset, we will do the following\n```shell\nfor i in train valid test; \ndo \n  PYTHONPATH=. python generate_factor_output.py \\\n                  out_dir/gm12878_ctcf_model_re.model.pt \\\n                  out_dir/gm12878_ctcf_distance_matched_singleton_tf_with_random_neg_seq_data_length_filtered_${i}.hdf5 \\\n                  gm1278_ctcf_${i}; \ndone\n```\nThis will generate the following files in the output directory:\n```text\ngm12878_ctcf_extended_with_intra_test_factor_outputs.hdf5   \ngm12878_ctcf_extended_with_intra_valid_factor_outputs.hdf5\ngm12878_ctcf_extended_with_intra_train_factor_outputs.hdf5\n```\n"
      },
      "source": "https://raw.githubusercontent.com/mjflab/chinn/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Data preparation",
        "parent_header": [
          "Chromatin Interaction Neural Network (ChINN):",
          "A machine learning-based method for predicting chromatin interactions from DNA sequences",
          "From DNase model"
        ],
        "type": "Text_excerpt",
        "value": "Create merged anchors from DNase regions and generate anchor pairs. \nFor GM12878 CTCF\n```shell\nintersectBed -a data/gm12878_ctcf/wgEncodeAwgDnaseUwdukeGm12878UniPk.narrowPeak -b data/consensusBlacklist.bed -v \\\n   | cut -f 1-3 | cut -f 1-3 | sort -k1,1 -k2,2n -k 3,3n | mergeBed -d 3000 > out_dir/gm12878_dnase_merged_3000.bed\npython generate_pairs_from_bed.py out_dir/gm12878_dnase_merged_3000.bed out_dir/gm12878_dnase_merged_3000.bedpe\n```\n\nGenerate positive pairs and negative pairs based on overlapping with chromatin interactions.\nFor the GM12878 CTCF dataset:\n```\npairToPair -a out_dir/gm12878_dnase_merged_3000.bedpe -b data/gm12878_ctcf/TangZ_etal.Cell2015.ChIA-PET_GM12878_CTCF.published_PET_clusters.no_black.txt -type both \\\n        | cut -f 1-6 | uniq > out_dir/gm12878_ctcf_dnase_in_ctcf_merged3000.pos.bedpe; \npairToPair -a out_dir/gm12878_dnase_merged_3000.bedpe -b data/gm12878_ctcf/TangZ_etal.Cell2015.ChIA-PET_GM12878_CTCF.published_PET_clusters.no_black.txt -type notboth \\\n        | cut -f 1-6 | uniq > out_dir/gm12878_ctcf_dnase_in_ctcf_merged3000.neg.bedpe; \n```\nNext step would be to run the `data_preparation.py` and `generate_factor_output.py` as in the extended dataset step.\n"
      },
      "source": "https://raw.githubusercontent.com/mjflab/chinn/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9866723378882598,
      "result": {
        "original_header": "Dataset:",
        "type": "Text_excerpt",
        "value": "__Note__: to run the scripts, use the root directory of this repository as the working directory.\n \n"
      },
      "source": "https://raw.githubusercontent.com/mjflab/chinn/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.996197472359632,
      "result": {
        "original_header": "Data generation and preprocessing",
        "type": "Text_excerpt",
        "value": "__Using GM12878 CTCF dataset as an example.__\n```shell\n# prepare output directory\nmkdir out_dir\nbash preprocess/pipe.sh data/gm12878_ctcf/TangZ_etal.Cell2015.ChIA-PET_GM12878_CTCF.published_PET_clusters.no_black.txt \\\n                        data/gm12878_ctcf/wgEncodeAwgDnaseUwdukeGm12878UniPk.narrowPeak \\\n                        data/gm12878_ctcf/wgEncodeAwgTfbsBroadGm12878CtcfUniPk.narrowPeak \\\n                        gm12878_ctcf \\\n                        out_dir\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/mjflab/chinn/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9756094235668341,
      "result": {
        "original_header": "Train the distance-matched models",
        "type": "Text_excerpt",
        "value": "For the GM12878 CTCF dataset, we can train the distance-matched models by\n```shell\nPYTHONPATH=. python train_distance_matched/train_distance_matched.py \\\n                       out_dir/gm12878_ctcf_distance_matched_singleton_tf_with_random_neg_seq_data_length_filtered \\\n                       gm12878_ctcf_model \\\n                       out_dir\n```\nNote that we have not included distance as a feature for classifer. \n"
      },
      "source": "https://raw.githubusercontent.com/mjflab/chinn/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9356903346114617,
      "result": {
        "original_header": "Train an XGBoost classifier using extended datasets",
        "type": "Text_excerpt",
        "value": "Next step is to train the classifier using the extended datasets. The script\nto train the extended classifier is placed under `train_extended/`. The `train_extended.py` has \nthe following usage information:\n```text\nusage: train_extended.py [-h] data_dir dataset_name model_dir\n\nTrain classifiers using extended datasets.\n\npositional arguments:\n  data_dir      The directory of the data location with train, valid, and\n                test.\n  dataset_name  The name (prefix) of the dataset before\n                _[train|valid|test]_factor_outputs.hdf5. For example:\n                gm12878_ctcf_train_factor_outputs.hdf5 -> gm12878_ctcf\n  model_dir     The directory to store the models. 3 models will be generated:\n                1. using all features; 2. using all features but distance\n                (_nodist); 3. using distance only (_dist_only).\n\noptional arguments:\n  -h, --help    show this help message and exit\n``` \nFor the GM12878 CTCF example, the command is as follows:\n```shell\nPYTHONPATH=. python train_extended/train_extended.py out_dir gm12878_ctcf_extended_with_intra out_dir/\n```\nThis command will produce several files in the model directory:\nBASH3* \nOn the Gm12878 CTCF extended test dataset, we can run\n```shell\nPYTHONPATH=. python predict.py -m out_dir/gm12878_ctcf_model_re.model.pt \\\n                -c out_dir/gm12878_ctcf_extended_with_intra_depth6.gbt.pkl \\\n                --data_file out_dir/gm12878_ctcf_extended_singleton_tf_with_random_neg_seq_data_length_filtered_test.hdf5 \\\n                --output_pre out_dir/gm12878_ctcf_extended_test -d\n```\nwhich will generate `gm12878_ctcf_extended_test_probs.txt` in the output directory.\n \n"
      },
      "source": "https://raw.githubusercontent.com/mjflab/chinn/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.9379742375103008,
      "result": {
        "original_header": "Data generation and preprocessing",
        "type": "Text_excerpt",
        "value": "__Using GM12878 CTCF dataset as an example.__\n```shell\n# prepare output directory\nmkdir out_dir\nbash preprocess/pipe.sh data/gm12878_ctcf/TangZ_etal.Cell2015.ChIA-PET_GM12878_CTCF.published_PET_clusters.no_black.txt \\\n                        data/gm12878_ctcf/wgEncodeAwgDnaseUwdukeGm12878UniPk.narrowPeak \\\n                        data/gm12878_ctcf/wgEncodeAwgTfbsBroadGm12878CtcfUniPk.narrowPeak \\\n                        gm12878_ctcf \\\n                        out_dir\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/mjflab/chinn/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8687117805439487,
      "result": {
        "original_header": "Train an XGBoost classifier using extended datasets",
        "type": "Text_excerpt",
        "value": "Next step is to train the classifier using the extended datasets. The script\nto train the extended classifier is placed under `train_extended/`. The `train_extended.py` has \nthe following usage information:\n```text\nusage: train_extended.py [-h] data_dir dataset_name model_dir\n\nTrain classifiers using extended datasets.\n\npositional arguments:\n  data_dir      The directory of the data location with train, valid, and\n                test.\n  dataset_name  The name (prefix) of the dataset before\n                _[train|valid|test]_factor_outputs.hdf5. For example:\n                gm12878_ctcf_train_factor_outputs.hdf5 -> gm12878_ctcf\n  model_dir     The directory to store the models. 3 models will be generated:\n                1. using all features; 2. using all features but distance\n                (_nodist); 3. using distance only (_dist_only).\n\noptional arguments:\n  -h, --help    show this help message and exit\n``` \nFor the GM12878 CTCF example, the command is as follows:\n```shell\nPYTHONPATH=. python train_extended/train_extended.py out_dir gm12878_ctcf_extended_with_intra out_dir/\n```\nThis command will produce several files in the model directory:\nBASH3* \nTo get the results on the test dataset, the `predict.py` script can be used.\nThe script has the following usage message:\n```text\nusage: Perform prediction using data generated by data_preparation.py\n       [-h] -m MODEL_FILE -c CLASSIFIER_FILE --data_file DATA_FILE\n       --output_pre OUTPUT_PRE [-s] [-d] [--same] [--store_factor_outputs]\n       [--legacy]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -m MODEL_FILE, --model_file MODEL_FILE\n                        The model prefix\n  -c CLASSIFIER_FILE, --classifier_file CLASSIFIER_FILE\n                        The classifier\n  --data_file DATA_FILE\n                        The data file\n  --output_pre OUTPUT_PRE\n                        The output file prefix\n  -s, --sigmoid         use sigmoid after weightsum. Default: False\n  -d, --use_distance    use distance. Default: False\n  --same                Use the same subsequence for all features. Default:\n                        False\n  --store_factor_outputs\n                        Whether to store the factor outputs. Default: False\n  --legacy              Whether to use legacy (softmax) for classifier.\n``` \nOn the Gm12878 CTCF extended test dataset, we can run\n```shell\nPYTHONPATH=. python predict.py -m out_dir/gm12878_ctcf_model_re.model.pt \\\n                -c out_dir/gm12878_ctcf_extended_with_intra_depth6.gbt.pkl \\\n                --data_file out_dir/gm12878_ctcf_extended_singleton_tf_with_random_neg_seq_data_length_filtered_test.hdf5 \\\n                --output_pre out_dir/gm12878_ctcf_extended_test -d\n```\nwhich will generate `gm12878_ctcf_extended_test_probs.txt` in the output directory.\n \n"
      },
      "source": "https://raw.githubusercontent.com/mjflab/chinn/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8693832032335845,
      "result": {
        "original_header": "For prediction",
        "type": "Text_excerpt",
        "value": "For GM12878 CTCF, an example to generate all the predictions:\n```shell\nPYTHONPATH=. python predict_bedpe.py -m out_dir/gm12878_ctcf_model_re.model.pt \\\n                -c out_dir/gm12878_ctcf_extended_with_intra_depth6.gbt.pkl \\\n                --pos_files out_dir/gm12878_ctcf_dnase_in_ctcf_merged3000.pos.bedpe \\\n                --neg_files out_dir/gm12878_ctcf_dnase_in_ctcf_merged3000.neg.bedpe \\\n                -g path/to/hg19.fa \\\n                --min_size 1000 -e 500 -d \\\n                --output_pre out_dir/gm12878_ctcf_from_dnase_all\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/mjflab/chinn/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/mjflab/chinn/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Apache License 2.0",
        "spdx_id": "Apache-2.0",
        "type": "License",
        "url": "https://api.github.com/licenses/apache-2.0",
        "value": "https://api.github.com/licenses/apache-2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
      },
      "source": "https://raw.githubusercontent.com/mjflab/chinn/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "chinn"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "mjflab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 139959,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 6770,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/mjflab/chinn/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "This document provides a brief intro of running models in ChINN for training and testing. Before launching any job, make sure you have properly downloaded the ChINN code and you have prepared the dataset following DATASET.md with the correct format.",
        "parent_header": [
          "Chromatin Interaction Neural Network (ChINN):",
          "A machine learning-based method for predicting chromatin interactions from DNA sequences"
        ],
        "type": "Text_excerpt",
        "value": "Chromatin Interaction Neural Network (ChINN) only uses DNA sequences of the interacting open chromatin regions. ChINN is able to predict CTCF-, RNA polymerase II- and HiC- associated chromatin interactions between open chromatin regions. \n\nChINN was able to identify convergent CTCF motifs, AP-1 transcription family member motifs such as FOS, and other transcription factors such as MYC as being important in predicting chromatin interactions.\n\nChINN also shows good across-sample performances and captures various sequence features that are predictive of chromatin interactions. \n"
      },
      "source": "https://raw.githubusercontent.com/mjflab/chinn/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 04:04:30",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Get the source code",
        "parent_header": [
          "Chromatin Interaction Neural Network (ChINN):",
          "A machine learning-based method for predicting chromatin interactions from DNA sequences"
        ],
        "type": "Text_excerpt",
        "value": "```shell\ngit clone https://github.com/mjflab/chinn\n\n#enter the directory. Use the repository's root directory as working directory.\ncd chinn\n```\nThe Python version tested is 3.6.5. The environment is specified in `environment.yaml`, \nwhich can be used by Anaconda to create\na new environment by `conda env create -f environment.yml`.\n"
      },
      "source": "https://raw.githubusercontent.com/mjflab/chinn/master/README.md",
      "technique": "header_analysis"
    }
  ]
}