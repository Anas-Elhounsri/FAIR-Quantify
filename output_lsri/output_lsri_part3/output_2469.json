{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "type": "Text_excerpt",
        "value": "Nebula was originally presented in Recomb-Seq 2019, the pre-print for that version can be found below:\n\nhttps://doi.org/10.1101/566620\n\nThe current version of Nebula is substantially different from what was presented in 2019. Nebula was published on Oxford Nucleic Acid Research In Jan 2021:\n\nhttps://doi.org/10.1093/nar/gkab025\n"
      },
      "source": "https://raw.githubusercontent.com/Parsoa/Nebula/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Parsoa/Nebula"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2017-08-25T18:42:44Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-11T17:42:58Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Ultra-efficient mapping-free structural variation genotyper"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9641359406454096,
      "result": {
        "original_header": "Nebula",
        "type": "Text_excerpt",
        "value": "Nebula is an ultra-efficient mapping-free structural variation genotyper based on kmer counting.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Parsoa/Nebula/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9984826934654106,
      "result": {
        "original_header": "Operating Principles",
        "type": "Text_excerpt",
        "value": "Nebula is a mapping-free approach for accurate and efficient genotyping of SVs. Nebula is a two-stage approach and consists of a **kmer extraction phase** and a **genotyping phase**. Given as input a set of SV coordinates (BED/VCF), the  reference assembly (FASTA), and a set of mapped samples on which the genotype of these SVs is already known, Nebula extracts a collection of kmers that represent the input SVs (kmer extraction phase) and these extracted kmers will then be used to genotype the same set of SVs on any new WGS sample(s) without the need to map the reads to the reference genome (genotyping phase). This is done by counting the kmers in the WGS reads of the new sample(s) and predicting genotypes using a likelihood model.  \n"
      },
      "source": "https://raw.githubusercontent.com/Parsoa/Nebula/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9562492292949559,
      "result": {
        "original_header": "Benchmarking and Performance",
        "type": "Text_excerpt",
        "value": "Nebula is designed to be simple, fast and memory efficient so it can be run on any reasonable personal hardware. Using a single processor core, Nebula can count kmers at a rate of 400,000 reads per second from a FASTQ file. A 30x human sample can be process in less than 80 minutes on a single core. \nNebula has been deeply parallelized with OpenMP. The kmer extraction step (`preprocess` subcommand) will benefit significantly from multiple threads as finding occurrences of kmers in sequencing reads and the reference genome can be easily parallelized. Use as many threads as available for the `preprocess` subcommand for best performance. \nNebula's kmer counter is very fast due to low-level optimizations and as a result genotyping runtime is mostly a function of memory bandwidth and I/O speed. Unless you have very fast disk I/O, it's unlikely that adding more threads will improve kmer counting runtime. The initial loading of kmers and the final step of genotyping SVs using the likelihood model will benefit significantly from multiple threads, however they account for only 15% of the runtime. We suggest running the counter on a small number of threads (e.g 4). \nNebula is an order of magnitude faster than other tools when genotyping an unmapped sample in FASTQ sample. The figure below shows comparison of Nebula's single-core genotyping runtime against several other state-of-the-art methods. \n"
      },
      "source": "https://raw.githubusercontent.com/Parsoa/Nebula/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Parsoa/Nebula/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Parsoa/Nebula/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Parsoa/Nebula"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Nebula"
      },
      "source": "https://raw.githubusercontent.com/Parsoa/Nebula/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Parsoa/Nebula/master/docker/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/Parsoa/Nebula/master/docker/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Parsoa/Nebula/master/docker/htslib.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Parsoa/Nebula/master/docker/make.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Parsoa/Nebula/master/docker/build.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Parsoa/Nebula/master/docker/or_tools.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Parsoa/Nebula/master/docker/scripts/run.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Parsoa/Nebula/master/assets/Pipeline.png"
      },
      "source": "https://raw.githubusercontent.com/Parsoa/Nebula/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Parsoa/Nebula/master/assets/Runtime.png"
      },
      "source": "https://raw.githubusercontent.com/Parsoa/Nebula/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "Nebula's only dependency is htslib which is included as submodule for compatibility reasons. Clone recursively:\n\n```\ngit clone --recursive git@github.com:Parsoa/Nebula.git\ncd Nebula\n```\n\nThen build htslib:\n\n```\ncd src/cpp/htslib\nmake\n```\n\nThen build Nebula itself:\n\n```\ncd ..\nmake\n```\n\nYou need to update your `LD_LIBRARY_PATH` to use Nebula's own htslib instance:\n\n```\nexport LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/path/to/Nebula/src/cpp/htslib\n```\n"
      },
      "source": "https://raw.githubusercontent.com/Parsoa/Nebula/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Parsoa/Nebula/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) [year] [fullname]\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/Parsoa/Nebula/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Nebula"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "Parsoa"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 825512,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 8757,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 2582,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 1187,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 506,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 424,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Parsoa/Nebula/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 08:58:55",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 18
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Input format",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Nebula receives the SV loci and genotypes for prepreocessing in BED format. Only a few fields are required:\n\n```\n#CHROM BEGIN   END SVTYPE SEQ GENOTYPE\n```\n\nThe header line MUST be present.\n\n`SVTYPE` is usually one of `DEL`, `INS` or `INV` for deletion, insertion and inversion respectively. Other SV types are not currently tested but should work as long as kmers can be extracted for them.\n\nThe `SEQ` field is only required for insertions and is ignored for insertions and inversions, however the field should still be provided (you can pass an empty string `\".\"`).\n\nYou can optionally include `SVLEN` otherwise it will be estimated from `BEGIN` and `END` for  deletions and inversions and from size of `SEQ` for insertions.\n\nChromosome names in BED and FASTA files can both include and not include `chr`. However, Nebula's output will always include `chr` in chromosome names regradless of input format.\n\n`GENOTYPE` must be one of `0/0` for absent, `0/1` or `1/0` (treated equally) for heterozygous and `1/1` for homozygous. Nebula's preprocessing stage requires \"known\" SV genotypes to select kmers, as a result ambiguous genotypes like `./1` and `./.` are not accepted and will result in abort.\n"
      },
      "source": "https://raw.githubusercontent.com/Parsoa/Nebula/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Preprocessing and k-mer extraction",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Nebula requires a reference genome in FASTA format and a number of samples in BAM/SAM/CRAM format along with SV genotypes for each sample in BED format. k-mers are extracted from both the reference genome (for deletions only) and read mappings (for any type of SV).\n\nThe same set of SV genotypes should be provided for all samples being preprocessed. If the set of SVs is not the same, then the union of all SVs found in the BED files will be considered and SVs that don't have a genotype for a sample are assumed to be 0/0 on that sample.\n\nThe preprocessing stage consists of multiple commands. To extract kmers run the `preprocess` command. This will output the extracted kmers in a series of JSON files under `--workdir` and the directory is created if it doesn't exists. A BED file and a BAM file should be passed for each sample being preprocessed.\n\n```\nnebula preprocess --bed /path/to/genotypes_1.bed,/path/to/genotypes_2.bed --bam /path/to/bam_file_1.bed /path/to/bam_file_2.bed --wokdir /output --reference /path/to/reference/FASTA/file --thread <number of threads to use>\n```\n\nNext, the input samples are genotyped with these kmers to filter low-quality kmers. Passing `--select` causes the genotyper to only keep the kmers whose counts support the known genotypes. `--kmers` specifices the location of extracted kmers (the output of running the preprocessor). The `gc_kmers` and `depth_kmers` arguments take a precaculated list of kmers used for estimating sequencing depth across regions of the genome with different levels of GC content. These files can be downloaded from [here](https://github.com/Parsoa/Nebula/tree/master/experiments/kmers).\n\nPassing `--unique` causes the genotyper to only keep kmers unique to one SV (e.g kmers that don't appear as a result of two or more different SVs). This option will usually result in higher precision when genotyping new samples but it may reduce recall slightly.\n\n```\nnebula genotype --bed /path_to_genotypes_1.bed --bam /path/to/bam_file_1.bed --workdir output/sample_1 --kmers /output --depth_kmers depth_kmers.json --gc_kmers gc_kmers.json --select --unique\nnebula genotype --bed /path_to_genotypes_2.bed --bam /path/to/bam_file_2.bed --workdir output/sample_2 --kmers /output --depth_kmers depth_kmers.json --gc_kmers gc_kmers.json --select --unique\n```\n\nFinally, merge the remaining kmers after filtering by running the `mix` subcommand. The `--samples` argument takes the name of input sample. This is basically the name of the directories passed during the previous stage when running the genotyper.\n\n```\nnebula mix --bed /path_to_genotypes_1.bed,/path_to_genotypes_2.bed --samples sample_1,sample_2 --workdir /output\n```\n\nThe output kmers are stored in a folder named `Mix` inside workdir (here `/output/Mix`). You will only the contents of `Mix` for genotyping other samples. Any other files and directories created by Nebula can be deleted to save disk space.\n"
      },
      "source": "https://raw.githubusercontent.com/Parsoa/Nebula/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Genotyping",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "For genotyping unmapped sample with the extracted kmers from an earlier kmer-extraction run:\n\n```\nnebula genotype --kmers /path/to/Mix/directory --bam/--fastq /path/to/sample --workdir <output directory>\n```\n\nNote that a BED file is not passed to the genotyper as the variants are implicit in the kmers. \n\nThe `workdir` here can be anywhere. This will count the kmers on the new sample and calculate genotypes. Note that we don't pass `--select` when actually genotyping a sample.\n\nNebula will output a BED file named `genotypes.bed` in the specified working directory. The file will include the original fields in the input BED files along with the field `GENOTYPE` (one of 0/0, 1/0 or 1/1). \n"
      },
      "source": "https://raw.githubusercontent.com/Parsoa/Nebula/master/README.md",
      "technique": "header_analysis"
    }
  ]
}