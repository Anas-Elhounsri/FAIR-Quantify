{
  "application_domain": [
    {
      "confidence": 23.93,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/churchlab/UniRep"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-01-16T17:15:57Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-29T01:02:40Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "UniRep model, usage, and examples."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Description of files in this repository",
        "parent_header": [
          "UniRep, a mLSTM \"babbler\" deep representation learner for protein engineering informatics.",
          "Quick-start"
        ],
        "type": "Text_excerpt",
        "value": "- unirep_tutorial.ipynb - Start here for examples on loading the model, preparing data, training, and running inference. \n- unirep_tutorial.py - A pure python script version of the tutorial notebook.\n- unirep.py - Interface for most use cases.\n- custom_models.py -  Custom implementations of GRU, LSTM and mLSTM cells as used in representation training on UniRef50\n- data_utils.py - Convenience functions for data management.\n- formatted.txt and seqs.txt - Tutorial files.\n"
      },
      "source": "https://raw.githubusercontent.com/churchlab/UniRep/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9824275426923379,
      "result": {
        "original_header": "UniRep, a mLSTM \"babbler\" deep representation learner for protein engineering informatics.",
        "type": "Text_excerpt",
        "value": "We present an interface for training, inferencing representations, generative modelling aka \"babbling\", and data management. All three architectures (64, 256, and 1900 units) are provided along with the trained architectures, the random initializations used to begin evotuning (to ensure reproducibility) and the evotuned parameters.  \nFor training/finetuning: note that backpropagation of an mLSTM of this size is very memory intensive, and the primary determinant of memory use is the max length of the input sequence rather than the batch size. We have finetuned on GFP-like fluorescent proteins (~120-280aa) on a p3.2xlarge instance (aws) with 16GB GPU memory successfully. Higher memory hardware should accommodate larger sequences, as will using one of the smaller pre-trained models (64 or 256). If you are having difficulty with your use case, please reach out. We are happy to assist you.\n \n"
      },
      "source": "https://raw.githubusercontent.com/churchlab/UniRep/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8482654428423735,
      "result": {
        "original_header": "Quick-start",
        "type": "Text_excerpt",
        "value": "First clone or fork this repository and navigate to the repository's top directory (`cd UniRep`). We recommend using our docker environments. Install [docker](https://www.docker.com/why-docker) to get started.\n \n"
      },
      "source": "https://raw.githubusercontent.com/churchlab/UniRep/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9853460958819152,
      "result": {
        "original_header": "Obtaining weight files",
        "type": "Text_excerpt",
        "value": "where `<weights_dir>` is one of: \n"
      },
      "source": "https://raw.githubusercontent.com/churchlab/UniRep/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/churchlab/UniRep/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/churchlab/UniRep/master/unirep_tutorial.ipynb"
      },
      "source": "https://raw.githubusercontent.com/churchlab/UniRep/master/unirep_tutorial.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 96
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/churchlab/UniRep/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "churchlab/UniRep"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "UniRep, a mLSTM \"babbler\" deep representation learner for protein engineering informatics."
      },
      "source": "https://raw.githubusercontent.com/churchlab/UniRep/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/churchlab/UniRep/master/docker/run_gpu_docker_DEPRECATED.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/churchlab/UniRep/master/docker/run_cpu_docker.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/churchlab/UniRep/master/docker/run_gpu_docker.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 0.9999996237199722,
      "result": {
        "original_header": "Quick-start",
        "type": "Text_excerpt",
        "value": "First clone or fork this repository and navigate to the repository's top directory (`cd UniRep`). We recommend using our docker environments. Install [docker](https://www.docker.com/why-docker) to get started.\n \n"
      },
      "source": "https://raw.githubusercontent.com/churchlab/UniRep/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999806277032856,
      "result": {
        "original_header": "Obtaining weight files",
        "type": "Text_excerpt",
        "value": "The `unirep_tutorial.ipynb` notebook downloads the needed weight files for the 64-unit and 1900-unit UniRep models. However, if you want to download these or other weight files directly, you first need `awscli` (the AWS Command Line Interface tool). If using the docker environments built above, it is included. If working outside docker, first do `pip install awscli`. To grab a set of weights, do:\n```\naws s3 sync --no-sign-request --quiet s3://unirep-public/<weights_dir> <weights_dir>\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/churchlab/UniRep/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/churchlab/UniRep/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "type": "Text_excerpt",
        "value": "Copyright 2018, 2019 Ethan Alley, Grigory Khimulya, Surojit Biswas\n\nAll the model weights are licensed under the terms of Creative Commons Attribution-NonCommercial 4.0 International License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc/4.0/ or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n\nOtherwise the code in this repository is licensed under the terms of [GPL v3](https://www.gnu.org/licenses/gpl-3.0.html) as specified by the gpl.txt file.\n"
      },
      "source": "https://raw.githubusercontent.com/churchlab/UniRep/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "UniRep"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "churchlab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 67709,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 18944,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 255,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/churchlab/UniRep/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-06 18:21:03",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 335
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "CPU-only support",
        "parent_header": [
          "UniRep, a mLSTM \"babbler\" deep representation learner for protein engineering informatics.",
          "Quick-start"
        ],
        "type": "Text_excerpt",
        "value": "1. Build docker: `docker build -f docker/Dockerfile.cpu -t unirep-cpu .` This step pulls the Tensorflow 1.3 CPU image and installs a few required python packages. Note that Tensorflow pulls from Ubuntu 16.04.\n2. Run docker: `docker/run_cpu_docker.sh`. This will launch Jupyter. Copy and paste the provided URL into your browser. Note that if you are running this code on a remote machine you will need to set up port forwarding between your local machine and your remote machine. See this [example](https://coderwall.com/p/ohk6cg/remote-access-to-ipython-notebooks-via-ssh) (note that in our case jupyter is serving port 8888, not 8889 as the example describes).\n3. Open up the `unirep_tutorial.ipynb` notebook and get started. The 64-unit model should be OK to run on any machine. The full-sized model will require a machine with more than 16GB of RAM.\n"
      },
      "source": "https://raw.githubusercontent.com/churchlab/UniRep/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "GPU support",
        "parent_header": [
          "UniRep, a mLSTM \"babbler\" deep representation learner for protein engineering informatics.",
          "Quick-start"
        ],
        "type": "Text_excerpt",
        "value": "0. System requirements: NVIDIA CUDA 8.0 (V8.0.61), NVIDIA cuDNN 6.0.21, NVIDIA GPU Driver 410.79 (though == 361.93 or >= 375.51 should work. Untested), nvidia-docker. We use the AWS [Deep Learning Base AMI for Ubuntu](https://aws.amazon.com/marketplace/pp/B077GCZ4GR) (tested on version 17.0 ami-0ff00f007c727c376), which has these requirements pre-configured. \n1. Build docker: `docker build -f docker/Dockerfile.gpu -t unirep-gpu .` This step pulls the Tensorflow 1.3 GPU image and installs a few required python packages. Note that Tensorflow pulls from Ubuntu 16.04.\n2. Run docker: `docker/run_gpu_docker.sh`. This will launch Jupyter. Copy and paste the provided URL into your browser. Note that if you are running this code on a remote machine you will need to set up port forwarding between your local machine and your remote machine. See this [example](https://coderwall.com/p/ohk6cg/remote-access-to-ipython-notebooks-via-ssh) (note that in our case jupyter is serving port 8888, not 8889 as the example describes).\n3. Open up the `unirep_tutorial.ipynb` notebook and get started. The 64-unit model should be OK to run on any machine. The full-sized model will require a machine with more than 16GB of GPU RAM.\n"
      },
      "source": "https://raw.githubusercontent.com/churchlab/UniRep/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ]
}