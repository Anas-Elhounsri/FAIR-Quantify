{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/shubhamchandak94/nanopore_dna_storage"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-03-16T17:54:14Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-08-15T17:56:44Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DNA storage for nanopore sequencing using convolutional coding and basecaller-decoder integration"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.8943606676839027,
      "result": {
        "original_header": "Nanopore DNA storage",
        "type": "Text_excerpt",
        "value": "DNA storage for nanopore sequencing using convolutional coding and basecaller-decoder integration \n**Update**: See [bonito](https://github.com/shubhamchandak94/nanopore_dna_storage/tree/bonito) branch for improved performance and experiments using bonito basecalling and other improvements.\n \n"
      },
      "source": "https://raw.githubusercontent.com/shubhamchandak94/nanopore_dna_storage/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.981548438800289,
      "result": {
        "original_header": "General instructions",
        "type": "Text_excerpt",
        "value": "In many of the scripts, you need to set the path for the corresponding data directories as well as the encoding parameters. \nThe current paths assume that the data is stored in `../nanopore_dna_storage_data/`\n \n"
      },
      "source": "https://raw.githubusercontent.com/shubhamchandak94/nanopore_dna_storage/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9828223981605009,
      "result": {
        "original_header": "Convolutional code decoding of raw signal data",
        "type": "Text_excerpt",
        "value": "First, generate a list of read ids to decode using the script `util/generate_read_ids.py` (changing the parameters as needed). Then, run `generate_decoded_lists.py` with the relevant parameters. Below is an example execution for m=11, r=5/6 and list size 8.\n```\npython3 generate_decoded_lists.py \\\n--hdf_file ../nanopore_dna_storage_data/raw_signal/raw_signal_7.hdf5 \\\n--out_prefix ../nanopore_dna_storage_data/decoded_lists/exp_7/list \\\n--read_id_file ../nanopore_dna_storage_data/decoded_lists/exp_7/read_ids.txt \\\n--info_file ../nanopore_dna_storage_data/decoded_lists/exp_7/info.txt \\\n--mem_conv 11 \\\n--msg_len 180 \\\n--rate_conv 5 \\\n--list_size 8 \\\n--start_barcode CACCTGTGCTGCGTCAGGCTGTGTC \\\n--end_barcode GCTGTCCGTTCCGCATTGACACGGC\n```\nNote that the `rate_conv` parameter is set to 1, 2, 3, 4, 5 and 7 for convolutional code rates of 1/2, 2/3, 3/4, 4/5, 5/6 and 7/8, respectively. The `msg_len` parameter is the length of the binary input to the convolutional code encoder. This writes the decoded lists to files named `list_1, list_2, ...` in the directory `../nanopore_dna_storage_data/decoded_lists/exp_7/` and also generates an `info.txt` file listing the decoded reads.\nThe parameters for the different experiments can be found in the files `encode_experiments.py` and `logs/encoding_log`.\n \n"
      },
      "source": "https://raw.githubusercontent.com/shubhamchandak94/nanopore_dna_storage/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9597969542703231,
      "result": {
        "original_header": "Performing RS decoding of the lists",
        "type": "Text_excerpt",
        "value": "To perform RS decoding from the lists, use `decode_RS_from_decoded_lists.py` after setting the parameters. `NUM_TRIALS` denotes the number of decoding trials performed. Each trial involves a subsampling of `NUM_READS_TO_USE` reads from the set of decoded lists of size `NUM_READS_TOTAL`, an attempt at RS decoding and comparison with the original encoded file to ensure successful decoding.\n \n"
      },
      "source": "https://raw.githubusercontent.com/shubhamchandak94/nanopore_dna_storage/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Download and install",
        "parent_header": [
          "Nanopore DNA storage"
        ],
        "type": "Text_excerpt",
        "value": "Download:\n```\ngit clone https://github.com/shubhamchandak94/nanopore_dna_storage/\n```\nFlappie models are stored using git lfs, see instructions in `flappie/` directory README in case of issues.\n\nInstall:\n```\n./install.sh\n```\nOther than this, you might need to install the following Python3 packages: crc8, distance, fast5_research, h5py, numpy, scipy, scrappy, struct (see `install_python_packages.sh`). Also, flappie needs certain dependencies listed in the `flappie/` directory.\n"
      },
      "source": "https://raw.githubusercontent.com/shubhamchandak94/nanopore_dna_storage/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/shubhamchandak94/nanopore_dna_storage/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "faq": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Computing error rates of convolutional code decoding",
        "parent_header": [
          "Nanopore DNA storage"
        ],
        "type": "Text_excerpt",
        "value": "To compute the number of errors (due to no CRC match being found and due to incorrect CRC match) from the decoded lists, use `compute_error_rate_from_decoded_lists.py` after setting the parameters.\n"
      },
      "source": "https://raw.githubusercontent.com/shubhamchandak94/nanopore_dna_storage/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 8
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/shubhamchandak94/nanopore_dna_storage/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "shubhamchandak94/nanopore_dna_storage"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Nanopore DNA storage"
      },
      "source": "https://raw.githubusercontent.com/shubhamchandak94/nanopore_dna_storage/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/shubhamchandak94/nanopore_dna_storage/master/install_python_packages.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/shubhamchandak94/nanopore_dna_storage/master/install.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/shubhamchandak94/nanopore_dna_storage/master/util/align_compute_stats.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Download and install",
        "parent_header": [
          "Nanopore DNA storage"
        ],
        "type": "Text_excerpt",
        "value": "Download:\n```\ngit clone https://github.com/shubhamchandak94/nanopore_dna_storage/\n```\nFlappie models are stored using git lfs, see instructions in `flappie/` directory README in case of issues.\n\nInstall:\n```\n./install.sh\n```\nOther than this, you might need to install the following Python3 packages: crc8, distance, fast5_research, h5py, numpy, scipy, scrappy, struct (see `install_python_packages.sh`). Also, flappie needs certain dependencies listed in the `flappie/` directory.\n"
      },
      "source": "https://raw.githubusercontent.com/shubhamchandak94/nanopore_dna_storage/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9995115633725128,
      "result": {
        "original_header": "Data: https://github.com/shubhamchandak94/nanopore_dna_storage_data",
        "type": "Text_excerpt",
        "value": "Code tested on Ubuntu 18.04.1 and Python3. \n"
      },
      "source": "https://raw.githubusercontent.com/shubhamchandak94/nanopore_dna_storage/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/shubhamchandak94/nanopore_dna_storage/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "convolutional-codes, dna-storage, nanopore-sequencing, viterbi-decoder"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2020 Shubham Chandak\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/shubhamchandak94/nanopore_dna_storage/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "nanopore_dna_storage"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "shubhamchandak94"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 544019,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 214990,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 81639,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 5862,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 5723,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 3226,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/shubhamchandak94/nanopore_dna_storage/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running simulations",
        "parent_header": [
          "Nanopore DNA storage"
        ],
        "type": "Text_excerpt",
        "value": "The script `simulator.py` can be used to perform simulations to test various parameters for the convolutional code. The simulation of the raw signal is performed using the [scrappie](https://github.com/nanoporetech/scrappie) simulator with an optional mode to use dwell time distribution from [DeepSimulator](https://github.com/lykaust15/DeepSimulator). An example execution is shown below:\n```\npython3 simulator.py \\\n--num_trials 100 \\\n--list_size 8 \\\n--mem_conv 11 \\\n--rate 5 \\\n--msg_len 180 \\\n--deepsimdwell False \\\n--reversecomp False \\\n--syn_sub_prob 0.004 \\\n--syn_del_prob 0.0085 \\\n--syn_ins_prob 0.0005\n```\nThe `mem_conv` parameter can be set to 6, 8, 11 or 14. The `rate` parameter can be set to 1, 2, 3, 4, 5 and 7 for convolutional code rates of 1/2, 2/3, 3/4, 4/5, 5/6 and 7/8, respectively. The `msg_len` parameter decides the length of the binary input to the convolutional encoder, and should be set depending upon the desired oligo length. Setting `deepsimdwell` to `True` uses the dwell time distribution from DeepSim which has higher variance (based on our experience, keeping this `False` gives results closer to reality). `reversecomp` can be set to True to simulate reverse complemented read decoding. Finally, the parameters `syn_sub_prob`, `syn_del_prob` and `syn_ins_prob` decide the iid substitution, deletion and insertion error rates introduced during the synthesis.\n"
      },
      "source": "https://raw.githubusercontent.com/shubhamchandak94/nanopore_dna_storage/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 18:13:49",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 13
      },
      "technique": "GitHub_API"
    }
  ]
}