{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citing `2passtools`:",
        "parent_header": [
          "2passtools",
          "Use:"
        ],
        "type": "Text_excerpt",
        "value": "The `2passtools` manuscript is published in Genome Biology (Open access):\n\n> Parker, M.T., Knop, K., Barton, G.J. et al. 2passtools: two-pass alignment using machine-learning-filtered splice junctions increases the accuracy of intron detection in long-read RNA sequencing. Genome Biol 22, 72 (2021). https://doi.org/10.1186/s13059-021-02296-0\n"
      },
      "source": "https://raw.githubusercontent.com/bartongroup/2passtools/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/bartongroup/2passtools"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-02-25T11:10:40Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-05-29T07:00:06Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Two pass alignment for long reads"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9356977254307206,
      "result": {
        "original_header": "2passtools",
        "type": "Text_excerpt",
        "value": "A package for filtering splice junctions extracted from noisy long read alignments generated using minimap2. These can then be used to perform second pass alignment with minimap2, feeding in the junctions using the `--junc-bed` flag.\n \n"
      },
      "source": "https://raw.githubusercontent.com/bartongroup/2passtools/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/bartongroup/2passtools/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/bartongroup/2passtools/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bartongroup/2passtools"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "2passtools"
      },
      "source": "https://raw.githubusercontent.com/bartongroup/2passtools/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "identifier": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://zenodo.org/badge/latestdoi/242980365"
      },
      "source": "https://raw.githubusercontent.com/bartongroup/2passtools/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation:",
        "parent_header": [
          "2passtools"
        ],
        "type": "Text_excerpt",
        "value": "2passtools has been tested with python 3.6, and requires `numpy`, `scikit-learn`, `pysam`, `NCLS` and `click`. The easiest way to install it is using the conda environment yaml provided:\n\n```\n\ngit clone https://www.github.com/bartongroup/2passtools\ncd 2passtools\nconda env create -f 2passtools.yml\n\nsource activate 2passtools\n```\n\nAlternatively 2passtools and the required packages can be installed using pip:\n\n```\npip install git+git://github.com/bartongroup/2passtools.git\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/bartongroup/2passtools/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/bartongroup/2passtools/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2020 Matthew Parker\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/bartongroup/2passtools/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "2passtools"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "bartongroup"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 40227,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bartongroup/2passtools/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "mparker2",
          "type": "User"
        },
        "date_created": "2021-02-03T14:22:19Z",
        "date_published": "2021-02-03T14:24:49Z",
        "description": "Added new functionality, allowing users to provide reference annotations which are used to train a random forest model de novo.",
        "html_url": "https://github.com/bartongroup/2passtools/releases/tag/v0.3",
        "name": "version 0.3",
        "release_id": 37298620,
        "tag": "v0.3",
        "tarball_url": "https://api.github.com/repos/bartongroup/2passtools/tarball/v0.3",
        "type": "Release",
        "url": "https://api.github.com/repos/bartongroup/2passtools/releases/37298620",
        "value": "https://api.github.com/repos/bartongroup/2passtools/releases/37298620",
        "zipball_url": "https://api.github.com/repos/bartongroup/2passtools/zipball/v0.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "mparker2",
          "type": "User"
        },
        "date_created": "2020-04-28T11:15:31Z",
        "date_published": "2020-04-30T15:21:19Z",
        "html_url": "https://github.com/bartongroup/2passtools/releases/tag/v0.2",
        "name": "2passtools release v0.2",
        "release_id": 26052162,
        "tag": "v0.2",
        "tarball_url": "https://api.github.com/repos/bartongroup/2passtools/tarball/v0.2",
        "type": "Release",
        "url": "https://api.github.com/repos/bartongroup/2passtools/releases/26052162",
        "value": "https://api.github.com/repos/bartongroup/2passtools/releases/26052162",
        "zipball_url": "https://api.github.com/repos/bartongroup/2passtools/zipball/v0.2"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 16:58:48",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 20
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Use:",
        "parent_header": [
          "2passtools"
        ],
        "type": "Text_excerpt",
        "value": "2passtools has three commands....\n\nNB: There is a [snakemake](https://www.github.com/bartongroup/two_pass_alignment_pipeline) pipeline which can be used to run the benchmarking scripts used in the manuscript.\n"
      },
      "source": "https://raw.githubusercontent.com/bartongroup/2passtools/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "`score`:",
        "parent_header": [
          "2passtools",
          "Use:"
        ],
        "type": "Text_excerpt",
        "value": "The `2passtools score` command requires as input a long read sequencing bam file aligned using minimap2 and a reference fasta file. It then extracts junction metrics and sequence information and uses it to score splice junctions found in the alignments. The output of `score` is a BED file with multiple columns corresponding to different metrics and model scores (see output below). This format cannot be passed to minimap2 directly as (A) it has not yet been filtered and (B) the extra column format is not supported by minimap2 which requires 6-column bed. Filtering and reformatting can be done using `2passtools filter`.\n\nIf you already have a reference annotation but want to discover novel splice junctions, consider using the **annotation-aided mode** of `2passtools score`. It takes an additional input: a bed file containing high-confidence splice junctions from an existing reference annotation. `2passtools` will use these as positive examples to train *de novo* models to detect novel splice junctions. It works best if the existing annotation is relatively complete, but there are significant numbers of novel splice junctions: if the annotation is too incomplete it is better to run 2passtools using the pre-trained model, and if there are very few novel splice junctions, it is better just to do reference-guided alignment (without `2passtools`). There are experiments which might help you guide your decision in the [Genome Biology paper](https://doi.org/10.1186/s13059-021-02296-0).\n"
      },
      "source": "https://raw.githubusercontent.com/bartongroup/2passtools/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Options:",
        "parent_header": [
          "2passtools",
          "Use:",
          "`score`:"
        ],
        "type": "Text_excerpt",
        "value": " \n```\n$ 2passtools score --help\nUsage: 2passtools score [OPTIONS] BAM_FN\n\n  2passtools score: A tool for extracting and scores junctions from a bam\n  file aligned with minimap2. Filtered junctions can be used to realign\n  reads in a second pass with minimap2.\n\n  Bam file must be mapped with minimap2 and have the long form CS tag, e.g.\n\n  minimap2 -a --cs=long -k14 -x splice ref.fa reads.fq\n\nOptions:\n  -o, --output-bed-fn TEXT        Output file path  [required]\n  -f, --ref-fasta-fn TEXT         Path to the fasta file that reads were\n                                  mapped to  [required]\n\n  -a, --annot-bed-fn TEXT         Optional BED file containing annotated\n                                  junctions\n\n  -j, --jad-size-threshold INTEGER\n                                  JAD to threshold at in the decision tree\n  -d, --primary-splice-local-dist INTEGER\n                                  Distance to search for alternative\n                                  donor/acceptors when calculating primary d/a\n\n  -m, --canonical-motifs TEXT     Intron motifs considered canonical in\n                                  organism. Should be four char DNA motifs\n                                  separated by vertical bar only\n\n  -w, --lr-window-size INTEGER    Sequence size to extract to train logistic\n                                  regression models\n\n  -k, --lr-kfold INTEGER          Number of cross validation k-folds for\n                                  logistic regression models\n\n  -lt, --lr-low-confidence-threshold FLOAT\n                                  Logistic regression low confidence threshold\n                                  for decision tree 2\n\n  -ht, --lr-high-confidence-threshold FLOAT\n                                  Logistic regression high confidence\n                                  threshold for decision tree 2\n\n  -c, --classifier-type [decision_tree|random_forest]\n                                  When annotated juncs are available, train\n                                  this classifier type\n\n  --keep-all-annot / --filter-annot\n                                  When annotated juncs are available, always\n                                  keep all annotated juncs\n\n  --stranded / --unstranded       Whether input data is stranded or\n                                  unstranded. direct RNA is stranded, cDNA\n                                  often isn't\n\n  -p, --processes INTEGER\n  -s, --random-seed INTEGER\n  -v, --verbosity LVL             Either CRITICAL, ERROR, WARNING, INFO or\n                                  DEBUG\n\n  --help                          Show this message and exit.\n```\n"
      },
      "source": "https://raw.githubusercontent.com/bartongroup/2passtools/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Output:",
        "parent_header": [
          "2passtools",
          "Use:",
          "`score`:"
        ],
        "type": "Text_excerpt",
        "value": "A 13-column BED file format with the following values:\n\n```\n1. chrom (string)\n2. start (integer)\n3. end (integer)\n4. intron-motif (four char string)\n5. supporting read count (integer)\n6. strand (string, either '+' or '-')\n7. junction alignment distance metric (integer)\n8. primary donor metric (integer, either 0 or 1)\n9. primary acceptor metric (integer, either 0 or 1)\n10. decision tree 1 output (integer, either 0 or 1)\n11. logistic regression model donor score (float)\n12. logistic regression model acceptor score (float)\n13. decision tree 2 output (integer, either 0 or 1)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/bartongroup/2passtools/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "`filter`:",
        "parent_header": [
          "2passtools",
          "Use:"
        ],
        "type": "Text_excerpt",
        "value": "The `2passtools filter` command can be used to filter the 13-column bed file using any expression utilising the metrics or model outputs. The expression should be a valid python expression which evaluates to `True` or `False` for each junction, and can use any of the following safe variables and functions:\n\n* `motif`: The intron motif in ACGTN alphabet (`str`),\n* `is_GTAG`: The intron motif is GU/AG (`bool`),\n* `is_GCAG`: The intron motif is GC/AG (`bool`),\n* `is_ATAG`: The intron motif is AU/AG (`bool`),\n* `motif_regex_match`: safe function allowing regex matching of motif, e.g. `motif_regex_match(\"G[CT]AG\")` (`func`),\n* `count`: The supporting read count (`int`),\n* `jad`: The junction alignment distance metric (`int`),\n* `primary_donor`: The primary donor metric (`bool`),\n* `primary_acceptor`: The primary acceptor metric (`bool`),\n* `donor_seq_score`: The logistic regression model donor score (`float`),\n* `acceptor_seq_score`: The logistic regression model acceptor score (`float`),\n* `decision_tree_1_pred`: Decision tree model 1 output (`bool`),\n* `decision_tree_2_pred`: Decision tree model 2 output (`bool`),\n* `sum`, `pow`, `min`, `max`, `len`: python functions,\n* `math`: The python `math` module, any function from it is useable,\n* `bool`, `int`, `str`, `float`: python functions.\n\nFor example:\n\n* `2passtools filter --exprs 'jad > 3'` filters for junction alignment distance of 4 nt or more.\n* `2passtools filter --exprs 'decision_tree_2_pred'` filters for junctions that pass the second decision tree model.\n\netc.\n"
      },
      "source": "https://raw.githubusercontent.com/bartongroup/2passtools/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage:",
        "parent_header": [
          "2passtools",
          "Use:",
          "`filter`:"
        ],
        "type": "Text_excerpt",
        "value": "```\n$ 2passtools filter --help\nUsage: 2passtools filter [OPTIONS] BED_FN\n\n  2passtools filter: Convenience tool to filter a junction bed and produce\n  6-column bed format which is compatible with minimap2.\n\nOptions:\n  -o, --output-bed-fn TEXT  [required]\n  --exprs TEXT\n  -v, --verbosity LVL       Either CRITICAL, ERROR, WARNING, INFO or DEBUG\n  --help                    Show this message and exit.\n```\n"
      },
      "source": "https://raw.githubusercontent.com/bartongroup/2passtools/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "`merge`:",
        "parent_header": [
          "2passtools",
          "Use:"
        ],
        "type": "Text_excerpt",
        "value": "The `2passtools merge` command is similar to `score`, but takes multiple 13-column bed files produced by `score` and merges them, recalculating metrics and model stats, to produce a unified junction set. This is useful for making sure all replicates are aligned similarly, and often alignment is improved by borrowing power across replicates. Output is in the same 13-column BED format as `score`.\n"
      },
      "source": "https://raw.githubusercontent.com/bartongroup/2passtools/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "`Usage`:",
        "parent_header": [
          "2passtools",
          "Use:",
          "`merge`:"
        ],
        "type": "Text_excerpt",
        "value": "```\n$ 2passtools merge --help\nUsage: 2passtools merge [OPTIONS] BED_FNS...\n\n  2passtools merge: Merges bed files produced by 2passtools score on\n  individual replicates and recalculates junction strength metrics. Can be\n  used to create a unified junction set to realign reads from different\n  replicates.\n\n  Bed files should be in the 13 column format produced by 2passtools score.\n\nOptions:\n  -o, --output-bed-fn TEXT        Output file path  [required]\n  -f, --ref-fasta-fn TEXT         Path to the fasta file that reads were\n                                  mapped to  [required]\n\n  -a, --annot-bed-fn TEXT         Optional BED file containing annotated\n                                  junctions\n\n  -j, --jad-size-threshold INTEGER\n                                  JAD to threshold at in the decision tree\n  -d, --primary-splice-local-dist INTEGER\n                                  Distance to search for alternative\n                                  donor/acceptors when calculating primary d/a\n\n  -m, --canonical-motifs TEXT     Intron motifs considered canonical in\n                                  organism. Should be four char DNA motifs\n                                  separated by vertical bar only\n\n  -w, --lr-window-size INTEGER    Sequence size to extract to train logistic\n                                  regression models\n\n  -k, --lr-kfold INTEGER          Number of cross validation k-folds for\n                                  logistic regression models\n\n  -lt, --lr-low-confidence-threshold FLOAT\n                                  Logistic regression low confidence threshold\n                                  for decision tree 2\n\n  -ht, --lr-high-confidence-threshold FLOAT\n                                  Logistic regression high confidence\n                                  threshold for decision tree 2\n\n  -c, --classifier-type [decision_tree|random_forest]\n                                  When annotated juncs are available, train\n                                  this classifier type\n\n  --keep-all-annot / --filter-annot\n                                  When annotated juncs are available, always\n                                  keep all annotated juncs\n\n  -p, --processes INTEGER\n  -s, --random-seed INTEGER\n  -v, --verbosity LVL             Either CRITICAL, ERROR, WARNING, INFO or\n                                  DEBUG\n\n  --help                          Show this message and exit.\n  ```\n\n"
      },
      "source": "https://raw.githubusercontent.com/bartongroup/2passtools/master/README.md",
      "technique": "header_analysis"
    }
  ]
}