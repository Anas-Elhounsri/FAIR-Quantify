{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Parmeggiani-Lab/elfin"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2017-06-09T22:04:36Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-10-23T18:39:55Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A tool suite for designing massive protein assmeblies"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9711076128056935,
      "result": {
        "original_header": "<a href=\"README_JP.md\">\u65e5\u672c\u8a9e\u306e\u3054\u6848\u5185\u306f\u3053\u3061\u3089</a>",
        "type": "Text_excerpt",
        "value": "Elfin is suite of tools that helps protein designers build structures by using smaller proteins as building blocks. Elfin does not make any OS/vendor/arch specific assumptions but it has only been tested on Linux, MacOS, and WSL. \nThis main repository hosts data processing scripts for v2.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Parmeggiani-Lab/elfin/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9564549320452376,
      "result": {
        "original_header": "What is elfin?",
        "type": "Text_excerpt",
        "value": "Elfin is a computational protein design tool suite based on [repeat protein assembly](https://www.sciencedirect.com/science/article/pii/S1047847717301417). In particular, elfin leverages a GA machine learning algorithm to auto-design and find the best module combination for the user. \nRepeat protein assembly uses repeat proteins as basic building blocks to construct larger proteins that form a 3D structure as close to the user's input description as possible. Credits to Fabio Parmeggiani (UoB), TJ Brunette (UoW), David Baker (UoW), and Simon McIntosh-Smith (UoB). \n* UoB: University of Bristol\n* UoW: University of Washington \nElfin v2 is an overhaul to add complex design capabilities to the original proof-of-concept ([branch v1](https://github.com/joy13975/elfin/tree/v1)). \nThe PDB files of the building blocks are hosted in a [private repository](https://github.com/joy13975/elfin-db). It was requested that these data be kept private before publishing (designed by F. Parmeggiani and Baker lab of the University of Washington). If you need access to these data, please contact [Fabio Parmeggiani](https://github.com/parmef) at fabio.parmeggiani@bristol.ac.uk. You can still run Elfin and design proteins without PDB data, but you will not be able to create the full atom model for your design at the final stage. \n"
      },
      "source": "https://raw.githubusercontent.com/Parmeggiani-Lab/elfin/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9673988727872178,
      "result": {
        "original_header": "Project Status",
        "type": "Text_excerpt",
        "value": "Functionality is mostly complete for v2, except for some minor leftover TODOs noted as issues in respective repositories.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Parmeggiani-Lab/elfin/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/Parmeggiani-Lab/elfin/wiki"
      },
      "source": "https://raw.githubusercontent.com/Parmeggiani-Lab/elfin/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Parmeggiani-Lab/elfin/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Parmeggiani-Lab/elfin/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Parmeggiani-Lab/elfin"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "elfin v2 "
      },
      "source": "https://raw.githubusercontent.com/Parmeggiani-Lab/elfin/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Parmeggiani-Lab/elfin/master/resources/diagrams/ProteinBristol.png"
      },
      "source": "https://raw.githubusercontent.com/Parmeggiani-Lab/elfin/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "2. Setup",
        "parent_header": [
          "What is elfin?",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "For the use of elfin-ui, make sure you have installed Blender (best: version 2.79), and saved the user preferences once, to create a folder in Library/Application Support, which is neccessary for elfin-ui installation.\n\nRun the following command which calls the auto setup script, downloading and installing elfin, elfin-solver, elfin-ui:\n```Bash\nbash <(curl -s https://raw.githubusercontent.com/Parmeggiani-Lab/elfin/master/setup_elfin)\n```\n\nNote: In order to authenticate for permission to the [elfin-data](https://github.com/Parmeggiani-Lab/elfin-data) repo, the script will ask you to enter Github username and password. If you have not been granted permission, you can skip this step by hitting enter twice.\n"
      },
      "source": "https://raw.githubusercontent.com/Parmeggiani-Lab/elfin/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9838006236997067,
      "result": {
        "original_header": "<a href=\"README_JP.md\">\u65e5\u672c\u8a9e\u306e\u3054\u6848\u5185\u306f\u3053\u3061\u3089</a>",
        "type": "Text_excerpt",
        "value": "Elfin is suite of tools that helps protein designers build structures by using smaller proteins as building blocks. Elfin does not make any OS/vendor/arch specific assumptions but it has only been tested on Linux, MacOS, and WSL. \n"
      },
      "source": "https://raw.githubusercontent.com/Parmeggiani-Lab/elfin/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8992159025689813,
      "result": {
        "original_header": "What is elfin?",
        "type": "Text_excerpt",
        "value": "![alt tag](resources/diagrams/ProteinBristol.png)\nFigure 1: the handwritten word \"Bristol\" drawn using protein modules, assembled by elfin (v1). Visualisation created using [PyMol](https://pymol.org).\n \n"
      },
      "source": "https://raw.githubusercontent.com/Parmeggiani-Lab/elfin/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Parmeggiani-Lab/elfin/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2016 Joy Yeh\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/Parmeggiani-Lab/elfin/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "elfin"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "Parmeggiani-Lab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 143639,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 5129,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 307,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Parmeggiani-Lab/elfin/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "1. Prerequisites",
        "parent_header": [
          "What is elfin?",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Firstly install the following software:"
      },
      "source": "https://raw.githubusercontent.com/Parmeggiani-Lab/elfin/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Required",
        "parent_header": [
          "What is elfin?",
          "Usage",
          "1. Prerequisites"
        ],
        "type": "Text_excerpt",
        "value": "1. [Python 3+](https://www.python.org/downloads/) for data processing scripts\n2. [Virtualenv](https://virtualenv.pypa.io/en/stable/) ^\n"
      },
      "source": "https://raw.githubusercontent.com/Parmeggiani-Lab/elfin/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Optional Tools",
        "parent_header": [
          "What is elfin?",
          "Usage",
          "1. Prerequisites"
        ],
        "type": "Text_excerpt",
        "value": "1. [PyMOL](https://www.pymol.org) for protein visualisation\n2. [Rosetta](https://www.rosettacommons.org/software/license-and-download) for protein optimization\n"
      },
      "source": "https://raw.githubusercontent.com/Parmeggiani-Lab/elfin/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 11:24:34",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 12
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Content",
        "parent_header": [
          "What is elfin?",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "   1. [Prerequisites](#1-prerequisites)\n   2. [Setup](#2-setup)\n   3. [Workflow](#3-design-workflow)\n   4. [Creating Output for v1](#4-creating-output-for-v1)\n   5. [Scripting](#5-scripting)\n"
      },
      "source": "https://raw.githubusercontent.com/Parmeggiani-Lab/elfin/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Required",
        "parent_header": [
          "What is elfin?",
          "Usage",
          "1. Prerequisites"
        ],
        "type": "Text_excerpt",
        "value": "1. [Python 3+](https://www.python.org/downloads/) for data processing scripts\n2. [Virtualenv](https://virtualenv.pypa.io/en/stable/) ^\n"
      },
      "source": "https://raw.githubusercontent.com/Parmeggiani-Lab/elfin/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Optional Tools",
        "parent_header": [
          "What is elfin?",
          "Usage",
          "1. Prerequisites"
        ],
        "type": "Text_excerpt",
        "value": "1. [PyMOL](https://www.pymol.org) for protein visualisation\n2. [Rosetta](https://www.rosettacommons.org/software/license-and-download) for protein optimization\n"
      },
      "source": "https://raw.githubusercontent.com/Parmeggiani-Lab/elfin/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Create Geometry",
        "parent_header": [
          "What is elfin?",
          "Usage",
          "3. Design Workflow"
        ],
        "type": "Text_excerpt",
        "value": "The workflow begins with drawing out the shape you would like to build using proteins. This is done via [elfin-ui](https://github.com/Parmeggiani-Lab/elfin-ui), where corresponding documentation is available.\n\nAfter drawing the specification in Blender using elfin's plugin, export it (elfin-ui command: #exp) to a JSON file. This JSON file is used as an Input for the Elfin-solver.\n\nAlternatively design can be completely done by placing modules in blender (elfin-ui), thus the solver (autodesign) is not needed, and exportet JSON files can directly converted to PDB/CIF using the stitch.py call. \n"
      },
      "source": "https://raw.githubusercontent.com/Parmeggiani-Lab/elfin/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Autodesign",
        "parent_header": [
          "What is elfin?",
          "Usage",
          "3. Design Workflow"
        ],
        "type": "Text_excerpt",
        "value": "Next, use [elfin-solver](https://github.com/Parmeggiani-Lab/elfin-solver) to auto-design the target geometry. The solver outputs another JSON file with design solutions.\n"
      },
      "source": "https://raw.githubusercontent.com/Parmeggiani-Lab/elfin/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Fixup",
        "parent_header": [
          "What is elfin?",
          "Usage",
          "3. Design Workflow"
        ],
        "type": "Text_excerpt",
        "value": "In Blender, open a blank file and import (elfin-ui command: #imp) the solver's output.\n\nFix up the solution if needed be (perhaps by closing any gaps or joining separated networks).\n\nExport (#exp) the solution again but this time, ensure no path guide objects are present because the next stage will not accept a JSON with path guide objects.\n"
      },
      "source": "https://raw.githubusercontent.com/Parmeggiani-Lab/elfin/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Export as PDB/CIF",
        "parent_header": [
          "What is elfin?",
          "Usage",
          "3. Design Workflow"
        ],
        "type": "Text_excerpt",
        "value": "Lastly, run the following command while being in the elfin folder:\n\n```\n. ./activate  # Activates venv\nstitch.py <PATH_TO_YOUR_EXPORTED_SOLUTION_JSON>\n```\n\nNote that ```. ./activate``` only needs to be run when `venv` is not active.\n"
      },
      "source": "https://raw.githubusercontent.com/Parmeggiani-Lab/elfin/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Data preprocessing:",
        "parent_header": [
          "What is elfin?",
          "Usage",
          "3. Design Workflow"
        ],
        "type": "Text_excerpt",
        "value": "Protein data has already been preprocessed and hosted in elfin-data, so for most people this step is not needed. If new data has been added to the module database or the preprocessing method has changed, then you may wish the redo the data preprocessing.\n\nSee [elfin-data](https://github.com/Parmeggiani-Lab/elfin-data)(private).\n"
      },
      "source": "https://raw.githubusercontent.com/Parmeggiani-Lab/elfin/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "4. Creating Output for v1",
        "parent_header": [
          "What is elfin?",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "This is no longer supported due to a breaking change in the `stitch.py`. There should be no need to do this anymore since elfin-solver v2 supports the same functionality for v1.\n"
      },
      "source": "https://raw.githubusercontent.com/Parmeggiani-Lab/elfin/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "5. Scripting",
        "parent_header": [
          "What is elfin?",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "You can use elfin's data processing classes in your own script or interactive shell.\n\nMake sure virtualenv is active:\n```\n. ./activate\n```\n\nBelow is an example that calls the stitcher:\n\n```Python\nimport elfinpy.utilities as utils\nimport elfinpy.pdb_utilities as pdb_utils\nimport elfinpy.stitch as stitch\n\nstruct = stitch.Stitcher(\n    spec=utils.read_json('resources/examples/half_snake_2x1h_deposit_test.json'),\n    xdb=utils.read_json('resources/xdb.json'),\n    pdb_dir='./resources/pdb_aligned/',\n    cappings_dir='./resources/pdb_relaxed/cappings',\n    metadata_dir='./resources/metadata/',\n    show_fusion=False,\n    disable_capping=False,\n    skip_unused=False).run()\n\nas_cif = True\n\nif as_cif:\n    pdb_utils.save_cif(struct=struct, path='test.cif')\nelse:\n    cid = 'A'\n    for c in struct[0].get_chains():\n        if cid > 'Z':\n            raise ValueError('Too many chains for PDB format')\n            # You might want to extend number of chains by using lowercase\n            # alphabets.\n\n        c.id = cid\n        cid = chr(ord(cid) + 1)\n\n    pdb_utils.save_pdb(struct=struct, path='test.pdb')\n```\n"
      },
      "source": "https://raw.githubusercontent.com/Parmeggiani-Lab/elfin/master/README.md",
      "technique": "header_analysis"
    }
  ]
}