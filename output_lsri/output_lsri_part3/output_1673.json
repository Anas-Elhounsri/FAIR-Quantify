{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Goodman-lab/DP5"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2015-08-26T15:13:25Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-08-12T16:30:28Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Python workflow for DP5 and DP4 analysis of organic molecules"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9275709635634534,
      "result": {
        "type": "Text_excerpt",
        "value": "This latest release represents a leap forward in structural uncertainty calculation through the addition of the new DP5\nmodule. By adding this functionality to our existing state of the art DP5 software, both DP4 and DP5\nprobabilities can be calculated alongside each other fully automatically. \nDP5 as described in our latest paper (https://doi.org/10.1039/D1SC04406K) calculates the standalone probability of structures being correct.\nIf a user cannot guarantee the correct structure is in the list of proposals, DP5 calculates the probability each is\ncorrect, quantifying this uncertainty. \nWhen the user is certain a one of their proposals is correct i.e in the case of elucidating relative stereochemistry,\nDP4 is the best metric to use, as this uses the additional information that one of the proposals must be correct. \nThe power of DP5 and DP4 however is greatest when they are used in conjunction as DP5 can be used to increase\nreliability and confidence in the conclusions of DP4 calculations (also described in the paper). \nDP5 (https://doi.org/10.1039/D1SC04406K) integrates NMR-AI, software for automatic processing, assignment\nand visualisation of raw NMR data. This functionality affords fully automated DP4 analysis of databases of molecules\nwith no user input. DP5 also utilises a fully revised version of PyDP4 updated for Python 3 and with major workflow\nimprovements. \nUsers can now also choose to run DP5 within a Graphical user interface for increased ease of use when single DP4\ncalculations. This graphical user interface can also be used to explore the spectra processed and assigned by NMR-AI.\nDP5 can also be utilised to perform assignments of NMR spectra for a single isomer of a molecule. These assignments\ncan be viewed in the graphical output from DP5 or investigated interactively using The included GUI application. \nMore details about the software can be found in the publication DP5 Straight from Spectrometer to Structure\n(https://doi.org/10.1039/D1SC04406K) and in the accompanying supporting information. \nAll the python  files and one utility to convert to and from TINKER\nnonstandard xyz file are in the attached archive. They are set up to work\nfrom a centralised location. It is not a requirement, but it is probably\nbest to add the location to the PATH variable. \nThe script currently is set up to use MacroModel for molecular mechanics and\nGaussian for DFT and it runs Gaussian on ziggy by default. NWChem and TINKER is also supported.\nThis setup has several requirements. \n1) One should have MacroModel or TINKER and NWChem or Gaussian.\nThe DP5 folder can contain settings.cfg, where the locations for the installed software packages\ncan be given, so that DP5 can launch them and use in the workflow. Examples on how to do\nthis are provided in the included settings.example - this should be renamed to settings.cfg and\nany relevant changes made. \n3) RDKit and OpenBabel are required for the automatic diastereomer generation and\nother manipulations of sdf files (renumbering, ring corner flipping), as well as molecule\ngraphical plotting. For OpenBabel this requirement includes Python bindings.\nThe following links provide instructions for building OpenBabel with Python bindings:\nhttp://openbabel.org/docs/dev/UseTheLibrary/PythonInstall.html\nhttp://openbabel.org/docs/dev/Installation/install.html#compile-bindings\nAlternatively, the OpenBabel package in conda repository has also lately become\nmore reliable, and is much easier to install via `conda install openbabel -c conda-forge'. Both OpenBabel 2.4.1 and 3.x are supported. \n4) Finally, to run calculations on a computational cluster, a passwordless\nssh connection should be set up in both directions -\ndesktop -> cluster and cluster -> desktop. In most cases the modification\nof the relevant functions in Gaussian.py or NWChem.py will be required\nto fit your situation. \n5) All development and testing was done on Linux. However, both the scripts\nand all the backend software should work equally well on MacOS with minor adjustments.\nWindows will require more modification, and is currently not supported. \nThis will open the main DP5 GUI window, the user can then select the required input files and the settings for MM and\nDFT calculations. The expected structure file format is *.sdf \nOnce the DP5 has finished all calculations the GUI will open a number of new tabs. These tabs display interactive\ncarbon and proton NMR spectra as processed and assigned by NMR-AI as well as interactive plots of the NMR prediction\nerrors and probabilities and conformer energies and populations. \nwhere Candidate is the sdf file containing 3D coordinates of the candidate\nstructure (without the extension). \nThe -w switch specifies the PyDP4 workflow, c specifies structure cleaning utilising RDkit, g specifies diastereomer\ngeneration, m molecular mechanics conformational searching, o DFT geometry optimisation, n DFT NMR calculation,\ne M062X single point energy calculations, s calculate DP4 statistics and w for DP5 statistics.\nThe default workflow is gnms, optimum workflow is gnomes. The letter a can be given in place of s, in the instance\nDP5 will analyse and assign the provided NMR spectra but not calculate any probabilities. \nIn addition the -s switch can be used to specify the solvent for use in MM and DFT calculations. Supported solvents are\nlisted in the TMSdata file. Other Gaussian/Jaguar/NWChem supported solvents can be used, but only with manually interpreted\ndata. \nIf solvent is not given, no solvent is used. \nwhere Candidates_inchs.inchi is a text file with all the desired inchi strings on separate lines. \n  -m {t,m}, --mm {t,m}  Select molecular mechanics program, t for tinker or m\n                        for macromodel, default is t \n  -d {j,g,n,z,w}, --dft {j,g,n,z,w}\n                        Select DFT program, j for Jaguar, g for Gaussian, n\n                        for NWChem, z for Gaussian on ziggy, w for NWChem on\n                        ziggy, default is z (jaguar is not yet implemented) \n  --StepCount STEPCOUNT\n                        Specify stereocentres for diastereomer generation \n  -s SOLVENT, --solvent SOLVENT\n                        Specify solvent to use for dft calculations \n  -q QUEUE, --queue QUEUE\n                        Specify queue for job submission on ziggy\n\t\t\t(default is s1) \n  -t NTAUT, --ntaut NTAUT\n                        Specify number of explicit tautomers per diastereomer\n                        given in structure files, must be a multiple of\n                        structure files \n  --ra RA               Specify ring atoms, for the ring to be rotated, useful\n                        for molecules with several 5-membered rings \n  -g, --GenOnly         Only generate diastereomers and tinker input files,\n                        but don't run any calculations (useful for diastereomer\n\t\t\tgeneration for calculations ran on computers\n\t\t\twithout OpenBabel) \n  -c STEREOCENTRES, --StereoCentres STEREOCENTRES\n                        Specify stereocentres for diastereomer generation \n  --pd                  Use python port of DP4 \n  -b BASICATOMS, --BasicAtoms BASICATOMS\n                        Generate protonated states on the specified atoms and\n                        consider as tautomers \nSections are seperated by empty lines.\n1) The first section is assigned C shifts, can also be (any).\n2) Second section is (un)assigned H shifts.\n3) This section defines chemically equivalent atoms. Each line is a new set,\nall atoms in a line are treated as equivalent, their computed shifts averaged.\n4) Final section, starting with a keyword OMIT defines atoms to be ignored.\nAtoms defined in this section do not need a corresponding shift in the NMR\ndescription \nPyDP4.py\nfile that should be called to start the DP5 workflow. Interprets the\narguments and takes care of the general workflow logic. \nInchiGen.py\nGets called if diastereomer and/or tautomer and/or protomer generation is\nused. Called by PyDP4.py. \nMacroModel.py\nContains all of the MacroModel specific code for input generation, calculation\nexecution and output interpretation. Called by PyDP4.py. \nTinker.py\nContains all of the Tinker specific code for input generation, calculation\nexecution and output interpretation. Called by PyDP4.py. \nGaussian.py\nContains all of the Gaussian specific code for input generation and calculation\nexecution. Called by PyDP4.py. \nNWChem.py\nContains all of the NWChem specific code for input generation and calculation\nexecution. Called by PyDP4.py. \nNMRDP4GTF.py\nTakes care of all the NMR description interpretation, equivalent atom\naveraging, Boltzmann averaging, tautomer population optimisation (if used)\nand DP4 input preparation and running either DP4.jar or DP4.py. Called by\nPyDP4.py \nDP4.py\nEquivalent and compact port of the original DP4 java implementation to Python\nof the same DP4 process. Has been updated to include multigaussian models. \nDP5.py\npython implementation of the DP5 probability calucaltion \nProton_processing.py/Carbon_processing.py\nNMR-AI python script from processing of raw proton/carbon NMR data \nProton_assignment.py/Carbon_assignment.py\nNMR-AI python script for assignment of raw proton/carbon NMR data \nProton_plotting.py/Carbon_plotting\nNMR-AI python script for plotting of raw proton/carbon NMR data processed and assigned by NMR-AI \nStructureInput.py\nScript for cleaning structures using RDkit, generating 3d geometries and reading InChI, Smiles and SMARTS input formats\n \n"
      },
      "source": "https://raw.githubusercontent.com/KristapsE/DP4-AI/master/README",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/KristapsE/DP4-AI/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 101
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Goodman-lab/DP5/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Goodman-lab/DP5"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/KristapsE/DP4-AI/master/README",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9389777885297558,
      "result": {
        "type": "Text_excerpt",
        "value": "version 1.0 \nCONTENTS\n1) Release Notes\n2) Requirements and Setup\n3) Usage\n4) NMR Description Format\n5) Included Utilites\n6) Code Organization \nRELEASE NOTES \nREQUIREMENTS AND SETUP \nAll the python  files and one utility to convert to and from TINKER\nnonstandard xyz file are in the attached archive. They are set up to work\nfrom a centralised location. It is not a requirement, but it is probably\nbest to add the location to the PATH variable. \nThe script currently is set up to use MacroModel for molecular mechanics and\nGaussian for DFT and it runs Gaussian on ziggy by default. NWChem and TINKER is also supported.\nThis setup has several requirements. \n1) One should have MacroModel or TINKER and NWChem or Gaussian.\nThe DP5 folder can contain settings.cfg, where the locations for the installed software packages\ncan be given, so that DP5 can launch them and use in the workflow. Examples on how to do\nthis are provided in the included settings.example - this should be renamed to settings.cfg and\nany relevant changes made. \n2) In order to run DP5 a python 3.6+ environment the following packages are required:\nnumpy scipy Cython matplotlib nmrglue statsmodels lmfit openbabel rdkit pathos qml\nAdditionally, the graphical user interface requires PyQT5 \n3) RDKit and OpenBabel are required for the automatic diastereomer generation and\nother manipulations of sdf files (renumbering, ring corner flipping), as well as molecule\ngraphical plotting. For OpenBabel this requirement includes Python bindings.\nThe following links provide instructions for building OpenBabel with Python bindings:\nhttp://openbabel.org/docs/dev/UseTheLibrary/PythonInstall.html\nhttp://openbabel.org/docs/dev/Installation/install.html#compile-bindings\nAlternatively, the OpenBabel package in conda repository has also lately become\nmore reliable, and is much easier to install via `conda install openbabel -c conda-forge'. Both OpenBabel 2.4.1 and 3.x are supported. \nthe folder containing the input files must be opened in terminal and the correct python environment activated. \npython PyDP4_GUI.py \nUSAGE - Terminal \nTo call the script from terminal: \nAlternatively: \n  -s SOLVENT, --solvent SOLVENT\n                        Specify solvent to use for dft calculations \n  --AssumeDFTDone       Assume RMSD pruning, DFT setup and DFT calculations\n                        have been run already (saves time when repeating DP4\n\t\t\tanalysis) \n"
      },
      "source": "https://raw.githubusercontent.com/KristapsE/DP4-AI/master/README",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8906373305664992,
      "result": {
        "type": "Text_excerpt",
        "value": "python PyDP4_GUI.py \nPyDP4.py Candidate CandidateNMR \nPyDP4.py -w gmns Candidate CandidateNMR \nPyDP4.py -s chloroform Candidate CandidateNMR \nPyDP4.py Candidate1 Candidate2 Candidate3 ... CandidateNMR \nPyDP4.py --InChI Candidates_inchis.inchi ... CandidateNMR \n:example ends \nGaussianDarwin.py\nCode specific to running Gaussian on Cambridge CSD3 HPC cluster. Called by PyDP4.py. \nnmrPredictNWChem.py\nExtracts NMR shifts from NWChem output files \nProton_processing.py/Carbon_processing.py\nNMR-AI python script from processing of raw proton/carbon NMR data \nProton_assignment.py/Carbon_assignment.py\nNMR-AI python script for assignment of raw proton/carbon NMR data \n"
      },
      "source": "https://raw.githubusercontent.com/KristapsE/DP4-AI/master/README",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Goodman-lab/DP5/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "PyDP4 integrated workflow for the running of MM, DFT GIAO calculations and\nDP4 analysis\nv0.4\n\nCopyright (c) 2015 Kristaps Ermanis, Jonathan M. Goodman\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/KristapsE/DP4-AI/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DP5"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "Goodman-lab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 408852,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Cython",
        "size": 13630,
        "type": "Programming_language",
        "value": "Cython"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 5272,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "DIGITAL Command Language",
        "size": 2517,
        "type": "Programming_language",
        "value": "DIGITAL Command Language"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KristapsE/DP4-AI/master/README"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "KristapsE",
          "type": "User"
        },
        "date_created": "2015-08-27T08:44:14Z",
        "date_published": "2015-08-27T12:39:36Z",
        "description": "Initial public release of PyDP4 workflow.\n",
        "html_url": "https://github.com/Goodman-lab/DP5/releases/tag/0.4",
        "release_id": 1730813,
        "tag": "0.4",
        "tarball_url": "https://api.github.com/repos/Goodman-lab/DP5/tarball/0.4",
        "type": "Release",
        "url": "https://api.github.com/repos/Goodman-lab/DP5/releases/1730813",
        "value": "https://api.github.com/repos/Goodman-lab/DP5/releases/1730813",
        "zipball_url": "https://api.github.com/repos/Goodman-lab/DP5/zipball/0.4"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 05:50:05",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 174
      },
      "technique": "GitHub_API"
    }
  ]
}