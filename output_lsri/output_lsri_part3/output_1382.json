{
  "acknowledgement": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Acknowledgements",
        "parent_header": [
          "Merfin"
        ],
        "type": "Text_excerpt",
        "value": "This code was developed as part of the T2T consortium chm13-polishing working group by the following individuals:\n* Giulio Formenti\n* Arang Rhie\n* Brian Walenz\n* Sergey Koren\n* Adam Phillippy\n\nWith special thanks for their support to integrate `--fitted_hist` option in GenomeScope 2.0:\n* Rhyker Ranallo-Benavidez\n* Michael Schatz\n"
      },
      "source": "https://raw.githubusercontent.com/arangrhie/merfin/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "Merfin"
        ],
        "type": "Text_excerpt",
        "value": "- Formenti, G., Rhie, A., Walenz, B.P. et al. Merfin: improved variant filtering, assembly evaluation and polishing via k-mer validation. Nat Methods (2022). https://doi.org/10.1038/s41592-022-01445-y\n\n- `-better` `-loose` `-strict` mode: Rhie A, Nurk S, Cechova M, Hoyt S, Taylor DJ et al., The complete sequence of a human Y chromosome. bioRxiv (2022) https://doi.org/10.1101/2022.12.01.518724"
      },
      "source": "https://raw.githubusercontent.com/arangrhie/merfin/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/arangrhie/merfin"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-07-16T01:22:53Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-04-25T02:41:39Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Evaluate variant calls and its combination with k-mer multiplicity"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.8403309978056053,
      "result": {
        "original_header": "Merfin",
        "type": "Text_excerpt",
        "value": "Improved variant filtering and polishing via k-mer validation\n \n"
      },
      "source": "https://raw.githubusercontent.com/arangrhie/merfin/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/arangrhie/merfin/wiki"
      },
      "source": "https://raw.githubusercontent.com/arangrhie/merfin/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/arangrhie/merfin/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/arangrhie/merfin/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "arangrhie/merfin"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Merfin"
      },
      "source": "https://raw.githubusercontent.com/arangrhie/merfin/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/arangrhie/merfin/master/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/arangrhie/merfin/master/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/arangrhie/merfin/master/scripts/merfin_dump.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/arangrhie/merfin/master/scripts/qv.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/arangrhie/merfin/master/scripts/merfin.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/arangrhie/merfin/master/scripts/merfin_hist.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/arangrhie/merfin/master/scripts/buildRelease.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/arangrhie/merfin/master/scripts/parallel2/variantCaller.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/arangrhie/merfin/master/scripts/parallel2/merfin.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/arangrhie/merfin/master/scripts/parallel2/_submit_variantCaller.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/arangrhie/merfin/master/scripts/parallel2/_submit_merfin.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/arangrhie/merfin/master/scripts/parallel2/variantCaller_cns.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/arangrhie/merfin/master/scripts/cartesian_plot/simplify_dump.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/arangrhie/merfin/master/scripts/parallel1/consensus.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/arangrhie/merfin/master/scripts/parallel1/run.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/arangrhie/merfin/master/scripts/parallel1/merfin.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/arangrhie/merfin/master/scripts/parallel1/_submit_merfin.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/arangrhie/merfin/master/scripts/reformat_arrow/reshape_arrow.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "Merfin"
        ],
        "type": "Text_excerpt",
        "value": "* Required: git >=v.2.12, gcc >=v7.1 with OMP (only for parallelization)\n\n```\ngit clone https://github.com/arangrhie/merfin.git\ncd merfin/src\nmake -j 12\n```\n\nDuring installation, `meryl` and `meryl-utility` are cloned as submodules, and `meryl`, `merfin` will be installed under `merfin/build/bin/`.\nInstallation will take less than a minute on a typical computer.\n\n* Recommended: [GenomeScope 2.0](https://github.com/tbenavi1/genomescope2.0) for polishing and assembly evaluation\n"
      },
      "source": "https://raw.githubusercontent.com/arangrhie/merfin/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/arangrhie/merfin/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Apache License 2.0",
        "spdx_id": "Apache-2.0",
        "type": "License",
        "url": "https://api.github.com/licenses/apache-2.0",
        "value": "https://api.github.com/licenses/apache-2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
      },
      "source": "https://raw.githubusercontent.com/arangrhie/merfin/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "merfin"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "arangrhie"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 78044,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 67919,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 41110,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 27931,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 17001,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 6397,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 6317,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 1092,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/arangrhie/merfin/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "arangrhie",
          "type": "User"
        },
        "date_created": "2022-12-02T23:31:21Z",
        "date_published": "2022-12-02T23:40:22Z",
        "description": "Polishing modes added that does not use k* (reference is partially from the same individual as the reads, or reference vs. read copy numbers are not expected to match).\r\n\r\n* filter variant calls for polishing\r\n  - Reference is from the same individual: `-polish` (uses `k*`)\r\n  - Reference is partially from the same individual, or copy-number estimates are unstable. This mode disables `k*`. \r\n    - `-better`: Almost identical to `-polish`, with `k*` disabled (deprecated)\r\n    - `-loose` : Remove variants only when the num. missing (error) k-mers increase. Neutral alternate paths that score equally to the reference path are *included*.\r\n    - `-strict`: Include variants only when the num. missing (error) k-mers decrease. Neutral alternative paths that score equally to the reference path are *excluded*",
        "html_url": "https://github.com/arangrhie/merfin/releases/tag/v1.1",
        "name": "Merfin v1.1",
        "release_id": 84867868,
        "tag": "v1.1",
        "tarball_url": "https://api.github.com/repos/arangrhie/merfin/tarball/v1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/arangrhie/merfin/releases/84867868",
        "value": "https://api.github.com/repos/arangrhie/merfin/releases/84867868",
        "zipball_url": "https://api.github.com/repos/arangrhie/merfin/zipball/v1.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "brianwalenz",
          "type": "User"
        },
        "date_created": "2021-09-24T15:24:12Z",
        "date_published": "2021-09-24T20:03:45Z",
        "description": "The first official release of Merfin. To compile from source run `make` in the `src` folder.",
        "html_url": "https://github.com/arangrhie/merfin/releases/tag/v1.0",
        "name": "merfin v1.0",
        "release_id": 50216527,
        "tag": "v1.0",
        "tarball_url": "https://api.github.com/repos/arangrhie/merfin/tarball/v1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/arangrhie/merfin/releases/50216527",
        "value": "https://api.github.com/repos/arangrhie/merfin/releases/50216527",
        "zipball_url": "https://api.github.com/repos/arangrhie/merfin/zipball/v1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running Merfin",
        "parent_header": [
          "Merfin"
        ],
        "type": "Text_excerpt",
        "value": "_[More details with examples and expected run times can be found in the WIKI](https://github.com/arangrhie/merfin/wiki/Best-practices-for-Merfin). Please read it through before running Merfin._\n\n\nMerfin can be used to:\n* filter any variant calls for accurate genotyping (`-filter`: reference is from another individual, i.e. GRCh38)\n* assess collapsed or duplicated region of the assembly (`-hist` or `-dump`)\n* QV* for all scaffolds and the assembly (`-hist`)\n* K* completeness (`-completeness`)\n* filter variant calls for polishing\n  - Reference is from the same individual: `-polish` (uses `k*`)\n  - Reference is partially from the same individual, or copy-number estimates are unstable. This mode disables `k*`. \n    - `-better`: Almost identical to `-polish`, with `k*` disabled (deprecated)\n    - `-loose` : Remove variants only when the num. missing (error) k-mers increase. Neutral alternate paths that score equally to the reference path are *included*.\n    - `-strict`: Include variants only when the num. missing (error) k-mers decrease. Neutral alternative paths that score equally to the reference path are *excluded*\n"
      },
      "source": "https://raw.githubusercontent.com/arangrhie/merfin/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Updates",
        "parent_header": [
          "Merfin",
          "Running Merfin"
        ],
        "type": "Text_excerpt",
        "value": "* 2022-12-02 `-better`, `-loose`, `-strict` modes used for polishing the T2T-HG002XY assemblies are added\n\n"
      },
      "source": "https://raw.githubusercontent.com/arangrhie/merfin/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Determine kmer copy numbers",
        "parent_header": [
          "Merfin",
          "Running Merfin"
        ],
        "type": "Text_excerpt",
        "value": "Except for the `-filter` mode, a haploid/diploid peak estimate must be provided (`-peak`).\n\n\nThis can be obtained from the kmer histogram or computed using tools such as [GenomeScope 2.0](https://github.com/tbenavi1/genomescope2.0) (kcov value).\n\n\nAs a rule of thumb, the `-peak` should be chosen from:\n- haploid peak: partially-phased (assembly has both primary and alternate haplotigs) or fully-phased assemblies (i.e. trio-binning, trio-hifiasm, ...).\n- diploid (i.e. twice the haploid peak): pseudo-haploid assembly (haploid representation of a diploid genome)\n\n\nIn addition to the `-peak`, we recommend to provide a lookup table of kmer multiplicities with fitted copy numbers and probabilities (`-prob`).\n\nThe lookup table can be generated with `--fitted_hist` option we added to [GenomeScope 2.0](https://github.com/tbenavi1/genomescope2.0). The probability is estimated for 0 to 4-copy kmer multiplicity and is prioritized over the estimates from `-peak`. Providing the fitted probability significantly improves the accuracy of all analyses.\n\n\nOnce downloaded and installed, run GenomeScope using the following options:\n\n```\nRscript genomescope.R -i <kmer_histogram>  -k <k_size> -o <output_folder> -p <ploidy> --fitted_hist [ploidy] [verbose]\nkmer_histogram  tab-delimited, 2-column file with (same as for Genomescope2, usually generated by meryl hist, or jellyfish)\nk_size          kmer length used for the histogram\nploidy          haploid/diploid (default = 2)\n--fitted_hist     generates fitted hist plot and lookup_table.txt\n```\n"
      },
      "source": "https://raw.githubusercontent.com/arangrhie/merfin/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Assess collapses and duplications",
        "parent_header": [
          "Merfin",
          "Running Merfin"
        ],
        "type": "Text_excerpt",
        "value": "The output of `-dump` can be further converted to `.wig/.bw` tracks for visualization on IGV or UCSC Genome Browser with:\n\n```shell\nawk 'BEGIN{print \"track autoScale=on\"}{if($1!=chr){chr=$1; print \"variableStep chrom=\"chr\" span=1\"};if($3!=0){printf $2+1\"\\t\"$5\"\\n\"}}' $dump_output > $dump_output.wig\n# Generate chromosome sizes:\nawk '$0 ~ \">\" {if (NR > 1) {print c;} c=0;printf substr($0,2,100) \"\\t\"; } $0 !~ \">\" {c+=length($0);} END { print c; }' genome.fasta > chr.sizes\n# Convert to bigWig:\nwigToBigWig $dump_output.Wig chr.sizes $dump_output.bw\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/arangrhie/merfin/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Assess correlation between data types",
        "parent_header": [
          "Merfin",
          "Running Merfin",
          "Assess collapses and duplications"
        ],
        "type": "Text_excerpt",
        "value": "For multiple data types (e.g. HiFi and Illumina), the genome-wide K* agreement can be assessed by generating a cartesian plot.\nUse the same output of `-dump` with the scripts under `scripts/cartesian_plot`.\n\n"
      },
      "source": "https://raw.githubusercontent.com/arangrhie/merfin/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Assess per base QV",
        "parent_header": [
          "Merfin",
          "Running Merfin"
        ],
        "type": "Text_excerpt",
        "value": "Merfin quickly produces [Merqury](https://github.com/marbl/merqury) QV estimates for each scaffold and genome-wide averages when `-hist` is used. Merqury QV estimate consider only kmers missing from the read sets. In addition, Merfin produces a QV* estimate, which accounts also for kmers that are seen in excess with respect to their expected multiplicity predicted from the reads.\n\nThese analyses can be further refined when the lookup table is provided (`-prob`),  Missing kmers then include plausible low frequency kmers. 0 to 4-copy kmer multiplicity estimates are weighted for the probability that the multiplicity estimate was correct. \n"
      },
      "source": "https://raw.githubusercontent.com/arangrhie/merfin/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Filter variant calls for polishing",
        "parent_header": [
          "Merfin",
          "Running Merfin"
        ],
        "type": "Text_excerpt",
        "value": "The input `.vcf` can be supplied with the `-polish` option. The includes variants that passed the Merfin screening.\n\nOnce the filtered `.vcf` is generated, the assembly can be polished with:\n\n```\nbcftools view -Oz $merfin_output.polish.vcf > $merfin_output.polish.vcf.gz #bgzip merfin output\nbcftools index $merfin_output.polish.vcf.gz\nbcftools consensus $merfin_output.polish.vcf.gz -f assembly.fasta -H 1 > polished_assembly.fasta # -H 1 applies only first allele from GT at each position\n```\n\nThe `-better`, `-loose`, `-strict` modes were developed for polishing the T2T-HG002XY chromosome, which the reference for aligning reads was created with T2T-CHM13v1.1 autosomes. Our recommendation is to use `-loose` mode in case the variant call set is highly curated. More details can be found in [this preprint](https://doi.org/10.1101/2022.12.01.518724)\n\n"
      },
      "source": "https://raw.githubusercontent.com/arangrhie/merfin/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Helper",
        "parent_header": [
          "Merfin",
          "Running Merfin"
        ],
        "type": "Text_excerpt",
        "value": "```\ncd ../build/bin/\n./merfin\n\nusage: merfin <report-type>        \\\n         -sequence <seq.fasta>     \\\n         -readmers <read.meryl>    \\\n         -peak     <haploid_peak>  \\\n         -prob     <lookup_table>  \\\n         -vcf      <input.vcf>     \\\n         -output   <output>        \n\n  Predict the kmer consequences of variant calls <input.vcf> given the consensus sequence <seq.fasta>\n  and lookup the k-mer multiplicity in the consensus sequence <seq.meryl> and in the reads <read.meryl>.\n\n  Input -sequence and -vcf files can be FASTA or FASTQ; uncompressed, gz, bz2 or xz compressed\n\n  Each readmers can be filtered by value.  More advanced filtering\n  requires a new database to be constructed using meryl.\n    -min     m     Ignore kmers with value below m\n    -max     m     Ignore kmers with value above m\n    -threads t     Multithreading for meryl lookup table construction, dump and hist.\n\n  Memory usage can be limited, within reason, by sacrificing kmer lookup\n  speed.  If the lookup table requires more memory than allowed, the program\n  exits with an error.\n    -memory  m     Don't use more than m GB memory for loading mers\n\n  For k* based evaluation and polishing, -peak is required with optional -prob.\n    -peak    m     Required input to hard set copy 1 and infer multiplicity to copy number (recommended).\n    -prob    file  Optional input vector of probabilities. Adjust multiplicity to copy number\n                   in case both -prob and -peak are provided, -prob takes higher priority\n                   than -peak for multiplicity listed in the vector table.\n\n  By default, <seq.fasta>.meryl will be generated unless -seqmers is provided.\n    -seqmers seq.meryl  Optional input for pre-built sequence meryl db\n\n  Exactly one report type must be specified.\n\n\n  -filter\n   Filter variants within distance k and their combinations by missing k-mers.\n   Assumes the reference (-sequence) is from a different individual.\n   Required: -sequence, -readmers, -vcf, and -output\n   Optional: -comb <N>  set the max N of combinations of variants to be evaluated (default: 15)\n             -nosplit   without this options combinations larger than N are split\n             -debug     output a debug log, into <output>.THREAD_ID.debug.gz\n\n   Output: <output>.filter.vcf : variants chosen.\n\n\n  -polish\n   Score each variant, or variants within distance k and their combinations by k*.\n   Assumes the reference (-sequence) is from the same individual.\n\n   Required: -sequence, -readmers, -peak, -vcf, and -output\n   Optional: -comb <N>    set the max N of combinations of variants to be evaluated (default: 15)\n             -nosplit     without this options combinations larger than N are split\n             -prob <file> use probabilities to adjust multiplicity to copy number (recommended)\n             -debug       output a debug log, into <output>.THREAD_ID.debug.gz\n\n   Output: <output>.polish.vcf : variants chosen.\n     use bcftools view -Oz <output>.polish.vcf and bcftools consensus -H 1 -f <seq.fata> to polish.\n     first ALT in heterozygous alleles are usually better supported by avg. |k*|.\n\n\n  -loose (least conservative)\n   Score each variant, or variants within distance k and their combinations without k*.\n   Assumes the reference (-sequence) is partially from the same individual.\n   Remove variants only when the num. missing (error) k-mers increase.\n   Neutral alternative paths that score equally to the reference path are included.\n   If multiple candidate paths tie, path with most ALT calls gets chosen.\n\n   Required: -sequence, -readmers, -peak, -vcf, and -output\n   Optional: -comb <N>    set the max N of combinations of variants to be evaluated (default: 15)\n             -nosplit     without this options combinations larger than N are split\n             -prob <file> use probabilities to adjust multiplicity to copy number (recommended)\n             -debug       output a debug log, into <output>.THREAD_ID.debug.gz\n\n   Output: <output>.polish.vcf : variants chosen.\n     use bcftools view -Oz <output>.polish.vcf and bcftools consensus -H 1 -f <seq.fata> to polish.\n     first ALT in heterozygous alleles are usually better supported by avg. |k*|.\n\n\n  -strict (most conservative)\n   Score each variant, or variants within distance k and their combinations without k*.\n   Assumes the reference (-sequence) is partially from the same individual.\n   Include variants only when the num. missing (error) k-mers decrease.\n   Neutral alternative paths that score equally to the reference path are excluded.\n   If multiple candidate paths tie, path with least ALT calls gets chosen.\n\n   Required: -sequence, -readmers, -peak, -vcf, and -output\n   Optional: -comb <N>    set the max N of combinations of variants to be evaluated (default: 15)\n             -nosplit     without this options combinations larger than N are split\n             -prob <file> use probabilities to adjust multiplicity to copy number (recommended)\n             -debug       output a debug log, into <output>.THREAD_ID.debug.gz\n\n   Output: <output>.polish.vcf : variants chosen.\n     use bcftools view -Oz <output>.polish.vcf and bcftools consensus -H 1 -f <seq.fata> to polish.\n     first ALT in heterozygous alleles are usually better supported by avg. |k*|.\n\n\n  -better (legacy, nearly identical to -polish without k*)\n   Score each variant, or variants within distance k and their combinations without k*.\n   Assumes the reference (-sequence) is partially from the same individual.\n   Include variants only when the num. missing (error) k-mers decrease.\n   Neutral alternative paths that score equally to the reference path are excluded.\n   If multiple candidate paths tie, the longest path is chosen.\n\n   Required: -sequence, -readmers, -peak, -vcf, and -output\n   Optional: -comb <N>    set the max N of combinations of variants to be evaluated (default: 15)\n             -nosplit     without this options combinations larger than N are split\n             -prob <file> use probabilities to adjust multiplicity to copy number (recommended)\n             -debug       output a debug log, into <output>.THREAD_ID.debug.gz\n\n   Output: <output>.polish.vcf : variants chosen.\n     use bcftools view -Oz <output>.polish.vcf and bcftools consensus -H 1 -f <seq.fata> to polish.\n     first ALT in heterozygous alleles are usually better supported by avg. |k*|.\n     \n\n  -hist\n   Generate a 0-centered k* histogram for sequences in <input.fasta>.\n     Positive k* values are expected collapsed copies.\n     Negative k* values are expected expanded  copies.\n     Closer to 0 means the expected and found k-mers are well balenced, 1:1.\n\n   Required: -sequence, -readmers, -peak, and -output.\n   Optional: -prob <file>  use probabilities to adjust multiplicity to copy number (recommended)\n\n   Output: k* <tab> frequency\n           Reports QV at the end, in stderr.\n\n\n  -dump\n   Dump readK, asmK, and k* per bases (k-mers) in <input.fasta>.\n\n   Required: -sequence, -readmers, -peak, and -output\n   Optional: -skipMissing  skip the missing kmer sites to be printed\n             -prob <file>  use probabilities to adjust multiplicity to copy number (recommended)\n\n   Output: seqName <tab> seqPos <tab> readK <tab> asmK <tab> k*\n      seqName    - name of the sequence this kmer is from\n      seqPos     - start position (0-based) of the kmer in the sequence\n      readK      - normalized read copies (read multiplicity / peak)\n      asmK       - assembly copies as found in <seq.meryl>\n      k*         - 0-centered k* value\n\n\n  -completeness\n   Compute kmer completeness using expected copy numbers for all kmers.\n\n   Required: -seqmers (or -sequence), -readmers, -peak\n   Optional: -prob <file>  use probabilities to adjust multiplicity to copy number (recommended)\n\n   Output: total kmers in reads, number of kmers under the expected copy number, and completeness\n\n\n  Optional output from -debug in -filter and -polish:\n   <output>.THREAD_ID.debug.gz : some useful info for debugging.\n      seqName <tab> varMerStart <tab> varMerEnd <tab> varMerSeq <tab> score <tab> path\n      varMerID                - unique numbering, starting from 0\n      varMerRange             - seqName:start-end. position (0-based) of the variant (s),\n                                including sequences upstream and downstream of k-1 bp\n      varMerSeq               - combination of variant sequence to evalute\n      numMissings             - total number of missing kmers\n      min k*                  - minimum of all |k*| for non-missing kmers. -1 when all kmers are missing.\n      max k*                  - maximum of all |k*| for non-missing kmers. -1 when all kmers are missing.\n      median k*               - median  of all |k*| for non-missing kmers. -1 when all kmers are missing.\n      avg k*                  - average of all |k*| for non-missing kmers. -1 when all kmers are missing.\n      avg ref-alt k*          - difference between reference and alternate average k*.\n      delta kmer multiplicity - cumulative sum of kmer multiplicity variation.\n                                positive values imply recovered kmers, while\n                                negative values imply overrepresented kmers introduced.\n      record                  - vcf record with <tab> replaced to <space>.\n                                only non-reference alleles are printed with GT being 1/1.\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/arangrhie/merfin/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "download",
    "requirements",
    "contact",
    "contributors",
    "usage",
    "faq",
    "support",
    "identifier",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 04:47:35",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 63
      },
      "technique": "GitHub_API"
    }
  ]
}