{
  "application_domain": [
    {
      "confidence": 0.9427017142861078,
      "result": {
        "type": "String",
        "value": "Graphs"
      },
      "technique": "supervised_classification"
    },
    {
      "confidence": 37.31,
      "result": {
        "type": "String",
        "value": "Natural Language Processing"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "type": "Text_excerpt",
        "value": "Sazan Mahbub, Md Shamsuzzoha Bayzid, EGRET: edge aggregated graph attention networks and transfer learning improve protein\u2013protein interaction site prediction, Briefings in Bioinformatics, 2022;, bbab578, https://doi.org/10.1093/bib/bbab578\n"
      },
      "source": "https://raw.githubusercontent.com/Sazan-Mahbub/EGAT/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "BibTeX:",
        "parent_header": [
          "Citation"
        ],
        "type": "Text_excerpt",
        "value": "```\n@article{10.1093/bib/bbab578,\n    author = {Mahbub, Sazan and Bayzid, Md Shamsuzzoha},\n    title = \"{EGRET: edge aggregated graph attention networks and transfer learning improve protein\u2013protein interaction site prediction}\",\n    journal = {Briefings in Bioinformatics},\n    year = {2022},\n    month = {01},\n    abstract = \"{Protein\u2013protein interactions (PPIs) are central to most biological processes. However, reliable identification of PPI sites using conventional experimental methods is slow and expensive. Therefore, great efforts are being put into computational methods to identify PPI sites.We present Edge Aggregated GRaph Attention NETwork (EGRET), a highly accurate deep learning-based method for PPI site prediction, where we have used an edge aggregated graph attention network to effectively leverage the structural information. We, for the first time, have used transfer learning in PPI site prediction. Our proposed edge aggregated network, together with transfer learning, has achieved notable improvement over the best alternate methods. Furthermore, we systematically investigated EGRET\u2019s network behavior to provide insights about the causes of its decisions.EGRET is freely available as an open source project at https://github.com/Sazan-Mahbub/EGRET.shams\\_bayzid@cse.buet.ac.bd}\",\n    issn = {1477-4054},\n    doi = {10.1093/bib/bbab578},\n    url = {https://doi.org/10.1093/bib/bbab578},\n    note = {bbab578},\n    eprint = {https://academic.oup.com/bib/advance-article-pdf/doi/10.1093/bib/bbab578/42350487/bbab578.pdf},\n}\n\n```\n"
      },
      "source": "https://raw.githubusercontent.com/Sazan-Mahbub/EGAT/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Mahbub, Sazan and Bayzid, Md Shamsuzzoha",
        "doi": "10.1093/bib/bbab578",
        "format": "bibtex",
        "title": "{EGRET: edge aggregated graph attention networks and transfer learning improve protein\u2013protein interaction site prediction}",
        "type": "Text_excerpt",
        "url": "https://doi.org/10.1093/bib/bbab578",
        "value": "@article{10.1093/bib/bbab578,\n    eprint = {https://academic.oup.com/bib/advance-article-pdf/doi/10.1093/bib/bbab578/42350487/bbab578.pdf},\n    note = {bbab578},\n    url = {https://doi.org/10.1093/bib/bbab578},\n    doi = {10.1093/bib/bbab578},\n    issn = {1477-4054},\n    abstract = {{Protein\u2013protein interactions (PPIs) are central to most biological processes. However, reliable identification of PPI sites using conventional experimental methods is slow and expensive. Therefore, great efforts are being put into computational methods to identify PPI sites.We present Edge Aggregated GRaph Attention NETwork (EGRET), a highly accurate deep learning-based method for PPI site prediction, where we have used an edge aggregated graph attention network to effectively leverage the structural information. We, for the first time, have used transfer learning in PPI site prediction. Our proposed edge aggregated network, together with transfer learning, has achieved notable improvement over the best alternate methods. Furthermore, we systematically investigated EGRET\u2019s network behavior to provide insights about the causes of its decisions.EGRET is freely available as an open source project at https://github.com/Sazan-Mahbub/EGRET.shams\\_bayzid@cse.buet.ac.bd}},\n    month = {01},\n    year = {2022},\n    journal = {Briefings in Bioinformatics},\n    title = {{EGRET: edge aggregated graph attention networks and transfer learning improve protein\u2013protein interaction site prediction}},\n    author = {Mahbub, Sazan and Bayzid, Md Shamsuzzoha},\n}"
      },
      "source": "https://raw.githubusercontent.com/Sazan-Mahbub/EGAT/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Sazan-Mahbub/EGRET"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-11-03T08:41:44Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-07-03T21:13:40Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9714783999325043,
      "result": {
        "original_header": "EGRET",
        "type": "Text_excerpt",
        "value": "This repository contains the official implementation of our paper [*\"EGRET: **E**dge Aggregated **GR**aph Attention N**ET**works and Transfer Learning Improve Protein-Protein Interaction Site Prediction\"*](https://doi.org/10.1093/bib/bbab578) published in the journal [Briefings in Bioinformatics](https://academic.oup.com/bib). \nIf you use any part of this repository, we shall be obliged if you cite [our paper](https://doi.org/10.1093/bib/bbab578).\n \n"
      },
      "source": "https://raw.githubusercontent.com/Sazan-Mahbub/EGAT/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8315850094345991,
      "result": {
        "original_header": "Output format",
        "type": "Text_excerpt",
        "value": "  - To access the edges of the graphs representions of the input proteins, please run the following commands:  \n    ```python\n    graph_edges = output['edges']  \n    protein_index = 0  \n    print(graph_edges[protein_index])  \n    ```\n    These commands will print a [*numpy array*](https://numpy.org/doc/stable/reference/generated/numpy.array.html) corresponding to the protein at index \"0\" of \"protein_list.txt\" file. Each row of this *numpy array* corresponds to a *neighborhood*, that contains the indices of the neighboring nodes (residues) of one residue (i.e. *the center of the neighborhood*). (please see [our paper](https://doi.org/10.1101/2020.11.07.372466) for more details). This *center of the neighborhood* is the row count of the matrix. The following example command will print the *neighborhood* (neighboring residue indices) of the residue with index *2* -  \n    BASH5*\n  \n  - To access the attention scores associated with the edges, please run the following commands:  \n    BASH6*\n    These commands will print a [*numpy array*](https://numpy.org/doc/stable/reference/generated/numpy.array.html) corresponding to the protein at index \"0\" of \"protein_list.txt\" file. Each row of this *numpy array* contains the attention scores associated with the corresponding edge. In the following example command, *center of the neighborhood* is the residue at position *2*. This command will print the attention scores associated with the edges from its neighboring residues (nodes) to this residue-  \n    BASH7*\n \n"
      },
      "source": "https://raw.githubusercontent.com/Sazan-Mahbub/EGAT/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "ProtBERT model weight",
        "parent_header": [
          "Usage",
          "Download pretrained-model weights:"
        ],
        "type": "Text_excerpt",
        "value": "1. Please download the pretrained model weight-file \"pytorch_model.bin\" from [here](https://drive.google.com/file/d/1nqExt_EsR6PngdgvmQLMEXNn0FB6Dkep/view?usp=sharing).\n2. Place this weight-file in the folder \"EGRET/inputs/ProtBert_model\".\nIf you use this pretrained model for your publication, please cite the paper [ProtTrans: Towards Cracking the Language of Life\u2019s Code Through Self-Supervised Deep Learning and High Performance Computing](https://www.biorxiv.org/content/10.1101/2020.07.12.199554v2)"
      },
      "source": "https://raw.githubusercontent.com/Sazan-Mahbub/EGAT/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "EGRET model weight",
        "parent_header": [
          "Usage",
          "Download pretrained-model weights:"
        ],
        "type": "Text_excerpt",
        "value": "1. Please download the pretrained model weight-file \"egret_model_weight.dat\" from [here](https://drive.google.com/file/d/195Cs22CtuSZscqxARbAIgm1zFO_9rHr4/view?usp=drive_link).\n2. Place this weight-file in the folder \"EGRET/models\".\n"
      },
      "source": "https://raw.githubusercontent.com/Sazan-Mahbub/EGAT/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Sazan-Mahbub/EGAT/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 8
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Sazan-Mahbub/EGRET/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Sazan-Mahbub/EGRET"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "EGRET"
      },
      "source": "https://raw.githubusercontent.com/Sazan-Mahbub/EGAT/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Pytorch and DGL installation",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "We implemented our method using PyTorch and Deep Graph Library (DGL). Please install these two for successfully running our code. Necessary installation instructions are available at the following links: \n1. [Python 3.9.x](https://www.python.org/downloads/)\n2. [PyTorch 2.2.x](https://pytorch.org/get-started/locally/#start-locally)\n3. [Deep Graph Library 2.3.x](https://www.dgl.ai/pages/start.html)\n"
      },
      "source": "https://raw.githubusercontent.com/Sazan-Mahbub/EGAT/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Sazan-Mahbub/EGRET/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2020 Sazan-Mahbub\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/Sazan-Mahbub/EGAT/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "EGRET"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "Sazan-Mahbub"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 31301,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Sazan-Mahbub/EGAT/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Run inference to predict numeric propensity (of each of the residues) for interaction",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "1. From command line navigate to the folder \"EGRET\" (where the \"run_egret.py\" file is situated).\n2. Please run the following command:\n```python\npython run_egret.py\n```\n3. The command above will generate the results in the \"EGRET/outputs\" folder.\n"
      },
      "source": "https://raw.githubusercontent.com/Sazan-Mahbub/EGAT/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 11:25:24",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 29
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "ProtBERT model weight",
        "parent_header": [
          "Usage",
          "Download pretrained-model weights:"
        ],
        "type": "Text_excerpt",
        "value": "1. Please download the pretrained model weight-file \"pytorch_model.bin\" from [here](https://drive.google.com/file/d/1nqExt_EsR6PngdgvmQLMEXNn0FB6Dkep/view?usp=sharing).\n2. Place this weight-file in the folder \"EGRET/inputs/ProtBert_model\".\nIf you use this pretrained model for your publication, please cite the paper [ProtTrans: Towards Cracking the Language of Life\u2019s Code Through Self-Supervised Deep Learning and High Performance Computing](https://www.biorxiv.org/content/10.1101/2020.07.12.199554v2)"
      },
      "source": "https://raw.githubusercontent.com/Sazan-Mahbub/EGAT/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "EGRET model weight",
        "parent_header": [
          "Usage",
          "Download pretrained-model weights:"
        ],
        "type": "Text_excerpt",
        "value": "1. Please download the pretrained model weight-file \"egret_model_weight.dat\" from [here](https://drive.google.com/file/d/195Cs22CtuSZscqxARbAIgm1zFO_9rHr4/view?usp=drive_link).\n2. Place this weight-file in the folder \"EGRET/models\".\n"
      },
      "source": "https://raw.githubusercontent.com/Sazan-Mahbub/EGAT/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Input Data",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "To store input-features, navigate to the folder \"EGRET/inputs\". In this folder, follow the following steps:\n1. Store the PDB files of the isolated proteins that shall be used for prediction in the folder \"pdb_files\". Rename the PDB files in the format: \"\\<an arbritary name\\>\\_\\<chain IDs\\>\". Please see the example PDB files provided in this folder. Please provide the real chain IDs (as available in the PDB file) after the underscore (\"\\_\") correctly. (In the provided examples \\<an arbritary name\\> is the PDB ID of a complex in which this input protein is one of the subunits. It is not mendatory.)\n2. List all the protein-names in the file \"protein_list.txt\"\n"
      },
      "source": "https://raw.githubusercontent.com/Sazan-Mahbub/EGAT/main/README.md",
      "technique": "header_analysis"
    }
  ]
}