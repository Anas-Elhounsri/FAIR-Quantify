{
  "application_domain": [
    {
      "confidence": 56.8,
      "result": {
        "type": "String",
        "value": "Natural Language Processing"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/RichJackson/cogstack"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2016-02-12T12:23:38Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-21T14:35:04Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Database - Elasticsearch realtime mapping. With NLP goodiness."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "parent_header": [
          "**WELCOME TO Cogstack**"
        ],
        "type": "Text_excerpt",
        "value": "CogStack is a lightweight distributed, fault tolerant database processing architecture, intended to make NLP processing and\n preprocessing easier in resource constained environments. It makes use of the Spring Batch framework in order to provide a fully configurable\n pipeline with the goal of generating an annotated JSON that can be readily indexed into elasticsearch, or pushed back to a database.\n In the parlance of the batch processing [domain language](http://docs.spring.io/spring-batch/reference/html/domain.html),\n it uses the partitioning concept to create 'partition step' metadata for a DB table. This metadata is persisted in the\n Spring database schema, whereafter each partition can then be executed locally or farmed out remotely via a JMS middleware\n server (only ActiveMQ is suported at this time). Remote worker JVMs then retrieve metadata descriptions of work units.\n The outcome of processing is then persisted in the database, allowing robust tracking and simple restart of failed partitions.\n"
      },
      "source": "https://raw.githubusercontent.com/RichJackson/cogstack/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9961362378225506,
      "result": {
        "original_header": "Why does this project exist/ why is batch processing difficult?",
        "type": "Text_excerpt",
        "value": "The CogStack is a range of technologies designed to to support modern, open source healthcare analytics within the NHS, and is\nchiefly comprised of the Elastic stack (elasticsearch, kibana etc), GATE, Bioyodie and Biolark (clinical natural language processing for\nentity extraction), OCR, clinical text de-identification, and Apache Tika for MS Office to text conversion. \nWhen processing very large datasets (10s - 100s of millions rows of data), it is likely that some rows will present certain\ndifficulties for different processes. These problems are typically hard to predict - for example,\nsome documents may have very long sentences, an unusual sequence of characters, or machine only content. Such circumstances can\ncreate a range of problems for NLP algorithms, and thus a fault tolerant batch frameworks are required to ensure robust, consistent\nprocessing.\n \n"
      },
      "source": "https://raw.githubusercontent.com/RichJackson/cogstack/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8534774719727777,
      "result": {
        "original_header": "Integration Tests",
        "type": "Text_excerpt",
        "value": "To run the integration tests, ensure the required external services are available\n (which also give a good idea of how cogstack is configured). These services are Postgresql, Biolark, Bioyodie and Elasticsearch.  The easiest\n way to get these going is with [Docker](https://www.docker.com/). Once you have docker installed, cogstack handily will\n build the containers you need for you (apart from elasticsearch, where the official image will suffice). To build the containers: \nNote, Biolark and Bioyodie are external applications. Building their containers (and subsequently running their integration tests) may require you to\n  meet their licencing conditions. Please check with [Tudor Groza](t.groza@garvan.org.au) (Biolark) and [Angus Roberts](angus.roberts@sheffield.ac.uk)/[Genevieve Gorrell](g.gorrell@sheffield.ac.uk) if in doubt. \nto launch all of the external services. \n\nAll being well, you should now be able to run the integration tests. Each of these demonstrate a different facet of cogstack's functionality.\nEach integration test follows the same pattern: \n* Generate some dummy data for processing, by using an integration test execution listener\n* Activate a configuration appropriate for the data and run cogstack\n* Verify results \nFor example, to load the postgres database with some dummy word files into a database table called <tblInputDocs>, process them with Tika, and load them into ElasticSearch index called <test_index2> and a postgres table called <tblOutputDocs>\n```\ngradlew  -DpostgresIntegTest.single=TikaWithoutScheduling -i postgresIntegTest\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/RichJackson/cogstack/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9276309965646861,
      "result": {
        "original_header": "A note on SQL Server",
        "type": "Text_excerpt",
        "value": "Microsoft have recently made SQL Server available on linux, with a [docker](https://hub.docker.com/r/microsoft/mssql-server-linux/) container available. This is good news, as\nmost NHS Trusts use SQL Server for most of their systems. To run this container\n```\ndocker run -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=yourStrong(!)Password' -p 1433:1433 -d microsoft/mssql-server-linux\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/RichJackson/cogstack/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9464311927621177,
      "result": {
        "original_header": "A note on GATE",
        "type": "Text_excerpt",
        "value": "Applications that require GATE generally need to be configured to point to the GATE installation directory (or they would need to include a rather large amount of plugins on their classpath). To do this in cogstack, set the appropriate properties as detailed in gate.* . \n"
      },
      "source": "https://raw.githubusercontent.com/RichJackson/cogstack/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9581453973043792,
      "result": {
        "original_header": "Acceptance Tests",
        "type": "Text_excerpt",
        "value": "The accompanying manuscript for this piece describes some artifically generated pseudo-documents containing misspellings and\n other string mutations in order to validate the de-identification algorithm without requiring access to real world\n data. These results can be replicated (subject to RNG) by using the acceptance test package. \nfile, which describes the potential options. For efficiency, it is recommended to do this from inside an IDE. \n"
      },
      "source": "https://raw.githubusercontent.com/RichJackson/cogstack/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8113124711109425,
      "result": {
        "original_header": "Scaling",
        "type": "Text_excerpt",
        "value": "To add additional JVM processes, whether locally or remotely (via the magic of Spring Integration), just launch an instance with the same config files but with useScheduling = slave. You'll need an ActiveMQ server to co-ordinate the nodes (see config example for details) \n"
      },
      "source": "https://raw.githubusercontent.com/RichJackson/cogstack/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9819436009043104,
      "result": {
        "original_header": "JDBC output/reindexing",
        "type": "Text_excerpt",
        "value": "Using the JDBC output profile, it is possible to generate a column of JSON strings back into a database. This is useful for reindexing large quantities of data without the need to re-process with the more computationally expensive item processors (e.g. OCR, biolark). To reindex, simply use the reindexColumn in the configuration file. Note, if you include other profiles, these will still run, but will not contribute to the final JSON, and are thus pointless. Therefore, only the 'basic' profile should be used when reindexing data.\n```\nreindex = true\n\n#select the column name of jsons in the db table\nreindexField = sometext\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/RichJackson/cogstack/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9711421644855466,
      "result": {
        "original_header": "History",
        "type": "Text_excerpt",
        "value": "This project is an update of an earlier KHP-Informatics project I was involved with called [Cognition](https://github.com/KHP-Informatics/Cognition-DNC). Although Cognition had an excellent implementation of Levenstein distance for string substitution (thanks [iemre](https://github.com/iemre)!), the architecture of the code suffered some design flaws, such as an overly complex domain model and configuration, and lack of fault tolerance/job stop/start/retry logic. As such, it was somewhat difficult to work with in production, and hard to extend with new features. It was clear that there was the need for a proper batch processing framework. Enter Spring Batch and a completely rebuilt codebase, save a couple of classes from the original Cognition project. cogstack is used at King's College Hospital and the South London and Maudsley Hospital to feed Elasticsearch clusters for business intelligence and research use cases \nSome of the advancements in cogstack: \n 1. A simple <String,Object> map, with a few pieces of database metadata for its [domain model](https://github.com/RichJackson/cogstack/blob/master/src/main/groovy/uk/ac/kcl/model/Document.groovy) (essentially mapping a database row to a elasticsearch document, with the ability to embed [nested types](https://www.elastic.co/guide/en/elasticsearch/reference/2.3/nested.html)\n 2. Complete, sensible coverage of stop, start, retry, abandon logic\n 3. A custom socket timeout factory, to manage network failures, which can cause JDBC driver implementations to lock up, when the standard isn't fully implemented. Check out [this blog post](https://social.msdn.microsoft.com/Forums/office/en-US/3373d40a-2a0b-4fe4-b6e8-46f2988debf8/any-plans-to-add-socket-timeout-option-in-jdbc-driver?forum=sqldataaccess) for info.\n 4. The ability to run multiple batch jobs (i.e. process multiple database tables within a single JVM, each having its own Spring container\n 5. Remote partitioning via an ActiveMQ JMS server, for complete scalability\n 6. Built in job scheduler to enable near real time synchronisation with a database \n"
      },
      "source": "https://raw.githubusercontent.com/RichJackson/cogstack/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/RichJackson/cogstack/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/RichJackson/cogstack/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "RichJackson/cogstack"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "WELCOME TO Cogstack"
      },
      "source": "https://raw.githubusercontent.com/RichJackson/cogstack/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/RichJackson/cogstack/master/docker-cogstack/biolark/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/RichJackson/cogstack/master/docker-cogstack/biolark/Dockerfile",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/RichJackson/cogstack/master/docker-cogstack/bioyodie/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/RichJackson/cogstack/master/docker-cogstack/bioyodie/Dockerfile",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/RichJackson/cogstack/master/docker-cogstack/cogstack/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/RichJackson/cogstack/master/docker-cogstack/cogstack/Dockerfile",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/RichJackson/cogstack/master/docker-cogstack/libre-office/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/RichJackson/cogstack/master/docker-cogstack/libre-office/Dockerfile",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/RichJackson/cogstack/master/docker-cogstack/postgres/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/RichJackson/cogstack/master/docker-cogstack/postgres/Dockerfile",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "docker_compose",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/RichJackson/cogstack/master/docker-cogstack/compose-ymls/simple/docker-compose.yml"
      },
      "source": "https://raw.githubusercontent.com/RichJackson/cogstack/master/docker-cogstack/compose-ymls/simple/docker-compose.yml",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "docker_compose",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/RichJackson/cogstack/master/docker-cogstack/compose-ymls/nlp/docker-compose.yml"
      },
      "source": "https://raw.githubusercontent.com/RichJackson/cogstack/master/docker-cogstack/compose-ymls/nlp/docker-compose.yml",
      "technique": "file_exploration"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/RichJackson/cogstack/master/docker-cogstack/biolark/start.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/RichJackson/cogstack/master/docker-cogstack/bioyodie/start.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/RichJackson/cogstack/master/docker-cogstack/cogstack/wait-for-it.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/RichJackson/cogstack/master/docker-cogstack/cogstack/test.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/RichJackson/cogstack/master/docker-cogstack/postgres/create-repo.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "**WELCOME TO Cogstack**"
        ],
        "type": "Text_excerpt",
        "value": "We're not quite at a regular release cycle yet, so if you want a stable version, I suggest downloading v 1.0.0 from the release\n page. However, if you want more features and (potentially) fewer bugs, it's best to build from source on the master branch.\n\nTo build from source:\n\n 1. Install [Tesseract](https://github.com/tesseract-ocr/tesseract) and [Imagemagick](https://github.com/ImageMagick/ImageMagick)\n (can be installed but apt-get on Ubuntu)\n 2. Run the following:\n\n```\ngradlew clean build\n```\n"
      },
      "source": "https://raw.githubusercontent.com/RichJackson/cogstack/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick Start Guide",
        "parent_header": [
          "**WELCOME TO Cogstack**"
        ],
        "type": "Text_excerpt",
        "value": "The absolute easiest way to get up and running with CogStack is to use [Docker](https://www.docker.com/). Docker can provide\nlightweight virtualisation of a variety of microservices that CogStack makes use of. When coupled with the microservice orchestration\n[docker compose](https://docs.docker.com/compose/) technology, all of the components required to use CogStack can be set up with a few\nsimple commands.\n\nFirst, ensure you have docker v1.13 or above installed.\n\nElasticsearch in docker requires the following to be set on the host:\n\n```\nsudo sysctl -w vm.max_map_count=262144\n```\n\n\nNow you need to build the required docker containers. Fortunately, the gradle build file can do this for you.\n\nFrom the CogStack top level directory:\n\n```\ngradlew buildSimpleContainers\n```\n\nAssuming the containers have been built successfully, simply navigate to\n```\ncd docker-cogstack/compose-ymls/simple/\n```\n\n\nAnd type\n```\ndocker-compose up\n```\n\nAll of the docker containers should be up and communicating with each other. You can view their status with\n```\ndocker ps -a\n```\n\n\nThat's it!\n\n\"But that's what?\", I hear you ask?\n\nThe high level workflow of CogStack is as follows:\n\n* Read a row of the table into the CogStack software\n* Process the columns of the row with inbuilt Processors\n* Construct a JSON that represents the table row and new data arising from the webservice\n* Index the JSON into an elasticsearch cluster\n* Visualise the results with Kibana\n\nTo understand what's going on, we need to delve into what each of the components is doing. Let's start with the container called\n'some-postgres'. Let's assume this is a database that contains a table that we want to process somehow. In fact this example database already\ncontains some example data. If you have some database browsing software, you should be able to connect to it with the following JDBC confguration\n\n```\nsource.JdbcPath      = jdbc:postgresql://localhost:5432/cogstack\nsource.Driver        = org.postgresql.Driver\nsource.username      = cogstack\nsource.password      = mysecretpassword\n```\n\nYou should see a table called 'tblinputdocs' in the 'cogstack' database with four lines of dummy data. This table is now constantly\n being scanned and indexed into elasticsearch. If you know how to use the [Kibana](https://www.elastic.co/products/kibana) tool,\n you can visualise the data in the cluster.\n\nNow bring the compose configuration down with from the same compose directory as before:\n\n```\ndocker-compose down\n```\n\n\nThis is the most basic configuration, and really doesn't do too much other than convert a database table/view into an elasticsearch index.\nFor more advanced use cases/configurations, check out the integration test below.\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/RichJackson/cogstack/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9997231591135984,
      "result": {
        "original_header": "Integration Tests",
        "type": "Text_excerpt",
        "value": "To run the integration tests, ensure the required external services are available\n (which also give a good idea of how cogstack is configured). These services are Postgresql, Biolark, Bioyodie and Elasticsearch.  The easiest\n way to get these going is with [Docker](https://www.docker.com/). Once you have docker installed, cogstack handily will\n build the containers you need for you (apart from elasticsearch, where the official image will suffice). To build the containers: \n"
      },
      "source": "https://raw.githubusercontent.com/RichJackson/cogstack/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9996815562824137,
      "result": {
        "original_header": "A note on SQL Server",
        "type": "Text_excerpt",
        "value": "Microsoft have recently made SQL Server available on linux, with a [docker](https://hub.docker.com/r/microsoft/mssql-server-linux/) container available. This is good news, as\nmost NHS Trusts use SQL Server for most of their systems. To run this container\n```\ndocker run -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=yourStrong(!)Password' -p 1433:1433 -d microsoft/mssql-server-linux\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/RichJackson/cogstack/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8156050221681324,
      "result": {
        "original_header": "Scheduling",
        "type": "Text_excerpt",
        "value": "CogStack also offers a built in scheduler, to process changes in a database between job runs (requires a timestamp in the source database)\n```\nuseScheduling = true\n```\nrun intervals are handled with the following CRON like syntax\nBASH2*\n \n"
      },
      "source": "https://raw.githubusercontent.com/RichJackson/cogstack/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9439648738695671,
      "result": {
        "original_header": "History",
        "type": "Text_excerpt",
        "value": "Questions? Want to help? Drop me a message: richgjackson@gmail.com\n \n"
      },
      "source": "https://raw.githubusercontent.com/RichJackson/cogstack/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/RichJackson/cogstack/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "batch-processing, elasticsearch, natural-language-processing, partitioning, spring-batch"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Apache License 2.0",
        "spdx_id": "Apache-2.0",
        "type": "License",
        "url": "https://api.github.com/licenses/apache-2.0",
        "value": "https://api.github.com/licenses/apache-2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
      },
      "source": "https://raw.githubusercontent.com/RichJackson/cogstack/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/RichJackson/cogstack//master/fig/cogstack_pipeline_sm2.png"
      },
      "source": "https://raw.githubusercontent.com/RichJackson/cogstack/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "cogstack"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "RichJackson"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 2995818,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Java",
        "size": 460020,
        "type": "Programming_language",
        "value": "Java"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 8261,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Groovy",
        "size": 2090,
        "type": "Programming_language",
        "value": "Groovy"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/RichJackson/cogstack/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "RichJackson",
          "type": "User"
        },
        "date_created": "2017-03-20T11:28:39Z",
        "date_published": "2017-03-20T11:58:52Z",
        "description": "[![DOI](https://zenodo.org/badge/51585944.svg)](https://zenodo.org/badge/latestdoi/51585944)\r\n\r\n# **WELCOME TO Cogstack**\r\n\r\n\r\n## Introduction\r\n\r\nCogStack is a lightweight distributed, fault tolerant database processing architecture, intended to make NLP processing and\r\n preprocessing easier in resource constained environments. It makes use of the Spring Batch framework in order to provide a fully configurable\r\n pipeline with the goal of generating an annotated JSON that can be readily indexed into elasticsearch, or pushed back to a database.\r\n In the parlance of the batch processing [domain language](http://docs.spring.io/spring-batch/reference/html/domain.html),\r\n it uses the partitioning concept to create 'partition step' metadata for a DB table. This metadata is persisted in the\r\n Spring database schema, whereafter each partition can then be executed locally or farmed out remotely via a JMS middleware\r\n server (only ActiveMQ is suported at this time). Remote worker JVMs then retrieve metadata descriptions of work units.\r\n The outcome of processing is then persisted in the database, allowing robust tracking and simple restart of failed partitions.\r\n\r\n## Why does this project exist/ why is batch processing difficult?\r\n\r\nThe CogStack is a range of technologies designed to to support modern, open source healthcare analytics within the NHS, and is\r\nchiefly comprised of the Elastic stack (elasticsearch, kibana etc), GATE, Bioyodie and Biolark (clinical natural language processing for\r\nentity extraction), OCR, clinical text de-identification, and Apache Tika for MS Office to text conversion.\r\n\r\nWhen processing very large datasets (10s - 100s of millions rows of data), it is likely that some rows will present certain\r\ndifficulties for different processes. These problems are typically hard to predict - for example,\r\nsome documents may have very long sentences, an unusual sequence of characters, or machine only content. Such circumstances can\r\ncreate a range of problems for NLP algorithms, and thus a fault tolerant batch frameworks are required to ensure robust, consistent\r\nprocessing.\r\n\r\n## Installation\r\n\r\nWe're not quite at a regular release cycle yet, so if you want a stable version, I suggest downloading v 1.0.0 from the release\r\n page. However, if you want more features and (potentially) fewer bugs, it's best to build from source on the master branch.\r\n\r\nTo build from source:\r\n\r\n 1. Install [Tesseract](https://github.com/tesseract-ocr/tesseract) and [Imagemagick](https://github.com/ImageMagick/ImageMagick)\r\n (can be installed but apt-get on Ubuntu)\r\n 2. Run the following:\r\n\r\n```\r\ngradlew clean build\r\n```\r\n\r\n## Quick Start Guide\r\n\r\nThe absolute easiest way to get up and running with CogStack is to use [Docker](https://www.docker.com/). Docker can provide\r\nlightweight virtualisation of a variety of microservices that CogStack makes use of. When coupled with the microservice orchestration\r\n[docker compose](https://docs.docker.com/compose/) technology, all of the components required to use CogStack can be set up with a few\r\nsimple commands.\r\n\r\nFirst, ensure you have docker v1.13 or above installed.\r\n\r\nElasticsearch in docker requires the following to be set on the host:\r\n\r\n```\r\nsudo sysctl -w vm.max_map_count=262144\r\n```\r\n\r\n\r\nNow you need to build the required docker containers. Fortunately, the gradle build file can do this for you.\r\n\r\nFrom the CogStack top level directory:\r\n\r\n```\r\ngradlew buildSimpleContainers\r\n```\r\n\r\nAssuming the containers have been built successfully, simply navigate to\r\n```\r\ncd docker-cogstack/compose-ymls/simple/\r\n```\r\n\r\n\r\nAnd type\r\n```\r\ndocker-compose up\r\n```\r\n\r\nAll of the docker containers should be up and communicating with each other. You can view their status with\r\n```\r\ndocker ps -a\r\n```\r\n\r\n\r\nThat's it!\r\n\r\n\"But that's what?\", I hear you ask?\r\n\r\nThe high level workflow of CogStack is as follows:\r\n\r\n* Read a row of the table into the CogStack software\r\n* Process the columns of the row with inbuilt Processors\r\n* Construct a JSON that represents the table row and new data arising from the webservice\r\n* Index the JSON into an elasticsearch cluster\r\n* Visualise the results with Kibana\r\n\r\nTo understand what's going on, we need to delve into what each of the components is doing. Let's start with the container called\r\n'some-postgres'. Let's assume this is a database that contains a table that we want to process somehow. In fact this example database already\r\ncontains some example data. If you have some database browsing software, you should be able to connect to it with the following JDBC confguration\r\n\r\n```\r\nsource.JdbcPath      = jdbc:postgresql://localhost:5432/cogstack\r\nsource.Driver        = org.postgresql.Driver\r\nsource.username      = cogstack\r\nsource.password      = mysecretpassword\r\n```\r\n\r\nYou should see a table called 'tblinputdocs' in the 'cogstack' database with four lines of dummy data. This table is now constantly\r\n being scanned and indexed into elasticsearch. If you know how to use the [Kibana](https://www.elastic.co/products/kibana) tool,\r\n you can visualise the data in the cluster.\r\n\r\nNow bring the compose configuration down with from the same compose directory as before:\r\n\r\n```\r\ndocker-compose down\r\n```\r\n\r\n\r\nThis is the most basic configuration, and really doesn't do too much other than convert a database table/view into an elasticsearch index.\r\nFor more advanced use cases/configurations, check out the integration test below.\r\n\r\n\r\n\r\n## Integration Tests\r\n\r\nAlthough cogstack has unit tests where appropriate, the nature of the project is such that the real value fo testing comes\r\n from the integration tests. Consequently, cogstack has an extensive suite.\r\n\r\nTo run the integration tests, ensure the required external services are available\r\n (which also give a good idea of how cogstack is configured). These services are Postgresql, Biolark, Bioyodie and Elasticsearch.  The easiest\r\n way to get these going is with [Docker](https://www.docker.com/). Once you have docker installed, cogstack handily will\r\n build the containers you need for you (apart from elasticsearch, where the official image will suffice). To build the containers:\r\n\r\nFrom the CogStack top level directory:\r\n\r\n```\r\n  gradlew buildAllContainers\r\n```\r\n\r\n\r\n\r\nNote, Biolark and Bioyodie are external applications. Building their containers (and subsequently running their integration tests) may require you to\r\n  meet their licencing conditions. Please check with [Tudor Groza](t.groza@garvan.org.au) (Biolark) and [Angus Roberts](angus.roberts@sheffield.ac.uk)/[Genevieve Gorrell](g.gorrell@sheffield.ac.uk) if in doubt.\r\n\r\nAssuming the containers have been built successfully, navigate to\r\n```\r\ncd docker-cogstack/compose-ymls/nlp/\r\n```\r\nAnd type\r\n```\r\ndocker-compose up\r\n```\r\n\r\nto launch all of the external services.\r\n\r\n\r\nAll being well, you should now be able to run the integration tests. Each of these demonstrate a different facet of cogstack's functionality.\r\nEach integration test follows the same pattern:\r\n\r\n* Generate some dummy data for processing, by using an integration test execution listener\r\n* Activate a configuration appropriate for the data and run cogstack\r\n* Verify results\r\n\r\nAll integration tests for Postgres can be run by using:\r\n\r\n```\r\ngradlew postgresIntegTest\r\n```\r\n\r\nAlthough if you're new to cogstack, you might find it more informative to run them individually, and inspect the results after each one. For example,\r\n  to run a single test:\r\n```\r\ngradlew  -DpostgresIntegTest.single=<integration test class name> -i postgresIntegTest\r\n```\r\nAvailable classes for integration tests are in the package\r\n```\r\nsrc/integration-test/java/uk/ac/kcl/it/postgres\r\n```\r\n\r\nFor example, to load the postgres database with some dummy word files into a database table called <tblInputDocs>, process them with Tika, and load them into ElasticSearch index called <test_index2> and a postgres table called <tblOutputDocs>\r\n\r\n```\r\ngradlew  -DpostgresIntegTest.single=TikaWithoutScheduling -i postgresIntegTest\r\n```\r\n\r\nthen point your browser to localhost:5601\r\n\r\n### A note on SQL Server\r\n\r\nMicrosoft have recently made SQL Server available on linux, with a [docker](https://hub.docker.com/r/microsoft/mssql-server-linux/) container available. This is good news, as\r\nmost NHS Trusts use SQL Server for most of their systems. To run this container\r\n```\r\ndocker run -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=yourStrong(!)Password' -p 1433:1433 -d microsoft/mssql-server-linux\r\n```\r\n\r\n...noting their licence conditions. This container will then allow you to run the integration tests for SQL Server:\r\n\r\n```\r\ngradlew sqlServergresIntegTest\r\n```\r\n\r\nSingle tests can be run in the same fashion as Postgres, substituting the syntax as appropriate (e.g.)\r\n```\r\ngradlew  -DsqlServerIntegTest.single=TikaWithoutScheduling -i sqlServerIntegTest\r\n```\r\n\r\n\r\n### A note on GATE\r\n\r\nApplications that require GATE generally need to be configured to point to the GATE installation directory (or they would need to include a rather large amount of plugins on their classpath). To do this in cogstack, set the appropriate properties as detailed in gate.* .\r\n\r\n\r\n## Acceptance Tests\r\n\r\nThe accompanying manuscript for this piece describes some artifically generated pseudo-documents containing misspellings and\r\n other string mutations in order to validate the de-identification algorithm without requiring access to real world\r\n data. These results can be replicated (subject to RNG) by using the acceptance test package.\r\n\r\nTo reproduce the results described in the manuscript, simply run the following command:\r\n```\r\ngradlew  -DacceptTest.single=ElasticGazetteerAcceptanceTest -i acceptTest\r\n```\r\n\r\nto reconfigure this test class for the different conditions described in the manuscript, you will need to alter the parameters inside the\r\n\r\n ```\r\n elasticgazetteer_test.properties\r\n ```\r\n\r\nfile, which describes the potential options. For efficiency, it is recommended to do this from inside an IDE.\r\n\r\n\r\n## Example usage in real world deployments\r\n\r\nThe entire process is run through the command line, taking a path to a directory as a single argument. This directory should contain configuration files, (one complete one per spring batch job that you want to run simultaneously). These config files selectively activate Spring profiles as required to perform required data selection, processing and output writing steps.\r\n\r\nExamples of config file are in the exampleConfigs dir. Most are (hopefully) relatively self explanatory, or should be annotated to explain their meaning.\r\n\r\nexample configs can be generated from the gradle task:\r\n\r\n```\r\ngradlew writeExampleConfig\r\n```\r\n\r\nThe behaviour of cogstack is configured by activating a variety of spring profiles (again, in the config files - see examples) as required. Currently. the available profiles are\r\n\r\ninputs\r\n 1. jdbc_in - Spring Batch's JdbcPagingItemReader for reading from a database table or view. Also requires a partitioning profile to be activated, to set a partitioning strategy. If you don't know what you're doing, just use the primaryKeyPartition profile.\r\n 2. docmanReader - a custom reader for system that stores files in a file system, but holds their path in a database. Weird...\r\n\r\nprocesses\r\n\r\n 1. tika - process JDBC input with Tika. Extended with a custom PDF preprocessor to perform OCR on scanned PDF document.  (requires ImageMagick and Tesseract on the PATH)\r\n 2. gate - process JDBC input with a generic GATE app.\r\n 3. dBLineFixer - process JDBC input with dBLineFixer (concatenates multi-row documents)\r\n 4. basic - a job without a processing step, for simply writing JDBC input to elasticsearch\r\n 5. deid - deidentify text with a GATE application (such as the [Healtex texscrubber](https://github.com/healtex/texscrubber)) or using the Cognition algorithm, which queries a database for identifiers and mask them in free text using Levenstein distance.\r\n 6. webservice - send a document to a webservice (such as an NLP REST service, like bioyodie/biolark) for annotation. The response should be a JSON, so it can be mapped to Elasticsearch's 'nested' type.\r\n\r\nscaling\r\n 1. localPartitioning - run all processes within the launching JVM\r\n 2. remotePartitioning - send partitions to JMS middleware, to be picked up by remote hosts (see below)\r\n\r\noutputs\r\n 1. elasticsearch - write to an elasticsearch cluster\r\n 2. jdbc_out - write the generated JSON to a JDBC endpoint. Useful if the selected processes are particularly heavy (e.g. biolark), so that data can be reindexed without the need for reprocessing\r\n\r\npartitioning\r\n 1. primaryKeyPartition - process all records based upon partitioning of the primary key\r\n 2. primaryKeyAndTimeStampPartition - process all records based upon partitioning of the primary key and the timestamp, for finer control/ smaller batch sizes per job. Use the processingPeriod property to specify the number of milliseconds to 'scan' ahead for each job run\r\n\r\n## Scheduling\r\nCogStack also offers a built in scheduler, to process changes in a database between job runs (requires a timestamp in the source database)\r\n\r\n```\r\nuseScheduling = true\r\n```\r\nrun intervals are handled with the following CRON like syntax\r\n```\r\nscheduler.rate = \"*/5 * * * * *\"\r\n```\r\n\r\n\r\n## Logging support\r\n\r\nCogStack uses the SLF4J abstraction for logging, with logback as the concrete implementation. To name a logfile, simply add the -DLOG_FILE_NAME system flag when launching the JVM\r\n\r\ne.g.\r\n\r\n```\r\njava -DLOG_FILE_NAME=aTestLog -DLOG_LEVEL=debug -jar cogstack-0.3.0.jar /my/path/to/configs\r\n```\r\n\r\nCogStack assumes the 'job repository' schema is already in place in the DB implementation of your choice (see spring batch docs for more details). The scripts to set this up for various vendors can be found [here](https://github.com/spring-projects/spring-batch/tree/master/spring-batch-core/src/main/resources/org/springframework/batch/core)\r\n\r\n## Scaling\r\n\r\nTo add additional JVM processes, whether locally or remotely (via the magic of Spring Integration), just launch an instance with the same config files but with useScheduling = slave. You'll need an ActiveMQ server to co-ordinate the nodes (see config example for details)\r\n\r\nIf a job fails, any uncompleted partitions will be picked up by the next run. If a Job ends up in an unknown state (e.g. due to hardware failure), the next run will mark it as abandonded and recommence from the last successful job it can find in the repository.\r\n\r\n## JDBC output/reindexing\r\n\r\nUsing the JDBC output profile, it is possible to generate a column of JSON strings back into a database. This is useful for reindexing large quantities of data without the need to re-process with the more computationally expensive item processors (e.g. OCR, biolark). To reindex, simply use the reindexColumn in the configuration file. Note, if you include other profiles, these will still run, but will not contribute to the final JSON, and are thus pointless. Therefore, only the 'basic' profile should be used when reindexing data.\r\n```\r\nreindex = true\r\n\r\n#select the column name of jsons in the db table\r\nreindexField = sometext\r\n```\r\n## History\r\n\r\nThis project is an update of an earlier KHP-Informatics project I was involved with called [Cognition](https://github.com/KHP-Informatics/Cognition-DNC). Although Cognition had an excellent implementation of Levenstein distance for string substitution (thanks [iemre](https://github.com/iemre)!), the architecture of the code suffered some design flaws, such as an overly complex domain model and configuration, and lack of fault tolerance/job stop/start/retry logic. As such, it was somewhat difficult to work with in production, and hard to extend with new features. It was clear that there was the need for a proper batch processing framework. Enter Spring Batch and a completely rebuilt codebase, save a couple of classes from the original Cognition project. cogstack is used at King's College Hospital and the South London and Maudsley Hospital to feed Elasticsearch clusters for business intelligence and research use cases\r\n\r\nSome of the advancements in cogstack:\r\n\r\n 1. A simple <String,Object> map, with a few pieces of database metadata for its [domain model](https://github.com/RichJackson/cogstack/blob/master/src/main/groovy/uk/ac/kcl/model/Document.groovy) (essentially mapping a database row to a elasticsearch document, with the ability to embed [nested types](https://www.elastic.co/guide/en/elasticsearch/reference/2.3/nested.html)\r\n 2. Complete, sensible coverage of stop, start, retry, abandon logic\r\n 3. A custom socket timeout factory, to manage network failures, which can cause JDBC driver implementations to lock up, when the standard isn't fully implemented. Check out [this blog post](https://social.msdn.microsoft.com/Forums/office/en-US/3373d40a-2a0b-4fe4-b6e8-46f2988debf8/any-plans-to-add-socket-timeout-option-in-jdbc-driver?forum=sqldataaccess) for info.\r\n 4. The ability to run multiple batch jobs (i.e. process multiple database tables within a single JVM, each having its own Spring container\r\n 5. Remote partitioning via an ActiveMQ JMS server, for complete scalability\r\n 6. Built in job scheduler to enable near real time synchronisation with a database\r\n\r\nQuestions? Want to help? Drop me a message: richgjackson@gmail.com\r\n",
        "html_url": "https://github.com/RichJackson/cogstack/releases/tag/v1.2.0",
        "name": "release for publication",
        "release_id": 5800837,
        "tag": "v1.2.0",
        "tarball_url": "https://api.github.com/repos/RichJackson/cogstack/tarball/v1.2.0",
        "type": "Release",
        "url": "https://api.github.com/repos/RichJackson/cogstack/releases/5800837",
        "value": "https://api.github.com/repos/RichJackson/cogstack/releases/5800837",
        "zipball_url": "https://api.github.com/repos/RichJackson/cogstack/zipball/v1.2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "RichJackson",
          "type": "User"
        },
        "date_created": "2016-08-15T18:59:18Z",
        "date_published": "2016-08-15T19:17:56Z",
        "description": "The code's been in production for a while now, without major disaster. Welcome to 1.0.0...\n",
        "html_url": "https://github.com/RichJackson/cogstack/releases/tag/1.0.0",
        "name": "Version 1.0.0 released!",
        "release_id": 3890792,
        "tag": "1.0.0",
        "tarball_url": "https://api.github.com/repos/RichJackson/cogstack/tarball/1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/RichJackson/cogstack/releases/3890792",
        "value": "https://api.github.com/repos/RichJackson/cogstack/releases/3890792",
        "zipball_url": "https://api.github.com/repos/RichJackson/cogstack/zipball/1.0.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "identifier",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 08:25:24",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 7
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Logging support",
        "parent_header": [
          "**WELCOME TO Cogstack**"
        ],
        "type": "Text_excerpt",
        "value": "CogStack uses the SLF4J abstraction for logging, with logback as the concrete implementation. To name a logfile, simply add the -DLOG_FILE_NAME system flag when launching the JVM\n\ne.g.\n\n```\njava -DLOG_FILE_NAME=aTestLog -DLOG_LEVEL=debug -jar cogstack-0.3.0.jar /my/path/to/configs\n```\n\nCogStack assumes the 'job repository' schema is already in place in the DB implementation of your choice (see spring batch docs for more details). The scripts to set this up for various vendors can be found [here](https://github.com/spring-projects/spring-batch/tree/master/spring-batch-core/src/main/resources/org/springframework/batch/core)\n"
      },
      "source": "https://raw.githubusercontent.com/RichJackson/cogstack/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick Start Guide",
        "parent_header": [
          "**WELCOME TO Cogstack**"
        ],
        "type": "Text_excerpt",
        "value": "The absolute easiest way to get up and running with CogStack is to use [Docker](https://www.docker.com/). Docker can provide\nlightweight virtualisation of a variety of microservices that CogStack makes use of. When coupled with the microservice orchestration\n[docker compose](https://docs.docker.com/compose/) technology, all of the components required to use CogStack can be set up with a few\nsimple commands.\n\nFirst, ensure you have docker v1.13 or above installed.\n\nElasticsearch in docker requires the following to be set on the host:\n\n```\nsudo sysctl -w vm.max_map_count=262144\n```\n\n\nNow you need to build the required docker containers. Fortunately, the gradle build file can do this for you.\n\nFrom the CogStack top level directory:\n\n```\ngradlew buildSimpleContainers\n```\n\nAssuming the containers have been built successfully, simply navigate to\n```\ncd docker-cogstack/compose-ymls/simple/\n```\n\n\nAnd type\n```\ndocker-compose up\n```\n\nAll of the docker containers should be up and communicating with each other. You can view their status with\n```\ndocker ps -a\n```\n\n\nThat's it!\n\n\"But that's what?\", I hear you ask?\n\nThe high level workflow of CogStack is as follows:\n\n* Read a row of the table into the CogStack software\n* Process the columns of the row with inbuilt Processors\n* Construct a JSON that represents the table row and new data arising from the webservice\n* Index the JSON into an elasticsearch cluster\n* Visualise the results with Kibana\n\nTo understand what's going on, we need to delve into what each of the components is doing. Let's start with the container called\n'some-postgres'. Let's assume this is a database that contains a table that we want to process somehow. In fact this example database already\ncontains some example data. If you have some database browsing software, you should be able to connect to it with the following JDBC confguration\n\n```\nsource.JdbcPath      = jdbc:postgresql://localhost:5432/cogstack\nsource.Driver        = org.postgresql.Driver\nsource.username      = cogstack\nsource.password      = mysecretpassword\n```\n\nYou should see a table called 'tblinputdocs' in the 'cogstack' database with four lines of dummy data. This table is now constantly\n being scanned and indexed into elasticsearch. If you know how to use the [Kibana](https://www.elastic.co/products/kibana) tool,\n you can visualise the data in the cluster.\n\nNow bring the compose configuration down with from the same compose directory as before:\n\n```\ndocker-compose down\n```\n\n\nThis is the most basic configuration, and really doesn't do too much other than convert a database table/view into an elasticsearch index.\nFor more advanced use cases/configurations, check out the integration test below.\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/RichJackson/cogstack/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example usage in real world deployments",
        "parent_header": [
          "**WELCOME TO Cogstack**"
        ],
        "type": "Text_excerpt",
        "value": "The entire process is run through the command line, taking a path to a directory as a single argument. This directory should contain configuration files, (one complete one per spring batch job that you want to run simultaneously). These config files selectively activate Spring profiles as required to perform required data selection, processing and output writing steps.\n\nExamples of config file are in the exampleConfigs dir. Most are (hopefully) relatively self explanatory, or should be annotated to explain their meaning.\n\nexample configs can be generated from the gradle task:\n\n```\ngradlew writeExampleConfig\n```\n\nThe behaviour of cogstack is configured by activating a variety of spring profiles (again, in the config files - see examples) as required. Currently. the available profiles are\n\ninputs\n 1. jdbc_in - Spring Batch's JdbcPagingItemReader for reading from a database table or view. Also requires a partitioning profile to be activated, to set a partitioning strategy. If you don't know what you're doing, just use the primaryKeyPartition profile.\n 2. docmanReader - a custom reader for system that stores files in a file system, but holds their path in a database. Weird...\n\nprocesses\n\n 1. tika - process JDBC input with Tika. Extended with a custom PDF preprocessor to perform OCR on scanned PDF document.  (requires ImageMagick and Tesseract on the PATH)\n 2. gate - process JDBC input with a generic GATE app.\n 3. dBLineFixer - process JDBC input with dBLineFixer (concatenates multi-row documents)\n 4. basic - a job without a processing step, for simply writing JDBC input to elasticsearch\n 5. deid - deidentify text with a GATE application (such as the [Healtex texscrubber](https://github.com/healtex/texscrubber)) or using the Cognition algorithm, which queries a database for identifiers and mask them in free text using Levenstein distance.\n 6. webservice - send a document to a webservice (such as an NLP REST service, like bioyodie/biolark) for annotation. The response should be a JSON, so it can be mapped to Elasticsearch's 'nested' type.\n\nscaling\n 1. localPartitioning - run all processes within the launching JVM\n 2. remotePartitioning - send partitions to JMS middleware, to be picked up by remote hosts (see below)\n\noutputs\n 1. elasticsearch - write to an elasticsearch cluster\n 2. jdbc_out - write the generated JSON to a JDBC endpoint. Useful if the selected processes are particularly heavy (e.g. biolark), so that data can be reindexed without the need for reprocessing\n\npartitioning\n 1. primaryKeyPartition - process all records based upon partitioning of the primary key\n 2. primaryKeyAndTimeStampPartition - process all records based upon partitioning of the primary key and the timestamp, for finer control/ smaller batch sizes per job. Use the processingPeriod property to specify the number of milliseconds to 'scan' ahead for each job run\n"
      },
      "source": "https://raw.githubusercontent.com/RichJackson/cogstack/master/README.md",
      "technique": "header_analysis"
    }
  ]
}