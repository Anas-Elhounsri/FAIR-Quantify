{
  "application_domain": [
    {
      "confidence": 21.94,
      "result": {
        "type": "String",
        "value": "Natural Language Processing"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Cite",
        "type": "Text_excerpt",
        "value": "If you want to cite our work, please use the following information\n\n```\n@article{zhang2020cancer,\n  title={Cancer mutational signatures representation by large-scale context embedding},\n  author={Zhang, Yang and Xiao, Yunxuan and Yang, Muyu and Ma, Jian},\n  journal={Bioinformatics},\n  volume={36},\n  number={Supplement\\_1},\n  pages={i309--i316},\n  year={2020},\n  publisher={Oxford University Press}\n}\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ma-compbio/MutSpace/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Zhang, Yang and Xiao, Yunxuan and Yang, Muyu and Ma, Jian",
        "format": "bibtex",
        "title": "Cancer mutational signatures representation by large-scale context embedding",
        "type": "Text_excerpt",
        "value": "@article{zhang2020cancer,\n    publisher = {Oxford University Press},\n    year = {2020},\n    pages = {i309--i316},\n    number = {Supplement\\_1},\n    volume = {36},\n    journal = {Bioinformatics},\n    author = {Zhang, Yang and Xiao, Yunxuan and Yang, Muyu and Ma, Jian},\n    title = {Cancer mutational signatures representation by large-scale context embedding},\n}"
      },
      "source": "https://raw.githubusercontent.com/ma-compbio/MutSpace/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ma-compbio/MutSpace"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contact",
        "type": "Text_excerpt",
        "value": "* yangz6 at andrew.cmu.edu\n* jianma at andrew.cmu.edu\n"
      },
      "source": "https://raw.githubusercontent.com/ma-compbio/MutSpace/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-02-01T18:28:03Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-11-09T17:13:12Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "cancer mutation, mutation signature, sequence embedding"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "type": "Text_excerpt",
        "value": "MutSpace is a method aiming to address the computational challenge to consider large-scale sequence context for mutational signatures. It can effectively extract patient-specific features by jointly modeling mutations and patients in a latent high-dimensional space. As shown in the figure below, the input of MutSpace consists of somatic mutations and cancer patients, which are naturally connected by the fact that a somatic mutation is observed in one patient. The output of MutSpace is a set of vectors in latent high-dimensional space for mutations and cancer patients. Importantly, the similarity of those embedded vectors of mutations and cancer patients reflect the closeness of these entities. For example, patients' vectors with similar mutational landscapes tend to be close in the high-dimensional space, and mutations observed in one patient tend to be close to that patient in the latent space. The embeddings of patients reported from MutSpace can be used to various tasks, including cancer subtype identification, cancer patients clustering, or used as alternative mutational features extracted from patients as compared with traditional mutational spectrum/frequency-based method. See the [slides](https://drive.google.com/file/d/1pzsuH-5VayxSusziN9OKumZNy2VVwKB2/view?usp=sharing) presented at ISMB 2020.\n\n<a name=\"prerequisites\"/>\n"
      },
      "source": "https://raw.githubusercontent.com/ma-compbio/MutSpace/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.951689490708266,
      "result": {
        "original_header": "Inputs and pre-processing",
        "type": "Text_excerpt",
        "value": "MutSpace currently only supports single nucleotide variants (SNVs), including C to A(`C->A`), C to G (`C->G`), C to T (`C->T`), T to A (`T->A`), T to C (`T->C`), and T to G (`T->G`) mutation. Mutations with reference bases as G or A need to be converted into C or T by reverse-complement mutations (e.g., `G->T` will become `C->A`). Notably, the sequence context may also need to convert to its reverse complement as we always need the upstream and downstream sequence of the mutation. We also highly recommend removing mutations located in the protein-coding regions as the sequence context of those mutations may be much different from non-coding somatic mutations and thus bias the training process. \n* __uid__:\nThe column index (start from 0) for patient id. Note that each patient can only have one patient id. In the above example, uid refers to the 4th column `patient_id`.\n* __upstream__:\nThe column index (start from 0) for the upstream sequence context (from 5' to 3') of the mutation. There is no limit for the length of the sequence except that it must be longer than the product of the number of subcomponents (`--ring_num`) and the length of subcomponent (`--ring_width`). If the reference allele is G or A, do not forget to use the reverse complement of mutation and its sequence context. In that case, the upstream still refers to the upstream (5`) of mutation not the sequence with smaller coordinates on the reference genome. In the above example, upstream refers to the 10th column `upstream'.\n* __downstream__:\nThe column index (start from 0) for the downstream sequence context (from 5' to 3') of the mutation. In the above example, downstream refers to the 11th column `downstream`.\n* __var_type__:\nThe column index (start from 0) for the variation type from the six substitutions: `C->A`, `C->G`, `C->T`, `T->A`, `T->C`, and `T->G`. In the above example, var_type refers to the 9th column `var_type`.\n* __a__:\nThe column index list for additional mutations' features except for sequence context. In the above example, this refers to the 13th `bin_num`. Here we assign mutations into a 1Mb bin and give each bin a unique ID. If there is no additional features for mutations, just leave it as blank (e.g., `\"a\": []`)\n* __b__:\nThe column index list for patients' features. In the above example, this refers to the 4th column patient id and the 12th column cancer type label (`cancer_id`).  \n"
      },
      "source": "https://raw.githubusercontent.com/ma-compbio/MutSpace/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9809528941138228,
      "result": {
        "original_header": "Outputs",
        "type": "Text_excerpt",
        "value": "After the training is finished, a folder named `ckpt` should be created in the directory where train.py is being executed. A folder with name specified by the parameter `--name`` contains the output of MutSpace. You should see multiple check point files with suffix .pth. Each check point file is a model file that can be loaded using torch (e.g., `torch.load(\"49.pth\", map_location = 'cpu')`). The file name indicates that file is captured during which epoch. For example, `0.pth` means the first epoch, and `49.pth` means the 50th epoch. Each check point file is actually a big 2D matrix with each row as an embedding of features including patient's id, cancer type, sub-components, etc. \nThere are also four outputs, feature_dict.json, patient_mapping.json, setting.json, and record.txt. \n* __feature_dict.json__:\nThis JSON file contains the relationship that maps feature to the index of row in the check point file. For example, `\"DO225368\": 96, \"bin_0\": 97, ...` means that the patient's id embeddings for patient DO225368 is the 97th row of the 2D matrix in the check point file, and the embedding of the mutation's bin with bin id of bin_0 is the 98th row of the 2D matrix in the check point file.\n* __patient_mapping.json__:\nThis JSON file contains important information about patients' features and how to get the final patients' embedding. For example, `\"DO225368\": [96, [15, 97], [96, 98]]` means that this patient has patient id DO225368. He or she has two features one is patient id (denoted by 96) and another is cancer type denoted by 98. To get the final embedding of this patient you just need to sum the embedding of patient's id and cancer type, and further normalized by sqrt(2). We use 2 because each patient has two features.\n* __setting.json__:\nThis JSON file contains the parameters used for this run.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ma-compbio/MutSpace/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ma-compbio/MutSpace/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ma-compbio/MutSpace/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ma-compbio/MutSpace"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/ma-compbio/MutSpace/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ma-compbio/MutSpace/master/scripts/1210-gen.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 0.893454494157993,
      "result": {
        "original_header": "Inputs and pre-processing",
        "type": "Text_excerpt",
        "value": "Create a folder and put at least one TSV file (with suffix .tsv) formatted as below (line start with # will be skipped). \n```no-highlight\n#chrom  start   end     patient_id      var_id  ref     alt     strand  var_type        upstream        downstream  cancer_id       bin_num\nchr1    755373  755374  DO225368        ICGC-BRCA-EU_DO225368_246       C       A       -       C->A    GTAGATAGGGTGGAT TGCTGGCCACGCAGG ICGC-BRCA-EU    bin_0\nchr1    755680  755681  DO224963        ICGC-BRCA-EU_DO224963_247       C       T       -       C->T    GGTGGATCTGCTGGA AGGCAGGTAGTATAG ICGC-BRCA-EU    bin_0\n```\nIn the same folder, create a JSON file named __meta.json__. This file is the configuration file telling script how to extract information from the mutation file. You can modify the format of the mutation TSV file, just make sure to modify this JSON file and set the right column index (start from 0) for each entry.\n```no-highlight\n{\n    \"uid\": 3,\n    \"upstream\": 9,\n    \"downstream\": 10,\n    \"var_type\": 8,\n    \"a\": [12],\n    \"b\": [3, 11]\n}\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/ma-compbio/MutSpace/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8122708575534643,
      "result": {
        "original_header": "Inputs and pre-processing",
        "type": "Text_excerpt",
        "value": "Create a folder and put at least one TSV file (with suffix .tsv) formatted as below (line start with # will be skipped). \n```no-highlight\n#chrom  start   end     patient_id      var_id  ref     alt     strand  var_type        upstream        downstream  cancer_id       bin_num\nchr1    755373  755374  DO225368        ICGC-BRCA-EU_DO225368_246       C       A       -       C->A    GTAGATAGGGTGGAT TGCTGGCCACGCAGG ICGC-BRCA-EU    bin_0\nchr1    755680  755681  DO224963        ICGC-BRCA-EU_DO224963_247       C       T       -       C->T    GGTGGATCTGCTGGA AGGCAGGTAGTATAG ICGC-BRCA-EU    bin_0\n```\nIn the same folder, create a JSON file named __meta.json__. This file is the configuration file telling script how to extract information from the mutation file. You can modify the format of the mutation TSV file, just make sure to modify this JSON file and set the right column index (start from 0) for each entry.\n```no-highlight\n{\n    \"uid\": 3,\n    \"upstream\": 9,\n    \"downstream\": 10,\n    \"var_type\": 8,\n    \"a\": [12],\n    \"b\": [3, 11]\n}\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/ma-compbio/MutSpace/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8536138387230687,
      "result": {
        "original_header": "Outputs",
        "type": "Text_excerpt",
        "value": "After the training is finished, a folder named `ckpt` should be created in the directory where train.py is being executed. A folder with name specified by the parameter `--name`` contains the output of MutSpace. You should see multiple check point files with suffix .pth. Each check point file is a model file that can be loaded using torch (e.g., `torch.load(\"49.pth\", map_location = 'cpu')`). The file name indicates that file is captured during which epoch. For example, `0.pth` means the first epoch, and `49.pth` means the 50th epoch. Each check point file is actually a big 2D matrix with each row as an embedding of features including patient's id, cancer type, sub-components, etc. \n"
      },
      "source": "https://raw.githubusercontent.com/ma-compbio/MutSpace/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ma-compbio/MutSpace/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "cancer-genomics, machine-learning, mutation-signatures, sequence-embedding"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2020 Ma Lab at CMU\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/ma-compbio/MutSpace/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MutSpace"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "ma-compbio"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 25848,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 231,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ma-compbio/MutSpace/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Prerequisites",
        "type": "Text_excerpt",
        "value": "MutSpace requires:\n* Python (tested 3.7.3)\n* Torch (tested 1.3.1)\n* Numpy (tested 1.16.4)\n* Tqdm (tested 4.32.1)\n* Json (tested 2.0.9)\n* H5py (tested 2.9.0)\n* Argparse\n* Random\n\nMutSpace has tested using NVIDIA 2080S GPU\n\n<a name=\"usage\"/>\n"
      },
      "source": "https://raw.githubusercontent.com/ma-compbio/MutSpace/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 11:38:11",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "type": "Text_excerpt",
        "value": "The main function to run MutSpace is 'train.py'. It usage is shown below:\n```no-highlight\nRun \"python train.py\"\nusage: train.py [-h] [--name NAME] [--data_path DATA_PATH]\n                [--ring_num RING_NUM] [--ring_width RING_WIDTH]\n                [--margin MARGIN] [--max_norm MAX_NORM] [--emb_dim EMB_DIM]\n                [--epochs EPOCHS] [--batch_size BATCH_SIZE] [--lr LR]\n                [--n_negative N_NEGATIVE] [--debug] [--temp TEMP] [--seed SEED]\nThe following arguments are mandatory:\n      --name        Name of the run. A forlder with this name will be created in the directory where this script is being executed\n      ---data_path  Path to the folder containing mutation data\n    The following arguments are optional:\n      --ring_num    The number of sub-components of sequence context [default is 6]\n      --ring_width  The length of each sub-component of seuqnce context [1]\n      --margin      The constant margin in the hinge loss function [1.0]\n      --max_nrom    The max norm of embeddings [10.0]\n      --emb_dim     The dimension of embeddings [200]\n      --epochs      Number of epochs for training [50]\n      --batch_size  Batch size [4096]\n      --lr          Learning rate [1e-3]\n      --n_negative  Number of negative samples generated per positve sample [15]\n      --temp        Normalization parameter for calculation of similarity [1.0]\n      --seed        Random seed [888]\n```\n\n<a name=\"inputs-and-pre-processing\"/>\n"
      },
      "source": "https://raw.githubusercontent.com/ma-compbio/MutSpace/master/README.md",
      "technique": "header_analysis"
    }
  ]
}