{
  "application_domain": [
    {
      "confidence": 25.59,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    },
    {
      "confidence": 47.28,
      "result": {
        "type": "String",
        "value": "Natural Language Processing"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "To cite this work:",
        "parent_header": [
          "RespireNet 2020"
        ],
        "type": "Text_excerpt",
        "value": "```\n@misc{gairola2020respirenet,\n      title={RespireNet: A Deep Neural Network for Accurately Detecting Abnormal Lung Sounds in Limited Data Setting}, \n      author={Siddhartha Gairola and Francis Tom and Nipun Kwatra and Mohit Jain},\n      year={2020},\n      eprint={2011.00196},\n      archivePrefix={arXiv},\n      primaryClass={cs.SD}\n}\n```\n"
      },
      "source": "https://raw.githubusercontent.com/microsoft/RespireNet/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Siddhartha Gairola and Francis Tom and Nipun Kwatra and Mohit Jain",
        "format": "bibtex",
        "title": "RespireNet: A Deep Neural Network for Accurately Detecting Abnormal Lung Sounds in Limited Data Setting",
        "type": "Text_excerpt",
        "value": "@misc{gairola2020respirenet,\n    primaryclass = {cs.SD},\n    archiveprefix = {arXiv},\n    eprint = {2011.00196},\n    year = {2020},\n    author = {Siddhartha Gairola and Francis Tom and Nipun Kwatra and Mohit Jain},\n    title = {RespireNet: A Deep Neural Network for Accurately Detecting Abnormal Lung Sounds in Limited Data Setting},\n}"
      },
      "source": "https://raw.githubusercontent.com/microsoft/RespireNet/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_of_conduct": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Microsoft Open Source Code of Conduct\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\n\nResources:\n\n- [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/)\n- [Microsoft Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/)\n- Contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with questions or concerns\n"
      },
      "source": "https://raw.githubusercontent.com/microsoft/RespireNet/main/CODE_OF_CONDUCT.md",
      "technique": "file_exploration"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/microsoft/RespireNet"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-12-07T04:39:05Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-16T12:28:32Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "This is the official implementation of the work RespireNet."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9788691994314663,
      "result": {
        "original_header": "RespireNet 2020",
        "type": "Text_excerpt",
        "value": "This is the official implementation of the work **[RespireNet](https://arxiv.org/abs/2011.00196)**.\n \n"
      },
      "source": "https://raw.githubusercontent.com/microsoft/RespireNet/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9726962250927556,
      "result": {
        "original_header": "Train and Test Script",
        "type": "Text_excerpt",
        "value": "* We follow both the official `60-40` train-test split as well as the `80-20` split.\n* For training we employ a 2-stage training protocol.\n* Stage 1: The model is trained end-to-end on train data from all the 4 devices.\n* Stage 2: The model is fine-tuned (with a lower learning rate `1e-4`) on only the data from a single device. We do this separately for each device (device specific fine-tuning).\n \n"
      },
      "source": "https://raw.githubusercontent.com/microsoft/RespireNet/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8530358517407358,
      "result": {
        "original_header": "Train Command:",
        "type": "Text_excerpt",
        "value": "Please go through our paper for more details.\n \n"
      },
      "source": "https://raw.githubusercontent.com/microsoft/RespireNet/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9419174011481355,
      "result": {
        "original_header": "Some additional results",
        "type": "Text_excerpt",
        "value": "| Method | Sp |  Se |  Score |\n|--------:|:---:|:---:|:-----:|\n| CNN + Mixup  | 73.9% | 48.9% | 61.4%|\n| CNN + VGGish*| 76.0% | 42.2% | 59.1%|\n| Hybrid CNN + Transformer | 75.3% | 49.9% | 63.2%|\n```\nWe also tried experiments with Mixup augmentations, using pre-trained VGGish features and a novel Hybrid CNN + Transformer architecture, however they did not prove to be very useful. \nHowever transformers with appropriate pretraining have found to be useful in many applications (especially NLP tasks) and may prove to be useful in the future.\n```\n*[VGGish link](https://github.com/tensorflow/models/tree/master/research/audioset/vggish)*\n \n"
      },
      "source": "https://raw.githubusercontent.com/microsoft/RespireNet/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9576690683746303,
      "result": {
        "original_header": "About the code",
        "type": "Text_excerpt",
        "value": "* `train.py`: Main trainer code.\n* `image_dataloader.py`: Dataloader module.\n* `utils.py`: Contains a lot of utility functions for audio file loading, feature extraction, augmentations, etc.\n* `eval.py`: Evaluation source files for trained model.\n* `scripts`: Directory which contains the runner scripts.\n* `nets`: Contains the different network modules.\n* `data`: Training-Testing split and should contain the ICBHI data.\n* `models`: Contains the trained checkpoint for our proposed framework.\n \n"
      },
      "source": "https://raw.githubusercontent.com/microsoft/RespireNet/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/microsoft/RespireNet/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 20
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/microsoft/RespireNet/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "microsoft/RespireNet"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "RespireNet 2020"
      },
      "source": "https://raw.githubusercontent.com/microsoft/RespireNet/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/microsoft/RespireNet/main/scripts/eval_script.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/microsoft/RespireNet/main/scripts/devicewise_script_run.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/microsoft/RespireNet/main/scripts/train_script_run.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/microsoft/RespireNet/main/./images/overview_large.PNG"
      },
      "source": "https://raw.githubusercontent.com/microsoft/RespireNet/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/microsoft/RespireNet/main/./images/blank_region_clipping.PNG"
      },
      "source": "https://raw.githubusercontent.com/microsoft/RespireNet/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/microsoft/RespireNet/main/./images/concatenation_augmentation.PNG"
      },
      "source": "https://raw.githubusercontent.com/microsoft/RespireNet/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "invocation": [
    {
      "confidence": 0.956095764881411,
      "result": {
        "original_header": "Train Command:",
        "type": "Text_excerpt",
        "value": "`python train.py --data_dir ../data/icbhi_dataset/audio_text_data/ --folds_file ../data/patient_list_foldwise.txt --model_path models_out --lr 1e-3 --batch_size 64 --num_worker 4 --start_epochs 0 --epochs 200 --test_fold 4` \n`python train.py --data_dir ../data/icbhi_dataset/audio_text_data/ --folds_file ../data/patient_list_foldwise.txt --model_path models_out --lr 1e-4 --batch_size 64 --num_worker 4 --start_epochs 0 --epochs 50 --test_fold 4 --checkpoint models/ckpt_best.pkl --stetho_id 0\n` \n"
      },
      "source": "https://raw.githubusercontent.com/microsoft/RespireNet/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9402523145434313,
      "result": {
        "original_header": "Test Command:",
        "type": "Text_excerpt",
        "value": "`python eval.py --data_dir ../data/icbhi_dataset/audio_text_data/ --folds_file ../data/patient_list_foldwise.txt --batch_size 64 --num_worker 4 --test_fold 4 --checkpoint models/ckpt_best.pkl`\n \n"
      },
      "source": "https://raw.githubusercontent.com/microsoft/RespireNet/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8984822657475817,
      "result": {
        "original_header": "About the code",
        "type": "Text_excerpt",
        "value": "* `train.py`: Main trainer code.\n* `image_dataloader.py`: Dataloader module.\n* `utils.py`: Contains a lot of utility functions for audio file loading, feature extraction, augmentations, etc.\n* `eval.py`: Evaluation source files for trained model.\n* `scripts`: Directory which contains the runner scripts.\n* `nets`: Contains the different network modules.\n* `data`: Training-Testing split and should contain the ICBHI data.\n* `models`: Contains the trained checkpoint for our proposed framework.\n \n"
      },
      "source": "https://raw.githubusercontent.com/microsoft/RespireNet/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/microsoft/RespireNet/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "    MIT License\n\n    Copyright (c) Microsoft Corporation.\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE\n"
      },
      "source": "https://raw.githubusercontent.com/microsoft/RespireNet/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "RespireNet"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "microsoft"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 49285,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 1510,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/microsoft/RespireNet/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_papers": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/2011.00196"
      },
      "source": "https://raw.githubusercontent.com/microsoft/RespireNet/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependencies:",
        "parent_header": [
          "RespireNet 2020"
        ],
        "type": "Text_excerpt",
        "value": "```\n* Python3\n* Pytorch (torch, torchvision and other dependencies for Pytorch)\n* Numpy\n* Librosa (0.8.0)\n* nlpaug (0.0.14)\n* OpenCV (4.2.0)\n* Pandas (0.22.0)\n* scikit-learn (0.23.1)\n* tqdm (4.48.0)\n* cudnn (CUDA for training on GPU)\n```\n\nThese are all easily installable via, e.g., `pip install numpy`. Any reasonably recent version of these packages shold work.\nIt is recommended to use a python `virtual` environment to setup the dependencies and the code.\n"
      },
      "source": "https://raw.githubusercontent.com/microsoft/RespireNet/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "installation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 01:22:48",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 48
      },
      "technique": "GitHub_API"
    }
  ]
}