{
  "application_domain": [
    {
      "confidence": 14.02,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/jakob-he/TADA"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-03-19T10:19:37Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-26T13:40:56Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "TAD-aware annotation of CNVs"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "parent_header": [
          "TADA"
        ],
        "type": "Text_excerpt",
        "value": "The TAD annotation (TADA) tools is designed to annotate CNVs based on functional annotation with respect to their regulatory context i.e. TADs. TADA allows to determine the functional impact of CNVs either by annotation and manual filtering or automated classification. The default Random Forest models are trained on curated sets of pathogenic and non-pathogenic variants. New CNVs can therefore be annotated with the probability of being pathogenic i.e. a *pathogenicity score*. A simplified workflow of TADA is shown in the figure below. Also, a more comprehensive description of TADA including the pretrained model and feature set is provided in our preprint: https://www.biorxiv.org/content/10.1101/2020.06.30.180711v1.\n\n.. figure:: TADA_Workflow.jpg\n   :scale: 30 %\n   :alt: TADA Workflow\n\n"
      },
      "source": "https://raw.githubusercontent.com/jakob-he/TADA/master/README.rst",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/jakob-he/TADA/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jakob-he/TADA/master/docs/source/TADA_Tutorial.ipynb"
      },
      "source": "https://raw.githubusercontent.com/jakob-he/TADA/master/docs/source/TADA_Tutorial.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jakob-he/TADA/master/docs/source/.ipynb_checkpoints/motiftutorial-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/jakob-he/TADA/master/docs/source/.ipynb_checkpoints/motiftutorial-checkpoint.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jakob-he/TADA/master/docs/source/.ipynb_checkpoints/motifkernel-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/jakob-he/TADA/master/docs/source/.ipynb_checkpoints/motifkernel-checkpoint.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jakob-he/TADA/master/docs/source/.ipynb_checkpoints/mismatch_tutorial-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/jakob-he/TADA/master/docs/source/.ipynb_checkpoints/mismatch_tutorial-checkpoint.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jakob-he/TADA/master/docs/source/.ipynb_checkpoints/TADA_Tutorial-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/jakob-he/TADA/master/docs/source/.ipynb_checkpoints/TADA_Tutorial-checkpoint.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jakob-he/TADA/master/docs/source/.ipynb_checkpoints/Gappy_Kernel_IGF_Example-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/jakob-he/TADA/master/docs/source/.ipynb_checkpoints/Gappy_Kernel_IGF_Example-checkpoint.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/jakob-he/TADA/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "jakob-he/TADA"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "TADA"
      },
      "source": "https://raw.githubusercontent.com/jakob-he/TADA/master/README.rst",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jakob-he/TADA/master/manuscript/GAT_ANALYSIS/supp_gat_analysis.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jakob-he/TADA/master/manuscript/GAT_ANALYSIS/main_gat_analysis.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "TADA"
        ],
        "type": "Text_excerpt",
        "value": "TADA can be installed either by cloning our GitHub repository or directly via Pip. Before any installation we recommend creating a new conda environment with Python 3.6 to avoid any dependency issue::\n\n     conda create -n tada python=3.6\n\nInstall TADA via **GitHub**::\n\n     git clone https://github.com/jakob-he/TADA\n     cd  TADA\n     pip install .\n\n(Optional) To ensure a successfull installtion a test protocol can be executed inside the TADA directory. This requires the tox python package.::\n\n      pip install tox\n      tox\n      \nInstall via **Pip**::\n\n      pip install tadacnv\n     \n"
      },
      "source": "https://raw.githubusercontent.com/jakob-he/TADA/master/README.rst",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9997811349551579,
      "result": {
        "original_header": "TADA",
        "type": "Text_excerpt",
        "value": ".. image:: https://img.shields.io/badge/pypi-v1.0.2-blue\n    :target: https://pypi.org/project/tadacnv/ \n.. image:: https://img.shields.io/badge/published%20in-GenomeBiology-green\n    :target: https://genomebiology.biomedcentral.com/articles/10.1186/s13059-022-02631-z\n    \n.. image:: https://zenodo.org/badge/176484783.svg\n   :target: https://zenodo.org/badge/latestdoi/176484783 \n"
      },
      "source": "https://raw.githubusercontent.com/jakob-he/TADA/master/README.rst",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/jakob-he/TADA/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "annotation, cnvs, copy-number-variation, machine-learning, pathogenicity"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2020 Jakob Hertzberg\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/jakob-he/TADA/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "TADA"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "jakob-he"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 147418,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 20335,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jakob-he/TADA/master/README.rst"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jakob-he",
          "type": "User"
        },
        "date_created": "2021-09-12T13:18:21Z",
        "date_published": "2021-09-12T13:24:20Z",
        "description": "Stable Release\r\n\r\nChangelog\r\n\r\n- Updated the pre-compiled duplication model ",
        "html_url": "https://github.com/jakob-he/TADA/releases/tag/v.1.0.2",
        "name": "v.1.0.2",
        "release_id": 49412774,
        "tag": "v.1.0.2",
        "tarball_url": "https://api.github.com/repos/jakob-he/TADA/tarball/v.1.0.2",
        "type": "Release",
        "url": "https://api.github.com/repos/jakob-he/TADA/releases/49412774",
        "value": "https://api.github.com/repos/jakob-he/TADA/releases/49412774",
        "zipball_url": "https://api.github.com/repos/jakob-he/TADA/zipball/v.1.0.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jakob-he",
          "type": "User"
        },
        "date_created": "2021-09-08T12:21:13Z",
        "date_published": "2021-09-08T12:26:35Z",
        "description": "Stable Release:\r\n\r\nChangelog:\r\n\r\n- Added data to PyPi package to allow for direct prediction and annotation of single variant sets \r\n- Updated testing procedures",
        "html_url": "https://github.com/jakob-he/TADA/releases/tag/v.1.0.1",
        "name": "v.1.0.1",
        "release_id": 49194822,
        "tag": "v.1.0.1",
        "tarball_url": "https://api.github.com/repos/jakob-he/TADA/tarball/v.1.0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/jakob-he/TADA/releases/49194822",
        "value": "https://api.github.com/repos/jakob-he/TADA/releases/49194822",
        "zipball_url": "https://api.github.com/repos/jakob-he/TADA/zipball/v.1.0.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jakob-he",
          "type": "User"
        },
        "date_created": "2021-09-06T16:42:25Z",
        "date_published": "2021-09-08T08:09:07Z",
        "description": "Stable Release:\r\n\r\n- Updated pre-trained models\r\n- New tests without pre-compiled objects\r\n- Dependencies with the newest version\r\n- Tested with python 3.6",
        "html_url": "https://github.com/jakob-he/TADA/releases/tag/v1.0.0",
        "name": "v1.0.0",
        "release_id": 49179173,
        "tag": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/jakob-he/TADA/tarball/v1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/jakob-he/TADA/releases/49179173",
        "value": "https://api.github.com/repos/jakob-he/TADA/releases/49179173",
        "zipball_url": "https://api.github.com/repos/jakob-he/TADA/zipball/v1.0.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-06 00:19:01",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 7
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "TADA"
        ],
        "type": "Text_excerpt",
        "value": "PyPi Installation\n*****************\n\nIf TADA was installed directly via Pip no config files are needed to predict the pathogenicity of variants and annotate them with our default feature set. You only need a BED or VCF-file with deletions or duplications. **This only applies to our default features!** For user defined feature set the Github installation is required (see next section). To predict or annotate deletions (for duplication choose DUP instead of DEL) the following commands can be executed:\n\n.. code-block:: python\n\n    predict_variants -d -t DEL -v path_to_variants -o output_directory\n    annotate_cnvs -d -t DEL -v path_to_variants -o output_directory\n\nGithub Installation\n*******************\n\nIf TADA was installed by cloning the GitHub there are three use cases for TADA that can be executed using the command line:\n\n\t* Annotation of CNVs for manual filtering\n\t* Prediction of pathogenicity\n\t* Training a classification model\n\nThe basis for all three use cases is a config file containing the paths to the annotations as well as to the BED- or VCF variant files.\nWe include two default config files *config_del_default.yml* and *config_dup_default* which can be used for deletions and duplications, respectively.\nThe individual config file entries are described below:\n\n.. code-block:: yaml\n\n    TADS: (In this section the path to BED formatted TAD boundaries is set.)\n      RAW: \"data/Dixon_2015_stability_formatted_TADs.bed\" (By default TAD boundaries called from embryonic stem cells (ES) are used.)\n      ANNOTATED: \"data/Annotated_Default_TADs.p\" (If TADs have been already annotated using the *annotate TADs* command a pickle file containing the preannotated elements can be specified here to speed up CNV annotation. We provide an already annotated set of ES TADs.)\n\n    ANNOTATIONS: (Here, the paths to a variety of annotations are set. Further information on the default set of annotations can be found in our preprint.)\n      GENES: \"data/gnomad_genes_pli_loeuf_HI.bed\"\n      EXONS: \"data/HAVANA_exon.merged.bed.gz\"\n      ENHANCERS: \"data/fantom5_enhancer_phastcon_average.bed\"\n      CTCF: \"data/H1_hESC_CTCF_peaks_idr_optimal.bed\"\n      DDG2P: \"data/DDG2P_genes.bed\"\n      POINT: \"data/extracted_po_pairs.bed\"\n\n    CNVS: (The VCFs or BED variant files are set here. It is required to add descriptor for the individual variant sets. For classification two variants set have to be defined e.g. PATHOGENIC and NON_PATHOGENIC.)\n      RAW:\n        TEST: (This is an example descriptor and can be adjusted according to the nature of the variants.)\n      ANNOTATED: (Similar to TADs preannotated CNVs can be specified here. Again descriptors need the added e.g. TEST.)\n        TEST:\n\n    FEATURES: \"extended\" (The default feature set using the above shown annotation is called \"extended\", since it includes metrics beyond distance measurements. If the user provides individual annotation this needs to be set to \"distance\".)\n\n    CLASSIFIER: \"rf\" (TADA currently only supports a Random Forest as classifier. This might change in future versions.)\n\n    KWARGS: (If \"classification_run\" was previously executed using the *-gridcv* argument the resulting parameters can be added here to adapt the config file for individually trained models. The current parameter set is optimized for the provided pretrained models.)\n      max_depth:  None\n      max_features: 'auto'\n      min_samples_leaf: 5\n      min_samples_split: 4\n      n_estimators: 500\n      oob_score: True\n\n    PRETRAINED_MODEL: \"data/rf_model.p\" (A pretrained model can be specified here. By default this points to the provided deletion or duplication model depnding on the config file.)\n\nAnnotation of CNVs for Manual Filtering\n***************************************\n\nThe first use case i.e. annotation of CNVs for manual filtering requires a BED- or VCF-file with CNVs. The path to the CNV needs to specified in the config file. As described above, TADA provides two default config files for deletions and duplications, respectively. The default output of the annotation is a pickled CNV file containing all the annotated CNV objects (*Annotated_CNVs.p*) and a CSV-file where each line refers to an annotated CNV (*Annotated_CNVs.csv*). The annotation is executed as follows:\n\n.. code-block:: python\n\n    general usage: annotate_cnvs [-h] [-p] [-c CONFIG] [-o OUTPUT]\n\n    default: annotate_cnvs -c config_file -o output_directory\n\nPrediction of Pathogenicity\n***************************\n\nThe process of pathogenicity prediction is similar to the annotation. In a first step, the CNVs passed to the script are annotated. Then a previously defined classification model defined in the config file is used to compute a *pathogenicity score*. This output refers to the probability that the CNV is pathogenic. The score is added to the resulting CSV-file. The default deletion and duplication models are Random Forests trained on curated sets of pathogenic and non-pathogenic variants. However, the user can also specify a different model. It is recommend to train the model using TADA as described below, since it needs to satisfy certain requirements. The recommended way of using the prediction script is:\n\n.. code-block:: python\n\n    general usage: predict_variants [-h] [-c CONFIG] [-o OUTPUT]\n\n    default: predict_variants -c config_file -o output_directory\n\nTraining a Classification Model\n*******************************\n\nThe training of a classification model is an advanced use of TADA. In addition to two sets of CNVs e.g. pathogenic and non-pathogenic, a set of annotations needs to be specified. It is also possible to use the default annotation set. Based on these annotation a feature set is computed. For user defined annotations the features are distances of a CNV to the individual genomic elements. The model can the be trained on the CNVs set with the given feature set as follows:\n\n.. code-block:: python\n\n   general usage: classification_run  [-h] [-c CONFIG] [-fs] [-o OUTPUT] [-gridcv] [-rs RANDOM_SEED]\n\n   default usage: classification_run -c config_file -o output_directory\n\nThe *fs* option allows to produce multiple visualizations for feature selection. The visualizations include the permutation based feature importance and a partial correlation based node graph.\nIf required the classification run can be executed with the *gridcv* option to find an optimal parameter set. For reproducability the *rs* option can be set to a specific integer.\n\nTesting with ClinVar Data\n*************************\nWe provide two datasets for deletions and duplication comprised of ClinVar variants that can be used for getting familiar with TADA. There are two preset configs for this purpose - *config_del_clinvar.yml* and *config_dup_clinvar*. These config file can be used for the *annotate_cnvs*, *predict_variants* and *classification_run* commands.\n"
      },
      "source": "https://raw.githubusercontent.com/jakob-he/TADA/master/README.rst",
      "technique": "header_analysis"
    }
  ]
}