{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 2: map FASTQ reads onto a reference genome with BWA-backtrack",
        "parent_header": [
          "Bivartect",
          "Pipeline"
        ],
        "type": "Text_excerpt",
        "value": "```\n$ bwa aln <index_prefix> <out.fastq> > <out.sai>\n$ bwa samse -f <out.sam> <index_prefix> <out.sai> <out.fastq>\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ykat0/bivartect/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Reference",
        "parent_header": [
          "Bivartect"
        ],
        "type": "Text_excerpt",
        "value": "Keisuke Shimmura, Yuki Kato and Yukio Kawahara,\n**Bivartect: accurate and memory-saving breakpoint detection by direct read comparison**,\n*Bioinformatics*, vol. 36, issue 9, pp. 2725\u20132730, 2020. [[Link]](https://academic.oup.com/bioinformatics/article/36/9/2725/5716329)\n\n---\nIf you have any questions, please contact [Yuki Kato](http://www.med.osaka-u.ac.jp/pub/rna/ykato/)  \n*Graduate School of Medicine, Osaka University, Japan*\n"
      },
      "source": "https://raw.githubusercontent.com/ykat0/bivartect/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ykat0/bivartect"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-08-02T08:11:27Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-04-29T02:22:29Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9953573506771022,
      "result": {
        "original_header": "Accurate and memory-saving breakpoint detection by direct read comparison",
        "type": "Text_excerpt",
        "value": "We present Bivartect, a genomic structural variant caller that directly compares sequence reads generated by high-throughput sequencing. Bivartect achieves memory saving by keeping only a small part of the suffixes of input reads in memory. Using simulated benchmark data and real genome editing data, Bivartect outperformed the state-of-the-art small variant callers in low false positive detection of single nucleotide variants.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ykat0/bivartect/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.941111390150683,
      "result": {
        "original_header": "Pipeline",
        "type": "Text_excerpt",
        "value": "The standard use of Bivartect is illustrated with the following steps:\n \n"
      },
      "source": "https://raw.githubusercontent.com/ykat0/bivartect/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9101972868911752,
      "result": {
        "original_header": "Data",
        "type": "Text_excerpt",
        "value": "* Simulated benchmark FASTQ data used in this work are available [HERE](http://www.med.osaka-u.ac.jp/pub/rna/ykato/project/bivartect/).\n \n"
      },
      "source": "https://raw.githubusercontent.com/ykat0/bivartect/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ykat0/bivartect/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ykat0/bivartect/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ykat0/bivartect"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Bivartect"
      },
      "source": "https://raw.githubusercontent.com/ykat0/bivartect/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "identifier": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://zenodo.org/badge/latestdoi/143263549"
      },
      "source": "https://raw.githubusercontent.com/ykat0/bivartect/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "Bivartect"
        ],
        "type": "Text_excerpt",
        "value": "* Bivartect (ver. 1.1.10) (**bivartect-1.1.10.tar.gz**) in C++ program\n"
      },
      "source": "https://raw.githubusercontent.com/ykat0/bivartect/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Install on Linux and macOS",
        "parent_header": [
          "Bivartect",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "Type the followings in your terminal:\n```\n$ tar zxf bivartect-1.1.10.tar.gz\n$ cd bivartect-1.1.10\n$ ./configure\n```\nor  \n```\n$ ./configure CXXFLAGS='-std=c++11 -pthread'\n```\nIf you would like to install your local directory,\n\n```\n$ ./configure --prefix=/path/to/local_dir\n```\nThen,\n\n```\n$ make\n$ sudo make install\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ykat0/bivartect/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9398359463520239,
      "result": {
        "original_header": "Pipeline",
        "type": "Text_excerpt",
        "value": "The standard use of Bivartect is illustrated with the following steps:\n \n"
      },
      "source": "https://raw.githubusercontent.com/ykat0/bivartect/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ykat0/bivartect/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bivartect"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "ykat0"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 8718,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ykat0/bivartect/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "ykat0",
          "type": "User"
        },
        "date_created": "2020-01-20T02:06:57Z",
        "date_published": "2020-01-23T07:51:49Z",
        "description": "# Bivartect\r\n\r\n[![DOI](https://zenodo.org/badge/143263549.svg)](https://zenodo.org/badge/latestdoi/143263549)\r\n\r\n### Accurate and memory-saving breakpoint detection by direct read comparison\r\n\r\nLast updated: 2020-01-23\r\n\r\nWe present Bivartect, a genomic structural variant caller that directly compares sequence reads generated by high-throughput sequencing. Bivartect achieves memory saving by keeping only a small part of the suffixes of input reads in memory. Using simulated benchmark data and real genome editing data, Bivartect outperformed the state-of-the-art small variant callers in low false positive detection of single nucleotide variants.\r\n\r\n## Installation\r\n* Bivartect (ver. 1.1.10) (**bivartect-1.1.10.tar.gz**) in C++ program\r\n\r\n### Requirements\r\n* C++11 or later\r\n\r\n### Install on Linux and macOS\r\nType the followings in your terminal:\r\n```\r\n$ tar zxf bivartect-1.1.10.tar.gz\r\n$ cd bivartect-1.1.10\r\n$ ./configure\r\n```\r\nor  \r\n```\r\n$ ./configure CXXFLAGS='-std=c++11 -pthread'\r\n```\r\nIf you would like to install your local directory,\r\n\r\n```\r\n$ ./configure --prefix=/path/to/local_dir\r\n```\r\nThen,\r\n\r\n```\r\n$ make\r\n$ sudo make install\r\n```\r\n\r\n## Usage\r\n```\r\nFor single-end reads:\r\n$ bivartect -3 <normal.fastq> <tumor.fastq> <output.fastq>\r\n\r\nFor paired-end reads:\r\n$ bivartect -5 <normal_1.fastq> <normal_2.fastq> <tumor_1.fastq> <tumor_2.fastq> <output.fastq>\r\n\r\nGeneral options:\r\n -n     Path to the normal FASTQ (string [necessary])\r\n -N     Path to the normal reversed FASTQ (string)\r\n -m     Path to the mutated FASTQ (string [necessary])\r\n -M     Path to the mutated reversed FASTQ (string)\r\n -o     Path to the output FASTQ (string)\r\n -a     Output multi-FASTA instead of FASTQ (bool [false])\r\n -s     Input FASTQ is strand-specific (bool [false])\r\n -d     Filtering depth (int 10...32 [24])\r\n -c     Read count cutoff.\r\n        In a breakpoint cluster, \r\n        IF max(predictedNormalReadCount, predictedMutatedReadCount) < c \r\n        THEN omit the breakpoint because of low quality. (int 1...100 [6])\r\n -x     Analysis division rate (int 1,4,16,64...1024 [64])\r\n -t     Using thread count. Set 0 to use hardware maximum threads (int 0... [0])\r\n -r     Path to the output detail overview text file (string)\r\n\r\nAlias options:\r\n -2     = -n -m\r\n -3     = -n -m -o\r\n -4     = -n -N -m -M\r\n -5     = -n -N -m -M -o\r\n\r\nExamples:\r\n$ bivartect -x 16 -d 30 -c 6 -n <normal.fastq> -m <tumor.fastq> -o <output.fastq>\r\n$ bivartect -3 <normal.fastq> <tumor.fastq> <output.fastq> -c 4\r\n$ bivartect -5 <normal_1.fastq> <normal_2.fastq> <tumor_1.fastq> <tumor_2.fastq> <output.fastq>\r\n$ bivartect -2 <normal.fastq> <tumor.fastq> -r <output.txt>\r\n```\r\n## Pipeline\r\nThe standard use of Bivartect is illustrated with the following steps:\r\n\r\n### Step 1: run Bivartect to get consensus normal FASTQ reads whose mutated counterparts are predicted to have breakpoints\r\n```\r\n$ bivartect -5 <normal_1.fastq> <normal_2.fastq> <tumor_1.fastq> <tumor_2.fastq> <out.fastq>\r\n```\r\n\r\n### Step 2: map FASTQ reads onto a reference genome with BWA-backtrack\r\n```\r\n$ bwa aln <index_prefix> <out.fastq> > <out.sai>\r\n$ bwa samse -f <out.sam> <index_prefix> <out.sai> <out.fastq>\r\n```\r\n\r\n### Step 3: convert SAM alignments into predicted VCF variants with their genomic locations\r\n```\r\n$ ./sam2vcf.py <out.sam> <reference.fa.gz> > <out.vcf> \r\n```\r\n\r\n## Data\r\n* Simulated benchmark FASTQ data used in this work are available [HERE](http://www.med.osaka-u.ac.jp/pub/rna/ykato/temp/Bivartect/).\r\n\r\n## Reference\r\nKeisuke Shimmura, Yuki Kato and Yukio Kawahara,\r\n**Bivartect: accurate and memory-saving breakpoint detection by direct read comparison**,\r\n*Bioinformatics*, in press.\r\n\r\n---\r\nIf you have any questions, please contact [Yuki Kato](http://www.med.osaka-u.ac.jp/pub/rna/ykato/)  \r\n*Graduate School of Medicine, Osaka University, Japan*\r\n",
        "html_url": "https://github.com/ykat0/bivartect/releases/tag/1.1.10",
        "name": "Bivartect ver. 1.1.10",
        "release_id": 23062359,
        "tag": "1.1.10",
        "tarball_url": "https://api.github.com/repos/ykat0/bivartect/tarball/1.1.10",
        "type": "Release",
        "url": "https://api.github.com/repos/ykat0/bivartect/releases/23062359",
        "value": "https://api.github.com/repos/ykat0/bivartect/releases/23062359",
        "zipball_url": "https://api.github.com/repos/ykat0/bivartect/zipball/1.1.10"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirements",
        "parent_header": [
          "Bivartect",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "* C++11 or later\n"
      },
      "source": "https://raw.githubusercontent.com/ykat0/bivartect/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 1: run Bivartect to get consensus normal FASTQ reads whose mutated counterparts are predicted to have breakpoints",
        "parent_header": [
          "Bivartect",
          "Pipeline"
        ],
        "type": "Text_excerpt",
        "value": "```\n$ bivartect -5 <normal_1.fastq> <normal_2.fastq> <tumor_1.fastq> <tumor_2.fastq> <out.fastq>\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ykat0/bivartect/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 14:59:10",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "Bivartect"
        ],
        "type": "Text_excerpt",
        "value": "```\nFor single-end reads:\n$ bivartect -3 <normal.fastq> <tumor.fastq> <output.fastq>\n\nFor paired-end reads:\n$ bivartect -5 <normal_1.fastq> <normal_2.fastq> <tumor_1.fastq> <tumor_2.fastq> <output.fastq>\n\nGeneral options:\n -n     Path to the normal FASTQ (string [necessary])\n -N     Path to the normal reversed FASTQ (string)\n -m     Path to the mutated FASTQ (string [necessary])\n -M     Path to the mutated reversed FASTQ (string)\n -o     Path to the output FASTQ (string)\n -a     Output multi-FASTA instead of FASTQ (bool [false])\n -s     Input FASTQ is strand-specific (bool [false])\n -d     Filtering depth (int 10...32 [24])\n -c     Read count cutoff.\n        In a breakpoint cluster, \n        IF max(predictedNormalReadCount, predictedMutatedReadCount) < c \n        THEN omit the breakpoint because of low quality. (int 1...100 [6])\n -x     Analysis division rate (int 1,4,16,64...1024 [64])\n -t     Using thread count. Set 0 to use hardware maximum threads (int 0... [0])\n -r     Path to the output detail overview text file (string)\n\nAlias options:\n -2     = -n -m\n -3     = -n -m -o\n -4     = -n -N -m -M\n -5     = -n -N -m -M -o\n\nExamples:\n$ bivartect -x 16 -d 30 -c 6 -n <normal.fastq> -m <tumor.fastq> -o <output.fastq>\n$ bivartect -3 <normal.fastq> <tumor.fastq> <output.fastq> -c 4\n$ bivartect -5 <normal_1.fastq> <normal_2.fastq> <tumor_1.fastq> <tumor_2.fastq> <output.fastq>\n$ bivartect -2 <normal.fastq> <tumor.fastq> -r <output.txt>\n```"
      },
      "source": "https://raw.githubusercontent.com/ykat0/bivartect/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 1: run Bivartect to get consensus normal FASTQ reads whose mutated counterparts are predicted to have breakpoints",
        "parent_header": [
          "Bivartect",
          "Pipeline"
        ],
        "type": "Text_excerpt",
        "value": "```\n$ bivartect -5 <normal_1.fastq> <normal_2.fastq> <tumor_1.fastq> <tumor_2.fastq> <out.fastq>\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ykat0/bivartect/master/README.md",
      "technique": "header_analysis"
    }
  ]
}