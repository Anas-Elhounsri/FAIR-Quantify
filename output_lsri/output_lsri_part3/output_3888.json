{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "If you use this tool, please cite the following article:",
        "parent_header": [
          "Introduction <br>"
        ],
        "type": "Text_excerpt",
        "value": "[CharPlant: A De Novo Open Chromatin Region Prediction Tool for Plant Genomes](https://www.sciencedirect.com/science/article/pii/S1672022921000401)\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/Yin-Shen/CharPlant/master/Readme.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Yin-Shen/CharPlant"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contact us",
        "type": "Text_excerpt",
        "value": "\r\n**Yin Shen**: shenyin1995@163.com <br>\r\n**Ling-Ling Chen**: llchen@mail.hzau.edu.cn <br>\r\n**Junxiang Gao**: gao200@mail.hzau.edu.cn <br>\r\n\r\n"
      },
      "source": "https://raw.githubusercontent.com/Yin-Shen/CharPlant/master/Readme.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-07-17T13:57:24Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-12-13T02:56:41Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A de novo prediction tool of chromatin accessible regions for plant genomes"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction <br>",
        "type": "Text_excerpt",
        "value": "The result of OCR (Open Chromatin Region) assay technologies such as DNase-seq and ATAC-seq represents the open state of a tissue at a given time and does not cover all the chromatin accessible information of this species. To predict the potential open regions of different tissues at different times in the whole sequence can help to understand gene transcription and regulation from a global perspective. **CharPlant** (Chromatin Accessible Regions for Plant) is a *de novo* OCRs prediction tool based on deep learning model. It can take complete DNA sequences or scaffolds as input, and output the outline of OCRs in a .Bed format file rely on sequence features. To our knowledge, this is the first tool to *de novo* predict potential open chromatin regions from DNA sequence and assay data.<br>\r"
      },
      "source": "https://raw.githubusercontent.com/Yin-Shen/CharPlant/master/Readme.md",
      "technique": "header_analysis"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/Yin-Shen/CharPlant/wiki"
      },
      "source": "https://raw.githubusercontent.com/Yin-Shen/CharPlant/master/Readme.md",
      "technique": "regular_expression"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "(i) Download and install CharPlant",
        "parent_header": [
          "Steps to install and run CharPlant <br>",
          "Step 3. Download and run CharPlant"
        ],
        "type": "Text_excerpt",
        "value": "To Install and run CharPlant is very easy. You can download the CharPlant package in  the following two ways. Then un-compress the package and set \u201cCharPlant\u201d as current directory. \r\n\r\n* Simple click to download CharPlant package [HERE](http://cbi.hzau.edu.cn/CharPlant/data/CharPlant.tar.gz). \r\n* You can also download the CharPlant package using git.\r\n\r\n```\r\n$ git clone https://github.com/Yin-Shen/CharPlant.git\r\n```\r\n```\r\n$ echo \"export PATH=\\\"${PWD}/CharPlant:\\$PATH\\\" \" >>~/.bashrc\r\n$ source ~/.bashrc\r\n$ cd CharPlant\r\n$ chmod -R 744 CharPlant.sh\r\n```\r"
      },
      "source": "https://raw.githubusercontent.com/Yin-Shen/CharPlant/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "(ii) The directory structure of CharPlant",
        "parent_header": [
          "Steps to install and run CharPlant <br>",
          "Step 3. Download and run CharPlant"
        ],
        "type": "Text_excerpt",
        "value": "The directory structure is as follows, which has two directories and three files. Directory \u201cCharPlant/example\u201d contains the reference genome and DNase-seq data of rice used as an example, file oryza_sativa.fa and ory_sativa.bed, respectively. The result of predicted OCRs is also saved in it. All the python and shell scripts are in directory \u201cCharPlant/src\u201d, but users generally don't need to care about it. \r\n```\r\n\u251c\u2500\u2500CharPlant\r\n\u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u251c\u2500\u2500 example\r\n\u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u251c\u2500\u2500oryza_sativa.bed\r\n\u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u251c\u2500\u2500oryza_sativa.fa\r\n\u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u251c\u2500\u2500 src \r\n\u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u251c\u2500\u2500data_preprocess\r\n\u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u251c\u2500\u2500de_novo_prediction\r\n\u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u251c\u2500\u2500get_positive_sample\r\n\u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u251c\u2500\u2500model\r\n\u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u251c\u2500\u2500motif\r\n\u2026\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u2026\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u2026\u00a0\u00a0\u00a0\u00a0\u00a0 \u2026\r\n\u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u251c\u2500\u2500submit_lsf\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 config.yaml\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Snakefile \r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 CharPlant.sh\r\n```\r\nFor example, the follow command can print help information.\r\n```\r\n$ CharPlant.sh -h\r\n```\r\nOr print python scripts help information.\r\n```\r\n$ python model.py -h\r\n```\r"
      },
      "source": "https://raw.githubusercontent.com/Yin-Shen/CharPlant/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "(v) Output files",
        "parent_header": [
          "Steps to install and run CharPlant <br>",
          "Step 3. Download and run CharPlant"
        ],
        "type": "Text_excerpt",
        "value": "If all steps are completed, the results will be output to the following five directories.\r\n```\r\n/data_preprocessing---Data preprocessing results for model training and motif visualization.\r\n/model---.json file of model architecture, .h5 file of model parameters and .png file of the result figure.\r\n/motif--- Positional weight matrix of motifs.\r\n/de_novo_prediction---Results of de novo prediction.\r\n/peak---Peaks of predicted OCRs.\r\n```\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/Yin-Shen/CharPlant/master/Readme.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Yin-Shen/CharPlant/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Yin-Shen/CharPlant/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Yin-Shen/CharPlant"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Introduction "
      },
      "source": "https://raw.githubusercontent.com/Yin-Shen/CharPlant/master/Readme.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Yin-Shen/CharPlant/master/CharPlant.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Yin-Shen/CharPlant/master/src/pbs.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Yin-Shen/CharPlant/master/src/local.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Yin-Shen/CharPlant/master/src/cat_predict.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Yin-Shen/CharPlant/master/src/submit_lsf.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Yin-Shen/CharPlant/master/src/batch_submit.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Yin-Shen/CharPlant/master/src/submit_pbs.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Yin-Shen/CharPlant/master/src/lsf.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Steps to install and run CharPlant <br>",
        "type": "Text_excerpt",
        "value": "CharPlant currently available for Linux-based platforms. It can learn the OCR features from DNase-seq or ATAC-seq data and *de novo* predict potential chromatin open regions for plant genome. To train the parameters of the deep learning model and predict OCRs, CharPlant perform the following three steps. Step 1 and step 2 are to  install needed packages and set up running environment of the software, and they are optional for the users have had those packages worked. Step 3 is to download and run CharPlant. We provide as detailed instruction as possible although it can be run using simple command line. In the following, prompt \u201c$\u201d starts a shell command line of  Linux, while \u201c#\u201d starts a comment.\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/Yin-Shen/CharPlant/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 1. Install python packages",
        "parent_header": [
          "Steps to install and run CharPlant <br>"
        ],
        "type": "Text_excerpt",
        "value": "CharPlant is developed in python language, and some fundamental packages for  scientific computing and network construction are indispensable. To efficient install and manage them, we strongly recommend using the **Conda** package manager. Conda is an open source package and environment management system for installing multiple versions of packages and their dependencies and easily switching between them.\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/Yin-Shen/CharPlant/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "(i) Install Conda",
        "parent_header": [
          "Steps to install and run CharPlant <br>",
          "Step 1. Install python packages"
        ],
        "type": "Text_excerpt",
        "value": "```\r\n$ wget https://repo.continuum.io/archive/Anaconda3-4.2.0-Linux-x86_64.sh\r\n$ bash Anaconda3-4.2.0-Linux-x86_64.sh\r\n#Add environment variable\r\n$ echo \"export PATH=\\\"${PWD}/anaconda3/bin:\\$PATH\\\" \" >>~/.bashrc\r\n$ source ~/.bashrc\r\n```\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/Yin-Shen/CharPlant/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "(ii) Install needed python packages",
        "parent_header": [
          "Steps to install and run CharPlant <br>",
          "Step 1. Install python packages"
        ],
        "type": "Text_excerpt",
        "value": "Following Python packages are required:\r\n* numpy(1.16.1)\r\n* matplotlib(3.3.2)\r\n* pyfiglet(0.8.post1)\r\n* sklearn(0.22)\r\n* keras(2.0.5)\r\n* h5py(2.7.1)\r\n* tensorflow-gpu(1.3.0)\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/Yin-Shen/CharPlant/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "(iii) create environments",
        "parent_header": [
          "Steps to install and run CharPlant <br>",
          "Step 1. Install python packages"
        ],
        "type": "Text_excerpt",
        "value": "Because the *de novo* prediction\u00a0 step using cpu, we need create environments in cpu\r\n```\r\n$ conda create --name charplant-cpu python=3.6\r\n$ source activate charplant-cpu\r\n$ pip install sklearn\r\n$ pip install matplotlib\r\n$ pip install pyfiglet\r\n$ conda install keras\r\n$ source deactivate charplant-cpu\r\n```\r"
      },
      "source": "https://raw.githubusercontent.com/Yin-Shen/CharPlant/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "(i)Bowtie2",
        "parent_header": [
          "Steps to install and run CharPlant <br>",
          "Step 2. Install the tools Bowtie2 , MACS2 and Snakemake"
        ],
        "type": "Text_excerpt",
        "value": "We use bowtie2 (version 2.2.6) for sequence alignment, and you can find all versions [HERE](https://sourceforge.net/projects/bowtie-bio/files/bowtie2/). The detailed manual is provided in this [LINK](http://bowtie-bio.sourceforge.net/bowtie2/manual.shtml).\r\n\r\n```\r\n$ wget https://downloads.sourceforge.net/project/bowtie-bio/bowtie2/2.2.6/bowtie2-2.2.6-linux-x86_64.zip\r\n$ unzip bowtie2-2.2.6-linux-x86_64.zip\r\n#Add environment variable\r\n$ echo \"export PATH=\\\"${PWD}/bowtie2-2.2.6:\\$PATH\\\" \" >>~/.bashrc\r\n$ source ~/.bashrc\r\n```\r"
      },
      "source": "https://raw.githubusercontent.com/Yin-Shen/CharPlant/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "(ii)MACS2",
        "parent_header": [
          "Steps to install and run CharPlant <br>",
          "Step 2. Install the tools Bowtie2 , MACS2 and Snakemake"
        ],
        "type": "Text_excerpt",
        "value": "We use MACS2 (version 2.1.1) for peak calling, and you can find all versions and  user manual [HERE](https://pypi.org/project/MACS2/2.0.10.20130915/#history). \r\n```\r\n$ wget https://files.pythonhosted.org/packages/0f/e9/60761f3df0634a50a96531fdb00f45dd3a6f3aa2509fb722eb2a665faf35/MACS2-2.1.1.20160226.tar.gz\r\n$ tar -zxvf\u00a0 MACS2-2.1.1.20160226.tar.gz\r\n#setup environment variable\r\n$ conda create --name macs2 python=2.7\r\n$ source activate macs2\r\n$ cd MACS2-2.1.1.20160226\r\n$ pip install numpy\r\n$ python setup.py install \r\n#deactivate the environment \r\n$ source deactivate macs2\r\n```\r"
      },
      "source": "https://raw.githubusercontent.com/Yin-Shen/CharPlant/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "(iii)Snakemake",
        "parent_header": [
          "Steps to install and run CharPlant <br>",
          "Step 2. Install the tools Bowtie2 , MACS2 and Snakemake"
        ],
        "type": "Text_excerpt",
        "value": "We adopt an easy-to-use workflow software Snakemake to build our analysis  process, which combines a series of steps into a single pipeline. Snakemake and the  manual are provided in this [LINK](https://snakemake.readthedocs.io/en/stable/index.html). \r\n```\r\n$ pip install snakemake==5.5.2\r\n```\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/Yin-Shen/CharPlant/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "(i) Download and install CharPlant",
        "parent_header": [
          "Steps to install and run CharPlant <br>",
          "Step 3. Download and run CharPlant"
        ],
        "type": "Text_excerpt",
        "value": "To Install and run CharPlant is very easy. You can download the CharPlant package in  the following two ways. Then un-compress the package and set \u201cCharPlant\u201d as current directory. \r\n\r\n* Simple click to download CharPlant package [HERE](http://cbi.hzau.edu.cn/CharPlant/data/CharPlant.tar.gz). \r\n* You can also download the CharPlant package using git.\r\n\r\n```\r\n$ git clone https://github.com/Yin-Shen/CharPlant.git\r\n```\r\n```\r\n$ echo \"export PATH=\\\"${PWD}/CharPlant:\\$PATH\\\" \" >>~/.bashrc\r\n$ source ~/.bashrc\r\n$ cd CharPlant\r\n$ chmod -R 744 CharPlant.sh\r\n```\r"
      },
      "source": "https://raw.githubusercontent.com/Yin-Shen/CharPlant/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "(ii) The directory structure of CharPlant",
        "parent_header": [
          "Steps to install and run CharPlant <br>",
          "Step 3. Download and run CharPlant"
        ],
        "type": "Text_excerpt",
        "value": "The directory structure is as follows, which has two directories and three files. Directory \u201cCharPlant/example\u201d contains the reference genome and DNase-seq data of rice used as an example, file oryza_sativa.fa and ory_sativa.bed, respectively. The result of predicted OCRs is also saved in it. All the python and shell scripts are in directory \u201cCharPlant/src\u201d, but users generally don't need to care about it. \r\n```\r\n\u251c\u2500\u2500CharPlant\r\n\u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u251c\u2500\u2500 example\r\n\u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u251c\u2500\u2500oryza_sativa.bed\r\n\u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u251c\u2500\u2500oryza_sativa.fa\r\n\u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u251c\u2500\u2500 src \r\n\u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u251c\u2500\u2500data_preprocess\r\n\u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u251c\u2500\u2500de_novo_prediction\r\n\u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u251c\u2500\u2500get_positive_sample\r\n\u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u251c\u2500\u2500model\r\n\u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u251c\u2500\u2500motif\r\n\u2026\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u2026\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u2026\u00a0\u00a0\u00a0\u00a0\u00a0 \u2026\r\n\u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u251c\u2500\u2500submit_lsf\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 config.yaml\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Snakefile \r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 CharPlant.sh\r\n```\r\nFor example, the follow command can print help information.\r\n```\r\n$ CharPlant.sh -h\r\n```\r\nOr print python scripts help information.\r\n```\r\n$ python model.py -h\r\n```\r"
      },
      "source": "https://raw.githubusercontent.com/Yin-Shen/CharPlant/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "(iii) Set the parameters of CharPlant",
        "parent_header": [
          "Steps to install and run CharPlant <br>",
          "Step 3. Download and run CharPlant"
        ],
        "type": "Text_excerpt",
        "value": "Configuration file \u201cconfig.yaml\u201d contains all parameters of the tool. To run CharPlant, you only need to revise three parameters in the following according to your path and file name, while leaving others as they are. A complete \u201cconfig.yaml\u201d file is shown in next section.\r\n```\r\ngenome :  Yourpath/CharPlant/example/oryza_sativa.fa\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  #Genome file in .fasta format for input(Need full path)\r\nbed:  Yourpath/CharPlant/example/oryza_sativa.bed\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0   \u00a0 #Open chromatin regions file in .bed format for input(Need full path)\r\nout: ory                                                         #Prefix of the output file\r\n```\r"
      },
      "source": "https://raw.githubusercontent.com/Yin-Shen/CharPlant/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "(v) Output files",
        "parent_header": [
          "Steps to install and run CharPlant <br>",
          "Step 3. Download and run CharPlant"
        ],
        "type": "Text_excerpt",
        "value": "If all steps are completed, the results will be output to the following five directories.\r\n```\r\n/data_preprocessing---Data preprocessing results for model training and motif visualization.\r\n/model---.json file of model architecture, .h5 file of model parameters and .png file of the result figure.\r\n/motif--- Positional weight matrix of motifs.\r\n/de_novo_prediction---Results of de novo prediction.\r\n/peak---Peaks of predicted OCRs.\r\n```\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/Yin-Shen/CharPlant/master/Readme.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Yin-Shen/CharPlant/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "chromatin-accessibiity, cnn-model, de-novo-prediction, deep-learning, open-chromatin-regions, plant"
      },
      "technique": "GitHub_API"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Yin-Shen/CharPlant/master/logo.jpg"
      },
      "source": "https://raw.githubusercontent.com/Yin-Shen/CharPlant/master/Readme.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CharPlant"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "Yin-Shen"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 31753,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 3844,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Yin-Shen/CharPlant/master/Readme.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://snakemake.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/Yin-Shen/CharPlant/master/Readme.md",
      "technique": "regular_expression"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "Yin-Shen",
          "type": "User"
        },
        "date_created": "2019-07-21T06:02:01Z",
        "date_published": "2019-07-21T06:27:56Z",
        "html_url": "https://github.com/Yin-Shen/CharPlant/releases/tag/v4",
        "release_id": 18754450,
        "tag": "v4",
        "tarball_url": "https://api.github.com/repos/Yin-Shen/CharPlant/tarball/v4",
        "type": "Release",
        "url": "https://api.github.com/repos/Yin-Shen/CharPlant/releases/18754450",
        "value": "https://api.github.com/repos/Yin-Shen/CharPlant/releases/18754450",
        "zipball_url": "https://api.github.com/repos/Yin-Shen/CharPlant/zipball/v4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "Yin-Shen",
          "type": "User"
        },
        "date_created": "2019-07-20T15:20:43Z",
        "date_published": "2019-07-20T15:33:17Z",
        "html_url": "https://github.com/Yin-Shen/CharPlant/releases/tag/v3",
        "release_id": 18750142,
        "tag": "v3",
        "tarball_url": "https://api.github.com/repos/Yin-Shen/CharPlant/tarball/v3",
        "type": "Release",
        "url": "https://api.github.com/repos/Yin-Shen/CharPlant/releases/18750142",
        "value": "https://api.github.com/repos/Yin-Shen/CharPlant/releases/18750142",
        "zipball_url": "https://api.github.com/repos/Yin-Shen/CharPlant/zipball/v3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "Yin-Shen",
          "type": "User"
        },
        "date_created": "2019-07-19T15:43:04Z",
        "date_published": "2019-07-20T00:40:25Z",
        "html_url": "https://github.com/Yin-Shen/CharPlant/releases/tag/v2",
        "release_id": 18745813,
        "tag": "v2",
        "tarball_url": "https://api.github.com/repos/Yin-Shen/CharPlant/tarball/v2",
        "type": "Release",
        "url": "https://api.github.com/repos/Yin-Shen/CharPlant/releases/18745813",
        "value": "https://api.github.com/repos/Yin-Shen/CharPlant/releases/18745813",
        "zipball_url": "https://api.github.com/repos/Yin-Shen/CharPlant/zipball/v2"
      },
      "technique": "GitHub_API"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Steps to install and run CharPlant <br>",
        "type": "Text_excerpt",
        "value": "CharPlant currently available for Linux-based platforms. It can learn the OCR features from DNase-seq or ATAC-seq data and *de novo* predict potential chromatin open regions for plant genome. To train the parameters of the deep learning model and predict OCRs, CharPlant perform the following three steps. Step 1 and step 2 are to  install needed packages and set up running environment of the software, and they are optional for the users have had those packages worked. Step 3 is to download and run CharPlant. We provide as detailed instruction as possible although it can be run using simple command line. In the following, prompt \u201c$\u201d starts a shell command line of  Linux, while \u201c#\u201d starts a comment.\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/Yin-Shen/CharPlant/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "(iii) create environments",
        "parent_header": [
          "Steps to install and run CharPlant <br>",
          "Step 1. Install python packages"
        ],
        "type": "Text_excerpt",
        "value": "Because the *de novo* prediction\u00a0 step using cpu, we need create environments in cpu\r\n```\r\n$ conda create --name charplant-cpu python=3.6\r\n$ source activate charplant-cpu\r\n$ pip install sklearn\r\n$ pip install matplotlib\r\n$ pip install pyfiglet\r\n$ conda install keras\r\n$ source deactivate charplant-cpu\r\n```\r"
      },
      "source": "https://raw.githubusercontent.com/Yin-Shen/CharPlant/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "(i)Bowtie2",
        "parent_header": [
          "Steps to install and run CharPlant <br>",
          "Step 2. Install the tools Bowtie2 , MACS2 and Snakemake"
        ],
        "type": "Text_excerpt",
        "value": "We use bowtie2 (version 2.2.6) for sequence alignment, and you can find all versions [HERE](https://sourceforge.net/projects/bowtie-bio/files/bowtie2/). The detailed manual is provided in this [LINK](http://bowtie-bio.sourceforge.net/bowtie2/manual.shtml).\r\n\r\n```\r\n$ wget https://downloads.sourceforge.net/project/bowtie-bio/bowtie2/2.2.6/bowtie2-2.2.6-linux-x86_64.zip\r\n$ unzip bowtie2-2.2.6-linux-x86_64.zip\r\n#Add environment variable\r\n$ echo \"export PATH=\\\"${PWD}/bowtie2-2.2.6:\\$PATH\\\" \" >>~/.bashrc\r\n$ source ~/.bashrc\r\n```\r"
      },
      "source": "https://raw.githubusercontent.com/Yin-Shen/CharPlant/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "(ii)MACS2",
        "parent_header": [
          "Steps to install and run CharPlant <br>",
          "Step 2. Install the tools Bowtie2 , MACS2 and Snakemake"
        ],
        "type": "Text_excerpt",
        "value": "We use MACS2 (version 2.1.1) for peak calling, and you can find all versions and  user manual [HERE](https://pypi.org/project/MACS2/2.0.10.20130915/#history). \r\n```\r\n$ wget https://files.pythonhosted.org/packages/0f/e9/60761f3df0634a50a96531fdb00f45dd3a6f3aa2509fb722eb2a665faf35/MACS2-2.1.1.20160226.tar.gz\r\n$ tar -zxvf\u00a0 MACS2-2.1.1.20160226.tar.gz\r\n#setup environment variable\r\n$ conda create --name macs2 python=2.7\r\n$ source activate macs2\r\n$ cd MACS2-2.1.1.20160226\r\n$ pip install numpy\r\n$ python setup.py install \r\n#deactivate the environment \r\n$ source deactivate macs2\r\n```\r"
      },
      "source": "https://raw.githubusercontent.com/Yin-Shen/CharPlant/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "(iii)Snakemake",
        "parent_header": [
          "Steps to install and run CharPlant <br>",
          "Step 2. Install the tools Bowtie2 , MACS2 and Snakemake"
        ],
        "type": "Text_excerpt",
        "value": "We adopt an easy-to-use workflow software Snakemake to build our analysis  process, which combines a series of steps into a single pipeline. Snakemake and the  manual are provided in this [LINK](https://snakemake.readthedocs.io/en/stable/index.html). \r\n```\r\n$ pip install snakemake==5.5.2\r\n```\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/Yin-Shen/CharPlant/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "(ii) The directory structure of CharPlant",
        "parent_header": [
          "Steps to install and run CharPlant <br>",
          "Step 3. Download and run CharPlant"
        ],
        "type": "Text_excerpt",
        "value": "The directory structure is as follows, which has two directories and three files. Directory \u201cCharPlant/example\u201d contains the reference genome and DNase-seq data of rice used as an example, file oryza_sativa.fa and ory_sativa.bed, respectively. The result of predicted OCRs is also saved in it. All the python and shell scripts are in directory \u201cCharPlant/src\u201d, but users generally don't need to care about it. \r\n```\r\n\u251c\u2500\u2500CharPlant\r\n\u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u251c\u2500\u2500 example\r\n\u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u251c\u2500\u2500oryza_sativa.bed\r\n\u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u251c\u2500\u2500oryza_sativa.fa\r\n\u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u251c\u2500\u2500 src \r\n\u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u251c\u2500\u2500data_preprocess\r\n\u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u251c\u2500\u2500de_novo_prediction\r\n\u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u251c\u2500\u2500get_positive_sample\r\n\u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u251c\u2500\u2500model\r\n\u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u251c\u2500\u2500motif\r\n\u2026\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u2026\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u2026\u00a0\u00a0\u00a0\u00a0\u00a0 \u2026\r\n\u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u2502\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u251c\u2500\u2500submit_lsf\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 config.yaml\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Snakefile \r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 CharPlant.sh\r\n```\r\nFor example, the follow command can print help information.\r\n```\r\n$ CharPlant.sh -h\r\n```\r\nOr print python scripts help information.\r\n```\r\n$ python model.py -h\r\n```\r"
      },
      "source": "https://raw.githubusercontent.com/Yin-Shen/CharPlant/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "(iv) Run CharPlant",
        "parent_header": [
          "Steps to install and run CharPlant <br>",
          "Step 3. Download and run CharPlant"
        ],
        "type": "Text_excerpt",
        "value": "Snakemake file defines rules to performance operations. We have created a rule for each target and intermediate file. It is not necessary for the users to rewrite it. A complete \u201cSnakefile\u201d file is shown in subsequent section.\r\n```\r\n$ CharPlant.sh\r\n```\r\nCharPlant will perform four steps in turn and output the results of predicted OCRs to a .bed format file.\r\n* **Data preprocessing**\r\n* **Model training**\r\n* **Motif visualization**\r\n* ***De novo* prediction**\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/Yin-Shen/CharPlant/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "(v) Output files",
        "parent_header": [
          "Steps to install and run CharPlant <br>",
          "Step 3. Download and run CharPlant"
        ],
        "type": "Text_excerpt",
        "value": "If all steps are completed, the results will be output to the following five directories.\r\n```\r\n/data_preprocessing---Data preprocessing results for model training and motif visualization.\r\n/model---.json file of model architecture, .h5 file of model parameters and .png file of the result figure.\r\n/motif--- Positional weight matrix of motifs.\r\n/de_novo_prediction---Results of de novo prediction.\r\n/peak---Peaks of predicted OCRs.\r\n```\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/Yin-Shen/CharPlant/master/Readme.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "requirements",
    "contributors",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 14:28:48",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 7
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "If you use this tool, please cite the following article:",
        "parent_header": [
          "Introduction <br>"
        ],
        "type": "Text_excerpt",
        "value": "[CharPlant: A De Novo Open Chromatin Region Prediction Tool for Plant Genomes](https://www.sciencedirect.com/science/article/pii/S1672022921000401)\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/Yin-Shen/CharPlant/master/Readme.md",
      "technique": "header_analysis"
    }
  ]
}