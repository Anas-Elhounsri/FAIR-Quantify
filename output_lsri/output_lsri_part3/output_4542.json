{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ganlab/GALA"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-04-01T14:39:30Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-11T17:43:07Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Long-reads Gap-free Chromosome-scale Assembler"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "**comp:**",
        "parent_header": [
          "Description"
        ],
        "type": "Text_excerpt",
        "value": "The comp module used to generate a genome comparison file if the user wants to compare multiple genomes against each other.\n```\nusage: comp -h  [options] <draft_names & paths> \n\nGenerate genome comparison files, part of GALA Gap-free Long-read Assembler\n\npositional arguments:\n  drafts                Draft names and paths [required]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -o output files path\t[default current directory]\n  -v, --version         show program's version number and exit\n\n```"
      },
      "source": "https://raw.githubusercontent.com/ganlab/gala/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "**mdm:**",
        "parent_header": [
          "Description"
        ],
        "type": "Text_excerpt",
        "value": "Miss-assembly Detector Module used to detect misassembled contigs. The algorithm relies on the alignment's contradictory information. \n\nmis-assembly detection module should be applicable for error correction regardless of the specific algorithm used for assembly and can differentiate between misassembly and Structure variation\n```\nusage: mdm -h  [options] path/to/mapping_files number of drafts\nMDM Mis-assembly Detector Module, part of GALA Gap-free Long-read Assembler\n\npositional arguments:\n  mapping_files         mapping paf file [required]\n  drafts                Number of drafts [required]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -b Alignment block length\t [default 5000]\n  -p Alignment identity percentage\t [default 70%]\n  -c Shortest contig length\t [default 5000]\n  -q Mapping quality\t [default 20]\n  -f Output files name\t[default gathering]\n  -o output files path\t[default current directory]\n  -v, --version         show program's version number and exit\n```"
      },
      "source": "https://raw.githubusercontent.com/ganlab/gala/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "**newgenome:**",
        "parent_header": [
          "Description",
          "**mdm:**"
        ],
        "type": "Text_excerpt",
        "value": "The newgenome module trims the misassembled contigs and gives misassembly free genome. This module used only with multiple samples\n```\nusage: newgenome -h  [options] <draft_names & paths> <path to cut files>\n\nProduce mis-assembly free genomes, part of GALA Gap-free Long-read Assembler \n\npositional arguments:\n  draft                 Draft names and paths [required]\n  cut_files             path_to_cut_files\" [required]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -f Output files name\t[default new_genome]\n  -o output files path\t[default current directory]\n  -v, --version         show program's version number and exit\n```"
      },
      "source": "https://raw.githubusercontent.com/ganlab/gala/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "**ccm:**",
        "parent_header": [
          "Description"
        ],
        "type": "Text_excerpt",
        "value": "Contig Clustering Module used to identify the `scaffolding groups` and the contigs overlap information in multiple  preliminary assemblies. \n\nccm could have extended applications in generating consensus assembly from multiple sequences. Besides, it is useful in reference guide scaffolding to determine Chromosomes `scaffolding groups`\n  ```\n  usage: ccm -h  [options] <path/to/mapping_files> <number of drafts>\n\nCCM Contig Clustering Module, part of GALA Gap-free Long-read Assembler\n\npositional arguments:\n  mapping_files         mapping paf file [required]\n  drafts                Number of drafts [required]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -b Alignment block length\t [default 5000]\n  -p Alignment identity percentage\t [default 70%]\n  -c Shortest contig length\t [default 5000]\n  -q Mapping quality\t [default 20]\n  -f Output files name\t[default scaffolds]\n  -o output files path\t[default current directory]\n  -v, --version         show program's version number and exit\n  ```"
      },
      "source": "https://raw.githubusercontent.com/ganlab/gala/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "reformat",
        "parent_header": [
          "Description"
        ],
        "type": "Text_excerpt",
        "value": "the reformat module filters the alignment data in paf mapping files and merge overlapping and continuous alignment intervals into a single mapping interval. So, each contig in query draft will have one alignment interval with the subject draft.\n```\nusage: reformat -h  [options] <path/to/mapping_files> <number of drafts>\n\nRe-formatting mapping files module, part of GALA Gap-free Long-read Assembler\n\npositional arguments:\n  mapping_files         mapping paf file [required]\n  drafts                Number of drafts [required]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -b Alignment block length\t [default 5000]\n  -p Alignment identity percentage\t [default 70%]\n  -c Shortest contig length\t [default 5000]\n  -q Mapping quality\t [default 20]\n  -f Output files name\t[default reformated]\n  -o output files path\t[default current directory]\n  -v, --version         show program's version number and exit\n  ```"
      },
      "source": "https://raw.githubusercontent.com/ganlab/gala/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "seprator",
        "parent_header": [
          "Description"
        ],
        "type": "Text_excerpt",
        "value": "The seprator module used to separate contigs alignments in individual bams and separate the read names mapped to each contig in an individual file\n```\nusage: seprator -h  [options] <contig_names> <bam_file>\n\nSeparate each contig correlated read names, part of GALA Gap-free Long-read Assembler\n\npositional arguments:\n  contig_names          contig_names [required]\n  bam_file              mapping bam file [required]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -o output files path\t[default current directory]\n  -f Output files name\t[default bam_seprator]\n  -b output folder name\t [default bams]\n  -v, --version         show program's version number and exit\n\nUse the following command to produce contig_names file:\n\tsamtools view -H <bam_file> |grep 'SQ'|cut -f 2|cut -d : -f 2 > contig_names\n```"
      },
      "source": "https://raw.githubusercontent.com/ganlab/gala/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "readsep",
        "parent_header": [
          "Description"
        ],
        "type": "Text_excerpt",
        "value": "The readsep module separates a set of reads from a sequencing dataset according to the read name in the definition line.\n```\nusage: readsep -h [options] <reads> <read_titles>\n\nExtract reads from fasta or fastq, part of GALA Gap-free Long-read Assembler\n\npositional arguments:\n  reads                 raw/corrected reads [required]\n  read_titles           read names [required]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -f input file format (fa/fq)\n  -v, --version         show program's version number and exit\n  ```"
      },
      "source": "https://raw.githubusercontent.com/ganlab/gala/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9987072936264846,
      "result": {
        "original_header": "GALA performance with a human genome",
        "type": "Text_excerpt",
        "value": "GALA assembled a human genome using (HiFi) reads. GALA used canu draft for CHM13 and the current human reference genome GRCh38.p13 as input of GALA. In this way GALA essentially created a reference-guided de novo assembly. GALA assembly comprised of 37 continuous contigs, including 8 telomer-to-telomer gap-free pseudomolecular sequences, 4 near complete chromosomes each with a small telomeric fragment unanchored, 3 with only gapped centromeric regions, and the long arm of acrocentric chromosomes. [Human Genome](https://doi.org/10.5281/zenodo.4045985)\n\t<p align=\"center\">\n![**Human Genome** ](fig/Human_Genome.png)\n\t</p>\n \n"
      },
      "source": "https://raw.githubusercontent.com/ganlab/gala/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9746760676814942,
      "result": {
        "original_header": "GALA Single Command Mode",
        "type": "Text_excerpt",
        "value": "In single command mode, GALA used [canu](https://github.com/marbl/canu) for Chromosome-by-Chromosome assembly.\n \nTo use another assembler or multiple assemblers, GALA provides three choices  [Canu](https://github.com/marbl/canu), [Flye](https://github.com/fenderglass/Flye), and [Miniasm](https://github.com/lh3/miniasm), pass it to `-a` argument with a single space between them. \n"
      },
      "source": "https://raw.githubusercontent.com/ganlab/gala/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8799153350416423,
      "result": {
        "original_header": "Contig Clustering Module (CCM)",
        "type": "Text_excerpt",
        "value": "5.  Use the `comp` module to generate a `draft_comparison` file for `misassembly-free` drafts.\n\t> comp `new_draft_names_paths.txt` \n7. Run  `draft_comparison` file to produce new drafts comparison paf files.\n\t> sh `draft_compare.sh`\n8. Run the `ccm` module to produce contigs `scaffolding groups`.\n\t> ccm `comparison_folder`  `number of assembly drafts`\n\t- **Note:**\n\t\tYou can also use the `reformat` module to generate reformatted paf files and use them to confirm `Scaffolding groups`. \n"
      },
      "source": "https://raw.githubusercontent.com/ganlab/gala/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9994853774649952,
      "result": {
        "type": "Text_excerpt",
        "value": "\ufeff# Gap-Free Long-read Assembler (GALA) \n**GALA** is a **Ga**p-free **L**ong-read **A**ssembler. GALA builds a multi-layer graph from different preliminary assemblies, long-reads, and potentially other sources of information, such as Hi-C assemblies. During this process, it identifies mis-assembled contigs and trim them. The corrected data are then partitioned into multiple scaffolding groups, each representing a single chromosome. Each scaffolding group is assembled independently with existing assembly tools and a simplified version of overlap-graph-based merging algorithm is used to merge multiple contigs if necessary. \n"
      },
      "source": "https://raw.githubusercontent.com/ganlab/gala/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ganlab/gala/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 17
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ganlab/GALA/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ganlab/GALA"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/ganlab/gala/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ganlab/gala/master/human_genome_pipeline/sep_chr_ref.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ganlab/gala/master/human_genome_pipeline/Pipline.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ganlab/gala/master/human_genome_pipeline/chr.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ganlab/gala/master/fig/Human_Genome.png"
      },
      "source": "https://raw.githubusercontent.com/ganlab/gala/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "GALA can be run directly from the gala folder\n>git clone [https://github.com/ganlab/gala.git](https://github.com/ganlab/gala.git)\n>cd GALA\n\n**Or**\nYou can run `install` to add it to your **PATH**\t\n"
      },
      "source": "https://raw.githubusercontent.com/ganlab/gala/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9999848067454877,
      "result": {
        "original_header": "GALA Single Command Mode",
        "type": "Text_excerpt",
        "value": "To run GALA using one command user can use the following command:\n> gala  `draft_names_paths.txt` `fa/fq` `reads_file` `platform` \nFor sequencing_platform the user needs to provide it in this way: \n`-pacbio-raw` `-pacbio-corrected` `-nanopore-raw` `-nanopore-corrected` \n```\nusage: gala -h  [options] <draft_names & paths> <fa/fq> <reads> <platform>\n\nGALA Gap-free Long-read Assembler\n\npositional arguments:\n  draft_names           Draft names and paths [required]\n  input_file            input type (fq/fa) [required]\n  reads                 raw/corrected reads [required]\n  sequencing_platform   -pacbio-raw -pacbio-corrected -nanopore-raw -nanopore-\n                        corrected [required]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -a [ASSEMBLER [ASSEMBLER ...]]\n                        Chr-by_Chr assembler (canu flye miniasm) [default\n                        canu]\n  -b Alignment block length\t [default 5000]\n  -p Alignment identity percentage\t [default 70%]\n  -c Shortest contig length\t [default 5000]\n  -q Mapping quality\t [default 20]\n  -f Output files name\t[default gathering]\n  -o output files path\t[default current directory]\n  -v, --version         show program's version number and exit\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/ganlab/gala/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9824720120115966,
      "result": {
        "original_header": "Mis Assembly Detector Module (MDM)",
        "type": "Text_excerpt",
        "value": "1.  Use the `comp` module to generate a `draft_comparison` file \n\t> comp `draft_names_paths.txt`\n3. Run  `draft_comparison` file to produce drafts comparison paf files\n\t> sh `draft_compare.sh`\n4. Use the `mdm` module to identify mis-assembled contigs.\n\t> mdm `comparison_folder` `number of assembly drafts`\n5.  Use the `newgenome` module to Produce `misassembly-free` drafts.\n\t>  newgenome `draft_names_paths.txt`\t`cut_folder` \n"
      },
      "source": "https://raw.githubusercontent.com/ganlab/gala/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9449502255449141,
      "result": {
        "original_header": "Contig Clustering Module (CCM)",
        "type": "Text_excerpt",
        "value": "5.  Use the `comp` module to generate a `draft_comparison` file for `misassembly-free` drafts.\n\t> comp `new_draft_names_paths.txt` \n7. Run  `draft_comparison` file to produce new drafts comparison paf files.\n\t> sh `draft_compare.sh`\n8. Run the `ccm` module to produce contigs `scaffolding groups`.\n\t> ccm `comparison_folder`  `number of assembly drafts`\n\t- **Note:**\n\t\tYou can also use the `reformat` module to generate reformatted paf files and use them to confirm `Scaffolding groups`. \n"
      },
      "source": "https://raw.githubusercontent.com/ganlab/gala/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8235072664431985,
      "result": {
        "original_header": "GALA Single Command Mode",
        "type": "Text_excerpt",
        "value": "For sequencing_platform the user needs to provide it in this way: \n`-pacbio-raw` `-pacbio-corrected` `-nanopore-raw` `-nanopore-corrected` \n```\nusage: gala -h  [options] <draft_names & paths> <fa/fq> <reads> <platform>\n\nGALA Gap-free Long-read Assembler\n\npositional arguments:\n  draft_names           Draft names and paths [required]\n  input_file            input type (fq/fa) [required]\n  reads                 raw/corrected reads [required]\n  sequencing_platform   -pacbio-raw -pacbio-corrected -nanopore-raw -nanopore-\n                        corrected [required]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -a [ASSEMBLER [ASSEMBLER ...]]\n                        Chr-by_Chr assembler (canu flye miniasm) [default\n                        canu]\n  -b Alignment block length\t [default 5000]\n  -p Alignment identity percentage\t [default 70%]\n  -c Shortest contig length\t [default 5000]\n  -q Mapping quality\t [default 20]\n  -f Output files name\t[default gathering]\n  -o output files path\t[default current directory]\n  -v, --version         show program's version number and exit\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/ganlab/gala/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ganlab/GALA/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "gap-filling, genome-analysis, genome-assembly, long-reads, nanopore, pacbio, scaffolding"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2020 ganlab\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/ganlab/gala/master/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Licence",
        "type": "Text_excerpt",
        "value": "GALA is distributed under MIT license. See the [LICENSE file](https://github.com/ganlab/GALA/blob/master/LICENSE) for details.\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/ganlab/gala/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ganlab/gala/master/fig/gala.jpg"
      },
      "source": "https://raw.githubusercontent.com/ganlab/gala/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "GALA"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "ganlab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 70791,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 12110,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ganlab/gala/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependency",
        "type": "Text_excerpt",
        "value": "1. [Minimap2](https://github.com/lh3/minimap2)\n2. [bwa](https://github.com/lh3/bwa)\n3. [samtools](https://github.com/samtools/samtools)\n4. [python2.7](https://www.python.org/download/releases/2.7/)\n5. [canu](https://github.com/marbl/canu)\n"
      },
      "source": "https://raw.githubusercontent.com/ganlab/gala/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 16:48:06",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 70
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "type": "Text_excerpt",
        "value": "Using GALA pipeline to assemble a genome involves preliminary steps and three main Steps."
      },
      "source": "https://raw.githubusercontent.com/ganlab/gala/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Preliminary step",
        "parent_header": [
          "Usage",
          "Preliminary step and Inputs"
        ],
        "type": "Text_excerpt",
        "value": "#### Preliminary step\nUse different software to construct preliminary assemblies from long reads, e.g. ([Canu](https://github.com/marbl/canu), [Flye](https://github.com/fenderglass/Flye), [MECAT](https://github.com/xiaochuanle/MECAT), [Miniasm](https://github.com/lh3/miniasm), and [Wtdbg2](https://github.com/ruanjue/wtdbg2)).\n"
      },
      "source": "https://raw.githubusercontent.com/ganlab/gala/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Inputs:",
        "parent_header": [
          "Usage",
          "Preliminary step and Inputs"
        ],
        "type": "Text_excerpt",
        "value": "* Raw reads and corrected reads if available.\n* The user needs to prepare `draft_names_paths.txt` for preliminary assemblies.\n**Here is an example:**\n```\ndraft_01=path/to/draft_fasta_file\ndraft_02=path/to/draft_fasta_file\ndraft_03=path/to/draft_fasta_file\ndraft_n=path/to/draftfasta file\n```"
      },
      "source": "https://raw.githubusercontent.com/ganlab/gala/master/README.md",
      "technique": "header_analysis"
    }
  ]
}