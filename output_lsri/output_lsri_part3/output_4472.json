{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "AllCoPol"
        ],
        "type": "Text_excerpt",
        "value": "Lautenschlager, U., Wagner, F. & Oberprieler, C. AllCoPol: inferring allele co-ancestry in polyploids. *BMC Bioinformatics* 21, 441 (2020). https://doi.org/10.1186/s12859-020-03750-9\n\nWhen using the `allcopol` command, PhyloNet should be cited as well. \n"
      },
      "source": "https://raw.githubusercontent.com/AGOberprieler/allcopol/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/AGOberprieler/allcopol"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-12-10T19:47:01Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-01-12T14:11:00Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "AllCoPol: Inferring allele co-ancestry in polyploids"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9985812818209813,
      "result": {
        "original_header": "AllCoPol",
        "type": "Text_excerpt",
        "value": "AllCoPol is a collection of tools for the analysis of polyploids, which allow to \ninfer ancestral allele combinations as well as corresponding subgenome \nphylogenies.\n \n"
      },
      "source": "https://raw.githubusercontent.com/AGOberprieler/allcopol/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9459163807408864,
      "result": {
        "original_header": "allcopol",
        "type": "Text_excerpt",
        "value": "This is the main tool of the package implementing heuristic optimization of\nancestral allele combinations. To get a complete list of program options, type\n```bash\nallcopol --help\n```\n \nThe allele mapping file (`-A`) is a tab-delimited text file with one line \nper accession and four columns: accession, taxon, allele IDs (i.e., gene tree leaves; comma separated), \nand ploidy level.\nThe gene tree file (`-G`) consists of newick strings supplied as one tree per line. \nFor the trees, which are assumed to be rooted, topologies are sufficient while \nedge lengths, support values, etc. will be ignored. Multiple gene trees per \nmarker can be supplied as consecutive lines in the tree file, e.g.\n```text\n<tree1 for marker1>\n<tree2 for marker1>\n<tree3 for marker1>\n<tree1 for marker2>\n<tree2 for marker2>\n<tree3 for marker2>\n...\n```\n \nmapping.txt (input):\n```text\nacc1\tsp1\tA_1,A_2\t2\nacc2\tsp1\tB_1,B_2\t2\nacc3\tsp2\tC_1,C_2\t2\nacc4\tsp2\tD_1,D_2\t2\nacc5\tsp3\tE_1,E_2\t2\nacc6\tsp4\tF_1,F_2\t2\nacc7\tsp5\tG_1,G_2,H_1,H_2\t4\n```\ntrees.nw (input):\n```text\n(((E_2,(B_1,C_2)),(G_1,F_2)),((H_1,H_2),((A_2,A_1),((G_2,D_2),(F_1,((C_1,B_2),(D_1,E_1)))))));\n((((F_2,(G_2,(G_1,F_1))),(A_1,A_2)),((((C_1,C_2),B_1),B_2),(((D_2,D_1),E_1),E_2))),(H_1,H_2));\n((((G_2,((F_1,F_2),G_1)),A_1),((H_2,H_1),(D_1,E_1))),(((D_2,E_2),(C_2,(B_2,(C_1,B_1)))),A_2));\n(((B_2,(C_2,B_1)),(H_2,H_1)),((A_2,A_1),(((G_2,G_1),(F_2,F_1)),((E_1,D_1),((D_2,E_2),C_1)))));\n(((A_1,A_2),(H_2,H_1)),(((E_1,D_1),((F_1,F_2),(G_2,G_1))),(((E_2,D_2),(B_1,(C_2,B_2))),C_1)));\n```\nMain AllCoPol command:\n```bash\nallcopol -A mapping.txt -G trees.nw -S 1 -P PhyloNet_3.8.0.jar -t 5 -i 20\n```\nSetting the tabu tenure to zero and using reinitialization (-u), it is also \npossible to perform random restart hillclimbing instead of tabu search.\nWhile this avoids extensive parameter tuning, it usually requires a higher \nnumber of iterations to obtain satisfactory solutions:\n```bash\nallcopol -A mapping.txt -G trees.nw -S 1 -P PhyloNet_3.8.0.jar -t 0 -u 1 -i 100\n```\n \nIf runtime is limiting, the number of evaluated solutions per iteration can be \nlimited via the -s option. Note that this may be at the expense of a lower final\nsolution quality. \nFor single analyses, as far as runtime is not limiting, the simplest optimization strategy consists in repeated hillclimbing runs, allowing a high total number of iterations as described above. \nIn contrast, using a tabu list of adequate length allows to escape from local optima and therefore does not require to restart from random solutions.\nThis is usually more efficient because it allows to spend more time in promising regions of the search space.\nUnfortunately, there is no simple rule how to specify the tabu tenure which is critical for proper function.\nIf it is set too small, the search can get stuck in local optima, if too high, many good solutions may be missed, which slows down the optimization progress. \nFor single reconstructions, the user could simply try out some different values and keep the most parsimonious result. \nIf many time-consuming (replicate) analyses have to be performed, it may be advisable to systematically measure the performance of different parameter settings before.\nIn this case, the obtained numbers of extra lineages for each setting should be averaged over multiple runs to account for the involved stochasticity.\nAlthough suitable parameter settings are not easily transferable from one problem to another, it is often possible to find a good compromise which satisfies multiple similar analyses.\nFor this purpose, the number of extra lineages averaged over some exemplary inputs may be taken into account. \nWhatever strategy is used, the applied heuristics cannot guarantee to find a global optimum.\nIn practise, it may be necessary to weigh up between solution quality and computational burden (mainly dependent on -i and, optionally, -s).\nThe preferred tabu tenure not only depends on the input, but also on the number of iterations, which should be multiple times higher, and the sample size parameter. \nFrom our experience, the final topology is often found long before the lowest number of extra lineages, so it may not not necessary to put too much effort into finetuning.\nIf, on the other hand, repeated analyses end up with highly variable numbers of extra lineages, the used settings should questioned. \n"
      },
      "source": "https://raw.githubusercontent.com/AGOberprieler/allcopol/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9812982668294915,
      "result": {
        "original_header": "create_indfile",
        "type": "Text_excerpt",
        "value": "This script takes a number of allele mapping strings (one per line, obtained \nby multiple runs of `allcopol` based on the same\\* input files) as input and \nprints a matrix representation of the inferred allele partitions. The latter can\nbe used as input for CLUMPP or `align_clusters`. \n"
      },
      "source": "https://raw.githubusercontent.com/AGOberprieler/allcopol/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9293590539424502,
      "result": {
        "original_header": "align_clusters",
        "type": "Text_excerpt",
        "value": "This tool can be used to match clusters (subgenomes) among multiple\nreconstructions. To avoid getting stuck in a local optimum, a tabu list is \napplied, whose size can be specified via the `-t` option. Compared to `allcopol`, \nthe heuristic used for this step seems to be relatively robust with respect to \nits parameters.\n`-n` sets the total number of optimization iterations. \nUPDATE: `align_clusters` can be replaced by the newer and much faster [Crimp](https://github.com/ulilautenschlager/crimp/) tool, e.g. by running `./crimp -n 20 example.indfile`.\nIn this case, the relevant output file will be named \"example.indfile.permutations\".\nFor small inputs as in this example, it is also possible to perform exact rather than heuristic optimization using the `-x` option, e.g. with `./crimp -x example.indfile`.\nBy default, Crimp optimizes a slightly different objective function than the original `align_clusters`. To stick with the entropy-based one, you can use the `-e` option, however, scores will still differ by a factor of log(2) because `align_clusters` uses natural logarithms, whereas Crimp uses binary ones.\n \n"
      },
      "source": "https://raw.githubusercontent.com/AGOberprieler/allcopol/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8189671674025814,
      "result": {
        "original_header": "relabel_trees",
        "type": "Text_excerpt",
        "value": "Using the output of `align_clusters`, the species trees obtained by multiple\nruns of `allcopol` can be relabeled to mitigate label switching.\n`relabel_trees` expects three arguments, a file containing the inferred species\ntrees, the name of the analyzed polyploid taxon and a permutation file as \nwritten by `align_clusters`. \n"
      },
      "source": "https://raw.githubusercontent.com/AGOberprieler/allcopol/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/AGOberprieler/allcopol/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/AGOberprieler/allcopol/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "AGOberprieler/allcopol"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "AllCoPol"
      },
      "source": "https://raw.githubusercontent.com/AGOberprieler/allcopol/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "AllCoPol"
        ],
        "type": "Text_excerpt",
        "value": "AllCoPol is hosted at the Python Package Index (PyPI), so it can be easily \ninstalled via pip (add `--user` if you do not have root privileges):\n\n```bash\npython3 -m pip install allcopol\n```\n\nAlternatively, you can install the latest version from GitHub. On Linux operating systems this can be done with\n\n```bash\ngit clone https://github.com/AGOberprieler/allcopol\ncd allcopol\npython3 -m pip install .\n```\n\nTo be able to run PhyloNet, Java 1.7 or later has to be installed.\n"
      },
      "source": "https://raw.githubusercontent.com/AGOberprieler/allcopol/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9484268900140139,
      "result": {
        "original_header": "allcopol",
        "type": "Text_excerpt",
        "value": "mapping.txt (input):\n```text\nacc1\tsp1\tA_1,A_2\t2\nacc2\tsp1\tB_1,B_2\t2\nacc3\tsp2\tC_1,C_2\t2\nacc4\tsp2\tD_1,D_2\t2\nacc5\tsp3\tE_1,E_2\t2\nacc6\tsp4\tF_1,F_2\t2\nacc7\tsp5\tG_1,G_2,H_1,H_2\t4\n```\ntrees.nw (input):\n```text\n(((E_2,(B_1,C_2)),(G_1,F_2)),((H_1,H_2),((A_2,A_1),((G_2,D_2),(F_1,((C_1,B_2),(D_1,E_1)))))));\n((((F_2,(G_2,(G_1,F_1))),(A_1,A_2)),((((C_1,C_2),B_1),B_2),(((D_2,D_1),E_1),E_2))),(H_1,H_2));\n((((G_2,((F_1,F_2),G_1)),A_1),((H_2,H_1),(D_1,E_1))),(((D_2,E_2),(C_2,(B_2,(C_1,B_1)))),A_2));\n(((B_2,(C_2,B_1)),(H_2,H_1)),((A_2,A_1),(((G_2,G_1),(F_2,F_1)),((E_1,D_1),((D_2,E_2),C_1)))));\n(((A_1,A_2),(H_2,H_1)),(((E_1,D_1),((F_1,F_2),(G_2,G_1))),(((E_2,D_2),(B_1,(C_2,B_2))),C_1)));\n```\nMain AllCoPol command:\n```bash\nallcopol -A mapping.txt -G trees.nw -S 1 -P PhyloNet_3.8.0.jar -t 5 -i 20\n```\nSetting the tabu tenure to zero and using reinitialization (-u), it is also \npossible to perform random restart hillclimbing instead of tabu search.\nWhile this avoids extensive parameter tuning, it usually requires a higher \nnumber of iterations to obtain satisfactory solutions:\n```bash\nallcopol -A mapping.txt -G trees.nw -S 1 -P PhyloNet_3.8.0.jar -t 0 -u 1 -i 100\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/AGOberprieler/allcopol/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9974213246073141,
      "result": {
        "original_header": "create_indfile",
        "type": "Text_excerpt",
        "value": "mappings.txt (input):\n```text\nsp2:C_1,C_2;sp3:D_1,D_2;sp1___01:B_1_m0,B_2_m0,B_1_m1,B_2_m1;sp1___02:A_1_m0,A_2_m0,A_1_m1,A_2_m1\nsp2:C_1,C_2;sp3:D_1,D_2;sp1___01:A_1_m0,B_2_m0,B_1_m1,B_2_m1;sp1___02:A_2_m0,A_1_m1,A_2_m1,B_1_m0\nsp2:C_1,C_2;sp3:D_1,D_2;sp1___01:A_1_m0,A_2_m0,A_1_m1,A_2_m1;sp1___02:B_1_m0,B_2_m0,B_1_m1,B_2_m1\nsp2:C_1,C_2;sp3:D_1,D_2;sp1___01:A_1_m0,A_2_m0,A_1_m1,B_2_m1;sp1___02:B_1_m0,B_2_m0,B_1_m1,A_2_m1\n```\ncommand:\n```bash\ncreate_indfile mappings.txt sp1 > example.indfile\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/AGOberprieler/allcopol/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8677982509526866,
      "result": {
        "original_header": "allcopol",
        "type": "Text_excerpt",
        "value": "\n_Minimal example:_ \n"
      },
      "source": "https://raw.githubusercontent.com/AGOberprieler/allcopol/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8795767219855665,
      "result": {
        "original_header": "create_indfile",
        "type": "Text_excerpt",
        "value": "mappings.txt (input):\n```text\nsp2:C_1,C_2;sp3:D_1,D_2;sp1___01:B_1_m0,B_2_m0,B_1_m1,B_2_m1;sp1___02:A_1_m0,A_2_m0,A_1_m1,A_2_m1\nsp2:C_1,C_2;sp3:D_1,D_2;sp1___01:A_1_m0,B_2_m0,B_1_m1,B_2_m1;sp1___02:A_2_m0,A_1_m1,A_2_m1,B_1_m0\nsp2:C_1,C_2;sp3:D_1,D_2;sp1___01:A_1_m0,A_2_m0,A_1_m1,A_2_m1;sp1___02:B_1_m0,B_2_m0,B_1_m1,B_2_m1\nsp2:C_1,C_2;sp3:D_1,D_2;sp1___01:A_1_m0,A_2_m0,A_1_m1,B_2_m1;sp1___02:B_1_m0,B_2_m0,B_1_m1,A_2_m1\n```\ncommand:\n```bash\ncreate_indfile mappings.txt sp1 > example.indfile\n```\n \nexample.indfile (output):\n```text\n1 1 (x) 1 : 0 1\n2 2 (x) 1 : 0 1\n3 3 (x) 1 : 0 1\n4 4 (x) 1 : 0 1\n5 5 (x) 1 : 1 0\n6 6 (x) 1 : 1 0\n7 7 (x) 1 : 1 0\n8 8 (x) 1 : 1 0\n\n1 1 (x) 1 : 1 0\n2 2 (x) 1 : 0 1\n...\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/AGOberprieler/allcopol/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8541960070385363,
      "result": {
        "original_header": "align_clusters",
        "type": "Text_excerpt",
        "value": "Applied to the matrix representation written above, the command\n```bash\nalign_clusters -n 50 -t 2 example.indfile\n```\ncreates the output file example.permutations:\n```text\n2\t1\n2\t1\n1\t2\n1\t2\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/AGOberprieler/allcopol/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/AGOberprieler/allcopol/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2019 Ulrich Lautenschlager\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
      },
      "source": "https://raw.githubusercontent.com/AGOberprieler/allcopol/master/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "parent_header": [
          "AllCoPol"
        ],
        "type": "Text_excerpt",
        "value": "AllCoPol is released under the [MIT license](LICENSE).\n"
      },
      "source": "https://raw.githubusercontent.com/AGOberprieler/allcopol/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "allcopol"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "AGOberprieler"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 48713,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/AGOberprieler/allcopol/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 16:34:53",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ]
}