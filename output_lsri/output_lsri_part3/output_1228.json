{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Reference",
        "parent_header": [
          "Premnas"
        ],
        "type": "Text_excerpt",
        "value": "1. CMap: Lamb, J. et al. The Connectivity Map: using gene-expression signatures to connect small molecules, genes, and disease. Science 313, 1929-1935, doi:10.1126/science.1132939 (2006).\n\n2. ACTIONet: Mohammadi, S., Davila-Velderrain, J. & Kellis, M. A multiresolution framework to characterize single-cell state landscapes. Nature Communications 11, 5399, doi:10.1038/s41467-020-18416-6 (2020).\n3. CIBERSORTx: Newman, A. M. et al. Determining cell type abundance and expression from bulk tissues with digital cytometry. Nature Biotechnology 37, 773-782, doi:10.1038/s41587-019-0114-2 (2019)."
      },
      "source": "https://raw.githubusercontent.com/jhhung/Premnas/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/jhhung/Premnas"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-07-06T03:51:01Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-02-02T20:52:35Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A Framework to Estimate Intraclonal Heterogeneity and Subpopulation Changes from Perturbational Bulk Gene Expression Profiles"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9549164163580909,
      "result": {
        "original_header": "Information",
        "type": "Text_excerpt",
        "value": "Workflow of Premnas:  \n"
      },
      "source": "https://raw.githubusercontent.com/jhhung/Premnas/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8203538778118624,
      "result": {
        "original_header": "Execution",
        "type": "Text_excerpt",
        "value": "Moreover, to make the data input meet our file format, user could also download CMap database with specific cell line by our script. The method of the automatically download mode is also descripted below.\n \n"
      },
      "source": "https://raw.githubusercontent.com/jhhung/Premnas/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Download the CMap database with specific cell line",
        "parent_header": [
          "Premnas",
          "Execution"
        ],
        "type": "Text_excerpt",
        "value": "```\n> python3 Premnas.py Download_CMap_data \\\n    -celltype {Cell_line_argument}\n```\nThe `-celltype` could be set as:\n* A375\n* A549\n* HCC515\n* HEPG2\n* MCF7\n* PC3\n* VCAP\n* HT29\n\nThe python script would download LINC L1000 CMap data with specific cell line including its metadata (which would be used in \"Analyzing subpopulation change\" step in Premnas) from GEO website.   \n\n        \n"
      },
      "source": "https://raw.githubusercontent.com/jhhung/Premnas/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/jhhung/Premnas/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/jhhung/Premnas/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "jhhung/Premnas"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Premnas"
      },
      "source": "https://raw.githubusercontent.com/jhhung/Premnas/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://i.imgur.com/sLydog1.png"
      },
      "source": "https://raw.githubusercontent.com/jhhung/Premnas/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.998841399088231,
      "result": {
        "original_header": "Information",
        "type": "Text_excerpt",
        "value": "To execute Premnas, we provide a script for Premnas users. The script would automatically download two required dockers and run through the whole Premans' workflow.\n \n"
      },
      "source": "https://raw.githubusercontent.com/jhhung/Premnas/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/jhhung/Premnas/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Premnas"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "jhhung"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 22809,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 6635,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jhhung/Premnas/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirement",
        "parent_header": [
          "Premnas"
        ],
        "type": "Text_excerpt",
        "value": "* [Docker](https://www.docker.com/) version higher than 19.03.8\n* [Python 3.7 ](https://www.python.org/downloads/) or higher as well as [numpy](https://numpy.org/) and [pandas](https://pandas.pydata.org/) packages\n* Registration on [CIBERSORTx](https://cibersortx.stanford.edu/index.php) and get token for CIBERSORTx docker container on https://cibersortx.stanford.edu/getoken.php .\n* [cmapPy](https://pypi.org/project/cmapPy/) should be installed if expect CMap database automatically download. \n\n\n"
      },
      "source": "https://raw.githubusercontent.com/jhhung/Premnas/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Run the whole Premnas framework",
        "parent_header": [
          "Premnas",
          "Execution"
        ],
        "type": "Text_excerpt",
        "value": "```\n> git clone https://github.com/jhhung/Premnas.git\n> cd Premnas\n    \n> python3 Premnas.py All \\\n    -input_dir {absolute_input_dir_path} \\\n    -output_dir {absolute_output_dir_path} \\\n    -single_cell {single_cell_GEPs_data} \\\n    -sc_source {single_cell_source_clone} \\\n    -user_name {CIBERSORTx_username} \\\n    -token {CIBERSORTx_token} \\\n    -mixture {CMap_data} \\\n    -sub_characteristic {subpopulation_characteristic_file}\n```\n\nThe description of each argument could be founded below the README file or by `python3 Premnas.py -help`. \n\nPremnas would generate several files under the ```absolute_output_dir_path```, which user has set previously:\n```c\noutput_dir   \n    |--- Subpopulation-charactistic.txt \n    |       // Main output, would be used for digital cytometry (CIBERSORTx)\n    |--- ACTIONet-model\n    |       // Model learn by ACTIONet\n    |--- assigned-subpopulation.txt\n    |       // Subpopulation labels of each cells assigned by ACTIONet\n    |--- pruned-assigned-subpopulation.txt\n    |       // Subpopulation labels of each cells after pruning some cells by considering archetypal explicit function\n    |--- subpopulation-visualization.pdf\n    |        // UMAP visualization of single cells.\n    |--- CIBERSORTx_Adjusted.txt\n    |        //Deconvolution result generate by CIBERSORTx\n    |--- Treatment-selection-output.csv\n            //Eventually selected cocktail therapy\n            \n```\n"
      },
      "source": "https://raw.githubusercontent.com/jhhung/Premnas/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1. Learning ad hoc subpopulation characteristic:",
        "parent_header": [
          "Premnas",
          "Execution",
          "Run the specific step of Premans"
        ],
        "type": "Text_excerpt",
        "value": "```\n> python3 Premnas.py Learn_char \\\n    -input_dir {absolute_input_dir_path} \\\n    -output_dir {absolute_output_dir_path} \\\n    -single_cell {single_cell_GEPs_data} \\\n    -sc_source {single_cell_source_clone} \n```\nParameter explanation:\n* -input_dir [absolute_input_dir_path]:\n        Absolute folder path to your all input files, such as single cell GEPs and CMap data.\n        \n* -output_dir [absolute_output_dir_path]: \n        Absolute folder path to your all output files.   \n\n* -single_cell [Single_cell_GEPs_data]: \n        Single cell GEPs data used to learn the subpopulation characteristic. The first row of the file including all of the single cell IDs, while other row represent a specific gene the its corresponding gene expression in each cell. The format of this file could be check in ```data/GSE114459.csv```.\n\n* -sc_source [single_cell_source_clone]: \n        Source clone labels for all cells. In Premnas, we perform batch corretion for single cells by their source clone. Each row in this text file including two elements: single cell ID and its corresponding source. The format of this file could be check in ```data/GSE114459_source.txt```\n"
      },
      "source": "https://raw.githubusercontent.com/jhhung/Premnas/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2. Performing digital cytometry",
        "parent_header": [
          "Premnas",
          "Execution",
          "Run the specific step of Premans"
        ],
        "type": "Text_excerpt",
        "value": "```\n> python3 Premnas.py Dig_cytometry \\\n    -input_dir {absolute_input_dir_path} \\\n    -output_dir {absolute_output_dir_path} \\\n    -user_name {CIBERSORTx_username} \\\n    -token {CIBERSORTx_token} \\\n    -mixture {CMap_data} \\\n    -sub_characteristic {subpopulation_characteristic_file}\n```\n\nParameter explanation:\n* -input_dir [absolute_input_dir_path]:\n        Absolute folder path to your all input files, such as single cell GEPs and CMap data.\n        \n* -output_dir [absolute_output_dir_path]: \n        Absolute folder path to your all output files.   \n\n* -user_name [CIBERSORTx_username]:\n        Registered user name of [CIBERSORTx](https://cibersortx.stanford.edu/index.php). \n\n* -token [CIBERSORTx_token]: \n        According to CIBERSORTx team policy, it is necessary to run CIBERSORTx docker with an authentication token. The token can be apply on https://cibersortx.stanford.edu/getoken.php .\n\n* -mixture [CMap mixture data]: \n        LINCS L1000 CMap level 3 gene expression profiles. The file could be obtained from our script, whcih automatically download from the [GEO website](https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE70138), see **Download the CMap database with specific cell line**.\n        \n* -sub_characteristic [Subpopulation characteristic]: \n        Subpopulation characteristic file, which could generate by the previous step of Premnas.\n"
      },
      "source": "https://raw.githubusercontent.com/jhhung/Premnas/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3. Analyzing subpopulation change",
        "parent_header": [
          "Premnas",
          "Execution",
          "Run the specific step of Premans"
        ],
        "type": "Text_excerpt",
        "value": "```\n> python3 Premnas.py Analyze_sub \\\n    -input_dir {absolute_input_dir_path} \\\n    -output_dir {absolute_output_dir_path} \\\n    -metadata {CMap_metadata}\n```\nParameter explanation:\n* -input_dir [absolute_input_dir_path]:\n        Absolute folder path to your all input files, such as single cell GEPs and CMap data.\n        \n* -output_dir [absolute_output_dir_path]: \n        Absolute folder path to your all output files.\n        \n* -metadata [CMap_metadata]: \n        Information of each perturbation experiment in the LINCS L1000 CMap database (e.g., 'GSE70138_Broad_LINCS_inst_info_2017-03-06.txt.gz' on the [GEO website](https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE70138)) The metadata could also be generate by our script, see **Download the CMap database with specific cell line**. \n"
      },
      "source": "https://raw.githubusercontent.com/jhhung/Premnas/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "contact",
    "contributors",
    "documentation",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 04:04:00",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ]
}