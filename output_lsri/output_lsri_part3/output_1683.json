{
  "application_domain": [
    {
      "confidence": 9.13,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/pepebonet/DeepMP"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-01-08T11:00:57Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-07-19T02:43:15Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DeepMP is a computational tool to detect DNA modifications in Nanopore sequencing data"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9974692079712227,
      "result": {
        "original_header": "DeepMP",
        "type": "Text_excerpt",
        "value": "DeepMP is a convolutional neural network (CNN)-based model that takes information from Nanopore signals and basecalling errors to detect whether a read is methylated or not.  DeepMP's architecture consists of two different modules. First, the sequence module involves 6 1D convolutional layers with 256 1x4 filters. On the other hand, the error module comprises 3 1D convolutional layers and 3 locally connected layers both with 128 1x3 filters. Outputs are finally concatenated and inputted into a fully connected layer with 512 units.\nFurthermore, DeepMP introduces a threshold-free position modification calling model sensitive to sites methylated at low frequency across cells. These novelties allow DeepMP to accurately detect methylated sites at read and position levels.  \n"
      },
      "source": "https://raw.githubusercontent.com/pepebonet/DeepMP/release/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/pepebonet/DeepMP/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/pepebonet/DeepMP/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "pepebonet/DeepMP"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DeepMP"
      },
      "source": "https://raw.githubusercontent.com/pepebonet/DeepMP/release/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Clone repository",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "First download DeepMP from the github repository:\n\n        git clone https://github.com/pepebonet/DeepMP.git\n"
      },
      "source": "https://raw.githubusercontent.com/pepebonet/DeepMP/release/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Install dependencies",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "We highly recommend to use a virtual environment for the installation and employment of DeepMP:\n\n`Create environment and install DeepMP:`\n\n        conda create --name deepmp_2021 python=3.8\n        conda activate deepmp_2021\n        pip install -e .\n\n`Install additional dependencies:`\n\n        pip install ont-tombo\n        pip install biopython\n        conda install -c bioconda samtools\n        conda install -c bioconda minimap2\n        conda install -c anaconda openjdk\n        conda install -c anaconda bottleneck\n        "
      },
      "source": "https://raw.githubusercontent.com/pepebonet/DeepMP/release/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Data Preparation",
        "parent_header": [
          "Example data"
        ],
        "type": "Text_excerpt",
        "value": "First, extract the fastqs from the reads (output paths need to be generated and updated for the following commands): \n\n```\npython deepmp/miscellaneous/parse_fast5.py docs/reads/treated/ -ff5 True -o docs/output_example/error_features/treated/ -cpu 56 -bg Basecall_1D_001\n\npython deepmp/miscellaneous/parse_fast5.py docs/reads/untreated/ -ff5 True -o docs/output_example/error_features/untreated/ -cpu 56 -bg Basecall_1D_001\n```\n\nNext, for both fastqs extracted, the reads are mapped to the reference genome. For that to be done, first load the following packages in your environment if you do not have them already. \n\n```\nconda install -c bioconda samtools\nconda install -c bioconda minimap2\nconda install -c anaconda openjdk\n```\n\nThen, map reads to the genome with the reference genome available in /docs/ref/ : \n```\ncd docs/output_example/error_features/treated/\n\n minimap2 -ax map-ont ../../../ref/Escherichia_coli_str_k_12_substr_mg1655.ASM584v2.dna.toplevel.fa Basecall_1D_001_BaseCalled_template.fastq | samtools view -hSb | samtools sort -@ 56 -o sample.bam\n\nsamtools index sample.bam\n```\n\nRepeat for the untreated folder:\n\n```\ncd ../untreated/\n\n minimap2 -ax map-ont ../../../ref/Escherichia_coli_str_k_12_substr_mg1655.ASM584v2.dna.toplevel.fa Basecall_1D_001_BaseCalled_template.fastq | samtools view -hSb | samtools sort -@ 56 -o sample.bam\n\nsamtools index sample.bam\n```\n\nThe following step is to call the variants in both treated and untreated folders: \n\n```\nsamtools view -h -F 3844 sample.bam |  java -jar ../../../jvarkit/sam2tsv.jar -r ../../../ref/Escherichia_coli_str_k_12_substr_mg1655.ASM584v2.dna.toplevel.fa > sample.tsv\n\ncd ../treated/\n\nsamtools view -h -F 3844 sample.bam |  java -jar ../../../jvarkit/sam2tsv.jar -r ../../../ref/Escherichia_coli_str_k_12_substr_mg1655.ASM584v2.dna.toplevel.fa > sample.tsv\n```\n\nTo allow downstream parallelisation of the feature extraction, the generated sample.tsv is split into the different reads in a tmp folder. \n\n```\nmkdir tmp\nawk 'NR==1{ h=$0 }NR>1{ print (!a[$2]++? h ORS $0 : $0) > \"tmp/\"$1\".txt\" }' sample.tsv\n```\n\nThen go back to the untreated and repeat: \n\n```\ncd ../untreated/\nmkdir tmp\nawk 'NR==1{ h=$0 }NR>1{ print (!a[$2]++? h ORS $0 : $0) > \"tmp/\"$1\".txt\" }' sample.tsv\n```\n\nAs in  some scenarios the readnames of the fastqs do not match the fast5 readnames, a dictionary to parse each read pair may be needed. To do so, we employ the sequencing summary output after running Guppy. That is the case of E. coli: \n\n```\npip install biopython\n\npython ../../../../deepmp/miscellaneous/get_dict_guppy.py -ss ../../../../docs/reads/sequencing_summary_untreated.txt -o dict_reads.pkl\n\ncd ../treated/\n\npython ../../../../deepmp/miscellaneous/get_dict_guppy.py -ss ../../../../docs/reads/sequencing_summary_treated.txt -o dict_reads.pkl\n```\n"
      },
      "source": "https://raw.githubusercontent.com/pepebonet/DeepMP/release/README.md",
      "technique": "header_analysis"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8676589897927988,
      "result": {
        "original_header": "DeepMP",
        "type": "Text_excerpt",
        "value": "<img src=\"docs/images/Figure_1_DeepMP.png\" alt=\"alt text\" width=1000 height=\"whatever\"> \n"
      },
      "source": "https://raw.githubusercontent.com/pepebonet/DeepMP/release/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/pepebonet/DeepMP/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2021 Jose Bonet\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/pepebonet/DeepMP/release/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "http://raw.githubusercontent.com/pepebonet/DeepMP/release/docs/images/Figure_1_DeepMP.png"
      },
      "source": "https://raw.githubusercontent.com/pepebonet/DeepMP/release/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DeepMP"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "pepebonet"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 120402,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pepebonet/DeepMP/release/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Install dependencies",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "We highly recommend to use a virtual environment for the installation and employment of DeepMP:\n\n`Create environment and install DeepMP:`\n\n        conda create --name deepmp_2021 python=3.8\n        conda activate deepmp_2021\n        pip install -e .\n\n`Install additional dependencies:`\n\n        pip install ont-tombo\n        pip install biopython\n        conda install -c bioconda samtools\n        conda install -c bioconda minimap2\n        conda install -c anaconda openjdk\n        conda install -c anaconda bottleneck\n        "
      },
      "source": "https://raw.githubusercontent.com/pepebonet/DeepMP/release/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running DeepMP",
        "parent_header": [
          "Example data"
        ],
        "type": "Text_excerpt",
        "value": "First, go back to the DeepMP folder to run the commands: \n\n```\ncd ../../../../\n```\n\nWith the data ready, we can now extract the combined features from the reads:\n\n```\nDeepMP combine-extraction -fr docs/reads/treated/ -re docs/output_example/error_features/treated/tmp/ -rp  docs/ref/Escherichia_coli_str_k_12_substr_mg1655.ASM584v2.dna.toplevel.fa -ml 1 -cpu 56 -m CG -dn docs/output_example/error_features/treated/dict_reads.pkl -o docs/output_example/treated_features.tsv\n\nDeepMP combine-extraction -fr docs/reads/untreated/ -re docs/output_example/error_features/untreated/tmp/ -rp  docs/ref/Escherichia_coli_str_k_12_substr_mg1655.ASM584v2.dna.toplevel.fa -ml 0 -cpu 56 -m CG -dn docs/output_example/error_features/untreated/dict_reads.pkl -o docs/output_example/untreated_features.tsv\n```\n\nOnce the features are extracted one can concat the resulting features of the treated and untreated samples into a single file to then perform the preprocess step: \n\n```\ncd docs/output_example/\n\ncat untreated_features.tsv treated_features.tsv > features.tsv\n\nDeepMP preprocess -f features.tsv -ft combined -o . -cpu 56\n```\n\nWith the test folder available we can now use one of the trained models to get the predictions from the model at read and position level: \n\n```\nDeepMP call-modifications -m joint -md ../../trained_models/K12ER2925_joint_202106/ -tf test/ -pos -cpu 56 \n```\n\nThe resulting files of the analysis should be the read and position calling predictions from DeepMP: \n\n```\nread_predictions_joint_DeepMP.tsv\nposition_calling_joint_DeepMP.tsv\n```\n"
      },
      "source": "https://raw.githubusercontent.com/pepebonet/DeepMP/release/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 05:52:16",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 26
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "type": "Text_excerpt",
        "value": "This section highlights the main functionalities of DeepMP and the commands to run them. For a detailed insight into the whole process of predicting modifications go to the [Example data](#Example-data) section. \n"
      },
      "source": "https://raw.githubusercontent.com/pepebonet/DeepMP/release/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Feature extraction:",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Features for the model need to be extracted. We present 3 different options: \n\n`Option 1:` Extract combined features\n```\nDeepMP combine-extraction -fr path/to/fast5/files/ -re path/to/error/folder/ -rp path/to/reference/file/ -dn path/to/dict_read_names -m CG -o CpG_methylated_combined.tsv -ml 1 -cpu 56\n```\n\n`Option 2:` Extract sequence features\n```\nDeepMP sequence-feature-extraction path/to/fast5/files/ -rp path/to/reference/file/ -m CG -o CpG_methylated.tsv -ml 1 -cpu 56\n```\n\n`Option 3:` Extract error features\n```\nDeepMP single-read-error-extraction -ef path/to/error/folder/ -m CG -o output/error_features/ -l 1 -cpu 56\n```\n"
      },
      "source": "https://raw.githubusercontent.com/pepebonet/DeepMP/release/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Preprocess:",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Extracted features are processed to get the information into h5 format which is the desired input for training, validation and testing. \n```\nDeepMP preprocess -f path/to/features.tsv  -ft combined -o output/folder/ -cpu 56\n```\n"
      },
      "source": "https://raw.githubusercontent.com/pepebonet/DeepMP/release/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Train models",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Preprocessing is needed before training. Use `--model_type` flag to specify model for data preparation, choose between `seq` and `err`.\n```\nDeepMP preprocess path/to/csv_file --model_type seq\n```\nTrain sequence model from binary files.\n```\nDeepMP train-nns -m seq -tf path/to/train/data -vf path/to/validation/data -md save/model/to/directory -ld save/log/to/directory\n```\nTrain errors model from binary files.\n```\nDeepMP train-nns -m err -tf path/to/train/data -vf path/to/validation/data -md save/model/to/directory -ld save/log/to/directory\n```\nTrain joint model from binary files.\n```\nDeepMP train-nns -m joint -tf path/to/train/data -vf path/to/validation/data -md save/model/to/directory -ld save/log/to/directory\n```\n- Use `-cp` to specify the checkpoint file while training model from checkpoints.\n\n"
      },
      "source": "https://raw.githubusercontent.com/pepebonet/DeepMP/release/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Call modifications",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Finally modifications are called for a given test data. Call modifications can be employed to be run in parallel or in a single CPU. \n\nRunning call-modifications in parallel (faster and memory efficient):\n\n```\nDeepMP call-modifications -m joint -tf test/folder/preprocess/output/ -md model/directory -o output/ -pos -cpu 56\n```\n\nRunning call-modifications in single CPU (deprecated):\n```\nDeepMP call-modifications -m joint -tf path/to/test/data/test_file.h5 -md model/directory -o output/ -pos\n```\n\n- Specify model type with flag `-m`, choose from `seq, err, joint`(required).\n- Add `-ef` for sequence model with both seq and error features.\n- Add  `-pos` for test on positions.\n"
      },
      "source": "https://raw.githubusercontent.com/pepebonet/DeepMP/release/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Fast call modifications from fast5 files (under test)",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "DeepMP can call modifications from re-squiggled fast5 files in one step:\n\n```\nDeepMP fast-call-joint -f path/to/fast5s/ -ref path/to/reference/genome -md path/to/trained_model -j path/to/sam2tsv.jar\n```\n\nNote that this function is currently under test, stepwise process is recommanded. Please see the following example for details.\n"
      },
      "source": "https://raw.githubusercontent.com/pepebonet/DeepMP/release/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example data",
        "type": "Text_excerpt",
        "value": "Step by step process to detect modifications employing DeepMP on a sample (10 reads) of the E. coli dataset. Copy paste of all the commnads starting from the DeepMP folder will output the results on the read and position predictions. E. coli reads are located in: \n\n```\n    docs/reads/\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/pepebonet/DeepMP/release/README.md",
      "technique": "header_analysis"
    }
  ]
}