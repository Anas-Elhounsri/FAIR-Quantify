{
  "application_domain": [
    {
      "confidence": 29.79,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/NHLBI-BCB/IKAP"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-08-28T21:52:26Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-04-18T23:04:25Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "IKAP - Identifying K mAjor cell Population groups in single-cell RNA-seq analysis"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.997173296296427,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "- IKAP:\nThe main function runs the following steps: \n    - (1) regress out confounding variables and scale data using Seurat::ScaleData; \n    - (2) find variable genes for principal component analysis (PCA) using Seurat::FindVariableGenes; \n    - (3) perform PCA using Seurat::RunPCA; \n    - (4) estimate k.max; \n    - (5) explore ranges of k and nPC and compute gap statistics; \n        - GapStatistic, ObservedLogW, and ExpectedLogW: <br>Compute gap statistics given a data matrix (used for computing data point Euclidean distances) and K sets of clusters with k = 1 \u2026 K. GapStatistic calls ObservedLogW and ExpectedLogW to compute sum of within-group distances for observed data and random data respectively.\n        - BottomUpMerge and NearestCluster (5): Generate sets of cell groups by exploring ranges of k and nPC. BottomUpMerge finds k.max groups using Seurat::FindClusters and gradually merges two nearest clusters measured by NearestCluster.\n    - (6) select candidate sets; \n        - SelectCandidate: <br>Select candidate sets based on gap statistics.\n    - (7) compute marker genes using Seurat::FindAllMarkers; \n        - ComputeMarkers: <br>Compute marker genes for all cell groups in all candidate sets using Seurat::FindAllMarkers. In addition, compute Area Under the ROC curve (AUROC) for each marker genes using the R package PRROC. Plot marker gene heatmap(s) using Seurat::DoHeatmap.\n    - (8) build decision trees; \n        - DecisionTree: <br>Build decision trees for all cell groups in all candidate sets using the R package rpart and compute the classification error for each candidate set.\n    - (9) plot tSNE plots and PC_K.pdf \n        - PlotSummary: <br>Mark the best set based on classification error and plot PC_K.pdf \n"
      },
      "source": "https://raw.githubusercontent.com/NHLBI-BCB/IKAP/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/NHLBI-BCB/IKAP/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/NHLBI-BCB/IKAP/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "NHLBI-BCB/IKAP"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/NHLBI-BCB/IKAP/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/NHLBI-BCB/IKAP/master/Figure 1.png"
      },
      "source": "https://raw.githubusercontent.com/NHLBI-BCB/IKAP/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "Please install the following R libraries before installing IKAP: <br>\n[Seurat](https://satijalab.org/seurat/install.html), [dplyr](https://cloud.r-project.org/web/packages/dplyr), [reshape2](https://cran.r-project.org/web/packages/reshape2), [PRROC](https://cran.r-project.org/web/packages/PRROC/), [WriteXLS](https://cran.r-project.org/web/packages/WriteXLS/), [rpart](https://cran.r-project.org/web/packages/rpart/), [stringr](https://cran.r-project.org/web/packages/stringr), and [rpart.plot](https://cran.r-project.org/web/packages/rpart.plot) \n\n<br>\n<h4>IKAP installation:</h4>\n\n<ol>\n  <li>\n    <p>First, you need to install the\n<a href=\"https://github.com/hadley/devtools\">devtools</a> package. You can do\nthis from <a href=\"https://cran.r-project.org\">CRAN</a>. Invoke R and then type</p>\n\n```{r, eval = FALSE}\ninstall.packages(\"devtools\")\n```\n  </li>\n  <li>\n    <p>Load the devtools package.</p>\n\n```{r, eval = FALSE}\nlibrary(devtools)\n```\n  </li>\n  <li>\n    <p>Install IKAP </p>\n\n```{r, eval = FALSE}\ndevtools::install_github(\"NHLBI-BCB/IKAP\")\n```\n  </li>\n</ol>\n\n\n\n\n\n\n\n\n<br>\nThe main function, IKAP, takes a Seurat object with the normalized expression matrix and other parameters set by default values if not specified. IKAP explores sets of cell groups (clustering) by varying resolution (r) and the number of top principal components (nPC) for Seurat SNN clustering and picks a few candidate sets among all explored sets with one marked as the best that likely produces distinguishing marker genes.\n\nNote: IKAP will, by default, regress out the percentage of mitochondrial gene counts and total UMI counts and scale the expression matrix using Seurat ScaleData function. These two values should be save in Seurat metadata with column names 'percent.mito' and 'nUMI' respectively. If you want to regress out different confounding variables or use different column names, please save these variables in Seurat metadata and set 'confounders' (an IKAP parameter) as their column names in the Seurat metadata data frame.\n\n\n<div class=\"paragraph\"><br><br></div>\n\nIKAP Workflow \n--------\n<p align=\"center\">\n  <img src=\"Figure 1.png\" width=\"933\" height=\"1050\" title=\"IKAP workflow\">\n</p>\n\n\nUsage:\n-------\n\n```\nSeurat_obj <- IKAP(Seurat_obj, out.dir = \"./IKAP\")\n```\n\nReturned data and output files (saved in the output directory, default = ./IKAP/):\n\nSeurat object:\nIKAP returns a Seurat object with all explored sets in the metadata data frame.\n\n- **_PC_K.pdf_**:\n\nThe heatmap shows the statistics for every combination of r and nPC explored. Candidate sets are marked as 'X' with the best marked as 'B'. The corresponding cell membership can be found in the metadata of the returned Seurat object with column name 'PC?K?'. For example, if 'B' (the best set) is marked at nPC = 20 and k = 8, the corresponding cell membership is stored in column 'PC20K8' in the metadata.\n\n- **_data.xls_** and **_markers.all.rds_**:\n\nIt saves the statistics (plotted in PC_K.pdf) for determining candidate sets in the first sheet. The other sheets display the (upregulated) marker genes for candidate sets. The R object, markers.all.rds, contains a data frame of marker genes for every candidate set.\n\n- **_*.png_**:\n\nHeatmaps show expression of top 10 (ranked by expression fold change) marker genes from each cell group for candidate sets. They are plotted using Seurat DoHeatmap function.\n\n- **_DT_plot.pdf_**, **_DT_summary.rds_**, and **_DT.rds_**:\n\nDecision tree output files. A decision tree is built using marker genes for every cell group in every candidate set using R package rpart. All decision trees are plotted in DT_plot.pdf. Classification errors are summarized in the R object DT_summary.rds. DT.rds is the output object from rpart.\n\n- **_*tSNE.pdf_**:\n\ntSNE plots for candidate sets.\n\n<div class=\"paragraph\"><br><br></div>\n\n\n\nFunctions in the R script:\n--------------------------\n\n- IKAP:\nThe main function runs the following steps: \n    - (1) regress out confounding variables and scale data using Seurat::ScaleData; \n    - (2) find variable genes for principal component analysis (PCA) using Seurat::FindVariableGenes; \n    - (3) perform PCA using Seurat::RunPCA; \n    - (4) estimate k.max; \n    - (5) explore ranges of k and nPC and compute gap statistics; \n        - GapStatistic, ObservedLogW, and ExpectedLogW: <br>Compute gap statistics given a data matrix (used for computing data point Euclidean distances) and K sets of clusters with k = 1 \u2026 K. GapStatistic calls ObservedLogW and ExpectedLogW to compute sum of within-group distances for observed data and random data respectively.\n        - BottomUpMerge and NearestCluster (5): Generate sets of cell groups by exploring ranges of k and nPC. BottomUpMerge finds k.max groups using Seurat::FindClusters and gradually merges two nearest clusters measured by NearestCluster.\n    - (6) select candidate sets; \n        - SelectCandidate: <br>Select candidate sets based on gap statistics.\n    - (7) compute marker genes using Seurat::FindAllMarkers; \n        - ComputeMarkers: <br>Compute marker genes for all cell groups in all candidate sets using Seurat::FindAllMarkers. In addition, compute Area Under the ROC curve (AUROC) for each marker genes using the R package PRROC. Plot marker gene heatmap(s) using Seurat::DoHeatmap.\n    - (8) build decision trees; \n        - DecisionTree: <br>Build decision trees for all cell groups in all candidate sets using the R package rpart and compute the classification error for each candidate set.\n    - (9) plot tSNE plots and PC_K.pdf \n        - PlotSummary: <br>Mark the best set based on classification error and plot PC_K.pdf\n\n \n\n<div class=\"paragraph\"><br><br></div>\n\n\n \n \n \n \nLicense\n--------\nMIT license: https://opensource.org/licenses/MIT \n \n<br><br> \nContact\n--------\nIf you have any question, please contact: yun-ching.chen@nih.gov\n\n"
      },
      "source": "https://raw.githubusercontent.com/NHLBI-BCB/IKAP/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "IKAP installation:",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "------------------------------\n\n<br>\n\n> <div>Article:<br><b>IKAP - Identifying K mAjor cell Population groups in single-cell RNA-seq analysis</b>\n>  <br>Yun-Ching Chen, Abhilash Suresh, Chingiz Underbayev, Clare Sun, Komudi Singh, Fayaz Seifuddin, Adrian Wiestner, Mehdi Pirooznia. \n  >  <a href=\"https://academic.oup.com/gigascience/article/8/10/giz121/5579995\" class=\"\" classname=\"\" target=\"_blank\" name=\"\">https://academic.oup.com/gigascience/article/8/10/giz121/5579995</a></div> \n\n<br>\n\n<b>\n\n<pre>\n* Note: for Seurat3 please see Seurat3_code folder\n</pre>\n</b>\n<br>\n\n\nInstallation\n-----------\n\nPlease install the following R libraries before installing IKAP: <br>\n[Seurat](https://satijalab.org/seurat/install.html), [dplyr](https://cloud.r-project.org/web/packages/dplyr), [reshape2](https://cran.r-project.org/web/packages/reshape2), [PRROC](https://cran.r-project.org/web/packages/PRROC/), [WriteXLS](https://cran.r-project.org/web/packages/WriteXLS/), [rpart](https://cran.r-project.org/web/packages/rpart/), [stringr](https://cran.r-project.org/web/packages/stringr), and [rpart.plot](https://cran.r-project.org/web/packages/rpart.plot) \n\n<br>\n<h4>IKAP installation:</h4>\n\n<ol>\n  <li>\n    <p>First, you need to install the\n<a href=\"https://github.com/hadley/devtools\">devtools</a> package. You can do\nthis from <a href=\"https://cran.r-project.org\">CRAN</a>. Invoke R and then type</p>\n\n```{r, eval = FALSE}\ninstall.packages(\"devtools\")\n```\n  </li>\n  <li>\n    <p>Load the devtools package.</p>\n\n```{r, eval = FALSE}\nlibrary(devtools)\n```\n  </li>\n  <li>\n    <p>Install IKAP </p>\n\n```{r, eval = FALSE}\ndevtools::install_github(\"NHLBI-BCB/IKAP\")\n```\n  </li>\n</ol>\n\n\n\n\n\n\n\n\n<br>\nThe main function, IKAP, takes a Seurat object with the normalized expression matrix and other parameters set by default values if not specified. IKAP explores sets of cell groups (clustering) by varying resolution (r) and the number of top principal components (nPC) for Seurat SNN clustering and picks a few candidate sets among all explored sets with one marked as the best that likely produces distinguishing marker genes.\n\nNote: IKAP will, by default, regress out the percentage of mitochondrial gene counts and total UMI counts and scale the expression matrix using Seurat ScaleData function. These two values should be save in Seurat metadata with column names 'percent.mito' and 'nUMI' respectively. If you want to regress out different confounding variables or use different column names, please save these variables in Seurat metadata and set 'confounders' (an IKAP parameter) as their column names in the Seurat metadata data frame.\n\n\n<div class=\"paragraph\"><br><br></div>\n"
      },
      "source": "https://raw.githubusercontent.com/NHLBI-BCB/IKAP/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9144319564621219,
      "result": {
        "original_header": "IKAP \u2013 Identifying K mAjor cell Population groups in single-cell RNA-seq analysis",
        "type": "Text_excerpt",
        "value": "<pre>\n* Note: for Seurat3 please see Seurat3_code folder\n</pre>\n</b>\n<br> \n"
      },
      "source": "https://raw.githubusercontent.com/NHLBI-BCB/IKAP/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/NHLBI-BCB/IKAP/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2020 NHLBI-BCB\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/NHLBI-BCB/IKAP/master/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "type": "Text_excerpt",
        "value": "MIT license: https://opensource.org/licenses/MIT \n \n<br><br> \nContact\n--------\nIf you have any question, please contact: yun-ching.chen@nih.gov\n\n"
      },
      "source": "https://raw.githubusercontent.com/NHLBI-BCB/IKAP/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "IKAP"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "NHLBI-BCB"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 35377,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/NHLBI-BCB/IKAP/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 08:51:48",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 6
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage:",
        "type": "Text_excerpt",
        "value": "```\nSeurat_obj <- IKAP(Seurat_obj, out.dir = \"./IKAP\")\n```\n\nReturned data and output files (saved in the output directory, default = ./IKAP/):\n\nSeurat object:\nIKAP returns a Seurat object with all explored sets in the metadata data frame.\n\n- **_PC_K.pdf_**:\n\nThe heatmap shows the statistics for every combination of r and nPC explored. Candidate sets are marked as 'X' with the best marked as 'B'. The corresponding cell membership can be found in the metadata of the returned Seurat object with column name 'PC?K?'. For example, if 'B' (the best set) is marked at nPC = 20 and k = 8, the corresponding cell membership is stored in column 'PC20K8' in the metadata.\n\n- **_data.xls_** and **_markers.all.rds_**:\n\nIt saves the statistics (plotted in PC_K.pdf) for determining candidate sets in the first sheet. The other sheets display the (upregulated) marker genes for candidate sets. The R object, markers.all.rds, contains a data frame of marker genes for every candidate set.\n\n- **_*.png_**:\n\nHeatmaps show expression of top 10 (ranked by expression fold change) marker genes from each cell group for candidate sets. They are plotted using Seurat DoHeatmap function.\n\n- **_DT_plot.pdf_**, **_DT_summary.rds_**, and **_DT.rds_**:\n\nDecision tree output files. A decision tree is built using marker genes for every cell group in every candidate set using R package rpart. All decision trees are plotted in DT_plot.pdf. Classification errors are summarized in the R object DT_summary.rds. DT.rds is the output object from rpart.\n\n- **_*tSNE.pdf_**:\n\ntSNE plots for candidate sets.\n\n<div class=\"paragraph\"><br><br></div>\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/NHLBI-BCB/IKAP/master/README.md",
      "technique": "header_analysis"
    }
  ]
}