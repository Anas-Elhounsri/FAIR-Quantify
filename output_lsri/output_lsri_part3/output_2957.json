{
  "application_domain": [
    {
      "confidence": 18.05,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ailabstw/ezGeno"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-03-24T09:40:37Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-05-24T12:47:30Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "An open source genomics data analysis package based on deep learning for auto tuning network structure and building models."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9833523656945512,
      "result": {
        "original_header": "ezGeno",
        "type": "Text_excerpt",
        "value": "```diff\n- News: \nIn this version, the users can skip the step of modifying the Python codes before conducting a new task \nwith different input combinations. ezGeno will create the search space of network architectures \naccording to the input files automatically.\n```\n  \n\nezGeno is an implementation of the efficient neural architecture search algorithm specifically tailored for genomic sequence categorization, for example predicting transcription factor (TF) binding sites and histone modifications.  \nThis repository contains a pytorch implementation of an eNAS algorithm, where parameters can be altered and adjusted by users. Here, we used two examples to demonstrate how ezGeno can be applied to employ deep learning on genomic data categorization:\n* predicting TF binding. The basic architecture of this idea was built based on DeepBind (https://github.com/kundajelab/deepbind).\n* predicting activity of enhancers. The basic architecture of this idea was built based on accuEnhancer.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ailabstw/ezGeno/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8778215477683657,
      "result": {
        "original_header": "Contents",
        "type": "Text_excerpt",
        "value": "*  **network.py**          : Model file, implementation of the model. Flexible construction according to hyperparameters provided.\n*  **ezgeno.py**           : Users can pass parameters to the train model.\n*  **utils.py**            : file for helper functions.\n*  **controller.py**       : Controller(Agent) will use reinforcemnt learning to learn which architecture is better from the available search space.\n*  **dataset.py**          : define ezgeno input file data formats.\n*  **trainer**             : define training steps.\n*  **visualize.py**        : visualize sequence position importance and output sub-sequence data whose score surpasses threshold.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ailabstw/ezGeno/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ailabstw/ezGeno/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ailabstw/ezGeno/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ailabstw/ezGeno"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ezGeno"
      },
      "source": "https://raw.githubusercontent.com/ailabstw/ezGeno/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ailabstw/ezGeno/master/example/TFBind/run.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ailabstw/ezGeno/master/example/AcEnhancer/run.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ailabstw/ezGeno/master/tfbind.jpg"
      },
      "source": "https://raw.githubusercontent.com/ailabstw/ezGeno/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ailabstw/ezGeno/master/seq-heapmap.jpg"
      },
      "source": "https://raw.githubusercontent.com/ailabstw/ezGeno/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ailabstw/ezGeno/master/motif_discovery_compare_example.jpg"
      },
      "source": "https://raw.githubusercontent.com/ailabstw/ezGeno/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ailabstw/ezGeno/master/enhancer.jpg"
      },
      "source": "https://raw.githubusercontent.com/ailabstw/ezGeno/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "ezGeno"
        ],
        "type": "Text_excerpt",
        "value": "1) Download/Clone ezGeno\n``` bash\ngit clone https://github.com/ailabstw/ezGeno.git\n\ncd ezGeno\n\n```\n\n2) Install required packages\n``` bash\napt-get install bedtools\napt-get install python3\napt-get install python3-distutils\napt-get install libglib2.0-0\napt-get install -y libsm6 libxext6 libxrender-dev\npip3 install -r requirements.txt\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ailabstw/ezGeno/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Dataset",
        "parent_header": [
          "ezGeno",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "1)TFBind: We downloaded data transcription factors ChIP-seq called peaks from the curated database of deepBind. Alipanahi et al. (2015) from the ENCODE database.\n\n2)AcEnhancer:The portal now makes available over 13000 datasets and their accompanying metadata and can be accessed at: https://www.encodeproject.org/ .\n"
      },
      "source": "https://raw.githubusercontent.com/ailabstw/ezGeno/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Models",
        "parent_header": [
          "ezGeno",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "**./models** contains links of previous trained models.\n\n"
      },
      "source": "https://raw.githubusercontent.com/ailabstw/ezGeno/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.999763004416055,
      "result": {
        "original_header": "Example1 - TFBind:",
        "type": "Text_excerpt",
        "value": "users can run a sample dataset with the following: \"./example/tfbind/run.sh\". \n"
      },
      "source": "https://raw.githubusercontent.com/ailabstw/ezGeno/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8860090929785723,
      "result": {
        "original_header": "2. eNAS",
        "type": "Text_excerpt",
        "value": "```python\n python3 ezgeno.py --cuda 0 --trainFileList NFE2_training.sequence --trainLabel NFE2_training.label --testFileList NFE2_testing.sequence --testLabel NFE2_testing.label --save example.model\n ``` \n"
      },
      "source": "https://raw.githubusercontent.com/ailabstw/ezGeno/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8661413160443862,
      "result": {
        "original_header": "(optional) modify layers parameters",
        "type": "Text_excerpt",
        "value": "```python\n python3 ezgeno.py --layers 6 --cuda 0 --trainFileList NFE2_training.sequence --trainLabel NFE2_training.label --testFileList NFE2_testing.sequence --testLabel NFE2_testing.label\n ``` \n"
      },
      "source": "https://raw.githubusercontent.com/ailabstw/ezGeno/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8286586511450663,
      "result": {
        "original_header": "(optional) modify search space (convolution filter size) parameters",
        "type": "Text_excerpt",
        "value": "```python\n python3 ezgeno.py --conv_filter_size_list [[3,7,11,15,19]]  --cuda 0 --trainFileList NFE2_training.sequence --trainLabel NFE2_training.label --testFileList NFE2_testing.sequence --testLabel NFE2_testing.label  \n ``` \n"
      },
      "source": "https://raw.githubusercontent.com/ailabstw/ezGeno/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9417806250726641,
      "result": {
        "original_header": "(optional) modify the number of output channels parameters",
        "type": "Text_excerpt",
        "value": "```python\n python3 ezgeno.py --feature_dim 128 --cuda 0 --trainFileList NFE2_training.sequence --trainLabel NFE2_training.label --testFileList NFE2_testing.sequence --testLabel NFE2_testing.label \n ``` \n"
      },
      "source": "https://raw.githubusercontent.com/ailabstw/ezGeno/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.999763004416055,
      "result": {
        "original_header": "Example2 - Enhancer Activity:",
        "type": "Text_excerpt",
        "value": "users can run a sample dataset with the following: \"./example/enhancer/run.sh\". \n"
      },
      "source": "https://raw.githubusercontent.com/ailabstw/ezGeno/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8711610122765983,
      "result": {
        "original_header": "train",
        "type": "Text_excerpt",
        "value": "``` python\npython3 ezgeno.py --trainFileList ./h1hesc_dnase.training.score,./h1hesc_dnase.training_input.sequence  --trainLabel ./h1hesc_dnase.training_label --testFileList ./h1hesc_dnase.validation.score,./h1hesc_dnase.validation_input.sequence --testLabel ./h1hesc_dnase.validation_label --cuda 0  --save example.model\n```  \n"
      },
      "source": "https://raw.githubusercontent.com/ailabstw/ezGeno/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8931217056886137,
      "result": {
        "original_header": "(optional) modify layers,feature_dim and conv_filter_size_list",
        "type": "Text_excerpt",
        "value": "### (optional) load model and predict \n``` python\n python3 ezgeno.py --cuda 0 --eval True --testFileList ./h1hesc_dnase.validation.score,./h1hesc_dnase.validation_input.sequence --testLabel ./h1hesc_dnase.validation_label\n``` \n \n"
      },
      "source": "https://raw.githubusercontent.com/ailabstw/ezGeno/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.917527482058593,
      "result": {
        "original_header": "Contents",
        "type": "Text_excerpt",
        "value": "*  **network.py**          : Model file, implementation of the model. Flexible construction according to hyperparameters provided.\n*  **ezgeno.py**           : Users can pass parameters to the train model.\n*  **utils.py**            : file for helper functions.\n*  **controller.py**       : Controller(Agent) will use reinforcemnt learning to learn which architecture is better from the available search space.\n*  **dataset.py**          : define ezgeno input file data formats.\n*  **trainer**             : define training steps.\n*  **visualize.py**        : visualize sequence position importance and output sub-sequence data whose score surpasses threshold.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ailabstw/ezGeno/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.898762039388038,
      "result": {
        "original_header": "Example1 - TFBind:",
        "type": "Text_excerpt",
        "value": "users can run a sample dataset with the following: \"./example/tfbind/run.sh\". \n"
      },
      "source": "https://raw.githubusercontent.com/ailabstw/ezGeno/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8807696717061283,
      "result": {
        "original_header": "2. eNAS",
        "type": "Text_excerpt",
        "value": "```python\n python3 ezgeno.py --cuda 0 --trainFileList NFE2_training.sequence --trainLabel NFE2_training.label --testFileList NFE2_testing.sequence --testLabel NFE2_testing.label --save example.model\n ``` \n"
      },
      "source": "https://raw.githubusercontent.com/ailabstw/ezGeno/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8090466285989804,
      "result": {
        "original_header": "(optional) modify the number of output channels parameters",
        "type": "Text_excerpt",
        "value": "```python\n python3 ezgeno.py --feature_dim 128 --cuda 0 --trainFileList NFE2_training.sequence --trainLabel NFE2_training.label --testFileList NFE2_testing.sequence --testLabel NFE2_testing.label \n ``` \n"
      },
      "source": "https://raw.githubusercontent.com/ailabstw/ezGeno/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9557644832778656,
      "result": {
        "original_header": "(optional) load model and predict",
        "type": "Text_excerpt",
        "value": "```python\n python3 ezgeno.py --load example.model --cuda 0 --eval True --testFileList NFE2_testing.sequence --testLabel NFE2_testing.label \n``` \n"
      },
      "source": "https://raw.githubusercontent.com/ailabstw/ezGeno/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.898762039388038,
      "result": {
        "original_header": "Example2 - Enhancer Activity:",
        "type": "Text_excerpt",
        "value": "users can run a sample dataset with the following: \"./example/enhancer/run.sh\". \n"
      },
      "source": "https://raw.githubusercontent.com/ailabstw/ezGeno/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9142444717772006,
      "result": {
        "original_header": "train",
        "type": "Text_excerpt",
        "value": "``` python\npython3 ezgeno.py --trainFileList ./h1hesc_dnase.training.score,./h1hesc_dnase.training_input.sequence  --trainLabel ./h1hesc_dnase.training_label --testFileList ./h1hesc_dnase.validation.score,./h1hesc_dnase.validation_input.sequence --testLabel ./h1hesc_dnase.validation_label --cuda 0  --save example.model\n```  \n"
      },
      "source": "https://raw.githubusercontent.com/ailabstw/ezGeno/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8854559533500529,
      "result": {
        "original_header": "(optional) modify layers,feature_dim and conv_filter_size_list",
        "type": "Text_excerpt",
        "value": "``` python\npython3 ezgeno.py --trainFileList ./h1hesc_dnase.training.score,./h1hesc_dnase.training_input.sequence  --trainLabel ./h1hesc_dnase.training_label --testFileList ./h1hesc_dnase.validation.score,./h1hesc_dnase.validation_input.sequence --testLabel ./h1hesc_dnase.validation_label --cuda 0  --save example.model --layers 6 6 --feature_dim 64 64 --conv_filter_size_list [[3,7,11,15,19],[3,7,11]]\n```  \n### (optional) load model and predict \n``` python\n python3 ezgeno.py --cuda 0 --eval True --testFileList ./h1hesc_dnase.validation.score,./h1hesc_dnase.validation_input.sequence --testLabel ./h1hesc_dnase.validation_label\n``` \n \n"
      },
      "source": "https://raw.githubusercontent.com/ailabstw/ezGeno/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ailabstw/ezGeno/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ezGeno"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "ailabstw"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 62256,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 1223,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ailabstw/ezGeno/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Packages (refer from requirements.txt)",
        "parent_header": [
          "ezGeno",
          "workflow",
          "Requirements"
        ],
        "type": "Text_excerpt",
        "value": "* biopython==1.77\n* cycler==0.10.0\n* future==0.18.2\n* joblib==0.16.0\n* kiwisolver==1.2.0\n* matplotlib==3.3.0\n* numpy==1.19.0\n* opencv-python==4.3.0.36\n* pandas==1.0.5\n* Pillow==8.3.0\n* pyparsing==2.4.7\n* python-dateutil==2.8.1\n* pytz==2020.1\n* scikit-learn==0.23.1\n* scipy==1.5.1\n* seaborn==0.10.1\n* six==1.15.0\n* sklearn==0.0\n* threadpoolctl==2.1.0\n* torch==1.5.1\n* torchvision==0.6.1\n* tqdm==4.48.0\n* utils==1.0.1\n\n* Bedtools (Tested on 2.28.0)\n"
      },
      "source": "https://raw.githubusercontent.com/ailabstw/ezGeno/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Input data",
        "parent_header": [
          "ezGeno",
          "workflow",
          "Requirements"
        ],
        "type": "Text_excerpt",
        "value": "* Pre-processed peak files \n"
      },
      "source": "https://raw.githubusercontent.com/ailabstw/ezGeno/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 11:01:39",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 21
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "ezGeno"
        ],
        "type": "Text_excerpt",
        "value": "```bash\nusage: ezgeno.py  [-h help] \n                  [--task TASK]\n                  \n                  [--trainFileList TRAINING_DATA] \n                  [--trainLabel TRAINING_LABEL]\n                  [--testFileList TESTING_DATA] \n                  [--testLabel TESTING_LABEL]\n\n                  [--batch_size BATCH_SIZE] [--optimizer OPTIMIZER]\n                  [--epochs EPOCHS] [--learning_rate LEARNING_RATE] \n                  [--supernet_learning_rate SUPERNET_LEARNING_RATE] [--supernet_epochs SUPERNET_EPOCHS] \n                  [--controller_learning_rate CONTROLLER_LEARNING_RATE] [--controller_optimizer CONTROLLER_OPTIMIZER] [--cstep CSTEP]\n                  [--momentum MOMENTUM] [--weight_decay WEIGHT_DECAY] \n                             \n                  [--layers LAYERS] [--feature_dim FEATURE_DIM]         \n                  [--conv_filter_size_list CONV_FILTER_SIZE_LIST]\n\n                  [--cuda CUDA]\n                  [--eval EVAL]\n                  [--load MODEL_NAME]\n                  [--save MODEL_NAME ]\n                  \nRequired arguments:\n  --trainFileList   \n                        training File path,can support multiple file input separated by comma(only including DNA sequence and 1D-array).\n                        In addition,you have to name file extension as \".sequence\" if your input is DNA sequence.\n                        [Type: String]  \n  --trainLabel\n                        training label path. \n                        [Type: String]  \n  --testFileList    \n                        testing File path,can support multiple file input separated by comma.(only including DNA sequence and 1D-array).\n                        In addition,you have to name file extension as \".sequence\" if your input is DNA sequence.\n                        [Type: String]  \n  --testLabel\n                        testing label path. \n                        [Type: String]\n                        \nOptional arguments:\n  -h, --help            \n                        Show this help message and exit\n                        \n  --epochs EPOCHS\n                        Number of epochs for training searched model. \n                        [Type: Int, default: 100]\n                      \n  --supernet_epochs SUPERNET_EPOCHS\n                        Number of epochs for training supernet. \n                        [Type: Int, default: 50]\n  --cstep\n                        Number of steps for training controller.\n\n  --batch_size BATCH_SIZE\n                        Batch size for each training iterations. \n                        [Type: Int, default: 128]\n  --learning_rate LEARNING_RATE         \n                        Learning rate for training searched model. \n                        [Type: Float, default: 0.001]\n  --supernet_learning_rate SUPERNET_LEARNING_RATE         \n                        Learning rate for training supernet. \n                        [Type: Float, default: 0.01]\n  --controller_learning_rate CONTROLLER_LEARNING_RATE         \n                        Learning rate for training controller. \n                        [Type: Float, default: 0.1]\n  --momentum MOMENTUM\n                        Learning rate for training searched model. \n                        [Type: Float, default: 0.9]\n  --weight_decay WEIGHT_DECAY\n                        Weight decay. \n                        [Type: Float, default: 0.0005]  \n  --optimizer OPTIMIZER\n                        Optimizer used for training models. \n                        [Type: String, default: \"sgd\", options: \"sgd, adam, adagrad\"]\n  --controller_optimizer CONTROLLER_OPTIMIZER\n                        Optimizer used for training controller. \n                        [Type: String, default: \"adam\", options: \"sgd, adam, adagrad\"]\n  \n  --weight_init WEIGHT_INITILIZATION\n                        Method used for weight initilization. \n                        [Type: String, default: \"Normal\"]\n                        \n  --layers \n                        can specify layers from multiple input files respectively seperated by space.\n                        1. In TFBind task, we use this parameter to determine the layers of convolution units.\n                        2. In AcEnhancer task, we can use this parameter to determine the layers of convolution units from two inputs.\n                        [Type: int, default: 3]\n  --feature_dim\n                        can specify layers from multiple input files respectively seperated by space.\n                        1. In TFBind task, we use this parameter to determine the number of convolution filters.\n                        2. In AcEnhancer task, we can use this parameter to determine the number of convolution filters from two inputs.\n                        [Type: int, default: 64]\n  --conv_filter_size_list\n                        can specify convolution filters from multiple input files respectively represented by like 2d-array.\n                        1. In TFBind task, we use this parameter to determine the filter size list of convolution filters. Our purposed method will \n                        find the best filter size from this list by reinforcement learning.\n                        2. In AcEnhancer task, we can use this parameter to determine the filter size list of convolution filters from two inputs.\n                        Our purposed method will find the best filter size from user-defined parameter by reinforcement learning.\n                        [Type: str]\n                                      \n  --cuda \n                        We use this parameter to determine to use cuda or not. If you want to use gpu, you can type in gpu index, e.g.: 0.\n                        If you want to use cpu only, you can type -1.\n                        [Type: Int, default: -1 ]\n\n  --eval \n                        This flag is used to predict testing data directly. \n                        It is usually used with \"load\" parameter.\n                        [Type: Bool, default: False]\n                      \n  --task \n                        \"TFBind\": predicting TF binding\n                        \"AcEnhancer\": predicting activity of enhancers\n                        [Type: String, default: \"TFBind\", options: \"TFBind, AcEnhancer\"]\n                        \n  --negative_data_method NEGATIVE_DATA_METHOD  \n                        If not given the negative training data, ezGeno will generate \n                        negative data based on the selected methods.\n                        \"random\": random sampling from the human genome.\n                        \"dinucl\": generate negative sequence based on the same dinucleotide\n                                  composition of the positive training data.\n                        [Type: String, Default:\"dinucl\", options: \"random, dinucl\"]\n                       \n  --load \n                        This parameter is treated as loaded path. We will load modules from this path.\n                        [Type: str, default: './model.t7']\n  --save \n                        This parameter is treated as saved path. We will save trained modules to this path after training.\n                        [Type: str, default: './model.t7']           \n\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/ailabstw/ezGeno/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3. visualize and get sub sequence based on prediction model",
        "parent_header": [
          "ezGeno",
          "Example1 - TFBind:"
        ],
        "type": "Text_excerpt",
        "value": "```python\n python3 visualize.py --load example.model --data_path ./NFE2_positive_test.fa --dataName NFE2 --target_layer_names \"[2]\"\n``` "
      },
      "source": "https://raw.githubusercontent.com/ailabstw/ezGeno/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "(optional) you can choose sequence range which you want to show based on \"show_seq\" parameter. e.g.all,top-100,50-200",
        "parent_header": [
          "ezGeno",
          "Example1 - TFBind:",
          "3. visualize and get sub sequence based on prediction model"
        ],
        "type": "Text_excerpt",
        "value": "```python\n python3 visualize.py --show_seq top-200 --load example.model --data_path ./NFE2_positive_test.fa --dataName NFE2 --target_layer_names \"[2]\" --use_cuda True\n``` \n\n\nWe highlight the important region in each sequence based on the predictive model. As shown in the image below, our model is able to identify regions that are important to determining possible binding sites.\n\n![seq-heatmap](https://github.com/ailabstw/ezGeno/blob/master/seq-heapmap.jpg)\n\nWe also collect the sub-sequences whose scores surpass the threshold and save them in fasta format. This file can be treated as the input to a motif discovery tool (e.g. meme) to generate motif in sub sequences. As shown in the image below, the left sequence logo is based on motif discovery from these sub sequences, and the right sequence logo is from hocomoco database. We can find a reliable and consistent result using our tool.\n\n![seq-heatmap](https://github.com/ailabstw/ezGeno/blob/master/motif_discovery_compare_example.jpg)\n\n "
      },
      "source": "https://raw.githubusercontent.com/ailabstw/ezGeno/master/README.md",
      "technique": "header_analysis"
    }
  ]
}