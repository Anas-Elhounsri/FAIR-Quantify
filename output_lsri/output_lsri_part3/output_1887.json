{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Reference",
        "parent_header": [
          "LNetReduce: simplification of linear dynamic networks"
        ],
        "type": "Text_excerpt",
        "value": "Marion Buffard, Aur\u00e9lien Desoeuvres, Aur\u00e9lien Naldi, Cl\u00e9ment Requil\u00e9, Andrei Zinovyev, Ovidiu Radulescu.\n[LNetReduce: tool for reducing linear dynamic networks with separated time scales.](https://doi.org/10.1101/2021.05.11.443578)\nbioRxiv 2021.05.11.443578; doi:10.1101/2021.05.11.443578\n\n"
      },
      "source": "https://raw.githubusercontent.com/oradules/LNetReduce/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/oradules/LNetReduce"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-06-25T16:04:50Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-09-24T07:36:05Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9639970355831678,
      "result": {
        "original_header": "LNetReduce: simplification of linear dynamic networks",
        "type": "Text_excerpt",
        "value": "Dynamic networks, represented as digraphs labeled by integer timescale orders, can describe deterministic or stochastic \nmonomolecular chemical reaction networks but also random walks on weighted protein-protein interaction networks,\nspreading of infectious diseases and opinion in social networks, communication in computer networks. \nThis tool uses graph and label rewriting rules (pruning edges, pooling and restoring cycles) to compute reduced versions of these network\nwhich reproduces the full network dynamics with good approximation at all time scales. \nFull reduction is possible when edge weight enable timescale separation for the pruning (unique minimum label at bifurcations) and pooling (unique limiting step in cycles) rules.  \nEigenvalues and eigenvectors can be computed for fully reduced models and can then be used to compute the model dynamics. \n"
      },
      "source": "https://raw.githubusercontent.com/oradules/LNetReduce/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9544565777249288,
      "result": {
        "original_header": "Simulation",
        "type": "Text_excerpt",
        "value": "* Both full and reduced models can be simulated. \n* Chose a positive integer for the timescale, e.g. timescale = 1 if you want to simulate between 0 and 10^1.\n* By default, the initial conditions are one for all nodes; changing the default will be possible in future versions  \n* The solution is plotted in semi-logarithmic scale starting with t=10^0.\n* The code uses stiff solvers but these may fail for very stiff unreduced models; reduced models are less stiff and should pose no problems. \n* The reduced model has multi-scale validity, i.e. the solutions computed with the reduced model approximate those computed with the full model at all time scales. \n"
      },
      "source": "https://raw.githubusercontent.com/oradules/LNetReduce/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/oradules/LNetReduce/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/oradules/LNetReduce/master/monomolecular_reduction.ipynb"
      },
      "source": "https://raw.githubusercontent.com/oradules/LNetReduce/master/monomolecular_reduction.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/oradules/LNetReduce/master/Example_Petrov_paper.ipynb"
      },
      "source": "https://raw.githubusercontent.com/oradules/LNetReduce/master/Example_Petrov_paper.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/oradules/LNetReduce/master/Example_cascade_with_slow_transient.ipynb"
      },
      "source": "https://raw.githubusercontent.com/oradules/LNetReduce/master/Example_cascade_with_slow_transient.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/oradules/LNetReduce/master/Figure_MYCN_network.ipynb"
      },
      "source": "https://raw.githubusercontent.com/oradules/LNetReduce/master/Figure_MYCN_network.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/oradules/LNetReduce/master/permutation_of_timescales.ipynb"
      },
      "source": "https://raw.githubusercontent.com/oradules/LNetReduce/master/permutation_of_timescales.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/oradules/LNetReduce/master/flower.ipynb"
      },
      "source": "https://raw.githubusercontent.com/oradules/LNetReduce/master/flower.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/oradules/LNetReduce/master/failed_and_partial_reduction.ipynb"
      },
      "source": "https://raw.githubusercontent.com/oradules/LNetReduce/master/failed_and_partial_reduction.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://mybinder.org/v2/gh/oradules/lnetreduce/HEAD"
      },
      "source": "https://raw.githubusercontent.com/oradules/LNetReduce/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/oradules/LNetReduce/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "oradules/LNetReduce"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "LNetReduce: simplification of linear dynamic networks"
      },
      "source": "https://raw.githubusercontent.com/oradules/LNetReduce/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Using conda",
        "parent_header": [
          "LNetReduce: simplification of linear dynamic networks",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "First install and setup a conda distribution: if you don't already have one.\nSee instructions on the [miniconda website](https://conda.io/miniconda).\n\nThen create an environment for LNetreduce with all required dependencies by running the \nfollowing command in the LNetReduce folder: ```conda env create -f environment. yml```.\n"
      },
      "source": "https://raw.githubusercontent.com/oradules/LNetReduce/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Using pip",
        "parent_header": [
          "LNetReduce: simplification of linear dynamic networks",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "After installing pip enter the the following command lines to install all the needed packages:\n\n```apt-get install graphviz graphviz-dev```\n\n```pip install --user networkx numpy scipy matplotlib ipython jupyter pandas sympy nose matplotlib pygraphviz Pillow```\n\nThen download the zip file and extract it where you want.\n\nIf a problem occurs in the first use, try to upgrade the modules, e.g.:\n\n```pip install --upgrade Pillow ipython```\n"
      },
      "source": "https://raw.githubusercontent.com/oradules/LNetReduce/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Manual installation on Windows",
        "parent_header": [
          "LNetReduce: simplification of linear dynamic networks",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "1. Install Python \n    \n    1. Follow this [guide](https://docs.python.org/3/using/windows.html) with the following steps\n\n        1. Download Python [here](https://www.python.org/downloads/)\n        2. Choose \"customize installation\" and if you don't already have Python in your PATH, check \"add Python X.X to PATH\". Then choose a directory for your Python installation, it is recommended to intall it in a root to **avoid space in the path directory**. Make sure that the pip installation is checked. Check \"Enable Win32 long paths\".\n        3. Right clic on your Python directory, go to property/security, and check that you have (at least in admin) writing and modification rights to be sure that new packages will be intalled in ./Lib/site-packages\n\n2. Install Graphviz\n\n    1. Download Graphviz [here](https://graphviz.org/download/) (if you are not sure about the version choose *X.XX.X EXE installer for Windows 10 (64-bit)*)\n    2. Make sure you have gcc installed, else you can install it [here](https://visualstudio.microsoft.com/fr/visual-cpp-build-tools/) *(note: if you have MinGW or visual studio installed on your computer, you should already have a C/C++ compiler)*\n    3. Install Graphviz, it is recommended to intall it in a root to **avoid space in the path directory**\n\n3. Install [nextworkx](https://networkx.org/documentation/stable/install.html) and [pygraphviz](https://pygraphviz.github.io/documentation/stable/install.html)\n\n    1. Open a powershell (shift+right-clic on a window, or write powershell in your search space), then write **pip install numpy scipy pandas matplotlib networkx**\n    2. Then, write **pip install --global-option=build_ext --global-option=\"-IC:\\Graphviz\\include\" --global-option=\"-LC:\\Graphviz\\lib\" pygraphviz** if **C:\\\\** is the root where you have installed Graphviz.\n\n4. Install LNetReduce\n\n    1. Download the zip file and extract it where you want.\n"
      },
      "source": "https://raw.githubusercontent.com/oradules/LNetReduce/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/oradules/LNetReduce/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "LNetReduce"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "oradules"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 2540675,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 45751,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/oradules/LNetReduce/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-06 06:44:15",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "LNetReduce: simplification of linear dynamic networks"
        ],
        "type": "Text_excerpt",
        "value": "run ```python -m lnetreduce``` to launch the graphical interface.\n\nA Python API is also available, see the included jupyter-notebooks for examples.\n"
      },
      "source": "https://raw.githubusercontent.com/oradules/LNetReduce/master/README.md",
      "technique": "header_analysis"
    }
  ]
}