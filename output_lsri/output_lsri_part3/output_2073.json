{
  "application_domain": [
    {
      "confidence": 19.39,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citing",
        "parent_header": [
          "CFBI(+): Collaborative Video Object Segmentation by (Multi-scale) Foreground-Background Integration"
        ],
        "type": "Text_excerpt",
        "value": "```\n@inproceedings{yang2020CFBI,\n  title={Collaborative video object segmentation by foreground-background integration},\n  author={Yang, Zongxin and Wei, Yunchao and Yang, Yi},\n  booktitle={European Conference on Computer Vision},\n  pages={332--348},\n  year={2020},\n  organization={Springer}\n}\n@article{yang2020CFBIP,\n  author={Yang, Zongxin and Wei, Yunchao and Yang, Yi},\n  journal={IEEE Transactions on Pattern Analysis and Machine Intelligence}, \n  title={Collaborative Video Object Segmentation by Multi-Scale Foreground-Background Integration}, \n  year={2021},\n  volume={},\n  number={},\n  pages={1-1},\n  doi={10.1109/TPAMI.2021.3081597}\n}\n```\n\n\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/z-x-yang/CFBI/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Yang, Zongxin and Wei, Yunchao and Yang, Yi",
        "format": "bibtex",
        "title": "Collaborative video object segmentation by foreground-background integration",
        "type": "Text_excerpt",
        "value": "@inproceedings{yang2020CFBI,\n    organization = {Springer},\n    year = {2020},\n    pages = {332--348},\n    booktitle = {European Conference on Computer Vision},\n    author = {Yang, Zongxin and Wei, Yunchao and Yang, Yi},\n    title = {Collaborative video object segmentation by foreground-background integration},\n}"
      },
      "source": "https://raw.githubusercontent.com/z-x-yang/CFBI/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Yang, Zongxin and Wei, Yunchao and Yang, Yi",
        "doi": "10.1109/TPAMI.2021.3081597",
        "format": "bibtex",
        "title": "Collaborative Video Object Segmentation by Multi-Scale Foreground-Background Integration",
        "type": "Text_excerpt",
        "value": "@article{yang2020CFBIP,\n    doi = {10.1109/TPAMI.2021.3081597},\n    pages = {1-1},\n    number = {},\n    volume = {},\n    year = {2021},\n    title = {Collaborative Video Object Segmentation by Multi-Scale Foreground-Background Integration},\n    journal = {IEEE Transactions on Pattern Analysis and Machine Intelligence},\n    author = {Yang, Zongxin and Wei, Yunchao and Yang, Yi},\n}"
      },
      "source": "https://raw.githubusercontent.com/z-x-yang/CFBI/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/z-x-yang/CFBI"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-03-15T03:47:17Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-01T15:05:52Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "The official implementation of CFBI(+): Collaborative Video Object Segmentation by (Multi-scale) Foreground-Background Integration."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9398894380115943,
      "result": {
        "original_header": "CFBI(+): Collaborative Video Object Segmentation by (Multi-scale) Foreground-Background Integration",
        "type": "Text_excerpt",
        "value": "For VOS-related applications or research, we also recommend our latest VOS framework, [AOT (NeurIPS 2021)](https://github.com/z-x-yang/AOT), whose performance and efficiency are much better than CFBI(+). \n**Based on some necessary considerations, we only release the inference here. If you want to get the training code of CFBI, please contact us by email: <zongxinyang1996@gmail.com>. And please inform us of your institution and the purpose of using CFBI in the email. Thank you for your understanding!** \n"
      },
      "source": "https://raw.githubusercontent.com/z-x-yang/CFBI/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9613292767720942,
      "result": {
        "original_header": "Model Zoo",
        "type": "Text_excerpt",
        "value": "**We recorded the inference speed of CFBI by using one NVIDIA Tesla V100 GPU. Besides, we used a multi-object speed instead of a single-object. A large portion of the sequences in VOS datasets contains multiple objects, and CFBI is good at processing multiple objects simultaneously.** \nIn the inference stage, we restricted the long edge of each frame to be no more than 1040 (1.3 * 800) pixels, which is consistent with the biggest random-scale size (1.3 * 480p) in the training stage and is smaller than the original size of YouTube-VOS (720p). \nIn the inference stage, we ran using the default size of DAVIS (480p). \n"
      },
      "source": "https://raw.githubusercontent.com/z-x-yang/CFBI/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/z-x-yang/CFBI/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 43
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/z-x-yang/CFBI/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "z-x-yang/CFBI"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CFBI(+): Collaborative Video Object Segmentation by (Multi-scale) Foreground-Background Integration"
      },
      "source": "https://raw.githubusercontent.com/z-x-yang/CFBI/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/z-x-yang/CFBI/master/davis_eval_cfbip.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/z-x-yang/CFBI/master/davis_eval.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/z-x-yang/CFBI/master/ytb_eval.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/z-x-yang/CFBI/master/ytb_eval_cfbip.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/z-x-yang/CFBI/master/ytb_eval_fast.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/z-x-yang/CFBI/raw/master/utils/overview.png"
      },
      "source": "https://raw.githubusercontent.com/z-x-yang/CFBI/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/z-x-yang/CFBI/raw/master/utils/quality.png"
      },
      "source": "https://raw.githubusercontent.com/z-x-yang/CFBI/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.988192398363945,
      "result": {
        "original_header": "CFBI(+): Collaborative Video Object Segmentation by (Multi-scale) Foreground-Background Integration",
        "type": "Text_excerpt",
        "value": "Framework:\n<div align=center><img src=\"https://github.com/z-x-yang/CFBI/raw/master/utils/overview.png\" width=\"80%\"/></div> \n"
      },
      "source": "https://raw.githubusercontent.com/z-x-yang/CFBI/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/z-x-yang/CFBI/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "computer-vision, pytorch-implementation, video-object-segmentation"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "BSD 3-Clause \"New\" or \"Revised\" License",
        "spdx_id": "BSD-3-Clause",
        "type": "License",
        "url": "https://api.github.com/licenses/bsd-3-clause",
        "value": "https://api.github.com/licenses/bsd-3-clause"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "BSD 3-Clause License\n\nCopyright (c) 2020, z-x-yang\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its\n   contributors may be used to endorse or promote products derived from\n   this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
      },
      "source": "https://raw.githubusercontent.com/z-x-yang/CFBI/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CFBI"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "z-x-yang"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 151323,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 1086,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/z-x-yang/CFBI/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_papers": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/2003.08333"
      },
      "source": "https://raw.githubusercontent.com/z-x-yang/CFBI/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirements",
        "parent_header": [
          "CFBI(+): Collaborative Video Object Segmentation by (Multi-scale) Foreground-Background Integration"
        ],
        "type": "Text_excerpt",
        "value": "    1. Python3\n    2. pytorch >= 1.3.0 and torchvision\n    3. opencv-python and Pillow"
      },
      "source": "https://raw.githubusercontent.com/z-x-yang/CFBI/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 07:34:57",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 322
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Getting Started",
        "parent_header": [
          "CFBI(+): Collaborative Video Object Segmentation by (Multi-scale) Foreground-Background Integration"
        ],
        "type": "Text_excerpt",
        "value": "1. Prepare datasets:\n    * Download the [validation split](https://drive.google.com/file/d/1-QrceIl5sUNTKz7Iq0UsWC6NLZq7girr/view?usp=sharing) of YouTube-VOS 2018, and decompress the file to `datasets/YTB/valid`. If you want to evaluate CFBI on YouTube-VOS 2019, please download this [split](https://drive.google.com/file/d/1o586Wjya-f2ohxYf9C1RlRH-gkrzGS8t/view?usp=sharing) instead.\n    * Download 480p [TrainVal](https://data.vision.ee.ethz.ch/csergi/share/davis/DAVIS-2017-trainval-480p.zip) split of DAVIS 2017, and decompress the file to `datasets/DAVIS`.\n2. Evaluating:\n    * **YouTube-VOS**: Download pretrained [CFBI](https://drive.google.com/file/d/1YKQL8ruEfcDvKPO5Rs3d6HfVXAv08hX6/view?usp=share_link) or [CFBI+](https://drive.google.com/file/d/1tEg9sy6LYEXQP8QLsagmXpxYc9D3X5Vc/view?usp=share_link), to `pretrain_models`, and then run `bash ytb_eval.sh` for CFBI or `bash ytb_eval_cfbip.sh` for CFBI+. After the evaluation, the result will be packed into a Zip file, which you need to send to [official evaluation server](https://competitions.codalab.org/competitions/19544) to calculate a score. For 2019 version, use this [server](https://competitions.codalab.org/competitions/20127) instead. The pretrained CFBI has been trained on YouTube-VOS using a larger batch size (16) and learning rate (0.02), which boosts the performance (J&F) to `81.8%` on the validation split of YouTube-VOS 2018.\n    * **DAVIS**: Download pretrained [CFBI](https://drive.google.com/file/d/1G6tVaaU4RYKXKKFxqxdE_p8Fwju_0nVE/view?usp=share_link) or [CFBI+](https://drive.google.com/file/d/1KkU-Dxew1wI1affTjN1LmTld0kgpUUQH/view?usp=share_link), to `pretrain_models`, and then run `bash davis_eval.sh` for CFBI or `bash davis_eval_cfbip.sh` for CFBI+. After the evaluation, please use [official code](https://github.com/davisvideochallenge/davis2017-evaluation) to calculate a score, which should be `81.9%` or `83.0%` (J&F).\n    * **Fast CFBI**: To reduce memory usage, we also provide a fast setting in `ytb_eval_fast.sh`. The fast setting enables using `float16` in the matching process of CFBI. Besides, we apply an `atrous strategy` in the global matching of CFBI for further efficiency (The discussion of atrous matching will be submitted to our Arxiv paper soon). The fast setting will save a large amount of memory and significantly improve the inference speed of CFBI. However, this will only lose very little performance.\n    * Another way for saving memory is to increase the number of `--global_chunks`. This will not affect performance but will make the network speed slightly slower.\n"
      },
      "source": "https://raw.githubusercontent.com/z-x-yang/CFBI/master/README.md",
      "technique": "header_analysis"
    }
  ]
}