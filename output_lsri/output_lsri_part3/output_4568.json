{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/kfletcher88/AFLAP"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-05-15T20:42:15Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-05-27T10:15:27Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9993970381360833,
      "result": {
        "original_header": "About",
        "type": "Text_excerpt",
        "value": "The Assembly Free Linkage Analysis Pipeline (AFLAP) was designed to build genetic maps using *k*-mers. This pipeline takes raw reads as an input, compares the composition (Jellyfish hashes) of the two parents and identifies uniquely segregating *k*-mers. It has been tested on *Arabidopsis thaliana* and *Bremia lactucae* producing linkage groups coherent with independently generated genome assemblies. AFLAP may be applied to any organism for which a mapping population is available. We note, that using low coverage sequence is less than ideal for an assembly free approach as a large amount of noise is introduced due to missing data.\n \n"
      },
      "source": "https://raw.githubusercontent.com/kfletcher88/AFLAP/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9775368307433133,
      "result": {
        "original_header": "Custom pedigree file.",
        "type": "Text_excerpt",
        "value": "The pedigree file outlines the pedigree of the cross to be analyzed and the location of the reads which are going to be analyzed. This is done by three mandatory tab delimited fields, two optional.\\\nField 1 is the label which will be retained in all downstream analysis.\\\nField 2 is the generation, parent (F0) = 0, child (F1) = 1, grandchild (F2) = 2. This field will inform AFLAP what type of analysis is to be run.\\\nField 3 is the location of the read file. \n"
      },
      "source": "https://raw.githubusercontent.com/kfletcher88/AFLAP/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9034857471449829,
      "result": {
        "original_header": "Additional fields",
        "type": "Text_excerpt",
        "value": "For parents (F0), field 4 and 5 can be used to manually set the k-mer cutoffs used for makrer assembly. If these fields are not set, AFLAP will try to estimate these cutoffs, which may not be perfect.\\\nNote AFLAP will plot the curve with the cut-offs supplied or calculated. These can be used to edit the Pedigree file and rerun AFLAP. Rerunning AFLAP is efficient as it will reuse all applicable, previously calculated results.\\\nIf the parents are low coverage or GBS then the estimates may be very far off.\\\nFor progeny (F1 and F2), field 4 and 5 can be used to specify the parents. Not currently implemented, but is foundational for a potential multi-cross analysis enhancement. \nIt looks like this:\n```\n#label\tF\tRead\tLowerCoverage/Parent1\tUpperCoverage/Parent2\nCol\t0\tReadsEBI/SRR5882797_1.fastq.gz\t32\t105\nCol\t0\tReadsEBI/SRR5882797_2.fastq.gz\t32\t105\nLer\t0\tReadsEBI/SRR3166543_1.fastq.gz\t40\t177\nLer\t0\tReadsEBI/SRR3166543_2.fastq.gz\t40\t177\nERR1432507\t2\tReadsEBI/ERR1432507_1.fastq.gz\tCol\tLer\nERR1432507\t2\tReadsEBI/ERR1432507_2.fastq.gz\tCol\tLer\nERR1432492\t2\tReadsEBI/ERR1432492_1.fastq.gz\tCol\tLer\nERR1432492\t2\tReadsEBI/ERR1432492_2.fastq.gz\tCol\tLer\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/kfletcher88/AFLAP/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9883403206280474,
      "result": {
        "original_header": "Intermediate Results",
        "type": "Text_excerpt",
        "value": "All temporary files are stored in AFLAP_tmp. This can be pretty sizeable depending on the biology of the organism understudy, especially if you are running different parameters. Once you have generated a genetic map, then I reccomend you delete this directory. When AFLAP is initiated it will look for this and it will not regenerate files already present, so storing this data can save time.\n \n"
      },
      "source": "https://raw.githubusercontent.com/kfletcher88/AFLAP/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9687525230636221,
      "result": {
        "original_header": "Final Results",
        "type": "Text_excerpt",
        "value": "There are multiple points which AFLAP can be stopped:\n1. I just want a genotype table to export to my favorite mapping software. This is generated in step 5, so users can terminate the software once this stage is completes if desired. The genotype table will be saved in AFLAP_Results, with the suffix GT.tsv.\n2. I want a LepMap3 compatible genotype table that I will use to run LepMap3 independtly. This is generated in step 6 and is the default stopping position of AFLAP. It will be saved in AFLAP_Results, with the suffix ForLepMap3.tsv.\n3. I want LepMap3 results. By specifying minimal LOD scores when running `AFLAP.sh`, using `-l` AFLAP will run LepMap3, provided it is found in the ThirdParty directory. In running this AFLAP will calculate the marker order for every linkage group which contains more than 1% of the total number of markers. In addtion, AFLAP will process the LepMap3 results to produce a final file detailing the Marker ID, Linkage group assigned, cM position and marker sequence. This can be used to generate a marker file to map to a genome assembly very quickly. Marker sequences can be used to compare between runs. MarkerIDs can be used for comparison, provided the same AFLAP_tmp directpory is used (e.g. in case the user wants to change the progeny).\\\nThe LepMap3 results are located in AFLAP_Results/LOD#, depending on the minimum LOD score provided.\\\nThe Map and marker file is located in AFLAP_Results suffixed LOD#.txt.\nFinally, after running LepMap3, AFLAP will LOG all results in `./AFLAP_RUN.LOG`\n \n"
      },
      "source": "https://raw.githubusercontent.com/kfletcher88/AFLAP/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8461700979024636,
      "result": {
        "original_header": "Frequently Asked Questions",
        "type": "Text_excerpt",
        "value": "\nQ: I wish to add individuals to my Pedigree file, do I have to start in a new directory/run the full pipeline on every individual?\\\nA: No, AFLAP will be able to use old results for previously generated data and generate the required files for the new sequences. Just add these to the Pedigree file. \n\nQ: I want to exclude individuals, should I delete intermediate files?\\\nA: No, just provide a Pedigree file without those individuals. The genotype table is directed with the Pedigree file, so will only build a table for progeny indicated with in. \n"
      },
      "source": "https://raw.githubusercontent.com/kfletcher88/AFLAP/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/kfletcher88/AFLAP/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/kfletcher88/AFLAP/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "kfletcher88/AFLAP"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Assembly Free Linkage Analysis Pipeline"
      },
      "source": "https://raw.githubusercontent.com/kfletcher88/AFLAP/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kfletcher88/AFLAP/master/AFLAP.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kfletcher88/AFLAP/master/example/run.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kfletcher88/AFLAP/master/bin/05_ObtainSegStats.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kfletcher88/AFLAP/master/bin/06_ExportToLepMap3.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kfletcher88/AFLAP/master/bin/00_ReadDload.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kfletcher88/AFLAP/master/bin/05c_MarkerReduction.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kfletcher88/AFLAP/master/bin/03_ObtainMarkers.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kfletcher88/AFLAP/master/bin/01_JELLYFISH.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kfletcher88/AFLAP/master/bin/02_ExtractSingleCopyMers.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kfletcher88/AFLAP/master/bin/LepMap3Installer.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kfletcher88/AFLAP/master/bin/07_LepMap3.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kfletcher88/AFLAP/master/bin/05b_KmerKinship.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kfletcher88/AFLAP/master/bin/04_Genotyping.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kfletcher88/AFLAP/master/ThirdParty/LepMap3/LM3dload.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "identifier": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://zenodo.org/badge/latestdoi/264294570"
      },
      "source": "https://raw.githubusercontent.com/kfletcher88/AFLAP/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Install",
        "parent_header": [
          "Assembly Free Linkage Analysis Pipeline"
        ],
        "type": "Text_excerpt",
        "value": "To install AFLAP, please clone this GitHub repo. \n```\ngit clone https://github.com/kfletcher88/AFLAP.git\n```\n"
      },
      "source": "https://raw.githubusercontent.com/kfletcher88/AFLAP/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9999899859475414,
      "result": {
        "original_header": "Additional fields",
        "type": "Text_excerpt",
        "value": "It looks like this:\n```\n#label\tF\tRead\tLowerCoverage/Parent1\tUpperCoverage/Parent2\nCol\t0\tReadsEBI/SRR5882797_1.fastq.gz\t32\t105\nCol\t0\tReadsEBI/SRR5882797_2.fastq.gz\t32\t105\nLer\t0\tReadsEBI/SRR3166543_1.fastq.gz\t40\t177\nLer\t0\tReadsEBI/SRR3166543_2.fastq.gz\t40\t177\nERR1432507\t2\tReadsEBI/ERR1432507_1.fastq.gz\tCol\tLer\nERR1432507\t2\tReadsEBI/ERR1432507_2.fastq.gz\tCol\tLer\nERR1432492\t2\tReadsEBI/ERR1432492_1.fastq.gz\tCol\tLer\nERR1432492\t2\tReadsEBI/ERR1432492_2.fastq.gz\tCol\tLer\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/kfletcher88/AFLAP/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9099753801980535,
      "result": {
        "original_header": "Frequently Asked Questions",
        "type": "Text_excerpt",
        "value": "\nQ: I want to exclude individuals, should I delete intermediate files?\\\nA: No, just provide a Pedigree file without those individuals. The genotype table is directed with the Pedigree file, so will only build a table for progeny indicated with in. \n\nQ: I have added sequence to an individual and thus added lines to the pedigree file, will AFLAP detect this?\\\nA: No, though I might add something in the future. In the meantime, you can supply `-r` to `AFLAP.sh` to remove intermediate files for specific progeny individuals. Rerunning AFLAP will then automatically recalculate those intermediate files. E.G:\n```\nAFLAP.sh -r ProgenyInd1\nAFLAP.sh -P Pedigree.txt -m 31 -t 8\n``` \n \n"
      },
      "source": "https://raw.githubusercontent.com/kfletcher88/AFLAP/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/kfletcher88/AFLAP/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2020 Kyle Fletcher\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/kfletcher88/AFLAP/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "AFLAP"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "kfletcher88"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 58984,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 3500,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 3460,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Awk",
        "size": 210,
        "type": "Programming_language",
        "value": "Awk"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kfletcher88/AFLAP/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "kfletcher88",
          "type": "User"
        },
        "date_created": "2021-05-10T15:46:23Z",
        "date_published": "2021-05-10T15:49:30Z",
        "description": "Fix the example data pedigree file.",
        "html_url": "https://github.com/kfletcher88/AFLAP/releases/tag/v0.04",
        "name": "Example data fix",
        "release_id": 42715225,
        "tag": "v0.04",
        "tarball_url": "https://api.github.com/repos/kfletcher88/AFLAP/tarball/v0.04",
        "type": "Release",
        "url": "https://api.github.com/repos/kfletcher88/AFLAP/releases/42715225",
        "value": "https://api.github.com/repos/kfletcher88/AFLAP/releases/42715225",
        "zipball_url": "https://api.github.com/repos/kfletcher88/AFLAP/zipball/v0.04"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "kfletcher88",
          "type": "User"
        },
        "date_created": "2021-02-19T19:22:02Z",
        "date_published": "2021-02-19T19:25:28Z",
        "description": "Software used to generate maps in https://www.biorxiv.org/content/10.1101/2020.09.14.296525v2\r\n",
        "html_url": "https://github.com/kfletcher88/AFLAP/releases/tag/v0.03",
        "name": "Tested Pre-release",
        "release_id": 38331598,
        "tag": "v0.03",
        "tarball_url": "https://api.github.com/repos/kfletcher88/AFLAP/tarball/v0.03",
        "type": "Release",
        "url": "https://api.github.com/repos/kfletcher88/AFLAP/releases/38331598",
        "value": "https://api.github.com/repos/kfletcher88/AFLAP/releases/38331598",
        "zipball_url": "https://api.github.com/repos/kfletcher88/AFLAP/zipball/v0.03"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "kfletcher88",
          "type": "User"
        },
        "date_created": "2020-10-22T22:50:58Z",
        "date_published": "2020-10-23T20:31:35Z",
        "description": "Included down-sampling capabilities.\r\nAdded segregation distortion filters.\r\nAdded low coverage parameters.\r\nAdded test for file existence and termination if a read file which doesn't exist is provided.\r\nFixed bug which formatted F2 genotype tables incorrectly in v0.01.\r\n\r\nThis version was used to run simulation.",
        "html_url": "https://github.com/kfletcher88/AFLAP/releases/tag/v0.02",
        "name": "Tested Pre-release used for simulation",
        "release_id": 32997673,
        "tag": "v0.02",
        "tarball_url": "https://api.github.com/repos/kfletcher88/AFLAP/tarball/v0.02",
        "type": "Release",
        "url": "https://api.github.com/repos/kfletcher88/AFLAP/releases/32997673",
        "value": "https://api.github.com/repos/kfletcher88/AFLAP/releases/32997673",
        "zipball_url": "https://api.github.com/repos/kfletcher88/AFLAP/zipball/v0.02"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "kfletcher88",
          "type": "User"
        },
        "date_created": "2020-09-14T04:03:00Z",
        "date_published": "2020-09-14T16:14:11Z",
        "description": "Scripts contained have been tested and verified to produce the expected output on Ubuntu 16.04.6 LTS (GNU/Linux 4.15.0-88-generic x86_64), provided prerequisites are installed and detectable.",
        "html_url": "https://github.com/kfletcher88/AFLAP/releases/tag/v0.01",
        "name": "Tested Pre-release",
        "release_id": 31270191,
        "tag": "v0.01",
        "tarball_url": "https://api.github.com/repos/kfletcher88/AFLAP/tarball/v0.01",
        "type": "Release",
        "url": "https://api.github.com/repos/kfletcher88/AFLAP/releases/31270191",
        "value": "https://api.github.com/repos/kfletcher88/AFLAP/releases/31270191",
        "zipball_url": "https://api.github.com/repos/kfletcher88/AFLAP/zipball/v0.01"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Prerequisites",
        "parent_header": [
          "Assembly Free Linkage Analysis Pipeline"
        ],
        "type": "Text_excerpt",
        "value": "The following third party software is required to run AFLAP:\\\nJellyfish\\\nABySS\\\nLepMap3\\\nR\\\nggplot2\\\nggrepel\\\nAll must be present in the PATH, otherwise AFLAP will not initiate successfully.\\\nThe bin directory of LepMap3 should be found in `./ThirdParty/LepMap3`. This can be achieved by running `./bin/LepMap3Installer.sh` or by placing a symbolic link to an already installed copy. Additional scripts have been provided to run LepMap3 from a different location, see option `-d` of `./bin/LepMap3SeperateChromosomes.pl` and `./bin/LepMap3OrderMarkers.pl`\n\nR packages can be check by running:\n```\nRscript bin/PackageCheck.R\n```\non your system.\n\n"
      },
      "source": "https://raw.githubusercontent.com/kfletcher88/AFLAP/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 16:54:03",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 6
      },
      "technique": "GitHub_API"
    }
  ]
}