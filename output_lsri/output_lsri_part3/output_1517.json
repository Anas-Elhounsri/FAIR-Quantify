{
  "application_domain": [
    {
      "confidence": 18.29,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Biocomputing-Research-Group/DeepFilter"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-01-17T18:47:52Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-06-02T06:17:21Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9842622211889823,
      "result": {
        "original_header": "DeepFilter",
        "type": "Text_excerpt",
        "value": "DeepFilter is a metaproteomics-filtering tool based on deep learning model. It is aimed at improving the  improving peptide identifications of microbial communities from a collection of tandem mass spectra. The details are available in https://arxiv.org/pdf/2009.11241.pdf\n \n"
      },
      "source": "https://raw.githubusercontent.com/Biocomputing-Research-Group/DeepFilter/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Biocomputing-Research-Group/DeepFilter/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Biocomputing-Research-Group/DeepFilter/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Biocomputing-Research-Group/DeepFilter"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DeepFilter"
      },
      "source": "https://raw.githubusercontent.com/Biocomputing-Research-Group/DeepFilter/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Biocomputing-Research-Group/DeepFilter/master/inference.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Pre-processing",
        "parent_header": [
          "DeepFilter",
          "Detail user manual"
        ],
        "type": "Text_excerpt",
        "value": "* train_process.py: this script is used for the charge detection of observed mass spectrumm. the first argument is the ms2 file of observed mass spectrum and the second argument is the results after charge detection. The usage:\n```\npython train_process.py OSU_D2_FASP_Elite_02262014_01.ms2 expEncode.txt\n\n```\n* theory_process.py and Sipros_OpenMP: the python script and the binary file are combined togethoer to generate the isotope distribution of the PSM candidates. The usage:\n```\npython theory_process.py OSU_D2_FASP_Elite_022252014_1.pin idx.txt charge.txt peptide.fasta feature.txt\n./Sipros_OpenMP -i1 idx.txt -i2 charge.txt -i3 peptide.fasta -i4 theoryEncode.txt\n\n```\n* Label_process.py: this script is to annotated the PSM candidates for training model. The first and second arguments are target and decoy PSMs files which are generated by executing Percolator program, the third argument is the prefix for annotation file, the last argument is the number of files the user want to annotate. The usage:\n```\npython Label_process.py percolator_results_target.csv percolator_results_decoy.csv Label 1\n\n```\n"
      },
      "source": "https://raw.githubusercontent.com/Biocomputing-Research-Group/DeepFilter/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Training mode",
        "parent_header": [
          "DeepFilter",
          "Detail user manual"
        ],
        "type": "Text_excerpt",
        "value": "* train.py: this script is used to train the DeepFilter model. The first and second arguments are the prefix of the files which contain the processed observed spectrum and the istope distribution. The third and forth arguments are the prefix for the 11 extra feature files and the annotation files. The final argument is the number of file which is used for training. The usage:\n```\npython train.py expEncode.txt theoryEncode.txt feature.txt Label 1\n\n```\n"
      },
      "source": "https://raw.githubusercontent.com/Biocomputing-Research-Group/DeepFilter/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Biocomputing-Research-Group/DeepFilter/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DeepFilter"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "Biocomputing-Research-Group"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 166798,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 1459,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Biocomputing-Research-Group/DeepFilter/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_papers": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/pdf/2009.11241.pdf\n\n## Setup and installation\n### Dependency\n* python == 3.6\n* numpy == 1.17.2\n* scikit-learn >= 0.21.3\n* pytorch(gpu version"
      },
      "source": "https://raw.githubusercontent.com/Biocomputing-Research-Group/DeepFilter/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependency",
        "parent_header": [
          "DeepFilter",
          "Setup and installation"
        ],
        "type": "Text_excerpt",
        "value": "* python == 3.6\n* numpy == 1.17.2\n* scikit-learn >= 0.21.3\n* pytorch(gpu version) >= 1.4.0\n* CUDA Version 10.2"
      },
      "source": "https://raw.githubusercontent.com/Biocomputing-Research-Group/DeepFilter/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirement",
        "parent_header": [
          "DeepFilter",
          "Setup and installation"
        ],
        "type": "Text_excerpt",
        "value": "* Linux operation system\n* GPU memory should be more than 8 Gb for inference mode otherwise the batchsize should be adjusted\n* GPU memory should be more than 20 Gb for training mode\n"
      },
      "source": "https://raw.githubusercontent.com/Biocomputing-Research-Group/DeepFilter/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 05:16:48",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Post-processing",
        "parent_header": [
          "DeepFilter",
          "Toy example of DeepFilter"
        ],
        "type": "Text_excerpt",
        "value": "The toy example given is to help getting a quick start. The files of toy example include:\n* OSU_D2_FASP_Elite_02262014_01.ms2 -> experimental tandem mass spectrum data\n* OSU_D2_FASP_Elite_02262014_1.pin -> database searching results by Comet\n* temp_model/ directory -> include three models, the file \"benchmark.pt\" is the pre-trained model for inference\n* The fasta file for filtering is attached in the link https://myunt-my.sharepoint.com/:u:/r/personal/xuan_guo_unt_edu/Documents/Shichao/Metaproteomics%20Deep%20Learning/testdata.fasta.zip?csf=1&web=1&e=c8as9q\nThe file inference.sh is to rescore the PSM from exsisting database searching results, the use is:\n```\n#!/bin/bash\n./inference.sh -in OSU_D2_FASP_Elite_02262014_01.ms2 -s OSU_D2_FASP_Elite_02262014_1.pin -m temp_model/benchmark.pt -o test.rescore.txt\n\n```\nThe list of processing files include:\n*  test.rescore.txt -> The rescore results for PSMs\n*  testidx.txt, testcharge.txt, testpeptide.fasta are processing files to generate isotope distribution\n*  test.expEncode.txt -> results of grouping observed spectrum by charge\n*  test.theoryEncode.txt -> results of grouping the isotope distribution of peptide sequence by charge and ion type\n*  test.feature.txt -> results of 11 extra features extracted from the initial PSM score, the observed spectrum, and the peptide sequence\n"
      },
      "source": "https://raw.githubusercontent.com/Biocomputing-Research-Group/DeepFilter/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "PSM leve and peptide level",
        "parent_header": [
          "DeepFilter",
          "Toy example of DeepFilter"
        ],
        "type": "Text_excerpt",
        "value": "Execute the filtering.py file as:\n```\npython filtering.py test.rescore.txt OSU_D2_FASP_Elite_022252014_1.pin test.psm.txt test.pep.txt\n\n```\nThe first arguement is the rescore results file generated by deep learning model inference mode, the second argument is the results from database searching engine (Comet), the third and forth arguments are output files which are defined by users. The output files contain the protein identification results at PSM and peptide level winthin FDR equals to 1% respectively \n"
      },
      "source": "https://raw.githubusercontent.com/Biocomputing-Research-Group/DeepFilter/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Protein level",
        "parent_header": [
          "DeepFilter",
          "Toy example of DeepFilter"
        ],
        "type": "Text_excerpt",
        "value": "Execute the sipros_peptides_assembling.py file as:\n```\npython sipros_peptides_assembling.py\n\n```\nThe output file \"test.pro.txt\" contains the protein identification results at protein level within FDR equals to 1%.\n\n"
      },
      "source": "https://raw.githubusercontent.com/Biocomputing-Research-Group/DeepFilter/master/README.md",
      "technique": "header_analysis"
    }
  ]
}