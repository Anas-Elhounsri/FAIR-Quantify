{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/heartsh/consalifold"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-12-21T15:14:43Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-01T21:13:53Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Consensus Secondary Structure Predictor Engaging Structural Alignment-based Error Correction"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9855112702572448,
      "result": {
        "original_header": "Method Digest",
        "type": "Text_excerpt",
        "value": "[RNAalifold](https://www.tbi.univie.ac.at/RNA/) folds each RNA sequence alignment, minimizing the average free energy of a predicted consensus secondary structure.\nBased on posterior column base-pairing probabilities on RNA consensus secondary structures, [PETfold](https://rth.dk/resources/petfold/) and [CentroidAlifold](https://github.com/satoken/centroid-rna-package) fold each RNA sequence alignment.\nPETfold and CentroidAlifold correct potential errors in each input sequence alignment utilizing posterior nucleotide base-pairing probabilities on RNA secondary structures.\nTo achieve better alignment error correction than PETfold and CentroidAlifold, I developed ConsAlifold implemented in this repository.\nConsAlifold folds each RNA sequence alignment correcting its potential errors with average probabilistic consistency.\n \n"
      },
      "source": "https://raw.githubusercontent.com/heartsh/consalifold/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/heartsh/consalifold/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/heartsh/consalifold/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "heartsh/consalifold"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Consensus Secondary Structure Predictor Engaging Structural Alignment-based Error Correction"
      },
      "source": "https://raw.githubusercontent.com/heartsh/consalifold/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/heartsh/consalifold/master/scripts/run_all.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "This project is written mainly in Rust, a systems programming language.\nYou need to install Rust components, i.e., rustc (the Rust compiler), cargo (the Rust package manager), and the Rust standard library.\nVisit [the Rust website](https://www.rust-lang.org) to see more about Rust.\nYou can install Rust components with the following one line:\n```bash\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n```\nThe above installation is done by [Rustup](https://github.com/rust-lang-nursery/rustup.rs), and Rustup enables to easily switch a compiler in use.\nAs ConsAlifold's dependencies, you need to install [ViennaRNA](https://www.tbi.univie.ac.at/RNA/) and [LocARNA-P](https://github.com/s-will/LocARNA) (if you wish to use instead of [ConsProb](https://github.com/heartsh/consprob)).\nYou can install ConsAlifold as follows: \n```bash\n# AVX, SSE, and MMX enabled for rustc\n# Another example: RUSTFLAGS='--emit asm -C target-feature=+avx2 -C target-feature=+ssse3 -C target-feature=+mmx -C target-feature=+fma'\nRUSTFLAGS='--emit asm -C target-feature=+avx -C target-feature=+ssse3 -C target-feature=+mmx' \\\n  cargo install consalifold\n```\nCheck if you have installed ConsAlifold properly as follows:\n```bash\n# Its available command options will be displayed.\nconsalifold\n```\nYou can run ConsAlifold with a prepared test RNA alignment:\n```bash\ngit clone https://github.com/heartsh/consalifold \\\n  && cd consalifold\ncargo test --release\n# The below command requires Gnuplot (http://www.gnuplot.info)\n# Benchmark results will be found at \"./target/criterion/report/index.html\"\ncargo bench\n```\nBy the following Python script, you can reproduce the figures shown in [the paper describing ConsAlifold's principle](https://doi.org/10.1093/bioinformatics/btab738):\n```bash\ncd scripts\n# Please install python packages required to this reproduction.\n# Saved figures will appear at the \"../assets/images\" directory.\n./run_all.sh\n```\n"
      },
      "source": "https://raw.githubusercontent.com/heartsh/consalifold/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/heartsh/consalifold/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "type": "Text_excerpt",
        "value": "Copyright (c) 2018 Heartsh  \nLicensed under [the MIT license](http://opensource.org/licenses/MIT).\n"
      },
      "source": "https://raw.githubusercontent.com/heartsh/consalifold/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/heartsh/consalifold/master/./assets/images_fixed/docker_logo.png"
      },
      "source": "https://raw.githubusercontent.com/heartsh/consalifold/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "consalifold"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "heartsh"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 156992,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Rust",
        "size": 25727,
        "type": "Programming_language",
        "value": "Rust"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 354,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/heartsh/consalifold/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 01:55:51",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ]
}