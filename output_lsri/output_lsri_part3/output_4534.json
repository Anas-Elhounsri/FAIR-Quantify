{
  "application_domain": [
    {
      "confidence": 0.8443998059432147,
      "result": {
        "type": "String",
        "value": "Graphs"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/superlouis/GATGNN"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-06-21T03:27:36Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-06T14:46:57Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Pytorch Repository for our work: Graph convolutional neural networks with global attention for improved materials property prediction"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Performance summary",
        "type": "Text_excerpt",
        "value": "Property | MAE Performance of our model| Units\n------------ | ------------- | -------------\nFormation Energy | 0.039 | eV/atom\nAbsolute Energy | 0.048 | eV/atom\nFermi Energy | 0.33 | eV/atom\nBand Gap | 0.31 | eV\nBulk-Moduli | 0.045 | log(GPa)\nShear-Moduli | 0.075 | log(GPa)\nPoisson-ratio | 0.029 | -\n   \n<a name=\"introduction\"></a>"
      },
      "source": "https://raw.githubusercontent.com/superlouis/GATGNN/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "type": "Text_excerpt",
        "value": "The package provides 3 major functions:\n\n- Train a GATGNN model for either of the 7 properties referenced above.\n- Evaluate the performance of a trained GATGNN model on either of the 7 properties referenced above.\n- Predict the property of a given material using its cif file. \n\nThe following paper describes the details of the our framework:\n[GLOBAL ATTENTION BASED GRAPH CONVOLUTIONAL NEURAL NETWORKS FOR IMPROVED MATERIALS PROPERTY PREDICTION](https://arxiv.org/pdf/2003.13379.pdf)\n\n\n\n![](front-pic.png)\n<a name=\"installation\"></a>"
      },
      "source": "https://raw.githubusercontent.com/superlouis/GATGNN/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Dataset",
        "parent_header": [
          "Introduction"
        ],
        "type": "Text_excerpt",
        "value": "1. Download the compressed file of our dataset using [this link](https://widgets.figshare.com/articles/12522524/embed?show_title=1)\n2. Unzip its content ( a directory named 'DATA')\n3. Move the DATA directory in your GATGNN directory. i.e. such that the path GATGNN/DATA now exists.\n\n<a name=\"usage\"></a>"
      },
      "source": "https://raw.githubusercontent.com/superlouis/GATGNN/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Training a new model",
        "parent_header": [
          "Introduction",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Once all the aforementionned requirements are satisfied, one can easily train a new GATGNN by running __train.py__ in the terminal along with the specification of the appropriate flags. At the bare minimum, using --property to specify the property and --data_src to identify the dataset (CGCNN or MEGNET) should be enough to train a robust GATGNN model.\n- Example-1. Train a model on the bulk-modulus property using the CGCNN dataset.\n```bash\npython train.py --property bulk-modulus --data_src CGCNN\n```\n- Example-2. Train a model on the shear-modulus property using the MEGNET dataset.\n```bash\npython train.py --property shear-modulus --data_src MEGNET\n```\n- Example-3. Train a model with 5 layers on the bulk-modulus property using the CGCNN dataset and the global attention technique of fixed cluster unpooling (GI M-2).\n```bash\npython train.py --property bulk-modulus --data_src CGCNN --num_layers 5 --global_attention cluster --cluster_option fixed\n``` \nThe trained model will be automatically saved under the TRAINED directory. *Pay attention to the flags used for they will be needed again to evaluate the model.\n"
      },
      "source": "https://raw.githubusercontent.com/superlouis/GATGNN/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Evaluating the performance of a trained model",
        "parent_header": [
          "Introduction",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Upon training a GATGNN, one can evaluate its performance using __evaluate.py__ in the terminal exactly the same way as __train.py__. *It is IMPORTANT that one runs __evaluate.py__ with the exact same flags as it was done when prior training the model.*\n- Example-1. Evaluate the performance of a model trained on the bulk-modulus property using the CGCNN dataset.\n```bash\npython evaluate.py --property bulk-modulus --data_src CGCNN\n```\n- Example-2. Evaluate the performance of a model trained on the shear-modulus property using the MEGNET dataset.\n```bash\npython evaluate.py --property shear-modulus --data_src MEGNET\n```\n- Example-3.  Evaluate the performance of a model trained with 5 layers on the bulk-modulus property using the CGCNN dataset and the global attention technique of fixed cluster unpooling (GI M-2).\n```bash\npython evaluate.py --property bulk-modulus --data_src CGCNN --num_layers 5 --global_attention cluster --cluster_option fixed\n```"
      },
      "source": "https://raw.githubusercontent.com/superlouis/GATGNN/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Predicting the property of a single inorganic material using its .cif file",
        "parent_header": [
          "Introduction",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Again, using a trained model one can also predict the property of a single inorganic material using its .cif file. Just follow those 2 steps:\n1. Place your .cif file inside the directory DATA/prediction-directory/\n1. Run __predict.py__ in a similar fashion as __evaluate.py__ except for the addition of the flag --to_predict which specifies the name of the .cif file.\n- Example-1. Predict the bulk-modulus property of a material named mp-1 using the CGCNN graph constructing specifications.\n```bash\npython predict.py --property bulk-modulus --data_src CGCNN --to_predict mp-1\n```\n- Example-2. Predict the shear-modulus property of a material named mp-1 using the MEGNET graph constructing specifications.\n```bash\npython predict.py --property shear-modulus --data_src MEGNET --to_predict mp-1\n```\n\n<a name=\"usage2\"></a>"
      },
      "source": "https://raw.githubusercontent.com/superlouis/GATGNN/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9928272317142409,
      "result": {
        "original_header": "GATGNN: Global Attention Graph Neural Network",
        "type": "Text_excerpt",
        "value": "This software package implements our developed model GATGNN for improved inorganic materials' property prediction. This is the official Pytorch repository. \n \n"
      },
      "source": "https://raw.githubusercontent.com/superlouis/GATGNN/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8817682119680623,
      "result": {
        "original_header": "This model is outdated. If you want to compare with our latest model, check our DeeperGATGNN <a href=\"https://github.com/usccolumbia/deeperGATGNN\">here</a> which has achieved significantly better performance.",
        "type": "Text_excerpt",
        "value": "[Machine Learning and Evolution Laboratory](http://mleg.cse.sc.edu)<br />\nDepartment of Computer Science and Engineering <br />\nUniversity of South Carolina <br /> \nHow to cite:<br />\nLouis, Steph-Yves, Yong Zhao, Alireza Nasiri, Xiran Wang, Yuqi Song, Fei Liu, and Jianjun Hu*. \"Graph convolutional neural networks with global attention for improved materials property prediction.\" Physical Chemistry Chemical Physics 22, no. 32 (2020): 18141-18148.\n \n"
      },
      "source": "https://raw.githubusercontent.com/superlouis/GATGNN/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/superlouis/GATGNN/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 18
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/superlouis/GATGNN/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "superlouis/GATGNN"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "GATGNN: Global Attention Graph Neural Network"
      },
      "source": "https://raw.githubusercontent.com/superlouis/GATGNN/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/superlouis/GATGNN/master/front-pic.png"
      },
      "source": "https://raw.githubusercontent.com/superlouis/GATGNN/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "Introduction"
        ],
        "type": "Text_excerpt",
        "value": "Install any of the relevant packages if not already installed:\n* Pytorch (tested on 1.2.0) - preferably version 1.2.0 or later\n* Numpy   (tested on 1.17.3)\n* Pandas  (tested on 0.21.3) \n* Scikit-learn (tested on 0.21.3) \n* Pytmatgen (tested on 2019.10.16)\n* PyTorch-Geometric (tested on 1.1.2)\n\n- Pytorch, Numpy, Pandas, Scikit-learn, and Pymatgen\n```bash\npip install torch torchvision \npip install numpy\npip install pandas\npip install scikit-learn\npip install pymatgen\n```\n- PyTorch Geometric (1.6.1) [documentation](https://pytorch-geometric.readthedocs.io/en/latest/notes/installation.html). *our codes are compatible with version up to 1.6.\\**\n\n<a name=\"dataset\"></a>"
      },
      "source": "https://raw.githubusercontent.com/superlouis/GATGNN/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/superlouis/GATGNN/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2020 Steph-Yves Louis\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/superlouis/GATGNN/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "GATGNN"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "superlouis"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 57690,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/superlouis/GATGNN/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://pytorch-geometric.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/superlouis/GATGNN/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "related_papers": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/pdf/2003.13379.pdf"
      },
      "source": "https://raw.githubusercontent.com/superlouis/GATGNN/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "superlouis",
          "type": "User"
        },
        "date_created": "2021-04-05T05:46:40Z",
        "date_published": "2021-04-05T06:49:29Z",
        "html_url": "https://github.com/superlouis/GATGNN/releases/tag/v0.2",
        "name": "GATGNN repository",
        "release_id": 39563160,
        "tag": "v0.2",
        "tarball_url": "https://api.github.com/repos/superlouis/GATGNN/tarball/v0.2",
        "type": "Release",
        "url": "https://api.github.com/repos/superlouis/GATGNN/releases/39563160",
        "value": "https://api.github.com/repos/superlouis/GATGNN/releases/39563160",
        "zipball_url": "https://api.github.com/repos/superlouis/GATGNN/zipball/v0.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "superlouis",
          "type": "User"
        },
        "date_created": "2020-06-22T05:09:27Z",
        "date_published": "2020-06-22T05:12:03Z",
        "html_url": "https://github.com/superlouis/GATGNN/releases/tag/v0.1",
        "name": "GATGNN repository",
        "release_id": 27771389,
        "tag": "v0.1",
        "tarball_url": "https://api.github.com/repos/superlouis/GATGNN/tarball/v0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/superlouis/GATGNN/releases/27771389",
        "value": "https://api.github.com/repos/superlouis/GATGNN/releases/27771389",
        "zipball_url": "https://api.github.com/repos/superlouis/GATGNN/zipball/v0.1"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 16:46:52",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 70
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Training a new model",
        "parent_header": [
          "Introduction",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Once all the aforementionned requirements are satisfied, one can easily train a new GATGNN by running __train.py__ in the terminal along with the specification of the appropriate flags. At the bare minimum, using --property to specify the property and --data_src to identify the dataset (CGCNN or MEGNET) should be enough to train a robust GATGNN model.\n- Example-1. Train a model on the bulk-modulus property using the CGCNN dataset.\n```bash\npython train.py --property bulk-modulus --data_src CGCNN\n```\n- Example-2. Train a model on the shear-modulus property using the MEGNET dataset.\n```bash\npython train.py --property shear-modulus --data_src MEGNET\n```\n- Example-3. Train a model with 5 layers on the bulk-modulus property using the CGCNN dataset and the global attention technique of fixed cluster unpooling (GI M-2).\n```bash\npython train.py --property bulk-modulus --data_src CGCNN --num_layers 5 --global_attention cluster --cluster_option fixed\n``` \nThe trained model will be automatically saved under the TRAINED directory. *Pay attention to the flags used for they will be needed again to evaluate the model.\n"
      },
      "source": "https://raw.githubusercontent.com/superlouis/GATGNN/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Evaluating the performance of a trained model",
        "parent_header": [
          "Introduction",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Upon training a GATGNN, one can evaluate its performance using __evaluate.py__ in the terminal exactly the same way as __train.py__. *It is IMPORTANT that one runs __evaluate.py__ with the exact same flags as it was done when prior training the model.*\n- Example-1. Evaluate the performance of a model trained on the bulk-modulus property using the CGCNN dataset.\n```bash\npython evaluate.py --property bulk-modulus --data_src CGCNN\n```\n- Example-2. Evaluate the performance of a model trained on the shear-modulus property using the MEGNET dataset.\n```bash\npython evaluate.py --property shear-modulus --data_src MEGNET\n```\n- Example-3.  Evaluate the performance of a model trained with 5 layers on the bulk-modulus property using the CGCNN dataset and the global attention technique of fixed cluster unpooling (GI M-2).\n```bash\npython evaluate.py --property bulk-modulus --data_src CGCNN --num_layers 5 --global_attention cluster --cluster_option fixed\n```"
      },
      "source": "https://raw.githubusercontent.com/superlouis/GATGNN/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Predicting the property of a single inorganic material using its .cif file",
        "parent_header": [
          "Introduction",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Again, using a trained model one can also predict the property of a single inorganic material using its .cif file. Just follow those 2 steps:\n1. Place your .cif file inside the directory DATA/prediction-directory/\n1. Run __predict.py__ in a similar fashion as __evaluate.py__ except for the addition of the flag --to_predict which specifies the name of the .cif file.\n- Example-1. Predict the bulk-modulus property of a material named mp-1 using the CGCNN graph constructing specifications.\n```bash\npython predict.py --property bulk-modulus --data_src CGCNN --to_predict mp-1\n```\n- Example-2. Predict the shear-modulus property of a material named mp-1 using the MEGNET graph constructing specifications.\n```bash\npython predict.py --property shear-modulus --data_src MEGNET --to_predict mp-1\n```\n\n<a name=\"usage2\"></a>"
      },
      "source": "https://raw.githubusercontent.com/superlouis/GATGNN/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage for custom property &amp; custom Dataset",
        "parent_header": [
          "Introduction"
        ],
        "type": "Text_excerpt",
        "value": "Once you've followed the steps to download and unzip the dataset, follow the 3 following steps:\n1. Place all of your .cif files in the directory DATA/CIF-DATA_NEW\n1. First format your .csv property dataset so it only has 2 columns (ID, value). Your file should look like anyone of our .csv files located in the the directory DATA/properties-reference/\n1. Once your .csv property dataset is correctly formatted, rename your file as newproperty.csv and place it in the DATA/properties_reference/ directory. \n\nWith the 3 steps above complete, you are now ready to use our GATGNN on your own dataset. To either [train](#usage), [evaluate](#usage), or even [predict](#usage) your own property, refer to the instructions listed in the [Usage](#usage) section. Just use new-property, NEW, and any ratio (like 0.75) as values for the --property flag, --data_src flag, and --train_size flag. 3 examples are provided below\n- Example-1. To train a new GATGNN on your property\n```bash\npython train.py --property new-property --data_src NEW --train_size 0.8\n```\n- Example-2. Evaluate the performance of a model trained on your property.\n```bash\npython evaluate.py --property new-property --data_src NEW --train_size 0.8\n```\n- Example-3. Predict the value of your property for a material named mp-1.\n```bash\npython predict.py --property new-property --data_src NEW --to_predict mp-1\n```\n"
      },
      "source": "https://raw.githubusercontent.com/superlouis/GATGNN/master/README.md",
      "technique": "header_analysis"
    }
  ]
}