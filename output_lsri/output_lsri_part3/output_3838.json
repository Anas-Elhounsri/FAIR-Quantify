{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Shamir-Lab/SCAPP"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-01-12T15:26:21Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-01-23T21:45:34Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SCAPP is a plasmid assembly tool. This tool is described in our paper: https://microbiomejournal.biomedcentral.com/articles/10.1186/s40168-021-01068-z"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9235960321059257,
      "result": {
        "original_header": "Main output files",
        "type": "Text_excerpt",
        "value": "`<prefix>.confident_cycs.fasta` is the main output fasta of the plasmid predictions. `<prefix>` is the name of the assembly graph file (minus the `.fastg` suffix). \nUnder the `intermediate_files` subdirectory `<prefix>_cycs.fasta` is a fasta file of **all** cyclic paths that were considered as potential plasmids before filtering to create the subset that is output. \n"
      },
      "source": "https://raw.githubusercontent.com/Shamir-Lab/SCAPP/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Shamir-Lab/SCAPP/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 6
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Shamir-Lab/SCAPP/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Shamir-Lab/SCAPP"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SCAPP"
      },
      "source": "https://raw.githubusercontent.com/Shamir-Lab/SCAPP/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Shamir-Lab/SCAPP/master/run_test.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "SCAPP"
        ],
        "type": "Text_excerpt",
        "value": "SCAPP has been developed and tested on Linux, the installation instructions below have not yet been tested on other operating systems.\n"
      },
      "source": "https://raw.githubusercontent.com/Shamir-Lab/SCAPP/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "From Bioconda",
        "parent_header": [
          "SCAPP",
          "Installation",
          "With Conda"
        ],
        "type": "Text_excerpt",
        "value": "**This is the preferred installation method**\n\nYou can install directly from Bioconda with `conda install -c bioconda scapp`\n"
      },
      "source": "https://raw.githubusercontent.com/Shamir-Lab/SCAPP/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "With install scapp yaml file",
        "parent_header": [
          "SCAPP",
          "Installation",
          "With Conda"
        ],
        "type": "Text_excerpt",
        "value": "Alternatively, you can install SCAPP as a conda package (tested with Miniconda3):\nDownload the installation file `install_scapp.yaml` in the desired folder. For example:\n````\nwget https://raw.githubusercontent.com/Shamir-Lab/SCAPP/master/install_scapp.yaml\n````\n\nCreate and activate the conda environment:\n```\nconda env create -f install_scapp.yaml\nconda activate scapp\n```\n\nNow you can run SCAPP by entering the command `scapp`.\n\n"
      },
      "source": "https://raw.githubusercontent.com/Shamir-Lab/SCAPP/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "From sources",
        "parent_header": [
          "SCAPP",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "If not using Conda to install, then download the sources and install according to the following:\n\nSCAPP is written in Python3. SCAPP uses NumPy, NetworkX, pySAM, and nose. The necessary versions of these required dependencies will all be installed by the `setup.py` script.\n\nSCAPP uses [BWA](https://github.com/lh3/bwa) (tested with v0.7.5 and v0.7.17) , [NCBI BLAST+ tools](https://blast.ncbi.nlm.nih.gov/Blast.cgi?CMD=Web&PAGE_TYPE=BlastDocs&DOC_TYPE=Download) (tested with v2.7, v2.9 and v2.10), and [samtools](https://github.com/samtools/samtools) (tested with v1.9 and v1.10). The executables of these programs should be available on the system on which SCAPP is run.\n\nThe [PlasClass classifier](https://github.com/Shamir-Lab/PlasClass) should also be installed in order to use the full functionality of SCAPP.\n\nWe recommend using a virtual environment. For example, in Linux, before running `setup.py`:\n```\npython -m venv scapp-env\nsource scapp-env/bin/activate\n```\nTo install, download and run setup.py:\n```\n    git clone https://github.com/Shamir-Lab/SCAPP.git\n    cd SCAPP\n    python setup.py install\n```\nIt is possible to install as a user without root permissions:\n```\npython setup.py install --user\n```\n\nTo install PlasClass, in the folder you would like to install do:\n```\ngit clone https://github.com/Shamir-Lab/PlasClass.git\ncd PlasClass\npython setup.py install\n```\n"
      },
      "source": "https://raw.githubusercontent.com/Shamir-Lab/SCAPP/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Configuring paths to required executables",
        "parent_header": [
          "SCAPP",
          "Installation",
          "From sources"
        ],
        "type": "Text_excerpt",
        "value": "Note that this step can be skipped if you installed using Conda.\n\nThe BWA, samtools, and BLAST+ executables must be available to SCAPP. They can either be added to your `PATH` environment variable, or you can specify the paths to each of them in the file `scapp/config.json`.\n\nFor example, if the BWA executable is in `/usr/bin/bwa/` then the line `\"BWA_PATH\" : \"/usr/bin/bwa\",` should be completed in the `config.json` file if that location is not in your `PATH`.\n"
      },
      "source": "https://raw.githubusercontent.com/Shamir-Lab/SCAPP/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Testing your SCAPP installation",
        "parent_header": [
          "SCAPP",
          "Installation",
          "From sources"
        ],
        "type": "Text_excerpt",
        "value": "Once you have completed the above you can run `./run_test.sh` from the outermost SCAPP directory to test your installation.\n\n(If the test fails please ensure you have set up the environment, installed, and configured SCAPP as described. Open an issue on this GitHub page with any problems you run into.)\n"
      },
      "source": "https://raw.githubusercontent.com/Shamir-Lab/SCAPP/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Shamir-Lab/SCAPP/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Copyright (c) 2020 David Pellow\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
      },
      "source": "https://raw.githubusercontent.com/Shamir-Lab/SCAPP/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SCAPP"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "Shamir-Lab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 79380,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 227,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Shamir-Lab/SCAPP/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "dpellow",
          "type": "User"
        },
        "date_created": "2020-10-09T09:51:48Z",
        "date_published": "2020-10-09T10:24:08Z",
        "description": "Update for BLAST 2.10.1",
        "html_url": "https://github.com/Shamir-Lab/SCAPP/releases/tag/v0.1.4",
        "name": "Update for new BLAST version",
        "release_id": 32364320,
        "tag": "v0.1.4",
        "tarball_url": "https://api.github.com/repos/Shamir-Lab/SCAPP/tarball/v0.1.4",
        "type": "Release",
        "url": "https://api.github.com/repos/Shamir-Lab/SCAPP/releases/32364320",
        "value": "https://api.github.com/repos/Shamir-Lab/SCAPP/releases/32364320",
        "zipball_url": "https://api.github.com/repos/Shamir-Lab/SCAPP/zipball/v0.1.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "dpellow",
          "type": "User"
        },
        "date_created": "2020-07-14T10:08:23Z",
        "date_published": "2020-07-14T10:13:00Z",
        "description": "Update testing",
        "html_url": "https://github.com/Shamir-Lab/SCAPP/releases/tag/v0.1.3",
        "name": "Testing update",
        "release_id": 28536965,
        "tag": "v0.1.3",
        "tarball_url": "https://api.github.com/repos/Shamir-Lab/SCAPP/tarball/v0.1.3",
        "type": "Release",
        "url": "https://api.github.com/repos/Shamir-Lab/SCAPP/releases/28536965",
        "value": "https://api.github.com/repos/Shamir-Lab/SCAPP/releases/28536965",
        "zipball_url": "https://api.github.com/repos/Shamir-Lab/SCAPP/zipball/v0.1.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "dpellow",
          "type": "User"
        },
        "date_created": "2020-06-30T10:10:05Z",
        "date_published": "2020-07-01T13:44:40Z",
        "html_url": "https://github.com/Shamir-Lab/SCAPP/releases/tag/v0.1.2",
        "name": "Minor bug fixes",
        "release_id": 28115823,
        "tag": "v0.1.2",
        "tarball_url": "https://api.github.com/repos/Shamir-Lab/SCAPP/tarball/v0.1.2",
        "type": "Release",
        "url": "https://api.github.com/repos/Shamir-Lab/SCAPP/releases/28115823",
        "value": "https://api.github.com/repos/Shamir-Lab/SCAPP/releases/28115823",
        "zipball_url": "https://api.github.com/repos/Shamir-Lab/SCAPP/zipball/v0.1.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "dpellow",
          "type": "User"
        },
        "date_created": "2020-01-23T12:16:26Z",
        "date_published": "2020-04-05T09:39:12Z",
        "html_url": "https://github.com/Shamir-Lab/SCAPP/releases/tag/0.1.1",
        "name": "Pre-publication release",
        "release_id": 25208786,
        "tag": "0.1.1",
        "tarball_url": "https://api.github.com/repos/Shamir-Lab/SCAPP/tarball/0.1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/Shamir-Lab/SCAPP/releases/25208786",
        "value": "https://api.github.com/repos/Shamir-Lab/SCAPP/releases/25208786",
        "zipball_url": "https://api.github.com/repos/Shamir-Lab/SCAPP/zipball/0.1.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "dpellow",
          "type": "User"
        },
        "date_created": "2020-01-13T08:40:18Z",
        "date_published": "2020-01-15T06:54:59Z",
        "description": "Initial release of SCAPP, a tool for plasmid assembly in metagenomes.",
        "html_url": "https://github.com/Shamir-Lab/SCAPP/releases/tag/v0.1.0",
        "name": "Initial release",
        "release_id": 22848824,
        "tag": "v0.1.0",
        "tarball_url": "https://api.github.com/repos/Shamir-Lab/SCAPP/tarball/v0.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/Shamir-Lab/SCAPP/releases/22848824",
        "value": "https://api.github.com/repos/Shamir-Lab/SCAPP/releases/22848824",
        "zipball_url": "https://api.github.com/repos/Shamir-Lab/SCAPP/zipball/v0.1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 14:14:36",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 29
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Basic Usage",
        "parent_header": [
          "SCAPP"
        ],
        "type": "Text_excerpt",
        "value": "To run the SCAPP pipeline: \n```\nscapp -g <fastg graph> -o <output directory> [-k <max k value>] -r1 <reads 1> -r2 <reads 2> [-p <num processes>]\n```\nIf a BAM alignment file of the reads to the assembly graph already exists, then use the following command to avoid re-running the alignment:\n```\nscapp -g <fastg graph> -o <output directory> [-k <max k value>] -b <BAM file> [-p <num processes>]\n```\nThe common command line options are:\n\n`-g/--graph`: : Assembly graph fastg file.\n\n`-o/--output_dir`: Output directory.\n\n`-k/max_k`: Maximum k value used by the assembler. Default: 55.\n\n`-p/--num_processes`: Number of processes to use. Default: 16.\n\n`-r1/--reads1`: Paired-end reads file 1.\n\n`-r2/--reads2`: Paired-end reads file 2.\n\n`-b/--bam`: BAM alignment file aligning reads to graph nodes `-b` and `-r1`,`-r2` are mutually exclusive.\n"
      },
      "source": "https://raw.githubusercontent.com/Shamir-Lab/SCAPP/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Advanced usage",
        "parent_header": [
          "SCAPP"
        ],
        "type": "Text_excerpt",
        "value": "More advanced command line options allow for different stages in the SCAPP pipeline to be modified:\n\n`-sc/--use_scores`: Flag to determine whether to use plasmid scores. Use `False` to turn off plasmid score use. Default: `True`.\n\n`-gh/--use_gene_hits`: Flag to determine whether to use plasmid specific genes. Use `False` to turn off plasmid gene use. Default: `True`.\n\n`-pc/--plasclass`: PlasClass score file. If PlasClass classification of the assembly graph nodes has already been performed, provide the name of the PlasClass output file. (For example: the `intermediate_files/plasclass.out` file from a previous run of SCAPP).\n\n`-pf/--plasflow`: PlasFlow score file. To use PlasFlow scores for the nodes instead of PlasClass, provide the name of the PlasFlow output file.`-pf`,`-pc` are mutually exclusive.\n\nIn addition, all of the different thresholds used in the algorithm can be changed by the user:\n\n`-m/--max_CV`: Maximum allowed coefficient of variation for coverage. Default: 0.5.\n\n`-l/--min_length`: Minimum allowed length for potential plasmid. Default: 1000.\n\n`-clft/--classification_thresh`: Threshold for classifying a potential plasmid as a plasmid. Default: 0.5.\n\n`-gm/--gene_match_thresh`: Threshold for % identity and fraction of length covered to determine plasmid gene matches. Default: 0.75.\n\n`-sls/selfloop_score_thresh`: Threshold plasmid score above which a self-loop is considered a potential plasmid. Default: 0.9.\n\n`-slm/--selfloop_mate_thresh`: Threshold fraction of off-loop mate-pairs, below which a self-loop is considered a potential plasmid. Default:0.1.\n\n`-cst/--chromosome_score_thresh`: Threshold score, below which a long node is considered a chromosome node. Default: 0.2.\n\n`-clt/--chromosome_length_thresh`: Threshold length, above which a low scoring node is considered a chromosome node. Default: 10000.\n\n`-pst/--plasmid_score_thresh`: Threshold score, above which a long node is considered a plasmid node. Default: 0.9.\n\n`-plt/--plasmid_length_thresh`: Threshold length, above which a high scoring node is considered a plasmid node. Default: 10000.\n\n`-cd/--good_cyc_dominated_thresh`: Threshold for the maximum fraction of nodes with most mate-pairs off the cycle allowed for the cycleto be considered a potential plasmid. Default: 0.5.\n\nInstead of inputting all of these options on the command-line before each run of SCAPP, the user can change them in the file `bin/params.json`. Set each variable in this file to the desired value and it will be used in SCAPP. Any value passed as a command-line parameter will override the values set in this file.\n"
      },
      "source": "https://raw.githubusercontent.com/Shamir-Lab/SCAPP/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Plasmid-specific genes",
        "parent_header": [
          "SCAPP",
          "Advanced usage"
        ],
        "type": "Text_excerpt",
        "value": "SCAPP searches for plasmid-specific genes in the assembly graph and potential plasmids. Curated sets of plasmid-specific genes (see the SCAPP manuscript for details) are located in the `scapp/data` directory.\n\nThe user can add their own plasmid-specific gene sets in this directory. You may put nucleotide gene sequences in the `data/nt` subdirectory, or amino acid protein sequences in the `data/aa` subdirectory. The sequence files should be in fasta format.\n\nIf you wish to remove certain plasmid-specific sets, simply move them out of the `data` directory.\n"
      },
      "source": "https://raw.githubusercontent.com/Shamir-Lab/SCAPP/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Long reads",
        "parent_header": [
          "SCAPP",
          "Advanced usage"
        ],
        "type": "Text_excerpt",
        "value": "SCAPP is designed to run on short, paired-end read libraries (such as Illumina HiSeq) and we believe it will work best in this setting. We have tried to provide support for some requests of running SCAPP with long reads and will add details of how to do this here as we expand support:\n"
      },
      "source": "https://raw.githubusercontent.com/Shamir-Lab/SCAPP/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Alignment",
        "parent_header": [
          "SCAPP",
          "Advanced usage",
          "Long reads"
        ],
        "type": "Text_excerpt",
        "value": "The read alignment process used in SCAPP is specific to short paired-end reads. You will have to align your reads to the assembly graph to create a bam file. This alignment file is then provided to SCAPP using the -b option.\n"
      },
      "source": "https://raw.githubusercontent.com/Shamir-Lab/SCAPP/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "MetaFlye assemblies",
        "parent_header": [
          "SCAPP",
          "Advanced usage",
          "Long reads"
        ],
        "type": "Text_excerpt",
        "value": "MetaFlye generates a \\*.gfa assembly graph according to a specific definition of the gfa format. [This script](https://raw.githubusercontent.com/dpellow/SCAPP/master/metaflye_gfa2fastg.py) should convert the gfa file to the fastg format required by SCAPP. The script is run as: python metaflye_gfa2fastg.py <infile> <outfile>. This script is only meant for MetaFlye output (as of Feb 2020).\n\nSCAPP should then be run with this converted fastg file, you bam alignment file AND THE OPTION -k 0.\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/Shamir-Lab/SCAPP/master/README.md",
      "technique": "header_analysis"
    }
  ]
}