{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "References",
        "parent_header": [
          "Getting started"
        ],
        "type": "Text_excerpt",
        "value": "[1] Pachitariu, Marius, et al. \"Fast and accurate spike sorting of high-channel count probes with KiloSort.\" Advances in Neural Information Processing Systems. 2016.\n\n[2] Hill, Daniel N., Samar B. Mehta, and David Kleinfeld. \"Quality metrics to accompany spike sorting of extracellular signals.\" Journal of Neuroscience 31.24 (2011): 8699-8705.\n\n[3] Oostenveld, Robert, et al. \"FieldTrip: open source software for advanced analysis of MEG, EEG, and invasive electrophysiological data.\" Computational intelligence and neuroscience 2011 (2011): 1.\n\n[4] Siegle, Joshua Handman, et al. \"Open Ephys: An open-source, plugin-based platform for multichannel electrophysiology.\" Journal of Neural Engineering (2017).\n\n[5] Schmitzer-Torbert, N., et al. \"Quantitative measures of cluster quality for use in extracellular recordings.\" Neuroscience 131.1 (2005): 1-11.\n\n[6] Shan, K. Q., Lubenov, E. V., & Siapas, A. G. (2017). Model-based spike sorting with a mixture of drifting t-distributions. bioRxiv, 109850.\n\n[7] Yger, Pierre, et al. \"Fast and accurate spike sorting in vitro and in vivo for up to thousands of electrodes.\" bioRxiv (2016): 067843.\n"
      },
      "source": "https://raw.githubusercontent.com/DepartmentofNeurophysiology/Paser/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/DepartmentofNeurophysiology/Paser"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-09-03T12:41:49Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-03-09T01:34:06Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PASER: Processing and Analysis Schemes for Extracellular Recordings"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9732993063401864,
      "result": {
        "original_header": "PASER",
        "type": "Text_excerpt",
        "value": "MATLAB toolbox for processing and analyzing extracellular recordings, including local field potential (LFP) and spiking data.   \nPASER contains the following types of processing routines: \n* Spike detection and sorting\n* Cluster quality control\n* Spike analysis \n* LFP detection and analysis\n* Data visualization \n* Artifact removal\n \n"
      },
      "source": "https://raw.githubusercontent.com/DepartmentofNeurophysiology/Paser/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/DepartmentofNeurophysiology/Paser/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/DepartmentofNeurophysiology/Paser/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DepartmentofNeurophysiology/Paser"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PASER"
      },
      "source": "https://raw.githubusercontent.com/DepartmentofNeurophysiology/Paser/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Install third-party dependencies",
        "parent_header": [
          "Getting started"
        ],
        "type": "Text_excerpt",
        "value": "In order to use the toolbox, a few third-party software packages need to be installed on your system.\n"
      },
      "source": "https://raw.githubusercontent.com/DepartmentofNeurophysiology/Paser/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "FieldTrip",
        "parent_header": [
          "Getting started",
          "Install third-party dependencies"
        ],
        "type": "Text_excerpt",
        "value": "We use the FieldTrip toolbox [Ref. 3] for LFP processing and analysis, which can be downloaded or cloned from:\n\nhttps://github.com/fieldtrip/fieldtrip\n\nIn case of problems with FieldTrip, please download the last version that was confirmed to be compatible with PASER: \n\nhttps://github.com/fieldtrip/fieldtrip/tree/af6871348043f8c912b0c9c24552f9bb8db4b412\n\nIf you are not planning on using FieldTrip for anything else, then do not add the FieldTrip toolbox to your MATLAB path. \nThis will be done at a later step. Otherwise, follow the directions here:\n\nhttp://www.fieldtriptoolbox.org/faq/should_i_add_fieldtrip_with_all_subdirectories_to_my_matlab_path\n"
      },
      "source": "https://raw.githubusercontent.com/DepartmentofNeurophysiology/Paser/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "KiloSort",
        "parent_header": [
          "Getting started",
          "Install third-party dependencies"
        ],
        "type": "Text_excerpt",
        "value": "The default spike sorting method in PASER is KiloSort [Ref. 1], which can be downloaded or cloned from: \n\nhttps://github.com/cortex-lab/KiloSort\n\nIn case of problems with KiloSort, please download the last version that was confirmed to be compatible with PASER: \n\nhttps://github.com/cortex-lab/KiloSort/tree/0ea839e33527891a379e29ff9a4512d89f27bf60\n\nIt is highly recommended to use KiloSort with a CUDA enabled GPU. Attempting to run KiloSort on the CPU is errorprone and not guaranteed to result in satisfactory cluster quality. \nTherefore, please follow the installation instructions given in the KiloSort README file and \"Docs\" folder. \n\nOnce again, if you are not using KiloSort for anything else, then do not add the KiloSort directory to the MATLAB path. \nWe will instead load the toolbox the moment it is needed in the data processing pipeline. \n"
      },
      "source": "https://raw.githubusercontent.com/DepartmentofNeurophysiology/Paser/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "OpenEphys",
        "parent_header": [
          "Getting started",
          "Install third-party dependencies"
        ],
        "type": "Text_excerpt",
        "value": "The OpenEphys toolbox is used to load the raw data:\n\nhttps://github.com/open-ephys/analysis-tools\n\nIn case of problems with OpenEphys, please download the last version that was confirmed to be compatible with PASER: \n\nhttps://github.com/open-ephys/analysis-tools/tree/f66b83f09e1896b1b5874daabadde3cff9424e9c\n\nAs with the FieldTrip and KiloSort toolboxes, it is not required to add it to the MATLAB path straight away. \n"
      },
      "source": "https://raw.githubusercontent.com/DepartmentofNeurophysiology/Paser/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "PASER toolbox installation",
        "parent_header": [
          "Getting started"
        ],
        "type": "Text_excerpt",
        "value": "Clone or download PASER and add it to your MATLAB path: \n\n```\naddpath(genpath('C:\\Path\\To\\paser-master'));\n```\n\nNote that PASER also relies on the \"Signal Processing\" and \"Statistics and Machine Learning\" MATLAB toolboxes. In the future, we would like to remove these dependencies by finding alternative functions.\n"
      },
      "source": "https://raw.githubusercontent.com/DepartmentofNeurophysiology/Paser/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9999957689201988,
      "result": {
        "original_header": "PASER",
        "type": "Text_excerpt",
        "value": "Currently, PASER can only be used with data saved by Open Ephys GUI [Ref. 4], specifically `.continuous` files. \nSee https://github.com/open-ephys/plugin-GUI or http://www.open-ephys.org/ for more information. \n"
      },
      "source": "https://raw.githubusercontent.com/DepartmentofNeurophysiology/Paser/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/DepartmentofNeurophysiology/Paser/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "BSD 3-Clause \"New\" or \"Revised\" License",
        "spdx_id": "BSD-3-Clause",
        "type": "License",
        "url": "https://api.github.com/licenses/bsd-3-clause",
        "value": "https://api.github.com/licenses/bsd-3-clause"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "BSD 3-Clause License\n\nCopyright (c) 2017, Terence Brouns\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of the copyright holder nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
      },
      "source": "https://raw.githubusercontent.com/DepartmentofNeurophysiology/Paser/master/LICENSE.md",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Paser"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "DepartmentofNeurophysiology"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "MATLAB",
        "size": 284921,
        "type": "Programming_language",
        "value": "MATLAB"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "M",
        "size": 930,
        "type": "Programming_language",
        "value": "M"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/DepartmentofNeurophysiology/Paser/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Install third-party dependencies",
        "parent_header": [
          "Getting started"
        ],
        "type": "Text_excerpt",
        "value": "In order to use the toolbox, a few third-party software packages need to be installed on your system.\n"
      },
      "source": "https://raw.githubusercontent.com/DepartmentofNeurophysiology/Paser/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "FieldTrip",
        "parent_header": [
          "Getting started",
          "Install third-party dependencies"
        ],
        "type": "Text_excerpt",
        "value": "We use the FieldTrip toolbox [Ref. 3] for LFP processing and analysis, which can be downloaded or cloned from:\n\nhttps://github.com/fieldtrip/fieldtrip\n\nIn case of problems with FieldTrip, please download the last version that was confirmed to be compatible with PASER: \n\nhttps://github.com/fieldtrip/fieldtrip/tree/af6871348043f8c912b0c9c24552f9bb8db4b412\n\nIf you are not planning on using FieldTrip for anything else, then do not add the FieldTrip toolbox to your MATLAB path. \nThis will be done at a later step. Otherwise, follow the directions here:\n\nhttp://www.fieldtriptoolbox.org/faq/should_i_add_fieldtrip_with_all_subdirectories_to_my_matlab_path\n"
      },
      "source": "https://raw.githubusercontent.com/DepartmentofNeurophysiology/Paser/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "KiloSort",
        "parent_header": [
          "Getting started",
          "Install third-party dependencies"
        ],
        "type": "Text_excerpt",
        "value": "The default spike sorting method in PASER is KiloSort [Ref. 1], which can be downloaded or cloned from: \n\nhttps://github.com/cortex-lab/KiloSort\n\nIn case of problems with KiloSort, please download the last version that was confirmed to be compatible with PASER: \n\nhttps://github.com/cortex-lab/KiloSort/tree/0ea839e33527891a379e29ff9a4512d89f27bf60\n\nIt is highly recommended to use KiloSort with a CUDA enabled GPU. Attempting to run KiloSort on the CPU is errorprone and not guaranteed to result in satisfactory cluster quality. \nTherefore, please follow the installation instructions given in the KiloSort README file and \"Docs\" folder. \n\nOnce again, if you are not using KiloSort for anything else, then do not add the KiloSort directory to the MATLAB path. \nWe will instead load the toolbox the moment it is needed in the data processing pipeline. \n"
      },
      "source": "https://raw.githubusercontent.com/DepartmentofNeurophysiology/Paser/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "OpenEphys",
        "parent_header": [
          "Getting started",
          "Install third-party dependencies"
        ],
        "type": "Text_excerpt",
        "value": "The OpenEphys toolbox is used to load the raw data:\n\nhttps://github.com/open-ephys/analysis-tools\n\nIn case of problems with OpenEphys, please download the last version that was confirmed to be compatible with PASER: \n\nhttps://github.com/open-ephys/analysis-tools/tree/f66b83f09e1896b1b5874daabadde3cff9424e9c\n\nAs with the FieldTrip and KiloSort toolboxes, it is not required to add it to the MATLAB path straight away. \n"
      },
      "source": "https://raw.githubusercontent.com/DepartmentofNeurophysiology/Paser/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Third-party dependencies",
        "parent_header": [
          "Getting started"
        ],
        "type": "Text_excerpt",
        "value": "The toolbox uses a number of third-party software packages, which are listed below. Some of these are included with the toolbox. \n\n```\nName:                    Website:                                                   License:\nbhattacharyya            https://nl.mathworks.com/matlabcentral/fileexchange/18662  See included LICENSE file\nCBPSpikesortDemo  [CBP]  https://github.com/chinasaur/CBPSpikesortDemo              GitHub Terms of Service\nexport_fig               https://github.com/altmany/export_fig                      BSD 3-clause \"New\" or \"Revised\" License\nFieldTrip         [FT]   http://www.fieldtriptoolbox.org/                           GNU General Public License v2.0\nFMMSpikeSorter    [FMM]  https://github.com/decarlson/FMMSpikeSorter                GNU General Public License v2.0\nISO-SPLIT         [ISO]  https://github.com/magland/isosplit_old                    See included COPYRIGHT file\nKiloSort          [KST]  https://github.com/cortex-lab/KiloSort                     GNU General Public License v2.0\nMClust (SPC only) [SPC]  http://redishlab.neuroscience.umn.edu/MClust/MClust.html   See included LICENSE file\nMoDT              [MDT]  https://github.com/kqshan/MoDT                             MIT License\nopass             [OPS]  https://github.com/decarlson/opass                         MIT License\nOpen Ephys               https://github.com/open-ephys/analysis-tools               See included LICENSE file\nUMS2K             [UMS]  https://github.com/danamics/UMS2K                          See included LICENSE file\nvarycolor                https://nl.mathworks.com/matlabcentral/fileexchange/21050  See included LICENSE file\n```\n"
      },
      "source": "https://raw.githubusercontent.com/DepartmentofNeurophysiology/Paser/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 18:00:19",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "FieldTrip",
        "parent_header": [
          "Getting started",
          "Install third-party dependencies"
        ],
        "type": "Text_excerpt",
        "value": "We use the FieldTrip toolbox [Ref. 3] for LFP processing and analysis, which can be downloaded or cloned from:\n\nhttps://github.com/fieldtrip/fieldtrip\n\nIn case of problems with FieldTrip, please download the last version that was confirmed to be compatible with PASER: \n\nhttps://github.com/fieldtrip/fieldtrip/tree/af6871348043f8c912b0c9c24552f9bb8db4b412\n\nIf you are not planning on using FieldTrip for anything else, then do not add the FieldTrip toolbox to your MATLAB path. \nThis will be done at a later step. Otherwise, follow the directions here:\n\nhttp://www.fieldtriptoolbox.org/faq/should_i_add_fieldtrip_with_all_subdirectories_to_my_matlab_path\n"
      },
      "source": "https://raw.githubusercontent.com/DepartmentofNeurophysiology/Paser/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "KiloSort",
        "parent_header": [
          "Getting started",
          "Install third-party dependencies"
        ],
        "type": "Text_excerpt",
        "value": "The default spike sorting method in PASER is KiloSort [Ref. 1], which can be downloaded or cloned from: \n\nhttps://github.com/cortex-lab/KiloSort\n\nIn case of problems with KiloSort, please download the last version that was confirmed to be compatible with PASER: \n\nhttps://github.com/cortex-lab/KiloSort/tree/0ea839e33527891a379e29ff9a4512d89f27bf60\n\nIt is highly recommended to use KiloSort with a CUDA enabled GPU. Attempting to run KiloSort on the CPU is errorprone and not guaranteed to result in satisfactory cluster quality. \nTherefore, please follow the installation instructions given in the KiloSort README file and \"Docs\" folder. \n\nOnce again, if you are not using KiloSort for anything else, then do not add the KiloSort directory to the MATLAB path. \nWe will instead load the toolbox the moment it is needed in the data processing pipeline. \n"
      },
      "source": "https://raw.githubusercontent.com/DepartmentofNeurophysiology/Paser/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "OpenEphys",
        "parent_header": [
          "Getting started",
          "Install third-party dependencies"
        ],
        "type": "Text_excerpt",
        "value": "The OpenEphys toolbox is used to load the raw data:\n\nhttps://github.com/open-ephys/analysis-tools\n\nIn case of problems with OpenEphys, please download the last version that was confirmed to be compatible with PASER: \n\nhttps://github.com/open-ephys/analysis-tools/tree/f66b83f09e1896b1b5874daabadde3cff9424e9c\n\nAs with the FieldTrip and KiloSort toolboxes, it is not required to add it to the MATLAB path straight away. \n"
      },
      "source": "https://raw.githubusercontent.com/DepartmentofNeurophysiology/Paser/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick start",
        "parent_header": [
          "Getting started"
        ],
        "type": "Text_excerpt",
        "value": "To verify that the toolbox is working, you can download a test data set at:\n\nhttps://drive.google.com/open?id=1pelaK9NgXjJh_bOGas_ujpRpmjUcpYB9\n\n[You should download the \"loadPath\" folder]\n\nThe data set is a relatively short extracellular recording by just two tetrodes. \n\nThen create the following script:\n\n```\npsr_parameters_general;\nparameters.loadPath   = 'C:\\path\\to\\loadPath\\;  % Location of the downloaded \"loadPath\" folder\nparameters.savePath   = 'D:\\path\\to\\savePath\\;  % Where you want to save the output data \nparameters.path.ft    = 'E:\\path\\to\\FieldTrip'; % Path to the FieldTrip main directory (folder that contains e.g. ft_defaults.m)\nparameters.path.kst   = 'F:\\path\\to\\KiloSort';  % Path to the KiloSort  main directory (folder that contains e.g. preprocessData.m)\nparameters.path.ephys = 'G:\\path\\to\\OpenEphys'; % Path to the OpenEphys main directory (folder that contains e.g. load_open_ephys_data.m)\n\npsr_example_batch_processing(parameters)\n```\n\nWhere you have to specify the five different path variables yourself. When you run the script and everything is working correctly, PASER should begin to load data from the `loadPath` directory and generate data in the `savePath` directory.\nAs soon as PASER is finished processing the data, a few figures will be created showing some quality metrics of a detected neuron, which are saved in the `savePath` directory. \nFurthermore, we perform a basic analysis on the data and plot some figures in the `analysis_figures` folder in the `savePath` directory. Note that these figures are only for illustrative purposes and won't show any interesting results. \n"
      },
      "source": "https://raw.githubusercontent.com/DepartmentofNeurophysiology/Paser/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Default processing script",
        "parent_header": [
          "Getting started",
          "Further details"
        ],
        "type": "Text_excerpt",
        "value": "To process data using PASER, you should create a MATLAB script containing the following lines of code:\n\n```\nparameters = [];\n\nparameters.configPath   = 'C:\\path\\to\\ConfigFile';  % Where the parameters are loaded from\nparameters.loadPath     = 'D:\\path\\to\\LoadFolder\\'; % Where the data folders are\nparameters.savePath     = 'E:\\path\\to\\SaveFolder\\'; % Where you want to save the output MAT files\nparameters.subject      = 'SubjectID';   % Name of subject used in output MAT filename (no spaces)\nparameters.nelectrodes  = 4;             % Number of electrodes per polytrode (e.g. tetrode: 4)\nparameters.extension    = 'continuous';  % File extension of raw data files\nparameters.rawpattern   = 'CH';          % Pattern to look for in data files\nparameters.blockpattern = [];            % Used to differentiate between blocks within session\nparameters.stimpatterns = [];            % Which session type to process\nparameters.process      = 'all';         % Which specific sessions to process ('all', 'given' or 'from')\nparameters.folders      = [];            % Sessions that you wish to process, if 'given' or 'from' is chosen above (string cell array)\nparameters.overwrite    = false;         % Whether to overwrite data from existing processed sessions\nparameters.txtfile      = [];            % Folders to process given in text file\n\npsr_batch_processing(parameters); % Process raw data files\n```\n\nThis script will load and then batch process `continuous` files in the directory given by `parameters.loadPath`. \nProcessed data is saved to the folder specified by `parameters.savePath`, where a matching directory tree will be created. \n\nNot all of the parameters in this script are set correctly, so what follows is an explanation of how to select the right settings.\n"
      },
      "source": "https://raw.githubusercontent.com/DepartmentofNeurophysiology/Paser/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "`parameters.configPath`",
        "parent_header": [
          "Getting started",
          "Further details",
          "Initial parameter definitions"
        ],
        "type": "Text_excerpt",
        "value": "You should create a `ConfigFile.m` that contains parameter settings for the various processing functions and then point `parameters.configPath` to this file. \nThis script should at least contain the following lines of code:\n\n```\npsr_parameters_general;\nparameters.path.ft    = 'C:\\path\\to\\FieldTrip'; % Path to the FieldTrip repository\nparameters.path.kst   = 'D:\\path\\to\\KiloSort';  % Path to the KiloSort  repository\nparameters.path.ephys = 'E:\\path\\to\\OpenEphys'; % Path to the OpenEphys repository\n```\n\nTo avoid clogging up the MATLAB path, we add the third-party toolboxes given above whenever we need them and remove them afterwards. \nIn order for the program to know where to look for the toolboxes, set the path parameters in the following way:\n\n* `parameters.path.ft`    should point to the FieldTrip main directory, which contains e.g. `ft_defaults.m`\n* `parameters.path.kst`   should point to the KiloSort  main directory, which contains e.g. `preprocessData.m`\n* `parameters.psth.ephys` should point to the OpenEphys main directory, which contains e.g. `load_open_ephys_data.m`\n\nMore `parameters` fields can be changed by adding more lines to the script. For example, if you do not want to process the LFP, you add:\n`parameters.process.lfp = false;`\n\nSee `psr_parameters_general` for all other parameter fields. Comments next to each parameter explain its purpose. \n"
      },
      "source": "https://raw.githubusercontent.com/DepartmentofNeurophysiology/Paser/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "`parameters.loadPath`",
        "parent_header": [
          "Getting started",
          "Further details",
          "Initial parameter definitions"
        ],
        "type": "Text_excerpt",
        "value": "`parameters.loadPath` should point to a directory tree like the one given below. This is the directory tree of the test data. \n\n```\nloadPath\n\u2502\n\u251c\u2500\u2500\u2500Session_1\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500\u2500Block_0M\n\u2502   \u2502   \u2502   100_ADC1.continuous\n\u2502   \u2502   \u2502   100_ADC2.continuous\n\u2502   \u2502   \u2502   ...\n\u2502   \u2502   \u2502\n\u2502   \u2502   \u2502   100_CH1.continuous\n\u2502   \u2502   \u2502   100_CH2.continuous\n\u2502   \u2502   \u2502   ...\n\u2502   \u2502\n\u2502   \u2502...\n\u2502\n\u251c\u2500\u2500\u2500Session_1_Condition\n\u2502   \u2502   \n\u2502   \u251c\u2500\u2500\u2500Block_0M\n\u2502   \u2502   \u2502   100_ADC1.continuous\n\u2502   \u2502   \u2502   100_ADC2.continuous\n\u2502   \u2502   \u2502   ...\n\u2502   \u2502   \u2502\n\u2502   \u2502   \u2502   100_CH1.continuous\n\u2502   \u2502   \u2502   100_CH2.continuous\n\u2502   \u2502   \u2502   ...\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500\u2500Block_1M\n\u2502   \u2502   \u2502   100_ADC1.continuous\n\u2502   \u2502   \u2502   100_ADC2.continuous\n\u2502   \u2502   \u2502   ...\n\u2502   \u2502   \u2502\n\u2502   \u2502   \u2502   100_CH1.continuous\n\u2502   \u2502   \u2502   100_CH2.continuous\n\u2502   \u2502   \u2502   ...\n\u2502   \u2502\n\u2502   \u2502...\n\u2502\n\u2502...\n```\n\nThe `loadPath` folder should include one or more folders for specific experimental sessions. Here, we have two such folders called `Session_1` and `Session_1_Condition`.\nEach session folder then contains one or more folders for specific experimental blocks that hold the raw data files. \nIn the case of `Session_1_Condition`, we have the `Block_0M` and `Block_1M`, which contain the `continuous` files. \nTo be clear, the names `Session` and `Block` are arbitrary, you can use any other name you want.\n"
      },
      "source": "https://raw.githubusercontent.com/DepartmentofNeurophysiology/Paser/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Note on experimental \"sessions\" and \"blocks\"",
        "parent_header": [
          "Getting started",
          "Further details",
          "Initial parameter definitions",
          "`parameters.loadPath`"
        ],
        "type": "Text_excerpt",
        "value": "Experimental sessions are processed separately from one-another, unless specified otherwise (see `parameters.txtfile`).\nExperimental blocks, on the other hand, are processed together for each probe within an experimental session.\n\nThis is based on the assumption that the electrodes will drift between experimental sessions, but roughly remain in the same position between experimental blocks in the same session.\n"
      },
      "source": "https://raw.githubusercontent.com/DepartmentofNeurophysiology/Paser/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "`parameters.savePath`",
        "parent_header": [
          "Getting started",
          "Further details",
          "Initial parameter definitions"
        ],
        "type": "Text_excerpt",
        "value": "For `parameters.savePath` select the folder where you want to save the output MAT files. Folders are automatically created to match the `loadPath` directory tree. \n"
      },
      "source": "https://raw.githubusercontent.com/DepartmentofNeurophysiology/Paser/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example for the directory tree under `parameters.loadPath`:",
        "parent_header": [
          "Getting started",
          "Further details",
          "Initial parameter definitions",
          "`parameters.txtfile`"
        ],
        "type": "Text_excerpt",
        "value": "The folders `Session_1` and `Session_1_Condition` will be created in `savePath`, which will contain the output MAT files for the corresponding sessions. \n"
      },
      "source": "https://raw.githubusercontent.com/DepartmentofNeurophysiology/Paser/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "`parameters.subject`",
        "parent_header": [
          "Getting started",
          "Further details",
          "Initial parameter definitions"
        ],
        "type": "Text_excerpt",
        "value": "All data that is loaded from `parameters.loadPath` is assumed to come from the same animal. In `parameters.subject` you should specify a unique character string for identification of the subject animal. \nWhen processing more than one animal, you should always change the `parameters.loadPath` and `parameters.subject` fields for each animal. \n"
      },
      "source": "https://raw.githubusercontent.com/DepartmentofNeurophysiology/Paser/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "`parameters.nelectrodes`",
        "parent_header": [
          "Getting started",
          "Further details",
          "Initial parameter definitions"
        ],
        "type": "Text_excerpt",
        "value": "The number of channels of the polytrode should be indicated by `parameters.nelectrodes`.\nEach block folder should then contain a number of `continuous` files equal to the number of polytrodes multiplied by `parameters.nelectrodes`.\n"
      },
      "source": "https://raw.githubusercontent.com/DepartmentofNeurophysiology/Paser/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "`parameters.extension`",
        "parent_header": [
          "Getting started",
          "Further details",
          "Initial parameter definitions"
        ],
        "type": "Text_excerpt",
        "value": "The extension of the raw data files. Right now this should always be set to `continuous`. \n"
      },
      "source": "https://raw.githubusercontent.com/DepartmentofNeurophysiology/Paser/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "`parameters.rawpattern`",
        "parent_header": [
          "Getting started",
          "Further details",
          "Initial parameter definitions"
        ],
        "type": "Text_excerpt",
        "value": "We use this field to decide which files should be loaded from the `parameters.loadPath` directory and to determine which raw data files go with which probe (see example below). \nThe pattern specified by `parameters.rawpattern` must immediately be followed by an integer in the filename. In turn, the integer should immediately be followed by the file extension or by an underscore. \n\n##### Example for the directory tree under `parameters.loadPath`:\n\nWe have two types of `continuous` files (`*ADC*.continuous` and `*CH*.continuous`). We only wish to load the `100_CH*.continuous` ones. \nWe can differentiate between the two types using `parameters.rawpattern`, which should be set to `parameters.rawpattern = 'CH'` in this case, because that is the common pattern between them. \nIf we are using a tetrode, then the channels `{*CH1,*CH2,*CH3,*CH4}.continuous` are the channels for the first tetrode.\n"
      },
      "source": "https://raw.githubusercontent.com/DepartmentofNeurophysiology/Paser/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "`parameters.blockpattern`",
        "parent_header": [
          "Getting started",
          "Further details",
          "Initial parameter definitions"
        ],
        "type": "Text_excerpt",
        "value": "Depending on the experimental conditions, you may wish to vary some kind of experimental variable across different experimental blocks. \nIf you indicate the value of the variable in the block folder name, then it will be extracted and saved by setting `parameters.blockpattern`. \nAny value between the underscore and the specified pattern is recorded. \n\n##### Example for the directory tree under `parameters.loadPath`:\n\nIf we set `parameters.blockpattern = 'M'`, we would get `0` and `1` for the blocks in the `Session_1_Condition` folder. \n"
      },
      "source": "https://raw.githubusercontent.com/DepartmentofNeurophysiology/Paser/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "`parameters.stimpatterns`",
        "parent_header": [
          "Getting started",
          "Further details",
          "Initial parameter definitions"
        ],
        "type": "Text_excerpt",
        "value": "Furthermore, you can also differentiate between different session types and only process one particular type of session. \nThe session type that you wish to process should be set by `parameters.stimpatterns`. \n\n##### Example for the directory tree under `parameters.loadPath`:\n\nIf we only want to process the \"*Condition\" sessions (e.g. for the directory tree under `parameters.loadPath`, we would have to specify `parameters.patterns = {'condition'}` (not case sensitive). \n"
      },
      "source": "https://raw.githubusercontent.com/DepartmentofNeurophysiology/Paser/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "`parameters.process`",
        "parent_header": [
          "Getting started",
          "Further details",
          "Initial parameter definitions"
        ],
        "type": "Text_excerpt",
        "value": "The session folders you wish to process can be directly specified as well by setting `parameters.process` to `'given'` \nand giving the session names as a cell array in `parameters.folders`. You can also set `parameters.process` to `'from'` to process the data starting from a specific session, where the starting session is specified in `parameters.folders` as a single cell. \n\n##### Example for the directory tree under `parameters.loadPath`:\n\nWe could set `parameters.folders = {'Session_1_Condition'}` in order to only process the `Session_1_Condition` folder and thus ignore the `Session_1` folder. \n"
      },
      "source": "https://raw.githubusercontent.com/DepartmentofNeurophysiology/Paser/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "`parameters.overwrite`",
        "parent_header": [
          "Getting started",
          "Further details",
          "Initial parameter definitions"
        ],
        "type": "Text_excerpt",
        "value": "Set `parameters.overwrite = false` if you only want to process sessions for which no output MAT files exist in `parameters.savePath`. Alternatively, set `parameters.overwrite = true` if you want to process every single session and overwrite any existing data.\n"
      },
      "source": "https://raw.githubusercontent.com/DepartmentofNeurophysiology/Paser/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "`parameters.txtfile`",
        "parent_header": [
          "Getting started",
          "Further details",
          "Initial parameter definitions"
        ],
        "type": "Text_excerpt",
        "value": "Multiple sessions can also be processed together by creating a TXT file and specifying on each line the sessions that should be combined. A whitespace should be left between each session name. \nThis is useful when sessions are recorded immediately after one another, so we can assume that the electrodes have not drifted significantly. \n\n##### Example for the directory tree under `parameters.loadPath`:\n\nWe can create a TXT file containing just the following line to process the two sessions together:\n```\nSession_1 Session_1_Condition\n```\n\nMore lines can be added for more session combinations, e.g: \n```\nSession_1 Session_1_Condition\nSession_2 Session_2_Condition_1 Session_2_Condition_2\n```\n"
      },
      "source": "https://raw.githubusercontent.com/DepartmentofNeurophysiology/Paser/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Output files",
        "parent_header": [
          "Getting started",
          "Further details"
        ],
        "type": "Text_excerpt",
        "value": "As mentioned under `parameters.savePath`, a MAT file will be saved for each probe to the `savePath` for the current session. These files have the following naming convention:\n\n`PSR_%SubjectID%_%Session%_P%ProbeNumber%.mat`\n\nWhere `%SubjectID%` is specified by `parameters.subject`, `%Session%` by the name of the session folder and `%ProbeNumber%` by the probe number.\n\nThe data in every MAT file is organized in the following way:\n\n```\nStructures:     Fields:\t       Type:    Size:            Description:\n\nfreq                           struct                    Local field potential (LFP) data                         \n                artifacts      double   [Na x  2]        Start and end point of LFP artifacts [sec]\n                cfg            struct                    FieldTrip configuration parameters\n                fsample        double   scalar           Sampling frequency\n                hdr            struct                    FieldTrip parameters\n                label          cell     [ 1 x Nc]        Cell array of label for each channel, where each cell contains:\n                               string                    Channel label\n                sampleinfo     double   [Nt x  2]        Start and end points of trials \n                time           cell     [ 1 x Nt]        Cell array of timestamps for each trial, where each cell contains:\n                               double   [ 1 x Ns]        Timestamps of specific trial [sec]\n                trial          cell     [ 1 x Nt]        Cell array of voltage values for each trial, where each cell contains:\n                               double   [Nc x Ns]        Voltage values of specific trial [muV]\n\t\t\t\t\n                [ see FieldTrip docs for details: http://www.fieldtriptoolbox.org/ ]\n\n                Na: number of artifacts\t\n                Nc: number of channels\n                Ns: number of data points \n                Nt: number of trials\n\t\t\t\t\nmetadata                       struct                    General experimental data\n                duration       double   scalar           Duration of session [sec]\n                probe          integer  scalar           Probe number\n                session        string   [ 1 x Ns]        Name of session\n                stimtimes      cell     [Nb x  2]        Cell array with stimulus on- and offset timings, where each cell contains:\n                               double   [Nt x  2]        Stimulus on- and offset times [sec]\n                               string                    Stimulus type\n                stimulus       cell     [Nt x  1]        Vector of trial conditions\n                subject        string                    Name of subject\n                trialonset     double   [Nb x  1]        Onset time of every block [sec]\n\t\t\t\t\n                Nb: number of blocks\n                Ns: number of sessions\n                Nt: number of trials\n\t\t\t\t\nparameters                     struct                    Parameters for all data processing functions\n                \n                [ see files in \"parameters\" folder for details ]\n\t\t\t\nspikes                         struct                    Neural spiking data\n                assigns        int16    [ 1 x Ns]        Cluster index of each detected spike after merging\n                assigns_prior  int16    [ 1 x Ns]        Cluster index of each detected spike before merging\n                clusters       struct                    See further below\n                delete         struct                    Logical arrays indicating spikes that are tagged for removal\n                features       single   [Nd x Ns]        Array of principle component scores\n                info           struct                    See further below\n                spiketimes     single   [ 1 x Ns]        Spike time of each detected spike [sec]\n                blocks         int16    [ 1 x Ns]        Experimental block index of each detected spike\n                waveforms      int16    [Ns x Np x Nc]   Waveform of each detected spike for each channel \n                Fs             double   scalar           Sampling frequency of raw extracellular recording\n\t\t\t\t\n                Ns: number of spikes\n                Np: number of data points\n                Nc: number of channels\n\t\t\t\t\nspikes.info                    struct                    Session information\n                std            double   [1 x Nc]         Standard deviation of signal for each channel \n                mad            double   [1 x Nc]         Median absolute deviation of signal for each channel\n                rms            double   [1 x Nc]         Root-mean-square of signal for each channel\n                env            double   [1 x Nc]         Signal envelope for each channel\n                bgn            double   [1 x Nc]         Measure of background noise for each channel\n                dur            double   [1 x Nb]         Duration of each experimental block [sec]\t\t\t\t\n                thresh         double   [1 x Nc]         Spike detection thresholds for each channel\n                detected       logical                   Indicates whether the spikes were detected using a threshold\n\t\t\t\t\n                Optional:\n                kst                                      KiloSort output variables \n                                                         [ see KiloSort docs for details: https://github.com/cortex-lab/KiloSort ]\n\t\t\t\t\n                Nb: number of blocks\n                Nc: number of channels\n\t\t\t\t\nspikes.clusters                struct                   Metrics for spike clusters                  \t\n                metrics        struct                   \n                zeta           double   [Nc x Nc]       Zeta distance between clusters in feature space (see [Ref. 7])\n\t\t\t\t\n                Nc: number of clusters\n\nspikes.clusters.metrics                                 Metrics for each spike cluster\n                id             integer  scalar          Cluster identifier\n                nspikes        integer  scalar          Number of spikes in cluster\n                fspikes        double   scalar          Fraction of total spike number\n                frate          double   scalar          Mean firing rate (Hz)\n                rpv            double   scalar          Fraction of refractory period violations \n                sub            double   scalar          Fraction of sub-threshold spikes \n                co             double   scalar          Fraction of spikes that are expected to coincide with spikes from other clusters\n                xc             double   vector          Cross-correlations of channel pair with greatest lag for cross-correlation peak\n                xcLag          double   scalar          Greatest lag of pairwise cross-correlation peaks between channels\n                mse            double   scalar          Mean squared-error between empirical and theoretical spike count distribution (temporal stability measure)\n                amp            double   scalar          Mean absolute amplitude of waveform\n                ampRel         double   scalar          Mean relative amplitude of waveform, normalized by threshold\n                p2p            double   scalar          Mean peak-to-peak amplitude of waveform\n                chans          integer  vector          Channels IDs that have above-threshold mean amplitude\n                artifact       double   scalar          Ratio between actual and expected number of spikes in LFP artifact region\n                snr            double   scalar          Signal-to-noise ratio\n                quality        integer  scalar          Quality measure of cluster (see \"psr_sst_cluster_thresholds\")\n                Lratio         double   scalar          L-ratio [Ref. 5]\n                IsoDis         double   scalar          Isolation distance [Ref. 5]\n                FP_t           double   scalar          False positive rate, based on fitting mixture of drifting t-distributions [Ref. 6]\n                FN_t           double   scalar          False negative rate, based on fitting mixture of drifting t-distributions [Ref. 6]\n                FP_g           double   scalar          False positive rate, based on fitting mixture of drifting Gaussians \n                FN_g           double   scalar          False negative rate, based on fitting mixture of drifting Gaussians\n```       \n"
      },
      "source": "https://raw.githubusercontent.com/DepartmentofNeurophysiology/Paser/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Temporary files",
        "parent_header": [
          "Getting started",
          "Further details"
        ],
        "type": "Text_excerpt",
        "value": "While running the processing pipeline, a number of temporary MAT files will be created in `savePath`. \nWe do this to avoid having to keep the data stored in memory, allowing us to only load what we need at any one time.\nThese temporary MAT files are deleted after they are no longer needed. \nIt is highly recommended to make sure that MATLAB deletes these files permanently, so no manual clean-up is needed. \nYou can select this option by going to the `Home` tab in MATLAB, selecting `Preferences` (the cogwheel), then the `General` menu and clicking on the `Delete permanently` option under `Deleting files`. \n"
      },
      "source": "https://raw.githubusercontent.com/DepartmentofNeurophysiology/Paser/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Default analysis script",
        "parent_header": [
          "Getting started",
          "Visualization &amp; Analysis"
        ],
        "type": "Text_excerpt",
        "value": "After processing the data, we would like to visualize and analyse it. Similar to the data processing section, we should create a default analysis script as follows:\n\n```\ncfg = [];\ncfg.loadpath = 'C:\\path\\to\\LoadFolder'; % Location of output files from LFP and spike processing\ncfg.savepath = 'D:\\path\\to\\SaveFolder'; % Where to save the output analysis files\ncfg.subject  = 'SubjectID';             % The subject we want to analysis \n\ncfg.analysis.run   = true; % Whether to do the analysis\ncfg.analysis.fpath = 'E\\path\\to\\AnalysisFunction'; % Location of your custom analysis function\n\ncfg.plot.quality = true; % Plot unit quality figures\ncfg.plot.merges  = true; % Plot unit merges\n\npsr_batch_analysis(cfg);\n```\n\nAgain, we explain the various fields below.\n"
      },
      "source": "https://raw.githubusercontent.com/DepartmentofNeurophysiology/Paser/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "`cfg.loadpath`",
        "parent_header": [
          "Getting started",
          "Visualization &amp; Analysis",
          "Default analysis script"
        ],
        "type": "Text_excerpt",
        "value": "Directory to load the processed data from. This field should probably be the same as the `parameters.savePath` field in the data processing section. \n"
      },
      "source": "https://raw.githubusercontent.com/DepartmentofNeurophysiology/Paser/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "`cfg.savepath`",
        "parent_header": [
          "Getting started",
          "Visualization &amp; Analysis",
          "Default analysis script"
        ],
        "type": "Text_excerpt",
        "value": "Directory to save your analysis output files. \n"
      },
      "source": "https://raw.githubusercontent.com/DepartmentofNeurophysiology/Paser/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "`cfg.subject`",
        "parent_header": [
          "Getting started",
          "Visualization &amp; Analysis",
          "Default analysis script"
        ],
        "type": "Text_excerpt",
        "value": "Which subject's data we are going to analyse. If `cfg.subject = 'SubjectID'`, then we only load processed data from folders containing the `SubjectID` string at the start of their names. \n"
      },
      "source": "https://raw.githubusercontent.com/DepartmentofNeurophysiology/Paser/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "`cfg.analysis.run`",
        "parent_header": [
          "Getting started",
          "Visualization &amp; Analysis",
          "Default analysis script"
        ],
        "type": "Text_excerpt",
        "value": "Boolean indicating whether we want to run the analysis or not, i.e. whether we call the analysis function given by `cfg.analysis.fpath`. \n"
      },
      "source": "https://raw.githubusercontent.com/DepartmentofNeurophysiology/Paser/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "`cfg.analysis.fpath`",
        "parent_header": [
          "Getting started",
          "Visualization &amp; Analysis",
          "Default analysis script"
        ],
        "type": "Text_excerpt",
        "value": "The `cfg.analysis.fpath` field points to an M-file that is supplied by the user to carry out data analysis. \nThe M-file must contain a function, which is called in the `psr_batch_analysis` routine at the end of your analysis script, given above. \n\nFor an analysis function example, you can look at the `psr_example_analysis.m` file in the `examples` folder. \nYou should be able to run this analysis function on your own data, by setting:\n```\ncfg.analysis.fpath = 'C:\\path\\to\\examples\\psr_example_analysis'; % Location of the \"psr_example_analysis.m\" file\n```\nFor most experiments, however, you want to create a more advanced analysis, but the `psr_example_analysis.m` file can be used as a starting point. The `psr_example_analysis.m` file has therefore been heavily annotated to make it easier for people to make their own custom analysis function. \n"
      },
      "source": "https://raw.githubusercontent.com/DepartmentofNeurophysiology/Paser/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "`cfg.plot.quality`",
        "parent_header": [
          "Getting started",
          "Visualization &amp; Analysis",
          "Default analysis script"
        ],
        "type": "Text_excerpt",
        "value": "Boolean indicating whether we want to plot unit quality figures. \n"
      },
      "source": "https://raw.githubusercontent.com/DepartmentofNeurophysiology/Paser/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "`cfg.plot.merges`",
        "parent_header": [
          "Getting started",
          "Visualization &amp; Analysis",
          "Default analysis script"
        ],
        "type": "Text_excerpt",
        "value": "Boolean indicating whether we want to plot the cluster merges. \n"
      },
      "source": "https://raw.githubusercontent.com/DepartmentofNeurophysiology/Paser/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Troubleshooting",
        "parent_header": [
          "Getting started"
        ],
        "type": "Text_excerpt",
        "value": "Problem: `'Undefined function 'ft_senstype' for input arguments of type 'cell'.'`\n\nSolution: Restart MATLAB or execute `restoredefaultpath` followed by `startup`.\n"
      },
      "source": "https://raw.githubusercontent.com/DepartmentofNeurophysiology/Paser/master/README.md",
      "technique": "header_analysis"
    }
  ]
}