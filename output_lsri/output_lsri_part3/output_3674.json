{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/wyp1125/SeqEnhDL"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-09-09T13:34:07Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-04-26T13:33:29Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Multiple machine learning and deep learning models for sequence-based enhancer prediction"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9617412427468055,
      "result": {
        "original_header": "SeqEnhDL",
        "type": "Text_excerpt",
        "value": "Deep learning and SVM models for kmer-based enhancer classification. Utility programs for data processing are also provided. Usage of each program (excluding wrapper scripts) can be displayed by typing a command line without any option.\n \n"
      },
      "source": "https://raw.githubusercontent.com/wyp1125/SeqEnhDL/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.974563081913702,
      "result": {
        "original_header": "Data preprocessing",
        "type": "Text_excerpt",
        "value": "1) **mask_seq.pl**\nMask regions of chromosomal sequences: repeat sequences by 'N's, and other masked sequences by 'X's.\n2) **paral_mask_seq_*.pl**\nWrapper to run mask_seq.pl.\n3) **divide_200bp.pl**\nDivide enhancer chromosomal positions to 210bp windows.\n4) **retrieve_sequence.pl**\nRetrieve DNA sequence given chromosomal positions.\n5) **filter_seq.pl**\nFilter out fastq sequence overlapped with any masked nucleotide, and generate GC content information for the kept sequences.\n6) **scan_sel_new.cc**\nRandomly select n-fold DNA sequences from the genome by matching given sequence lengths, repeat contents and CG contents in a feature file.\n7) **paral_scan_sel_new_*.pl**\nWrapper to run scan_sel_new.\n8) **get_kmer_dict.pl**\nGenerate kmer dictionaries between kmers and fold-changes by comparing between positive and control sequences.\n9) **paral_get_kmer_dict.pl**\nWrapper to run get_kmer_dict.pl.\n10) **make_fasta_cv.py**\nMake cross-validation datasets for a pair of positive and negative fasta files. Note that headers and their corresponding sequences are placed in the same lines in the output files.\n11) **code_seq.pl**\nTransform DNA sequences (flattened fasta files) to kmer fold changes for deep learning, based on provided kmer dictionaries.\n12) **paral_code_seq*.pl**\nWrapper to run code_seq.pl.\n13) **random_selection.py**\nRandomly select a pre-defined proportion of samples from feature files.\n \n"
      },
      "source": "https://raw.githubusercontent.com/wyp1125/SeqEnhDL/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9883139294130584,
      "result": {
        "original_header": "Data format",
        "type": "Text_excerpt",
        "value": "Positive and negative features should be stored in the same files and training and testing data should be separated. Class labels should be provided as dummy variables in separate files.\nFormat for features\n```\n5mer_fc_nt1    7mer_fc_nt1    9mer_fc_nt1    11mer_fc_nt1    ...    5mer_fc_nt200    7mer_fc_nt200    9mer_fc_nt200    11mer_fc_nt200\n5mer_fc_nt1    7mer_fc_nt1    9mer_fc_nt1    11mer_fc_nt1    ...    5mer_fc_nt200    7mer_fc_nt200    9mer_fc_nt200    11mer_fc_nt200\n```\nFormat for class labels\nBASH2*\n \n"
      },
      "source": "https://raw.githubusercontent.com/wyp1125/SeqEnhDL/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9097376286007353,
      "result": {
        "original_header": "Output",
        "type": "Text_excerpt",
        "value": "Accuracy (and AUC) will be printed after an enhancer classifier is successfully trained and tested.\n \n"
      },
      "source": "https://raw.githubusercontent.com/wyp1125/SeqEnhDL/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/wyp1125/SeqEnhDL/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/wyp1125/SeqEnhDL/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "wyp1125/SeqEnhDL"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SeqEnhDL"
      },
      "source": "https://raw.githubusercontent.com/wyp1125/SeqEnhDL/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9988935847081917,
      "result": {
        "original_header": "Input data",
        "type": "Text_excerpt",
        "value": "Testing data can be download from http://www.bdxconsult.com/SeqEnhDL.\n \n"
      },
      "source": "https://raw.githubusercontent.com/wyp1125/SeqEnhDL/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.9037943769845396,
      "result": {
        "original_header": "Enhancer classifiers",
        "type": "Text_excerpt",
        "value": "1) **SeqEnhMLP.py**\nTrain and test a multi-layer perceptron model of enhancer classifier.\n2) **SeqEnhCNN.py**\nTrain and test a CNN model of enhancer classifier.\n3) **SeqEnhRNN.py**\nTrain and test an RNN model of enhancer classifier.\n4) **multi_ml_enhancer.py**\nTrain and test an enhancer classifier using a conventional machine learning model. \n"
      },
      "source": "https://raw.githubusercontent.com/wyp1125/SeqEnhDL/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/wyp1125/SeqEnhDL/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SeqEnhDL"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "wyp1125"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 16963,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 9237,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 5513,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Raku",
        "size": 1098,
        "type": "Programming_language",
        "value": "Raku"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/wyp1125/SeqEnhDL/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependency",
        "parent_header": [
          "SeqEnhDL"
        ],
        "type": "Text_excerpt",
        "value": "python3, g++, perl, tensorflow, sklearn, numpy, pandas\n"
      },
      "source": "https://raw.githubusercontent.com/wyp1125/SeqEnhDL/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 13:40:08",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "SeqEnhDL"
        ],
        "type": "Text_excerpt",
        "value": "To know how to run each enhancer classifier program, users can just type \"python3 program_name\". For each program, four input files are required, including training features (trn*X), training labels (trn*Y), testing features (tst*X), testing lables (tst*Y). Users need to make sure these files are provided in the correct order or with right foregoing arguments.\n"
      },
      "source": "https://raw.githubusercontent.com/wyp1125/SeqEnhDL/master/README.md",
      "technique": "header_analysis"
    }
  ]
}