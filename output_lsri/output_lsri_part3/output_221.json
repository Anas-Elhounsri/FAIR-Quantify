{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "References:",
        "parent_header": [
          "StrainScan"
        ],
        "type": "Text_excerpt",
        "value": "how to cite this tool:\n```\nLiao, H., Ji, Y. & Sun, Y. High-resolution strain-level microbiome composition analysis from short reads. Microbiome 11, 183 (2023). https://doi.org/10.1186/s40168-023-01615-w\n```\n"
      },
      "source": "https://raw.githubusercontent.com/liaoherui/strainScan/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/liaoherui/StrainScan"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-04-15T10:33:34Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-16T01:50:04Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "High-resolution strain-level microbiome composition analysis tool based on reference genomes and k-mers"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9851726734523368,
      "result": {
        "original_header": "StrainScan",
        "type": "Text_excerpt",
        "value": "One efficient, accurate and high-resolution strain-level microbiome composition analysis tool based on reference genomes and k-mers. StrainScan takes reference database and sequencing data as input, outputs strain-level microbiome compistion analysis report. \n"
      },
      "source": "https://raw.githubusercontent.com/liaoherui/strainScan/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9219587562597009,
      "result": {
        "original_header": "Version: V1.0.14 (update at 2023-10-13)",
        "type": "Text_excerpt",
        "value": "<details>\n<summary>Click here to check the log of all updates</summary>\n\t\n#### *__[Update - 2022 - 05 - 01]__* :  <BR/> \n* *StrainScan is able to take gzipped and PE FASTQs as input now!<BR/>* \n* *Add a parameter \"-b\" that enables StrainScan to output the probability of detecting a strain in samples with low sequencing depth (e.g. <1X).<BR/>* \n* *V1.0.13: Update Bioconda version to latest GitHub version, which has more and new functions!! <BR/>* \n* *V1.0.14: Fix a bug in identify.py about the identification of low-depth strains! <BR/>* \n## Pre-built databases download\nThe table below offers information about the pre-built databases of 6 bacterial species used in the paper and 2 additional bacterial species. Users can download these databases and use them to identify strains directly. \n### Use StrainScan to build your own custom database with custom clustering file.\n  `python StrainScan_build.py -i <Input_Genomes> -c <Cluster_file> -o <Database_Dir>`<BR/>\n  <BR/> The data format of the input clustering file can be found in the demo file `Custom_cluster_demo/custom_cls.txt`, where the first column is the cluster ID, the second column is the cluster size, and the last column is the prefix of the reference genomes in the cluster.\n  \n### Use StrainScan_subsample to subsample your large-scale strains with high redundancy.\n   `python StrainScan_subsample.py -i <Input_Genomes> -o <Output_Dir>`<BR/>\n  <BR/> If you have large-scale strains with high redundancy and you want to remove the redundancy. Then you can use this script, which utilizes dashing and hierarchical clustering to subsample strains efficiently. The subsampled strains can be found in `<Output_Dir>/Rep_ref` and clustering information can be found in `<Output_Dir>/Cls_res`. More parameters can be found using  `python StrainScan_subsample.py -h`. \n---------------------------------------------------------------------------\n### Use StrainScan to identify bacterial strains in short reads.\n  `python StrainScan.py -i <Input_reads> -d <Database_Dir> -o <Output_Dir>`<BR/>\n<BR/>eg:\n  `python StrainScan.py -i Sim_Data/GCF_003812785.fq -d DB_Small -o Test_Sim/GCF_003812785`<BR/>\n or\n  `python StrainScan.py -i Sim_Data_mul/GCA_000144385_5X_GCF_008868325_5X.fq -d  DB_Small -o Test_Sim/GCA_000144385_5X_GCF_008868325_5X `<BR/>\n  \n  PE reads (can be gzipped FASTQ format)<BR/>\n   `python StrainScan.py -i GCF_003812785_1.fq.gz -j GCF_003812785_2.fq.gz -d DB_Small -o Test_Sim/GCF_003812785`<BR/>\n   \nNote: if the sequencing depth of targeted strains is super low (e.g., <1X), then you may get \"Warning: No clusters can be detected!\". In this case, you can use parameter \"-b\" to output the probability of detecting a strain (cluster) in low-depth samples. The higher the probability, the more likely the strain (cluster) is to be present.<BR/>\n    eg:\n    `python StrainScan.py -i <Input_reads> -d <Database_Dir> -b 1 -o <Output_Dir>`<BR/>\n  \n   \n### Use StrainScan to identify plasmids of bacterial strains in short reads.\n  option-1: identify possible plasmids by using contigs <100000 bp:<BR/>\n  `python StrainScan.py -i <Input_reads> -d <Database_Dir> -p 1 -r <Ref_genome_Dir> -o <Output_Dir>`<BR/>\n  \n  option-2: identify possible plasmids (or possible strains) using reference genomes provided by \"-r\".<BR/>\n  `python StrainScan.py -i <Input_reads> -d <Database_Dir> -p 2 -r <Ref_genome_Dir> -o <Output_Dir>`<BR/>\n  \n `<Ref_genome_Dir>` refer to the dir of reference genomes of identified clusters or all strains used to build the database. \n### Use StrainScan to identify bacterial strains in short reads under extraRegion_mode.\nThis mode will search possible strains and return strains with extra regions (could be different genes, SNVs or SVs to the possible strains) covered. If there is a novel strain not in the database, then its closest relative can be one specific strain while its partial regions (we call them \"extraRegion\" ) in the genome can be similar to other strains. In this case, this mode can search its closest relative and return strains with \"extraRegion\" covered for downstream analysis. <BR/> \n\nIdentification - StrainScan.py (Default k-mer size: 31)\n```\nStrainScan - A kmer-based strain-level identification tool.\n\nExample: python StrainScan.py -i  <Input_reads> -d <Database_Dir> -o <Output_Dir>\n\nrequired arguments:\n    -i, --input_fastq             Input fastq data.\n    -j, --input_fastq_2\t\t  Input fastq data (for pair-end data).\n    -d, --database_dir            Path of StrainScan database.\n\noptional arguments:\n    -h, --help                    Show help message and exit.\n    -o, --output_dir              The output directory. (Default: ./StrainScan_Result)\n    -k, --kmer_size               The size of k-mer, should be odd number. (Default: k=31)\n    -l, --low_dep                 This parameter can be set to \"1\" if the sequencing depth of input data is very low (e.g. < 5x). For super low depth ( < 1x ), you can use \"-l 2\" (default: -l 0)\n    -b, --strain_prob\t\t  If this parameter is set to 1, then the algorithm will output the probabolity of detecting a strain (or cluster) in low-depth (e.g. <1x) samples.  (default: -b 0)\n    -p,\t--plasmid_mode\t\t  If this parameter is set to 1, the intra-cluster searching process will search possible plasmids using short contigs (<100000 bp) in strain genomes, which are likely to be plasmids. \n                                  If this parameter is set to 2, the intra-cluster searching process will search possible plasmids or strains using given reference genomes by \"-r\".\n    \t\t\t\t  Reference genome sequences (-r) are required if this mode is used. (default: -p 0)\n    -r, --ref_genome\t\t  The dir of reference genomes of identified cluster or all strains. If plasmid_mode is used, then this parameter is required.\n    -e, --extraRegion_mode\t  If this parameter is set to 1, the intra-cluster searching process will search possible strains and return strains with extra regions (could be different genes, SNVs or SVs to the possible strains) covered. (default: -e 0)\n    -s, --minimum_snv_num         The minimum number of SNVs during the iterative matrix multiplication at Layer-2 identification. (Default: s=40)\n```\nBuild database - StrainScan_build.py (Default k-mer size: 31)\nBASH2* \n## Output Format\nThe output of StrainScan contains two parts. The first part is the final identification report file in text format. This file contains all identified strains and their predicted depth and relative abundance, etc. The second part is the strain identification report files inside each cluster. \nFor your reference, two output files are given as example in the folder \"Output_Example\" in this repository. These files contain identification results of one single-strain and one two-strain (depth: 5X and 5X) simulated datasets, respectively. \n"
      },
      "source": "https://raw.githubusercontent.com/liaoherui/strainScan/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9353827597992888,
      "result": {
        "original_header": "Output Format",
        "type": "Text_excerpt",
        "value": "Explaination about the columns in the final identification report file (E.g. \"Output_Example/GCA_000144385_5X_GCF_008868325_5X/final_report.txt\") of StrainScan.\nColumn_name   |\tDescription\n------------ | ------------- \nStrain_ID | The numerical id of identified strains in the ascending order.\nStrain_Name | The name of identified strains. (In the example output, the name refers to the NCBI RefSeq accession id)\nCluster_ID  | The cluster id of identified strains. (For cluster information, users can check \"<Database_Dir>/Cluster_Result/hclsMap_95_recls.txt\")\nRelative_Abundance_Inside_Cluster | The predicted relative abundance of identified strains inside the cluster.\nPredicted_Depth (Enet) | The predicted sequencing depth of identified strains inside the cluster using elastic net model.\nPredicted_Depth (Ab\\*cls_depth) | The final predicted sequencing depth of identified strains.\nCoverage  | The estimated k-mer-based coverage of identified strains.\nCoverd/Total_kmr  | The number of \"covered\" and \"total\" k-mers of identified strains.\nValid_kmr | The valid k-mer refers to the k-mer belonging to the identified strain during the iterative matrix multiplication. More valid k-mers there are, more likely this strain exist.\nRemain_Coverage | The coverage calculated by \"covered\" / \"total\" k-mers during the iterative matrix multiplication.\nCV  | The number of \"covered\" and \"valid\" k-mers of identified strains.\nExist evidence  | By default, identified strains with \"relative abundance > 0.02 and coverage >0.7\" will be marked as \"\\*\". Strains with \"\\*\" are more likely to exist. However, for low-depth samples, this parameter may be not useful.\n \n"
      },
      "source": "https://raw.githubusercontent.com/liaoherui/strainScan/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9310359976338469,
      "result": {
        "original_header": "***[Update - 2023 - 09 - 29]*** :  <BR/>",
        "type": "Text_excerpt",
        "value": "[![install with bioconda](https://img.shields.io/badge/install%20with-bioconda-brightgreen.svg?style=flat)](http://bioconda.github.io/recipes/strainscan/README.html)\n# StrainScan \nOne efficient, accurate and high-resolution strain-level microbiome composition analysis tool based on reference genomes and k-mers. StrainScan takes reference database and sequencing data as input, outputs strain-level microbiome compistion analysis report. \n\n### Contributor: Liao Herui and Ji Yongxin (Ph.D of City University of Hong Kong, EE), Nick Youngblut\n### E-mail: heruiliao2-c@my.cityu.edu.hk / yxjijms@gmail.com\n### Version: V1.0.14 (update at 2023-10-13) \n"
      },
      "source": "https://raw.githubusercontent.com/liaoherui/strainScan/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9483588004654672,
      "result": {
        "original_header": "Output Format",
        "type": "Text_excerpt",
        "value": "The output of StrainScan contains two parts. The first part is the final identification report file in text format. This file contains all identified strains and their predicted depth and relative abundance, etc. The second part is the strain identification report files inside each cluster. \n"
      },
      "source": "https://raw.githubusercontent.com/liaoherui/strainScan/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Pre-built databases download",
        "parent_header": [
          "StrainScan"
        ],
        "type": "Text_excerpt",
        "value": "The table below offers information about the pre-built databases of 6 bacterial species used in the paper and 2 additional bacterial species. Users can download these databases and use them to identify strains directly.\n\nSpecies   |\tSource  | Number of Strains |\tNumber of Clusters |\tDownload link\n------------ | -------------| ------------- | ------------- | ------------- \nAkkermansia muciniphila |  NCBI | 157 | 53  | [Google drive](https://drive.google.com/file/d/1BAoi5u4JuPTapULjbZRgaBBW5JrNYd7P/view?usp=sharing)\nCutibacterium acnes |  NCBI | 275 | 28  | [Google drive](https://drive.google.com/file/d/15YbWWMsao8Rzqw_6PiARSwA3ahvNjW_w/view?usp=sharing)\nPrevotella copri |  NCBI | 112 | 51  | [Google drive](https://drive.google.com/file/d/1qhc17ZSRop0hp5lrM2sAQiffv0PXuQ6r/view?usp=sharing)\nEscherichia coli |  NCBI | 1433 | 823  | [Google drive](https://drive.google.com/file/d/1otmTt98xu8YUiTh4kQDKo3e6wMaOpWSV/view?usp=sharing)\nMycobacterium tuberculosis |  NCBI | 792 | 25  | [Google drive](https://drive.google.com/file/d/18pPGyHODRwYV_d-l-xOKiLkbj7WcHCR_/view?usp=sharing)\nStaphylococcus epidermidis |  NCBI | 995 | 378  | [Google drive](https://drive.google.com/file/d/1wwGubVO9F4r0pwHqQWQ2_NC151WDn96I/view?usp=sharing)\nStaphylococcus aureus |  NCBI | 1627 | 202  | [Google drive](https://drive.google.com/file/d/105qmCZFgVh_2i-nQuB80emyVVqcSQBhi/view?usp=sharing)\nLactobacillus crispatus |  NCBI | 1124 | 311  | [Google drive](https://drive.google.com/file/d/1ENEfaKN2Mjrt1RHGIylhLIcP4NYogIFb/view?usp=sharing)\n\nYou can also use bash scripts in the folder \"Download_DB_script\" to download the pre-built databases from Google drive. For example,\n \n `cd Download_DB_script`<BR/>\n `sh ecoli_db.sh`<BR/>\n\n If you can not download databases from the google drive, you may try to download databases from the Baidu Netdisk.<BR/>\n  Baidu Netdisk link: `https://pan.baidu.com/s/1YFtHv2weJEBdwTz4LmTKOQ `<BR/>\n  Extraction code: `ASDF`<BR/>\n  \n\n\n"
      },
      "source": "https://raw.githubusercontent.com/liaoherui/strainScan/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/liaoherui/strainScan/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/liaoherui/StrainScan/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "liaoherui/StrainScan"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "StrainScan"
      },
      "source": "https://raw.githubusercontent.com/liaoherui/strainScan/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/liaoherui/strainScan/main/test_run.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/liaoherui/strainScan/main/Download_DB_script/sep_db.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/liaoherui/strainScan/main/Download_DB_script/lcr_db.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/liaoherui/strainScan/main/Download_DB_script/ecoli_db.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/liaoherui/strainScan/main/Download_DB_script/akk_db.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/liaoherui/strainScan/main/Download_DB_script/sau_db.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/liaoherui/strainScan/main/Download_DB_script/mtb_db.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/liaoherui/strainScan/main/Download_DB_script/cae_db.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/liaoherui/strainScan/main/Download_DB_script/pre_db.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://user-images.githubusercontent.com/22760266/152946273-b39c5c10-9a96-4572-b409-e7a8db53d9e4.png"
      },
      "source": "https://raw.githubusercontent.com/liaoherui/strainScan/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Install (Linux or ubuntu only)",
        "parent_header": [
          "StrainScan"
        ],
        "type": "Text_excerpt",
        "value": "Option 1 - The first way to install StrainScan, is to use [bioconda](https://bioconda.github.io/)."
      },
      "source": "https://raw.githubusercontent.com/liaoherui/strainScan/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "",
        "parent_header": [
          "StrainScan",
          "Install (Linux or ubuntu only)"
        ],
        "type": "Text_excerpt",
        "value": "Option 1 - The first way to install StrainScan, is to use [bioconda](https://bioconda.github.io/).\nOnce you have bioconda environment installed, install package strainscan:\n\n\tconda install -c bioconda strainscan\n \n It should be noted that some commands have been replaced if you install StrainScan using bioconda. (See below)\n\nCommand (Not bioconda)    |\tCommand (bioconda)\n------------ | ------------- \npython StrainScan.py -h | strainscan -h\npython StrainScan_build.py -h | strainscan_build -h\n\nOption 2 - Also, yon can install StrainScan via [Anaconda](https://anaconda.org/) using the commands below:<BR/>\n####\n`git clone https://github.com/liaoherui/StrainScan.git`<BR/>\n`cd StrainScan`<BR/>\n\n`conda env create -f environment_candidate.yaml`<BR/>\n`conda activate strainscan`<BR/>\n\n`chmod 755 library/jellyfish-linux`<BR/>\n`chmod 755 library/dashing_s128`<BR/>\n\n\n\n####\n\nOption 3 - Or, you can install all dependencies of StrainScan mannually and then run the commands below.\n\n`git clone https://github.com/liaoherui/StrainScan.git`<BR/>\n`cd StrainScan`<BR/>\n\n`chmod 755 library/jellyfish-linux`<BR/>\n`chmod 755 library/dashing_s128`<BR/>\n"
      },
      "source": "https://raw.githubusercontent.com/liaoherui/strainScan/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9713671359448367,
      "result": {
        "original_header": "Version: V1.0.14 (update at 2023-10-13)",
        "type": "Text_excerpt",
        "value": "* *V1.0.3: StrainScan can be installed via bioconda now! <BR/>* \n#### *__[Update - 2022 - 06 - 07]__* :  <BR/> \n* *V1.0.10: Add multuple threads to the reference database constrcution! <BR/>* \n#### *__[Update - 2023 - 02 - 07]__* :  <BR/> \n#### *__[Update - 2023 - 04 - 22]__* :  <BR/> \n#### *__[Update - 2023 - 05 - 04]__* :  <BR/> \n#### *__[Update - 2023 - 05 - 15]__* :  <BR/> \n#### *__[Update - 2023 - 09 - 23]__* :  <BR/> \n#### *__[Update - 2023 - 09 - 29]__* :  <BR/> \n* *V1.0.13: Update Bioconda version to latest GitHub version, which has more and new functions!! <BR/>* \n#### *__[Update - 2023 - 10 - 03]__* :  <BR/> \n#### *__[Update - 2023 - 10 - 13]__* :  <BR/> \n---------------------------------------------------------------------------\n### Dependencies:\n* Python ==3.7.x\n* R\n* Sibeliaz ==1.2.2 (https://github.com/medvedevgroup/SibeliaZ)\n* Required python package: numpy==1.17.3, pandas==1.0.1, biopython==1.74, scipy==1.3.1, scikit-learn==0.23.1, bidict==0.21.3, treelib==1.6.1 \nMake sure these programs have been installed before using StrainScan.  \n## Install (Linux or ubuntu only)\nOption 1 - The first way to install StrainScan, is to use [bioconda](https://bioconda.github.io/).\nOnce you have bioconda environment installed, install package strainscan: \n\tconda install -c bioconda strainscan\n \n It should be noted that some commands have been replaced if you install StrainScan using bioconda. (See below) \nCommand (Not bioconda)    |\tCommand (bioconda)\n------------ | ------------- \npython StrainScan.py -h | strainscan -h\npython StrainScan_build.py -h | strainscan_build -h \nOption 2 - Also, yon can install StrainScan via [Anaconda](https://anaconda.org/) using the commands below:<BR/>\n####\n`git clone https://github.com/liaoherui/StrainScan.git`<BR/>\n`cd StrainScan`<BR/> \n`conda env create -f environment_candidate.yaml`<BR/>\n`conda activate strainscan`<BR/> \n`chmod 755 library/jellyfish-linux`<BR/>\n`chmod 755 library/dashing_s128`<BR/> \nOption 3 - Or, you can install all dependencies of StrainScan mannually and then run the commands below. \n`git clone https://github.com/liaoherui/StrainScan.git`<BR/>\n`cd StrainScan`<BR/> \nYou can also use bash scripts in the folder \"Download_DB_script\" to download the pre-built databases from Google drive. For example,\n \n `cd Download_DB_script`<BR/>\n `sh ecoli_db.sh`<BR/> \n If you can not download databases from the google drive, you may try to download databases from the Baidu Netdisk.<BR/>\n  Baidu Netdisk link: `https://pan.baidu.com/s/1YFtHv2weJEBdwTz4LmTKOQ `<BR/>\n  Extraction code: `ASDF`<BR/>\n   \n### Use StrainScan to build your own custom database.<BR/> \n  `python StrainScan_build.py -i <Input_Genomes> -o <Database_Dir>`<BR/>\n<BR/>eg:\n  `python StrainScan_build.py -i Test_genomes -o DB_Small`<BR/> \n### Use StrainScan to identify plasmids of bacterial strains in short reads.\n  option-1: identify possible plasmids by using contigs <100000 bp:<BR/>\n  `python StrainScan.py -i <Input_reads> -d <Database_Dir> -p 1 -r <Ref_genome_Dir> -o <Output_Dir>`<BR/>\n  \n  option-2: identify possible plasmids (or possible strains) using reference genomes provided by \"-r\".<BR/>\n  `python StrainScan.py -i <Input_reads> -d <Database_Dir> -p 2 -r <Ref_genome_Dir> -o <Output_Dir>`<BR/>\n  \n `<Ref_genome_Dir>` refer to the dir of reference genomes of identified clusters or all strains used to build the database. \n   `python StrainScan.py -i <Input_reads> -d <Database_Dir> -e 1 -o <Output_Dir>`<BR/> \n"
      },
      "source": "https://raw.githubusercontent.com/liaoherui/strainScan/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8840977796369346,
      "result": {
        "original_header": "Version: V1.0.14 (update at 2023-10-13)",
        "type": "Text_excerpt",
        "value": "Command (Not bioconda)    |\tCommand (bioconda)\n------------ | ------------- \npython StrainScan.py -h | strainscan -h\npython StrainScan_build.py -h | strainscan_build -h \nYou can also use bash scripts in the folder \"Download_DB_script\" to download the pre-built databases from Google drive. For example,\n \n `cd Download_DB_script`<BR/>\n `sh ecoli_db.sh`<BR/> \n  `python StrainScan_build.py -i <Input_Genomes> -o <Database_Dir>`<BR/>\n<BR/>eg:\n  `python StrainScan_build.py -i Test_genomes -o DB_Small`<BR/> \n   `python StrainScan.py -i <Input_reads> -d <Database_Dir> -e 1 -o <Output_Dir>`<BR/> \n### Full command-line options \n"
      },
      "source": "https://raw.githubusercontent.com/liaoherui/strainScan/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/liaoherui/StrainScan/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bacterial-genomes, k-mers, metagenomics, reference-based, strains"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2021 Ray\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/liaoherui/strainScan/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "StrainScan"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "liaoherui"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 330863,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 3814,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 2298,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 201,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/liaoherui/strainScan/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependencies:",
        "parent_header": [
          "StrainScan"
        ],
        "type": "Text_excerpt",
        "value": "* Python ==3.7.x\n* R\n* Sibeliaz ==1.2.2 (https://github.com/medvedevgroup/SibeliaZ)\n* Required python package: numpy==1.17.3, pandas==1.0.1, biopython==1.74, scipy==1.3.1, scikit-learn==0.23.1, bidict==0.21.3, treelib==1.6.1\n\nMake sure these programs have been installed before using StrainScan. \n"
      },
      "source": "https://raw.githubusercontent.com/liaoherui/strainScan/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 00:11:08",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 38
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "StrainScan"
        ],
        "type": "Text_excerpt",
        "value": "One example about database construction and identification commands can be found in \"<b>test_run.sh</b>\".\n"
      },
      "source": "https://raw.githubusercontent.com/liaoherui/strainScan/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Use StrainScan to build your own custom database.<BR/>",
        "parent_header": [
          "StrainScan",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "  `python StrainScan_build.py -i <Input_Genomes> -o <Database_Dir>`<BR/>\n<BR/>eg:\n  `python StrainScan_build.py -i Test_genomes -o DB_Small`<BR/>\n\n(Note: input fasta can be gzipped format)\n"
      },
      "source": "https://raw.githubusercontent.com/liaoherui/strainScan/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Use StrainScan to build your own custom database with custom clustering file.",
        "parent_header": [
          "StrainScan",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "  `python StrainScan_build.py -i <Input_Genomes> -c <Cluster_file> -o <Database_Dir>`<BR/>\n  <BR/> The data format of the input clustering file can be found in the demo file `Custom_cluster_demo/custom_cls.txt`, where the first column is the cluster ID, the second column is the cluster size, and the last column is the prefix of the reference genomes in the cluster.\n  "
      },
      "source": "https://raw.githubusercontent.com/liaoherui/strainScan/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Use StrainScan_subsample to subsample your large-scale strains with high redundancy.",
        "parent_header": [
          "StrainScan",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "   `python StrainScan_subsample.py -i <Input_Genomes> -o <Output_Dir>`<BR/>\n  <BR/> If you have large-scale strains with high redundancy and you want to remove the redundancy. Then you can use this script, which utilizes dashing and hierarchical clustering to subsample strains efficiently. The subsampled strains can be found in `<Output_Dir>/Rep_ref` and clustering information can be found in `<Output_Dir>/Cls_res`. More parameters can be found using  `python StrainScan_subsample.py -h`.\n\n---------------------------------------------------------------------------"
      },
      "source": "https://raw.githubusercontent.com/liaoherui/strainScan/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Use StrainScan to identify bacterial strains in short reads.",
        "parent_header": [
          "StrainScan",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "  `python StrainScan.py -i <Input_reads> -d <Database_Dir> -o <Output_Dir>`<BR/>\n<BR/>eg:\n  `python StrainScan.py -i Sim_Data/GCF_003812785.fq -d DB_Small -o Test_Sim/GCF_003812785`<BR/>\n or\n  `python StrainScan.py -i Sim_Data_mul/GCA_000144385_5X_GCF_008868325_5X.fq -d  DB_Small -o Test_Sim/GCA_000144385_5X_GCF_008868325_5X `<BR/>\n  \n  PE reads (can be gzipped FASTQ format)<BR/>\n   `python StrainScan.py -i GCF_003812785_1.fq.gz -j GCF_003812785_2.fq.gz -d DB_Small -o Test_Sim/GCF_003812785`<BR/>\n   \nNote: if the sequencing depth of targeted strains is super low (e.g., <1X), then you may get \"Warning: No clusters can be detected!\". In this case, you can use parameter \"-b\" to output the probability of detecting a strain (cluster) in low-depth samples. The higher the probability, the more likely the strain (cluster) is to be present.<BR/>\n    eg:\n    `python StrainScan.py -i <Input_reads> -d <Database_Dir> -b 1 -o <Output_Dir>`<BR/>\n  \n  \n"
      },
      "source": "https://raw.githubusercontent.com/liaoherui/strainScan/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Use StrainScan to identify plasmids of bacterial strains in short reads.",
        "parent_header": [
          "StrainScan",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "  option-1: identify possible plasmids by using contigs <100000 bp:<BR/>\n  `python StrainScan.py -i <Input_reads> -d <Database_Dir> -p 1 -r <Ref_genome_Dir> -o <Output_Dir>`<BR/>\n  \n  option-2: identify possible plasmids (or possible strains) using reference genomes provided by \"-r\".<BR/>\n  `python StrainScan.py -i <Input_reads> -d <Database_Dir> -p 2 -r <Ref_genome_Dir> -o <Output_Dir>`<BR/>\n  \n `<Ref_genome_Dir>` refer to the dir of reference genomes of identified clusters or all strains used to build the database.\n"
      },
      "source": "https://raw.githubusercontent.com/liaoherui/strainScan/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Use StrainScan to identify bacterial strains in short reads under extraRegion_mode.",
        "parent_header": [
          "StrainScan",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "This mode will search possible strains and return strains with extra regions (could be different genes, SNVs or SVs to the possible strains) covered. If there is a novel strain not in the database, then its closest relative can be one specific strain while its partial regions (we call them \"extraRegion\" ) in the genome can be similar to other strains. In this case, this mode can search its closest relative and return strains with \"extraRegion\" covered for downstream analysis. <BR/>\n\n   `python StrainScan.py -i <Input_reads> -d <Database_Dir> -e 1 -o <Output_Dir>`<BR/>\n"
      },
      "source": "https://raw.githubusercontent.com/liaoherui/strainScan/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Full command-line options",
        "parent_header": [
          "StrainScan",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "\nIdentification - StrainScan.py (Default k-mer size: 31)\n```\nStrainScan - A kmer-based strain-level identification tool.\n\nExample: python StrainScan.py -i  <Input_reads> -d <Database_Dir> -o <Output_Dir>\n\nrequired arguments:\n    -i, --input_fastq             Input fastq data.\n    -j, --input_fastq_2\t\t  Input fastq data (for pair-end data).\n    -d, --database_dir            Path of StrainScan database.\n\noptional arguments:\n    -h, --help                    Show help message and exit.\n    -o, --output_dir              The output directory. (Default: ./StrainScan_Result)\n    -k, --kmer_size               The size of k-mer, should be odd number. (Default: k=31)\n    -l, --low_dep                 This parameter can be set to \"1\" if the sequencing depth of input data is very low (e.g. < 5x). For super low depth ( < 1x ), you can use \"-l 2\" (default: -l 0)\n    -b, --strain_prob\t\t  If this parameter is set to 1, then the algorithm will output the probabolity of detecting a strain (or cluster) in low-depth (e.g. <1x) samples.  (default: -b 0)\n    -p,\t--plasmid_mode\t\t  If this parameter is set to 1, the intra-cluster searching process will search possible plasmids using short contigs (<100000 bp) in strain genomes, which are likely to be plasmids. \n                                  If this parameter is set to 2, the intra-cluster searching process will search possible plasmids or strains using given reference genomes by \"-r\".\n    \t\t\t\t  Reference genome sequences (-r) are required if this mode is used. (default: -p 0)\n    -r, --ref_genome\t\t  The dir of reference genomes of identified cluster or all strains. If plasmid_mode is used, then this parameter is required.\n    -e, --extraRegion_mode\t  If this parameter is set to 1, the intra-cluster searching process will search possible strains and return strains with extra regions (could be different genes, SNVs or SVs to the possible strains) covered. (default: -e 0)\n    -s, --minimum_snv_num         The minimum number of SNVs during the iterative matrix multiplication at Layer-2 identification. (Default: s=40)\n```\nBuild database - StrainScan_build.py (Default k-mer size: 31)\n```\nStrainScan - A kmer-based strain-level identification tool.\n\nExample:  python StrainScan_build.py -i <Input_genomes> -o <Database_Dir>\n\nrequired arguments:\n     -i, --input_fasta             The path of input genomes. (\"fasta\" format)\n     \noptional arguments:\n     -o, --output_dir              The output directory of constructed database. (Default: ./StrainScan_DB)\n     -c, --cls_file\t\t   The custom clustering file provided by user.\n     -k, --kmer_size               The size of k-mer, should be odd number. (Default: k=31)\n     -t, --threads\t\t   The threads used to build the database. (default: t=1)\n     -u, --uk_num                  The maximum number of unique k-mers in each genome to extract. (Default: 100000)\n     -g, --gk_ratio                The ratio of group-specific k-mers to extract. (Default: g=1.0)        \n     -m, --strainest_sample        If this parameter is 1, then the program will search joint kmer sets from msa generated by Strainest. To use this parameter, you have to make sure Strainest can run normally. (Default: 0)\n     -e, --memory_efficient\t   If this parameter is 1, then the program will build the database with the memory efficient mode.\n     -n, --mink_cutoff             Minimum k-mer number cutoff in a node of the cluster search tree (CST). (Default: n=1000)\n     -x, --maxk_cutoff             Maximum k-mer number cutoff in a node of the cluster search tree (CST). (Default: x=30000)\n     -r, --maxn_cutoff             Maximum cluster number for node reconstruction of the cluster search tree(CST). (Default: r=3000)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/liaoherui/strainScan/main/README.md",
      "technique": "header_analysis"
    }
  ]
}