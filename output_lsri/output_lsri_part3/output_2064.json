{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Reference",
        "type": "Text_excerpt",
        "value": "Most of ClaMSA was written by Darvin Mertsch.  \n\nPlease cite:  \n[End-to-end Learning of Evolutionary Models to Find Coding Regions in Genome Alignments](https://doi.org/10.1093/bioinformatics/btac028), Darvin Mertsch and Mario Stanke, *Bioinformatics*, btac028, published 21 Jan 2022  \n\n[bioRxiv preprint](https://www.biorxiv.org/content/10.1101/2021.03.09.434414v1)\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/clamsa/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Gaius-Augustus/clamsa"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-03-09T09:35:23Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-08-06T07:57:20Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ClaMSA (Classify Multiple Sequence Alignments). "
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9990076413860951,
      "result": {
        "original_header": "ClaMSA - **Cla**ssify **M**ultiple **S**equence **A**lignments",
        "type": "Text_excerpt",
        "value": "ClaMSA is tool that uses machine learning to classify sequences that are related to each other via a tree. It takes as input a tree and a multiple sequence alignment (MSA) of sequences and outputs probabilities that the MSA belongs to given classes.\nIt is currently trained and tested to classify sequences of codons (= triplets of DNA characters) into coding (1) or non-coding (0).\nIt builds on TensorFlow and a custom layer for Continuous-Time Markov Chains (CTMC) and **trains a set of rate matrices** for a classification task. \n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/clamsa/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9944848743181859,
      "result": {
        "original_header": "Input Tree Construction",
        "type": "Text_excerpt",
        "value": "For codon MSA classification we recommend that you construct a tree the following way:\n  1. Construct a set of codon MSAs just as you would do for prediction. You only need **positive** examples, i.e. alignments of actual coding sequences. One option to compile such a set is [AUGUSTUS-CGP](https://github.com/Gaius-Augustus/Augustus/blob/master/docs/EXONCAND-MSAS-CGP.md).\n  2. Construct a tree with MrBayes using a *codon model* as described in the [supplementary material to below paper](https://www.biorxiv.org/content/biorxiv/early/2021/03/10/2021.03.09.434414/DC1/embed/media-1.pdf?download=true). \n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/clamsa/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8979744168832408,
      "result": {
        "original_header": "Training",
        "type": "Text_excerpt",
        "value": "ClaMSA can be trained for a classification task on a training set of labeled MSAs.  \nSee [test/train.sh](test/train.sh) for more explanations and the command line that ClaMSA was trained with. \n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/clamsa/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Gaius-Augustus/clamsa/tree/master/docs"
      },
      "technique": "file_exploration"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Gaius-Augustus/clamsa/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Gaius-Augustus/clamsa/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Gaius-Augustus/clamsa"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ClaMSA - Classify Multiple Sequence Alignments"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/clamsa/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Gaius-Augustus/clamsa/master/utilities/make_wig_track.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Gaius-Augustus/clamsa/master/utilities/make_all_wig_tracks.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Gaius-Augustus/clamsa/master/data/download_vert_test.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Gaius-Augustus/clamsa/master/data/download_fly_vert_yeast_train.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Gaius-Augustus/clamsa/master/examples/msa1-2.png"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/clamsa/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "Download ClaMSA with\n```console\ngit clone --recurse-submodules https://github.com/Gaius-Augustus/clamsa.git\n```\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/clamsa/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.8503086275023783,
      "result": {
        "original_header": "Input Tree Construction",
        "type": "Text_excerpt",
        "value": "For codon MSA classification we recommend that you construct a tree the following way:\n  1. Construct a set of codon MSAs just as you would do for prediction. You only need **positive** examples, i.e. alignments of actual coding sequences. One option to compile such a set is [AUGUSTUS-CGP](https://github.com/Gaius-Augustus/Augustus/blob/master/docs/EXONCAND-MSAS-CGP.md).\n  2. Construct a tree with MrBayes using a *codon model* as described in the [supplementary material to below paper](https://www.biorxiv.org/content/biorxiv/early/2021/03/10/2021.03.09.434414/DC1/embed/media-1.pdf?download=true). \n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/clamsa/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Gaius-Augustus/clamsa/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "clamsa"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "Gaius-Augustus"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 240603,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 15878,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 679,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Gaius-Augustus/clamsa/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirements",
        "type": "Text_excerpt",
        "value": "  Python modules\n - tensorflow >= 2.0\n - biopython\n - regex\n - newick\n - tqdm\n - pandas\n - protobuf3-to-dict\n - matplotlib\n - seaborn\n\nInstall requirements with\n```console\npip3 install tensorflow biopython regex newick tqdm pandas protobuf3-to-dict matplotlib seaborn\n```\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/clamsa/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 07:32:58",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 11
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Example Classification",
        "type": "Text_excerpt",
        "value": "The commands\n```console\ncd clamsa\n\n./clamsa.py predict fasta examples/msa.lst --clades examples/example_tree.nwk --use_codons\n```\noutput the table\n```\npath                    clamsa\nexamples/msa1.fa        0.9539\nexamples/msa2.fa        0.1667\n```\nHere, the two toy example alignments `msa1`, `msa2` pictured above are predicted to precoding with probabilities 0.9539 and 0.1667, respectively.  \nSee the [usage of prediction](docs/usage-predict.md) for an explanation of the command line structure.  \nSee [test/predict.sh](test/predict.sh) for more explanations and a realistical application.\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/clamsa/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Train and Test Example Data",
        "type": "Text_excerpt",
        "value": "Obtain\n  1. codon alignment training data from a fly, vertebrate and yeast clade in tfrecords format and\n  2. codon alignment test data from vertebrates in fasta format with\n  \n```konsole\ncd data\n./download_fly_vert_yeast_train.sh\n./download_vert_test.sh\n```\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/clamsa/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Usages",
        "type": "Text_excerpt",
        "value": "  - [clamsa predict](docs/usage-predict.md)\n  - [clamsa train](docs/usage-train.md)\n  - [clamsa convert](docs/conversion.md) (MSA conversion)\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/clamsa/master/README.md",
      "technique": "header_analysis"
    }
  ]
}