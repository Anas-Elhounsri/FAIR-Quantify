{
  "application_domain": [
    {
      "confidence": 79.4,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "author": "Sam, Deepak Babu and Peri, Skand Vishwanath and Narayanan Sundararaman, Mukuntha,  and Kamath, Amogh and Babu, R. Venkatesh",
        "format": "bibtex",
        "title": "Locate, Size and Count: Accurately Resolving People in Dense Crowds via Detection",
        "type": "Text_excerpt",
        "value": "@article{LSCCNN20,\n    year = {2020},\n    journal = {IEEE Transactions on Pattern Analysis and Machine Intelligence},\n    title = {Locate, Size and Count: Accurately Resolving People in Dense Crowds via Detection},\n    author = {Sam, Deepak Babu and Peri, Skand Vishwanath and Narayanan Sundararaman, Mukuntha,  and Kamath, Amogh and Babu, R. Venkatesh},\n}"
      },
      "source": "https://raw.githubusercontent.com/val-iisc/lsc-cnn/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/val-iisc/lsc-cnn"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contact",
        "parent_header": [
          "Test Outputs"
        ],
        "type": "Text_excerpt",
        "value": "For further queries, please mail at `pvskand <at> protonmail <dot> com`.\n\n"
      },
      "source": "https://raw.githubusercontent.com/val-iisc/lsc-cnn/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-05-30T05:30:41Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-07-25T10:27:34Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9812052957227252,
      "result": {
        "original_header": "LSC-CNN",
        "type": "Text_excerpt",
        "value": "This repository is the pytorch implementation for the crowd counting model, LSC-CNN, proposed in the paper - [**Locate, Size and Count: Accurately Resolving People in Dense Crowds via Detection**](https://arxiv.org/pdf/1906.07538.pdf). \n"
      },
      "source": "https://raw.githubusercontent.com/val-iisc/lsc-cnn/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8562288489561711,
      "result": {
        "type": "Text_excerpt",
        "value": "If you find this work useful in your research, please consider citing the paper:\n \n"
      },
      "source": "https://raw.githubusercontent.com/val-iisc/lsc-cnn/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8791036963877266,
      "result": {
        "original_header": "Test Outputs",
        "type": "Text_excerpt",
        "value": "Test outputs consist of box predictions for validation set at `models/dump` and that of the test set at `models/dump_test`.\n \n"
      },
      "source": "https://raw.githubusercontent.com/val-iisc/lsc-cnn/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dataset Download",
        "type": "Text_excerpt",
        "value": "Download Shanghaitech dataset from [here](https://github.com/desenzhou/ShanghaiTechDataset).\nDownload UCF-QNRF dataset from [here](http://crcv.ucf.edu/data/ucf-qnrf/).\n\nPlace the dataset in `../dataset/` folder. (`dataset` and `lsc-cnn` folders should have the same parent directory). So the directory structure should look like the following:\n```\n-- lsc-cnn\n   -- network.py\n   -- main.py\n   -- ....\n-- dataset\n   --STpart_A\n     -- test_data\n\t    -- ground-truth\n\t    -- images\n     -- train_data\n\t    -- ground-truth\n\t    -- images\n  --UCF-QNRF\n    --train_data\n      -- ...\n    --test_data\n      -- ...\n```\n"
      },
      "source": "https://raw.githubusercontent.com/val-iisc/lsc-cnn/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Pretrained Models",
        "parent_header": [
          "Dataset Download"
        ],
        "type": "Text_excerpt",
        "value": "The pretrained models for testing can be downloaded from [here](https://drive.google.com/open?id=1hlJg4ux_BI3z_8zRdwwE7oQoumzSYIEg).\n\nFor evaluating on any pretrained model, place the corresponding `models` from the aforementioned link to `lsc-cnn` folder and follow instructions in Testing section.\n"
      },
      "source": "https://raw.githubusercontent.com/val-iisc/lsc-cnn/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/val-iisc/lsc-cnn/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 55
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/val-iisc/lsc-cnn/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "val-iisc/lsc-cnn"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "LSC-CNN"
      },
      "source": "https://raw.githubusercontent.com/val-iisc/lsc-cnn/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/val-iisc/lsc-cnn/master/utils/mle_function/script.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Preparing the Dataset",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Run the following code to dump the dataset for `lsc-cnn`\n\n`python main.py --dataset=\"parta\" --gpu=<gpu_number>`\n\n*Warning : If the dataset is already prepared, this command would start the training!*\n\n*Dataset dump size for `ST_PartA is ~13 GB`, for `QNRF is ~150 GB`, and for `ST_PartB is ~35 GB`, so make sure there is sufficient disk space before training/testing.*\n"
      },
      "source": "https://raw.githubusercontent.com/val-iisc/lsc-cnn/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/val-iisc/lsc-cnn/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "crowd-counting, head-detection"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2019 Video Analytics Lab -- IISc\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/val-iisc/lsc-cnn/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "lsc-cnn"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "val-iisc"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 109375,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 123,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/val-iisc/lsc-cnn/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_papers": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/pdf/1906.07538.pdf"
      },
      "source": "https://raw.githubusercontent.com/val-iisc/lsc-cnn/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirements",
        "type": "Text_excerpt",
        "value": "We strongly recommend to run the codes in NVidia-Docker. Install both `docker` and `nvidia-docker` (please find instructions from their respective installation pages).\nAfter the docker installations, pull pytorch docker image with the following command:\n`docker pull nvcr.io/nvidia/pytorch:18.04-py3`\nand run the image using the command:\n`nvidia-docker run --rm -ti --ipc=host nvcr.io/nvidia/pytorch:18.04-py3`\n\nFurther software requirements are listed in `requirements.txt`. \n\nTo install them type, `pip install -r requirements.txt`\n\nThe code has been run and tested on `Python 3.6.3`, `Ubuntu 14.04.5 LTS` and `Cuda 9.0, V9.0.176`. \n\n_Please NOTE that `Python 2.7` is not supported and the code would ONLY work on `Python 3` versions._\n"
      },
      "source": "https://raw.githubusercontent.com/val-iisc/lsc-cnn/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 13:15:13",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 210
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "type": "Text_excerpt",
        "value": " Clone the repository.\n`git clone https://github.com/val-iisc/lsc-cnn.git`\n\n`cd lsc-cnn`\n\n`pip install -r requirements.txt`\n\nDownload `models` folders to `lsc-cnn`.\n\nDownload Imagenet pretrained VGG weights from [here](https://drive.google.com/open?id=1hlJg4ux_BI3z_8zRdwwE7oQoumzSYIEg) (Download the `imagenet_vgg_weights` folder) and place it in the parent directory of `lsc-cnn`.\n"
      },
      "source": "https://raw.githubusercontent.com/val-iisc/lsc-cnn/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Training",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "- For training `lsc-cnn` run:\n\n`python main.py --dataset=\"parta\" --gpu=2 --start-epoch=0 --epochs=30`\n\n```\n--dataset = parta / ucfqnrf / partb\n--gpu = GPU number\n--epochs = Number of epochs to train. [For QNRF set --epochs=50]\n--patches = Number of patches to crop per image [For QNRF use --patches=30, for other crowd counting dataset default parameter --patches=100 works.]\n```\n"
      },
      "source": "https://raw.githubusercontent.com/val-iisc/lsc-cnn/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "For testing on Part-A",
        "parent_header": [
          "Usage",
          "Testing"
        ],
        "type": "Text_excerpt",
        "value": "`python main.py --dataset=\"parta\" --gpu=2 --start-epoch=13 --epochs=13 --threshold=0.21`\n"
      },
      "source": "https://raw.githubusercontent.com/val-iisc/lsc-cnn/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "For testing on Part-B",
        "parent_header": [
          "Usage",
          "Testing"
        ],
        "type": "Text_excerpt",
        "value": "`python main.py --dataset=\"partb\" --gpu=2 --start-epoch=24 --epochs=24 --threshold=0.25`\n"
      },
      "source": "https://raw.githubusercontent.com/val-iisc/lsc-cnn/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "For testing on QNRF",
        "parent_header": [
          "Usage",
          "Testing"
        ],
        "type": "Text_excerpt",
        "value": "`python main.py --dataset=\"ucfqnrf\" --gpu=2 --start-epoch=46 --epochs=46 --threshold=0.20`\n\n- All the metrics are displayed once the above code completes its run.\n\n- To do a threshold test, just remove the `--threshold` flag:\n\nFor example:\n\n\n`python main.py --dataset=\"parta\" --gpu=2 --start-epoch=13 --epochs=13`\n\nUse the `--mle` option to compute the mean localization error. If using MLE, compile the function first:\n```\ncd utils/mle_function\n./script.sh\n```\nThis generates an `error_function.so` file in the `./lsc-cnn` directory which is used by `main.py` for computing the MLE metric.\n"
      },
      "source": "https://raw.githubusercontent.com/val-iisc/lsc-cnn/master/README.md",
      "technique": "header_analysis"
    }
  ]
}