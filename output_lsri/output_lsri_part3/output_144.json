{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/wilkelab/Opfi"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Contributing\nThank you for your interest in contributing to Opfi. Contribututions can take many forms, including:\n\n- Reporting a bug\n- Discussing the current state of the code\n- Submitting a fix\n- Proposing new features\n\n## Issues\nIssues should be used to report problems or bugs with the library, to request new features, or to discuss potential changes before PRs are created.\n\nGood bug reports have:\n\n- A summary of the issue\n- Specific steps to reproduce the problem, preferably in the form of code examples\n- A description of expected behavior\n- A description of actual behavior\n\n## Pull Requests\nIn general, we use [Github Flow](https://guides.github.com/introduction/flow/index.html). This means that all changes happen through Pull Requests:\n\n1. Fork the repository to your own Github account\n2. Clone the project to your machine\n3. Create a branch locally with a succinct but descriptive name\n4. Commit changes to the branch\n5. Push changes to your fork\n6. Open a PR in our repository and include a description of the changes and a reference to the issue the PR addresses\n\n## Coding Style\nContributors should attempt to adhere to the [PEP8](https://www.python.org/dev/peps/pep-0008/) style guide when possible, although this is not currently strictly enforced. At a minimum, new contributions should follow a style that is consistent with the preexisting code base. \n\n## Testing\nWe use the [pytest](https://docs.pytest.org/en/6.2.x/) framework for creating unit tests. Please write tests for any new code contributed to this project.\n\n## License\nBy contributing, you agree that your contributions will be licensed under its MIT License.\n\n## Code of Conduct\nWe take our open source community seriously and hold ourselves and other contributors to high standards of communication. By participating and contributing to this project, you agree to uphold our [Code of Conduct](https://github.com/wilkelab/Opfi/blob/contributing-guide/CODE-OF-CONDUCT.md).\n\n## Attribution\nThis document was adapted from the [General Contributing Guidelines](https://github.com/extendr/rextendr/blob/main/CONTRIBUTING.md) of the rextendr project, and from the [contributing template](https://gist.github.com/briandk/3d2e8b3ec8daf5a27a62) developed by [briandk](https://gist.github.com/briandk).\n"
      },
      "source": "https://raw.githubusercontent.com/wilkelab/Opfi/master/CONTRIBUTING.md",
      "technique": "file_exploration"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-01-05T21:38:37Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-07-14T09:53:46Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A Python package for discovery, annotation, and analysis of gene clusters in genomics or metagenomics data sets."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9964546963338592,
      "result": {
        "original_header": "Opfi",
        "type": "Text_excerpt",
        "value": "A python package for discovery, annotation, and analysis of gene clusters in genomics or metagenomics datasets.\n \n"
      },
      "source": "https://raw.githubusercontent.com/wilkelab/Opfi/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.849408635478085,
      "result": {
        "original_header": "Gene Finder",
        "type": "Text_excerpt",
        "value": "Gene Finder iteratively executes homology searches to identify gene clusters of interest. Below is an example script that sets up a search for putative CRISPR-Cas systems in the Rippkaea orientalis PCC 8802 (cyanobacteria) genome. Data inputs are provided in the Opfi tutorial (`tutorials/tutorial.ipynb`).\n```python\nfrom gene_finder.pipeline import Pipeline\nimport os\n\ngenomic_data = \"GCF_000024045.1_ASM2404v1_genomic.fna.gz\"\n\np = Pipeline()\np.add_seed_step(db=\"cas1\", name=\"cas1\", e_val=0.001, blast_type=\"PROT\", num_threads=1)\np.add_filter_step(db=\"cas_all\", name=\"cas_all\", e_val=0.001, blast_type=\"PROT\", num_threads=1)\np.add_crispr_step()\n\n# use the input filename as the job id\njob_id = os.path.basename(genomic_data)\nresults = p.run(job_id=job_id, data=genomic_data, min_prot_len=90, span=10000, gzip=True)\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/wilkelab/Opfi/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9930851674008576,
      "result": {
        "original_header": "Operon Analyzer",
        "type": "Text_excerpt",
        "value": "Operon Analyzer filters results from Gene Finder, and identifies promising candidate operons according to a given set of criteria. It also contains some tools for visualizing candidates and performing basic statistics. \nPlease note that the use of the word \"operon\" throughout this library is somewhat of an artifact from early development. At this time, Opfi does not predict whether a candidate system represents a true operon, that is, a set of genes under the control of a single promoter. Although a candidate gene cluster may certainly qualify as an operon, it is currently up to the user to make that distinction. \n \n"
      },
      "source": "https://raw.githubusercontent.com/wilkelab/Opfi/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9893218998177691,
      "result": {
        "original_header": "Analysis",
        "type": "Text_excerpt",
        "value": "The analysis module provides tools to identify operons that conform to certain rules, such as requiring that they contain a certain gene, or that two genes are within a given distance of each other (the full list is given below). CSV output is written to stdout, which identifies the outcome of the analysis for each putative operon. \nRules defined with the `RuleSet` determine whether an operon should be considered a candidate for further analysis. \nFilters defined with the `FilterSet` help define which features to consider when evaluating rules. You might, for example, want to exclude any operon containing a particular gene, but if a copy of that gene coincidentally exists 5 kb from the true operon, you might want to ignore it for the purposes of evaluating your rules.  \n"
      },
      "source": "https://raw.githubusercontent.com/wilkelab/Opfi/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9840235145598918,
      "result": {
        "original_header": "List of available rules",
        "type": "Text_excerpt",
        "value": "  * `exclude(feature_name: str)`: Forbid the presence of a particular feature. \n  * `require(feature_name: str)`: Require the presence of a particular feature. \n  * `max_distance(feature1_name: str, feature2_name: str, distance_bp: int)`: The two given features must be no further than `distance_bp` base pairs apart. Requires exactly one of each feature to be present.\n  * `at_least_n_bp_from_anything(feature_name: str, distance_bp: int)`: Requires that a feature be at least `distance_bp` base pairs away from any other feature.  This is mostly useful for eliminating overlapping features.\n  * `at_most_n_bp_from_anything(feature_name: str, distance_bp: int)`: A given feature must be within `distance_bp` base pairs of another feature. Requires exactly one matching feature to be present. Returns `False` if the given feature is the only feature.\n  * `same_orientation(exceptions: Optional[List[str]] = None)`: All features in the operon must have the same orientation.\n  * `contains_any_set_of_features(sets: List[List[str]])`: Returns `True` if the operon contains features with all of the names in at least one of the lists. Useful for determining if an operon contains all of the essential genes for a particular system, for example.\n  * `contains_exactly_one_of(feature1_name: str, feature2_name: str)`: An exclusive-or of the presence of two features.  That is, one of the features must be present and the other must not.\n  * `contains_at_least_n_features(feature_names: List[str], feature_count: int, count_multiple_copies: bool = False)`: The operon must contain at least `feature_count` features in the list. By default, a matching feature that appears multiple times in the operon will only be counted once; to count multiple copies of the same feature, set `count_multiple_copies=True`.\n  * `contains_group(self, feature_names: List[str], max_gap_distance_bp: int, require_same_orientation: bool)`: The operon must contain a contiguous set of features (in any order) separated by no more than max_gap_distance_bp. Optionally, the user may require that the features must all have the same orientation.\n  * `maximum_size(self, feature_name: str, max_bp: int, all_matching_features_must_pass: bool = False, regex: bool = False)`: The operon must contain at least one feature with feature_name with a size (in base pairs) of max_bp or smaller. If all_matching_features_must_pass is True, every matching Feature must be at least max_bp long.\n  * `minimum_size(self, feature_name: str, min_bp: int, all_matching_features_must_pass: bool = False, regex: bool = False)`: The operon must contain at least one feature with feature_name with a size (in base pairs) of min_bp or larger. If all_matching_features_must_pass is True, every matching Feature must be at least min_bp long. \n  * `custom(rule: 'Rule')`: Add a rule with a user-defined function. \n \n"
      },
      "source": "https://raw.githubusercontent.com/wilkelab/Opfi/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9818157609866022,
      "result": {
        "original_header": "List of available filters",
        "type": "Text_excerpt",
        "value": "  * `must_be_within_n_bp_of_anything(distance_bp: int)`: If a feature is very far away from anything it's probably not part of an operon.\n  * `must_be_within_n_bp_of_feature(feature_name: str, distance_bp: int)`: There may be situations where two features always appear near each other in functional operons.  \n  * `pick_overlapping_features_by_bit_score(minimum_overlap_threshold: float)`: If two features overlap by more than `minimum_overlap_threshold`, the one with the lower bit score is ignored.\n  * `custom(filt: 'Filter')`: Add a filter with a user-defined function. \n \n"
      },
      "source": "https://raw.githubusercontent.com/wilkelab/Opfi/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8262063101867668,
      "result": {
        "original_header": "Analysis Output",
        "type": "Text_excerpt",
        "value": "Each line of the CSV will contain an accession ID and the path to the file that contains it, the contig coordinates, and whether it passed or failed the given rules. If it passed, the last column will contain the word `pass` only. Otherwise it will start with `fail` followed by a comma-delimited list of the serialized rules that it failed to adhere to (with the name and parameters that were passed to the method).\n \n"
      },
      "source": "https://raw.githubusercontent.com/wilkelab/Opfi/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9800066710781985,
      "result": {
        "original_header": "Visualization",
        "type": "Text_excerpt",
        "value": "Interesting operons can be visualized with a simple gene diagram. It is up to the user to decide how to define this, though this sample script below creates diagrams for all operons that passed all given rules:\n```python\nimport sys\nfrom operon_analyzer.analyze import load_analyzed_operons\nfrom operon_analyzer.visualize import build_operon_dictionary, plot_operons\n\nanalysis_csv, pipeline_csv, image_directory = sys.argv[1:]\ngood_operons = []\n\nwith open(pipeline_csv) as f:\n    operons = build_operon_dictionary(f)\nwith open(analysis_csv) as f:\n    for contig, filename, start, end, result in load_analyzed_operons(f):\n        if result[0] != 'pass':\n            continue\n        op = operons.get((contig, filename, start, end))\n        if op is None:\n            continue\n        good_operons.append(op)\nplot_operons(good_operons, image_directory)\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/wilkelab/Opfi/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9102509558455902,
      "result": {
        "original_header": "Overview Statistics",
        "type": "Text_excerpt",
        "value": "Some basic tools are provided to inspect the nature of operons that did not pass all given rules. The intent here is to help researchers determine if their filtering is too aggressive (or not aggressive enough), and to get an overall better feel for the data. \nSimple bar plots can be produced as follows:\n```python\nimport sys\nimport matplotlib.pyplot as plt\nfrom operon_analyzer.analyze import load_analyzed_operons\nfrom operon_analyzer.overview import load_counts\n\n\ndef plot_bar_chart(filename, title, data, rotate=True):\n    fig, ax = plt.subplots()\n    x = [str(d[0]).replace(\":\", \"\\n\") for d in data]\n    y = [d[1] for d in data]\n    ax.bar(x, y, edgecolor='k')\n    if rotate:\n        plt.xticks(rotation=90)\n    ax.set_ylabel(\"Count\")\n    ax.set_title(title)\n    plt.savefig(\"%s.png\" % filename, bbox_inches='tight')\n    plt.close()\n\n\nif __name__ == '__main__':\n    unique_rule_violated, failed_rule_occurrences, rule_failure_counts = load_counts(sys.stdin)\n    plot_bar_chart(\"sole-failure.png\", \"Number of times that each rule\\nwas the only one that failed\", sorted(unique_rule_violated.items()))\n    plot_bar_chart(\"total-failures\", \"Total number of rule failures\", sorted(failed_rule_occurrences.items()))\n    plot_bar_chart(\"failures-at-each-contig\", \"Number of rules failed at each contig\", sorted(rule_failure_counts.items()), rotate=False)\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/wilkelab/Opfi/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://opfi.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/wilkelab/Opfi/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/wilkelab/Opfi/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/wilkelab/Opfi/master/tutorials/tutorial.ipynb"
      },
      "source": "https://raw.githubusercontent.com/wilkelab/Opfi/master/tutorials/tutorial.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/wilkelab/Opfi/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "wilkelab/Opfi"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Opfi"
      },
      "source": "https://raw.githubusercontent.com/wilkelab/Opfi/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "Opfi"
        ],
        "type": "Text_excerpt",
        "value": "The recommended way to install Opfi is with [Bioconda](https://bioconda.github.io/), which requires the [conda](https://docs.conda.io/en/latest/) package manager. This will install Opfi and all of its dependencies (which you can read more about [here](https://opfi.readthedocs.io/en/latest/installation.html)).\n\nCurrently, Bioconda supports only 64-bit Linux and Mac OS. Windows users can still install Opfi with pip (see below); however, the complete installation procedure has not been fully tested on a Windows system. \n"
      },
      "source": "https://raw.githubusercontent.com/wilkelab/Opfi/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Install with conda (Linux and Mac OS only)",
        "parent_header": [
          "Opfi",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "First, set up conda and Bioconda following the [quickstart](https://bioconda.github.io/user/install.html) guide. Once this is done, run:\n\n```\nconda install -c bioconda opfi\n```\n\nAnd that's it! Note that this will install Opfi in the conda environment that is currently active. To create a fresh environment with Opfi installed, do:\n\n```\nconda create --name opfi-env -c bioconda opfi\nconda activate opfi-env\n```\n"
      },
      "source": "https://raw.githubusercontent.com/wilkelab/Opfi/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Install with pip",
        "parent_header": [
          "Opfi",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "This method does not automatically install non-Python dependencies, so they will need to be installed separately, following their individual installation instructions. A complete list of required software is available [here](https://opfi.readthedocs.io/en/latest/installation.html#dependencies). Once this step is complete, install Opfi with pip by running:\n\n```\npip install opfi\n```\n\nFor information about installing for development, check out the [documentation site](https://opfi.readthedocs.io/en/latest/installation.html).\n"
      },
      "source": "https://raw.githubusercontent.com/wilkelab/Opfi/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8572698353796248,
      "result": {
        "original_header": "Gene Finder",
        "type": "Text_excerpt",
        "value": "Gene Finder iteratively executes homology searches to identify gene clusters of interest. Below is an example script that sets up a search for putative CRISPR-Cas systems in the Rippkaea orientalis PCC 8802 (cyanobacteria) genome. Data inputs are provided in the Opfi tutorial (`tutorials/tutorial.ipynb`).\n```python\nfrom gene_finder.pipeline import Pipeline\nimport os\n\ngenomic_data = \"GCF_000024045.1_ASM2404v1_genomic.fna.gz\"\n\np = Pipeline()\np.add_seed_step(db=\"cas1\", name=\"cas1\", e_val=0.001, blast_type=\"PROT\", num_threads=1)\np.add_filter_step(db=\"cas_all\", name=\"cas_all\", e_val=0.001, blast_type=\"PROT\", num_threads=1)\np.add_crispr_step()\n\n# use the input filename as the job id\njob_id = os.path.basename(genomic_data)\nresults = p.run(job_id=job_id, data=genomic_data, min_prot_len=90, span=10000, gzip=True)\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/wilkelab/Opfi/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8641520580390085,
      "result": {
        "original_header": "Overview Statistics",
        "type": "Text_excerpt",
        "value": "Simple bar plots can be produced as follows:\n```python\nimport sys\nimport matplotlib.pyplot as plt\nfrom operon_analyzer.analyze import load_analyzed_operons\nfrom operon_analyzer.overview import load_counts\n\n\ndef plot_bar_chart(filename, title, data, rotate=True):\n    fig, ax = plt.subplots()\n    x = [str(d[0]).replace(\":\", \"\\n\") for d in data]\n    y = [d[1] for d in data]\n    ax.bar(x, y, edgecolor='k')\n    if rotate:\n        plt.xticks(rotation=90)\n    ax.set_ylabel(\"Count\")\n    ax.set_title(title)\n    plt.savefig(\"%s.png\" % filename, bbox_inches='tight')\n    plt.close()\n\n\nif __name__ == '__main__':\n    unique_rule_violated, failed_rule_occurrences, rule_failure_counts = load_counts(sys.stdin)\n    plot_bar_chart(\"sole-failure.png\", \"Number of times that each rule\\nwas the only one that failed\", sorted(unique_rule_violated.items()))\n    plot_bar_chart(\"total-failures\", \"Total number of rule failures\", sorted(failed_rule_occurrences.items()))\n    plot_bar_chart(\"failures-at-each-contig\", \"Number of rules failed at each contig\", sorted(rule_failure_counts.items()), rotate=False)\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/wilkelab/Opfi/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/wilkelab/Opfi/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2020 Alexis M Hill, James R Rybarski\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
      },
      "source": "https://raw.githubusercontent.com/wilkelab/Opfi/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Opfi"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "wilkelab"
      },
      "technique": "GitHub_API"
    }
  ],
  "package_distribution": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://pypi.org/project/opfi/"
      },
      "source": "https://raw.githubusercontent.com/wilkelab/Opfi/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 305929,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 16979,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "TeX",
        "size": 16542,
        "type": "Programming_language",
        "value": "TeX"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/wilkelab/Opfi/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "alexismhill3",
          "type": "User"
        },
        "date_created": "2021-10-26T18:59:54Z",
        "date_published": "2021-10-26T19:02:24Z",
        "description": "Update version number for JOSS publication and archive.",
        "html_url": "https://github.com/wilkelab/Opfi/releases/tag/0.1.2",
        "name": "Version 0.1.2",
        "release_id": 52084045,
        "tag": "0.1.2",
        "tarball_url": "https://api.github.com/repos/wilkelab/Opfi/tarball/0.1.2",
        "type": "Release",
        "url": "https://api.github.com/repos/wilkelab/Opfi/releases/52084045",
        "value": "https://api.github.com/repos/wilkelab/Opfi/releases/52084045",
        "zipball_url": "https://api.github.com/repos/wilkelab/Opfi/zipball/0.1.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "alexismhill3",
          "type": "User"
        },
        "date_created": "2021-09-09T14:46:03Z",
        "date_published": "2021-09-09T14:54:59Z",
        "description": "Pypi badge added to documentation. ",
        "html_url": "https://github.com/wilkelab/Opfi/releases/tag/0.1.1",
        "name": "Version 0.1.1",
        "release_id": 49285953,
        "tag": "0.1.1",
        "tarball_url": "https://api.github.com/repos/wilkelab/Opfi/tarball/0.1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/wilkelab/Opfi/releases/49285953",
        "value": "https://api.github.com/repos/wilkelab/Opfi/releases/49285953",
        "zipball_url": "https://api.github.com/repos/wilkelab/Opfi/zipball/0.1.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "alexismhill3",
          "type": "User"
        },
        "date_created": "2021-08-20T01:33:22Z",
        "date_published": "2021-08-20T01:40:23Z",
        "description": "Initial release.",
        "html_url": "https://github.com/wilkelab/Opfi/releases/tag/0.1.0",
        "name": "Version 0.1.0",
        "release_id": 48152493,
        "tag": "0.1.0",
        "tarball_url": "https://api.github.com/repos/wilkelab/Opfi/tarball/0.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/wilkelab/Opfi/releases/48152493",
        "value": "https://api.github.com/repos/wilkelab/Opfi/releases/48152493",
        "zipball_url": "https://api.github.com/repos/wilkelab/Opfi/zipball/0.1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-05 23:55:32",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 21
      },
      "technique": "GitHub_API"
    }
  ]
}