{
  "application_domain": [
    {
      "confidence": 5.39,
      "result": {
        "type": "String",
        "value": "Audio"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ZhaiLab-SUSTech/FLEPSeq"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-09-17T04:19:49Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-26T01:31:31Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "The analysis pipeline for FLEP-seq"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.8899453065229759,
      "result": {
        "original_header": "FLEPSeq",
        "type": "Text_excerpt",
        "value": "The analysis pipeline for FLEP-seq \nThis toolset can be used to analyze the sequencing data generated either by Nanopore or by PacBio using the FLEP-seq method. \n"
      },
      "source": "https://raw.githubusercontent.com/ZhaiLab-SUSTech/FLEPSeq/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9289287550069592,
      "result": {
        "original_header": "Nanopore data analysis pipeline",
        "type": "Text_excerpt",
        "value": "You can use MinKNOW to perform real-time basecalling while sequencing, or use the GPU version of Guppy to speed up basecalling after sequencing. Both MinKNOW and Guppy are available via Nanopore community site (https://community.nanoporetech.com). Command-line for running Guppy basecalling is as follow:\n```\n$ guppy_basecaller -i raw_fast5_dir -s out_fast5_dir -c dna_r9.4.1_450bps_hac.cfg --recursive --fast5_out --disable_pings --qscore_filtering --device \"cuda:all:100%\"\n```\n2.\tConvert FASTQ files to FASTA format\n```\n$ python fastqdir2fasta.py --indir path/to/fastq_pass --out all.fasta\n```\n3.\tUse minimap2 to map reads to reference genome\n```\n$ minimap2 -ax splice --secondary=no genome.fasta all.fasta > tmp.sam\n```\nCAUTION: For the organisms with short introns, such as Arabidopsis, it might be better to use the parameter \u201c-G\u201d to set the max intron length, for example, \u201c-G 12000\u201d. You also can set \u201c-t number_of_threads\u201d to use more threads to speed up.\n```\n$ samtools sort -o mapped.bam tmp.sam\n$ samtools index mapped.bam\n$ rm tmp.sam\n```\n4.\t(Optional) Remove rRNA and tRNA derived reads\n```\n$ python filter_rRNA_bam.py --inbam mapped.bam --inbed rRNAtRNAetc.bed --out clean.bam\n$ samtools index clean.bam\n```\n5.\tFind 3\u2019 adapter in reads\n```\n$ python adapterFinder.py --inbam clean.bam --inseq all.fasta --out adapter.result.txt --threads 36\n```\n6.\tIdentify polyA tail and estimate its length\n```\n$ python PolyACaller.py --inadapter adapter.result.txt --summary sequencing_summary.txt --fast5dir fast5_dir --out polyA_tail.result.txt --threads 36\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/ZhaiLab-SUSTech/FLEPSeq/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9643549997097957,
      "result": {
        "original_header": "PacBio data analysis pipeline",
        "type": "Text_excerpt",
        "value": "It is the most time-consuming step in PacBio data analysis. For the data we used (~12M subreads), it requires ~30 h to generate consensus sequences (Hifi-reads) on Intel Xeon 6140 CPU at 2.3GHz.\n```\n$ ccs --num-threads 36 --min-rq 0.9 --report-file ccs.report input.subreads.bam ccs.bam\n```\n2.\tRemove adapter using lima\n```\n$ echo '>primer_3p\\nAAGCAGTGGTATCAACGCAGAGTACATTGATGGTGCCTACAG\\n>primer_5p\\nAAGCAGTGGTATCAACGCAGAGTACATGGG\\n' > primer.fasta\n$ lima -j 36 ccs.bam primer.fasta lima.bam --isoseq --peek-guess\n$ python lima_bam2fasta.py --infile lima.primer_3p--primer_5p.bam --out all.fasta\n```\n \n3.\tUse minimap2 to map reads to reference genome, and remove rRNA and tRNA derived reads.  \n7.\tAnalyze splicing kinetics, and calculate intron retention ratio of polyadenylated transcripts. \n"
      },
      "source": "https://raw.githubusercontent.com/ZhaiLab-SUSTech/FLEPSeq/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.97221389774213,
      "result": {
        "original_header": "Illumina data analysis pipeline",
        "type": "Text_excerpt",
        "value": "For strand-specific library, you can set \u201c--strand_flag 1\u201d when the right-most end of the fragment is the first sequenced and set \u201c--strand_flag 2\u201d when the left-most end of fragment is the first sequenced. \n"
      },
      "source": "https://raw.githubusercontent.com/ZhaiLab-SUSTech/FLEPSeq/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9584330879401729,
      "result": {
        "original_header": "Output",
        "type": "Text_excerpt",
        "value": "The most important output is read.info.txt generated by `merge_read_info.R`. It is a plain file seprated by Tab including these important columns:  \n\nPS:\nAll columns in the read.info.txt file (most of columns are only used for script developing)\n```\nread_core_id            de4d183f-9187-43e5-ab03-56ce63e7de88,chr1,7030,8176\n\n#generate by extract_read_info.py\n\nchr                     chr1         #chromatin name \nread_start              7030         #alignment start 1-based\nread_end                8176         #alignment end\nread_strand             +            #alignment strand\nread_exon_total_num     4            #total number of read exon\nmRNA                    AT1G01020.1  #mRNA name       \nmRNA_intron_num         8            #total intron number of mRNA\nmRNA_start              6788                \nmRNA_end                9130                \nmRNA_strand             -                   \nmRNA_length             2343                \nmRNA_pos5               954          #the 5' end position of read relative to the 5' end of mRNA (0-based) \nmRNA_pos3               -242         #the 3' end poistion of read relative to the 3' end of mRNA (0-based)\nrel_mRNA_pos5           954          #see below. indicate wrong annotation of mapping if rel_mRNA_pos5 != mRNA_pos5\nrel_mRNA_pos3           -242         #see below. indicate wrong annotation of mapping if rel_mRNA_pos3 != mRNA_pos3\ntotal_coverage          797          #total coverage length with mRNA\nf_read_exon_num         4            #see below\nf_feature_type          intron\nf_feature_num           3\nf_feature_length        248\nf_pos5                  59\nf_pos3                  226\nl_read_exon_num         1\nl_feature_type          exon\nl_feature_num           9\nl_feature_length        282\nl_pos5                  0\nl_pos3                  -242\nend_type                2            #see below\nretention_introns       3:4:6        #retained intron, seprated by \":\", the intron number is ordered from 5' mRNA to 3' mRNA\nretention_intron_num    3            #the total number of retained intron\nspan_intron_num         6            #the total number of introns the read overlapping (3-8). The first span intron is f_feature_num, the last span intron is l_feature_num - 1.\n\n#generate by PolyACaller.py or pacbio_find_polyA.py\n#polya_start_raw, polya_end_raw, polya_score is only generated for Nanopore data\npolya_start_raw     \t1185         #The raw signal event index of potential polyA region\npolya_end_raw       \t1924\t     #The raw signal event index of potential polyA region\npolya_start_base    \t73\npolya_end_base      \t77\npolya_length        \t83.34\npolya_score         \t740\npolya_start_raw\t\t\t\t\t\t\npolya_end_raw\n\n#generate by adapterFinder.py (only for Nanopore data)\nread_align_strand         +            \nrna_strand                -            \nread_length               839          # read total length\nprimer_type\t              R-F          \ngenome_align_start        71\ngenome_align_end          820\nprimer_score              1\npolyA_type                T            # not shown for now\nf_primer_type             R\nf_primer_start            1\nf_align_end               70\nr_primer_type             F\nr_primer_start            1\nr_align_start             821\n\n#generated by merge_read_info.R\nend3_alignment_score      -1           # only for Nanopore data\nend_polyA_type\t\t\t  3\t\nend5ss_type\t\t\t\t  0\ntype\t\t\t\t\t  elongating\n``` \nDue to that one read may be mapped to multiple positions, we merge read id and mapping information to\nrepresent each alignment:\n```\nread_id:      7fab6cbf-a9ed-4427-951f-741515ddba0b\nread_core_id: 7fab6cbf-a9ed-4427-951f-741515ddba0b,chr1,7026,8687\n```\n \nThe exon information of each read from bam file based on the 6th column (CIGAR string).\nOnly consider N (represent intron junction) in CIGAR string, not consider indel.\nSplit read  to exon by junction.\n```\nexon1   intron1    exon2   intron2     exon3   intron3    exon4\n>>>>> - - - - - - >>>>>>> - - - - - - >>>>>>>> - - - - - >>>>>>>> gene  (>>>>> for exon, - - - - for intron)\n    >>>>>>>>>>>>>>>>>>>>>- - - - - -  >>>>>>>>>>>>>>>>>           read  (CIGAR: 110M60N70M)\n      read_exon1(110bp)      (60bp)    read_exon2(70bp)\n```\n \n3. mRNA_pos5, mRNA_pos3, rel_mRNA_pos5, and rel_mRNA_pos3 \nWe don't care about the alignment direction of read, because we haven't identify the 3' adapter position,  thus we don't know the orignal mRNA strand of this read.\n```\ngene (length: l)  ----->>>>>>>>>>>>>>>>>>>>>>---------      >>>> repesent gene\n                  |    |   |              | |    |\n                 -4    0   4             -2 0    5\n                  (mRNA pos5)            (mRNA pos3)\n\n    gene          -----<<<<<<<<<<<<<<<<<<<<<<---------\n                       |                    |\n                  mRNA pos3             mRNA_pos5\n```\nrel_mRNA_pos3, rel_mRNA_pos5:\n```\n >>>> exon,  .... intron\nmRNA            >>>>>>>>>>>.......>>>>>>>>>         \nread >>>......>>>>>>>>>>>>>.......>>>>>>>>>>>>......>>>>>>>>>>\n     |        |                              |               |\n     |        |                              |               |\n  mRNA_pos5   |                              |          mRNA_pos3\n          rel_mRNA_pos5                 rel_mRNA_pos3\n```\n \nThe inconsistent results (<1% reads in Arabidopsis.) between rel_mRNA_pos and mRNA_pos indicate the wrong mapping or wrong transcription annotation, this pipeline only consider the represent transcripts, it should be removed (in merge step). This is mainly due to alternative splicing or mismapping of polyA You can try set less max intron length during mapping step, but it is not suitable for genome with long introns. And also we can remove the two side mapping read exon based on polyA information. \nf_feature: the 5' end feature overlapping with this read, in this example, it is the first exon: exon1, thus `f_feature_type` is \"exon\", `f_feature_num` is 1, it is the first read exon of the read overlapping with it, thus `f_read_exon_num` is 1. f_pos5 and f_pos3 is the position of the read exon 1 relative the exon1, the value is like \nmRNA_pos5 and mRNA_pos3. \nl_feature: the 3' end feature overlapping with this read, in this example, it is the second intron: intron2, thus `l_feature_type` is \"intron\", `l_feature_num` is 2, it is the second read exon of the read overlapping with it,  thus `l_read_exon_num` is 2. \nfor each intron overlapping with this read: \n(a) if it is the f_feature: it would be retented. but this may be affected by 3' SS.\n\t\t\n(b) if it is the l_feature: the transcription hasn't been finished. not retented. \n\ncoordinate of read: f_align_end, r_align_start, genome_align_start, genome_align_end \ncoordinate of adapter: f_primer_start, r_primer_start\n```\nif r_primer_start if 4, the first two base of r_primer is not mapped to read\n\nfor example:\n                                             AAGGGAGAGAGAG\n                                                ||||||||||\nread1      f_primer--------------------------->GGAGAGAGAG\n```\n \nread adapter type based on the primer types of both ends. for example: F-R indicate the 5' primer is F, the 3' primer is F. Each kind of primer type is assigned a score, and also can predict the rna_strand by primer type, The score 1 or 2 is reliable. \n"
      },
      "source": "https://raw.githubusercontent.com/ZhaiLab-SUSTech/FLEPSeq/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9087880968041815,
      "result": {
        "original_header": "generated by IRCaller.py",
        "type": "Text_excerpt",
        "value": "Output: tab-sperated file. including clolumns:\nintron_id\t            AT1G01020.1_intron4\nchr_name\t            chr1\nintron_start\t        7836      # 1-based\nintron_end\t            7941\nintron_strand\t        -\nintron_coverage_ratio\t1\na\t                    126\nb\t                    231\nab\t                    103\nc\t                    215\no\t                    20\nt\t                    695\niratio\t                0.545014521  # unspliced ratio of intron\nsratio\t                0.416263311  # spliced ratio of intron\noratio\t                0.038722168  # the ratio of alternative splicing\no1ratio\t                0.013552759\no2ratio\t                0.011616651\no1_type\t                o||1|:7829-7941\no1_count\t            7\no2_type\t                o|1|0|:7902-8235\no2_count\t            6\nother_o\t                o|1|0|:7907-8235=3;o|1|1|:7650-8235=2;o||1|:7832-7941=1;o|1||:7836-8235=1 \n\na, b, ab, c, o columns store the count of read with specific read type:\n--------...............--------- gene structure\n      --...............---       c\n      -----............---       o  #alternative splicing\n      --------                   a\n                   ----------    b\n      -------------------------  ab\n            -------              i\n            \nt = a + b + c + o + ab\niratio = (a + b + 2*ab)/(a + b + 2*ab + 2*o + 2*c)\nsratio = 2*c/(a + b + 2*ab + 2*o + 2*c)\noratio = 2*o/(a + b + 2*ab + 2*o + 2*c) \no: alternative splicing\nThe format of alternative splicing type:\n    o|x1|x2|x3:start1-end1:< start2-end2 >\n    x1, x2 can be one value of \"\" or \"0\" or \"1\"\n        \"\" means splicing at the annotated splicing site\n        \"0\" means splicing downstream the 5' splicing site or upstream the 3' splicing site\n        \"1\" means splicing upstream the 3' splicing site or downstream the 5' splicing site\n    x1 for 5' splicing site\n    x2 for 3' splicing site\n    x3 for exon skipping, can be one value of \"\" or \"e1\" or \"e2\" or ...\n    x3 only care about the exon skipping occuring inner the annotated intron. the nubmer after\n        \"e\" means the number of skipped exons.\n    start1-end1 means the junction position of the read overlapped with the annotated intron.\n    If one read has multiple junction positions, they are sperated by \":\".\nConsidering that some introns have multiple alternative splicing types. The most frequent \ntype is marked as o1, the second frequent type is marked as o2. Their type, count and ratio are \nrecored in `o1ratio`, `o2_ratio`, `o1_count`, `o2_count`, `o1_type`, `o2_count` columns. The \ninforamtion of all other types are recored in `other_o` column in type3=count3;type4=cout4 format. \nSome exampels of alternative splicing type: \n"
      },
      "source": "https://raw.githubusercontent.com/ZhaiLab-SUSTech/FLEPSeq/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ZhaiLab-SUSTech/FLEPSeq/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ZhaiLab-SUSTech/FLEPSeq/master/script/FLEP.figure_example.ipynb"
      },
      "source": "https://raw.githubusercontent.com/ZhaiLab-SUSTech/FLEPSeq/master/script/FLEP.figure_example.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ZhaiLab-SUSTech/FLEPSeq/master/script/alignment_visualization.ipynb"
      },
      "source": "https://raw.githubusercontent.com/ZhaiLab-SUSTech/FLEPSeq/master/script/alignment_visualization.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 8
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ZhaiLab-SUSTech/FLEPSeq/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ZhaiLab-SUSTech/FLEPSeq"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "FLEPSeq"
      },
      "source": "https://raw.githubusercontent.com/ZhaiLab-SUSTech/FLEPSeq/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9984586446885844,
      "result": {
        "original_header": "FLEPSeq",
        "type": "Text_excerpt",
        "value": "The example scripts for ploting: https://nbviewer.jupyter.org/github/ZhaiLab-SUSTech/FLEPSeq/blob/master/script/FLEP.figure_example.ipynb \nReference: https://www.nature.com/articles/s41477-020-0688-1 \n"
      },
      "source": "https://raw.githubusercontent.com/ZhaiLab-SUSTech/FLEPSeq/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999993142683039,
      "result": {
        "original_header": "Nanopore data analysis pipeline",
        "type": "Text_excerpt",
        "value": "You can use MinKNOW to perform real-time basecalling while sequencing, or use the GPU version of Guppy to speed up basecalling after sequencing. Both MinKNOW and Guppy are available via Nanopore community site (https://community.nanoporetech.com). Command-line for running Guppy basecalling is as follow:\n```\n$ guppy_basecaller -i raw_fast5_dir -s out_fast5_dir -c dna_r9.4.1_450bps_hac.cfg --recursive --fast5_out --disable_pings --qscore_filtering --device \"cuda:all:100%\"\n```\n2.\tConvert FASTQ files to FASTA format\n```\n$ python fastqdir2fasta.py --indir path/to/fastq_pass --out all.fasta\n```\n3.\tUse minimap2 to map reads to reference genome\n```\n$ minimap2 -ax splice --secondary=no genome.fasta all.fasta > tmp.sam\n```\nCAUTION: For the organisms with short introns, such as Arabidopsis, it might be better to use the parameter \u201c-G\u201d to set the max intron length, for example, \u201c-G 12000\u201d. You also can set \u201c-t number_of_threads\u201d to use more threads to speed up.\n```\n$ samtools sort -o mapped.bam tmp.sam\n$ samtools index mapped.bam\n$ rm tmp.sam\n```\n4.\t(Optional) Remove rRNA and tRNA derived reads\n```\n$ python filter_rRNA_bam.py --inbam mapped.bam --inbed rRNAtRNAetc.bed --out clean.bam\n$ samtools index clean.bam\n```\n5.\tFind 3\u2019 adapter in reads\n```\n$ python adapterFinder.py --inbam clean.bam --inseq all.fasta --out adapter.result.txt --threads 36\n```\n6.\tIdentify polyA tail and estimate its length\n```\n$ python PolyACaller.py --inadapter adapter.result.txt --summary sequencing_summary.txt --fast5dir fast5_dir --out polyA_tail.result.txt --threads 36\n```\n \nThis pipeline will produce a table containing intron retention information and Pol II position.\n```\n$ python extract_read_info.py --inbam clean.bam --inbed lib/exon_intron_pos.repr.bed --out read_info.result.txt\n```\n8.\tMerge the above analysis results\n```\n$ Rscript merge_read_info.R --type Nanopore --inreadinfo read_info.result.txt --inadapter adapter.result.txt --inpolya polyA_tail.result.txt --out read.info.txt\n```\n9.\tAnalyze splicing kinetics\n```\n$ python prepare_data_for_splice_kinetics.py --inreadinfo read.info.txt --inbed lib/exon_intron_pos.repr.bed --out read.intron.pos.splicing.txt\n$ Rscript plot_intron_splicing_kinetics.R --inrelpos read.intron.pos.splicing.txt --inreadinfo read.info.txt --inintron lib/select_introns.txt --out read.splicing_kinetics.txt --pdf read.splicing_kinetics.pdf \n```\n10.\tCalculate intron retention ratio of polyadenylated transcripts\n```\n$ Rscript cal_polya_transcript_ir.R --inrelpos read.intron.pos.splicing.txt --inreadinfo read.info.txt --outrna mRNA.incompletely_spliced_ratio.txt --outintron intron.unspliced_ratio.txt\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/ZhaiLab-SUSTech/FLEPSeq/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999772500724798,
      "result": {
        "original_header": "Illumina data analysis pipeline",
        "type": "Text_excerpt",
        "value": "1. Use hisat2 to map reads to reference genome.\n```\n$ hisat2 -x /lib_path/ath_hisat2_genome -p 20 --min-intronlen 20 --max-intronlen 12000  --dta  --time  -1 R1.fastq.gz -2 R2.fastq.gz  -S hisat2.sam\nsamtools sort -o hisat2.bam hisat2.sam\nsamtools index hisat2.bam\nrm hisat2.sam\n```\n2. Use picard to remove PCR duplication reads.\n```\n$ java -jar /soft_path/picard.jar MarkDuplicates REMOVE_DUPLICATES=true SORTING_COLLECTION_SIZE_RATIO=0.01 I=hisat2.bam O=hisat2.markdump.bam M=hisat2.markdump.txt\nsamtools index hisat2.markdump.bam\n```\n3. Calculate the unspliced and spliced ratio of introns.\n```\n$ python ASCaller.py -i hisat2.markdump.bam -o irratio.txt --file_intron_pos lib/intron_pos.repr.txt --strand_flag 0 --min_overlap 6\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/ZhaiLab-SUSTech/FLEPSeq/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9178847310009101,
      "result": {
        "original_header": "Output",
        "type": "Text_excerpt",
        "value": "Note: Logically, the read_core_id may be also not uniquely, thus need to remove duplication. (At merge step) \nNote: f may be F or R, r may be F or R.\n```\ngenome 5\u2019--------------------------------------------------------3'  \nread1      f_primer--------------------------->r_primer\n                   ||                          ||\n                   1|                          |2\n                    3                          4\n\n\\b\nread2      r_primer<---------------------------f_primer\n                   ||                          ||\n                   2|                          |1\n                    4                          3    \n\t\t\t\t\t\t\n1: f_align_end, 2: r_align_start, 3: genome_align_start, 4: genome_align_end \n```                  \n \n(a) no alignment\n       [\"N\", [\"\", \"\", -1, -1, -1, -1, \"\"]]\n\t   \n(b) If \"F\" primer, if primer_start > primer_f_max_start: UF \n(c) if \"R\" primer, if primer_start > primer_r_max_start2: UUR \n"
      },
      "source": "https://raw.githubusercontent.com/ZhaiLab-SUSTech/FLEPSeq/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.9036804724150389,
      "result": {
        "original_header": "Nanopore data analysis pipeline",
        "type": "Text_excerpt",
        "value": "This pipeline will produce a table containing intron retention information and Pol II position.\n```\n$ python extract_read_info.py --inbam clean.bam --inbed lib/exon_intron_pos.repr.bed --out read_info.result.txt\n```\n8.\tMerge the above analysis results\n```\n$ Rscript merge_read_info.R --type Nanopore --inreadinfo read_info.result.txt --inadapter adapter.result.txt --inpolya polyA_tail.result.txt --out read.info.txt\n```\n9.\tAnalyze splicing kinetics\n```\n$ python prepare_data_for_splice_kinetics.py --inreadinfo read.info.txt --inbed lib/exon_intron_pos.repr.bed --out read.intron.pos.splicing.txt\n$ Rscript plot_intron_splicing_kinetics.R --inrelpos read.intron.pos.splicing.txt --inreadinfo read.info.txt --inintron lib/select_introns.txt --out read.splicing_kinetics.txt --pdf read.splicing_kinetics.pdf \n```\n10.\tCalculate intron retention ratio of polyadenylated transcripts\n```\n$ Rscript cal_polya_transcript_ir.R --inrelpos read.intron.pos.splicing.txt --inreadinfo read.info.txt --outrna mRNA.incompletely_spliced_ratio.txt --outintron intron.unspliced_ratio.txt\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/ZhaiLab-SUSTech/FLEPSeq/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8505747538853137,
      "result": {
        "original_header": "PacBio data analysis pipeline",
        "type": "Text_excerpt",
        "value": "4.\tIdentify polyA tail and estimate its length\n```\n$ python pacbio_find_polyA.py --inbam clean.bam --inseq all.fasta --out polyA_tail.result.txt\n```\n \n6.\tMerge the above analysis results\n```\n$ Rscript merge_read_info.R --type PacBio --inreadinfo read_info.result.txt --inpolya polyA_tail.result.txt --out read.info.txt\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/ZhaiLab-SUSTech/FLEPSeq/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ZhaiLab-SUSTech/FLEPSeq/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "FLEPSeq"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "ZhaiLab-SUSTech"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 961138,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 212026,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 13888,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ZhaiLab-SUSTech/FLEPSeq/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Software and package requirements",
        "type": "Text_excerpt",
        "value": "* MinKNOW (MinION software) (https://community.nanoporetech.com/downloads) (required for Nanopore sequencing)\n* Guppy v4.0.11 or above (https://community.nanoporetech.com/downloads) (required for Nanopore data basecalling )\n* CCS (https://github.com/PacificBiosciences/ccs) (required for PacBio data analysis)\n* Lima (https://github.com/PacificBiosciences/barcoding) (required for PacBio data analysis)\n* Minimap2 (https://github.com/lh3/minimap2)\n* SAMtools (http://www.htslib.org/)\n* BLAST+ (https://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/LATEST/) (require for Nanopore data analysis)\n* Python 3.7 or above, and following packages:\n  * Pysam (https://github.com/pysam-developers/pysam)\n  * ont_fast5_api (https://github.com/nanoporetech/ont_fast5_api)\n  * pandas (https://pandas.pydata.org/)\n  * NumPy (https://numpy.org/)\n  * Matplotlib (https://matplotlib.org/)\n  * Joblib (https://github.com/joblib/joblib)\n  * click (https://click.palletsprojects.com/en/7.x/)\n* R 3.5.2 or above, and following packages:\n  * Tidyverse (https://www.tidyverse.org/)\n  * optparse (https://cran.r-project.org/web/packages/optparse/index.html)\n"
      },
      "source": "https://raw.githubusercontent.com/ZhaiLab-SUSTech/FLEPSeq/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-06 03:55:05",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 14
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ]
}