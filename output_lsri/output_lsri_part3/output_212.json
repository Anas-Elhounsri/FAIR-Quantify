{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Credits",
        "parent_header": [
          "AMM, Version 0.1"
        ],
        "type": "Text_excerpt",
        "value": "AMM has been developed by [Harsh Bhatia](http://www.sci.utah.edu/~hbhatia) (hbhatia@llnl.gov), with contributions from [Duong Hoang](https://hoang-dt.github.io/). Other team members with valuable inputs on design include Peer-Timo Bremer, Valerio Pascucci, and Peter Lindstrom.\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/llnl/amm/develop/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/LLNL/AMM"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-10-21T20:52:53Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-03-23T03:56:52Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.988817834584165,
      "result": {
        "original_header": "AMM, Version 0.1",
        "type": "Text_excerpt",
        "value": "**Adaptive Multilinear Meshes (AMMs)** is a new framework to represent piecewise\nmultilinear volumetric data using mixed-precision adaptive meshes. AMM is\ndesigned to reduce in-memory and on-disk data footprint using a spatial\nhierarchy with \"rectangular cuboidal\" cells. AMM also supports mixed-precision\nrepresentation of function values in byte-sized increments. AMM can be\nconstructed through arbitrary data streams. The current version provides several\nexamples of data streams that can be selected through command line. \nFor details on AMM's data structure and representation, please consult the\n[publication](https://ieeexplore.ieee.org/document/9751449).\n \n"
      },
      "source": "https://raw.githubusercontent.com/llnl/amm/develop/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9893350434747642,
      "result": {
        "original_header": "Using AMM",
        "type": "Text_excerpt",
        "value": "There are three modes of inputs to `amm-cli`.\n* `func`: a binary file with `XxYxZ` values of type `u8`, `f32`, or `f64`. Currently, AMM supports `f32` and `f64` (`u8` inputs are cast to `f32`). In this mode, the tool first computes the wavelet coefficients, then computes the stream, and finally passes the stream to AMM creation pipeline.\n* `wcoeffs`: pre-computed wavelet coefficients can be passed directly to the tool as well.\n  - Expected precision: `f32` or `f64`.\n  - Expected size:  `[2^L+1 x 2^L+1 x 2^L+1]`. Note that AMM internally stores a spatial hierarchy that is `power of two plus 1`. Refer the paper to note why this is needed and how its effects are mitigated. Nevertheless, currently, the wavelet coefficients are expected to be given in this expanded domain.\n* `amm`: a pre-computed AMM mesh (stored as`*.vtu` files) can be loaded. Currently, the loading functionality works correctly. This is useful to expand upon and testing iteration capabilities in AMM and improvements in internal representation. \n\nFor detailed information, see the command line options,\n```\n$ ./amm-cli\n\nUsage: ./amm-cli <args>\n\t --input  [file_name] [func/wcoeffs/amm] [dtype]: input filename, type of input, precision of input\n\n                               func:                      input function read from raw binary file of specific datatype (u8, f32, f64)\n                               wcoeffs:                   wavelet coefficients read from raw binary file of specific datatype (f32, f64)\n                               amm:                       AMM read from a vtk unstructued mesh (precision not specified)\n\n                               dtype:                     u8/f32/f64\n\n\t --dims   [X] [Y] [Z=1]:                              dimensions of data [default: Z = 1])\n\n\t --stream [stream_type]:                              type of stream to create\n                               1:                                   by row major\n                               2:                                   by subband row major\n                               3:                                   by coeff wavelet norm\n                               4:                                   by wavelet norm\n                               5:                                   by level\n                               6:                                   by bitplane\n                               7:                                   by magnitude\n\t --chunk  [chunk_size=0] [count/kb]:                  size of each chunks, either as number of coefficients or amount of data (in kb) [default: chunk_size = full stream]\n\t --end    [end_val=0] [count/kb/val]:                 end of the stream, either as number of coefficients, amount of data (in kb), or threshold value of the coefficients [default: end_val = full stream]\n\n\t --rect   [0/1 = 1]:                                  enable rectangular nodes in AMM [default: true]\n\t --improp [0/1 = 0]:                                  enable improper node in AMM [default: false]\n\t --wvlts  [approx/interp = approx]:                   use approximating or interpolating wavelet basis [default: approximating]\n\t --extrap [zero/linear/linlift = linlift]:            extrapolate data using zero-padding, linear extrapolation, or linear-lifting method [default: linear-lifting]\n\t --wnorm  [0/1 = 0]:                                  normalize wavelet basis [default: false]\n\t --wdepth [depth = 1]:                                compute wavelet transform up until the specified depth [default: depth=1]\n\n\t --novalidate                                         do not validate the output\n\t --outpath [path]                                     path for the output vtk file [default: no output]\n\t --lowres                                             also write the lowres function (same path as above)\n\t --wavout [file_name]                                 output the wavelet coefficients to a file\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/llnl/amm/develop/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/llnl/amm/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/LLNL/AMM/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "LLNL/AMM"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/llnl/amm/develop/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "AMM, Version 0.1",
          "Installing AMM"
        ],
        "type": "Text_excerpt",
        "value": "To download and install AMM, please use the following steps.\n```\n$ git clone git@github.com:LLNL/AMM.git\n$ cd AMM\n$ mkdir build; cd build\n$ cmake ../\n$ make -j12\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/llnl/amm/develop/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Customizations to AMM build",
        "parent_header": [
          "AMM, Version 0.1",
          "Installing AMM"
        ],
        "type": "Text_excerpt",
        "value": "By default, all function values are stored at full precision (same as precision\n  of the input data, `float` or `double`). To enable mixed-precision representation,\n  use\n```\n$ cmake -DAMM_ENABLE_PRECISION ../\n```\n\n**Note**: The file `<path_to_clone>/amm/macros.hpp` defines several macros that\nmay be used to further customize the functionality of AMM. For example,\nthe `MAX_DEPTH` of the AMM representation may be reduced if needed.\n\n"
      },
      "source": "https://raw.githubusercontent.com/llnl/amm/develop/README.md",
      "technique": "header_analysis"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8380163459161147,
      "result": {
        "original_header": "Using AMM",
        "type": "Text_excerpt",
        "value": "APP provides a simple command-line interface in the `app` directory. The\napplication `amm-cli` provides options to read a binary file that defines an input function, and creates a vtk unstructured grid output file\n(`*.vtu`). \n"
      },
      "source": "https://raw.githubusercontent.com/llnl/amm/develop/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/LLNL/AMM/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "BSD 3-Clause \"New\" or \"Revised\" License",
        "spdx_id": "BSD-3-Clause",
        "type": "License",
        "url": "https://api.github.com/licenses/bsd-3-clause",
        "value": "https://api.github.com/licenses/bsd-3-clause"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "BSD 3-Clause License\n\nCopyright (c) 2019, Lawrence Livermore National Laboratory\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its\n   contributors may be used to endorse or promote products derived from\n   this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
      },
      "source": "https://raw.githubusercontent.com/llnl/amm/develop/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "parent_header": [
          "AMM, Version 0.1"
        ],
        "type": "Text_excerpt",
        "value": "AMM is released under the terms of BSD-3 license. See the `LICENSE` file for details.\n\n*`LLNL-CODE-777060`*\n"
      },
      "source": "https://raw.githubusercontent.com/llnl/amm/develop/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "AMM"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "LLNL"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 727854,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 3414,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/llnl/amm/develop/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependencies",
        "parent_header": [
          "AMM, Version 0.1",
          "Installing AMM"
        ],
        "type": "Text_excerpt",
        "value": "* AMM requires a `C++` compiler that supports `C++ 17` (tested with `GNU gcc 7.3.0`).\n* AMM uses the [Visualization Toolkit (VTK)](https://www.vtk.org/ \"VTK\") to\noutput AMM meshes (developed with `v 8.1.2`).\n\n"
      },
      "source": "https://raw.githubusercontent.com/llnl/amm/develop/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 00:09:27",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ]
}