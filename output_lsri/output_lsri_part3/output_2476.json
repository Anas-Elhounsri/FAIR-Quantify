{
  "application_domain": [
    {
      "confidence": 29.97,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "author": "Polykovskiy, Daniil and Zhebrak, Alexander and Sanchez-Lengeling, Benjamin and Golovanov, Sergey and Tatanov, Oktai and Belyaev, Stanislav and Kurbanov, Rauf and Artamonov, Aleksey and Aladinskiy, Vladimir and Veselov, Mark and Kadurin, Artur and Johansson, Simon and  Chen, Hongming and Nikolenko, Sergey and Aspuru-Guzik, Alan and Zhavoronkov, Alex",
        "format": "bibtex",
        "title": "{M}olecular {S}ets ({MOSES}): {A} {B}enchmarking {P}latform for {M}olecular {G}eneration {M}odels",
        "type": "Text_excerpt",
        "value": "@article{10.3389/fphar.2020.565644,\n    year = {2020},\n    journal = {Frontiers in Pharmacology},\n    author = {Polykovskiy, Daniil and Zhebrak, Alexander and Sanchez-Lengeling, Benjamin and Golovanov, Sergey and Tatanov, Oktai and Belyaev, Stanislav and Kurbanov, Rauf and Artamonov, Aleksey and Aladinskiy, Vladimir and Veselov, Mark and Kadurin, Artur and Johansson, Simon and  Chen, Hongming and Nikolenko, Sergey and Aspuru-Guzik, Alan and Zhavoronkov, Alex},\n    title = {{M}olecular {S}ets ({MOSES}): {A} {B}enchmarking {P}latform for {M}olecular {G}eneration {M}odels},\n}"
      },
      "source": "https://raw.githubusercontent.com/molecularsets/moses/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/molecularsets/moses"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-11-28T11:51:17Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-03T08:35:30Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Molecular Sets (MOSES): A Benchmarking Platform for Molecular Generation Models"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.92086198076257,
      "result": {
        "original_header": "Benchmarking your models",
        "type": "Text_excerpt",
        "value": "* Add generated samples and metrics to your repository. Run the experiment multiple times to estimate the variance of the metrics. \n"
      },
      "source": "https://raw.githubusercontent.com/molecularsets/moses/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/molecularsets/moses/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 241
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/molecularsets/moses/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "molecularsets/moses"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Molecular Sets (MOSES): A benchmarking platform for molecular generation models"
      },
      "source": "https://raw.githubusercontent.com/molecularsets/moses/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/molecularsets/moses/master/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/molecularsets/moses/master/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/molecularsets/moses/master/install_latentgan_dependencies.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/molecularsets/moses/master/scripts/run_all_models.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/molecularsets/moses/master/images/pipeline.png"
      },
      "source": "https://raw.githubusercontent.com/molecularsets/moses/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/molecularsets/moses/master/images/logP.png"
      },
      "source": "https://raw.githubusercontent.com/molecularsets/moses/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/molecularsets/moses/master/images/SA.png"
      },
      "source": "https://raw.githubusercontent.com/molecularsets/moses/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/molecularsets/moses/master/images/weight.png"
      },
      "source": "https://raw.githubusercontent.com/molecularsets/moses/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/molecularsets/moses/master/images/QED.png"
      },
      "source": "https://raw.githubusercontent.com/molecularsets/moses/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Molecular Sets (MOSES): A benchmarking platform for molecular generation models",
        "type": "Text_excerpt",
        "value": "[![Build Status](https://travis-ci.com/molecularsets/moses.svg?branch=master)](https://travis-ci.com/molecularsets/moses) [![PyPI version](https://badge.fury.io/py/molsets.svg)](https://badge.fury.io/py/molsets)\n\nDeep generative models are rapidly becoming popular for the discovery of new molecules and materials. Such models learn on a large collection of molecular structures and produce novel compounds. In this work, we introduce Molecular Sets (MOSES), a benchmarking platform to support research on machine learning for drug discovery. MOSES implements several popular molecular generation models and provides a set of metrics to evaluate the quality and diversity of generated molecules. With MOSES, we aim to standardize the research on molecular generation and facilitate the sharing and comparison of new models.\n\n__For more details, please refer to the [paper](https://arxiv.org/abs/1811.12823).__\n\nIf you are using MOSES in your research paper, please cite us as\n```\n@article{10.3389/fphar.2020.565644,\n  title={{M}olecular {S}ets ({MOSES}): {A} {B}enchmarking {P}latform for {M}olecular {G}eneration {M}odels},\n  author={Polykovskiy, Daniil and Zhebrak, Alexander and Sanchez-Lengeling, Benjamin and Golovanov, Sergey and Tatanov, Oktai and Belyaev, Stanislav and Kurbanov, Rauf and Artamonov, Aleksey and Aladinskiy, Vladimir and Veselov, Mark and Kadurin, Artur and Johansson, Simon and  Chen, Hongming and Nikolenko, Sergey and Aspuru-Guzik, Alan and Zhavoronkov, Alex},\n  journal={Frontiers in Pharmacology},\n  year={2020}\n}\n```\n\n![pipeline](images/pipeline.png)\n"
      },
      "source": "https://raw.githubusercontent.com/molecularsets/moses/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Dataset",
        "parent_header": [
          "Molecular Sets (MOSES): A benchmarking platform for molecular generation models"
        ],
        "type": "Text_excerpt",
        "value": "We propose [a benchmarking dataset](https://media.githubusercontent.com/media/molecularsets/moses/master/data/dataset_v1.csv) refined from the ZINC database.\n\nThe set is based on the ZINC Clean Leads collection. It contains 4,591,276 molecules in total, filtered by molecular weight in the range from 250 to 350 Daltons, a number of rotatable bonds not greater than 7, and XlogP less than or equal to 3.5. We removed molecules containing charged atoms or atoms besides C, N, S, O, F, Cl, Br, H or cycles longer than 8 atoms. The molecules were filtered via medicinal chemistry filters (MCFs) and PAINS filters.\n\nThe dataset contains 1,936,962 molecular structures. For experiments, we split the dataset into a training, test and scaffold test sets containing around 1.6M, 176k, and 176k molecules respectively. The scaffold test set contains unique Bemis-Murcko scaffolds that were not present in the training and test sets. We use this set to assess how well the model can generate previously unobserved scaffolds.\n"
      },
      "source": "https://raw.githubusercontent.com/molecularsets/moses/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Models",
        "parent_header": [
          "Molecular Sets (MOSES): A benchmarking platform for molecular generation models"
        ],
        "type": "Text_excerpt",
        "value": "* [Character-level Recurrent Neural Network (CharRNN)](./moses/char_rnn/README.md)\n* [Variational Autoencoder (VAE)](./moses/vae/README.md)\n* [Adversarial Autoencoder (AAE)](./moses/aae/README.md)\n* [Junction Tree Variational Autoencoder (JTN-VAE)](https://github.com/wengong-jin/icml18-jtnn/tree/master/fast_molvae)\n* [Latent Generative Adversarial Network (LatentGAN)](./moses/latentgan/README.md)\n\n"
      },
      "source": "https://raw.githubusercontent.com/molecularsets/moses/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Metrics",
        "parent_header": [
          "Molecular Sets (MOSES): A benchmarking platform for molecular generation models"
        ],
        "type": "Text_excerpt",
        "value": "Besides standard uniqueness and validity metrics, MOSES provides other metrics to access the overall quality of generated molecules. Fragment similarity (Frag) and Scaffold similarity (Scaff) are cosine distances between vectors of fragment or scaffold frequencies correspondingly of the generated and test sets. Nearest neighbor similarity (SNN) is the average similarity of generated molecules to the nearest molecule from the test set. Internal diversity (IntDiv) is an average pairwise similarity of generated molecules. Fr\u00e9chet ChemNet Distance (FCD) measures the difference in distributions of last layer activations of ChemNet. Novelty is a fraction of unique valid generated molecules not present in the training set.\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th rowspan=\"2\">Model</th>\n      <th rowspan=\"2\">Valid (\u2191)</th>\n      <th rowspan=\"2\">Unique@1k (\u2191)</th>\n      <th rowspan=\"2\">Unique@10k (\u2191)</th>\n      <th colspan=\"2\">FCD (\u2193)</th>\n      <th colspan=\"2\">SNN (\u2191)</th>\n      <th colspan=\"2\">Frag (\u2191)</th>\n      <th colspan=\"2\">Scaf (\u2191)</th>\n      <th rowspan=\"2\">IntDiv (\u2191)</th>\n      <th rowspan=\"2\">IntDiv2 (\u2191)</th>\n      <th rowspan=\"2\">Filters (\u2191)</th>\n      <th rowspan=\"2\">Novelty (\u2191)</th>\n    </tr>\n    <tr>\n      <th>Test</th>\n      <th>TestSF</th>\n      <th>Test</th>\n      <th>TestSF</th>\n      <th>Test</th>\n      <th>TestSF</th>\n      <th>Test</th>\n      <th>TestSF</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><i>Train</i></td>\n      <td><i>1.0</i></td>\n      <td><i>1.0</i></td>\n      <td><i>1.0</i></td>\n      <td><i>0.008</i></td>\n      <td><i>0.4755</i></td>\n      <td><i>0.6419</i></td>\n      <td><i>0.5859</i></td>\n      <td><i>1.0</i></td>\n      <td><i>0.9986</i></td>\n      <td><i>0.9907</i></td>\n      <td><i>0.0</i></td>\n      <td><i>0.8567</i></td>\n      <td><i>0.8508</i></td>\n      <td><i>1.0</i></td>\n      <td><i>1.0</i></td>\n    </tr>\n    <tr>\n      <td>HMM</td>\n      <td>0.076\u00b10.0322</td>\n      <td>0.623\u00b10.1224</td>\n      <td>0.5671\u00b10.1424</td>\n      <td>24.4661\u00b12.5251</td>\n      <td>25.4312\u00b12.5599</td>\n      <td>0.3876\u00b10.0107</td>\n      <td>0.3795\u00b10.0107</td>\n      <td>0.5754\u00b10.1224</td>\n      <td>0.5681\u00b10.1218</td>\n      <td>0.2065\u00b10.0481</td>\n      <td>0.049\u00b10.018</td>\n      <td>0.8466\u00b10.0403</td>\n      <td>0.8104\u00b10.0507</td>\n      <td>0.9024\u00b10.0489</td>\n      <td><b>0.9994\u00b10.001</b></td>\n    </tr>\n    <tr>\n      <td>NGram</td>\n      <td>0.2376\u00b10.0025</td>\n      <td>0.974\u00b10.0108</td>\n      <td>0.9217\u00b10.0019</td>\n      <td>5.5069\u00b10.1027</td>\n      <td>6.2306\u00b10.0966</td>\n      <td>0.5209\u00b10.001</td>\n      <td>0.4997\u00b10.0005</td>\n      <td>0.9846\u00b10.0012</td>\n      <td>0.9815\u00b10.0012</td>\n      <td>0.5302\u00b10.0163</td>\n      <td>0.0977\u00b10.0142</td>\n      <td><b>0.8738\u00b10.0002</b></td>\n      <td>0.8644\u00b10.0002</td>\n      <td>0.9582\u00b10.001</td>\n      <td>0.9694\u00b10.001</td>\n    </tr>\n    <tr>\n      <td>Combinatorial</td>\n      <td><b>1.0\u00b10.0</b></td>\n      <td>0.9983\u00b10.0015</td>\n      <td>0.9909\u00b10.0009</td>\n      <td>4.2375\u00b10.037</td>\n      <td>4.5113\u00b10.0274</td>\n      <td>0.4514\u00b10.0003</td>\n      <td>0.4388\u00b10.0002</td>\n      <td>0.9912\u00b10.0004</td>\n      <td>0.9904\u00b10.0003</td>\n      <td>0.4445\u00b10.0056</td>\n      <td>0.0865\u00b10.0027</td>\n      <td>0.8732\u00b10.0002</td>\n      <td><b>0.8666\u00b10.0002</b></td>\n      <td>0.9557\u00b10.0018</td>\n      <td>0.9878\u00b10.0008</td>\n    </tr>\n    <tr>\n      <td>CharRNN</td>\n      <td>0.9748\u00b10.0264</td>\n      <td><b>1.0\u00b10.0</b></td>\n      <td>0.9994\u00b10.0003</td>\n      <td><b>0.0732\u00b10.0247</b></td>\n      <td><b>0.5204\u00b10.0379</b></td>\n      <td>0.6015\u00b10.0206</td>\n      <td>0.5649\u00b10.0142</td>\n      <td><b>0.9998\u00b10.0002</b></td>\n      <td>0.9983\u00b10.0003</td>\n      <td>0.9242\u00b10.0058</td>\n      <td><b>0.1101\u00b10.0081</b></td>\n      <td>0.8562\u00b10.0005</td>\n      <td>0.8503\u00b10.0005</td>\n      <td>0.9943\u00b10.0034</td>\n      <td>0.8419\u00b10.0509</td>\n    </tr>\n    <tr>\n      <td>AAE</td>\n      <td>0.9368\u00b10.0341</td>\n      <td><b>1.0\u00b10.0</b></td>\n      <td>0.9973\u00b10.002</td>\n      <td>0.5555\u00b10.2033</td>\n      <td>1.0572\u00b10.2375</td>\n      <td>0.6081\u00b10.0043</td>\n      <td>0.5677\u00b10.0045</td>\n      <td>0.991\u00b10.0051</td>\n      <td>0.9905\u00b10.0039</td>\n      <td>0.9022\u00b10.0375</td>\n      <td>0.0789\u00b10.009</td>\n      <td>0.8557\u00b10.0031</td>\n      <td>0.8499\u00b10.003</td>\n      <td>0.996\u00b10.0006</td>\n      <td>0.7931\u00b10.0285</td>\n    </tr>\n    <tr>\n      <td>VAE</td>\n      <td>0.9767\u00b10.0012</td>\n      <td><b>1.0\u00b10.0</b></td>\n      <td>0.9984\u00b10.0005</td>\n      <td>0.099\u00b10.0125</td>\n      <td>0.567\u00b10.0338</td>\n      <td><b>0.6257\u00b10.0005</b></td>\n      <td><b>0.5783\u00b10.0008</b></td>\n      <td>0.9994\u00b10.0001</td>\n      <td><b>0.9984\u00b10.0003</b></td>\n      <td><b>0.9386\u00b10.0021</b></td>\n      <td>0.0588\u00b10.0095</td>\n      <td>0.8558\u00b10.0004</td>\n      <td>0.8498\u00b10.0004</td>\n      <td><b>0.997\u00b10.0002</b></td>\n      <td>0.6949\u00b10.0069</td>\n    </tr>\n    <tr>\n      <td>JTN-VAE</td>\n      <td><b>1.0\u00b10.0</b></td>\n      <td><b>1.0\u00b10.0</b></td>\n      <td><b>0.9996\u00b10.0003</b></td>\n      <td>0.3954\u00b10.0234</td>\n      <td>0.9382\u00b10.0531</td>\n      <td>0.5477\u00b10.0076</td>\n      <td>0.5194\u00b10.007</td>\n      <td>0.9965\u00b10.0003</td>\n      <td>0.9947\u00b10.0002</td>\n      <td>0.8964\u00b10.0039</td>\n      <td>0.1009\u00b10.0105</td>\n      <td>0.8551\u00b10.0034</td>\n      <td>0.8493\u00b10.0035</td>\n      <td>0.976\u00b10.0016</td>\n      <td>0.9143\u00b10.0058</td>\n    </tr>\n    <tr>\n      <td>LatentGAN</td>\n      <td>0.8966\u00b10.0029</td>\n      <td><b>1.0\u00b10.0</b></td>\n      <td>0.9968\u00b10.0002</td>\n      <td>0.2968\u00b10.0087</td>\n      <td>0.8281\u00b10.0117</td>\n      <td>0.5371\u00b10.0004</td>\n      <td>0.5132\u00b10.0002</td>\n      <td>0.9986\u00b10.0004</td>\n      <td>0.9972\u00b10.0007</td>\n      <td>0.8867\u00b10.0009</td>\n      <td>0.1072\u00b10.0098</td>\n      <td>0.8565\u00b10.0007</td>\n      <td>0.8505\u00b10.0006</td>\n      <td>0.9735\u00b10.0006</td>\n      <td>0.9498\u00b10.0006</td>\n    </tr>\n  </tbody>\n</table>\n\n\nFor comparison of molecular properties, we computed the Wasserstein-1 distance between distributions of molecules in the generated and test sets. Below, we provide plots for lipophilicity (logP), Synthetic Accessibility (SA), Quantitative Estimation of Drug-likeness (QED) and molecular weight.\n\n|logP|SA|\n|----|--|\n|![logP](images/logP.png)|![SA](images/SA.png)|\n|weight|QED|\n|![weight](images/weight.png)|![QED](images/QED.png)|\n"
      },
      "source": "https://raw.githubusercontent.com/molecularsets/moses/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "PyPi",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "The simplest way to install MOSES (models and metrics) is to install [RDKit](https://www.rdkit.org/docs/Install.html): `conda install -yq -c rdkit rdkit` and then install MOSES (`molsets`) from pip (`pip install molsets`). If you want to use LatentGAN, you should also install additional dependencies using `bash install_latentgan_dependencies.sh`.\n\nIf you are using Ubuntu, you should also install `sudo apt-get install libxrender1 libxext6` for RDKit.\n"
      },
      "source": "https://raw.githubusercontent.com/molecularsets/moses/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Docker",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "1. Install [docker](https://docs.docker.com/install/) and [nvidia-docker](https://github.com/nvidia/nvidia-docker/wiki/Installation-(version-2.0)).\n\n2. Pull an existing image (4.1Gb to download) from DockerHub:\n\n```bash\ndocker pull molecularsets/moses\n```\n\nor clone the repository and build it manually:\n\n```bash\ngit clone https://github.com/molecularsets/moses.git\nnvidia-docker image build --tag molecularsets/moses moses/\n```\n\n3. Create a container:\n```bash\nnvidia-docker run -it --name moses --network=\"host\" --shm-size 10G molecularsets/moses\n```\n\n4. The dataset and source code are available inside the docker container at /moses:\n```bash\ndocker exec -it molecularsets/moses bash\n```\n"
      },
      "source": "https://raw.githubusercontent.com/molecularsets/moses/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Manually",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "Alternatively, install dependencies and MOSES manually.\n\n1. Clone the repository:\n```bash\ngit lfs install\ngit clone https://github.com/molecularsets/moses.git\n```\n\n2. [Install RDKit](https://www.rdkit.org/docs/Install.html) for metrics calculation.\n\n3. Install MOSES:\n```bash\npython setup.py install\n```\n\n4. (Optional) Install dependencies for LatentGAN:\n```bash\nbash install_latentgan_dependencies.sh\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/molecularsets/moses/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9690277749334721,
      "result": {
        "original_header": "Benchmarking your models",
        "type": "Text_excerpt",
        "value": "* Install MOSES as described in the previous section. \n"
      },
      "source": "https://raw.githubusercontent.com/molecularsets/moses/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9812151770060217,
      "result": {
        "original_header": "End-to-End launch",
        "type": "Text_excerpt",
        "value": "You can specify the GPU device index as `cuda:n` (or `cpu` for CPU) and/or model by running:\n```bash\npython scripts/run.py --device cuda:1 --model aae\n``` \nFor more details run `python scripts/run.py --help`. \nYou can reproduce evaluation of all models with several seeds by running:\n```bash\nsh scripts/run_all_models.sh\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/molecularsets/moses/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9823007311926677,
      "result": {
        "original_header": "Training",
        "type": "Text_excerpt",
        "value": "```bash\npython scripts/train.py <model name> \\\n       --train_load <train dataset> \\\n       --model_save <path to model> \\\n       --config_save <path to config> \\\n       --vocab_save <path to vocabulary>\n``` \nTo get a list of supported models run `python scripts/train.py --help`. \n"
      },
      "source": "https://raw.githubusercontent.com/molecularsets/moses/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.965209442116663,
      "result": {
        "original_header": "Generation",
        "type": "Text_excerpt",
        "value": "```bash\npython scripts/sample.py <model name> \\\n       --model_load <path to model> \\\n       --vocab_load <path to vocabulary> \\\n       --config_load <path to config> \\\n       --n_samples <number of samples> \\\n       --gen_save <path to generated dataset>\n``` \nTo get a list of supported models run `python scripts/sample.py --help`. \n"
      },
      "source": "https://raw.githubusercontent.com/molecularsets/moses/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9717115916644872,
      "result": {
        "original_header": "Evaluation",
        "type": "Text_excerpt",
        "value": "```bash\npython scripts/eval.py \\\n       --ref_path <reference dataset> \\\n       --gen_path <generated dataset>\n``` \nFor more details run `python scripts/eval.py --help`.\n \n"
      },
      "source": "https://raw.githubusercontent.com/molecularsets/moses/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.9478416282586937,
      "result": {
        "original_header": "Benchmarking your models",
        "type": "Text_excerpt",
        "value": "* Get `train`, `test` and `test_scaffolds` datasets using the following code:\n```python\nimport moses\n\ntrain = moses.get_dataset('train')\ntest = moses.get_dataset('test')\ntest_scaffolds = moses.get_dataset('test_scaffolds')\n```\n* You can use a standard torch [DataLoader](https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader) in your models. We provide a simple `StringDataset` class for convenience:\n```python\nfrom torch.utils.data import DataLoader\nfrom moses import CharVocab, StringDataset\n\ntrain = moses.get_dataset('train')\nvocab = CharVocab.from_data(train)\ntrain_dataset = StringDataset(vocab, train)\ntrain_dataloader = DataLoader(\n    train_dataset, batch_size=512,\n    shuffle=True, collate_fn=train_dataset.default_collate\n)\n\nfor with_bos, with_eos, lengths in train_dataloader:\n    ...\n```\n* Calculate metrics from your model's samples. We recomend sampling at least `30,000` molecules:\n```python\nimport moses\nmetrics = moses.get_all_metrics(list_of_generated_smiles)\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/molecularsets/moses/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8971952277928059,
      "result": {
        "original_header": "End-to-End launch",
        "type": "Text_excerpt",
        "value": "You can run pretty much everything with:\n```bash\npython scripts/run.py\n```\nThis will **split** the dataset, **train** the models, **generate** new molecules, and **calculate** the metrics. Evaluation results will be saved in `metrics.csv`. \nFor more details run `python scripts/run.py --help`. \n"
      },
      "source": "https://raw.githubusercontent.com/molecularsets/moses/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9138734049902028,
      "result": {
        "original_header": "Training",
        "type": "Text_excerpt",
        "value": "```bash\npython scripts/train.py <model name> \\\n       --train_load <train dataset> \\\n       --model_save <path to model> \\\n       --config_save <path to config> \\\n       --vocab_save <path to vocabulary>\n``` \nTo get a list of supported models run `python scripts/train.py --help`. \nFor more details of certain model run `python scripts/train.py <model name> --help`.\n \n"
      },
      "source": "https://raw.githubusercontent.com/molecularsets/moses/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8837026804066599,
      "result": {
        "original_header": "Generation",
        "type": "Text_excerpt",
        "value": "```bash\npython scripts/sample.py <model name> \\\n       --model_load <path to model> \\\n       --vocab_load <path to vocabulary> \\\n       --config_load <path to config> \\\n       --n_samples <number of samples> \\\n       --gen_save <path to generated dataset>\n``` \nTo get a list of supported models run `python scripts/sample.py --help`. \nFor more details of certain model run `python scripts/sample.py <model name> --help`.\n \n"
      },
      "source": "https://raw.githubusercontent.com/molecularsets/moses/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9073986979992448,
      "result": {
        "original_header": "Evaluation",
        "type": "Text_excerpt",
        "value": "```bash\npython scripts/eval.py \\\n       --ref_path <reference dataset> \\\n       --gen_path <generated dataset>\n``` \nFor more details run `python scripts/eval.py --help`.\n \n"
      },
      "source": "https://raw.githubusercontent.com/molecularsets/moses/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/molecularsets/moses/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "benchmark, drug-discovery, generative-models, machine-learning"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Copyright 2018 Insilico Medicine, Inc\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/molecularsets/moses/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "moses"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "molecularsets"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 218016,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 1592,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 819,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/molecularsets/moses/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_papers": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/1811.12823"
      },
      "source": "https://raw.githubusercontent.com/molecularsets/moses/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 09:01:08",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 821
      },
      "technique": "GitHub_API"
    }
  ]
}